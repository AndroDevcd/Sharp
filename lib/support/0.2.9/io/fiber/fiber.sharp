mod std.io.fiber;

import std.io;
import platform.kernel;

class fiber {

   private fiber() {}

   name : string = "";
   id := -1;
   main : (object[])(var);
   exit_val : var;
   bound_thread : thread;

   fiber(name : string, main : (object[])(var)) {
      self->name = name;
      self->main = main;
   }

   fiber(name : string, t: thread, main : (object[])(var)) {
      self->name = name;
      self->main = main;
      self->bound_thread = t;
   }

   def start(args: object[]) {
      if(id == -1)
         id = vm.start_fiber(self, bound_thread, args, fiber_main);
   }

   def suspend() : var {
      return vm.suspend_fiber(self);
   }

   def unsuspend() : var {
      return vm.unsuspend_fiber(self);
   }

   def kill() : var {
      result := vm.kill_fiber(self);
      if(result == 0)
         id = -1;
      return result;
   }

   def bind(t: thread) : var {
      result := vm.bind_fiber(self, t);
      if(result == 0)
         bound_thread = t;
      return result;
   }

   def join() {
      while(true) {
         if(id == -1)
            break;
         delay(10);
      }
   }

   def unbind() : var {
      return vm.bind_fiber(self, null);
   }

   def get_state() : fiber_state {
      state := vm.get_fiber_state(self);

      when(state) {
         0 -> {
            return FIB_CREATED;
         }
         1 -> {
            return FIB_RUNNING;
         }
         2 -> {
            return FIB_SUSPENDED;
         }
         3 -> {
            return FIB_KILLED;
         }
         else -> {
            return FIB_INVALID;
         }
      }
   }

   static def current() : fiber {
      return vm.current_fiber();
   }

   static def poll(t: thread) : var {
      return vm.get_bound_fibers(t);
   }

   private static def fiber_main(args : object[]) {
      platform.tls_init();
      fib := current();

      try {
         fib.exit_val = fib.main(args);
      } catch(t: throwable) {
         fib.id = -1;
         fib.exit_val = 300;
         throw t;
      }

      fib.id = -1;
   }
}

def delay(mills: var) {
   asm {
      loadl ebx, {mills}
      int 0x44
   }
}