mod std.io.task;

import platform.kernel;
import std.math;
import std.io;
import std.io.fiber;

private short_term_threads : var;
private long_term_threads : var;
private max_threads : var;
private scheduler : thread;

private const FIBER_THRESHOLD_TRIGGER  := 15; // create a new thread after 15 fibers

protected def start_scheduler() {
    lock(launcher) {
        if(max_threads == 0)
            calculate_max_threads();
        scheduler = new thread("task_scheduler", scheduler_main, launcher.long_term_pool);
        scheduler.start(null);
	}
}

private def calculate_max_threads() {
    n_cores := vm.hardware_concurrency();
    n_cores *= 2;
    n_cores -= 4;

    if(n_cores > 2) {
        short_term_threads = round(n_cores * 0.75);
        long_term_threads = round(n_cores * 0.25);
    }

    if(short_term_threads == 0)
        short_term_threads = 1;

    if(long_term_threads == 0)
        long_term_threads = 1;

    max_threads = short_term_threads + long_term_threads;
}

def set_thread_max(max: var) {
    lock(launcher) {
        if(scheduler != null) {
            throw new ill_arg_except("cannot modify max thread count after task library has started, " +
             "try calling this before your first task");
        }

        if(max >= 2) {
            if(max > 2) {
                short_term_threads = round(max * 0.75);
                long_term_threads = round(max * 0.25);
            }

            if(short_term_threads == 0)
                short_term_threads = 1;

            if(long_term_threads == 0)
                long_term_threads = 1;

            max_threads = max;
        } else {
            throw new ill_arg_except("cannot have less than 2 max threads");
        }
    }
}

def get_thread_max() : var {
    lock(launcher) {
        if(max_threads == 0)
            calculate_max_threads();
        return max_threads;
    }
}

private def scheduler_main(args : object[]) : var
{
	jobs := launcher.job_queue;
	const SPIN_COUNT := 12250;
	spins_left := SPIN_COUNT;
	while(true)
	{
		thread.yield();
		for(i := 0; i < jobs.size(); i++) {
        	scheduled_job := jobs.at(i);

        	if(scheduled_job.delay_time != 0) {
        		if(time.mills_time() >= scheduled_job.delay_time) {
        			scheduled_job.delay_time = 0;
        			result := execute_job(scheduled_job);

        			if(result && !scheduled_job.has_timeout) {
                        jobs.remove(scheduled_job, { it, it2 -> return it.id == it2.id; });
                        i--;
        			} else if(!result) break;
        		}
        	} else if(scheduled_job.has_timeout) {
        	    if(scheduled_job.host == null) {
        	        if(!execute_job(scheduled_job))
        	           break;
        	    }

        		if(scheduled_job.state == active && time.mills_time() >= (scheduled_job.start_time + scheduled_job.timeout)) {
                    while(scheduled_job.next_task == null){} // wait until the next task is updated
                    scheduled_job.cancel();
        			launcher.cleanup_job(scheduled_job);
                    i--;
        		}
        	} else {
        	    if(execute_job(scheduled_job)) {
                    jobs.remove(scheduled_job, { it, it2 -> return it.id == it2.id; });
                    i--;
        		} else break;
        	}
        }

        if(spins_left-- <= 0) {
            spins_left = SPIN_COUNT;
            kill_threads();
        }

		thread.sleep(5);
	}
	return 0;
}

fiber_count := 1e+10;
host : thread;
pool : thread_group;
private def get_host(long_running : var) : thread {
	if(long_running) {
		pool = launcher.long_term_pool;
	} else
		pool = launcher.short_term_pool;

    host = null;
    pool.find({ t ->
        if(t == scheduler) return false;

        if(!t.is_active() || fiber.poll(t) >= 1) {
            if(host != null && fiber.poll(host) > fiber.poll(t)) {
               host = t;
            }
            else host = t;
        }

        return false;
    });

    if(host != null && fiber.poll(host) >= FIBER_THRESHOLD_TRIGGER) {
       if((long_running && long_term_threads > 0) || short_term_threads > 0) {
           host = null;
       }
    }


    // can we creat a new host?
    if(host == null) {
        if(long_running) {
            if(long_term_threads > 0) {
                long_term_threads--;
                host = new thread("long_term_worker_thread#${pool.size()+1}", job.job_main, pool);
            }
        } else {
            if(short_term_threads > 0) {
                short_term_threads--;
                host = new thread("worker_thread#${pool.size()+1}", job.job_main, pool);
            }
        }
    }

	return host;
}

avail_threads : var;
private def kill_threads() {
	if(max_threads < 3)
	   return;

	pool = launcher.long_term_pool;

    avail_threads = 0;
    pool.find({ t ->
            if(t == scheduler) return false;

            if(!t.is_active() || fiber.poll(t) > 1)
               avail_threads++;

            return false;
        });

	if(avail_threads < 1)
	   return;

    host =
        pool.find({ t ->
            if(t == scheduler) return false;

            return t.is_active() && fiber.poll(t) == 1; // kill any threads idling
        });

    // kill unused threads
    if(host != null) {
       host.interrupt();
    }

	pool = launcher.short_term_pool;

    avail_threads = 0;
    pool.find({ t ->
            if(!t.is_active() || fiber.poll(t) > 1)
               avail_threads++;

            return false;
        });

	if(avail_threads < 1)
	   return;

    host =
        pool.find({ t ->
            return t.is_active() && fiber.poll(t) == 1; // kill any threads idling for more than 3 minutes
        });

    // kill unused threads
    if(host != null) {
       host.interrupt();
    }
}

protected def execute_synchronous(scheduled_job : job) {
	if(scheduled_job.delay_time != 0) {
		future := scheduled_job.delay_time - time.mills_time();
		if(future > 0) delay(future);
	}
	scheduled_job.execute();
}

protected def execute_job(scheduled_job : job) : var {
    if(scheduled_job.unconfined) {
       scheduled_job.execute_async();
       return true;
    } else {
	   fib_host := scheduled_job.host == null ? get_host(scheduled_job.long_term)
	       : scheduled_job.host;

	   if(fib_host != null) {
	       scheduled_job.host = fib_host;
	       if(scheduled_job.execute_async() != 0) {
	          scheduled_job.host = null;
	          return false;
	       }

	       return true;
	   } else return false;
	}
}

