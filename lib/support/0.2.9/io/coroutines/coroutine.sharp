mod std.io.coroutines;

launcher : job_master = new job_master();

def finish() {
    throw new cancellation_exception();
}

class coroutine {
    static def with_timeout(mills_time : var) : coroutine_builder {
        scheduled_job := launcher.create_job();
        builder := new coroutine_builder(scheduled_job, launcher);
        return builder.with_timeout(mills_time);
    }

    static def schedule(future : var) : coroutine_builder {
        scheduled_job := launcher.create_job();
        builder := new coroutine_builder(scheduled_job, launcher);
        return builder.schedule(future);
    }

    static def with_name(job_name : string) : coroutine_builder {
        scheduled_job := launcher.create_job(job_name);
        builder := new coroutine_builder(scheduled_job, launcher);
        return builder.with_name(job_name);
    }

    static def with_tag(tag_id : var) : coroutine_builder {
        scheduled_job := launcher.create_job();
        builder := new coroutine_builder(scheduled_job, launcher);
        return builder.with_tag(tag_id);
    }

    static def with_args(args : object[]) : coroutine_builder {
        scheduled_job := launcher.create_job();
        builder := new coroutine_builder(scheduled_job, launcher);
        return builder.with_args(args);
    }

	def recurring(tm : var, interval: time_unit) : coroutine_builder {
        scheduled_job := launcher.create_job();
        builder := new coroutine_builder(scheduled_job, launcher);
        return builder.recurring(tm, interval);
	}

	static def block() : coroutine_builder {
        scheduled_job := launcher.create_job();
        builder := new coroutine_builder(scheduled_job, launcher);
		return builder.block();
	}

	static def long_term() : coroutine_builder {
        scheduled_job := launcher.create_job();
        builder := new coroutine_builder(scheduled_job, launcher);
		return builder.long_term();
	}

    static def builder() : coroutine_builder {
        scheduled_job := launcher.create_job();
        builder := new coroutine_builder(scheduled_job, launcher);
        return builder;
    }

	public static def cancel_all_jobs_by_name(tag_id: var) {
	   launcher.cancel_jobs_by_tag(tag_id);
	}
}