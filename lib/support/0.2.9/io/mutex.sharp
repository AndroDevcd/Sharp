mod std.io;

import std.io.fiber;

class mutex {
   private lock_obj := new object[1]; // simple object that wont take too much memory
   private lockCount := 0;
   private currFiber := -1;

   def acquire() {
        asm {
            movl 0
            movn {mutex.lock_obj}
            lock
        }

        this_id := fiber.current().id;
        retry:
        while(currFiber != -1) {
           delay(2);

           if(currFiber == this_id)
              break;
        }

        currFiber = this_id;
        if(currFiber != this_id)
           goto retry;
        lockCount++;
   }

   /**
   * Lock the object
   */
   def release() {
        asm {
            movl 0
            movn {mutex.lock_obj}
            ulock
        }

        if(--lockCount <= 0)
           currFiber = -1;
        lock_obj._unlock();
   }
}