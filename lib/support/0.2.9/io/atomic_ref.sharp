mod std.io;

class atomic_ref<t> {
     value : t;
        get { lock(self) { return value; } }
        set val -> {
            lock(self) {
               value = val;
            }
        }

     atomic_ref(initial_val : t) {
        value = initial_val;
     }
	 
	 def write(write_func: (data: t)()) {
        lock(self) {
           try {
		      write_func(value);
		   } finally{
		      self->_unlock();
		   }
		}
	 }
	 
	 def write(write_func: (data: t, args: object[])(), args: object[]) {
        lock(self) {
           try {
		      write_func(value, args);
		   } finally{
		      self->_unlock();
		   }
		}
	 }
}