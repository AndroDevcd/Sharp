mod std.export;

import std.io;

class export_group {
   private data := new list<object>();
   private name : string = "anonymous_group";
   
   export_group(name: string) {
      self->name = name;
   }

   def write_var(val: var) {
      data.add(new double(val));
   }

   def write_double(val: double) {
      data.add(val);
   }

   def write_long(val: long) {
      data.add(val);
   }

   def write_int(val: int) {
      data.add(val);
   }

   def write_short(val: short) {
      data.add(val);
   }

   def write_char(val: char) {
      data.add(val);
   }

   def write_byte(val: byte) {
      data.add(val);
   }

   def write_bool(val: bool) {
      data.add(val);
   }

   def write_ulong(val: ulong) {
      data.add(val);
   }

   def write_uint(val: uint) {
      data.add(val);
   }

   def write_ushort(val: ushort) {
      data.add(val);
   }

   def write_uchar(val: uchar) {
      data.add(val);
   }

   def write_object(val: object) {
      data.add(val);
   }
   
   def empty_group() {
      throw new ill_state_except("there is no data left in the exported group");
   }
   
   def read_var() : var {
      if(data.empty())
         empty_group();
      return (data.pop_last() as double).get_value();
   }
   
   def read_double() : double {
      if(data.empty())
         empty_group();
      return data.pop_last() as double;
   }
   
   def read_long(val: long) : long {
      if(data.empty())
         empty_group();
      return data.pop_last() as long;
   }
   
   def read_int() : int {
      if(data.empty())
         empty_group();
      return data.pop_last() as int;
   }
   
   def read_short() : short {
      if(data.empty())
         empty_group();
      return data.pop_last() as short;
   }
   
   def read_char() : char {
      if(data.empty())
         empty_group();
      return data.pop_last() as char;
   }
   
   def read_byte() : byte {
      if(data.empty())
         empty_group();
      return data.pop_last() as byte;
   }
   
   def read_bool(val: bool) : bool {
      if(data.empty())
         empty_group();
      return data.pop_last() as bool;
   }
   
   def read_ulong() : ulong {
      if(data.empty())
         empty_group();
      return data.pop_last() as ulong;
   }
   
   def read_uint(val: uint) : uint {
      if(data.empty())
         empty_group();
      return data.pop_last() as uint;
   }
   
   def read_ushort() : ushort {
      if(data.empty())
         empty_group();
      return data.pop_last() as ushort;
   }
   
   def read_uchar() : uchar {
      if(data.empty())
         empty_group();
      return data.pop_last() as uchar;
   }
   
   def read_object() : object {
      if(data.empty())
         empty_group();
      return data.pop_last();
   }

   def export() : _int8[] {
      return _export(self);
   }
   
   def export_to(filename: string) : file {
      f := new file(filename);
      
      if(!f.exists())
         f.create();
      f.write(export());
      return f;
   }
   
   def import_(bytes: string) {
      result := _import(bytes) as export_group;
      data = result.data;
   }
   
   def import_from(filename: string) {
      f := new file(filename);
      import_(f.read());
   }
}