mod std;

import std.kernel;

/**                          
* Created by bknun on 6/7/2018            
* Description:                             
*/
public class ArrayList<T> {
    private T[] mData;

    private static const var DEFAULT_CAPACITY = 10;
    private static const var RESIZE_CAPACITY = 20;

    /**
    * Size to keep allocations at a low
    */
    private var size; // TODO: write a maxCapacity ver to have a limit on the data

    /**
    * payloadType represents the size of the expected DATA
    * that will be processed by the ArrayList<> class
    *
    * The higher the  class the more efficient the Array List will be with
    * allocating memory to be used and filled.
    * The lower the class the less efficient and memory hungry the allocations will
    * be at higher data volumes
    *
    * On the contrary however, smaller payload classes are said to be more efficient in the beginning of
    * adding items to the array as it will require less allocations to do so. For Instance a
    * ArrayList<var> with a size of 5k elements will make theoretically 100 allocations than a ArrayList class that
    * holds a higher payload class which might make 300 allocations in the beginning.
    *
    * Payload classes are as follows:
    * - PAYLOAD_SMALL   This is for lists expected to be less than 250k elements
    * - PAYLOAD_MEDIUM  This is for lists expected to be less than 5M elements
    * - PAYLOAD_LARGE   This is for lists expected to be 10M+ elements
    */
    private PayloadClass payloadClass;

    /**
     * Constructs an empty list.
     * with a default capacity of 10
     */
    public ArrayList() {
        /* data will be set to default capacity */
        mData = new T[DEFAULT_CAPACITY];
        payloadClass = PayloadClass.PAYLOAD_SMALL;
    }

    /**
     * Constructs an empty list.
     * with a pre-set capacity
     */
    public ArrayList(var startingCapacity) {
        /* data will be set to default capacity */
        mData = new T[startingCapacity];
        payloadClass = PAYLOAD_SMALL;
    }

    /**
     * Constructs an empty list.
     * with a pre-set capacity and payload class
     */
    public ArrayList(var startingCapacity, PayloadClass pc) {
        /* data will be set to default capacity */
        mData = new T[startingCapacity];
        payloadClass = pc;
    }

    /**
     * Constructs an empty list.
     * with a pre-set payload class
     */
    public ArrayList(PayloadClass pc) {
        /* data will be set to default capacity */
        mData = new T[DEFAULT_CAPACITY];
        payloadClass = pc;
    }

    /**
    * Resets the working payload class
    * this function allows you to change the speed/memory
    * performance of how your data is being processed
    */
    public def setPayloadClass(PayloadClass pc) {
        payloadClass = pc;
    }

    /**
     * Returns the number of elements in this list.
     *
     */
    public def size() : var {
        return size;
    }

    /**
     * Returns true if this list contains no elements.
     *
     */
    public def empty() : var {
        return size == 0;
    }

    /**
     * Returns an array containing all of the elements in this list
     * in proper sequence (from first to last element).
     *
     */
    public def toArray() : T[] {
        if(size == 0) return null;
        return ((T[]) copyOf(mData, size));
    }

    /**
     * Returns the element at the specified position in this list.
     *
     */
    public def get(var index) : T {
        if (index >= size)
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));

        return mData[index];
    }

    /**
     * Returns the last element in this list.
     *
     */
    public def last() : T {
        return get(size-1);
    }

    /**
     * Replaces the element at the specified position in this list with
     * the specified element.
     *
     */
    public def set(var index, T element) : T {
        if (index >= size)
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));

        T oldValue = mData[index];
        mData[index] = element;
        return oldValue;
    }

    /**
     * Expand the list to hold more data
     *
     * The list is oversized to reduce the ammount of allocations
     * required by the system
     */
    private def expand() {
        realloc(mData, sizeof(mData) + (sizeof(mData) >> payloadClass.getValue()) + RESIZE_CAPACITY);
    }

    /**
     * Shrink the list to hold more data
     */
    private def shrink() {
        if(size <= sizeof(mData) && size > 0) {
            size--;

            if(sizeof(mData) == 0 || size == 0) {
                clear();
            }
        }
    }

    /**
      * Appends the specified elements inside the provided list to the end of this list.
      *
      * @param e elements to be appended to this list
      * @return <tt>true</tt> (as specified by {@link Collection#add})
      */
     public def addAll(ArrayList<T> lst) {
        T[] arry = lst.data();
        mData = (T[])copyOf(arry, sizeof(arry));
        size = sizeof(mData);
     }

    /**
      * Appends the specified element to the end of this list.
      *
      * @param e element to be appended to this list
      * @return <tt>true</tt> (as specified by {@link Collection#add})
      */
     public def add(T e) {
        if(size >= sizeof(mData))
            expand();
         mData[size++] = e;
     }


    /**
      * Shifts the list back 1 element
      *
      * @param e element to be appended to this list
      * @return <tt>true</tt> (as specified by {@link Collection#add})
      */
     public def popBack() {
         shrink();
     }

    /**
     * Inserts the specified element at the specified position in this
     * list. Shifts the element currently at that position (if any) and
     * any subsequent elements to the right (adds one to their indices).
     *
     */
     public def insert(var pos, T value) {
         if(pos>size || pos < 0)
            throw new IndexOutOfBoundsException(outOfBoundsMsg(pos));

         if(size == 0) {
             add(value);
         } else {
            if(size >= sizeof(mData))
                expand();
            size++;
             for(var i = size - 1; i > pos; i--)
                mData[i] = mData[i-1];
             mData[pos] = value;
         }

     }

    /**
     * Removes the element at the specified position in this list.
     * Shifts any subsequent elements to the left (subtracts one from their
     * indices).
     *
     */
     public def remove(var pos) {
         if(pos>size || pos < 0)
            throw new IndexOutOfBoundsException(outOfBoundsMsg(pos));

         if(size==1){
             size--;
         }
         else if(size==2) {
             if(pos==0) {
                 mData[0]=mData[1];
             }
             shrink();
         } else {
             var newLen=size-1;
             for(var i = pos; i < newLen; i++)
                 mData[i] = mData[i+1];

             shrink();
         }
     }

     /**
      * Live reference to the data in the list
      */
     public def data() : T[] {
        return mData;
     }

     /**
      * Removes all of the elements from this list.  The list will
      * be empty after this call returns.
      */
     public def clear() {
         // clear to let GC do its work
         if(sizeof(mData) > DEFAULT_CAPACITY) {
             mData = new T[DEFAULT_CAPACITY];
         }

         size = 0;
     }

    /**
     * Constructs an IndexOutOfBoundsException detail message.
     * Of the many possible refactorings of the error handling code,
     * this "outlining" performs best with both server and client VMs.
     */
    private def outOfBoundsMsg(var index) : string {
        return "Index: " + index + ", size: " + size;
    }

}
