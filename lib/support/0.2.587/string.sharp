mod std;

/**
 * Created by BraxtonN on 5/17/2018.
 */
public class string {
    /*this will hold our string */
        private var[] data;
        private static var varFmt = 'g';
        private static var precision = 0; // default presicion

        public string( var[] immstr )
        {
            if(immstr == null) {
                data = null;
            } else {
                append(immstr);
            }

        }

        public string( var ch )
        {
            append(ch);
        }

        public string( char[] immstr )
        {
            if(immstr == null) {
                data = null;
            } else {
                var[] chs = new var[sizeof(immstr)];
                var iter;
                foreach(char c : immstr) {
                    chs[iter++] = c.getValue();
                }

                append(chs);
            }

        }

        public string(string str )
        {
            self->string(str.data);
        }

        public string( var[] immstr, var offset )
        {
            if(immstr == null) {
                data = null;
            } else {
                data = (var[])memcpy(immstr, offset, sizeof(immstr));
            }
        }

        public string( var[] immstr, var offset, var endIndex )
        {
            if(immstr == null) {
                data = null;
            } else {
                data = (var[])memcpy(immstr, offset, endIndex);
            }
        }

        public def replace( var pos, var replaceChar ) : string
        {
            if(pos >= sizeof(data)) {
                throw new RuntimeErr("Index out of bounds exception");
            }

            data[pos] = replaceChar;
            return self;
         }

        def append(var char) : string
        {
            if(data == null)
                data = new var[1];
            else
                realloc(data, sizeof(data) + 1);

            data[sizeof(data) - 1] = char;
            return self;
        }

        def append(char c) : string
        {
            return append(c.getValue());
        }

        def append(var[] immstr) : string
        {
            if(immstr == null) return self;

            var iter=sizeof(data);

            if(data == null)
                data = new var[sizeof(immstr)];
            else
                realloc(data, sizeof(data) + sizeof(immstr));

            for(var i = 0; i < sizeof(immstr); i++)
            {
                data[iter++] = (_int16)immstr[i];
            }

            return self;
        }


        public def append(var[] immstr, var len) : string
        {
            if(immstr == null || len <= 0 || len > sizeof(immstr)) return self;

            var iter=sizeof(data);

            if(data == null)
                data = new var[len];
            else
                realloc(data, sizeof(data) + len);

            for(var i = 0; i < len; i++)
            {
                data[iter++] = (_int16)immstr[i];
            }

            return self;
        }

        public def at( var pos ) : var
        {
            if(pos >= sizeof(data)) {
                throw new RuntimeErr("Index out of bounds Array: size " + sizeof(data)
                       + " at index pos " + pos);
            }

            return data[pos];
        }

        public static def fmt( var _fmt ) {
            varFmt = _fmt;
            if(_fmt != 'f' && _fmt != 'F') precision = 0;
        }

        public static def precision( var prec ) {
            if(prec < 0 || prec > 16)
                throw new IllegalArgumentException("invalid precision: " + prec);
            precision = prec;
        }

        public def operator+( var[] immstr ) : string
        {
            string s = new string(data);
            if(immstr != null)
                return s.append(immstr);
            else
                return s.append("null");
        }

        public def operator+( Printable o ) : string
        {
            string s = new string(data);
            var[] tmp;
            if(o != null) tmp =  o.toString().data;

            if(tmp != null)
                return s.append(tmp);
            else
                return s.append("null");
        }

        public def operator==( string str ) : var
        {
            if(str.size() != sizeof(data)) {
                return false;
            }

            var iter;
            foreach(var char : data) {
                if(char != str.at(iter++)) {
                    return false;
                }
            }

            return true;
        }

        public def operator!=( string str ) : var {
            return !operator==(str);
        }

        public def operator==( var[] str ) : var
        {
            if(sizeof(str) != sizeof(data)) {
                return false;
            }

            var iter;
            foreach( var char : data ) {
                if(char != str[iter++]) {
                    return false;
                }
            }

            return true;
        }

        public def operator!=( var[] str ) : var {
            return !operator==(str);
        }

        public def operator=( var[] immstr )
        {
            if (immstr == null) data = null;
            else
                data = (var[])copyOf(immstr, sizeof(immstr));
        }

        public def operator+( var num ) : string
        {
            string s = new string(data);
            s.append(parse(num).toArray());

            return s;
        }

        public def operator+=( var num ) : string
        {
            return append(parse(num).toArray());
        }

        public def operator+=( Printable o ) : string
        {
            string s = o.toString();
            if(s != null && s.data != null)
                return append(s.data);
            else
                return append("null");
        }

        public def operator+=( var[] immstr ) : string
        {
            return append(immstr);
        }

        public def operator+=( string str ) : string
        {
            return append(str.toArray());
        }

        public def toArray() : var[]
        {
            if(data == null) return null;
            return (var[])copyOf(data, sizeof(data));
        }

        public static def parse( var number ) : string
        {
            return new string(snprintf(varFmt, number, precision));
        }

        public def substring(var startIndex) : string {
            if((startIndex >= size()) || (startIndex < 0))
                return new string("");


            string s = new string();
            s.data = (var[])memcpy(data, startIndex, size()-1);
            return s;
        }

        public def substring(var startIndex, var stopIndex) : string {
            if((startIndex >= size()) || (startIndex < 0))
                return new string("");
            if(stopIndex < startIndex)
                throw new IllegalArgumentException(
                    "stopIndex: " + stopIndex + " cannot be less than startIndex: " + startIndex);


            string s = new string();
            s.data = (var[])memcpy(data, startIndex, stopIndex);
            return s;
        }

        public static def parseInt(string s) : var {
            var i = 0;
            var number = 0;
            var isNegative = false;
            var len = s.size();
            if( s.at(0) == '-' ){
                isNegative = true;
                i = 1;
            }
            while( i < len ){
                if(!char.isDigit(s.at(i))) {
                    throw new IllegalArgumentException(
                        "illegal char in string: " + new char(s.at(i)));
                }

                number *= 10;
                number += ( s.at(i++) - '0' );
            }
            if( isNegative )
                number = -number;
            return number;
        }

        /**
         * Tests if the substring of this string beginning at the
         * specified index starts with the specified prefix.
         *
         */
        public def startsWith(string prefix) : var {
            // Note: toffset might be near -1>>>1.
            if (prefix == null || (sizeof(prefix.data) > sizeof(data))) {
                return false;
            }
            for(var i = 0; i < sizeof(prefix.data); i++)
            {
                if(data[i]!=prefix.data[i])
                    return false;
            }
            return true;
        }

        public def find(string str) : var {
            if(str.size() > size()) {
                return false;
            }

            var endIndex;
            for(var i = 0; i < size(); i++) {
                endIndex = i+str.size();
                if(substring(i, endIndex > size() ? size() : endIndex) == str)
                    return true;
            }

            return false;
        }

        public def endsWith(string postFix) : var {
            if(postFix.size() > size())
                return false;

            var ext = postFix.size();
            string extension = new string();
            for(var i = size() - ext; i < size(); i++){
                extension += new char(at(i));
            }

            return extension == postFix;
        }


        public static def toLower(string s) : string {
            string newstr = new string();
            var[] chs = s.getData();
            foreach(var c : chs) {
                newstr.append(char.toLower(c));
            }
            return newstr;
        }

        public static def toUpper(string s) : string {
            string newstr = new string();
            var[] chs = s.getData();
            foreach(var c : chs) {
                newstr += char.toUpper(c);
            }
            return newstr;
        }

        public def empty() : var {
            return sizeof(data) == 0;
        }
        
        public def size() : var
        {
            return sizeof(data);
        }

        public def getData() : var[] {
            return data;
        }

        public def delegate::toString() : string {
            return new string(data);
        }

        def delegate::hash() : var {
            var hash;

            if(data != null) {
                hash = data[0] + (Math.pow(sizeof(data)-1, 5) << 6);

                if(sizeof(data) >= 1) {
                    hash += (Math.pow(sizeof(data)-1, 3) << 8);

                    for(var i = 2; i < sizeof(data); i++) {
                        if(i < 32) {
                            hash += data[i] + i;
                        } else
                            break;
                    }
                }
            }

            return hash;
        }
}
