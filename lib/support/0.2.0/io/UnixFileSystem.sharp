mod std.io;

import std;

/**
 * UnixFileSystem represents the high level version of the operations
 * that you can invoke on a linux file system. Not much needs to be changed in
 * this file other than normalizing the path name
 */
public class UnixFileSystem base FileSystem {
    private var slash;

    public UnixFileSystem() {
        slash = '/';
    }

    public def delegate::getPathSeparator() : var {
        return slash;
    }

    /**
    * Make sure we know that our path has the correct
    * path seperators to be accessed
    */
    public def delegate::normalize(string pathname) : string {
        var n = pathname.size();
        var[] normalized = pathname.toArray();
        string name = "";
        char current = 0, prevChar = 0;
        for (var i = 0; i < pathname.size(); i++) {
            current = normalized[i];
            // Remove duplicate slashes.
            if (current == '/' && prevChar == '/')
                continue;
            else if(current == '\\')  {
                if(prevChar != '\\')
                    name += '/';
            }
            else
                name += current;

            prevChar = current;
        }

//        System.println("name " + name);
        return name;
    }

     /**
      * Return the simple boolean attributes for the file or directory denoted
      * by the given abstract pathname, or zero if it does not exist or some
      * other I/O error occurs.
      */
     public def delegate::getFileAttributes(File f) : var {
        var[] path = f.getAbsolutePath().toArray();
        var attrs;

        /*
        * This will perform the os call to request the
        * file attributes of the given abstract pathname
        */
        asm(
            "pushl <path>           "
            "int 0xb2               "
            "smovr_2 %ebx,<attrs>   "
        );

        return attrs;
     }


     /**
      * Check whether the file or directory denoted by the given abstract
      * pathname may be accessed by this process.  The second argument specifies
      * which access, ACCESS_READ, ACCESS_WRITE or ACCESS_EXECUTE, to check.
      * Return false if access is denied or an I/O error occurs
      */
     public def delegate::checkAccess(File f, var access) : var {
        var[] path = f.getAbsolutePath().toArray();
        var result;

        /*
        * This will perform the os call to request the
        * file access stats of the given abstract pathname
        */
        asm(
            "pushl <path>           "
            "loadl %ebx,<access>    "
            "int 0xb1               "
            "smovr_2 %ebx,<result>  "
        );

        return result;
     }
}
