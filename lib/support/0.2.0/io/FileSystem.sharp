mod std.io;

/**
 * Created by BraxtonN on 5/25/2018.
 */
class FileSystem {

    /**
    * Get current path seperator based on os
    *
    * linux /
    * windows //
    */
    public def delegate::getPathSeparator() : string;

    /**
    * Make sure we know that our path has the correct
    * path seperators to be accessed
    */
    public def delegate::normalize(string path) : string;

     /**
      * Resolve the given abstract pathname into absolute form.  Invoked by the
      * getAbsolutePath and getCanonicalPath methods in the File class.
      */
     public def resolve(File f) : string {
        /* native code here */
     }


    /* Constants for file attributes */
    public static const var FILE_EXISTS    = 0x01;
    public static const var FILE_REGULAR   = 0x02;
    public static const var FILE_DIRECTORY = 0x04;
    public static const var FILE_HIDDEN    = 0x08;

     /**
      * Return the simple boolean attributes for the file or directory denoted
      * by the given abstract pathname, or zero if it does not exist or some
      * other I/O error occurs.
      */
     public def delegate::getFileAttributes(File f) : var;

     /* Constants for file access flags */
     public static const var ACCESS_READ    = 0x04;
     public static const var ACCESS_WRITE   = 0x02;
     public static const var ACCESS_EXECUTE = 0x01;
     public static const var ACCESS_OK      = 0x08;

     /**
      * Check whether the file or directory denoted by the given abstract
      * pathname may be accessed by this process.  The second argument specifies
      * which access, ACCESS_READ, ACCESS_WRITE or ACCESS_EXECUTE, to check.
      * Return false if access is denied or an I/O error occurs
      */
     public def delegate::checkAccess(File f, var access) : var;

     /**
      * Set on or off the access permission (to owner only or to all) to the file
      * or directory denoted by the given abstract pathname, based on the parameters
      * enable, access and oweronly.
      */
     public def setPermission(File f, var access, var enable, var owneronly) : var {
        // native code here
     }

     /**
      * Return the time at which the file or directory denoted by the given
      * abstract pathname was last modified, or zero if it does not exist or
      * some other I/O error occurs.
      */
     public def getLastModifiedTime(File f) : var {
        // native code here
     }

     /**
      * Return the length in bytes of the file denoted by the given abstract
      * pathname, or zero if it does not exist, is a directory, or some other
      * I/O error occurs.
      */
     public def getLength(File f) : var {
        // native code here
     }


    /**
     * Create a new empty file with the given pathname.  Return
     * true if the file was created and false if a
     * file or directory with the given pathname already exists.  Throw an
     * IOErr if an I/O error occurs.
     */
    public def createFile(string pathname) : var {
        // native code here
    }

    /**
     * Delete the file or directory denoted by the given abstract pathname,
     * returning true if and only if the operation succeeds.
     */
    public def delete(File f) : var {
        // native code here
    }

    /**
     * List the elements of the directory denoted by the given abstract
     * pathname.  Return an array of strings naming the elements of the
     * directory if successful; otherwise, return null.
     */
    public def list(File f) : string[] {
        // native code here
    }

    /**
     * Create a new directory denoted by the given abstract pathname,
     * returning true if and only if the operation succeeds.
     */
    public def createDirectory(File f) : var {
        // native code here
    }

    /**
     * Rename the file or directory denoted by the first abstract pathname to
     * the second abstract pathname, returning true if and only if
     * the operation succeeds.
     */
    public def rename(File f1, File f2) : var {
        // native code here
    }

    /**
     * Set the last-modified time of the file or directory denoted by the
     * given abstract pathname, returning true if and only if the
     * operation succeeds.
     */
    public def setLastModifiedTime(File f, var time) : var {
        // native code here
    }

    /**
     * Mark the file or directory denoted by the given abstract pathname as
     * read-only, returning true if and only if the operation
     * succeeds.
     */
    public def setReadOnly(File f) : var {

    }

    /* -- Disk usage -- */
    public static const var SPACE_TOTAL  = 0;
    public static const var SPACE_FREE   = 1;
    public static const var SPACE_USABLE = 2;

    public def getSpace(File f, var t) : var {
        // native code here
    }
}
