mod std;

/**                          
* Created by bknun on 6/7/2018            
* Description:                             
*/
public class Vector<T> {
    private T[] mData;

    private static const var DEFAULT_CAPACITY = 10;
    private var RESIZE_CAPACITY = 20;

    /**
    * Size and capacity to keep allocations at a low
    */
    private var capacity;
    private var size;

    /**
     * Constructs an empty list.
     * with a default capacity of 10
     */
    public Vector() {
        /* data will be set to default capacity */
        lock(self) {
            capacity = DEFAULT_CAPACITY;
            mData = new T[DEFAULT_CAPACITY];
        }
    }

    public def setResize(var capacity) {
        RESIZE_CAPACITY = capacity;
    }

    /**
     * Returns the number of elements in this list.
     *
     */
    public def size() : var {
        var sz;
        lock(self) {
            sz = size;
        }

        return sz;
    }

    /**
     * Returns true if this list contains no elements.
     *
     */
    public def empty() : var {
        var sz;
        lock(self) {
            sz = size == 0;
        }

        return sz;
    }

    /**
     * Returns an array containing all of the elements in this list
     * in proper sequence (from first to last element).
     *
     */
    public def toArray() : T[] {
        T[] arry;
        lock(self) {
            if(size == 0) arry = null;
            else
                arry = ((T[]) copyOf(mData, size));
        }

        return arry;
    }

    /**
     * Returns the element at the specified position in this list.
     *
     */
    public def get(var index) : T {
        T tmp;
        lock(self) {
            if (index >= size)
                goto err;

            tmp = mData[index];
        }

        return tmp;

        err:
        {
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
        }
    }

    /**
     * Returns the last element in this list.
     *
     */
    public def last() : T {
        return get(size()-1);
    }

    /**
     * Replaces the element at the specified position in this list with
     * the specified element.
     *
     */
    public def set(var index, T element) : T {
        T oldValue;
        lock(self) {
            if (index >= size)
                goto err;

            oldValue = mData[index];
            mData[index] = element;
        }

        return oldValue;
        err:
        {
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
        }
    }

    /**
     * Expand the list to hold more data
     *
     * The list is oversized to reduce the ammount of allocations
     * required by the system
     */
    private def expand() {
        if(size >= capacity) {
            // resize
            capacity += (capacity >> 2) + RESIZE_CAPACITY;
            realloc(mData, capacity);
        }
    }

    /**
     * Shrink the list to hold more data
     */
    private def shrink() {
        if(size <= capacity && size > 0) {
            size--;
            capacity--;

            if(capacity == 0 || size == 0) {
                clear();
            } else
                realloc(mData, capacity);
        }
    }

    /**
      * Appends the specified elements inside the provided list to the end of this list.
      *
      * @param e elements to be appended to this list
      * @return <tt>true</tt> (as specified by {@link Collection#add})
      */
     public def addAll(Vector<T> lst) {
        foreach(T data : lst.mData) {
            add(data);
        }
     }

    /**
      * Appends the specified element to the end of this list.
      *
      * @param e element to be appended to this list
      * @return <tt>true</tt> (as specified by {@link Collection#add})
      */
     public def add(T e) {

        lock(self) {
             expand();
             mData[size++] = e;
        }
     }


    /**
      * Shifts the list back 1 element
      *
      * @param e element to be appended to this list
      * @return <tt>true</tt> (as specified by {@link Collection#add})
      */
     public def popBack() {

        lock(self) {
            shrink();
        }
     }

    /**
     * Inserts the specified element at the specified position in this
     * list. Shifts the element currently at that position (if any) and
     * any subsequent elements to the right (adds one to their indices).
     *
     */
     public def insert(var pos, T value) {

         lock(self) {
             if(pos>size || pos < 0)
                goto err;

             if(size == 0) {
                 add(value);
             } else {
                expand();
                 for(var i = sizeof(mData) - 1; i > pos; i--)
                    mData[i] = mData[i-1];
                 mData[pos] = value;
             }
         }

         {
            err:
                throw new IndexOutOfBoundsException(outOfBoundsMsg(pos));
         }
     }

    /**
     * Removes the element at the specified position in this list.
     * Shifts any subsequent elements to the left (subtracts one from their
     * indices).
     *
     */
     public def remove(var pos) {

         lock(self) {
             if(pos>size || pos < 0)
                goto err;

             if(size==1){
                 size--;
             }
             else if(size==2) {
                 if(pos==0) {
                     mData[0]=mData[1];
                 }
                 shrink();
             } else {
                 var newLen=sizeof(mData)-1;
                 for(var i = pos; i < newLen; i++)
                     mData[i] = mData[i+1];

                 shrink();
             }
         }

         {
            err:
                throw new IndexOutOfBoundsException(outOfBoundsMsg(pos));
         }
     }

     /**
      * Removes all of the elements from this list.  The list will
      * be empty after this call returns.
      */
     public def clear() {
         // clear to let GC do its work

         lock(self) {
             size = 0;
             capacity = DEFAULT_CAPACITY;
             mData = new T[DEFAULT_CAPACITY];
         }
     }

    /**
     * Constructs an IndexOutOfBoundsException detail message.
     * Of the many possible refactorings of the error handling code,
     * this "outlining" performs best with both server and client VMs.
     */
    private def outOfBoundsMsg(var index) : string {
        return "Index: " + index + ", size: " + sizeof(mData);
    }

}