mod std.kernel.vm;

import std;
import std.io;

/**
 * Created by BraxtonN on 7/9/2018.
 */
public class ThreadCore
{
    public static def __thread_create(Thread thread) : var
    {
        var main = __thread_init_run; // we need the address of our initial function
        var stackSize = thread.getStackSize();

        asm(
            "loadl %adx, <main>         // load main method"
            "loadl %egx, <stackSize>    // load stack size "
            "int 0xa8                   // create thread   "
            "return_val %cmt                               "
            "ret                                           "
        );
    }

    public static def __thread_start(Thread thread, object[] args) : var
    {
        var id = thread.getId();

        asm(
            "loadl %adx, <id>         // load thread id    "
            "pushl <args>             // push arguments    "
            "pushl <thread>           // push thread object"
            "int 0xa4                   // start thread    "
            "return_val %cmt                               "
            "ret                                           "
        );
    }

    public static def __thread_join(Thread thread) : var
    {
        var id = thread.getId();

        asm(
            "loadl %adx, <id>         // load main method  "
            "int 0xa5                   // join thread     "
            "return_val %cmt                               "
            "ret                                           "
        );
    }

    public static def __thread_set_thread(Thread thread)
    {
        asm(
            "movl 0                   // mov pointer to thread  "
            "pushobj                  // push thread to stack   "
            "int 0xe2                   // set thread      "
            "ret                                           "
        );
    }

    public static def __thread_priority(Thread thread, var priority) : var
    {
        var id = thread.getId();

        asm(
            "loadl %adx, <id>         // load thread id    "
            "loadl %egx, <priority>   // load thread priority   "
            "int 0xe2                   // update priority      "
            "return_val %cmt                               "
            "ret                                           "
        );
    }

    public static def __thread_yield()
    {
        asm(
            "int 0xe5                   // yield           "
            "ret                                           "
        );
    }

    public static def __thread_interrupt(Thread thread) : var
    {
        var id = thread.getId(), result;

        asm(
            "loadl %adx, <id>         // load thread id    "
            "int 0xa6                   // interrupt thread"
            "smovr_2 %cmt,<result>                         "
        );

        if(result == 0) {
            thread.setStarted(false);
            thread.setExited(true);
        }

        return result;
    }

    public static def __thread_destroy(Thread thread) : var
    {
        var id = thread.getId(), result;

        asm(
            "loadl %adx, <id>         // load thread id    "
            "int 0xa7                   // destroy thread  "
            "smovr_2 %cmt,<result>                         "
        );

        if(result == 0) {
            thread.setTerminated(true);
            thread.setExited(true);
        }

        return result;
    }

    public static def __thread_current() : Thread
    {
        object threadObject; // we want to do high level casting to preserve integrity

        asm(
            "int 0xe0                   // get current thread  "
            "movl <threadObject>                               "
            "popobj                                            "
        );

        return (Thread)threadObject;
    }

    private static def __thread_args() : object[]
    {
        object[] args;

        asm(
            "int 0xe1                   // get current thread  "
            "movl <args>                                       "
            "popobj                                            "
        );

        return args;
    }

    /**
    * Inital call to all threads to call appropriate method
    */
    private static def __thread_init_run()
    {
        Thread curr = __thread_current();
        curr.setStarted(true);
        curr.setExited(false);

        curr.exitCode = curr.main(__thread_args());
        curr.setStarted(false);
        curr.setExited(true);
    }
}
