mod std;

/**                          
* Created by bknun on 6/7/2018            
* Description:                             
*/
public class ArrayList<T> {
    private T[] data;

    /**
     * Constructs an empty list.
     */
    public ArrayList() {
        /* data will remain null */
    }

    /**
     * Returns the number of elements in this list.
     *
     */
    public def size() : var {
        return sizeof(data);
    }

    /**
     * Returns true if this list contains no elements.
     *
     */
    public def empty() : var {
        return sizeof(data) == 0;
    }

    /**
     * Returns an array containing all of the elements in this list
     * in proper sequence (from first to last element).
     *
     */
    public def toArray() : T[] {
        if(data == null) return null;
        return ((T[]) Array<T>.copyOf(data, sizeof(data)));
    }

    /**
     * Returns the element at the specified position in this list.
     *
     */
    public def get(var index) : T {
        if (index >= sizeof(data))
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));

        return data[index];
    }

    /**
     * Replaces the element at the specified position in this list with
     * the specified element.
     *
     */
    public def set(var index, T element) : T {
        if (index >= sizeof(data))
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));

        T oldValue = data[index];
        data[index] = element;
        return oldValue;
    }

    /**
     * Expand the list to hold more data
     */
    private def expand() {
        data = (T[]) Array<T>.copyOf(data, sizeof(data), sizeof(data)+1);
    }

    /**
     * Shrink the list to hold more data
     */
    private def shrink() {
        data = (T[]) Array<T>.copyOf(data, sizeof(data)-1, sizeof(data)-1);
    }

    /**
      * Appends the specified element to the end of this list.
      *
      * @param e element to be appended to this list
      * @return <tt>true</tt> (as specified by {@link Collection#add})
      */
     public def add(T e) {
         expand();
         data[sizeof(data)-1] = e;
     }

    /**
     * Inserts the specified element at the specified position in this
     * list. Shifts the element currently at that position (if any) and
     * any subsequent elements to the right (adds one to their indices).
     *
     */
     public def insert(var pos, T value) {
         if(pos>sizeof(data) || pos < 0)
            throw new IndexOutOfBoundsException(outOfBoundsMsg(pos));

         if(sizeof(data) == 0) {
             add(value);
         } else {
             T[] result = new T[sizeof(data)+1];
             var newLen=sizeof(data)+1;
             for(var i = 0; i < pos; i++)
                 result[i] = data[i];
             result[pos] = value;
             for(var i = pos + 1; i < newLen; i++)
                 result[i] = data[i - 1];
             data=result;
         }

     }

     /**
      * Attempts to find the presence of similar data in the list. This method returns false
      * if there was no match found.
      *
      */
     public def contains(T tData) : var {
        foreach(T t : data) {
            if(t == tData)
                return true;
        }

        return false;
     }

    /**
     * Removes the element at the specified position in this list.
     * Shifts any subsequent elements to the left (subtracts one from their
     * indices).
     *
     */
     public def remove(var pos) {
         if(pos>sizeof(data) || pos < 0)
            throw new IndexOutOfBoundsException(outOfBoundsMsg(pos));

         if(sizeof(data)==1){
             data = null;
         }
         else if(sizeof(data)==2) {
             if(pos==0) {
                 data[0]=data[1];
             }
             shrink();
         } else {
             var newLen=sizeof(data)-1,iter=1;
             for(var i = 0; i < newLen; i++) {
                 if(iter == pos)
                     iter++;

                 data[i] = data[iter];
             }

             shrink();
         }
     }

     /**
      * Removes all of the elements from this list.  The list will
      * be empty after this call returns.
      */
     public def clear() {
         // clear to let GC do its work
         data = null;
     }


    /**
     * Constructs an IndexOutOfBoundsException detail message.
     * Of the many possible refactorings of the error handling code,
     * this "outlining" performs best with both server and client VMs.
     */
    private def outOfBoundsMsg(var index) : string {
        return "Index: " + index + ", size: " + sizeof(data);
    }
}