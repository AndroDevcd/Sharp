mod std;

/**
 * Created by BraxtonN on 5/17/2018.
 */
public class string {
    /*this will hold our string */
        private var[] data;

        public string( var[] immstr )
        {
            if(immstr == null) {
                data = null;
            } else {
                append(immstr);
            }

        }

        public string( char[] immstr )
        {
            if(immstr == null) {
                data = null;
            } else {
                var[] chs = new var[sizeof(immstr)];
                var iter;
                foreach(var c : immstr) {
                    chs[iter++] = c;
                }

                append(chs);
            }

        }

        public string(string str )
        {
            self->string(str.toArray());
        }

        public string( var[] immstr, var offset, var length )
        {
            if(immstr == null) {
                data = null;
            } else {
                for(var i = offset; i < sizeof(immstr); i++) {
                    if(length-- >= 0) {
                        append(immstr[i]);
                    } else
                        break;
                }
            }

        }

        public def replace( var pos, var replaceChar ) : string
        {
            if(pos >= sizeof(data)) {
                throw new RuntimeErr("Index out of bounds exception");
            }

            data[pos] = replaceChar;
            return self;
         }

        def append(var char) : string
        {
            var[] str = new var[] { char };
            return append(str);
        }

        def append(char c) : string
        {
            var[] str = new var[] { c.getValue() };
            return append(str);
        }

        def append(var[] immstr) : string
        {
            var iter=sizeof(data);
            var[] newStr;

            if(data == null)
                newStr = new var[sizeof(immstr)];
            else
                newStr = (var[])System.copyOf(data, sizeof(data), sizeof(data) + sizeof(immstr));

            for(var i = 0; i < sizeof(immstr); i++)
            {
                newStr[iter++] = (_int16)immstr[i];
            }

            data = newStr;
            return self;
        }

        public def at( var pos ) : var
        {
            if(pos >= sizeof(data)) {
                throw new RuntimeErr("Index out of bounds Array: size " + sizeof(data)
                       + " at index pos " + pos);
            }

            return data[pos];
        }

        public def operator+( var[] immstr ) : string
        {
            string s = new string(data);
            if(immstr != null)
                return s.append(immstr);
            else
                return s.append("null");
        }

        public def operator+( string str ) : string
        {
            string s = new string(data);
            if(str != null)
                return s.append(str.toArray());
            else
                return s.append("null");
        }

        public def operator==( string str ) : var
        {
            if(str.size() != sizeof(data)) {
                return false;
            }

            var iter;
            foreach(var char : data) {
                if(char != str.at(iter++)) {
                    return false;
                }
            }

            return true;
        }

        public def operator!=( string str ) : var {
            return !operator==(str);
        }

        public def operator==( var[] str ) : var
        {
            if(sizeof(str) != sizeof(data)) {
                return false;
            }

            var iter;
            foreach( var char : data ) {
                if(char != str[iter++]) {
                    return false;
                }
            }

            return true;
        }

        public def operator!=( var[] str ) : var {
            return !operator==(str);
        }

        public def operator=( var[] immstr )
        {
            if (immstr == null) data = null;
            else
                data = (var[])System.copyOf(immstr, sizeof(immstr));
        }

        public def operator+( var num ) : string
        {
            string s = new string(data);
            s.append(parse(num).toArray());

            return s;
        }

        public def operator+( int num ) : string
        {
            string s = new string(data);
            s.append(parse(num.getValue()).toArray());

            return s;
        }

        public def operator+( short num ) : string
        {
            string s = new string(data);
            s.append(parse(num.getValue()).toArray());

            return s;
        }

        public def operator+( long num ) : string
        {
            string s = new string(data);
            s.append(parse(num.getValue()).toArray());

            return s;
        }

        public def operator+( bool num ) : string
        {
            string s = new string(data);
            s.append(parse(num.getValue()).toArray());

            return s;
        }

        public def operator+( uint num ) : string
        {
            string s = new string(data);
            s.append(parse(num.getValue()).toArray());

            return s;
        }

        public def operator+( ushort num ) : string
        {
            string s = new string(data);
            s.append(parse(num.getValue()).toArray());

            return s;
        }

        public def operator+( ulong num ) : string
        {
            string s = new string(data);
            s.append(parse(num.getValue()).toArray());

            return s;
        }

        public def operator+( char c ) : string
        {
            string s = new string(data);
            s.append(c);

            return s;
        }

        public def operator+( Enum e ) : string
        {
            string s = new string(data);
            if(e != null)
                s.append(e.getName().toArray());
            else
                s.append("null");

            return s;
        }

        public def operator+=( var num ) : string
        {
            return append(parse(num).toArray());
        }

        public def operator+=( int num ) : string
        {
            return operator+=(num.getValue());
        }

        public def operator+=( bool num ) : string
        {
            return operator+=(num.getValue() ? "true" : "false");
        }

        public def operator+=( long num ) : string
        {
            return operator+=(num.getValue());
        }

        public def operator+=( short num ) : string
        {
            return operator+=(num.getValue());
        }

        public def operator+=( uchar num ) : string
        {
            return operator+=(num.getValue());
        }

        public def operator+=( uint num ) : string
        {
            return operator+=(num.getValue());
        }

        public def operator+=( ulong num ) : string
        {
            return operator+=(num.getValue());
        }

        public def operator+=( ushort num ) : string
        {
            return operator+=(num.getValue());
        }

        public def operator+=( char num ) : string
        {
            return append(new var[] { num });
        }

        public def operator+=( Enum e ) : string
        {
            return append(e.getName().toArray());
        }

        public def operator+=( var[] immstr ) : string
        {
            return append(immstr);
        }

        public def operator+=( string str ) : string
        {
            return append(str.toArray());
        }

        public def toArray() : var[]
        {
            if(data == null) return null;
            return (var[])System.copyOf(data, sizeof(data));
        }

        public static def parse( var number ) : string
        {
            number = (_int64)number;
            if (number == 0) {
                return new string("0");
            }

            string temp = new string("");
            string returnvalue= new string("");
            var negative = false;
            if(((_int64)number)<0) {
                number *= -1;
                negative = true;
            }

            while (((_int64)number)>0) {
                temp.append((number%10)+48);
                number/=10;
            }

            if(negative) returnvalue.append("-");
            for (var i=sizeof(temp.toArray())-1; i >= 0; i--) {
                returnvalue.append(temp.at(i));
            }
            return returnvalue;
        }

        public def substring(var startIndex) : string {
            if((startIndex >= size()) || (startIndex < 0))
                return new string("");


            string s = "";
            for(var i = startIndex; i < size(); i++) {
                s.append(at(i));
            }

            return s;
        }

        public def substring(var startIndex, var stopindex) : string {
            if((startIndex >= size()) || (startIndex < 0))
                return new string("");
            if(stopindex < startIndex)
                throw new IllegalArgumentException(
                    "stopIndex: " + stopindex + " cannot be less than startIndex: " + startIndex);


            string s = "";
            for(var i = startIndex; i < size(); i++) {
                if(i == stopindex)
                    break;
                s.append(at(i));
            }

            return s;
        }

        public static def parseInt(string s) : var {
            var i = 0;
            var number = 0;
            var isNegative = false;
            var len = s.size();
            if( s.at(0) == '-' ){
                isNegative = true;
                i = 1;
            }
            while( i < len ){
                if(!char.isDigit(s.at(i))) {
                    throw new IllegalArgumentException(
                        "invalid char in string: " + (new var[] { s.at(i) }));
                }

                number *= 10;
                number += ( s.at(i++) - '0' );
            }
            if( isNegative )
                number = -number;
            return number;
        }

        /**
         * Tests if the substring of this string beginning at the
         * specified index starts with the specified prefix.
         *
         */
        public def startsWith(string prefix, var toffset) : var {
            var to = toffset;
            var po = 0;
            var pc = prefix.size();
            // Note: toffset might be near -1>>>1.
            if ((toffset < 0) || (toffset > size() - pc)) {
                return false;
            }
            while ((--pc) >= 0) {
                if (at(to++) != prefix.at(po++)) {
                    return false;
                }
            }
            return true;
        }

        public def find(string str) : var {
            if(str.size() > size()) {
                return false;
            }

            for(var i = 0; i < size(); i++) {
                if(substring(i, i+str.size()) == str)
                    return true;
            }

            return false;
        }

        public def endsWith(string postFix) : var {
            if(postFix.size() > size())
                return false;

            var ext = postFix.size();
            string extension = "";
            for(var i = size() - ext; i < size(); i++){
                extension += new char(at(i));
            }

            return extension == postFix;
        }


        public static def toLower(string s) : string {
            string newstr = "";
            var[] chs = s.toArray();
            foreach(var c : chs) {
                newstr += char.toLower(c);
            }
            return newstr;
        }

        public static def toUpper(string s) : string {
            string newstr = "";
            var[] chs = s.toArray();
            foreach(var c : chs) {
                newstr += char.toUpper(c);
            }
            return newstr;
        }

        public def empty() : var {
            return sizeof(data) == 0;
        }
        
        public def size() : var
        {
            return sizeof(data);
        }
}
