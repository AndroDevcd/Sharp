mod std;

/**
 * Created by BraxtonN on 5/17/2018.
 */
public class string {
    /*this will hold our string */
        private var[] data;

        public string( var[] immstr )
        {
            if(immstr == null) {
                data = null;
            } else {
                append(immstr);
            }

        }

        public string( var ch )
        {
            append(ch);
        }

        public string( char[] immstr )
        {
            if(immstr == null) {
                data = null;
            } else {
                var[] chs = new var[sizeof(immstr)];
                var iter;
                foreach(var c : immstr) {
                    chs[iter++] = c;
                }

                append(chs);
            }

        }

        public string(string str )
        {
            self->string(str.toArray());
        }

        public string( var[] immstr, var offset )
        {
            if(immstr == null) {
                data = null;
            } else {
                data = (var[])System.memcpy(immstr, offset, sizeof(immstr));
            }
        }

        public string( var[] immstr, var offset, var endIndex )
        {
            if(immstr == null) {
                data = null;
            } else {
                data = (var[])System.memcpy(immstr, offset, endIndex);
            }
        }

        public def replace( var pos, var replaceChar ) : string
        {
            if(pos >= sizeof(data)) {
                throw new RuntimeErr("Index out of bounds exception");
            }

            data[pos] = replaceChar;
            return self;
         }

        def append(var char) : string
        {
            if(data == null)
                data = new var[1];
            else
                System.realloc(data, sizeof(data) + 1);

            data[sizeof(data) - 1] = char;
            return self;
        }

        def append(char c) : string
        {
            return append(c.getValue());
        }

        def append(var[] immstr) : string
        {
            var iter=sizeof(data);

            if(data == null)
                data = new var[sizeof(immstr)];
            else
                System.realloc(data, sizeof(data) + sizeof(immstr));

            for(var i = 0; i < sizeof(immstr); i++)
            {
                data[iter++] = (_int16)immstr[i];
            }

            return self;
        }

        public def at( var pos ) : var
        {
            if(pos >= sizeof(data)) {
                throw new RuntimeErr("Index out of bounds Array: size " + sizeof(data)
                       + " at index pos " + pos);
            }

            return data[pos];
        }

        public def operator+( var[] immstr ) : string
        {
            string s = new string(data);
            if(immstr != null)
                return s.append(immstr);
            else
                return s.append("null");
        }

        public def operator+( Printable o ) : string
        {
            string s = new string(data);
            string tmp = o.toString();
            if(o != null && tmp != null)
                return s.append(tmp.toArray());
            else
                return s.append("null");
        }

        public def operator==( string str ) : var
        {
            if(str.size() != sizeof(data)) {
                return false;
            }

            var iter;
            foreach(var char : data) {
                if(char != str.at(iter++)) {
                    return false;
                }
            }

            return true;
        }

        public def operator!=( string str ) : var {
            return !operator==(str);
        }

        public def operator==( var[] str ) : var
        {
            if(sizeof(str) != sizeof(data)) {
                return false;
            }

            var iter;
            foreach( var char : data ) {
                if(char != str[iter++]) {
                    return false;
                }
            }

            return true;
        }

        public def operator!=( var[] str ) : var {
            return !operator==(str);
        }

        public def operator=( var[] immstr )
        {
            if (immstr == null) data = null;
            else
                data = (var[])System.copyOf(immstr, sizeof(immstr));
        }

        public def operator+( var num ) : string
        {
            string s = new string(data);
            s.append(parse(num).toArray());

            return s;
        }

        public def operator+=( var num ) : string
        {
            return append(parse(num).toArray());
        }

        public def operator+=( Printable o ) : string
        {
            string s = o.toString();
            if(s != null && s.data != null)
                return append(s.toArray());
            else
                return append("null");
        }

        public def operator+=( var[] immstr ) : string
        {
            return append(immstr);
        }

        public def operator+=( string str ) : string
        {
            return append(str.toArray());
        }

        public def toArray() : var[]
        {
            if(data == null) return null;
            return (var[])System.copyOf(data, sizeof(data));
        }

        private static def parsefloat( var number ) : string
        {
            return new string(System.toString(number));
        }

        public static def parse( var number ) : string
        {
            return new string(System.toString(number));
        }

        public def substring(var startIndex) : string {
            if((startIndex >= size()) || (startIndex < 0))
                return new string("");


            string s = new string();
            s.data = (var[])System.memcpy(data, startIndex, size()-1);
            return s;
        }

        public def substring(var startIndex, var stopIndex) : string {
            if((startIndex >= size()) || (startIndex < 0))
                return new string("");
            if(stopIndex < startIndex)
                throw new IllegalArgumentException(
                    "stopIndex: " + stopIndex + " cannot be less than startIndex: " + startIndex);


            string s = new string();
            s.data = (var[])System.memcpy(data, startIndex, stopIndex);
            return s;
        }

        public static def parseInt(string s) : var {
            var i = 0;
            var number = 0;
            var isNegative = false;
            var len = s.size();
            if( s.at(0) == '-' ){
                isNegative = true;
                i = 1;
            }
            while( i < len ){
                if(!char.isDigit(s.at(i))) {
                    throw new IllegalArgumentException(
                        "illegal char in string: " + new char(s.at(i)));
                }

                number *= 10;
                number += ( s.at(i++) - '0' );
            }
            if( isNegative )
                number = -number;
            return number;
        }

        /**
         * Tests if the substring of this string beginning at the
         * specified index starts with the specified prefix.
         *
         */
        public def startsWith(string prefix, var toffset) : var {
            var to = toffset;
            var po = 0;
            var pc = prefix.size();
            // Note: toffset might be near -1>>>1.
            if ((toffset < 0) || (toffset > size() - pc)) {
                return false;
            }
            while ((--pc) >= 0) {
                if (at(to++) != prefix.at(po++)) {
                    return false;
                }
            }
            return true;
        }

        public def find(string str) : var {
            if(str.size() > size()) {
                return false;
            }

            var endIndex;
            for(var i = 0; i < size(); i++) {
                endIndex = i+str.size();
                if(substring(i, endIndex > size() ? size() : endIndex) == str)
                    return true;
            }

            return false;
        }

        public def endsWith(string postFix) : var {
            if(postFix.size() > size())
                return false;

            var ext = postFix.size();
            string extension = new string();
            for(var i = size() - ext; i < size(); i++){
                extension += new char(at(i));
            }

            return extension == postFix;
        }


        public static def toLower(string s) : string {
            string newstr = new string();
            var[] chs = s.toArray();
            foreach(var c : chs) {
                newstr += char.toLower(c);
            }
            return newstr;
        }

        public static def toUpper(string s) : string {
            string newstr = new string();
            var[] chs = s.toArray();
            foreach(var c : chs) {
                newstr += char.toUpper(c);
            }
            return newstr;
        }

        public def empty() : var {
            return sizeof(data) == 0;
        }
        
        public def size() : var
        {
            return sizeof(data);
        }

        public def getData() : var[] {
            return data;
        }

        public def delegate::toString() : string {
            return new string(data);
        }
}
