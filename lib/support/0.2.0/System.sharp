mod std;

import std.internal;
import std.internal.vm;

/**
 * Created by BraxtonN on 5/18/2018.
 *
 * The System class contains several useful class fields
 * and methods. This class should not be instantiated.
 *
 * Among the facilities provided by the System class
 * are standard input, standard output, and error output streams;
 *
 */
public class System {

    static ConsoleHandler cHandler = new ConsoleHandler();

    public static def print(var[] data) {
        cHandler.printData(data);
    }
    
    public static def print(string str) {
        cHandler.printData(str.toArray());
    }
    
    public static def println(var[] data) {
        cHandler.printData(data);
        printChar('\n');
    }

    public static def println(var data) {
        print(data);
        printChar('\n');
    }

    public static def readLine() : string {
        var _char;
        string message = "";

        _char = readChar();
        while((_char != 13) && (_char != 10)) { // \r\n
            message += new var[] { _char };
            _char = readChar();
        }
        return message; // unsupported for now
    }

    public static def readChar() : var {
        return cHandler.read(); // unsupported for now
    }
    
    public static def println(string str) {
        cHandler.printData(str.toArray());
        printChar('\n');
    }
    
    public static def print(var data) {
        cHandler.__print_stdout_(data, false);
    }
    
    public static def printChar(var data) {
        ConsoleHandler.__print_stdout_(data, true);
    }

    public static def getUtcTimeInMills() : var {
        return Time.millsTime();
    }

    public static def getNanoTime() : var {
        return Time.nanoTime();
    }

    public static def exit() {
        Runtime.nativeExit();
    }

    public static def gc() {
        Runtime.gc();
    }

    public static def freeMemory() : var {
        return Runtime.freeMemory();
    }

    public static def getMaxMemory() : var {
        return Runtime.memoryLimit();
    }

    public static def getManagedMemory() : var {
        return Runtime.managedMemory();
    }
}
