mod std.internal;

/**
 * Created by BraxtonN on 5/17/2018.
 *
 * Low level utility class to interface with the Sharp
 * Virtual Machine. Classic function calls consist of
 * garbage collector requests and the entrypoint to
 * your application
 */
class Runtime {

    private static var MINIMUM_ARGS = 4;

    /**
    * This is the entry point of your application
    */
    public static def __srt_init_(object[] args) : var {

        var[] application = (var[])args[0];
        var[] vers = (var[])args[1];
        var[] platformVersion = (var[])args[2];
        var[] os = (var[])args[3];
        string[] argv = new string[sizeof(args) - MINIMUM_ARGS];

        System.println("application " + application);
        System.println("version " + vers);
        System.println("platform " + platformVersion);
        System.println("os " + os);

        var iter;
        for(var i = MINIMUM_ARGS; i < sizeof(args); i++) {
            argv[iter++] = new string((var[])args[i]);
            asm("nop nop nop nop");
            System.println("arg " + i + ":" + argv[iter - 1]);
        }

        var ret = application#Start.main(argv);

        System.print("\nProgram finished with exit code " + ret);
        return ret;
    }

    public static def nativeExit() {
        asm(
            "int 0xa9         // interrupt the entire system and initiate shutdown "
            "                                                                      " );
    }

    public static def gc() {
        asm(
            "int 0xa1         // send request to gc to collect data                "
            "                                                                      " );
    }

    public static def memoryLimit() : var {
        var limit; //0xaa

        asm(
            "int 0xaa         // send request to get total max memory given to the garbage collector  "
            "smovr_2 cmt,0    // set limit to value                                                   " );
        return limit;
    }

    public static def managedMemory() : var {
        var limit; //0xaa

        asm(
            "int 0xab         // send request to get total memory currently under management          "
            "smovr_2 cmt,0    // set limit to value                                                   " );
        return limit;
    }

    public static def freeMemory() : var {
        return memoryLimit()-managedMemory();
    }
}
