mod app;

import std;

/**
 * Created by BraxtonN on 6/14/2018.
 */
class Ast {
    public Ast(AstType type, var line, var col)
    {
        self->type = type;
        self->line = line;
        self->col = col;
        self->entities = new ArrayList<TokenEntity>();
        self->children = new ArrayList<Ast>();
    }


    public var line;
    public var col;
    private AstType type;
    private ArrayList<TokenEntity> entities;
    private ArrayList<Ast> children;
}

enum AstType {
    Class_Decl,
    Generic_Class_Decl,
    Generic_Interface_Decl,
    Interface_Decl,
    Import_Decl,
    Module_Decl,
    Method_Decl,
    Enum_Decl,
    Delegate_Post_Decl,
    Delegate_Decl,
    Construct_Decl,
    Label_Decl,
    Operator_Decl,
    Var_Decl,
    Switch_Declarator,
    Value,
    Value_List,
    Utype_Arg_List,
    Utype_Arg_List_Opt,
    Reference_Identifier_List,
    Utype_List,
    Identifier_List,
    Enum_Identifier_List,
    Vector_Array,
    Utype_Arg,
    Utype_Arg_Opt,
    Expression,
    Array_Expression,
    Primary_Expr,
    Dotnotation_Call_Expr,
    Utype,
    Block,
    Switch_Block,
    Finally_Block,
    Assembly_Block,
    Catch_Clause,
    Method_Return_Type,
    Return_Stmnt,
    Statement,
    If_Statement,
    Switch_Statement,
    Elseif_Statement,
    Else_Statement,
    Lock_Statement,
    Trycatch_Statement,
    Throw_Statement,
    Continue_Statement,
    Break_Statement,
    Goto_Statement,
    While_Statement,
    Do_While_Statement,
    Assembly_Statement,
    For_Statement,
    For_Expresion_Cond,
    For_Expresion_Iter,
    Foreach_Statement,
    Type_Identifier,
    Enum_Identifier,
    Func_Prototype,
    Refrence_Pointer,
    Modulename,
    Literal,

    /**
     * Encapsulated ast's to make processing expressions easier
     */
    Literal_E,
    Utype_Class_E,
    Dot_Not_E,
    Self_E,
    Base_E,
    Null_E,
    New_E,
    Not_E,
    Post_Inc_E,
    Arry_E,
    Dot_Fn_E,
    Cast_E,
    Pre_Inc_E,
    Paren_E,
    Vect_E,
    Add_E,
    Mult_E,
    Shift_E,
    Less_E,
    Equal_E,
    And_E,
    Ques_E,
    Assign_E,
    Sizeof_E,

    None
};
