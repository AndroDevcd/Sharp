mod std;

/**                          
* Created by bknun on 6/7/2018            
* Description:                             
*/
public class Dictionary<TKey, TValue> {
    private ArrayList<TKey> keys;
    private ArrayList<TValue> values;

    public Dictionary() {
        keys = new ArrayList<TKey>();
        values = new ArrayList<TValue>();
    }

    /**
     * Returns the number of entries (distinct keys) in this dictionary.
     *
     */
    public def size() : var {
        return keys.size();
    }

    /**
     * Tests if this dictionary maps no keys to value. The general contract
     * for the empty method is that the result is true if and only
     * if this dictionary contains no entries.
     *
     */
    public def empty() : var {
        return keys.empty();
    }

    /**
      * Returns an array of the keys in this dictionary. The general
      * contract for the keys method is that an array of type <keys> object
      * is returned that will be a reference to all the keys in the dictionary.
      *
      */
     public def getKeys() : TKey[] {
        return keys.toArray();
     }

     /**
      * Returns an array of the values in this dictionary. The general
      * contract for the elements method is that an array of type <value> object
      * is returned that will be a reference to all the values in the dictionary.
      *
      */
     public def elements() : TValue[] {
        return values.toArray();
     }

     /**
      * Returns the value to which the key is mapped in this dictionary.
      * The general contract for the get method is that if this
      * dictionary contains an entry for the specified key, the associated
      * value is returned; otherwise, null or 0 is returned in respect to
      * the type of values you are holding;
      *
      */
     public def get(TKey key) : TValue {
        TKey[] keys = getKeys();
        var index;
        foreach(TKey k : keys) {
            if(k == key)
                return values.get(index);
            index++;
        }

        TValue nilValue;
        return nilValue; // the compiler will handle the rest
     }

     /**
      * Maps the specified key to the specified
      * value in this dictionary.
      *
      * If this dictionary already contains an entry for the specified
      * key, the value already in this dictionary for that
      * key is returned, after modifying the entry to contain the
      * new element. If this dictionary does not already have an entry
      * for the specified key, an entry is created for the
      * specified key and value, and null or 0 is
      * returned.
      *
      */
     public def put(TKey key, TValue value) : TValue {
        var index;
        if((index = indexof(key)) != -1) {
            TValue oldValue = values.get(index);
            values.set(index, value);
            return oldValue;
        } else {
            keys.add(key);
            values.add(value);

            TValue nilValue;
            return nilValue; // the compiler will handle the rest
        }
     }

     /**
      * Removes the key (and its corresponding value)
      * from this dictionary. This method does nothing
      * if the key is not in this dictionary.
      *
      * The value to which the key had been mapped in this
      * dictionary, or null if the key did not have a
      * mapping is returned.
      */
     public def remove(TKey key) : TValue {
        var index;
        if((index = indexof(key)) != -1) {
            TValue oldValue = values.get(index);
            values.remove(index);
            keys.remove(index);
            return oldValue;
        }

        TValue nilValue;
        return nilValue; // the compiler will handle the rest
     }

     /**
      * Finds the index of the key from this dictionary. This method return -1(invalid)
      * if the key is not in this dictionary.
      *
      */
     public def indexof(TKey key) : var {
        TKey[] keys = getKeys();
        var index;
        foreach(TKey k : keys) {
            if(k == key)
                return index;
            index++;
        }

        return -1;
     }
}