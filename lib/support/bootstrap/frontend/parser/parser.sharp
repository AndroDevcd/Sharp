mod frontend.parser;

import main;
import std.io;
import frontend.tokenizer;
import frontend;

/**
 * Created by BraxtonN on 10/5/2019.
 */
class Parser {

    private source_file: string;
    private panic: var;
    private cursor: var;
    private parsed: var;
    private tree: list<ast>;
    private lines: list<string>;
    private current: token;
    private tokens: token[];
    private toks: tokenizer;
    private access_types: list<token>;
    private errors: error_manager;

    public Parser(toks: tokenizer)
        {
            self->toks=toks;

            if(toks != null && toks.get_errors() != null
                && !toks.get_errors().has_errors())
            {
                access_types = new list<token>();
                tree = new list<ast>();
                lines = toks.get_lines();
                tokens = toks.get_tokens();

                parse();

                sb := new string_builder("");
                foreach(child in tree) {
                    if(child != null)
                        child.to_string(sb);
                    else
                        sb += "null\n";
                }

                out := new file("tree.txt");
                out.write(sb.to_string());
         }
    }


    private def parse() {
        source_file = toks.get_file();
        errors = new error_manager(lines, source_file, true, options.aggressive_errors);
        current = tokens[cursor++];

        parsed = true;
    }


    private static keywords := new object[]
    {
        "mod",
        "true",
        "false",
        "class",
        "static",
        "protected",
        "pro",
        "private",
        "def",
        "import",
        "return",
        "self",
        "const",
        "public",
        "new",
        "null",
        "operator",
        "base",
        "if",
        "while",
        "do",
        "try",
        "catch",
        "finally",
        "throw",
        "continue",
        "goto",
        "break",
        "else",
        "object",
        "asm",
        "for",
        "foreach",
        "var",
        "sizeof",
        "_int8",
        "_int16",
        "_int32",
        "_int64",
        "_uint8",
        "_uint16",
        "_uint32",
        "_uint64",
        "delegate",
        "interface",
        "lock",
        "enum",
        "switch",
        "default",
        "volatile",
        "fn"
    };

    private def is_keyword(key: string) : var {
        foreach(keyword in keywords) {
            if(key == keyword)
                return true;
        }

        return false;
    }
}
