mod frontend.parser;

import frontend.tokenizer;

/**
 * Created by BraxtonN on 6/14/2018.
 */
class ast {
    public line: var;
    public col: var;
    private type: ast_type;
    private tokens: list<token>;
    private children: list<ast>;

    public ast()
    {
        self->tokens = new list<token>();
        self->children = new list<ast>();
    }

    public ast(type: ast_type, line: var, col: var)
    {
        self->type = type;
        self->line = line;
        self->col = col;
        self->tokens = new list<token>();
        self->children = new list<ast>();
    }

    public def add(ast: ast) {
        children.add(ast);
    }

    public def add(token: token) {
        tokens.add(token);
    }

    public def token_at(pos: var) : token {
        return tokens.at(pos);
    }

    public def token_size() : var {
        return tokens.size();
    }

    public def children_size() : var {
        return children.size();
    }

    public def has_token(type: token_type) : var {
        foreach(tok in tokens) {
            if(tok.get_type() == type)
                return true;
        }

        return false;
    }

    public def clear() {
        children.clear();
        tokens.clear();
    }

    public def has_child(type: ast_type) : var {
        foreach(child in children) {
            if(child.type == type)
                return true;
        }

        return false;
    }

    public def get_child(pos: var) : ast {
        return children.at(pos);
    }

    public def get_child(type: ast_type) : ast {
        foreach(child in children) {
            if(child.type == type)
                return child;
        }
        return null;
    }

    public def last() : ast {
        return children.last();
    }

    public def last_token() : token {
        return tokens.last();
    }

    public def encapsulate(type: ast_type) : ast {
        encap := new ast(type, line, col);

        encap.children.add_all(children);
        encap.tokens.add_all(tokens);

        children.clear();
        tokens.clear();
        children.add(encap);
        return encap;
    }

    private def add_tabs(sb: string_builder) {
        for(i := 0; i < recurs; i++)
            sb+='\t';
    }

    static recurs := 0;
    public def to_string(sb: string_builder) {
        add_tabs(sb);
        sb += "ast: " + type + " ;" + line + "," + col + "\n";

        recurs++;
        add_tabs(sb);
        sb += "tokens:\n";
        foreach(tok in tokens) {
            add_tabs(sb);
            if(tok != null)
                sb += "" + tok + "\n";
            else
                sb += "null\n";
        }

        add_tabs(sb);
        
        sb += "children: (" + children.size() + ")\n";
        foreach(child in children) {
            add_tabs(sb);

            if(child != null)
                child.to_string(sb);
            else
                sb += "null\n";
        }

        sb += '\n';
        recurs--;
    }

    public def copy(ast: ast) {
        line = ast.line;
        col = ast.col;
        type = ast.type;

        children.add_all(ast.children);
        tokens.add_all(ast.tokens);
    }

    public def fast_copy(ast: ast) {
        children.clear();
        tokens.clear();

        line = ast.line;
        col = ast.col;
        type = ast.type;
        children = ast.children;
        tokens = ast.tokens;
    }

    public def pop_token() {
        tokens.pop_back();
    }

    public def pop_child() {
        children.pop_back();
    }

    public def get_type() : ast_type {
        return type;
    }

    public def set_type(type: ast_type) {
        self->type = type;
    }
}

enum ast_type {
    class_decl,
    generic_class_decl,
    generic_interface_decl,
    interface_decl,
    import_decl,
    module_decl,
    method_decl,
    enum_decl,
    delegate_post_decl,
    delegate_decl,
    constructor_decl,
    label_decl,
    operator_decl,
    var_decl,
    switch_declarator,
    value,
    value_list,
    utype_arg_list,
    utype_arg_list_opt,
    reference_identifier_list,
    utype_list,
    identifier_list,
    enum_identifier_list,
    vector_array,
    utype_arg,
    utype_arg_opt,
    expression,
    array_expression,
    primary_expression,
    dotnotation_call_expr,
    utype,
    block,
    switch_block,
    finally_block,
    assembly_block,
    catch_clause,
    method_return_type,
    return_stmnt,
    statement,
    if_statement,
    switch_statement,
    elseif_statement,
    else_statement,
    lock_statement,
    trycatch_statement,
    throw_statement,
    continue_statement,
    break_statement,
    goto_statement,
    while_statement,
    do_while_statement,
    assembly_statement,
    for_statement,
    for_expression_cond,
    for_expression_iter,
    foreach_statement,
    type_identifier,
    enum_identifier,
    func_prototype,
    reference_pointer,
    modulename,
    literal,

    /**
     * Encapsulated ast's to make processing expressions easier
     */
    literal_e,
    utype_class_e,
    dot_not_e,
    self_e,
    base_e,
    null_e,
    new_e,
    not_e,
    post_inc_e,
    arry_e,
    dot_fn_e,
    cast_e,
    pre_inc_e,
    paren_e,
    vect_e,
    add_e,
    mult_e,
    shift_e,
    less_e,
    equal_e,
    and_e,
    ques_e,
    assign_e,
    sizeof_e,
    free_e,

    none
};
