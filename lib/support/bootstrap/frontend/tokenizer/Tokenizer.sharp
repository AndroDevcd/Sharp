mod app;

import std;

/**                          
* Created by bknun on 6/13/2018            
* Description:                             
*/
class Tokenizer {

    private ArrayList<Token> tokens;
    private ErrorManager errors;
    private ArrayList<string> lines;
    private string text;
    private var[] data;
    private var cursor, start;
    private var current;
    private var line;
    private var isEnd;
    private var col;
    private string file;

    private Tokenizer(){ /* Dont call */ }

    public Tokenizer(string text, string file)
    {
        line = 1;
        self->file = file;
        lines = new ArrayList<string>();

        if(!text.empty()) {
            self->text = text;
            self->data = text.getData();
        }
        else {
            line = 0;
        }

        tokens = new ArrayList<Token>(sizeof(data) > 60 ? (sizeof(data) / 6) : 10);
        parse();
    }

    def parse() {
        if(text.empty())
            return;

        addLines();
        errors = new ErrorManager(lines, file, false, Options.aggressiveErrors);
        current = text.at(0);

        while(!isEnd) {
            start = cursor;
            switch (current) {
              case '_':
              case 'a':
              case 'b':
              case 'c':
              case 'd':
              case 'e':
              case 'f':
              case 'g':
              case 'h':
              case 'i':
              case 'j':
              case 'k':
              case 'l':
              case 'm':
              case 'n':
              case 'o':
              case 'p':
              case 'q':
              case 'r':
              case 's':
              case 't':
              case 'u':
              case 'v':
              case 'w':
              case 'x':
              case 'y':
              case 'z':
              case 'A':
              case 'B':
              case 'C':
              case 'D':
              case 'E':
              case 'F':
              case 'G':
              case 'H':
              case 'I':
              case 'J':
              case 'K':
              case 'L':
              case 'M':
              case 'N':
              case 'O':
              case 'P':
              case 'Q':
              case 'R':
              case 'S':
              case 'T':
              case 'U':
              case 'V':
              case 'W':
              case 'X':
              case 'Y':
              case 'Z':
                parseIdentifier();
                break;

              case '(': addToken(TokenType.LEFT_PAREN); break;
              case ')': addToken(TokenType.RIGHT_PAREN); break;
              case '{': addToken(TokenType.LEFT_CURLY); break;
              case '}': addToken(TokenType.RIGHT_CURLY); break;
              case '[': addToken(TokenType.LEFT_BRACE); break;
              case ']': addToken(TokenType.RIGHT_BRACE); break;
              case ',': addToken(TokenType.COMMA); break;
              case '.': addToken(TokenType.DOT); break;
              case ';': addToken(TokenType.SEMICOLON); break;
              case '#': addToken(TokenType.HASH); break;
              case '?': addToken(TokenType.QUESMK); break;
              case '$': addToken(TokenType.DOLLAR); break;
              case '!': addToken(match('=') ? TokenType.NOTEQ : TokenType.NOT); break;
              case '=': addToken(match('=') ? TokenType.EQEQ : TokenType.EQUALS); break;
              case ':':  addToken(match('=') ? TokenType.INFER : TokenType.COLON); break;
              case '<':
                if(match('<'))
                    addToken(TokenType.SHL);
                else
                    addToken(match('=') ? TokenType.LTE : TokenType.LESSTHAN);
                break;
              case '>':
                if(match('>'))
                    addToken(TokenType.SHR);
                else
                    addToken(match('=') ? TokenType.GTE : TokenType.GREATERTHAN);
                break;

              case '&':
                if(match('='))
                    addToken(TokenType.ANDEQ);
                else
                    addToken(match('&') ? TokenType.ANDAND : TokenType.AND);
                break;
              case '|':
                if(match('='))
                    addToken(TokenType.OREQ);
                else
                    addToken(match('|') ? TokenType.OROR : TokenType.OR);
                break;
              case '^': addToken(match('=') ? TokenType.XOREQ : TokenType.XOR); break;
              case '%': addToken(match('=') ? TokenType.MODEQ : TokenType.MOD); break;
              case '+':
                if(match('='))
                    addToken(TokenType.PLUSEQ);
                else
                    addToken(match('+') ? TokenType.INC : TokenType.PLUS);
                break;
              case '-':
                if(match('='))
                    addToken(TokenType.MINUSEQ);
                else if(match('>'))
                    addToken(TokenType.PTR);
                else
                    addToken(match('-') ? TokenType.DEC : TokenType.MINUS);
                break;
              case '*': addToken(peek(1)=='=' ? TokenType.MULTEQ : TokenType.MULT); break;
              case ' ':
              case '\t':
              case '\r':
                // Ignore whitespace.
                break;
              case '/':
                if (match('/')) {
                  // A comment goes until the end of the line.
                  while (!char.isNewLine(peek(1)) && !isEnd) advance();
                } else if(match('*')) {
                  // A multiline comment goes until the [*/].
                  while(!isEnd && !(current == '*' && peek(1) == '/'))
                  {
                      if(char.isNewLine(current)){
                          newline();
                      }

                      advance();
                  }
                  advance();
                } else {
                    if(match('='))
                        addToken(TokenType.DIVEQ);
                    else
                        addToken(TokenType.DIV);
                }
                break;

              case '\n':
                newline();
                break;

              case '"':
                parseString();
                break;

              case '\'':
                parseChar();
                break;

              case '0':
              case '1':
              case '2':
              case '3':
              case '4':
              case '5':
              case '6':
              case '7':
              case '8':
              case '9':
                    parseNumber();
                break;

              default:
                errors.createNewError(CompilerError.UNEXPECTED_SYMBOL, line, col, " `" + new char(current) + "`");
                break;
            }

            advance();
        }

//        Token[] arry = tokens.toArray();
//        foreach(Token token : arry) {
//            println(" token: " + token.getToken()
//                + " - " + token.getId() + " line " + token.getLine()
//                + " col " + token.getCol());
//        }
        println("errors " + errors.getRawErrorCount());

        end:
        tokens.add(new Token("eof", TokenId.SINGLE, TokenType.EOF, 0, line));
    }

    private def addToken(TokenId id) {
      tokens.add(new Token(text.substring(start, cursor), id, col, line));
    }

    private def addToken(TokenType type) {
      tokens.add(new Token(text.substring(start, cursor), TokenId.SINGLE, type, col, line));
    }

    private def match(var c) : var {
        if(peek(1)==c) {
            advance();
            return true;
        }

        return false;
    }

    private def parseChar() {
        if (tokensLeft() < 2)
        {
            errors.createNewError(CompilerError.EXPECTED_CHAR_LITERAL_EOF, line, col);
            advance();
            return;
        }
        advance();

        start = cursor;
        var escapedFound  = false;
        var escaped       = false;
        var hasCharacter  = false;

        while (!isEnd)
        {
            if (!escaped && ('\\' == current))
            {
                if(hasCharacter)
                {
                    errors.createNewError(CompilerError.ILLEGAL_CHAR_LITERAL_FORMAT, line, col, ", a chacacter literal cannot contain more than a single character; expected `'`");
                    return;
                }

                escapedFound = true;
                escaped = true;
                advance();
                continue;
            }
            else if (!escaped)
            {
                if ('\'' == current)
                    break;

                if(hasCharacter)
                {
                    errors.createNewError(CompilerError.ILLEGAL_CHAR_LITERAL_FORMAT, line, col, ", a chacacter literal cannot contain more than a single character; expected `'`");
                    return;
                }

                hasCharacter = true;
            }
            else if (escaped)
            {
                hasCharacter = true;
                if(current != '0' && current != 'a' && !char.isAlpha(current)
                    && current != '\\' && current != '\"' && current != '\'')
                {
                    errors.createNewError(CompilerError.ILLEGAL_CHAR_LITERAL_FORMAT, line, col, ", text preceding `\\` must be alpha, '\"', or '\\'' only");
                    return;
                }
                escaped = false;
            }
            advance();
        }

        if (isEnd)
        {
            errors.createNewError(CompilerError.UNEXPECTED_EOF, line, col);
            return;
        }

        if (!escapedFound)
        {
            cursor--;
            if(!hasCharacter) {
                errors.createNewError(CompilerError.ILLEGAL_CHAR_LITERAL_FORMAT, line, col, ", character literals cannot be empty");
            } else
                addToken(TokenId.CHAR_LITERAL);
            cursor++;
        }
        else
        {
            tokens.add(new Token(getEscapedString(text.substring(start, cursor-1)), TokenId.CHAR_LITERAL, col, line));
        }

    }

    private def parseIdentifier() {
        var hasletter = false;

        while(!isEnd)
        {
            switch(current) {
                case '_':
                case 'a':
                case 'b':
                case 'c':
                case 'd':
                case 'e':
                case 'f':
                case 'g':
                case 'h':
                case 'i':
                case 'j':
                case 'k':
                case 'l':
                case 'm':
                case 'n':
                case 'o':
                case 'p':
                case 'q':
                case 'r':
                case 's':
                case 't':
                case 'u':
                case 'v':
                case 'w':
                case 'x':
                case 'y':
                case 'z':
                case 'A':
                case 'B':
                case 'C':
                case 'D':
                case 'E':
                case 'F':
                case 'G':
                case 'H':
                case 'I':
                case 'J':
                case 'K':
                case 'L':
                case 'M':
                case 'N':
                case 'O':
                case 'P':
                case 'Q':
                case 'R':
                case 'S':
                case 'T':
                case 'U':
                case 'V':
                case 'W':
                case 'X':
                case 'Y':
                case 'Z':
                    hasletter = true;
                    break;

                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                    break;
                default:
                    goto save;
            }

            advance();
        }

        save:
        cursor--;
        if(!hasletter)
            errors.createNewError(CompilerError.GENERIC, line, col, " expected at least 1 letter in identifier");
        else
            addToken(TokenId.IDENTIFIER);
    }

    private def parseNumber() {
        if(current == '0' && peek(1) == 'x') {
            var underscoreAllowed = false;

            col += 2; cursor += 2;
            while(!isEnd && (isHexNum(current) || current == '_')) {
                if(isHexNum(current))
                    underscoreAllowed = true;
                else {
                    if(!underscoreAllowed) {
                        errors.createNewError(CompilerError.ILLEGAL_NUMBER_FORMAT, line, col, ", unexpected or illegally placed underscore");
                        break;
                    }

                    advance();
                    continue;
                }

                advance();
            }

            cursor--;
            addToken(TokenId.HEX_LITERAL);
            return;
        } else {
            /*
               Attempt to match a valid numeric value in one of the following formats:
               1. 123456
               2. 123.456
               3. 1_23.456e3
               4. 123.456E3
               5. 123.456e+3
               6. 123.456E+3
               7. 123.456e-3
               8. 123.456E-3
               9. 12345e5
            */
            var dotFound          = false;
            var eFound            = false;
            var postESignFound    = false;
            var underscoreAllowed = false;

            while(!isEnd)
            {
               if('_' == current) {
                   if(!underscoreAllowed || data[cursor-1] == '.')
                   {
                       errors.createNewError(CompilerError.ILLEGAL_NUMBER_FORMAT, line, col, ", unexpected or illegally placed underscore");
                       return;
                   }
                   advance();
               }
               else if ('.' == current)
               {
                   if (dotFound)
                   {
                       errors.createNewError(CompilerError.ILLEGAL_NUMBER_FORMAT, line, col, ", double decimal");
                       return;
                   }
                   dotFound = true;
                   advance();
                   continue;
               }
               else if ('e' == char.toLower(current))
               {
                   underscoreAllowed = false;
                   var c = peek(1);
                   if (peekEnd(1))
                   {
                       errors.createNewError(CompilerError.ILLEGAL_NUMBER_FORMAT, line, col, ", missing exponent prefix");
                       return;
                   }
                   else if (
                           ('+' != c) &&
                           ('-' != c) &&
                           !char.isDigit(c)
                           )
                   {
                       errors.createNewError(CompilerError.ILLEGAL_NUMBER_FORMAT, line, col, ", expected `+`, `-`, or digit");
                       return;
                   }
                   eFound = true;
                   advance();
                   continue;
               }
               else if (eFound && isSign(current))
               {
                   if (postESignFound)
                   {
                       errors.createNewError(CompilerError.ILLEGAL_NUMBER_FORMAT, line, col, ", duplicate exponent sign postfix");
                       return;
                   }
                   postESignFound = true;
                   advance();
                   continue;
               }
               else if (('.' != current) && !char.isDigit(current))
                   break;
               else
               {
                   if(char.isDigit(current) && !eFound)
                       underscoreAllowed = true;
                   advance();
               }
            }

            cursor--;
            addToken(TokenId.INTEGER_LITERAL);
        }
    }

    private def parseString() {
        if (tokensLeft() < 2)
        {
            errors.createNewError(CompilerError.EXPECTED_STRING_LITERAL_EOF, line, col);
            advance();
            return;
        }
        advance();
        if(current == '\"') {
            tokens.add(new Token("", TokenId.STRING_LITERAL, col, line));
            return;
        }

        start = cursor;
        var escapedFound = false;
        var escaped = false;

        while (!isEnd)
        {
            if(char.isNewLine(current))
            {
                errors.createNewError(CompilerError.ILLEGAL_STRING_FORMAT, line, col, ", expected `\"` before end of line");
                newline();
                return;
            }
            else if (!escaped && ('\\' == current))
            {
                escapedFound = true;
                escaped = true;
                advance();
                continue;
            }
            else if (!escaped)
            {
                if ('"' == current)
                    break;
            }
            else if (escaped)
            {
                if(!char.isAlpha(current) && ('\\' != current)  && ('\"' != current) && ('\'' != current))
                {
                    errors.createNewError(CompilerError.ILLEGAL_STRING_FORMAT, line, col, ", text preceding `\\` must be alpha, '\\', '\\'', or '\"' only");
                    return;
                }

                escaped = false;
            }

            advance();
        }

        if (isEnd)
        {
            errors.createNewError(CompilerError.UNEXPECTED_EOF, line, col);
            return;
        }

        cursor--;
        if (!escapedFound)
            addToken(TokenId.STRING_LITERAL);
        else
            tokens.add(new Token(getEscapedString(text.substring(start, cursor)), TokenId.STRING_LITERAL, col, line));
        cursor++;
    }

    def isWhitespace(var c) : var {
        return ((' '  == c) || ('\n' == c) ||
                ('\r' == c) || ('\t' == c) ||
                ('\b' == c) || ('\v' == c) ||
                ('\f' == c));
    }

    def getEscapedString(string msg) : string {
        var[] tmp = new var[msg.size()];
        var[] str = msg.getData();
        string sb = "";

        char c = 0;
        var iter;
        for(var i = 0; i < sizeof(str); i++)
        {
            if(str[i] == '\\')
            {
                switch(str[i+1]) {
                    case 'n':
                        tmp[iter++] =  '\n';
                        break;
                    case 't':
                        tmp[iter++] = '\t';
                        break;
                    case 'b':
                        tmp[iter++] = '\b';
                        break;
                    case 'v':
                        tmp[iter++] = '\v';
                        break;
                    case 'r':
                        tmp[iter++] = '\r';
                        break;
                    case 'f':
                        tmp[iter++] = '\f';
                        break;
                    case '0':
                        tmp[iter++] = '\0';
                        break;
                    case 'a':
                        tmp[iter++] = '\a';
                        break;
                    default:
                        tmp[iter++] = str[i+1];
                        break;
                }

                i++;
            }
            else
                tmp[iter++] = str[i];
        }
        return sb.string(tmp, iter);
    }

    def isSign(var c) : var {
        return (('+'  == c) || ('-' == c));
    }

    def newline() {
        col = 0;
        line++;
    }

    def advance() {
        col++;
        cursor++;
        if(cursor < sizeof(data))
            current = data[cursor];
        else isEnd = true;
    }

    def peekEnd(var chars) : var {
        return (cursor+chars) >= sizeof(data);
    }

    def tokensLeft() : var {
        return sizeof(data) - cursor;
    }

    def peek(var chars) : var {
        return ((cursor+chars) >= sizeof(data) || (cursor+chars) < 0)
            ? data[sizeof(data)-1] : data[cursor+chars];
    }

    public def getErrors() : ErrorManager {
        return errors;
    }

    public def getData() : string {
        return text;
    }

    public def getLines() : ArrayList<string> {
        return lines;
    }

    public def getFile() : string {
        return file;
    }

    public def get(var pos) : Token {
        return tokens.get(pos);
    }

    public def last() : Token {
        return tokens.last(); // EOF returned
    }

    public def getTokens() : Token[] {
        return tokens.data();
    }

    public def size() : var {
        return tokens.size();
    }

    def addLines() {
        var[] raw = text.getData();

        start = 0;
        for(var i = 0; i < sizeof(raw); i++) {
            if(raw[i] == '\n') {
                lines.add(text.substring(start, i==0 || start==i ? i : i-1));
                start = i+1;
            }
        }

        if(start==0)
            lines.add(new string(raw));
    }

    private static def isHexNum(var c) : var {
        return (char.isDigit(c) || ((c >= 65) && (c <= 72)) ||
                       ((c >= 97) && (c <= 104)));
    }
}