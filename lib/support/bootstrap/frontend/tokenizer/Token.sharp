mod app;

import std;

/**                          
* Created by bknun on 6/13/2018            
* Description:                             
*/
class token {

    private var line;
    private var col;
    private tokenId id;
    private tokenType type;
    private string token;

    public token() {
        token = "";
        type = tokenType.NONE;
        id = tokenId.NOENTITY;
    }

    public token(string tok, tokenId id, tokenType type, var col, var line) {
        self->token = tok;
        self->type = type;
        self->id = id;
        self->col = col;
        self->line = line;
    }


    public token(string tok, tokenId id, var col, var line) {
        self->token = tok;
        self->type = tokenType.NONE;
        self->id = id;
        self->col = col;
        self->line = line;
    }

    public def operator!=(tokenId id) : var {
        return self->id != id;
    }

    public def operator!=(tokenType type) : var {
        return self->type != type;
    }

    public def operator==(var[] token) : var {
        return self->token == token;
    }

//    public def operator==(string token) : var {
//        return self->token == token;
//    }

    public def operator!=(string token) : var {
        return self->token != token;
    }

    public def operator==(token entity) : var {
        return id==entity.id && token == entity.token;
    }

    public def operator==(tokenId id) : var {
        return self->id == id;
    }

    public def operator==(tokenType type) : var {
        return self->type == type;
    }

    public def getId() : tokenId {
        return id;
    }

    public def gettoken() : string {
        return token;
    }

    public def getCol() : var {
        return self->col;
    }

    public def getLine() : var {
        return self->line;
    }

    public def getType() : tokenType {
        return self->type;
    }

    public def to_string() : string {
        return token + ": " + line + "," + col;
    }
}

enum tokenId
{
    identifier,
    native_type,
    type_identifier,
    integer_literal,
    hex_literal,
    modulename,
    string_literal,
    char_literal,
    literal,
    value,
    accesstype,
    singleline_comment,
    return_statement,

    single, // single token
    noentity // not an entity
};
