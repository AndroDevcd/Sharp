mod app;

import std;

/**                          
* Created by bknun on 6/12/2018            
* Description:                             
*/
class Options {
    /*
     * Activate aggressive error reporting for the compiler.
     */
    public static var aggressiveErrors = false;

    /*
     * Only compile all the files
     */
    public static var compile = false;

    /*
     * Output file to write to
     */
    public static string out = "out";

    /*
     * Application version
     */
    public static string version = "1.0";

    /*
     * Disable warnings
     */
    public static var warnings = true;

    /*
     * Optimize code
     */
    public static Optimization optimizeLevel = Optimization.NONE;

    /*
     * Set code to be debuggable (flag only used in manifest creation)
     */
    public static var debug = true;

    /*
     * Strip debugging info (if-applicable)
     */
    public static var strip = false;

    /*
     * Enable warnings as errors
     */
    public static var werrors = false;

    /*
     * Easter egg to enable magic mode
     */
    public static var magic = false;

    /*
     * Easter egg to enable debug mode
     *
     * Allows you to see a little information
     * on what the compiler is doing
     */
    public static var debugMode = false;

    /*
     * Dump generated assembly code
     */
    public static var asmDump = false;

    /*
     * Maximum errors the compiler will allow
     */
    public static var maxErrors = 1000;

    /*
     * Machine platform target to run on
     */
    public static var target = Platform.ALPHA;

    /*
     * List of user defined library paths
     */
    public static ArrayList<string> libraries = new ArrayList<string>();
}

const var ASM_DEMANGLE = 0;
const var ASM_SYNTAX = 1;
const var ASM_DEBUG_INFO = 2;

// WARNING SWITCHES
const var __WGENERAL = 0;
const var __WACCESS = 1;
const var __WAMBIG = 2;
const var __WDECL = 3;
const var __WMAIN = 4;
const var __WCAST = 5;
const var __WINIT = 6;

var[] asmDumpOptions = new var[]
{
    false, // de-mangle
    false, // reformat to syntax
    false // show debug info
};

var[] warningOptions = new var[]
{
    true,    // general warnings
    true,    // waccess
    true,   // wambig
    true,   // wdecl
    true,   // wmain
    true,   // wcast
    true    // winit
};

enum Optimization {
    NONE = 0,

    /*
    * This optimization consists of the most basic level of optimization where
    * no code is changed at the "user" level. Meaning all code written at the language
    * level remain in place and code at the virtual machine level is replaced with more high performance
    * instructions
    *
    */
    BASIC = 1,

    /*
    * This optimization consists of the highest level of optimization available for your code
    * Code under this optimization will be changed at both the "user" level and vm level. Meaning that code written at the language
    * level may not exist at the lower level/ may be heavily modified and code at the virtual machine level is replaced with more high performance
    * instructions
    *
    */
    HIGH_PERFORMANCE = 2
};
