mod main;

/**                          
* Created by bknun on 6/12/2018            
* Description:                             
*/
class options {
    /*
     * Activate aggressive error reporting for the compiler.
     */
    static aggressive_errors := false;

    /*
     * Only compile all the files
     */
    static compile := false;

    /*
     * Only compile all the files
     */
    static _obfuscate := false;

    /*
     * Output file to write to
     */
    static out : string = "out";

    /*
     * Output file to write to
     */
    static new_project_dir : string = "";

    /*
     * Location of the project you want to compile
     */
    static project_dir : string = "";

    /*
     * Mapping file to write to
     */
    static map_file : string = "mapping.txt";

    /*
     * Directory to which c++ code will be generated
     */
    static native_code_dir : string = "generated";

    /*
     * Application version
     */
    static version : string = "1.0";

    /*
     * Disable warnings
     */
    static warnings := true;

    /*
     * Enable file caching
     */
    static file_caching := true;

    /*
     * Execute source code after successful compilation
     */
    static run_source := false;

    /*
     * Optimize code
     */
    static optimize_level := optimization_level.none;

    /*
     * Set the compilation mode
     */
    static compile_mode := compilation_mode.file_mode;

    /*
     * Set code to be debuggable (flag only used in manifest creation)
     */
    static debug := true;

    /*
     * Strip debugging info (if-applicable)
     */
    static strip := false;

    /*
     * Flush compiler cache and start from scratch (only used in project mode)
     */
    static clean_build := false;

    /*
     * Enable warnings as errors
     */
    static werrors := false;

    /*
     * Enable green mode for less overall power consumption
     * When compiling source code
     */
    static green_mode := false;

    /*
     * Easter egg to enable magic mode
     */
    static magic := false;

    /*
     * Easter egg to enable debug mode
     *
     * Allows you to see a little information
     * on what the compiler is doing
     */
    static debug_mode := false;

    /*
     * Maximum errors the compiler will allow
     */
    static max_errors := 1000;

    /*
     * Machine platform target to run on
     */
    static target := main#platform.alpha;

    /*
     * List of user defined library paths
     */
    static libraries := new list<string>();

    /*
     * List of ignored directories (only used in project mode)
     */
    static ignored_directories := new list<string>();

    /*
     * List of ignored files
     */
    static ignored_files := new list<string>();
}

supported_versions := new string[] {
    "0.2.9",
    "0.3.0"
};

// WARNING SWITCHES
const __w_general := 0;
const __w_access := 1;
const __w_ambig := 2;
const __w_decl := 3;
const __w_main := 4;
const __w_cast := 5;
const __w_init := 6;

warning_options := new var[]
{
    true,    // general warnings
    true,    // waccess
    true,   // wambig
    true,   // wdecl
    true,   // wmain
    true,   // wcast
    true    // winit
};

enum optimization_level {
    none = 0,

    /*
    * This optimization consists of the most basic level of optimization where
    * no code is changed at the "user" level. Meaning all code written at the language
    * level remain in place and code at the virtual machine level is replaced with more high performance
    * instructions
    *
    */
    basic = 1,

    /*
    * This optimization consists of the highest level of optimization available for your code
    * Code under this optimization will be changed at both the "user" level and vm level. Meaning that code written at the language
    * level may not exist at the lower level/ may be heavily modified and code at the virtual machine level is replaced with more high performance
    * instructions
    *
    */
    high_performance = 2
};

enum compilation_mode {
    /*
    * This mode specifies that you must explicitly pass in
    * any files that you want compiled
    */
    file_mode,

    /*
    * This mode specifies that you want to run the compiler in project mode,
    * signifying that you do not have to explicitly provide any files to be compiled.
    * Any additional files and or directories added to the options will also be added
    * to the compilation list as well.
    */
    project_mode
};
