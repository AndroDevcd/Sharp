mod std.os.gui;

import std;

/**
* Low level gui interface
*/
enum _GUI
{
    gui_quit=0,
    gui_paint,
    gui_set_ctx,
    gui_ctx,
    gui_dwnd,
    gui_show,
    gui_upd,
    gui_dsp,
    gui_msg
};

// pain procedures
enum _PAINT
{
    pt_text=0,
    pt_start=1,
    pt_end=2,
    pt_move=3,
    pt_line=4,
    pt_rect=5,
    pt_fillrect=6,
    pt_ellipsize=7,
    pt_polygon=8,
    pt_createPen=9,
    pt_selectPen=10,
    pt_deletePen=11,
    pt_createBrush=12,
    pt_selectBrush=13,
    pt_deleteBrush=14
};

enum PaintStyle
{
    PS_SOLID =0,
    PS_DASH =1,
    PS_DOT =2,
    PS_DASHDOT =3,
    PS_DASHDOTDOT =4,
    PS_NULL =5,
    PS_INSIDEFRAME =6
};

// simple pipe for non ambiguous calls
def guiPipe(var proc) {
    asm(
        "loadl %ebx,<proc>"
        "int 0xf5"
    );
}

// simple pipe for non-ambiguous calls that provide basic feedback
def guiPipe2(var proc) : var {
    asm(
        "loadl %ebx,<proc>"
        "int 0xf5"
        "return_val %cmt"
        "ret"
    );
}

// simple pipe for non-ambiguous calls that provide basic feedback
def guiPipe3(var paintProc, var x, var y) : var {
    asm(
        "movi #1,%ebx "
        "loadl %ecx,<paintProc> "
        "ipushl <y>"
        "ipushl <x>"
        "int 0xf5"
        "return_val %cmt"
        "ret"
    );
}

// simple pipe for non-ambiguous calls that provide basic feedback
def guiPipe4(var paintProc, var a, var b, var c, var d) : var {
    asm(
        "movi #1,%ebx "
        "loadl %ecx,<paintProc> "
        "ipushl <d>"
        "ipushl <c>"
        "ipushl <b>"
        "ipushl <a>"
        "int 0xf5"
        "return_val %cmt"
        "ret"
    );
}

def quit() {
    guiPipe((var)gui_quit);
}

def paintStart() : var {
    asm("movi #0x1, %ecx"); // set paint procedure
    return guiPipe2((var)gui_paint);
}

def paintEnd() : var {
    asm("movi #0x2, %ecx"); // set paint procedure
    return guiPipe2((var)gui_paint);
}

def paintText(var[] msg, var x, var y) : var {
    asm(
        "movi #0x1, %ebx "
        "movi #0x0, %ecx "
        "ipushl <y> "
        "ipushl <x> "
        "pushl <msg> "
        "int 0xf5"
    );
}

def setContext(var wnd) : var {
    asm(
        "movi #0x2, %ebx "
        "loadl %adx,<wnd> "
        "int 0xf5"
        "return_val %cmt"
        "ret"
    );
}

def getContext() : var {
    return guiPipe2((var)gui_ctx);
}

def createDefaultWnd(string name, string title, var width, var height) : var {
    var[] n = name.getData();
    var[] t = title.getData();
    asm(
        "movi #0x4, %ebx "
        "pushl <t> "
        "pushl <n> "
        "loadl %ecx,<width> "
        "loadl %egx,<height> "
        "int 0xf5 "
        "return_val %cmt "
        "ret"
    );
}

def show(var wnd, var cmd) : var {
    asm("loadl %adx,<wnd>"
        "loadl %egx,<cmd>");
    return guiPipe2((var)gui_show);
}

def update(var wnd) : var {
    asm("loadl %adx,<wnd>");
    return guiPipe2((var)gui_upd);
}

public class Message {
    var msg;
    var wParam;
    var lParam;
}

Message gMsg = new Message();

def getMessage() : Message {
    guiPipe((var)gui_msg);
    Message msg = gMsg;

    asm(
        "movl <msg> "
        "movn 0 "
        "movi #0,adx "
        "rmov adx,ebx "
        "movl <msg> "
        "movn 1 "
        "rmov adx,ecx "
        "movl <msg> "
        "movn 2 "
        "rmov adx,egx "
    );
    return msg;
}

def dispatchMessage() : var {
    return guiPipe2((var)gui_dsp);
}

def moveTo(var x, var y) : var {
    return guiPipe3((var)pt_move, x, y);
}

def lineTo(var x, var y) : var {
    return guiPipe3((var)pt_line, x, y);
}

def rectangle(var left, var top, var right, var bottom) : var {
    return guiPipe4((var)pt_rect, left, top, right, bottom);
}

def fillRect(var left, var top, var right, var bottom) : var {
    return guiPipe4((var)pt_fillrect, left, top, right, bottom);
}

def ellipsize(var left, var top, var right, var bottom) : var {
    return guiPipe4((var)pt_ellipsize, left, top, right, bottom);
}

def polygon(Polygon poly) : var {

    asm(
        "movi #1,%ebx "
        "movi #8, %ecx "
        "movl <poly>"
        "pushobj "
        "int 0xf5 "
        "return_val %cmt "
        "ret"
    );
}

// rgb based on windows GDI spec
// format 0x00bbggrr
def RGB(var r, var g, var b) : var
{
    return ((b & 0xff) << 16) + ((g & 0xff) << 8) + (r & 0xff);
}

def createPen(var style, var width, var color) {

    asm(
        "movi #1,%ebx "
        "movi #9, %ecx "
        "ipushl <color> "
        "ipushl <width> "
        "ipushl <style> "
        "int 0xf5"
        "ret"
    );
}

def selectPen(var pen): var {
    asm(
        "loadl %adx,<pen> "
        "movi #10,%ecx" // select pen
    );
    return guiPipe2((var)gui_paint);
}

def deletePen(var pen): var {
    asm(
        "loadl %adx,<pen> "
        "movi #11,%ecx" // select pen
    );
    return guiPipe2((var)gui_paint);
}

def selectBrush(var brush): var {
    asm(
        "loadl %adx,<brush>"
        "movi #13,%ecx" // select pen
    );
    return guiPipe2((var)gui_paint);
}

def deleteBrush(var brush): var {
    asm(
        "loadl %adx,<brush>"
        "movi #14,%ecx" // select pen
    );
    return guiPipe2((var)gui_paint);
}

// creates a solid brush
def createBrush(var color) {

    asm(
        "movi #1,%ebx "
        "movi #12, %ecx "
        "ipushl <color> "
        "int 0xf5"
        "ret"
    );
}