mod std.io;

import std;
import std.kernel;
import std.kernel.vm;

/**
 * Threading API for creating multi-threaded applications
 * A thread is a thread of execution in a program. The Sharp
 * Virtual Machine allows an application to have multiple threads of
 * execution running concurrently.
 *
 * Every thread has a priority. Threads with higher priority are
 * executed in preference to threads with lower priority. Each thread
 * may or may not also be marked as a daemon. When code running in
 * some thread creates a new Thread object, the new
 * thread has its priority initially set equal to normal priority
 * unless told otherwise.
 *
 * Daemon threads once created cannot be interrupted so the user must implement their
 * own callbacks to successfully shutdown any daemon threads running.
 *
 * Thread Interrupts:
 *
 * The multi-threading system in the Sharp Virtual Machine were designed from the davik vm source code in the sense that once a thread
 * has been sent the interrupt signal it dies instantly. This could only be problematic
 * if the thread was doing any IO. However all mutexes acquired by a thread will always be
 * cleaned up after the thread is done executing to prevent deadlocks.
 *
 */
public class Thread {

    /**
    * blocking call, user must use standardized constructors
    */
    private Thread() {}

    public Thread(string name, fn main (object[]) : var) {
        self->main = main;
        self->name = name;
        self->priority = NORM_PRIORITY;
        self->id = ThreadCore.__thread_create(self);

        addThread(self);
    }

    public Thread(string name, fn main (object[]) : var, var stackSize) {
        self->main = main;
        self->name = name;
        self->stackSize = stackSize;
        self->priority = NORM_PRIORITY;
        self->id = ThreadCore.__thread_create(self);

        addThread(self);
    }

    public def start(object[] args) : var {
        return ThreadCore.__thread_start(self, args);
    }

    public def join() : var {
        return ThreadCore.__thread_join(self);
    }

    public def interrupt() : var {
        return ThreadCore.__thread_interrupt(self);
    }

    public def destroy() : var {
        return ThreadCore.__thread_destroy(self);
    }

    public static def currentThread() : Thread {
        return ThreadCore.__thread_current();
    }

    public static def sleep(var time) {
        Time.sleep(TimeUnit.MILLISECONDS, time);
    }

    public def exit(var code) {
        ThreadCore.__thread_exit(self, code);
    }

    public static def yield() {
        ThreadCore.__thread_yield();
    }

    public def setPriority(var priority) {
        if(priority > MAX_PRIORITY || priority < MIN_PRIORITY)
            throw new IllegalArgumentException("invalid thread priority " + priority);

        lock(self) {
            self->priority = priority;
            if(!exited) {
                ThreadCore.__thread_priority(self, priority);
            }
        }
    }

    static def addThread(Thread thread) {
        lock(pool) {
            pool.add(thread);
        }
    }

    static def popThread(Thread thread) {
        lock(pool) {
            Thread[] lst = pool.toArray();
            var iter;
            foreach(Thread t : lst) {
                if(thread.id == t.id) {
                    pool.remove(iter);
                    break;
                }
                iter++;
            }
        }
    }

    /**
     * The minimum priority that a thread can have.
     */
    public static const var MIN_PRIORITY = 0x001;

    /**
     * The default priority that is assigned to a thread.
     */
    public static const var NORM_PRIORITY = 0x0004;

    /**
     * The maximum priority that a thread can have.
     */
    public static const var MAX_PRIORITY = 0x0006;

    public def getId() : var { return id; }
    public def getStackSize() : var { return stackSize; }
    public def getName() : string { return name; }
    public def setExited(var exited) { self->exited = exited; }
    public def isExited() : var { return exited; }
    public def isDaemon() : var { return daemon; }
    public def setStarted(var started) { self->started = started; }
    public def isStarted() : var { return started; }
    public def setTerminated(var term) { self->terminated = term; }
    public def isTerminated() : var { return terminated; }

    public static def setupMainThread() {
        Thread main = new Thread();
        //main.main; main function will remain 0 as the address is unknown
        main.id = 0;
        main.name = "main";
        main.started = true;

        addThread(main);
        ThreadCore.__thread_set_thread(main); // set current thread to main
    }

    public def operator==(Thread thread) : var {
        return id==thread.id;
    }

    static ArrayList<Thread> pool = new ArrayList<Thread>();
    public var exitCode;

    var id;
    var priority;
    var daemon; // not supported as of now
    var terminated;
    var exited;
    string name = "";
    var started;
    var stackSize;
    fn main (object[]) : var;
}
