mod std;

import std.kernel;

/**                          
* Created by bknun on 7/11/2018            
* Description:
* Simple math class to perform math operations
*/
public class Math {
    public Math() { }

    /**
     * E for processing natural logarithms.
     */
    public static const var E = 2.7182818284590452;

    /**
     * PI holds the ratio of the circumference of a circle to its
     * diameter.
     */
    public static const var PI = 3.1415926535897932;

    /**
     * Returns the trigonometric sine of an angle.  Special cases:
     * <ul><li>If the argument is NaN or an infinity, then the
     * result is NaN.
     * <li>If the argument is zero, then the result is a zero with the
     * same sign as the argument.</ul>
     *
     * <p>The computed result must be within 1 ulp of the exact result.
     * Results must be semi-monotonic.
     *
     * @param   a   an angle, in radians.
     * @return  the sine of the argument.
     */
    public static def sin(var n) : var { return CMath.sin(n); }
    
    public static def cos(var n) : var { return CMath.cos(n); }
    
    public static def tan(var n) : var { return CMath.tan(n); }
    
    public static def sinh(var n) : var { return CMath.sinh(n); }
    
    public static def cosh(var n) : var { return CMath.cosh(n); }
    
    public static def tanh(var n) : var { return CMath.tanh(n); }
    
    public static def asin(var n) : var { return CMath.asin(n); }
    
    public static def acos(var n) : var { return CMath.acos(n); }
    
    public static def atan(var n) : var { return CMath.atan(n); }
    
    public static def atan2(var n, var n2) : var { return CMath.atan2(n, n2); }
    
    public static def exp(var n) : var { return CMath.exp(n); }
    
    public static def log(var n) : var { return CMath.log(n); }
    
    public static def log10(var n) : var { return CMath.log10(n); }
    
    public static def pow(var n) : var { return CMath.pow(n); }
    
    public static def sqrt(var n) : var { return CMath.sqrt(n); }
    
    public static def ceil(var n) : var { return CMath.ceil(n); }
    
    public static def floor(var n) : var { return CMath.floor(n); }

    public static def abs(var n) : var { return fabs(n); }

    public static def fabs(var n) : var { return CMath.fabs(n); }
    
    public static def ldexp(var n, var n2) : var { return CMath.ldexp(n, n2); }
    
    public static def fmod(var n, var n2) : var { return CMath.fmod(n, n2); }
}