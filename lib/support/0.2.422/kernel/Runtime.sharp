mod std.kernel;

import std;
import std.io;

/**
 * Created by BraxtonN on 5/17/2018.
 *
 * Low level utility class to interface with the Sharp
 * Virtual Machine. Classic function calls consist of
 * garbage collector requests and the entry-point to
 * your application
 */
public class Runtime { // TODO: implement hashMap "https://www.geeksforgeeks.org/implementing-hash-table-open-addressing-linear-probing-cpp/"

    private static var MINIMUM_ARGS = 4;
    private static string[] userArgs = null;

    // candidates for main method in sharp
    private static fn main(string[]) : var;
    private static fn main2(string[]);
    private static fn main3();

    /**
    * This is necessary to setup all our static data for our classes,
    * propagating the main function, and initializing the runtime environment
    * DO NOT remove this call or it will result in crashes.
    *
    * NO code should be placed inside this function
    */
    private static def initializeRTE() {
    }

    /**
    * contains code for setting the initial values of tls variables
    * this function will be called at the start of every thread
    * DO NOT remove this call or it will result in crashes.
    *
    * NO code should be placed inside this function
    */
    public static def initializeTLS() {
    }

    public static def __srt_init_(object[] args) : var {
        asm(
            "movi 1, adx"
            "istore 3"
            "isadd 2,0"
            "smov ebx,0"
            "put ebx"
            "int 0x9f"
            " nop nop nop nop "
        );
    }

//    /**
//    * This is the entry point of your application
//    */
//    public static def __srt_init_(object[] args) : var {
//
//        Manifest.applicationName = "" + (var[])args[0];
//        Manifest.version = "" + (var[])args[1];
//        Manifest.platform = "" + (var[])args[2];
//        Manifest.OS = "" + (var[])args[3];
//
//        /**
//        * Build config must be setup first before we do anything
//        */
//        initializeRTE();
//        initializeTLS();
//        Thread.setupMainThread();
//        userArgs = new string[sizeof(args) - MINIMUM_ARGS];
//
////        println("application " + BuildConfig.applicationName);
////        println("version " + BuildConfig.version);
////        println("platform " + BuildConfig.platform);
////        println("os " + BuildConfig.OS);
//
//        // set user args to be passed
//        var iter;
//        for(var i = MINIMUM_ARGS; i < sizeof(args); i++) {
//            userArgs[iter++] = new string((var[])args[i]);
//        }
//
//         var ret;
//        // user defined main
//        if(main != 0) {
//            ret = main(userArgs);
//            print("\nProgram finished with exit code " + ret);
//        } else if(main2 != 0)
//            main2(userArgs);
//        else
//            main3();
//
//        return ret;
//    }

    public static def nativeExit() {
        asm(
            "int 0xa9         // interrupt the entire system and initiate shutdown "
            "                                                                      " );
    }

    public static def gc() {
        asm(
            "int 0xa1         // send request to gc to collect data                "
            "                                                                      " );
    }

    public static def memoryLimit() : var {
        var limit; //0xaa

        asm(
            "int 0xaa         // send request to get total max memory given to the garbage collector  "
            "smovr_2 cmt,0    // set limit to value                                                   " );
        return limit;
    }

    public static def managedMemory() : var {
        var limit; //0xab

        asm(
            "int 0xab         // send request to get total memory currently under management          "
            "smovr_2 cmt,0    // set limit to value                                                   " );
        return limit;
    }

    public static def freeMemory() : var {
        return memoryLimit()-managedMemory();
    }

    public static def copy(object[] data, var len) : object[] {
        asm(
            "pushl <data>                                                                             "
            "ipushl <len>                                                                             "
            "int 0xc0         // send request to natively copy object                                 "
            "popl <data>                                                                              "
            "ret                                                                                      " );
    }

    public static def copy2(object[] data, var indexLen, var len) : object[] {
        asm(
            "pushl <data>                                                                             "
            "ipushl <indexLen>                                                                        "
            "ipushl <len>                                                                             "
            "int 0xc1         // send request to natively copy object                                 "
            "popl <data>                                                                              "
            "ret                                                                                      " );
    }

    public static def copy3(object[] data, var startIndex, var stopIndex) : object[] {
        asm(
            "pushl <data>                                                                             "
            "ipushl <startIndex>                                                                        "
            "ipushl <stopIndex>                                                                             "
            "int 0xc3         // send request to natively copy object                                 "
            "popl <data>                                                                              "
            "ret                                                                                      " );
    }

    public static def copy4(object[] data, var startIndex, var stopIndex) : object[] {
        asm(
            "pushl <data>                                                                             "
            "ipushl <startIndex>                                                                        "
            "ipushl <stopIndex>                                                                             "
            "int 0xc4         // send request to natively copy object                                 "
            "popl <data>                                                                              "
            "ret                                                                                      " );
    }

    public static def realloc(object[] data, var size) {
        asm(
            "pushl <data>                                                                             "
            "ipushl <size>                                                                            "
            "int 0xc6         // send request to natively realloc object                                 "
            "ret                                                                                      " );
    }

    public static def sizeOf(object data) : var {
        asm(
            "pushl <data>"
            "int 0xc2" // get real sizeof object in memory
            "return_val %ebx"
            "ret"
        );
    }

    public static def _snprintf(var fmt, var data, var precision) : var[] {
        var[] str;
        asm(
            "loadl %egx,<fmt>"
            "loadl %ebx,<data>"
            "loadl %ecx,<precision>"
            "int 0xc7" // convert double to string
            "movl <str>"
            "popobj"
        );
        return str;
    }


    public static def sizeOf(object[] data) : var {
        asm(
            "pushl <data>"
            "int 0xc2" // get real sizeof object in memory
            "return_val %ebx"
            "ret"
        );
    }


    public static def sedateGc() {
        asm(
            "int 0xf1" // put gc to deep sleep
            "ret"
        );
    }

    public static def selfCollect() : var {
        asm(
            "int 0xf0" // perform collection of memory directly on the calling thread
            "return_val %cmt"
            "ret"
        );
    }

    public static def wakeGc() {
        asm(
            "int 0xf2" // wakeup gc from deep sleep (if thread is alive)
            "ret"
        );
    }

    public static def killGc() {
        asm(
            "int 0xf3" // permanently kill gc for the life of your application
            "ret"
        );
    }

    public static def isGcAwake() : var {
        asm(
            "int 0xf4" // get real sizeof object in memory
            "return_val %cmt"
            "ret"
        );
    }
}
