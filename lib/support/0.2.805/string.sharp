mod std;

import std.io;

class string {
    public data : var[];
    private static currentFormat := 'g';
    private static precision := 0;

    string(str : _int8[]) {
        if(str != null) {
            append(str);
        }
    }

    def append(char: var) : string
    {
        if(data == null)
            data = new var[1];
        else
            realloc(data, sizeof(data) + 1);

        data[sizeof(data) - 1] = char;
        return self;
    }

    def append(c: char) : string
    {
        return append(c.get_value());
    }

    def append(immstr: _int8[]) : string
    {
        if(immstr == null) return self;

        iter := sizeof(data);

        if(data == null)
            data = new var[sizeof(immstr)];
        else
            realloc(data, sizeof(data) + sizeof(immstr));

        foreach(ch in immstr)
        {
            data[iter++] = ch;
        }

        return self;
    }

    def operator+(immstr : _int8[]) : string {
        s := new string(data);
        if(immstr != null)
            return s.append(immstr);
        else
            return s.append("null");
    }

    def operator==(num : _int8[]) : var {
        return 0;
    }

    def operator+(num : var) : string {
        return null;
    }

    def foo() { }

    def hash() : long {
        const p := 31;
        const m := 1e9 + 9;
        hash_value := 0;
        p_pow := 1;
        foreach(c in data) {
            hash_value = (hash_value + (c - 'a' + 1) * p_pow) % m;
            p_pow = (p_pow * p) % m;
        }
        return hash_value;
    }
}
