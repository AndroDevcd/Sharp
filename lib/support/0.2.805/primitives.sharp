mod std;

public class integer<native_type> {
    public value : native_type;

    public integer(initial_val : var) {
        value = initial_val;
    }

    public integer(num : integer<native_type>) {
        value = num.value;
    }

    def delegate::hash() : _int64 {
        return value;
    }

    def foo() {}

    public def operator!=(num : integer<native_type>) := (value!=num.value); // TODO: add func for every integer type
    public def operator!=(num : var) := (value!=num.value);

    public def operator==(num : integer<native_type>) := (value==num.value);

//    public def delegate::to_string() : string {
//        return "" + value;
//    }
}

class ulong base integer<_uint64> {}
class long base integer<_int64> {}
class uint base integer<_uint32> {}
class int base integer<_int32> {}
class ushort base integer<_uint16> {}
class short base integer<_int16> {}
class uchar base integer<_uint8> {}
class char base integer<_int8> {}
class byte base uchar {}
class bool base integer<_int8> { /* TDOO: override base class methods */ }