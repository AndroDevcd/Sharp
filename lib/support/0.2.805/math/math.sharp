mod math;

/**
 * E for processing natural logarithms.
 */
public static const E := 2.7182818284590452;

/**
 * PI holds the ratio of the circumference of a circle to its
 * diameter.
 */
public static const PI := 3.1415926535897932;

def sin(num: var) : var {
    return math_proc(num, 0x0);
}

def cos(num: var) : var {
    return math_proc(num, 0x1);
}

def tan(num: var) : var {
    return math_proc(num, 0x2);
}

def sinh(num: var) : var {
    return math_proc(num, 0x3);
}

def cosh(num: var) : var {
    return math_proc(num, 0x4);
}

def tanh(num: var) : var {
    return math_proc(num, 0x5);
}

def asin(num: var) : var {
    return math_proc(num, 0x6);
}

def acos(num: var) : var {
    return math_proc(num, 0x7);
}

def atan(num: var) : var {
    return math_proc(num, 0x8);
}

def atan(num1: var, num2: var) : var {
    return math_proc(num1, num2, 0x9);
}

def exp(num: var) : var {
    return math_proc(num, 0xa);
}

def log(num: var) : var {
    return math_proc(num, 0xb);
}

def log10(num: var) : var {
    return math_proc(num, 0xc);
}

def pow(num: var, exp: var) : var {
    return math_proc(num, exp, 0xd);
}

def sqrt(num: var) : var {
    return math_proc(num, 0xe);
}

def ceil(num: var) : var {
    return math_proc(num, 0xf);
}

def floor(num: var) : var {
    return math_proc(num, 0x10);
}

def abs(num: var) : var {
    return fabs(num);
}

def fabs(num: var) : var {
    return math_proc(num, 0x11);
}

def ldexp(num: var, num2: var) : var {
    return math_proc(num, num2, 0x12);
}

def fmod(num: var, num2: var) : var {
    return math_proc(num, num2, 0x13);
}


local def math_proc(num: var, proc: var) : var {
    asm {
        loadl ebx, {num}
        loadl ecx, {proc}
        int 0x18
        returnVal cmt
        ret 0
    }

    return 0;
}

local def math_proc(num:var, num2: var, proc: var) : var {
    asm {
        loadl ebx, {num}
        loadl egx, {num2}
        loadl ecx, {proc}
        int 0x18
        returnVal cmt
        ret 0
    }

    return 0;
}
