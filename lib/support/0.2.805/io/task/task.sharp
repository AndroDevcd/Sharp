mod std.io.task;

launcher : job_master = new job_master();

def finish() {
    throw new cancellation_exception();
}

class task {
    static def with_timeout(mills_time : var) : job_builder {
        scheduled_job := launcher.create_job();
        builder := new job_builder(scheduled_job, launcher);
        return builder.with_timeout(mills_time);
    }

    static def schedule(future : var) : job_builder {
        scheduled_job := launcher.create_job();
        builder := new job_builder(scheduled_job, launcher);
        return builder.schedule(future);
    }

    static def with_name(job_name : string) : job_builder {
        scheduled_job := launcher.create_job(job_name);
        builder := new job_builder(scheduled_job, launcher);
        return builder.with_name(job_name);
    }

    static def with_args(args : object[]) : job_builder {
        scheduled_job := launcher.create_job();
        builder := new job_builder(scheduled_job, launcher);
        return builder.with_args(args);
    }

	static def block() : job_builder {
        scheduled_job := launcher.create_job();
        builder := new job_builder(scheduled_job, launcher);
		return builder.block();
	}

	static def long_term() : job_builder {
        scheduled_job := launcher.create_job();
        builder := new job_builder(scheduled_job, launcher);
		return builder.long_term();
	}

    static def builder() : job_builder {
        scheduled_job := launcher.create_job();
        builder := new job_builder(scheduled_job, launcher);
        return builder;
    }
}