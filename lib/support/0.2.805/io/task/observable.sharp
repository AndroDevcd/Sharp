mod std.io.task;

import std.io;

public class observable<t> {

	public observable(initial : t) {
		data = initial;
	}

	public def post(data : t) {
		self->data = data;
		changed = true;
		notify_all();
		changed = false;
	}

	public def observe_forever(on_update: (observable<t>)()) {
	    observers.add(thread.current());

        try {
            do {
                thread.wait();
                on_update(self);
            } while(true);
		} catch(cancellation_exception) {
		    observers.remove(thread.current(), {it, it2 -> return it.id == it2.id; });
		} catch(e: error) {
		    observers.remove(thread.current(), {it, it2 -> return it.id == it2.id; });
		    throw e;
        }
	}

	def notify_all() {
        foreach(t in observers) {
            t.wait_and_notify();
        }
	}

	public def get_data() : t = data;

	public def stop() {
	    throw new cancellation_exception();
	}

    protected changed : var;
	protected data : t;
	protected observers := new synced_list<thread>();
}

