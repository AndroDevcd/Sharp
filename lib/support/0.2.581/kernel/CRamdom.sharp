mod std.kernel;

/**
* Global functions for performing random calculations
* The nature of random in sharp does not have to be bound by
* an object. Each thread consists of its own localized random
* generator so calls to the global rand functions is completely thread
* safe
*/
def __seed(var sd)
{
    asm(
        "loadl %ebx,<sd>"
        "movi #0x003, %adx"
        "int 0xe7"
    );
}

def __rand(var min, var max) : var
{
    asm(
        "loadl %ebx,<min>"
        "loadl %ecx,<max>"
        "movi #0x000, %adx"
        "int 0xe7"
        "return_val %bmr"
        "ret"
    );
}

def __randInt(var min, var max) : var
{
    asm(
        "loadl %ebx,<min>"
        "loadl %ecx,<max>"
        "movi #0x001, %adx"
        "int 0xe7"
        "return_val %bmr"
        "ret"
    );
}

def __rand() : var
{
    asm(
        "movi #0x005, %adx"
        "int 0xe7"
        "return_val %bmr"
        "ret"
    );
}

def __randInt() : var
{
    asm(
        "movi #0x006, %adx"
        "int 0xe7"
        "return_val %bmr"
        "ret"
    );
}

def __reset() : var
{
    asm(
        "movi #0x002, %adx"
        "int 0xe7"
        "return_val %bmr"
        "ret"
    );
}

def __seed() : var
{
    asm(
        "movi #0x004, %adx"
        "int 0xe7"
        "return_val %bmr"
        "ret"
    );
}
