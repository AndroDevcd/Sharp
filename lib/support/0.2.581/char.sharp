mod std;

public class char base integer {

    public char(var num) {
        base->integer((_int8)num);
    }

    public char(integer num) {
        base->integer((_int8)num.value);
    }
    
    public def operator+(var num) : var {
        return (_int8)(value+num);
    }
    
    public def operator+(integer num) : char {
        return new char(operator+(num.value));
    }
    
    public def operator-(var num) : var {
        return (_int8)(value-num);
    }
    
    public def operator-(integer num) : char {
        return new char(operator-(num.value));
    }
    
    public def operator*(var num) : var {
        return (_int8)(value*num);
    }
    
    public def operator*(integer num) : char {
        return new char(operator*(num.value));
    }
    
    public def operator/(var num) : var {
        return (_int8)(value/num);
    }
    
    public def operator/(integer num) : char {
        return new char(operator/(num.value));
    }
    
    public def operator=(var num) : var {
        return (value=(_int8)num);
    }

    public def operator=(integer num) : char {
        operator=(num.value);
        return self;
    }

    public def operator=(Enum num) : char {
       operator=(num.getValue());
       return self;
    }

    public def operator+=(var num) : var {
        value=(_int8)(value+num);
        return (value);
    }
    
    public def operator==(var num) : var {
        return (value==num);
    }
    public def operator!=(char c) : var {
        return (value==c);
    }
    
    public def operator==(integer num) : var {
        return (value==num.value);
    }
    
    public def operator<(var num) : var {
        return (value<num);
    }
    
    public def operator<(integer num) : var {
        return (value<num.value);
    }

    public def operator!=(var num) : var {
        return (value!=num);
    }

    public def operator!=(integer num) : var {
        return (value!=num.value);
    }
    
    public def operator>(var num) : var {
        return (value>num);
    }
    
    public def operator>(integer num) : var {
        return (value>num.value);
    }
    
    public def operator<=(var num) : var {
        return (value<=num);
    }
    
    public def operator<=(integer num) : var {
        return (value<=num.value);
    }
    
    public def operator>=(var num) : var {
        return (value>=num);
    }
    
    public def operator>=(integer num) : var {
        return (value>=num.value);
    }

    public def operator++(var num) : var { // post inc i++
        var before = value;
        value=(_int8)value+1;
        return before;
    }

    public def operator++() : var { // pre inc ++i
        return (value=(_int8)value+1);
    }

    public def operator--(var num) : var {
        var before = value;
        value=(_int8)value-1;
        return before;
    }

    public def operator--() : var {
        return (value=(_int8)value-1);
    }

    public def value() : var {
        return (value);
    }

    public static def isDigit(var ch) : var {
        return ch >= '0' && ch <= '9';
    }

    public static def isNewLine(var ch) : var {
        return ch == '\n';
    }

    public static def isAlpha(var ch) : var {
        return (ch >= 'A' && ch <= 'Z')
            || (ch >= 'a' && ch <= 'z');
    }

    public static def isAlphaNum(var ch) : var {
        return isAlpha(ch) || isDigit(ch);
    }

    public static def toLower(var ch) : var {
        if('A' <= ch && ch <= 'Z')
            return 'a' + (ch - 'A');
        else
            return ch;
    }

    public static def toUpper(var ch) : var {
        if('a' <= ch && ch <= 'z')
            return 'A' + (ch - 'a');
        else
            return ch;
    }

    public def delegate::toString() : string {
        return new string(value);
    }
}