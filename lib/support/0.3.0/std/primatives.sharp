mod std;

import ( platform.* )

/**
* Created by bknun on 9/4/2022
* 
* @class number
*
* Description:
* This class serves as the base class for all language level primitives
*/
public class number<T, NT> base base_number<NT> {
    value : T;
        private set value -> { self->value = value; }
        
    number(initial_val : var) {
        value = initial_val;
    }
    number(initial_val : _int8) {
        value = initial_val;
    }
    number(initial_val : _uint8) {
        value = initial_val;
    }
    number(initial_val : _int16) {
        value = initial_val;
    }
    number(initial_val : _uint16) {
        value = initial_val;
    }
    number(initial_val : _int32) {
        value = initial_val;
    }
    number(initial_val : _uint32) {
        value = initial_val;
    }
    number(initial_val : _int64) {
        value = initial_val;
    }
    number(initial_val : _uint64) {
        value = initial_val;
    }
    number(initial_val : short) {
        value = initial_val.value;
    }
    number(initial_val : bool) {
        value = initial_val.value;
    }
    number(initial_val : ushort) {
        value = initial_val.value;
    }
    number(initial_val : char) {
        value = initial_val.value;
    }
    number(initial_val : byte) {
        value = initial_val.value;
    }
    number(initial_val : uchar) {
        value = initial_val.value;
    }
    number(initial_val : int) {
        value = initial_val.value;
    }
    number(initial_val : uint) {
        value = initial_val.value;
    }
    number(initial_val : long) {
        value = initial_val.value;
    }
    number(initial_val : ulong) {
        value = initial_val.value;
    }
    number(initial_val : double) {
        value = initial_val.value;
    }

    override def hash() : int {
        return value;
    }
    
    def operator!=(num : ulong) := new bool(value!=num.value);
    def operator==(num : ulong) := new bool(value==num.value);
    def operator!=(num : long) := new bool(value!=num.value);
    def operator==(num : long) := new bool(value==num.value);
    def operator!=(num : uint) := new bool(value!=num.value);
    def operator==(num : uint) := new bool(value==num.value);
    def operator!=(num : int) := new bool(value!=num.value);
    def operator==(num : int) := new bool(value==num.value);
    def operator!=(num : ushort) := new bool(value!=num.value);
    def operator==(num : ushort) := new bool(value==num.value);
    def operator!=(num : short) := new bool(value!=num.value);
    def operator==(num : short) := new bool(value==num.value);
    def operator!=(num : uchar) := new bool(value!=num.value);
    def operator==(num : uchar) := new bool(value==num.value);
    def operator!=(num : char) := new bool(value!=num.value);
    def operator==(num : char) := new bool(value==num.value);
    def operator!=(num : byte) := new bool(value!=num.value);
    def operator==(num : byte) := new bool(value==num.value);
    def operator!=(num : bool) := new bool(value!=num.value);
    def operator==(num : bool) := new bool(value==num.value);
    def operator==(num : double) := new bool(value==num.value);
    def operator!=(num : var) := new bool(value!=num);
    def operator==(num : var) := new bool(value==num);
    def operator!=(num : _int8) := new bool(value!=num);
    def operator==(num : _int8) := new bool(value==num);
    def operator!=(num : _int16) := new bool(value!=num);
    def operator==(num : _int16) := new bool(value==num);
    def operator!=(num : _int32) := new bool(value!=num);
    def operator==(num : _int32) := new bool(value==num);
    def operator!=(num : _int64) := new bool(value!=num);
    def operator==(num : _int64) := new bool(value==num);
    def operator!=(num : _uint8) := new bool(value!=num);
    def operator==(num : _uint8) := new bool(value==num);
    def operator!=(num : _uint16) := new bool(value!=num);
    def operator==(num : _uint16) := new bool(value==num);
    def operator!=(num : _uint32) := new bool(value!=num);
    def operator==(num : _uint32) := new bool(value==num);
    def operator!=(num : _uint64) := new bool(value!=num);
    def operator==(num : _uint64) := new bool(value==num);
    
    def operator+(num : ulong)  := new NT(value+num.value);
    def operator+(num : long)   := new NT(value+num.value);
    def operator+(num : uint)   := new NT(value+num.value);
    def operator+(num : int)    := new NT(value+num.value);
    def operator+(num : ushort) := new NT(value+num.value);
    def operator+(num : short)  := new NT(value+num.value);
    def operator+(num : uchar)  := new NT(value+num.value);
    def operator+(num : char)   := new NT(value+num.value);
    def operator+(num : byte)   := new NT(value+num.value);
    def operator+(num : bool)   := new NT(value+num.value);
    def operator+(num : double)   := new NT(value+num.value);
    def operator+(num : var)    := new NT(value+num);
    def operator+(num : _int8)    := new NT(value+num);
    def operator+(num : _int16)    := new NT(value+num);
    def operator+(num : _int32)    := new NT(value+num);
    def operator+(num : _int64)    := new NT(value+num);
    def operator+(num : _uint8)    := new NT(value+num);
    def operator+(num : _uint16)    := new NT(value+num);
    def operator+(num : _uint32)    := new NT(value+num);
    def operator+(num : _uint64)    := new NT(value+num);
    
    def operator-(num : ulong)  := new NT(value-num.value);
    def operator-(num : long)   := new NT(value-num.value);
    def operator-(num : uint)   := new NT(value-num.value);
    def operator-(num : int)    := new NT(value-num.value);
    def operator-(num : ushort) := new NT(value-num.value);
    def operator-(num : short)  := new NT(value-num.value);
    def operator-(num : uchar)  := new NT(value-num.value);
    def operator-(num : char)   := new NT(value-num.value);
    def operator-(num : byte)   := new NT(value-num.value);
    def operator-(num : bool)   := new NT(value-num.value);
    def operator-(num : double)   := new NT(value-num.value);
    def operator-(num : var)    := new NT(value-num);
    def operator-(num : _int8)    := new NT(value-num);
    def operator-(num : _int16)    := new NT(value-num);
    def operator-(num : _int32)    := new NT(value-num);
    def operator-(num : _int64)    := new NT(value-num);
    def operator-(num : _uint8)    := new NT(value-num);
    def operator-(num : _uint16)    := new NT(value-num);
    def operator-(num : _uint32)    := new NT(value-num);
    def operator-(num : _uint64)    := new NT(value-num);
    
    def operator*(num : ulong)  := new NT(value*num.value);
    def operator*(num : long)   := new NT(value*num.value);
    def operator*(num : uint)   := new NT(value*num.value);
    def operator*(num : int)    := new NT(value*num.value);
    def operator*(num : ushort) := new NT(value*num.value);
    def operator*(num : short)  := new NT(value*num.value);
    def operator*(num : uchar)  := new NT(value*num.value);
    def operator*(num : char)   := new NT(value*num.value);
    def operator*(num : byte)   := new NT(value*num.value);
    def operator*(num : bool)   := new NT(value*num.value);
    def operator*(num : double)   := new NT(value*num.value);
    def operator*(num : var)    := new NT(value*num);
    def operator*(num : _int8)    := new NT(value*num);
    def operator*(num : _int16)   := new NT(value+num);
    def operator*(num : _int32)   := new NT(value+num);
    def operator*(num : _int64)   := new NT(value+num);
    def operator*(num : _uint8)   := new NT(value+num);
    def operator*(num : _uint16)  := new NT(value+num);
    def operator*(num : _uint32)  := new NT(value+num);
    def operator*(num : _uint64)  := new NT(value+num);
    
    def operator/(num : ulong)  := new NT(value/num.value);
    def operator/(num : long)   := new NT(value/num.value);
    def operator/(num : uint)   := new NT(value/num.value);
    def operator/(num : int)    := new NT(value/num.value);
    def operator/(num : ushort) := new NT(value/num.value);
    def operator/(num : short)  := new NT(value/num.value);
    def operator/(num : uchar)  := new NT(value/num.value);
    def operator/(num : char)   := new NT(value/num.value);
    def operator/(num : byte)   := new NT(value/num.value);
    def operator/(num : bool)   := new NT(value/num.value);
    def operator/(num : double)   := new NT(value/num.value);
    def operator/(num : var)    := new NT(value/num);
    def operator/(num : _int8)    := new NT(value/num);
    def operator/(num : _int16)   := new NT(value/num);
    def operator/(num : _int32)   := new NT(value/num);
    def operator/(num : _int64)   := new NT(value/num);
    def operator/(num : _uint8)   := new NT(value/num);
    def operator/(num : _uint16)  := new NT(value/num);
    def operator/(num : _uint32)  := new NT(value/num);
    def operator/(num : _uint64)  := new NT(value/num);
    
    def operator%(num : ulong)  := new NT(value%num.value);
    def operator%(num : long)   := new NT(value%num.value);
    def operator%(num : uint)   := new NT(value%num.value);
    def operator%(num : int)    := new NT(value%num.value);
    def operator%(num : ushort) := new NT(value%num.value);
    def operator%(num : short)  := new NT(value%num.value);
    def operator%(num : uchar)  := new NT(value%num.value);
    def operator%(num : char)   := new NT(value%num.value);
    def operator%(num : byte)   := new NT(value%num.value);
    def operator%(num : bool)   := new NT(value%num.value);
    def operator%(num : double)   := new NT(value%num.value);
    def operator%(num : var)    := new NT(value%num);
    def operator%(num : _int8)    := new NT(value%num);
    def operator%(num : _int16)   := new NT(value%num);
    def operator%(num : _int32)   := new NT(value%num);
    def operator%(num : _int64)   := new NT(value%num);
    def operator%(num : _uint8)   := new NT(value%num);
    def operator%(num : _uint16)  := new NT(value%num);
    def operator%(num : _uint32)  := new NT(value%num);
    def operator%(num : _uint64)  := new NT(value%num);
    
    def operator<(num : ulong)  := new bool(value<num.value);
    def operator<(num : long)   := new bool(value<num.value);
    def operator<(num : uint)   := new bool(value<num.value);
    def operator<(num : int)    := new bool(value<num.value);
    def operator<(num : ushort) := new bool(value<num.value);
    def operator<(num : short)  := new bool(value<num.value);
    def operator<(num : uchar)  := new bool(value<num.value);
    def operator<(num : char)   := new bool(value<num.value);
    def operator<(num : byte)   := new bool(value<num.value);
    def operator<(num : bool)   := new bool(value<num.value);
    def operator<(num : double)   := new bool(value<num.value);
    def operator<(num : var)    := new bool(value<num);
    def operator<(num : _int8)    := new bool(value<num);
    def operator<(num : _int16)   := new bool(value<num);
    def operator<(num : _int32)   := new bool(value<num);
    def operator<(num : _int64)   := new bool(value<num);
    def operator<(num : _uint8)   := new bool(value<num);
    def operator<(num : _uint16)  := new bool(value<num);
    def operator<(num : _uint32)  := new bool(value<num);
    def operator<(num : _uint64)  := new bool(value<num);
    
    def operator>(num : ulong)  := new bool(value>num.value);
    def operator>(num : long)   := new bool(value>num.value);
    def operator>(num : uint)   := new bool(value>num.value);
    def operator>(num : int)    := new bool(value>num.value);
    def operator>(num : ushort) := new bool(value>num.value);
    def operator>(num : short)  := new bool(value>num.value);
    def operator>(num : uchar)  := new bool(value>num.value);
    def operator>(num : char)   := new bool(value>num.value);
    def operator>(num : byte)   := new bool(value>num.value);
    def operator>(num : bool)   := new bool(value>num.value);
    def operator>(num : double)   := new bool(value>num.value);
    def operator>(num : var)    := new bool(value>num);
    def operator>(num : _int8)    := new bool(value>num);
    def operator>(num : _int16)   := new bool(value>num);
    def operator>(num : _int32)   := new bool(value>num);
    def operator>(num : _int64)   := new bool(value>num);
    def operator>(num : _uint8)   := new bool(value>num);
    def operator>(num : _uint16)  := new bool(value>num);
    def operator>(num : _uint32)  := new bool(value>num);
    def operator>(num : _uint64)  := new bool(value>num);
    
    def operator<=(num : ulong)  := new bool(value<=num.value);
    def operator<=(num : long)   := new bool(value<=num.value);
    def operator<=(num : uint)   := new bool(value<=num.value);
    def operator<=(num : int)    := new bool(value<=num.value);
    def operator<=(num : ushort) := new bool(value<=num.value);
    def operator<=(num : short)  := new bool(value<=num.value);
    def operator<=(num : uchar)  := new bool(value<=num.value);
    def operator<=(num : char)   := new bool(value<=num.value);
    def operator<=(num : byte)   := new bool(value<=num.value);
    def operator<=(num : bool)   := new bool(value<=num.value);
    def operator<=(num : double)   := new bool(value <=num.value);
    def operator<=(num : var)    := new bool(value<=num);
    def operator<=(num : _int8)    := new bool(value<=num);
    def operator<=(num : _int16)   := new bool(value<=num);
    def operator<=(num : _int32)   := new bool(value<=num);
    def operator<=(num : _int64)   := new bool(value<=num);
    def operator<=(num : _uint8)   := new bool(value<=num);
    def operator<=(num : _uint16)  := new bool(value<=num);
    def operator<=(num : _uint32)  := new bool(value<=num);
    def operator<=(num : _uint64)  := new bool(value<=num);
    
    def operator>=(num : ulong)  := new bool(value>=num.value);
    def operator>=(num : long)   := new bool(value>=num.value);
    def operator>=(num : uint)   := new bool(value>=num.value);
    def operator>=(num : int)    := new bool(value>=num.value);
    def operator>=(num : ushort) := new bool(value>=num.value);
    def operator>=(num : short)  := new bool(value>=num.value);
    def operator>=(num : uchar)  := new bool(value>=num.value);
    def operator>=(num : char)   := new bool(value>=num.value);
    def operator>=(num : byte)   := new bool(value>=num.value);
    def operator>=(num : bool)   := new bool(value>=num.value);
    def operator>=(num : double)   := new bool(value>=num.value);
    def operator>=(num : var)    := new bool(value>=num);
    def operator>=(num : _int8)    := new bool(value>=num);
    def operator>=(num : _int16)   := new bool(value>=num);
    def operator>=(num : _int32)   := new bool(value>=num);
    def operator>=(num : _int64)   := new bool(value>=num);
    def operator>=(num : _uint8)   := new bool(value>=num);
    def operator>=(num : _uint16)  := new bool(value>=num);
    def operator>=(num : _uint32)  := new bool(value>=num);
    def operator>=(num : _uint64)  := new bool(value>=num);
    
    def operator**(num : ulong)  := new NT(value**num.value);
    def operator**(num : long)   := new NT(value**num.value);
    def operator**(num : uint)   := new NT(value**num.value);
    def operator**(num : int)    := new NT(value**num.value);
    def operator**(num : ushort) := new NT(value**num.value);
    def operator**(num : short)  := new NT(value**num.value);
    def operator**(num : uchar)  := new NT(value**num.value);
    def operator**(num : char)   := new NT(value**num.value);
    def operator**(num : byte)   := new NT(value**num.value);
    def operator**(num : bool)   := new NT(value**num.value);
    def operator**(num : double)   := new NT(value**num.value);
    def operator**(num : var)    := new NT(value**num);
    def operator**(num : _int8)    := new NT(value**num);
    def operator**(num : _int16)   := new NT(value**num);
    def operator**(num : _int32)   := new NT(value**num);
    def operator**(num : _int64)   := new NT(value**num);
    def operator**(num : _uint8)   := new NT(value**num);
    def operator**(num : _uint16)  := new NT(value**num);
    def operator**(num : _uint32)  := new NT(value**num);
    def operator**(num : _uint64)  := new NT(value**num);

    def operator&&(num : ulong)  := new bool(value&&num.value);
    def operator&&(num : long)   := new bool(value&&num.value);
    def operator&&(num : uint)   := new bool(value&&num.value);
    def operator&&(num : int)    := new bool(value&&num.value);
    def operator&&(num : ushort) := new bool(value&&num.value);
    def operator&&(num : short)  := new bool(value&&num.value);
    def operator&&(num : uchar)  := new bool(value&&num.value);
    def operator&&(num : char)   := new bool(value&&num.value);
    def operator&&(num : byte)   := new bool(value&&num.value);
    def operator&&(num : bool)   := new bool(value&&num.value);
    def operator&&(num : double) := new bool(value&&num.value);
    def operator&&(num : var)    := new bool(value&&num);
    def operator&&(num : _int8)  := new bool(value&&num);
    def operator&&(num : _int16) := new bool(value&&num);
    def operator&&(num : _int32) := new bool(value&&num);
    def operator&&(num : _int64) := new bool(value&&num);
    def operator&&(num : _uint8) := new bool(value&&num);
    def operator&&(num : _uint16):= new bool(value&&num);
    def operator&&(num : _uint32):= new bool(value&&num);
    def operator&&(num : _uint64):= new bool(value&&num);

    def operator||(num : ulong)  := new bool(value||num.value);
    def operator||(num : long)   := new bool(value||num.value);
    def operator||(num : uint)   := new bool(value||num.value);
    def operator||(num : int)    := new bool(value||num.value);
    def operator||(num : ushort) := new bool(value||num.value);
    def operator||(num : short)  := new bool(value||num.value);
    def operator||(num : uchar)  := new bool(value||num.value);
    def operator||(num : char)   := new bool(value||num.value);
    def operator||(num : byte)   := new bool(value||num.value);
    def operator||(num : bool)   := new bool(value||num.value);
    def operator||(num : double) := new bool(value||num.value);
    def operator||(num : var)    := new bool(value||num);
    def operator||(num : _int8)  := new bool(value||num);
    def operator||(num : _int16) := new bool(value||num);
    def operator||(num : _int32) := new bool(value||num);
    def operator||(num : _int64) := new bool(value||num);
    def operator||(num : _uint8) := new bool(value||num);
    def operator||(num : _uint16):= new bool(value||num);
    def operator||(num : _uint32):= new bool(value||num);
    def operator||(num : _uint64):= new bool(value||num);
    
    def operator<<(num : ulong)  := new NT(value<<num.value);
    def operator<<(num : long)   := new NT(value<<num.value);
    def operator<<(num : uint)   := new NT(value<<num.value);
    def operator<<(num : int)    := new NT(value<<num.value);
    def operator<<(num : ushort) := new NT(value<<num.value);
    def operator<<(num : short)  := new NT(value<<num.value);
    def operator<<(num : uchar)  := new NT(value<<num.value);
    def operator<<(num : char)   := new NT(value<<num.value);
    def operator<<(num : byte)   := new NT(value<<num.value);
    def operator<<(num : bool)   := new NT(value<<num.value);
    def operator<<(num : double)   := new NT(value<<num.value);
    def operator<<(num : var)    := new NT(value<<num);
    def operator<<(num : _int8)    := new NT(value<<num);
    def operator<<(num : _int16)   := new NT(value<<num);
    def operator<<(num : _int32)   := new NT(value<<num);
    def operator<<(num : _int64)   := new NT(value<<num);
    def operator<<(num : _uint8)   := new NT(value<<num);
    def operator<<(num : _uint16)  := new NT(value<<num);
    def operator<<(num : _uint32)  := new NT(value<<num);
    def operator<<(num : _uint64)  := new NT(value<<num);
    
    def operator>>(num : ulong)  := new NT(value>>num.value);
    def operator>>(num : long)   := new NT(value>>num.value);
    def operator>>(num : uint)   := new NT(value>>num.value);
    def operator>>(num : int)    := new NT(value>>num.value);
    def operator>>(num : ushort) := new NT(value>>num.value);
    def operator>>(num : short)  := new NT(value>>num.value);
    def operator>>(num : uchar)  := new NT(value>>num.value);
    def operator>>(num : char)   := new NT(value>>num.value);
    def operator>>(num : byte)   := new NT(value>>num.value);
    def operator>>(num : bool)   := new NT(value>>num.value);
    def operator>>(num : double)   := new NT(value>>num.value);
    def operator>>(num : var)    := new NT(value>>num);
    def operator>>(num : _int8)    := new NT(value>>num);
    def operator>>(num : _int16)   := new NT(value>>num);
    def operator>>(num : _int32)   := new NT(value>>num);
    def operator>>(num : _int64)   := new NT(value>>num);
    def operator>>(num : _uint8)   := new NT(value>>num);
    def operator>>(num : _uint16)  := new NT(value>>num);
    def operator>>(num : _uint32)  := new NT(value>>num);
    def operator>>(num : _uint64)  := new NT(value>>num);
    
    def operator^(num : ulong)  := new NT(value^num.value);
    def operator^(num : long)   := new NT(value^num.value);
    def operator^(num : uint)   := new NT(value^num.value);
    def operator^(num : int)    := new NT(value^num.value);
    def operator^(num : ushort) := new NT(value^num.value);
    def operator^(num : short)  := new NT(value^num.value);
    def operator^(num : uchar)  := new NT(value^num.value);
    def operator^(num : char)   := new NT(value^num.value);
    def operator^(num : byte)   := new NT(value^num.value);
    def operator^(num : bool)   := new NT(value^num.value);
    def operator^(num : double)   := new NT(value^num.value);
    def operator^(num : var)    := new NT(value^num);
    def operator^(num : _int8)    := new NT(value^num);
    def operator^(num : _int16)   := new NT(value^num);
    def operator^(num : _int32)   := new NT(value^num);
    def operator^(num : _int64)   := new NT(value^num);
    def operator^(num : _uint8)   := new NT(value^num);
    def operator^(num : _uint16)  := new NT(value^num);
    def operator^(num : _uint32)  := new NT(value^num);
    def operator^(num : _uint64)  := new NT(value^num);
    
    def operator&(num : ulong)  := new NT(value&num.value);
    def operator&(num : long)   := new NT(value&num.value);
    def operator&(num : uint)   := new NT(value&num.value);
    def operator&(num : int)    := new NT(value&num.value);
    def operator&(num : ushort) := new NT(value&num.value);
    def operator&(num : short)  := new NT(value&num.value);
    def operator&(num : uchar)  := new NT(value&num.value);
    def operator&(num : char)   := new NT(value&num.value);
    def operator&(num : byte)   := new NT(value&num.value);
    def operator&(num : bool)   := new NT(value&num.value);
    def operator&(num : double)   := new NT(value&num.value);
    def operator&(num : var)    := new NT(value&num);
    def operator&(num : _int8)    := new NT(value&num);
    def operator&(num : _int16)   := new NT(value&num);
    def operator&(num : _int32)   := new NT(value&num);
    def operator&(num : _int64)   := new NT(value&num);
    def operator&(num : _uint8)   := new NT(value&num);
    def operator&(num : _uint16)  := new NT(value&num);
    def operator&(num : _uint32)  := new NT(value&num);
    def operator&(num : _uint64)  := new NT(value&num);
    
    def operator|(num : ulong)  := new NT(value|num.value);
    def operator|(num : long)   := new NT(value|num.value);
    def operator|(num : uint)   := new NT(value|num.value);
    def operator|(num : int)    := new NT(value|num.value);
    def operator|(num : ushort) := new NT(value|num.value);
    def operator|(num : short)  := new NT(value|num.value);
    def operator|(num : uchar)  := new NT(value|num.value);
    def operator|(num : char)   := new NT(value|num.value);
    def operator|(num : byte)   := new NT(value|num.value);
    def operator|(num : bool)   := new NT(value|num.value);
    def operator|(num : double)   := new NT(value|num.value);
    def operator|(num : var)    := new NT(value|num);
    def operator|(num : _int8)    := new NT(value|num);
    def operator|(num : _int16)   := new NT(value|num);
    def operator|(num : _int32)   := new NT(value|num);
    def operator|(num : _int64)   := new NT(value|num);
    def operator|(num : _uint8)   := new NT(value|num);
    def operator|(num : _uint16)  := new NT(value|num);
    def operator|(num : _uint32)  := new NT(value|num);
    def operator|(num : _uint64)  := new NT(value|num);
    
    def operator=(num : var) : NT { value=num; return self as NT; }
    def operator=(num : _int8)   : NT { value=num; return self as NT; }
    def operator=(num : _int16)  : NT { value=num; return self as NT; }
    def operator=(num : _int32)  : NT { value=num; return self as NT; }
    def operator=(num : _int64)  : NT { value=num; return self as NT; }
    def operator=(num : _uint8)  : NT { value=num; return self as NT; }
    def operator=(num : _uint16) : NT { value=num; return self as NT; }
    def operator=(num : _uint32) : NT { value=num; return self as NT; }
    def operator=(num : _uint64) : NT { value=num; return self as NT; }
    
    def operator!() := new bool(!value);
    def operator++() : NT { ++value; return self as NT; }
    def operator++(num : var) := new NT(value++);
    def operator--() : NT { --value; return self as NT; }
    def operator--(num : var) := new NT(value--);
    
    def operator+=(num : ulong)  : NT { value+=num.value; return self as NT; }
    def operator+=(num : long)   : NT { value+=num.value; return self as NT; }
    def operator+=(num : uint)   : NT { value+=num.value; return self as NT; }
    def operator+=(num : int)    : NT { value+=num.value; return self as NT; }
    def operator+=(num : ushort) : NT { value+=num.value; return self as NT; }
    def operator+=(num : short)  : NT { value+=num.value; return self as NT; }
    def operator+=(num : uchar)  : NT { value+=num.value; return self as NT; }
    def operator+=(num : char)   : NT { value+=num.value; return self as NT; }
    def operator+=(num : byte)   : NT { value+=num.value; return self as NT; }
    def operator+=(num : bool)   : NT { value+=num.value; return self as NT; }
    def operator+=(num : double)   : NT { value+=num.value; return self as NT; }
    def operator+=(num : var)    : NT { value+=num; return self as NT; }
    def operator+=(num : _int8)    : NT { value+=num; return self as NT; }
    def operator+=(num : _int16)   : NT { value+=num; return self as NT; }
    def operator+=(num : _int32)   : NT { value+=num; return self as NT; }
    def operator+=(num : _int64)   : NT { value+=num; return self as NT; }
    def operator+=(num : _uint8)   : NT { value+=num; return self as NT; }
    def operator+=(num : _uint16)  : NT { value+=num; return self as NT; }
    def operator+=(num : _uint32)  : NT { value+=num; return self as NT; }
    def operator+=(num : _uint64)  : NT { value+=num; return self as NT; }
    
    def operator-=(num : ulong)  : NT { value-=num.value; return self as NT; }
    def operator-=(num : long)   : NT { value-=num.value; return self as NT; }
    def operator-=(num : uint)   : NT { value-=num.value; return self as NT; }
    def operator-=(num : int)    : NT { value-=num.value; return self as NT; }
    def operator-=(num : ushort) : NT { value-=num.value; return self as NT; }
    def operator-=(num : short)  : NT { value-=num.value; return self as NT; }
    def operator-=(num : uchar)  : NT { value-=num.value; return self as NT; }
    def operator-=(num : char)   : NT { value-=num.value; return self as NT; }
    def operator-=(num : byte)   : NT { value-=num.value; return self as NT; }
    def operator-=(num : bool)   : NT { value-=num.value; return self as NT; }
    def operator-=(num : double)   : NT { value-=num.value; return self as NT; }
    def operator-=(num : var)    : NT { value-=num; return self as NT; }
    def operator-=(num : _int8)    : NT { value-=num; return self as NT; }
    def operator-=(num : _int16)   : NT { value-=num; return self as NT; }
    def operator-=(num : _int32)   : NT { value-=num; return self as NT; }
    def operator-=(num : _int64)   : NT { value-=num; return self as NT; }
    def operator-=(num : _uint8)   : NT { value-=num; return self as NT; }
    def operator-=(num : _uint16)  : NT { value-=num; return self as NT; }
    def operator-=(num : _uint32)  : NT { value-=num; return self as NT; }
    def operator-=(num : _uint64)  : NT { value-=num; return self as NT; }
    
    def operator*=(num : ulong)  : NT { value*=num.value; return self as NT; }
    def operator*=(num : long)   : NT { value*=num.value; return self as NT; }
    def operator*=(num : uint)   : NT { value*=num.value; return self as NT; }
    def operator*=(num : int)    : NT { value*=num.value; return self as NT; }
    def operator*=(num : ushort) : NT { value*=num.value; return self as NT; }
    def operator*=(num : short)  : NT { value*=num.value; return self as NT; }
    def operator*=(num : uchar)  : NT { value*=num.value; return self as NT; }
    def operator*=(num : char)   : NT { value*=num.value; return self as NT; }
    def operator*=(num : byte)   : NT { value*=num.value; return self as NT; }
    def operator*=(num : bool)   : NT { value*=num.value; return self as NT; }
    def operator*=(num : double)   : NT { value*=num.value; return self as NT; }
    def operator*=(num : var)    : NT { value*=num; return self as NT; }
    def operator*=(num : _int8)    : NT { value*=num; return self as NT; }
    def operator*=(num : _int16)   : NT { value*=num; return self as NT; }
    def operator*=(num : _int32)   : NT { value*=num; return self as NT; }
    def operator*=(num : _int64)   : NT { value*=num; return self as NT; }
    def operator*=(num : _uint8)   : NT { value*=num; return self as NT; }
    def operator*=(num : _uint16)  : NT { value*=num; return self as NT; }
    def operator*=(num : _uint32)  : NT { value*=num; return self as NT; }
    def operator*=(num : _uint64)  : NT { value*=num; return self as NT; }
    
    def operator/=(num : ulong)  : NT { value/=num.value; return self as NT; }
    def operator/=(num : long)   : NT { value/=num.value; return self as NT; }
    def operator/=(num : uint)   : NT { value/=num.value; return self as NT; }
    def operator/=(num : int)    : NT { value/=num.value; return self as NT; }
    def operator/=(num : ushort) : NT { value/=num.value; return self as NT; }
    def operator/=(num : short)  : NT { value/=num.value; return self as NT; }
    def operator/=(num : uchar)  : NT { value/=num.value; return self as NT; }
    def operator/=(num : char)   : NT { value/=num.value; return self as NT; }
    def operator/=(num : byte)   : NT { value/=num.value; return self as NT; }
    def operator/=(num : bool)   : NT { value/=num.value; return self as NT; }
    def operator/=(num : double)   : NT { value/=num.value; return self as NT; }
    def operator/=(num : var)    : NT { value/=num; return self as NT; }
    def operator/=(num : _int8)    : NT { value/=num; return self as NT; }
    def operator/=(num : _int16)   : NT { value/=num; return self as NT; }
    def operator/=(num : _int32)   : NT { value/=num; return self as NT; }
    def operator/=(num : _int64)   : NT { value/=num; return self as NT; }
    def operator/=(num : _uint8)   : NT { value/=num; return self as NT; }
    def operator/=(num : _uint16)  : NT { value/=num; return self as NT; }
    def operator/=(num : _uint32)  : NT { value/=num; return self as NT; }
    def operator/=(num : _uint64)  : NT { value/=num; return self as NT; }
    
    def operator%=(num : ulong)  : NT { value%=num.value; return self as NT; }
    def operator%=(num : long)   : NT { value%=num.value; return self as NT; }
    def operator%=(num : uint)   : NT { value%=num.value; return self as NT; }
    def operator%=(num : int)    : NT { value%=num.value; return self as NT; }
    def operator%=(num : ushort) : NT { value%=num.value; return self as NT; }
    def operator%=(num : short)  : NT { value%=num.value; return self as NT; }
    def operator%=(num : uchar)  : NT { value%=num.value; return self as NT; }
    def operator%=(num : char)   : NT { value%=num.value; return self as NT; }
    def operator%=(num : byte)   : NT { value%=num.value; return self as NT; }
    def operator%=(num : bool)   : NT { value%=num.value; return self as NT; }
    def operator%=(num : double)   : NT { value%=num.value; return self as NT; }
    def operator%=(num : var)    : NT { value%=num; return self as NT; }
    def operator%=(num : _int8)    : NT { value%=num; return self as NT; }
    def operator%=(num : _int16)   : NT { value%=num; return self as NT; }
    def operator%=(num : _int32)   : NT { value%=num; return self as NT; }
    def operator%=(num : _int64)   : NT { value%=num; return self as NT; }
    def operator%=(num : _uint8)   : NT { value%=num; return self as NT; }
    def operator%=(num : _uint16)  : NT { value%=num; return self as NT; }
    def operator%=(num : _uint32)  : NT { value%=num; return self as NT; }
    def operator%=(num : _uint64)  : NT { value%=num; return self as NT; }
    
    def operator&=(num : ulong)  : NT { value&=num.value; return self as NT; }
    def operator&=(num : long)   : NT { value&=num.value; return self as NT; }
    def operator&=(num : uint)   : NT { value&=num.value; return self as NT; }
    def operator&=(num : int)    : NT { value&=num.value; return self as NT; }
    def operator&=(num : ushort) : NT { value&=num.value; return self as NT; }
    def operator&=(num : short)  : NT { value&=num.value; return self as NT; }
    def operator&=(num : uchar)  : NT { value&=num.value; return self as NT; }
    def operator&=(num : char)   : NT { value&=num.value; return self as NT; }
    def operator&=(num : byte)   : NT { value&=num.value; return self as NT; }
    def operator&=(num : bool)   : NT { value&=num.value; return self as NT; }
    def operator&=(num : double)   : NT { value&=num.value; return self as NT; }
    def operator&=(num : var)    : NT { value&=num; return self as NT; }
    def operator&=(num : _int8)    : NT { value&=num; return self as NT; }
    def operator&=(num : _int16)   : NT { value&=num; return self as NT; }
    def operator&=(num : _int32)   : NT { value&=num; return self as NT; }
    def operator&=(num : _int64)   : NT { value&=num; return self as NT; }
    def operator&=(num : _uint8)   : NT { value&=num; return self as NT; }
    def operator&=(num : _uint16)  : NT { value&=num; return self as NT; }
    def operator&=(num : _uint32)  : NT { value&=num; return self as NT; }
    def operator&=(num : _uint64)  : NT { value&=num; return self as NT; }
    
    def operator|=(num : ulong)  : NT { value|=num.value; return self as NT; }
    def operator|=(num : long)   : NT { value|=num.value; return self as NT; }
    def operator|=(num : uint)   : NT { value|=num.value; return self as NT; }
    def operator|=(num : int)    : NT { value|=num.value; return self as NT; }
    def operator|=(num : ushort) : NT { value|=num.value; return self as NT; }
    def operator|=(num : short)  : NT { value|=num.value; return self as NT; }
    def operator|=(num : uchar)  : NT { value|=num.value; return self as NT; }
    def operator|=(num : char)   : NT { value|=num.value; return self as NT; }
    def operator|=(num : byte)   : NT { value|=num.value; return self as NT; }
    def operator|=(num : bool)   : NT { value|=num.value; return self as NT; }
    def operator|=(num : double)   : NT { value|=num.value; return self as NT; }
    def operator|=(num : var)    : NT { value|=num; return self as NT; }
    def operator|=(num : _int8)    : NT { value|=num; return self as NT; }
    def operator|=(num : _int16)   : NT { value|=num; return self as NT; }
    def operator|=(num : _int32)   : NT { value|=num; return self as NT; }
    def operator|=(num : _int64)   : NT { value|=num; return self as NT; }
    def operator|=(num : _uint8)   : NT { value|=num; return self as NT; }
    def operator|=(num : _uint16)  : NT { value|=num; return self as NT; }
    def operator|=(num : _uint32)  : NT { value|=num; return self as NT; }
    def operator|=(num : _uint64)  : NT { value|=num; return self as NT; }

    def operator^=(num : ulong)  : NT { value^=num.value; return self as NT; }
    def operator^=(num : long)   : NT { value^=num.value; return self as NT; }
    def operator^=(num : uint)   : NT { value^=num.value; return self as NT; }
    def operator^=(num : int)    : NT { value^=num.value; return self as NT; }
    def operator^=(num : ushort) : NT { value^=num.value; return self as NT; }
    def operator^=(num : short)  : NT { value^=num.value; return self as NT; }
    def operator^=(num : uchar)  : NT { value^=num.value; return self as NT; }
    def operator^=(num : char)   : NT { value^=num.value; return self as NT; }
    def operator^=(num : byte)   : NT { value^=num.value; return self as NT; }
    def operator^=(num : bool)   : NT { value^=num.value; return self as NT; }
    def operator^=(num : double)   : NT { value^=num.value; return self as NT; }
    def operator^=(num : var)    : NT { value^=num; return self as NT; }
    def operator^=(num : _int8)    : NT { value^=num; return self as NT; }
    def operator^=(num : _int16)   : NT { value^=num; return self as NT; }
    def operator^=(num : _int32)   : NT { value^=num; return self as NT; }
    def operator^=(num : _int64)   : NT { value^=num; return self as NT; }
    def operator^=(num : _uint8)   : NT { value^=num; return self as NT; }
    def operator^=(num : _uint16)  : NT { value^=num; return self as NT; }
    def operator^=(num : _uint32)  : NT { value^=num; return self as NT; }
    def operator^=(num : _uint64)  : NT { value^=num; return self as NT; }

    override def to_string() : string? {
        return snprintf('l', value, 0);
    }

    static def parse(s: string) : NT {
        number : T = 0;

        if(number is var) { // double.class
            return strtod(s);
        } else { //  integer type
            i := 0;
            negative := false;
            len := s.size().value;

            if(s.at(0) == '-' ){
                negative = true;
                i = 1;
            }

            while( i < len ){
                if(!char.is_digit(s.at(i))) {
                    throw new ill_arg_except(
                        "illegal char in string: ${s.at(i)}");
                }

                number *= 10;
                number += ( s.at(i++) - '0' ).value;
            }
            if( negative )
                number = -number;
            return number;
        }
    }

    def to_ulong() := new ulong(value);
    def to_long() := new long(value);
    def to_uint() := new uint(value);
    def to_int() := new int(value);
    def to_ushort() := new ushort(value);
    def to_short() := new short(value);
    def to_uchar() := new uchar(value);
    def to_char() := new char(value);
    def to_byte() := new byte(value);
    def to_bool() := new bool(value);
    def to_double() := new double(value);
}

/**
* @class number
*
* Description:
* This class serves as a basic container for base class declaration purposes
* to be used by the standard library
*/
class base_number<NT> {
    // do nothing
}

class ulong base number<_uint64, ulong> {
    ulong(i : long) -> base(i.value) {}
    ulong(i : int) -> base(i.value) {}
    ulong(i : short) -> base(i.value) {}
    ulong(i : char) -> base(i.value) {}
    ulong(i : byte) -> base(i.value) {}
    ulong(i : bool) -> base(i.value) {}
    ulong(i : ulong) -> base(i.value) {}
    ulong(i : uint) -> base(i.value) {}
    ulong(i : ushort) -> base(i.value) {}
    ulong(i : uchar) -> base(i.value) {}
    ulong(i : double) -> base(i.value) {}
    ulong(initial_val : var) -> base(initial_val) {}
    ulong(initial_val : _int8) -> base(initial_val) {}
    ulong(initial_val : _uint8) -> base(initial_val) {}
    ulong(initial_val : _int16)  -> base(initial_val) {}
    ulong(initial_val : _uint16)  -> base(initial_val) {}
    ulong(initial_val : _int32)  -> base(initial_val) {}
    ulong(initial_val : _uint32)  -> base(initial_val) {}
    ulong(initial_val : _int64)  -> base(initial_val) {}
    ulong(initial_val : _uint64)  -> base(initial_val) {}

    init(initial_val : var)      -> base(initial_val) { }
    init(initial_val : _int8)    -> base(initial_val) { }
    init(initial_val : _int16)   -> base(initial_val) { }
    init(initial_val : _int32)   -> base(initial_val) { }
    init(initial_val : _int64)   -> base(initial_val) { }
    init(initial_val : _uint8)   -> base(initial_val) { }
    init(initial_val : _uint16)  -> base(initial_val) { }
    init(initial_val : _uint32)  -> base(initial_val) { }
    init(initial_val : _uint64)  -> base(initial_val) { }
    init(initial_val : long)     -> base(initial_val) { }
    init(initial_val : int)      -> base(initial_val) { }
    init(initial_val : short)    -> base(initial_val) { }
    init(initial_val : char)     -> base(initial_val) { }
    init(initial_val : byte)     -> base(initial_val) { }
    init(initial_val : bool)     -> base(initial_val) { }
    init(initial_val : ulong)    -> base(initial_val) { }
    init(initial_val : ushort)   -> base(initial_val) { }
    init(initial_val : uint)     -> base(initial_val) { }
    init(initial_val : uchar)    -> base(initial_val) { }
    init(initial_val : double)   -> base(initial_val) { }

    override def to_string() : string? {
        return snprintf('L', value, 0);
    }
}
class long base number<_int64, long> {
    long(i : long) -> base(i.value) {}
    long(i : int) -> base(i.value) {}
    long(i : short) -> base(i.value) {}
    long(i : char) -> base(i.value) {}
    long(i : byte) -> base(i.value) {}
    long(i : bool) -> base(i.value) {}
    long(i : ulong) -> base(i.value) {}
    long(i : uint) -> base(i.value) {}
    long(i : ushort) -> base(i.value) {}
    long(i : uchar) -> base(i.value) {}
    long(i : double) -> base(i.value) {}
    long(initial_val : var) -> base(initial_val) {}
    long(initial_val : _int8) -> base(initial_val) {}
    long(initial_val : _uint8) -> base(initial_val) {}
    long(initial_val : _int16)  -> base(initial_val) {}
    long(initial_val : _uint16)  -> base(initial_val) {}
    long(initial_val : _int32)  -> base(initial_val) {}
    long(initial_val : _uint32)  -> base(initial_val) {}
    long(initial_val : _int64)  -> base(initial_val) {}
    long(initial_val : _uint64)  -> base(initial_val) {}

    init(initial_val : var)      -> base(initial_val) { }
    init(initial_val : _int8)    -> base(initial_val) { }
    init(initial_val : _int16)   -> base(initial_val) { }
    init(initial_val : _int32)   -> base(initial_val) { }
    init(initial_val : _int64)   -> base(initial_val) { }
    init(initial_val : _uint8)   -> base(initial_val) { }
    init(initial_val : _uint16)  -> base(initial_val) { }
    init(initial_val : _uint32)  -> base(initial_val) { }
    init(initial_val : _uint64)  -> base(initial_val) { }
    init(initial_val : long)     -> base(initial_val) { }
    init(initial_val : int)      -> base(initial_val) { }
    init(initial_val : short)    -> base(initial_val) { }
    init(initial_val : char)     -> base(initial_val) { }
    init(initial_val : byte)     -> base(initial_val) { }
    init(initial_val : bool)     -> base(initial_val) { }
    init(initial_val : ulong)    -> base(initial_val) { }
    init(initial_val : ushort)   -> base(initial_val) { }
    init(initial_val : uint)     -> base(initial_val) { }
    init(initial_val : uchar)    -> base(initial_val) { }
    init(initial_val : double)   -> base(initial_val) { }
}

class uint base number<_uint32, uint> {
    uint(i : long) -> base(i.value) {}
    uint(i : int) -> base(i.value) {}
    uint(i : short) -> base(i.value) {}
    uint(i : char) -> base(i.value) {}
    uint(i : byte) -> base(i.value) {}
    uint(i : bool) -> base(i.value) {}
    uint(i : ulong) -> base(i.value) {}
    uint(i : uint) -> base(i.value) {}
    uint(i : ushort) -> base(i.value) {}
    uint(i : uchar) -> base(i.value) {}
    uint(i : double) -> base(i.value) {}
    uint(initial_val : var) -> base(initial_val) {}
    uint(initial_val : _int8) -> base(initial_val) {}
    uint(initial_val : _uint8) -> base(initial_val) {}
    uint(initial_val : _int16)  -> base(initial_val) {}
    uint(initial_val : _uint16)  -> base(initial_val) {}
    uint(initial_val : _int32)  -> base(initial_val) {}
    uint(initial_val : _uint32)  -> base(initial_val) {}
    uint(initial_val : _int64)  -> base(initial_val) {}
    uint(initial_val : _uint64)  -> base(initial_val) {}

    init(initial_val : var)      -> base(initial_val) { }
    init(initial_val : _int8)    -> base(initial_val) { }
    init(initial_val : _int16)   -> base(initial_val) { }
    init(initial_val : _int32)   -> base(initial_val) { }
    init(initial_val : _int64)   -> base(initial_val) { }
    init(initial_val : _uint8)   -> base(initial_val) { }
    init(initial_val : _uint16)  -> base(initial_val) { }
    init(initial_val : _uint32)  -> base(initial_val) { }
    init(initial_val : _uint64)  -> base(initial_val) { }
    init(initial_val : long)     -> base(initial_val) { }
    init(initial_val : int)      -> base(initial_val) { }
    init(initial_val : short)    -> base(initial_val) { }
    init(initial_val : char)     -> base(initial_val) { }
    init(initial_val : byte)     -> base(initial_val) { }
    init(initial_val : bool)     -> base(initial_val) { }
    init(initial_val : ulong)    -> base(initial_val) { }
    init(initial_val : ushort)   -> base(initial_val) { }
    init(initial_val : uint)     -> base(initial_val) { }
    init(initial_val : uchar)    -> base(initial_val) { }
    init(initial_val : double)   -> base(initial_val) { }
}
class int base number<_int32, int> {
    int(i : long) -> base(i.value) {}
    int(i : int) -> base(i.value) {}
    int(i : short) -> base(i.value) {}
    int(i : char) -> base(i.value) {}
    int(i : byte) -> base(i.value) {}
    int(i : bool) -> base(i.value) {}
    int(i : ulong) -> base(i.value) {}
    int(i : uint) -> base(i.value) {}
    int(i : ushort) -> base(i.value) {}
    int(i : uchar) -> base(i.value) {}
    int(i : double) -> base(i.value) {}
    int(initial_val : var) -> base(initial_val) {}
    int(initial_val : _int8) -> base(initial_val) {}
    int(initial_val : _uint8) -> base(initial_val) {}
    int(initial_val : _int16)  -> base(initial_val) {}
    int(initial_val : _uint16)  -> base(initial_val) {}
    int(initial_val : _int32)  -> base(initial_val) {}
    int(initial_val : _uint32)  -> base(initial_val) {}
    int(initial_val : _int64)  -> base(initial_val) {}
    int(initial_val : _uint64)  -> base(initial_val) {}

    init(initial_val : var)      -> base(initial_val) { }
    init(initial_val : _int8)    -> base(initial_val) { }
    init(initial_val : _int16)   -> base(initial_val) { }
    init(initial_val : _int32)   -> base(initial_val) { }
    init(initial_val : _int64)   -> base(initial_val) { }
    init(initial_val : _uint8)   -> base(initial_val) { }
    init(initial_val : _uint16)  -> base(initial_val) { }
    init(initial_val : _uint32)  -> base(initial_val) { }
    init(initial_val : _uint64)  -> base(initial_val) { }
    init(initial_val : long)     -> base(initial_val) { }
    init(initial_val : int)      -> base(initial_val) { }
    init(initial_val : short)    -> base(initial_val) { }
    init(initial_val : char)     -> base(initial_val) { }
    init(initial_val : byte)     -> base(initial_val) { }
    init(initial_val : bool)     -> base(initial_val) { }
    init(initial_val : ulong)    -> base(initial_val) { }
    init(initial_val : ushort)   -> base(initial_val) { }
    init(initial_val : uint)     -> base(initial_val) { }
    init(initial_val : uchar)    -> base(initial_val) { }
    init(initial_val : double)   -> base(initial_val) { }
}
class ushort base number<_uint16, ushort> {
    ushort(i : long) -> base(i.value) {}
    ushort(i : int) -> base(i.value) {}
    ushort(i : short) -> base(i.value) {}
    ushort(i : char) -> base(i.value) {}
    ushort(i : byte) -> base(i.value) {}
    ushort(i : bool) -> base(i.value) {}
    ushort(i : ulong) -> base(i.value) {}
    ushort(i : uint) -> base(i.value) {}
    ushort(i : ushort) -> base(i.value) {}
    ushort(i : uchar) -> base(i.value) {}
    ushort(i : double) -> base(i.value) {}
    ushort(initial_val : var) -> base(initial_val) {}
    ushort(initial_val : _int8) -> base(initial_val) {}
    ushort(initial_val : _uint8) -> base(initial_val) {}
    ushort(initial_val : _int16)  -> base(initial_val) {}
    ushort(initial_val : _uint16)  -> base(initial_val) {}
    ushort(initial_val : _int32)  -> base(initial_val) {}
    ushort(initial_val : _uint32)  -> base(initial_val) {}
    ushort(initial_val : _int64)  -> base(initial_val) {}
    ushort(initial_val : _uint64)  -> base(initial_val) {}

    init(initial_val : var)      -> base(initial_val) { }
    init(initial_val : _int8)    -> base(initial_val) { }
    init(initial_val : _int16)   -> base(initial_val) { }
    init(initial_val : _int32)   -> base(initial_val) { }
    init(initial_val : _int64)   -> base(initial_val) { }
    init(initial_val : _uint8)   -> base(initial_val) { }
    init(initial_val : _uint16)  -> base(initial_val) { }
    init(initial_val : _uint32)  -> base(initial_val) { }
    init(initial_val : _uint64)  -> base(initial_val) { }
    init(initial_val : long)     -> base(initial_val) { }
    init(initial_val : int)      -> base(initial_val) { }
    init(initial_val : short)    -> base(initial_val) { }
    init(initial_val : char)     -> base(initial_val) { }
    init(initial_val : byte)     -> base(initial_val) { }
    init(initial_val : bool)     -> base(initial_val) { }
    init(initial_val : ulong)    -> base(initial_val) { }
    init(initial_val : ushort)   -> base(initial_val) { }
    init(initial_val : uint)     -> base(initial_val) { }
    init(initial_val : uchar)    -> base(initial_val) { }
    init(initial_val : double)   -> base(initial_val) { }
}
class short base number<_int16, short> {
    short(i : long) -> base(i.value) {}
    short(i : int) -> base(i.value) {}
    short(i : short) -> base(i.value) {}
    short(i : char) -> base(i.value) {}
    short(i : byte) -> base(i.value) {}
    short(i : bool) -> base(i.value) {}
    short(i : ulong) -> base(i.value) {}
    short(i : uint) -> base(i.value) {}
    short(i : ushort) -> base(i.value) {}
    short(i : uchar) -> base(i.value) {}
    short(i : double) -> base(i.value) {}
    short(initial_val : var) -> base(initial_val) {}
    short(initial_val : _int8) -> base(initial_val) {}
    short(initial_val : _uint8) -> base(initial_val) {}
    short(initial_val : _int16)  -> base(initial_val) {}
    short(initial_val : _uint16)  -> base(initial_val) {}
    short(initial_val : _int32)  -> base(initial_val) {}
    short(initial_val : _uint32)  -> base(initial_val) {}
    short(initial_val : _int64)  -> base(initial_val) {}
    short(initial_val : _uint64)  -> base(initial_val) {}

    init(initial_val : var)      -> base(initial_val) { }
    init(initial_val : _int8)    -> base(initial_val) { }
    init(initial_val : _int16)   -> base(initial_val) { }
    init(initial_val : _int32)   -> base(initial_val) { }
    init(initial_val : _int64)   -> base(initial_val) { }
    init(initial_val : _uint8)   -> base(initial_val) { }
    init(initial_val : _uint16)  -> base(initial_val) { }
    init(initial_val : _uint32)  -> base(initial_val) { }
    init(initial_val : _uint64)  -> base(initial_val) { }
    init(initial_val : long)     -> base(initial_val) { }
    init(initial_val : int)      -> base(initial_val) { }
    init(initial_val : short)    -> base(initial_val) { }
    init(initial_val : char)     -> base(initial_val) { }
    init(initial_val : byte)     -> base(initial_val) { }
    init(initial_val : bool)     -> base(initial_val) { }
    init(initial_val : ulong)    -> base(initial_val) { }
    init(initial_val : ushort)   -> base(initial_val) { }
    init(initial_val : uint)     -> base(initial_val) { }
    init(initial_val : uchar)    -> base(initial_val) { }
    init(initial_val : double)   -> base(initial_val) { }
}
class uchar base number<_uint8, uchar> {
    uchar(i : long) -> base(i.value) {}
    uchar(i : int) -> base(i.value) {}
    uchar(i : short) -> base(i.value) {}
    uchar(i : char) -> base(i.value) {}
    uchar(i : byte) -> base(i.value) {}
    uchar(i : bool) -> base(i.value) {}
    uchar(i : ulong) -> base(i.value) {}
    uchar(i : uint) -> base(i.value) {}
    uchar(i : ushort) -> base(i.value) {}
    uchar(i : uchar) -> base(i.value) {}
    uchar(i : double) -> base(i.value) {}
    uchar(initial_val : var) -> base(initial_val) {}
    uchar(initial_val : _int8) -> base(initial_val) {}
    uchar(initial_val : _uint8) -> base(initial_val) {}
    uchar(initial_val : _int16)  -> base(initial_val) {}
    uchar(initial_val : _uint16)  -> base(initial_val) {}
    uchar(initial_val : _int32)  -> base(initial_val) {}
    uchar(initial_val : _uint32)  -> base(initial_val) {}
    uchar(initial_val : _int64)  -> base(initial_val) {}
    uchar(initial_val : _uint64)  -> base(initial_val) {}

    init(initial_val : var) -> base(initial_val) { } // todo: allow base calls on init decls and prevent constructor calling
    init(initial_val : _int8)    -> base(initial_val) { }
    init(initial_val : _int16)   -> base(initial_val) { }
    init(initial_val : _int32)   -> base(initial_val) { }
    init(initial_val : _int64)   -> base(initial_val) { }
    init(initial_val : _uint8)   -> base(initial_val) { }
    init(initial_val : _uint16)  -> base(initial_val) { }
    init(initial_val : _uint32)  -> base(initial_val) { }
    init(initial_val : _uint64)  -> base(initial_val) { }
    init(initial_val : long)     -> base(initial_val) { }
    init(initial_val : int)      -> base(initial_val) { }
    init(initial_val : short)    -> base(initial_val) { }
    init(initial_val : char)     -> base(initial_val) { }
    init(initial_val : byte)     -> base(initial_val) { }
    init(initial_val : bool)     -> base(initial_val) { }
    init(initial_val : ulong)    -> base(initial_val) { }
    init(initial_val : ushort)   -> base(initial_val) { }
    init(initial_val : uint)     -> base(initial_val) { }
    init(initial_val : uchar)    -> base(initial_val) { }
    init(initial_val : double)   -> base(initial_val) { }

    override def to_string() : string? {
        return new string(value as _int8);
    }

    static def is_digit(ch: char) : bool {
        return ch.value >= '0' && ch.value <= '9';
    }

    static def is_newline(ch: char) : bool {
        if(build.is_windows()) return ch.value == '\n' || ch.value == '\r';
        else  return ch == '\n';
    }

    static def is_alpha(ch: char) : bool {
        return (ch.value >= 'A' && ch.value <= 'Z')
            || (ch.value >= 'a' && ch.value <= 'z');
    }

    static def is_alpha_num(ch: char) : bool {
        return is_alpha(ch) || is_digit(ch);
    }

    static def to_lower(ch: char) : char {
        if('A' <= ch.value && ch.value <= 'Z')
            return 'a' + (ch.value - 'A');
        else
            return ch;
    }

    static def to_upper(ch: char) : char {
        if('a' <= ch.value && ch.value <= 'z')
            return 'A' + (ch.value - 'a');
        else
            return ch;
    }
}
class char base number<_int8, char> {
    char(i : long) -> base(i.value) {}
    char(i : int) -> base(i.value) {}
    char(i : short) -> base(i.value) {}
    char(i : char) -> base(i.value) {}
    char(i : byte) -> base(i.value) {}
    char(i : bool) -> base(i.value) {}
    char(i : ulong) -> base(i.value) {}
    char(i : uint) -> base(i.value) {}
    char(i : ushort) -> base(i.value) {}
    char(i : uchar) -> base(i.value) {}
    char(i : double) -> base(i.value) {}
    char(initial_val : var) -> base(initial_val) {}
    char(initial_val : _int8) -> base(initial_val) {}
    char(initial_val : _uint8) -> base(initial_val) {}
    char(initial_val : _int16)  -> base(initial_val) {}
    char(initial_val : _uint16)  -> base(initial_val) {}
    char(initial_val : _int32)  -> base(initial_val) {}
    char(initial_val : _uint32)  -> base(initial_val) {}
    char(initial_val : _int64)  -> base(initial_val) {}
    char(initial_val : _uint64)  -> base(initial_val) {}

    init(initial_val : var)      -> base(initial_val) { }
    init(initial_val : _int8)    -> base(initial_val) { }
    init(initial_val : _int16)   -> base(initial_val) { }
    init(initial_val : _int32)   -> base(initial_val) { }
    init(initial_val : _int64)   -> base(initial_val) { }
    init(initial_val : _uint8)   -> base(initial_val) { }
    init(initial_val : _uint16)  -> base(initial_val) { }
    init(initial_val : _uint32)  -> base(initial_val) { }
    init(initial_val : _uint64)  -> base(initial_val) { }
    init(initial_val : long)     -> base(initial_val) { }
    init(initial_val : int)      -> base(initial_val) { }
    init(initial_val : short)    -> base(initial_val) { }
    init(initial_val : char)     -> base(initial_val) { }
    init(initial_val : byte)     -> base(initial_val) { }
    init(initial_val : bool)     -> base(initial_val) { }
    init(initial_val : ulong)    -> base(initial_val) { }
    init(initial_val : ushort)   -> base(initial_val) { }
    init(initial_val : uint)     -> base(initial_val) { }
    init(initial_val : uchar)    -> base(initial_val) { }
    init(initial_val : double)   -> base(initial_val) { }

    override def to_string() : string? {
        return new string(value);
    }

    static def is_digit(ch: char) : bool {
        return ch.value >= '0' && ch.value <= '9';
    }

    static def is_newline(ch: char) : bool {
        if(build.is_windows()) return ch == '\n' || ch == '\r';
        else  return ch == '\n';
    }

    static def is_alpha(ch: char) : bool {
        return (ch.value >= 'A' && ch.value <= 'Z')
            || (ch.value >= 'a' && ch.value <= 'z');
    }

    static def is_alpha_num(ch: char) : bool {
        return is_alpha(ch) || is_digit(ch);
    }

    static def to_lower(ch: char) : bool {
        if('A' <= ch.value && ch.value <= 'Z')
            return 'a' + (ch.value - 'A');
        else
            return ch;
    }

    static def to_upper(ch: char) : bool {
        if('a' <= ch.value && ch.value <= 'z')
            return 'A' + (ch.value - 'a');
        else
            return ch;
    }
}
class byte base uchar {
    byte(i : long) -> base(i.value) {}
    byte(i : int) -> base(i.value) {}
    byte(i : short) -> base(i.value) {}
    byte(i : char) -> base(i.value) {}
    byte(i : byte) -> base(i.value) {}
    byte(i : bool) -> base(i.value) {}
    byte(i : ulong) -> base(i.value) {}
    byte(i : uint) -> base(i.value) {}
    byte(i : ushort) -> base(i.value) {}
    byte(i : uchar) -> base(i.value) {}
    byte(i : double) -> base(i.value) {}
    byte(initial_val : var) -> base(initial_val) {}
    byte(initial_val : _int8) -> base(initial_val) {}
    byte(initial_val : _uint8) -> base(initial_val) {}
    byte(initial_val : _int16)  -> base(initial_val) {}
    byte(initial_val : _uint16)  -> base(initial_val) {}
    byte(initial_val : _int32)  -> base(initial_val) {}
    byte(initial_val : _uint32)  -> base(initial_val) {}
    byte(initial_val : _int64)  -> base(initial_val) {}
    byte(initial_val : _uint64)  -> base(initial_val) {}

    init(initial_val : var)      -> base(initial_val) { }
    init(initial_val : _int8)    -> base(initial_val) { }
    init(initial_val : _int16)   -> base(initial_val) { }
    init(initial_val : _int32)   -> base(initial_val) { }
    init(initial_val : _int64)   -> base(initial_val) { }
    init(initial_val : _uint8)   -> base(initial_val) { }
    init(initial_val : _uint16)  -> base(initial_val) { }
    init(initial_val : _uint32)  -> base(initial_val) { }
    init(initial_val : _uint64)  -> base(initial_val) { }
    init(initial_val : long)     -> base(initial_val) { }
    init(initial_val : int)      -> base(initial_val) { }
    init(initial_val : short)    -> base(initial_val) { }
    init(initial_val : char)     -> base(initial_val) { }
    init(initial_val : byte)     -> base(initial_val) { }
    init(initial_val : bool)     -> base(initial_val) { }
    init(initial_val : ulong)    -> base(initial_val) { }
    init(initial_val : ushort)   -> base(initial_val) { }
    init(initial_val : uint)     -> base(initial_val) { }
    init(initial_val : uchar)    -> base(initial_val) { }
    init(initial_val : double)   -> base(initial_val) { }
}

class bool base number<_int8, bool> {
    bool(i : long) -> base(i.value) {}
    bool(i : int) -> base(i.value) {}
    bool(i : short) -> base(i.value) {}
    bool(i : char) -> base(i.value) {}
    bool(i : byte) -> base(i.value) {}
    bool(i : bool) -> base(i.value) {}
    bool(i : ulong) -> base(i.value) {}
    bool(i : uint) -> base(i.value) {}
    bool(i : ushort) -> base(i.value) {}
    bool(i : uchar) -> base(i.value) {}
    bool(i : double) -> base(i.value) {}
    bool(initial_val : var) -> base(initial_val) {}
    bool(initial_val : _int8) -> base(initial_val) {}
    bool(initial_val : _uint8) -> base(initial_val) {}
    bool(initial_val : _int16)  -> base(initial_val) {}
    bool(initial_val : _uint16)  -> base(initial_val) {}
    bool(initial_val : _int32)  -> base(initial_val) {}
    bool(initial_val : _uint32)  -> base(initial_val) {}
    bool(initial_val : _int64)  -> base(initial_val) {}
    bool(initial_val : _uint64)  -> base(initial_val) {}

    init(initial_val : var)      -> base(initial_val) { }
    init(initial_val : _int8)    -> base(initial_val) { }
    init(initial_val : _int16)   -> base(initial_val) { }
    init(initial_val : _int32)   -> base(initial_val) { }
    init(initial_val : _int64)   -> base(initial_val) { }
    init(initial_val : _uint8)   -> base(initial_val) { }
    init(initial_val : _uint16)  -> base(initial_val) { }
    init(initial_val : _uint32)  -> base(initial_val) { }
    init(initial_val : _uint64)  -> base(initial_val) { }
    init(initial_val : long)     -> base(initial_val) { }
    init(initial_val : int)      -> base(initial_val) { }
    init(initial_val : short)    -> base(initial_val) { }
    init(initial_val : char)     -> base(initial_val) { }
    init(initial_val : byte)     -> base(initial_val) { }
    init(initial_val : bool)     -> base(initial_val) { }
    init(initial_val : ulong)    -> base(initial_val) { }
    init(initial_val : ushort)   -> base(initial_val) { }
    init(initial_val : uint)     -> base(initial_val) { }
    init(initial_val : uchar)    -> base(initial_val) { }
    init(initial_val : double)   -> base(initial_val) { }

    override def to_string() : string {
       return value ? "true" : "false";
    }
}

class double base number<var, double> {
    double(i : long) -> base(i.value) {}
    double(i : int) -> base(i.value) {}
    double(i : short) -> base(i.value) {}
    double(i : char) -> base(i.value) {}
    double(i : byte) -> base(i.value) {}
    double(i : bool) -> base(i.value) {}
    double(i : ulong) -> base(i.value) {}
    double(i : uint) -> base(i.value) {}
    double(i : ushort) -> base(i.value) {}
    double(i : uchar) -> base(i.value) {}
    double(i : double) -> base(i.value) {}
    double(initial_val : var) -> base(initial_val) {}
    double(initial_val : _int8) -> base(initial_val) {}
    double(initial_val : _uint8) -> base(initial_val) {}
    double(initial_val : _int16)  -> base(initial_val) {}
    double(initial_val : _uint16)  -> base(initial_val) {}
    double(initial_val : _int32)  -> base(initial_val) {}
    double(initial_val : _uint32)  -> base(initial_val) {}
    double(initial_val : _int64)  -> base(initial_val) {}
    double(initial_val : _uint64)  -> base(initial_val) {}

    init(initial_val : var)      -> base(initial_val) { }
    init(initial_val : _int8)    -> base(initial_val) { }
    init(initial_val : _int16)   -> base(initial_val) { }
    init(initial_val : _int32)   -> base(initial_val) { }
    init(initial_val : _int64)   -> base(initial_val) { }
    init(initial_val : _uint8)   -> base(initial_val) { }
    init(initial_val : _uint16)  -> base(initial_val) { }
    init(initial_val : _uint32)  -> base(initial_val) { }
    init(initial_val : _uint64)  -> base(initial_val) { }
    init(initial_val : long)     -> base(initial_val) { }
    init(initial_val : int)      -> base(initial_val) { }
    init(initial_val : short)    -> base(initial_val) { }
    init(initial_val : char)     -> base(initial_val) { }
    init(initial_val : byte)     -> base(initial_val) { }
    init(initial_val : bool)     -> base(initial_val) { }
    init(initial_val : ulong)    -> base(initial_val) { }
    init(initial_val : ushort)   -> base(initial_val) { }
    init(initial_val : uint)     -> base(initial_val) { }
    init(initial_val : uchar)    -> base(initial_val) { }
    init(initial_val : double)   -> base(initial_val) { }

    override def to_string() : string? {
        return snprintf('f', value, 16);
    }
}

alias double as _var_;
