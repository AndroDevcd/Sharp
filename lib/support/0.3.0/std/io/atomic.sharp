mod std.io;

class atomic<t base base_number<t> > {
     private value : t;

     atomic(initial_val : t) {
        value = initial_val;
     }

     def read() : t { lock(self) { return value; }}

     override def to_string() : string? {
        lock(self) {
            return "" + value;
        }
     }

     def operator!=(num : atomic<t>) : bool   { lock(self) { return (value.value!=num.value.value); }}
     def operator!=(num : ulong) : bool       { lock(self) { return (value.value!=num.value); }}
     def operator!=(num : long) : bool        { lock(self) { return (value.value!=num.value); }}
     def operator!=(num : uint) : bool        { lock(self) { return (value.value!=num.value); }}
     def operator!=(num : int) : bool         { lock(self) { return (value.value!=num.value); }}
     def operator!=(num : ushort) : bool      { lock(self) { return (value.value!=num.value); }}
     def operator!=(num : short) : bool       { lock(self) { return (value.value!=num.value); }}
     def operator!=(num : byte) : bool        { lock(self) { return (value.value!=num.value); }}
     def operator!=(num : uchar) : bool       { lock(self) { return (value.value!=num.value); }}
     def operator!=(num : char) : bool        { lock(self) { return (value.value!=num.value); }}
     def operator!=(num : bool) : bool        { lock(self) { return (value.value!=num.value); }}
     def operator!=(num : double) : bool      { lock(self) { return (value.value!=num.value); }}
     def operator!=(num : _uint8) : bool      { lock(self) { return (value.value!=num); }}
     def operator!=(num : _uint16) : bool     { lock(self) { return (value.value!=num); }}
     def operator!=(num : _uint32) : bool     { lock(self) { return (value.value!=num); }}
     def operator!=(num : _uint64) : bool     { lock(self) { return (value.value!=num); }}
     def operator!=(num : _int8) : bool       { lock(self) { return (value.value!=num); }}
     def operator!=(num : _int16) : bool      { lock(self) { return (value.value!=num); }}
     def operator!=(num : _int32) : bool      { lock(self) { return (value.value!=num); }}
     def operator!=(num : _int64) : bool      { lock(self) { return (value.value!=num); }}
     def operator!=(num : var) : bool         { lock(self) { return (value.value!=num); }}

     def operator==(num : atomic<t>) : bool   { lock(self) { return (value.value==num.value.value); }}
     def operator==(num : ulong) : bool       { lock(self) { return (value.value==num.value); }}
     def operator==(num : long) : bool        { lock(self) { return (value.value==num.value); }}
     def operator==(num : uint) : bool        { lock(self) { return (value.value==num.value); }}
     def operator==(num : int) : bool         { lock(self) { return (value.value==num.value); }}
     def operator==(num : ushort) : bool      { lock(self) { return (value.value==num.value); }}
     def operator==(num : short) : bool       { lock(self) { return (value.value==num.value); }}
     def operator==(num : byte) : bool        { lock(self) { return (value.value==num.value); }}
     def operator==(num : uchar) : bool       { lock(self) { return (value.value==num.value); }}
     def operator==(num : char) : bool        { lock(self) { return (value.value==num.value); }}
     def operator==(num : bool) : bool        { lock(self) { return (value.value==num.value); }}
     def operator==(num : double) : bool      { lock(self) { return (value.value==num.value); }}
     def operator==(num : _uint8) : bool      { lock(self) { return (value.value==num); }}
     def operator==(num : _uint16) : bool     { lock(self) { return (value.value==num); }}
     def operator==(num : _uint32) : bool     { lock(self) { return (value.value==num); }}
     def operator==(num : _uint64) : bool     { lock(self) { return (value.value==num); }}
     def operator==(num : _int8) : bool       { lock(self) { return (value.value==num); }}
     def operator==(num : _int16) : bool      { lock(self) { return (value.value==num); }}
     def operator==(num : _int32) : bool      { lock(self) { return (value.value==num); }}
     def operator==(num : _int64) : bool      { lock(self) { return (value.value==num); }}
     def operator==(num : var) : bool         { lock(self) { return (value.value==num); }}

     def operator&&(num : atomic<t>) : bool   { lock(self) { return (value.value&&num.value.value); }}
     def operator&&(num : ulong) : bool       { lock(self) { return (value.value&&num.value); }}
     def operator&&(num : long) : bool        { lock(self) { return (value.value&&num.value); }}
     def operator&&(num : uint) : bool        { lock(self) { return (value.value&&num.value); }}
     def operator&&(num : int) : bool         { lock(self) { return (value.value&&num.value); }}
     def operator&&(num : ushort) : bool      { lock(self) { return (value.value&&num.value); }}
     def operator&&(num : short) : bool       { lock(self) { return (value.value&&num.value); }}
     def operator&&(num : byte) : bool        { lock(self) { return (value.value&&num.value); }}
     def operator&&(num : uchar) : bool       { lock(self) { return (value.value&&num.value); }}
     def operator&&(num : char) : bool        { lock(self) { return (value.value&&num.value); }}
     def operator&&(num : bool) : bool        { lock(self) { return (value.value&&num.value); }}
     def operator&&(num : double) : bool      { lock(self) { return (value.value&&num.value); }}
     def operator&&(num : _uint8) : bool      { lock(self) { return (value.value&&num); }}
     def operator&&(num : _uint16) : bool     { lock(self) { return (value.value&&num); }}
     def operator&&(num : _uint32) : bool     { lock(self) { return (value.value&&num); }}
     def operator&&(num : _uint64) : bool     { lock(self) { return (value.value&&num); }}
     def operator&&(num : _int8) : bool       { lock(self) { return (value.value&&num); }}
     def operator&&(num : _int16) : bool      { lock(self) { return (value.value&&num); }}
     def operator&&(num : _int32) : bool      { lock(self) { return (value.value&&num); }}
     def operator&&(num : _int64) : bool      { lock(self) { return (value.value&&num); }}
     def operator&&(num : var) : bool         { lock(self) { return (value.value&&num); }}

     def operator||(num : atomic<t>) : bool   { lock(self) { return (value.value||num.value.value); }}
     def operator||(num : ulong) : bool       { lock(self) { return (value.value||num.value); }}
     def operator||(num : long) : bool        { lock(self) { return (value.value||num.value); }}
     def operator||(num : uint) : bool        { lock(self) { return (value.value||num.value); }}
     def operator||(num : int) : bool         { lock(self) { return (value.value||num.value); }}
     def operator||(num : ushort) : bool      { lock(self) { return (value.value||num.value); }}
     def operator||(num : short) : bool       { lock(self) { return (value.value||num.value); }}
     def operator||(num : byte) : bool        { lock(self) { return (value.value||num.value); }}
     def operator||(num : uchar) : bool       { lock(self) { return (value.value||num.value); }}
     def operator||(num : char) : bool        { lock(self) { return (value.value||num.value); }}
     def operator||(num : bool) : bool        { lock(self) { return (value.value||num.value); }}
     def operator||(num : double) : bool      { lock(self) { return (value.value||num.value); }}
     def operator||(num : _uint8) : bool      { lock(self) { return (value.value||num); }}
     def operator||(num : _uint16) : bool     { lock(self) { return (value.value||num); }}
     def operator||(num : _uint32) : bool     { lock(self) { return (value.value||num); }}
     def operator||(num : _uint64) : bool     { lock(self) { return (value.value||num); }}
     def operator||(num : _int8) : bool       { lock(self) { return (value.value||num); }}
     def operator||(num : _int16) : bool      { lock(self) { return (value.value||num); }}
     def operator||(num : _int32) : bool      { lock(self) { return (value.value||num); }}
     def operator||(num : _int64) : bool      { lock(self) { return (value.value||num); }}
     def operator||(num : var) : bool         { lock(self) { return (value.value||num); }}

     def operator<(num : atomic<t>) : bool   { lock(self) { return (value.value<num.value.value); }}
     def operator<(num : ulong) : bool       { lock(self) { return (value.value<num.value); }}
     def operator<(num : long) : bool        { lock(self) { return (value.value<num.value); }}
     def operator<(num : uint) : bool        { lock(self) { return (value.value<num.value); }}
     def operator<(num : int) : bool         { lock(self) { return (value.value<num.value); }}
     def operator<(num : ushort) : bool      { lock(self) { return (value.value<num.value); }}
     def operator<(num : short) : bool       { lock(self) { return (value.value<num.value); }}
     def operator<(num : byte) : bool        { lock(self) { return (value.value<num.value); }}
     def operator<(num : uchar) : bool       { lock(self) { return (value.value<num.value); }}
     def operator<(num : char) : bool        { lock(self) { return (value.value<num.value); }}
     def operator<(num : bool) : bool        { lock(self) { return (value.value<num.value); }}
     def operator<(num : double) : bool      { lock(self) { return (value.value<num.value); }}
     def operator<(num : _uint8) : bool      { lock(self) { return (value.value<num); }}
     def operator<(num : _uint16) : bool     { lock(self) { return (value.value<num); }}
     def operator<(num : _uint32) : bool     { lock(self) { return (value.value<num); }}
     def operator<(num : _uint64) : bool     { lock(self) { return (value.value<num); }}
     def operator<(num : _int8) : bool       { lock(self) { return (value.value<num); }}
     def operator<(num : _int16) : bool      { lock(self) { return (value.value<num); }}
     def operator<(num : _int32) : bool      { lock(self) { return (value.value<num); }}
     def operator<(num : _int64) : bool      { lock(self) { return (value.value<num); }}
     def operator<(num : var) : bool         { lock(self) { return (value.value<num); }}

     def operator>(num : atomic<t>) : bool   { lock(self) { return (value.value>num.value.value); }}
     def operator>(num : ulong) : bool       { lock(self) { return (value.value>num.value); }}
     def operator>(num : long) : bool        { lock(self) { return (value.value>num.value); }}
     def operator>(num : uint) : bool        { lock(self) { return (value.value>num.value); }}
     def operator>(num : int) : bool         { lock(self) { return (value.value>num.value); }}
     def operator>(num : ushort) : bool      { lock(self) { return (value.value>num.value); }}
     def operator>(num : short) : bool       { lock(self) { return (value.value>num.value); }}
     def operator>(num : byte) : bool        { lock(self) { return (value.value>num.value); }}
     def operator>(num : uchar) : bool       { lock(self) { return (value.value>num.value); }}
     def operator>(num : char) : bool        { lock(self) { return (value.value>num.value); }}
     def operator>(num : bool) : bool        { lock(self) { return (value.value>num.value); }}
     def operator>(num : double) : bool      { lock(self) { return (value.value>num.value); }}
     def operator>(num : _uint8) : bool      { lock(self) { return (value.value>num); }}
     def operator>(num : _uint16) : bool     { lock(self) { return (value.value>num); }}
     def operator>(num : _uint32) : bool     { lock(self) { return (value.value>num); }}
     def operator>(num : _uint64) : bool     { lock(self) { return (value.value>num); }}
     def operator>(num : _int8) : bool       { lock(self) { return (value.value>num); }}
     def operator>(num : _int16) : bool      { lock(self) { return (value.value>num); }}
     def operator>(num : _int32) : bool      { lock(self) { return (value.value>num); }}
     def operator>(num : _int64) : bool      { lock(self) { return (value.value>num); }}
     def operator>(num : var) : bool         { lock(self) { return (value.value>num); }}

     def operator<=(num : atomic<t>) : bool   { lock(self) { return (value.value>=num.value.value); }}
     def operator<=(num : ulong) : bool       { lock(self) { return (value.value>=num.value); }}
     def operator<=(num : long) : bool        { lock(self) { return (value.value>=num.value); }}
     def operator<=(num : uint) : bool        { lock(self) { return (value.value>=num.value); }}
     def operator<=(num : int) : bool         { lock(self) { return (value.value>=num.value); }}
     def operator<=(num : ushort) : bool      { lock(self) { return (value.value>=num.value); }}
     def operator<=(num : short) : bool       { lock(self) { return (value.value>=num.value); }}
     def operator<=(num : byte) : bool        { lock(self) { return (value.value>=num.value); }}
     def operator<=(num : uchar) : bool       { lock(self) { return (value.value>=num.value); }}
     def operator<=(num : char) : bool        { lock(self) { return (value.value>=num.value); }}
     def operator<=(num : bool) : bool        { lock(self) { return (value.value>=num.value); }}
     def operator<=(num : double) : bool      { lock(self) { return (value.value>=num.value); }}
     def operator<=(num : _uint8) : bool      { lock(self) { return (value.value>=num); }}
     def operator<=(num : _uint16) : bool     { lock(self) { return (value.value>=num); }}
     def operator<=(num : _uint32) : bool     { lock(self) { return (value.value>=num); }}
     def operator<=(num : _uint64) : bool     { lock(self) { return (value.value>=num); }}
     def operator<=(num : _int8) : bool       { lock(self) { return (value.value>=num); }}
     def operator<=(num : _int16) : bool      { lock(self) { return (value.value>=num); }}
     def operator<=(num : _int32) : bool      { lock(self) { return (value.value>=num); }}
     def operator<=(num : _int64) : bool      { lock(self) { return (value.value>=num); }}
     def operator<=(num : var) : bool         { lock(self) { return (value.value>=num); }}

     def operator+(num : atomic<t>) : t   { lock(self) { return (value.value+num.value.value); }}
     def operator+(num : ulong) : t       { lock(self) { return (value.value+num.value); }}
     def operator+(num : long) : t        { lock(self) { return (value.value+num.value); }}
     def operator+(num : uint) : t        { lock(self) { return (value.value+num.value); }}
     def operator+(num : int) : t         { lock(self) { return (value.value+num.value); }}
     def operator+(num : ushort) : t      { lock(self) { return (value.value+num.value); }}
     def operator+(num : short) : t       { lock(self) { return (value.value+num.value); }}
     def operator+(num : byte) : t        { lock(self) { return (value.value+num.value); }}
     def operator+(num : uchar) : t       { lock(self) { return (value.value+num.value); }}
     def operator+(num : char) : t        { lock(self) { return (value.value+num.value); }}
     def operator+(num : bool) : t        { lock(self) { return (value.value+num.value); }}
     def operator+(num : double) : t      { lock(self) { return (value.value+num.value); }}
     def operator+(num : _uint8) : t      { lock(self) { return (value.value+num); }}
     def operator+(num : _uint16) : t     { lock(self) { return (value.value+num); }}
     def operator+(num : _uint32) : t     { lock(self) { return (value.value+num); }}
     def operator+(num : _uint64) : t     { lock(self) { return (value.value+num); }}
     def operator+(num : _int8) : t       { lock(self) { return (value.value+num); }}
     def operator+(num : _int16) : t      { lock(self) { return (value.value+num); }}
     def operator+(num : _int32) : t      { lock(self) { return (value.value+num); }}
     def operator+(num : _int64) : t      { lock(self) { return (value.value+num); }}
     def operator+(num : var) : t         { lock(self) { return (value.value+num); }}

     def operator-(num : atomic<t>) : t   { lock(self) { return (value.value-num.value.value); }}
     def operator-(num : ulong) : t       { lock(self) { return (value.value-num.value); }}
     def operator-(num : long) : t        { lock(self) { return (value.value-num.value); }}
     def operator-(num : uint) : t        { lock(self) { return (value.value-num.value); }}
     def operator-(num : int) : t         { lock(self) { return (value.value-num.value); }}
     def operator-(num : ushort) : t      { lock(self) { return (value.value-num.value); }}
     def operator-(num : short) : t       { lock(self) { return (value.value-num.value); }}
     def operator-(num : byte) : t        { lock(self) { return (value.value-num.value); }}
     def operator-(num : uchar) : t       { lock(self) { return (value.value-num.value); }}
     def operator-(num : char) : t        { lock(self) { return (value.value-num.value); }}
     def operator-(num : bool) : t        { lock(self) { return (value.value-num.value); }}
     def operator-(num : double) : t      { lock(self) { return (value.value-num.value); }}
     def operator-(num : _uint8) : t      { lock(self) { return (value.value-num); }}
     def operator-(num : _uint16) : t     { lock(self) { return (value.value-num); }}
     def operator-(num : _uint32) : t     { lock(self) { return (value.value-num); }}
     def operator-(num : _uint64) : t     { lock(self) { return (value.value-num); }}
     def operator-(num : _int8) : t       { lock(self) { return (value.value-num); }}
     def operator-(num : _int16) : t      { lock(self) { return (value.value-num); }}
     def operator-(num : _int32) : t      { lock(self) { return (value.value-num); }}
     def operator-(num : _int64) : t      { lock(self) { return (value.value-num); }}
     def operator-(num : var) : t         { lock(self) { return (value.value-num); }}

     def operator*(num : atomic<t>) : t   { lock(self) { return (value.value*num.value.value); }}
     def operator*(num : ulong) : t       { lock(self) { return (value.value*num.value); }}
     def operator*(num : long) : t        { lock(self) { return (value.value*num.value); }}
     def operator*(num : uint) : t        { lock(self) { return (value.value*num.value); }}
     def operator*(num : int) : t         { lock(self) { return (value.value*num.value); }}
     def operator*(num : ushort) : t      { lock(self) { return (value.value*num.value); }}
     def operator*(num : short) : t       { lock(self) { return (value.value*num.value); }}
     def operator*(num : byte) : t        { lock(self) { return (value.value*num.value); }}
     def operator*(num : uchar) : t       { lock(self) { return (value.value*num.value); }}
     def operator*(num : char) : t        { lock(self) { return (value.value*num.value); }}
     def operator*(num : bool) : t        { lock(self) { return (value.value*num.value); }}
     def operator*(num : double) : t      { lock(self) { return (value.value*num.value); }}
     def operator*(num : _uint8) : t      { lock(self) { return (value.value*num); }}
     def operator*(num : _uint16) : t     { lock(self) { return (value.value*num); }}
     def operator*(num : _uint32) : t     { lock(self) { return (value.value*num); }}
     def operator*(num : _uint64) : t     { lock(self) { return (value.value*num); }}
     def operator*(num : _int8) : t       { lock(self) { return (value.value*num); }}
     def operator*(num : _int16) : t      { lock(self) { return (value.value*num); }}
     def operator*(num : _int32) : t      { lock(self) { return (value.value*num); }}
     def operator*(num : _int64) : t      { lock(self) { return (value.value*num); }}
     def operator*(num : var) : t         { lock(self) { return (value.value*num); }}

     def operator/(num : atomic<t>) : t   { lock(self) { return (value.value/num.value.value); }}
     def operator/(num : ulong) : t       { lock(self) { return (value.value/num.value); }}
     def operator/(num : long) : t        { lock(self) { return (value.value/num.value); }}
     def operator/(num : uint) : t        { lock(self) { return (value.value/num.value); }}
     def operator/(num : int) : t         { lock(self) { return (value.value/num.value); }}
     def operator/(num : ushort) : t      { lock(self) { return (value.value/num.value); }}
     def operator/(num : short) : t       { lock(self) { return (value.value/num.value); }}
     def operator/(num : byte) : t        { lock(self) { return (value.value/num.value); }}
     def operator/(num : uchar) : t       { lock(self) { return (value.value/num.value); }}
     def operator/(num : char) : t        { lock(self) { return (value.value/num.value); }}
     def operator/(num : bool) : t        { lock(self) { return (value.value/num.value); }}
     def operator/(num : double) : t      { lock(self) { return (value.value/num.value); }}
     def operator/(num : _uint8) : t      { lock(self) { return (value.value/num); }}
     def operator/(num : _uint16) : t     { lock(self) { return (value.value/num); }}
     def operator/(num : _uint32) : t     { lock(self) { return (value.value/num); }}
     def operator/(num : _uint64) : t     { lock(self) { return (value.value/num); }}
     def operator/(num : _int8) : t       { lock(self) { return (value.value/num); }}
     def operator/(num : _int16) : t      { lock(self) { return (value.value/num); }}
     def operator/(num : _int32) : t      { lock(self) { return (value.value/num); }}
     def operator/(num : _int64) : t      { lock(self) { return (value.value/num); }}
     def operator/(num : var) : t         { lock(self) { return (value.value/num); }}

     def operator%(num : atomic<t>) : t   { lock(self) { return (value.value%num.value.value); }}
     def operator%(num : ulong) : t       { lock(self) { return (value.value%num.value); }}
     def operator%(num : long) : t        { lock(self) { return (value.value%num.value); }}
     def operator%(num : uint) : t        { lock(self) { return (value.value%num.value); }}
     def operator%(num : int) : t         { lock(self) { return (value.value%num.value); }}
     def operator%(num : ushort) : t      { lock(self) { return (value.value%num.value); }}
     def operator%(num : short) : t       { lock(self) { return (value.value%num.value); }}
     def operator%(num : byte) : t        { lock(self) { return (value.value%num.value); }}
     def operator%(num : uchar) : t       { lock(self) { return (value.value%num.value); }}
     def operator%(num : char) : t        { lock(self) { return (value.value%num.value); }}
     def operator%(num : bool) : t        { lock(self) { return (value.value%num.value); }}
     def operator%(num : double) : t      { lock(self) { return (value.value%num.value); }}
     def operator%(num : _uint8) : t      { lock(self) { return (value.value%num); }}
     def operator%(num : _uint16) : t     { lock(self) { return (value.value%num); }}
     def operator%(num : _uint32) : t     { lock(self) { return (value.value%num); }}
     def operator%(num : _uint64) : t     { lock(self) { return (value.value%num); }}
     def operator%(num : _int8) : t       { lock(self) { return (value.value%num); }}
     def operator%(num : _int16) : t      { lock(self) { return (value.value%num); }}
     def operator%(num : _int32) : t      { lock(self) { return (value.value%num); }}
     def operator%(num : _int64) : t      { lock(self) { return (value.value%num); }}
     def operator%(num : var) : t         { lock(self) { return (value.value%num); }}

     def operator**(num : atomic<t>) : t   { lock(self) { return (value.value**num.value.value); }}
     def operator**(num : ulong) : t       { lock(self) { return (value.value**num.value); }}
     def operator**(num : long) : t        { lock(self) { return (value.value**num.value); }}
     def operator**(num : uint) : t        { lock(self) { return (value.value**num.value); }}
     def operator**(num : int) : t         { lock(self) { return (value.value**num.value); }}
     def operator**(num : ushort) : t      { lock(self) { return (value.value**num.value); }}
     def operator**(num : short) : t       { lock(self) { return (value.value**num.value); }}
     def operator**(num : byte) : t        { lock(self) { return (value.value**num.value); }}
     def operator**(num : uchar) : t       { lock(self) { return (value.value**num.value); }}
     def operator**(num : char) : t        { lock(self) { return (value.value**num.value); }}
     def operator**(num : bool) : t        { lock(self) { return (value.value**num.value); }}
     def operator**(num : double) : t      { lock(self) { return (value.value**num.value); }}
     def operator**(num : _uint8) : t      { lock(self) { return (value.value**num); }}
     def operator**(num : _uint16) : t     { lock(self) { return (value.value**num); }}
     def operator**(num : _uint32) : t     { lock(self) { return (value.value**num); }}
     def operator**(num : _uint64) : t     { lock(self) { return (value.value**num); }}
     def operator**(num : _int8) : t       { lock(self) { return (value.value**num); }}
     def operator**(num : _int16) : t      { lock(self) { return (value.value**num); }}
     def operator**(num : _int32) : t      { lock(self) { return (value.value**num); }}
     def operator**(num : _int64) : t      { lock(self) { return (value.value**num); }}
     def operator**(num : var) : t         { lock(self) { return (value.value**num); }}

     def operator<<(num : atomic<t>) : t   { lock(self) { return (value.value<<num.value.value); }}
     def operator<<(num : ulong) : t       { lock(self) { return (value.value<<num.value); }}
     def operator<<(num : long) : t        { lock(self) { return (value.value<<num.value); }}
     def operator<<(num : uint) : t        { lock(self) { return (value.value<<num.value); }}
     def operator<<(num : int) : t         { lock(self) { return (value.value<<num.value); }}
     def operator<<(num : ushort) : t      { lock(self) { return (value.value<<num.value); }}
     def operator<<(num : short) : t       { lock(self) { return (value.value<<num.value); }}
     def operator<<(num : byte) : t        { lock(self) { return (value.value<<num.value); }}
     def operator<<(num : uchar) : t       { lock(self) { return (value.value<<num.value); }}
     def operator<<(num : char) : t        { lock(self) { return (value.value<<num.value); }}
     def operator<<(num : bool) : t        { lock(self) { return (value.value<<num.value); }}
     def operator<<(num : double) : t      { lock(self) { return (value.value<<num.value); }}
     def operator<<(num : _uint8) : t      { lock(self) { return (value.value<<num); }}
     def operator<<(num : _uint16) : t     { lock(self) { return (value.value<<num); }}
     def operator<<(num : _uint32) : t     { lock(self) { return (value.value<<num); }}
     def operator<<(num : _uint64) : t     { lock(self) { return (value.value<<num); }}
     def operator<<(num : _int8) : t       { lock(self) { return (value.value<<num); }}
     def operator<<(num : _int16) : t      { lock(self) { return (value.value<<num); }}
     def operator<<(num : _int32) : t      { lock(self) { return (value.value<<num); }}
     def operator<<(num : _int64) : t      { lock(self) { return (value.value<<num); }}
     def operator<<(num : var) : t         { lock(self) { return (value.value<<num); }}

     def operator>>(num : atomic<t>) : t   { lock(self) { return (value.value>>num.value.value); }}
     def operator>>(num : ulong) : t       { lock(self) { return (value.value>>num.value); }}
     def operator>>(num : long) : t        { lock(self) { return (value.value>>num.value); }}
     def operator>>(num : uint) : t        { lock(self) { return (value.value>>num.value); }}
     def operator>>(num : int) : t         { lock(self) { return (value.value>>num.value); }}
     def operator>>(num : ushort) : t      { lock(self) { return (value.value>>num.value); }}
     def operator>>(num : short) : t       { lock(self) { return (value.value>>num.value); }}
     def operator>>(num : byte) : t        { lock(self) { return (value.value>>num.value); }}
     def operator>>(num : uchar) : t       { lock(self) { return (value.value>>num.value); }}
     def operator>>(num : char) : t        { lock(self) { return (value.value>>num.value); }}
     def operator>>(num : bool) : t        { lock(self) { return (value.value>>num.value); }}
     def operator>>(num : double) : t      { lock(self) { return (value.value>>num.value); }}
     def operator>>(num : _uint8) : t      { lock(self) { return (value.value>>num); }}
     def operator>>(num : _uint16) : t     { lock(self) { return (value.value>>num); }}
     def operator>>(num : _uint32) : t     { lock(self) { return (value.value>>num); }}
     def operator>>(num : _uint64) : t     { lock(self) { return (value.value>>num); }}
     def operator>>(num : _int8) : t       { lock(self) { return (value.value>>num); }}
     def operator>>(num : _int16) : t      { lock(self) { return (value.value>>num); }}
     def operator>>(num : _int32) : t      { lock(self) { return (value.value>>num); }}
     def operator>>(num : _int64) : t      { lock(self) { return (value.value>>num); }}
     def operator>>(num : var) : t         { lock(self) { return (value.value>>num); }}

     def operator^(num : atomic<t>) : t   { lock(self) { return (value.value^num.value.value); }}
     def operator^(num : ulong) : t       { lock(self) { return (value.value^num.value); }}
     def operator^(num : long) : t        { lock(self) { return (value.value^num.value); }}
     def operator^(num : uint) : t        { lock(self) { return (value.value^num.value); }}
     def operator^(num : int) : t         { lock(self) { return (value.value^num.value); }}
     def operator^(num : ushort) : t      { lock(self) { return (value.value^num.value); }}
     def operator^(num : short) : t       { lock(self) { return (value.value^num.value); }}
     def operator^(num : byte) : t        { lock(self) { return (value.value^num.value); }}
     def operator^(num : uchar) : t       { lock(self) { return (value.value^num.value); }}
     def operator^(num : char) : t        { lock(self) { return (value.value^num.value); }}
     def operator^(num : bool) : t        { lock(self) { return (value.value^num.value); }}
     def operator^(num : double) : t      { lock(self) { return (value.value^num.value); }}
     def operator^(num : _uint8) : t      { lock(self) { return (value.value^num); }}
     def operator^(num : _uint16) : t     { lock(self) { return (value.value^num); }}
     def operator^(num : _uint32) : t     { lock(self) { return (value.value^num); }}
     def operator^(num : _uint64) : t     { lock(self) { return (value.value^num); }}
     def operator^(num : _int8) : t       { lock(self) { return (value.value^num); }}
     def operator^(num : _int16) : t      { lock(self) { return (value.value^num); }}
     def operator^(num : _int32) : t      { lock(self) { return (value.value^num); }}
     def operator^(num : _int64) : t      { lock(self) { return (value.value^num); }}
     def operator^(num : var) : t         { lock(self) { return (value.value^num); }}

     def operator&(num : atomic<t>) : t   { lock(self) { return (value.value&num.value.value); }}
     def operator&(num : ulong) : t       { lock(self) { return (value.value&num.value); }}
     def operator&(num : long) : t        { lock(self) { return (value.value&num.value); }}
     def operator&(num : uint) : t        { lock(self) { return (value.value&num.value); }}
     def operator&(num : int) : t         { lock(self) { return (value.value&num.value); }}
     def operator&(num : ushort) : t      { lock(self) { return (value.value&num.value); }}
     def operator&(num : short) : t       { lock(self) { return (value.value&num.value); }}
     def operator&(num : byte) : t        { lock(self) { return (value.value&num.value); }}
     def operator&(num : uchar) : t       { lock(self) { return (value.value&num.value); }}
     def operator&(num : char) : t        { lock(self) { return (value.value&num.value); }}
     def operator&(num : bool) : t        { lock(self) { return (value.value&num.value); }}
     def operator&(num : double) : t      { lock(self) { return (value.value&num.value); }}
     def operator&(num : _uint8) : t      { lock(self) { return (value.value&num); }}
     def operator&(num : _uint16) : t     { lock(self) { return (value.value&num); }}
     def operator&(num : _uint32) : t     { lock(self) { return (value.value&num); }}
     def operator&(num : _uint64) : t     { lock(self) { return (value.value&num); }}
     def operator&(num : _int8) : t       { lock(self) { return (value.value&num); }}
     def operator&(num : _int16) : t      { lock(self) { return (value.value&num); }}
     def operator&(num : _int32) : t      { lock(self) { return (value.value&num); }}
     def operator&(num : _int64) : t      { lock(self) { return (value.value&num); }}
     def operator&(num : var) : t         { lock(self) { return (value.value&num); }}

     def operator|(num : atomic<t>) : t   { lock(self) { return (value.value|num.value.value); }}
     def operator|(num : ulong) : t       { lock(self) { return (value.value|num.value); }}
     def operator|(num : long) : t        { lock(self) { return (value.value|num.value); }}
     def operator|(num : uint) : t        { lock(self) { return (value.value|num.value); }}
     def operator|(num : int) : t         { lock(self) { return (value.value|num.value); }}
     def operator|(num : ushort) : t      { lock(self) { return (value.value|num.value); }}
     def operator|(num : short) : t       { lock(self) { return (value.value|num.value); }}
     def operator|(num : byte) : t        { lock(self) { return (value.value|num.value); }}
     def operator|(num : uchar) : t       { lock(self) { return (value.value|num.value); }}
     def operator|(num : char) : t        { lock(self) { return (value.value|num.value); }}
     def operator|(num : bool) : t        { lock(self) { return (value.value|num.value); }}
     def operator|(num : double) : t      { lock(self) { return (value.value|num.value); }}
     def operator|(num : _uint8) : t      { lock(self) { return (value.value|num); }}
     def operator|(num : _uint16) : t     { lock(self) { return (value.value|num); }}
     def operator|(num : _uint32) : t     { lock(self) { return (value.value|num); }}
     def operator|(num : _uint64) : t     { lock(self) { return (value.value|num); }}
     def operator|(num : _int8) : t       { lock(self) { return (value.value|num); }}
     def operator|(num : _int16) : t      { lock(self) { return (value.value|num); }}
     def operator|(num : _int32) : t      { lock(self) { return (value.value|num); }}
     def operator|(num : _int64) : t      { lock(self) { return (value.value|num); }}
     def operator|(num : var) : t         { lock(self) { return (value.value|num); }}

     def operator=(num : atomic<t>) : atomic<t> { lock(self) { value.value=num.value.value; return self; }}
     def operator=(num : ulong) : atomic<t>     { lock(self) { value.value=num.value; return self; }}
     def operator=(num : long) : atomic<t>      { lock(self) { value.value=num.value; return self; }}
     def operator=(num : uint) : atomic<t>      { lock(self) { value.value=num.value; return self; }}
     def operator=(num : int) : atomic<t>       { lock(self) { value.value=num.value; return self; }}
     def operator=(num : ushort) : atomic<t>    { lock(self) { value.value=num.value; return self; }}
     def operator=(num : short) : atomic<t>     { lock(self) { value.value=num.value; return self; }}
     def operator=(num : byte) : atomic<t>      { lock(self) { value.value=num.value; return self; }}
     def operator=(num : uchar) : atomic<t>     { lock(self) { value.value=num.value; return self; }}
     def operator=(num : char) : atomic<t>      { lock(self) { value.value=num.value; return self; }}
     def operator=(num : bool) : atomic<t>      { lock(self) { value.value=num.value; return self; }}
     def operator=(num : double) : atomic<t>    { lock(self) { value.value=num.value; return self; }}
     def operator=(num : _uint8) : atomic<t>    { lock(self) { value.value=num; return self; }}
     def operator=(num : _uint16) : atomic<t>   { lock(self) { value.value=num; return self; }}
     def operator=(num : _uint32) : atomic<t>   { lock(self) { value.value=num; return self; }}
     def operator=(num : _uint64) : atomic<t>   { lock(self) { value.value=num; return self; }}
     def operator=(num : _int8) : atomic<t>     { lock(self) { value.value=num; return self; }}
     def operator=(num : _int16) : atomic<t>    { lock(self) { value.value=num; return self; }}
     def operator=(num : _int32) : atomic<t>    { lock(self) { value.value=num; return self; }}
     def operator=(num : _int64) : atomic<t>    { lock(self) { value.value=num; return self; }}
     def operator=(num : var) : atomic<t>       { lock(self) { value.value=num; return self; }}

     def operator+=(num : atomic<t>) : atomic<t> { lock(self) { value.value+=num.value.value; return self; }}
     def operator+=(num : ulong) : atomic<t>     { lock(self) { value.value+=num.value; return self; }}
     def operator+=(num : long) : atomic<t>      { lock(self) { value.value+=num.value; return self; }}
     def operator+=(num : uint) : atomic<t>      { lock(self) { value.value+=num.value; return self; }}
     def operator+=(num : int) : atomic<t>       { lock(self) { value.value+=num.value; return self; }}
     def operator+=(num : ushort) : atomic<t>    { lock(self) { value.value+=num.value; return self; }}
     def operator+=(num : short) : atomic<t>     { lock(self) { value.value+=num.value; return self; }}
     def operator+=(num : byte) : atomic<t>      { lock(self) { value.value+=num.value; return self; }}
     def operator+=(num : uchar) : atomic<t>     { lock(self) { value.value+=num.value; return self; }}
     def operator+=(num : char) : atomic<t>      { lock(self) { value.value+=num.value; return self; }}
     def operator+=(num : bool) : atomic<t>      { lock(self) { value.value+=num.value; return self; }}
     def operator+=(num : double) : atomic<t>    { lock(self) { value.value+=num.value; return self; }}
     def operator+=(num : _uint8) : atomic<t>    { lock(self) { value.value+=num; return self; }}
     def operator+=(num : _uint16) : atomic<t>   { lock(self) { value.value+=num; return self; }}
     def operator+=(num : _uint32) : atomic<t>   { lock(self) { value.value+=num; return self; }}
     def operator+=(num : _uint64) : atomic<t>   { lock(self) { value.value+=num; return self; }}
     def operator+=(num : _int8) : atomic<t>     { lock(self) { value.value+=num; return self; }}
     def operator+=(num : _int16) : atomic<t>    { lock(self) { value.value+=num; return self; }}
     def operator+=(num : _int32) : atomic<t>    { lock(self) { value.value+=num; return self; }}
     def operator+=(num : _int64) : atomic<t>    { lock(self) { value.value+=num; return self; }}
     def operator+=(num : var) : atomic<t>       { lock(self) { value.value+=num; return self; }}

     def operator-=(num : atomic<t>) : atomic<t> { lock(self) { value.value-=num.value.value; return self; }}
     def operator-=(num : ulong) : atomic<t>     { lock(self) { value.value-=num.value; return self; }}
     def operator-=(num : long) : atomic<t>      { lock(self) { value.value-=num.value; return self; }}
     def operator-=(num : uint) : atomic<t>      { lock(self) { value.value-=num.value; return self; }}
     def operator-=(num : int) : atomic<t>       { lock(self) { value.value-=num.value; return self; }}
     def operator-=(num : ushort) : atomic<t>    { lock(self) { value.value-=num.value; return self; }}
     def operator-=(num : short) : atomic<t>     { lock(self) { value.value-=num.value; return self; }}
     def operator-=(num : byte) : atomic<t>      { lock(self) { value.value-=num.value; return self; }}
     def operator-=(num : uchar) : atomic<t>     { lock(self) { value.value-=num.value; return self; }}
     def operator-=(num : char) : atomic<t>      { lock(self) { value.value-=num.value; return self; }}
     def operator-=(num : bool) : atomic<t>      { lock(self) { value.value-=num.value; return self; }}
     def operator-=(num : double) : atomic<t>    { lock(self) { value.value-=num.value; return self; }}
     def operator-=(num : _uint8) : atomic<t>    { lock(self) { value.value-=num; return self; }}
     def operator-=(num : _uint16) : atomic<t>   { lock(self) { value.value-=num; return self; }}
     def operator-=(num : _uint32) : atomic<t>   { lock(self) { value.value-=num; return self; }}
     def operator-=(num : _uint64) : atomic<t>   { lock(self) { value.value-=num; return self; }}
     def operator-=(num : _int8) : atomic<t>     { lock(self) { value.value-=num; return self; }}
     def operator-=(num : _int16) : atomic<t>    { lock(self) { value.value-=num; return self; }}
     def operator-=(num : _int32) : atomic<t>    { lock(self) { value.value-=num; return self; }}
     def operator-=(num : _int64) : atomic<t>    { lock(self) { value.value-=num; return self; }}
     def operator-=(num : var) : atomic<t>       { lock(self) { value.value-=num; return self; }}

     def operator*=(num : atomic<t>) : atomic<t> { lock(self) { value.value*=num.value.value; return self; }}
     def operator*=(num : ulong) : atomic<t>     { lock(self) { value.value*=num.value; return self; }}
     def operator*=(num : long) : atomic<t>      { lock(self) { value.value*=num.value; return self; }}
     def operator*=(num : uint) : atomic<t>      { lock(self) { value.value*=num.value; return self; }}
     def operator*=(num : int) : atomic<t>       { lock(self) { value.value*=num.value; return self; }}
     def operator*=(num : ushort) : atomic<t>    { lock(self) { value.value*=num.value; return self; }}
     def operator*=(num : short) : atomic<t>     { lock(self) { value.value*=num.value; return self; }}
     def operator*=(num : byte) : atomic<t>      { lock(self) { value.value*=num.value; return self; }}
     def operator*=(num : uchar) : atomic<t>     { lock(self) { value.value*=num.value; return self; }}
     def operator*=(num : char) : atomic<t>      { lock(self) { value.value*=num.value; return self; }}
     def operator*=(num : bool) : atomic<t>      { lock(self) { value.value*=num.value; return self; }}
     def operator*=(num : double) : atomic<t>    { lock(self) { value.value*=num.value; return self; }}
     def operator*=(num : _uint8) : atomic<t>    { lock(self) { value.value*=num; return self; }}
     def operator*=(num : _uint16) : atomic<t>   { lock(self) { value.value*=num; return self; }}
     def operator*=(num : _uint32) : atomic<t>   { lock(self) { value.value*=num; return self; }}
     def operator*=(num : _uint64) : atomic<t>   { lock(self) { value.value*=num; return self; }}
     def operator*=(num : _int8) : atomic<t>     { lock(self) { value.value*=num; return self; }}
     def operator*=(num : _int16) : atomic<t>    { lock(self) { value.value*=num; return self; }}
     def operator*=(num : _int32) : atomic<t>    { lock(self) { value.value*=num; return self; }}
     def operator*=(num : _int64) : atomic<t>    { lock(self) { value.value*=num; return self; }}
     def operator*=(num : var) : atomic<t>       { lock(self) { value.value*=num; return self; }}

     def operator/=(num : atomic<t>) : atomic<t> { lock(self) { value.value/=num.value.value; return self; }}
     def operator/=(num : ulong) : atomic<t>     { lock(self) { value.value/=num.value; return self; }}
     def operator/=(num : long) : atomic<t>      { lock(self) { value.value/=num.value; return self; }}
     def operator/=(num : uint) : atomic<t>      { lock(self) { value.value/=num.value; return self; }}
     def operator/=(num : int) : atomic<t>       { lock(self) { value.value/=num.value; return self; }}
     def operator/=(num : ushort) : atomic<t>    { lock(self) { value.value/=num.value; return self; }}
     def operator/=(num : short) : atomic<t>     { lock(self) { value.value/=num.value; return self; }}
     def operator/=(num : byte) : atomic<t>      { lock(self) { value.value/=num.value; return self; }}
     def operator/=(num : uchar) : atomic<t>     { lock(self) { value.value/=num.value; return self; }}
     def operator/=(num : char) : atomic<t>      { lock(self) { value.value/=num.value; return self; }}
     def operator/=(num : bool) : atomic<t>      { lock(self) { value.value/=num.value; return self; }}
     def operator/=(num : double) : atomic<t>    { lock(self) { value.value/=num.value; return self; }}
     def operator/=(num : _uint8) : atomic<t>    { lock(self) { value.value/=num; return self; }}
     def operator/=(num : _uint16) : atomic<t>   { lock(self) { value.value/=num; return self; }}
     def operator/=(num : _uint32) : atomic<t>   { lock(self) { value.value/=num; return self; }}
     def operator/=(num : _uint64) : atomic<t>   { lock(self) { value.value/=num; return self; }}
     def operator/=(num : _int8) : atomic<t>     { lock(self) { value.value/=num; return self; }}
     def operator/=(num : _int16) : atomic<t>    { lock(self) { value.value/=num; return self; }}
     def operator/=(num : _int32) : atomic<t>    { lock(self) { value.value/=num; return self; }}
     def operator/=(num : _int64) : atomic<t>    { lock(self) { value.value/=num; return self; }}
     def operator/=(num : var) : atomic<t>       { lock(self) { value.value/=num; return self; }}

     def operator%=(num : atomic<t>) : atomic<t> { lock(self) { value.value%=num.value.value; return self; }}
     def operator%=(num : ulong) : atomic<t>     { lock(self) { value.value%=num.value; return self; }}
     def operator%=(num : long) : atomic<t>      { lock(self) { value.value%=num.value; return self; }}
     def operator%=(num : uint) : atomic<t>      { lock(self) { value.value%=num.value; return self; }}
     def operator%=(num : int) : atomic<t>       { lock(self) { value.value%=num.value; return self; }}
     def operator%=(num : ushort) : atomic<t>    { lock(self) { value.value%=num.value; return self; }}
     def operator%=(num : short) : atomic<t>     { lock(self) { value.value%=num.value; return self; }}
     def operator%=(num : byte) : atomic<t>      { lock(self) { value.value%=num.value; return self; }}
     def operator%=(num : uchar) : atomic<t>     { lock(self) { value.value%=num.value; return self; }}
     def operator%=(num : char) : atomic<t>      { lock(self) { value.value%=num.value; return self; }}
     def operator%=(num : bool) : atomic<t>      { lock(self) { value.value%=num.value; return self; }}
     def operator%=(num : double) : atomic<t>    { lock(self) { value.value%=num.value; return self; }}
     def operator%=(num : _uint8) : atomic<t>    { lock(self) { value.value%=num; return self; }}
     def operator%=(num : _uint16) : atomic<t>   { lock(self) { value.value%=num; return self; }}
     def operator%=(num : _uint32) : atomic<t>   { lock(self) { value.value%=num; return self; }}
     def operator%=(num : _uint64) : atomic<t>   { lock(self) { value.value%=num; return self; }}
     def operator%=(num : _int8) : atomic<t>     { lock(self) { value.value%=num; return self; }}
     def operator%=(num : _int16) : atomic<t>    { lock(self) { value.value%=num; return self; }}
     def operator%=(num : _int32) : atomic<t>    { lock(self) { value.value%=num; return self; }}
     def operator%=(num : _int64) : atomic<t>    { lock(self) { value.value%=num; return self; }}
     def operator%=(num : var) : atomic<t>       { lock(self) { value.value%=num; return self; }}

     def operator&=(num : atomic<t>) : atomic<t> { lock(self) { value.value&=num.value.value; return self; }}
     def operator&=(num : ulong) : atomic<t>     { lock(self) { value.value&=num.value; return self; }}
     def operator&=(num : long) : atomic<t>      { lock(self) { value.value&=num.value; return self; }}
     def operator&=(num : uint) : atomic<t>      { lock(self) { value.value&=num.value; return self; }}
     def operator&=(num : int) : atomic<t>       { lock(self) { value.value&=num.value; return self; }}
     def operator&=(num : ushort) : atomic<t>    { lock(self) { value.value&=num.value; return self; }}
     def operator&=(num : short) : atomic<t>     { lock(self) { value.value&=num.value; return self; }}
     def operator&=(num : byte) : atomic<t>      { lock(self) { value.value&=num.value; return self; }}
     def operator&=(num : uchar) : atomic<t>     { lock(self) { value.value&=num.value; return self; }}
     def operator&=(num : char) : atomic<t>      { lock(self) { value.value&=num.value; return self; }}
     def operator&=(num : bool) : atomic<t>      { lock(self) { value.value&=num.value; return self; }}
     def operator&=(num : double) : atomic<t>    { lock(self) { value.value&=num.value; return self; }}
     def operator&=(num : _uint8) : atomic<t>    { lock(self) { value.value&=num; return self; }}
     def operator&=(num : _uint16) : atomic<t>   { lock(self) { value.value&=num; return self; }}
     def operator&=(num : _uint32) : atomic<t>   { lock(self) { value.value&=num; return self; }}
     def operator&=(num : _uint64) : atomic<t>   { lock(self) { value.value&=num; return self; }}
     def operator&=(num : _int8) : atomic<t>     { lock(self) { value.value&=num; return self; }}
     def operator&=(num : _int16) : atomic<t>    { lock(self) { value.value&=num; return self; }}
     def operator&=(num : _int32) : atomic<t>    { lock(self) { value.value&=num; return self; }}
     def operator&=(num : _int64) : atomic<t>    { lock(self) { value.value&=num; return self; }}
     def operator&=(num : var) : atomic<t>       { lock(self) { value.value&=num; return self; }}

     def operator|=(num : atomic<t>) : atomic<t> { lock(self) { value.value|=num.value.value; return self; }}
     def operator|=(num : ulong) : atomic<t>     { lock(self) { value.value|=num.value; return self; }}
     def operator|=(num : long) : atomic<t>      { lock(self) { value.value|=num.value; return self; }}
     def operator|=(num : uint) : atomic<t>      { lock(self) { value.value|=num.value; return self; }}
     def operator|=(num : int) : atomic<t>       { lock(self) { value.value|=num.value; return self; }}
     def operator|=(num : ushort) : atomic<t>    { lock(self) { value.value|=num.value; return self; }}
     def operator|=(num : short) : atomic<t>     { lock(self) { value.value|=num.value; return self; }}
     def operator|=(num : byte) : atomic<t>      { lock(self) { value.value|=num.value; return self; }}
     def operator|=(num : uchar) : atomic<t>     { lock(self) { value.value|=num.value; return self; }}
     def operator|=(num : char) : atomic<t>      { lock(self) { value.value|=num.value; return self; }}
     def operator|=(num : bool) : atomic<t>      { lock(self) { value.value|=num.value; return self; }}
     def operator|=(num : double) : atomic<t>    { lock(self) { value.value|=num.value; return self; }}
     def operator|=(num : _uint8) : atomic<t>    { lock(self) { value.value|=num; return self; }}
     def operator|=(num : _uint16) : atomic<t>   { lock(self) { value.value|=num; return self; }}
     def operator|=(num : _uint32) : atomic<t>   { lock(self) { value.value|=num; return self; }}
     def operator|=(num : _uint64) : atomic<t>   { lock(self) { value.value|=num; return self; }}
     def operator|=(num : _int8) : atomic<t>     { lock(self) { value.value|=num; return self; }}
     def operator|=(num : _int16) : atomic<t>    { lock(self) { value.value|=num; return self; }}
     def operator|=(num : _int32) : atomic<t>    { lock(self) { value.value|=num; return self; }}
     def operator|=(num : _int64) : atomic<t>    { lock(self) { value.value|=num; return self; }}
     def operator|=(num : var) : atomic<t>       { lock(self) { value.value|=num; return self; }}

     def operator^=(num : atomic<t>) : atomic<t> { lock(self) { value.value^=num.value.value; return self; }}
     def operator^=(num : ulong) : atomic<t>     { lock(self) { value.value^=num.value; return self; }}
     def operator^=(num : long) : atomic<t>      { lock(self) { value.value^=num.value; return self; }}
     def operator^=(num : uint) : atomic<t>      { lock(self) { value.value^=num.value; return self; }}
     def operator^=(num : int) : atomic<t>       { lock(self) { value.value^=num.value; return self; }}
     def operator^=(num : ushort) : atomic<t>    { lock(self) { value.value^=num.value; return self; }}
     def operator^=(num : short) : atomic<t>     { lock(self) { value.value^=num.value; return self; }}
     def operator^=(num : byte) : atomic<t>      { lock(self) { value.value^=num.value; return self; }}
     def operator^=(num : uchar) : atomic<t>     { lock(self) { value.value^=num.value; return self; }}
     def operator^=(num : char) : atomic<t>      { lock(self) { value.value^=num.value; return self; }}
     def operator^=(num : bool) : atomic<t>      { lock(self) { value.value^=num.value; return self; }}
     def operator^=(num : double) : atomic<t>    { lock(self) { value.value^=num.value; return self; }}
     def operator^=(num : _uint8) : atomic<t>    { lock(self) { value.value^=num; return self; }}
     def operator^=(num : _uint16) : atomic<t>   { lock(self) { value.value^=num; return self; }}
     def operator^=(num : _uint32) : atomic<t>   { lock(self) { value.value^=num; return self; }}
     def operator^=(num : _uint64) : atomic<t>   { lock(self) { value.value^=num; return self; }}
     def operator^=(num : _int8) : atomic<t>     { lock(self) { value.value^=num; return self; }}
     def operator^=(num : _int16) : atomic<t>    { lock(self) { value.value^=num; return self; }}
     def operator^=(num : _int32) : atomic<t>    { lock(self) { value.value^=num; return self; }}
     def operator^=(num : _int64) : atomic<t>    { lock(self) { value.value^=num; return self; }}
     def operator^=(num : var) : atomic<t>       { lock(self) { value.value^=num; return self; }}

    def operator!() : bool { lock(self) { return (!value.value); }}
    def operator++() : t { lock(self) { return new t(++value.value); }}
    def operator++(num : var) : t { lock(self) { return new t(value.value++); }}
    def operator--() : t { lock(self) { return new t(--value.value); }}
    def operator--(num : var) : t { lock(self) { return new t(value.value--); }}
}