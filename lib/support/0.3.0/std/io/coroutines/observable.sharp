mod std.io.coroutines;

import (
    std.io
)

public class observable<t> {

	public observable(initial : t) {
		data = initial;
	}

	public def post(data : t) {
		self->data = data;
		notify_all();
	}

	public def observe(on_update: (observable<t>)()) {
	    observers.add(update_fun);
	}

	private def notify_all() {
        foreach(obs in observers) {
            try {
                obs(self);
            } catch(cancellation_exception) {
                observers.remove(obs, {it, it2 -> return it == it2; });
            } catch(e: error) {
                observers.remove(obs, {it, it2 -> return it == it2; });
                throw e;
            }
        }
	}

	public def stop_listening() {
	   throw new cancellation_exception();
	}

	public def get_data() : t = data;

	protected data : t;
	protected observers := new synced_list<(observable<t>)()>();
}

