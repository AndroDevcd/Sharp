Object Dump file:
################################

func:@0 [internal#Runtime.newClass] in file: tests/Helloworld.sharp:6:25: note:  
		    private def newClass() {
		                        ^


newClass:
[0x0] 0:	movl 1
[0x1] 1:	new_class @0 // internal#Runtime
[0x2] 2:	call @18 // <internal#Runtime.Runtime()>
[0x3] 3:	movl 1
[0x4] 4:	popobj
[0x5] 5:	ret

func:@1 [internal#Runtime.newClassSetValue] in file: tests/Helloworld.sharp:10:33: note:  
		    private def newClassSetValue() {
		                                ^


newClassSetValue:
[0x0] 0:	movl 1
[0x1] 1:	new_class @0 // internal#Runtime
[0x2] 2:	call @18 // <internal#Runtime.Runtime()>
[0x3] 3:	movl 1
[0x4] 4:	popobj
[0x5] 5:	movi #9, ebx
[0x7] 7:	rstore ebx
[0x8] 8:	movl 1
[0x9] 9:	movn #0
[0xa] 10:	movi #0, adx
[0xc] 12:	loadval ecx
[0xd] 13:	rmov adx, ecx
[0xe] 14:	ret

func:@2 [internal#Runtime.getClassSerial] in file: tests/Helloworld.sharp:15:31: note:  
		    private def getClassSerial() {
		                              ^


getClassSerial:
[0x0] 0:	istorel 0, fp+1
[0x2] 2:	ret

func:@3 [internal#Runtime.getSelf] in file: tests/Helloworld.sharp:19:24: note:  
		    private def getSelf() : Runtime {
		                       ^


getSelf:
[0x0] 0:	movl 0
[0x1] 1:	returnobj
[0x2] 2:	ret

func:@4 [internal#Runtime.foo] in file: tests/Helloworld.sharp:24:20: note:  
		    private def foo(var i) : var {
		                   ^


foo:
[0x0] 0:	movi #1, ebx
[0x2] 2:	returnval ebx
[0x3] 3:	ret

func:@5 [internal#Runtime.foo2] in file: tests/Helloworld.sharp:29:21: note:  
		    private def foo2(Runtime r, var i) {
		                    ^


foo2:
[0x0] 0:	ret

func:@6 [internal#Runtime.callMethods] in file: tests/Helloworld.sharp:33:28: note:  
		    private def callMethods() {
		                           ^


callMethods:
[0x0] 0:	movl 0
[0x1] 1:	pushobj
[0x2] 2:	call @3 // <internal#Runtime.getSelf()>
[0x3] 3:	movi #9, ebx
[0x5] 5:	rstore ebx
[0x6] 6:	call @4 // <internal#Runtime.foo(var)>
[0x7] 7:	pop
[0x8] 8:	ret

func:@7 [internal#Runtime.complexCallMethods] in file: tests/Helloworld.sharp:37:35: note:  
		    private def complexCallMethods() {
		                                  ^


complexCallMethods:
[0x0] 0:	movl 0
[0x1] 1:	pushobj
[0x2] 2:	call @3 // <internal#Runtime.getSelf()>
[0x3] 3:	movl 0
[0x4] 4:	pushobj
[0x5] 5:	call @3 // <internal#Runtime.getSelf()>
[0x6] 6:	movi #99, ebx
[0x8] 8:	rstore ebx
[0x9] 9:	call @5 // <internal#Runtime.foo2(internal#Runtime,var)>
[0xa] 10:	ret

func:@8 [internal#Runtime.forLoop] in file: tests/Helloworld.sharp:41:24: note:  
		    private def forLoop() {
		                       ^


forLoop:
[0x0] 0:	istorel 0, fp+1
[0x2] 2:	movi #10, ebx
[0x4] 4:	movr egx, ebx
[0x5] 5:	loadl ebx, fp+1
[0x6] 6:	lt ebx, egx
[0x7] 7:	movr ebx, cmt
[0x8] 8:	movr cmt, ebx
[0x9] 9:	movi #24, adx
[0xb] 11:	ifne
[0xc] 12:	movl 0
[0xd] 13:	pushobj
[0xe] 14:	movi #9, ebx
[0x10] 16:	rstore ebx
[0x11] 17:	call @4 // <internal#Runtime.foo(var)>
[0x12] 18:	pop
[0x13] 19:	loadl ebx, fp+1
[0x14] 20:	movi #1, ecx
[0x16] 22:	addl ecx, @1
[0x17] 23:	goto @2
[0x18] 24:	ret

func:@9 [internal#Runtime.forEach] in file: tests/Helloworld.sharp:47:24: note:  
		    private def forEach() {
		                       ^


forEach:
[0x0] 0:	movl 1
[0x1] 1:	movi #9, ebx
[0x3] 3:	newarry ebx
[0x4] 4:	movl 1
[0x5] 5:	popobj
[0x6] 6:	movi #0, ebx
[0x8] 8:	rstore ebx
[0x9] 9:	movl 1
[0xa] 10:	smov ebx, sp+0
[0xb] 11:	sizeof egx
[0xc] 12:	lt ebx, egx
[0xd] 13:	movi #25, adx
[0xf] 15:	ifne
[0x10] 16:	iaload_2 ebx, ebx
[0x11] 17:	smovr_2 ebx, fp+2
[0x12] 18:	istorel 0, fp+2
[0x14] 20:	goto @25
[0x15] 21:	smov ebx, sp+0
[0x16] 22:	inc ebx
[0x17] 23:	smovr ebx, sp+0
[0x18] 24:	goto @9
[0x19] 25:	pop
[0x1a] 26:	ret

func:@10 [internal#Runtime.ifStatement] in file: tests/Helloworld.sharp:55:28: note:  
		    private def ifStatement() {
		                           ^


ifStatement:
[0x0] 0:	istorel 9, fp+1
[0x2] 2:	istorel 0, fp+2
[0x4] 4:	movi #1, ebx
[0x6] 6:	movr egx, ebx
[0x7] 7:	loadl ebx, fp+1
[0x8] 8:	gte ebx, egx
[0x9] 9:	movr ebx, cmt
[0xa] 10:	movr cmt, ebx
[0xb] 11:	loadpc adx
[0xc] 12:	iadd adx, #5
[0xd] 13:	ifne
[0xe] 14:	nop
[0xf] 15:	goto @42
[0x10] 16:	movl 0
[0x11] 17:	pushobj
[0x12] 18:	call @3 // <internal#Runtime.getSelf()>
[0x13] 19:	movsl #0
[0x14] 20:	movn #0
[0x15] 21:	movi #0, adx
[0x17] 23:	iaload_2 ebx, adx
[0x18] 24:	rstore ebx
[0x19] 25:	movl 0
[0x1a] 26:	pushobj
[0x1b] 27:	movi #9, ebx
[0x1d] 29:	rstore ebx
[0x1e] 30:	call @4 // <internal#Runtime.foo(var)>
[0x1f] 31:	loadval egx
[0x20] 32:	loadval ebx
[0x21] 33:	test ebx, egx
[0x22] 34:	movr ebx, cmt
[0x23] 35:	movr cmt, ebx
[0x24] 36:	loadpc adx
[0x25] 37:	iadd adx, #5
[0x26] 38:	ifne
[0x27] 39:	nop
[0x28] 40:	goto @42
[0x29] 41:	nop
[0x2a] 42:	ret

func:@11 [internal#Runtime.whileStatement] in file: tests/Helloworld.sharp:71:31: note:  
		    private def whileStatement() {
		                              ^


whileStatement:
[0x0] 0:	istorel 9, fp+1
[0x2] 2:	movi #0, ebx
[0x4] 4:	movr egx, ebx
[0x5] 5:	loadl ebx, fp+1
[0x6] 6:	gte ebx, egx
[0x7] 7:	movr ebx, cmt
[0x8] 8:	movr cmt, ebx
[0x9] 9:	movi #17, adx
[0xb] 11:	ifne
[0xc] 12:	loadl ebx, fp+1
[0xd] 13:	movi #1, ecx
[0xf] 15:	subl ecx, @1
[0x10] 16:	goto @2
[0x11] 17:	ret

func:@12 [internal#Runtime.doWhileStatement] in file: tests/Helloworld.sharp:79:33: note:  
		    private def doWhileStatement() {
		                                ^


doWhileStatement:
[0x0] 0:	istorel 9, fp+1
[0x2] 2:	goto @7
[0x3] 3:	loadl ebx, fp+1
[0x4] 4:	movi #1, ecx
[0x6] 6:	subl ecx, @1
[0x7] 7:	loadl ebx, fp+1
[0x8] 8:	movi #1, ecx
[0xa] 10:	subl ecx, @1
[0xb] 11:	movi #0, ebx
[0xd] 13:	movr egx, ebx
[0xe] 14:	loadl ebx, fp+1
[0xf] 15:	gte ebx, egx
[0x10] 16:	movr ebx, cmt
[0x11] 17:	movr cmt, ebx
[0x12] 18:	movi #3, adx
[0x14] 20:	ife
[0x15] 21:	ret

func:@13 [internal#Runtime.tryCatchStatement] in file: tests/Helloworld.sharp:93:34: note:  
		    private def tryCatchStatement() {
		                                 ^


tryCatchStatement:
[0x0] 0:	new_class @1 // std.err#Exception
[0x1] 1:	call @19 // <std.err#Exception.Exception()>
[0x2] 2:	throw 
[0x3] 3:	goto @14
[0x4] 4:	istorel 9, fp+2
[0x6] 6:	goto @14
[0x7] 7:	movl 0
[0x8] 8:	pushobj
[0x9] 9:	call @3 // <internal#Runtime.getSelf()>
[0xa] 10:	pop
[0xb] 11:	goto @14
[0xc] 12:	nop
[0xd] 13:	nop
[0xe] 14:	ret

func:@14 [internal#Runtime.newClassArraySetValue] in file: tests/Helloworld.sharp:103:38: note:  
		    private def newClassArraySetValue() {
		                                     ^


newClassArraySetValue:
[0x0] 0:	movl 1
[0x1] 1:	movi #9, ebx
[0x3] 3:	new_classarray ebx  // internal#Runtime[]
[0x4] 4:	movl 1
[0x5] 5:	popobj
[0x6] 6:	new_class @0 // internal#Runtime
[0x7] 7:	call @18 // <internal#Runtime.Runtime()>
[0x8] 8:	movl 1
[0x9] 9:	pushobj
[0xa] 10:	movi #0, ebx
[0xc] 12:	movsl #0
[0xd] 13:	chklen ebx
[0xe] 14:	movnd ebx
[0xf] 15:	pop
[0x10] 16:	popobj
[0x11] 17:	ret

func:@15 [internal#Runtime.newArrayComplex2] in file: tests/Helloworld.sharp:108:33: note:  
		    private def newArrayComplex2() {
		                                ^


newArrayComplex2:
[0x0] 0:	movl 1
[0x1] 1:	movi #3, ebx
[0x3] 3:	newarry ebx
[0x4] 4:	movsl #0
[0x5] 5:	movi #1, ebx
[0x7] 7:	movi #0, adx
[0x9] 9:	rmov adx, ebx
[0xa] 10:	movsl #0
[0xb] 11:	movi #2, ebx
[0xd] 13:	movi #1, adx
[0xf] 15:	rmov adx, ebx
[0x10] 16:	movsl #0
[0x11] 17:	movi #3, ebx
[0x13] 19:	movi #2, adx
[0x15] 21:	rmov adx, ebx
[0x16] 22:	movl 1
[0x17] 23:	popobj
[0x18] 24:	ret

func:@16 [internal#Runtime.newArrayComplex3] in file: tests/Helloworld.sharp:112:33: note:  
		    private def newArrayComplex3() {
		                                ^


newArrayComplex3:
[0x0] 0:	movl 1
[0x1] 1:	movi #2, ebx
[0x3] 3:	newobj_arry ebx
[0x4] 4:	new_class @0 // internal#Runtime
[0x5] 5:	call @18 // <internal#Runtime.Runtime()>
[0x6] 6:	movsl #-1
[0x7] 7:	movn #1
[0x8] 8:	popobj
[0x9] 9:	movl 1
[0xa] 10:	popobj
[0xb] 11:	ret

func:@17 [internal#Runtime.__srt_init_] in file: tests/Helloworld.sharp:116:34: note:  
		    public static def __srt_init_(object[] args) : var {
		                                 ^


__srt_init_:
[0x0] 0:	movi #0, ebx
[0x2] 2:	returnval ebx
[0x3] 3:	ret

func:@18 [internal#Runtime.Runtime] in file: tests/Helloworld.sharp:3:6: note:  
		class Runtime {
		     ^


Runtime:
[0x0] 0:	movl 0
[0x1] 1:	returnobj
[0x2] 2:	ret

func:@19 [std.err#Exception.Exception] in file: tests/Exception.sharp:6:6: note:  
		class Exception base Throwable {
		     ^


Exception:
[0x0] 0:	movl 0
[0x1] 1:	returnobj
[0x2] 2:	ret

func:@20 [std.err#Throwable.Throwable] in file: tests/Exception.sharp:10:6: note:  
		class Throwable {
		     ^


Throwable:
[0x0] 0:	movl 0
[0x1] 1:	returnobj
[0x2] 2:	ret

