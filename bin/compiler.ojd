Object Dump file:
################################

Optimizer: Did optimize 0 result -> 0


@0 std#__SRT_Global fields: 1 methods: 42
@1 std.io#__SRT_Global fields: 0 methods: 6
@2 std.kernel#__SRT_Global fields: 0 methods: 13
@3 std.kernel.vm#__SRT_Global fields: 0 methods: 6
@4 std.os#__SRT_Global fields: 0 methods: 18
@5 std.os.gui#__SRT_Global fields: 1 methods: 34
@6 app#__SRT_Global fields: 12 methods: 7
@7 std#bool fields: 2 methods: 37
@8 std#char fields: 2 methods: 53
@9 std#Enum fields: 3 methods: 15
@10 std#Exception fields: 2 methods: 13
@11 std#IllegalArgumentException fields: 2 methods: 16
@12 std#IllegalStateException fields: 2 methods: 16
@13 std#IndexOutOfBoundsException fields: 2 methods: 16
@14 std#int fields: 2 methods: 45
@15 std#integer fields: 2 methods: 13
@16 std#InvalidOperationException fields: 2 methods: 16
@17 std.io#File fields: 4 methods: 44
@18 std.io#FileSystem fields: 11 methods: 21
@19 std.io#IOException fields: 2 methods: 16
@20 std.io#IOStream fields: 6 methods: 22
@21 std.io#IOStream.StreamReader fields: 6 methods: 22
@22 std.io#Thread fields: 14 methods: 31
@23 std.io#UnixFileSystem fields: 12 methods: 26
@24 std.io#WinFileSystem fields: 12 methods: 26
@25 std.kernel#CListObj fields: 2 methods: 10
@26 std.kernel#CListVar fields: 2 methods: 10
@27 std.kernel#CMath fields: 0 methods: 28
@28 std.kernel#ConsoleHandler fields: 0 methods: 12
@29 std.kernel#Manifest fields: 4 methods: 8
@30 std.kernel#Runtime fields: 5 methods: 27
@31 std.kernel.vm#ThreadCore fields: 0 methods: 18
@32 std.kernel#Time fields: 0 methods: 15
@33 std#long fields: 3 methods: 46
@34 std#Math fields: 2 methods: 27
@35 std#NullptrException fields: 2 methods: 16
@36 std#Object fields: 0 methods: 5
@37 std#ObjList fields: 3 methods: 25
@38 std.os.gui#Message fields: 3 methods: 6
@39 std.os.gui#Polygon fields: 1 methods: 7
@40 std.os.gui#Point fields: 2 methods: 6
@41 std.os.gui#Window fields: 5 methods: 7
@42 std#Printable fields: 0 methods: 6
@43 std#RuntimeErr fields: 2 methods: 16
@44 std#short fields: 2 methods: 46
@45 std#strbuf fields: 7 methods: 46
@46 std#string fields: 4 methods: 47
@47 std#Throwable fields: 2 methods: 10
@48 std#uchar fields: 3 methods: 46
@49 std#uint fields: 3 methods: 46
@50 std#ulong fields: 3 methods: 46
@51 std#Unique fields: 0 methods: 6
@52 std#ushort fields: 3 methods: 46
@53 std#VarList fields: 3 methods: 25
@54 app#ErrorManager fields: 15 methods: 28
@55 app#ParseError fields: 5 methods: 9
@56 app#Ast fields: 6 methods: 28
@57 app#Parser fields: 45 methods: 24
@58 app#Token fields: 5 methods: 21
@59 app#Tokenizer fields: 12 methods: 33
@60 app#Options fields: 15 methods: 6
@61 app#Platform fields: 2 methods: 6
@62 app#Runtime fields: 2 methods: 16
@63 std.kernel#TimeUnit fields: 6 methods: 16
@64 std.os.gui#_GUI fields: 12 methods: 16
@65 std.os.gui#_PAINT fields: 18 methods: 16
@66 std.os.gui#PaintStyle fields: 10 methods: 16
@67 std#PayloadClass fields: 6 methods: 16
@68 app#CompilerError fields: 32 methods: 16
@69 app#AstType fields: 91 methods: 16
@70 app#TokenId fields: 18 methods: 16
@71 app#TokenType fields: 56 methods: 16
@72 app#Optimization fields: 6 methods: 16
@73 std#ArrayList<std#string> fields: 5 methods: 26
@74 std#ArrayList<app#ParseError> fields: 5 methods: 26
@75 std#ArrayList<std.io#Thread> fields: 5 methods: 26
@76 std#Map<app#CompilerError,std#string> fields: 2 methods: 14
@77 std#ArrayList<app#CompilerError> fields: 5 methods: 26
@78 std#ArrayList<std#ArrayList<app#ParseError>> fields: 5 methods: 26
@79 std#ArrayList<app#Token> fields: 5 methods: 26
@80 std#ArrayList<app#Ast> fields: 5 methods: 26
@81 std#Dictionary<var,app#Ast> fields: 2 methods: 21
@82 std#ArrayList<var> fields: 5 methods: 26

"SECONDS"
"MILLISECONDS"
"MICROSECONDS"
"gui_quit"
"gui_paint"
"gui_set_ctx"
"gui_ctx"
"gui_dwnd"
"gui_show"
"gui_upd"
"gui_dsp"
"gui_msg"
"pt_text"
"pt_start"
"pt_end"
"pt_move"
"pt_line"
"pt_rect"
"pt_fillrect"
"pt_ellipsize"
"pt_polygon"
"pt_createPen"
"pt_selectPen"
"pt_deletePen"
"pt_createBrush"
"pt_selectBrush"
"pt_deleteBrush"
"PS_SOLID"
"PS_DASH"
"PS_DOT"
"PS_DASHDOT"
"PS_DASHDOTDOT"
"PS_NULL"
"PS_INSIDEFRAME"
"PAYLOAD_SMALL"
"PAYLOAD_MEDIUM"
"PAYLOAD_LARGE"
"UNEXPECTED_SYMBOL"
"ILLEGAL_NUMBER_FORMAT"
"UNEXPECTED_EOF"
"EXPECTED_STRING_LITERAL_EOF"
"ILLEGAL_STRING_FORMAT"
"EXPECTED_CHAR_LITERAL_EOF"
"ILLEGAL_CHAR_LITERAL_FORMAT"
"GENERIC"
"ILLEGAL_ACCESS_DECLARATION"
"ILLEGAL_BRACKET_MISMATCH"
"MISSING_BRACKET"
"INVALID_ACCESS_SPECIFIER"
"MULTIPLE_DEFINITION"
"PREVIOUSLY_DEFINED"
"DUPLICATE_CLASS"
"REDUNDANT_TOKEN"
"INTERNAL_ERROR"
"COULD_NOT_RESOLVE"
"EXPECTED_REFRENCE_OF_TYPE"
"INVALID_CAST"
"REDUNDANT_CAST"
"REDUNDANT_IMPORT"
"UNEXPECTED_TOKEN"
"INVALID_ACCESS"
"SYMBOL_ALREADY_DEFINED"
"INVALID_PARAM"
"INCOMPATIBLE_TYPES"
"DUPlICATE_DECLIRATION"
"NO_ERR"
"Class_Decl"
"Generic_Class_Decl"
"Generic_Interface_Decl"
"Interface_Decl"
"Import_Decl"
"Module_Decl"
"Method_Decl"
"Enum_Decl"
"Delegate_Post_Decl"
"Delegate_Decl"
"Constructor_Decl"
"Label_Decl"
"Operator_Decl"
"Var_Decl"
"Switch_Declarator"
"Value"
"Value_List"
"Utype_Arg_List"
"Utype_Arg_List_Opt"
"Reference_Identifier_List"
"Utype_List"
"Identifier_List"
"Enum_Identifier_List"
"Vector_Array"
"Utype_Arg"
"Utype_Arg_Opt"
"Expression"
"Array_Expression"
"Primary_Expression"
"Dotnotation_Call_Expr"
"Utype"
"Block"
"Switch_Block"
"Finally_Block"
"Assembly_Block"
"Catch_Clause"
"Method_Return_Type"
"Return_Stmnt"
"Statement"
"If_Statement"
"Switch_Statement"
"Elseif_Statement"
"Else_Statement"
"Lock_Statement"
"Trycatch_Statement"
"Throw_Statement"
"Continue_Statement"
"Break_Statement"
"Goto_Statement"
"While_Statement"
"Do_While_Statement"
"Assembly_Statement"
"For_Statement"
"For_Expression_Cond"
"For_Expression_Iter"
"Foreach_Statement"
"Type_Identifier"
"Enum_Identifier"
"Func_Prototype"
"Reference_Pointer"
"ModuleName"
"Literal"
"Literal_E"
"Utype_Class_E"
"Dot_Not_E"
"Self_E"
"Base_E"
"Null_E"
"New_E"
"Not_E"
"Post_Inc_E"
"Arry_E"
"Dot_Fn_E"
"Cast_E"
"Pre_Inc_E"
"Paren_E"
"Vect_E"
"Add_E"
"Mult_E"
"Shift_E"
"Less_E"
"Equal_E"
"And_E"
"Ques_E"
"Assign_E"
"Sizeof_E"
"Free_E"
"None"
"IDENTIFIER"
"NATIVE_TYPE"
"TYPE_IDENTIFIER"
"INTEGER_LITERAL"
"HEX_LITERAL"
"MODULENAME"
"STRING_LITERAL"
"CHAR_LITERAL"
"LITERAL"
"VALUE"
"ACCESSTYPE"
"SINGLELINE_COMMENT"
"RETURN_STATEMENT"
"SINGLE"
"NOENTITY"
"NUMBER"
"LETTER"
"UNDERSCORE"
"LEFT_PAREN"
"RIGHT_PAREN"
"LEFT_CURLY"
"RIGHT_CURLY"
"HASH"
"DOT"
"PLUS"
"MINUS"
"MULT"
"DIV"
"MOD"
"COLON"
"SEMICOLON"
"DUB_QUOTE"
"SING_QUOTE"
"COMMA"
"NEWLINE"
"LTE"
"GTE"
"EQEQ"
"PLUSEQ"
"MINUSEQ"
"MULTEQ"
"DIVEQ"
"ANDEQ"
"OREQ"
"XOREQ"
"MODEQ"
"NOTEQ"
"SHL"
"SHR"
"LESSTHAN"
"GREATERTHAN"
"AND"
"ANDAND"
"OR"
"OROR"
"XOR"
"NOT"
"EQUALS"
"INFER"
"LEFT_BRACE"
"RIGHT_BRACE"
"QUESMK"
"PTR"
"INC"
"DEC"
"DOLLAR"
"EOF"
"NONE"
"BASIC"
"HIGH_PERFORMANCE"
"Index: "
", size: "
""
"cannot delete key from empty list"
"mod"
"true"
"false"
"class"
"static"
"protected"
"pro"
"private"
"def"
"import"
"return"
"self"
"const"
"public"
"new"
"null"
"operator"
"base"
"if"
"while"
"do"
"try"
"catch"
"finally"
"throw"
"continue"
"goto"
"break"
"else"
"object"
"asm"
"for"
"foreach"
"var"
"sizeof"
"_int8"
"_int16"
"_int32"
"_int64"
"_uint8"
"_uint16"
"_uint32"
"_uint64"
"delegate"
"interface"
"lock"
"enum"
"switch"
"default"
"volatile"
"fn"
"case"
"out"
"1.0"
"sharpc"
"0.3.0"
"file path cannot be null"
"Negative time"
"file could not be resolved: "
"illegal read on IOStream"
"illegal write on IOStream"
"invalid thread priority "
"main"
"win"
"posix"
"\nProgram finished with exit code "
"Index out of bounds exception"
"Index out of bounds Array: size "
" at index pos "
"invalid precision: "
"stopIndex: "
" cannot be less than startIndex: "
"illegal char in string: "
":"
": warning S60"
":  "
"\n"
": error S60"
"\t"
"\n\t"
" "
"^\n"
"End of File"
"unexpected symbol"
"illegal number format mismatch"
"unexpected end of file"
"expected string literal before end ..."
"illegal string format"
"expected character literal before e..."
"illegal character literal format"
"illegal specification of access spe..."
"illegal symbol mismatch, unexpected..."
"missing bracket"
"invalid access specifier"
"multiple definition of"
"duplicate class:"
"redundant token"
"internal runtime error"
"could not resolve symbol"
"expected refrence of type"
"invalid cAst of type"
"redundant cAst of type"
"redundant self import of module"
"unexpected token"
"invalid access of"
"invalid param of type"
"incompatible types"
"duplicate declaration of"
"null Ast"
"null token"
"Ast: "
" ;"
","
"tokens:\n"
"null\n"
"children: ("
")\n"
"tree.txt"
"`;`"
"expected identifier"
"expected "
"expected `"
"`"
": "
" `"
"errors "
"eof"
", a chacacter literal cannot contai..."
", text preceding `\` must be alpha,..."
", character literals cannot be empt..."
" expected at least 1 letter in iden..."
", unexpected or illegally placed un..."
", double decimal"
", missing exponent prefix"
", expected `+`, `-`, or digit"
", duplicate exponent sign postfix"
", expected `"` before end of line"
", text preceding `\` must be alpha,..."
"-a"
"-c"
"-o"
"output file required after option `..."
"-L"
"library directory required after op..."
"-V"
"-O"
"-O1"
"-O2"
"-h"
"-?"
"--hw"
"-R"
"-release"
"-s"
"-magic"
"-dbg"
"-showversion"
"-target"
"file version required after option ..."
"alpha"
"unknown platform target "
"-w"
"-waccess"
"-wambig"
"-wdecl"
"-wmain"
"-wcast"
"-winit"
"-v"
"file version required after option ..."
"-werror"
"-errlmt"
"cannot set the max errors allowed h..."
"cannot have an error limit of 0 "
"invalid error limit set "
"-asmd"
"-asmd:"
"invalid option `"
"`, try bootstrap -h"
"C:\Sharp\include"
"/usr/include/sharp/"
"warning: could not find support lib..."
"`, do you have them installed?"
"could not access library files in p..."
"no_file"
"file `"
"` doesnt exist!"
".sharp"
"` is not a sharp file!"
"invalid platform target `"
"sharpc:  error: "
"Usage: sharpc "
"{OPTIONS} SOURCE FILE(S)"
"Source file must have a .sharp exti..."
"[-options]\n\n    -V                p..."
"    -showversion      print compile..."
"    -o<file>          set the outpu..."
"    -c                compile only ..."
"    -a                enable aggres..."
"    -s                strip debuggi..."
"    -O -O1            optimize code..."
"    -O2               optimize code..."
"    -L<path>          library direc..."
"    -w                disable all w..."
"    -errlmt<count>    set max error..."
"    -v<version>       set the appli..."
"    -unsafe -u        allow unsafe ..."
"    -objdmp           create dump f..."
"    -target           target the sp..."
"    -release -r       generate a re..."
"    --asmd            display assem..."
"    --hw              display help ..."
"    --h -?            display this ..."
"Usage: sharpc {OPTIONS} SOURCE FILE..."
"Please note that not all warnings w..."
"[-options]\n\n    -w                d..."
"    -winit            disable class..."
"    -waccess          disable acces..."
"    -wambig           disable ambig..."
"    -wdecl            disable objec..."
"    -wmain            disable multi..."
"    -wcast            disable type ..."
"    -werror           enable warnin..."
"    --hw              display this ..."
"Please note that default output for..."
"All compiler options for `-asmd` ca..."
"[-options]\n\n    -asmd             d..."
"    -asmd:d           de-mangle sou..."
"    -asmd:s           reformat code..."
"    -asmd:i           display debug..."
"    --asmd            display this ..."


func:@0 [std#__SRT_Global.__SRT_Global] in file: :0:0: note:  
		
		^


__SRT_Global:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@1 [std.io#__SRT_Global.__SRT_Global] in file: :0:0: note:  
		
		^


__SRT_Global:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@2 [std.kernel#__SRT_Global.__SRT_Global] in file: :0:0: note:  
		
		^


__SRT_Global:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@3 [std.kernel.vm#__SRT_Global.__SRT_Global] in file: :0:0: note:  
		
		^


__SRT_Global:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@4 [std.os#__SRT_Global.__SRT_Global] in file: :0:0: note:  
		
		^


__SRT_Global:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@5 [std.os.gui#__SRT_Global.__SRT_Global] in file: :0:0: note:  
		
		^


__SRT_Global:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@6 [app#__SRT_Global.__SRT_Global] in file: :0:0: note:  
		
		^


__SRT_Global:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@7 [std#bool.bool] in file: lib/support//0.2.587//bool.sharp:4:16: note:  
		    public bool(var num) {
		               ^


bool:
line: 4 [0x0] 0:	loadl ebx, fp+1
        [0x1] 1:	movr cmt, ebx
        [0x2] 2:	loadpc_2 adx, pc+8 // adx = 10
        [0x3] 3:	ifne
        [0x4] 4:	movi #1, ebx
        [0x6] 6:	rstore ebx
        [0x7] 7:	movi #1, cmt
        [0x9] 9:	skpe 4 // pc = 13
        [0xa] 10:	movi #0, ebx
        [0xc] 12:	rstore ebx
        [0xd] 13:	nop
        [0xe] 14:	movl 0
        [0xf] 15:	movn #0
        [0x10] 16:	movi #0, adx
        [0x12] 18:	loadval ecx
        [0x13] 19:	rmov adx, ecx
        [0x14] 20:	movl 0
        [0x15] 21:	returnobj
        [0x16] 22:	ret

func:@8 [std#bool.bool] in file: lib/support//0.2.587//bool.sharp:8:16: note:  
		    public bool(integer num) {
		               ^


bool:
line: 8 [0x0] 0:	movl 1
        [0x1] 1:	movn #0
        [0x2] 2:	movi #0, adx
        [0x4] 4:	chklen adx
        [0x5] 5:	iaload_2 cmt, adx
        [0x6] 6:	loadpc_2 adx, pc+8 // adx = 14
        [0x7] 7:	ifne
        [0x8] 8:	movi #1, ebx
        [0xa] 10:	rstore ebx
        [0xb] 11:	movi #1, cmt
        [0xd] 13:	skpe 4 // pc = 17
        [0xe] 14:	movi #0, ebx
        [0x10] 16:	rstore ebx
        [0x11] 17:	nop
        [0x12] 18:	movl 0
        [0x13] 19:	movn #0
        [0x14] 20:	movi #0, adx
        [0x16] 22:	loadval ecx
        [0x17] 23:	rmov adx, ecx
        [0x18] 24:	movl 0
        [0x19] 25:	returnobj
        [0x1a] 26:	ret

func:@9 [std#bool.$operator+] in file: lib/support//0.2.587//bool.sharp:12:24: note:  
		    public def operator+(var num) : var {
		                       ^


$operator+:
line: 12 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	add ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval cmt
         [0xd] 13:	loadpc_2 adx, pc+8 // adx = 21
         [0xe] 14:	ifne
         [0xf] 15:	movi #1, ebx
         [0x11] 17:	rstore ebx
         [0x12] 18:	movi #1, cmt
         [0x14] 20:	skpe 4 // pc = 24
         [0x15] 21:	movi #0, ebx
         [0x17] 23:	rstore ebx
         [0x18] 24:	loadval ebx
         [0x19] 25:	return_val ebx
         [0x1a] 26:	ret

func:@10 [std#bool.$operator-] in file: lib/support//0.2.587//bool.sharp:16:24: note:  
		    public def operator-(var num) : var {
		                       ^


$operator-:
line: 16 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	sub ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval cmt
         [0xd] 13:	loadpc_2 adx, pc+8 // adx = 21
         [0xe] 14:	ifne
         [0xf] 15:	movi #1, ebx
         [0x11] 17:	rstore ebx
         [0x12] 18:	movi #1, cmt
         [0x14] 20:	skpe 4 // pc = 24
         [0x15] 21:	movi #0, ebx
         [0x17] 23:	rstore ebx
         [0x18] 24:	loadval ebx
         [0x19] 25:	return_val ebx
         [0x1a] 26:	ret

func:@11 [std#bool.$operator!=] in file: lib/support//0.2.587//bool.sharp:20:24: note:  
		    public def operator!=(var num) : var {
		                       ^


$operator!=:
line: 20 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	loadl ebx, fp+1
         [0x7] 7:	movr egx, ebx
         [0x8] 8:	loadval ebx
         [0x9] 9:	tne ebx, egx
         [0xa] 10:	movr ebx, cmt
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@12 [std#bool.$operator!=] in file: lib/support//0.2.587//bool.sharp:24:24: note:  
		    public def operator!=(integer num) : var {
		                       ^


$operator!=:
line: 24 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 egx, adx
         [0xc] 12:	loadval ebx
         [0xd] 13:	tne ebx, egx
         [0xe] 14:	movr ebx, cmt
         [0xf] 15:	return_val cmt
         [0x10] 16:	ret

func:@13 [std#bool.$operator*] in file: lib/support//0.2.587//bool.sharp:28:24: note:  
		    public def operator*(var num) : var {
		                       ^


$operator*:
line: 28 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	mul ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	return_val ebx
         [0xe] 14:	ret

func:@14 [std#bool.$operator/] in file: lib/support//0.2.587//bool.sharp:32:24: note:  
		    public def operator/(var num) : var {
		                       ^


$operator/:
line: 32 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	div ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	return_val ebx
         [0xe] 14:	ret

func:@15 [std#bool.$operator=] in file: lib/support//0.2.587//bool.sharp:36:24: note:  
		    public def operator=(var num) : var {
		                       ^


$operator=:
line: 36 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr cmt, ebx
         [0x2] 2:	loadpc_2 adx, pc+8 // adx = 10
         [0x3] 3:	ifne
         [0x4] 4:	movi #1, ebx
         [0x6] 6:	rstore ebx
         [0x7] 7:	movi #1, cmt
         [0x9] 9:	skpe 4 // pc = 13
         [0xa] 10:	movi #0, ebx
         [0xc] 12:	rstore ebx
         [0xd] 13:	nop
         [0xe] 14:	movl 0
         [0xf] 15:	movn #0
         [0x10] 16:	movi #0, adx
         [0x12] 18:	loadval ecx
         [0x13] 19:	rmov adx, ecx
         [0x14] 20:	return_val ebx
         [0x15] 21:	ret

func:@16 [std#bool.$operator=] in file: lib/support//0.2.587//bool.sharp:40:24: note:  
		    public def operator=(integer num) : bool {
		                       ^


$operator=:
line: 40 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @15 // <std#bool.$operator=(var)>
         [0x9] 9:	pop
line: 41 [0xa] 10:	movl 0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@17 [std#bool.$operator=] in file: lib/support//0.2.587//bool.sharp:45:24: note:  
		    public def operator=(Enum num) : bool {
		                       ^


$operator=:
line: 45 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	pushobj
         [0x4] 4:	call @78 // <std#Enum.getValue()>
         [0x5] 5:	call @15 // <std#bool.$operator=(var)>
         [0x6] 6:	pop
line: 46 [0x7] 7:	movl 0
         [0x8] 8:	returnobj
         [0x9] 9:	ret

func:@18 [std#bool.$operator+=] in file: lib/support//0.2.587//bool.sharp:50:24: note:  
		    public def operator+=(var num) : var {
		                       ^


$operator+=:
line: 50 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	loadl ebx, fp+1
         [0x3] 3:	rstore ebx
         [0x4] 4:	call @9 // <std#bool.$operator+(var)>
         [0x5] 5:	nop
         [0x6] 6:	movl 0
         [0x7] 7:	movn #0
         [0x8] 8:	movi #0, adx
         [0xa] 10:	loadval ecx
         [0xb] 11:	rmov adx, ecx
line: 51 [0xc] 12:	movl 0
         [0xd] 13:	movn #0
         [0xe] 14:	movi #0, adx
         [0x10] 16:	iaload_2 ebx, adx
         [0x11] 17:	return_val ebx
         [0x12] 18:	ret

func:@19 [std#bool.$operator==] in file: lib/support//0.2.587//bool.sharp:55:24: note:  
		    public def operator==(var num) : var {
		                       ^


$operator==:
line: 55 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	loadl ebx, fp+1
         [0x7] 7:	movr egx, ebx
         [0x8] 8:	loadval ebx
         [0x9] 9:	test ebx, egx
         [0xa] 10:	movr ebx, cmt
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@20 [std#bool.$operator<] in file: lib/support//0.2.587//bool.sharp:59:24: note:  
		    public def operator<(var num) : var {
		                       ^


$operator<:
line: 59 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr egx, ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lt ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@21 [std#bool.$operator>] in file: lib/support//0.2.587//bool.sharp:63:24: note:  
		    public def operator>(var num) : var {
		                       ^


$operator>:
line: 63 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr egx, ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	gt ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@22 [std#bool.$operator<=] in file: lib/support//0.2.587//bool.sharp:67:24: note:  
		    public def operator<=(var num) : var {
		                       ^


$operator<=:
line: 67 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr egx, ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lte ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@23 [std#bool.$operator>=] in file: lib/support//0.2.587//bool.sharp:71:24: note:  
		    public def operator>=(var num) : var {
		                       ^


$operator>=:
line: 71 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr egx, ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	gte ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@24 [std#bool.$operator++] in file: lib/support//0.2.587//bool.sharp:75:24: note:  
		    public def operator++(var num) : var { // post inc i++
		                       ^


$operator++:
line: 75 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	chklen adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	smovr_2 ebx, fp+2
line: 76 [0x7] 7:	movl 0
         [0x8] 8:	movn #0
         [0x9] 9:	movi #0, adx
         [0xb] 11:	chklen adx
         [0xc] 12:	iaload_2 ebx, adx
         [0xd] 13:	not ebx, ebx
         [0xe] 14:	nop
         [0xf] 15:	rstore ebx
         [0x10] 16:	movl 0
         [0x11] 17:	movn #0
         [0x12] 18:	movi #0, adx
         [0x14] 20:	loadval ecx
         [0x15] 21:	rmov adx, ecx
line: 77 [0x16] 22:	loadl ebx, fp+2
         [0x17] 23:	return_val ebx
         [0x18] 24:	ret

func:@25 [std#bool.$operator++] in file: lib/support//0.2.587//bool.sharp:81:24: note:  
		    public def operator++() : var { // pre inc ++i
		                       ^


$operator++:
line: 81 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	chklen adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	not ebx, ebx
         [0x7] 7:	nop
         [0x8] 8:	rstore ebx
         [0x9] 9:	movl 0
         [0xa] 10:	movn #0
         [0xb] 11:	movi #0, adx
         [0xd] 13:	loadval ecx
         [0xe] 14:	rmov adx, ecx
         [0xf] 15:	return_val ebx
         [0x10] 16:	ret

func:@26 [std#bool.$operator--] in file: lib/support//0.2.587//bool.sharp:85:24: note:  
		    public def operator--(var num) : var {
		                       ^


$operator--:
line: 85 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	chklen adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	smovr_2 ebx, fp+2
line: 86 [0x7] 7:	movl 0
         [0x8] 8:	movn #0
         [0x9] 9:	movi #0, adx
         [0xb] 11:	chklen adx
         [0xc] 12:	iaload_2 ebx, adx
         [0xd] 13:	not ebx, ebx
         [0xe] 14:	nop
         [0xf] 15:	rstore ebx
         [0x10] 16:	movl 0
         [0x11] 17:	movn #0
         [0x12] 18:	movi #0, adx
         [0x14] 20:	loadval ecx
         [0x15] 21:	rmov adx, ecx
line: 87 [0x16] 22:	loadl ebx, fp+2
         [0x17] 23:	return_val ebx
         [0x18] 24:	ret

func:@27 [std#bool.$operator--] in file: lib/support//0.2.587//bool.sharp:91:24: note:  
		    public def operator--() : var {
		                       ^


$operator--:
line: 91 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	chklen adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	not ebx, ebx
         [0x7] 7:	nop
         [0x8] 8:	rstore ebx
         [0x9] 9:	movl 0
         [0xa] 10:	movn #0
         [0xb] 11:	movi #0, adx
         [0xd] 13:	loadval ecx
         [0xe] 14:	rmov adx, ecx
         [0xf] 15:	return_val ebx
         [0x10] 16:	ret

func:@28 [std#bool.value] in file: lib/support//0.2.587//bool.sharp:95:21: note:  
		    public def value() : var {
		                    ^


value:
line: 95 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@29 [std#bool.toString] in file: lib/support//0.2.587//bool.sharp:99:24: note:  
		    public def delegate::toString() : string {
		                       ^


toString:
line: 99 [0x0] 0:	new_class @46 // std#string
         [0x1] 1:	newstr @226 // ""
         [0x2] 2:	call @558 // <std#string.string(var[])>
         [0x3] 3:	movl 0
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	chklen adx
         [0x8] 8:	iaload_2 cmt, adx
         [0x9] 9:	loadpc_2 adx, pc+6 // adx = 15
         [0xa] 10:	ifne
         [0xb] 11:	newstr @229 // "true"
         [0xc] 12:	movi #1, cmt
         [0xe] 14:	skpe 2 // pc = 16
         [0xf] 15:	newstr @230 // "false"
         [0x10] 16:	call @572 // <std#string.$operator+(var[])>
         [0x11] 17:	movsl #0
         [0x12] 18:	returnobj
         [0x13] 19:	ret

func:@30 [std#bool.bool] in file: lib/support//0.2.587//bool.sharp:3:13: note:  
		public class bool base integer {
		            ^


bool:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@31 [std#char.char] in file: lib/support//0.2.587//char.sharp:7:16: note:  
		    public char(var num) {
		               ^


char:
line: 7 [0x0] 0:	movl 0
        [0x1] 1:	pushobj
        [0x2] 2:	loadl ebx, fp+1
        [0x3] 3:	mov8 ebx, ebx
        [0x4] 4:	rstore ebx
        [0x5] 5:	call @125 // <std#integer.integer(var)>
        [0x6] 6:	pop
        [0x7] 7:	movl 0
        [0x8] 8:	returnobj
        [0x9] 9:	ret

func:@32 [std#char.char] in file: lib/support//0.2.587//char.sharp:11:16: note:  
		    public char(integer num) {
		               ^


char:
line: 11 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	mov8 ebx, ebx
         [0x9] 9:	rstore ebx
         [0xa] 10:	call @125 // <std#integer.integer(var)>
         [0xb] 11:	pop
         [0xc] 12:	movl 0
         [0xd] 13:	returnobj
         [0xe] 14:	ret

func:@33 [std#char.$operator+] in file: lib/support//0.2.587//char.sharp:15:24: note:  
		    public def operator+(var num) : var {
		                       ^


$operator+:
line: 15 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	add ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	mov8 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@34 [std#char.$operator+] in file: lib/support//0.2.587//char.sharp:19:24: note:  
		    public def operator+(integer num) : char {
		                       ^


$operator+:
line: 19 [0x0] 0:	new_class @8 // std#char
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @33 // <std#char.$operator+(var)>
         [0xa] 10:	call @31 // <std#char.char(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@35 [std#char.$operator-] in file: lib/support//0.2.587//char.sharp:23:24: note:  
		    public def operator-(var num) : var {
		                       ^


$operator-:
line: 23 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	sub ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	mov8 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@36 [std#char.$operator-] in file: lib/support//0.2.587//char.sharp:27:24: note:  
		    public def operator-(integer num) : char {
		                       ^


$operator-:
line: 27 [0x0] 0:	new_class @8 // std#char
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @35 // <std#char.$operator-(var)>
         [0xa] 10:	call @31 // <std#char.char(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@37 [std#char.$operator*] in file: lib/support//0.2.587//char.sharp:31:24: note:  
		    public def operator*(var num) : var {
		                       ^


$operator*:
line: 31 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	mul ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	mov8 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@38 [std#char.$operator*] in file: lib/support//0.2.587//char.sharp:35:24: note:  
		    public def operator*(integer num) : char {
		                       ^


$operator*:
line: 35 [0x0] 0:	new_class @8 // std#char
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @37 // <std#char.$operator*(var)>
         [0xa] 10:	call @31 // <std#char.char(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@39 [std#char.$operator/] in file: lib/support//0.2.587//char.sharp:39:24: note:  
		    public def operator/(var num) : var {
		                       ^


$operator/:
line: 39 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	div ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	mov8 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@40 [std#char.$operator/] in file: lib/support//0.2.587//char.sharp:43:24: note:  
		    public def operator/(integer num) : char {
		                       ^


$operator/:
line: 43 [0x0] 0:	new_class @8 // std#char
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @39 // <std#char.$operator/(var)>
         [0xa] 10:	call @31 // <std#char.char(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@41 [std#char.$operator=] in file: lib/support//0.2.587//char.sharp:47:24: note:  
		    public def operator=(var num) : var {
		                       ^


$operator=:
line: 47 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	mov8 ebx, ebx
         [0x2] 2:	nop
         [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #0
         [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@42 [std#char.$operator=] in file: lib/support//0.2.587//char.sharp:51:24: note:  
		    public def operator=(integer num) : char {
		                       ^


$operator=:
line: 51 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @41 // <std#char.$operator=(var)>
         [0x9] 9:	pop
line: 52 [0xa] 10:	movl 0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@43 [std#char.$operator=] in file: lib/support//0.2.587//char.sharp:56:24: note:  
		    public def operator=(Enum num) : char {
		                       ^


$operator=:
line: 56 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	pushobj
         [0x4] 4:	call @78 // <std#Enum.getValue()>
         [0x5] 5:	call @41 // <std#char.$operator=(var)>
         [0x6] 6:	pop
line: 57 [0x7] 7:	movl 0
         [0x8] 8:	returnobj
         [0x9] 9:	ret

func:@44 [std#char.$operator+=] in file: lib/support//0.2.587//char.sharp:61:24: note:  
		    public def operator+=(var num) : var {
		                       ^


$operator+=:
line: 61 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	add ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	mov8 ebx, ebx
         [0xe] 14:	nop
         [0xf] 15:	rstore ebx
         [0x10] 16:	movl 0
         [0x11] 17:	movn #0
         [0x12] 18:	movi #0, adx
         [0x14] 20:	loadval ecx
         [0x15] 21:	rmov adx, ecx
line: 62 [0x16] 22:	movl 0
         [0x17] 23:	movn #0
         [0x18] 24:	movi #0, adx
         [0x1a] 26:	iaload_2 ebx, adx
         [0x1b] 27:	return_val ebx
         [0x1c] 28:	ret

func:@45 [std#char.$operator==] in file: lib/support//0.2.587//char.sharp:66:24: note:  
		    public def operator==(var num) : var {
		                       ^


$operator==:
line: 66 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	loadl ebx, fp+1
         [0x7] 7:	movr egx, ebx
         [0x8] 8:	loadval ebx
         [0x9] 9:	test ebx, egx
         [0xa] 10:	movr ebx, cmt
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@46 [std#char.$operator!=] in file: lib/support//0.2.587//char.sharp:69:24: note:  
		    public def operator!=(char c) : var {
		                       ^


$operator!=:
line: 69 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	movi #0, adx
         [0xa] 10:	iaload_2 egx, adx
         [0xb] 11:	loadval ebx
         [0xc] 12:	test ebx, egx
         [0xd] 13:	movr ebx, cmt
         [0xe] 14:	return_val cmt
         [0xf] 15:	ret

func:@47 [std#char.$operator==] in file: lib/support//0.2.587//char.sharp:73:24: note:  
		    public def operator==(integer num) : var {
		                       ^


$operator==:
line: 73 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 egx, adx
         [0xc] 12:	loadval ebx
         [0xd] 13:	test ebx, egx
         [0xe] 14:	movr ebx, cmt
         [0xf] 15:	return_val cmt
         [0x10] 16:	ret

func:@48 [std#char.$operator<] in file: lib/support//0.2.587//char.sharp:77:24: note:  
		    public def operator<(var num) : var {
		                       ^


$operator<:
line: 77 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr egx, ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lt ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@49 [std#char.$operator<] in file: lib/support//0.2.587//char.sharp:81:24: note:  
		    public def operator<(integer num) : var {
		                       ^


$operator<:
line: 81 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	chklen adx
         [0x5] 5:	iaload_2 egx, adx
         [0x6] 6:	movl 0
         [0x7] 7:	movn #0
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 ebx, adx
         [0xc] 12:	lt ebx, egx
         [0xd] 13:	movr ebx, cmt
         [0xe] 14:	return_val cmt
         [0xf] 15:	ret

func:@50 [std#char.$operator!=] in file: lib/support//0.2.587//char.sharp:85:24: note:  
		    public def operator!=(var num) : var {
		                       ^


$operator!=:
line: 85 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	loadl ebx, fp+1
         [0x7] 7:	movr egx, ebx
         [0x8] 8:	loadval ebx
         [0x9] 9:	tne ebx, egx
         [0xa] 10:	movr ebx, cmt
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@51 [std#char.$operator!=] in file: lib/support//0.2.587//char.sharp:89:24: note:  
		    public def operator!=(integer num) : var {
		                       ^


$operator!=:
line: 89 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 egx, adx
         [0xc] 12:	loadval ebx
         [0xd] 13:	tne ebx, egx
         [0xe] 14:	movr ebx, cmt
         [0xf] 15:	return_val cmt
         [0x10] 16:	ret

func:@52 [std#char.$operator>] in file: lib/support//0.2.587//char.sharp:93:24: note:  
		    public def operator>(var num) : var {
		                       ^


$operator>:
line: 93 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr egx, ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	gt ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@53 [std#char.$operator>] in file: lib/support//0.2.587//char.sharp:97:24: note:  
		    public def operator>(integer num) : var {
		                       ^


$operator>:
line: 97 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	chklen adx
         [0x5] 5:	iaload_2 egx, adx
         [0x6] 6:	movl 0
         [0x7] 7:	movn #0
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 ebx, adx
         [0xc] 12:	gt ebx, egx
         [0xd] 13:	movr ebx, cmt
         [0xe] 14:	return_val cmt
         [0xf] 15:	ret

func:@54 [std#char.$operator<=] in file: lib/support//0.2.587//char.sharp:101:24: note:  
		    public def operator<=(var num) : var {
		                       ^


$operator<=:
line: 101 [0x0] 0:	loadl ebx, fp+1
          [0x1] 1:	movr egx, ebx
          [0x2] 2:	movl 0
          [0x3] 3:	movn #0
          [0x4] 4:	movi #0, adx
          [0x6] 6:	chklen adx
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	lte ebx, egx
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	return_val cmt
          [0xb] 11:	ret

func:@55 [std#char.$operator<=] in file: lib/support//0.2.587//char.sharp:105:24: note:  
		    public def operator<=(integer num) : var {
		                       ^


$operator<=:
line: 105 [0x0] 0:	movl 1
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	movl 0
          [0x7] 7:	movn #0
          [0x8] 8:	movi #0, adx
          [0xa] 10:	chklen adx
          [0xb] 11:	iaload_2 ebx, adx
          [0xc] 12:	lte ebx, egx
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	return_val cmt
          [0xf] 15:	ret

func:@56 [std#char.$operator>=] in file: lib/support//0.2.587//char.sharp:109:24: note:  
		    public def operator>=(var num) : var {
		                       ^


$operator>=:
line: 109 [0x0] 0:	loadl ebx, fp+1
          [0x1] 1:	movr egx, ebx
          [0x2] 2:	movl 0
          [0x3] 3:	movn #0
          [0x4] 4:	movi #0, adx
          [0x6] 6:	chklen adx
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	gte ebx, egx
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	return_val cmt
          [0xb] 11:	ret

func:@57 [std#char.$operator>=] in file: lib/support//0.2.587//char.sharp:113:24: note:  
		    public def operator>=(integer num) : var {
		                       ^


$operator>=:
line: 113 [0x0] 0:	movl 1
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	movl 0
          [0x7] 7:	movn #0
          [0x8] 8:	movi #0, adx
          [0xa] 10:	chklen adx
          [0xb] 11:	iaload_2 ebx, adx
          [0xc] 12:	gte ebx, egx
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	return_val cmt
          [0xf] 15:	ret

func:@58 [std#char.$operator++] in file: lib/support//0.2.587//char.sharp:117:24: note:  
		    public def operator++(var num) : var { // post inc i++
		                       ^


$operator++:
line: 117 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	smovr_2 ebx, fp+2
line: 118 [0x7] 7:	movi #1, ebx
          [0x9] 9:	rstore ebx
          [0xa] 10:	movl 0
          [0xb] 11:	movn #0
          [0xc] 12:	movi #0, adx
          [0xe] 14:	chklen adx
          [0xf] 15:	iaload_2 ebx, adx
          [0x10] 16:	loadval egx
          [0x11] 17:	add ebx, egx -> ebx
          [0x13] 19:	rstore ebx
          [0x14] 20:	loadval ebx
          [0x15] 21:	mov8 ebx, ebx
          [0x16] 22:	nop
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 0
          [0x19] 25:	movn #0
          [0x1a] 26:	movi #0, adx
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	rmov adx, ecx
line: 119 [0x1e] 30:	loadl ebx, fp+2
          [0x1f] 31:	return_val ebx
          [0x20] 32:	ret

func:@59 [std#char.$operator++] in file: lib/support//0.2.587//char.sharp:123:24: note:  
		    public def operator++() : var { // pre inc ++i
		                       ^


$operator++:
line: 123 [0x0] 0:	movi #1, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #0
          [0x5] 5:	movi #0, adx
          [0x7] 7:	chklen adx
          [0x8] 8:	iaload_2 ebx, adx
          [0x9] 9:	loadval egx
          [0xa] 10:	add ebx, egx -> ebx
          [0xc] 12:	rstore ebx
          [0xd] 13:	loadval ebx
          [0xe] 14:	mov8 ebx, ebx
          [0xf] 15:	nop
          [0x10] 16:	rstore ebx
          [0x11] 17:	movl 0
          [0x12] 18:	movn #0
          [0x13] 19:	movi #0, adx
          [0x15] 21:	loadval ecx
          [0x16] 22:	rmov adx, ecx
          [0x17] 23:	return_val ebx
          [0x18] 24:	ret

func:@60 [std#char.$operator--] in file: lib/support//0.2.587//char.sharp:127:24: note:  
		    public def operator--(var num) : var {
		                       ^


$operator--:
line: 127 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	smovr_2 ebx, fp+2
line: 128 [0x7] 7:	movi #1, ebx
          [0x9] 9:	rstore ebx
          [0xa] 10:	movl 0
          [0xb] 11:	movn #0
          [0xc] 12:	movi #0, adx
          [0xe] 14:	chklen adx
          [0xf] 15:	iaload_2 ebx, adx
          [0x10] 16:	loadval egx
          [0x11] 17:	sub ebx, egx -> ebx
          [0x13] 19:	rstore ebx
          [0x14] 20:	loadval ebx
          [0x15] 21:	mov8 ebx, ebx
          [0x16] 22:	nop
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 0
          [0x19] 25:	movn #0
          [0x1a] 26:	movi #0, adx
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	rmov adx, ecx
line: 129 [0x1e] 30:	loadl ebx, fp+2
          [0x1f] 31:	return_val ebx
          [0x20] 32:	ret

func:@61 [std#char.$operator--] in file: lib/support//0.2.587//char.sharp:133:24: note:  
		    public def operator--() : var {
		                       ^


$operator--:
line: 133 [0x0] 0:	movi #1, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #0
          [0x5] 5:	movi #0, adx
          [0x7] 7:	chklen adx
          [0x8] 8:	iaload_2 ebx, adx
          [0x9] 9:	loadval egx
          [0xa] 10:	sub ebx, egx -> ebx
          [0xc] 12:	rstore ebx
          [0xd] 13:	loadval ebx
          [0xe] 14:	mov8 ebx, ebx
          [0xf] 15:	nop
          [0x10] 16:	rstore ebx
          [0x11] 17:	movl 0
          [0x12] 18:	movn #0
          [0x13] 19:	movi #0, adx
          [0x15] 21:	loadval ecx
          [0x16] 22:	rmov adx, ecx
          [0x17] 23:	return_val ebx
          [0x18] 24:	ret

func:@62 [std#char.value] in file: lib/support//0.2.587//char.sharp:137:21: note:  
		    public def value() : var {
		                    ^


value:
line: 137 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@63 [std#char.isDigit] in file: lib/support//0.2.587//char.sharp:141:30: note:  
		    public static def isDigit(var ch) : var {
		                             ^


isDigit:
line: 141 [0x0] 0:	movi #48, ebx
          [0x2] 2:	movr egx, ebx
          [0x3] 3:	loadl ebx, fp+0
          [0x4] 4:	gte ebx, egx
          [0x5] 5:	movr ebx, cmt
          [0x6] 6:	cmp ebx, 1
          [0x7] 7:	movr ebx, cmt
          [0x8] 8:	skne 11 // pc = 19
          [0x9] 9:	istore 1
          [0xa] 10:	movi #57, ebx
          [0xc] 12:	movr egx, ebx
          [0xd] 13:	loadl ebx, fp+0
          [0xe] 14:	lte ebx, egx
          [0xf] 15:	movr ebx, cmt
          [0x10] 16:	loadval ecx
          [0x11] 17:	and ecx, ebx
          [0x12] 18:	movr ebx, cmt
          [0x13] 19:	return_val ebx
          [0x14] 20:	ret

func:@64 [std#char.isNewLine] in file: lib/support//0.2.587//char.sharp:145:32: note:  
		    public static def isNewLine(var ch) : var {
		                               ^


isNewLine:
line: 145 [0x0] 0:	call @299 // <std.kernel#Manifest.isWindows()>
          [0x1] 1:	loadval cmt
          [0x2] 2:	movi #28, adx
          [0x4] 4:	ifne
line: 145 [0x5] 5:	loadl ebx, fp+0
          [0x6] 6:	rstore ebx
          [0x7] 7:	movi #10, ebx
          [0x9] 9:	movr egx, ebx
          [0xa] 10:	loadval ebx
          [0xb] 11:	test ebx, egx
          [0xc] 12:	movr ebx, cmt
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	skpe 11 // pc = 25
          [0xf] 15:	loadl ebx, fp+0
          [0x10] 16:	rstore ebx
          [0x11] 17:	movi #13, ebx
          [0x13] 19:	movr egx, ebx
          [0x14] 20:	loadval ebx
          [0x15] 21:	test ebx, egx
          [0x16] 22:	movr ebx, cmt
          [0x17] 23:	cmp ebx, 1
          [0x18] 24:	movr ebx, cmt
          [0x19] 25:	return_val ebx
          [0x1a] 26:	ret
          [0x1b] 27:	goto @39
line: 146 [0x1c] 28:	loadl ebx, fp+0
          [0x1d] 29:	rstore ebx
          [0x1e] 30:	movi #10, ebx
          [0x20] 32:	movr egx, ebx
          [0x21] 33:	loadval ebx
          [0x22] 34:	test ebx, egx
          [0x23] 35:	movr ebx, cmt
          [0x24] 36:	return_val cmt
          [0x25] 37:	ret
          [0x26] 38:	nop
          [0x27] 39:	nop
          [0x28] 40:	movi #0, ebx
          [0x2a] 42:	return_val ebx
          [0x2b] 43:	ret

func:@65 [std#char.isAlpha] in file: lib/support//0.2.587//char.sharp:150:30: note:  
		    public static def isAlpha(var ch) : var {
		                             ^


isAlpha:
line: 150 [0x0] 0:	movi #65, ebx
          [0x2] 2:	movr egx, ebx
          [0x3] 3:	loadl ebx, fp+0
          [0x4] 4:	gte ebx, egx
          [0x5] 5:	movr ebx, cmt
          [0x6] 6:	cmp ebx, 1
          [0x7] 7:	movr ebx, cmt
          [0x8] 8:	skne 11 // pc = 19
          [0x9] 9:	istore 1
          [0xa] 10:	movi #90, ebx
          [0xc] 12:	movr egx, ebx
          [0xd] 13:	loadl ebx, fp+0
          [0xe] 14:	lte ebx, egx
          [0xf] 15:	movr ebx, cmt
          [0x10] 16:	loadval ecx
          [0x11] 17:	and ecx, ebx
          [0x12] 18:	movr ebx, cmt
          [0x13] 19:	movr cmt, ebx
          [0x14] 20:	movr ebx, cmt
          [0x15] 21:	skpe 22 // pc = 43
          [0x16] 22:	movi #97, ebx
          [0x18] 24:	movr egx, ebx
          [0x19] 25:	loadl ebx, fp+0
          [0x1a] 26:	gte ebx, egx
          [0x1b] 27:	movr ebx, cmt
          [0x1c] 28:	cmp ebx, 1
          [0x1d] 29:	movr ebx, cmt
          [0x1e] 30:	skne 11 // pc = 41
          [0x1f] 31:	istore 1
          [0x20] 32:	movi #122, ebx
          [0x22] 34:	movr egx, ebx
          [0x23] 35:	loadl ebx, fp+0
          [0x24] 36:	lte ebx, egx
          [0x25] 37:	movr ebx, cmt
          [0x26] 38:	loadval ecx
          [0x27] 39:	and ecx, ebx
          [0x28] 40:	movr ebx, cmt
          [0x29] 41:	cmp ebx, 1
          [0x2a] 42:	movr ebx, cmt
          [0x2b] 43:	return_val ebx
          [0x2c] 44:	ret

func:@66 [std#char.isAlphaNum] in file: lib/support//0.2.587//char.sharp:155:33: note:  
		    public static def isAlphaNum(var ch) : var {
		                                ^


isAlphaNum:
line: 155 [0x0] 0:	loadl ebx, fp+0
          [0x1] 1:	rstore ebx
          [0x2] 2:	call @65 // <std#char.isAlpha(var)>
          [0x3] 3:	loadval cmt
          [0x4] 4:	movr ebx, cmt
          [0x5] 5:	skpe 7 // pc = 12
          [0x6] 6:	loadl ebx, fp+0
          [0x7] 7:	rstore ebx
          [0x8] 8:	call @63 // <std#char.isDigit(var)>
          [0x9] 9:	loadval ebx
          [0xa] 10:	cmp ebx, 1
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	return_val ebx
          [0xd] 13:	ret

func:@67 [std#char.toLower] in file: lib/support//0.2.587//char.sharp:159:30: note:  
		    public static def toLower(var ch) : var {
		                             ^


toLower:
line: 159 [0x0] 0:	loadl ebx, fp+0
          [0x1] 1:	movr egx, ebx
          [0x2] 2:	movi #65, ebx
          [0x4] 4:	lte ebx, egx
          [0x5] 5:	movr ebx, cmt
          [0x6] 6:	cmp ebx, 1
          [0x7] 7:	movr ebx, cmt
          [0x8] 8:	skne 11 // pc = 19
          [0x9] 9:	istore 1
          [0xa] 10:	movi #90, ebx
          [0xc] 12:	movr egx, ebx
          [0xd] 13:	loadl ebx, fp+0
          [0xe] 14:	lte ebx, egx
          [0xf] 15:	movr ebx, cmt
          [0x10] 16:	loadval ecx
          [0x11] 17:	and ecx, ebx
          [0x12] 18:	movr ebx, cmt
          [0x13] 19:	movr cmt, ebx
          [0x14] 20:	movi #41, adx
          [0x16] 22:	ifne
line: 160 [0x17] 23:	movi #65, ebx
          [0x19] 25:	rstore ebx
          [0x1a] 26:	loadl ebx, fp+0
          [0x1b] 27:	loadval egx
          [0x1c] 28:	sub ebx, egx -> ebx
          [0x1e] 30:	rstore ebx
          [0x1f] 31:	movi #97, ebx
          [0x21] 33:	loadval ecx
          [0x22] 34:	add ebx, ecx -> ebx
          [0x24] 36:	rstore ebx
          [0x25] 37:	loadval ebx
          [0x26] 38:	return_val ebx
          [0x27] 39:	ret
          [0x28] 40:	goto @45
line: 162 [0x29] 41:	loadl ebx, fp+0
          [0x2a] 42:	return_val ebx
          [0x2b] 43:	ret
          [0x2c] 44:	nop
          [0x2d] 45:	nop
          [0x2e] 46:	movi #0, ebx
          [0x30] 48:	return_val ebx
          [0x31] 49:	ret

func:@68 [std#char.toUpper] in file: lib/support//0.2.587//char.sharp:166:30: note:  
		    public static def toUpper(var ch) : var {
		                             ^


toUpper:
line: 166 [0x0] 0:	loadl ebx, fp+0
          [0x1] 1:	movr egx, ebx
          [0x2] 2:	movi #97, ebx
          [0x4] 4:	lte ebx, egx
          [0x5] 5:	movr ebx, cmt
          [0x6] 6:	cmp ebx, 1
          [0x7] 7:	movr ebx, cmt
          [0x8] 8:	skne 11 // pc = 19
          [0x9] 9:	istore 1
          [0xa] 10:	movi #122, ebx
          [0xc] 12:	movr egx, ebx
          [0xd] 13:	loadl ebx, fp+0
          [0xe] 14:	lte ebx, egx
          [0xf] 15:	movr ebx, cmt
          [0x10] 16:	loadval ecx
          [0x11] 17:	and ecx, ebx
          [0x12] 18:	movr ebx, cmt
          [0x13] 19:	movr cmt, ebx
          [0x14] 20:	movi #41, adx
          [0x16] 22:	ifne
line: 167 [0x17] 23:	movi #97, ebx
          [0x19] 25:	rstore ebx
          [0x1a] 26:	loadl ebx, fp+0
          [0x1b] 27:	loadval egx
          [0x1c] 28:	sub ebx, egx -> ebx
          [0x1e] 30:	rstore ebx
          [0x1f] 31:	movi #65, ebx
          [0x21] 33:	loadval ecx
          [0x22] 34:	add ebx, ecx -> ebx
          [0x24] 36:	rstore ebx
          [0x25] 37:	loadval ebx
          [0x26] 38:	return_val ebx
          [0x27] 39:	ret
          [0x28] 40:	goto @45
line: 169 [0x29] 41:	loadl ebx, fp+0
          [0x2a] 42:	return_val ebx
          [0x2b] 43:	ret
          [0x2c] 44:	nop
          [0x2d] 45:	nop
          [0x2e] 46:	movi #0, ebx
          [0x30] 48:	return_val ebx
          [0x31] 49:	ret

func:@69 [std#char.toString] in file: lib/support//0.2.587//char.sharp:173:24: note:  
		    public def delegate::toString() : string {
		                       ^


toString:
line: 173 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	movl 0
          [0x2] 2:	movn #0
          [0x3] 3:	movi #0, adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	rstore ebx
          [0x7] 7:	call @559 // <std#string.string(var)>
          [0x8] 8:	movsl #0
          [0x9] 9:	returnobj
          [0xa] 10:	ret

func:@70 [std#char.char] in file: lib/support//0.2.587//char.sharp:5:13: note:  
		public class char base integer {
		            ^


char:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@71 [std#Enum.Enum] in file: lib/support//0.2.587//Enum.sharp:12:16: note:  
		    public Enum(var val) {
		               ^


Enum:
line: 12 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	nop
         [0x2] 2:	rstore ebx
         [0x3] 3:	movl 0
         [0x4] 4:	movn #2
         [0x5] 5:	movi #0, adx
         [0x7] 7:	loadval ecx
         [0x8] 8:	rmov adx, ecx
         [0x9] 9:	movl 0
         [0xa] 10:	returnobj
         [0xb] 11:	ret

func:@72 [std#Enum.$operator!=] in file: lib/support//0.2.587//Enum.sharp:16:24: note:  
		    public def operator!=(Enum e) : var {
		                       ^


$operator!=:
line: 16 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #2
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 egx, adx
         [0xc] 12:	loadval ebx
         [0xd] 13:	tne ebx, egx
         [0xe] 14:	movr ebx, cmt
         [0xf] 15:	return_val cmt
         [0x10] 16:	ret

func:@73 [std#Enum.$operator!=] in file: lib/support//0.2.587//Enum.sharp:20:24: note:  
		    public def operator!=(var num) : var {
		                       ^


$operator!=:
line: 20 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	loadl ebx, fp+1
         [0x7] 7:	movr egx, ebx
         [0x8] 8:	loadval ebx
         [0x9] 9:	tne ebx, egx
         [0xa] 10:	movr ebx, cmt
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@74 [std#Enum.$operator==] in file: lib/support//0.2.587//Enum.sharp:24:24: note:  
		    public def operator==(Enum e) : var {
		                       ^


$operator==:
line: 24 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #2
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 egx, adx
         [0xc] 12:	loadval ebx
         [0xd] 13:	test ebx, egx
         [0xe] 14:	movr ebx, cmt
         [0xf] 15:	return_val cmt
         [0x10] 16:	ret

func:@75 [std#Enum.$operator==] in file: lib/support//0.2.587//Enum.sharp:28:24: note:  
		    public def operator==(var num) : var {
		                       ^


$operator==:
line: 28 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	loadl ebx, fp+1
         [0x7] 7:	movr egx, ebx
         [0x8] 8:	loadval ebx
         [0x9] 9:	test ebx, egx
         [0xa] 10:	movr ebx, cmt
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@76 [std#Enum.Enum] in file: lib/support//0.2.587//Enum.sharp:32:16: note:  
		    public Enum(Enum e) {
		               ^


Enum:
line: 32 [0x0] 0:	movl 1
         [0x1] 1:	movn #2
         [0x2] 2:	nop
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	rstore ebx
         [0x7] 7:	movl 0
         [0x8] 8:	movn #2
         [0x9] 9:	movi #0, adx
         [0xb] 11:	loadval ecx
         [0xc] 12:	rmov adx, ecx
line: 33 [0xd] 13:	movl 1
         [0xe] 14:	movn #1
         [0xf] 15:	pushobj
         [0x10] 16:	movl 1
         [0x11] 17:	movn #1
         [0x12] 18:	sizeof ebx
         [0x13] 19:	rstore ebx
         [0x14] 20:	call @619 // <std#__SRT_Global.copyOf(object,var)>
         [0x15] 21:	movsl #0
         [0x16] 22:	vcast 1
         [0x17] 23:	movl 0
         [0x18] 24:	movn #1
         [0x19] 25:	popobj
         [0x1a] 26:	movl 0
         [0x1b] 27:	returnobj
         [0x1c] 28:	ret

func:@77 [std#Enum.getName] in file: lib/support//0.2.587//Enum.sharp:37:23: note:  
		    public def getName() : string {
		                      ^


getName:
line: 37 [0x0] 0:	new_class @46 // std#string
         [0x1] 1:	newstr @226 // ""
         [0x2] 2:	call @558 // <std#string.string(var[])>
         [0x3] 3:	movl 0
         [0x4] 4:	movn #1
         [0x5] 5:	pushobj
         [0x6] 6:	call @572 // <std#string.$operator+(var[])>
         [0x7] 7:	movsl #0
         [0x8] 8:	returnobj
         [0x9] 9:	ret

func:@78 [std#Enum.getValue] in file: lib/support//0.2.587//Enum.sharp:41:24: note:  
		    public def getValue() : var {
		                       ^


getValue:
line: 41 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@79 [std#Enum.toString] in file: lib/support//0.2.587//Enum.sharp:45:24: note:  
		    public def delegate::toString() : string {
		                       ^


toString:
line: 45 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	call @77 // <std#Enum.getName()>
         [0x3] 3:	movsl #0
         [0x4] 4:	returnobj
         [0x5] 5:	ret

func:@80 [std#Enum.Enum] in file: lib/support//0.2.587//Enum.sharp:7:13: note:  
		public class Enum {
		            ^


Enum:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@81 [std#Exception.Exception] in file: lib/support//0.2.587//Exception.sharp:8:21: note:  
		    public Exception(var[] msg) {
		                    ^


Exception:
line: 8 [0x0] 0:	movl 0
        [0x1] 1:	pushobj
        [0x2] 2:	movl 1
        [0x3] 3:	pushobj
        [0x4] 4:	call @627 // <std#Throwable.Throwable(var[])>
        [0x5] 5:	pop
        [0x6] 6:	movl 0
        [0x7] 7:	returnobj
        [0x8] 8:	ret

func:@82 [std#Exception.Exception] in file: lib/support//0.2.587//Exception.sharp:12:21: note:  
		    public Exception(string msg) {
		                    ^


Exception:
line: 12 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	pushobj
         [0x4] 4:	call @628 // <std#Throwable.Throwable(std#string)>
         [0x5] 5:	pop
         [0x6] 6:	movl 0
         [0x7] 7:	returnobj
         [0x8] 8:	ret

func:@83 [std#Exception.Exception] in file: lib/support//0.2.587//Exception.sharp:6:13: note:  
		public class Exception base Throwable {
		            ^


Exception:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@84 [std#IllegalArgumentException.IllegalArgumentException] in file: lib/support//0.2.587//IllegalArgumentException.sharp:8:38: note:  
		      public IllegalArgumentException(var[] message) {
		                                     ^


IllegalArgumentException:
line: 8 [0x0] 0:	movl 0
        [0x1] 1:	pushobj
        [0x2] 2:	movl 1
        [0x3] 3:	pushobj
        [0x4] 4:	call @81 // <std#Exception.Exception(var[])>
        [0x5] 5:	pop
        [0x6] 6:	movl 0
        [0x7] 7:	returnobj
        [0x8] 8:	ret

func:@85 [std#IllegalArgumentException.IllegalArgumentException] in file: lib/support//0.2.587//IllegalArgumentException.sharp:12:38: note:  
		      public IllegalArgumentException(string message) {
		                                     ^


IllegalArgumentException:
line: 12 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	pushobj
         [0x4] 4:	call @82 // <std#Exception.Exception(std#string)>
         [0x5] 5:	pop
         [0x6] 6:	movl 0
         [0x7] 7:	returnobj
         [0x8] 8:	ret

func:@86 [std#IllegalArgumentException.IllegalArgumentException] in file: lib/support//0.2.587//IllegalArgumentException.sharp:6:13: note:  
		public class IllegalArgumentException base Exception {
		            ^


IllegalArgumentException:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@87 [std#IllegalStateException.IllegalStateException] in file: lib/support//0.2.587//IllegalStateException.sharp:8:35: note:  
		      public IllegalStateException(var[] message) {
		                                  ^


IllegalStateException:
line: 8 [0x0] 0:	movl 0
        [0x1] 1:	pushobj
        [0x2] 2:	movl 1
        [0x3] 3:	pushobj
        [0x4] 4:	call @81 // <std#Exception.Exception(var[])>
        [0x5] 5:	pop
        [0x6] 6:	movl 0
        [0x7] 7:	returnobj
        [0x8] 8:	ret

func:@88 [std#IllegalStateException.IllegalStateException] in file: lib/support//0.2.587//IllegalStateException.sharp:12:35: note:  
		      public IllegalStateException(string message) {
		                                  ^


IllegalStateException:
line: 12 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	pushobj
         [0x4] 4:	call @82 // <std#Exception.Exception(std#string)>
         [0x5] 5:	pop
         [0x6] 6:	movl 0
         [0x7] 7:	returnobj
         [0x8] 8:	ret

func:@89 [std#IllegalStateException.IllegalStateException] in file: lib/support//0.2.587//IllegalStateException.sharp:6:13: note:  
		public class IllegalStateException base Exception {
		            ^


IllegalStateException:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@90 [std#IndexOutOfBoundsException.IndexOutOfBoundsException] in file: lib/support//0.2.587//IndexOutOfBoundsException.sharp:8:39: note:  
		      public IndexOutOfBoundsException(var[] message) {
		                                      ^


IndexOutOfBoundsException:
line: 8 [0x0] 0:	movl 0
        [0x1] 1:	pushobj
        [0x2] 2:	movl 1
        [0x3] 3:	pushobj
        [0x4] 4:	call @81 // <std#Exception.Exception(var[])>
        [0x5] 5:	pop
        [0x6] 6:	movl 0
        [0x7] 7:	returnobj
        [0x8] 8:	ret

func:@91 [std#IndexOutOfBoundsException.IndexOutOfBoundsException] in file: lib/support//0.2.587//IndexOutOfBoundsException.sharp:12:39: note:  
		      public IndexOutOfBoundsException(string message) {
		                                      ^


IndexOutOfBoundsException:
line: 12 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	pushobj
         [0x4] 4:	call @82 // <std#Exception.Exception(std#string)>
         [0x5] 5:	pop
         [0x6] 6:	movl 0
         [0x7] 7:	returnobj
         [0x8] 8:	ret

func:@92 [std#IndexOutOfBoundsException.IndexOutOfBoundsException] in file: lib/support//0.2.587//IndexOutOfBoundsException.sharp:6:13: note:  
		public class IndexOutOfBoundsException base Exception {
		            ^


IndexOutOfBoundsException:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@93 [std#int.int] in file: lib/support//0.2.587//int.sharp:5:15: note:  
		    public int(var num) {
		              ^


int:
line: 5 [0x0] 0:	movl 0
        [0x1] 1:	pushobj
        [0x2] 2:	loadl ebx, fp+1
        [0x3] 3:	mov32 ebx, ebx
        [0x4] 4:	rstore ebx
        [0x5] 5:	call @125 // <std#integer.integer(var)>
        [0x6] 6:	pop
        [0x7] 7:	movl 0
        [0x8] 8:	returnobj
        [0x9] 9:	ret

func:@94 [std#int.int] in file: lib/support//0.2.587//int.sharp:9:15: note:  
		    public int(integer num) {
		              ^


int:
line: 9 [0x0] 0:	movl 0
        [0x1] 1:	pushobj
        [0x2] 2:	movl 1
        [0x3] 3:	movn #0
        [0x4] 4:	movi #0, adx
        [0x6] 6:	chklen adx
        [0x7] 7:	iaload_2 ebx, adx
        [0x8] 8:	mov32 ebx, ebx
        [0x9] 9:	rstore ebx
        [0xa] 10:	call @125 // <std#integer.integer(var)>
        [0xb] 11:	pop
        [0xc] 12:	movl 0
        [0xd] 13:	returnobj
        [0xe] 14:	ret

func:@95 [std#int.$operator+] in file: lib/support//0.2.587//int.sharp:13:24: note:  
		    public def operator+(var num) : var {
		                       ^


$operator+:
line: 13 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	add ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	mov32 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@96 [std#int.$operator+=] in file: lib/support//0.2.587//int.sharp:17:24: note:  
		    public def operator+=(var num) : var {
		                       ^


$operator+=:
line: 17 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	add ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	mov32 ebx, ebx
         [0xe] 14:	nop
         [0xf] 15:	rstore ebx
         [0x10] 16:	movl 0
         [0x11] 17:	movn #0
         [0x12] 18:	movi #0, adx
         [0x14] 20:	loadval ecx
         [0x15] 21:	rmov adx, ecx
line: 18 [0x16] 22:	movl 0
         [0x17] 23:	movn #0
         [0x18] 24:	movi #0, adx
         [0x1a] 26:	iaload_2 ebx, adx
         [0x1b] 27:	return_val ebx
         [0x1c] 28:	ret

func:@97 [std#int.$operator+] in file: lib/support//0.2.587//int.sharp:22:24: note:  
		    public def operator+(integer num) : int {
		                       ^


$operator+:
line: 22 [0x0] 0:	new_class @14 // std#int
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @95 // <std#int.$operator+(var)>
         [0xa] 10:	call @93 // <std#int.int(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@98 [std#int.$operator-] in file: lib/support//0.2.587//int.sharp:26:24: note:  
		    public def operator-(var num) : var {
		                       ^


$operator-:
line: 26 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	sub ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	mov32 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@99 [std#int.$operator-] in file: lib/support//0.2.587//int.sharp:30:24: note:  
		    public def operator-(integer num) : int {
		                       ^


$operator-:
line: 30 [0x0] 0:	new_class @14 // std#int
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @98 // <std#int.$operator-(var)>
         [0xa] 10:	call @93 // <std#int.int(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@100 [std#int.$operator*] in file: lib/support//0.2.587//int.sharp:34:24: note:  
		    public def operator*(var num) : var {
		                       ^


$operator*:
line: 34 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	mul ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	mov32 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@101 [std#int.$operator*] in file: lib/support//0.2.587//int.sharp:38:24: note:  
		    public def operator*(integer num) : int {
		                       ^


$operator*:
line: 38 [0x0] 0:	new_class @14 // std#int
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @100 // <std#int.$operator*(var)>
         [0xa] 10:	call @93 // <std#int.int(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@102 [std#int.$operator/] in file: lib/support//0.2.587//int.sharp:42:24: note:  
		    public def operator/(var num) : var {
		                       ^


$operator/:
line: 42 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	div ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	mov32 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@103 [std#int.$operator/] in file: lib/support//0.2.587//int.sharp:46:24: note:  
		    public def operator/(integer num) : int {
		                       ^


$operator/:
line: 46 [0x0] 0:	new_class @14 // std#int
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @102 // <std#int.$operator/(var)>
         [0xa] 10:	call @93 // <std#int.int(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@104 [std#int.$operator=] in file: lib/support//0.2.587//int.sharp:50:24: note:  
		    public def operator=(var num) : var {
		                       ^


$operator=:
line: 50 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	mov32 ebx, ebx
         [0x2] 2:	nop
         [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #0
         [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
line: 51 [0xa] 10:	movl 0
         [0xb] 11:	movn #0
         [0xc] 12:	movi #0, adx
         [0xe] 14:	iaload_2 ebx, adx
         [0xf] 15:	return_val ebx
         [0x10] 16:	ret

func:@105 [std#int.$operator=] in file: lib/support//0.2.587//int.sharp:55:24: note:  
		    public def operator=(integer num) : int {
		                       ^


$operator=:
line: 55 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @104 // <std#int.$operator=(var)>
         [0x9] 9:	pop
line: 56 [0xa] 10:	movl 0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@106 [std#int.$operator=] in file: lib/support//0.2.587//int.sharp:60:24: note:  
		    public def operator=(Enum num) : int {
		                       ^


$operator=:
line: 60 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	pushobj
         [0x4] 4:	call @78 // <std#Enum.getValue()>
         [0x5] 5:	call @104 // <std#int.$operator=(var)>
         [0x6] 6:	pop
line: 61 [0x7] 7:	movl 0
         [0x8] 8:	returnobj
         [0x9] 9:	ret

func:@107 [std#int.$operator==] in file: lib/support//0.2.587//int.sharp:65:24: note:  
		    public def operator==(var num) : var {
		                       ^


$operator==:
line: 65 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	loadl ebx, fp+1
         [0x7] 7:	movr egx, ebx
         [0x8] 8:	loadval ebx
         [0x9] 9:	test ebx, egx
         [0xa] 10:	movr ebx, cmt
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@108 [std#int.$operator==] in file: lib/support//0.2.587//int.sharp:69:24: note:  
		    public def operator==(integer num) : var {
		                       ^


$operator==:
line: 69 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 egx, adx
         [0xc] 12:	loadval ebx
         [0xd] 13:	test ebx, egx
         [0xe] 14:	movr ebx, cmt
         [0xf] 15:	return_val cmt
         [0x10] 16:	ret

func:@109 [std#int.$operator!=] in file: lib/support//0.2.587//int.sharp:73:24: note:  
		    public def operator!=(var num) : var {
		                       ^


$operator!=:
line: 73 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	loadl ebx, fp+1
         [0x7] 7:	movr egx, ebx
         [0x8] 8:	loadval ebx
         [0x9] 9:	tne ebx, egx
         [0xa] 10:	movr ebx, cmt
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@110 [std#int.$operator!=] in file: lib/support//0.2.587//int.sharp:77:24: note:  
		    public def operator!=(integer num) : var {
		                       ^


$operator!=:
line: 77 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 egx, adx
         [0xc] 12:	loadval ebx
         [0xd] 13:	tne ebx, egx
         [0xe] 14:	movr ebx, cmt
         [0xf] 15:	return_val cmt
         [0x10] 16:	ret

func:@111 [std#int.$operator<] in file: lib/support//0.2.587//int.sharp:81:24: note:  
		    public def operator<(var num) : var {
		                       ^


$operator<:
line: 81 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr egx, ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lt ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@112 [std#int.$operator<] in file: lib/support//0.2.587//int.sharp:85:24: note:  
		    public def operator<(integer num) : var {
		                       ^


$operator<:
line: 85 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	chklen adx
         [0x5] 5:	iaload_2 egx, adx
         [0x6] 6:	movl 0
         [0x7] 7:	movn #0
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 ebx, adx
         [0xc] 12:	lt ebx, egx
         [0xd] 13:	movr ebx, cmt
         [0xe] 14:	return_val cmt
         [0xf] 15:	ret

func:@113 [std#int.$operator>] in file: lib/support//0.2.587//int.sharp:89:24: note:  
		    public def operator>(var num) : var {
		                       ^


$operator>:
line: 89 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr egx, ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	gt ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@114 [std#int.$operator>] in file: lib/support//0.2.587//int.sharp:93:24: note:  
		    public def operator>(integer num) : var {
		                       ^


$operator>:
line: 93 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	chklen adx
         [0x5] 5:	iaload_2 egx, adx
         [0x6] 6:	movl 0
         [0x7] 7:	movn #0
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 ebx, adx
         [0xc] 12:	gt ebx, egx
         [0xd] 13:	movr ebx, cmt
         [0xe] 14:	return_val cmt
         [0xf] 15:	ret

func:@115 [std#int.$operator<=] in file: lib/support//0.2.587//int.sharp:97:24: note:  
		    public def operator<=(var num) : var {
		                       ^


$operator<=:
line: 97 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr egx, ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lte ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@116 [std#int.$operator<=] in file: lib/support//0.2.587//int.sharp:101:24: note:  
		    public def operator<=(integer num) : var {
		                       ^


$operator<=:
line: 101 [0x0] 0:	movl 1
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	movl 0
          [0x7] 7:	movn #0
          [0x8] 8:	movi #0, adx
          [0xa] 10:	chklen adx
          [0xb] 11:	iaload_2 ebx, adx
          [0xc] 12:	lte ebx, egx
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	return_val cmt
          [0xf] 15:	ret

func:@117 [std#int.$operator>=] in file: lib/support//0.2.587//int.sharp:105:24: note:  
		    public def operator>=(var num) : var {
		                       ^


$operator>=:
line: 105 [0x0] 0:	loadl ebx, fp+1
          [0x1] 1:	movr egx, ebx
          [0x2] 2:	movl 0
          [0x3] 3:	movn #0
          [0x4] 4:	movi #0, adx
          [0x6] 6:	chklen adx
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	gte ebx, egx
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	return_val cmt
          [0xb] 11:	ret

func:@118 [std#int.$operator>=] in file: lib/support//0.2.587//int.sharp:109:24: note:  
		    public def operator>=(integer num) : var {
		                       ^


$operator>=:
line: 109 [0x0] 0:	movl 1
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	movl 0
          [0x7] 7:	movn #0
          [0x8] 8:	movi #0, adx
          [0xa] 10:	chklen adx
          [0xb] 11:	iaload_2 ebx, adx
          [0xc] 12:	gte ebx, egx
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	return_val cmt
          [0xf] 15:	ret

func:@119 [std#int.$operator++] in file: lib/support//0.2.587//int.sharp:113:24: note:  
		    public def operator++(var num) : var { // post inc i++
		                       ^


$operator++:
line: 113 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	smovr_2 ebx, fp+2
line: 114 [0x7] 7:	movi #1, ebx
          [0x9] 9:	rstore ebx
          [0xa] 10:	movl 0
          [0xb] 11:	movn #0
          [0xc] 12:	movi #0, adx
          [0xe] 14:	chklen adx
          [0xf] 15:	iaload_2 ebx, adx
          [0x10] 16:	loadval egx
          [0x11] 17:	add ebx, egx -> ebx
          [0x13] 19:	rstore ebx
          [0x14] 20:	loadval ebx
          [0x15] 21:	mov32 ebx, ebx
          [0x16] 22:	nop
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 0
          [0x19] 25:	movn #0
          [0x1a] 26:	movi #0, adx
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	rmov adx, ecx
line: 115 [0x1e] 30:	loadl ebx, fp+2
          [0x1f] 31:	return_val ebx
          [0x20] 32:	ret

func:@120 [std#int.$operator++] in file: lib/support//0.2.587//int.sharp:119:24: note:  
		    public def operator++() : var { // pre inc ++i
		                       ^


$operator++:
line: 119 [0x0] 0:	movi #1, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #0
          [0x5] 5:	movi #0, adx
          [0x7] 7:	chklen adx
          [0x8] 8:	iaload_2 ebx, adx
          [0x9] 9:	loadval egx
          [0xa] 10:	add ebx, egx -> ebx
          [0xc] 12:	rstore ebx
          [0xd] 13:	loadval ebx
          [0xe] 14:	mov32 ebx, ebx
          [0xf] 15:	nop
          [0x10] 16:	rstore ebx
          [0x11] 17:	movl 0
          [0x12] 18:	movn #0
          [0x13] 19:	movi #0, adx
          [0x15] 21:	loadval ecx
          [0x16] 22:	rmov adx, ecx
          [0x17] 23:	return_val ebx
          [0x18] 24:	ret

func:@121 [std#int.$operator--] in file: lib/support//0.2.587//int.sharp:123:24: note:  
		    public def operator--(var num) : var {
		                       ^


$operator--:
line: 123 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	smovr_2 ebx, fp+2
line: 124 [0x7] 7:	movi #1, ebx
          [0x9] 9:	rstore ebx
          [0xa] 10:	movl 0
          [0xb] 11:	movn #0
          [0xc] 12:	movi #0, adx
          [0xe] 14:	chklen adx
          [0xf] 15:	iaload_2 ebx, adx
          [0x10] 16:	loadval egx
          [0x11] 17:	sub ebx, egx -> ebx
          [0x13] 19:	rstore ebx
          [0x14] 20:	loadval ebx
          [0x15] 21:	mov32 ebx, ebx
          [0x16] 22:	nop
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 0
          [0x19] 25:	movn #0
          [0x1a] 26:	movi #0, adx
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	rmov adx, ecx
line: 125 [0x1e] 30:	loadl ebx, fp+2
          [0x1f] 31:	return_val ebx
          [0x20] 32:	ret

func:@122 [std#int.$operator--] in file: lib/support//0.2.587//int.sharp:129:24: note:  
		    public def operator--() : var {
		                       ^


$operator--:
line: 129 [0x0] 0:	movi #1, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #0
          [0x5] 5:	movi #0, adx
          [0x7] 7:	chklen adx
          [0x8] 8:	iaload_2 ebx, adx
          [0x9] 9:	loadval egx
          [0xa] 10:	sub ebx, egx -> ebx
          [0xc] 12:	rstore ebx
          [0xd] 13:	loadval ebx
          [0xe] 14:	mov32 ebx, ebx
          [0xf] 15:	nop
          [0x10] 16:	rstore ebx
          [0x11] 17:	movl 0
          [0x12] 18:	movn #0
          [0x13] 19:	movi #0, adx
          [0x15] 21:	loadval ecx
          [0x16] 22:	rmov adx, ecx
          [0x17] 23:	return_val ebx
          [0x18] 24:	ret

func:@123 [std#int.toString] in file: lib/support//0.2.587//int.sharp:133:24: note:  
		    public def delegate::toString() : string {
		                       ^


toString:
line: 133 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	newstr @226 // ""
          [0x2] 2:	call @558 // <std#string.string(var[])>
          [0x3] 3:	movl 0
          [0x4] 4:	movn #0
          [0x5] 5:	movi #0, adx
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	rstore ebx
          [0x9] 9:	call @579 // <std#string.$operator+(var)>
          [0xa] 10:	movsl #0
          [0xb] 11:	returnobj
          [0xc] 12:	ret

func:@124 [std#int.int] in file: lib/support//0.2.587//int.sharp:3:13: note:  
		public class int base integer {
		            ^


int:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@125 [std#integer.integer] in file: lib/support//0.2.587//integer.sharp:11:19: note:  
		    public integer(var num) {
		                  ^


integer:
line: 11 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	nop
         [0x2] 2:	rstore ebx
         [0x3] 3:	movl 0
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	loadval ecx
         [0x8] 8:	rmov adx, ecx
         [0x9] 9:	movl 0
         [0xa] 10:	returnobj
         [0xb] 11:	ret

func:@126 [std#integer.integer] in file: lib/support//0.2.587//integer.sharp:15:19: note:  
		    public integer(integer num) {
		                  ^


integer:
line: 15 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	nop
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	rstore ebx
         [0x7] 7:	movl 0
         [0x8] 8:	movn #0
         [0x9] 9:	movi #0, adx
         [0xb] 11:	loadval ecx
         [0xc] 12:	rmov adx, ecx
         [0xd] 13:	movl 0
         [0xe] 14:	returnobj
         [0xf] 15:	ret

func:@127 [std#integer.getValue] in file: lib/support//0.2.587//integer.sharp:19:24: note:  
		    public def getValue() : var {
		                       ^


getValue:
line: 19 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@128 [std#integer.hash] in file: lib/support//0.2.587//integer.sharp:23:17: note:  
		    def delegate::hash() : var {
		                ^


hash:
line: 23 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@129 [std#integer.$operator!=] in file: lib/support//0.2.587//integer.sharp:27:24: note:  
		    public def operator!=(integer num) : var {
		                       ^


$operator!=:
line: 27 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 egx, adx
         [0xc] 12:	loadval ebx
         [0xd] 13:	tne ebx, egx
         [0xe] 14:	movr ebx, cmt
         [0xf] 15:	return_val cmt
         [0x10] 16:	ret

func:@130 [std#integer.$operator==] in file: lib/support//0.2.587//integer.sharp:31:24: note:  
		    public def operator==(integer num) : var {
		                       ^


$operator==:
line: 31 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 egx, adx
         [0xc] 12:	loadval ebx
         [0xd] 13:	test ebx, egx
         [0xe] 14:	movr ebx, cmt
         [0xf] 15:	return_val cmt
         [0x10] 16:	ret

func:@131 [std#integer.toString] in file: lib/support//0.2.587//integer.sharp:35:24: note:  
		    public def delegate::toString() : string {
		                       ^


toString:
line: 35 [0x0] 0:	new_class @46 // std#string
         [0x1] 1:	newstr @226 // ""
         [0x2] 2:	call @558 // <std#string.string(var[])>
         [0x3] 3:	movl 0
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @579 // <std#string.$operator+(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@132 [std#integer.integer] in file: lib/support//0.2.587//integer.sharp:6:13: note:  
		public class integer {
		            ^


integer:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@133 [std#InvalidOperationException.InvalidOperationException] in file: lib/support//0.2.587//InvalidOperationException.sharp:8:39: note:  
		      public InvalidOperationException(var[] message) {
		                                      ^


InvalidOperationException:
line: 8 [0x0] 0:	movl 0
        [0x1] 1:	pushobj
        [0x2] 2:	movl 1
        [0x3] 3:	pushobj
        [0x4] 4:	call @81 // <std#Exception.Exception(var[])>
        [0x5] 5:	pop
        [0x6] 6:	movl 0
        [0x7] 7:	returnobj
        [0x8] 8:	ret

func:@134 [std#InvalidOperationException.InvalidOperationException] in file: lib/support//0.2.587//InvalidOperationException.sharp:12:39: note:  
		      public InvalidOperationException(string message) {
		                                      ^


InvalidOperationException:
line: 12 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	pushobj
         [0x4] 4:	call @82 // <std#Exception.Exception(std#string)>
         [0x5] 5:	pop
         [0x6] 6:	movl 0
         [0x7] 7:	returnobj
         [0x8] 8:	ret

func:@135 [std#InvalidOperationException.InvalidOperationException] in file: lib/support//0.2.587//InvalidOperationException.sharp:6:13: note:  
		public class InvalidOperationException base Exception {
		            ^


InvalidOperationException:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@136 [std.io#File.File] in file: lib/support//0.2.587//io//File.sharp:25:16: note:  
		    public File(string path) {
		               ^


File:
line: 25 [0x0] 0:	movl 1
         [0x1] 1:	checknull
         [0x2] 2:	movr ebx, cmt
         [0x3] 3:	movi #11, adx
         [0x5] 5:	ifne
line: 26 [0x6] 6:	new_class @35 // std#NullptrException
         [0x7] 7:	newstr @284 // "file path cannot be null"
         [0x8] 8:	call @402 // <std#NullptrException.NullptrException(var[])>
         [0x9] 9:	throw 
         [0xa] 10:	nop
         [0xb] 11:	nop
line: 27 [0xc] 12:	movg @17 // @std.io#File
         [0xd] 13:	movn #0
         [0xe] 14:	pushobj
         [0xf] 15:	movl 1
         [0x10] 16:	pushobj
         [0x11] 17:	invoke_delegate 1, 1
         [0x12] 18:	movl 0
         [0x13] 19:	movn #1
         [0x14] 20:	popobj
         [0x15] 21:	movl 0
         [0x16] 22:	returnobj
         [0x17] 23:	ret

func:@137 [std.io#File.File] in file: lib/support//0.2.587//io//File.sharp:31:16: note:  
		    public File(var[] path) {
		               ^


File:
line: 31 [0x0] 0:	movl 1
         [0x1] 1:	checknull
         [0x2] 2:	movr ebx, cmt
         [0x3] 3:	movi #11, adx
         [0x5] 5:	ifne
line: 32 [0x6] 6:	new_class @35 // std#NullptrException
         [0x7] 7:	newstr @284 // "file path cannot be null"
         [0x8] 8:	call @402 // <std#NullptrException.NullptrException(var[])>
         [0x9] 9:	throw 
         [0xa] 10:	nop
         [0xb] 11:	nop
line: 33 [0xc] 12:	movg @17 // @std.io#File
         [0xd] 13:	movn #0
         [0xe] 14:	pushobj
         [0xf] 15:	new_class @46 // std#string
         [0x10] 16:	newstr @226 // ""
         [0x11] 17:	call @558 // <std#string.string(var[])>
         [0x12] 18:	movl 1
         [0x13] 19:	pushobj
         [0x14] 20:	call @572 // <std#string.$operator+(var[])>
         [0x15] 21:	invoke_delegate 1, 1
         [0x16] 22:	movl 0
         [0x17] 23:	movn #1
         [0x18] 24:	popobj
         [0x19] 25:	movl 0
         [0x1a] 26:	returnobj
         [0x1b] 27:	ret

func:@138 [std.io#File.getName] in file: lib/support//0.2.587//io//File.sharp:37:23: note:  
		    public def getName() : string {
		                      ^


getName:
line: 37 [0x0] 0:	movl 0
         [0x1] 1:	movn #1
         [0x2] 2:	checknull
         [0x3] 3:	movr ebx, cmt
         [0x4] 4:	movr ebx, cmt
         [0x5] 5:	skpe 13 // pc = 18
         [0x6] 6:	movl 0
         [0x7] 7:	movn #1
         [0x8] 8:	pushobj
         [0x9] 9:	call @595 // <std#string.size()>
         [0xa] 10:	movi #0, ebx
         [0xc] 12:	movr egx, ebx
         [0xd] 13:	loadval ebx
         [0xe] 14:	test ebx, egx
         [0xf] 15:	movr ebx, cmt
         [0x10] 16:	cmp ebx, 1
         [0x11] 17:	movr ebx, cmt
         [0x12] 18:	movr cmt, ebx
         [0x13] 19:	movi #29, adx
         [0x15] 21:	ifne
line: 38 [0x16] 22:	new_class @46 // std#string
         [0x17] 23:	newstr @226 // ""
         [0x18] 24:	call @558 // <std#string.string(var[])>
         [0x19] 25:	movsl #0
         [0x1a] 26:	returnobj
         [0x1b] 27:	ret
         [0x1c] 28:	nop
         [0x1d] 29:	nop
line: 41 [0x1e] 30:	new_class @46 // std#string
         [0x1f] 31:	newstr @226 // ""
         [0x20] 32:	call @558 // <std#string.string(var[])>
         [0x21] 33:	popl 1
line: 42 [0x22] 34:	istorel 0, fp+2
line: 44 [0x24] 36:	movi #1, ebx
         [0x26] 38:	rstore ebx
         [0x27] 39:	movl 0
         [0x28] 40:	movn #1
         [0x29] 41:	pushobj
         [0x2a] 42:	call @595 // <std#string.size()>
         [0x2b] 43:	loadval ebx
         [0x2c] 44:	loadval ecx
         [0x2d] 45:	sub ebx, ecx -> ebx
         [0x2f] 47:	rstore ebx
         [0x30] 48:	loadval ebx
         [0x31] 49:	smovr_2 ebx, fp+3
         [0x32] 50:	movi #0, ebx
         [0x34] 52:	movr egx, ebx
         [0x35] 53:	loadl ebx, fp+3
         [0x36] 54:	gt ebx, egx
         [0x37] 55:	movr ebx, cmt
         [0x38] 56:	movi #95, adx
         [0x3a] 58:	ifne
line: 45 [0x3b] 59:	movl 0
         [0x3c] 60:	movn #1
         [0x3d] 61:	pushobj
         [0x3e] 62:	loadl ebx, fp+3
         [0x3f] 63:	rstore ebx
         [0x40] 64:	call @569 // <std#string.at(var)>
         [0x41] 65:	movg @17 // @std.io#File
         [0x42] 66:	movn #2
         [0x43] 67:	movi #0, adx
         [0x45] 69:	chklen adx
         [0x46] 70:	iaload_2 egx, adx
         [0x47] 71:	loadval ebx
         [0x48] 72:	test ebx, egx
         [0x49] 73:	movr ebx, cmt
         [0x4a] 74:	movi #89, adx
         [0x4c] 76:	ifne
line: 46 [0x4d] 77:	movi #1, ebx
         [0x4f] 79:	rstore ebx
         [0x50] 80:	loadl ebx, fp+3
         [0x51] 81:	loadval egx
         [0x52] 82:	add ebx, egx -> ebx
         [0x54] 84:	rstore ebx
         [0x55] 85:	loadval ebx
         [0x56] 86:	smovr_2 ebx, fp+2
line: 47 [0x57] 87:	goto @95
         [0x58] 88:	nop
         [0x59] 89:	nop
         [0x5a] 90:	loadl ebx, fp+3
         [0x5b] 91:	movi #1, ecx
         [0x5d] 93:	subl ecx, @3
         [0x5e] 94:	goto @50
line: 50 [0x5f] 95:	loadl ebx, fp+2
         [0x60] 96:	smovr_2 ebx, fp+4
         [0x61] 97:	movl 0
         [0x62] 98:	movn #1
         [0x63] 99:	pushobj
         [0x64] 100:	call @595 // <std#string.size()>
         [0x65] 101:	loadval egx
         [0x66] 102:	loadl ebx, fp+4
         [0x67] 103:	lt ebx, egx
         [0x68] 104:	movr ebx, cmt
         [0x69] 105:	movi #135, adx
         [0x6b] 107:	ifne
line: 51 [0x6c] 108:	movi #1, ebx
         [0x6e] 110:	newarry ebx
         [0x6f] 111:	movl 0
         [0x70] 112:	movn #1
         [0x71] 113:	pushobj
         [0x72] 114:	loadl ebx, fp+4
         [0x73] 115:	rstore ebx
         [0x74] 116:	call @569 // <std#string.at(var)>
         [0x75] 117:	loadval ebx
         [0x76] 118:	movsl #0
         [0x77] 119:	movi #0, adx
         [0x79] 121:	rmov adx, ebx
         [0x7a] 122:	movl 5
         [0x7b] 123:	popobj
line: 52 [0x7c] 124:	movl 1
         [0x7d] 125:	pushobj
         [0x7e] 126:	movl 5
         [0x7f] 127:	pushobj
         [0x80] 128:	call @582 // <std#string.$operator+=(var[])>
         [0x81] 129:	pop
         [0x82] 130:	loadl ebx, fp+4
         [0x83] 131:	movi #1, ecx
         [0x85] 133:	addl ecx, @4
         [0x86] 134:	goto @97
line: 55 [0x87] 135:	movl 1
         [0x88] 136:	returnobj
         [0x89] 137:	ret

func:@139 [std.io#File.updatePath] in file: lib/support//0.2.587//io//File.sharp:59:23: note:  
			public def updatePath(string path) {
		                      ^


updatePath:
line: 59 [0x0] 0:	movl 1
         [0x1] 1:	checknull
         [0x2] 2:	movr ebx, cmt
         [0x3] 3:	movi #11, adx
         [0x5] 5:	ifne
line: 60 [0x6] 6:	new_class @35 // std#NullptrException
         [0x7] 7:	newstr @284 // "file path cannot be null"
         [0x8] 8:	call @402 // <std#NullptrException.NullptrException(var[])>
         [0x9] 9:	throw 
         [0xa] 10:	nop
         [0xb] 11:	nop
line: 61 [0xc] 12:	movg @17 // @std.io#File
         [0xd] 13:	movn #0
         [0xe] 14:	pushobj
         [0xf] 15:	movl 1
         [0x10] 16:	pushobj
         [0x11] 17:	invoke_delegate 1, 1
         [0x12] 18:	movl 0
         [0x13] 19:	movn #1
         [0x14] 20:	popobj
         [0x15] 21:	ret

func:@140 [std.io#File.getParentFile] in file: lib/support//0.2.587//io//File.sharp:65:29: note:  
		    public def getParentFile() : File {
		                            ^


getParentFile:
line: 65 [0x0] 0:	movl 0
         [0x1] 1:	movn #1
         [0x2] 2:	checknull
         [0x3] 3:	movr ebx, cmt
         [0x4] 4:	movr ebx, cmt
         [0x5] 5:	skpe 13 // pc = 18
         [0x6] 6:	movl 0
         [0x7] 7:	movn #1
         [0x8] 8:	pushobj
         [0x9] 9:	call @595 // <std#string.size()>
         [0xa] 10:	movi #0, ebx
         [0xc] 12:	movr egx, ebx
         [0xd] 13:	loadval ebx
         [0xe] 14:	test ebx, egx
         [0xf] 15:	movr ebx, cmt
         [0x10] 16:	cmp ebx, 1
         [0x11] 17:	movr ebx, cmt
         [0x12] 18:	movr cmt, ebx
         [0x13] 19:	movi #26, adx
         [0x15] 21:	ifne
line: 66 [0x16] 22:	movl 0
         [0x17] 23:	del
         [0x18] 24:	ret
         [0x19] 25:	nop
         [0x1a] 26:	nop
line: 69 [0x1b] 27:	new_class @46 // std#string
         [0x1c] 28:	newstr @226 // ""
         [0x1d] 29:	call @558 // <std#string.string(var[])>
         [0x1e] 30:	popl 1
line: 70 [0x1f] 31:	istorel 0, fp+2
line: 72 [0x21] 33:	movi #1, ebx
         [0x23] 35:	rstore ebx
         [0x24] 36:	movl 0
         [0x25] 37:	movn #1
         [0x26] 38:	pushobj
         [0x27] 39:	call @595 // <std#string.size()>
         [0x28] 40:	loadval ebx
         [0x29] 41:	loadval ecx
         [0x2a] 42:	sub ebx, ecx -> ebx
         [0x2c] 44:	rstore ebx
         [0x2d] 45:	loadval ebx
         [0x2e] 46:	smovr_2 ebx, fp+3
         [0x2f] 47:	movi #0, ebx
         [0x31] 49:	movr egx, ebx
         [0x32] 50:	loadl ebx, fp+3
         [0x33] 51:	gt ebx, egx
         [0x34] 52:	movr ebx, cmt
         [0x35] 53:	movi #84, adx
         [0x37] 55:	ifne
line: 73 [0x38] 56:	movl 0
         [0x39] 57:	movn #1
         [0x3a] 58:	pushobj
         [0x3b] 59:	loadl ebx, fp+3
         [0x3c] 60:	rstore ebx
         [0x3d] 61:	call @569 // <std#string.at(var)>
         [0x3e] 62:	movg @17 // @std.io#File
         [0x3f] 63:	movn #2
         [0x40] 64:	movi #0, adx
         [0x42] 66:	chklen adx
         [0x43] 67:	iaload_2 egx, adx
         [0x44] 68:	loadval ebx
         [0x45] 69:	test ebx, egx
         [0x46] 70:	movr ebx, cmt
         [0x47] 71:	movi #78, adx
         [0x49] 73:	ifne
line: 74 [0x4a] 74:	loadl ebx, fp+3
         [0x4b] 75:	smovr_2 ebx, fp+2
line: 75 [0x4c] 76:	goto @84
         [0x4d] 77:	nop
         [0x4e] 78:	nop
         [0x4f] 79:	loadl ebx, fp+3
         [0x50] 80:	movi #1, ecx
         [0x52] 82:	subl ecx, @3
         [0x53] 83:	goto @47
line: 78 [0x54] 84:	istorel 0, fp+4
         [0x56] 86:	loadl ebx, fp+2
         [0x57] 87:	movr egx, ebx
         [0x58] 88:	loadl ebx, fp+4
         [0x59] 89:	lt ebx, egx
         [0x5a] 90:	movr ebx, cmt
         [0x5b] 91:	movi #121, adx
         [0x5d] 93:	ifne
line: 79 [0x5e] 94:	movi #1, ebx
         [0x60] 96:	newarry ebx
         [0x61] 97:	movl 0
         [0x62] 98:	movn #1
         [0x63] 99:	pushobj
         [0x64] 100:	loadl ebx, fp+4
         [0x65] 101:	rstore ebx
         [0x66] 102:	call @569 // <std#string.at(var)>
         [0x67] 103:	loadval ebx
         [0x68] 104:	movsl #0
         [0x69] 105:	movi #0, adx
         [0x6b] 107:	rmov adx, ebx
         [0x6c] 108:	movl 5
         [0x6d] 109:	popobj
line: 80 [0x6e] 110:	movl 1
         [0x6f] 111:	pushobj
         [0x70] 112:	movl 5
         [0x71] 113:	pushobj
         [0x72] 114:	call @582 // <std#string.$operator+=(var[])>
         [0x73] 115:	pop
         [0x74] 116:	loadl ebx, fp+4
         [0x75] 117:	movi #1, ecx
         [0x77] 119:	addl ecx, @4
         [0x78] 120:	goto @86
line: 83 [0x79] 121:	new_class @17 // std.io#File
         [0x7a] 122:	movl 1
         [0x7b] 123:	pushobj
         [0x7c] 124:	call @136 // <std.io#File.File(std#string)>
         [0x7d] 125:	movsl #0
         [0x7e] 126:	returnobj
         [0x7f] 127:	ret

func:@141 [std.io#File.getPath] in file: lib/support//0.2.587//io//File.sharp:87:23: note:  
		    public def getPath() : string {
		                      ^


getPath:
line: 87 [0x0] 0:	movl 0
         [0x1] 1:	movn #1
         [0x2] 2:	returnobj
         [0x3] 3:	ret

func:@142 [std.io#File.getAbsolutePath] in file: lib/support//0.2.587//io//File.sharp:104:31: note:  
		    public def getAbsolutePath() : string {
		                              ^


getAbsolutePath:
line: 104 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	pushobj
          [0x5] 5:	call @175 // <std.io#FileSystem.resolve(std.io#File)>
          [0x6] 6:	movsl #0
          [0x7] 7:	returnobj
          [0x8] 8:	ret

func:@143 [std.io#File.isReadable] in file: lib/support//0.2.587//io//File.sharp:113:26: note:  
		    public def isReadable() : var {
		                         ^


isReadable:
line: 113 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	pushobj
          [0x5] 5:	movi #4, ebx
          [0x7] 7:	rstore ebx
          [0x8] 8:	invoke_delegate 3, 2
          [0x9] 9:	movi #0, ebx
          [0xb] 11:	movr egx, ebx
          [0xc] 12:	loadval ebx
          [0xd] 13:	test ebx, egx
          [0xe] 14:	movr ebx, cmt
          [0xf] 15:	return_val cmt
          [0x10] 16:	ret

func:@144 [std.io#File.isWriteable] in file: lib/support//0.2.587//io//File.sharp:122:27: note:  
		    public def isWriteable() : var {
		                          ^


isWriteable:
line: 122 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	pushobj
          [0x5] 5:	movi #2, ebx
          [0x7] 7:	rstore ebx
          [0x8] 8:	invoke_delegate 3, 2
          [0x9] 9:	movi #0, ebx
          [0xb] 11:	movr egx, ebx
          [0xc] 12:	loadval ebx
          [0xd] 13:	test ebx, egx
          [0xe] 14:	movr ebx, cmt
          [0xf] 15:	return_val cmt
          [0x10] 16:	ret

func:@145 [std.io#File.exists] in file: lib/support//0.2.587//io//File.sharp:131:22: note:  
		    public def exists() : var {
		                     ^


exists:
line: 131 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	pushobj
          [0x5] 5:	movi #0, ebx
          [0x7] 7:	rstore ebx
          [0x8] 8:	invoke_delegate 3, 2
          [0x9] 9:	movi #0, ebx
          [0xb] 11:	movr egx, ebx
          [0xc] 12:	loadval ebx
          [0xd] 13:	test ebx, egx
          [0xe] 14:	movr ebx, cmt
          [0xf] 15:	return_val cmt
          [0x10] 16:	ret

func:@146 [std.io#File.isDirectory] in file: lib/support//0.2.587//io//File.sharp:140:27: note:  
		    public def isDirectory() : var {
		                          ^


isDirectory:
line: 140 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	pushobj
          [0x5] 5:	invoke_delegate 2, 1
          [0x6] 6:	loadval ebx
          [0x7] 7:	rstore ebx
          [0x8] 8:	movi #4, ebx
          [0xa] 10:	loadval ecx
          [0xb] 11:	uand ecx, ebx
          [0xc] 12:	movr ebx, cmt
          [0xd] 13:	rstore ebx
          [0xe] 14:	movi #0, ebx
          [0x10] 16:	movr egx, ebx
          [0x11] 17:	loadval ebx
          [0x12] 18:	tne ebx, egx
          [0x13] 19:	movr ebx, cmt
          [0x14] 20:	return_val cmt
          [0x15] 21:	ret

func:@147 [std.io#File.isFile] in file: lib/support//0.2.587//io//File.sharp:151:22: note:  
		    public def isFile() : var {
		                     ^


isFile:
line: 151 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	pushobj
          [0x5] 5:	invoke_delegate 2, 1
          [0x6] 6:	loadval ebx
          [0x7] 7:	rstore ebx
          [0x8] 8:	movi #2, ebx
          [0xa] 10:	loadval ecx
          [0xb] 11:	uand ecx, ebx
          [0xc] 12:	movr ebx, cmt
          [0xd] 13:	rstore ebx
          [0xe] 14:	movi #0, ebx
          [0x10] 16:	movr egx, ebx
          [0x11] 17:	loadval ebx
          [0x12] 18:	tne ebx, egx
          [0x13] 19:	movr ebx, cmt
          [0x14] 20:	return_val cmt
          [0x15] 21:	ret

func:@148 [std.io#File.isHidden] in file: lib/support//0.2.587//io//File.sharp:163:24: note:  
		    public def isHidden() : var {
		                       ^


isHidden:
line: 163 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	pushobj
          [0x5] 5:	invoke_delegate 2, 1
          [0x6] 6:	loadval ebx
          [0x7] 7:	rstore ebx
          [0x8] 8:	movi #8, ebx
          [0xa] 10:	loadval ecx
          [0xb] 11:	uand ecx, ebx
          [0xc] 12:	movr ebx, cmt
          [0xd] 13:	rstore ebx
          [0xe] 14:	movi #0, ebx
          [0x10] 16:	movr egx, ebx
          [0x11] 17:	loadval ebx
          [0x12] 18:	tne ebx, egx
          [0x13] 19:	movr ebx, cmt
          [0x14] 20:	return_val cmt
          [0x15] 21:	ret

func:@149 [std.io#File.lastModified] in file: lib/support//0.2.587//io//File.sharp:172:28: note:  
		    public def lastModified() : var {
		                           ^


lastModified:
line: 172 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	pushobj
          [0x5] 5:	call @177 // <std.io#FileSystem.getLastModifiedTime(std.io#File)>
          [0x6] 6:	loadval ebx
          [0x7] 7:	return_val ebx
          [0x8] 8:	ret

func:@150 [std.io#File.length] in file: lib/support//0.2.587//io//File.sharp:181:22: note:  
		    public def length() : var {
		                     ^


length:
line: 181 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	pushobj
          [0x5] 5:	call @178 // <std.io#FileSystem.getLength(std.io#File)>
          [0x6] 6:	loadval ebx
          [0x7] 7:	return_val ebx
          [0x8] 8:	ret

func:@151 [std.io#File.create] in file: lib/support//0.2.587//io//File.sharp:196:22: note:  
		    public def create() {
		                     ^


create:
line: 196 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	movn #1
          [0x5] 5:	pushobj
          [0x6] 6:	call @179 // <std.io#FileSystem.createFile(std#string)>
          [0x7] 7:	ret

func:@152 [std.io#File.delete] in file: lib/support//0.2.587//io//File.sharp:206:22: note:  
		    public def delete() : var {
		                     ^


delete:
line: 206 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	pushobj
          [0x5] 5:	call @181 // <std.io#FileSystem.delete(std.io#File)>
          [0x6] 6:	movi #0, ebx
          [0x8] 8:	movr egx, ebx
          [0x9] 9:	loadval ebx
          [0xa] 10:	test ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	return_val cmt
          [0xd] 13:	ret

func:@153 [std.io#File.list] in file: lib/support//0.2.587//io//File.sharp:222:20: note:  
		    public def list() : string[] {
		                   ^


list:
line: 222 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	pushobj
          [0x5] 5:	call @182 // <std.io#FileSystem.list(std.io#File)>
          [0x6] 6:	movsl #0
          [0x7] 7:	returnobj
          [0x8] 8:	ret

func:@154 [std.io#File.mkdir] in file: lib/support//0.2.587//io//File.sharp:230:21: note:  
		    public def mkdir() : var {
		                    ^


mkdir:
line: 230 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	pushobj
          [0x5] 5:	call @183 // <std.io#FileSystem.createDirectory(std.io#File)>
          [0x6] 6:	movi #0, ebx
          [0x8] 8:	movr egx, ebx
          [0x9] 9:	loadval ebx
          [0xa] 10:	test ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	return_val cmt
          [0xd] 13:	ret

func:@155 [std.io#File.renameTo] in file: lib/support//0.2.587//io//File.sharp:249:24: note:  
		    public def renameTo(File dest) : var {
		                       ^


renameTo:
line: 249 [0x0] 0:	movl 1
          [0x1] 1:	checknull
          [0x2] 2:	movr ebx, cmt
          [0x3] 3:	movi #10, adx
          [0x5] 5:	ifne
line: 250 [0x6] 6:	new_class @35 // std#NullptrException
          [0x7] 7:	call @404 // <std#NullptrException.NullptrException()>
          [0x8] 8:	throw 
          [0x9] 9:	nop
          [0xa] 10:	nop
line: 252 [0xb] 11:	movg @17 // @std.io#File
          [0xc] 12:	movn #0
          [0xd] 13:	pushobj
          [0xe] 14:	movl 0
          [0xf] 15:	pushobj
          [0x10] 16:	movl 1
          [0x11] 17:	pushobj
          [0x12] 18:	call @184 // <std.io#FileSystem.rename(std.io#File,std.io#File)>
          [0x13] 19:	loadval ebx
          [0x14] 20:	smovr_2 ebx, fp+2
line: 253 [0x15] 21:	loadl ebx, fp+2
          [0x16] 22:	rstore ebx
          [0x17] 23:	movi #0, ebx
          [0x19] 25:	movr egx, ebx
          [0x1a] 26:	loadval ebx
          [0x1b] 27:	test ebx, egx
          [0x1c] 28:	movr ebx, cmt
          [0x1d] 29:	movi #39, adx
          [0x1f] 31:	ifne
line: 254 [0x20] 32:	movl 1
          [0x21] 33:	pushobj
          [0x22] 34:	call @141 // <std.io#File.getPath()>
          [0x23] 35:	movl 0
          [0x24] 36:	movn #1
          [0x25] 37:	popobj
          [0x26] 38:	nop
          [0x27] 39:	nop
line: 256 [0x28] 40:	loadl ebx, fp+2
          [0x29] 41:	rstore ebx
          [0x2a] 42:	movi #0, ebx
          [0x2c] 44:	movr egx, ebx
          [0x2d] 45:	loadval ebx
          [0x2e] 46:	test ebx, egx
          [0x2f] 47:	movr ebx, cmt
          [0x30] 48:	return_val cmt
          [0x31] 49:	ret

func:@156 [std.io#File.setLastModified] in file: lib/support//0.2.587//io//File.sharp:272:31: note:  
		    public def setLastModified(var time) : var {
		                              ^


setLastModified:
line: 272 [0x0] 0:	movi #0, ebx
          [0x2] 2:	movr egx, ebx
          [0x3] 3:	loadl ebx, fp+1
          [0x4] 4:	lt ebx, egx
          [0x5] 5:	movr ebx, cmt
          [0x6] 6:	mov32 ebx, ebx
          [0x7] 7:	movr cmt, ebx
          [0x8] 8:	movi #16, adx
          [0xa] 10:	ifne
line: 272 [0xb] 11:	new_class @11 // std#IllegalArgumentException
          [0xc] 12:	newstr @285 // "Negative time"
          [0xd] 13:	call @84 // <std#IllegalArgumentException.IllegalArgumentException(var[])>
          [0xe] 14:	throw 
          [0xf] 15:	nop
          [0x10] 16:	nop
line: 273 [0x11] 17:	movg @17 // @std.io#File
          [0x12] 18:	movn #0
          [0x13] 19:	pushobj
          [0x14] 20:	movl 0
          [0x15] 21:	pushobj
          [0x16] 22:	loadl ebx, fp+1
          [0x17] 23:	rstore ebx
          [0x18] 24:	call @187 // <std.io#FileSystem.setLastModifiedTime(std.io#File,var)>
          [0x19] 25:	loadval ebx
          [0x1a] 26:	return_val ebx
          [0x1b] 27:	ret

func:@157 [std.io#File.setReadOnly] in file: lib/support//0.2.587//io//File.sharp:285:27: note:  
		    public def setReadOnly() : var {
		                          ^


setReadOnly:
line: 285 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	pushobj
          [0x5] 5:	call @188 // <std.io#FileSystem.setReadOnly(std.io#File)>
          [0x6] 6:	movi #0, ebx
          [0x8] 8:	movr egx, ebx
          [0x9] 9:	loadval ebx
          [0xa] 10:	test ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	return_val cmt
          [0xd] 13:	ret

func:@158 [std.io#File.setWritable] in file: lib/support//0.2.587//io//File.sharp:294:27: note:  
		    public def setWritable(var writable, var ownerOnly) : var {
		                          ^


setWritable:
line: 294 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	pushobj
          [0x5] 5:	movi #2, ebx
          [0x7] 7:	rstore ebx
          [0x8] 8:	loadl ebx, fp+1
          [0x9] 9:	rstore ebx
          [0xa] 10:	loadl ebx, fp+2
          [0xb] 11:	rstore ebx
          [0xc] 12:	call @176 // <std.io#FileSystem.setPermission(std.io#File,var,var,var)>
          [0xd] 13:	loadval ebx
          [0xe] 14:	return_val ebx
          [0xf] 15:	ret

func:@159 [std.io#File.setWritable] in file: lib/support//0.2.587//io//File.sharp:303:27: note:  
		    public def setWritable(var writable) : var {
		                          ^


setWritable:
line: 303 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	loadl ebx, fp+1
          [0x3] 3:	rstore ebx
          [0x4] 4:	movi #1, ebx
          [0x6] 6:	rstore ebx
          [0x7] 7:	call @158 // <std.io#File.setWritable(var,var)>
          [0x8] 8:	loadval ebx
          [0x9] 9:	return_val ebx
          [0xa] 10:	ret

func:@160 [std.io#File.setReadable] in file: lib/support//0.2.587//io//File.sharp:312:27: note:  
		    public def setReadable(var readable, var ownerOnly) : var {
		                          ^


setReadable:
line: 312 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	pushobj
          [0x5] 5:	movi #4, ebx
          [0x7] 7:	rstore ebx
          [0x8] 8:	loadl ebx, fp+1
          [0x9] 9:	rstore ebx
          [0xa] 10:	loadl ebx, fp+2
          [0xb] 11:	rstore ebx
          [0xc] 12:	call @176 // <std.io#FileSystem.setPermission(std.io#File,var,var,var)>
          [0xd] 13:	loadval ebx
          [0xe] 14:	return_val ebx
          [0xf] 15:	ret

func:@161 [std.io#File.setReadable] in file: lib/support//0.2.587//io//File.sharp:321:27: note:  
		    public def setReadable(var readable) : var {
		                          ^


setReadable:
line: 321 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	loadl ebx, fp+1
          [0x3] 3:	rstore ebx
          [0x4] 4:	movi #1, ebx
          [0x6] 6:	rstore ebx
          [0x7] 7:	call @160 // <std.io#File.setReadable(var,var)>
          [0x8] 8:	loadval ebx
          [0x9] 9:	return_val ebx
          [0xa] 10:	ret

func:@162 [std.io#File.setExecutable] in file: lib/support//0.2.587//io//File.sharp:330:29: note:  
		    public def setExecutable(var executable, var ownerOnly) : var {
		                            ^


setExecutable:
line: 330 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	pushobj
          [0x5] 5:	movi #1, ebx
          [0x7] 7:	rstore ebx
          [0x8] 8:	loadl ebx, fp+1
          [0x9] 9:	rstore ebx
          [0xa] 10:	loadl ebx, fp+2
          [0xb] 11:	rstore ebx
          [0xc] 12:	call @176 // <std.io#FileSystem.setPermission(std.io#File,var,var,var)>
          [0xd] 13:	loadval ebx
          [0xe] 14:	return_val ebx
          [0xf] 15:	ret

func:@163 [std.io#File.setExecutable] in file: lib/support//0.2.587//io//File.sharp:339:29: note:  
		    public def setExecutable(var executable) : var {
		                            ^


setExecutable:
line: 339 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	loadl ebx, fp+1
          [0x3] 3:	rstore ebx
          [0x4] 4:	movi #1, ebx
          [0x6] 6:	rstore ebx
          [0x7] 7:	call @162 // <std.io#File.setExecutable(var,var)>
          [0x8] 8:	loadval ebx
          [0x9] 9:	return_val ebx
          [0xa] 10:	ret

func:@164 [std.io#File.canExecute] in file: lib/support//0.2.587//io//File.sharp:348:26: note:  
		    public def canExecute() : var {
		                         ^


canExecute:
line: 348 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	pushobj
          [0x5] 5:	movi #1, ebx
          [0x7] 7:	rstore ebx
          [0x8] 8:	invoke_delegate 3, 2
          [0x9] 9:	loadval ebx
          [0xa] 10:	return_val ebx
          [0xb] 11:	ret

func:@165 [std.io#File.getTotalSpace] in file: lib/support//0.2.587//io//File.sharp:360:29: note:  
		    public def getTotalSpace() : var {
		                            ^


getTotalSpace:
line: 360 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	pushobj
          [0x5] 5:	movi #0, ebx
          [0x7] 7:	rstore ebx
          [0x8] 8:	call @189 // <std.io#FileSystem.getSpace(std.io#File,var)>
          [0x9] 9:	loadval ebx
          [0xa] 10:	return_val ebx
          [0xb] 11:	ret

func:@166 [std.io#File.getFreeSpace] in file: lib/support//0.2.587//io//File.sharp:369:28: note:  
		    public def getFreeSpace() : var {
		                           ^


getFreeSpace:
line: 369 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	pushobj
          [0x5] 5:	movi #1, ebx
          [0x7] 7:	rstore ebx
          [0x8] 8:	call @189 // <std.io#FileSystem.getSpace(std.io#File,var)>
          [0x9] 9:	loadval ebx
          [0xa] 10:	return_val ebx
          [0xb] 11:	ret

func:@167 [std.io#File.getUsableSpace] in file: lib/support//0.2.587//io//File.sharp:392:30: note:  
		    public def getUsableSpace() : var {
		                             ^


getUsableSpace:
line: 392 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	pushobj
          [0x5] 5:	movi #2, ebx
          [0x7] 7:	rstore ebx
          [0x8] 8:	call @189 // <std.io#FileSystem.getSpace(std.io#File,var)>
          [0x9] 9:	loadval ebx
          [0xa] 10:	return_val ebx
          [0xb] 11:	ret

func:@168 [std.io#File.generateTempFile] in file: lib/support//0.2.587//io//File.sharp:399:39: note:  
		    private static def generateTempFile(string prefix, string suffix, File dir) : File
		                                      ^


generateTempFile:
line: 410 [0x0] 0:	movl 0
          [0x1] 1:	del
          [0x2] 2:	ret

func:@169 [std.io#File.createTempFile] in file: lib/support//0.2.587//io//File.sharp:420:37: note:  
		    public static def createTempFile(string prefix, string suffix,
		                                    ^


createTempFile:
line: 442 [0x0] 0:	movl 0
          [0x1] 1:	del
          [0x2] 2:	ret

func:@170 [std.io#File.createTempFile] in file: lib/support//0.2.587//io//File.sharp:454:37: note:  
		    public static def createTempFile(string prefix, string suffix) : File
		                                    ^


createTempFile:
line: 455 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	movl 1
          [0x3] 3:	pushobj
          [0x4] 4:	pushnil 
          [0x5] 5:	call @169 // <std.io#File.createTempFile(std#string,std#string,std.io#File)>
          [0x6] 6:	movsl #0
          [0x7] 7:	returnobj
          [0x8] 8:	ret

func:@171 [std.io#File.readAllText] in file: lib/support//0.2.587//io//File.sharp:459:34: note:  
		    public static def readAllText(File file, string data) {
		                                 ^


readAllText:
line: 459 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	movl 1
          [0x3] 3:	pushobj
          [0x4] 4:	call @185 // <std.io#FileSystem.read(std.io#File,std#string)>
          [0x5] 5:	ret

func:@172 [std.io#File.write] in file: lib/support//0.2.587//io//File.sharp:463:28: note:  
		    public static def write(File file, string data) {
		                           ^


write:
line: 463 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	movl 1
          [0x3] 3:	pushobj
          [0x4] 4:	call @186 // <std.io#FileSystem.write(std.io#File,std#string)>
          [0x5] 5:	pop
          [0x6] 6:	ret

func:@173 [std.io#File.getFileSystem] in file: lib/support//0.2.587//io//File.sharp:467:37: note:  
		    private static def getFileSystem() : FileSystem {
		                                    ^


getFileSystem:
line: 467 [0x0] 0:	call @299 // <std.kernel#Manifest.isWindows()>
          [0x1] 1:	loadval cmt
          [0x2] 2:	movi #11, adx
          [0x4] 4:	ifne
line: 468 [0x5] 5:	new_class @24 // std.io#WinFileSystem
          [0x6] 6:	call @247 // <std.io#WinFileSystem.WinFileSystem()>
          [0x7] 7:	movsl #0
          [0x8] 8:	returnobj
          [0x9] 9:	ret
          [0xa] 10:	goto @17
line: 470 [0xb] 11:	new_class @23 // std.io#UnixFileSystem
          [0xc] 12:	call @242 // <std.io#UnixFileSystem.UnixFileSystem()>
          [0xd] 13:	movsl #0
          [0xe] 14:	returnobj
          [0xf] 15:	ret
          [0x10] 16:	nop
          [0x11] 17:	nop
          [0x12] 18:	pushnil 
          [0x13] 19:	popobj
          [0x14] 20:	returnobj
          [0x15] 21:	ret

func:@174 [std.io#File.File] in file: lib/support//0.2.587//io//File.sharp:18:13: note:  
		public class File {
		            ^


File:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@175 [std.io#FileSystem.resolve] in file: lib/support//0.2.587//io//FileSystem.sharp:30:24: note:  
		     public def resolve(File f) : string {
		                       ^


resolve:
line: 31 [0x0] 0:	movl 1
         [0x1] 1:	pushobj
         [0x2] 2:	call @141 // <std.io#File.getPath()>
         [0x3] 3:	call @584 // <std#string.toArray()>
         [0x4] 4:	movl 2
         [0x5] 5:	popobj
line: 37 [0x6] 6:	pushl 2
         [0x7] 7:	int 0xb0
         [0x8] 8:	popl 2
line: 43 [0x9] 9:	movl 2
         [0xa] 10:	checknull
         [0xb] 11:	movr ebx, cmt
         [0xc] 12:	movi #26, adx
         [0xe] 14:	ifne
line: 44 [0xf] 15:	new_class @19 // std.io#IOException
         [0x10] 16:	new_class @46 // std#string
         [0x11] 17:	newstr @286 // "file could not be resolved: "
         [0x12] 18:	call @558 // <std#string.string(var[])>
         [0x13] 19:	movl 1
         [0x14] 20:	pushobj
         [0x15] 21:	call @141 // <std.io#File.getPath()>
         [0x16] 22:	call @573 // <std#string.$operator+(std#Printable)>
         [0x17] 23:	call @192 // <std.io#IOException.IOException(std#string)>
         [0x18] 24:	throw 
         [0x19] 25:	nop
         [0x1a] 26:	nop
line: 47 [0x1b] 27:	new_class @46 // std#string
         [0x1c] 28:	newstr @226 // ""
         [0x1d] 29:	call @558 // <std#string.string(var[])>
         [0x1e] 30:	movl 2
         [0x1f] 31:	pushobj
         [0x20] 32:	call @572 // <std#string.$operator+(var[])>
         [0x21] 33:	movsl #0
         [0x22] 34:	returnobj
         [0x23] 35:	ret

func:@176 [std.io#FileSystem.setPermission] in file: lib/support//0.2.587//io//FileSystem.sharp:84:30: note:  
		     public def setPermission(File f, var access, var enable, var owneronly) : var {
		                             ^


setPermission:
line: 85 [0x0] 0:	movl 1
         [0x1] 1:	pushobj
         [0x2] 2:	call @142 // <std.io#File.getAbsolutePath()>
         [0x3] 3:	call @584 // <std#string.toArray()>
         [0x4] 4:	movl 5
         [0x5] 5:	popobj
line: 86 [0x6] 6:	istorel 0, fp+6
line: 92 [0x8] 8:	pushl 5
         [0x9] 9:	loadl ebx, fp+2
         [0xa] 10:	loadl egx, fp+3
         [0xb] 11:	loadl ecx, fp+4
         [0xc] 12:	int 0xbc
         [0xd] 13:	smovr_2 ebx, fp+6
line: 101 [0xe] 14:	loadl ebx, fp+6
          [0xf] 15:	return_val ebx
          [0x10] 16:	ret

func:@177 [std.io#FileSystem.getLastModifiedTime] in file: lib/support//0.2.587//io//FileSystem.sharp:110:36: note:  
		     public def getLastModifiedTime(File f) : var {
		                                   ^


getLastModifiedTime:
line: 111 [0x0] 0:	movl 1
          [0x1] 1:	pushobj
          [0x2] 2:	call @142 // <std.io#File.getAbsolutePath()>
          [0x3] 3:	call @584 // <std#string.toArray()>
          [0x4] 4:	movl 2
          [0x5] 5:	popobj
line: 112 [0x6] 6:	istorel 0, fp+3
line: 118 [0x8] 8:	pushl 2
          [0x9] 9:	int 0xb3
          [0xa] 10:	smovr_2 ebx, fp+3
line: 124 [0xb] 11:	loadl ebx, fp+3
          [0xc] 12:	return_val ebx
          [0xd] 13:	ret

func:@178 [std.io#FileSystem.getLength] in file: lib/support//0.2.587//io//FileSystem.sharp:133:26: note:  
		     public def getLength(File f) : var {
		                         ^


getLength:
line: 134 [0x0] 0:	movl 1
          [0x1] 1:	pushobj
          [0x2] 2:	call @142 // <std.io#File.getAbsolutePath()>
          [0x3] 3:	call @584 // <std#string.toArray()>
          [0x4] 4:	movl 2
          [0x5] 5:	popobj
line: 135 [0x6] 6:	istorel 0, fp+3
line: 141 [0x8] 8:	pushl 2
          [0x9] 9:	int 0xb4
          [0xa] 10:	smovr_2 ebx, fp+3
line: 147 [0xb] 11:	loadl ebx, fp+3
          [0xc] 12:	return_val ebx
          [0xd] 13:	ret

func:@179 [std.io#FileSystem.createFile] in file: lib/support//0.2.587//io//FileSystem.sharp:158:26: note:  
		    public def createFile(string pathname) {
		                         ^


createFile:
line: 159 [0x0] 0:	movl 1
          [0x1] 1:	pushobj
          [0x2] 2:	call @584 // <std#string.toArray()>
          [0x3] 3:	movl 2
          [0x4] 4:	popobj
line: 165 [0x5] 5:	pushl 2
          [0x6] 6:	int 0xb5
          [0x7] 7:	ret

func:@180 [std.io#FileSystem.deleteDirectory] in file: lib/support//0.2.587//io//FileSystem.sharp:176:32: note:  
		    private def deleteDirectory(File f) : var {
		                               ^


deleteDirectory:
line: 177 [0x0] 0:	movl 1
          [0x1] 1:	pushobj
          [0x2] 2:	call @142 // <std.io#File.getAbsolutePath()>
          [0x3] 3:	call @584 // <std#string.toArray()>
          [0x4] 4:	movl 2
          [0x5] 5:	popobj
line: 178 [0x6] 6:	istorel 0, fp+3
line: 184 [0x8] 8:	pushl 2
          [0x9] 9:	int 0xb9
          [0xa] 10:	smovr_2 ebx, fp+3
line: 190 [0xb] 11:	loadl ebx, fp+3
          [0xc] 12:	return_val ebx
          [0xd] 13:	ret

func:@181 [std.io#FileSystem.delete] in file: lib/support//0.2.587//io//FileSystem.sharp:198:22: note:  
		    public def delete(File f) : var {
		                     ^


delete:
line: 199 [0x0] 0:	movl 1
          [0x1] 1:	pushobj
          [0x2] 2:	call @142 // <std.io#File.getAbsolutePath()>
          [0x3] 3:	call @584 // <std#string.toArray()>
          [0x4] 4:	movl 2
          [0x5] 5:	popobj
line: 200 [0x6] 6:	istorel 0, fp+3
line: 202 [0x8] 8:	movl 1
          [0x9] 9:	pushobj
          [0xa] 10:	call @146 // <std.io#File.isDirectory()>
          [0xb] 11:	loadval cmt
          [0xc] 12:	movi #24, adx
          [0xe] 14:	ifne
line: 203 [0xf] 15:	movl 0
          [0x10] 16:	pushobj
          [0x11] 17:	movl 1
          [0x12] 18:	pushobj
          [0x13] 19:	call @180 // <std.io#FileSystem.deleteDirectory(std.io#File)>
          [0x14] 20:	loadval ebx
          [0x15] 21:	return_val ebx
          [0x16] 22:	ret
          [0x17] 23:	nop
          [0x18] 24:	nop
line: 209 [0x19] 25:	pushl 2
          [0x1a] 26:	int 0xb6
          [0x1b] 27:	smovr_2 ebx, fp+3
line: 215 [0x1c] 28:	loadl ebx, fp+3
          [0x1d] 29:	return_val ebx
          [0x1e] 30:	ret

func:@182 [std.io#FileSystem.list] in file: lib/support//0.2.587//io//FileSystem.sharp:224:20: note:  
		    public def list(File f) : string[] {
		                   ^


list:
line: 225 [0x0] 0:	movl 1
          [0x1] 1:	pushobj
          [0x2] 2:	call @142 // <std.io#File.getAbsolutePath()>
          [0x3] 3:	call @584 // <std#string.toArray()>
          [0x4] 4:	movl 2
          [0x5] 5:	popobj
line: 226 [0x6] 6:	movl 3
          [0x7] 7:	del
line: 227 [0x8] 8:	movl 4
          [0x9] 9:	del
line: 229 [0xa] 10:	movl 1
          [0xb] 11:	pushobj
          [0xc] 12:	call @146 // <std.io#File.isDirectory()>
          [0xd] 13:	loadval ebx
          [0xe] 14:	not ebx, ebx
          [0xf] 15:	movr cmt, ebx
          [0x10] 16:	movi #23, adx
          [0x12] 18:	ifne
line: 230 [0x13] 19:	movl 0
          [0x14] 20:	del
          [0x15] 21:	ret
          [0x16] 22:	nop
          [0x17] 23:	nop
line: 236 [0x18] 24:	pushl 2
          [0x19] 25:	int 0xb7
          [0x1a] 26:	popl 3
line: 242 [0x1b] 27:	movl 3
          [0x1c] 28:	checknull
          [0x1d] 29:	not cmt, cmt
          [0x1e] 30:	movr ebx, cmt
          [0x1f] 31:	movi #74, adx
          [0x21] 33:	ifne
line: 243 [0x22] 34:	movl 3
          [0x23] 35:	sizeof ebx
          [0x24] 36:	new_classarray ebx  // std#string[]
          [0x25] 37:	movl 4
          [0x26] 38:	popobj
line: 244 [0x27] 39:	istorel 0, fp+5
line: 245 [0x29] 41:	movi #0, ebx
          [0x2b] 43:	rstore ebx
          [0x2c] 44:	movl 3
          [0x2d] 45:	smov ebx, sp+0
          [0x2e] 46:	sizeof egx
          [0x2f] 47:	lt ebx, egx
          [0x30] 48:	movi #72, adx
          [0x32] 50:	ifne
          [0x33] 51:	movnd ebx
          [0x34] 52:	pushobj
          [0x35] 53:	movl 6
          [0x36] 54:	popobj
line: 246 [0x37] 55:	new_class @46 // std#string
          [0x38] 56:	movl 6
          [0x39] 57:	vcast 1
          [0x3a] 58:	pushobj
          [0x3b] 59:	call @558 // <std#string.string(var[])>
          [0x3c] 60:	movl 4
          [0x3d] 61:	loadl ebx, fp+5
          [0x3e] 62:	movi #1, ecx
          [0x40] 64:	addl ecx, @5
          [0x41] 65:	chklen ebx
          [0x42] 66:	movnd ebx
          [0x43] 67:	popobj
          [0x44] 68:	smov ebx, sp+0
          [0x45] 69:	inc ebx
          [0x46] 70:	smovr ebx, sp+0
          [0x47] 71:	goto @44
          [0x48] 72:	pop
          [0x49] 73:	nop
          [0x4a] 74:	nop
line: 250 [0x4b] 75:	movl 4
          [0x4c] 76:	returnobj
          [0x4d] 77:	ret

func:@183 [std.io#FileSystem.createDirectory] in file: lib/support//0.2.587//io//FileSystem.sharp:258:31: note:  
		    public def createDirectory(File f) : var {
		                              ^


createDirectory:
line: 259 [0x0] 0:	movl 1
          [0x1] 1:	pushobj
          [0x2] 2:	call @141 // <std.io#File.getPath()>
          [0x3] 3:	call @584 // <std#string.toArray()>
          [0x4] 4:	movl 2
          [0x5] 5:	popobj
line: 260 [0x6] 6:	istorel 0, fp+3
line: 266 [0x8] 8:	pushl 2
          [0x9] 9:	int 0xb8
          [0xa] 10:	smovr_2 ebx, fp+3
line: 272 [0xb] 11:	loadl ebx, fp+3
          [0xc] 12:	return_val ebx
          [0xd] 13:	ret

func:@184 [std.io#FileSystem.rename] in file: lib/support//0.2.587//io//FileSystem.sharp:281:22: note:  
		    public def rename(File f1, File f2) : var {
		                     ^


rename:
line: 282 [0x0] 0:	movl 1
          [0x1] 1:	pushobj
          [0x2] 2:	call @142 // <std.io#File.getAbsolutePath()>
          [0x3] 3:	call @584 // <std#string.toArray()>
          [0x4] 4:	movl 3
          [0x5] 5:	popobj
line: 283 [0x6] 6:	movl 2
          [0x7] 7:	pushobj
          [0x8] 8:	call @138 // <std.io#File.getName()>
          [0x9] 9:	call @584 // <std#string.toArray()>
          [0xa] 10:	movl 4
          [0xb] 11:	popobj
line: 284 [0xc] 12:	istorel 0, fp+5
line: 290 [0xe] 14:	pushl 4
          [0xf] 15:	pushl 3
          [0x10] 16:	int 0xba
          [0x11] 17:	smovr_2 ebx, fp+5
line: 297 [0x12] 18:	loadl ebx, fp+5
          [0x13] 19:	return_val ebx
          [0x14] 20:	ret

func:@185 [std.io#FileSystem.read] in file: lib/support//0.2.587//io//FileSystem.sharp:302:27: note:  
		    public static def read(File file, string data) {
		                          ^


read:
line: 302 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	call @142 // <std.io#File.getAbsolutePath()>
          [0x3] 3:	call @584 // <std#string.toArray()>
          [0x4] 4:	movl 2
          [0x5] 5:	popobj
line: 303 [0x6] 6:	movl 3
          [0x7] 7:	del
line: 304 [0x8] 8:	istorel 0, fp+4
line: 310 [0xa] 10:	pushl 2
          [0xb] 11:	int 0xbf
          [0xc] 12:	popl 3
line: 316 [0xd] 13:	movl 1
          [0xe] 14:	pushobj
          [0xf] 15:	movl 3
          [0x10] 16:	pushobj
          [0x11] 17:	call @578 // <std#string.$operator=(var[])>
          [0x12] 18:	ret

func:@186 [std.io#FileSystem.write] in file: lib/support//0.2.587//io//FileSystem.sharp:321:28: note:  
		    public static def write(File file, string data) : var {
		                           ^


write:
line: 321 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	call @141 // <std.io#File.getPath()>
          [0x3] 3:	call @584 // <std#string.toArray()>
          [0x4] 4:	movl 2
          [0x5] 5:	popobj
line: 322 [0x6] 6:	movl 1
          [0x7] 7:	pushobj
          [0x8] 8:	call @584 // <std#string.toArray()>
          [0x9] 9:	movl 3
          [0xa] 10:	popobj
line: 323 [0xb] 11:	istorel 0, fp+4
line: 329 [0xd] 13:	pushl 3
          [0xe] 14:	pushl 2
          [0xf] 15:	int 0xbd
          [0x10] 16:	smovr_2 ebx, fp+4
line: 336 [0x11] 17:	loadl ebx, fp+4
          [0x12] 18:	return_val ebx
          [0x13] 19:	ret

func:@187 [std.io#FileSystem.setLastModifiedTime] in file: lib/support//0.2.587//io//FileSystem.sharp:345:35: note:  
		    public def setLastModifiedTime(File f, var time) : var {
		                                  ^


setLastModifiedTime:
line: 346 [0x0] 0:	movl 1
          [0x1] 1:	pushobj
          [0x2] 2:	call @142 // <std.io#File.getAbsolutePath()>
          [0x3] 3:	call @584 // <std#string.toArray()>
          [0x4] 4:	movl 3
          [0x5] 5:	popobj
line: 347 [0x6] 6:	istorel 0, fp+4
line: 353 [0x8] 8:	pushl 3
          [0x9] 9:	loadl ebx, fp+2
          [0xa] 10:	int 0xbb
          [0xb] 11:	smovr_2 ebx, fp+4
line: 360 [0xc] 12:	loadl ebx, fp+4
          [0xd] 13:	return_val ebx
          [0xe] 14:	ret

func:@188 [std.io#FileSystem.setReadOnly] in file: lib/support//0.2.587//io//FileSystem.sharp:369:27: note:  
		    public def setReadOnly(File f) : var {
		                          ^


setReadOnly:
line: 369 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	movl 1
          [0x3] 3:	pushobj
          [0x4] 4:	movi #2, ebx
          [0x6] 6:	rstore ebx
          [0x7] 7:	movi #0, ebx
          [0x9] 9:	rstore ebx
          [0xa] 10:	movi #1, ebx
          [0xc] 12:	rstore ebx
          [0xd] 13:	call @176 // <std.io#FileSystem.setPermission(std.io#File,var,var,var)>
          [0xe] 14:	pop
line: 370 [0xf] 15:	movl 0
          [0x10] 16:	pushobj
          [0x11] 17:	movl 1
          [0x12] 18:	pushobj
          [0x13] 19:	movi #4, ebx
          [0x15] 21:	rstore ebx
          [0x16] 22:	movi #1, ebx
          [0x18] 24:	rstore ebx
          [0x19] 25:	movi #1, ebx
          [0x1b] 27:	rstore ebx
          [0x1c] 28:	call @176 // <std.io#FileSystem.setPermission(std.io#File,var,var,var)>
          [0x1d] 29:	loadval ebx
          [0x1e] 30:	return_val ebx
          [0x1f] 31:	ret

func:@189 [std.io#FileSystem.getSpace] in file: lib/support//0.2.587//io//FileSystem.sharp:379:24: note:  
		    public def getSpace(File f, var request) : var {
		                       ^


getSpace:
line: 380 [0x0] 0:	istorel 0, fp+3
line: 386 [0x2] 2:	loadl ebx, fp+2
          [0x3] 3:	int 0xbe
          [0x4] 4:	smovr_2 ebx, fp+3
line: 392 [0x5] 5:	loadl ebx, fp+3
          [0x6] 6:	return_val ebx
          [0x7] 7:	ret

func:@190 [std.io#FileSystem.FileSystem] in file: lib/support//0.2.587//io//FileSystem.sharp:10:13: note:  
		public class FileSystem {
		            ^


FileSystem:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@191 [std.io#IOException.IOException] in file: lib/support//0.2.587//io//IOException.sharp:10:25: note:  
		      public IOException(var[] message) {
		                        ^


IOException:
line: 10 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	pushobj
         [0x4] 4:	call @81 // <std#Exception.Exception(var[])>
         [0x5] 5:	pop
         [0x6] 6:	movl 0
         [0x7] 7:	returnobj
         [0x8] 8:	ret

func:@192 [std.io#IOException.IOException] in file: lib/support//0.2.587//io//IOException.sharp:14:25: note:  
		      public IOException(string message) {
		                        ^


IOException:
line: 14 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	pushobj
         [0x4] 4:	call @82 // <std#Exception.Exception(std#string)>
         [0x5] 5:	pop
         [0x6] 6:	movl 0
         [0x7] 7:	returnobj
         [0x8] 8:	ret

func:@193 [std.io#IOException.IOException] in file: lib/support//0.2.587//io//IOException.sharp:8:13: note:  
		public class IOException base Exception {
		            ^


IOException:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@194 [std.io#IOStream.StreamReader.StreamReader] in file: lib/support//0.2.587//io//IOStream.sharp:31:31: note:  
		        protected StreamReader(string contents) {
		                              ^


StreamReader:
line: 31 [0x0] 0:	movl 1
         [0x1] 1:	pushobj
         [0x2] 2:	movl 0
         [0x3] 3:	movn #1
         [0x4] 4:	popobj
         [0x5] 5:	movl 0
         [0x6] 6:	returnobj
         [0x7] 7:	ret

func:@195 [std.io#IOStream.StreamReader.update] in file: lib/support//0.2.587//io//IOStream.sharp:35:26: note:  
		        public def update(string contents) {
		                         ^


update:
line: 35 [0x0] 0:	movl 1
         [0x1] 1:	pushobj
         [0x2] 2:	movl 0
         [0x3] 3:	movn #1
         [0x4] 4:	popobj
line: 36 [0x5] 5:	movi #0, ebx
         [0x7] 7:	nop
         [0x8] 8:	rstore ebx
         [0x9] 9:	movl 0
         [0xa] 10:	movn #0
         [0xb] 11:	movi #0, adx
         [0xd] 13:	loadval ecx
         [0xe] 14:	rmov adx, ecx
         [0xf] 15:	ret

func:@196 [std.io#IOStream.StreamReader.next] in file: lib/support//0.2.587//io//IOStream.sharp:40:24: note:  
		        public def next() : var {
		                       ^


next:
line: 40 [0x0] 0:	movl 0
         [0x1] 1:	movn #1
         [0x2] 2:	pushobj
         [0x3] 3:	call @595 // <std#string.size()>
         [0x4] 4:	loadval egx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #0
         [0x7] 7:	movi #0, adx
         [0x9] 9:	chklen adx
         [0xa] 10:	iaload_2 ebx, adx
         [0xb] 11:	gte ebx, egx
         [0xc] 12:	movr ebx, cmt
         [0xd] 13:	movi #22, adx
         [0xf] 15:	ifne
line: 41 [0x10] 16:	movi #1, ebx
         [0x12] 18:	imul ebx, #-1
         [0x13] 19:	return_val ebx
         [0x14] 20:	ret
         [0x15] 21:	nop
         [0x16] 22:	nop
line: 42 [0x17] 23:	movl 0
         [0x18] 24:	movn #1
         [0x19] 25:	pushobj
         [0x1a] 26:	movl 0
         [0x1b] 27:	movn #0
         [0x1c] 28:	movi #0, adx
         [0x1e] 30:	chklen adx
         [0x1f] 31:	iaload_2 ebx, adx
         [0x20] 32:	inc ebx
         [0x21] 33:	rmov adx, ebx
         [0x22] 34:	dec ebx
         [0x23] 35:	rstore ebx
         [0x24] 36:	call @569 // <std#string.at(var)>
         [0x25] 37:	loadval ebx
         [0x26] 38:	return_val ebx
         [0x27] 39:	ret

func:@197 [std.io#IOStream.StreamReader.nextLine] in file: lib/support//0.2.587//io//IOStream.sharp:46:28: note:  
		        public def nextLine() : string {
		                           ^


nextLine:
line: 46 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	chklen adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	smovr_2 ebx, fp+1
line: 47 [0x7] 7:	istorel 0, fp+2
line: 48 [0x9] 9:	movl 0
line: 49 [0xa] 10:	pushobj
         [0xb] 11:	call @196 // <std.io#IOStream.StreamReader.next()>
         [0xc] 12:	loadval ebx
         [0xd] 13:	smovr_2 ebx, fp+2
line: 50 [0xe] 14:	loadl ebx, fp+2
         [0xf] 15:	rstore ebx
         [0x10] 16:	movi #1, ebx
         [0x12] 18:	imul ebx, #-1
         [0x13] 19:	movr egx, ebx
         [0x14] 20:	loadval ebx
         [0x15] 21:	test ebx, egx
         [0x16] 22:	movr ebx, cmt
         [0x17] 23:	movi #28, adx
         [0x19] 25:	ifne
line: 50 [0x1a] 26:	goto @45
         [0x1b] 27:	goto @38
         [0x1c] 28:	loadl ebx, fp+2
         [0x1d] 29:	rstore ebx
         [0x1e] 30:	call @64 // <std#char.isNewLine(var)>
         [0x1f] 31:	loadval cmt
         [0x20] 32:	movi #37, adx
         [0x22] 34:	ifne
line: 52 [0x23] 35:	goto @45
         [0x24] 36:	goto @38
         [0x25] 37:	nop
         [0x26] 38:	nop
         [0x27] 39:	movi #1, ebx
         [0x29] 41:	movr cmt, ebx
         [0x2a] 42:	movi #9, adx
         [0x2c] 44:	ife
line: 55 [0x2d] 45:	movl 0
         [0x2e] 46:	movn #1
         [0x2f] 47:	pushobj
         [0x30] 48:	loadl ebx, fp+1
         [0x31] 49:	rstore ebx
         [0x32] 50:	movi #1, ebx
         [0x34] 52:	rstore ebx
         [0x35] 53:	movl 0
         [0x36] 54:	movn #0
         [0x37] 55:	movi #0, adx
         [0x39] 57:	chklen adx
         [0x3a] 58:	iaload_2 ebx, adx
         [0x3b] 59:	loadval egx
         [0x3c] 60:	sub ebx, egx -> ebx
         [0x3e] 62:	rstore ebx
         [0x3f] 63:	call @587 // <std#string.substring(var,var)>
         [0x40] 64:	movsl #0
         [0x41] 65:	returnobj
         [0x42] 66:	ret

func:@198 [std.io#IOStream.StreamReader.StreamReader] in file: lib/support//0.2.587//io//IOStream.sharp:27:23: note:  
		    class StreamReader {
		                      ^


StreamReader:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@199 [std.io#IOStream.IOStream] in file: lib/support//0.2.587//io//IOStream.sharp:60:21: note:  
		    private IOStream() {} // to prevent user from calling this
		                    ^


IOStream:
        [0x0] 0:	new_class @46 // std#string
        [0x1] 1:	newstr @226 // ""
        [0x2] 2:	call @558 // <std#string.string(var[])>
        [0x3] 3:	movl 0
        [0x4] 4:	movn #0
        [0x5] 5:	popobj
        [0x6] 6:	movl 0
        [0x7] 7:	returnobj
        [0x8] 8:	ret

func:@200 [std.io#IOStream.IOStream] in file: lib/support//0.2.587//io//IOStream.sharp:62:20: note:  
		    public IOStream(File file, var direction) {
		                   ^


IOStream:
        [0x0] 0:	new_class @46 // std#string
        [0x1] 1:	newstr @226 // ""
        [0x2] 2:	call @558 // <std#string.string(var[])>
        [0x3] 3:	movl 0
        [0x4] 4:	movn #0
        [0x5] 5:	popobj
line: 62 [0x6] 6:	movl 1
         [0x7] 7:	pushobj
         [0x8] 8:	movl 0
         [0x9] 9:	movn #1
         [0xa] 10:	popobj
line: 63 [0xb] 11:	loadl ebx, fp+2
         [0xc] 12:	nop
         [0xd] 13:	rstore ebx
         [0xe] 14:	movl 0
         [0xf] 15:	movn #2
         [0x10] 16:	movi #0, adx
         [0x12] 18:	loadval ecx
         [0x13] 19:	rmov adx, ecx
line: 65 [0x14] 20:	loadl ebx, fp+2
         [0x15] 21:	rstore ebx
         [0x16] 22:	movg @20 // @std.io#IOStream
         [0x17] 23:	movn #4
         [0x18] 24:	movi #0, adx
         [0x1a] 26:	chklen adx
         [0x1b] 27:	iaload_2 egx, adx
         [0x1c] 28:	loadval ebx
         [0x1d] 29:	test ebx, egx
         [0x1e] 30:	movr ebx, cmt
         [0x1f] 31:	movi #49, adx
         [0x21] 33:	ifne
line: 66 [0x22] 34:	movl 1
         [0x23] 35:	pushobj
         [0x24] 36:	movl 0
         [0x25] 37:	movn #0
         [0x26] 38:	pushobj
         [0x27] 39:	call @171 // <std.io#File.readAllText(std.io#File,std#string)>
line: 67 [0x28] 40:	new_class @21 // std.io#IOStream.StreamReader
         [0x29] 41:	movl 0
         [0x2a] 42:	movn #0
         [0x2b] 43:	pushobj
         [0x2c] 44:	call @194 // <std.io#IOStream.StreamReader.StreamReader(std#string)>
         [0x2d] 45:	movl 0
         [0x2e] 46:	movn #3
         [0x2f] 47:	popobj
         [0x30] 48:	nop
         [0x31] 49:	nop
         [0x32] 50:	movl 0
         [0x33] 51:	returnobj
         [0x34] 52:	ret

func:@201 [std.io#IOStream.IOStream] in file: lib/support//0.2.587//io//IOStream.sharp:72:20: note:  
		    public IOStream(File file, var direction, var getContents) {
		                   ^


IOStream:
        [0x0] 0:	new_class @46 // std#string
        [0x1] 1:	newstr @226 // ""
        [0x2] 2:	call @558 // <std#string.string(var[])>
        [0x3] 3:	movl 0
        [0x4] 4:	movn #0
        [0x5] 5:	popobj
line: 72 [0x6] 6:	movl 1
         [0x7] 7:	pushobj
         [0x8] 8:	movl 0
         [0x9] 9:	movn #1
         [0xa] 10:	popobj
line: 73 [0xb] 11:	loadl ebx, fp+2
         [0xc] 12:	nop
         [0xd] 13:	rstore ebx
         [0xe] 14:	movl 0
         [0xf] 15:	movn #2
         [0x10] 16:	movi #0, adx
         [0x12] 18:	loadval ecx
         [0x13] 19:	rmov adx, ecx
line: 75 [0x14] 20:	loadl ebx, fp+2
         [0x15] 21:	rstore ebx
         [0x16] 22:	movg @20 // @std.io#IOStream
         [0x17] 23:	movn #4
         [0x18] 24:	movi #0, adx
         [0x1a] 26:	chklen adx
         [0x1b] 27:	iaload_2 egx, adx
         [0x1c] 28:	loadval ebx
         [0x1d] 29:	test ebx, egx
         [0x1e] 30:	movr ebx, cmt
         [0x1f] 31:	cmp ebx, 1
         [0x20] 32:	movr ebx, cmt
         [0x21] 33:	skne 6 // pc = 39
         [0x22] 34:	istore 1
         [0x23] 35:	loadl ebx, fp+3
         [0x24] 36:	loadval ecx
         [0x25] 37:	and ecx, ebx
         [0x26] 38:	movr ebx, cmt
         [0x27] 39:	movr cmt, ebx
         [0x28] 40:	movi #58, adx
         [0x2a] 42:	ifne
line: 76 [0x2b] 43:	movl 1
         [0x2c] 44:	pushobj
         [0x2d] 45:	movl 0
         [0x2e] 46:	movn #0
         [0x2f] 47:	pushobj
         [0x30] 48:	call @171 // <std.io#File.readAllText(std.io#File,std#string)>
line: 77 [0x31] 49:	new_class @21 // std.io#IOStream.StreamReader
         [0x32] 50:	movl 0
         [0x33] 51:	movn #0
         [0x34] 52:	pushobj
         [0x35] 53:	call @194 // <std.io#IOStream.StreamReader.StreamReader(std#string)>
         [0x36] 54:	movl 0
         [0x37] 55:	movn #3
         [0x38] 56:	popobj
         [0x39] 57:	nop
         [0x3a] 58:	nop
         [0x3b] 59:	movl 0
         [0x3c] 60:	returnobj
         [0x3d] 61:	ret

func:@202 [std.io#IOStream.updateFile] in file: lib/support//0.2.587//io//IOStream.sharp:82:23: note:  
			public def updateFile(File file) {
		                      ^


updateFile:
line: 82 [0x0] 0:	movl 1
         [0x1] 1:	pushobj
         [0x2] 2:	movl 0
         [0x3] 3:	movn #1
         [0x4] 4:	popobj
         [0x5] 5:	ret

func:@203 [std.io#IOStream.read] in file: lib/support//0.2.587//io//IOStream.sharp:86:17: note:  
			public def read() {
		                ^


read:
line: 86 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movg @20 // @std.io#IOStream
         [0x7] 7:	movn #4
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 egx, adx
         [0xc] 12:	loadval ebx
         [0xd] 13:	test ebx, egx
         [0xe] 14:	movr ebx, cmt
         [0xf] 15:	movi #33, adx
         [0x11] 17:	ifne
line: 87 [0x12] 18:	movl 0
         [0x13] 19:	movn #1
         [0x14] 20:	pushobj
         [0x15] 21:	movl 0
         [0x16] 22:	movn #0
         [0x17] 23:	pushobj
         [0x18] 24:	call @171 // <std.io#File.readAllText(std.io#File,std#string)>
line: 88 [0x19] 25:	movl 0
         [0x1a] 26:	movn #3
         [0x1b] 27:	pushobj
         [0x1c] 28:	movl 0
         [0x1d] 29:	movn #0
         [0x1e] 30:	pushobj
         [0x1f] 31:	call @195 // <std.io#IOStream.StreamReader.update(std#string)>
         [0x20] 32:	nop
         [0x21] 33:	nop
         [0x22] 34:	ret

func:@204 [std.io#IOStream.close] in file: lib/support//0.2.587//io//IOStream.sharp:93:21: note:  
		    public def close() {
		                    ^


close:
line: 93 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movg @20 // @std.io#IOStream
         [0x7] 7:	movn #5
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 egx, adx
         [0xc] 12:	loadval ebx
         [0xd] 13:	test ebx, egx
         [0xe] 14:	movr ebx, cmt
         [0xf] 15:	movi #26, adx
         [0x11] 17:	ifne
line: 94 [0x12] 18:	movl 0
         [0x13] 19:	movn #1
         [0x14] 20:	pushobj
         [0x15] 21:	movl 0
         [0x16] 22:	movn #0
         [0x17] 23:	pushobj
         [0x18] 24:	call @172 // <std.io#File.write(std.io#File,std#string)>
         [0x19] 25:	nop
         [0x1a] 26:	nop
line: 96 [0x1b] 27:	movl 0
         [0x1c] 28:	movn #0
         [0x1d] 29:	pushobj
         [0x1e] 30:	newstr @226 // ""
         [0x1f] 31:	call @578 // <std#string.$operator=(var[])>
         [0x20] 32:	ret

func:@205 [std.io#IOStream.nextChar] in file: lib/support//0.2.587//io//IOStream.sharp:104:24: note:  
		    public def nextChar() : var {
		                       ^


nextChar:
line: 104 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movg @20 // @std.io#IOStream
          [0x7] 7:	movn #4
          [0x8] 8:	movi #0, adx
          [0xa] 10:	chklen adx
          [0xb] 11:	iaload_2 egx, adx
          [0xc] 12:	loadval ebx
          [0xd] 13:	test ebx, egx
          [0xe] 14:	movr ebx, cmt
          [0xf] 15:	movi #26, adx
          [0x11] 17:	ifne
line: 105 [0x12] 18:	movl 0
          [0x13] 19:	movn #3
          [0x14] 20:	pushobj
          [0x15] 21:	call @196 // <std.io#IOStream.StreamReader.next()>
          [0x16] 22:	loadval ebx
          [0x17] 23:	return_val ebx
          [0x18] 24:	ret
          [0x19] 25:	goto @31
line: 107 [0x1a] 26:	new_class @12 // std#IllegalStateException
          [0x1b] 27:	newstr @287 // "illegal read on IOStream"
          [0x1c] 28:	call @87 // <std#IllegalStateException.IllegalStateException(var[])>
          [0x1d] 29:	throw 
          [0x1e] 30:	nop
          [0x1f] 31:	nop
          [0x20] 32:	movi #0, ebx
          [0x22] 34:	return_val ebx
          [0x23] 35:	ret

func:@206 [std.io#IOStream.nextLine] in file: lib/support//0.2.587//io//IOStream.sharp:115:24: note:  
		    public def nextLine() : string {
		                       ^


nextLine:
line: 115 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movg @20 // @std.io#IOStream
          [0x7] 7:	movn #4
          [0x8] 8:	movi #0, adx
          [0xa] 10:	chklen adx
          [0xb] 11:	iaload_2 egx, adx
          [0xc] 12:	loadval ebx
          [0xd] 13:	test ebx, egx
          [0xe] 14:	movr ebx, cmt
          [0xf] 15:	movi #26, adx
          [0x11] 17:	ifne
line: 116 [0x12] 18:	movl 0
          [0x13] 19:	movn #3
          [0x14] 20:	pushobj
          [0x15] 21:	call @197 // <std.io#IOStream.StreamReader.nextLine()>
          [0x16] 22:	movsl #0
          [0x17] 23:	returnobj
          [0x18] 24:	ret
          [0x19] 25:	goto @31
line: 118 [0x1a] 26:	new_class @12 // std#IllegalStateException
          [0x1b] 27:	newstr @287 // "illegal read on IOStream"
          [0x1c] 28:	call @87 // <std#IllegalStateException.IllegalStateException(var[])>
          [0x1d] 29:	throw 
          [0x1e] 30:	nop
          [0x1f] 31:	nop
          [0x20] 32:	pushnil 
          [0x21] 33:	popobj
          [0x22] 34:	returnobj
          [0x23] 35:	ret

func:@207 [std.io#IOStream.size] in file: lib/support//0.2.587//io//IOStream.sharp:122:20: note:  
		    public def size() : var {
		                   ^


size:
line: 122 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	call @595 // <std#string.size()>
          [0x4] 4:	loadval ebx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@208 [std.io#IOStream.write] in file: lib/support//0.2.587//io//IOStream.sharp:126:21: note:  
		    public def write(string data) {
		                    ^


write:
line: 126 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movg @20 // @std.io#IOStream
          [0x7] 7:	movn #4
          [0x8] 8:	movi #0, adx
          [0xa] 10:	chklen adx
          [0xb] 11:	iaload_2 egx, adx
          [0xc] 12:	loadval ebx
          [0xd] 13:	test ebx, egx
          [0xe] 14:	movr ebx, cmt
          [0xf] 15:	movi #23, adx
          [0x11] 17:	ifne
line: 127 [0x12] 18:	new_class @12 // std#IllegalStateException
          [0x13] 19:	newstr @288 // "illegal write on IOStream"
          [0x14] 20:	call @87 // <std#IllegalStateException.IllegalStateException(var[])>
          [0x15] 21:	throw 
          [0x16] 22:	nop
          [0x17] 23:	nop
line: 128 [0x18] 24:	movl 0
          [0x19] 25:	movn #0
          [0x1a] 26:	pushobj
          [0x1b] 27:	movl 1
          [0x1c] 28:	pushobj
          [0x1d] 29:	call @581 // <std#string.$operator+=(std#Printable)>
          [0x1e] 30:	pop
          [0x1f] 31:	ret

func:@209 [std.io#IOStream.write] in file: lib/support//0.2.587//io//IOStream.sharp:132:21: note:  
		    public def write(var n) {
		                    ^


write:
line: 132 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movg @20 // @std.io#IOStream
          [0x7] 7:	movn #4
          [0x8] 8:	movi #0, adx
          [0xa] 10:	chklen adx
          [0xb] 11:	iaload_2 egx, adx
          [0xc] 12:	loadval ebx
          [0xd] 13:	test ebx, egx
          [0xe] 14:	movr ebx, cmt
          [0xf] 15:	movi #23, adx
          [0x11] 17:	ifne
line: 133 [0x12] 18:	new_class @12 // std#IllegalStateException
          [0x13] 19:	newstr @288 // "illegal write on IOStream"
          [0x14] 20:	call @87 // <std#IllegalStateException.IllegalStateException(var[])>
          [0x15] 21:	throw 
          [0x16] 22:	nop
          [0x17] 23:	nop
line: 134 [0x18] 24:	movl 0
          [0x19] 25:	movn #0
          [0x1a] 26:	pushobj
          [0x1b] 27:	loadl ebx, fp+1
          [0x1c] 28:	rstore ebx
          [0x1d] 29:	call @585 // <std#string.parse(var)>
          [0x1e] 30:	call @581 // <std#string.$operator+=(std#Printable)>
          [0x1f] 31:	pop
          [0x20] 32:	ret

func:@210 [std.io#IOStream.writeChar] in file: lib/support//0.2.587//io//IOStream.sharp:138:25: note:  
		    public def writeChar(var n) {
		                        ^


writeChar:
line: 138 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movg @20 // @std.io#IOStream
          [0x7] 7:	movn #4
          [0x8] 8:	movi #0, adx
          [0xa] 10:	chklen adx
          [0xb] 11:	iaload_2 egx, adx
          [0xc] 12:	loadval ebx
          [0xd] 13:	test ebx, egx
          [0xe] 14:	movr ebx, cmt
          [0xf] 15:	movi #23, adx
          [0x11] 17:	ifne
line: 139 [0x12] 18:	new_class @12 // std#IllegalStateException
          [0x13] 19:	newstr @288 // "illegal write on IOStream"
          [0x14] 20:	call @87 // <std#IllegalStateException.IllegalStateException(var[])>
          [0x15] 21:	throw 
          [0x16] 22:	nop
          [0x17] 23:	nop
line: 140 [0x18] 24:	movl 0
          [0x19] 25:	movn #0
          [0x1a] 26:	pushobj
          [0x1b] 27:	loadl ebx, fp+1
          [0x1c] 28:	rstore ebx
          [0x1d] 29:	call @580 // <std#string.$operator+=(var)>
          [0x1e] 30:	pop
          [0x1f] 31:	ret

func:@211 [std.io#IOStream.clear] in file: lib/support//0.2.587//io//IOStream.sharp:144:21: note:  
		    public def clear() {
		                    ^


clear:
line: 144 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	newstr @226 // ""
          [0x4] 4:	call @578 // <std#string.$operator=(var[])>
          [0x5] 5:	ret

func:@212 [std.io#IOStream.toString] in file: lib/support//0.2.587//io//IOStream.sharp:148:24: note:  
		    public def toString() : string {
		                       ^


toString:
line: 148 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	movl 0
          [0x2] 2:	movn #0
          [0x3] 3:	pushobj
          [0x4] 4:	call @561 // <std#string.string(std#string)>
          [0x5] 5:	movsl #0
          [0x6] 6:	returnobj
          [0x7] 7:	ret

func:@213 [std.io#IOStream.getData] in file: lib/support//0.2.587//io//IOStream.sharp:152:23: note:  
		    public def getData() : string {
		                      ^


getData:
line: 152 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	returnobj
          [0x3] 3:	ret

func:@214 [std.io#IOStream.getFile] in file: lib/support//0.2.587//io//IOStream.sharp:156:23: note:  
		    public def getFile() : File {
		                      ^


getFile:
line: 156 [0x0] 0:	movl 0
          [0x1] 1:	movn #1
          [0x2] 2:	returnobj
          [0x3] 3:	ret

func:@215 [std.io#IOStream.write] in file: lib/support//0.2.587//io//IOStream.sharp:160:21: note:  
		    public def write(var[] data) {
		                    ^


write:
line: 160 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movg @20 // @std.io#IOStream
          [0x7] 7:	movn #4
          [0x8] 8:	movi #0, adx
          [0xa] 10:	chklen adx
          [0xb] 11:	iaload_2 egx, adx
          [0xc] 12:	loadval ebx
          [0xd] 13:	test ebx, egx
          [0xe] 14:	movr ebx, cmt
          [0xf] 15:	movi #23, adx
          [0x11] 17:	ifne
line: 161 [0x12] 18:	new_class @12 // std#IllegalStateException
          [0x13] 19:	newstr @288 // "illegal write on IOStream"
          [0x14] 20:	call @87 // <std#IllegalStateException.IllegalStateException(var[])>
          [0x15] 21:	throw 
          [0x16] 22:	nop
          [0x17] 23:	nop
line: 162 [0x18] 24:	movl 0
          [0x19] 25:	movn #0
          [0x1a] 26:	pushobj
          [0x1b] 27:	movl 1
          [0x1c] 28:	pushobj
          [0x1d] 29:	call @582 // <std#string.$operator+=(var[])>
          [0x1e] 30:	pop
          [0x1f] 31:	ret

func:@216 [std.io#Thread.Thread] in file: lib/support//0.2.587//io//Thread.sharp:36:19: note:  
		    private Thread() {}
		                  ^


Thread:
        [0x0] 0:	new_class @46 // std#string
        [0x1] 1:	newstr @226 // ""
        [0x2] 2:	call @558 // <std#string.string(var[])>
        [0x3] 3:	movl 0
        [0x4] 4:	movn #10
        [0x5] 5:	popobj
        [0x6] 6:	movl 0
        [0x7] 7:	returnobj
        [0x8] 8:	ret

func:@217 [std.io#Thread.Thread] in file: lib/support//0.2.587//io//Thread.sharp:38:18: note:  
		    public Thread(string name, fn main (object[]) : var) {
		                 ^


Thread:
        [0x0] 0:	new_class @46 // std#string
        [0x1] 1:	newstr @226 // ""
        [0x2] 2:	call @558 // <std#string.string(var[])>
        [0x3] 3:	movl 0
        [0x4] 4:	movn #10
        [0x5] 5:	popobj
line: 38 [0x6] 6:	loadl ebx, fp+2
         [0x7] 7:	nop
         [0x8] 8:	rstore ebx
         [0x9] 9:	movl 0
         [0xa] 10:	movn #13
         [0xb] 11:	movi #0, adx
         [0xd] 13:	loadval ecx
         [0xe] 14:	rmov adx, ecx
line: 39 [0xf] 15:	movl 1
         [0x10] 16:	pushobj
         [0x11] 17:	movl 0
         [0x12] 18:	movn #10
         [0x13] 19:	popobj
line: 40 [0x14] 20:	movi #4, ebx
         [0x16] 22:	nop
         [0x17] 23:	rstore ebx
         [0x18] 24:	movl 0
         [0x19] 25:	movn #6
         [0x1a] 26:	movi #0, adx
         [0x1c] 28:	loadval ecx
         [0x1d] 29:	rmov adx, ecx
line: 41 [0x1e] 30:	movl 0
         [0x1f] 31:	pushobj
         [0x20] 32:	call @324 // <std.kernel.vm#ThreadCore.__thread_create(std.io#Thread)>
         [0x21] 33:	nop
         [0x22] 34:	movl 0
         [0x23] 35:	movn #5
         [0x24] 36:	movi #0, adx
         [0x26] 38:	loadval ecx
         [0x27] 39:	rmov adx, ecx
line: 43 [0x28] 40:	movl 0
         [0x29] 41:	pushobj
         [0x2a] 42:	call @228 // <std.io#Thread.addThread(std.io#Thread)>
         [0x2b] 43:	movl 0
         [0x2c] 44:	returnobj
         [0x2d] 45:	ret

func:@218 [std.io#Thread.Thread] in file: lib/support//0.2.587//io//Thread.sharp:47:18: note:  
		    public Thread(string name, fn main (object[]) : var, var stackSize) {
		                 ^


Thread:
        [0x0] 0:	new_class @46 // std#string
        [0x1] 1:	newstr @226 // ""
        [0x2] 2:	call @558 // <std#string.string(var[])>
        [0x3] 3:	movl 0
        [0x4] 4:	movn #10
        [0x5] 5:	popobj
line: 47 [0x6] 6:	loadl ebx, fp+2
         [0x7] 7:	nop
         [0x8] 8:	rstore ebx
         [0x9] 9:	movl 0
         [0xa] 10:	movn #13
         [0xb] 11:	movi #0, adx
         [0xd] 13:	loadval ecx
         [0xe] 14:	rmov adx, ecx
line: 48 [0xf] 15:	movl 1
         [0x10] 16:	pushobj
         [0x11] 17:	movl 0
         [0x12] 18:	movn #10
         [0x13] 19:	popobj
line: 49 [0x14] 20:	loadl ebx, fp+3
         [0x15] 21:	nop
         [0x16] 22:	rstore ebx
         [0x17] 23:	movl 0
         [0x18] 24:	movn #12
         [0x19] 25:	movi #0, adx
         [0x1b] 27:	loadval ecx
         [0x1c] 28:	rmov adx, ecx
line: 50 [0x1d] 29:	movi #4, ebx
         [0x1f] 31:	nop
         [0x20] 32:	rstore ebx
         [0x21] 33:	movl 0
         [0x22] 34:	movn #6
         [0x23] 35:	movi #0, adx
         [0x25] 37:	loadval ecx
         [0x26] 38:	rmov adx, ecx
line: 51 [0x27] 39:	movl 0
         [0x28] 40:	pushobj
         [0x29] 41:	call @324 // <std.kernel.vm#ThreadCore.__thread_create(std.io#Thread)>
         [0x2a] 42:	nop
         [0x2b] 43:	movl 0
         [0x2c] 44:	movn #5
         [0x2d] 45:	movi #0, adx
         [0x2f] 47:	loadval ecx
         [0x30] 48:	rmov adx, ecx
line: 53 [0x31] 49:	movl 0
         [0x32] 50:	pushobj
         [0x33] 51:	call @228 // <std.io#Thread.addThread(std.io#Thread)>
         [0x34] 52:	movl 0
         [0x35] 53:	returnobj
         [0x36] 54:	ret

func:@219 [std.io#Thread.start] in file: lib/support//0.2.587//io//Thread.sharp:57:21: note:  
		    public def start(object[] args) : var {
		                    ^


start:
line: 57 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	pushobj
         [0x4] 4:	call @325 // <std.kernel.vm#ThreadCore.__thread_start(std.io#Thread,object[])>
         [0x5] 5:	loadval ebx
         [0x6] 6:	return_val ebx
         [0x7] 7:	ret

func:@220 [std.io#Thread.join] in file: lib/support//0.2.587//io//Thread.sharp:61:20: note:  
		    public def join() : var {
		                   ^


join:
line: 61 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	call @326 // <std.kernel.vm#ThreadCore.__thread_join(std.io#Thread)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@221 [std.io#Thread.interrupt] in file: lib/support//0.2.587//io//Thread.sharp:65:25: note:  
		    public def interrupt() : var {
		                        ^


interrupt:
line: 65 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	call @330 // <std.kernel.vm#ThreadCore.__thread_interrupt(std.io#Thread)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@222 [std.io#Thread.destroy] in file: lib/support//0.2.587//io//Thread.sharp:69:23: note:  
		    public def destroy() : var {
		                      ^


destroy:
line: 69 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	call @331 // <std.kernel.vm#ThreadCore.__thread_destroy(std.io#Thread)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@223 [std.io#Thread.currentThread] in file: lib/support//0.2.587//io//Thread.sharp:73:36: note:  
		    public static def currentThread() : Thread {
		                                   ^


currentThread:
line: 73 [0x0] 0:	call @332 // <std.kernel.vm#ThreadCore.__thread_current()>
         [0x1] 1:	movsl #0
         [0x2] 2:	returnobj
         [0x3] 3:	ret

func:@224 [std.io#Thread.sleep] in file: lib/support//0.2.587//io//Thread.sharp:77:28: note:  
		    public static def sleep(var time) {
		                           ^


sleep:
line: 77 [0x0] 0:	movg @63 // @std.kernel#TimeUnit
         [0x1] 1:	movn #4
         [0x2] 2:	pushobj
         [0x3] 3:	loadl ebx, fp+0
         [0x4] 4:	rstore ebx
         [0x5] 5:	call @343 // <std.kernel#Time.sleep(std.kernel#TimeUnit,var)>
         [0x6] 6:	ret

func:@225 [std.io#Thread.exit] in file: lib/support//0.2.587//io//Thread.sharp:81:20: note:  
		    public def exit(var code) {
		                   ^


exit:
line: 81 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	loadl ebx, fp+1
         [0x3] 3:	rstore ebx
         [0x4] 4:	call @334 // <std.kernel.vm#ThreadCore.__thread_exit(std.io#Thread,var)>
         [0x5] 5:	ret

func:@226 [std.io#Thread.yield] in file: lib/support//0.2.587//io//Thread.sharp:85:28: note:  
		    public static def yield() {
		                           ^


yield:
line: 85 [0x0] 0:	call @329 // <std.kernel.vm#ThreadCore.__thread_yield()>
         [0x1] 1:	ret

func:@227 [std.io#Thread.setPriority] in file: lib/support//0.2.587//io//Thread.sharp:89:27: note:  
		    public def setPriority(var priority) {
		                          ^


setPriority:
line: 89 [0x0] 0:	movi #6, ebx
         [0x2] 2:	movr egx, ebx
         [0x3] 3:	loadl ebx, fp+1
         [0x4] 4:	gt ebx, egx
         [0x5] 5:	movr ebx, cmt
         [0x6] 6:	movr ebx, cmt
         [0x7] 7:	skpe 9 // pc = 16
         [0x8] 8:	movi #1, ebx
         [0xa] 10:	movr egx, ebx
         [0xb] 11:	loadl ebx, fp+1
         [0xc] 12:	lt ebx, egx
         [0xd] 13:	movr ebx, cmt
         [0xe] 14:	cmp ebx, 1
         [0xf] 15:	movr ebx, cmt
         [0x10] 16:	movr cmt, ebx
         [0x11] 17:	movi #30, adx
         [0x13] 19:	ifne
line: 90 [0x14] 20:	new_class @11 // std#IllegalArgumentException
         [0x15] 21:	new_class @46 // std#string
         [0x16] 22:	newstr @289 // "invalid thread priority "
         [0x17] 23:	call @558 // <std#string.string(var[])>
         [0x18] 24:	loadl ebx, fp+1
         [0x19] 25:	rstore ebx
         [0x1a] 26:	call @579 // <std#string.$operator+(var)>
         [0x1b] 27:	call @85 // <std#IllegalArgumentException.IllegalArgumentException(std#string)>
         [0x1c] 28:	throw 
         [0x1d] 29:	nop
         [0x1e] 30:	nop
line: 92 [0x1f] 31:	movl 0
         [0x20] 32:	_lck 
line: 93 [0x21] 33:	loadl ebx, fp+1
         [0x22] 34:	nop
         [0x23] 35:	rstore ebx
         [0x24] 36:	movl 0
         [0x25] 37:	movn #6
         [0x26] 38:	movi #0, adx
         [0x28] 40:	loadval ecx
         [0x29] 41:	rmov adx, ecx
line: 94 [0x2a] 42:	movl 0
         [0x2b] 43:	movn #9
         [0x2c] 44:	movi #0, adx
         [0x2e] 46:	chklen adx
         [0x2f] 47:	iaload_2 ebx, adx
         [0x30] 48:	not ebx, ebx
         [0x31] 49:	movr cmt, ebx
         [0x32] 50:	movi #60, adx
         [0x34] 52:	ifne
line: 95 [0x35] 53:	movl 0
         [0x36] 54:	pushobj
         [0x37] 55:	loadl ebx, fp+1
         [0x38] 56:	rstore ebx
         [0x39] 57:	call @328 // <std.kernel.vm#ThreadCore.__thread_priority(std.io#Thread,var)>
         [0x3a] 58:	pop
         [0x3b] 59:	nop
         [0x3c] 60:	nop
         [0x3d] 61:	movl 0
         [0x3e] 62:	_ulck
         [0x3f] 63:	ret

func:@228 [std.io#Thread.addThread] in file: lib/support//0.2.587//io//Thread.sharp:101:25: note:  
		    static def addThread(Thread thread) {
		                        ^


addThread:
line: 101 [0x0] 0:	movg @22 // @std.io#Thread
          [0x1] 1:	movn #3
          [0x2] 2:	_lck 
line: 102 [0x3] 3:	movg @22 // @std.io#Thread
          [0x4] 4:	movn #3
          [0x5] 5:	pushobj
          [0x6] 6:	movl 0
          [0x7] 7:	pushobj
          [0x8] 8:	call @973 // <std#ArrayList<std.io#Thread>.add(std.io#Thread)>
          [0x9] 9:	movg @22 // @std.io#Thread
          [0xa] 10:	movn #3
          [0xb] 11:	_ulck
          [0xc] 12:	ret

func:@229 [std.io#Thread.popThread] in file: lib/support//0.2.587//io//Thread.sharp:107:25: note:  
		    static def popThread(Thread thread) {
		                        ^


popThread:
line: 107 [0x0] 0:	movg @22 // @std.io#Thread
          [0x1] 1:	movn #3
          [0x2] 2:	_lck 
line: 108 [0x3] 3:	movg @22 // @std.io#Thread
          [0x4] 4:	movn #3
          [0x5] 5:	pushobj
          [0x6] 6:	call @966 // <std#ArrayList<std.io#Thread>.toArray()>
          [0x7] 7:	movl 1
          [0x8] 8:	popobj
line: 109 [0x9] 9:	istorel 0, fp+2
line: 110 [0xb] 11:	movi #0, ebx
          [0xd] 13:	rstore ebx
          [0xe] 14:	movl 1
          [0xf] 15:	smov ebx, sp+0
          [0x10] 16:	sizeof egx
          [0x11] 17:	lt ebx, egx
          [0x12] 18:	movi #60, adx
          [0x14] 20:	ifne
          [0x15] 21:	movnd ebx
          [0x16] 22:	pushobj
          [0x17] 23:	movl 3
          [0x18] 24:	popobj
line: 111 [0x19] 25:	movl 0
          [0x1a] 26:	movn #5
          [0x1b] 27:	movi #0, adx
          [0x1d] 29:	iaload_2 ebx, adx
          [0x1e] 30:	rstore ebx
          [0x1f] 31:	movl 3
          [0x20] 32:	movn #5
          [0x21] 33:	movi #0, adx
          [0x23] 35:	chklen adx
          [0x24] 36:	iaload_2 egx, adx
          [0x25] 37:	loadval ebx
          [0x26] 38:	test ebx, egx
          [0x27] 39:	movr ebx, cmt
          [0x28] 40:	movi #51, adx
          [0x2a] 42:	ifne
line: 112 [0x2b] 43:	movg @22 // @std.io#Thread
          [0x2c] 44:	movn #3
          [0x2d] 45:	pushobj
          [0x2e] 46:	loadl ebx, fp+2
          [0x2f] 47:	rstore ebx
          [0x30] 48:	call @976 // <std#ArrayList<std.io#Thread>.remove(var)>
line: 113 [0x31] 49:	goto @60
          [0x32] 50:	nop
          [0x33] 51:	nop
line: 115 [0x34] 52:	loadl ebx, fp+2
          [0x35] 53:	movi #1, ecx
          [0x37] 55:	addl ecx, @2
          [0x38] 56:	smov ebx, sp+0
          [0x39] 57:	inc ebx
          [0x3a] 58:	smovr ebx, sp+0
          [0x3b] 59:	goto @14
          [0x3c] 60:	pop
          [0x3d] 61:	movg @22 // @std.io#Thread
          [0x3e] 62:	movn #3
          [0x3f] 63:	_ulck
          [0x40] 64:	ret

func:@230 [std.io#Thread.getId] in file: lib/support//0.2.587//io//Thread.sharp:136:21: note:  
		    public def getId() : var { return id; }
		                    ^


getId:
line: 135 [0x0] 0:	movl 0
          [0x1] 1:	movn #5
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@231 [std.io#Thread.getStackSize] in file: lib/support//0.2.587//io//Thread.sharp:137:28: note:  
		    public def getStackSize() : var { return stackSize; }
		                           ^


getStackSize:
line: 136 [0x0] 0:	movl 0
          [0x1] 1:	movn #12
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@232 [std.io#Thread.getName] in file: lib/support//0.2.587//io//Thread.sharp:138:23: note:  
		    public def getName() : string { return name; }
		                      ^


getName:
line: 137 [0x0] 0:	movl 0
          [0x1] 1:	movn #10
          [0x2] 2:	returnobj
          [0x3] 3:	ret

func:@233 [std.io#Thread.setExited] in file: lib/support//0.2.587//io//Thread.sharp:139:25: note:  
		    public def setExited(var exited) { self->exited = exited; }
		                        ^


setExited:
line: 138 [0x0] 0:	loadl ebx, fp+1
          [0x1] 1:	nop
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #9
          [0x5] 5:	movi #0, adx
          [0x7] 7:	loadval ecx
          [0x8] 8:	rmov adx, ecx
          [0x9] 9:	ret

func:@234 [std.io#Thread.isExited] in file: lib/support//0.2.587//io//Thread.sharp:140:24: note:  
		    public def isExited() : var { return exited; }
		                       ^


isExited:
line: 139 [0x0] 0:	movl 0
          [0x1] 1:	movn #9
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@235 [std.io#Thread.isDaemon] in file: lib/support//0.2.587//io//Thread.sharp:141:24: note:  
		    public def isDaemon() : var { return daemon; }
		                       ^


isDaemon:
line: 140 [0x0] 0:	movl 0
          [0x1] 1:	movn #7
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@236 [std.io#Thread.setStarted] in file: lib/support//0.2.587//io//Thread.sharp:142:26: note:  
		    public def setStarted(var started) { self->started = started; }
		                         ^


setStarted:
line: 141 [0x0] 0:	loadl ebx, fp+1
          [0x1] 1:	nop
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #11
          [0x5] 5:	movi #0, adx
          [0x7] 7:	loadval ecx
          [0x8] 8:	rmov adx, ecx
          [0x9] 9:	ret

func:@237 [std.io#Thread.isStarted] in file: lib/support//0.2.587//io//Thread.sharp:143:25: note:  
		    public def isStarted() : var { return started; }
		                        ^


isStarted:
line: 142 [0x0] 0:	movl 0
          [0x1] 1:	movn #11
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@238 [std.io#Thread.setTerminated] in file: lib/support//0.2.587//io//Thread.sharp:144:29: note:  
		    public def setTerminated(var term) { self->terminated = term; }
		                            ^


setTerminated:
line: 143 [0x0] 0:	loadl ebx, fp+1
          [0x1] 1:	nop
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #8
          [0x5] 5:	movi #0, adx
          [0x7] 7:	loadval ecx
          [0x8] 8:	rmov adx, ecx
          [0x9] 9:	ret

func:@239 [std.io#Thread.isTerminated] in file: lib/support//0.2.587//io//Thread.sharp:145:28: note:  
		    public def isTerminated() : var { return terminated; }
		                           ^


isTerminated:
line: 144 [0x0] 0:	movl 0
          [0x1] 1:	movn #8
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@240 [std.io#Thread.setupMainThread] in file: lib/support//0.2.587//io//Thread.sharp:147:38: note:  
		    public static def setupMainThread() {
		                                     ^


setupMainThread:
line: 147 [0x0] 0:	new_class @22 // std.io#Thread
          [0x1] 1:	call @216 // <std.io#Thread.Thread()>
          [0x2] 2:	movl 0
          [0x3] 3:	popobj
line: 149 [0x4] 4:	movi #0, ebx
          [0x6] 6:	nop
          [0x7] 7:	rstore ebx
          [0x8] 8:	movl 0
          [0x9] 9:	movn #5
          [0xa] 10:	movi #0, adx
          [0xc] 12:	loadval ecx
          [0xd] 13:	rmov adx, ecx
line: 150 [0xe] 14:	movl 0
          [0xf] 15:	movn #10
          [0x10] 16:	pushobj
          [0x11] 17:	newstr @290 // "main"
          [0x12] 18:	call @578 // <std#string.$operator=(var[])>
line: 151 [0x13] 19:	movi #1, ebx
          [0x15] 21:	nop
          [0x16] 22:	rstore ebx
          [0x17] 23:	movl 0
          [0x18] 24:	movn #11
          [0x19] 25:	movi #0, adx
          [0x1b] 27:	loadval ecx
          [0x1c] 28:	rmov adx, ecx
line: 153 [0x1d] 29:	movl 0
          [0x1e] 30:	pushobj
          [0x1f] 31:	call @228 // <std.io#Thread.addThread(std.io#Thread)>
line: 154 [0x20] 32:	movl 0
          [0x21] 33:	pushobj
          [0x22] 34:	call @327 // <std.kernel.vm#ThreadCore.__thread_set_thread(std.io#Thread)>
          [0x23] 35:	ret

func:@241 [std.io#Thread.$operator==] in file: lib/support//0.2.587//io//Thread.sharp:158:24: note:  
		    public def operator==(Thread thread) : var {
		                       ^


$operator==:
line: 158 [0x0] 0:	movl 0
          [0x1] 1:	movn #5
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movl 1
          [0x7] 7:	movn #5
          [0x8] 8:	movi #0, adx
          [0xa] 10:	chklen adx
          [0xb] 11:	iaload_2 egx, adx
          [0xc] 12:	loadval ebx
          [0xd] 13:	test ebx, egx
          [0xe] 14:	movr ebx, cmt
          [0xf] 15:	return_val cmt
          [0x10] 16:	ret

func:@242 [std.io#UnixFileSystem.UnixFileSystem] in file: lib/support//0.2.587//io//UnixFileSystem.sharp:13:26: note:  
		    public UnixFileSystem() {
		                         ^


UnixFileSystem:
line: 13 [0x0] 0:	movi #47, ebx
         [0x2] 2:	nop
         [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #11
         [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
         [0xa] 10:	movl 0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@243 [std.io#UnixFileSystem.getPathSeparator] in file: lib/support//0.2.587//io//UnixFileSystem.sharp:17:24: note:  
		    public def delegate::getPathSeparator() : var {
		                       ^


getPathSeparator:
line: 17 [0x0] 0:	movl 0
         [0x1] 1:	movn #11
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@244 [std.io#UnixFileSystem.normalize] in file: lib/support//0.2.587//io//UnixFileSystem.sharp:25:24: note:  
		    public def delegate::normalize(string pathname) : string {
		                       ^


normalize:
line: 25 [0x0] 0:	movl 1
         [0x1] 1:	pushobj
         [0x2] 2:	call @595 // <std#string.size()>
         [0x3] 3:	loadval ebx
         [0x4] 4:	smovr_2 ebx, fp+2
line: 26 [0x5] 5:	movl 1
         [0x6] 6:	pushobj
         [0x7] 7:	call @584 // <std#string.toArray()>
         [0x8] 8:	movl 3
         [0x9] 9:	popobj
line: 27 [0xa] 10:	new_class @46 // std#string
         [0xb] 11:	newstr @226 // ""
         [0xc] 12:	call @558 // <std#string.string(var[])>
         [0xd] 13:	popl 4
line: 28 [0xe] 14:	new_class @8 // std#char
         [0xf] 15:	movi #0, ebx
         [0x11] 17:	rstore ebx
         [0x12] 18:	call @31 // <std#char.char(var)>
         [0x13] 19:	popl 5
         [0x14] 20:	new_class @8 // std#char
         [0x15] 21:	movi #0, ebx
         [0x17] 23:	rstore ebx
         [0x18] 24:	call @31 // <std#char.char(var)>
         [0x19] 25:	popl 6
line: 29 [0x1a] 26:	istorel 0, fp+7
         [0x1c] 28:	movl 1
         [0x1d] 29:	pushobj
         [0x1e] 30:	call @595 // <std#string.size()>
         [0x1f] 31:	loadval egx
         [0x20] 32:	loadl ebx, fp+7
         [0x21] 33:	lt ebx, egx
         [0x22] 34:	movr ebx, cmt
         [0x23] 35:	movi #125, adx
         [0x25] 37:	ifne
line: 30 [0x26] 38:	movl 5
         [0x27] 39:	pushobj
         [0x28] 40:	movl 3
         [0x29] 41:	loadl ebx, fp+7
         [0x2a] 42:	chklen ebx
         [0x2b] 43:	iaload_2 ebx, ebx
         [0x2c] 44:	rstore ebx
         [0x2d] 45:	call @41 // <std#char.$operator=(var)>
         [0x2e] 46:	pop
line: 32 [0x2f] 47:	movl 5
         [0x30] 48:	pushobj
         [0x31] 49:	movi #47, ebx
         [0x33] 51:	rstore ebx
         [0x34] 52:	call @45 // <std#char.$operator==(var)>
         [0x35] 53:	loadval ebx
         [0x36] 54:	cmp ebx, 1
         [0x37] 55:	movr ebx, cmt
         [0x38] 56:	skne 12 // pc = 68
         [0x39] 57:	istore 1
         [0x3a] 58:	movl 6
         [0x3b] 59:	pushobj
         [0x3c] 60:	movi #47, ebx
         [0x3e] 62:	rstore ebx
         [0x3f] 63:	call @45 // <std#char.$operator==(var)>
         [0x40] 64:	loadval ebx
         [0x41] 65:	loadval ecx
         [0x42] 66:	and ecx, ebx
         [0x43] 67:	movr ebx, cmt
         [0x44] 68:	movr cmt, ebx
         [0x45] 69:	movi #74, adx
         [0x47] 71:	ifne
line: 33 [0x48] 72:	goto @120
         [0x49] 73:	goto @113
         [0x4a] 74:	movl 5
         [0x4b] 75:	pushobj
         [0x4c] 76:	movi #92, ebx
         [0x4e] 78:	rstore ebx
         [0x4f] 79:	call @45 // <std#char.$operator==(var)>
         [0x50] 80:	loadval cmt
         [0x51] 81:	movi #106, adx
         [0x53] 83:	ifne
line: 35 [0x54] 84:	movl 6
         [0x55] 85:	pushobj
         [0x56] 86:	movi #92, ebx
         [0x58] 88:	rstore ebx
         [0x59] 89:	call @50 // <std#char.$operator!=(var)>
         [0x5a] 90:	loadval cmt
         [0x5b] 91:	movi #104, adx
         [0x5d] 93:	ifne
line: 36 [0x5e] 94:	movl 4
         [0x5f] 95:	pushobj
         [0x60] 96:	new_class @8 // std#char
         [0x61] 97:	movi #47, ebx
         [0x63] 99:	rstore ebx
         [0x64] 100:	call @31 // <std#char.char(var)>
         [0x65] 101:	call @581 // <std#string.$operator+=(std#Printable)>
         [0x66] 102:	pop
         [0x67] 103:	nop
         [0x68] 104:	nop
         [0x69] 105:	goto @113
line: 39 [0x6a] 106:	movl 4
         [0x6b] 107:	pushobj
         [0x6c] 108:	movl 5
         [0x6d] 109:	pushobj
         [0x6e] 110:	call @581 // <std#string.$operator+=(std#Printable)>
         [0x6f] 111:	pop
         [0x70] 112:	nop
         [0x71] 113:	nop
line: 41 [0x72] 114:	movl 6
         [0x73] 115:	pushobj
         [0x74] 116:	movl 5
         [0x75] 117:	pushobj
         [0x76] 118:	call @42 // <std#char.$operator=(std#integer)>
         [0x77] 119:	pop
         [0x78] 120:	loadl ebx, fp+7
         [0x79] 121:	movi #1, ecx
         [0x7b] 123:	addl ecx, @7
         [0x7c] 124:	goto @28
line: 45 [0x7d] 125:	movl 4
         [0x7e] 126:	returnobj
         [0x7f] 127:	ret

func:@245 [std.io#UnixFileSystem.getFileAttributes] in file: lib/support//0.2.587//io//UnixFileSystem.sharp:54:25: note:  
		     public def delegate::getFileAttributes(File f) : var {
		                        ^


getFileAttributes:
Exception Table: 
[
start_pc: 2
end_pc: 8
handler_pc: 9
local: 3
]
line: 54 [0x0] 0:	movl 2
         [0x1] 1:	del
line: 56 [0x2] 2:	movl 1
line: 57 [0x3] 3:	pushobj
         [0x4] 4:	call @142 // <std.io#File.getAbsolutePath()>
         [0x5] 5:	call @584 // <std#string.toArray()>
         [0x6] 6:	movl 2
         [0x7] 7:	popobj
         [0x8] 8:	goto @16
line: 59 [0x9] 9:	movi #0, ebx
         [0xb] 11:	return_val ebx
         [0xc] 12:	ret
         [0xd] 13:	goto @16
         [0xe] 14:	nop
         [0xf] 15:	nop
line: 61 [0x10] 16:	istorel 0, fp+4
line: 67 [0x12] 18:	pushl 2
         [0x13] 19:	int 0xb2
         [0x14] 20:	smovr_2 ebx, fp+4
line: 73 [0x15] 21:	loadl ebx, fp+4
         [0x16] 22:	return_val ebx
         [0x17] 23:	ret

func:@246 [std.io#UnixFileSystem.checkAccess] in file: lib/support//0.2.587//io//UnixFileSystem.sharp:84:25: note:  
		     public def delegate::checkAccess(File f, var access) : var {
		                        ^


checkAccess:
Exception Table: 
[
start_pc: 2
end_pc: 8
handler_pc: 9
local: 4
]
line: 84 [0x0] 0:	movl 3
         [0x1] 1:	del
line: 86 [0x2] 2:	movl 1
line: 87 [0x3] 3:	pushobj
         [0x4] 4:	call @142 // <std.io#File.getAbsolutePath()>
         [0x5] 5:	call @584 // <std#string.toArray()>
         [0x6] 6:	movl 3
         [0x7] 7:	popobj
         [0x8] 8:	goto @16
line: 89 [0x9] 9:	movi #1, ebx
         [0xb] 11:	return_val ebx
         [0xc] 12:	ret
         [0xd] 13:	goto @16
         [0xe] 14:	nop
         [0xf] 15:	nop
line: 91 [0x10] 16:	istorel 0, fp+5
line: 97 [0x12] 18:	pushl 3
         [0x13] 19:	loadl ebx, fp+2
         [0x14] 20:	int 0xb1
         [0x15] 21:	smovr_2 ebx, fp+5
line: 104 [0x16] 22:	loadl ebx, fp+5
          [0x17] 23:	return_val ebx
          [0x18] 24:	ret

func:@247 [std.io#WinFileSystem.WinFileSystem] in file: lib/support//0.2.587//io//WinFileSystem.sharp:16:25: note:  
		    public WinFileSystem() {
		                        ^


WinFileSystem:
line: 16 [0x0] 0:	movi #92, ebx
         [0x2] 2:	nop
         [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #11
         [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
         [0xa] 10:	movl 0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@248 [std.io#WinFileSystem.getPathSeparator] in file: lib/support//0.2.587//io//WinFileSystem.sharp:20:24: note:  
		    public def delegate::getPathSeparator() : var {
		                       ^


getPathSeparator:
line: 20 [0x0] 0:	movl 0
         [0x1] 1:	movn #11
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@249 [std.io#WinFileSystem.normalize] in file: lib/support//0.2.587//io//WinFileSystem.sharp:28:24: note:  
		    public def delegate::normalize(string pathname) : string {
		                       ^


normalize:
line: 28 [0x0] 0:	movl 1
         [0x1] 1:	pushobj
         [0x2] 2:	call @595 // <std#string.size()>
         [0x3] 3:	loadval ebx
         [0x4] 4:	smovr_2 ebx, fp+2
line: 29 [0x5] 5:	movl 1
         [0x6] 6:	pushobj
         [0x7] 7:	call @584 // <std#string.toArray()>
         [0x8] 8:	movl 3
         [0x9] 9:	popobj
line: 30 [0xa] 10:	new_class @46 // std#string
         [0xb] 11:	newstr @226 // ""
         [0xc] 12:	call @558 // <std#string.string(var[])>
         [0xd] 13:	popl 4
line: 31 [0xe] 14:	movi #1, ebx
         [0x10] 16:	newarry ebx
         [0x11] 17:	movl 5
         [0x12] 18:	popobj
line: 31 [0x13] 19:	istorel 0, fp+6
line: 32 [0x15] 21:	istorel 0, fp+7
         [0x17] 23:	movl 3
         [0x18] 24:	sizeof ebx
         [0x19] 25:	movr egx, ebx
         [0x1a] 26:	loadl ebx, fp+7
         [0x1b] 27:	lt ebx, egx
         [0x1c] 28:	movr ebx, cmt
         [0x1d] 29:	movi #133, adx
         [0x1f] 31:	ifne
line: 33 [0x20] 32:	movl 3
         [0x21] 33:	loadl ebx, fp+7
         [0x22] 34:	chklen ebx
         [0x23] 35:	iaload_2 ebx, ebx
         [0x24] 36:	rstore ebx
         [0x25] 37:	movl 5
         [0x26] 38:	movi #0, ebx
         [0x28] 40:	chklen ebx
         [0x29] 41:	loadval egx
         [0x2a] 42:	rmov ebx, egx
line: 35 [0x2b] 43:	movl 5
         [0x2c] 44:	movi #0, ebx
         [0x2e] 46:	chklen ebx
         [0x2f] 47:	iaload_2 ebx, ebx
         [0x30] 48:	rstore ebx
         [0x31] 49:	movi #47, ebx
         [0x33] 51:	movr egx, ebx
         [0x34] 52:	loadval ebx
         [0x35] 53:	test ebx, egx
         [0x36] 54:	movr ebx, cmt
         [0x37] 55:	cmp ebx, 1
         [0x38] 56:	movr ebx, cmt
         [0x39] 57:	skne 13 // pc = 70
         [0x3a] 58:	istore 1
         [0x3b] 59:	loadl ebx, fp+6
         [0x3c] 60:	rstore ebx
         [0x3d] 61:	movi #47, ebx
         [0x3f] 63:	movr egx, ebx
         [0x40] 64:	loadval ebx
         [0x41] 65:	test ebx, egx
         [0x42] 66:	movr ebx, cmt
         [0x43] 67:	loadval ecx
         [0x44] 68:	and ecx, ebx
         [0x45] 69:	movr ebx, cmt
         [0x46] 70:	movr cmt, ebx
         [0x47] 71:	movi #76, adx
         [0x49] 73:	ifne
line: 36 [0x4a] 74:	goto @128
         [0x4b] 75:	goto @121
         [0x4c] 76:	movl 5
         [0x4d] 77:	movi #0, ebx
         [0x4f] 79:	chklen ebx
         [0x50] 80:	iaload_2 ebx, ebx
         [0x51] 81:	rstore ebx
         [0x52] 82:	movi #92, ebx
         [0x54] 84:	movr egx, ebx
         [0x55] 85:	loadval ebx
         [0x56] 86:	test ebx, egx
         [0x57] 87:	movr ebx, cmt
         [0x58] 88:	movi #114, adx
         [0x5a] 90:	ifne
line: 38 [0x5b] 91:	loadl ebx, fp+6
         [0x5c] 92:	rstore ebx
         [0x5d] 93:	movi #92, ebx
         [0x5f] 95:	movr egx, ebx
         [0x60] 96:	loadval ebx
         [0x61] 97:	tne ebx, egx
         [0x62] 98:	movr ebx, cmt
         [0x63] 99:	movi #112, adx
         [0x65] 101:	ifne
line: 39 [0x66] 102:	movl 4
         [0x67] 103:	pushobj
         [0x68] 104:	new_class @8 // std#char
         [0x69] 105:	movi #92, ebx
         [0x6b] 107:	rstore ebx
         [0x6c] 108:	call @31 // <std#char.char(var)>
         [0x6d] 109:	call @581 // <std#string.$operator+=(std#Printable)>
         [0x6e] 110:	pop
         [0x6f] 111:	nop
         [0x70] 112:	nop
         [0x71] 113:	goto @121
line: 42 [0x72] 114:	movl 4
         [0x73] 115:	pushobj
         [0x74] 116:	movl 5
         [0x75] 117:	pushobj
         [0x76] 118:	call @582 // <std#string.$operator+=(var[])>
         [0x77] 119:	pop
         [0x78] 120:	nop
         [0x79] 121:	nop
line: 44 [0x7a] 122:	movl 5
         [0x7b] 123:	movi #0, ebx
         [0x7d] 125:	chklen ebx
         [0x7e] 126:	iaload_2 ebx, ebx
         [0x7f] 127:	smovr_2 ebx, fp+6
         [0x80] 128:	loadl ebx, fp+7
         [0x81] 129:	movi #1, ecx
         [0x83] 131:	addl ecx, @7
         [0x84] 132:	goto @23
line: 47 [0x85] 133:	movl 4
         [0x86] 134:	returnobj
         [0x87] 135:	ret

func:@250 [std.io#WinFileSystem.getFileAttributes] in file: lib/support//0.2.587//io//WinFileSystem.sharp:56:25: note:  
		     public def delegate::getFileAttributes(File f) : var {
		                        ^


getFileAttributes:
Exception Table: 
[
start_pc: 2
end_pc: 8
handler_pc: 9
local: 3
]
line: 56 [0x0] 0:	movl 2
         [0x1] 1:	del
line: 58 [0x2] 2:	movl 1
line: 59 [0x3] 3:	pushobj
         [0x4] 4:	call @142 // <std.io#File.getAbsolutePath()>
         [0x5] 5:	call @584 // <std#string.toArray()>
         [0x6] 6:	movl 2
         [0x7] 7:	popobj
         [0x8] 8:	goto @16
line: 61 [0x9] 9:	movi #0, ebx
         [0xb] 11:	return_val ebx
         [0xc] 12:	ret
         [0xd] 13:	goto @16
         [0xe] 14:	nop
         [0xf] 15:	nop
line: 63 [0x10] 16:	istorel 0, fp+4
line: 69 [0x12] 18:	pushl 2
         [0x13] 19:	int 0xb2
         [0x14] 20:	smovr_2 ebx, fp+4
line: 75 [0x15] 21:	loadl ebx, fp+4
         [0x16] 22:	return_val ebx
         [0x17] 23:	ret

func:@251 [std.io#WinFileSystem.checkAccess] in file: lib/support//0.2.587//io//WinFileSystem.sharp:86:25: note:  
		     public def delegate::checkAccess(File f, var access) : var {
		                        ^


checkAccess:
Exception Table: 
[
start_pc: 2
end_pc: 8
handler_pc: 9
local: 4
]
line: 86 [0x0] 0:	movl 3
         [0x1] 1:	del
line: 88 [0x2] 2:	movl 1
line: 89 [0x3] 3:	pushobj
         [0x4] 4:	call @142 // <std.io#File.getAbsolutePath()>
         [0x5] 5:	call @584 // <std#string.toArray()>
         [0x6] 6:	movl 3
         [0x7] 7:	popobj
         [0x8] 8:	goto @16
line: 91 [0x9] 9:	movi #1, ebx
         [0xb] 11:	return_val ebx
         [0xc] 12:	ret
         [0xd] 13:	goto @16
         [0xe] 14:	nop
         [0xf] 15:	nop
line: 93 [0x10] 16:	istorel 0, fp+5
line: 96 [0x12] 18:	loadl ebx, fp+2
         [0x13] 19:	rstore ebx
         [0x14] 20:	movi #1, ebx
         [0x16] 22:	movr egx, ebx
         [0x17] 23:	loadval ebx
         [0x18] 24:	test ebx, egx
         [0x19] 25:	movr ebx, cmt
         [0x1a] 26:	movi #35, adx
         [0x1c] 28:	ifne
line: 97 [0x1d] 29:	movi #1, ebx
         [0x1f] 31:	imul ebx, #-1
         [0x20] 32:	return_val ebx
         [0x21] 33:	ret
         [0x22] 34:	nop
         [0x23] 35:	nop
line: 102 [0x24] 36:	pushl 3
          [0x25] 37:	loadl ebx, fp+2
          [0x26] 38:	int 0xb1
          [0x27] 39:	smovr_2 ebx, fp+5
line: 109 [0x28] 40:	loadl ebx, fp+5
          [0x29] 41:	return_val ebx
          [0x2a] 42:	ret

func:@252 [std.kernel#CListObj.add] in file: lib/support//0.2.587//kernel//CListObj.sharp:11:22: note:  
		    protected def add(object element) {
		                     ^


add:
line: 11 [0x0] 0:	pushl 1
         [0x1] 1:	pushl 0
         [0x2] 2:	loadl ebx, fp+1
         [0x3] 3:	movi #0, adx
         [0x5] 5:	int 0xe6
         [0x6] 6:	ret

func:@253 [std.kernel#CListObj.shrink] in file: lib/support//0.2.587//kernel//CListObj.sharp:21:25: note:  
		    protected def shrink() {
		                        ^


shrink:
line: 21 [0x0] 0:	pushl 0
         [0x1] 1:	movi #1, adx
         [0x3] 3:	int 0xe6
         [0x4] 4:	ret

func:@254 [std.kernel#CListObj.insert] in file: lib/support//0.2.587//kernel//CListObj.sharp:29:25: note:  
		    protected def insert(var pos, object element) {
		                        ^


insert:
line: 29 [0x0] 0:	pushl 2
         [0x1] 1:	pushl 0
         [0x2] 2:	loadl ebx, fp+1
         [0x3] 3:	loadl egx, fp+2
         [0x4] 4:	movi #2, adx
         [0x6] 6:	int 0xe6
         [0x7] 7:	ret

func:@255 [std.kernel#CListObj.remove] in file: lib/support//0.2.587//kernel//CListObj.sharp:40:25: note:  
		    protected def remove(var pos) {
		                        ^


remove:
line: 40 [0x0] 0:	pushl 0
         [0x1] 1:	loadl ebx, fp+1
         [0x2] 2:	movi #3, adx
         [0x4] 4:	int 0xe6
         [0x5] 5:	ret

func:@256 [std.kernel#CListObj.CListObj] in file: lib/support//0.2.587//kernel//CListObj.sharp:7:13: note:  
		public class CListObj {
		            ^


CListObj:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@257 [std.kernel#CListVar.add] in file: lib/support//0.2.587//kernel//CListVar.sharp:11:22: note:  
		    protected def add(var element) {
		                     ^


add:
line: 11 [0x0] 0:	pushl 0
         [0x1] 1:	loadl ebx, fp+1
         [0x2] 2:	movi #0, adx
         [0x4] 4:	int 0xe6
         [0x5] 5:	ret

func:@258 [std.kernel#CListVar.shrink] in file: lib/support//0.2.587//kernel//CListVar.sharp:20:25: note:  
		    protected def shrink() {
		                        ^


shrink:
line: 20 [0x0] 0:	pushl 0
         [0x1] 1:	movi #1, adx
         [0x3] 3:	int 0xe6
         [0x4] 4:	ret

func:@259 [std.kernel#CListVar.insert] in file: lib/support//0.2.587//kernel//CListVar.sharp:28:25: note:  
		    protected def insert(var pos, var element) {
		                        ^


insert:
line: 28 [0x0] 0:	pushl 0
         [0x1] 1:	loadl ebx, fp+1
         [0x2] 2:	loadl egx, fp+2
         [0x3] 3:	movi #2, adx
         [0x5] 5:	int 0xe6
         [0x6] 6:	ret

func:@260 [std.kernel#CListVar.remove] in file: lib/support//0.2.587//kernel//CListVar.sharp:38:25: note:  
		    protected def remove(var pos) {
		                        ^


remove:
line: 38 [0x0] 0:	pushl 0
         [0x1] 1:	loadl ebx, fp+1
         [0x2] 2:	movi #3, adx
         [0x4] 4:	int 0xe6
         [0x5] 5:	ret

func:@261 [std.kernel#CListVar.CListVar] in file: lib/support//0.2.587//kernel//CListVar.sharp:7:13: note:  
		public class CListVar {
		            ^


CListVar:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@262 [std.kernel#CMath.__cmath] in file: lib/support//0.2.587//kernel//CMath.sharp:9:31: note:  
		    private static def __cmath(var n, var procedure) : var {
		                              ^


__cmath:
line: 9 [0x0] 0:	loadl ebx, fp+0
        [0x1] 1:	loadl ecx, fp+1
        [0x2] 2:	int 0xe3
        [0x3] 3:	return_val cmt
        [0x4] 4:	ret

func:@263 [std.kernel#CMath.__cmath] in file: lib/support//0.2.587//kernel//CMath.sharp:19:31: note:  
		    private static def __cmath(var n, var n2, var procedure) : var {
		                              ^


__cmath:
line: 19 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	loadl egx, fp+1
         [0x2] 2:	loadl ecx, fp+2
         [0x3] 3:	int 0xe3
         [0x4] 4:	return_val cmt
         [0x5] 5:	ret

func:@264 [std.kernel#CMath.sin] in file: lib/support//0.2.587//kernel//CMath.sharp:30:26: note:  
		    public static def sin(var n) : var {
		                         ^


sin:
line: 30 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	movi #0, ebx
         [0x4] 4:	rstore ebx
         [0x5] 5:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x6] 6:	loadval ebx
         [0x7] 7:	return_val ebx
         [0x8] 8:	ret

func:@265 [std.kernel#CMath.cos] in file: lib/support//0.2.587//kernel//CMath.sharp:34:26: note:  
		    public static def cos(var n) : var {
		                         ^


cos:
line: 34 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	movi #2, ebx
         [0x4] 4:	rstore ebx
         [0x5] 5:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x6] 6:	loadval ebx
         [0x7] 7:	return_val ebx
         [0x8] 8:	ret

func:@266 [std.kernel#CMath.tan] in file: lib/support//0.2.587//kernel//CMath.sharp:38:26: note:  
		    public static def tan(var n) : var {
		                         ^


tan:
line: 38 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	movi #3, ebx
         [0x4] 4:	rstore ebx
         [0x5] 5:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x6] 6:	loadval ebx
         [0x7] 7:	return_val ebx
         [0x8] 8:	ret

func:@267 [std.kernel#CMath.sinh] in file: lib/support//0.2.587//kernel//CMath.sharp:42:27: note:  
		    public static def sinh(var n) : var {
		                          ^


sinh:
line: 42 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	movi #4, ebx
         [0x4] 4:	rstore ebx
         [0x5] 5:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x6] 6:	loadval ebx
         [0x7] 7:	return_val ebx
         [0x8] 8:	ret

func:@268 [std.kernel#CMath.cosh] in file: lib/support//0.2.587//kernel//CMath.sharp:46:27: note:  
		    public static def cosh(var n) : var {
		                          ^


cosh:
line: 46 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	movi #5, ebx
         [0x4] 4:	rstore ebx
         [0x5] 5:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x6] 6:	loadval ebx
         [0x7] 7:	return_val ebx
         [0x8] 8:	ret

func:@269 [std.kernel#CMath.tanh] in file: lib/support//0.2.587//kernel//CMath.sharp:50:27: note:  
		    public static def tanh(var n) : var {
		                          ^


tanh:
line: 50 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	movi #6, ebx
         [0x4] 4:	rstore ebx
         [0x5] 5:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x6] 6:	loadval ebx
         [0x7] 7:	return_val ebx
         [0x8] 8:	ret

func:@270 [std.kernel#CMath.asin] in file: lib/support//0.2.587//kernel//CMath.sharp:54:27: note:  
		    public static def asin(var n) : var {
		                          ^


asin:
line: 54 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	movi #7, ebx
         [0x4] 4:	rstore ebx
         [0x5] 5:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x6] 6:	loadval ebx
         [0x7] 7:	return_val ebx
         [0x8] 8:	ret

func:@271 [std.kernel#CMath.acos] in file: lib/support//0.2.587//kernel//CMath.sharp:58:27: note:  
		    public static def acos(var n) : var {
		                          ^


acos:
line: 58 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	movi #8, ebx
         [0x4] 4:	rstore ebx
         [0x5] 5:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x6] 6:	loadval ebx
         [0x7] 7:	return_val ebx
         [0x8] 8:	ret

func:@272 [std.kernel#CMath.atan] in file: lib/support//0.2.587//kernel//CMath.sharp:62:27: note:  
		    public static def atan(var n) : var {
		                          ^


atan:
line: 62 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	movi #9, ebx
         [0x4] 4:	rstore ebx
         [0x5] 5:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x6] 6:	loadval ebx
         [0x7] 7:	return_val ebx
         [0x8] 8:	ret

func:@273 [std.kernel#CMath.atan2] in file: lib/support//0.2.587//kernel//CMath.sharp:66:28: note:  
		    public static def atan2(var n, var n2) : var {
		                           ^


atan2:
line: 66 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	loadl ebx, fp+1
         [0x3] 3:	rstore ebx
         [0x4] 4:	movi #10, ebx
         [0x6] 6:	rstore ebx
         [0x7] 7:	call @263 // <std.kernel#CMath.__cmath(var,var,var)>
         [0x8] 8:	loadval ebx
         [0x9] 9:	return_val ebx
         [0xa] 10:	ret

func:@274 [std.kernel#CMath.exp] in file: lib/support//0.2.587//kernel//CMath.sharp:70:26: note:  
		    public static def exp(var n) : var {
		                         ^


exp:
line: 70 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	movi #11, ebx
         [0x4] 4:	rstore ebx
         [0x5] 5:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x6] 6:	loadval ebx
         [0x7] 7:	return_val ebx
         [0x8] 8:	ret

func:@275 [std.kernel#CMath.log] in file: lib/support//0.2.587//kernel//CMath.sharp:74:26: note:  
		    public static def log(var n) : var {
		                         ^


log:
line: 74 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	movi #12, ebx
         [0x4] 4:	rstore ebx
         [0x5] 5:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x6] 6:	loadval ebx
         [0x7] 7:	return_val ebx
         [0x8] 8:	ret

func:@276 [std.kernel#CMath.log10] in file: lib/support//0.2.587//kernel//CMath.sharp:78:28: note:  
		    public static def log10(var n) : var {
		                           ^


log10:
line: 78 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	movi #13, ebx
         [0x4] 4:	rstore ebx
         [0x5] 5:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x6] 6:	loadval ebx
         [0x7] 7:	return_val ebx
         [0x8] 8:	ret

func:@277 [std.kernel#CMath.pow] in file: lib/support//0.2.587//kernel//CMath.sharp:82:26: note:  
		    public static def pow(var n, var exp) : var {
		                         ^


pow:
line: 82 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	loadl ebx, fp+1
         [0x3] 3:	rstore ebx
         [0x4] 4:	movi #14, ebx
         [0x6] 6:	rstore ebx
         [0x7] 7:	call @263 // <std.kernel#CMath.__cmath(var,var,var)>
         [0x8] 8:	loadval ebx
         [0x9] 9:	return_val ebx
         [0xa] 10:	ret

func:@278 [std.kernel#CMath.sqrt] in file: lib/support//0.2.587//kernel//CMath.sharp:86:27: note:  
		    public static def sqrt(var n) : var {
		                          ^


sqrt:
line: 86 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	movi #15, ebx
         [0x4] 4:	rstore ebx
         [0x5] 5:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x6] 6:	loadval ebx
         [0x7] 7:	return_val ebx
         [0x8] 8:	ret

func:@279 [std.kernel#CMath.ceil] in file: lib/support//0.2.587//kernel//CMath.sharp:90:27: note:  
		    public static def ceil(var n) : var {
		                          ^


ceil:
line: 90 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	movi #16, ebx
         [0x4] 4:	rstore ebx
         [0x5] 5:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x6] 6:	loadval ebx
         [0x7] 7:	return_val ebx
         [0x8] 8:	ret

func:@280 [std.kernel#CMath.floor] in file: lib/support//0.2.587//kernel//CMath.sharp:94:28: note:  
		    public static def floor(var n) : var {
		                           ^


floor:
line: 94 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	movi #17, ebx
         [0x4] 4:	rstore ebx
         [0x5] 5:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x6] 6:	loadval ebx
         [0x7] 7:	return_val ebx
         [0x8] 8:	ret

func:@281 [std.kernel#CMath.fabs] in file: lib/support//0.2.587//kernel//CMath.sharp:98:27: note:  
		    public static def fabs(var n) : var {
		                          ^


fabs:
line: 98 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	movi #18, ebx
         [0x4] 4:	rstore ebx
         [0x5] 5:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x6] 6:	loadval ebx
         [0x7] 7:	return_val ebx
         [0x8] 8:	ret

func:@282 [std.kernel#CMath.ldexp] in file: lib/support//0.2.587//kernel//CMath.sharp:102:28: note:  
		    public static def ldexp(var n, var n2) : var {
		                           ^


ldexp:
line: 102 [0x0] 0:	loadl ebx, fp+0
          [0x1] 1:	rstore ebx
          [0x2] 2:	loadl ebx, fp+1
          [0x3] 3:	rstore ebx
          [0x4] 4:	movi #19, ebx
          [0x6] 6:	rstore ebx
          [0x7] 7:	call @263 // <std.kernel#CMath.__cmath(var,var,var)>
          [0x8] 8:	loadval ebx
          [0x9] 9:	return_val ebx
          [0xa] 10:	ret

func:@283 [std.kernel#CMath.fmod] in file: lib/support//0.2.587//kernel//CMath.sharp:106:27: note:  
		    public static def fmod(var n, var n2) : var {
		                          ^


fmod:
line: 106 [0x0] 0:	loadl ebx, fp+0
          [0x1] 1:	rstore ebx
          [0x2] 2:	loadl ebx, fp+1
          [0x3] 3:	rstore ebx
          [0x4] 4:	movi #20, ebx
          [0x6] 6:	rstore ebx
          [0x7] 7:	call @263 // <std.kernel#CMath.__cmath(var,var,var)>
          [0x8] 8:	loadval ebx
          [0x9] 9:	return_val ebx
          [0xa] 10:	ret

func:@284 [std.kernel#CMath.CMath] in file: lib/support//0.2.587//kernel//CMath.sharp:7:13: note:  
		public class CMath {
		            ^


CMath:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@285 [std.kernel#ConsoleHandler.printData] in file: lib/support//0.2.587//kernel//ConsoleHandler.sharp:9:25: note:  
		    public def printData(var[] data)
		                        ^


printData:
line: 10 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	pushobj
         [0x4] 4:	call @286 // <std.kernel#ConsoleHandler.__print_(var[])>
         [0x5] 5:	ret

func:@286 [std.kernel#ConsoleHandler.__print_] in file: lib/support//0.2.587//kernel//ConsoleHandler.sharp:18:26: note:  
		     private def __print_(var[] message)
		                         ^


__print_:
line: 19 [0x0] 0:	movl 1
         [0x1] 1:	checknull
         [0x2] 2:	not cmt, cmt
         [0x3] 3:	movr ebx, cmt
         [0x4] 4:	movi #31, adx
         [0x6] 6:	ifne
line: 20 [0x7] 7:	movi #0, ebx
         [0x9] 9:	rstore ebx
         [0xa] 10:	movl 1
         [0xb] 11:	smov ebx, sp+0
         [0xc] 12:	sizeof egx
         [0xd] 13:	lt ebx, egx
         [0xe] 14:	movi #29, adx
         [0x10] 16:	ifne
         [0x11] 17:	iaload_2 ebx, ebx
         [0x12] 18:	smovr_2 ebx, fp+2
line: 21 [0x13] 19:	loadl ebx, fp+2
         [0x14] 20:	rstore ebx
         [0x15] 21:	movi #1, ebx
         [0x17] 23:	rstore ebx
         [0x18] 24:	call @290 // <std.kernel#ConsoleHandler.__print_stdout_(var,var)>
         [0x19] 25:	smov ebx, sp+0
         [0x1a] 26:	inc ebx
         [0x1b] 27:	smovr ebx, sp+0
         [0x1c] 28:	goto @10
         [0x1d] 29:	pop
         [0x1e] 30:	goto @36
line: 24 [0x1f] 31:	movl 0
         [0x20] 32:	pushobj
         [0x21] 33:	newstr @243 // "null"
         [0x22] 34:	call @286 // <std.kernel#ConsoleHandler.__print_(var[])>
         [0x23] 35:	nop
         [0x24] 36:	nop
         [0x25] 37:	ret

func:@287 [std.kernel#ConsoleHandler.read] in file: lib/support//0.2.587//kernel//ConsoleHandler.sharp:29:21: note:  
		     public def read() : var
		                    ^


read:
line: 30 [0x0] 0:	movi #1, cmt
         [0x2] 2:	get ebx
         [0x3] 3:	return_val ebx
         [0x4] 4:	ret

func:@288 [std.kernel#ConsoleHandler.readsilent] in file: lib/support//0.2.587//kernel//ConsoleHandler.sharp:39:27: note:  
		     public def readsilent() : var
		                          ^


readsilent:
line: 40 [0x0] 0:	movi #0, cmt
         [0x2] 2:	get ebx
         [0x3] 3:	return_val ebx
         [0x4] 4:	ret

func:@289 [std.kernel#ConsoleHandler.flush] in file: lib/support//0.2.587//kernel//ConsoleHandler.sharp:49:29: note:  
		     public static def flush()
		                            ^


flush:
line: 50 [0x0] 0:	int 0xd0
         [0x1] 1:	ret

func:@290 [std.kernel#ConsoleHandler.__print_stdout_] in file: lib/support//0.2.587//kernel//ConsoleHandler.sharp:60:39: note:  
		     public static def __print_stdout_(var char, var isCharacter)
		                                      ^


__print_stdout_:
line: 61 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr cmt, ebx
         [0x2] 2:	movi #9, adx
         [0x4] 4:	ifne
line: 62 [0x5] 5:	loadl ebx, fp+0
         [0x6] 6:	_putc ebx
         [0x7] 7:	ret
         [0x8] 8:	goto @13
line: 68 [0x9] 9:	loadl ebx, fp+0
         [0xa] 10:	put ebx
         [0xb] 11:	ret
         [0xc] 12:	nop
         [0xd] 13:	nop
         [0xe] 14:	ret

func:@291 [std.kernel#ConsoleHandler.ConsoleHandler] in file: lib/support//0.2.587//kernel//ConsoleHandler.sharp:8:13: note:  
		public class ConsoleHandler {
		            ^


ConsoleHandler:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@292 [std.kernel#__SRT_Global.__seed] in file: lib/support//0.2.587//kernel//CRamdom.sharp:10:4: note:  
		def __seed(var sd)
		   ^


__seed:
line: 11 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	movi #3, adx
         [0x3] 3:	int 0xe7
         [0x4] 4:	ret

func:@293 [std.kernel#__SRT_Global.__rand] in file: lib/support//0.2.587//kernel//CRamdom.sharp:19:4: note:  
		def __rand(var min, var max) : var
		   ^


__rand:
line: 20 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	loadl ecx, fp+1
         [0x2] 2:	movi #0, adx
         [0x4] 4:	int 0xe7
         [0x5] 5:	return_val bmr
         [0x6] 6:	ret

func:@294 [std.kernel#__SRT_Global.__randInt] in file: lib/support//0.2.587//kernel//CRamdom.sharp:31:4: note:  
		def __randInt(var min, var max) : var
		   ^


__randInt:
line: 32 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	loadl ecx, fp+1
         [0x2] 2:	movi #1, adx
         [0x4] 4:	int 0xe7
         [0x5] 5:	return_val bmr
         [0x6] 6:	ret

func:@295 [std.kernel#__SRT_Global.__rand] in file: lib/support//0.2.587//kernel//CRamdom.sharp:43:4: note:  
		def __rand() : var
		   ^


__rand:
line: 44 [0x0] 0:	movi #5, adx
         [0x2] 2:	int 0xe7
         [0x3] 3:	return_val bmr
         [0x4] 4:	ret

func:@296 [std.kernel#__SRT_Global.__randInt] in file: lib/support//0.2.587//kernel//CRamdom.sharp:53:4: note:  
		def __randInt() : var
		   ^


__randInt:
line: 54 [0x0] 0:	movi #6, adx
         [0x2] 2:	int 0xe7
         [0x3] 3:	return_val bmr
         [0x4] 4:	ret

func:@297 [std.kernel#__SRT_Global.__reset] in file: lib/support//0.2.587//kernel//CRamdom.sharp:63:4: note:  
		def __reset() : var
		   ^


__reset:
line: 64 [0x0] 0:	movi #2, adx
         [0x2] 2:	int 0xe7
         [0x3] 3:	return_val bmr
         [0x4] 4:	ret

func:@298 [std.kernel#__SRT_Global.__seed] in file: lib/support//0.2.587//kernel//CRamdom.sharp:73:4: note:  
		def __seed() : var
		   ^


__seed:
line: 74 [0x0] 0:	movi #4, adx
         [0x2] 2:	int 0xe7
         [0x3] 3:	return_val bmr
         [0x4] 4:	ret

func:@299 [std.kernel#Manifest.isWindows] in file: lib/support//0.2.587//kernel//Manifest.sharp:11:32: note:  
		    public static def isWindows() : var {
		                               ^


isWindows:
line: 11 [0x0] 0:	movg @29 // @std.kernel#Manifest
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	newstr @291 // "win"
         [0x4] 4:	call @576 // <std#string.$operator==(var[])>
         [0x5] 5:	loadval ebx
         [0x6] 6:	return_val ebx
         [0x7] 7:	ret

func:@300 [std.kernel#Manifest.isLinux] in file: lib/support//0.2.587//kernel//Manifest.sharp:15:30: note:  
		    public static def isLinux() : var {
		                             ^


isLinux:
line: 15 [0x0] 0:	movg @29 // @std.kernel#Manifest
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	newstr @292 // "posix"
         [0x4] 4:	call @576 // <std#string.$operator==(var[])>
         [0x5] 5:	loadval ebx
         [0x6] 6:	return_val ebx
         [0x7] 7:	ret

func:@301 [std.kernel#Manifest.Manifest] in file: lib/support//0.2.587//kernel//Manifest.sharp:5:13: note:  
		public class Manifest {
		            ^


Manifest:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@302 [std.kernel#Runtime.initializeRTE] in file: lib/support//0.2.587//kernel//Runtime.sharp:31:37: note:  
		    private static def initializeRTE() {
		                                    ^


initializeRTE:
        [0x0] 0:	movi #2, ebx
        [0x2] 2:	nop
        [0x3] 3:	rstore ebx
        [0x4] 4:	new_class @72 // app#Optimization
        [0x5] 5:	call @80 // <std#Enum.Enum()>
        [0x6] 6:	movg @72 // @app#Optimization
        [0x7] 7:	movn #5
        [0x8] 8:	popobj
        [0x9] 9:	movn #2
        [0xa] 10:	movi #0, adx
        [0xc] 12:	loadval ecx
        [0xd] 13:	rmov adx, ecx
        [0xe] 14:	newstr @223 // "HIGH_PERFORMANCE"
        [0xf] 15:	movg @72 // @app#Optimization
        [0x10] 16:	movn #5
        [0x11] 17:	movn #1
        [0x12] 18:	popobj
        [0x13] 19:	movi #1, ebx
        [0x15] 21:	nop
        [0x16] 22:	rstore ebx
        [0x17] 23:	new_class @72 // app#Optimization
        [0x18] 24:	call @80 // <std#Enum.Enum()>
        [0x19] 25:	movg @72 // @app#Optimization
        [0x1a] 26:	movn #4
        [0x1b] 27:	popobj
        [0x1c] 28:	movn #2
        [0x1d] 29:	movi #0, adx
        [0x1f] 31:	loadval ecx
        [0x20] 32:	rmov adx, ecx
        [0x21] 33:	newstr @222 // "BASIC"
        [0x22] 34:	movg @72 // @app#Optimization
        [0x23] 35:	movn #4
        [0x24] 36:	movn #1
        [0x25] 37:	popobj
        [0x26] 38:	movi #0, ebx
        [0x28] 40:	nop
        [0x29] 41:	rstore ebx
        [0x2a] 42:	new_class @72 // app#Optimization
        [0x2b] 43:	call @80 // <std#Enum.Enum()>
        [0x2c] 44:	movg @72 // @app#Optimization
        [0x2d] 45:	movn #3
        [0x2e] 46:	popobj
        [0x2f] 47:	movn #2
        [0x30] 48:	movi #0, adx
        [0x32] 50:	loadval ecx
        [0x33] 51:	rmov adx, ecx
        [0x34] 52:	newstr @221 // "NONE"
        [0x35] 53:	movg @72 // @app#Optimization
        [0x36] 54:	movn #3
        [0x37] 55:	movn #1
        [0x38] 56:	popobj
        [0x39] 57:	movi #10000, ebx
        [0x3b] 59:	nop
        [0x3c] 60:	rstore ebx
        [0x3d] 61:	new_class @71 // app#TokenType
        [0x3e] 62:	call @80 // <std#Enum.Enum()>
        [0x3f] 63:	movg @71 // @app#TokenType
        [0x40] 64:	movn #55
        [0x41] 65:	popobj
        [0x42] 66:	movn #2
        [0x43] 67:	movi #0, adx
        [0x45] 69:	loadval ecx
        [0x46] 70:	rmov adx, ecx
        [0x47] 71:	newstr @221 // "NONE"
        [0x48] 72:	movg @71 // @app#TokenType
        [0x49] 73:	movn #55
        [0x4a] 74:	movn #1
        [0x4b] 75:	popobj
        [0x4c] 76:	movi #9999, ebx
        [0x4e] 78:	nop
        [0x4f] 79:	rstore ebx
        [0x50] 80:	new_class @71 // app#TokenType
        [0x51] 81:	call @80 // <std#Enum.Enum()>
        [0x52] 82:	movg @71 // @app#TokenType
        [0x53] 83:	movn #54
        [0x54] 84:	popobj
        [0x55] 85:	movn #2
        [0x56] 86:	movi #0, adx
        [0x58] 88:	loadval ecx
        [0x59] 89:	rmov adx, ecx
        [0x5a] 90:	newstr @220 // "EOF"
        [0x5b] 91:	movg @71 // @app#TokenType
        [0x5c] 92:	movn #54
        [0x5d] 93:	movn #1
        [0x5e] 94:	popobj
        [0x5f] 95:	movi #50, ebx
        [0x61] 97:	nop
        [0x62] 98:	rstore ebx
        [0x63] 99:	new_class @71 // app#TokenType
        [0x64] 100:	call @80 // <std#Enum.Enum()>
        [0x65] 101:	movg @71 // @app#TokenType
        [0x66] 102:	movn #53
        [0x67] 103:	popobj
        [0x68] 104:	movn #2
        [0x69] 105:	movi #0, adx
        [0x6b] 107:	loadval ecx
        [0x6c] 108:	rmov adx, ecx
        [0x6d] 109:	newstr @219 // "DOLLAR"
        [0x6e] 110:	movg @71 // @app#TokenType
        [0x6f] 111:	movn #53
        [0x70] 112:	movn #1
        [0x71] 113:	popobj
        [0x72] 114:	movi #49, ebx
        [0x74] 116:	nop
        [0x75] 117:	rstore ebx
        [0x76] 118:	new_class @71 // app#TokenType
        [0x77] 119:	call @80 // <std#Enum.Enum()>
        [0x78] 120:	movg @71 // @app#TokenType
        [0x79] 121:	movn #52
        [0x7a] 122:	popobj
        [0x7b] 123:	movn #2
        [0x7c] 124:	movi #0, adx
        [0x7e] 126:	loadval ecx
        [0x7f] 127:	rmov adx, ecx
        [0x80] 128:	newstr @218 // "DEC"
        [0x81] 129:	movg @71 // @app#TokenType
        [0x82] 130:	movn #52
        [0x83] 131:	movn #1
        [0x84] 132:	popobj
        [0x85] 133:	movi #48, ebx
        [0x87] 135:	nop
        [0x88] 136:	rstore ebx
        [0x89] 137:	new_class @71 // app#TokenType
        [0x8a] 138:	call @80 // <std#Enum.Enum()>
        [0x8b] 139:	movg @71 // @app#TokenType
        [0x8c] 140:	movn #51
        [0x8d] 141:	popobj
        [0x8e] 142:	movn #2
        [0x8f] 143:	movi #0, adx
        [0x91] 145:	loadval ecx
        [0x92] 146:	rmov adx, ecx
        [0x93] 147:	newstr @217 // "INC"
        [0x94] 148:	movg @71 // @app#TokenType
        [0x95] 149:	movn #51
        [0x96] 150:	movn #1
        [0x97] 151:	popobj
        [0x98] 152:	movi #47, ebx
        [0x9a] 154:	nop
        [0x9b] 155:	rstore ebx
        [0x9c] 156:	new_class @71 // app#TokenType
        [0x9d] 157:	call @80 // <std#Enum.Enum()>
        [0x9e] 158:	movg @71 // @app#TokenType
        [0x9f] 159:	movn #50
        [0xa0] 160:	popobj
        [0xa1] 161:	movn #2
        [0xa2] 162:	movi #0, adx
        [0xa4] 164:	loadval ecx
        [0xa5] 165:	rmov adx, ecx
        [0xa6] 166:	newstr @216 // "PTR"
        [0xa7] 167:	movg @71 // @app#TokenType
        [0xa8] 168:	movn #50
        [0xa9] 169:	movn #1
        [0xaa] 170:	popobj
        [0xab] 171:	movi #46, ebx
        [0xad] 173:	nop
        [0xae] 174:	rstore ebx
        [0xaf] 175:	new_class @71 // app#TokenType
        [0xb0] 176:	call @80 // <std#Enum.Enum()>
        [0xb1] 177:	movg @71 // @app#TokenType
        [0xb2] 178:	movn #49
        [0xb3] 179:	popobj
        [0xb4] 180:	movn #2
        [0xb5] 181:	movi #0, adx
        [0xb7] 183:	loadval ecx
        [0xb8] 184:	rmov adx, ecx
        [0xb9] 185:	newstr @215 // "QUESMK"
        [0xba] 186:	movg @71 // @app#TokenType
        [0xbb] 187:	movn #49
        [0xbc] 188:	movn #1
        [0xbd] 189:	popobj
        [0xbe] 190:	movi #45, ebx
        [0xc0] 192:	nop
        [0xc1] 193:	rstore ebx
        [0xc2] 194:	new_class @71 // app#TokenType
        [0xc3] 195:	call @80 // <std#Enum.Enum()>
        [0xc4] 196:	movg @71 // @app#TokenType
        [0xc5] 197:	movn #48
        [0xc6] 198:	popobj
        [0xc7] 199:	movn #2
        [0xc8] 200:	movi #0, adx
        [0xca] 202:	loadval ecx
        [0xcb] 203:	rmov adx, ecx
        [0xcc] 204:	newstr @214 // "RIGHT_BRACE"
        [0xcd] 205:	movg @71 // @app#TokenType
        [0xce] 206:	movn #48
        [0xcf] 207:	movn #1
        [0xd0] 208:	popobj
        [0xd1] 209:	movi #44, ebx
        [0xd3] 211:	nop
        [0xd4] 212:	rstore ebx
        [0xd5] 213:	new_class @71 // app#TokenType
        [0xd6] 214:	call @80 // <std#Enum.Enum()>
        [0xd7] 215:	movg @71 // @app#TokenType
        [0xd8] 216:	movn #47
        [0xd9] 217:	popobj
        [0xda] 218:	movn #2
        [0xdb] 219:	movi #0, adx
        [0xdd] 221:	loadval ecx
        [0xde] 222:	rmov adx, ecx
        [0xdf] 223:	newstr @213 // "LEFT_BRACE"
        [0xe0] 224:	movg @71 // @app#TokenType
        [0xe1] 225:	movn #47
        [0xe2] 226:	movn #1
        [0xe3] 227:	popobj
        [0xe4] 228:	movi #43, ebx
        [0xe6] 230:	nop
        [0xe7] 231:	rstore ebx
        [0xe8] 232:	new_class @71 // app#TokenType
        [0xe9] 233:	call @80 // <std#Enum.Enum()>
        [0xea] 234:	movg @71 // @app#TokenType
        [0xeb] 235:	movn #46
        [0xec] 236:	popobj
        [0xed] 237:	movn #2
        [0xee] 238:	movi #0, adx
        [0xf0] 240:	loadval ecx
        [0xf1] 241:	rmov adx, ecx
        [0xf2] 242:	newstr @212 // "INFER"
        [0xf3] 243:	movg @71 // @app#TokenType
        [0xf4] 244:	movn #46
        [0xf5] 245:	movn #1
        [0xf6] 246:	popobj
        [0xf7] 247:	movi #42, ebx
        [0xf9] 249:	nop
        [0xfa] 250:	rstore ebx
        [0xfb] 251:	new_class @71 // app#TokenType
        [0xfc] 252:	call @80 // <std#Enum.Enum()>
        [0xfd] 253:	movg @71 // @app#TokenType
        [0xfe] 254:	movn #45
        [0xff] 255:	popobj
        [0x100] 256:	movn #2
        [0x101] 257:	movi #0, adx
        [0x103] 259:	loadval ecx
        [0x104] 260:	rmov adx, ecx
        [0x105] 261:	newstr @211 // "EQUALS"
        [0x106] 262:	movg @71 // @app#TokenType
        [0x107] 263:	movn #45
        [0x108] 264:	movn #1
        [0x109] 265:	popobj
        [0x10a] 266:	movi #41, ebx
        [0x10c] 268:	nop
        [0x10d] 269:	rstore ebx
        [0x10e] 270:	new_class @71 // app#TokenType
        [0x10f] 271:	call @80 // <std#Enum.Enum()>
        [0x110] 272:	movg @71 // @app#TokenType
        [0x111] 273:	movn #44
        [0x112] 274:	popobj
        [0x113] 275:	movn #2
        [0x114] 276:	movi #0, adx
        [0x116] 278:	loadval ecx
        [0x117] 279:	rmov adx, ecx
        [0x118] 280:	newstr @210 // "NOT"
        [0x119] 281:	movg @71 // @app#TokenType
        [0x11a] 282:	movn #44
        [0x11b] 283:	movn #1
        [0x11c] 284:	popobj
        [0x11d] 285:	movi #40, ebx
        [0x11f] 287:	nop
        [0x120] 288:	rstore ebx
        [0x121] 289:	new_class @71 // app#TokenType
        [0x122] 290:	call @80 // <std#Enum.Enum()>
        [0x123] 291:	movg @71 // @app#TokenType
        [0x124] 292:	movn #43
        [0x125] 293:	popobj
        [0x126] 294:	movn #2
        [0x127] 295:	movi #0, adx
        [0x129] 297:	loadval ecx
        [0x12a] 298:	rmov adx, ecx
        [0x12b] 299:	newstr @209 // "XOR"
        [0x12c] 300:	movg @71 // @app#TokenType
        [0x12d] 301:	movn #43
        [0x12e] 302:	movn #1
        [0x12f] 303:	popobj
        [0x130] 304:	movi #39, ebx
        [0x132] 306:	nop
        [0x133] 307:	rstore ebx
        [0x134] 308:	new_class @71 // app#TokenType
        [0x135] 309:	call @80 // <std#Enum.Enum()>
        [0x136] 310:	movg @71 // @app#TokenType
        [0x137] 311:	movn #42
        [0x138] 312:	popobj
        [0x139] 313:	movn #2
        [0x13a] 314:	movi #0, adx
        [0x13c] 316:	loadval ecx
        [0x13d] 317:	rmov adx, ecx
        [0x13e] 318:	newstr @208 // "OROR"
        [0x13f] 319:	movg @71 // @app#TokenType
        [0x140] 320:	movn #42
        [0x141] 321:	movn #1
        [0x142] 322:	popobj
        [0x143] 323:	movi #38, ebx
        [0x145] 325:	nop
        [0x146] 326:	rstore ebx
        [0x147] 327:	new_class @71 // app#TokenType
        [0x148] 328:	call @80 // <std#Enum.Enum()>
        [0x149] 329:	movg @71 // @app#TokenType
        [0x14a] 330:	movn #41
        [0x14b] 331:	popobj
        [0x14c] 332:	movn #2
        [0x14d] 333:	movi #0, adx
        [0x14f] 335:	loadval ecx
        [0x150] 336:	rmov adx, ecx
        [0x151] 337:	newstr @207 // "OR"
        [0x152] 338:	movg @71 // @app#TokenType
        [0x153] 339:	movn #41
        [0x154] 340:	movn #1
        [0x155] 341:	popobj
        [0x156] 342:	movi #37, ebx
        [0x158] 344:	nop
        [0x159] 345:	rstore ebx
        [0x15a] 346:	new_class @71 // app#TokenType
        [0x15b] 347:	call @80 // <std#Enum.Enum()>
        [0x15c] 348:	movg @71 // @app#TokenType
        [0x15d] 349:	movn #40
        [0x15e] 350:	popobj
        [0x15f] 351:	movn #2
        [0x160] 352:	movi #0, adx
        [0x162] 354:	loadval ecx
        [0x163] 355:	rmov adx, ecx
        [0x164] 356:	newstr @206 // "ANDAND"
        [0x165] 357:	movg @71 // @app#TokenType
        [0x166] 358:	movn #40
        [0x167] 359:	movn #1
        [0x168] 360:	popobj
        [0x169] 361:	movi #36, ebx
        [0x16b] 363:	nop
        [0x16c] 364:	rstore ebx
        [0x16d] 365:	new_class @71 // app#TokenType
        [0x16e] 366:	call @80 // <std#Enum.Enum()>
        [0x16f] 367:	movg @71 // @app#TokenType
        [0x170] 368:	movn #39
        [0x171] 369:	popobj
        [0x172] 370:	movn #2
        [0x173] 371:	movi #0, adx
        [0x175] 373:	loadval ecx
        [0x176] 374:	rmov adx, ecx
        [0x177] 375:	newstr @205 // "AND"
        [0x178] 376:	movg @71 // @app#TokenType
        [0x179] 377:	movn #39
        [0x17a] 378:	movn #1
        [0x17b] 379:	popobj
        [0x17c] 380:	movi #35, ebx
        [0x17e] 382:	nop
        [0x17f] 383:	rstore ebx
        [0x180] 384:	new_class @71 // app#TokenType
        [0x181] 385:	call @80 // <std#Enum.Enum()>
        [0x182] 386:	movg @71 // @app#TokenType
        [0x183] 387:	movn #38
        [0x184] 388:	popobj
        [0x185] 389:	movn #2
        [0x186] 390:	movi #0, adx
        [0x188] 392:	loadval ecx
        [0x189] 393:	rmov adx, ecx
        [0x18a] 394:	newstr @204 // "GREATERTHAN"
        [0x18b] 395:	movg @71 // @app#TokenType
        [0x18c] 396:	movn #38
        [0x18d] 397:	movn #1
        [0x18e] 398:	popobj
        [0x18f] 399:	movi #34, ebx
        [0x191] 401:	nop
        [0x192] 402:	rstore ebx
        [0x193] 403:	new_class @71 // app#TokenType
        [0x194] 404:	call @80 // <std#Enum.Enum()>
        [0x195] 405:	movg @71 // @app#TokenType
        [0x196] 406:	movn #37
        [0x197] 407:	popobj
        [0x198] 408:	movn #2
        [0x199] 409:	movi #0, adx
        [0x19b] 411:	loadval ecx
        [0x19c] 412:	rmov adx, ecx
        [0x19d] 413:	newstr @203 // "LESSTHAN"
        [0x19e] 414:	movg @71 // @app#TokenType
        [0x19f] 415:	movn #37
        [0x1a0] 416:	movn #1
        [0x1a1] 417:	popobj
        [0x1a2] 418:	movi #33, ebx
        [0x1a4] 420:	nop
        [0x1a5] 421:	rstore ebx
        [0x1a6] 422:	new_class @71 // app#TokenType
        [0x1a7] 423:	call @80 // <std#Enum.Enum()>
        [0x1a8] 424:	movg @71 // @app#TokenType
        [0x1a9] 425:	movn #36
        [0x1aa] 426:	popobj
        [0x1ab] 427:	movn #2
        [0x1ac] 428:	movi #0, adx
        [0x1ae] 430:	loadval ecx
        [0x1af] 431:	rmov adx, ecx
        [0x1b0] 432:	newstr @202 // "SHR"
        [0x1b1] 433:	movg @71 // @app#TokenType
        [0x1b2] 434:	movn #36
        [0x1b3] 435:	movn #1
        [0x1b4] 436:	popobj
        [0x1b5] 437:	movi #32, ebx
        [0x1b7] 439:	nop
        [0x1b8] 440:	rstore ebx
        [0x1b9] 441:	new_class @71 // app#TokenType
        [0x1ba] 442:	call @80 // <std#Enum.Enum()>
        [0x1bb] 443:	movg @71 // @app#TokenType
        [0x1bc] 444:	movn #35
        [0x1bd] 445:	popobj
        [0x1be] 446:	movn #2
        [0x1bf] 447:	movi #0, adx
        [0x1c1] 449:	loadval ecx
        [0x1c2] 450:	rmov adx, ecx
        [0x1c3] 451:	newstr @201 // "SHL"
        [0x1c4] 452:	movg @71 // @app#TokenType
        [0x1c5] 453:	movn #35
        [0x1c6] 454:	movn #1
        [0x1c7] 455:	popobj
        [0x1c8] 456:	movi #31, ebx
        [0x1ca] 458:	nop
        [0x1cb] 459:	rstore ebx
        [0x1cc] 460:	new_class @71 // app#TokenType
        [0x1cd] 461:	call @80 // <std#Enum.Enum()>
        [0x1ce] 462:	movg @71 // @app#TokenType
        [0x1cf] 463:	movn #34
        [0x1d0] 464:	popobj
        [0x1d1] 465:	movn #2
        [0x1d2] 466:	movi #0, adx
        [0x1d4] 468:	loadval ecx
        [0x1d5] 469:	rmov adx, ecx
        [0x1d6] 470:	newstr @200 // "NOTEQ"
        [0x1d7] 471:	movg @71 // @app#TokenType
        [0x1d8] 472:	movn #34
        [0x1d9] 473:	movn #1
        [0x1da] 474:	popobj
        [0x1db] 475:	movi #30, ebx
        [0x1dd] 477:	nop
        [0x1de] 478:	rstore ebx
        [0x1df] 479:	new_class @71 // app#TokenType
        [0x1e0] 480:	call @80 // <std#Enum.Enum()>
        [0x1e1] 481:	movg @71 // @app#TokenType
        [0x1e2] 482:	movn #33
        [0x1e3] 483:	popobj
        [0x1e4] 484:	movn #2
        [0x1e5] 485:	movi #0, adx
        [0x1e7] 487:	loadval ecx
        [0x1e8] 488:	rmov adx, ecx
        [0x1e9] 489:	newstr @199 // "MODEQ"
        [0x1ea] 490:	movg @71 // @app#TokenType
        [0x1eb] 491:	movn #33
        [0x1ec] 492:	movn #1
        [0x1ed] 493:	popobj
        [0x1ee] 494:	movi #29, ebx
        [0x1f0] 496:	nop
        [0x1f1] 497:	rstore ebx
        [0x1f2] 498:	new_class @71 // app#TokenType
        [0x1f3] 499:	call @80 // <std#Enum.Enum()>
        [0x1f4] 500:	movg @71 // @app#TokenType
        [0x1f5] 501:	movn #32
        [0x1f6] 502:	popobj
        [0x1f7] 503:	movn #2
        [0x1f8] 504:	movi #0, adx
        [0x1fa] 506:	loadval ecx
        [0x1fb] 507:	rmov adx, ecx
        [0x1fc] 508:	newstr @198 // "XOREQ"
        [0x1fd] 509:	movg @71 // @app#TokenType
        [0x1fe] 510:	movn #32
        [0x1ff] 511:	movn #1
        [0x200] 512:	popobj
        [0x201] 513:	movi #28, ebx
        [0x203] 515:	nop
        [0x204] 516:	rstore ebx
        [0x205] 517:	new_class @71 // app#TokenType
        [0x206] 518:	call @80 // <std#Enum.Enum()>
        [0x207] 519:	movg @71 // @app#TokenType
        [0x208] 520:	movn #31
        [0x209] 521:	popobj
        [0x20a] 522:	movn #2
        [0x20b] 523:	movi #0, adx
        [0x20d] 525:	loadval ecx
        [0x20e] 526:	rmov adx, ecx
        [0x20f] 527:	newstr @197 // "OREQ"
        [0x210] 528:	movg @71 // @app#TokenType
        [0x211] 529:	movn #31
        [0x212] 530:	movn #1
        [0x213] 531:	popobj
        [0x214] 532:	movi #27, ebx
        [0x216] 534:	nop
        [0x217] 535:	rstore ebx
        [0x218] 536:	new_class @71 // app#TokenType
        [0x219] 537:	call @80 // <std#Enum.Enum()>
        [0x21a] 538:	movg @71 // @app#TokenType
        [0x21b] 539:	movn #30
        [0x21c] 540:	popobj
        [0x21d] 541:	movn #2
        [0x21e] 542:	movi #0, adx
        [0x220] 544:	loadval ecx
        [0x221] 545:	rmov adx, ecx
        [0x222] 546:	newstr @196 // "ANDEQ"
        [0x223] 547:	movg @71 // @app#TokenType
        [0x224] 548:	movn #30
        [0x225] 549:	movn #1
        [0x226] 550:	popobj
        [0x227] 551:	movi #26, ebx
        [0x229] 553:	nop
        [0x22a] 554:	rstore ebx
        [0x22b] 555:	new_class @71 // app#TokenType
        [0x22c] 556:	call @80 // <std#Enum.Enum()>
        [0x22d] 557:	movg @71 // @app#TokenType
        [0x22e] 558:	movn #29
        [0x22f] 559:	popobj
        [0x230] 560:	movn #2
        [0x231] 561:	movi #0, adx
        [0x233] 563:	loadval ecx
        [0x234] 564:	rmov adx, ecx
        [0x235] 565:	newstr @195 // "DIVEQ"
        [0x236] 566:	movg @71 // @app#TokenType
        [0x237] 567:	movn #29
        [0x238] 568:	movn #1
        [0x239] 569:	popobj
        [0x23a] 570:	movi #25, ebx
        [0x23c] 572:	nop
        [0x23d] 573:	rstore ebx
        [0x23e] 574:	new_class @71 // app#TokenType
        [0x23f] 575:	call @80 // <std#Enum.Enum()>
        [0x240] 576:	movg @71 // @app#TokenType
        [0x241] 577:	movn #28
        [0x242] 578:	popobj
        [0x243] 579:	movn #2
        [0x244] 580:	movi #0, adx
        [0x246] 582:	loadval ecx
        [0x247] 583:	rmov adx, ecx
        [0x248] 584:	newstr @194 // "MULTEQ"
        [0x249] 585:	movg @71 // @app#TokenType
        [0x24a] 586:	movn #28
        [0x24b] 587:	movn #1
        [0x24c] 588:	popobj
        [0x24d] 589:	movi #24, ebx
        [0x24f] 591:	nop
        [0x250] 592:	rstore ebx
        [0x251] 593:	new_class @71 // app#TokenType
        [0x252] 594:	call @80 // <std#Enum.Enum()>
        [0x253] 595:	movg @71 // @app#TokenType
        [0x254] 596:	movn #27
        [0x255] 597:	popobj
        [0x256] 598:	movn #2
        [0x257] 599:	movi #0, adx
        [0x259] 601:	loadval ecx
        [0x25a] 602:	rmov adx, ecx
        [0x25b] 603:	newstr @193 // "MINUSEQ"
        [0x25c] 604:	movg @71 // @app#TokenType
        [0x25d] 605:	movn #27
        [0x25e] 606:	movn #1
        [0x25f] 607:	popobj
        [0x260] 608:	movi #23, ebx
        [0x262] 610:	nop
        [0x263] 611:	rstore ebx
        [0x264] 612:	new_class @71 // app#TokenType
        [0x265] 613:	call @80 // <std#Enum.Enum()>
        [0x266] 614:	movg @71 // @app#TokenType
        [0x267] 615:	movn #26
        [0x268] 616:	popobj
        [0x269] 617:	movn #2
        [0x26a] 618:	movi #0, adx
        [0x26c] 620:	loadval ecx
        [0x26d] 621:	rmov adx, ecx
        [0x26e] 622:	newstr @192 // "PLUSEQ"
        [0x26f] 623:	movg @71 // @app#TokenType
        [0x270] 624:	movn #26
        [0x271] 625:	movn #1
        [0x272] 626:	popobj
        [0x273] 627:	movi #22, ebx
        [0x275] 629:	nop
        [0x276] 630:	rstore ebx
        [0x277] 631:	new_class @71 // app#TokenType
        [0x278] 632:	call @80 // <std#Enum.Enum()>
        [0x279] 633:	movg @71 // @app#TokenType
        [0x27a] 634:	movn #25
        [0x27b] 635:	popobj
        [0x27c] 636:	movn #2
        [0x27d] 637:	movi #0, adx
        [0x27f] 639:	loadval ecx
        [0x280] 640:	rmov adx, ecx
        [0x281] 641:	newstr @191 // "EQEQ"
        [0x282] 642:	movg @71 // @app#TokenType
        [0x283] 643:	movn #25
        [0x284] 644:	movn #1
        [0x285] 645:	popobj
        [0x286] 646:	movi #21, ebx
        [0x288] 648:	nop
        [0x289] 649:	rstore ebx
        [0x28a] 650:	new_class @71 // app#TokenType
        [0x28b] 651:	call @80 // <std#Enum.Enum()>
        [0x28c] 652:	movg @71 // @app#TokenType
        [0x28d] 653:	movn #24
        [0x28e] 654:	popobj
        [0x28f] 655:	movn #2
        [0x290] 656:	movi #0, adx
        [0x292] 658:	loadval ecx
        [0x293] 659:	rmov adx, ecx
        [0x294] 660:	newstr @190 // "GTE"
        [0x295] 661:	movg @71 // @app#TokenType
        [0x296] 662:	movn #24
        [0x297] 663:	movn #1
        [0x298] 664:	popobj
        [0x299] 665:	movi #20, ebx
        [0x29b] 667:	nop
        [0x29c] 668:	rstore ebx
        [0x29d] 669:	new_class @71 // app#TokenType
        [0x29e] 670:	call @80 // <std#Enum.Enum()>
        [0x29f] 671:	movg @71 // @app#TokenType
        [0x2a0] 672:	movn #23
        [0x2a1] 673:	popobj
        [0x2a2] 674:	movn #2
        [0x2a3] 675:	movi #0, adx
        [0x2a5] 677:	loadval ecx
        [0x2a6] 678:	rmov adx, ecx
        [0x2a7] 679:	newstr @189 // "LTE"
        [0x2a8] 680:	movg @71 // @app#TokenType
        [0x2a9] 681:	movn #23
        [0x2aa] 682:	movn #1
        [0x2ab] 683:	popobj
        [0x2ac] 684:	movi #19, ebx
        [0x2ae] 686:	nop
        [0x2af] 687:	rstore ebx
        [0x2b0] 688:	new_class @71 // app#TokenType
        [0x2b1] 689:	call @80 // <std#Enum.Enum()>
        [0x2b2] 690:	movg @71 // @app#TokenType
        [0x2b3] 691:	movn #22
        [0x2b4] 692:	popobj
        [0x2b5] 693:	movn #2
        [0x2b6] 694:	movi #0, adx
        [0x2b8] 696:	loadval ecx
        [0x2b9] 697:	rmov adx, ecx
        [0x2ba] 698:	newstr @188 // "NEWLINE"
        [0x2bb] 699:	movg @71 // @app#TokenType
        [0x2bc] 700:	movn #22
        [0x2bd] 701:	movn #1
        [0x2be] 702:	popobj
        [0x2bf] 703:	movi #18, ebx
        [0x2c1] 705:	nop
        [0x2c2] 706:	rstore ebx
        [0x2c3] 707:	new_class @71 // app#TokenType
        [0x2c4] 708:	call @80 // <std#Enum.Enum()>
        [0x2c5] 709:	movg @71 // @app#TokenType
        [0x2c6] 710:	movn #21
        [0x2c7] 711:	popobj
        [0x2c8] 712:	movn #2
        [0x2c9] 713:	movi #0, adx
        [0x2cb] 715:	loadval ecx
        [0x2cc] 716:	rmov adx, ecx
        [0x2cd] 717:	newstr @187 // "COMMA"
        [0x2ce] 718:	movg @71 // @app#TokenType
        [0x2cf] 719:	movn #21
        [0x2d0] 720:	movn #1
        [0x2d1] 721:	popobj
        [0x2d2] 722:	movi #17, ebx
        [0x2d4] 724:	nop
        [0x2d5] 725:	rstore ebx
        [0x2d6] 726:	new_class @71 // app#TokenType
        [0x2d7] 727:	call @80 // <std#Enum.Enum()>
        [0x2d8] 728:	movg @71 // @app#TokenType
        [0x2d9] 729:	movn #20
        [0x2da] 730:	popobj
        [0x2db] 731:	movn #2
        [0x2dc] 732:	movi #0, adx
        [0x2de] 734:	loadval ecx
        [0x2df] 735:	rmov adx, ecx
        [0x2e0] 736:	newstr @186 // "SING_QUOTE"
        [0x2e1] 737:	movg @71 // @app#TokenType
        [0x2e2] 738:	movn #20
        [0x2e3] 739:	movn #1
        [0x2e4] 740:	popobj
        [0x2e5] 741:	movi #16, ebx
        [0x2e7] 743:	nop
        [0x2e8] 744:	rstore ebx
        [0x2e9] 745:	new_class @71 // app#TokenType
        [0x2ea] 746:	call @80 // <std#Enum.Enum()>
        [0x2eb] 747:	movg @71 // @app#TokenType
        [0x2ec] 748:	movn #19
        [0x2ed] 749:	popobj
        [0x2ee] 750:	movn #2
        [0x2ef] 751:	movi #0, adx
        [0x2f1] 753:	loadval ecx
        [0x2f2] 754:	rmov adx, ecx
        [0x2f3] 755:	newstr @185 // "DUB_QUOTE"
        [0x2f4] 756:	movg @71 // @app#TokenType
        [0x2f5] 757:	movn #19
        [0x2f6] 758:	movn #1
        [0x2f7] 759:	popobj
        [0x2f8] 760:	movi #15, ebx
        [0x2fa] 762:	nop
        [0x2fb] 763:	rstore ebx
        [0x2fc] 764:	new_class @71 // app#TokenType
        [0x2fd] 765:	call @80 // <std#Enum.Enum()>
        [0x2fe] 766:	movg @71 // @app#TokenType
        [0x2ff] 767:	movn #18
        [0x300] 768:	popobj
        [0x301] 769:	movn #2
        [0x302] 770:	movi #0, adx
        [0x304] 772:	loadval ecx
        [0x305] 773:	rmov adx, ecx
        [0x306] 774:	newstr @184 // "SEMICOLON"
        [0x307] 775:	movg @71 // @app#TokenType
        [0x308] 776:	movn #18
        [0x309] 777:	movn #1
        [0x30a] 778:	popobj
        [0x30b] 779:	movi #14, ebx
        [0x30d] 781:	nop
        [0x30e] 782:	rstore ebx
        [0x30f] 783:	new_class @71 // app#TokenType
        [0x310] 784:	call @80 // <std#Enum.Enum()>
        [0x311] 785:	movg @71 // @app#TokenType
        [0x312] 786:	movn #17
        [0x313] 787:	popobj
        [0x314] 788:	movn #2
        [0x315] 789:	movi #0, adx
        [0x317] 791:	loadval ecx
        [0x318] 792:	rmov adx, ecx
        [0x319] 793:	newstr @183 // "COLON"
        [0x31a] 794:	movg @71 // @app#TokenType
        [0x31b] 795:	movn #17
        [0x31c] 796:	movn #1
        [0x31d] 797:	popobj
        [0x31e] 798:	movi #13, ebx
        [0x320] 800:	nop
        [0x321] 801:	rstore ebx
        [0x322] 802:	new_class @71 // app#TokenType
        [0x323] 803:	call @80 // <std#Enum.Enum()>
        [0x324] 804:	movg @71 // @app#TokenType
        [0x325] 805:	movn #16
        [0x326] 806:	popobj
        [0x327] 807:	movn #2
        [0x328] 808:	movi #0, adx
        [0x32a] 810:	loadval ecx
        [0x32b] 811:	rmov adx, ecx
        [0x32c] 812:	newstr @182 // "MOD"
        [0x32d] 813:	movg @71 // @app#TokenType
        [0x32e] 814:	movn #16
        [0x32f] 815:	movn #1
        [0x330] 816:	popobj
        [0x331] 817:	movi #12, ebx
        [0x333] 819:	nop
        [0x334] 820:	rstore ebx
        [0x335] 821:	new_class @71 // app#TokenType
        [0x336] 822:	call @80 // <std#Enum.Enum()>
        [0x337] 823:	movg @71 // @app#TokenType
        [0x338] 824:	movn #15
        [0x339] 825:	popobj
        [0x33a] 826:	movn #2
        [0x33b] 827:	movi #0, adx
        [0x33d] 829:	loadval ecx
        [0x33e] 830:	rmov adx, ecx
        [0x33f] 831:	newstr @181 // "DIV"
        [0x340] 832:	movg @71 // @app#TokenType
        [0x341] 833:	movn #15
        [0x342] 834:	movn #1
        [0x343] 835:	popobj
        [0x344] 836:	movi #11, ebx
        [0x346] 838:	nop
        [0x347] 839:	rstore ebx
        [0x348] 840:	new_class @71 // app#TokenType
        [0x349] 841:	call @80 // <std#Enum.Enum()>
        [0x34a] 842:	movg @71 // @app#TokenType
        [0x34b] 843:	movn #14
        [0x34c] 844:	popobj
        [0x34d] 845:	movn #2
        [0x34e] 846:	movi #0, adx
        [0x350] 848:	loadval ecx
        [0x351] 849:	rmov adx, ecx
        [0x352] 850:	newstr @180 // "MULT"
        [0x353] 851:	movg @71 // @app#TokenType
        [0x354] 852:	movn #14
        [0x355] 853:	movn #1
        [0x356] 854:	popobj
        [0x357] 855:	movi #10, ebx
        [0x359] 857:	nop
        [0x35a] 858:	rstore ebx
        [0x35b] 859:	new_class @71 // app#TokenType
        [0x35c] 860:	call @80 // <std#Enum.Enum()>
        [0x35d] 861:	movg @71 // @app#TokenType
        [0x35e] 862:	movn #13
        [0x35f] 863:	popobj
        [0x360] 864:	movn #2
        [0x361] 865:	movi #0, adx
        [0x363] 867:	loadval ecx
        [0x364] 868:	rmov adx, ecx
        [0x365] 869:	newstr @179 // "MINUS"
        [0x366] 870:	movg @71 // @app#TokenType
        [0x367] 871:	movn #13
        [0x368] 872:	movn #1
        [0x369] 873:	popobj
        [0x36a] 874:	movi #9, ebx
        [0x36c] 876:	nop
        [0x36d] 877:	rstore ebx
        [0x36e] 878:	new_class @71 // app#TokenType
        [0x36f] 879:	call @80 // <std#Enum.Enum()>
        [0x370] 880:	movg @71 // @app#TokenType
        [0x371] 881:	movn #12
        [0x372] 882:	popobj
        [0x373] 883:	movn #2
        [0x374] 884:	movi #0, adx
        [0x376] 886:	loadval ecx
        [0x377] 887:	rmov adx, ecx
        [0x378] 888:	newstr @178 // "PLUS"
        [0x379] 889:	movg @71 // @app#TokenType
        [0x37a] 890:	movn #12
        [0x37b] 891:	movn #1
        [0x37c] 892:	popobj
        [0x37d] 893:	movi #8, ebx
        [0x37f] 895:	nop
        [0x380] 896:	rstore ebx
        [0x381] 897:	new_class @71 // app#TokenType
        [0x382] 898:	call @80 // <std#Enum.Enum()>
        [0x383] 899:	movg @71 // @app#TokenType
        [0x384] 900:	movn #11
        [0x385] 901:	popobj
        [0x386] 902:	movn #2
        [0x387] 903:	movi #0, adx
        [0x389] 905:	loadval ecx
        [0x38a] 906:	rmov adx, ecx
        [0x38b] 907:	newstr @177 // "DOT"
        [0x38c] 908:	movg @71 // @app#TokenType
        [0x38d] 909:	movn #11
        [0x38e] 910:	movn #1
        [0x38f] 911:	popobj
        [0x390] 912:	movi #7, ebx
        [0x392] 914:	nop
        [0x393] 915:	rstore ebx
        [0x394] 916:	new_class @71 // app#TokenType
        [0x395] 917:	call @80 // <std#Enum.Enum()>
        [0x396] 918:	movg @71 // @app#TokenType
        [0x397] 919:	movn #10
        [0x398] 920:	popobj
        [0x399] 921:	movn #2
        [0x39a] 922:	movi #0, adx
        [0x39c] 924:	loadval ecx
        [0x39d] 925:	rmov adx, ecx
        [0x39e] 926:	newstr @176 // "HASH"
        [0x39f] 927:	movg @71 // @app#TokenType
        [0x3a0] 928:	movn #10
        [0x3a1] 929:	movn #1
        [0x3a2] 930:	popobj
        [0x3a3] 931:	movi #6, ebx
        [0x3a5] 933:	nop
        [0x3a6] 934:	rstore ebx
        [0x3a7] 935:	new_class @71 // app#TokenType
        [0x3a8] 936:	call @80 // <std#Enum.Enum()>
        [0x3a9] 937:	movg @71 // @app#TokenType
        [0x3aa] 938:	movn #9
        [0x3ab] 939:	popobj
        [0x3ac] 940:	movn #2
        [0x3ad] 941:	movi #0, adx
        [0x3af] 943:	loadval ecx
        [0x3b0] 944:	rmov adx, ecx
        [0x3b1] 945:	newstr @175 // "RIGHT_CURLY"
        [0x3b2] 946:	movg @71 // @app#TokenType
        [0x3b3] 947:	movn #9
        [0x3b4] 948:	movn #1
        [0x3b5] 949:	popobj
        [0x3b6] 950:	movi #5, ebx
        [0x3b8] 952:	nop
        [0x3b9] 953:	rstore ebx
        [0x3ba] 954:	new_class @71 // app#TokenType
        [0x3bb] 955:	call @80 // <std#Enum.Enum()>
        [0x3bc] 956:	movg @71 // @app#TokenType
        [0x3bd] 957:	movn #8
        [0x3be] 958:	popobj
        [0x3bf] 959:	movn #2
        [0x3c0] 960:	movi #0, adx
        [0x3c2] 962:	loadval ecx
        [0x3c3] 963:	rmov adx, ecx
        [0x3c4] 964:	newstr @174 // "LEFT_CURLY"
        [0x3c5] 965:	movg @71 // @app#TokenType
        [0x3c6] 966:	movn #8
        [0x3c7] 967:	movn #1
        [0x3c8] 968:	popobj
        [0x3c9] 969:	movi #4, ebx
        [0x3cb] 971:	nop
        [0x3cc] 972:	rstore ebx
        [0x3cd] 973:	new_class @71 // app#TokenType
        [0x3ce] 974:	call @80 // <std#Enum.Enum()>
        [0x3cf] 975:	movg @71 // @app#TokenType
        [0x3d0] 976:	movn #7
        [0x3d1] 977:	popobj
        [0x3d2] 978:	movn #2
        [0x3d3] 979:	movi #0, adx
        [0x3d5] 981:	loadval ecx
        [0x3d6] 982:	rmov adx, ecx
        [0x3d7] 983:	newstr @173 // "RIGHT_PAREN"
        [0x3d8] 984:	movg @71 // @app#TokenType
        [0x3d9] 985:	movn #7
        [0x3da] 986:	movn #1
        [0x3db] 987:	popobj
        [0x3dc] 988:	movi #3, ebx
        [0x3de] 990:	nop
        [0x3df] 991:	rstore ebx
        [0x3e0] 992:	new_class @71 // app#TokenType
        [0x3e1] 993:	call @80 // <std#Enum.Enum()>
        [0x3e2] 994:	movg @71 // @app#TokenType
        [0x3e3] 995:	movn #6
        [0x3e4] 996:	popobj
        [0x3e5] 997:	movn #2
        [0x3e6] 998:	movi #0, adx
        [0x3e8] 1000:	loadval ecx
        [0x3e9] 1001:	rmov adx, ecx
        [0x3ea] 1002:	newstr @172 // "LEFT_PAREN"
        [0x3eb] 1003:	movg @71 // @app#TokenType
        [0x3ec] 1004:	movn #6
        [0x3ed] 1005:	movn #1
        [0x3ee] 1006:	popobj
        [0x3ef] 1007:	movi #2, ebx
        [0x3f1] 1009:	nop
        [0x3f2] 1010:	rstore ebx
        [0x3f3] 1011:	new_class @71 // app#TokenType
        [0x3f4] 1012:	call @80 // <std#Enum.Enum()>
        [0x3f5] 1013:	movg @71 // @app#TokenType
        [0x3f6] 1014:	movn #5
        [0x3f7] 1015:	popobj
        [0x3f8] 1016:	movn #2
        [0x3f9] 1017:	movi #0, adx
        [0x3fb] 1019:	loadval ecx
        [0x3fc] 1020:	rmov adx, ecx
        [0x3fd] 1021:	newstr @171 // "UNDERSCORE"
        [0x3fe] 1022:	movg @71 // @app#TokenType
        [0x3ff] 1023:	movn #5
        [0x400] 1024:	movn #1
        [0x401] 1025:	popobj
        [0x402] 1026:	movi #1, ebx
        [0x404] 1028:	nop
        [0x405] 1029:	rstore ebx
        [0x406] 1030:	new_class @71 // app#TokenType
        [0x407] 1031:	call @80 // <std#Enum.Enum()>
        [0x408] 1032:	movg @71 // @app#TokenType
        [0x409] 1033:	movn #4
        [0x40a] 1034:	popobj
        [0x40b] 1035:	movn #2
        [0x40c] 1036:	movi #0, adx
        [0x40e] 1038:	loadval ecx
        [0x40f] 1039:	rmov adx, ecx
        [0x410] 1040:	newstr @170 // "LETTER"
        [0x411] 1041:	movg @71 // @app#TokenType
        [0x412] 1042:	movn #4
        [0x413] 1043:	movn #1
        [0x414] 1044:	popobj
        [0x415] 1045:	movi #0, ebx
        [0x417] 1047:	nop
        [0x418] 1048:	rstore ebx
        [0x419] 1049:	new_class @71 // app#TokenType
        [0x41a] 1050:	call @80 // <std#Enum.Enum()>
        [0x41b] 1051:	movg @71 // @app#TokenType
        [0x41c] 1052:	movn #3
        [0x41d] 1053:	popobj
        [0x41e] 1054:	movn #2
        [0x41f] 1055:	movi #0, adx
        [0x421] 1057:	loadval ecx
        [0x422] 1058:	rmov adx, ecx
        [0x423] 1059:	newstr @169 // "NUMBER"
        [0x424] 1060:	movg @71 // @app#TokenType
        [0x425] 1061:	movn #3
        [0x426] 1062:	movn #1
        [0x427] 1063:	popobj
        [0x428] 1064:	movi #14, ebx
        [0x42a] 1066:	nop
        [0x42b] 1067:	rstore ebx
        [0x42c] 1068:	new_class @70 // app#TokenId
        [0x42d] 1069:	call @80 // <std#Enum.Enum()>
        [0x42e] 1070:	movg @70 // @app#TokenId
        [0x42f] 1071:	movn #17
        [0x430] 1072:	popobj
        [0x431] 1073:	movn #2
        [0x432] 1074:	movi #0, adx
        [0x434] 1076:	loadval ecx
        [0x435] 1077:	rmov adx, ecx
        [0x436] 1078:	newstr @168 // "NOENTITY"
        [0x437] 1079:	movg @70 // @app#TokenId
        [0x438] 1080:	movn #17
        [0x439] 1081:	movn #1
        [0x43a] 1082:	popobj
        [0x43b] 1083:	movi #13, ebx
        [0x43d] 1085:	nop
        [0x43e] 1086:	rstore ebx
        [0x43f] 1087:	new_class @70 // app#TokenId
        [0x440] 1088:	call @80 // <std#Enum.Enum()>
        [0x441] 1089:	movg @70 // @app#TokenId
        [0x442] 1090:	movn #16
        [0x443] 1091:	popobj
        [0x444] 1092:	movn #2
        [0x445] 1093:	movi #0, adx
        [0x447] 1095:	loadval ecx
        [0x448] 1096:	rmov adx, ecx
        [0x449] 1097:	newstr @167 // "SINGLE"
        [0x44a] 1098:	movg @70 // @app#TokenId
        [0x44b] 1099:	movn #16
        [0x44c] 1100:	movn #1
        [0x44d] 1101:	popobj
        [0x44e] 1102:	movi #12, ebx
        [0x450] 1104:	nop
        [0x451] 1105:	rstore ebx
        [0x452] 1106:	new_class @70 // app#TokenId
        [0x453] 1107:	call @80 // <std#Enum.Enum()>
        [0x454] 1108:	movg @70 // @app#TokenId
        [0x455] 1109:	movn #15
        [0x456] 1110:	popobj
        [0x457] 1111:	movn #2
        [0x458] 1112:	movi #0, adx
        [0x45a] 1114:	loadval ecx
        [0x45b] 1115:	rmov adx, ecx
        [0x45c] 1116:	newstr @166 // "RETURN_STATEMENT"
        [0x45d] 1117:	movg @70 // @app#TokenId
        [0x45e] 1118:	movn #15
        [0x45f] 1119:	movn #1
        [0x460] 1120:	popobj
        [0x461] 1121:	movi #11, ebx
        [0x463] 1123:	nop
        [0x464] 1124:	rstore ebx
        [0x465] 1125:	new_class @70 // app#TokenId
        [0x466] 1126:	call @80 // <std#Enum.Enum()>
        [0x467] 1127:	movg @70 // @app#TokenId
        [0x468] 1128:	movn #14
        [0x469] 1129:	popobj
        [0x46a] 1130:	movn #2
        [0x46b] 1131:	movi #0, adx
        [0x46d] 1133:	loadval ecx
        [0x46e] 1134:	rmov adx, ecx
        [0x46f] 1135:	newstr @165 // "SINGLELINE_COMMENT"
        [0x470] 1136:	movg @70 // @app#TokenId
        [0x471] 1137:	movn #14
        [0x472] 1138:	movn #1
        [0x473] 1139:	popobj
        [0x474] 1140:	movi #10, ebx
        [0x476] 1142:	nop
        [0x477] 1143:	rstore ebx
        [0x478] 1144:	new_class @70 // app#TokenId
        [0x479] 1145:	call @80 // <std#Enum.Enum()>
        [0x47a] 1146:	movg @70 // @app#TokenId
        [0x47b] 1147:	movn #13
        [0x47c] 1148:	popobj
        [0x47d] 1149:	movn #2
        [0x47e] 1150:	movi #0, adx
        [0x480] 1152:	loadval ecx
        [0x481] 1153:	rmov adx, ecx
        [0x482] 1154:	newstr @164 // "ACCESSTYPE"
        [0x483] 1155:	movg @70 // @app#TokenId
        [0x484] 1156:	movn #13
        [0x485] 1157:	movn #1
        [0x486] 1158:	popobj
        [0x487] 1159:	movi #9, ebx
        [0x489] 1161:	nop
        [0x48a] 1162:	rstore ebx
        [0x48b] 1163:	new_class @70 // app#TokenId
        [0x48c] 1164:	call @80 // <std#Enum.Enum()>
        [0x48d] 1165:	movg @70 // @app#TokenId
        [0x48e] 1166:	movn #12
        [0x48f] 1167:	popobj
        [0x490] 1168:	movn #2
        [0x491] 1169:	movi #0, adx
        [0x493] 1171:	loadval ecx
        [0x494] 1172:	rmov adx, ecx
        [0x495] 1173:	newstr @163 // "VALUE"
        [0x496] 1174:	movg @70 // @app#TokenId
        [0x497] 1175:	movn #12
        [0x498] 1176:	movn #1
        [0x499] 1177:	popobj
        [0x49a] 1178:	movi #8, ebx
        [0x49c] 1180:	nop
        [0x49d] 1181:	rstore ebx
        [0x49e] 1182:	new_class @70 // app#TokenId
        [0x49f] 1183:	call @80 // <std#Enum.Enum()>
        [0x4a0] 1184:	movg @70 // @app#TokenId
        [0x4a1] 1185:	movn #11
        [0x4a2] 1186:	popobj
        [0x4a3] 1187:	movn #2
        [0x4a4] 1188:	movi #0, adx
        [0x4a6] 1190:	loadval ecx
        [0x4a7] 1191:	rmov adx, ecx
        [0x4a8] 1192:	newstr @162 // "LITERAL"
        [0x4a9] 1193:	movg @70 // @app#TokenId
        [0x4aa] 1194:	movn #11
        [0x4ab] 1195:	movn #1
        [0x4ac] 1196:	popobj
        [0x4ad] 1197:	movi #7, ebx
        [0x4af] 1199:	nop
        [0x4b0] 1200:	rstore ebx
        [0x4b1] 1201:	new_class @70 // app#TokenId
        [0x4b2] 1202:	call @80 // <std#Enum.Enum()>
        [0x4b3] 1203:	movg @70 // @app#TokenId
        [0x4b4] 1204:	movn #10
        [0x4b5] 1205:	popobj
        [0x4b6] 1206:	movn #2
        [0x4b7] 1207:	movi #0, adx
        [0x4b9] 1209:	loadval ecx
        [0x4ba] 1210:	rmov adx, ecx
        [0x4bb] 1211:	newstr @161 // "CHAR_LITERAL"
        [0x4bc] 1212:	movg @70 // @app#TokenId
        [0x4bd] 1213:	movn #10
        [0x4be] 1214:	movn #1
        [0x4bf] 1215:	popobj
        [0x4c0] 1216:	movi #6, ebx
        [0x4c2] 1218:	nop
        [0x4c3] 1219:	rstore ebx
        [0x4c4] 1220:	new_class @70 // app#TokenId
        [0x4c5] 1221:	call @80 // <std#Enum.Enum()>
        [0x4c6] 1222:	movg @70 // @app#TokenId
        [0x4c7] 1223:	movn #9
        [0x4c8] 1224:	popobj
        [0x4c9] 1225:	movn #2
        [0x4ca] 1226:	movi #0, adx
        [0x4cc] 1228:	loadval ecx
        [0x4cd] 1229:	rmov adx, ecx
        [0x4ce] 1230:	newstr @160 // "STRING_LITERAL"
        [0x4cf] 1231:	movg @70 // @app#TokenId
        [0x4d0] 1232:	movn #9
        [0x4d1] 1233:	movn #1
        [0x4d2] 1234:	popobj
        [0x4d3] 1235:	movi #5, ebx
        [0x4d5] 1237:	nop
        [0x4d6] 1238:	rstore ebx
        [0x4d7] 1239:	new_class @70 // app#TokenId
        [0x4d8] 1240:	call @80 // <std#Enum.Enum()>
        [0x4d9] 1241:	movg @70 // @app#TokenId
        [0x4da] 1242:	movn #8
        [0x4db] 1243:	popobj
        [0x4dc] 1244:	movn #2
        [0x4dd] 1245:	movi #0, adx
        [0x4df] 1247:	loadval ecx
        [0x4e0] 1248:	rmov adx, ecx
        [0x4e1] 1249:	newstr @159 // "MODULENAME"
        [0x4e2] 1250:	movg @70 // @app#TokenId
        [0x4e3] 1251:	movn #8
        [0x4e4] 1252:	movn #1
        [0x4e5] 1253:	popobj
        [0x4e6] 1254:	movi #4, ebx
        [0x4e8] 1256:	nop
        [0x4e9] 1257:	rstore ebx
        [0x4ea] 1258:	new_class @70 // app#TokenId
        [0x4eb] 1259:	call @80 // <std#Enum.Enum()>
        [0x4ec] 1260:	movg @70 // @app#TokenId
        [0x4ed] 1261:	movn #7
        [0x4ee] 1262:	popobj
        [0x4ef] 1263:	movn #2
        [0x4f0] 1264:	movi #0, adx
        [0x4f2] 1266:	loadval ecx
        [0x4f3] 1267:	rmov adx, ecx
        [0x4f4] 1268:	newstr @158 // "HEX_LITERAL"
        [0x4f5] 1269:	movg @70 // @app#TokenId
        [0x4f6] 1270:	movn #7
        [0x4f7] 1271:	movn #1
        [0x4f8] 1272:	popobj
        [0x4f9] 1273:	movi #3, ebx
        [0x4fb] 1275:	nop
        [0x4fc] 1276:	rstore ebx
        [0x4fd] 1277:	new_class @70 // app#TokenId
        [0x4fe] 1278:	call @80 // <std#Enum.Enum()>
        [0x4ff] 1279:	movg @70 // @app#TokenId
        [0x500] 1280:	movn #6
        [0x501] 1281:	popobj
        [0x502] 1282:	movn #2
        [0x503] 1283:	movi #0, adx
        [0x505] 1285:	loadval ecx
        [0x506] 1286:	rmov adx, ecx
        [0x507] 1287:	newstr @157 // "INTEGER_LITERAL"
        [0x508] 1288:	movg @70 // @app#TokenId
        [0x509] 1289:	movn #6
        [0x50a] 1290:	movn #1
        [0x50b] 1291:	popobj
        [0x50c] 1292:	movi #2, ebx
        [0x50e] 1294:	nop
        [0x50f] 1295:	rstore ebx
        [0x510] 1296:	new_class @70 // app#TokenId
        [0x511] 1297:	call @80 // <std#Enum.Enum()>
        [0x512] 1298:	movg @70 // @app#TokenId
        [0x513] 1299:	movn #5
        [0x514] 1300:	popobj
        [0x515] 1301:	movn #2
        [0x516] 1302:	movi #0, adx
        [0x518] 1304:	loadval ecx
        [0x519] 1305:	rmov adx, ecx
        [0x51a] 1306:	newstr @156 // "TYPE_IDENTIFIER"
        [0x51b] 1307:	movg @70 // @app#TokenId
        [0x51c] 1308:	movn #5
        [0x51d] 1309:	movn #1
        [0x51e] 1310:	popobj
        [0x51f] 1311:	movi #1, ebx
        [0x521] 1313:	nop
        [0x522] 1314:	rstore ebx
        [0x523] 1315:	new_class @70 // app#TokenId
        [0x524] 1316:	call @80 // <std#Enum.Enum()>
        [0x525] 1317:	movg @70 // @app#TokenId
        [0x526] 1318:	movn #4
        [0x527] 1319:	popobj
        [0x528] 1320:	movn #2
        [0x529] 1321:	movi #0, adx
        [0x52b] 1323:	loadval ecx
        [0x52c] 1324:	rmov adx, ecx
        [0x52d] 1325:	newstr @155 // "NATIVE_TYPE"
        [0x52e] 1326:	movg @70 // @app#TokenId
        [0x52f] 1327:	movn #4
        [0x530] 1328:	movn #1
        [0x531] 1329:	popobj
        [0x532] 1330:	movi #0, ebx
        [0x534] 1332:	nop
        [0x535] 1333:	rstore ebx
        [0x536] 1334:	new_class @70 // app#TokenId
        [0x537] 1335:	call @80 // <std#Enum.Enum()>
        [0x538] 1336:	movg @70 // @app#TokenId
        [0x539] 1337:	movn #3
        [0x53a] 1338:	popobj
        [0x53b] 1339:	movn #2
        [0x53c] 1340:	movi #0, adx
        [0x53e] 1342:	loadval ecx
        [0x53f] 1343:	rmov adx, ecx
        [0x540] 1344:	newstr @154 // "IDENTIFIER"
        [0x541] 1345:	movg @70 // @app#TokenId
        [0x542] 1346:	movn #3
        [0x543] 1347:	movn #1
        [0x544] 1348:	popobj
        [0x545] 1349:	movi #87, ebx
        [0x547] 1351:	nop
        [0x548] 1352:	rstore ebx
        [0x549] 1353:	new_class @69 // app#AstType
        [0x54a] 1354:	call @80 // <std#Enum.Enum()>
        [0x54b] 1355:	movg @69 // @app#AstType
        [0x54c] 1356:	movn #90
        [0x54d] 1357:	popobj
        [0x54e] 1358:	movn #2
        [0x54f] 1359:	movi #0, adx
        [0x551] 1361:	loadval ecx
        [0x552] 1362:	rmov adx, ecx
        [0x553] 1363:	newstr @153 // "None"
        [0x554] 1364:	movg @69 // @app#AstType
        [0x555] 1365:	movn #90
        [0x556] 1366:	movn #1
        [0x557] 1367:	popobj
        [0x558] 1368:	movi #86, ebx
        [0x55a] 1370:	nop
        [0x55b] 1371:	rstore ebx
        [0x55c] 1372:	new_class @69 // app#AstType
        [0x55d] 1373:	call @80 // <std#Enum.Enum()>
        [0x55e] 1374:	movg @69 // @app#AstType
        [0x55f] 1375:	movn #89
        [0x560] 1376:	popobj
        [0x561] 1377:	movn #2
        [0x562] 1378:	movi #0, adx
        [0x564] 1380:	loadval ecx
        [0x565] 1381:	rmov adx, ecx
        [0x566] 1382:	newstr @152 // "Free_E"
        [0x567] 1383:	movg @69 // @app#AstType
        [0x568] 1384:	movn #89
        [0x569] 1385:	movn #1
        [0x56a] 1386:	popobj
        [0x56b] 1387:	movi #85, ebx
        [0x56d] 1389:	nop
        [0x56e] 1390:	rstore ebx
        [0x56f] 1391:	new_class @69 // app#AstType
        [0x570] 1392:	call @80 // <std#Enum.Enum()>
        [0x571] 1393:	movg @69 // @app#AstType
        [0x572] 1394:	movn #88
        [0x573] 1395:	popobj
        [0x574] 1396:	movn #2
        [0x575] 1397:	movi #0, adx
        [0x577] 1399:	loadval ecx
        [0x578] 1400:	rmov adx, ecx
        [0x579] 1401:	newstr @151 // "Sizeof_E"
        [0x57a] 1402:	movg @69 // @app#AstType
        [0x57b] 1403:	movn #88
        [0x57c] 1404:	movn #1
        [0x57d] 1405:	popobj
        [0x57e] 1406:	movi #84, ebx
        [0x580] 1408:	nop
        [0x581] 1409:	rstore ebx
        [0x582] 1410:	new_class @69 // app#AstType
        [0x583] 1411:	call @80 // <std#Enum.Enum()>
        [0x584] 1412:	movg @69 // @app#AstType
        [0x585] 1413:	movn #87
        [0x586] 1414:	popobj
        [0x587] 1415:	movn #2
        [0x588] 1416:	movi #0, adx
        [0x58a] 1418:	loadval ecx
        [0x58b] 1419:	rmov adx, ecx
        [0x58c] 1420:	newstr @150 // "Assign_E"
        [0x58d] 1421:	movg @69 // @app#AstType
        [0x58e] 1422:	movn #87
        [0x58f] 1423:	movn #1
        [0x590] 1424:	popobj
        [0x591] 1425:	movi #83, ebx
        [0x593] 1427:	nop
        [0x594] 1428:	rstore ebx
        [0x595] 1429:	new_class @69 // app#AstType
        [0x596] 1430:	call @80 // <std#Enum.Enum()>
        [0x597] 1431:	movg @69 // @app#AstType
        [0x598] 1432:	movn #86
        [0x599] 1433:	popobj
        [0x59a] 1434:	movn #2
        [0x59b] 1435:	movi #0, adx
        [0x59d] 1437:	loadval ecx
        [0x59e] 1438:	rmov adx, ecx
        [0x59f] 1439:	newstr @149 // "Ques_E"
        [0x5a0] 1440:	movg @69 // @app#AstType
        [0x5a1] 1441:	movn #86
        [0x5a2] 1442:	movn #1
        [0x5a3] 1443:	popobj
        [0x5a4] 1444:	movi #82, ebx
        [0x5a6] 1446:	nop
        [0x5a7] 1447:	rstore ebx
        [0x5a8] 1448:	new_class @69 // app#AstType
        [0x5a9] 1449:	call @80 // <std#Enum.Enum()>
        [0x5aa] 1450:	movg @69 // @app#AstType
        [0x5ab] 1451:	movn #85
        [0x5ac] 1452:	popobj
        [0x5ad] 1453:	movn #2
        [0x5ae] 1454:	movi #0, adx
        [0x5b0] 1456:	loadval ecx
        [0x5b1] 1457:	rmov adx, ecx
        [0x5b2] 1458:	newstr @148 // "And_E"
        [0x5b3] 1459:	movg @69 // @app#AstType
        [0x5b4] 1460:	movn #85
        [0x5b5] 1461:	movn #1
        [0x5b6] 1462:	popobj
        [0x5b7] 1463:	movi #81, ebx
        [0x5b9] 1465:	nop
        [0x5ba] 1466:	rstore ebx
        [0x5bb] 1467:	new_class @69 // app#AstType
        [0x5bc] 1468:	call @80 // <std#Enum.Enum()>
        [0x5bd] 1469:	movg @69 // @app#AstType
        [0x5be] 1470:	movn #84
        [0x5bf] 1471:	popobj
        [0x5c0] 1472:	movn #2
        [0x5c1] 1473:	movi #0, adx
        [0x5c3] 1475:	loadval ecx
        [0x5c4] 1476:	rmov adx, ecx
        [0x5c5] 1477:	newstr @147 // "Equal_E"
        [0x5c6] 1478:	movg @69 // @app#AstType
        [0x5c7] 1479:	movn #84
        [0x5c8] 1480:	movn #1
        [0x5c9] 1481:	popobj
        [0x5ca] 1482:	movi #80, ebx
        [0x5cc] 1484:	nop
        [0x5cd] 1485:	rstore ebx
        [0x5ce] 1486:	new_class @69 // app#AstType
        [0x5cf] 1487:	call @80 // <std#Enum.Enum()>
        [0x5d0] 1488:	movg @69 // @app#AstType
        [0x5d1] 1489:	movn #83
        [0x5d2] 1490:	popobj
        [0x5d3] 1491:	movn #2
        [0x5d4] 1492:	movi #0, adx
        [0x5d6] 1494:	loadval ecx
        [0x5d7] 1495:	rmov adx, ecx
        [0x5d8] 1496:	newstr @146 // "Less_E"
        [0x5d9] 1497:	movg @69 // @app#AstType
        [0x5da] 1498:	movn #83
        [0x5db] 1499:	movn #1
        [0x5dc] 1500:	popobj
        [0x5dd] 1501:	movi #79, ebx
        [0x5df] 1503:	nop
        [0x5e0] 1504:	rstore ebx
        [0x5e1] 1505:	new_class @69 // app#AstType
        [0x5e2] 1506:	call @80 // <std#Enum.Enum()>
        [0x5e3] 1507:	movg @69 // @app#AstType
        [0x5e4] 1508:	movn #82
        [0x5e5] 1509:	popobj
        [0x5e6] 1510:	movn #2
        [0x5e7] 1511:	movi #0, adx
        [0x5e9] 1513:	loadval ecx
        [0x5ea] 1514:	rmov adx, ecx
        [0x5eb] 1515:	newstr @145 // "Shift_E"
        [0x5ec] 1516:	movg @69 // @app#AstType
        [0x5ed] 1517:	movn #82
        [0x5ee] 1518:	movn #1
        [0x5ef] 1519:	popobj
        [0x5f0] 1520:	movi #78, ebx
        [0x5f2] 1522:	nop
        [0x5f3] 1523:	rstore ebx
        [0x5f4] 1524:	new_class @69 // app#AstType
        [0x5f5] 1525:	call @80 // <std#Enum.Enum()>
        [0x5f6] 1526:	movg @69 // @app#AstType
        [0x5f7] 1527:	movn #81
        [0x5f8] 1528:	popobj
        [0x5f9] 1529:	movn #2
        [0x5fa] 1530:	movi #0, adx
        [0x5fc] 1532:	loadval ecx
        [0x5fd] 1533:	rmov adx, ecx
        [0x5fe] 1534:	newstr @144 // "Mult_E"
        [0x5ff] 1535:	movg @69 // @app#AstType
        [0x600] 1536:	movn #81
        [0x601] 1537:	movn #1
        [0x602] 1538:	popobj
        [0x603] 1539:	movi #77, ebx
        [0x605] 1541:	nop
        [0x606] 1542:	rstore ebx
        [0x607] 1543:	new_class @69 // app#AstType
        [0x608] 1544:	call @80 // <std#Enum.Enum()>
        [0x609] 1545:	movg @69 // @app#AstType
        [0x60a] 1546:	movn #80
        [0x60b] 1547:	popobj
        [0x60c] 1548:	movn #2
        [0x60d] 1549:	movi #0, adx
        [0x60f] 1551:	loadval ecx
        [0x610] 1552:	rmov adx, ecx
        [0x611] 1553:	newstr @143 // "Add_E"
        [0x612] 1554:	movg @69 // @app#AstType
        [0x613] 1555:	movn #80
        [0x614] 1556:	movn #1
        [0x615] 1557:	popobj
        [0x616] 1558:	movi #76, ebx
        [0x618] 1560:	nop
        [0x619] 1561:	rstore ebx
        [0x61a] 1562:	new_class @69 // app#AstType
        [0x61b] 1563:	call @80 // <std#Enum.Enum()>
        [0x61c] 1564:	movg @69 // @app#AstType
        [0x61d] 1565:	movn #79
        [0x61e] 1566:	popobj
        [0x61f] 1567:	movn #2
        [0x620] 1568:	movi #0, adx
        [0x622] 1570:	loadval ecx
        [0x623] 1571:	rmov adx, ecx
        [0x624] 1572:	newstr @142 // "Vect_E"
        [0x625] 1573:	movg @69 // @app#AstType
        [0x626] 1574:	movn #79
        [0x627] 1575:	movn #1
        [0x628] 1576:	popobj
        [0x629] 1577:	movi #75, ebx
        [0x62b] 1579:	nop
        [0x62c] 1580:	rstore ebx
        [0x62d] 1581:	new_class @69 // app#AstType
        [0x62e] 1582:	call @80 // <std#Enum.Enum()>
        [0x62f] 1583:	movg @69 // @app#AstType
        [0x630] 1584:	movn #78
        [0x631] 1585:	popobj
        [0x632] 1586:	movn #2
        [0x633] 1587:	movi #0, adx
        [0x635] 1589:	loadval ecx
        [0x636] 1590:	rmov adx, ecx
        [0x637] 1591:	newstr @141 // "Paren_E"
        [0x638] 1592:	movg @69 // @app#AstType
        [0x639] 1593:	movn #78
        [0x63a] 1594:	movn #1
        [0x63b] 1595:	popobj
        [0x63c] 1596:	movi #74, ebx
        [0x63e] 1598:	nop
        [0x63f] 1599:	rstore ebx
        [0x640] 1600:	new_class @69 // app#AstType
        [0x641] 1601:	call @80 // <std#Enum.Enum()>
        [0x642] 1602:	movg @69 // @app#AstType
        [0x643] 1603:	movn #77
        [0x644] 1604:	popobj
        [0x645] 1605:	movn #2
        [0x646] 1606:	movi #0, adx
        [0x648] 1608:	loadval ecx
        [0x649] 1609:	rmov adx, ecx
        [0x64a] 1610:	newstr @140 // "Pre_Inc_E"
        [0x64b] 1611:	movg @69 // @app#AstType
        [0x64c] 1612:	movn #77
        [0x64d] 1613:	movn #1
        [0x64e] 1614:	popobj
        [0x64f] 1615:	movi #73, ebx
        [0x651] 1617:	nop
        [0x652] 1618:	rstore ebx
        [0x653] 1619:	new_class @69 // app#AstType
        [0x654] 1620:	call @80 // <std#Enum.Enum()>
        [0x655] 1621:	movg @69 // @app#AstType
        [0x656] 1622:	movn #76
        [0x657] 1623:	popobj
        [0x658] 1624:	movn #2
        [0x659] 1625:	movi #0, adx
        [0x65b] 1627:	loadval ecx
        [0x65c] 1628:	rmov adx, ecx
        [0x65d] 1629:	newstr @139 // "Cast_E"
        [0x65e] 1630:	movg @69 // @app#AstType
        [0x65f] 1631:	movn #76
        [0x660] 1632:	movn #1
        [0x661] 1633:	popobj
        [0x662] 1634:	movi #72, ebx
        [0x664] 1636:	nop
        [0x665] 1637:	rstore ebx
        [0x666] 1638:	new_class @69 // app#AstType
        [0x667] 1639:	call @80 // <std#Enum.Enum()>
        [0x668] 1640:	movg @69 // @app#AstType
        [0x669] 1641:	movn #75
        [0x66a] 1642:	popobj
        [0x66b] 1643:	movn #2
        [0x66c] 1644:	movi #0, adx
        [0x66e] 1646:	loadval ecx
        [0x66f] 1647:	rmov adx, ecx
        [0x670] 1648:	newstr @138 // "Dot_Fn_E"
        [0x671] 1649:	movg @69 // @app#AstType
        [0x672] 1650:	movn #75
        [0x673] 1651:	movn #1
        [0x674] 1652:	popobj
        [0x675] 1653:	movi #71, ebx
        [0x677] 1655:	nop
        [0x678] 1656:	rstore ebx
        [0x679] 1657:	new_class @69 // app#AstType
        [0x67a] 1658:	call @80 // <std#Enum.Enum()>
        [0x67b] 1659:	movg @69 // @app#AstType
        [0x67c] 1660:	movn #74
        [0x67d] 1661:	popobj
        [0x67e] 1662:	movn #2
        [0x67f] 1663:	movi #0, adx
        [0x681] 1665:	loadval ecx
        [0x682] 1666:	rmov adx, ecx
        [0x683] 1667:	newstr @137 // "Arry_E"
        [0x684] 1668:	movg @69 // @app#AstType
        [0x685] 1669:	movn #74
        [0x686] 1670:	movn #1
        [0x687] 1671:	popobj
        [0x688] 1672:	movi #70, ebx
        [0x68a] 1674:	nop
        [0x68b] 1675:	rstore ebx
        [0x68c] 1676:	new_class @69 // app#AstType
        [0x68d] 1677:	call @80 // <std#Enum.Enum()>
        [0x68e] 1678:	movg @69 // @app#AstType
        [0x68f] 1679:	movn #73
        [0x690] 1680:	popobj
        [0x691] 1681:	movn #2
        [0x692] 1682:	movi #0, adx
        [0x694] 1684:	loadval ecx
        [0x695] 1685:	rmov adx, ecx
        [0x696] 1686:	newstr @136 // "Post_Inc_E"
        [0x697] 1687:	movg @69 // @app#AstType
        [0x698] 1688:	movn #73
        [0x699] 1689:	movn #1
        [0x69a] 1690:	popobj
        [0x69b] 1691:	movi #69, ebx
        [0x69d] 1693:	nop
        [0x69e] 1694:	rstore ebx
        [0x69f] 1695:	new_class @69 // app#AstType
        [0x6a0] 1696:	call @80 // <std#Enum.Enum()>
        [0x6a1] 1697:	movg @69 // @app#AstType
        [0x6a2] 1698:	movn #72
        [0x6a3] 1699:	popobj
        [0x6a4] 1700:	movn #2
        [0x6a5] 1701:	movi #0, adx
        [0x6a7] 1703:	loadval ecx
        [0x6a8] 1704:	rmov adx, ecx
        [0x6a9] 1705:	newstr @135 // "Not_E"
        [0x6aa] 1706:	movg @69 // @app#AstType
        [0x6ab] 1707:	movn #72
        [0x6ac] 1708:	movn #1
        [0x6ad] 1709:	popobj
        [0x6ae] 1710:	movi #68, ebx
        [0x6b0] 1712:	nop
        [0x6b1] 1713:	rstore ebx
        [0x6b2] 1714:	new_class @69 // app#AstType
        [0x6b3] 1715:	call @80 // <std#Enum.Enum()>
        [0x6b4] 1716:	movg @69 // @app#AstType
        [0x6b5] 1717:	movn #71
        [0x6b6] 1718:	popobj
        [0x6b7] 1719:	movn #2
        [0x6b8] 1720:	movi #0, adx
        [0x6ba] 1722:	loadval ecx
        [0x6bb] 1723:	rmov adx, ecx
        [0x6bc] 1724:	newstr @134 // "New_E"
        [0x6bd] 1725:	movg @69 // @app#AstType
        [0x6be] 1726:	movn #71
        [0x6bf] 1727:	movn #1
        [0x6c0] 1728:	popobj
        [0x6c1] 1729:	movi #67, ebx
        [0x6c3] 1731:	nop
        [0x6c4] 1732:	rstore ebx
        [0x6c5] 1733:	new_class @69 // app#AstType
        [0x6c6] 1734:	call @80 // <std#Enum.Enum()>
        [0x6c7] 1735:	movg @69 // @app#AstType
        [0x6c8] 1736:	movn #70
        [0x6c9] 1737:	popobj
        [0x6ca] 1738:	movn #2
        [0x6cb] 1739:	movi #0, adx
        [0x6cd] 1741:	loadval ecx
        [0x6ce] 1742:	rmov adx, ecx
        [0x6cf] 1743:	newstr @133 // "Null_E"
        [0x6d0] 1744:	movg @69 // @app#AstType
        [0x6d1] 1745:	movn #70
        [0x6d2] 1746:	movn #1
        [0x6d3] 1747:	popobj
        [0x6d4] 1748:	movi #66, ebx
        [0x6d6] 1750:	nop
        [0x6d7] 1751:	rstore ebx
        [0x6d8] 1752:	new_class @69 // app#AstType
        [0x6d9] 1753:	call @80 // <std#Enum.Enum()>
        [0x6da] 1754:	movg @69 // @app#AstType
        [0x6db] 1755:	movn #69
        [0x6dc] 1756:	popobj
        [0x6dd] 1757:	movn #2
        [0x6de] 1758:	movi #0, adx
        [0x6e0] 1760:	loadval ecx
        [0x6e1] 1761:	rmov adx, ecx
        [0x6e2] 1762:	newstr @132 // "Base_E"
        [0x6e3] 1763:	movg @69 // @app#AstType
        [0x6e4] 1764:	movn #69
        [0x6e5] 1765:	movn #1
        [0x6e6] 1766:	popobj
        [0x6e7] 1767:	movi #65, ebx
        [0x6e9] 1769:	nop
        [0x6ea] 1770:	rstore ebx
        [0x6eb] 1771:	new_class @69 // app#AstType
        [0x6ec] 1772:	call @80 // <std#Enum.Enum()>
        [0x6ed] 1773:	movg @69 // @app#AstType
        [0x6ee] 1774:	movn #68
        [0x6ef] 1775:	popobj
        [0x6f0] 1776:	movn #2
        [0x6f1] 1777:	movi #0, adx
        [0x6f3] 1779:	loadval ecx
        [0x6f4] 1780:	rmov adx, ecx
        [0x6f5] 1781:	newstr @131 // "Self_E"
        [0x6f6] 1782:	movg @69 // @app#AstType
        [0x6f7] 1783:	movn #68
        [0x6f8] 1784:	movn #1
        [0x6f9] 1785:	popobj
        [0x6fa] 1786:	movi #64, ebx
        [0x6fc] 1788:	nop
        [0x6fd] 1789:	rstore ebx
        [0x6fe] 1790:	new_class @69 // app#AstType
        [0x6ff] 1791:	call @80 // <std#Enum.Enum()>
        [0x700] 1792:	movg @69 // @app#AstType
        [0x701] 1793:	movn #67
        [0x702] 1794:	popobj
        [0x703] 1795:	movn #2
        [0x704] 1796:	movi #0, adx
        [0x706] 1798:	loadval ecx
        [0x707] 1799:	rmov adx, ecx
        [0x708] 1800:	newstr @130 // "Dot_Not_E"
        [0x709] 1801:	movg @69 // @app#AstType
        [0x70a] 1802:	movn #67
        [0x70b] 1803:	movn #1
        [0x70c] 1804:	popobj
        [0x70d] 1805:	movi #63, ebx
        [0x70f] 1807:	nop
        [0x710] 1808:	rstore ebx
        [0x711] 1809:	new_class @69 // app#AstType
        [0x712] 1810:	call @80 // <std#Enum.Enum()>
        [0x713] 1811:	movg @69 // @app#AstType
        [0x714] 1812:	movn #66
        [0x715] 1813:	popobj
        [0x716] 1814:	movn #2
        [0x717] 1815:	movi #0, adx
        [0x719] 1817:	loadval ecx
        [0x71a] 1818:	rmov adx, ecx
        [0x71b] 1819:	newstr @129 // "Utype_Class_E"
        [0x71c] 1820:	movg @69 // @app#AstType
        [0x71d] 1821:	movn #66
        [0x71e] 1822:	movn #1
        [0x71f] 1823:	popobj
        [0x720] 1824:	movi #62, ebx
        [0x722] 1826:	nop
        [0x723] 1827:	rstore ebx
        [0x724] 1828:	new_class @69 // app#AstType
        [0x725] 1829:	call @80 // <std#Enum.Enum()>
        [0x726] 1830:	movg @69 // @app#AstType
        [0x727] 1831:	movn #65
        [0x728] 1832:	popobj
        [0x729] 1833:	movn #2
        [0x72a] 1834:	movi #0, adx
        [0x72c] 1836:	loadval ecx
        [0x72d] 1837:	rmov adx, ecx
        [0x72e] 1838:	newstr @128 // "Literal_E"
        [0x72f] 1839:	movg @69 // @app#AstType
        [0x730] 1840:	movn #65
        [0x731] 1841:	movn #1
        [0x732] 1842:	popobj
        [0x733] 1843:	movi #61, ebx
        [0x735] 1845:	nop
        [0x736] 1846:	rstore ebx
        [0x737] 1847:	new_class @69 // app#AstType
        [0x738] 1848:	call @80 // <std#Enum.Enum()>
        [0x739] 1849:	movg @69 // @app#AstType
        [0x73a] 1850:	movn #64
        [0x73b] 1851:	popobj
        [0x73c] 1852:	movn #2
        [0x73d] 1853:	movi #0, adx
        [0x73f] 1855:	loadval ecx
        [0x740] 1856:	rmov adx, ecx
        [0x741] 1857:	newstr @127 // "Literal"
        [0x742] 1858:	movg @69 // @app#AstType
        [0x743] 1859:	movn #64
        [0x744] 1860:	movn #1
        [0x745] 1861:	popobj
        [0x746] 1862:	movi #60, ebx
        [0x748] 1864:	nop
        [0x749] 1865:	rstore ebx
        [0x74a] 1866:	new_class @69 // app#AstType
        [0x74b] 1867:	call @80 // <std#Enum.Enum()>
        [0x74c] 1868:	movg @69 // @app#AstType
        [0x74d] 1869:	movn #63
        [0x74e] 1870:	popobj
        [0x74f] 1871:	movn #2
        [0x750] 1872:	movi #0, adx
        [0x752] 1874:	loadval ecx
        [0x753] 1875:	rmov adx, ecx
        [0x754] 1876:	newstr @126 // "ModuleName"
        [0x755] 1877:	movg @69 // @app#AstType
        [0x756] 1878:	movn #63
        [0x757] 1879:	movn #1
        [0x758] 1880:	popobj
        [0x759] 1881:	movi #59, ebx
        [0x75b] 1883:	nop
        [0x75c] 1884:	rstore ebx
        [0x75d] 1885:	new_class @69 // app#AstType
        [0x75e] 1886:	call @80 // <std#Enum.Enum()>
        [0x75f] 1887:	movg @69 // @app#AstType
        [0x760] 1888:	movn #62
        [0x761] 1889:	popobj
        [0x762] 1890:	movn #2
        [0x763] 1891:	movi #0, adx
        [0x765] 1893:	loadval ecx
        [0x766] 1894:	rmov adx, ecx
        [0x767] 1895:	newstr @125 // "Reference_Pointer"
        [0x768] 1896:	movg @69 // @app#AstType
        [0x769] 1897:	movn #62
        [0x76a] 1898:	movn #1
        [0x76b] 1899:	popobj
        [0x76c] 1900:	movi #58, ebx
        [0x76e] 1902:	nop
        [0x76f] 1903:	rstore ebx
        [0x770] 1904:	new_class @69 // app#AstType
        [0x771] 1905:	call @80 // <std#Enum.Enum()>
        [0x772] 1906:	movg @69 // @app#AstType
        [0x773] 1907:	movn #61
        [0x774] 1908:	popobj
        [0x775] 1909:	movn #2
        [0x776] 1910:	movi #0, adx
        [0x778] 1912:	loadval ecx
        [0x779] 1913:	rmov adx, ecx
        [0x77a] 1914:	newstr @124 // "Func_Prototype"
        [0x77b] 1915:	movg @69 // @app#AstType
        [0x77c] 1916:	movn #61
        [0x77d] 1917:	movn #1
        [0x77e] 1918:	popobj
        [0x77f] 1919:	movi #57, ebx
        [0x781] 1921:	nop
        [0x782] 1922:	rstore ebx
        [0x783] 1923:	new_class @69 // app#AstType
        [0x784] 1924:	call @80 // <std#Enum.Enum()>
        [0x785] 1925:	movg @69 // @app#AstType
        [0x786] 1926:	movn #60
        [0x787] 1927:	popobj
        [0x788] 1928:	movn #2
        [0x789] 1929:	movi #0, adx
        [0x78b] 1931:	loadval ecx
        [0x78c] 1932:	rmov adx, ecx
        [0x78d] 1933:	newstr @123 // "Enum_Identifier"
        [0x78e] 1934:	movg @69 // @app#AstType
        [0x78f] 1935:	movn #60
        [0x790] 1936:	movn #1
        [0x791] 1937:	popobj
        [0x792] 1938:	movi #56, ebx
        [0x794] 1940:	nop
        [0x795] 1941:	rstore ebx
        [0x796] 1942:	new_class @69 // app#AstType
        [0x797] 1943:	call @80 // <std#Enum.Enum()>
        [0x798] 1944:	movg @69 // @app#AstType
        [0x799] 1945:	movn #59
        [0x79a] 1946:	popobj
        [0x79b] 1947:	movn #2
        [0x79c] 1948:	movi #0, adx
        [0x79e] 1950:	loadval ecx
        [0x79f] 1951:	rmov adx, ecx
        [0x7a0] 1952:	newstr @122 // "Type_Identifier"
        [0x7a1] 1953:	movg @69 // @app#AstType
        [0x7a2] 1954:	movn #59
        [0x7a3] 1955:	movn #1
        [0x7a4] 1956:	popobj
        [0x7a5] 1957:	movi #55, ebx
        [0x7a7] 1959:	nop
        [0x7a8] 1960:	rstore ebx
        [0x7a9] 1961:	new_class @69 // app#AstType
        [0x7aa] 1962:	call @80 // <std#Enum.Enum()>
        [0x7ab] 1963:	movg @69 // @app#AstType
        [0x7ac] 1964:	movn #58
        [0x7ad] 1965:	popobj
        [0x7ae] 1966:	movn #2
        [0x7af] 1967:	movi #0, adx
        [0x7b1] 1969:	loadval ecx
        [0x7b2] 1970:	rmov adx, ecx
        [0x7b3] 1971:	newstr @121 // "Foreach_Statement"
        [0x7b4] 1972:	movg @69 // @app#AstType
        [0x7b5] 1973:	movn #58
        [0x7b6] 1974:	movn #1
        [0x7b7] 1975:	popobj
        [0x7b8] 1976:	movi #54, ebx
        [0x7ba] 1978:	nop
        [0x7bb] 1979:	rstore ebx
        [0x7bc] 1980:	new_class @69 // app#AstType
        [0x7bd] 1981:	call @80 // <std#Enum.Enum()>
        [0x7be] 1982:	movg @69 // @app#AstType
        [0x7bf] 1983:	movn #57
        [0x7c0] 1984:	popobj
        [0x7c1] 1985:	movn #2
        [0x7c2] 1986:	movi #0, adx
        [0x7c4] 1988:	loadval ecx
        [0x7c5] 1989:	rmov adx, ecx
        [0x7c6] 1990:	newstr @120 // "For_Expression_Iter"
        [0x7c7] 1991:	movg @69 // @app#AstType
        [0x7c8] 1992:	movn #57
        [0x7c9] 1993:	movn #1
        [0x7ca] 1994:	popobj
        [0x7cb] 1995:	movi #53, ebx
        [0x7cd] 1997:	nop
        [0x7ce] 1998:	rstore ebx
        [0x7cf] 1999:	new_class @69 // app#AstType
        [0x7d0] 2000:	call @80 // <std#Enum.Enum()>
        [0x7d1] 2001:	movg @69 // @app#AstType
        [0x7d2] 2002:	movn #56
        [0x7d3] 2003:	popobj
        [0x7d4] 2004:	movn #2
        [0x7d5] 2005:	movi #0, adx
        [0x7d7] 2007:	loadval ecx
        [0x7d8] 2008:	rmov adx, ecx
        [0x7d9] 2009:	newstr @119 // "For_Expression_Cond"
        [0x7da] 2010:	movg @69 // @app#AstType
        [0x7db] 2011:	movn #56
        [0x7dc] 2012:	movn #1
        [0x7dd] 2013:	popobj
        [0x7de] 2014:	movi #52, ebx
        [0x7e0] 2016:	nop
        [0x7e1] 2017:	rstore ebx
        [0x7e2] 2018:	new_class @69 // app#AstType
        [0x7e3] 2019:	call @80 // <std#Enum.Enum()>
        [0x7e4] 2020:	movg @69 // @app#AstType
        [0x7e5] 2021:	movn #55
        [0x7e6] 2022:	popobj
        [0x7e7] 2023:	movn #2
        [0x7e8] 2024:	movi #0, adx
        [0x7ea] 2026:	loadval ecx
        [0x7eb] 2027:	rmov adx, ecx
        [0x7ec] 2028:	newstr @118 // "For_Statement"
        [0x7ed] 2029:	movg @69 // @app#AstType
        [0x7ee] 2030:	movn #55
        [0x7ef] 2031:	movn #1
        [0x7f0] 2032:	popobj
        [0x7f1] 2033:	movi #51, ebx
        [0x7f3] 2035:	nop
        [0x7f4] 2036:	rstore ebx
        [0x7f5] 2037:	new_class @69 // app#AstType
        [0x7f6] 2038:	call @80 // <std#Enum.Enum()>
        [0x7f7] 2039:	movg @69 // @app#AstType
        [0x7f8] 2040:	movn #54
        [0x7f9] 2041:	popobj
        [0x7fa] 2042:	movn #2
        [0x7fb] 2043:	movi #0, adx
        [0x7fd] 2045:	loadval ecx
        [0x7fe] 2046:	rmov adx, ecx
        [0x7ff] 2047:	newstr @117 // "Assembly_Statement"
        [0x800] 2048:	movg @69 // @app#AstType
        [0x801] 2049:	movn #54
        [0x802] 2050:	movn #1
        [0x803] 2051:	popobj
        [0x804] 2052:	movi #50, ebx
        [0x806] 2054:	nop
        [0x807] 2055:	rstore ebx
        [0x808] 2056:	new_class @69 // app#AstType
        [0x809] 2057:	call @80 // <std#Enum.Enum()>
        [0x80a] 2058:	movg @69 // @app#AstType
        [0x80b] 2059:	movn #53
        [0x80c] 2060:	popobj
        [0x80d] 2061:	movn #2
        [0x80e] 2062:	movi #0, adx
        [0x810] 2064:	loadval ecx
        [0x811] 2065:	rmov adx, ecx
        [0x812] 2066:	newstr @116 // "Do_While_Statement"
        [0x813] 2067:	movg @69 // @app#AstType
        [0x814] 2068:	movn #53
        [0x815] 2069:	movn #1
        [0x816] 2070:	popobj
        [0x817] 2071:	movi #49, ebx
        [0x819] 2073:	nop
        [0x81a] 2074:	rstore ebx
        [0x81b] 2075:	new_class @69 // app#AstType
        [0x81c] 2076:	call @80 // <std#Enum.Enum()>
        [0x81d] 2077:	movg @69 // @app#AstType
        [0x81e] 2078:	movn #52
        [0x81f] 2079:	popobj
        [0x820] 2080:	movn #2
        [0x821] 2081:	movi #0, adx
        [0x823] 2083:	loadval ecx
        [0x824] 2084:	rmov adx, ecx
        [0x825] 2085:	newstr @115 // "While_Statement"
        [0x826] 2086:	movg @69 // @app#AstType
        [0x827] 2087:	movn #52
        [0x828] 2088:	movn #1
        [0x829] 2089:	popobj
        [0x82a] 2090:	movi #48, ebx
        [0x82c] 2092:	nop
        [0x82d] 2093:	rstore ebx
        [0x82e] 2094:	new_class @69 // app#AstType
        [0x82f] 2095:	call @80 // <std#Enum.Enum()>
        [0x830] 2096:	movg @69 // @app#AstType
        [0x831] 2097:	movn #51
        [0x832] 2098:	popobj
        [0x833] 2099:	movn #2
        [0x834] 2100:	movi #0, adx
        [0x836] 2102:	loadval ecx
        [0x837] 2103:	rmov adx, ecx
        [0x838] 2104:	newstr @114 // "Goto_Statement"
        [0x839] 2105:	movg @69 // @app#AstType
        [0x83a] 2106:	movn #51
        [0x83b] 2107:	movn #1
        [0x83c] 2108:	popobj
        [0x83d] 2109:	movi #47, ebx
        [0x83f] 2111:	nop
        [0x840] 2112:	rstore ebx
        [0x841] 2113:	new_class @69 // app#AstType
        [0x842] 2114:	call @80 // <std#Enum.Enum()>
        [0x843] 2115:	movg @69 // @app#AstType
        [0x844] 2116:	movn #50
        [0x845] 2117:	popobj
        [0x846] 2118:	movn #2
        [0x847] 2119:	movi #0, adx
        [0x849] 2121:	loadval ecx
        [0x84a] 2122:	rmov adx, ecx
        [0x84b] 2123:	newstr @113 // "Break_Statement"
        [0x84c] 2124:	movg @69 // @app#AstType
        [0x84d] 2125:	movn #50
        [0x84e] 2126:	movn #1
        [0x84f] 2127:	popobj
        [0x850] 2128:	movi #46, ebx
        [0x852] 2130:	nop
        [0x853] 2131:	rstore ebx
        [0x854] 2132:	new_class @69 // app#AstType
        [0x855] 2133:	call @80 // <std#Enum.Enum()>
        [0x856] 2134:	movg @69 // @app#AstType
        [0x857] 2135:	movn #49
        [0x858] 2136:	popobj
        [0x859] 2137:	movn #2
        [0x85a] 2138:	movi #0, adx
        [0x85c] 2140:	loadval ecx
        [0x85d] 2141:	rmov adx, ecx
        [0x85e] 2142:	newstr @112 // "Continue_Statement"
        [0x85f] 2143:	movg @69 // @app#AstType
        [0x860] 2144:	movn #49
        [0x861] 2145:	movn #1
        [0x862] 2146:	popobj
        [0x863] 2147:	movi #45, ebx
        [0x865] 2149:	nop
        [0x866] 2150:	rstore ebx
        [0x867] 2151:	new_class @69 // app#AstType
        [0x868] 2152:	call @80 // <std#Enum.Enum()>
        [0x869] 2153:	movg @69 // @app#AstType
        [0x86a] 2154:	movn #48
        [0x86b] 2155:	popobj
        [0x86c] 2156:	movn #2
        [0x86d] 2157:	movi #0, adx
        [0x86f] 2159:	loadval ecx
        [0x870] 2160:	rmov adx, ecx
        [0x871] 2161:	newstr @111 // "Throw_Statement"
        [0x872] 2162:	movg @69 // @app#AstType
        [0x873] 2163:	movn #48
        [0x874] 2164:	movn #1
        [0x875] 2165:	popobj
        [0x876] 2166:	movi #44, ebx
        [0x878] 2168:	nop
        [0x879] 2169:	rstore ebx
        [0x87a] 2170:	new_class @69 // app#AstType
        [0x87b] 2171:	call @80 // <std#Enum.Enum()>
        [0x87c] 2172:	movg @69 // @app#AstType
        [0x87d] 2173:	movn #47
        [0x87e] 2174:	popobj
        [0x87f] 2175:	movn #2
        [0x880] 2176:	movi #0, adx
        [0x882] 2178:	loadval ecx
        [0x883] 2179:	rmov adx, ecx
        [0x884] 2180:	newstr @110 // "Trycatch_Statement"
        [0x885] 2181:	movg @69 // @app#AstType
        [0x886] 2182:	movn #47
        [0x887] 2183:	movn #1
        [0x888] 2184:	popobj
        [0x889] 2185:	movi #43, ebx
        [0x88b] 2187:	nop
        [0x88c] 2188:	rstore ebx
        [0x88d] 2189:	new_class @69 // app#AstType
        [0x88e] 2190:	call @80 // <std#Enum.Enum()>
        [0x88f] 2191:	movg @69 // @app#AstType
        [0x890] 2192:	movn #46
        [0x891] 2193:	popobj
        [0x892] 2194:	movn #2
        [0x893] 2195:	movi #0, adx
        [0x895] 2197:	loadval ecx
        [0x896] 2198:	rmov adx, ecx
        [0x897] 2199:	newstr @109 // "Lock_Statement"
        [0x898] 2200:	movg @69 // @app#AstType
        [0x899] 2201:	movn #46
        [0x89a] 2202:	movn #1
        [0x89b] 2203:	popobj
        [0x89c] 2204:	movi #42, ebx
        [0x89e] 2206:	nop
        [0x89f] 2207:	rstore ebx
        [0x8a0] 2208:	new_class @69 // app#AstType
        [0x8a1] 2209:	call @80 // <std#Enum.Enum()>
        [0x8a2] 2210:	movg @69 // @app#AstType
        [0x8a3] 2211:	movn #45
        [0x8a4] 2212:	popobj
        [0x8a5] 2213:	movn #2
        [0x8a6] 2214:	movi #0, adx
        [0x8a8] 2216:	loadval ecx
        [0x8a9] 2217:	rmov adx, ecx
        [0x8aa] 2218:	newstr @108 // "Else_Statement"
        [0x8ab] 2219:	movg @69 // @app#AstType
        [0x8ac] 2220:	movn #45
        [0x8ad] 2221:	movn #1
        [0x8ae] 2222:	popobj
        [0x8af] 2223:	movi #41, ebx
        [0x8b1] 2225:	nop
        [0x8b2] 2226:	rstore ebx
        [0x8b3] 2227:	new_class @69 // app#AstType
        [0x8b4] 2228:	call @80 // <std#Enum.Enum()>
        [0x8b5] 2229:	movg @69 // @app#AstType
        [0x8b6] 2230:	movn #44
        [0x8b7] 2231:	popobj
        [0x8b8] 2232:	movn #2
        [0x8b9] 2233:	movi #0, adx
        [0x8bb] 2235:	loadval ecx
        [0x8bc] 2236:	rmov adx, ecx
        [0x8bd] 2237:	newstr @107 // "Elseif_Statement"
        [0x8be] 2238:	movg @69 // @app#AstType
        [0x8bf] 2239:	movn #44
        [0x8c0] 2240:	movn #1
        [0x8c1] 2241:	popobj
        [0x8c2] 2242:	movi #40, ebx
        [0x8c4] 2244:	nop
        [0x8c5] 2245:	rstore ebx
        [0x8c6] 2246:	new_class @69 // app#AstType
        [0x8c7] 2247:	call @80 // <std#Enum.Enum()>
        [0x8c8] 2248:	movg @69 // @app#AstType
        [0x8c9] 2249:	movn #43
        [0x8ca] 2250:	popobj
        [0x8cb] 2251:	movn #2
        [0x8cc] 2252:	movi #0, adx
        [0x8ce] 2254:	loadval ecx
        [0x8cf] 2255:	rmov adx, ecx
        [0x8d0] 2256:	newstr @106 // "Switch_Statement"
        [0x8d1] 2257:	movg @69 // @app#AstType
        [0x8d2] 2258:	movn #43
        [0x8d3] 2259:	movn #1
        [0x8d4] 2260:	popobj
        [0x8d5] 2261:	movi #39, ebx
        [0x8d7] 2263:	nop
        [0x8d8] 2264:	rstore ebx
        [0x8d9] 2265:	new_class @69 // app#AstType
        [0x8da] 2266:	call @80 // <std#Enum.Enum()>
        [0x8db] 2267:	movg @69 // @app#AstType
        [0x8dc] 2268:	movn #42
        [0x8dd] 2269:	popobj
        [0x8de] 2270:	movn #2
        [0x8df] 2271:	movi #0, adx
        [0x8e1] 2273:	loadval ecx
        [0x8e2] 2274:	rmov adx, ecx
        [0x8e3] 2275:	newstr @105 // "If_Statement"
        [0x8e4] 2276:	movg @69 // @app#AstType
        [0x8e5] 2277:	movn #42
        [0x8e6] 2278:	movn #1
        [0x8e7] 2279:	popobj
        [0x8e8] 2280:	movi #38, ebx
        [0x8ea] 2282:	nop
        [0x8eb] 2283:	rstore ebx
        [0x8ec] 2284:	new_class @69 // app#AstType
        [0x8ed] 2285:	call @80 // <std#Enum.Enum()>
        [0x8ee] 2286:	movg @69 // @app#AstType
        [0x8ef] 2287:	movn #41
        [0x8f0] 2288:	popobj
        [0x8f1] 2289:	movn #2
        [0x8f2] 2290:	movi #0, adx
        [0x8f4] 2292:	loadval ecx
        [0x8f5] 2293:	rmov adx, ecx
        [0x8f6] 2294:	newstr @104 // "Statement"
        [0x8f7] 2295:	movg @69 // @app#AstType
        [0x8f8] 2296:	movn #41
        [0x8f9] 2297:	movn #1
        [0x8fa] 2298:	popobj
        [0x8fb] 2299:	movi #37, ebx
        [0x8fd] 2301:	nop
        [0x8fe] 2302:	rstore ebx
        [0x8ff] 2303:	new_class @69 // app#AstType
        [0x900] 2304:	call @80 // <std#Enum.Enum()>
        [0x901] 2305:	movg @69 // @app#AstType
        [0x902] 2306:	movn #40
        [0x903] 2307:	popobj
        [0x904] 2308:	movn #2
        [0x905] 2309:	movi #0, adx
        [0x907] 2311:	loadval ecx
        [0x908] 2312:	rmov adx, ecx
        [0x909] 2313:	newstr @103 // "Return_Stmnt"
        [0x90a] 2314:	movg @69 // @app#AstType
        [0x90b] 2315:	movn #40
        [0x90c] 2316:	movn #1
        [0x90d] 2317:	popobj
        [0x90e] 2318:	movi #36, ebx
        [0x910] 2320:	nop
        [0x911] 2321:	rstore ebx
        [0x912] 2322:	new_class @69 // app#AstType
        [0x913] 2323:	call @80 // <std#Enum.Enum()>
        [0x914] 2324:	movg @69 // @app#AstType
        [0x915] 2325:	movn #39
        [0x916] 2326:	popobj
        [0x917] 2327:	movn #2
        [0x918] 2328:	movi #0, adx
        [0x91a] 2330:	loadval ecx
        [0x91b] 2331:	rmov adx, ecx
        [0x91c] 2332:	newstr @102 // "Method_Return_Type"
        [0x91d] 2333:	movg @69 // @app#AstType
        [0x91e] 2334:	movn #39
        [0x91f] 2335:	movn #1
        [0x920] 2336:	popobj
        [0x921] 2337:	movi #35, ebx
        [0x923] 2339:	nop
        [0x924] 2340:	rstore ebx
        [0x925] 2341:	new_class @69 // app#AstType
        [0x926] 2342:	call @80 // <std#Enum.Enum()>
        [0x927] 2343:	movg @69 // @app#AstType
        [0x928] 2344:	movn #38
        [0x929] 2345:	popobj
        [0x92a] 2346:	movn #2
        [0x92b] 2347:	movi #0, adx
        [0x92d] 2349:	loadval ecx
        [0x92e] 2350:	rmov adx, ecx
        [0x92f] 2351:	newstr @101 // "Catch_Clause"
        [0x930] 2352:	movg @69 // @app#AstType
        [0x931] 2353:	movn #38
        [0x932] 2354:	movn #1
        [0x933] 2355:	popobj
        [0x934] 2356:	movi #34, ebx
        [0x936] 2358:	nop
        [0x937] 2359:	rstore ebx
        [0x938] 2360:	new_class @69 // app#AstType
        [0x939] 2361:	call @80 // <std#Enum.Enum()>
        [0x93a] 2362:	movg @69 // @app#AstType
        [0x93b] 2363:	movn #37
        [0x93c] 2364:	popobj
        [0x93d] 2365:	movn #2
        [0x93e] 2366:	movi #0, adx
        [0x940] 2368:	loadval ecx
        [0x941] 2369:	rmov adx, ecx
        [0x942] 2370:	newstr @100 // "Assembly_Block"
        [0x943] 2371:	movg @69 // @app#AstType
        [0x944] 2372:	movn #37
        [0x945] 2373:	movn #1
        [0x946] 2374:	popobj
        [0x947] 2375:	movi #33, ebx
        [0x949] 2377:	nop
        [0x94a] 2378:	rstore ebx
        [0x94b] 2379:	new_class @69 // app#AstType
        [0x94c] 2380:	call @80 // <std#Enum.Enum()>
        [0x94d] 2381:	movg @69 // @app#AstType
        [0x94e] 2382:	movn #36
        [0x94f] 2383:	popobj
        [0x950] 2384:	movn #2
        [0x951] 2385:	movi #0, adx
        [0x953] 2387:	loadval ecx
        [0x954] 2388:	rmov adx, ecx
        [0x955] 2389:	newstr @99 // "Finally_Block"
        [0x956] 2390:	movg @69 // @app#AstType
        [0x957] 2391:	movn #36
        [0x958] 2392:	movn #1
        [0x959] 2393:	popobj
        [0x95a] 2394:	movi #32, ebx
        [0x95c] 2396:	nop
        [0x95d] 2397:	rstore ebx
        [0x95e] 2398:	new_class @69 // app#AstType
        [0x95f] 2399:	call @80 // <std#Enum.Enum()>
        [0x960] 2400:	movg @69 // @app#AstType
        [0x961] 2401:	movn #35
        [0x962] 2402:	popobj
        [0x963] 2403:	movn #2
        [0x964] 2404:	movi #0, adx
        [0x966] 2406:	loadval ecx
        [0x967] 2407:	rmov adx, ecx
        [0x968] 2408:	newstr @98 // "Switch_Block"
        [0x969] 2409:	movg @69 // @app#AstType
        [0x96a] 2410:	movn #35
        [0x96b] 2411:	movn #1
        [0x96c] 2412:	popobj
        [0x96d] 2413:	movi #31, ebx
        [0x96f] 2415:	nop
        [0x970] 2416:	rstore ebx
        [0x971] 2417:	new_class @69 // app#AstType
        [0x972] 2418:	call @80 // <std#Enum.Enum()>
        [0x973] 2419:	movg @69 // @app#AstType
        [0x974] 2420:	movn #34
        [0x975] 2421:	popobj
        [0x976] 2422:	movn #2
        [0x977] 2423:	movi #0, adx
        [0x979] 2425:	loadval ecx
        [0x97a] 2426:	rmov adx, ecx
        [0x97b] 2427:	newstr @97 // "Block"
        [0x97c] 2428:	movg @69 // @app#AstType
        [0x97d] 2429:	movn #34
        [0x97e] 2430:	movn #1
        [0x97f] 2431:	popobj
        [0x980] 2432:	movi #30, ebx
        [0x982] 2434:	nop
        [0x983] 2435:	rstore ebx
        [0x984] 2436:	new_class @69 // app#AstType
        [0x985] 2437:	call @80 // <std#Enum.Enum()>
        [0x986] 2438:	movg @69 // @app#AstType
        [0x987] 2439:	movn #33
        [0x988] 2440:	popobj
        [0x989] 2441:	movn #2
        [0x98a] 2442:	movi #0, adx
        [0x98c] 2444:	loadval ecx
        [0x98d] 2445:	rmov adx, ecx
        [0x98e] 2446:	newstr @96 // "Utype"
        [0x98f] 2447:	movg @69 // @app#AstType
        [0x990] 2448:	movn #33
        [0x991] 2449:	movn #1
        [0x992] 2450:	popobj
        [0x993] 2451:	movi #29, ebx
        [0x995] 2453:	nop
        [0x996] 2454:	rstore ebx
        [0x997] 2455:	new_class @69 // app#AstType
        [0x998] 2456:	call @80 // <std#Enum.Enum()>
        [0x999] 2457:	movg @69 // @app#AstType
        [0x99a] 2458:	movn #32
        [0x99b] 2459:	popobj
        [0x99c] 2460:	movn #2
        [0x99d] 2461:	movi #0, adx
        [0x99f] 2463:	loadval ecx
        [0x9a0] 2464:	rmov adx, ecx
        [0x9a1] 2465:	newstr @95 // "Dotnotation_Call_Expr"
        [0x9a2] 2466:	movg @69 // @app#AstType
        [0x9a3] 2467:	movn #32
        [0x9a4] 2468:	movn #1
        [0x9a5] 2469:	popobj
        [0x9a6] 2470:	movi #28, ebx
        [0x9a8] 2472:	nop
        [0x9a9] 2473:	rstore ebx
        [0x9aa] 2474:	new_class @69 // app#AstType
        [0x9ab] 2475:	call @80 // <std#Enum.Enum()>
        [0x9ac] 2476:	movg @69 // @app#AstType
        [0x9ad] 2477:	movn #31
        [0x9ae] 2478:	popobj
        [0x9af] 2479:	movn #2
        [0x9b0] 2480:	movi #0, adx
        [0x9b2] 2482:	loadval ecx
        [0x9b3] 2483:	rmov adx, ecx
        [0x9b4] 2484:	newstr @94 // "Primary_Expression"
        [0x9b5] 2485:	movg @69 // @app#AstType
        [0x9b6] 2486:	movn #31
        [0x9b7] 2487:	movn #1
        [0x9b8] 2488:	popobj
        [0x9b9] 2489:	movi #27, ebx
        [0x9bb] 2491:	nop
        [0x9bc] 2492:	rstore ebx
        [0x9bd] 2493:	new_class @69 // app#AstType
        [0x9be] 2494:	call @80 // <std#Enum.Enum()>
        [0x9bf] 2495:	movg @69 // @app#AstType
        [0x9c0] 2496:	movn #30
        [0x9c1] 2497:	popobj
        [0x9c2] 2498:	movn #2
        [0x9c3] 2499:	movi #0, adx
        [0x9c5] 2501:	loadval ecx
        [0x9c6] 2502:	rmov adx, ecx
        [0x9c7] 2503:	newstr @93 // "Array_Expression"
        [0x9c8] 2504:	movg @69 // @app#AstType
        [0x9c9] 2505:	movn #30
        [0x9ca] 2506:	movn #1
        [0x9cb] 2507:	popobj
        [0x9cc] 2508:	movi #26, ebx
        [0x9ce] 2510:	nop
        [0x9cf] 2511:	rstore ebx
        [0x9d0] 2512:	new_class @69 // app#AstType
        [0x9d1] 2513:	call @80 // <std#Enum.Enum()>
        [0x9d2] 2514:	movg @69 // @app#AstType
        [0x9d3] 2515:	movn #29
        [0x9d4] 2516:	popobj
        [0x9d5] 2517:	movn #2
        [0x9d6] 2518:	movi #0, adx
        [0x9d8] 2520:	loadval ecx
        [0x9d9] 2521:	rmov adx, ecx
        [0x9da] 2522:	newstr @92 // "Expression"
        [0x9db] 2523:	movg @69 // @app#AstType
        [0x9dc] 2524:	movn #29
        [0x9dd] 2525:	movn #1
        [0x9de] 2526:	popobj
        [0x9df] 2527:	movi #25, ebx
        [0x9e1] 2529:	nop
        [0x9e2] 2530:	rstore ebx
        [0x9e3] 2531:	new_class @69 // app#AstType
        [0x9e4] 2532:	call @80 // <std#Enum.Enum()>
        [0x9e5] 2533:	movg @69 // @app#AstType
        [0x9e6] 2534:	movn #28
        [0x9e7] 2535:	popobj
        [0x9e8] 2536:	movn #2
        [0x9e9] 2537:	movi #0, adx
        [0x9eb] 2539:	loadval ecx
        [0x9ec] 2540:	rmov adx, ecx
        [0x9ed] 2541:	newstr @91 // "Utype_Arg_Opt"
        [0x9ee] 2542:	movg @69 // @app#AstType
        [0x9ef] 2543:	movn #28
        [0x9f0] 2544:	movn #1
        [0x9f1] 2545:	popobj
        [0x9f2] 2546:	movi #24, ebx
        [0x9f4] 2548:	nop
        [0x9f5] 2549:	rstore ebx
        [0x9f6] 2550:	new_class @69 // app#AstType
        [0x9f7] 2551:	call @80 // <std#Enum.Enum()>
        [0x9f8] 2552:	movg @69 // @app#AstType
        [0x9f9] 2553:	movn #27
        [0x9fa] 2554:	popobj
        [0x9fb] 2555:	movn #2
        [0x9fc] 2556:	movi #0, adx
        [0x9fe] 2558:	loadval ecx
        [0x9ff] 2559:	rmov adx, ecx
        [0xa00] 2560:	newstr @90 // "Utype_Arg"
        [0xa01] 2561:	movg @69 // @app#AstType
        [0xa02] 2562:	movn #27
        [0xa03] 2563:	movn #1
        [0xa04] 2564:	popobj
        [0xa05] 2565:	movi #23, ebx
        [0xa07] 2567:	nop
        [0xa08] 2568:	rstore ebx
        [0xa09] 2569:	new_class @69 // app#AstType
        [0xa0a] 2570:	call @80 // <std#Enum.Enum()>
        [0xa0b] 2571:	movg @69 // @app#AstType
        [0xa0c] 2572:	movn #26
        [0xa0d] 2573:	popobj
        [0xa0e] 2574:	movn #2
        [0xa0f] 2575:	movi #0, adx
        [0xa11] 2577:	loadval ecx
        [0xa12] 2578:	rmov adx, ecx
        [0xa13] 2579:	newstr @89 // "Vector_Array"
        [0xa14] 2580:	movg @69 // @app#AstType
        [0xa15] 2581:	movn #26
        [0xa16] 2582:	movn #1
        [0xa17] 2583:	popobj
        [0xa18] 2584:	movi #22, ebx
        [0xa1a] 2586:	nop
        [0xa1b] 2587:	rstore ebx
        [0xa1c] 2588:	new_class @69 // app#AstType
        [0xa1d] 2589:	call @80 // <std#Enum.Enum()>
        [0xa1e] 2590:	movg @69 // @app#AstType
        [0xa1f] 2591:	movn #25
        [0xa20] 2592:	popobj
        [0xa21] 2593:	movn #2
        [0xa22] 2594:	movi #0, adx
        [0xa24] 2596:	loadval ecx
        [0xa25] 2597:	rmov adx, ecx
        [0xa26] 2598:	newstr @88 // "Enum_Identifier_List"
        [0xa27] 2599:	movg @69 // @app#AstType
        [0xa28] 2600:	movn #25
        [0xa29] 2601:	movn #1
        [0xa2a] 2602:	popobj
        [0xa2b] 2603:	movi #21, ebx
        [0xa2d] 2605:	nop
        [0xa2e] 2606:	rstore ebx
        [0xa2f] 2607:	new_class @69 // app#AstType
        [0xa30] 2608:	call @80 // <std#Enum.Enum()>
        [0xa31] 2609:	movg @69 // @app#AstType
        [0xa32] 2610:	movn #24
        [0xa33] 2611:	popobj
        [0xa34] 2612:	movn #2
        [0xa35] 2613:	movi #0, adx
        [0xa37] 2615:	loadval ecx
        [0xa38] 2616:	rmov adx, ecx
        [0xa39] 2617:	newstr @87 // "Identifier_List"
        [0xa3a] 2618:	movg @69 // @app#AstType
        [0xa3b] 2619:	movn #24
        [0xa3c] 2620:	movn #1
        [0xa3d] 2621:	popobj
        [0xa3e] 2622:	movi #20, ebx
        [0xa40] 2624:	nop
        [0xa41] 2625:	rstore ebx
        [0xa42] 2626:	new_class @69 // app#AstType
        [0xa43] 2627:	call @80 // <std#Enum.Enum()>
        [0xa44] 2628:	movg @69 // @app#AstType
        [0xa45] 2629:	movn #23
        [0xa46] 2630:	popobj
        [0xa47] 2631:	movn #2
        [0xa48] 2632:	movi #0, adx
        [0xa4a] 2634:	loadval ecx
        [0xa4b] 2635:	rmov adx, ecx
        [0xa4c] 2636:	newstr @86 // "Utype_List"
        [0xa4d] 2637:	movg @69 // @app#AstType
        [0xa4e] 2638:	movn #23
        [0xa4f] 2639:	movn #1
        [0xa50] 2640:	popobj
        [0xa51] 2641:	movi #19, ebx
        [0xa53] 2643:	nop
        [0xa54] 2644:	rstore ebx
        [0xa55] 2645:	new_class @69 // app#AstType
        [0xa56] 2646:	call @80 // <std#Enum.Enum()>
        [0xa57] 2647:	movg @69 // @app#AstType
        [0xa58] 2648:	movn #22
        [0xa59] 2649:	popobj
        [0xa5a] 2650:	movn #2
        [0xa5b] 2651:	movi #0, adx
        [0xa5d] 2653:	loadval ecx
        [0xa5e] 2654:	rmov adx, ecx
        [0xa5f] 2655:	newstr @85 // "Reference_Identifier_List"
        [0xa60] 2656:	movg @69 // @app#AstType
        [0xa61] 2657:	movn #22
        [0xa62] 2658:	movn #1
        [0xa63] 2659:	popobj
        [0xa64] 2660:	movi #18, ebx
        [0xa66] 2662:	nop
        [0xa67] 2663:	rstore ebx
        [0xa68] 2664:	new_class @69 // app#AstType
        [0xa69] 2665:	call @80 // <std#Enum.Enum()>
        [0xa6a] 2666:	movg @69 // @app#AstType
        [0xa6b] 2667:	movn #21
        [0xa6c] 2668:	popobj
        [0xa6d] 2669:	movn #2
        [0xa6e] 2670:	movi #0, adx
        [0xa70] 2672:	loadval ecx
        [0xa71] 2673:	rmov adx, ecx
        [0xa72] 2674:	newstr @84 // "Utype_Arg_List_Opt"
        [0xa73] 2675:	movg @69 // @app#AstType
        [0xa74] 2676:	movn #21
        [0xa75] 2677:	movn #1
        [0xa76] 2678:	popobj
        [0xa77] 2679:	movi #17, ebx
        [0xa79] 2681:	nop
        [0xa7a] 2682:	rstore ebx
        [0xa7b] 2683:	new_class @69 // app#AstType
        [0xa7c] 2684:	call @80 // <std#Enum.Enum()>
        [0xa7d] 2685:	movg @69 // @app#AstType
        [0xa7e] 2686:	movn #20
        [0xa7f] 2687:	popobj
        [0xa80] 2688:	movn #2
        [0xa81] 2689:	movi #0, adx
        [0xa83] 2691:	loadval ecx
        [0xa84] 2692:	rmov adx, ecx
        [0xa85] 2693:	newstr @83 // "Utype_Arg_List"
        [0xa86] 2694:	movg @69 // @app#AstType
        [0xa87] 2695:	movn #20
        [0xa88] 2696:	movn #1
        [0xa89] 2697:	popobj
        [0xa8a] 2698:	movi #16, ebx
        [0xa8c] 2700:	nop
        [0xa8d] 2701:	rstore ebx
        [0xa8e] 2702:	new_class @69 // app#AstType
        [0xa8f] 2703:	call @80 // <std#Enum.Enum()>
        [0xa90] 2704:	movg @69 // @app#AstType
        [0xa91] 2705:	movn #19
        [0xa92] 2706:	popobj
        [0xa93] 2707:	movn #2
        [0xa94] 2708:	movi #0, adx
        [0xa96] 2710:	loadval ecx
        [0xa97] 2711:	rmov adx, ecx
        [0xa98] 2712:	newstr @82 // "Value_List"
        [0xa99] 2713:	movg @69 // @app#AstType
        [0xa9a] 2714:	movn #19
        [0xa9b] 2715:	movn #1
        [0xa9c] 2716:	popobj
        [0xa9d] 2717:	movi #15, ebx
        [0xa9f] 2719:	nop
        [0xaa0] 2720:	rstore ebx
        [0xaa1] 2721:	new_class @69 // app#AstType
        [0xaa2] 2722:	call @80 // <std#Enum.Enum()>
        [0xaa3] 2723:	movg @69 // @app#AstType
        [0xaa4] 2724:	movn #18
        [0xaa5] 2725:	popobj
        [0xaa6] 2726:	movn #2
        [0xaa7] 2727:	movi #0, adx
        [0xaa9] 2729:	loadval ecx
        [0xaaa] 2730:	rmov adx, ecx
        [0xaab] 2731:	newstr @81 // "Value"
        [0xaac] 2732:	movg @69 // @app#AstType
        [0xaad] 2733:	movn #18
        [0xaae] 2734:	movn #1
        [0xaaf] 2735:	popobj
        [0xab0] 2736:	movi #14, ebx
        [0xab2] 2738:	nop
        [0xab3] 2739:	rstore ebx
        [0xab4] 2740:	new_class @69 // app#AstType
        [0xab5] 2741:	call @80 // <std#Enum.Enum()>
        [0xab6] 2742:	movg @69 // @app#AstType
        [0xab7] 2743:	movn #17
        [0xab8] 2744:	popobj
        [0xab9] 2745:	movn #2
        [0xaba] 2746:	movi #0, adx
        [0xabc] 2748:	loadval ecx
        [0xabd] 2749:	rmov adx, ecx
        [0xabe] 2750:	newstr @80 // "Switch_Declarator"
        [0xabf] 2751:	movg @69 // @app#AstType
        [0xac0] 2752:	movn #17
        [0xac1] 2753:	movn #1
        [0xac2] 2754:	popobj
        [0xac3] 2755:	movi #13, ebx
        [0xac5] 2757:	nop
        [0xac6] 2758:	rstore ebx
        [0xac7] 2759:	new_class @69 // app#AstType
        [0xac8] 2760:	call @80 // <std#Enum.Enum()>
        [0xac9] 2761:	movg @69 // @app#AstType
        [0xaca] 2762:	movn #16
        [0xacb] 2763:	popobj
        [0xacc] 2764:	movn #2
        [0xacd] 2765:	movi #0, adx
        [0xacf] 2767:	loadval ecx
        [0xad0] 2768:	rmov adx, ecx
        [0xad1] 2769:	newstr @79 // "Var_Decl"
        [0xad2] 2770:	movg @69 // @app#AstType
        [0xad3] 2771:	movn #16
        [0xad4] 2772:	movn #1
        [0xad5] 2773:	popobj
        [0xad6] 2774:	movi #12, ebx
        [0xad8] 2776:	nop
        [0xad9] 2777:	rstore ebx
        [0xada] 2778:	new_class @69 // app#AstType
        [0xadb] 2779:	call @80 // <std#Enum.Enum()>
        [0xadc] 2780:	movg @69 // @app#AstType
        [0xadd] 2781:	movn #15
        [0xade] 2782:	popobj
        [0xadf] 2783:	movn #2
        [0xae0] 2784:	movi #0, adx
        [0xae2] 2786:	loadval ecx
        [0xae3] 2787:	rmov adx, ecx
        [0xae4] 2788:	newstr @78 // "Operator_Decl"
        [0xae5] 2789:	movg @69 // @app#AstType
        [0xae6] 2790:	movn #15
        [0xae7] 2791:	movn #1
        [0xae8] 2792:	popobj
        [0xae9] 2793:	movi #11, ebx
        [0xaeb] 2795:	nop
        [0xaec] 2796:	rstore ebx
        [0xaed] 2797:	new_class @69 // app#AstType
        [0xaee] 2798:	call @80 // <std#Enum.Enum()>
        [0xaef] 2799:	movg @69 // @app#AstType
        [0xaf0] 2800:	movn #14
        [0xaf1] 2801:	popobj
        [0xaf2] 2802:	movn #2
        [0xaf3] 2803:	movi #0, adx
        [0xaf5] 2805:	loadval ecx
        [0xaf6] 2806:	rmov adx, ecx
        [0xaf7] 2807:	newstr @77 // "Label_Decl"
        [0xaf8] 2808:	movg @69 // @app#AstType
        [0xaf9] 2809:	movn #14
        [0xafa] 2810:	movn #1
        [0xafb] 2811:	popobj
        [0xafc] 2812:	movi #10, ebx
        [0xafe] 2814:	nop
        [0xaff] 2815:	rstore ebx
        [0xb00] 2816:	new_class @69 // app#AstType
        [0xb01] 2817:	call @80 // <std#Enum.Enum()>
        [0xb02] 2818:	movg @69 // @app#AstType
        [0xb03] 2819:	movn #13
        [0xb04] 2820:	popobj
        [0xb05] 2821:	movn #2
        [0xb06] 2822:	movi #0, adx
        [0xb08] 2824:	loadval ecx
        [0xb09] 2825:	rmov adx, ecx
        [0xb0a] 2826:	newstr @76 // "Constructor_Decl"
        [0xb0b] 2827:	movg @69 // @app#AstType
        [0xb0c] 2828:	movn #13
        [0xb0d] 2829:	movn #1
        [0xb0e] 2830:	popobj
        [0xb0f] 2831:	movi #9, ebx
        [0xb11] 2833:	nop
        [0xb12] 2834:	rstore ebx
        [0xb13] 2835:	new_class @69 // app#AstType
        [0xb14] 2836:	call @80 // <std#Enum.Enum()>
        [0xb15] 2837:	movg @69 // @app#AstType
        [0xb16] 2838:	movn #12
        [0xb17] 2839:	popobj
        [0xb18] 2840:	movn #2
        [0xb19] 2841:	movi #0, adx
        [0xb1b] 2843:	loadval ecx
        [0xb1c] 2844:	rmov adx, ecx
        [0xb1d] 2845:	newstr @75 // "Delegate_Decl"
        [0xb1e] 2846:	movg @69 // @app#AstType
        [0xb1f] 2847:	movn #12
        [0xb20] 2848:	movn #1
        [0xb21] 2849:	popobj
        [0xb22] 2850:	movi #8, ebx
        [0xb24] 2852:	nop
        [0xb25] 2853:	rstore ebx
        [0xb26] 2854:	new_class @69 // app#AstType
        [0xb27] 2855:	call @80 // <std#Enum.Enum()>
        [0xb28] 2856:	movg @69 // @app#AstType
        [0xb29] 2857:	movn #11
        [0xb2a] 2858:	popobj
        [0xb2b] 2859:	movn #2
        [0xb2c] 2860:	movi #0, adx
        [0xb2e] 2862:	loadval ecx
        [0xb2f] 2863:	rmov adx, ecx
        [0xb30] 2864:	newstr @74 // "Delegate_Post_Decl"
        [0xb31] 2865:	movg @69 // @app#AstType
        [0xb32] 2866:	movn #11
        [0xb33] 2867:	movn #1
        [0xb34] 2868:	popobj
        [0xb35] 2869:	movi #7, ebx
        [0xb37] 2871:	nop
        [0xb38] 2872:	rstore ebx
        [0xb39] 2873:	new_class @69 // app#AstType
        [0xb3a] 2874:	call @80 // <std#Enum.Enum()>
        [0xb3b] 2875:	movg @69 // @app#AstType
        [0xb3c] 2876:	movn #10
        [0xb3d] 2877:	popobj
        [0xb3e] 2878:	movn #2
        [0xb3f] 2879:	movi #0, adx
        [0xb41] 2881:	loadval ecx
        [0xb42] 2882:	rmov adx, ecx
        [0xb43] 2883:	newstr @73 // "Enum_Decl"
        [0xb44] 2884:	movg @69 // @app#AstType
        [0xb45] 2885:	movn #10
        [0xb46] 2886:	movn #1
        [0xb47] 2887:	popobj
        [0xb48] 2888:	movi #6, ebx
        [0xb4a] 2890:	nop
        [0xb4b] 2891:	rstore ebx
        [0xb4c] 2892:	new_class @69 // app#AstType
        [0xb4d] 2893:	call @80 // <std#Enum.Enum()>
        [0xb4e] 2894:	movg @69 // @app#AstType
        [0xb4f] 2895:	movn #9
        [0xb50] 2896:	popobj
        [0xb51] 2897:	movn #2
        [0xb52] 2898:	movi #0, adx
        [0xb54] 2900:	loadval ecx
        [0xb55] 2901:	rmov adx, ecx
        [0xb56] 2902:	newstr @72 // "Method_Decl"
        [0xb57] 2903:	movg @69 // @app#AstType
        [0xb58] 2904:	movn #9
        [0xb59] 2905:	movn #1
        [0xb5a] 2906:	popobj
        [0xb5b] 2907:	movi #5, ebx
        [0xb5d] 2909:	nop
        [0xb5e] 2910:	rstore ebx
        [0xb5f] 2911:	new_class @69 // app#AstType
        [0xb60] 2912:	call @80 // <std#Enum.Enum()>
        [0xb61] 2913:	movg @69 // @app#AstType
        [0xb62] 2914:	movn #8
        [0xb63] 2915:	popobj
        [0xb64] 2916:	movn #2
        [0xb65] 2917:	movi #0, adx
        [0xb67] 2919:	loadval ecx
        [0xb68] 2920:	rmov adx, ecx
        [0xb69] 2921:	newstr @71 // "Module_Decl"
        [0xb6a] 2922:	movg @69 // @app#AstType
        [0xb6b] 2923:	movn #8
        [0xb6c] 2924:	movn #1
        [0xb6d] 2925:	popobj
        [0xb6e] 2926:	movi #4, ebx
        [0xb70] 2928:	nop
        [0xb71] 2929:	rstore ebx
        [0xb72] 2930:	new_class @69 // app#AstType
        [0xb73] 2931:	call @80 // <std#Enum.Enum()>
        [0xb74] 2932:	movg @69 // @app#AstType
        [0xb75] 2933:	movn #7
        [0xb76] 2934:	popobj
        [0xb77] 2935:	movn #2
        [0xb78] 2936:	movi #0, adx
        [0xb7a] 2938:	loadval ecx
        [0xb7b] 2939:	rmov adx, ecx
        [0xb7c] 2940:	newstr @70 // "Import_Decl"
        [0xb7d] 2941:	movg @69 // @app#AstType
        [0xb7e] 2942:	movn #7
        [0xb7f] 2943:	movn #1
        [0xb80] 2944:	popobj
        [0xb81] 2945:	movi #3, ebx
        [0xb83] 2947:	nop
        [0xb84] 2948:	rstore ebx
        [0xb85] 2949:	new_class @69 // app#AstType
        [0xb86] 2950:	call @80 // <std#Enum.Enum()>
        [0xb87] 2951:	movg @69 // @app#AstType
        [0xb88] 2952:	movn #6
        [0xb89] 2953:	popobj
        [0xb8a] 2954:	movn #2
        [0xb8b] 2955:	movi #0, adx
        [0xb8d] 2957:	loadval ecx
        [0xb8e] 2958:	rmov adx, ecx
        [0xb8f] 2959:	newstr @69 // "Interface_Decl"
        [0xb90] 2960:	movg @69 // @app#AstType
        [0xb91] 2961:	movn #6
        [0xb92] 2962:	movn #1
        [0xb93] 2963:	popobj
        [0xb94] 2964:	movi #2, ebx
        [0xb96] 2966:	nop
        [0xb97] 2967:	rstore ebx
        [0xb98] 2968:	new_class @69 // app#AstType
        [0xb99] 2969:	call @80 // <std#Enum.Enum()>
        [0xb9a] 2970:	movg @69 // @app#AstType
        [0xb9b] 2971:	movn #5
        [0xb9c] 2972:	popobj
        [0xb9d] 2973:	movn #2
        [0xb9e] 2974:	movi #0, adx
        [0xba0] 2976:	loadval ecx
        [0xba1] 2977:	rmov adx, ecx
        [0xba2] 2978:	newstr @68 // "Generic_Interface_Decl"
        [0xba3] 2979:	movg @69 // @app#AstType
        [0xba4] 2980:	movn #5
        [0xba5] 2981:	movn #1
        [0xba6] 2982:	popobj
        [0xba7] 2983:	movi #1, ebx
        [0xba9] 2985:	nop
        [0xbaa] 2986:	rstore ebx
        [0xbab] 2987:	new_class @69 // app#AstType
        [0xbac] 2988:	call @80 // <std#Enum.Enum()>
        [0xbad] 2989:	movg @69 // @app#AstType
        [0xbae] 2990:	movn #4
        [0xbaf] 2991:	popobj
        [0xbb0] 2992:	movn #2
        [0xbb1] 2993:	movi #0, adx
        [0xbb3] 2995:	loadval ecx
        [0xbb4] 2996:	rmov adx, ecx
        [0xbb5] 2997:	newstr @67 // "Generic_Class_Decl"
        [0xbb6] 2998:	movg @69 // @app#AstType
        [0xbb7] 2999:	movn #4
        [0xbb8] 3000:	movn #1
        [0xbb9] 3001:	popobj
        [0xbba] 3002:	movi #0, ebx
        [0xbbc] 3004:	nop
        [0xbbd] 3005:	rstore ebx
        [0xbbe] 3006:	new_class @69 // app#AstType
        [0xbbf] 3007:	call @80 // <std#Enum.Enum()>
        [0xbc0] 3008:	movg @69 // @app#AstType
        [0xbc1] 3009:	movn #3
        [0xbc2] 3010:	popobj
        [0xbc3] 3011:	movn #2
        [0xbc4] 3012:	movi #0, adx
        [0xbc6] 3014:	loadval ecx
        [0xbc7] 3015:	rmov adx, ecx
        [0xbc8] 3016:	newstr @66 // "Class_Decl"
        [0xbc9] 3017:	movg @69 // @app#AstType
        [0xbca] 3018:	movn #3
        [0xbcb] 3019:	movn #1
        [0xbcc] 3020:	popobj
        [0xbcd] 3021:	movi #999, ebx
        [0xbcf] 3023:	nop
        [0xbd0] 3024:	rstore ebx
        [0xbd1] 3025:	new_class @68 // app#CompilerError
        [0xbd2] 3026:	call @80 // <std#Enum.Enum()>
        [0xbd3] 3027:	movg @68 // @app#CompilerError
        [0xbd4] 3028:	movn #31
        [0xbd5] 3029:	popobj
        [0xbd6] 3030:	movn #2
        [0xbd7] 3031:	movi #0, adx
        [0xbd9] 3033:	loadval ecx
        [0xbda] 3034:	rmov adx, ecx
        [0xbdb] 3035:	newstr @65 // "NO_ERR"
        [0xbdc] 3036:	movg @68 // @app#CompilerError
        [0xbdd] 3037:	movn #31
        [0xbde] 3038:	movn #1
        [0xbdf] 3039:	popobj
        [0xbe0] 3040:	movi #27, ebx
        [0xbe2] 3042:	nop
        [0xbe3] 3043:	rstore ebx
        [0xbe4] 3044:	new_class @68 // app#CompilerError
        [0xbe5] 3045:	call @80 // <std#Enum.Enum()>
        [0xbe6] 3046:	movg @68 // @app#CompilerError
        [0xbe7] 3047:	movn #30
        [0xbe8] 3048:	popobj
        [0xbe9] 3049:	movn #2
        [0xbea] 3050:	movi #0, adx
        [0xbec] 3052:	loadval ecx
        [0xbed] 3053:	rmov adx, ecx
        [0xbee] 3054:	newstr @64 // "DUPlICATE_DECLIRATION"
        [0xbef] 3055:	movg @68 // @app#CompilerError
        [0xbf0] 3056:	movn #30
        [0xbf1] 3057:	movn #1
        [0xbf2] 3058:	popobj
        [0xbf3] 3059:	movi #26, ebx
        [0xbf5] 3061:	nop
        [0xbf6] 3062:	rstore ebx
        [0xbf7] 3063:	new_class @68 // app#CompilerError
        [0xbf8] 3064:	call @80 // <std#Enum.Enum()>
        [0xbf9] 3065:	movg @68 // @app#CompilerError
        [0xbfa] 3066:	movn #29
        [0xbfb] 3067:	popobj
        [0xbfc] 3068:	movn #2
        [0xbfd] 3069:	movi #0, adx
        [0xbff] 3071:	loadval ecx
        [0xc00] 3072:	rmov adx, ecx
        [0xc01] 3073:	newstr @63 // "INCOMPATIBLE_TYPES"
        [0xc02] 3074:	movg @68 // @app#CompilerError
        [0xc03] 3075:	movn #29
        [0xc04] 3076:	movn #1
        [0xc05] 3077:	popobj
        [0xc06] 3078:	movi #25, ebx
        [0xc08] 3080:	nop
        [0xc09] 3081:	rstore ebx
        [0xc0a] 3082:	new_class @68 // app#CompilerError
        [0xc0b] 3083:	call @80 // <std#Enum.Enum()>
        [0xc0c] 3084:	movg @68 // @app#CompilerError
        [0xc0d] 3085:	movn #28
        [0xc0e] 3086:	popobj
        [0xc0f] 3087:	movn #2
        [0xc10] 3088:	movi #0, adx
        [0xc12] 3090:	loadval ecx
        [0xc13] 3091:	rmov adx, ecx
        [0xc14] 3092:	newstr @62 // "INVALID_PARAM"
        [0xc15] 3093:	movg @68 // @app#CompilerError
        [0xc16] 3094:	movn #28
        [0xc17] 3095:	movn #1
        [0xc18] 3096:	popobj
        [0xc19] 3097:	movi #24, ebx
        [0xc1b] 3099:	nop
        [0xc1c] 3100:	rstore ebx
        [0xc1d] 3101:	new_class @68 // app#CompilerError
        [0xc1e] 3102:	call @80 // <std#Enum.Enum()>
        [0xc1f] 3103:	movg @68 // @app#CompilerError
        [0xc20] 3104:	movn #27
        [0xc21] 3105:	popobj
        [0xc22] 3106:	movn #2
        [0xc23] 3107:	movi #0, adx
        [0xc25] 3109:	loadval ecx
        [0xc26] 3110:	rmov adx, ecx
        [0xc27] 3111:	newstr @61 // "SYMBOL_ALREADY_DEFINED"
        [0xc28] 3112:	movg @68 // @app#CompilerError
        [0xc29] 3113:	movn #27
        [0xc2a] 3114:	movn #1
        [0xc2b] 3115:	popobj
        [0xc2c] 3116:	movi #23, ebx
        [0xc2e] 3118:	nop
        [0xc2f] 3119:	rstore ebx
        [0xc30] 3120:	new_class @68 // app#CompilerError
        [0xc31] 3121:	call @80 // <std#Enum.Enum()>
        [0xc32] 3122:	movg @68 // @app#CompilerError
        [0xc33] 3123:	movn #26
        [0xc34] 3124:	popobj
        [0xc35] 3125:	movn #2
        [0xc36] 3126:	movi #0, adx
        [0xc38] 3128:	loadval ecx
        [0xc39] 3129:	rmov adx, ecx
        [0xc3a] 3130:	newstr @60 // "INVALID_ACCESS"
        [0xc3b] 3131:	movg @68 // @app#CompilerError
        [0xc3c] 3132:	movn #26
        [0xc3d] 3133:	movn #1
        [0xc3e] 3134:	popobj
        [0xc3f] 3135:	movi #22, ebx
        [0xc41] 3137:	nop
        [0xc42] 3138:	rstore ebx
        [0xc43] 3139:	new_class @68 // app#CompilerError
        [0xc44] 3140:	call @80 // <std#Enum.Enum()>
        [0xc45] 3141:	movg @68 // @app#CompilerError
        [0xc46] 3142:	movn #25
        [0xc47] 3143:	popobj
        [0xc48] 3144:	movn #2
        [0xc49] 3145:	movi #0, adx
        [0xc4b] 3147:	loadval ecx
        [0xc4c] 3148:	rmov adx, ecx
        [0xc4d] 3149:	newstr @59 // "UNEXPECTED_TOKEN"
        [0xc4e] 3150:	movg @68 // @app#CompilerError
        [0xc4f] 3151:	movn #25
        [0xc50] 3152:	movn #1
        [0xc51] 3153:	popobj
        [0xc52] 3154:	movi #21, ebx
        [0xc54] 3156:	nop
        [0xc55] 3157:	rstore ebx
        [0xc56] 3158:	new_class @68 // app#CompilerError
        [0xc57] 3159:	call @80 // <std#Enum.Enum()>
        [0xc58] 3160:	movg @68 // @app#CompilerError
        [0xc59] 3161:	movn #24
        [0xc5a] 3162:	popobj
        [0xc5b] 3163:	movn #2
        [0xc5c] 3164:	movi #0, adx
        [0xc5e] 3166:	loadval ecx
        [0xc5f] 3167:	rmov adx, ecx
        [0xc60] 3168:	newstr @58 // "REDUNDANT_IMPORT"
        [0xc61] 3169:	movg @68 // @app#CompilerError
        [0xc62] 3170:	movn #24
        [0xc63] 3171:	movn #1
        [0xc64] 3172:	popobj
        [0xc65] 3173:	movi #20, ebx
        [0xc67] 3175:	nop
        [0xc68] 3176:	rstore ebx
        [0xc69] 3177:	new_class @68 // app#CompilerError
        [0xc6a] 3178:	call @80 // <std#Enum.Enum()>
        [0xc6b] 3179:	movg @68 // @app#CompilerError
        [0xc6c] 3180:	movn #23
        [0xc6d] 3181:	popobj
        [0xc6e] 3182:	movn #2
        [0xc6f] 3183:	movi #0, adx
        [0xc71] 3185:	loadval ecx
        [0xc72] 3186:	rmov adx, ecx
        [0xc73] 3187:	newstr @57 // "REDUNDANT_CAST"
        [0xc74] 3188:	movg @68 // @app#CompilerError
        [0xc75] 3189:	movn #23
        [0xc76] 3190:	movn #1
        [0xc77] 3191:	popobj
        [0xc78] 3192:	movi #19, ebx
        [0xc7a] 3194:	nop
        [0xc7b] 3195:	rstore ebx
        [0xc7c] 3196:	new_class @68 // app#CompilerError
        [0xc7d] 3197:	call @80 // <std#Enum.Enum()>
        [0xc7e] 3198:	movg @68 // @app#CompilerError
        [0xc7f] 3199:	movn #22
        [0xc80] 3200:	popobj
        [0xc81] 3201:	movn #2
        [0xc82] 3202:	movi #0, adx
        [0xc84] 3204:	loadval ecx
        [0xc85] 3205:	rmov adx, ecx
        [0xc86] 3206:	newstr @56 // "INVALID_CAST"
        [0xc87] 3207:	movg @68 // @app#CompilerError
        [0xc88] 3208:	movn #22
        [0xc89] 3209:	movn #1
        [0xc8a] 3210:	popobj
        [0xc8b] 3211:	movi #18, ebx
        [0xc8d] 3213:	nop
        [0xc8e] 3214:	rstore ebx
        [0xc8f] 3215:	new_class @68 // app#CompilerError
        [0xc90] 3216:	call @80 // <std#Enum.Enum()>
        [0xc91] 3217:	movg @68 // @app#CompilerError
        [0xc92] 3218:	movn #21
        [0xc93] 3219:	popobj
        [0xc94] 3220:	movn #2
        [0xc95] 3221:	movi #0, adx
        [0xc97] 3223:	loadval ecx
        [0xc98] 3224:	rmov adx, ecx
        [0xc99] 3225:	newstr @55 // "EXPECTED_REFRENCE_OF_TYPE"
        [0xc9a] 3226:	movg @68 // @app#CompilerError
        [0xc9b] 3227:	movn #21
        [0xc9c] 3228:	movn #1
        [0xc9d] 3229:	popobj
        [0xc9e] 3230:	movi #17, ebx
        [0xca0] 3232:	nop
        [0xca1] 3233:	rstore ebx
        [0xca2] 3234:	new_class @68 // app#CompilerError
        [0xca3] 3235:	call @80 // <std#Enum.Enum()>
        [0xca4] 3236:	movg @68 // @app#CompilerError
        [0xca5] 3237:	movn #20
        [0xca6] 3238:	popobj
        [0xca7] 3239:	movn #2
        [0xca8] 3240:	movi #0, adx
        [0xcaa] 3242:	loadval ecx
        [0xcab] 3243:	rmov adx, ecx
        [0xcac] 3244:	newstr @54 // "COULD_NOT_RESOLVE"
        [0xcad] 3245:	movg @68 // @app#CompilerError
        [0xcae] 3246:	movn #20
        [0xcaf] 3247:	movn #1
        [0xcb0] 3248:	popobj
        [0xcb1] 3249:	movi #16, ebx
        [0xcb3] 3251:	nop
        [0xcb4] 3252:	rstore ebx
        [0xcb5] 3253:	new_class @68 // app#CompilerError
        [0xcb6] 3254:	call @80 // <std#Enum.Enum()>
        [0xcb7] 3255:	movg @68 // @app#CompilerError
        [0xcb8] 3256:	movn #19
        [0xcb9] 3257:	popobj
        [0xcba] 3258:	movn #2
        [0xcbb] 3259:	movi #0, adx
        [0xcbd] 3261:	loadval ecx
        [0xcbe] 3262:	rmov adx, ecx
        [0xcbf] 3263:	newstr @53 // "INTERNAL_ERROR"
        [0xcc0] 3264:	movg @68 // @app#CompilerError
        [0xcc1] 3265:	movn #19
        [0xcc2] 3266:	movn #1
        [0xcc3] 3267:	popobj
        [0xcc4] 3268:	movi #15, ebx
        [0xcc6] 3270:	nop
        [0xcc7] 3271:	rstore ebx
        [0xcc8] 3272:	new_class @68 // app#CompilerError
        [0xcc9] 3273:	call @80 // <std#Enum.Enum()>
        [0xcca] 3274:	movg @68 // @app#CompilerError
        [0xccb] 3275:	movn #18
        [0xccc] 3276:	popobj
        [0xccd] 3277:	movn #2
        [0xcce] 3278:	movi #0, adx
        [0xcd0] 3280:	loadval ecx
        [0xcd1] 3281:	rmov adx, ecx
        [0xcd2] 3282:	newstr @52 // "REDUNDANT_TOKEN"
        [0xcd3] 3283:	movg @68 // @app#CompilerError
        [0xcd4] 3284:	movn #18
        [0xcd5] 3285:	movn #1
        [0xcd6] 3286:	popobj
        [0xcd7] 3287:	movi #14, ebx
        [0xcd9] 3289:	nop
        [0xcda] 3290:	rstore ebx
        [0xcdb] 3291:	new_class @68 // app#CompilerError
        [0xcdc] 3292:	call @80 // <std#Enum.Enum()>
        [0xcdd] 3293:	movg @68 // @app#CompilerError
        [0xcde] 3294:	movn #17
        [0xcdf] 3295:	popobj
        [0xce0] 3296:	movn #2
        [0xce1] 3297:	movi #0, adx
        [0xce3] 3299:	loadval ecx
        [0xce4] 3300:	rmov adx, ecx
        [0xce5] 3301:	newstr @51 // "DUPLICATE_CLASS"
        [0xce6] 3302:	movg @68 // @app#CompilerError
        [0xce7] 3303:	movn #17
        [0xce8] 3304:	movn #1
        [0xce9] 3305:	popobj
        [0xcea] 3306:	movi #13, ebx
        [0xcec] 3308:	nop
        [0xced] 3309:	rstore ebx
        [0xcee] 3310:	new_class @68 // app#CompilerError
        [0xcef] 3311:	call @80 // <std#Enum.Enum()>
        [0xcf0] 3312:	movg @68 // @app#CompilerError
        [0xcf1] 3313:	movn #16
        [0xcf2] 3314:	popobj
        [0xcf3] 3315:	movn #2
        [0xcf4] 3316:	movi #0, adx
        [0xcf6] 3318:	loadval ecx
        [0xcf7] 3319:	rmov adx, ecx
        [0xcf8] 3320:	newstr @50 // "PREVIOUSLY_DEFINED"
        [0xcf9] 3321:	movg @68 // @app#CompilerError
        [0xcfa] 3322:	movn #16
        [0xcfb] 3323:	movn #1
        [0xcfc] 3324:	popobj
        [0xcfd] 3325:	movi #12, ebx
        [0xcff] 3327:	nop
        [0xd00] 3328:	rstore ebx
        [0xd01] 3329:	new_class @68 // app#CompilerError
        [0xd02] 3330:	call @80 // <std#Enum.Enum()>
        [0xd03] 3331:	movg @68 // @app#CompilerError
        [0xd04] 3332:	movn #15
        [0xd05] 3333:	popobj
        [0xd06] 3334:	movn #2
        [0xd07] 3335:	movi #0, adx
        [0xd09] 3337:	loadval ecx
        [0xd0a] 3338:	rmov adx, ecx
        [0xd0b] 3339:	newstr @49 // "MULTIPLE_DEFINITION"
        [0xd0c] 3340:	movg @68 // @app#CompilerError
        [0xd0d] 3341:	movn #15
        [0xd0e] 3342:	movn #1
        [0xd0f] 3343:	popobj
        [0xd10] 3344:	movi #11, ebx
        [0xd12] 3346:	nop
        [0xd13] 3347:	rstore ebx
        [0xd14] 3348:	new_class @68 // app#CompilerError
        [0xd15] 3349:	call @80 // <std#Enum.Enum()>
        [0xd16] 3350:	movg @68 // @app#CompilerError
        [0xd17] 3351:	movn #14
        [0xd18] 3352:	popobj
        [0xd19] 3353:	movn #2
        [0xd1a] 3354:	movi #0, adx
        [0xd1c] 3356:	loadval ecx
        [0xd1d] 3357:	rmov adx, ecx
        [0xd1e] 3358:	newstr @48 // "INVALID_ACCESS_SPECIFIER"
        [0xd1f] 3359:	movg @68 // @app#CompilerError
        [0xd20] 3360:	movn #14
        [0xd21] 3361:	movn #1
        [0xd22] 3362:	popobj
        [0xd23] 3363:	movi #10, ebx
        [0xd25] 3365:	nop
        [0xd26] 3366:	rstore ebx
        [0xd27] 3367:	new_class @68 // app#CompilerError
        [0xd28] 3368:	call @80 // <std#Enum.Enum()>
        [0xd29] 3369:	movg @68 // @app#CompilerError
        [0xd2a] 3370:	movn #13
        [0xd2b] 3371:	popobj
        [0xd2c] 3372:	movn #2
        [0xd2d] 3373:	movi #0, adx
        [0xd2f] 3375:	loadval ecx
        [0xd30] 3376:	rmov adx, ecx
        [0xd31] 3377:	newstr @47 // "MISSING_BRACKET"
        [0xd32] 3378:	movg @68 // @app#CompilerError
        [0xd33] 3379:	movn #13
        [0xd34] 3380:	movn #1
        [0xd35] 3381:	popobj
        [0xd36] 3382:	movi #9, ebx
        [0xd38] 3384:	nop
        [0xd39] 3385:	rstore ebx
        [0xd3a] 3386:	new_class @68 // app#CompilerError
        [0xd3b] 3387:	call @80 // <std#Enum.Enum()>
        [0xd3c] 3388:	movg @68 // @app#CompilerError
        [0xd3d] 3389:	movn #12
        [0xd3e] 3390:	popobj
        [0xd3f] 3391:	movn #2
        [0xd40] 3392:	movi #0, adx
        [0xd42] 3394:	loadval ecx
        [0xd43] 3395:	rmov adx, ecx
        [0xd44] 3396:	newstr @46 // "ILLEGAL_BRACKET_MISMATCH"
        [0xd45] 3397:	movg @68 // @app#CompilerError
        [0xd46] 3398:	movn #12
        [0xd47] 3399:	movn #1
        [0xd48] 3400:	popobj
        [0xd49] 3401:	movi #8, ebx
        [0xd4b] 3403:	nop
        [0xd4c] 3404:	rstore ebx
        [0xd4d] 3405:	new_class @68 // app#CompilerError
        [0xd4e] 3406:	call @80 // <std#Enum.Enum()>
        [0xd4f] 3407:	movg @68 // @app#CompilerError
        [0xd50] 3408:	movn #11
        [0xd51] 3409:	popobj
        [0xd52] 3410:	movn #2
        [0xd53] 3411:	movi #0, adx
        [0xd55] 3413:	loadval ecx
        [0xd56] 3414:	rmov adx, ecx
        [0xd57] 3415:	newstr @45 // "ILLEGAL_ACCESS_DECLARATION"
        [0xd58] 3416:	movg @68 // @app#CompilerError
        [0xd59] 3417:	movn #11
        [0xd5a] 3418:	movn #1
        [0xd5b] 3419:	popobj
        [0xd5c] 3420:	movi #7, ebx
        [0xd5e] 3422:	nop
        [0xd5f] 3423:	rstore ebx
        [0xd60] 3424:	new_class @68 // app#CompilerError
        [0xd61] 3425:	call @80 // <std#Enum.Enum()>
        [0xd62] 3426:	movg @68 // @app#CompilerError
        [0xd63] 3427:	movn #10
        [0xd64] 3428:	popobj
        [0xd65] 3429:	movn #2
        [0xd66] 3430:	movi #0, adx
        [0xd68] 3432:	loadval ecx
        [0xd69] 3433:	rmov adx, ecx
        [0xd6a] 3434:	newstr @44 // "GENERIC"
        [0xd6b] 3435:	movg @68 // @app#CompilerError
        [0xd6c] 3436:	movn #10
        [0xd6d] 3437:	movn #1
        [0xd6e] 3438:	popobj
        [0xd6f] 3439:	movi #6, ebx
        [0xd71] 3441:	nop
        [0xd72] 3442:	rstore ebx
        [0xd73] 3443:	new_class @68 // app#CompilerError
        [0xd74] 3444:	call @80 // <std#Enum.Enum()>
        [0xd75] 3445:	movg @68 // @app#CompilerError
        [0xd76] 3446:	movn #9
        [0xd77] 3447:	popobj
        [0xd78] 3448:	movn #2
        [0xd79] 3449:	movi #0, adx
        [0xd7b] 3451:	loadval ecx
        [0xd7c] 3452:	rmov adx, ecx
        [0xd7d] 3453:	newstr @43 // "ILLEGAL_CHAR_LITERAL_FORMAT"
        [0xd7e] 3454:	movg @68 // @app#CompilerError
        [0xd7f] 3455:	movn #9
        [0xd80] 3456:	movn #1
        [0xd81] 3457:	popobj
        [0xd82] 3458:	movi #5, ebx
        [0xd84] 3460:	nop
        [0xd85] 3461:	rstore ebx
        [0xd86] 3462:	new_class @68 // app#CompilerError
        [0xd87] 3463:	call @80 // <std#Enum.Enum()>
        [0xd88] 3464:	movg @68 // @app#CompilerError
        [0xd89] 3465:	movn #8
        [0xd8a] 3466:	popobj
        [0xd8b] 3467:	movn #2
        [0xd8c] 3468:	movi #0, adx
        [0xd8e] 3470:	loadval ecx
        [0xd8f] 3471:	rmov adx, ecx
        [0xd90] 3472:	newstr @42 // "EXPECTED_CHAR_LITERAL_EOF"
        [0xd91] 3473:	movg @68 // @app#CompilerError
        [0xd92] 3474:	movn #8
        [0xd93] 3475:	movn #1
        [0xd94] 3476:	popobj
        [0xd95] 3477:	movi #4, ebx
        [0xd97] 3479:	nop
        [0xd98] 3480:	rstore ebx
        [0xd99] 3481:	new_class @68 // app#CompilerError
        [0xd9a] 3482:	call @80 // <std#Enum.Enum()>
        [0xd9b] 3483:	movg @68 // @app#CompilerError
        [0xd9c] 3484:	movn #7
        [0xd9d] 3485:	popobj
        [0xd9e] 3486:	movn #2
        [0xd9f] 3487:	movi #0, adx
        [0xda1] 3489:	loadval ecx
        [0xda2] 3490:	rmov adx, ecx
        [0xda3] 3491:	newstr @41 // "ILLEGAL_STRING_FORMAT"
        [0xda4] 3492:	movg @68 // @app#CompilerError
        [0xda5] 3493:	movn #7
        [0xda6] 3494:	movn #1
        [0xda7] 3495:	popobj
        [0xda8] 3496:	movi #3, ebx
        [0xdaa] 3498:	nop
        [0xdab] 3499:	rstore ebx
        [0xdac] 3500:	new_class @68 // app#CompilerError
        [0xdad] 3501:	call @80 // <std#Enum.Enum()>
        [0xdae] 3502:	movg @68 // @app#CompilerError
        [0xdaf] 3503:	movn #6
        [0xdb0] 3504:	popobj
        [0xdb1] 3505:	movn #2
        [0xdb2] 3506:	movi #0, adx
        [0xdb4] 3508:	loadval ecx
        [0xdb5] 3509:	rmov adx, ecx
        [0xdb6] 3510:	newstr @40 // "EXPECTED_STRING_LITERAL_EOF"
        [0xdb7] 3511:	movg @68 // @app#CompilerError
        [0xdb8] 3512:	movn #6
        [0xdb9] 3513:	movn #1
        [0xdba] 3514:	popobj
        [0xdbb] 3515:	movi #2, ebx
        [0xdbd] 3517:	nop
        [0xdbe] 3518:	rstore ebx
        [0xdbf] 3519:	new_class @68 // app#CompilerError
        [0xdc0] 3520:	call @80 // <std#Enum.Enum()>
        [0xdc1] 3521:	movg @68 // @app#CompilerError
        [0xdc2] 3522:	movn #5
        [0xdc3] 3523:	popobj
        [0xdc4] 3524:	movn #2
        [0xdc5] 3525:	movi #0, adx
        [0xdc7] 3527:	loadval ecx
        [0xdc8] 3528:	rmov adx, ecx
        [0xdc9] 3529:	newstr @39 // "UNEXPECTED_EOF"
        [0xdca] 3530:	movg @68 // @app#CompilerError
        [0xdcb] 3531:	movn #5
        [0xdcc] 3532:	movn #1
        [0xdcd] 3533:	popobj
        [0xdce] 3534:	movi #1, ebx
        [0xdd0] 3536:	nop
        [0xdd1] 3537:	rstore ebx
        [0xdd2] 3538:	new_class @68 // app#CompilerError
        [0xdd3] 3539:	call @80 // <std#Enum.Enum()>
        [0xdd4] 3540:	movg @68 // @app#CompilerError
        [0xdd5] 3541:	movn #4
        [0xdd6] 3542:	popobj
        [0xdd7] 3543:	movn #2
        [0xdd8] 3544:	movi #0, adx
        [0xdda] 3546:	loadval ecx
        [0xddb] 3547:	rmov adx, ecx
        [0xddc] 3548:	newstr @38 // "ILLEGAL_NUMBER_FORMAT"
        [0xddd] 3549:	movg @68 // @app#CompilerError
        [0xdde] 3550:	movn #4
        [0xddf] 3551:	movn #1
        [0xde0] 3552:	popobj
        [0xde1] 3553:	movi #0, ebx
        [0xde3] 3555:	nop
        [0xde4] 3556:	rstore ebx
        [0xde5] 3557:	new_class @68 // app#CompilerError
        [0xde6] 3558:	call @80 // <std#Enum.Enum()>
        [0xde7] 3559:	movg @68 // @app#CompilerError
        [0xde8] 3560:	movn #3
        [0xde9] 3561:	popobj
        [0xdea] 3562:	movn #2
        [0xdeb] 3563:	movi #0, adx
        [0xded] 3565:	loadval ecx
        [0xdee] 3566:	rmov adx, ecx
        [0xdef] 3567:	newstr @37 // "UNEXPECTED_SYMBOL"
        [0xdf0] 3568:	movg @68 // @app#CompilerError
        [0xdf1] 3569:	movn #3
        [0xdf2] 3570:	movn #1
        [0xdf3] 3571:	popobj
        [0xdf4] 3572:	movi #8, ebx
        [0xdf6] 3574:	nop
        [0xdf7] 3575:	rstore ebx
        [0xdf8] 3576:	new_class @67 // std#PayloadClass
        [0xdf9] 3577:	call @80 // <std#Enum.Enum()>
        [0xdfa] 3578:	movg @67 // @std#PayloadClass
        [0xdfb] 3579:	movn #5
        [0xdfc] 3580:	popobj
        [0xdfd] 3581:	movn #2
        [0xdfe] 3582:	movi #0, adx
        [0xe00] 3584:	loadval ecx
        [0xe01] 3585:	rmov adx, ecx
        [0xe02] 3586:	newstr @36 // "PAYLOAD_LARGE"
        [0xe03] 3587:	movg @67 // @std#PayloadClass
        [0xe04] 3588:	movn #5
        [0xe05] 3589:	movn #1
        [0xe06] 3590:	popobj
        [0xe07] 3591:	movi #6, ebx
        [0xe09] 3593:	nop
        [0xe0a] 3594:	rstore ebx
        [0xe0b] 3595:	new_class @67 // std#PayloadClass
        [0xe0c] 3596:	call @80 // <std#Enum.Enum()>
        [0xe0d] 3597:	movg @67 // @std#PayloadClass
        [0xe0e] 3598:	movn #4
        [0xe0f] 3599:	popobj
        [0xe10] 3600:	movn #2
        [0xe11] 3601:	movi #0, adx
        [0xe13] 3603:	loadval ecx
        [0xe14] 3604:	rmov adx, ecx
        [0xe15] 3605:	newstr @35 // "PAYLOAD_MEDIUM"
        [0xe16] 3606:	movg @67 // @std#PayloadClass
        [0xe17] 3607:	movn #4
        [0xe18] 3608:	movn #1
        [0xe19] 3609:	popobj
        [0xe1a] 3610:	movi #2, ebx
        [0xe1c] 3612:	nop
        [0xe1d] 3613:	rstore ebx
        [0xe1e] 3614:	new_class @67 // std#PayloadClass
        [0xe1f] 3615:	call @80 // <std#Enum.Enum()>
        [0xe20] 3616:	movg @67 // @std#PayloadClass
        [0xe21] 3617:	movn #3
        [0xe22] 3618:	popobj
        [0xe23] 3619:	movn #2
        [0xe24] 3620:	movi #0, adx
        [0xe26] 3622:	loadval ecx
        [0xe27] 3623:	rmov adx, ecx
        [0xe28] 3624:	newstr @34 // "PAYLOAD_SMALL"
        [0xe29] 3625:	movg @67 // @std#PayloadClass
        [0xe2a] 3626:	movn #3
        [0xe2b] 3627:	movn #1
        [0xe2c] 3628:	popobj
        [0xe2d] 3629:	movi #6, ebx
        [0xe2f] 3631:	nop
        [0xe30] 3632:	rstore ebx
        [0xe31] 3633:	new_class @66 // std.os.gui#PaintStyle
        [0xe32] 3634:	call @80 // <std#Enum.Enum()>
        [0xe33] 3635:	movg @66 // @std.os.gui#PaintStyle
        [0xe34] 3636:	movn #9
        [0xe35] 3637:	popobj
        [0xe36] 3638:	movn #2
        [0xe37] 3639:	movi #0, adx
        [0xe39] 3641:	loadval ecx
        [0xe3a] 3642:	rmov adx, ecx
        [0xe3b] 3643:	newstr @33 // "PS_INSIDEFRAME"
        [0xe3c] 3644:	movg @66 // @std.os.gui#PaintStyle
        [0xe3d] 3645:	movn #9
        [0xe3e] 3646:	movn #1
        [0xe3f] 3647:	popobj
        [0xe40] 3648:	movi #5, ebx
        [0xe42] 3650:	nop
        [0xe43] 3651:	rstore ebx
        [0xe44] 3652:	new_class @66 // std.os.gui#PaintStyle
        [0xe45] 3653:	call @80 // <std#Enum.Enum()>
        [0xe46] 3654:	movg @66 // @std.os.gui#PaintStyle
        [0xe47] 3655:	movn #8
        [0xe48] 3656:	popobj
        [0xe49] 3657:	movn #2
        [0xe4a] 3658:	movi #0, adx
        [0xe4c] 3660:	loadval ecx
        [0xe4d] 3661:	rmov adx, ecx
        [0xe4e] 3662:	newstr @32 // "PS_NULL"
        [0xe4f] 3663:	movg @66 // @std.os.gui#PaintStyle
        [0xe50] 3664:	movn #8
        [0xe51] 3665:	movn #1
        [0xe52] 3666:	popobj
        [0xe53] 3667:	movi #4, ebx
        [0xe55] 3669:	nop
        [0xe56] 3670:	rstore ebx
        [0xe57] 3671:	new_class @66 // std.os.gui#PaintStyle
        [0xe58] 3672:	call @80 // <std#Enum.Enum()>
        [0xe59] 3673:	movg @66 // @std.os.gui#PaintStyle
        [0xe5a] 3674:	movn #7
        [0xe5b] 3675:	popobj
        [0xe5c] 3676:	movn #2
        [0xe5d] 3677:	movi #0, adx
        [0xe5f] 3679:	loadval ecx
        [0xe60] 3680:	rmov adx, ecx
        [0xe61] 3681:	newstr @31 // "PS_DASHDOTDOT"
        [0xe62] 3682:	movg @66 // @std.os.gui#PaintStyle
        [0xe63] 3683:	movn #7
        [0xe64] 3684:	movn #1
        [0xe65] 3685:	popobj
        [0xe66] 3686:	movi #3, ebx
        [0xe68] 3688:	nop
        [0xe69] 3689:	rstore ebx
        [0xe6a] 3690:	new_class @66 // std.os.gui#PaintStyle
        [0xe6b] 3691:	call @80 // <std#Enum.Enum()>
        [0xe6c] 3692:	movg @66 // @std.os.gui#PaintStyle
        [0xe6d] 3693:	movn #6
        [0xe6e] 3694:	popobj
        [0xe6f] 3695:	movn #2
        [0xe70] 3696:	movi #0, adx
        [0xe72] 3698:	loadval ecx
        [0xe73] 3699:	rmov adx, ecx
        [0xe74] 3700:	newstr @30 // "PS_DASHDOT"
        [0xe75] 3701:	movg @66 // @std.os.gui#PaintStyle
        [0xe76] 3702:	movn #6
        [0xe77] 3703:	movn #1
        [0xe78] 3704:	popobj
        [0xe79] 3705:	movi #2, ebx
        [0xe7b] 3707:	nop
        [0xe7c] 3708:	rstore ebx
        [0xe7d] 3709:	new_class @66 // std.os.gui#PaintStyle
        [0xe7e] 3710:	call @80 // <std#Enum.Enum()>
        [0xe7f] 3711:	movg @66 // @std.os.gui#PaintStyle
        [0xe80] 3712:	movn #5
        [0xe81] 3713:	popobj
        [0xe82] 3714:	movn #2
        [0xe83] 3715:	movi #0, adx
        [0xe85] 3717:	loadval ecx
        [0xe86] 3718:	rmov adx, ecx
        [0xe87] 3719:	newstr @29 // "PS_DOT"
        [0xe88] 3720:	movg @66 // @std.os.gui#PaintStyle
        [0xe89] 3721:	movn #5
        [0xe8a] 3722:	movn #1
        [0xe8b] 3723:	popobj
        [0xe8c] 3724:	movi #1, ebx
        [0xe8e] 3726:	nop
        [0xe8f] 3727:	rstore ebx
        [0xe90] 3728:	new_class @66 // std.os.gui#PaintStyle
        [0xe91] 3729:	call @80 // <std#Enum.Enum()>
        [0xe92] 3730:	movg @66 // @std.os.gui#PaintStyle
        [0xe93] 3731:	movn #4
        [0xe94] 3732:	popobj
        [0xe95] 3733:	movn #2
        [0xe96] 3734:	movi #0, adx
        [0xe98] 3736:	loadval ecx
        [0xe99] 3737:	rmov adx, ecx
        [0xe9a] 3738:	newstr @28 // "PS_DASH"
        [0xe9b] 3739:	movg @66 // @std.os.gui#PaintStyle
        [0xe9c] 3740:	movn #4
        [0xe9d] 3741:	movn #1
        [0xe9e] 3742:	popobj
        [0xe9f] 3743:	movi #0, ebx
        [0xea1] 3745:	nop
        [0xea2] 3746:	rstore ebx
        [0xea3] 3747:	new_class @66 // std.os.gui#PaintStyle
        [0xea4] 3748:	call @80 // <std#Enum.Enum()>
        [0xea5] 3749:	movg @66 // @std.os.gui#PaintStyle
        [0xea6] 3750:	movn #3
        [0xea7] 3751:	popobj
        [0xea8] 3752:	movn #2
        [0xea9] 3753:	movi #0, adx
        [0xeab] 3755:	loadval ecx
        [0xeac] 3756:	rmov adx, ecx
        [0xead] 3757:	newstr @27 // "PS_SOLID"
        [0xeae] 3758:	movg @66 // @std.os.gui#PaintStyle
        [0xeaf] 3759:	movn #3
        [0xeb0] 3760:	movn #1
        [0xeb1] 3761:	popobj
        [0xeb2] 3762:	movi #14, ebx
        [0xeb4] 3764:	nop
        [0xeb5] 3765:	rstore ebx
        [0xeb6] 3766:	new_class @65 // std.os.gui#_PAINT
        [0xeb7] 3767:	call @80 // <std#Enum.Enum()>
        [0xeb8] 3768:	movg @65 // @std.os.gui#_PAINT
        [0xeb9] 3769:	movn #17
        [0xeba] 3770:	popobj
        [0xebb] 3771:	movn #2
        [0xebc] 3772:	movi #0, adx
        [0xebe] 3774:	loadval ecx
        [0xebf] 3775:	rmov adx, ecx
        [0xec0] 3776:	newstr @26 // "pt_deleteBrush"
        [0xec1] 3777:	movg @65 // @std.os.gui#_PAINT
        [0xec2] 3778:	movn #17
        [0xec3] 3779:	movn #1
        [0xec4] 3780:	popobj
        [0xec5] 3781:	movi #13, ebx
        [0xec7] 3783:	nop
        [0xec8] 3784:	rstore ebx
        [0xec9] 3785:	new_class @65 // std.os.gui#_PAINT
        [0xeca] 3786:	call @80 // <std#Enum.Enum()>
        [0xecb] 3787:	movg @65 // @std.os.gui#_PAINT
        [0xecc] 3788:	movn #16
        [0xecd] 3789:	popobj
        [0xece] 3790:	movn #2
        [0xecf] 3791:	movi #0, adx
        [0xed1] 3793:	loadval ecx
        [0xed2] 3794:	rmov adx, ecx
        [0xed3] 3795:	newstr @25 // "pt_selectBrush"
        [0xed4] 3796:	movg @65 // @std.os.gui#_PAINT
        [0xed5] 3797:	movn #16
        [0xed6] 3798:	movn #1
        [0xed7] 3799:	popobj
        [0xed8] 3800:	movi #12, ebx
        [0xeda] 3802:	nop
        [0xedb] 3803:	rstore ebx
        [0xedc] 3804:	new_class @65 // std.os.gui#_PAINT
        [0xedd] 3805:	call @80 // <std#Enum.Enum()>
        [0xede] 3806:	movg @65 // @std.os.gui#_PAINT
        [0xedf] 3807:	movn #15
        [0xee0] 3808:	popobj
        [0xee1] 3809:	movn #2
        [0xee2] 3810:	movi #0, adx
        [0xee4] 3812:	loadval ecx
        [0xee5] 3813:	rmov adx, ecx
        [0xee6] 3814:	newstr @24 // "pt_createBrush"
        [0xee7] 3815:	movg @65 // @std.os.gui#_PAINT
        [0xee8] 3816:	movn #15
        [0xee9] 3817:	movn #1
        [0xeea] 3818:	popobj
        [0xeeb] 3819:	movi #11, ebx
        [0xeed] 3821:	nop
        [0xeee] 3822:	rstore ebx
        [0xeef] 3823:	new_class @65 // std.os.gui#_PAINT
        [0xef0] 3824:	call @80 // <std#Enum.Enum()>
        [0xef1] 3825:	movg @65 // @std.os.gui#_PAINT
        [0xef2] 3826:	movn #14
        [0xef3] 3827:	popobj
        [0xef4] 3828:	movn #2
        [0xef5] 3829:	movi #0, adx
        [0xef7] 3831:	loadval ecx
        [0xef8] 3832:	rmov adx, ecx
        [0xef9] 3833:	newstr @23 // "pt_deletePen"
        [0xefa] 3834:	movg @65 // @std.os.gui#_PAINT
        [0xefb] 3835:	movn #14
        [0xefc] 3836:	movn #1
        [0xefd] 3837:	popobj
        [0xefe] 3838:	movi #10, ebx
        [0xf00] 3840:	nop
        [0xf01] 3841:	rstore ebx
        [0xf02] 3842:	new_class @65 // std.os.gui#_PAINT
        [0xf03] 3843:	call @80 // <std#Enum.Enum()>
        [0xf04] 3844:	movg @65 // @std.os.gui#_PAINT
        [0xf05] 3845:	movn #13
        [0xf06] 3846:	popobj
        [0xf07] 3847:	movn #2
        [0xf08] 3848:	movi #0, adx
        [0xf0a] 3850:	loadval ecx
        [0xf0b] 3851:	rmov adx, ecx
        [0xf0c] 3852:	newstr @22 // "pt_selectPen"
        [0xf0d] 3853:	movg @65 // @std.os.gui#_PAINT
        [0xf0e] 3854:	movn #13
        [0xf0f] 3855:	movn #1
        [0xf10] 3856:	popobj
        [0xf11] 3857:	movi #9, ebx
        [0xf13] 3859:	nop
        [0xf14] 3860:	rstore ebx
        [0xf15] 3861:	new_class @65 // std.os.gui#_PAINT
        [0xf16] 3862:	call @80 // <std#Enum.Enum()>
        [0xf17] 3863:	movg @65 // @std.os.gui#_PAINT
        [0xf18] 3864:	movn #12
        [0xf19] 3865:	popobj
        [0xf1a] 3866:	movn #2
        [0xf1b] 3867:	movi #0, adx
        [0xf1d] 3869:	loadval ecx
        [0xf1e] 3870:	rmov adx, ecx
        [0xf1f] 3871:	newstr @21 // "pt_createPen"
        [0xf20] 3872:	movg @65 // @std.os.gui#_PAINT
        [0xf21] 3873:	movn #12
        [0xf22] 3874:	movn #1
        [0xf23] 3875:	popobj
        [0xf24] 3876:	movi #8, ebx
        [0xf26] 3878:	nop
        [0xf27] 3879:	rstore ebx
        [0xf28] 3880:	new_class @65 // std.os.gui#_PAINT
        [0xf29] 3881:	call @80 // <std#Enum.Enum()>
        [0xf2a] 3882:	movg @65 // @std.os.gui#_PAINT
        [0xf2b] 3883:	movn #11
        [0xf2c] 3884:	popobj
        [0xf2d] 3885:	movn #2
        [0xf2e] 3886:	movi #0, adx
        [0xf30] 3888:	loadval ecx
        [0xf31] 3889:	rmov adx, ecx
        [0xf32] 3890:	newstr @20 // "pt_polygon"
        [0xf33] 3891:	movg @65 // @std.os.gui#_PAINT
        [0xf34] 3892:	movn #11
        [0xf35] 3893:	movn #1
        [0xf36] 3894:	popobj
        [0xf37] 3895:	movi #7, ebx
        [0xf39] 3897:	nop
        [0xf3a] 3898:	rstore ebx
        [0xf3b] 3899:	new_class @65 // std.os.gui#_PAINT
        [0xf3c] 3900:	call @80 // <std#Enum.Enum()>
        [0xf3d] 3901:	movg @65 // @std.os.gui#_PAINT
        [0xf3e] 3902:	movn #10
        [0xf3f] 3903:	popobj
        [0xf40] 3904:	movn #2
        [0xf41] 3905:	movi #0, adx
        [0xf43] 3907:	loadval ecx
        [0xf44] 3908:	rmov adx, ecx
        [0xf45] 3909:	newstr @19 // "pt_ellipsize"
        [0xf46] 3910:	movg @65 // @std.os.gui#_PAINT
        [0xf47] 3911:	movn #10
        [0xf48] 3912:	movn #1
        [0xf49] 3913:	popobj
        [0xf4a] 3914:	movi #6, ebx
        [0xf4c] 3916:	nop
        [0xf4d] 3917:	rstore ebx
        [0xf4e] 3918:	new_class @65 // std.os.gui#_PAINT
        [0xf4f] 3919:	call @80 // <std#Enum.Enum()>
        [0xf50] 3920:	movg @65 // @std.os.gui#_PAINT
        [0xf51] 3921:	movn #9
        [0xf52] 3922:	popobj
        [0xf53] 3923:	movn #2
        [0xf54] 3924:	movi #0, adx
        [0xf56] 3926:	loadval ecx
        [0xf57] 3927:	rmov adx, ecx
        [0xf58] 3928:	newstr @18 // "pt_fillrect"
        [0xf59] 3929:	movg @65 // @std.os.gui#_PAINT
        [0xf5a] 3930:	movn #9
        [0xf5b] 3931:	movn #1
        [0xf5c] 3932:	popobj
        [0xf5d] 3933:	movi #5, ebx
        [0xf5f] 3935:	nop
        [0xf60] 3936:	rstore ebx
        [0xf61] 3937:	new_class @65 // std.os.gui#_PAINT
        [0xf62] 3938:	call @80 // <std#Enum.Enum()>
        [0xf63] 3939:	movg @65 // @std.os.gui#_PAINT
        [0xf64] 3940:	movn #8
        [0xf65] 3941:	popobj
        [0xf66] 3942:	movn #2
        [0xf67] 3943:	movi #0, adx
        [0xf69] 3945:	loadval ecx
        [0xf6a] 3946:	rmov adx, ecx
        [0xf6b] 3947:	newstr @17 // "pt_rect"
        [0xf6c] 3948:	movg @65 // @std.os.gui#_PAINT
        [0xf6d] 3949:	movn #8
        [0xf6e] 3950:	movn #1
        [0xf6f] 3951:	popobj
        [0xf70] 3952:	movi #4, ebx
        [0xf72] 3954:	nop
        [0xf73] 3955:	rstore ebx
        [0xf74] 3956:	new_class @65 // std.os.gui#_PAINT
        [0xf75] 3957:	call @80 // <std#Enum.Enum()>
        [0xf76] 3958:	movg @65 // @std.os.gui#_PAINT
        [0xf77] 3959:	movn #7
        [0xf78] 3960:	popobj
        [0xf79] 3961:	movn #2
        [0xf7a] 3962:	movi #0, adx
        [0xf7c] 3964:	loadval ecx
        [0xf7d] 3965:	rmov adx, ecx
        [0xf7e] 3966:	newstr @16 // "pt_line"
        [0xf7f] 3967:	movg @65 // @std.os.gui#_PAINT
        [0xf80] 3968:	movn #7
        [0xf81] 3969:	movn #1
        [0xf82] 3970:	popobj
        [0xf83] 3971:	movi #3, ebx
        [0xf85] 3973:	nop
        [0xf86] 3974:	rstore ebx
        [0xf87] 3975:	new_class @65 // std.os.gui#_PAINT
        [0xf88] 3976:	call @80 // <std#Enum.Enum()>
        [0xf89] 3977:	movg @65 // @std.os.gui#_PAINT
        [0xf8a] 3978:	movn #6
        [0xf8b] 3979:	popobj
        [0xf8c] 3980:	movn #2
        [0xf8d] 3981:	movi #0, adx
        [0xf8f] 3983:	loadval ecx
        [0xf90] 3984:	rmov adx, ecx
        [0xf91] 3985:	newstr @15 // "pt_move"
        [0xf92] 3986:	movg @65 // @std.os.gui#_PAINT
        [0xf93] 3987:	movn #6
        [0xf94] 3988:	movn #1
        [0xf95] 3989:	popobj
        [0xf96] 3990:	movi #2, ebx
        [0xf98] 3992:	nop
        [0xf99] 3993:	rstore ebx
        [0xf9a] 3994:	new_class @65 // std.os.gui#_PAINT
        [0xf9b] 3995:	call @80 // <std#Enum.Enum()>
        [0xf9c] 3996:	movg @65 // @std.os.gui#_PAINT
        [0xf9d] 3997:	movn #5
        [0xf9e] 3998:	popobj
        [0xf9f] 3999:	movn #2
        [0xfa0] 4000:	movi #0, adx
        [0xfa2] 4002:	loadval ecx
        [0xfa3] 4003:	rmov adx, ecx
        [0xfa4] 4004:	newstr @14 // "pt_end"
        [0xfa5] 4005:	movg @65 // @std.os.gui#_PAINT
        [0xfa6] 4006:	movn #5
        [0xfa7] 4007:	movn #1
        [0xfa8] 4008:	popobj
        [0xfa9] 4009:	movi #1, ebx
        [0xfab] 4011:	nop
        [0xfac] 4012:	rstore ebx
        [0xfad] 4013:	new_class @65 // std.os.gui#_PAINT
        [0xfae] 4014:	call @80 // <std#Enum.Enum()>
        [0xfaf] 4015:	movg @65 // @std.os.gui#_PAINT
        [0xfb0] 4016:	movn #4
        [0xfb1] 4017:	popobj
        [0xfb2] 4018:	movn #2
        [0xfb3] 4019:	movi #0, adx
        [0xfb5] 4021:	loadval ecx
        [0xfb6] 4022:	rmov adx, ecx
        [0xfb7] 4023:	newstr @13 // "pt_start"
        [0xfb8] 4024:	movg @65 // @std.os.gui#_PAINT
        [0xfb9] 4025:	movn #4
        [0xfba] 4026:	movn #1
        [0xfbb] 4027:	popobj
        [0xfbc] 4028:	movi #0, ebx
        [0xfbe] 4030:	nop
        [0xfbf] 4031:	rstore ebx
        [0xfc0] 4032:	new_class @65 // std.os.gui#_PAINT
        [0xfc1] 4033:	call @80 // <std#Enum.Enum()>
        [0xfc2] 4034:	movg @65 // @std.os.gui#_PAINT
        [0xfc3] 4035:	movn #3
        [0xfc4] 4036:	popobj
        [0xfc5] 4037:	movn #2
        [0xfc6] 4038:	movi #0, adx
        [0xfc8] 4040:	loadval ecx
        [0xfc9] 4041:	rmov adx, ecx
        [0xfca] 4042:	newstr @12 // "pt_text"
        [0xfcb] 4043:	movg @65 // @std.os.gui#_PAINT
        [0xfcc] 4044:	movn #3
        [0xfcd] 4045:	movn #1
        [0xfce] 4046:	popobj
        [0xfcf] 4047:	movi #8, ebx
        [0xfd1] 4049:	nop
        [0xfd2] 4050:	rstore ebx
        [0xfd3] 4051:	new_class @64 // std.os.gui#_GUI
        [0xfd4] 4052:	call @80 // <std#Enum.Enum()>
        [0xfd5] 4053:	movg @64 // @std.os.gui#_GUI
        [0xfd6] 4054:	movn #11
        [0xfd7] 4055:	popobj
        [0xfd8] 4056:	movn #2
        [0xfd9] 4057:	movi #0, adx
        [0xfdb] 4059:	loadval ecx
        [0xfdc] 4060:	rmov adx, ecx
        [0xfdd] 4061:	newstr @11 // "gui_msg"
        [0xfde] 4062:	movg @64 // @std.os.gui#_GUI
        [0xfdf] 4063:	movn #11
        [0xfe0] 4064:	movn #1
        [0xfe1] 4065:	popobj
        [0xfe2] 4066:	movi #7, ebx
        [0xfe4] 4068:	nop
        [0xfe5] 4069:	rstore ebx
        [0xfe6] 4070:	new_class @64 // std.os.gui#_GUI
        [0xfe7] 4071:	call @80 // <std#Enum.Enum()>
        [0xfe8] 4072:	movg @64 // @std.os.gui#_GUI
        [0xfe9] 4073:	movn #10
        [0xfea] 4074:	popobj
        [0xfeb] 4075:	movn #2
        [0xfec] 4076:	movi #0, adx
        [0xfee] 4078:	loadval ecx
        [0xfef] 4079:	rmov adx, ecx
        [0xff0] 4080:	newstr @10 // "gui_dsp"
        [0xff1] 4081:	movg @64 // @std.os.gui#_GUI
        [0xff2] 4082:	movn #10
        [0xff3] 4083:	movn #1
        [0xff4] 4084:	popobj
        [0xff5] 4085:	movi #6, ebx
        [0xff7] 4087:	nop
        [0xff8] 4088:	rstore ebx
        [0xff9] 4089:	new_class @64 // std.os.gui#_GUI
        [0xffa] 4090:	call @80 // <std#Enum.Enum()>
        [0xffb] 4091:	movg @64 // @std.os.gui#_GUI
        [0xffc] 4092:	movn #9
        [0xffd] 4093:	popobj
        [0xffe] 4094:	movn #2
        [0xfff] 4095:	movi #0, adx
        [0x1001] 4097:	loadval ecx
        [0x1002] 4098:	rmov adx, ecx
        [0x1003] 4099:	newstr @9 // "gui_upd"
        [0x1004] 4100:	movg @64 // @std.os.gui#_GUI
        [0x1005] 4101:	movn #9
        [0x1006] 4102:	movn #1
        [0x1007] 4103:	popobj
        [0x1008] 4104:	movi #5, ebx
        [0x100a] 4106:	nop
        [0x100b] 4107:	rstore ebx
        [0x100c] 4108:	new_class @64 // std.os.gui#_GUI
        [0x100d] 4109:	call @80 // <std#Enum.Enum()>
        [0x100e] 4110:	movg @64 // @std.os.gui#_GUI
        [0x100f] 4111:	movn #8
        [0x1010] 4112:	popobj
        [0x1011] 4113:	movn #2
        [0x1012] 4114:	movi #0, adx
        [0x1014] 4116:	loadval ecx
        [0x1015] 4117:	rmov adx, ecx
        [0x1016] 4118:	newstr @8 // "gui_show"
        [0x1017] 4119:	movg @64 // @std.os.gui#_GUI
        [0x1018] 4120:	movn #8
        [0x1019] 4121:	movn #1
        [0x101a] 4122:	popobj
        [0x101b] 4123:	movi #4, ebx
        [0x101d] 4125:	nop
        [0x101e] 4126:	rstore ebx
        [0x101f] 4127:	new_class @64 // std.os.gui#_GUI
        [0x1020] 4128:	call @80 // <std#Enum.Enum()>
        [0x1021] 4129:	movg @64 // @std.os.gui#_GUI
        [0x1022] 4130:	movn #7
        [0x1023] 4131:	popobj
        [0x1024] 4132:	movn #2
        [0x1025] 4133:	movi #0, adx
        [0x1027] 4135:	loadval ecx
        [0x1028] 4136:	rmov adx, ecx
        [0x1029] 4137:	newstr @7 // "gui_dwnd"
        [0x102a] 4138:	movg @64 // @std.os.gui#_GUI
        [0x102b] 4139:	movn #7
        [0x102c] 4140:	movn #1
        [0x102d] 4141:	popobj
        [0x102e] 4142:	movi #3, ebx
        [0x1030] 4144:	nop
        [0x1031] 4145:	rstore ebx
        [0x1032] 4146:	new_class @64 // std.os.gui#_GUI
        [0x1033] 4147:	call @80 // <std#Enum.Enum()>
        [0x1034] 4148:	movg @64 // @std.os.gui#_GUI
        [0x1035] 4149:	movn #6
        [0x1036] 4150:	popobj
        [0x1037] 4151:	movn #2
        [0x1038] 4152:	movi #0, adx
        [0x103a] 4154:	loadval ecx
        [0x103b] 4155:	rmov adx, ecx
        [0x103c] 4156:	newstr @6 // "gui_ctx"
        [0x103d] 4157:	movg @64 // @std.os.gui#_GUI
        [0x103e] 4158:	movn #6
        [0x103f] 4159:	movn #1
        [0x1040] 4160:	popobj
        [0x1041] 4161:	movi #2, ebx
        [0x1043] 4163:	nop
        [0x1044] 4164:	rstore ebx
        [0x1045] 4165:	new_class @64 // std.os.gui#_GUI
        [0x1046] 4166:	call @80 // <std#Enum.Enum()>
        [0x1047] 4167:	movg @64 // @std.os.gui#_GUI
        [0x1048] 4168:	movn #5
        [0x1049] 4169:	popobj
        [0x104a] 4170:	movn #2
        [0x104b] 4171:	movi #0, adx
        [0x104d] 4173:	loadval ecx
        [0x104e] 4174:	rmov adx, ecx
        [0x104f] 4175:	newstr @5 // "gui_set_ctx"
        [0x1050] 4176:	movg @64 // @std.os.gui#_GUI
        [0x1051] 4177:	movn #5
        [0x1052] 4178:	movn #1
        [0x1053] 4179:	popobj
        [0x1054] 4180:	movi #1, ebx
        [0x1056] 4182:	nop
        [0x1057] 4183:	rstore ebx
        [0x1058] 4184:	new_class @64 // std.os.gui#_GUI
        [0x1059] 4185:	call @80 // <std#Enum.Enum()>
        [0x105a] 4186:	movg @64 // @std.os.gui#_GUI
        [0x105b] 4187:	movn #4
        [0x105c] 4188:	popobj
        [0x105d] 4189:	movn #2
        [0x105e] 4190:	movi #0, adx
        [0x1060] 4192:	loadval ecx
        [0x1061] 4193:	rmov adx, ecx
        [0x1062] 4194:	newstr @4 // "gui_paint"
        [0x1063] 4195:	movg @64 // @std.os.gui#_GUI
        [0x1064] 4196:	movn #4
        [0x1065] 4197:	movn #1
        [0x1066] 4198:	popobj
        [0x1067] 4199:	movi #0, ebx
        [0x1069] 4201:	nop
        [0x106a] 4202:	rstore ebx
        [0x106b] 4203:	new_class @64 // std.os.gui#_GUI
        [0x106c] 4204:	call @80 // <std#Enum.Enum()>
        [0x106d] 4205:	movg @64 // @std.os.gui#_GUI
        [0x106e] 4206:	movn #3
        [0x106f] 4207:	popobj
        [0x1070] 4208:	movn #2
        [0x1071] 4209:	movi #0, adx
        [0x1073] 4211:	loadval ecx
        [0x1074] 4212:	rmov adx, ecx
        [0x1075] 4213:	newstr @3 // "gui_quit"
        [0x1076] 4214:	movg @64 // @std.os.gui#_GUI
        [0x1077] 4215:	movn #3
        [0x1078] 4216:	movn #1
        [0x1079] 4217:	popobj
        [0x107a] 4218:	movi #2, ebx
        [0x107c] 4220:	nop
        [0x107d] 4221:	rstore ebx
        [0x107e] 4222:	new_class @63 // std.kernel#TimeUnit
        [0x107f] 4223:	call @80 // <std#Enum.Enum()>
        [0x1080] 4224:	movg @63 // @std.kernel#TimeUnit
        [0x1081] 4225:	movn #5
        [0x1082] 4226:	popobj
        [0x1083] 4227:	movn #2
        [0x1084] 4228:	movi #0, adx
        [0x1086] 4230:	loadval ecx
        [0x1087] 4231:	rmov adx, ecx
        [0x1088] 4232:	newstr @2 // "MICROSECONDS"
        [0x1089] 4233:	movg @63 // @std.kernel#TimeUnit
        [0x108a] 4234:	movn #5
        [0x108b] 4235:	movn #1
        [0x108c] 4236:	popobj
        [0x108d] 4237:	movi #1, ebx
        [0x108f] 4239:	nop
        [0x1090] 4240:	rstore ebx
        [0x1091] 4241:	new_class @63 // std.kernel#TimeUnit
        [0x1092] 4242:	call @80 // <std#Enum.Enum()>
        [0x1093] 4243:	movg @63 // @std.kernel#TimeUnit
        [0x1094] 4244:	movn #4
        [0x1095] 4245:	popobj
        [0x1096] 4246:	movn #2
        [0x1097] 4247:	movi #0, adx
        [0x1099] 4249:	loadval ecx
        [0x109a] 4250:	rmov adx, ecx
        [0x109b] 4251:	newstr @1 // "MILLISECONDS"
        [0x109c] 4252:	movg @63 // @std.kernel#TimeUnit
        [0x109d] 4253:	movn #4
        [0x109e] 4254:	movn #1
        [0x109f] 4255:	popobj
        [0x10a0] 4256:	movi #0, ebx
        [0x10a2] 4258:	nop
        [0x10a3] 4259:	rstore ebx
        [0x10a4] 4260:	new_class @63 // std.kernel#TimeUnit
        [0x10a5] 4261:	call @80 // <std#Enum.Enum()>
        [0x10a6] 4262:	movg @63 // @std.kernel#TimeUnit
        [0x10a7] 4263:	movn #3
        [0x10a8] 4264:	popobj
        [0x10a9] 4265:	movn #2
        [0x10aa] 4266:	movi #0, adx
        [0x10ac] 4268:	loadval ecx
        [0x10ad] 4269:	rmov adx, ecx
        [0x10ae] 4270:	newstr @0 // "SECONDS"
        [0x10af] 4271:	movg @63 // @std.kernel#TimeUnit
        [0x10b0] 4272:	movn #3
        [0x10b1] 4273:	movn #1
        [0x10b2] 4274:	popobj
        [0x10b3] 4275:	movi #0, ebx
        [0x10b5] 4277:	new_classarray ebx  // std.kernel#TimeUnit[]
        [0x10b6] 4278:	movg @63 // @std.kernel#TimeUnit
        [0x10b7] 4279:	movn #0
        [0x10b8] 4280:	popobj
        [0x10b9] 4281:	movi #6, ebx
        [0x10bb] 4283:	new_classarray ebx  // std.os.gui#_GUI[]
        [0x10bc] 4284:	movg @64 // @std.os.gui#_GUI
        [0x10bd] 4285:	movn #6
        [0x10be] 4286:	pushobj
        [0x10bf] 4287:	movsl #-1
        [0x10c0] 4288:	movn #0
        [0x10c1] 4289:	popobj
        [0x10c2] 4290:	movg @64 // @std.os.gui#_GUI
        [0x10c3] 4291:	movn #7
        [0x10c4] 4292:	pushobj
        [0x10c5] 4293:	movsl #-1
        [0x10c6] 4294:	movn #1
        [0x10c7] 4295:	popobj
        [0x10c8] 4296:	movg @64 // @std.os.gui#_GUI
        [0x10c9] 4297:	movn #8
        [0x10ca] 4298:	pushobj
        [0x10cb] 4299:	movsl #-1
        [0x10cc] 4300:	movn #2
        [0x10cd] 4301:	popobj
        [0x10ce] 4302:	movg @64 // @std.os.gui#_GUI
        [0x10cf] 4303:	movn #9
        [0x10d0] 4304:	pushobj
        [0x10d1] 4305:	movsl #-1
        [0x10d2] 4306:	movn #3
        [0x10d3] 4307:	popobj
        [0x10d4] 4308:	movg @64 // @std.os.gui#_GUI
        [0x10d5] 4309:	movn #10
        [0x10d6] 4310:	pushobj
        [0x10d7] 4311:	movsl #-1
        [0x10d8] 4312:	movn #4
        [0x10d9] 4313:	popobj
        [0x10da] 4314:	movg @64 // @std.os.gui#_GUI
        [0x10db] 4315:	movn #11
        [0x10dc] 4316:	pushobj
        [0x10dd] 4317:	movsl #-1
        [0x10de] 4318:	movn #5
        [0x10df] 4319:	popobj
        [0x10e0] 4320:	movg @64 // @std.os.gui#_GUI
        [0x10e1] 4321:	movn #0
        [0x10e2] 4322:	popobj
        [0x10e3] 4323:	movi #12, ebx
        [0x10e5] 4325:	new_classarray ebx  // std.os.gui#_PAINT[]
        [0x10e6] 4326:	movg @65 // @std.os.gui#_PAINT
        [0x10e7] 4327:	movn #6
        [0x10e8] 4328:	pushobj
        [0x10e9] 4329:	movsl #-1
        [0x10ea] 4330:	movn #0
        [0x10eb] 4331:	popobj
        [0x10ec] 4332:	movg @65 // @std.os.gui#_PAINT
        [0x10ed] 4333:	movn #7
        [0x10ee] 4334:	pushobj
        [0x10ef] 4335:	movsl #-1
        [0x10f0] 4336:	movn #1
        [0x10f1] 4337:	popobj
        [0x10f2] 4338:	movg @65 // @std.os.gui#_PAINT
        [0x10f3] 4339:	movn #8
        [0x10f4] 4340:	pushobj
        [0x10f5] 4341:	movsl #-1
        [0x10f6] 4342:	movn #2
        [0x10f7] 4343:	popobj
        [0x10f8] 4344:	movg @65 // @std.os.gui#_PAINT
        [0x10f9] 4345:	movn #9
        [0x10fa] 4346:	pushobj
        [0x10fb] 4347:	movsl #-1
        [0x10fc] 4348:	movn #3
        [0x10fd] 4349:	popobj
        [0x10fe] 4350:	movg @65 // @std.os.gui#_PAINT
        [0x10ff] 4351:	movn #10
        [0x1100] 4352:	pushobj
        [0x1101] 4353:	movsl #-1
        [0x1102] 4354:	movn #4
        [0x1103] 4355:	popobj
        [0x1104] 4356:	movg @65 // @std.os.gui#_PAINT
        [0x1105] 4357:	movn #11
        [0x1106] 4358:	pushobj
        [0x1107] 4359:	movsl #-1
        [0x1108] 4360:	movn #5
        [0x1109] 4361:	popobj
        [0x110a] 4362:	movg @65 // @std.os.gui#_PAINT
        [0x110b] 4363:	movn #12
        [0x110c] 4364:	pushobj
        [0x110d] 4365:	movsl #-1
        [0x110e] 4366:	movn #6
        [0x110f] 4367:	popobj
        [0x1110] 4368:	movg @65 // @std.os.gui#_PAINT
        [0x1111] 4369:	movn #13
        [0x1112] 4370:	pushobj
        [0x1113] 4371:	movsl #-1
        [0x1114] 4372:	movn #7
        [0x1115] 4373:	popobj
        [0x1116] 4374:	movg @65 // @std.os.gui#_PAINT
        [0x1117] 4375:	movn #14
        [0x1118] 4376:	pushobj
        [0x1119] 4377:	movsl #-1
        [0x111a] 4378:	movn #8
        [0x111b] 4379:	popobj
        [0x111c] 4380:	movg @65 // @std.os.gui#_PAINT
        [0x111d] 4381:	movn #15
        [0x111e] 4382:	pushobj
        [0x111f] 4383:	movsl #-1
        [0x1120] 4384:	movn #9
        [0x1121] 4385:	popobj
        [0x1122] 4386:	movg @65 // @std.os.gui#_PAINT
        [0x1123] 4387:	movn #16
        [0x1124] 4388:	pushobj
        [0x1125] 4389:	movsl #-1
        [0x1126] 4390:	movn #10
        [0x1127] 4391:	popobj
        [0x1128] 4392:	movg @65 // @std.os.gui#_PAINT
        [0x1129] 4393:	movn #17
        [0x112a] 4394:	pushobj
        [0x112b] 4395:	movsl #-1
        [0x112c] 4396:	movn #11
        [0x112d] 4397:	popobj
        [0x112e] 4398:	movg @65 // @std.os.gui#_PAINT
        [0x112f] 4399:	movn #0
        [0x1130] 4400:	popobj
        [0x1131] 4401:	movi #4, ebx
        [0x1133] 4403:	new_classarray ebx  // std.os.gui#PaintStyle[]
        [0x1134] 4404:	movg @66 // @std.os.gui#PaintStyle
        [0x1135] 4405:	movn #6
        [0x1136] 4406:	pushobj
        [0x1137] 4407:	movsl #-1
        [0x1138] 4408:	movn #0
        [0x1139] 4409:	popobj
        [0x113a] 4410:	movg @66 // @std.os.gui#PaintStyle
        [0x113b] 4411:	movn #7
        [0x113c] 4412:	pushobj
        [0x113d] 4413:	movsl #-1
        [0x113e] 4414:	movn #1
        [0x113f] 4415:	popobj
        [0x1140] 4416:	movg @66 // @std.os.gui#PaintStyle
        [0x1141] 4417:	movn #8
        [0x1142] 4418:	pushobj
        [0x1143] 4419:	movsl #-1
        [0x1144] 4420:	movn #2
        [0x1145] 4421:	popobj
        [0x1146] 4422:	movg @66 // @std.os.gui#PaintStyle
        [0x1147] 4423:	movn #9
        [0x1148] 4424:	pushobj
        [0x1149] 4425:	movsl #-1
        [0x114a] 4426:	movn #3
        [0x114b] 4427:	popobj
        [0x114c] 4428:	movg @66 // @std.os.gui#PaintStyle
        [0x114d] 4429:	movn #0
        [0x114e] 4430:	popobj
        [0x114f] 4431:	movi #0, ebx
        [0x1151] 4433:	new_classarray ebx  // std#PayloadClass[]
        [0x1152] 4434:	movg @67 // @std#PayloadClass
        [0x1153] 4435:	movn #0
        [0x1154] 4436:	popobj
        [0x1155] 4437:	movi #26, ebx
        [0x1157] 4439:	new_classarray ebx  // app#CompilerError[]
        [0x1158] 4440:	movg @68 // @app#CompilerError
        [0x1159] 4441:	movn #6
        [0x115a] 4442:	pushobj
        [0x115b] 4443:	movsl #-1
        [0x115c] 4444:	movn #0
        [0x115d] 4445:	popobj
        [0x115e] 4446:	movg @68 // @app#CompilerError
        [0x115f] 4447:	movn #7
        [0x1160] 4448:	pushobj
        [0x1161] 4449:	movsl #-1
        [0x1162] 4450:	movn #1
        [0x1163] 4451:	popobj
        [0x1164] 4452:	movg @68 // @app#CompilerError
        [0x1165] 4453:	movn #8
        [0x1166] 4454:	pushobj
        [0x1167] 4455:	movsl #-1
        [0x1168] 4456:	movn #2
        [0x1169] 4457:	popobj
        [0x116a] 4458:	movg @68 // @app#CompilerError
        [0x116b] 4459:	movn #9
        [0x116c] 4460:	pushobj
        [0x116d] 4461:	movsl #-1
        [0x116e] 4462:	movn #3
        [0x116f] 4463:	popobj
        [0x1170] 4464:	movg @68 // @app#CompilerError
        [0x1171] 4465:	movn #10
        [0x1172] 4466:	pushobj
        [0x1173] 4467:	movsl #-1
        [0x1174] 4468:	movn #4
        [0x1175] 4469:	popobj
        [0x1176] 4470:	movg @68 // @app#CompilerError
        [0x1177] 4471:	movn #11
        [0x1178] 4472:	pushobj
        [0x1179] 4473:	movsl #-1
        [0x117a] 4474:	movn #5
        [0x117b] 4475:	popobj
        [0x117c] 4476:	movg @68 // @app#CompilerError
        [0x117d] 4477:	movn #12
        [0x117e] 4478:	pushobj
        [0x117f] 4479:	movsl #-1
        [0x1180] 4480:	movn #6
        [0x1181] 4481:	popobj
        [0x1182] 4482:	movg @68 // @app#CompilerError
        [0x1183] 4483:	movn #13
        [0x1184] 4484:	pushobj
        [0x1185] 4485:	movsl #-1
        [0x1186] 4486:	movn #7
        [0x1187] 4487:	popobj
        [0x1188] 4488:	movg @68 // @app#CompilerError
        [0x1189] 4489:	movn #14
        [0x118a] 4490:	pushobj
        [0x118b] 4491:	movsl #-1
        [0x118c] 4492:	movn #8
        [0x118d] 4493:	popobj
        [0x118e] 4494:	movg @68 // @app#CompilerError
        [0x118f] 4495:	movn #15
        [0x1190] 4496:	pushobj
        [0x1191] 4497:	movsl #-1
        [0x1192] 4498:	movn #9
        [0x1193] 4499:	popobj
        [0x1194] 4500:	movg @68 // @app#CompilerError
        [0x1195] 4501:	movn #16
        [0x1196] 4502:	pushobj
        [0x1197] 4503:	movsl #-1
        [0x1198] 4504:	movn #10
        [0x1199] 4505:	popobj
        [0x119a] 4506:	movg @68 // @app#CompilerError
        [0x119b] 4507:	movn #17
        [0x119c] 4508:	pushobj
        [0x119d] 4509:	movsl #-1
        [0x119e] 4510:	movn #11
        [0x119f] 4511:	popobj
        [0x11a0] 4512:	movg @68 // @app#CompilerError
        [0x11a1] 4513:	movn #18
        [0x11a2] 4514:	pushobj
        [0x11a3] 4515:	movsl #-1
        [0x11a4] 4516:	movn #12
        [0x11a5] 4517:	popobj
        [0x11a6] 4518:	movg @68 // @app#CompilerError
        [0x11a7] 4519:	movn #19
        [0x11a8] 4520:	pushobj
        [0x11a9] 4521:	movsl #-1
        [0x11aa] 4522:	movn #13
        [0x11ab] 4523:	popobj
        [0x11ac] 4524:	movg @68 // @app#CompilerError
        [0x11ad] 4525:	movn #20
        [0x11ae] 4526:	pushobj
        [0x11af] 4527:	movsl #-1
        [0x11b0] 4528:	movn #14
        [0x11b1] 4529:	popobj
        [0x11b2] 4530:	movg @68 // @app#CompilerError
        [0x11b3] 4531:	movn #21
        [0x11b4] 4532:	pushobj
        [0x11b5] 4533:	movsl #-1
        [0x11b6] 4534:	movn #15
        [0x11b7] 4535:	popobj
        [0x11b8] 4536:	movg @68 // @app#CompilerError
        [0x11b9] 4537:	movn #22
        [0x11ba] 4538:	pushobj
        [0x11bb] 4539:	movsl #-1
        [0x11bc] 4540:	movn #16
        [0x11bd] 4541:	popobj
        [0x11be] 4542:	movg @68 // @app#CompilerError
        [0x11bf] 4543:	movn #23
        [0x11c0] 4544:	pushobj
        [0x11c1] 4545:	movsl #-1
        [0x11c2] 4546:	movn #17
        [0x11c3] 4547:	popobj
        [0x11c4] 4548:	movg @68 // @app#CompilerError
        [0x11c5] 4549:	movn #24
        [0x11c6] 4550:	pushobj
        [0x11c7] 4551:	movsl #-1
        [0x11c8] 4552:	movn #18
        [0x11c9] 4553:	popobj
        [0x11ca] 4554:	movg @68 // @app#CompilerError
        [0x11cb] 4555:	movn #25
        [0x11cc] 4556:	pushobj
        [0x11cd] 4557:	movsl #-1
        [0x11ce] 4558:	movn #19
        [0x11cf] 4559:	popobj
        [0x11d0] 4560:	movg @68 // @app#CompilerError
        [0x11d1] 4561:	movn #26
        [0x11d2] 4562:	pushobj
        [0x11d3] 4563:	movsl #-1
        [0x11d4] 4564:	movn #20
        [0x11d5] 4565:	popobj
        [0x11d6] 4566:	movg @68 // @app#CompilerError
        [0x11d7] 4567:	movn #27
        [0x11d8] 4568:	pushobj
        [0x11d9] 4569:	movsl #-1
        [0x11da] 4570:	movn #21
        [0x11db] 4571:	popobj
        [0x11dc] 4572:	movg @68 // @app#CompilerError
        [0x11dd] 4573:	movn #28
        [0x11de] 4574:	pushobj
        [0x11df] 4575:	movsl #-1
        [0x11e0] 4576:	movn #22
        [0x11e1] 4577:	popobj
        [0x11e2] 4578:	movg @68 // @app#CompilerError
        [0x11e3] 4579:	movn #29
        [0x11e4] 4580:	pushobj
        [0x11e5] 4581:	movsl #-1
        [0x11e6] 4582:	movn #23
        [0x11e7] 4583:	popobj
        [0x11e8] 4584:	movg @68 // @app#CompilerError
        [0x11e9] 4585:	movn #30
        [0x11ea] 4586:	pushobj
        [0x11eb] 4587:	movsl #-1
        [0x11ec] 4588:	movn #24
        [0x11ed] 4589:	popobj
        [0x11ee] 4590:	movg @68 // @app#CompilerError
        [0x11ef] 4591:	movn #31
        [0x11f0] 4592:	pushobj
        [0x11f1] 4593:	movsl #-1
        [0x11f2] 4594:	movn #25
        [0x11f3] 4595:	popobj
        [0x11f4] 4596:	movg @68 // @app#CompilerError
        [0x11f5] 4597:	movn #0
        [0x11f6] 4598:	popobj
        [0x11f7] 4599:	movi #85, ebx
        [0x11f9] 4601:	new_classarray ebx  // app#AstType[]
        [0x11fa] 4602:	movg @69 // @app#AstType
        [0x11fb] 4603:	movn #6
        [0x11fc] 4604:	pushobj
        [0x11fd] 4605:	movsl #-1
        [0x11fe] 4606:	movn #0
        [0x11ff] 4607:	popobj
        [0x1200] 4608:	movg @69 // @app#AstType
        [0x1201] 4609:	movn #7
        [0x1202] 4610:	pushobj
        [0x1203] 4611:	movsl #-1
        [0x1204] 4612:	movn #1
        [0x1205] 4613:	popobj
        [0x1206] 4614:	movg @69 // @app#AstType
        [0x1207] 4615:	movn #8
        [0x1208] 4616:	pushobj
        [0x1209] 4617:	movsl #-1
        [0x120a] 4618:	movn #2
        [0x120b] 4619:	popobj
        [0x120c] 4620:	movg @69 // @app#AstType
        [0x120d] 4621:	movn #9
        [0x120e] 4622:	pushobj
        [0x120f] 4623:	movsl #-1
        [0x1210] 4624:	movn #3
        [0x1211] 4625:	popobj
        [0x1212] 4626:	movg @69 // @app#AstType
        [0x1213] 4627:	movn #10
        [0x1214] 4628:	pushobj
        [0x1215] 4629:	movsl #-1
        [0x1216] 4630:	movn #4
        [0x1217] 4631:	popobj
        [0x1218] 4632:	movg @69 // @app#AstType
        [0x1219] 4633:	movn #11
        [0x121a] 4634:	pushobj
        [0x121b] 4635:	movsl #-1
        [0x121c] 4636:	movn #5
        [0x121d] 4637:	popobj
        [0x121e] 4638:	movg @69 // @app#AstType
        [0x121f] 4639:	movn #12
        [0x1220] 4640:	pushobj
        [0x1221] 4641:	movsl #-1
        [0x1222] 4642:	movn #6
        [0x1223] 4643:	popobj
        [0x1224] 4644:	movg @69 // @app#AstType
        [0x1225] 4645:	movn #13
        [0x1226] 4646:	pushobj
        [0x1227] 4647:	movsl #-1
        [0x1228] 4648:	movn #7
        [0x1229] 4649:	popobj
        [0x122a] 4650:	movg @69 // @app#AstType
        [0x122b] 4651:	movn #14
        [0x122c] 4652:	pushobj
        [0x122d] 4653:	movsl #-1
        [0x122e] 4654:	movn #8
        [0x122f] 4655:	popobj
        [0x1230] 4656:	movg @69 // @app#AstType
        [0x1231] 4657:	movn #15
        [0x1232] 4658:	pushobj
        [0x1233] 4659:	movsl #-1
        [0x1234] 4660:	movn #9
        [0x1235] 4661:	popobj
        [0x1236] 4662:	movg @69 // @app#AstType
        [0x1237] 4663:	movn #16
        [0x1238] 4664:	pushobj
        [0x1239] 4665:	movsl #-1
        [0x123a] 4666:	movn #10
        [0x123b] 4667:	popobj
        [0x123c] 4668:	movg @69 // @app#AstType
        [0x123d] 4669:	movn #17
        [0x123e] 4670:	pushobj
        [0x123f] 4671:	movsl #-1
        [0x1240] 4672:	movn #11
        [0x1241] 4673:	popobj
        [0x1242] 4674:	movg @69 // @app#AstType
        [0x1243] 4675:	movn #18
        [0x1244] 4676:	pushobj
        [0x1245] 4677:	movsl #-1
        [0x1246] 4678:	movn #12
        [0x1247] 4679:	popobj
        [0x1248] 4680:	movg @69 // @app#AstType
        [0x1249] 4681:	movn #19
        [0x124a] 4682:	pushobj
        [0x124b] 4683:	movsl #-1
        [0x124c] 4684:	movn #13
        [0x124d] 4685:	popobj
        [0x124e] 4686:	movg @69 // @app#AstType
        [0x124f] 4687:	movn #20
        [0x1250] 4688:	pushobj
        [0x1251] 4689:	movsl #-1
        [0x1252] 4690:	movn #14
        [0x1253] 4691:	popobj
        [0x1254] 4692:	movg @69 // @app#AstType
        [0x1255] 4693:	movn #21
        [0x1256] 4694:	pushobj
        [0x1257] 4695:	movsl #-1
        [0x1258] 4696:	movn #15
        [0x1259] 4697:	popobj
        [0x125a] 4698:	movg @69 // @app#AstType
        [0x125b] 4699:	movn #22
        [0x125c] 4700:	pushobj
        [0x125d] 4701:	movsl #-1
        [0x125e] 4702:	movn #16
        [0x125f] 4703:	popobj
        [0x1260] 4704:	movg @69 // @app#AstType
        [0x1261] 4705:	movn #23
        [0x1262] 4706:	pushobj
        [0x1263] 4707:	movsl #-1
        [0x1264] 4708:	movn #17
        [0x1265] 4709:	popobj
        [0x1266] 4710:	movg @69 // @app#AstType
        [0x1267] 4711:	movn #24
        [0x1268] 4712:	pushobj
        [0x1269] 4713:	movsl #-1
        [0x126a] 4714:	movn #18
        [0x126b] 4715:	popobj
        [0x126c] 4716:	movg @69 // @app#AstType
        [0x126d] 4717:	movn #25
        [0x126e] 4718:	pushobj
        [0x126f] 4719:	movsl #-1
        [0x1270] 4720:	movn #19
        [0x1271] 4721:	popobj
        [0x1272] 4722:	movg @69 // @app#AstType
        [0x1273] 4723:	movn #26
        [0x1274] 4724:	pushobj
        [0x1275] 4725:	movsl #-1
        [0x1276] 4726:	movn #20
        [0x1277] 4727:	popobj
        [0x1278] 4728:	movg @69 // @app#AstType
        [0x1279] 4729:	movn #27
        [0x127a] 4730:	pushobj
        [0x127b] 4731:	movsl #-1
        [0x127c] 4732:	movn #21
        [0x127d] 4733:	popobj
        [0x127e] 4734:	movg @69 // @app#AstType
        [0x127f] 4735:	movn #28
        [0x1280] 4736:	pushobj
        [0x1281] 4737:	movsl #-1
        [0x1282] 4738:	movn #22
        [0x1283] 4739:	popobj
        [0x1284] 4740:	movg @69 // @app#AstType
        [0x1285] 4741:	movn #29
        [0x1286] 4742:	pushobj
        [0x1287] 4743:	movsl #-1
        [0x1288] 4744:	movn #23
        [0x1289] 4745:	popobj
        [0x128a] 4746:	movg @69 // @app#AstType
        [0x128b] 4747:	movn #30
        [0x128c] 4748:	pushobj
        [0x128d] 4749:	movsl #-1
        [0x128e] 4750:	movn #24
        [0x128f] 4751:	popobj
        [0x1290] 4752:	movg @69 // @app#AstType
        [0x1291] 4753:	movn #31
        [0x1292] 4754:	pushobj
        [0x1293] 4755:	movsl #-1
        [0x1294] 4756:	movn #25
        [0x1295] 4757:	popobj
        [0x1296] 4758:	movg @69 // @app#AstType
        [0x1297] 4759:	movn #32
        [0x1298] 4760:	pushobj
        [0x1299] 4761:	movsl #-1
        [0x129a] 4762:	movn #26
        [0x129b] 4763:	popobj
        [0x129c] 4764:	movg @69 // @app#AstType
        [0x129d] 4765:	movn #33
        [0x129e] 4766:	pushobj
        [0x129f] 4767:	movsl #-1
        [0x12a0] 4768:	movn #27
        [0x12a1] 4769:	popobj
        [0x12a2] 4770:	movg @69 // @app#AstType
        [0x12a3] 4771:	movn #34
        [0x12a4] 4772:	pushobj
        [0x12a5] 4773:	movsl #-1
        [0x12a6] 4774:	movn #28
        [0x12a7] 4775:	popobj
        [0x12a8] 4776:	movg @69 // @app#AstType
        [0x12a9] 4777:	movn #35
        [0x12aa] 4778:	pushobj
        [0x12ab] 4779:	movsl #-1
        [0x12ac] 4780:	movn #29
        [0x12ad] 4781:	popobj
        [0x12ae] 4782:	movg @69 // @app#AstType
        [0x12af] 4783:	movn #36
        [0x12b0] 4784:	pushobj
        [0x12b1] 4785:	movsl #-1
        [0x12b2] 4786:	movn #30
        [0x12b3] 4787:	popobj
        [0x12b4] 4788:	movg @69 // @app#AstType
        [0x12b5] 4789:	movn #37
        [0x12b6] 4790:	pushobj
        [0x12b7] 4791:	movsl #-1
        [0x12b8] 4792:	movn #31
        [0x12b9] 4793:	popobj
        [0x12ba] 4794:	movg @69 // @app#AstType
        [0x12bb] 4795:	movn #38
        [0x12bc] 4796:	pushobj
        [0x12bd] 4797:	movsl #-1
        [0x12be] 4798:	movn #32
        [0x12bf] 4799:	popobj
        [0x12c0] 4800:	movg @69 // @app#AstType
        [0x12c1] 4801:	movn #39
        [0x12c2] 4802:	pushobj
        [0x12c3] 4803:	movsl #-1
        [0x12c4] 4804:	movn #33
        [0x12c5] 4805:	popobj
        [0x12c6] 4806:	movg @69 // @app#AstType
        [0x12c7] 4807:	movn #40
        [0x12c8] 4808:	pushobj
        [0x12c9] 4809:	movsl #-1
        [0x12ca] 4810:	movn #34
        [0x12cb] 4811:	popobj
        [0x12cc] 4812:	movg @69 // @app#AstType
        [0x12cd] 4813:	movn #41
        [0x12ce] 4814:	pushobj
        [0x12cf] 4815:	movsl #-1
        [0x12d0] 4816:	movn #35
        [0x12d1] 4817:	popobj
        [0x12d2] 4818:	movg @69 // @app#AstType
        [0x12d3] 4819:	movn #42
        [0x12d4] 4820:	pushobj
        [0x12d5] 4821:	movsl #-1
        [0x12d6] 4822:	movn #36
        [0x12d7] 4823:	popobj
        [0x12d8] 4824:	movg @69 // @app#AstType
        [0x12d9] 4825:	movn #43
        [0x12da] 4826:	pushobj
        [0x12db] 4827:	movsl #-1
        [0x12dc] 4828:	movn #37
        [0x12dd] 4829:	popobj
        [0x12de] 4830:	movg @69 // @app#AstType
        [0x12df] 4831:	movn #44
        [0x12e0] 4832:	pushobj
        [0x12e1] 4833:	movsl #-1
        [0x12e2] 4834:	movn #38
        [0x12e3] 4835:	popobj
        [0x12e4] 4836:	movg @69 // @app#AstType
        [0x12e5] 4837:	movn #45
        [0x12e6] 4838:	pushobj
        [0x12e7] 4839:	movsl #-1
        [0x12e8] 4840:	movn #39
        [0x12e9] 4841:	popobj
        [0x12ea] 4842:	movg @69 // @app#AstType
        [0x12eb] 4843:	movn #46
        [0x12ec] 4844:	pushobj
        [0x12ed] 4845:	movsl #-1
        [0x12ee] 4846:	movn #40
        [0x12ef] 4847:	popobj
        [0x12f0] 4848:	movg @69 // @app#AstType
        [0x12f1] 4849:	movn #47
        [0x12f2] 4850:	pushobj
        [0x12f3] 4851:	movsl #-1
        [0x12f4] 4852:	movn #41
        [0x12f5] 4853:	popobj
        [0x12f6] 4854:	movg @69 // @app#AstType
        [0x12f7] 4855:	movn #48
        [0x12f8] 4856:	pushobj
        [0x12f9] 4857:	movsl #-1
        [0x12fa] 4858:	movn #42
        [0x12fb] 4859:	popobj
        [0x12fc] 4860:	movg @69 // @app#AstType
        [0x12fd] 4861:	movn #49
        [0x12fe] 4862:	pushobj
        [0x12ff] 4863:	movsl #-1
        [0x1300] 4864:	movn #43
        [0x1301] 4865:	popobj
        [0x1302] 4866:	movg @69 // @app#AstType
        [0x1303] 4867:	movn #50
        [0x1304] 4868:	pushobj
        [0x1305] 4869:	movsl #-1
        [0x1306] 4870:	movn #44
        [0x1307] 4871:	popobj
        [0x1308] 4872:	movg @69 // @app#AstType
        [0x1309] 4873:	movn #51
        [0x130a] 4874:	pushobj
        [0x130b] 4875:	movsl #-1
        [0x130c] 4876:	movn #45
        [0x130d] 4877:	popobj
        [0x130e] 4878:	movg @69 // @app#AstType
        [0x130f] 4879:	movn #52
        [0x1310] 4880:	pushobj
        [0x1311] 4881:	movsl #-1
        [0x1312] 4882:	movn #46
        [0x1313] 4883:	popobj
        [0x1314] 4884:	movg @69 // @app#AstType
        [0x1315] 4885:	movn #53
        [0x1316] 4886:	pushobj
        [0x1317] 4887:	movsl #-1
        [0x1318] 4888:	movn #47
        [0x1319] 4889:	popobj
        [0x131a] 4890:	movg @69 // @app#AstType
        [0x131b] 4891:	movn #54
        [0x131c] 4892:	pushobj
        [0x131d] 4893:	movsl #-1
        [0x131e] 4894:	movn #48
        [0x131f] 4895:	popobj
        [0x1320] 4896:	movg @69 // @app#AstType
        [0x1321] 4897:	movn #55
        [0x1322] 4898:	pushobj
        [0x1323] 4899:	movsl #-1
        [0x1324] 4900:	movn #49
        [0x1325] 4901:	popobj
        [0x1326] 4902:	movg @69 // @app#AstType
        [0x1327] 4903:	movn #56
        [0x1328] 4904:	pushobj
        [0x1329] 4905:	movsl #-1
        [0x132a] 4906:	movn #50
        [0x132b] 4907:	popobj
        [0x132c] 4908:	movg @69 // @app#AstType
        [0x132d] 4909:	movn #57
        [0x132e] 4910:	pushobj
        [0x132f] 4911:	movsl #-1
        [0x1330] 4912:	movn #51
        [0x1331] 4913:	popobj
        [0x1332] 4914:	movg @69 // @app#AstType
        [0x1333] 4915:	movn #58
        [0x1334] 4916:	pushobj
        [0x1335] 4917:	movsl #-1
        [0x1336] 4918:	movn #52
        [0x1337] 4919:	popobj
        [0x1338] 4920:	movg @69 // @app#AstType
        [0x1339] 4921:	movn #59
        [0x133a] 4922:	pushobj
        [0x133b] 4923:	movsl #-1
        [0x133c] 4924:	movn #53
        [0x133d] 4925:	popobj
        [0x133e] 4926:	movg @69 // @app#AstType
        [0x133f] 4927:	movn #60
        [0x1340] 4928:	pushobj
        [0x1341] 4929:	movsl #-1
        [0x1342] 4930:	movn #54
        [0x1343] 4931:	popobj
        [0x1344] 4932:	movg @69 // @app#AstType
        [0x1345] 4933:	movn #61
        [0x1346] 4934:	pushobj
        [0x1347] 4935:	movsl #-1
        [0x1348] 4936:	movn #55
        [0x1349] 4937:	popobj
        [0x134a] 4938:	movg @69 // @app#AstType
        [0x134b] 4939:	movn #62
        [0x134c] 4940:	pushobj
        [0x134d] 4941:	movsl #-1
        [0x134e] 4942:	movn #56
        [0x134f] 4943:	popobj
        [0x1350] 4944:	movg @69 // @app#AstType
        [0x1351] 4945:	movn #63
        [0x1352] 4946:	pushobj
        [0x1353] 4947:	movsl #-1
        [0x1354] 4948:	movn #57
        [0x1355] 4949:	popobj
        [0x1356] 4950:	movg @69 // @app#AstType
        [0x1357] 4951:	movn #64
        [0x1358] 4952:	pushobj
        [0x1359] 4953:	movsl #-1
        [0x135a] 4954:	movn #58
        [0x135b] 4955:	popobj
        [0x135c] 4956:	movg @69 // @app#AstType
        [0x135d] 4957:	movn #65
        [0x135e] 4958:	pushobj
        [0x135f] 4959:	movsl #-1
        [0x1360] 4960:	movn #59
        [0x1361] 4961:	popobj
        [0x1362] 4962:	movg @69 // @app#AstType
        [0x1363] 4963:	movn #66
        [0x1364] 4964:	pushobj
        [0x1365] 4965:	movsl #-1
        [0x1366] 4966:	movn #60
        [0x1367] 4967:	popobj
        [0x1368] 4968:	movg @69 // @app#AstType
        [0x1369] 4969:	movn #67
        [0x136a] 4970:	pushobj
        [0x136b] 4971:	movsl #-1
        [0x136c] 4972:	movn #61
        [0x136d] 4973:	popobj
        [0x136e] 4974:	movg @69 // @app#AstType
        [0x136f] 4975:	movn #68
        [0x1370] 4976:	pushobj
        [0x1371] 4977:	movsl #-1
        [0x1372] 4978:	movn #62
        [0x1373] 4979:	popobj
        [0x1374] 4980:	movg @69 // @app#AstType
        [0x1375] 4981:	movn #69
        [0x1376] 4982:	pushobj
        [0x1377] 4983:	movsl #-1
        [0x1378] 4984:	movn #63
        [0x1379] 4985:	popobj
        [0x137a] 4986:	movg @69 // @app#AstType
        [0x137b] 4987:	movn #70
        [0x137c] 4988:	pushobj
        [0x137d] 4989:	movsl #-1
        [0x137e] 4990:	movn #64
        [0x137f] 4991:	popobj
        [0x1380] 4992:	movg @69 // @app#AstType
        [0x1381] 4993:	movn #71
        [0x1382] 4994:	pushobj
        [0x1383] 4995:	movsl #-1
        [0x1384] 4996:	movn #65
        [0x1385] 4997:	popobj
        [0x1386] 4998:	movg @69 // @app#AstType
        [0x1387] 4999:	movn #72
        [0x1388] 5000:	pushobj
        [0x1389] 5001:	movsl #-1
        [0x138a] 5002:	movn #66
        [0x138b] 5003:	popobj
        [0x138c] 5004:	movg @69 // @app#AstType
        [0x138d] 5005:	movn #73
        [0x138e] 5006:	pushobj
        [0x138f] 5007:	movsl #-1
        [0x1390] 5008:	movn #67
        [0x1391] 5009:	popobj
        [0x1392] 5010:	movg @69 // @app#AstType
        [0x1393] 5011:	movn #74
        [0x1394] 5012:	pushobj
        [0x1395] 5013:	movsl #-1
        [0x1396] 5014:	movn #68
        [0x1397] 5015:	popobj
        [0x1398] 5016:	movg @69 // @app#AstType
        [0x1399] 5017:	movn #75
        [0x139a] 5018:	pushobj
        [0x139b] 5019:	movsl #-1
        [0x139c] 5020:	movn #69
        [0x139d] 5021:	popobj
        [0x139e] 5022:	movg @69 // @app#AstType
        [0x139f] 5023:	movn #76
        [0x13a0] 5024:	pushobj
        [0x13a1] 5025:	movsl #-1
        [0x13a2] 5026:	movn #70
        [0x13a3] 5027:	popobj
        [0x13a4] 5028:	movg @69 // @app#AstType
        [0x13a5] 5029:	movn #77
        [0x13a6] 5030:	pushobj
        [0x13a7] 5031:	movsl #-1
        [0x13a8] 5032:	movn #71
        [0x13a9] 5033:	popobj
        [0x13aa] 5034:	movg @69 // @app#AstType
        [0x13ab] 5035:	movn #78
        [0x13ac] 5036:	pushobj
        [0x13ad] 5037:	movsl #-1
        [0x13ae] 5038:	movn #72
        [0x13af] 5039:	popobj
        [0x13b0] 5040:	movg @69 // @app#AstType
        [0x13b1] 5041:	movn #79
        [0x13b2] 5042:	pushobj
        [0x13b3] 5043:	movsl #-1
        [0x13b4] 5044:	movn #73
        [0x13b5] 5045:	popobj
        [0x13b6] 5046:	movg @69 // @app#AstType
        [0x13b7] 5047:	movn #80
        [0x13b8] 5048:	pushobj
        [0x13b9] 5049:	movsl #-1
        [0x13ba] 5050:	movn #74
        [0x13bb] 5051:	popobj
        [0x13bc] 5052:	movg @69 // @app#AstType
        [0x13bd] 5053:	movn #81
        [0x13be] 5054:	pushobj
        [0x13bf] 5055:	movsl #-1
        [0x13c0] 5056:	movn #75
        [0x13c1] 5057:	popobj
        [0x13c2] 5058:	movg @69 // @app#AstType
        [0x13c3] 5059:	movn #82
        [0x13c4] 5060:	pushobj
        [0x13c5] 5061:	movsl #-1
        [0x13c6] 5062:	movn #76
        [0x13c7] 5063:	popobj
        [0x13c8] 5064:	movg @69 // @app#AstType
        [0x13c9] 5065:	movn #83
        [0x13ca] 5066:	pushobj
        [0x13cb] 5067:	movsl #-1
        [0x13cc] 5068:	movn #77
        [0x13cd] 5069:	popobj
        [0x13ce] 5070:	movg @69 // @app#AstType
        [0x13cf] 5071:	movn #84
        [0x13d0] 5072:	pushobj
        [0x13d1] 5073:	movsl #-1
        [0x13d2] 5074:	movn #78
        [0x13d3] 5075:	popobj
        [0x13d4] 5076:	movg @69 // @app#AstType
        [0x13d5] 5077:	movn #85
        [0x13d6] 5078:	pushobj
        [0x13d7] 5079:	movsl #-1
        [0x13d8] 5080:	movn #79
        [0x13d9] 5081:	popobj
        [0x13da] 5082:	movg @69 // @app#AstType
        [0x13db] 5083:	movn #86
        [0x13dc] 5084:	pushobj
        [0x13dd] 5085:	movsl #-1
        [0x13de] 5086:	movn #80
        [0x13df] 5087:	popobj
        [0x13e0] 5088:	movg @69 // @app#AstType
        [0x13e1] 5089:	movn #87
        [0x13e2] 5090:	pushobj
        [0x13e3] 5091:	movsl #-1
        [0x13e4] 5092:	movn #81
        [0x13e5] 5093:	popobj
        [0x13e6] 5094:	movg @69 // @app#AstType
        [0x13e7] 5095:	movn #88
        [0x13e8] 5096:	pushobj
        [0x13e9] 5097:	movsl #-1
        [0x13ea] 5098:	movn #82
        [0x13eb] 5099:	popobj
        [0x13ec] 5100:	movg @69 // @app#AstType
        [0x13ed] 5101:	movn #89
        [0x13ee] 5102:	pushobj
        [0x13ef] 5103:	movsl #-1
        [0x13f0] 5104:	movn #83
        [0x13f1] 5105:	popobj
        [0x13f2] 5106:	movg @69 // @app#AstType
        [0x13f3] 5107:	movn #90
        [0x13f4] 5108:	pushobj
        [0x13f5] 5109:	movsl #-1
        [0x13f6] 5110:	movn #84
        [0x13f7] 5111:	popobj
        [0x13f8] 5112:	movg @69 // @app#AstType
        [0x13f9] 5113:	movn #0
        [0x13fa] 5114:	popobj
        [0x13fb] 5115:	movi #12, ebx
        [0x13fd] 5117:	new_classarray ebx  // app#TokenId[]
        [0x13fe] 5118:	movg @70 // @app#TokenId
        [0x13ff] 5119:	movn #6
        [0x1400] 5120:	pushobj
        [0x1401] 5121:	movsl #-1
        [0x1402] 5122:	movn #0
        [0x1403] 5123:	popobj
        [0x1404] 5124:	movg @70 // @app#TokenId
        [0x1405] 5125:	movn #7
        [0x1406] 5126:	pushobj
        [0x1407] 5127:	movsl #-1
        [0x1408] 5128:	movn #1
        [0x1409] 5129:	popobj
        [0x140a] 5130:	movg @70 // @app#TokenId
        [0x140b] 5131:	movn #8
        [0x140c] 5132:	pushobj
        [0x140d] 5133:	movsl #-1
        [0x140e] 5134:	movn #2
        [0x140f] 5135:	popobj
        [0x1410] 5136:	movg @70 // @app#TokenId
        [0x1411] 5137:	movn #9
        [0x1412] 5138:	pushobj
        [0x1413] 5139:	movsl #-1
        [0x1414] 5140:	movn #3
        [0x1415] 5141:	popobj
        [0x1416] 5142:	movg @70 // @app#TokenId
        [0x1417] 5143:	movn #10
        [0x1418] 5144:	pushobj
        [0x1419] 5145:	movsl #-1
        [0x141a] 5146:	movn #4
        [0x141b] 5147:	popobj
        [0x141c] 5148:	movg @70 // @app#TokenId
        [0x141d] 5149:	movn #11
        [0x141e] 5150:	pushobj
        [0x141f] 5151:	movsl #-1
        [0x1420] 5152:	movn #5
        [0x1421] 5153:	popobj
        [0x1422] 5154:	movg @70 // @app#TokenId
        [0x1423] 5155:	movn #12
        [0x1424] 5156:	pushobj
        [0x1425] 5157:	movsl #-1
        [0x1426] 5158:	movn #6
        [0x1427] 5159:	popobj
        [0x1428] 5160:	movg @70 // @app#TokenId
        [0x1429] 5161:	movn #13
        [0x142a] 5162:	pushobj
        [0x142b] 5163:	movsl #-1
        [0x142c] 5164:	movn #7
        [0x142d] 5165:	popobj
        [0x142e] 5166:	movg @70 // @app#TokenId
        [0x142f] 5167:	movn #14
        [0x1430] 5168:	pushobj
        [0x1431] 5169:	movsl #-1
        [0x1432] 5170:	movn #8
        [0x1433] 5171:	popobj
        [0x1434] 5172:	movg @70 // @app#TokenId
        [0x1435] 5173:	movn #15
        [0x1436] 5174:	pushobj
        [0x1437] 5175:	movsl #-1
        [0x1438] 5176:	movn #9
        [0x1439] 5177:	popobj
        [0x143a] 5178:	movg @70 // @app#TokenId
        [0x143b] 5179:	movn #16
        [0x143c] 5180:	pushobj
        [0x143d] 5181:	movsl #-1
        [0x143e] 5182:	movn #10
        [0x143f] 5183:	popobj
        [0x1440] 5184:	movg @70 // @app#TokenId
        [0x1441] 5185:	movn #17
        [0x1442] 5186:	pushobj
        [0x1443] 5187:	movsl #-1
        [0x1444] 5188:	movn #11
        [0x1445] 5189:	popobj
        [0x1446] 5190:	movg @70 // @app#TokenId
        [0x1447] 5191:	movn #0
        [0x1448] 5192:	popobj
        [0x1449] 5193:	movi #50, ebx
        [0x144b] 5195:	new_classarray ebx  // app#TokenType[]
        [0x144c] 5196:	movg @71 // @app#TokenType
        [0x144d] 5197:	movn #6
        [0x144e] 5198:	pushobj
        [0x144f] 5199:	movsl #-1
        [0x1450] 5200:	movn #0
        [0x1451] 5201:	popobj
        [0x1452] 5202:	movg @71 // @app#TokenType
        [0x1453] 5203:	movn #7
        [0x1454] 5204:	pushobj
        [0x1455] 5205:	movsl #-1
        [0x1456] 5206:	movn #1
        [0x1457] 5207:	popobj
        [0x1458] 5208:	movg @71 // @app#TokenType
        [0x1459] 5209:	movn #8
        [0x145a] 5210:	pushobj
        [0x145b] 5211:	movsl #-1
        [0x145c] 5212:	movn #2
        [0x145d] 5213:	popobj
        [0x145e] 5214:	movg @71 // @app#TokenType
        [0x145f] 5215:	movn #9
        [0x1460] 5216:	pushobj
        [0x1461] 5217:	movsl #-1
        [0x1462] 5218:	movn #3
        [0x1463] 5219:	popobj
        [0x1464] 5220:	movg @71 // @app#TokenType
        [0x1465] 5221:	movn #10
        [0x1466] 5222:	pushobj
        [0x1467] 5223:	movsl #-1
        [0x1468] 5224:	movn #4
        [0x1469] 5225:	popobj
        [0x146a] 5226:	movg @71 // @app#TokenType
        [0x146b] 5227:	movn #11
        [0x146c] 5228:	pushobj
        [0x146d] 5229:	movsl #-1
        [0x146e] 5230:	movn #5
        [0x146f] 5231:	popobj
        [0x1470] 5232:	movg @71 // @app#TokenType
        [0x1471] 5233:	movn #12
        [0x1472] 5234:	pushobj
        [0x1473] 5235:	movsl #-1
        [0x1474] 5236:	movn #6
        [0x1475] 5237:	popobj
        [0x1476] 5238:	movg @71 // @app#TokenType
        [0x1477] 5239:	movn #13
        [0x1478] 5240:	pushobj
        [0x1479] 5241:	movsl #-1
        [0x147a] 5242:	movn #7
        [0x147b] 5243:	popobj
        [0x147c] 5244:	movg @71 // @app#TokenType
        [0x147d] 5245:	movn #14
        [0x147e] 5246:	pushobj
        [0x147f] 5247:	movsl #-1
        [0x1480] 5248:	movn #8
        [0x1481] 5249:	popobj
        [0x1482] 5250:	movg @71 // @app#TokenType
        [0x1483] 5251:	movn #15
        [0x1484] 5252:	pushobj
        [0x1485] 5253:	movsl #-1
        [0x1486] 5254:	movn #9
        [0x1487] 5255:	popobj
        [0x1488] 5256:	movg @71 // @app#TokenType
        [0x1489] 5257:	movn #16
        [0x148a] 5258:	pushobj
        [0x148b] 5259:	movsl #-1
        [0x148c] 5260:	movn #10
        [0x148d] 5261:	popobj
        [0x148e] 5262:	movg @71 // @app#TokenType
        [0x148f] 5263:	movn #17
        [0x1490] 5264:	pushobj
        [0x1491] 5265:	movsl #-1
        [0x1492] 5266:	movn #11
        [0x1493] 5267:	popobj
        [0x1494] 5268:	movg @71 // @app#TokenType
        [0x1495] 5269:	movn #18
        [0x1496] 5270:	pushobj
        [0x1497] 5271:	movsl #-1
        [0x1498] 5272:	movn #12
        [0x1499] 5273:	popobj
        [0x149a] 5274:	movg @71 // @app#TokenType
        [0x149b] 5275:	movn #19
        [0x149c] 5276:	pushobj
        [0x149d] 5277:	movsl #-1
        [0x149e] 5278:	movn #13
        [0x149f] 5279:	popobj
        [0x14a0] 5280:	movg @71 // @app#TokenType
        [0x14a1] 5281:	movn #20
        [0x14a2] 5282:	pushobj
        [0x14a3] 5283:	movsl #-1
        [0x14a4] 5284:	movn #14
        [0x14a5] 5285:	popobj
        [0x14a6] 5286:	movg @71 // @app#TokenType
        [0x14a7] 5287:	movn #21
        [0x14a8] 5288:	pushobj
        [0x14a9] 5289:	movsl #-1
        [0x14aa] 5290:	movn #15
        [0x14ab] 5291:	popobj
        [0x14ac] 5292:	movg @71 // @app#TokenType
        [0x14ad] 5293:	movn #22
        [0x14ae] 5294:	pushobj
        [0x14af] 5295:	movsl #-1
        [0x14b0] 5296:	movn #16
        [0x14b1] 5297:	popobj
        [0x14b2] 5298:	movg @71 // @app#TokenType
        [0x14b3] 5299:	movn #23
        [0x14b4] 5300:	pushobj
        [0x14b5] 5301:	movsl #-1
        [0x14b6] 5302:	movn #17
        [0x14b7] 5303:	popobj
        [0x14b8] 5304:	movg @71 // @app#TokenType
        [0x14b9] 5305:	movn #24
        [0x14ba] 5306:	pushobj
        [0x14bb] 5307:	movsl #-1
        [0x14bc] 5308:	movn #18
        [0x14bd] 5309:	popobj
        [0x14be] 5310:	movg @71 // @app#TokenType
        [0x14bf] 5311:	movn #25
        [0x14c0] 5312:	pushobj
        [0x14c1] 5313:	movsl #-1
        [0x14c2] 5314:	movn #19
        [0x14c3] 5315:	popobj
        [0x14c4] 5316:	movg @71 // @app#TokenType
        [0x14c5] 5317:	movn #26
        [0x14c6] 5318:	pushobj
        [0x14c7] 5319:	movsl #-1
        [0x14c8] 5320:	movn #20
        [0x14c9] 5321:	popobj
        [0x14ca] 5322:	movg @71 // @app#TokenType
        [0x14cb] 5323:	movn #27
        [0x14cc] 5324:	pushobj
        [0x14cd] 5325:	movsl #-1
        [0x14ce] 5326:	movn #21
        [0x14cf] 5327:	popobj
        [0x14d0] 5328:	movg @71 // @app#TokenType
        [0x14d1] 5329:	movn #28
        [0x14d2] 5330:	pushobj
        [0x14d3] 5331:	movsl #-1
        [0x14d4] 5332:	movn #22
        [0x14d5] 5333:	popobj
        [0x14d6] 5334:	movg @71 // @app#TokenType
        [0x14d7] 5335:	movn #29
        [0x14d8] 5336:	pushobj
        [0x14d9] 5337:	movsl #-1
        [0x14da] 5338:	movn #23
        [0x14db] 5339:	popobj
        [0x14dc] 5340:	movg @71 // @app#TokenType
        [0x14dd] 5341:	movn #30
        [0x14de] 5342:	pushobj
        [0x14df] 5343:	movsl #-1
        [0x14e0] 5344:	movn #24
        [0x14e1] 5345:	popobj
        [0x14e2] 5346:	movg @71 // @app#TokenType
        [0x14e3] 5347:	movn #31
        [0x14e4] 5348:	pushobj
        [0x14e5] 5349:	movsl #-1
        [0x14e6] 5350:	movn #25
        [0x14e7] 5351:	popobj
        [0x14e8] 5352:	movg @71 // @app#TokenType
        [0x14e9] 5353:	movn #32
        [0x14ea] 5354:	pushobj
        [0x14eb] 5355:	movsl #-1
        [0x14ec] 5356:	movn #26
        [0x14ed] 5357:	popobj
        [0x14ee] 5358:	movg @71 // @app#TokenType
        [0x14ef] 5359:	movn #33
        [0x14f0] 5360:	pushobj
        [0x14f1] 5361:	movsl #-1
        [0x14f2] 5362:	movn #27
        [0x14f3] 5363:	popobj
        [0x14f4] 5364:	movg @71 // @app#TokenType
        [0x14f5] 5365:	movn #34
        [0x14f6] 5366:	pushobj
        [0x14f7] 5367:	movsl #-1
        [0x14f8] 5368:	movn #28
        [0x14f9] 5369:	popobj
        [0x14fa] 5370:	movg @71 // @app#TokenType
        [0x14fb] 5371:	movn #35
        [0x14fc] 5372:	pushobj
        [0x14fd] 5373:	movsl #-1
        [0x14fe] 5374:	movn #29
        [0x14ff] 5375:	popobj
        [0x1500] 5376:	movg @71 // @app#TokenType
        [0x1501] 5377:	movn #36
        [0x1502] 5378:	pushobj
        [0x1503] 5379:	movsl #-1
        [0x1504] 5380:	movn #30
        [0x1505] 5381:	popobj
        [0x1506] 5382:	movg @71 // @app#TokenType
        [0x1507] 5383:	movn #37
        [0x1508] 5384:	pushobj
        [0x1509] 5385:	movsl #-1
        [0x150a] 5386:	movn #31
        [0x150b] 5387:	popobj
        [0x150c] 5388:	movg @71 // @app#TokenType
        [0x150d] 5389:	movn #38
        [0x150e] 5390:	pushobj
        [0x150f] 5391:	movsl #-1
        [0x1510] 5392:	movn #32
        [0x1511] 5393:	popobj
        [0x1512] 5394:	movg @71 // @app#TokenType
        [0x1513] 5395:	movn #39
        [0x1514] 5396:	pushobj
        [0x1515] 5397:	movsl #-1
        [0x1516] 5398:	movn #33
        [0x1517] 5399:	popobj
        [0x1518] 5400:	movg @71 // @app#TokenType
        [0x1519] 5401:	movn #40
        [0x151a] 5402:	pushobj
        [0x151b] 5403:	movsl #-1
        [0x151c] 5404:	movn #34
        [0x151d] 5405:	popobj
        [0x151e] 5406:	movg @71 // @app#TokenType
        [0x151f] 5407:	movn #41
        [0x1520] 5408:	pushobj
        [0x1521] 5409:	movsl #-1
        [0x1522] 5410:	movn #35
        [0x1523] 5411:	popobj
        [0x1524] 5412:	movg @71 // @app#TokenType
        [0x1525] 5413:	movn #42
        [0x1526] 5414:	pushobj
        [0x1527] 5415:	movsl #-1
        [0x1528] 5416:	movn #36
        [0x1529] 5417:	popobj
        [0x152a] 5418:	movg @71 // @app#TokenType
        [0x152b] 5419:	movn #43
        [0x152c] 5420:	pushobj
        [0x152d] 5421:	movsl #-1
        [0x152e] 5422:	movn #37
        [0x152f] 5423:	popobj
        [0x1530] 5424:	movg @71 // @app#TokenType
        [0x1531] 5425:	movn #44
        [0x1532] 5426:	pushobj
        [0x1533] 5427:	movsl #-1
        [0x1534] 5428:	movn #38
        [0x1535] 5429:	popobj
        [0x1536] 5430:	movg @71 // @app#TokenType
        [0x1537] 5431:	movn #45
        [0x1538] 5432:	pushobj
        [0x1539] 5433:	movsl #-1
        [0x153a] 5434:	movn #39
        [0x153b] 5435:	popobj
        [0x153c] 5436:	movg @71 // @app#TokenType
        [0x153d] 5437:	movn #46
        [0x153e] 5438:	pushobj
        [0x153f] 5439:	movsl #-1
        [0x1540] 5440:	movn #40
        [0x1541] 5441:	popobj
        [0x1542] 5442:	movg @71 // @app#TokenType
        [0x1543] 5443:	movn #47
        [0x1544] 5444:	pushobj
        [0x1545] 5445:	movsl #-1
        [0x1546] 5446:	movn #41
        [0x1547] 5447:	popobj
        [0x1548] 5448:	movg @71 // @app#TokenType
        [0x1549] 5449:	movn #48
        [0x154a] 5450:	pushobj
        [0x154b] 5451:	movsl #-1
        [0x154c] 5452:	movn #42
        [0x154d] 5453:	popobj
        [0x154e] 5454:	movg @71 // @app#TokenType
        [0x154f] 5455:	movn #49
        [0x1550] 5456:	pushobj
        [0x1551] 5457:	movsl #-1
        [0x1552] 5458:	movn #43
        [0x1553] 5459:	popobj
        [0x1554] 5460:	movg @71 // @app#TokenType
        [0x1555] 5461:	movn #50
        [0x1556] 5462:	pushobj
        [0x1557] 5463:	movsl #-1
        [0x1558] 5464:	movn #44
        [0x1559] 5465:	popobj
        [0x155a] 5466:	movg @71 // @app#TokenType
        [0x155b] 5467:	movn #51
        [0x155c] 5468:	pushobj
        [0x155d] 5469:	movsl #-1
        [0x155e] 5470:	movn #45
        [0x155f] 5471:	popobj
        [0x1560] 5472:	movg @71 // @app#TokenType
        [0x1561] 5473:	movn #52
        [0x1562] 5474:	pushobj
        [0x1563] 5475:	movsl #-1
        [0x1564] 5476:	movn #46
        [0x1565] 5477:	popobj
        [0x1566] 5478:	movg @71 // @app#TokenType
        [0x1567] 5479:	movn #53
        [0x1568] 5480:	pushobj
        [0x1569] 5481:	movsl #-1
        [0x156a] 5482:	movn #47
        [0x156b] 5483:	popobj
        [0x156c] 5484:	movg @71 // @app#TokenType
        [0x156d] 5485:	movn #54
        [0x156e] 5486:	pushobj
        [0x156f] 5487:	movsl #-1
        [0x1570] 5488:	movn #48
        [0x1571] 5489:	popobj
        [0x1572] 5490:	movg @71 // @app#TokenType
        [0x1573] 5491:	movn #55
        [0x1574] 5492:	pushobj
        [0x1575] 5493:	movsl #-1
        [0x1576] 5494:	movn #49
        [0x1577] 5495:	popobj
        [0x1578] 5496:	movg @71 // @app#TokenType
        [0x1579] 5497:	movn #0
        [0x157a] 5498:	popobj
        [0x157b] 5499:	movi #0, ebx
        [0x157d] 5501:	new_classarray ebx  // app#Optimization[]
        [0x157e] 5502:	movg @72 // @app#Optimization
        [0x157f] 5503:	movn #0
        [0x1580] 5504:	popobj
        [0x1581] 5505:	movi #-36028797018963968, ebx
        [0x1583] 5507:	nop
        [0x1584] 5508:	rstore ebx
        [0x1585] 5509:	movg @15 // @std#integer
        [0x1586] 5510:	movn #1
        [0x1587] 5511:	movi #0, adx
        [0x1589] 5513:	loadval ecx
        [0x158a] 5514:	rmov adx, ecx
        [0x158b] 5515:	call @173 // <std.io#File.getFileSystem()>
        [0x158c] 5516:	movg @17 // @std.io#File
        [0x158d] 5517:	movn #0
        [0x158e] 5518:	popobj
        [0x158f] 5519:	movg @17 // @std.io#File
        [0x1590] 5520:	movn #0
        [0x1591] 5521:	pushobj
        [0x1592] 5522:	invoke_delegate 0, 0
        [0x1593] 5523:	nop
        [0x1594] 5524:	movg @17 // @std.io#File
        [0x1595] 5525:	movn #2
        [0x1596] 5526:	movi #0, adx
        [0x1598] 5528:	loadval ecx
        [0x1599] 5529:	rmov adx, ecx
        [0x159a] 5530:	new_class @46 // std#string
        [0x159b] 5531:	newstr @226 // ""
        [0x159c] 5532:	call @558 // <std#string.string(var[])>
        [0x159d] 5533:	movi #1, ebx
        [0x159f] 5535:	newarry ebx
        [0x15a0] 5536:	movg @17 // @std.io#File
        [0x15a1] 5537:	movn #2
        [0x15a2] 5538:	movi #0, adx
        [0x15a4] 5540:	chklen adx
        [0x15a5] 5541:	iaload_2 ebx, adx
        [0x15a6] 5542:	movsl #0
        [0x15a7] 5543:	movi #0, adx
        [0x15a9] 5545:	rmov adx, ebx
        [0x15aa] 5546:	call @572 // <std#string.$operator+(var[])>
        [0x15ab] 5547:	movg @17 // @std.io#File
        [0x15ac] 5548:	movn #3
        [0x15ad] 5549:	popobj
        [0x15ae] 5550:	movi #1, ebx
        [0x15b0] 5552:	nop
        [0x15b1] 5553:	rstore ebx
        [0x15b2] 5554:	movg @20 // @std.io#IOStream
        [0x15b3] 5555:	movn #4
        [0x15b4] 5556:	movi #0, adx
        [0x15b6] 5558:	loadval ecx
        [0x15b7] 5559:	rmov adx, ecx
        [0x15b8] 5560:	movi #0, ebx
        [0x15ba] 5562:	nop
        [0x15bb] 5563:	rstore ebx
        [0x15bc] 5564:	movg @20 // @std.io#IOStream
        [0x15bd] 5565:	movn #5
        [0x15be] 5566:	movi #0, adx
        [0x15c0] 5568:	loadval ecx
        [0x15c1] 5569:	rmov adx, ecx
        [0x15c2] 5570:	new_class @75 // std#ArrayList<std.io#Thread>
        [0x15c3] 5571:	call @959 // <std#ArrayList<std.io#Thread>.ArrayList()>
        [0x15c4] 5572:	movg @22 // @std.io#Thread
        [0x15c5] 5573:	movn #3
        [0x15c6] 5574:	popobj
        [0x15c7] 5575:	movi #4, ebx
        [0x15c9] 5577:	nop
        [0x15ca] 5578:	rstore ebx
        [0x15cb] 5579:	movg @30 // @std.kernel#Runtime
        [0x15cc] 5580:	movn #0
        [0x15cd] 5581:	movi #0, adx
        [0x15cf] 5583:	loadval ecx
        [0x15d0] 5584:	rmov adx, ecx
        [0x15d1] 5585:	movg @30 // @std.kernel#Runtime
        [0x15d2] 5586:	movn #1
        [0x15d3] 5587:	del
        [0x15d4] 5588:	new_class @38 // std.os.gui#Message
        [0x15d5] 5589:	call @447 // <std.os.gui#Message.Message()>
        [0x15d6] 5590:	movg @5 // @std.os.gui#__SRT_Global
        [0x15d7] 5591:	movn #0
        [0x15d8] 5592:	popobj
        [0x15d9] 5593:	movi #103, ebx
        [0x15db] 5595:	nop
        [0x15dc] 5596:	rstore ebx
        [0x15dd] 5597:	movg @45 // @std#strbuf
        [0x15de] 5598:	movn #5
        [0x15df] 5599:	movi #0, adx
        [0x15e1] 5601:	loadval ecx
        [0x15e2] 5602:	rmov adx, ecx
        [0x15e3] 5603:	movi #0, ebx
        [0x15e5] 5605:	nop
        [0x15e6] 5606:	rstore ebx
        [0x15e7] 5607:	movg @45 // @std#strbuf
        [0x15e8] 5608:	movn #6
        [0x15e9] 5609:	movi #0, adx
        [0x15eb] 5611:	loadval ecx
        [0x15ec] 5612:	rmov adx, ecx
        [0x15ed] 5613:	movi #103, ebx
        [0x15ef] 5615:	nop
        [0x15f0] 5616:	rstore ebx
        [0x15f1] 5617:	movg @46 // @std#string
        [0x15f2] 5618:	movn #1
        [0x15f3] 5619:	movi #0, adx
        [0x15f5] 5621:	loadval ecx
        [0x15f6] 5622:	rmov adx, ecx
        [0x15f7] 5623:	movi #0, ebx
        [0x15f9] 5625:	nop
        [0x15fa] 5626:	rstore ebx
        [0x15fb] 5627:	movg @46 // @std#string
        [0x15fc] 5628:	movn #2
        [0x15fd] 5629:	movi #0, adx
        [0x15ff] 5631:	loadval ecx
        [0x1600] 5632:	rmov adx, ecx
        [0x1601] 5633:	movi #32, ebx
        [0x1603] 5635:	newarry ebx
        [0x1604] 5636:	movg @46 // @std#string
        [0x1605] 5637:	movn #3
        [0x1606] 5638:	popobj
        [0x1607] 5639:	new_class @28 // std.kernel#ConsoleHandler
        [0x1608] 5640:	call @291 // <std.kernel#ConsoleHandler.ConsoleHandler()>
        [0x1609] 5641:	movg @0 // @std#__SRT_Global
        [0x160a] 5642:	movn #0
        [0x160b] 5643:	popobj
        [0x160c] 5644:	new_class @76 // std#Map<app#CompilerError,std#string>
        [0x160d] 5645:	call @980 // <std#Map<app#CompilerError,std#string>.Map()>
        [0x160e] 5646:	movg @54 // @app#ErrorManager
        [0x160f] 5647:	movn #0
        [0x1610] 5648:	popobj
        [0x1611] 5649:	new_class @54 // app#ErrorManager
        [0x1612] 5650:	call @781 // <app#ErrorManager.ErrorManager()>
        [0x1613] 5651:	movg @54 // @app#ErrorManager
        [0x1614] 5652:	movn #1
        [0x1615] 5653:	popobj
        [0x1616] 5654:	new_class @55 // app#ParseError
        [0x1617] 5655:	call @804 // <app#ParseError.ParseError()>
        [0x1618] 5656:	movg @54 // @app#ErrorManager
        [0x1619] 5657:	movn #2
        [0x161a] 5658:	popobj
        [0x161b] 5659:	movi #0, ebx
        [0x161d] 5661:	nop
        [0x161e] 5662:	rstore ebx
        [0x161f] 5663:	movg @56 // @app#Ast
        [0x1620] 5664:	movn #5
        [0x1621] 5665:	movi #0, adx
        [0x1623] 5667:	loadval ecx
        [0x1624] 5668:	rmov adx, ecx
        [0x1625] 5669:	movi #51, ebx
        [0x1627] 5671:	newobj_arry ebx
        [0x1628] 5672:	newstr @228 // "mod"
        [0x1629] 5673:	movsl #-1
        [0x162a] 5674:	movn #0
        [0x162b] 5675:	popobj
        [0x162c] 5676:	newstr @229 // "true"
        [0x162d] 5677:	movsl #-1
        [0x162e] 5678:	movn #1
        [0x162f] 5679:	popobj
        [0x1630] 5680:	newstr @230 // "false"
        [0x1631] 5681:	movsl #-1
        [0x1632] 5682:	movn #2
        [0x1633] 5683:	popobj
        [0x1634] 5684:	newstr @231 // "class"
        [0x1635] 5685:	movsl #-1
        [0x1636] 5686:	movn #3
        [0x1637] 5687:	popobj
        [0x1638] 5688:	newstr @232 // "static"
        [0x1639] 5689:	movsl #-1
        [0x163a] 5690:	movn #4
        [0x163b] 5691:	popobj
        [0x163c] 5692:	newstr @233 // "protected"
        [0x163d] 5693:	movsl #-1
        [0x163e] 5694:	movn #5
        [0x163f] 5695:	popobj
        [0x1640] 5696:	newstr @234 // "pro"
        [0x1641] 5697:	movsl #-1
        [0x1642] 5698:	movn #6
        [0x1643] 5699:	popobj
        [0x1644] 5700:	newstr @235 // "private"
        [0x1645] 5701:	movsl #-1
        [0x1646] 5702:	movn #7
        [0x1647] 5703:	popobj
        [0x1648] 5704:	newstr @236 // "def"
        [0x1649] 5705:	movsl #-1
        [0x164a] 5706:	movn #8
        [0x164b] 5707:	popobj
        [0x164c] 5708:	newstr @237 // "import"
        [0x164d] 5709:	movsl #-1
        [0x164e] 5710:	movn #9
        [0x164f] 5711:	popobj
        [0x1650] 5712:	newstr @238 // "return"
        [0x1651] 5713:	movsl #-1
        [0x1652] 5714:	movn #10
        [0x1653] 5715:	popobj
        [0x1654] 5716:	newstr @239 // "self"
        [0x1655] 5717:	movsl #-1
        [0x1656] 5718:	movn #11
        [0x1657] 5719:	popobj
        [0x1658] 5720:	newstr @240 // "const"
        [0x1659] 5721:	movsl #-1
        [0x165a] 5722:	movn #12
        [0x165b] 5723:	popobj
        [0x165c] 5724:	newstr @241 // "public"
        [0x165d] 5725:	movsl #-1
        [0x165e] 5726:	movn #13
        [0x165f] 5727:	popobj
        [0x1660] 5728:	newstr @242 // "new"
        [0x1661] 5729:	movsl #-1
        [0x1662] 5730:	movn #14
        [0x1663] 5731:	popobj
        [0x1664] 5732:	newstr @243 // "null"
        [0x1665] 5733:	movsl #-1
        [0x1666] 5734:	movn #15
        [0x1667] 5735:	popobj
        [0x1668] 5736:	newstr @244 // "operator"
        [0x1669] 5737:	movsl #-1
        [0x166a] 5738:	movn #16
        [0x166b] 5739:	popobj
        [0x166c] 5740:	newstr @245 // "base"
        [0x166d] 5741:	movsl #-1
        [0x166e] 5742:	movn #17
        [0x166f] 5743:	popobj
        [0x1670] 5744:	newstr @246 // "if"
        [0x1671] 5745:	movsl #-1
        [0x1672] 5746:	movn #18
        [0x1673] 5747:	popobj
        [0x1674] 5748:	newstr @247 // "while"
        [0x1675] 5749:	movsl #-1
        [0x1676] 5750:	movn #19
        [0x1677] 5751:	popobj
        [0x1678] 5752:	newstr @248 // "do"
        [0x1679] 5753:	movsl #-1
        [0x167a] 5754:	movn #20
        [0x167b] 5755:	popobj
        [0x167c] 5756:	newstr @249 // "try"
        [0x167d] 5757:	movsl #-1
        [0x167e] 5758:	movn #21
        [0x167f] 5759:	popobj
        [0x1680] 5760:	newstr @250 // "catch"
        [0x1681] 5761:	movsl #-1
        [0x1682] 5762:	movn #22
        [0x1683] 5763:	popobj
        [0x1684] 5764:	newstr @251 // "finally"
        [0x1685] 5765:	movsl #-1
        [0x1686] 5766:	movn #23
        [0x1687] 5767:	popobj
        [0x1688] 5768:	newstr @252 // "throw"
        [0x1689] 5769:	movsl #-1
        [0x168a] 5770:	movn #24
        [0x168b] 5771:	popobj
        [0x168c] 5772:	newstr @253 // "continue"
        [0x168d] 5773:	movsl #-1
        [0x168e] 5774:	movn #25
        [0x168f] 5775:	popobj
        [0x1690] 5776:	newstr @254 // "goto"
        [0x1691] 5777:	movsl #-1
        [0x1692] 5778:	movn #26
        [0x1693] 5779:	popobj
        [0x1694] 5780:	newstr @255 // "break"
        [0x1695] 5781:	movsl #-1
        [0x1696] 5782:	movn #27
        [0x1697] 5783:	popobj
        [0x1698] 5784:	newstr @256 // "else"
        [0x1699] 5785:	movsl #-1
        [0x169a] 5786:	movn #28
        [0x169b] 5787:	popobj
        [0x169c] 5788:	newstr @257 // "object"
        [0x169d] 5789:	movsl #-1
        [0x169e] 5790:	movn #29
        [0x169f] 5791:	popobj
        [0x16a0] 5792:	newstr @258 // "asm"
        [0x16a1] 5793:	movsl #-1
        [0x16a2] 5794:	movn #30
        [0x16a3] 5795:	popobj
        [0x16a4] 5796:	newstr @259 // "for"
        [0x16a5] 5797:	movsl #-1
        [0x16a6] 5798:	movn #31
        [0x16a7] 5799:	popobj
        [0x16a8] 5800:	newstr @260 // "foreach"
        [0x16a9] 5801:	movsl #-1
        [0x16aa] 5802:	movn #32
        [0x16ab] 5803:	popobj
        [0x16ac] 5804:	newstr @261 // "var"
        [0x16ad] 5805:	movsl #-1
        [0x16ae] 5806:	movn #33
        [0x16af] 5807:	popobj
        [0x16b0] 5808:	newstr @262 // "sizeof"
        [0x16b1] 5809:	movsl #-1
        [0x16b2] 5810:	movn #34
        [0x16b3] 5811:	popobj
        [0x16b4] 5812:	newstr @263 // "_int8"
        [0x16b5] 5813:	movsl #-1
        [0x16b6] 5814:	movn #35
        [0x16b7] 5815:	popobj
        [0x16b8] 5816:	newstr @264 // "_int16"
        [0x16b9] 5817:	movsl #-1
        [0x16ba] 5818:	movn #36
        [0x16bb] 5819:	popobj
        [0x16bc] 5820:	newstr @265 // "_int32"
        [0x16bd] 5821:	movsl #-1
        [0x16be] 5822:	movn #37
        [0x16bf] 5823:	popobj
        [0x16c0] 5824:	newstr @266 // "_int64"
        [0x16c1] 5825:	movsl #-1
        [0x16c2] 5826:	movn #38
        [0x16c3] 5827:	popobj
        [0x16c4] 5828:	newstr @267 // "_uint8"
        [0x16c5] 5829:	movsl #-1
        [0x16c6] 5830:	movn #39
        [0x16c7] 5831:	popobj
        [0x16c8] 5832:	newstr @268 // "_uint16"
        [0x16c9] 5833:	movsl #-1
        [0x16ca] 5834:	movn #40
        [0x16cb] 5835:	popobj
        [0x16cc] 5836:	newstr @269 // "_uint32"
        [0x16cd] 5837:	movsl #-1
        [0x16ce] 5838:	movn #41
        [0x16cf] 5839:	popobj
        [0x16d0] 5840:	newstr @270 // "_uint64"
        [0x16d1] 5841:	movsl #-1
        [0x16d2] 5842:	movn #42
        [0x16d3] 5843:	popobj
        [0x16d4] 5844:	newstr @271 // "delegate"
        [0x16d5] 5845:	movsl #-1
        [0x16d6] 5846:	movn #43
        [0x16d7] 5847:	popobj
        [0x16d8] 5848:	newstr @272 // "interface"
        [0x16d9] 5849:	movsl #-1
        [0x16da] 5850:	movn #44
        [0x16db] 5851:	popobj
        [0x16dc] 5852:	newstr @273 // "lock"
        [0x16dd] 5853:	movsl #-1
        [0x16de] 5854:	movn #45
        [0x16df] 5855:	popobj
        [0x16e0] 5856:	newstr @274 // "enum"
        [0x16e1] 5857:	movsl #-1
        [0x16e2] 5858:	movn #46
        [0x16e3] 5859:	popobj
        [0x16e4] 5860:	newstr @275 // "switch"
        [0x16e5] 5861:	movsl #-1
        [0x16e6] 5862:	movn #47
        [0x16e7] 5863:	popobj
        [0x16e8] 5864:	newstr @276 // "default"
        [0x16e9] 5865:	movsl #-1
        [0x16ea] 5866:	movn #48
        [0x16eb] 5867:	popobj
        [0x16ec] 5868:	newstr @277 // "volatile"
        [0x16ed] 5869:	movsl #-1
        [0x16ee] 5870:	movn #49
        [0x16ef] 5871:	popobj
        [0x16f0] 5872:	newstr @278 // "fn"
        [0x16f1] 5873:	movsl #-1
        [0x16f2] 5874:	movn #50
        [0x16f3] 5875:	popobj
        [0x16f4] 5876:	movg @57 // @app#Parser
        [0x16f5] 5877:	movn #12
        [0x16f6] 5878:	popobj
        [0x16f7] 5879:	newstr @272 // "interface"
        [0x16f8] 5880:	movg @57 // @app#Parser
        [0x16f9] 5881:	movn #13
        [0x16fa] 5882:	popobj
        [0x16fb] 5883:	newstr @228 // "mod"
        [0x16fc] 5884:	movg @57 // @app#Parser
        [0x16fd] 5885:	movn #14
        [0x16fe] 5886:	popobj
        [0x16ff] 5887:	newstr @231 // "class"
        [0x1700] 5888:	movg @57 // @app#Parser
        [0x1701] 5889:	movn #15
        [0x1702] 5890:	popobj
        [0x1703] 5891:	newstr @237 // "import"
        [0x1704] 5892:	movg @57 // @app#Parser
        [0x1705] 5893:	movn #16
        [0x1706] 5894:	popobj
        [0x1707] 5895:	newstr @261 // "var"
        [0x1708] 5896:	movg @57 // @app#Parser
        [0x1709] 5897:	movn #17
        [0x170a] 5898:	popobj
        [0x170b] 5899:	newstr @257 // "object"
        [0x170c] 5900:	movg @57 // @app#Parser
        [0x170d] 5901:	movn #18
        [0x170e] 5902:	popobj
        [0x170f] 5903:	newstr @278 // "fn"
        [0x1710] 5904:	movg @57 // @app#Parser
        [0x1711] 5905:	movn #19
        [0x1712] 5906:	popobj
        [0x1713] 5907:	newstr @236 // "def"
        [0x1714] 5908:	movg @57 // @app#Parser
        [0x1715] 5909:	movn #20
        [0x1716] 5910:	popobj
        [0x1717] 5911:	newstr @238 // "return"
        [0x1718] 5912:	movg @57 // @app#Parser
        [0x1719] 5913:	movn #21
        [0x171a] 5914:	popobj
        [0x171b] 5915:	newstr @246 // "if"
        [0x171c] 5916:	movg @57 // @app#Parser
        [0x171d] 5917:	movn #22
        [0x171e] 5918:	popobj
        [0x171f] 5919:	newstr @275 // "switch"
        [0x1720] 5920:	movg @57 // @app#Parser
        [0x1721] 5921:	movn #23
        [0x1722] 5922:	popobj
        [0x1723] 5923:	newstr @258 // "asm"
        [0x1724] 5924:	movg @57 // @app#Parser
        [0x1725] 5925:	movn #24
        [0x1726] 5926:	popobj
        [0x1727] 5927:	newstr @259 // "for"
        [0x1728] 5928:	movg @57 // @app#Parser
        [0x1729] 5929:	movn #25
        [0x172a] 5930:	popobj
        [0x172b] 5931:	newstr @273 // "lock"
        [0x172c] 5932:	movg @57 // @app#Parser
        [0x172d] 5933:	movn #26
        [0x172e] 5934:	popobj
        [0x172f] 5935:	newstr @260 // "foreach"
        [0x1730] 5936:	movg @57 // @app#Parser
        [0x1731] 5937:	movn #27
        [0x1732] 5938:	popobj
        [0x1733] 5939:	newstr @247 // "while"
        [0x1734] 5940:	movg @57 // @app#Parser
        [0x1735] 5941:	movn #28
        [0x1736] 5942:	popobj
        [0x1737] 5943:	newstr @248 // "do"
        [0x1738] 5944:	movg @57 // @app#Parser
        [0x1739] 5945:	movn #29
        [0x173a] 5946:	popobj
        [0x173b] 5947:	newstr @249 // "try"
        [0x173c] 5948:	movg @57 // @app#Parser
        [0x173d] 5949:	movn #30
        [0x173e] 5950:	popobj
        [0x173f] 5951:	newstr @250 // "catch"
        [0x1740] 5952:	movg @57 // @app#Parser
        [0x1741] 5953:	movn #31
        [0x1742] 5954:	popobj
        [0x1743] 5955:	newstr @252 // "throw"
        [0x1744] 5956:	movg @57 // @app#Parser
        [0x1745] 5957:	movn #32
        [0x1746] 5958:	popobj
        [0x1747] 5959:	newstr @253 // "continue"
        [0x1748] 5960:	movg @57 // @app#Parser
        [0x1749] 5961:	movn #33
        [0x174a] 5962:	popobj
        [0x174b] 5963:	newstr @255 // "break"
        [0x174c] 5964:	movg @57 // @app#Parser
        [0x174d] 5965:	movn #34
        [0x174e] 5966:	popobj
        [0x174f] 5967:	newstr @254 // "goto"
        [0x1750] 5968:	movg @57 // @app#Parser
        [0x1751] 5969:	movn #35
        [0x1752] 5970:	popobj
        [0x1753] 5971:	newstr @279 // "case"
        [0x1754] 5972:	movg @57 // @app#Parser
        [0x1755] 5973:	movn #36
        [0x1756] 5974:	popobj
        [0x1757] 5975:	newstr @276 // "default"
        [0x1758] 5976:	movg @57 // @app#Parser
        [0x1759] 5977:	movn #37
        [0x175a] 5978:	popobj
        [0x175b] 5979:	newstr @277 // "volatile"
        [0x175c] 5980:	movg @57 // @app#Parser
        [0x175d] 5981:	movn #38
        [0x175e] 5982:	popobj
        [0x175f] 5983:	newstr @274 // "enum"
        [0x1760] 5984:	movg @57 // @app#Parser
        [0x1761] 5985:	movn #39
        [0x1762] 5986:	popobj
        [0x1763] 5987:	newstr @232 // "static"
        [0x1764] 5988:	movg @57 // @app#Parser
        [0x1765] 5989:	movn #40
        [0x1766] 5990:	popobj
        [0x1767] 5991:	newstr @240 // "const"
        [0x1768] 5992:	movg @57 // @app#Parser
        [0x1769] 5993:	movn #41
        [0x176a] 5994:	popobj
        [0x176b] 5995:	newstr @241 // "public"
        [0x176c] 5996:	movg @57 // @app#Parser
        [0x176d] 5997:	movn #42
        [0x176e] 5998:	popobj
        [0x176f] 5999:	newstr @235 // "private"
        [0x1770] 6000:	movg @57 // @app#Parser
        [0x1771] 6001:	movn #43
        [0x1772] 6002:	popobj
        [0x1773] 6003:	newstr @233 // "protected"
        [0x1774] 6004:	movg @57 // @app#Parser
        [0x1775] 6005:	movn #44
        [0x1776] 6006:	popobj
        [0x1777] 6007:	movi #0, ebx
        [0x1779] 6009:	nop
        [0x177a] 6010:	rstore ebx
        [0x177b] 6011:	movg @60 // @app#Options
        [0x177c] 6012:	movn #0
        [0x177d] 6013:	movi #0, adx
        [0x177f] 6015:	loadval ecx
        [0x1780] 6016:	rmov adx, ecx
        [0x1781] 6017:	movi #0, ebx
        [0x1783] 6019:	nop
        [0x1784] 6020:	rstore ebx
        [0x1785] 6021:	movg @60 // @app#Options
        [0x1786] 6022:	movn #1
        [0x1787] 6023:	movi #0, adx
        [0x1789] 6025:	loadval ecx
        [0x178a] 6026:	rmov adx, ecx
        [0x178b] 6027:	new_class @46 // std#string
        [0x178c] 6028:	newstr @280 // "out"
        [0x178d] 6029:	call @558 // <std#string.string(var[])>
        [0x178e] 6030:	movg @60 // @app#Options
        [0x178f] 6031:	movn #2
        [0x1790] 6032:	popobj
        [0x1791] 6033:	new_class @46 // std#string
        [0x1792] 6034:	newstr @281 // "1.0"
        [0x1793] 6035:	call @558 // <std#string.string(var[])>
        [0x1794] 6036:	movg @60 // @app#Options
        [0x1795] 6037:	movn #3
        [0x1796] 6038:	popobj
        [0x1797] 6039:	movi #1, ebx
        [0x1799] 6041:	nop
        [0x179a] 6042:	rstore ebx
        [0x179b] 6043:	movg @60 // @app#Options
        [0x179c] 6044:	movn #4
        [0x179d] 6045:	movi #0, adx
        [0x179f] 6047:	loadval ecx
        [0x17a0] 6048:	rmov adx, ecx
        [0x17a1] 6049:	movg @72 // @app#Optimization
        [0x17a2] 6050:	movn #3
        [0x17a3] 6051:	pushobj
        [0x17a4] 6052:	movg @60 // @app#Options
        [0x17a5] 6053:	movn #5
        [0x17a6] 6054:	popobj
        [0x17a7] 6055:	movi #1, ebx
        [0x17a9] 6057:	nop
        [0x17aa] 6058:	rstore ebx
        [0x17ab] 6059:	movg @60 // @app#Options
        [0x17ac] 6060:	movn #6
        [0x17ad] 6061:	movi #0, adx
        [0x17af] 6063:	loadval ecx
        [0x17b0] 6064:	rmov adx, ecx
        [0x17b1] 6065:	movi #0, ebx
        [0x17b3] 6067:	nop
        [0x17b4] 6068:	rstore ebx
        [0x17b5] 6069:	movg @60 // @app#Options
        [0x17b6] 6070:	movn #7
        [0x17b7] 6071:	movi #0, adx
        [0x17b9] 6073:	loadval ecx
        [0x17ba] 6074:	rmov adx, ecx
        [0x17bb] 6075:	movi #0, ebx
        [0x17bd] 6077:	nop
        [0x17be] 6078:	rstore ebx
        [0x17bf] 6079:	movg @60 // @app#Options
        [0x17c0] 6080:	movn #8
        [0x17c1] 6081:	movi #0, adx
        [0x17c3] 6083:	loadval ecx
        [0x17c4] 6084:	rmov adx, ecx
        [0x17c5] 6085:	movi #0, ebx
        [0x17c7] 6087:	nop
        [0x17c8] 6088:	rstore ebx
        [0x17c9] 6089:	movg @60 // @app#Options
        [0x17ca] 6090:	movn #9
        [0x17cb] 6091:	movi #0, adx
        [0x17cd] 6093:	loadval ecx
        [0x17ce] 6094:	rmov adx, ecx
        [0x17cf] 6095:	movi #0, ebx
        [0x17d1] 6097:	nop
        [0x17d2] 6098:	rstore ebx
        [0x17d3] 6099:	movg @60 // @app#Options
        [0x17d4] 6100:	movn #10
        [0x17d5] 6101:	movi #0, adx
        [0x17d7] 6103:	loadval ecx
        [0x17d8] 6104:	rmov adx, ecx
        [0x17d9] 6105:	movi #0, ebx
        [0x17db] 6107:	nop
        [0x17dc] 6108:	rstore ebx
        [0x17dd] 6109:	movg @60 // @app#Options
        [0x17de] 6110:	movn #11
        [0x17df] 6111:	movi #0, adx
        [0x17e1] 6113:	loadval ecx
        [0x17e2] 6114:	rmov adx, ecx
        [0x17e3] 6115:	movi #1000, ebx
        [0x17e5] 6117:	nop
        [0x17e6] 6118:	rstore ebx
        [0x17e7] 6119:	movg @60 // @app#Options
        [0x17e8] 6120:	movn #12
        [0x17e9] 6121:	movi #0, adx
        [0x17eb] 6123:	loadval ecx
        [0x17ec] 6124:	rmov adx, ecx
        [0x17ed] 6125:	movi #2, ebx
        [0x17ef] 6127:	nop
        [0x17f0] 6128:	rstore ebx
        [0x17f1] 6129:	movg @60 // @app#Options
        [0x17f2] 6130:	movn #13
        [0x17f3] 6131:	movi #0, adx
        [0x17f5] 6133:	loadval ecx
        [0x17f6] 6134:	rmov adx, ecx
        [0x17f7] 6135:	new_class @73 // std#ArrayList<std#string>
        [0x17f8] 6136:	call @917 // <std#ArrayList<std#string>.ArrayList()>
        [0x17f9] 6137:	movg @60 // @app#Options
        [0x17fa] 6138:	movn #14
        [0x17fb] 6139:	popobj
        [0x17fc] 6140:	movi #3, ebx
        [0x17fe] 6142:	newarry ebx
        [0x17ff] 6143:	movsl #0
        [0x1800] 6144:	movi #0, ebx
        [0x1802] 6146:	movi #0, adx
        [0x1804] 6148:	rmov adx, ebx
        [0x1805] 6149:	movsl #0
        [0x1806] 6150:	movi #0, ebx
        [0x1808] 6152:	movi #1, adx
        [0x180a] 6154:	rmov adx, ebx
        [0x180b] 6155:	movsl #0
        [0x180c] 6156:	movi #0, ebx
        [0x180e] 6158:	movi #2, adx
        [0x1810] 6160:	rmov adx, ebx
        [0x1811] 6161:	movg @6 // @app#__SRT_Global
        [0x1812] 6162:	movn #10
        [0x1813] 6163:	popobj
        [0x1814] 6164:	movi #7, ebx
        [0x1816] 6166:	newarry ebx
        [0x1817] 6167:	movsl #0
        [0x1818] 6168:	movi #1, ebx
        [0x181a] 6170:	movi #0, adx
        [0x181c] 6172:	rmov adx, ebx
        [0x181d] 6173:	movsl #0
        [0x181e] 6174:	movi #1, ebx
        [0x1820] 6176:	movi #1, adx
        [0x1822] 6178:	rmov adx, ebx
        [0x1823] 6179:	movsl #0
        [0x1824] 6180:	movi #1, ebx
        [0x1826] 6182:	movi #2, adx
        [0x1828] 6184:	rmov adx, ebx
        [0x1829] 6185:	movsl #0
        [0x182a] 6186:	movi #1, ebx
        [0x182c] 6188:	movi #3, adx
        [0x182e] 6190:	rmov adx, ebx
        [0x182f] 6191:	movsl #0
        [0x1830] 6192:	movi #1, ebx
        [0x1832] 6194:	movi #4, adx
        [0x1834] 6196:	rmov adx, ebx
        [0x1835] 6197:	movsl #0
        [0x1836] 6198:	movi #1, ebx
        [0x1838] 6200:	movi #5, adx
        [0x183a] 6202:	rmov adx, ebx
        [0x183b] 6203:	movsl #0
        [0x183c] 6204:	movi #1, ebx
        [0x183e] 6206:	movi #6, adx
        [0x1840] 6208:	rmov adx, ebx
        [0x1841] 6209:	movg @6 // @app#__SRT_Global
        [0x1842] 6210:	movn #11
        [0x1843] 6211:	popobj
        [0x1844] 6212:	new_class @46 // std#string
        [0x1845] 6213:	newstr @282 // "sharpc"
        [0x1846] 6214:	call @558 // <std#string.string(var[])>
        [0x1847] 6215:	movg @62 // @app#Runtime
        [0x1848] 6216:	movn #0
        [0x1849] 6217:	popobj
        [0x184a] 6218:	new_class @46 // std#string
        [0x184b] 6219:	newstr @283 // "0.3.0"
        [0x184c] 6220:	call @558 // <std#string.string(var[])>
        [0x184d] 6221:	movg @62 // @app#Runtime
        [0x184e] 6222:	movn #1
        [0x184f] 6223:	popobj
        [0x1850] 6224:	movg @30 // @std.kernel#Runtime
        [0x1851] 6225:	movn #2
        [0x1852] 6226:	movi #0, adx
        [0x1854] 6228:	movi #780, ebx
        [0x1856] 6230:	rmov adx, ebx
        [0x1857] 6231:	ret

func:@303 [std.kernel#Runtime.initializeTLS] in file: lib/support//0.2.587//kernel//Runtime.sharp:41:36: note:  
		    public static def initializeTLS() {
		                                   ^


initializeTLS:
        [0x0] 0:	ret

func:@304 [std.kernel#Runtime.__srt_init_] in file: lib/support//0.2.587//kernel//Runtime.sharp:55:34: note:  
		    public static def __srt_init_(object[] args) : var {
		                                 ^


__srt_init_:
line: 56 [0x0] 0:	new_class @46 // std#string
         [0x1] 1:	newstr @226 // ""
         [0x2] 2:	call @558 // <std#string.string(var[])>
         [0x3] 3:	movl 0
         [0x4] 4:	movi #0, ebx
         [0x6] 6:	chklen ebx
         [0x7] 7:	movnd ebx
         [0x8] 8:	vcast 1
         [0x9] 9:	pushobj
         [0xa] 10:	call @572 // <std#string.$operator+(var[])>
         [0xb] 11:	movg @29 // @std.kernel#Manifest
         [0xc] 12:	movn #1
         [0xd] 13:	popobj
line: 57 [0xe] 14:	new_class @46 // std#string
         [0xf] 15:	newstr @226 // ""
         [0x10] 16:	call @558 // <std#string.string(var[])>
         [0x11] 17:	movl 0
         [0x12] 18:	movi #1, ebx
         [0x14] 20:	chklen ebx
         [0x15] 21:	movnd ebx
         [0x16] 22:	vcast 1
         [0x17] 23:	pushobj
         [0x18] 24:	call @572 // <std#string.$operator+(var[])>
         [0x19] 25:	movg @29 // @std.kernel#Manifest
         [0x1a] 26:	movn #3
         [0x1b] 27:	popobj
line: 58 [0x1c] 28:	new_class @46 // std#string
         [0x1d] 29:	newstr @226 // ""
         [0x1e] 30:	call @558 // <std#string.string(var[])>
         [0x1f] 31:	movl 0
         [0x20] 32:	movi #2, ebx
         [0x22] 34:	chklen ebx
         [0x23] 35:	movnd ebx
         [0x24] 36:	vcast 1
         [0x25] 37:	pushobj
         [0x26] 38:	call @572 // <std#string.$operator+(var[])>
         [0x27] 39:	movg @29 // @std.kernel#Manifest
         [0x28] 40:	movn #2
         [0x29] 41:	popobj
line: 59 [0x2a] 42:	new_class @46 // std#string
         [0x2b] 43:	newstr @226 // ""
         [0x2c] 44:	call @558 // <std#string.string(var[])>
         [0x2d] 45:	movl 0
         [0x2e] 46:	movi #3, ebx
         [0x30] 48:	chklen ebx
         [0x31] 49:	movnd ebx
         [0x32] 50:	vcast 1
         [0x33] 51:	pushobj
         [0x34] 52:	call @572 // <std#string.$operator+(var[])>
         [0x35] 53:	movg @29 // @std.kernel#Manifest
         [0x36] 54:	movn #0
         [0x37] 55:	popobj
line: 64 [0x38] 56:	call @302 // <std.kernel#Runtime.initializeRTE()>
line: 65 [0x39] 57:	call @303 // <std.kernel#Runtime.initializeTLS()>
line: 66 [0x3a] 58:	call @240 // <std.io#Thread.setupMainThread()>
line: 67 [0x3b] 59:	movg @30 // @std.kernel#Runtime
         [0x3c] 60:	movn #0
         [0x3d] 61:	movi #0, adx
         [0x3f] 63:	iaload_2 ebx, adx
         [0x40] 64:	rstore ebx
         [0x41] 65:	movl 0
         [0x42] 66:	sizeof ebx
         [0x43] 67:	loadval egx
         [0x44] 68:	sub ebx, egx -> ebx
         [0x46] 70:	rstore ebx
         [0x47] 71:	loadval ebx
         [0x48] 72:	new_classarray ebx  // std#string[]
         [0x49] 73:	movg @30 // @std.kernel#Runtime
         [0x4a] 74:	movn #1
         [0x4b] 75:	popobj
line: 75 [0x4c] 76:	istorel 0, fp+1
line: 76 [0x4e] 78:	movg @30 // @std.kernel#Runtime
         [0x4f] 79:	movn #0
         [0x50] 80:	movi #0, adx
         [0x52] 82:	chklen adx
         [0x53] 83:	iaload_2 ebx, adx
         [0x54] 84:	smovr_2 ebx, fp+2
         [0x55] 85:	movl 0
         [0x56] 86:	sizeof ebx
         [0x57] 87:	movr egx, ebx
         [0x58] 88:	loadl ebx, fp+2
         [0x59] 89:	lt ebx, egx
         [0x5a] 90:	movr ebx, cmt
         [0x5b] 91:	movi #116, adx
         [0x5d] 93:	ifne
line: 77 [0x5e] 94:	new_class @46 // std#string
         [0x5f] 95:	movl 0
         [0x60] 96:	loadl ebx, fp+2
         [0x61] 97:	chklen ebx
         [0x62] 98:	movnd ebx
         [0x63] 99:	vcast 1
         [0x64] 100:	pushobj
         [0x65] 101:	call @558 // <std#string.string(var[])>
         [0x66] 102:	movg @30 // @std.kernel#Runtime
         [0x67] 103:	movn #1
         [0x68] 104:	loadl ebx, fp+1
         [0x69] 105:	movi #1, ecx
         [0x6b] 107:	addl ecx, @1
         [0x6c] 108:	chklen ebx
         [0x6d] 109:	movnd ebx
         [0x6e] 110:	popobj
         [0x6f] 111:	loadl ebx, fp+2
         [0x70] 112:	movi #1, ecx
         [0x72] 114:	addl ecx, @2
         [0x73] 115:	goto @85
line: 80 [0x74] 116:	istorel 0, fp+3
line: 82 [0x76] 118:	movg @30 // @std.kernel#Runtime
         [0x77] 119:	movn #2
         [0x78] 120:	movi #0, adx
         [0x7a] 122:	iaload_2 ebx, adx
         [0x7b] 123:	rstore ebx
         [0x7c] 124:	movi #0, ebx
         [0x7e] 126:	movr egx, ebx
         [0x7f] 127:	loadval ebx
         [0x80] 128:	tne ebx, egx
         [0x81] 129:	movr ebx, cmt
         [0x82] 130:	movi #153, adx
         [0x84] 132:	ifne
line: 83 [0x85] 133:	movg @30 // @std.kernel#Runtime
         [0x86] 134:	movn #1
         [0x87] 135:	pushobj
         [0x88] 136:	movg @30 // @std.kernel#Runtime
         [0x89] 137:	movn #2
         [0x8a] 138:	movi #0, adx
         [0x8c] 140:	chklen adx
         [0x8d] 141:	iaload_2 ebx, adx
         [0x8e] 142:	calld ebx
         [0x8f] 143:	loadval ebx
         [0x90] 144:	smovr_2 ebx, fp+3
line: 84 [0x91] 145:	new_class @46 // std#string
         [0x92] 146:	newstr @293 // "\nProgram finished with exit code "
         [0x93] 147:	call @558 // <std#string.string(var[])>
         [0x94] 148:	loadl ebx, fp+3
         [0x95] 149:	rstore ebx
         [0x96] 150:	call @579 // <std#string.$operator+(var)>
         [0x97] 151:	call @601 // <std#__SRT_Global.print(std#string)>
         [0x98] 152:	goto @187
         [0x99] 153:	movg @30 // @std.kernel#Runtime
         [0x9a] 154:	movn #3
         [0x9b] 155:	movi #0, adx
         [0x9d] 157:	iaload_2 ebx, adx
         [0x9e] 158:	rstore ebx
         [0x9f] 159:	movi #0, ebx
         [0xa1] 161:	movr egx, ebx
         [0xa2] 162:	loadval ebx
         [0xa3] 163:	tne ebx, egx
         [0xa4] 164:	movr ebx, cmt
         [0xa5] 165:	movi #179, adx
         [0xa7] 167:	ifne
line: 86 [0xa8] 168:	movg @30 // @std.kernel#Runtime
         [0xa9] 169:	movn #1
         [0xaa] 170:	pushobj
         [0xab] 171:	movg @30 // @std.kernel#Runtime
         [0xac] 172:	movn #3
         [0xad] 173:	movi #0, adx
         [0xaf] 175:	chklen adx
         [0xb0] 176:	iaload_2 ebx, adx
         [0xb1] 177:	calld ebx
         [0xb2] 178:	goto @187
line: 88 [0xb3] 179:	movg @30 // @std.kernel#Runtime
         [0xb4] 180:	movn #4
         [0xb5] 181:	movi #0, adx
         [0xb7] 183:	chklen adx
         [0xb8] 184:	iaload_2 ebx, adx
         [0xb9] 185:	calld ebx
         [0xba] 186:	nop
         [0xbb] 187:	nop
line: 90 [0xbc] 188:	loadl ebx, fp+3
         [0xbd] 189:	return_val ebx
         [0xbe] 190:	ret

func:@305 [std.kernel#Runtime.nativeExit] in file: lib/support//0.2.587//kernel//Runtime.sharp:94:33: note:  
		    public static def nativeExit() {
		                                ^


nativeExit:
line: 94 [0x0] 0:	int 0xa9
         [0x1] 1:	ret

func:@306 [std.kernel#Runtime.gc] in file: lib/support//0.2.587//kernel//Runtime.sharp:100:25: note:  
		    public static def gc() {
		                        ^


gc:
line: 100 [0x0] 0:	int 0xa1
          [0x1] 1:	ret

func:@307 [std.kernel#Runtime.memoryLimit] in file: lib/support//0.2.587//kernel//Runtime.sharp:106:34: note:  
		    public static def memoryLimit() : var {
		                                 ^


memoryLimit:
line: 106 [0x0] 0:	istorel 0, fp+0
line: 108 [0x2] 2:	int 0xaa
          [0x3] 3:	smovr_2 cmt, fp+0
line: 111 [0x4] 4:	loadl ebx, fp+0
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@308 [std.kernel#Runtime.managedMemory] in file: lib/support//0.2.587//kernel//Runtime.sharp:115:36: note:  
		    public static def managedMemory() : var {
		                                   ^


managedMemory:
line: 115 [0x0] 0:	istorel 0, fp+0
line: 117 [0x2] 2:	int 0xab
          [0x3] 3:	smovr_2 cmt, fp+0
line: 120 [0x4] 4:	loadl ebx, fp+0
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@309 [std.kernel#Runtime.freeMemory] in file: lib/support//0.2.587//kernel//Runtime.sharp:124:33: note:  
		    public static def freeMemory() : var {
		                                ^


freeMemory:
line: 124 [0x0] 0:	call @308 // <std.kernel#Runtime.managedMemory()>
          [0x1] 1:	call @307 // <std.kernel#Runtime.memoryLimit()>
          [0x2] 2:	loadval ebx
          [0x3] 3:	loadval ecx
          [0x4] 4:	sub ebx, ecx -> ebx
          [0x6] 6:	rstore ebx
          [0x7] 7:	loadval ebx
          [0x8] 8:	return_val ebx
          [0x9] 9:	ret

func:@310 [std.kernel#Runtime.copy] in file: lib/support//0.2.587//kernel//Runtime.sharp:128:27: note:  
		    public static def copy(object[] data, var len) : object[] {
		                          ^


copy:
line: 128 [0x0] 0:	pushl 0
          [0x1] 1:	ipushl #1
          [0x2] 2:	int 0xc0
          [0x3] 3:	popl 0
          [0x4] 4:	ret

func:@311 [std.kernel#Runtime.copy2] in file: lib/support//0.2.587//kernel//Runtime.sharp:137:28: note:  
		    public static def copy2(object[] data, var indexLen, var len) : object[] {
		                           ^


copy2:
line: 137 [0x0] 0:	pushl 0
          [0x1] 1:	ipushl #1
          [0x2] 2:	ipushl #2
          [0x3] 3:	int 0xc1
          [0x4] 4:	popl 0
          [0x5] 5:	ret

func:@312 [std.kernel#Runtime.copy3] in file: lib/support//0.2.587//kernel//Runtime.sharp:147:28: note:  
		    public static def copy3(object[] data, var startIndex, var stopIndex) : object[] {
		                           ^


copy3:
line: 147 [0x0] 0:	pushl 0
          [0x1] 1:	ipushl #1
          [0x2] 2:	ipushl #2
          [0x3] 3:	int 0xc3
          [0x4] 4:	popl 0
          [0x5] 5:	ret

func:@313 [std.kernel#Runtime.copy4] in file: lib/support//0.2.587//kernel//Runtime.sharp:157:28: note:  
		    public static def copy4(object[] data, var startIndex, var stopIndex) : object[] {
		                           ^


copy4:
line: 157 [0x0] 0:	pushl 0
          [0x1] 1:	ipushl #1
          [0x2] 2:	ipushl #2
          [0x3] 3:	int 0xc4
          [0x4] 4:	popl 0
          [0x5] 5:	ret

func:@314 [std.kernel#Runtime.realloc] in file: lib/support//0.2.587//kernel//Runtime.sharp:167:30: note:  
		    public static def realloc(object[] data, var size) {
		                             ^


realloc:
line: 167 [0x0] 0:	pushl 0
          [0x1] 1:	ipushl #1
          [0x2] 2:	int 0xc6
          [0x3] 3:	ret

func:@315 [std.kernel#Runtime.sizeOf] in file: lib/support//0.2.587//kernel//Runtime.sharp:175:29: note:  
		    public static def sizeOf(object data) : var {
		                            ^


sizeOf:
line: 175 [0x0] 0:	pushl 0
line: 198 [0x1] 1:	int 0xc2
          [0x2] 2:	return_val ebx
          [0x3] 3:	ret
          [0x4] 4:	pushl 1
          [0x5] 5:	int 0xc2
          [0x6] 6:	return_val ebx
          [0x7] 7:	ret

func:@316 [std.kernel#Runtime._snprintf] in file: lib/support//0.2.587//kernel//Runtime.sharp:184:32: note:  
		    public static def _snprintf(var fmt, var data, var precision) : var[] {
		                               ^


_snprintf:
line: 184 [0x0] 0:	movl 3
          [0x1] 1:	del
line: 185 [0x2] 2:	loadl egx, fp+0
          [0x3] 3:	loadl ebx, fp+1
          [0x4] 4:	loadl ecx, fp+2
          [0x5] 5:	int 0xc7
          [0x6] 6:	movl 3
          [0x7] 7:	popobj
line: 193 [0x8] 8:	movl 3
          [0x9] 9:	returnobj
          [0xa] 10:	ret

func:@317 [std.kernel#Runtime.sizeOf] in file: lib/support//0.2.587//kernel//Runtime.sharp:198:29: note:  
		    public static def sizeOf(object[] data) : var {
		                            ^


sizeOf:
        [0x0] 0:	movi #0, ebx
        [0x2] 2:	return_val ebx
        [0x3] 3:	ret

func:@318 [std.kernel#Runtime.sedateGc] in file: lib/support//0.2.587//kernel//Runtime.sharp:208:31: note:  
		    public static def sedateGc() {
		                              ^


sedateGc:
line: 208 [0x0] 0:	int 0xf1
          [0x1] 1:	ret

func:@319 [std.kernel#Runtime.selfCollect] in file: lib/support//0.2.587//kernel//Runtime.sharp:215:34: note:  
		    public static def selfCollect() : var {
		                                 ^


selfCollect:
line: 215 [0x0] 0:	int 0xf0
          [0x1] 1:	return_val cmt
          [0x2] 2:	ret

func:@320 [std.kernel#Runtime.wakeGc] in file: lib/support//0.2.587//kernel//Runtime.sharp:223:29: note:  
		    public static def wakeGc() {
		                            ^


wakeGc:
line: 223 [0x0] 0:	int 0xf2
          [0x1] 1:	ret

func:@321 [std.kernel#Runtime.killGc] in file: lib/support//0.2.587//kernel//Runtime.sharp:230:29: note:  
		    public static def killGc() {
		                            ^


killGc:
line: 230 [0x0] 0:	int 0xf3
          [0x1] 1:	ret

func:@322 [std.kernel#Runtime.isGcAwake] in file: lib/support//0.2.587//kernel//Runtime.sharp:237:32: note:  
		    public static def isGcAwake() : var {
		                               ^


isGcAwake:
line: 237 [0x0] 0:	int 0xf4
          [0x1] 1:	return_val cmt
          [0x2] 2:	ret

func:@323 [std.kernel#Runtime.Runtime] in file: lib/support//0.2.587//kernel//Runtime.sharp:14:13: note:  
		public class Runtime { // TODO: implement hashMap "https://www.geeksforgeeks.org/implementing-hash-table-open-addressing-linear-probing-cpp/"
		            ^


Runtime:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@324 [std.kernel.vm#ThreadCore.__thread_create] in file: lib/support//0.2.587//kernel//ThreadCore.sharp:12:38: note:  
		    public static def __thread_create(Thread thread) : var
		                                     ^


__thread_create:
line: 13 [0x0] 0:	movi #335, ebx
         [0x2] 2:	smovr_2 ebx, fp+1
line: 15 [0x3] 3:	loadl adx, fp+1
         [0x4] 4:	int 0xa8
         [0x5] 5:	return_val cmt
         [0x6] 6:	ret

func:@325 [std.kernel.vm#ThreadCore.__thread_start] in file: lib/support//0.2.587//kernel//ThreadCore.sharp:24:37: note:  
		    public static def __thread_start(Thread thread, object[] args) : var
		                                    ^


__thread_start:
line: 25 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	call @230 // <std.io#Thread.getId()>
         [0x3] 3:	loadval ebx
         [0x4] 4:	smovr_2 ebx, fp+2
line: 26 [0x5] 5:	movl 0
         [0x6] 6:	pushobj
         [0x7] 7:	call @231 // <std.io#Thread.getStackSize()>
         [0x8] 8:	loadval ebx
         [0x9] 9:	smovr_2 ebx, fp+3
line: 28 [0xa] 10:	loadl adx, fp+2
         [0xb] 11:	pushl 1
         [0xc] 12:	pushl 0
         [0xd] 13:	loadl ebx, fp+3
         [0xe] 14:	int 0xa4
         [0xf] 15:	return_val cmt
         [0x10] 16:	ret

func:@326 [std.kernel.vm#ThreadCore.__thread_join] in file: lib/support//0.2.587//kernel//ThreadCore.sharp:40:36: note:  
		    public static def __thread_join(Thread thread) : var
		                                   ^


__thread_join:
line: 41 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	call @230 // <std.io#Thread.getId()>
         [0x3] 3:	loadval ebx
         [0x4] 4:	smovr_2 ebx, fp+1
line: 43 [0x5] 5:	loadl adx, fp+1
         [0x6] 6:	int 0xa5
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@327 [std.kernel.vm#ThreadCore.__thread_set_thread] in file: lib/support//0.2.587//kernel//ThreadCore.sharp:52:42: note:  
		    public static def __thread_set_thread(Thread thread)
		                                         ^


__thread_set_thread:
line: 53 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	int 0xe2
         [0x3] 3:	ret

func:@328 [std.kernel.vm#ThreadCore.__thread_priority] in file: lib/support//0.2.587//kernel//ThreadCore.sharp:62:40: note:  
		    public static def __thread_priority(Thread thread, var priority) : var
		                                       ^


__thread_priority:
line: 63 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	call @230 // <std.io#Thread.getId()>
         [0x3] 3:	loadval ebx
         [0x4] 4:	smovr_2 ebx, fp+2
line: 65 [0x5] 5:	loadl adx, fp+2
         [0x6] 6:	loadl egx, fp+1
         [0x7] 7:	int 0xe2
         [0x8] 8:	return_val cmt
         [0x9] 9:	ret

func:@329 [std.kernel.vm#ThreadCore.__thread_yield] in file: lib/support//0.2.587//kernel//ThreadCore.sharp:75:37: note:  
		    public static def __thread_yield()
		                                    ^


__thread_yield:
line: 76 [0x0] 0:	int 0xe5
         [0x1] 1:	ret

func:@330 [std.kernel.vm#ThreadCore.__thread_interrupt] in file: lib/support//0.2.587//kernel//ThreadCore.sharp:83:41: note:  
		    public static def __thread_interrupt(Thread thread) : var
		                                        ^


__thread_interrupt:
line: 84 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	call @230 // <std.io#Thread.getId()>
         [0x3] 3:	loadval ebx
         [0x4] 4:	smovr_2 ebx, fp+1
         [0x5] 5:	istorel 0, fp+2
line: 86 [0x7] 7:	loadl adx, fp+1
         [0x8] 8:	int 0xa6
         [0x9] 9:	smovr_2 cmt, fp+2
line: 92 [0xa] 10:	loadl ebx, fp+2
         [0xb] 11:	rstore ebx
         [0xc] 12:	movi #0, ebx
         [0xe] 14:	movr egx, ebx
         [0xf] 15:	loadval ebx
         [0x10] 16:	test ebx, egx
         [0x11] 17:	movr ebx, cmt
         [0x12] 18:	movi #34, adx
         [0x14] 20:	ifne
line: 93 [0x15] 21:	movl 0
         [0x16] 22:	pushobj
         [0x17] 23:	movi #0, ebx
         [0x19] 25:	rstore ebx
         [0x1a] 26:	call @236 // <std.io#Thread.setStarted(var)>
line: 94 [0x1b] 27:	movl 0
         [0x1c] 28:	pushobj
         [0x1d] 29:	movi #1, ebx
         [0x1f] 31:	rstore ebx
         [0x20] 32:	call @233 // <std.io#Thread.setExited(var)>
         [0x21] 33:	nop
         [0x22] 34:	nop
line: 97 [0x23] 35:	loadl ebx, fp+2
         [0x24] 36:	return_val ebx
         [0x25] 37:	ret

func:@331 [std.kernel.vm#ThreadCore.__thread_destroy] in file: lib/support//0.2.587//kernel//ThreadCore.sharp:101:39: note:  
		    public static def __thread_destroy(Thread thread) : var
		                                      ^


__thread_destroy:
line: 102 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	call @230 // <std.io#Thread.getId()>
          [0x3] 3:	loadval ebx
          [0x4] 4:	smovr_2 ebx, fp+1
          [0x5] 5:	istorel 0, fp+2
line: 104 [0x7] 7:	loadl adx, fp+1
          [0x8] 8:	int 0xa7
          [0x9] 9:	smovr_2 cmt, fp+2
line: 110 [0xa] 10:	loadl ebx, fp+2
          [0xb] 11:	rstore ebx
          [0xc] 12:	movi #0, ebx
          [0xe] 14:	movr egx, ebx
          [0xf] 15:	loadval ebx
          [0x10] 16:	test ebx, egx
          [0x11] 17:	movr ebx, cmt
          [0x12] 18:	movi #34, adx
          [0x14] 20:	ifne
line: 111 [0x15] 21:	movl 0
          [0x16] 22:	pushobj
          [0x17] 23:	movi #1, ebx
          [0x19] 25:	rstore ebx
          [0x1a] 26:	call @238 // <std.io#Thread.setTerminated(var)>
line: 112 [0x1b] 27:	movl 0
          [0x1c] 28:	pushobj
          [0x1d] 29:	movi #1, ebx
          [0x1f] 31:	rstore ebx
          [0x20] 32:	call @233 // <std.io#Thread.setExited(var)>
          [0x21] 33:	nop
          [0x22] 34:	nop
line: 115 [0x23] 35:	loadl ebx, fp+2
          [0x24] 36:	return_val ebx
          [0x25] 37:	ret

func:@332 [std.kernel.vm#ThreadCore.__thread_current] in file: lib/support//0.2.587//kernel//ThreadCore.sharp:119:39: note:  
		    public static def __thread_current() : Thread
		                                      ^


__thread_current:
line: 120 [0x0] 0:	movl 0
          [0x1] 1:	del
line: 122 [0x2] 2:	int 0xe0
          [0x3] 3:	movl 0
          [0x4] 4:	popobj
line: 128 [0x5] 5:	movl 0
          [0x6] 6:	movi #22, cmt
          [0x8] 8:	cast cmt
          [0x9] 9:	returnobj
          [0xa] 10:	ret

func:@333 [std.kernel.vm#ThreadCore.__thread_args] in file: lib/support//0.2.587//kernel//ThreadCore.sharp:132:37: note:  
		    private static def __thread_args() : object[]
		                                    ^


__thread_args:
line: 133 [0x0] 0:	movl 0
          [0x1] 1:	del
line: 135 [0x2] 2:	int 0xe1
          [0x3] 3:	movl 0
          [0x4] 4:	popobj
line: 141 [0x5] 5:	movl 0
          [0x6] 6:	returnobj
          [0x7] 7:	ret

func:@334 [std.kernel.vm#ThreadCore.__thread_exit] in file: lib/support//0.2.587//kernel//ThreadCore.sharp:145:36: note:  
		    public static def __thread_exit(Thread thread, var code)
		                                   ^


__thread_exit:
line: 146 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	movi #0, ebx
          [0x4] 4:	rstore ebx
          [0x5] 5:	call @236 // <std.io#Thread.setStarted(var)>
line: 147 [0x6] 6:	movl 0
          [0x7] 7:	pushobj
          [0x8] 8:	movi #1, ebx
          [0xa] 10:	rstore ebx
          [0xb] 11:	call @233 // <std.io#Thread.setExited(var)>
line: 148 [0xc] 12:	loadl ebx, fp+1
          [0xd] 13:	nop
          [0xe] 14:	rstore ebx
          [0xf] 15:	movl 0
          [0x10] 16:	movn #4
          [0x11] 17:	movi #0, adx
          [0x13] 19:	loadval ecx
          [0x14] 20:	rmov adx, ecx
line: 150 [0x15] 21:	hlt
          [0x16] 22:	ret

func:@335 [std.kernel.vm#ThreadCore.__thread_init_run] in file: lib/support//0.2.587//kernel//ThreadCore.sharp:160:41: note:  
		    private static def __thread_init_run()
		                                        ^


__thread_init_run:
line: 161 [0x0] 0:	call @332 // <std.kernel.vm#ThreadCore.__thread_current()>
          [0x1] 1:	movl 0
          [0x2] 2:	popobj
line: 162 [0x3] 3:	movl 0
          [0x4] 4:	pushobj
          [0x5] 5:	movi #1, ebx
          [0x7] 7:	rstore ebx
          [0x8] 8:	call @236 // <std.io#Thread.setStarted(var)>
line: 163 [0x9] 9:	movl 0
          [0xa] 10:	pushobj
          [0xb] 11:	movi #0, ebx
          [0xd] 13:	rstore ebx
          [0xe] 14:	call @233 // <std.io#Thread.setExited(var)>
line: 165 [0xf] 15:	call @303 // <std.kernel#Runtime.initializeTLS()>
line: 166 [0x10] 16:	call @333 // <std.kernel.vm#ThreadCore.__thread_args()>
          [0x11] 17:	movl 0
          [0x12] 18:	movn #13
          [0x13] 19:	movi #0, adx
          [0x15] 21:	chklen adx
          [0x16] 22:	iaload_2 ebx, adx
          [0x17] 23:	calld ebx
          [0x18] 24:	nop
          [0x19] 25:	movl 0
          [0x1a] 26:	movn #4
          [0x1b] 27:	movi #0, adx
          [0x1d] 29:	loadval ecx
          [0x1e] 30:	rmov adx, ecx
line: 167 [0x1f] 31:	movl 0
          [0x20] 32:	pushobj
          [0x21] 33:	movi #0, ebx
          [0x23] 35:	rstore ebx
          [0x24] 36:	call @236 // <std.io#Thread.setStarted(var)>
line: 168 [0x25] 37:	movl 0
          [0x26] 38:	pushobj
          [0x27] 39:	movi #1, ebx
          [0x29] 41:	rstore ebx
          [0x2a] 42:	call @233 // <std.io#Thread.setExited(var)>
          [0x2b] 43:	ret

func:@336 [std.kernel.vm#ThreadCore.ThreadCore] in file: lib/support//0.2.587//kernel//ThreadCore.sharp:10:13: note:  
		public class ThreadCore
		            ^


ThreadCore:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@337 [std.kernel#Time.nativeTime] in file: lib/support//0.2.587//kernel//Time.sharp:12:34: note:  
		    private static def nativeTime() : var {
		                                 ^


nativeTime:
line: 12 [0x0] 0:	istorel 0, fp+0
line: 15 [0x2] 2:	int 0xa3
         [0x3] 3:	smovr_2 bmr, fp+0
line: 19 [0x4] 4:	loadl ebx, fp+0
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@338 [std.kernel#Time.nanoTime] in file: lib/support//0.2.587//kernel//Time.sharp:23:31: note:  
		    public static def nanoTime() : var {
		                              ^


nanoTime:
line: 23 [0x0] 0:	call @337 // <std.kernel#Time.nativeTime()>
         [0x1] 1:	loadval ebx
         [0x2] 2:	return_val ebx
         [0x3] 3:	ret

func:@339 [std.kernel#Time.timeToMicro] in file: lib/support//0.2.587//kernel//Time.sharp:27:34: note:  
		    public static def timeToMicro(var nano) : var {
		                                 ^


timeToMicro:
line: 27 [0x0] 0:	movi #1000, ebx
         [0x2] 2:	rstore ebx
         [0x3] 3:	loadl ebx, fp+0
         [0x4] 4:	loadval egx
         [0x5] 5:	div ebx, egx -> ebx
         [0x7] 7:	rstore ebx
         [0x8] 8:	loadval ebx
         [0x9] 9:	return_val ebx
         [0xa] 10:	ret

func:@340 [std.kernel#Time.timeToMills] in file: lib/support//0.2.587//kernel//Time.sharp:31:34: note:  
		    public static def timeToMills(var nano) : var {
		                                 ^


timeToMills:
line: 31 [0x0] 0:	movi #1000, ebx
         [0x2] 2:	rstore ebx
         [0x3] 3:	loadl ebx, fp+0
         [0x4] 4:	rstore ebx
         [0x5] 5:	call @339 // <std.kernel#Time.timeToMicro(var)>
         [0x6] 6:	loadval ebx
         [0x7] 7:	loadval ecx
         [0x8] 8:	div ebx, ecx -> ebx
         [0xa] 10:	rstore ebx
         [0xb] 11:	loadval ebx
         [0xc] 12:	return_val ebx
         [0xd] 13:	ret

func:@341 [std.kernel#Time.timeToSecs] in file: lib/support//0.2.587//kernel//Time.sharp:35:33: note:  
		    public static def timeToSecs(var nano) : var {
		                                ^


timeToSecs:
line: 35 [0x0] 0:	movi #1000, ebx
         [0x2] 2:	rstore ebx
         [0x3] 3:	loadl ebx, fp+0
         [0x4] 4:	rstore ebx
         [0x5] 5:	call @340 // <std.kernel#Time.timeToMills(var)>
         [0x6] 6:	loadval ebx
         [0x7] 7:	loadval ecx
         [0x8] 8:	div ebx, ecx -> ebx
         [0xa] 10:	rstore ebx
         [0xb] 11:	loadval ebx
         [0xc] 12:	return_val ebx
         [0xd] 13:	ret

func:@342 [std.kernel#Time.millsTime] in file: lib/support//0.2.587//kernel//Time.sharp:39:32: note:  
		    public static def millsTime() : var {
		                               ^


millsTime:
line: 39 [0x0] 0:	call @337 // <std.kernel#Time.nativeTime()>
         [0x1] 1:	call @340 // <std.kernel#Time.timeToMills(var)>
         [0x2] 2:	loadval ebx
         [0x3] 3:	return_val ebx
         [0x4] 4:	ret

func:@343 [std.kernel#Time.sleep] in file: lib/support//0.2.587//kernel//Time.sharp:44:28: note:  
		    public static def sleep(TimeUnit timeUnit, var time) {
		                           ^


sleep:
line: 44 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	loadl ebx, fp+1
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @344 // <std.kernel#Time.sleep(var,var)>
         [0x9] 9:	ret

func:@344 [std.kernel#Time.sleep] in file: lib/support//0.2.587//kernel//Time.sharp:48:28: note:  
		    public static def sleep(var timeUnit, var time) {
		                           ^


sleep:
line: 49 [0x0] 0:	movg @63 // @std.kernel#TimeUnit
         [0x1] 1:	movn #3
         [0x2] 2:	pushobj
         [0x3] 3:	loadl ebx, fp+0
         [0x4] 4:	rstore ebx
         [0x5] 5:	call @75 // <std#Enum.$operator==(var)>
         [0x6] 6:	loadval cmt
         [0x7] 7:	movi #22, adx
         [0x9] 9:	ifne
line: 50 [0xa] 10:	movi #1000000, ebx
         [0xc] 12:	rstore ebx
         [0xd] 13:	loadl ebx, fp+1
         [0xe] 14:	loadval egx
         [0xf] 15:	mul ebx, egx -> ebx
         [0x11] 17:	rstore ebx
         [0x12] 18:	call @345 // <std.kernel#Time.adjustTime(var)>
         [0x13] 19:	loadval ebx
         [0x14] 20:	smovr_2 ebx, fp+1
         [0x15] 21:	goto @61
         [0x16] 22:	movg @63 // @std.kernel#TimeUnit
         [0x17] 23:	movn #4
         [0x18] 24:	pushobj
         [0x19] 25:	loadl ebx, fp+0
         [0x1a] 26:	rstore ebx
         [0x1b] 27:	call @75 // <std#Enum.$operator==(var)>
         [0x1c] 28:	loadval cmt
         [0x1d] 29:	movi #44, adx
         [0x1f] 31:	ifne
line: 52 [0x20] 32:	movi #1000, ebx
         [0x22] 34:	rstore ebx
         [0x23] 35:	loadl ebx, fp+1
         [0x24] 36:	loadval egx
         [0x25] 37:	mul ebx, egx -> ebx
         [0x27] 39:	rstore ebx
         [0x28] 40:	call @345 // <std.kernel#Time.adjustTime(var)>
         [0x29] 41:	loadval ebx
         [0x2a] 42:	smovr_2 ebx, fp+1
         [0x2b] 43:	goto @61
         [0x2c] 44:	movg @63 // @std.kernel#TimeUnit
         [0x2d] 45:	movn #5
         [0x2e] 46:	pushobj
         [0x2f] 47:	loadl ebx, fp+0
         [0x30] 48:	rstore ebx
         [0x31] 49:	call @75 // <std#Enum.$operator==(var)>
         [0x32] 50:	loadval cmt
         [0x33] 51:	movi #60, adx
         [0x35] 53:	ifne
line: 54 [0x36] 54:	loadl ebx, fp+1
         [0x37] 55:	rstore ebx
         [0x38] 56:	call @345 // <std.kernel#Time.adjustTime(var)>
         [0x39] 57:	loadval ebx
         [0x3a] 58:	smovr_2 ebx, fp+1
         [0x3b] 59:	goto @61
         [0x3c] 60:	nop
         [0x3d] 61:	nop
line: 58 [0x3e] 62:	loadl ebx, fp+1
         [0x3f] 63:	int 0xac
         [0x40] 64:	ret

func:@345 [std.kernel#Time.adjustTime] in file: lib/support//0.2.587//kernel//Time.sharp:70:34: note:  
		    private static def adjustTime(var usec) : var {
		                                 ^


adjustTime:
line: 71 [0x0] 0:	call @299 // <std.kernel#Manifest.isWindows()>
         [0x1] 1:	loadval cmt
         [0x2] 2:	movi #17, adx
         [0x4] 4:	ifne
line: 72 [0x5] 5:	movi #1000, ebx
         [0x7] 7:	rstore ebx
         [0x8] 8:	loadl ebx, fp+0
         [0x9] 9:	loadval egx
         [0xa] 10:	div ebx, egx -> ebx
         [0xc] 12:	rstore ebx
         [0xd] 13:	loadval ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret
         [0x10] 16:	nop
         [0x11] 17:	nop
line: 75 [0x12] 18:	loadl ebx, fp+0
         [0x13] 19:	return_val ebx
         [0x14] 20:	ret

func:@346 [std.kernel#Time.Time] in file: lib/support//0.2.587//kernel//Time.sharp:10:13: note:  
		public class Time {
		            ^


Time:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@347 [std#long.long] in file: lib/support//0.2.587//long.sharp:6:16: note:  
		    public long(var num) {
		               ^


long:
line: 6 [0x0] 0:	loadl ebx, fp+1
        [0x1] 1:	mov64 ebx, ebx
        [0x2] 2:	nop
        [0x3] 3:	rstore ebx
        [0x4] 4:	movl 0
        [0x5] 5:	movn #2
        [0x6] 6:	movi #0, adx
        [0x8] 8:	loadval ecx
        [0x9] 9:	rmov adx, ecx
        [0xa] 10:	movl 0
        [0xb] 11:	returnobj
        [0xc] 12:	ret

func:@348 [std#long.long] in file: lib/support//0.2.587//long.sharp:10:16: note:  
		    public long(integer num) {
		               ^


long:
line: 10 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	mov64 ebx, ebx
         [0x9] 9:	rstore ebx
         [0xa] 10:	call @125 // <std#integer.integer(var)>
         [0xb] 11:	pop
         [0xc] 12:	movl 0
         [0xd] 13:	returnobj
         [0xe] 14:	ret

func:@349 [std#long.$operator+] in file: lib/support//0.2.587//long.sharp:14:24: note:  
		    public def operator+(var num) : var {
		                       ^


$operator+:
line: 14 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	add ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	mov64 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@350 [std#long.$operator+] in file: lib/support//0.2.587//long.sharp:18:24: note:  
		    public def operator+(integer num) : long {
		                       ^


$operator+:
line: 18 [0x0] 0:	new_class @33 // std#long
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @349 // <std#long.$operator+(var)>
         [0xa] 10:	call @347 // <std#long.long(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@351 [std#long.$operator-] in file: lib/support//0.2.587//long.sharp:22:24: note:  
		    public def operator-(var num) : var {
		                       ^


$operator-:
line: 22 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	sub ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	mov64 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@352 [std#long.$operator-] in file: lib/support//0.2.587//long.sharp:26:24: note:  
		    public def operator-(integer num) : long {
		                       ^


$operator-:
line: 26 [0x0] 0:	new_class @33 // std#long
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @351 // <std#long.$operator-(var)>
         [0xa] 10:	call @347 // <std#long.long(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@353 [std#long.$operator*] in file: lib/support//0.2.587//long.sharp:30:24: note:  
		    public def operator*(var num) : var {
		                       ^


$operator*:
line: 30 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	mul ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	mov64 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@354 [std#long.$operator*] in file: lib/support//0.2.587//long.sharp:34:24: note:  
		    public def operator*(integer num) : long {
		                       ^


$operator*:
line: 34 [0x0] 0:	new_class @33 // std#long
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @353 // <std#long.$operator*(var)>
         [0xa] 10:	call @347 // <std#long.long(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@355 [std#long.$operator/] in file: lib/support//0.2.587//long.sharp:38:24: note:  
		    public def operator/(var num) : var {
		                       ^


$operator/:
line: 38 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	div ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	mov64 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@356 [std#long.$operator!=] in file: lib/support//0.2.587//long.sharp:42:24: note:  
		    public def operator!=(var num) : var {
		                       ^


$operator!=:
line: 42 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	loadl ebx, fp+1
         [0x7] 7:	movr egx, ebx
         [0x8] 8:	loadval ebx
         [0x9] 9:	tne ebx, egx
         [0xa] 10:	movr ebx, cmt
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@357 [std#long.$operator!=] in file: lib/support//0.2.587//long.sharp:46:24: note:  
		    public def operator!=(integer num) : var {
		                       ^


$operator!=:
line: 46 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 egx, adx
         [0xc] 12:	loadval ebx
         [0xd] 13:	tne ebx, egx
         [0xe] 14:	movr ebx, cmt
         [0xf] 15:	return_val cmt
         [0x10] 16:	ret

func:@358 [std#long.$operator/] in file: lib/support//0.2.587//long.sharp:50:24: note:  
		    public def operator/(integer num) : long {
		                       ^


$operator/:
line: 50 [0x0] 0:	new_class @33 // std#long
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @355 // <std#long.$operator/(var)>
         [0xa] 10:	call @347 // <std#long.long(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@359 [std#long.$operator=] in file: lib/support//0.2.587//long.sharp:54:24: note:  
		    public def operator=(var num) : var {
		                       ^


$operator=:
line: 54 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	mov64 ebx, ebx
         [0x2] 2:	nop
         [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #2
         [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@360 [std#long.$operator=] in file: lib/support//0.2.587//long.sharp:58:24: note:  
		    public def operator=(integer num) : long {
		                       ^


$operator=:
line: 58 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @359 // <std#long.$operator=(var)>
         [0x9] 9:	pop
line: 59 [0xa] 10:	movl 0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@361 [std#long.$operator=] in file: lib/support//0.2.587//long.sharp:63:24: note:  
		    public def operator=(Enum num) : long {
		                       ^


$operator=:
line: 63 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	pushobj
         [0x4] 4:	call @78 // <std#Enum.getValue()>
         [0x5] 5:	call @359 // <std#long.$operator=(var)>
         [0x6] 6:	pop
line: 64 [0x7] 7:	movl 0
         [0x8] 8:	returnobj
         [0x9] 9:	ret

func:@362 [std#long.$operator==] in file: lib/support//0.2.587//long.sharp:68:24: note:  
		    public def operator==(var num) : var {
		                       ^


$operator==:
line: 68 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	loadl ebx, fp+1
         [0x7] 7:	movr egx, ebx
         [0x8] 8:	loadval ebx
         [0x9] 9:	test ebx, egx
         [0xa] 10:	movr ebx, cmt
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@363 [std#long.$operator+=] in file: lib/support//0.2.587//long.sharp:72:24: note:  
		    public def operator+=(var num) : var {
		                       ^


$operator+=:
line: 72 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	add ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	mov64 ebx, ebx
         [0xe] 14:	nop
         [0xf] 15:	rstore ebx
         [0x10] 16:	movl 0
         [0x11] 17:	movn #2
         [0x12] 18:	movi #0, adx
         [0x14] 20:	loadval ecx
         [0x15] 21:	rmov adx, ecx
line: 73 [0x16] 22:	movl 0
         [0x17] 23:	movn #2
         [0x18] 24:	movi #0, adx
         [0x1a] 26:	iaload_2 ebx, adx
         [0x1b] 27:	return_val ebx
         [0x1c] 28:	ret

func:@364 [std#long.$operator==] in file: lib/support//0.2.587//long.sharp:77:24: note:  
		    public def operator==(integer num) : var {
		                       ^


$operator==:
line: 77 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 egx, adx
         [0xc] 12:	loadval ebx
         [0xd] 13:	test ebx, egx
         [0xe] 14:	movr ebx, cmt
         [0xf] 15:	return_val cmt
         [0x10] 16:	ret

func:@365 [std#long.$operator<] in file: lib/support//0.2.587//long.sharp:81:24: note:  
		    public def operator<(var num) : var {
		                       ^


$operator<:
line: 81 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr egx, ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lt ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@366 [std#long.$operator<] in file: lib/support//0.2.587//long.sharp:85:24: note:  
		    public def operator<(integer num) : var {
		                       ^


$operator<:
line: 85 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	chklen adx
         [0x5] 5:	iaload_2 egx, adx
         [0x6] 6:	movl 0
         [0x7] 7:	movn #2
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 ebx, adx
         [0xc] 12:	lt ebx, egx
         [0xd] 13:	movr ebx, cmt
         [0xe] 14:	return_val cmt
         [0xf] 15:	ret

func:@367 [std#long.$operator>] in file: lib/support//0.2.587//long.sharp:89:24: note:  
		    public def operator>(var num) : var {
		                       ^


$operator>:
line: 89 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr egx, ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	gt ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@368 [std#long.$operator>] in file: lib/support//0.2.587//long.sharp:93:24: note:  
		    public def operator>(integer num) : var {
		                       ^


$operator>:
line: 93 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	chklen adx
         [0x5] 5:	iaload_2 egx, adx
         [0x6] 6:	movl 0
         [0x7] 7:	movn #2
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 ebx, adx
         [0xc] 12:	gt ebx, egx
         [0xd] 13:	movr ebx, cmt
         [0xe] 14:	return_val cmt
         [0xf] 15:	ret

func:@369 [std#long.$operator<=] in file: lib/support//0.2.587//long.sharp:97:24: note:  
		    public def operator<=(var num) : var {
		                       ^


$operator<=:
line: 97 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr egx, ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lte ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@370 [std#long.$operator<=] in file: lib/support//0.2.587//long.sharp:101:24: note:  
		    public def operator<=(integer num) : var {
		                       ^


$operator<=:
line: 101 [0x0] 0:	movl 1
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	movl 0
          [0x7] 7:	movn #2
          [0x8] 8:	movi #0, adx
          [0xa] 10:	chklen adx
          [0xb] 11:	iaload_2 ebx, adx
          [0xc] 12:	lte ebx, egx
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	return_val cmt
          [0xf] 15:	ret

func:@371 [std#long.$operator>=] in file: lib/support//0.2.587//long.sharp:105:24: note:  
		    public def operator>=(var num) : var {
		                       ^


$operator>=:
line: 105 [0x0] 0:	loadl ebx, fp+1
          [0x1] 1:	movr egx, ebx
          [0x2] 2:	movl 0
          [0x3] 3:	movn #2
          [0x4] 4:	movi #0, adx
          [0x6] 6:	chklen adx
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	gte ebx, egx
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	return_val cmt
          [0xb] 11:	ret

func:@372 [std#long.$operator>=] in file: lib/support//0.2.587//long.sharp:109:24: note:  
		    public def operator>=(integer num) : var {
		                       ^


$operator>=:
line: 109 [0x0] 0:	movl 1
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	movl 0
          [0x7] 7:	movn #2
          [0x8] 8:	movi #0, adx
          [0xa] 10:	chklen adx
          [0xb] 11:	iaload_2 ebx, adx
          [0xc] 12:	gte ebx, egx
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	return_val cmt
          [0xf] 15:	ret

func:@373 [std#long.$operator++] in file: lib/support//0.2.587//long.sharp:113:24: note:  
		    public def operator++(var num) : var { // post inc i++
		                       ^


$operator++:
line: 113 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	smovr_2 ebx, fp+2
line: 114 [0x7] 7:	movi #1, ebx
          [0x9] 9:	rstore ebx
          [0xa] 10:	movl 0
          [0xb] 11:	movn #2
          [0xc] 12:	movi #0, adx
          [0xe] 14:	chklen adx
          [0xf] 15:	iaload_2 ebx, adx
          [0x10] 16:	loadval egx
          [0x11] 17:	add ebx, egx -> ebx
          [0x13] 19:	rstore ebx
          [0x14] 20:	loadval ebx
          [0x15] 21:	mov64 ebx, ebx
          [0x16] 22:	nop
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 0
          [0x19] 25:	movn #2
          [0x1a] 26:	movi #0, adx
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	rmov adx, ecx
line: 115 [0x1e] 30:	loadl ebx, fp+2
          [0x1f] 31:	return_val ebx
          [0x20] 32:	ret

func:@374 [std#long.$operator++] in file: lib/support//0.2.587//long.sharp:119:24: note:  
		    public def operator++() : var { // pre inc ++i
		                       ^


$operator++:
line: 119 [0x0] 0:	movi #1, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #2
          [0x5] 5:	movi #0, adx
          [0x7] 7:	chklen adx
          [0x8] 8:	iaload_2 ebx, adx
          [0x9] 9:	loadval egx
          [0xa] 10:	add ebx, egx -> ebx
          [0xc] 12:	rstore ebx
          [0xd] 13:	loadval ebx
          [0xe] 14:	mov64 ebx, ebx
          [0xf] 15:	nop
          [0x10] 16:	rstore ebx
          [0x11] 17:	movl 0
          [0x12] 18:	movn #2
          [0x13] 19:	movi #0, adx
          [0x15] 21:	loadval ecx
          [0x16] 22:	rmov adx, ecx
          [0x17] 23:	return_val ebx
          [0x18] 24:	ret

func:@375 [std#long.$operator--] in file: lib/support//0.2.587//long.sharp:123:24: note:  
		    public def operator--(var num) : var {
		                       ^


$operator--:
line: 123 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	smovr_2 ebx, fp+2
line: 124 [0x7] 7:	movi #1, ebx
          [0x9] 9:	rstore ebx
          [0xa] 10:	movl 0
          [0xb] 11:	movn #2
          [0xc] 12:	movi #0, adx
          [0xe] 14:	chklen adx
          [0xf] 15:	iaload_2 ebx, adx
          [0x10] 16:	loadval egx
          [0x11] 17:	sub ebx, egx -> ebx
          [0x13] 19:	rstore ebx
          [0x14] 20:	loadval ebx
          [0x15] 21:	mov64 ebx, ebx
          [0x16] 22:	nop
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 0
          [0x19] 25:	movn #2
          [0x1a] 26:	movi #0, adx
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	rmov adx, ecx
line: 125 [0x1e] 30:	loadl ebx, fp+2
          [0x1f] 31:	return_val ebx
          [0x20] 32:	ret

func:@376 [std#long.$operator--] in file: lib/support//0.2.587//long.sharp:129:24: note:  
		    public def operator--() : var {
		                       ^


$operator--:
line: 129 [0x0] 0:	movi #1, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #2
          [0x5] 5:	movi #0, adx
          [0x7] 7:	chklen adx
          [0x8] 8:	iaload_2 ebx, adx
          [0x9] 9:	loadval egx
          [0xa] 10:	sub ebx, egx -> ebx
          [0xc] 12:	rstore ebx
          [0xd] 13:	loadval ebx
          [0xe] 14:	mov64 ebx, ebx
          [0xf] 15:	nop
          [0x10] 16:	rstore ebx
          [0x11] 17:	movl 0
          [0x12] 18:	movn #2
          [0x13] 19:	movi #0, adx
          [0x15] 21:	loadval ecx
          [0x16] 22:	rmov adx, ecx
          [0x17] 23:	return_val ebx
          [0x18] 24:	ret

func:@377 [std#long.value] in file: lib/support//0.2.587//long.sharp:133:21: note:  
		    public def value() : var {
		                    ^


value:
line: 133 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@378 [std#long.toString] in file: lib/support//0.2.587//long.sharp:137:24: note:  
		    public def delegate::toString() : string {
		                       ^


toString:
line: 137 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	newstr @226 // ""
          [0x2] 2:	call @558 // <std#string.string(var[])>
          [0x3] 3:	movl 0
          [0x4] 4:	movn #2
          [0x5] 5:	movi #0, adx
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	rstore ebx
          [0x9] 9:	call @579 // <std#string.$operator+(var)>
          [0xa] 10:	movsl #0
          [0xb] 11:	returnobj
          [0xc] 12:	ret

func:@379 [std#long.long] in file: lib/support//0.2.587//long.sharp:3:13: note:  
		public class long base integer {
		            ^


long:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@380 [std#Math.Math] in file: lib/support//0.2.587//Math.sharp:11:16: note:  
		    public Math() { }
		               ^


Math:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@381 [std#Math.sin] in file: lib/support//0.2.587//Math.sharp:37:26: note:  
		    public static def sin(var n) : var { return CMath.sin(n); }
		                         ^


sin:
line: 36 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	call @264 // <std.kernel#CMath.sin(var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@382 [std#Math.cos] in file: lib/support//0.2.587//Math.sharp:39:26: note:  
		    public static def cos(var n) : var { return CMath.cos(n); }
		                         ^


cos:
line: 38 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	call @265 // <std.kernel#CMath.cos(var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@383 [std#Math.tan] in file: lib/support//0.2.587//Math.sharp:41:26: note:  
		    public static def tan(var n) : var { return CMath.tan(n); }
		                         ^


tan:
line: 40 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	call @266 // <std.kernel#CMath.tan(var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@384 [std#Math.sinh] in file: lib/support//0.2.587//Math.sharp:43:27: note:  
		    public static def sinh(var n) : var { return CMath.sinh(n); }
		                          ^


sinh:
line: 42 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	call @267 // <std.kernel#CMath.sinh(var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@385 [std#Math.cosh] in file: lib/support//0.2.587//Math.sharp:45:27: note:  
		    public static def cosh(var n) : var { return CMath.cosh(n); }
		                          ^


cosh:
line: 44 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	call @268 // <std.kernel#CMath.cosh(var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@386 [std#Math.tanh] in file: lib/support//0.2.587//Math.sharp:47:27: note:  
		    public static def tanh(var n) : var { return CMath.tanh(n); }
		                          ^


tanh:
line: 46 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	call @269 // <std.kernel#CMath.tanh(var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@387 [std#Math.asin] in file: lib/support//0.2.587//Math.sharp:49:27: note:  
		    public static def asin(var n) : var { return CMath.asin(n); }
		                          ^


asin:
line: 48 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	call @270 // <std.kernel#CMath.asin(var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@388 [std#Math.acos] in file: lib/support//0.2.587//Math.sharp:51:27: note:  
		    public static def acos(var n) : var { return CMath.acos(n); }
		                          ^


acos:
line: 50 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	call @271 // <std.kernel#CMath.acos(var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@389 [std#Math.atan] in file: lib/support//0.2.587//Math.sharp:53:27: note:  
		    public static def atan(var n) : var { return CMath.atan(n); }
		                          ^


atan:
line: 52 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	call @272 // <std.kernel#CMath.atan(var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@390 [std#Math.atan2] in file: lib/support//0.2.587//Math.sharp:55:28: note:  
		    public static def atan2(var n, var n2) : var { return CMath.atan2(n, n2); }
		                           ^


atan2:
line: 54 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	loadl ebx, fp+1
         [0x3] 3:	rstore ebx
         [0x4] 4:	call @273 // <std.kernel#CMath.atan2(var,var)>
         [0x5] 5:	loadval ebx
         [0x6] 6:	return_val ebx
         [0x7] 7:	ret

func:@391 [std#Math.exp] in file: lib/support//0.2.587//Math.sharp:57:26: note:  
		    public static def exp(var n) : var { return CMath.exp(n); }
		                         ^


exp:
line: 56 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	call @274 // <std.kernel#CMath.exp(var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@392 [std#Math.log] in file: lib/support//0.2.587//Math.sharp:59:26: note:  
		    public static def log(var n) : var { return CMath.log(n); }
		                         ^


log:
line: 58 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	call @275 // <std.kernel#CMath.log(var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@393 [std#Math.log10] in file: lib/support//0.2.587//Math.sharp:61:28: note:  
		    public static def log10(var n) : var { return CMath.log10(n); }
		                           ^


log10:
line: 60 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	call @276 // <std.kernel#CMath.log10(var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@394 [std#Math.pow] in file: lib/support//0.2.587//Math.sharp:63:26: note:  
		    public static def pow(var n, var exp) : var { return CMath.pow(n, exp); }
		                         ^


pow:
line: 62 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	loadl ebx, fp+1
         [0x3] 3:	rstore ebx
         [0x4] 4:	call @277 // <std.kernel#CMath.pow(var,var)>
         [0x5] 5:	loadval ebx
         [0x6] 6:	return_val ebx
         [0x7] 7:	ret

func:@395 [std#Math.sqrt] in file: lib/support//0.2.587//Math.sharp:65:27: note:  
		    public static def sqrt(var n) : var { return CMath.sqrt(n); }
		                          ^


sqrt:
line: 64 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	call @278 // <std.kernel#CMath.sqrt(var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@396 [std#Math.ceil] in file: lib/support//0.2.587//Math.sharp:67:27: note:  
		    public static def ceil(var n) : var { return CMath.ceil(n); }
		                          ^


ceil:
line: 66 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	call @279 // <std.kernel#CMath.ceil(var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@397 [std#Math.floor] in file: lib/support//0.2.587//Math.sharp:69:28: note:  
		    public static def floor(var n) : var { return CMath.floor(n); }
		                           ^


floor:
line: 68 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	call @280 // <std.kernel#CMath.floor(var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@398 [std#Math.abs] in file: lib/support//0.2.587//Math.sharp:71:26: note:  
		    public static def abs(var n) : var { return fabs(n); }
		                         ^


abs:
line: 70 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	call @399 // <std#Math.fabs(var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@399 [std#Math.fabs] in file: lib/support//0.2.587//Math.sharp:73:27: note:  
		    public static def fabs(var n) : var { return CMath.fabs(n); }
		                          ^


fabs:
line: 72 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	call @281 // <std.kernel#CMath.fabs(var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@400 [std#Math.ldexp] in file: lib/support//0.2.587//Math.sharp:75:28: note:  
		    public static def ldexp(var n, var n2) : var { return CMath.ldexp(n, n2); }
		                           ^


ldexp:
line: 74 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	loadl ebx, fp+1
         [0x3] 3:	rstore ebx
         [0x4] 4:	call @282 // <std.kernel#CMath.ldexp(var,var)>
         [0x5] 5:	loadval ebx
         [0x6] 6:	return_val ebx
         [0x7] 7:	ret

func:@401 [std#Math.fmod] in file: lib/support//0.2.587//Math.sharp:77:27: note:  
		    public static def fmod(var n, var n2) : var { return CMath.fmod(n, n2); }
		                          ^


fmod:
line: 76 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	loadl ebx, fp+1
         [0x3] 3:	rstore ebx
         [0x4] 4:	call @283 // <std.kernel#CMath.fmod(var,var)>
         [0x5] 5:	loadval ebx
         [0x6] 6:	return_val ebx
         [0x7] 7:	ret

func:@402 [std#NullptrException.NullptrException] in file: lib/support//0.2.587//NullptrException.sharp:8:23: note:  
		      NullptrException(var[] message) {
		                      ^


NullptrException:
line: 8 [0x0] 0:	movl 0
        [0x1] 1:	pushobj
        [0x2] 2:	movl 1
        [0x3] 3:	pushobj
        [0x4] 4:	call @81 // <std#Exception.Exception(var[])>
        [0x5] 5:	pop
        [0x6] 6:	movl 0
        [0x7] 7:	returnobj
        [0x8] 8:	ret

func:@403 [std#NullptrException.NullptrException] in file: lib/support//0.2.587//NullptrException.sharp:12:23: note:  
		      NullptrException(string message) {
		                      ^


NullptrException:
line: 12 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	pushobj
         [0x4] 4:	call @82 // <std#Exception.Exception(std#string)>
         [0x5] 5:	pop
         [0x6] 6:	movl 0
         [0x7] 7:	returnobj
         [0x8] 8:	ret

func:@404 [std#NullptrException.NullptrException] in file: lib/support//0.2.587//NullptrException.sharp:6:13: note:  
		public class NullptrException base Exception {
		            ^


NullptrException:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@405 [std#Object.$operator==] in file: lib/support//0.2.587//Object.sharp:11:24: note:  
		    public def operator==(object o) : var {
		                       ^


$operator==:
line: 11 [0x0] 0:	movl 1
         [0x1] 1:	pushobj
         [0x2] 2:	movl 0
         [0x3] 3:	pushobj
         [0x4] 4:	itest ebx
         [0x5] 5:	movr cmt, ebx
         [0x6] 6:	return_val cmt
         [0x7] 7:	ret

func:@406 [std#Object.toString] in file: lib/support//0.2.587//Object.sharp:15:24: note:  
		    public def delegate::toString() : string {
		                       ^


toString:
line: 15 [0x0] 0:	new_class @46 // std#string
         [0x1] 1:	newstr @226 // ""
         [0x2] 2:	call @558 // <std#string.string(var[])>
         [0x3] 3:	movsl #0
         [0x4] 4:	returnobj
         [0x5] 5:	ret

func:@407 [std#Object.hash] in file: lib/support//0.2.587//Object.sharp:19:17: note:  
		    def delegate::hash() : var {
		                ^


hash:
line: 20 [0x0] 0:	movi #0, ebx
         [0x2] 2:	return_val ebx
         [0x3] 3:	ret

func:@408 [std#Object.guid] in file: lib/support//0.2.587//Object.sharp:24:17: note:  
		    def delegate::guid() : var {
		                ^


guid:
line: 24 [0x0] 0:	call @338 // <std.kernel#Time.nanoTime()>
         [0x1] 1:	loadval ebx
         [0x2] 2:	return_val ebx
         [0x3] 3:	ret

func:@409 [std#Object.Object] in file: lib/support//0.2.587//Object.sharp:9:6: note:  
		class Object : Printable, Unique {
		     ^


Object:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@410 [std#ObjList.ObjList] in file: lib/support//0.2.587//ObjList.sharp:17:19: note:  
		    public ObjList() {
		                  ^


ObjList:
line: 18 [0x0] 0:	movi #10, ebx
         [0x2] 2:	newobj_arry ebx
         [0x3] 3:	movl 0
         [0x4] 4:	movn #1
         [0x5] 5:	popobj
         [0x6] 6:	movl 0
         [0x7] 7:	returnobj
         [0x8] 8:	ret

func:@411 [std#ObjList.size] in file: lib/support//0.2.587//ObjList.sharp:25:20: note:  
		    public def size() : var {
		                   ^


size:
line: 25 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@412 [std#ObjList.empty] in file: lib/support//0.2.587//ObjList.sharp:33:21: note:  
		    public def empty() : var {
		                    ^


empty:
line: 33 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movi #0, ebx
         [0x8] 8:	movr egx, ebx
         [0x9] 9:	loadval ebx
         [0xa] 10:	test ebx, egx
         [0xb] 11:	movr ebx, cmt
         [0xc] 12:	return_val cmt
         [0xd] 13:	ret

func:@413 [std#ObjList.toArray] in file: lib/support//0.2.587//ObjList.sharp:42:23: note:  
		    public def toArray() : object[] {
		                      ^


toArray:
line: 42 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movi #0, ebx
         [0x8] 8:	movr egx, ebx
         [0x9] 9:	loadval ebx
         [0xa] 10:	test ebx, egx
         [0xb] 11:	movr ebx, cmt
         [0xc] 12:	movi #19, adx
         [0xe] 14:	ifne
line: 42 [0xf] 15:	movl 0
         [0x10] 16:	del
         [0x11] 17:	ret
         [0x12] 18:	nop
         [0x13] 19:	nop
line: 43 [0x14] 20:	movl 0
         [0x15] 21:	movn #1
         [0x16] 22:	pushobj
         [0x17] 23:	movl 0
         [0x18] 24:	movn #0
         [0x19] 25:	movi #0, adx
         [0x1b] 27:	iaload_2 ebx, adx
         [0x1c] 28:	rstore ebx
         [0x1d] 29:	call @619 // <std#__SRT_Global.copyOf(object,var)>
         [0x1e] 30:	returnobj
         [0x1f] 31:	ret

func:@414 [std#ObjList.get] in file: lib/support//0.2.587//ObjList.sharp:51:19: note:  
		    public def get(var index) : object {
		                  ^


get:
line: 51 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	chklen adx
         [0x5] 5:	iaload_2 egx, adx
         [0x6] 6:	loadl ebx, fp+1
         [0x7] 7:	gte ebx, egx
         [0x8] 8:	movr ebx, cmt
         [0x9] 9:	movi #21, adx
         [0xb] 11:	ifne
line: 52 [0xc] 12:	new_class @13 // std#IndexOutOfBoundsException
         [0xd] 13:	movl 0
         [0xe] 14:	pushobj
         [0xf] 15:	loadl ebx, fp+1
         [0x10] 16:	rstore ebx
         [0x11] 17:	call @424 // <std#ObjList.outOfBoundsMsg(var)>
         [0x12] 18:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
         [0x13] 19:	throw 
         [0x14] 20:	nop
         [0x15] 21:	nop
line: 54 [0x16] 22:	movl 0
         [0x17] 23:	movn #1
         [0x18] 24:	loadl ebx, fp+1
         [0x19] 25:	chklen ebx
         [0x1a] 26:	movnd ebx
         [0x1b] 27:	returnobj
         [0x1c] 28:	ret

func:@415 [std#ObjList.last] in file: lib/support//0.2.587//ObjList.sharp:62:20: note:  
		    public def last() : object {
		                   ^


last:
line: 62 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movi #1, ebx
         [0x4] 4:	rstore ebx
         [0x5] 5:	movl 0
         [0x6] 6:	pushobj
         [0x7] 7:	call @411 // <std#ObjList.size()>
         [0x8] 8:	loadval ebx
         [0x9] 9:	loadval ecx
         [0xa] 10:	sub ebx, ecx -> ebx
         [0xc] 12:	rstore ebx
         [0xd] 13:	call @414 // <std#ObjList.get(var)>
         [0xe] 14:	movsl #0
         [0xf] 15:	returnobj
         [0x10] 16:	ret

func:@416 [std#ObjList.set] in file: lib/support//0.2.587//ObjList.sharp:71:19: note:  
		    public def set(var index, object element) : object {
		                  ^


set:
line: 71 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	chklen adx
         [0x5] 5:	iaload_2 egx, adx
         [0x6] 6:	loadl ebx, fp+1
         [0x7] 7:	gte ebx, egx
         [0x8] 8:	movr ebx, cmt
         [0x9] 9:	movi #21, adx
         [0xb] 11:	ifne
line: 72 [0xc] 12:	new_class @13 // std#IndexOutOfBoundsException
         [0xd] 13:	movl 0
         [0xe] 14:	pushobj
         [0xf] 15:	loadl ebx, fp+1
         [0x10] 16:	rstore ebx
         [0x11] 17:	call @424 // <std#ObjList.outOfBoundsMsg(var)>
         [0x12] 18:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
         [0x13] 19:	throw 
         [0x14] 20:	nop
         [0x15] 21:	nop
line: 74 [0x16] 22:	movl 0
         [0x17] 23:	movn #1
         [0x18] 24:	loadl ebx, fp+1
         [0x19] 25:	chklen ebx
         [0x1a] 26:	movnd ebx
         [0x1b] 27:	pushobj
         [0x1c] 28:	movl 3
         [0x1d] 29:	popobj
line: 75 [0x1e] 30:	movl 2
         [0x1f] 31:	pushobj
         [0x20] 32:	movl 0
         [0x21] 33:	movn #1
         [0x22] 34:	loadl ebx, fp+1
         [0x23] 35:	chklen ebx
         [0x24] 36:	movnd ebx
         [0x25] 37:	popobj
line: 76 [0x26] 38:	movl 3
         [0x27] 39:	returnobj
         [0x28] 40:	ret

func:@417 [std#ObjList.shrink] in file: lib/support//0.2.587//ObjList.sharp:84:23: note:  
		    private def shrink() {
		                      ^


shrink:
line: 84 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	call @253 // <std.kernel#CListObj.shrink()>
         [0x3] 3:	ret

func:@418 [std#ObjList.add] in file: lib/support//0.2.587//ObjList.sharp:94:20: note:  
		     public def add(ObjList lst) {
		                   ^


add:
line: 94 [0x0] 0:	movl 1
         [0x1] 1:	pushobj
         [0x2] 2:	call @413 // <std#ObjList.toArray()>
         [0x3] 3:	movl 2
         [0x4] 4:	popobj
line: 95 [0x5] 5:	movi #0, ebx
         [0x7] 7:	rstore ebx
         [0x8] 8:	movl 2
         [0x9] 9:	smov ebx, sp+0
         [0xa] 10:	sizeof egx
         [0xb] 11:	lt ebx, egx
         [0xc] 12:	movi #28, adx
         [0xe] 14:	ifne
         [0xf] 15:	movnd ebx
         [0x10] 16:	pushobj
         [0x11] 17:	movl 3
         [0x12] 18:	popobj
line: 96 [0x13] 19:	movl 0
         [0x14] 20:	pushobj
         [0x15] 21:	movl 3
         [0x16] 22:	pushobj
         [0x17] 23:	call @252 // <std.kernel#CListObj.add(object)>
         [0x18] 24:	smov ebx, sp+0
         [0x19] 25:	inc ebx
         [0x1a] 26:	smovr ebx, sp+0
         [0x1b] 27:	goto @8
         [0x1c] 28:	pop
         [0x1d] 29:	ret

func:@419 [std#ObjList.add] in file: lib/support//0.2.587//ObjList.sharp:107:20: note:  
		     public def add(object num) {
		                   ^


add:
line: 107 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	movl 1
          [0x3] 3:	pushobj
          [0x4] 4:	call @252 // <std.kernel#CListObj.add(object)>
          [0x5] 5:	ret

func:@420 [std#ObjList.popBack] in file: lib/support//0.2.587//ObjList.sharp:118:24: note:  
		     public def popBack() {
		                       ^


popBack:
line: 118 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	call @417 // <std#ObjList.shrink()>
          [0x3] 3:	ret

func:@421 [std#ObjList.insert] in file: lib/support//0.2.587//ObjList.sharp:128:23: note:  
		     public def insert(var pos, object value) {
		                      ^


insert:
line: 128 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	loadl ebx, fp+1
          [0x3] 3:	rstore ebx
          [0x4] 4:	movl 2
          [0x5] 5:	pushobj
          [0x6] 6:	call @254 // <std.kernel#CListObj.insert(var,object)>
          [0x7] 7:	ret

func:@422 [std#ObjList.remove] in file: lib/support//0.2.587//ObjList.sharp:138:23: note:  
		     public def remove(var pos) {
		                      ^


remove:
line: 138 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	loadl ebx, fp+1
          [0x3] 3:	rstore ebx
          [0x4] 4:	call @255 // <std.kernel#CListObj.remove(var)>
          [0x5] 5:	ret

func:@423 [std#ObjList.clear] in file: lib/support//0.2.587//ObjList.sharp:146:22: note:  
		     public def clear() {
		                     ^


clear:
line: 149 [0x0] 0:	movi #10, ebx
          [0x2] 2:	newobj_arry ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #1
          [0x5] 5:	popobj
          [0x6] 6:	ret

func:@424 [std#ObjList.outOfBoundsMsg] in file: lib/support//0.2.587//ObjList.sharp:158:31: note:  
		    private def outOfBoundsMsg(var index) : string {
		                              ^


outOfBoundsMsg:
line: 158 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	newstr @224 // "Index: "
          [0x2] 2:	call @558 // <std#string.string(var[])>
          [0x3] 3:	loadl ebx, fp+1
          [0x4] 4:	rstore ebx
          [0x5] 5:	call @579 // <std#string.$operator+(var)>
          [0x6] 6:	newstr @225 // ", size: "
          [0x7] 7:	call @572 // <std#string.$operator+(var[])>
          [0x8] 8:	movl 0
          [0x9] 9:	movn #1
          [0xa] 10:	sizeof ebx
          [0xb] 11:	rstore ebx
          [0xc] 12:	call @579 // <std#string.$operator+(var)>
          [0xd] 13:	movsl #0
          [0xe] 14:	returnobj
          [0xf] 15:	ret

func:@425 [std.os#__SRT_Global.gc] in file: lib/support//0.2.587//os//gc.sharp:9:4: note:  
		def gc() {
		   ^


gc:
line: 9 [0x0] 0:	call @306 // <std.kernel#Runtime.gc()>
        [0x1] 1:	ret

func:@426 [std.os#__SRT_Global.freeMemory] in file: lib/support//0.2.587//os//gc.sharp:13:4: note:  
		def freeMemory() : var {
		   ^


freeMemory:
line: 13 [0x0] 0:	call @309 // <std.kernel#Runtime.freeMemory()>
         [0x1] 1:	loadval ebx
         [0x2] 2:	return_val ebx
         [0x3] 3:	ret

func:@427 [std.os#__SRT_Global.maxMemory] in file: lib/support//0.2.587//os//gc.sharp:17:4: note:  
		def maxMemory() : var {
		   ^


maxMemory:
line: 17 [0x0] 0:	call @307 // <std.kernel#Runtime.memoryLimit()>
         [0x1] 1:	loadval ebx
         [0x2] 2:	return_val ebx
         [0x3] 3:	ret

func:@428 [std.os#__SRT_Global.managedMemory] in file: lib/support//0.2.587//os//gc.sharp:21:4: note:  
		def managedMemory() : var {
		   ^


managedMemory:
line: 21 [0x0] 0:	call @308 // <std.kernel#Runtime.managedMemory()>
         [0x1] 1:	loadval ebx
         [0x2] 2:	return_val ebx
         [0x3] 3:	ret

func:@429 [std.os#__SRT_Global.sedate] in file: lib/support//0.2.587//os//gc.sharp:25:4: note:  
		def sedate() {
		   ^


sedate:
line: 25 [0x0] 0:	call @318 // <std.kernel#Runtime.sedateGc()>
         [0x1] 1:	ret

func:@430 [std.os#__SRT_Global.collect] in file: lib/support//0.2.587//os//gc.sharp:29:4: note:  
		def collect() : var {
		   ^


collect:
line: 29 [0x0] 0:	call @319 // <std.kernel#Runtime.selfCollect()>
         [0x1] 1:	loadval ebx
         [0x2] 2:	return_val ebx
         [0x3] 3:	ret

func:@431 [std.os#__SRT_Global.wake] in file: lib/support//0.2.587//os//gc.sharp:33:4: note:  
		def wake() {
		   ^


wake:
line: 33 [0x0] 0:	call @320 // <std.kernel#Runtime.wakeGc()>
         [0x1] 1:	ret

func:@432 [std.os#__SRT_Global.kill] in file: lib/support//0.2.587//os//gc.sharp:37:4: note:  
		def kill() {
		   ^


kill:
line: 37 [0x0] 0:	call @321 // <std.kernel#Runtime.killGc()>
         [0x1] 1:	ret

func:@433 [std.os#__SRT_Global.isAwake] in file: lib/support//0.2.587//os//gc.sharp:41:4: note:  
		def isAwake() : var {
		   ^


isAwake:
line: 41 [0x0] 0:	call @322 // <std.kernel#Runtime.isGcAwake()>
         [0x1] 1:	loadval ebx
         [0x2] 2:	return_val ebx
         [0x3] 3:	ret

func:@434 [std.os.gui#__SRT_Global.guiPipe] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:53:3: note:  
		def guiPipe(var proc) {
		  ^


guiPipe:
line: 53 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	int 0xf5
         [0x2] 2:	ret

func:@435 [std.os.gui#__SRT_Global.guiPipe2] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:61:3: note:  
		def guiPipe2(var proc) : var {
		  ^


guiPipe2:
line: 61 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	int 0xf5
         [0x2] 2:	return_val cmt
         [0x3] 3:	ret

func:@436 [std.os.gui#__SRT_Global.guiPipe3] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:71:3: note:  
		def guiPipe3(var paintProc, var x, var y) : var {
		  ^


guiPipe3:
line: 71 [0x0] 0:	movi #1, ebx
         [0x2] 2:	loadl ecx, fp+0
         [0x3] 3:	ipushl #2
         [0x4] 4:	ipushl #1
         [0x5] 5:	int 0xf5
         [0x6] 6:	return_val cmt
         [0x7] 7:	ret

func:@437 [std.os.gui#__SRT_Global.guiPipe4] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:84:3: note:  
		def guiPipe4(var paintProc, var a, var b, var c, var d) : var {
		  ^


guiPipe4:
line: 84 [0x0] 0:	movi #1, ebx
         [0x2] 2:	loadl ecx, fp+0
         [0x3] 3:	ipushl #4
         [0x4] 4:	ipushl #3
         [0x5] 5:	ipushl #2
         [0x6] 6:	ipushl #1
         [0x7] 7:	int 0xf5
         [0x8] 8:	return_val cmt
         [0x9] 9:	ret

func:@438 [std.os.gui#__SRT_Global.quit] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:98:4: note:  
		def quit() {
		   ^


quit:
line: 98 [0x0] 0:	movi #0, ebx
         [0x2] 2:	rstore ebx
         [0x3] 3:	call @434 // <std.os.gui#__SRT_Global.guiPipe(var)>
         [0x4] 4:	ret

func:@439 [std.os.gui#__SRT_Global.paintStart] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:102:4: note:  
		def paintStart() : var {
		   ^


paintStart:
line: 102 [0x0] 0:	movi #1, ecx
line: 103 [0x2] 2:	movi #1, ebx
          [0x4] 4:	rstore ebx
          [0x5] 5:	call @435 // <std.os.gui#__SRT_Global.guiPipe2(var)>
          [0x6] 6:	loadval ebx
          [0x7] 7:	return_val ebx
          [0x8] 8:	ret

func:@440 [std.os.gui#__SRT_Global.paintEnd] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:107:4: note:  
		def paintEnd() : var {
		   ^


paintEnd:
line: 107 [0x0] 0:	movi #2, ecx
line: 108 [0x2] 2:	movi #1, ebx
          [0x4] 4:	rstore ebx
          [0x5] 5:	call @435 // <std.os.gui#__SRT_Global.guiPipe2(var)>
          [0x6] 6:	loadval ebx
          [0x7] 7:	return_val ebx
          [0x8] 8:	ret

func:@441 [std.os.gui#__SRT_Global.paintText] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:112:4: note:  
		def paintText(var[] msg, var x, var y) : var {
		   ^


paintText:
line: 112 [0x0] 0:	movi #1, ebx
          [0x2] 2:	movi #0, ecx
          [0x4] 4:	ipushl #2
          [0x5] 5:	ipushl #1
          [0x6] 6:	pushl 0
          [0x7] 7:	int 0xf5
          [0x8] 8:	movi #0, ebx
          [0xa] 10:	return_val ebx
          [0xb] 11:	ret

func:@442 [std.os.gui#__SRT_Global.setContext] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:123:4: note:  
		def setContext(var wnd) : var {
		   ^


setContext:
line: 123 [0x0] 0:	movi #2, ebx
          [0x2] 2:	loadl adx, fp+0
          [0x3] 3:	int 0xf5
          [0x4] 4:	return_val cmt
          [0x5] 5:	ret

func:@443 [std.os.gui#__SRT_Global.getContext] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:133:4: note:  
		def getContext() : var {
		   ^


getContext:
line: 133 [0x0] 0:	movi #3, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	call @435 // <std.os.gui#__SRT_Global.guiPipe2(var)>
          [0x4] 4:	loadval ebx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@444 [std.os.gui#__SRT_Global.createDefaultWnd] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:137:4: note:  
		def createDefaultWnd(string name, string title, var width, var height) : var {
		   ^


createDefaultWnd:
line: 137 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	call @596 // <std#string.getData()>
          [0x3] 3:	movl 4
          [0x4] 4:	popobj
line: 138 [0x5] 5:	movl 1
          [0x6] 6:	pushobj
          [0x7] 7:	call @596 // <std#string.getData()>
          [0x8] 8:	movl 5
          [0x9] 9:	popobj
line: 139 [0xa] 10:	movi #4, ebx
          [0xc] 12:	pushl 5
          [0xd] 13:	pushl 4
          [0xe] 14:	loadl ecx, fp+2
          [0xf] 15:	loadl egx, fp+3
          [0x10] 16:	int 0xf5
          [0x11] 17:	return_val cmt
          [0x12] 18:	ret

func:@445 [std.os.gui#__SRT_Global.show] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:152:4: note:  
		def show(var wnd, var cmd) : var {
		   ^


show:
line: 152 [0x0] 0:	loadl adx, fp+0
          [0x1] 1:	loadl egx, fp+1
line: 154 [0x2] 2:	movi #5, ebx
          [0x4] 4:	rstore ebx
          [0x5] 5:	call @435 // <std.os.gui#__SRT_Global.guiPipe2(var)>
          [0x6] 6:	loadval ebx
          [0x7] 7:	return_val ebx
          [0x8] 8:	ret

func:@446 [std.os.gui#__SRT_Global.update] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:158:4: note:  
		def update(var wnd) : var {
		   ^


update:
line: 158 [0x0] 0:	loadl adx, fp+0
line: 159 [0x1] 1:	movi #6, ebx
          [0x3] 3:	rstore ebx
          [0x4] 4:	call @435 // <std.os.gui#__SRT_Global.guiPipe2(var)>
          [0x5] 5:	loadval ebx
          [0x6] 6:	return_val ebx
          [0x7] 7:	ret

func:@447 [std.os.gui#Message.Message] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:163:13: note:  
		public class Message {
		            ^


Message:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@448 [std.os.gui#__SRT_Global.getMessage] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:171:4: note:  
		def getMessage() : Message {
		   ^


getMessage:
line: 171 [0x0] 0:	movi #8, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	call @434 // <std.os.gui#__SRT_Global.guiPipe(var)>
line: 172 [0x4] 4:	movg @5 // @std.os.gui#__SRT_Global
          [0x5] 5:	movn #0
          [0x6] 6:	pushobj
          [0x7] 7:	movl 0
          [0x8] 8:	popobj
line: 174 [0x9] 9:	movl 0
          [0xa] 10:	movn #0
          [0xb] 11:	movi #0, adx
          [0xd] 13:	rmov adx, ebx
          [0xe] 14:	movl 0
          [0xf] 15:	movn #1
          [0x10] 16:	rmov adx, ecx
          [0x11] 17:	movl 0
          [0x12] 18:	movn #2
          [0x13] 19:	rmov adx, egx
line: 186 [0x14] 20:	movl 0
          [0x15] 21:	returnobj
          [0x16] 22:	ret

func:@449 [std.os.gui#__SRT_Global.dispatchMessage] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:190:4: note:  
		def dispatchMessage() : var {
		   ^


dispatchMessage:
line: 190 [0x0] 0:	movi #7, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	call @435 // <std.os.gui#__SRT_Global.guiPipe2(var)>
          [0x4] 4:	loadval ebx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@450 [std.os.gui#__SRT_Global.moveTo] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:194:4: note:  
		def moveTo(var x, var y) : var {
		   ^


moveTo:
line: 194 [0x0] 0:	movi #3, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	loadl ebx, fp+0
          [0x4] 4:	rstore ebx
          [0x5] 5:	loadl ebx, fp+1
          [0x6] 6:	rstore ebx
          [0x7] 7:	call @436 // <std.os.gui#__SRT_Global.guiPipe3(var,var,var)>
          [0x8] 8:	loadval ebx
          [0x9] 9:	return_val ebx
          [0xa] 10:	ret

func:@451 [std.os.gui#__SRT_Global.lineTo] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:198:4: note:  
		def lineTo(var x, var y) : var {
		   ^


lineTo:
line: 198 [0x0] 0:	movi #4, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	loadl ebx, fp+0
          [0x4] 4:	rstore ebx
          [0x5] 5:	loadl ebx, fp+1
          [0x6] 6:	rstore ebx
          [0x7] 7:	call @436 // <std.os.gui#__SRT_Global.guiPipe3(var,var,var)>
          [0x8] 8:	loadval ebx
          [0x9] 9:	return_val ebx
          [0xa] 10:	ret

func:@452 [std.os.gui#__SRT_Global.rectangle] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:202:4: note:  
		def rectangle(var left, var top, var right, var bottom) : var {
		   ^


rectangle:
line: 202 [0x0] 0:	movi #5, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	loadl ebx, fp+0
          [0x4] 4:	rstore ebx
          [0x5] 5:	loadl ebx, fp+1
          [0x6] 6:	rstore ebx
          [0x7] 7:	loadl ebx, fp+2
          [0x8] 8:	rstore ebx
          [0x9] 9:	loadl ebx, fp+3
          [0xa] 10:	rstore ebx
          [0xb] 11:	call @437 // <std.os.gui#__SRT_Global.guiPipe4(var,var,var,var,var)>
          [0xc] 12:	loadval ebx
          [0xd] 13:	return_val ebx
          [0xe] 14:	ret

func:@453 [std.os.gui#__SRT_Global.fillRect] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:206:4: note:  
		def fillRect(var left, var top, var right, var bottom) : var {
		   ^


fillRect:
line: 206 [0x0] 0:	movi #6, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	loadl ebx, fp+0
          [0x4] 4:	rstore ebx
          [0x5] 5:	loadl ebx, fp+1
          [0x6] 6:	rstore ebx
          [0x7] 7:	loadl ebx, fp+2
          [0x8] 8:	rstore ebx
          [0x9] 9:	loadl ebx, fp+3
          [0xa] 10:	rstore ebx
          [0xb] 11:	call @437 // <std.os.gui#__SRT_Global.guiPipe4(var,var,var,var,var)>
          [0xc] 12:	loadval ebx
          [0xd] 13:	return_val ebx
          [0xe] 14:	ret

func:@454 [std.os.gui#__SRT_Global.ellipsize] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:210:4: note:  
		def ellipsize(var left, var top, var right, var bottom) : var {
		   ^


ellipsize:
line: 210 [0x0] 0:	movi #7, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	loadl ebx, fp+0
          [0x4] 4:	rstore ebx
          [0x5] 5:	loadl ebx, fp+1
          [0x6] 6:	rstore ebx
          [0x7] 7:	loadl ebx, fp+2
          [0x8] 8:	rstore ebx
          [0x9] 9:	loadl ebx, fp+3
          [0xa] 10:	rstore ebx
          [0xb] 11:	call @437 // <std.os.gui#__SRT_Global.guiPipe4(var,var,var,var,var)>
          [0xc] 12:	loadval ebx
          [0xd] 13:	return_val ebx
          [0xe] 14:	ret

func:@455 [std.os.gui#__SRT_Global.polygon] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:214:4: note:  
		def polygon(Polygon poly) : var {
		   ^


polygon:
line: 215 [0x0] 0:	movi #1, ebx
          [0x2] 2:	movi #8, ecx
          [0x4] 4:	movl 0
          [0x5] 5:	pushobj
          [0x6] 6:	int 0xf5
          [0x7] 7:	return_val cmt
          [0x8] 8:	ret

func:@456 [std.os.gui#__SRT_Global.RGB] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:229:3: note:  
		def RGB(var r, var g, var b) : var
		  ^


RGB:
line: 230 [0x0] 0:	movi #8, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	loadl ebx, fp+1
          [0x4] 4:	rstore ebx
          [0x5] 5:	movi #255, ebx
          [0x7] 7:	loadval ecx
          [0x8] 8:	uand ecx, ebx
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	loadval ecx
          [0xb] 11:	shl ebx, ecx -> ebx
          [0xd] 13:	rstore ebx
          [0xe] 14:	movi #16, ebx
          [0x10] 16:	rstore ebx
          [0x11] 17:	loadl ebx, fp+2
          [0x12] 18:	rstore ebx
          [0x13] 19:	movi #255, ebx
          [0x15] 21:	loadval ecx
          [0x16] 22:	uand ecx, ebx
          [0x17] 23:	movr ebx, cmt
          [0x18] 24:	loadval ecx
          [0x19] 25:	shl ebx, ecx -> ebx
          [0x1b] 27:	loadval ecx
          [0x1c] 28:	add ebx, ecx -> ebx
          [0x1e] 30:	rstore ebx
          [0x1f] 31:	loadl ebx, fp+0
          [0x20] 32:	rstore ebx
          [0x21] 33:	movi #255, ebx
          [0x23] 35:	loadval ecx
          [0x24] 36:	uand ecx, ebx
          [0x25] 37:	movr ebx, cmt
          [0x26] 38:	rstore ebx
          [0x27] 39:	loadval ebx
          [0x28] 40:	loadval ecx
          [0x29] 41:	add ebx, ecx -> ebx
          [0x2b] 43:	rstore ebx
          [0x2c] 44:	loadval ebx
          [0x2d] 45:	return_val ebx
          [0x2e] 46:	ret

func:@457 [std.os.gui#__SRT_Global.createPen] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:234:4: note:  
		def createPen(var style, var width, var color) {
		   ^


createPen:
line: 235 [0x0] 0:	movi #1, ebx
          [0x2] 2:	movi #9, ecx
          [0x4] 4:	ipushl #2
          [0x5] 5:	ipushl #1
          [0x6] 6:	ipushl #0
          [0x7] 7:	int 0xf5
          [0x8] 8:	ret

func:@458 [std.os.gui#__SRT_Global.selectPen] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:247:4: note:  
		def selectPen(var pen): var {
		   ^


selectPen:
line: 247 [0x0] 0:	loadl adx, fp+0
          [0x1] 1:	movi #10, ecx
line: 251 [0x3] 3:	movi #1, ebx
          [0x5] 5:	rstore ebx
          [0x6] 6:	call @435 // <std.os.gui#__SRT_Global.guiPipe2(var)>
          [0x7] 7:	loadval ebx
          [0x8] 8:	return_val ebx
          [0x9] 9:	ret

func:@459 [std.os.gui#__SRT_Global.deletePen] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:255:4: note:  
		def deletePen(var pen): var {
		   ^


deletePen:
line: 255 [0x0] 0:	loadl adx, fp+0
          [0x1] 1:	movi #11, ecx
line: 259 [0x3] 3:	movi #1, ebx
          [0x5] 5:	rstore ebx
          [0x6] 6:	call @435 // <std.os.gui#__SRT_Global.guiPipe2(var)>
          [0x7] 7:	loadval ebx
          [0x8] 8:	return_val ebx
          [0x9] 9:	ret

func:@460 [std.os.gui#__SRT_Global.selectBrush] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:263:4: note:  
		def selectBrush(var brush): var {
		   ^


selectBrush:
line: 263 [0x0] 0:	loadl adx, fp+0
          [0x1] 1:	movi #13, ecx
line: 267 [0x3] 3:	movi #1, ebx
          [0x5] 5:	rstore ebx
          [0x6] 6:	call @435 // <std.os.gui#__SRT_Global.guiPipe2(var)>
          [0x7] 7:	loadval ebx
          [0x8] 8:	return_val ebx
          [0x9] 9:	ret

func:@461 [std.os.gui#__SRT_Global.deleteBrush] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:271:4: note:  
		def deleteBrush(var brush): var {
		   ^


deleteBrush:
line: 271 [0x0] 0:	loadl adx, fp+0
          [0x1] 1:	movi #14, ecx
line: 275 [0x3] 3:	movi #1, ebx
          [0x5] 5:	rstore ebx
          [0x6] 6:	call @435 // <std.os.gui#__SRT_Global.guiPipe2(var)>
          [0x7] 7:	loadval ebx
          [0x8] 8:	return_val ebx
          [0x9] 9:	ret

func:@462 [std.os.gui#__SRT_Global.createBrush] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:280:3: note:  
		def createBrush(var color) {
		  ^


createBrush:
line: 281 [0x0] 0:	movi #1, ebx
          [0x2] 2:	movi #12, ecx
          [0x4] 4:	ipushl #0
          [0x5] 5:	int 0xf5
          [0x6] 6:	ret

func:@463 [std.os.gui#Polygon.Polygon] in file: lib/support//0.2.587//os//gui//win//Polygon.sharp:9:19: note:  
		    public Polygon(var size) {
		                  ^


Polygon:
line: 9 [0x0] 0:	loadl ebx, fp+1
        [0x1] 1:	new_classarray ebx  // std.os.gui#Point[]
        [0x2] 2:	movl 0
        [0x3] 3:	movn #0
        [0x4] 4:	popobj
        [0x5] 5:	movl 0
        [0x6] 6:	returnobj
        [0x7] 7:	ret

func:@464 [std.os.gui#Polygon.Polygon] in file: lib/support//0.2.587//os//gui//win//Polygon.sharp:6:13: note:  
		public class Polygon {
		            ^


Polygon:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@465 [std.os.gui#Point.Point] in file: lib/support//0.2.587//os//gui//win//Polygon.sharp:15:12: note:  
		public class Point {
		           ^


Point:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@466 [std.os.gui#Window.Window] in file: lib/support//0.2.587//os//gui//win//Window.sharp:11:18: note:  
		    public Window(string name, string title) {
		                 ^


Window:
line: 11 [0x0] 0:	movl 1
         [0x1] 1:	pushobj
         [0x2] 2:	movl 0
         [0x3] 3:	movn #1
         [0x4] 4:	popobj
line: 12 [0x5] 5:	movl 2
         [0x6] 6:	pushobj
         [0x7] 7:	movl 0
         [0x8] 8:	movn #2
         [0x9] 9:	popobj
line: 13 [0xa] 10:	movi #500, ebx
         [0xc] 12:	nop
         [0xd] 13:	rstore ebx
         [0xe] 14:	movl 0
         [0xf] 15:	movn #3
         [0x10] 16:	movi #0, adx
         [0x12] 18:	loadval ecx
         [0x13] 19:	rmov adx, ecx
line: 14 [0x14] 20:	movi #650, ebx
         [0x16] 22:	nop
         [0x17] 23:	rstore ebx
         [0x18] 24:	movl 0
         [0x19] 25:	movn #4
         [0x1a] 26:	movi #0, adx
         [0x1c] 28:	loadval ecx
         [0x1d] 29:	rmov adx, ecx
line: 15 [0x1e] 30:	movl 1
         [0x1f] 31:	pushobj
         [0x20] 32:	movl 2
         [0x21] 33:	pushobj
         [0x22] 34:	movi #500, ebx
         [0x24] 36:	rstore ebx
         [0x25] 37:	movi #650, ebx
         [0x27] 39:	rstore ebx
         [0x28] 40:	call @444 // <std.os.gui#__SRT_Global.createDefaultWnd(std#string,std#string,var,var)>
         [0x29] 41:	nop
         [0x2a] 42:	movl 0
         [0x2b] 43:	movn #0
         [0x2c] 44:	movi #0, adx
         [0x2e] 46:	loadval ecx
         [0x2f] 47:	rmov adx, ecx
         [0x30] 48:	movl 0
         [0x31] 49:	returnobj
         [0x32] 50:	ret

func:@467 [std.os.gui#Window.Window] in file: lib/support//0.2.587//os//gui//win//Window.sharp:5:13: note:  
		public class Window {
		            ^


Window:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@468 [std.os#__SRT_Global.sysexec] in file: lib/support//0.2.587//os//system.sharp:3:4: note:  
		def sysexec(var[] cmd) : var {
		   ^


sysexec:
line: 3 [0x0] 0:	movl 0
        [0x1] 1:	pushobj
        [0x2] 2:	call @470 // <std.os#__SRT_Global.__os_exec(var[])>
        [0x3] 3:	loadval ebx
        [0x4] 4:	return_val ebx
        [0x5] 5:	ret

func:@469 [std.os#__SRT_Global._kbhit] in file: lib/support//0.2.587//os//system.sharp:7:4: note:  
		def _kbhit() : var {
		   ^


_kbhit:
line: 7 [0x0] 0:	int 0xe9
        [0x1] 1:	return_val cmt
        [0x2] 2:	ret

func:@470 [std.os#__SRT_Global.__os_exec] in file: lib/support//0.2.587//os//system.sharp:15:4: note:  
		def __os_exec(var[] cmd) : var {
		   ^


__os_exec:
line: 15 [0x0] 0:	pushl 0
         [0x1] 1:	int 0xe8
         [0x2] 2:	return_val cmt
         [0x3] 3:	ret

func:@471 [std#Printable.Printable] in file: lib/support//0.2.587//Printable.sharp:10:10: note:  
		interface Printable {
		         ^


Printable:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@472 [std#__SRT_Global.random] in file: lib/support//0.2.587//Random.sharp:5:4: note:  
		def random() : var {
		   ^


random:
line: 5 [0x0] 0:	call @295 // <std.kernel#__SRT_Global.__rand()>
        [0x1] 1:	loadval ebx
        [0x2] 2:	return_val ebx
        [0x3] 3:	ret

func:@473 [std#__SRT_Global.randomInt] in file: lib/support//0.2.587//Random.sharp:9:4: note:  
		def randomInt() : var {
		   ^


randomInt:
line: 9 [0x0] 0:	call @296 // <std.kernel#__SRT_Global.__randInt()>
        [0x1] 1:	loadval ebx
        [0x2] 2:	return_val ebx
        [0x3] 3:	ret

func:@474 [std#__SRT_Global.random] in file: lib/support//0.2.587//Random.sharp:13:4: note:  
		def random(var min, var max) : var {
		   ^


random:
line: 13 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	loadl ebx, fp+1
         [0x3] 3:	rstore ebx
         [0x4] 4:	call @293 // <std.kernel#__SRT_Global.__rand(var,var)>
         [0x5] 5:	loadval ebx
         [0x6] 6:	return_val ebx
         [0x7] 7:	ret

func:@475 [std#__SRT_Global.randomInt] in file: lib/support//0.2.587//Random.sharp:17:4: note:  
		def randomInt(var min, var max) : var {
		   ^


randomInt:
line: 17 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	loadl ebx, fp+1
         [0x3] 3:	rstore ebx
         [0x4] 4:	call @294 // <std.kernel#__SRT_Global.__randInt(var,var)>
         [0x5] 5:	loadval ebx
         [0x6] 6:	return_val ebx
         [0x7] 7:	ret

func:@476 [std#__SRT_Global.pick] in file: lib/support//0.2.587//Random.sharp:21:4: note:  
		def pick(object[] arry) : object {
		   ^


pick:
line: 21 [0x0] 0:	movl 0
line: 25 [0x1] 1:	pushobj
         [0x2] 2:	movi #0, ebx
         [0x4] 4:	rstore ebx
         [0x5] 5:	movi #1, ebx
         [0x7] 7:	rstore ebx
         [0x8] 8:	movl 0
         [0x9] 9:	sizeof ebx
         [0xa] 10:	loadval ecx
         [0xb] 11:	sub ebx, ecx -> ebx
         [0xd] 13:	rstore ebx
         [0xe] 14:	call @475 // <std#__SRT_Global.randomInt(var,var)>
         [0xf] 15:	loadval ebx
         [0x10] 16:	movsl #0
         [0x11] 17:	chklen ebx
         [0x12] 18:	movnd ebx
         [0x13] 19:	pop
         [0x14] 20:	returnobj
         [0x15] 21:	ret
         [0x16] 22:	movl 1
         [0x17] 23:	pushobj
         [0x18] 24:	movi #0, ebx
         [0x1a] 26:	rstore ebx
         [0x1b] 27:	movi #1, ebx
         [0x1d] 29:	rstore ebx
         [0x1e] 30:	movl 1
         [0x1f] 31:	sizeof ebx
         [0x20] 32:	loadval ecx
         [0x21] 33:	sub ebx, ecx -> ebx
         [0x23] 35:	rstore ebx
         [0x24] 36:	call @475 // <std#__SRT_Global.randomInt(var,var)>
         [0x25] 37:	loadval ebx
         [0x26] 38:	movsl #0
         [0x27] 39:	chklen ebx
         [0x28] 40:	iaload_2 ebx, ebx
         [0x29] 41:	pop
         [0x2a] 42:	return_val ebx
         [0x2b] 43:	ret

func:@477 [std#__SRT_Global.pick] in file: lib/support//0.2.587//Random.sharp:25:4: note:  
		def pick(var[] arry) : object {
		   ^


pick:
        [0x0] 0:	pushnil 
        [0x1] 1:	popobj
        [0x2] 2:	returnobj
        [0x3] 3:	ret

func:@478 [std#__SRT_Global.randomSeed] in file: lib/support//0.2.587//Random.sharp:29:4: note:  
		def randomSeed() : var {
		   ^


randomSeed:
line: 29 [0x0] 0:	call @298 // <std.kernel#__SRT_Global.__seed()>
         [0x1] 1:	loadval ebx
         [0x2] 2:	return_val ebx
         [0x3] 3:	ret

func:@479 [std#__SRT_Global.reset] in file: lib/support//0.2.587//Random.sharp:33:4: note:  
		def reset() : var {
		   ^


reset:
line: 33 [0x0] 0:	call @297 // <std.kernel#__SRT_Global.__reset()>
         [0x1] 1:	loadval ebx
         [0x2] 2:	return_val ebx
         [0x3] 3:	ret

func:@480 [std#__SRT_Global.seed] in file: lib/support//0.2.587//Random.sharp:37:4: note:  
		def seed(var sd) {
		   ^


seed:
line: 37 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	call @292 // <std.kernel#__SRT_Global.__seed(var)>
         [0x3] 3:	ret

func:@481 [std#RuntimeErr.RuntimeErr] in file: lib/support//0.2.587//RuntimeErr.sharp:10:24: note:  
		      public RuntimeErr(var[] message) {
		                       ^


RuntimeErr:
line: 10 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	pushobj
         [0x4] 4:	call @81 // <std#Exception.Exception(var[])>
         [0x5] 5:	pop
         [0x6] 6:	movl 0
         [0x7] 7:	returnobj
         [0x8] 8:	ret

func:@482 [std#RuntimeErr.RuntimeErr] in file: lib/support//0.2.587//RuntimeErr.sharp:14:24: note:  
		      public RuntimeErr(string message) {
		                       ^


RuntimeErr:
line: 14 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	pushobj
         [0x4] 4:	call @82 // <std#Exception.Exception(std#string)>
         [0x5] 5:	pop
         [0x6] 6:	movl 0
         [0x7] 7:	returnobj
         [0x8] 8:	ret

func:@483 [std#RuntimeErr.RuntimeErr] in file: lib/support//0.2.587//RuntimeErr.sharp:8:13: note:  
		public class RuntimeErr base Exception {
		            ^


RuntimeErr:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@484 [std#short.short] in file: lib/support//0.2.587//short.sharp:5:17: note:  
		    public short(var num) {
		                ^


short:
line: 5 [0x0] 0:	loadl ebx, fp+1
        [0x1] 1:	mov16 ebx, ebx
        [0x2] 2:	nop
        [0x3] 3:	rstore ebx
        [0x4] 4:	movl 0
        [0x5] 5:	movn #0
        [0x6] 6:	movi #0, adx
        [0x8] 8:	loadval ecx
        [0x9] 9:	rmov adx, ecx
        [0xa] 10:	movl 0
        [0xb] 11:	returnobj
        [0xc] 12:	ret

func:@485 [std#short.short] in file: lib/support//0.2.587//short.sharp:9:17: note:  
		    public short(integer num) {
		                ^


short:
line: 9 [0x0] 0:	movl 0
        [0x1] 1:	pushobj
        [0x2] 2:	movl 1
        [0x3] 3:	movn #0
        [0x4] 4:	movi #0, adx
        [0x6] 6:	chklen adx
        [0x7] 7:	iaload_2 ebx, adx
        [0x8] 8:	mov16 ebx, ebx
        [0x9] 9:	rstore ebx
        [0xa] 10:	call @125 // <std#integer.integer(var)>
        [0xb] 11:	pop
        [0xc] 12:	movl 0
        [0xd] 13:	returnobj
        [0xe] 14:	ret

func:@486 [std#short.$operator+] in file: lib/support//0.2.587//short.sharp:13:24: note:  
		    public def operator+(var num) : var {
		                       ^


$operator+:
line: 13 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	add ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	mov16 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@487 [std#short.$operator+] in file: lib/support//0.2.587//short.sharp:17:24: note:  
		    public def operator+(integer num) : short {
		                       ^


$operator+:
line: 17 [0x0] 0:	new_class @44 // std#short
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @486 // <std#short.$operator+(var)>
         [0xa] 10:	call @484 // <std#short.short(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@488 [std#short.$operator-] in file: lib/support//0.2.587//short.sharp:21:24: note:  
		    public def operator-(var num) : var {
		                       ^


$operator-:
line: 21 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	sub ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	mov16 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@489 [std#short.$operator-] in file: lib/support//0.2.587//short.sharp:25:24: note:  
		    public def operator-(integer num) : short {
		                       ^


$operator-:
line: 25 [0x0] 0:	new_class @44 // std#short
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @488 // <std#short.$operator-(var)>
         [0xa] 10:	call @484 // <std#short.short(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@490 [std#short.$operator*] in file: lib/support//0.2.587//short.sharp:29:24: note:  
		    public def operator*(var num) : var {
		                       ^


$operator*:
line: 29 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	mul ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	mov16 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@491 [std#short.$operator!=] in file: lib/support//0.2.587//short.sharp:33:24: note:  
		    public def operator!=(var num) : var {
		                       ^


$operator!=:
line: 33 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	loadl ebx, fp+1
         [0x7] 7:	movr egx, ebx
         [0x8] 8:	loadval ebx
         [0x9] 9:	tne ebx, egx
         [0xa] 10:	movr ebx, cmt
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@492 [std#short.$operator!=] in file: lib/support//0.2.587//short.sharp:37:24: note:  
		    public def operator!=(integer num) : var {
		                       ^


$operator!=:
line: 37 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 egx, adx
         [0xc] 12:	loadval ebx
         [0xd] 13:	tne ebx, egx
         [0xe] 14:	movr ebx, cmt
         [0xf] 15:	return_val cmt
         [0x10] 16:	ret

func:@493 [std#short.$operator*] in file: lib/support//0.2.587//short.sharp:41:24: note:  
		    public def operator*(integer num) : short {
		                       ^


$operator*:
line: 41 [0x0] 0:	new_class @44 // std#short
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @490 // <std#short.$operator*(var)>
         [0xa] 10:	call @484 // <std#short.short(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@494 [std#short.$operator/] in file: lib/support//0.2.587//short.sharp:45:24: note:  
		    public def operator/(var num) : var {
		                       ^


$operator/:
line: 45 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	div ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	mov16 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@495 [std#short.$operator/] in file: lib/support//0.2.587//short.sharp:49:24: note:  
		    public def operator/(integer num) : short {
		                       ^


$operator/:
line: 49 [0x0] 0:	new_class @44 // std#short
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @494 // <std#short.$operator/(var)>
         [0xa] 10:	call @484 // <std#short.short(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@496 [std#short.$operator=] in file: lib/support//0.2.587//short.sharp:53:24: note:  
		    public def operator=(var num) : var {
		                       ^


$operator=:
line: 53 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	mov16 ebx, ebx
         [0x2] 2:	nop
         [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #0
         [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@497 [std#short.$operator=] in file: lib/support//0.2.587//short.sharp:57:24: note:  
		    public def operator=(integer num) : short {
		                       ^


$operator=:
line: 57 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @496 // <std#short.$operator=(var)>
         [0x9] 9:	pop
line: 58 [0xa] 10:	movl 0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@498 [std#short.$operator=] in file: lib/support//0.2.587//short.sharp:62:24: note:  
		    public def operator=(Enum num) : short {
		                       ^


$operator=:
line: 62 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	pushobj
         [0x4] 4:	call @78 // <std#Enum.getValue()>
         [0x5] 5:	call @496 // <std#short.$operator=(var)>
         [0x6] 6:	pop
line: 63 [0x7] 7:	movl 0
         [0x8] 8:	returnobj
         [0x9] 9:	ret

func:@499 [std#short.$operator+=] in file: lib/support//0.2.587//short.sharp:67:24: note:  
		    public def operator+=(var num) : var {
		                       ^


$operator+=:
line: 67 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	add ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	mov16 ebx, ebx
         [0xe] 14:	nop
         [0xf] 15:	rstore ebx
         [0x10] 16:	movl 0
         [0x11] 17:	movn #0
         [0x12] 18:	movi #0, adx
         [0x14] 20:	loadval ecx
         [0x15] 21:	rmov adx, ecx
line: 68 [0x16] 22:	movl 0
         [0x17] 23:	movn #0
         [0x18] 24:	movi #0, adx
         [0x1a] 26:	iaload_2 ebx, adx
         [0x1b] 27:	return_val ebx
         [0x1c] 28:	ret

func:@500 [std#short.$operator==] in file: lib/support//0.2.587//short.sharp:72:24: note:  
		    public def operator==(var num) : var {
		                       ^


$operator==:
line: 72 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	loadl ebx, fp+1
         [0x7] 7:	movr egx, ebx
         [0x8] 8:	loadval ebx
         [0x9] 9:	test ebx, egx
         [0xa] 10:	movr ebx, cmt
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@501 [std#short.$operator==] in file: lib/support//0.2.587//short.sharp:76:24: note:  
		    public def operator==(integer num) : var {
		                       ^


$operator==:
line: 76 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 egx, adx
         [0xc] 12:	loadval ebx
         [0xd] 13:	test ebx, egx
         [0xe] 14:	movr ebx, cmt
         [0xf] 15:	return_val cmt
         [0x10] 16:	ret

func:@502 [std#short.$operator<] in file: lib/support//0.2.587//short.sharp:80:24: note:  
		    public def operator<(var num) : var {
		                       ^


$operator<:
line: 80 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr egx, ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lt ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@503 [std#short.$operator<] in file: lib/support//0.2.587//short.sharp:84:24: note:  
		    public def operator<(integer num) : var {
		                       ^


$operator<:
line: 84 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	chklen adx
         [0x5] 5:	iaload_2 egx, adx
         [0x6] 6:	movl 0
         [0x7] 7:	movn #0
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 ebx, adx
         [0xc] 12:	lt ebx, egx
         [0xd] 13:	movr ebx, cmt
         [0xe] 14:	return_val cmt
         [0xf] 15:	ret

func:@504 [std#short.$operator>] in file: lib/support//0.2.587//short.sharp:88:24: note:  
		    public def operator>(var num) : var {
		                       ^


$operator>:
line: 88 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr egx, ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	gt ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@505 [std#short.$operator>] in file: lib/support//0.2.587//short.sharp:92:24: note:  
		    public def operator>(integer num) : var {
		                       ^


$operator>:
line: 92 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	chklen adx
         [0x5] 5:	iaload_2 egx, adx
         [0x6] 6:	movl 0
         [0x7] 7:	movn #0
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 ebx, adx
         [0xc] 12:	gt ebx, egx
         [0xd] 13:	movr ebx, cmt
         [0xe] 14:	return_val cmt
         [0xf] 15:	ret

func:@506 [std#short.$operator<=] in file: lib/support//0.2.587//short.sharp:96:24: note:  
		    public def operator<=(var num) : var {
		                       ^


$operator<=:
line: 96 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr egx, ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lte ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@507 [std#short.$operator<=] in file: lib/support//0.2.587//short.sharp:100:24: note:  
		    public def operator<=(integer num) : var {
		                       ^


$operator<=:
line: 100 [0x0] 0:	movl 1
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	movl 0
          [0x7] 7:	movn #0
          [0x8] 8:	movi #0, adx
          [0xa] 10:	chklen adx
          [0xb] 11:	iaload_2 ebx, adx
          [0xc] 12:	lte ebx, egx
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	return_val cmt
          [0xf] 15:	ret

func:@508 [std#short.$operator>=] in file: lib/support//0.2.587//short.sharp:104:24: note:  
		    public def operator>=(var num) : var {
		                       ^


$operator>=:
line: 104 [0x0] 0:	loadl ebx, fp+1
          [0x1] 1:	movr egx, ebx
          [0x2] 2:	movl 0
          [0x3] 3:	movn #0
          [0x4] 4:	movi #0, adx
          [0x6] 6:	chklen adx
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	gte ebx, egx
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	return_val cmt
          [0xb] 11:	ret

func:@509 [std#short.$operator>=] in file: lib/support//0.2.587//short.sharp:108:24: note:  
		    public def operator>=(integer num) : var {
		                       ^


$operator>=:
line: 108 [0x0] 0:	movl 1
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	movl 0
          [0x7] 7:	movn #0
          [0x8] 8:	movi #0, adx
          [0xa] 10:	chklen adx
          [0xb] 11:	iaload_2 ebx, adx
          [0xc] 12:	gte ebx, egx
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	return_val cmt
          [0xf] 15:	ret

func:@510 [std#short.$operator++] in file: lib/support//0.2.587//short.sharp:112:24: note:  
		    public def operator++(var num) : var { // post inc i++
		                       ^


$operator++:
line: 112 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	smovr_2 ebx, fp+2
line: 113 [0x7] 7:	movi #1, ebx
          [0x9] 9:	rstore ebx
          [0xa] 10:	movl 0
          [0xb] 11:	movn #0
          [0xc] 12:	movi #0, adx
          [0xe] 14:	chklen adx
          [0xf] 15:	iaload_2 ebx, adx
          [0x10] 16:	loadval egx
          [0x11] 17:	add ebx, egx -> ebx
          [0x13] 19:	rstore ebx
          [0x14] 20:	loadval ebx
          [0x15] 21:	mov16 ebx, ebx
          [0x16] 22:	nop
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 0
          [0x19] 25:	movn #0
          [0x1a] 26:	movi #0, adx
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	rmov adx, ecx
line: 114 [0x1e] 30:	loadl ebx, fp+2
          [0x1f] 31:	return_val ebx
          [0x20] 32:	ret

func:@511 [std#short.$operator++] in file: lib/support//0.2.587//short.sharp:118:24: note:  
		    public def operator++() : var { // pre inc ++i
		                       ^


$operator++:
line: 118 [0x0] 0:	movi #1, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #0
          [0x5] 5:	movi #0, adx
          [0x7] 7:	chklen adx
          [0x8] 8:	iaload_2 ebx, adx
          [0x9] 9:	loadval egx
          [0xa] 10:	add ebx, egx -> ebx
          [0xc] 12:	rstore ebx
          [0xd] 13:	loadval ebx
          [0xe] 14:	mov16 ebx, ebx
          [0xf] 15:	nop
          [0x10] 16:	rstore ebx
          [0x11] 17:	movl 0
          [0x12] 18:	movn #0
          [0x13] 19:	movi #0, adx
          [0x15] 21:	loadval ecx
          [0x16] 22:	rmov adx, ecx
          [0x17] 23:	return_val ebx
          [0x18] 24:	ret

func:@512 [std#short.$operator--] in file: lib/support//0.2.587//short.sharp:122:24: note:  
		    public def operator--(var num) : var {
		                       ^


$operator--:
line: 122 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	smovr_2 ebx, fp+2
line: 123 [0x7] 7:	movi #1, ebx
          [0x9] 9:	rstore ebx
          [0xa] 10:	movl 0
          [0xb] 11:	movn #0
          [0xc] 12:	movi #0, adx
          [0xe] 14:	chklen adx
          [0xf] 15:	iaload_2 ebx, adx
          [0x10] 16:	loadval egx
          [0x11] 17:	sub ebx, egx -> ebx
          [0x13] 19:	rstore ebx
          [0x14] 20:	loadval ebx
          [0x15] 21:	mov16 ebx, ebx
          [0x16] 22:	nop
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 0
          [0x19] 25:	movn #0
          [0x1a] 26:	movi #0, adx
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	rmov adx, ecx
line: 124 [0x1e] 30:	loadl ebx, fp+2
          [0x1f] 31:	return_val ebx
          [0x20] 32:	ret

func:@513 [std#short.$operator--] in file: lib/support//0.2.587//short.sharp:128:24: note:  
		    public def operator--() : var {
		                       ^


$operator--:
line: 128 [0x0] 0:	movi #1, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #0
          [0x5] 5:	movi #0, adx
          [0x7] 7:	chklen adx
          [0x8] 8:	iaload_2 ebx, adx
          [0x9] 9:	loadval egx
          [0xa] 10:	sub ebx, egx -> ebx
          [0xc] 12:	rstore ebx
          [0xd] 13:	loadval ebx
          [0xe] 14:	mov16 ebx, ebx
          [0xf] 15:	nop
          [0x10] 16:	rstore ebx
          [0x11] 17:	movl 0
          [0x12] 18:	movn #0
          [0x13] 19:	movi #0, adx
          [0x15] 21:	loadval ecx
          [0x16] 22:	rmov adx, ecx
          [0x17] 23:	return_val ebx
          [0x18] 24:	ret

func:@514 [std#short.value] in file: lib/support//0.2.587//short.sharp:132:21: note:  
		    public def value() : var {
		                    ^


value:
line: 132 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@515 [std#short.toString] in file: lib/support//0.2.587//short.sharp:136:24: note:  
		    public def delegate::toString() : string {
		                       ^


toString:
line: 136 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	newstr @226 // ""
          [0x2] 2:	call @558 // <std#string.string(var[])>
          [0x3] 3:	movl 0
          [0x4] 4:	movn #0
          [0x5] 5:	movi #0, adx
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	rstore ebx
          [0x9] 9:	call @579 // <std#string.$operator+(var)>
          [0xa] 10:	movsl #0
          [0xb] 11:	returnobj
          [0xc] 12:	ret

func:@516 [std#short.short] in file: lib/support//0.2.587//short.sharp:3:13: note:  
		public class short base integer {
		            ^


short:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@517 [std#strbuf.strbuf] in file: lib/support//0.2.587//strbuf.sharp:18:22: note:  
		        public strbuf()
		                     ^


strbuf:
        [0x0] 0:	movi #128, ebx
        [0x2] 2:	nop
        [0x3] 3:	rstore ebx
        [0x4] 4:	movl 0
        [0x5] 5:	movn #2
        [0x6] 6:	movi #0, adx
        [0x8] 8:	loadval ecx
        [0x9] 9:	rmov adx, ecx
        [0xa] 10:	movi #255, ebx
        [0xc] 12:	nop
        [0xd] 13:	rstore ebx
        [0xe] 14:	movl 0
        [0xf] 15:	movn #1
        [0x10] 16:	movi #0, adx
        [0x12] 18:	loadval ecx
        [0x13] 19:	rmov adx, ecx
line: 19 [0x14] 20:	movl 0
         [0x15] 21:	pushobj
         [0x16] 22:	call @518 // <std#strbuf.setdefault()>
         [0x17] 23:	movl 0
         [0x18] 24:	returnobj
         [0x19] 25:	ret

func:@518 [std#strbuf.setdefault] in file: lib/support//0.2.587//strbuf.sharp:23:31: note:  
		        private def setdefault()
		                              ^


setdefault:
line: 24 [0x0] 0:	movl 0
         [0x1] 1:	movn #1
         [0x2] 2:	movi #0, adx
         [0x4] 4:	chklen adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	newarry ebx
         [0x7] 7:	movl 0
         [0x8] 8:	movn #0
         [0x9] 9:	popobj
line: 25 [0xa] 10:	movl 0
         [0xb] 11:	movn #1
         [0xc] 12:	nop
         [0xd] 13:	movi #0, adx
         [0xf] 15:	iaload_2 ebx, adx
         [0x10] 16:	rstore ebx
         [0x11] 17:	movl 0
         [0x12] 18:	movn #3
         [0x13] 19:	movi #0, adx
         [0x15] 21:	loadval ecx
         [0x16] 22:	rmov adx, ecx
line: 26 [0x17] 23:	movi #1, ebx
         [0x19] 25:	imul ebx, #-1
         [0x1a] 26:	nop
         [0x1b] 27:	rstore ebx
         [0x1c] 28:	movl 0
         [0x1d] 29:	movn #4
         [0x1e] 30:	movi #0, adx
         [0x20] 32:	loadval ecx
         [0x21] 33:	rmov adx, ecx
         [0x22] 34:	ret

func:@519 [std#strbuf.strbuf] in file: lib/support//0.2.587//strbuf.sharp:30:22: note:  
		        public strbuf( var[] immstr )
		                     ^


strbuf:
        [0x0] 0:	movi #128, ebx
        [0x2] 2:	nop
        [0x3] 3:	rstore ebx
        [0x4] 4:	movl 0
        [0x5] 5:	movn #2
        [0x6] 6:	movi #0, adx
        [0x8] 8:	loadval ecx
        [0x9] 9:	rmov adx, ecx
        [0xa] 10:	movi #255, ebx
        [0xc] 12:	nop
        [0xd] 13:	rstore ebx
        [0xe] 14:	movl 0
        [0xf] 15:	movn #1
        [0x10] 16:	movi #0, adx
        [0x12] 18:	loadval ecx
        [0x13] 19:	rmov adx, ecx
line: 31 [0x14] 20:	movl 1
         [0x15] 21:	checknull
         [0x16] 22:	movr ebx, cmt
         [0x17] 23:	movi #30, adx
         [0x19] 25:	ifne
line: 32 [0x1a] 26:	movl 0
         [0x1b] 27:	pushobj
         [0x1c] 28:	call @518 // <std#strbuf.setdefault()>
         [0x1d] 29:	goto @68
line: 34 [0x1e] 30:	movl 1
         [0x1f] 31:	pushobj
         [0x20] 32:	movi #0, ebx
         [0x22] 34:	rstore ebx
         [0x23] 35:	movl 1
         [0x24] 36:	sizeof ebx
         [0x25] 37:	rstore ebx
         [0x26] 38:	call @621 // <std#__SRT_Global.memcpy(object,var,var)>
         [0x27] 39:	movsl #0
         [0x28] 40:	vcast 1
         [0x29] 41:	movl 0
         [0x2a] 42:	movn #0
         [0x2b] 43:	popobj
line: 35 [0x2c] 44:	movl 1
         [0x2d] 45:	sizeof ebx
         [0x2e] 46:	nop
         [0x2f] 47:	rstore ebx
         [0x30] 48:	movl 0
         [0x31] 49:	movn #3
         [0x32] 50:	movi #0, adx
         [0x34] 52:	loadval ecx
         [0x35] 53:	rmov adx, ecx
line: 36 [0x36] 54:	movl 0
         [0x37] 55:	movn #3
         [0x38] 56:	nop
         [0x39] 57:	movi #0, adx
         [0x3b] 59:	iaload_2 ebx, adx
         [0x3c] 60:	rstore ebx
         [0x3d] 61:	movl 0
         [0x3e] 62:	movn #4
         [0x3f] 63:	movi #0, adx
         [0x41] 65:	loadval ecx
         [0x42] 66:	rmov adx, ecx
         [0x43] 67:	nop
         [0x44] 68:	nop
         [0x45] 69:	movl 0
         [0x46] 70:	returnobj
         [0x47] 71:	ret

func:@520 [std#strbuf.strbuf] in file: lib/support//0.2.587//strbuf.sharp:41:22: note:  
		        public strbuf( var ch )
		                     ^


strbuf:
        [0x0] 0:	movi #128, ebx
        [0x2] 2:	nop
        [0x3] 3:	rstore ebx
        [0x4] 4:	movl 0
        [0x5] 5:	movn #2
        [0x6] 6:	movi #0, adx
        [0x8] 8:	loadval ecx
        [0x9] 9:	rmov adx, ecx
        [0xa] 10:	movi #255, ebx
        [0xc] 12:	nop
        [0xd] 13:	rstore ebx
        [0xe] 14:	movl 0
        [0xf] 15:	movn #1
        [0x10] 16:	movi #0, adx
        [0x12] 18:	loadval ecx
        [0x13] 19:	rmov adx, ecx
line: 42 [0x14] 20:	movl 0
         [0x15] 21:	pushobj
         [0x16] 22:	call @518 // <std#strbuf.setdefault()>
line: 43 [0x17] 23:	movl 0
         [0x18] 24:	pushobj
         [0x19] 25:	loadl ebx, fp+1
         [0x1a] 26:	rstore ebx
         [0x1b] 27:	call @526 // <std#strbuf.append(var)>
         [0x1c] 28:	pop
         [0x1d] 29:	movl 0
         [0x1e] 30:	returnobj
         [0x1f] 31:	ret

func:@521 [std#strbuf.strbuf] in file: lib/support//0.2.587//strbuf.sharp:47:22: note:  
		        public strbuf( char[] immstr )
		                     ^


strbuf:
        [0x0] 0:	movi #128, ebx
        [0x2] 2:	nop
        [0x3] 3:	rstore ebx
        [0x4] 4:	movl 0
        [0x5] 5:	movn #2
        [0x6] 6:	movi #0, adx
        [0x8] 8:	loadval ecx
        [0x9] 9:	rmov adx, ecx
        [0xa] 10:	movi #255, ebx
        [0xc] 12:	nop
        [0xd] 13:	rstore ebx
        [0xe] 14:	movl 0
        [0xf] 15:	movn #1
        [0x10] 16:	movi #0, adx
        [0x12] 18:	loadval ecx
        [0x13] 19:	rmov adx, ecx
line: 48 [0x14] 20:	movl 0
         [0x15] 21:	pushobj
         [0x16] 22:	call @518 // <std#strbuf.setdefault()>
line: 49 [0x17] 23:	movl 1
         [0x18] 24:	checknull
         [0x19] 25:	not cmt, cmt
         [0x1a] 26:	movr ebx, cmt
         [0x1b] 27:	movi #76, adx
         [0x1d] 29:	ifne
line: 51 [0x1e] 30:	movl 1
         [0x1f] 31:	sizeof ebx
         [0x20] 32:	newarry ebx
         [0x21] 33:	movl 2
         [0x22] 34:	popobj
line: 52 [0x23] 35:	istorel 0, fp+3
line: 53 [0x25] 37:	movi #0, ebx
         [0x27] 39:	rstore ebx
         [0x28] 40:	movl 1
         [0x29] 41:	smov ebx, sp+0
         [0x2a] 42:	sizeof egx
         [0x2b] 43:	lt ebx, egx
         [0x2c] 44:	movi #68, adx
         [0x2e] 46:	ifne
         [0x2f] 47:	movnd ebx
         [0x30] 48:	pushobj
         [0x31] 49:	movl 4
         [0x32] 50:	popobj
line: 54 [0x33] 51:	movl 4
         [0x34] 52:	pushobj
         [0x35] 53:	call @127 // <std#integer.getValue()>
         [0x36] 54:	loadval ebx
         [0x37] 55:	rstore ebx
         [0x38] 56:	movl 2
         [0x39] 57:	loadl ebx, fp+3
         [0x3a] 58:	movi #1, ecx
         [0x3c] 60:	addl ecx, @3
         [0x3d] 61:	chklen ebx
         [0x3e] 62:	loadval egx
         [0x3f] 63:	rmov ebx, egx
         [0x40] 64:	smov ebx, sp+0
         [0x41] 65:	inc ebx
         [0x42] 66:	smovr ebx, sp+0
         [0x43] 67:	goto @40
         [0x44] 68:	pop
line: 57 [0x45] 69:	movl 0
         [0x46] 70:	pushobj
         [0x47] 71:	movl 2
         [0x48] 72:	pushobj
         [0x49] 73:	call @528 // <std#strbuf.append(var[])>
         [0x4a] 74:	pop
         [0x4b] 75:	nop
         [0x4c] 76:	nop
         [0x4d] 77:	movl 0
         [0x4e] 78:	returnobj
         [0x4f] 79:	ret

func:@522 [std#strbuf.strbuf] in file: lib/support//0.2.587//strbuf.sharp:63:22: note:  
		        public strbuf(string str )
		                     ^


strbuf:
        [0x0] 0:	movi #128, ebx
        [0x2] 2:	nop
        [0x3] 3:	rstore ebx
        [0x4] 4:	movl 0
        [0x5] 5:	movn #2
        [0x6] 6:	movi #0, adx
        [0x8] 8:	loadval ecx
        [0x9] 9:	rmov adx, ecx
        [0xa] 10:	movi #255, ebx
        [0xc] 12:	nop
        [0xd] 13:	rstore ebx
        [0xe] 14:	movl 0
        [0xf] 15:	movn #1
        [0x10] 16:	movi #0, adx
        [0x12] 18:	loadval ecx
        [0x13] 19:	rmov adx, ecx
line: 64 [0x14] 20:	movl 0
         [0x15] 21:	pushobj
         [0x16] 22:	movl 1
         [0x17] 23:	pushobj
         [0x18] 24:	call @584 // <std#string.toArray()>
         [0x19] 25:	call @519 // <std#strbuf.strbuf(var[])>
         [0x1a] 26:	pop
         [0x1b] 27:	movl 0
         [0x1c] 28:	returnobj
         [0x1d] 29:	ret

func:@523 [std#strbuf.strbuf] in file: lib/support//0.2.587//strbuf.sharp:68:22: note:  
		        public strbuf( var[] immstr, var offset )
		                     ^


strbuf:
        [0x0] 0:	movi #128, ebx
        [0x2] 2:	nop
        [0x3] 3:	rstore ebx
        [0x4] 4:	movl 0
        [0x5] 5:	movn #2
        [0x6] 6:	movi #0, adx
        [0x8] 8:	loadval ecx
        [0x9] 9:	rmov adx, ecx
        [0xa] 10:	movi #255, ebx
        [0xc] 12:	nop
        [0xd] 13:	rstore ebx
        [0xe] 14:	movl 0
        [0xf] 15:	movn #1
        [0x10] 16:	movi #0, adx
        [0x12] 18:	loadval ecx
        [0x13] 19:	rmov adx, ecx
line: 69 [0x14] 20:	movl 1
         [0x15] 21:	checknull
         [0x16] 22:	movr ebx, cmt
         [0x17] 23:	movi #30, adx
         [0x19] 25:	ifne
line: 70 [0x1a] 26:	movl 0
         [0x1b] 27:	pushobj
         [0x1c] 28:	call @518 // <std#strbuf.setdefault()>
         [0x1d] 29:	goto @67
line: 72 [0x1e] 30:	movl 1
         [0x1f] 31:	pushobj
         [0x20] 32:	loadl ebx, fp+2
         [0x21] 33:	rstore ebx
         [0x22] 34:	movl 1
         [0x23] 35:	sizeof ebx
         [0x24] 36:	rstore ebx
         [0x25] 37:	call @621 // <std#__SRT_Global.memcpy(object,var,var)>
         [0x26] 38:	movsl #0
         [0x27] 39:	vcast 1
         [0x28] 40:	movl 0
         [0x29] 41:	movn #0
         [0x2a] 42:	popobj
line: 73 [0x2b] 43:	movl 1
         [0x2c] 44:	sizeof ebx
         [0x2d] 45:	nop
         [0x2e] 46:	rstore ebx
         [0x2f] 47:	movl 0
         [0x30] 48:	movn #3
         [0x31] 49:	movi #0, adx
         [0x33] 51:	loadval ecx
         [0x34] 52:	rmov adx, ecx
line: 74 [0x35] 53:	movl 0
         [0x36] 54:	movn #3
         [0x37] 55:	nop
         [0x38] 56:	movi #0, adx
         [0x3a] 58:	iaload_2 ebx, adx
         [0x3b] 59:	rstore ebx
         [0x3c] 60:	movl 0
         [0x3d] 61:	movn #4
         [0x3e] 62:	movi #0, adx
         [0x40] 64:	loadval ecx
         [0x41] 65:	rmov adx, ecx
         [0x42] 66:	nop
         [0x43] 67:	nop
         [0x44] 68:	movl 0
         [0x45] 69:	returnobj
         [0x46] 70:	ret

func:@524 [std#strbuf.strbuf] in file: lib/support//0.2.587//strbuf.sharp:79:22: note:  
		        public strbuf( var[] immstr, var offset, var endIndex )
		                     ^


strbuf:
        [0x0] 0:	movi #128, ebx
        [0x2] 2:	nop
        [0x3] 3:	rstore ebx
        [0x4] 4:	movl 0
        [0x5] 5:	movn #2
        [0x6] 6:	movi #0, adx
        [0x8] 8:	loadval ecx
        [0x9] 9:	rmov adx, ecx
        [0xa] 10:	movi #255, ebx
        [0xc] 12:	nop
        [0xd] 13:	rstore ebx
        [0xe] 14:	movl 0
        [0xf] 15:	movn #1
        [0x10] 16:	movi #0, adx
        [0x12] 18:	loadval ecx
        [0x13] 19:	rmov adx, ecx
line: 80 [0x14] 20:	movl 1
         [0x15] 21:	checknull
         [0x16] 22:	movr ebx, cmt
         [0x17] 23:	movi #30, adx
         [0x19] 25:	ifne
line: 81 [0x1a] 26:	movl 0
         [0x1b] 27:	pushobj
         [0x1c] 28:	call @518 // <std#strbuf.setdefault()>
         [0x1d] 29:	goto @66
line: 83 [0x1e] 30:	movl 1
         [0x1f] 31:	pushobj
         [0x20] 32:	loadl ebx, fp+2
         [0x21] 33:	rstore ebx
         [0x22] 34:	loadl ebx, fp+3
         [0x23] 35:	rstore ebx
         [0x24] 36:	call @621 // <std#__SRT_Global.memcpy(object,var,var)>
         [0x25] 37:	movsl #0
         [0x26] 38:	vcast 1
         [0x27] 39:	movl 0
         [0x28] 40:	movn #0
         [0x29] 41:	popobj
line: 84 [0x2a] 42:	movl 1
         [0x2b] 43:	sizeof ebx
         [0x2c] 44:	nop
         [0x2d] 45:	rstore ebx
         [0x2e] 46:	movl 0
         [0x2f] 47:	movn #3
         [0x30] 48:	movi #0, adx
         [0x32] 50:	loadval ecx
         [0x33] 51:	rmov adx, ecx
line: 85 [0x34] 52:	movl 0
         [0x35] 53:	movn #3
         [0x36] 54:	nop
         [0x37] 55:	movi #0, adx
         [0x39] 57:	iaload_2 ebx, adx
         [0x3a] 58:	rstore ebx
         [0x3b] 59:	movl 0
         [0x3c] 60:	movn #4
         [0x3d] 61:	movi #0, adx
         [0x3f] 63:	loadval ecx
         [0x40] 64:	rmov adx, ecx
         [0x41] 65:	nop
         [0x42] 66:	nop
         [0x43] 67:	movl 0
         [0x44] 68:	returnobj
         [0x45] 69:	ret

func:@525 [std#strbuf.replace] in file: lib/support//0.2.587//strbuf.sharp:90:27: note:  
		        public def replace( var pos, var replaceChar ) : strbuf
		                          ^


replace:
line: 91 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	sizeof ebx
         [0x3] 3:	movr egx, ebx
         [0x4] 4:	loadl ebx, fp+1
         [0x5] 5:	gte ebx, egx
         [0x6] 6:	movr ebx, cmt
         [0x7] 7:	movi #15, adx
         [0x9] 9:	ifne
line: 92 [0xa] 10:	new_class @43 // std#RuntimeErr
         [0xb] 11:	newstr @294 // "Index out of bounds exception"
         [0xc] 12:	call @481 // <std#RuntimeErr.RuntimeErr(var[])>
         [0xd] 13:	throw 
         [0xe] 14:	nop
         [0xf] 15:	nop
line: 95 [0x10] 16:	loadl ebx, fp+2
         [0x11] 17:	rstore ebx
         [0x12] 18:	movl 0
         [0x13] 19:	movn #0
         [0x14] 20:	loadl ebx, fp+1
         [0x15] 21:	chklen ebx
         [0x16] 22:	loadval egx
         [0x17] 23:	rmov ebx, egx
line: 96 [0x18] 24:	movl 0
         [0x19] 25:	returnobj
         [0x1a] 26:	ret

func:@526 [std#strbuf.append] in file: lib/support//0.2.587//strbuf.sharp:100:19: note:  
		        def append(var char) : strbuf
		                  ^


append:
line: 101 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	checknull
          [0x3] 3:	movr ebx, cmt
          [0x4] 4:	movi #11, adx
          [0x6] 6:	ifne
line: 102 [0x7] 7:	movl 0
          [0x8] 8:	pushobj
          [0x9] 9:	call @518 // <std#strbuf.setdefault()>
          [0xa] 10:	goto @85
line: 105 [0xb] 11:	movi #1, ebx
          [0xd] 13:	rstore ebx
          [0xe] 14:	movl 0
          [0xf] 15:	movn #4
          [0x10] 16:	movi #0, adx
          [0x12] 18:	iaload_2 ebx, adx
          [0x13] 19:	rstore ebx
          [0x14] 20:	movl 0
          [0x15] 21:	movn #3
          [0x16] 22:	movi #0, adx
          [0x18] 24:	chklen adx
          [0x19] 25:	iaload_2 ebx, adx
          [0x1a] 26:	loadval egx
          [0x1b] 27:	sub ebx, egx -> ebx
          [0x1d] 29:	rstore ebx
          [0x1e] 30:	loadval ebx
          [0x1f] 31:	loadval ecx
          [0x20] 32:	lte ebx, ecx
          [0x21] 33:	movr ebx, cmt
          [0x22] 34:	movi #83, adx
          [0x24] 36:	ifne
line: 106 [0x25] 37:	movi #3, ebx
          [0x27] 39:	rstore ebx
          [0x28] 40:	movl 0
          [0x29] 41:	movn #0
          [0x2a] 42:	sizeof ebx
          [0x2b] 43:	loadval ecx
          [0x2c] 44:	shr ebx, ecx -> ebx
          [0x2e] 46:	rstore ebx
          [0x2f] 47:	movl 0
          [0x30] 48:	movn #0
          [0x31] 49:	sizeof ebx
          [0x32] 50:	loadval ecx
          [0x33] 51:	add ebx, ecx -> ebx
          [0x35] 53:	rstore ebx
          [0x36] 54:	movl 0
          [0x37] 55:	movn #2
          [0x38] 56:	movi #0, adx
          [0x3a] 58:	iaload_2 ebx, adx
          [0x3b] 59:	rstore ebx
          [0x3c] 60:	loadval ebx
          [0x3d] 61:	loadval egx
          [0x3e] 62:	add ebx, egx -> ebx
          [0x40] 64:	rstore ebx
          [0x41] 65:	nop
          [0x42] 66:	movl 0
          [0x43] 67:	movn #3
          [0x44] 68:	movi #0, adx
          [0x46] 70:	loadval ecx
          [0x47] 71:	rmov adx, ecx
line: 107 [0x48] 72:	movl 0
          [0x49] 73:	movn #0
          [0x4a] 74:	pushobj
          [0x4b] 75:	movl 0
          [0x4c] 76:	movn #3
          [0x4d] 77:	movi #0, adx
          [0x4f] 79:	iaload_2 ebx, adx
          [0x50] 80:	rstore ebx
          [0x51] 81:	call @622 // <std#__SRT_Global.realloc(object,var)>
          [0x52] 82:	nop
          [0x53] 83:	nop
          [0x54] 84:	nop
          [0x55] 85:	nop
line: 111 [0x56] 86:	loadl ebx, fp+1
          [0x57] 87:	rstore ebx
          [0x58] 88:	movl 0
          [0x59] 89:	movn #0
          [0x5a] 90:	pushobj
          [0x5b] 91:	movl 0
          [0x5c] 92:	movn #4
          [0x5d] 93:	movi #0, adx
          [0x5f] 95:	chklen adx
          [0x60] 96:	iaload_2 ebx, adx
          [0x61] 97:	inc ebx
          [0x62] 98:	rmov adx, ebx
          [0x63] 99:	movsl #0
          [0x64] 100:	chklen ebx
          [0x65] 101:	pop
          [0x66] 102:	loadval egx
          [0x67] 103:	rmov ebx, egx
line: 112 [0x68] 104:	movl 0
          [0x69] 105:	returnobj
          [0x6a] 106:	ret

func:@527 [std#strbuf.append] in file: lib/support//0.2.587//strbuf.sharp:116:19: note:  
		        def append(char c) : strbuf
		                  ^


append:
line: 117 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	movl 1
          [0x3] 3:	pushobj
          [0x4] 4:	call @127 // <std#integer.getValue()>
          [0x5] 5:	call @526 // <std#strbuf.append(var)>
          [0x6] 6:	movsl #0
          [0x7] 7:	returnobj
          [0x8] 8:	ret

func:@528 [std#strbuf.append] in file: lib/support//0.2.587//strbuf.sharp:121:19: note:  
		        def append(var[] immstr) : strbuf
		                  ^


append:
line: 122 [0x0] 0:	movl 1
          [0x1] 1:	checknull
          [0x2] 2:	movr ebx, cmt
          [0x3] 3:	movi #10, adx
          [0x5] 5:	ifne
line: 122 [0x6] 6:	movl 0
          [0x7] 7:	returnobj
          [0x8] 8:	ret
          [0x9] 9:	nop
          [0xa] 10:	nop
line: 124 [0xb] 11:	movl 0
          [0xc] 12:	movn #4
          [0xd] 13:	movi #0, adx
          [0xf] 15:	chklen adx
          [0x10] 16:	iaload_2 ebx, adx
          [0x11] 17:	smovr_2 ebx, fp+2
line: 126 [0x12] 18:	movl 0
          [0x13] 19:	movn #0
          [0x14] 20:	checknull
          [0x15] 21:	movr ebx, cmt
          [0x16] 22:	movi #66, adx
          [0x18] 24:	ifne
line: 127 [0x19] 25:	movl 0
          [0x1a] 26:	movn #1
          [0x1b] 27:	movi #0, adx
          [0x1d] 29:	iaload_2 ebx, adx
          [0x1e] 30:	rstore ebx
          [0x1f] 31:	movl 1
          [0x20] 32:	sizeof ebx
          [0x21] 33:	loadval egx
          [0x22] 34:	add ebx, egx -> ebx
          [0x24] 36:	rstore ebx
          [0x25] 37:	nop
          [0x26] 38:	movl 0
          [0x27] 39:	movn #3
          [0x28] 40:	movi #0, adx
          [0x2a] 42:	loadval ecx
          [0x2b] 43:	rmov adx, ecx
line: 128 [0x2c] 44:	movi #1, ebx
          [0x2e] 46:	imul ebx, #-1
          [0x2f] 47:	nop
          [0x30] 48:	rstore ebx
          [0x31] 49:	movl 0
          [0x32] 50:	movn #4
          [0x33] 51:	movi #0, adx
          [0x35] 53:	loadval ecx
          [0x36] 54:	rmov adx, ecx
line: 129 [0x37] 55:	movl 0
          [0x38] 56:	movn #3
          [0x39] 57:	movi #0, adx
          [0x3b] 59:	chklen adx
          [0x3c] 60:	iaload_2 ebx, adx
          [0x3d] 61:	newarry ebx
          [0x3e] 62:	movl 0
          [0x3f] 63:	movn #0
          [0x40] 64:	popobj
          [0x41] 65:	goto @147
line: 132 [0x42] 66:	movl 1
          [0x43] 67:	sizeof ebx
          [0x44] 68:	rstore ebx
          [0x45] 69:	movl 0
          [0x46] 70:	movn #4
          [0x47] 71:	movi #0, adx
          [0x49] 73:	iaload_2 ebx, adx
          [0x4a] 74:	rstore ebx
          [0x4b] 75:	movl 0
          [0x4c] 76:	movn #3
          [0x4d] 77:	movi #0, adx
          [0x4f] 79:	chklen adx
          [0x50] 80:	iaload_2 ebx, adx
          [0x51] 81:	loadval egx
          [0x52] 82:	sub ebx, egx -> ebx
          [0x54] 84:	rstore ebx
          [0x55] 85:	loadval ebx
          [0x56] 86:	loadval ecx
          [0x57] 87:	lte ebx, ecx
          [0x58] 88:	movr ebx, cmt
          [0x59] 89:	movi #145, adx
          [0x5b] 91:	ifne
line: 133 [0x5c] 92:	movl 1
          [0x5d] 93:	sizeof ebx
          [0x5e] 94:	rstore ebx
          [0x5f] 95:	movl 0
          [0x60] 96:	movn #0
          [0x61] 97:	sizeof ebx
          [0x62] 98:	loadval ecx
          [0x63] 99:	add ebx, ecx -> ebx
          [0x65] 101:	rstore ebx
          [0x66] 102:	loadval ebx
          [0x67] 103:	smovr_2 ebx, fp+3
line: 134 [0x68] 104:	movi #3, ebx
          [0x6a] 106:	movr egx, ebx
          [0x6b] 107:	loadl ebx, fp+3
          [0x6c] 108:	shr ebx, egx -> ebx
          [0x6e] 110:	rstore ebx
          [0x6f] 111:	loadl ebx, fp+3
          [0x70] 112:	loadval egx
          [0x71] 113:	add ebx, egx -> ebx
          [0x73] 115:	rstore ebx
          [0x74] 116:	movl 0
          [0x75] 117:	movn #2
          [0x76] 118:	movi #0, adx
          [0x78] 120:	iaload_2 ebx, adx
          [0x79] 121:	rstore ebx
          [0x7a] 122:	loadval ebx
          [0x7b] 123:	loadval egx
          [0x7c] 124:	add ebx, egx -> ebx
          [0x7e] 126:	rstore ebx
          [0x7f] 127:	nop
          [0x80] 128:	movl 0
          [0x81] 129:	movn #3
          [0x82] 130:	movi #0, adx
          [0x84] 132:	loadval ecx
          [0x85] 133:	rmov adx, ecx
line: 135 [0x86] 134:	movl 0
          [0x87] 135:	movn #0
          [0x88] 136:	pushobj
          [0x89] 137:	movl 0
          [0x8a] 138:	movn #3
          [0x8b] 139:	movi #0, adx
          [0x8d] 141:	iaload_2 ebx, adx
          [0x8e] 142:	rstore ebx
          [0x8f] 143:	call @622 // <std#__SRT_Global.realloc(object,var)>
          [0x90] 144:	nop
          [0x91] 145:	nop
          [0x92] 146:	nop
          [0x93] 147:	nop
line: 139 [0x94] 148:	istorel 0, fp+4
          [0x96] 150:	movl 1
          [0x97] 151:	sizeof ebx
          [0x98] 152:	movr egx, ebx
          [0x99] 153:	loadl ebx, fp+4
          [0x9a] 154:	lt ebx, egx
          [0x9b] 155:	movr ebx, cmt
          [0x9c] 156:	movi #180, adx
          [0x9e] 158:	ifne
line: 141 [0x9f] 159:	movl 1
          [0xa0] 160:	loadl ebx, fp+4
          [0xa1] 161:	chklen ebx
          [0xa2] 162:	iaload_2 ebx, ebx
          [0xa3] 163:	mov16 ebx, ebx
          [0xa4] 164:	rstore ebx
          [0xa5] 165:	movl 0
          [0xa6] 166:	movn #0
          [0xa7] 167:	loadl ebx, fp+2
          [0xa8] 168:	movi #1, ecx
          [0xaa] 170:	addl ecx, @2
          [0xab] 171:	inc ebx
          [0xac] 172:	chklen ebx
          [0xad] 173:	loadval egx
          [0xae] 174:	rmov ebx, egx
          [0xaf] 175:	loadl ebx, fp+4
          [0xb0] 176:	movi #1, ecx
          [0xb2] 178:	addl ecx, @4
          [0xb3] 179:	goto @150
line: 144 [0xb4] 180:	loadl ebx, fp+2
          [0xb5] 181:	nop
          [0xb6] 182:	rstore ebx
          [0xb7] 183:	movl 0
          [0xb8] 184:	movn #4
          [0xb9] 185:	movi #0, adx
          [0xbb] 187:	loadval ecx
          [0xbc] 188:	rmov adx, ecx
line: 145 [0xbd] 189:	movl 0
          [0xbe] 190:	returnobj
          [0xbf] 191:	ret

func:@529 [std#strbuf.at] in file: lib/support//0.2.587//strbuf.sharp:149:22: note:  
		        public def at( var pos ) : var
		                     ^


at:
line: 150 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	sizeof ebx
          [0x3] 3:	movr egx, ebx
          [0x4] 4:	loadl ebx, fp+1
          [0x5] 5:	gte ebx, egx
          [0x6] 6:	movr ebx, cmt
          [0x7] 7:	movi #27, adx
          [0x9] 9:	ifne
line: 151 [0xa] 10:	new_class @43 // std#RuntimeErr
          [0xb] 11:	new_class @46 // std#string
          [0xc] 12:	newstr @295 // "Index out of bounds Array: size "
          [0xd] 13:	call @558 // <std#string.string(var[])>
          [0xe] 14:	movl 0
          [0xf] 15:	movn #0
          [0x10] 16:	sizeof ebx
          [0x11] 17:	rstore ebx
          [0x12] 18:	call @579 // <std#string.$operator+(var)>
          [0x13] 19:	newstr @296 // " at index pos "
          [0x14] 20:	call @572 // <std#string.$operator+(var[])>
          [0x15] 21:	loadl ebx, fp+1
          [0x16] 22:	rstore ebx
          [0x17] 23:	call @579 // <std#string.$operator+(var)>
          [0x18] 24:	call @482 // <std#RuntimeErr.RuntimeErr(std#string)>
          [0x19] 25:	throw 
          [0x1a] 26:	nop
          [0x1b] 27:	nop
line: 155 [0x1c] 28:	movl 0
          [0x1d] 29:	movn #0
          [0x1e] 30:	loadl ebx, fp+1
          [0x1f] 31:	chklen ebx
          [0x20] 32:	iaload_2 ebx, ebx
          [0x21] 33:	return_val ebx
          [0x22] 34:	ret

func:@530 [std#strbuf.fmt] in file: lib/support//0.2.587//strbuf.sharp:159:30: note:  
		        public static def fmt( var _fmt ) {
		                             ^


fmt:
line: 159 [0x0] 0:	loadl ebx, fp+0
          [0x1] 1:	nop
          [0x2] 2:	rstore ebx
          [0x3] 3:	movg @45 // @std#strbuf
          [0x4] 4:	movn #5
          [0x5] 5:	movi #0, adx
          [0x7] 7:	loadval ecx
          [0x8] 8:	rmov adx, ecx
line: 160 [0x9] 9:	loadl ebx, fp+0
          [0xa] 10:	rstore ebx
          [0xb] 11:	movi #102, ebx
          [0xd] 13:	movr egx, ebx
          [0xe] 14:	loadval ebx
          [0xf] 15:	tne ebx, egx
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	cmp ebx, 1
          [0x12] 18:	movr ebx, cmt
          [0x13] 19:	skne 13 // pc = 32
          [0x14] 20:	istore 1
          [0x15] 21:	loadl ebx, fp+0
          [0x16] 22:	rstore ebx
          [0x17] 23:	movi #70, ebx
          [0x19] 25:	movr egx, ebx
          [0x1a] 26:	loadval ebx
          [0x1b] 27:	tne ebx, egx
          [0x1c] 28:	movr ebx, cmt
          [0x1d] 29:	loadval ecx
          [0x1e] 30:	and ecx, ebx
          [0x1f] 31:	movr ebx, cmt
          [0x20] 32:	movr cmt, ebx
          [0x21] 33:	movi #47, adx
          [0x23] 35:	ifne
line: 160 [0x24] 36:	movi #0, ebx
          [0x26] 38:	nop
          [0x27] 39:	rstore ebx
          [0x28] 40:	movg @45 // @std#strbuf
          [0x29] 41:	movn #6
          [0x2a] 42:	movi #0, adx
          [0x2c] 44:	loadval ecx
          [0x2d] 45:	rmov adx, ecx
          [0x2e] 46:	nop
          [0x2f] 47:	nop
          [0x30] 48:	ret

func:@531 [std#strbuf.precision] in file: lib/support//0.2.587//strbuf.sharp:164:36: note:  
		        public static def precision( var prec ) {
		                                   ^


precision:
line: 164 [0x0] 0:	movi #0, ebx
          [0x2] 2:	movr egx, ebx
          [0x3] 3:	loadl ebx, fp+0
          [0x4] 4:	lt ebx, egx
          [0x5] 5:	movr ebx, cmt
          [0x6] 6:	movi #19, adx
          [0x8] 8:	ifne
line: 165 [0x9] 9:	new_class @11 // std#IllegalArgumentException
          [0xa] 10:	new_class @46 // std#string
          [0xb] 11:	newstr @297 // "invalid precision: "
          [0xc] 12:	call @558 // <std#string.string(var[])>
          [0xd] 13:	loadl ebx, fp+0
          [0xe] 14:	rstore ebx
          [0xf] 15:	call @579 // <std#string.$operator+(var)>
          [0x10] 16:	call @85 // <std#IllegalArgumentException.IllegalArgumentException(std#string)>
          [0x11] 17:	throw 
          [0x12] 18:	nop
          [0x13] 19:	nop
line: 166 [0x14] 20:	loadl ebx, fp+0
          [0x15] 21:	nop
          [0x16] 22:	rstore ebx
          [0x17] 23:	movg @45 // @std#strbuf
          [0x18] 24:	movn #6
          [0x19] 25:	movi #0, adx
          [0x1b] 27:	loadval ecx
          [0x1c] 28:	rmov adx, ecx
          [0x1d] 29:	ret

func:@532 [std#strbuf.$operator+] in file: lib/support//0.2.587//strbuf.sharp:170:28: note:  
		        public def operator+( var[] immstr ) : string
		                           ^


$operator+:
line: 171 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	movl 0
          [0x2] 2:	movn #0
          [0x3] 3:	pushobj
          [0x4] 4:	call @558 // <std#string.string(var[])>
          [0x5] 5:	movl 2
          [0x6] 6:	popobj
line: 172 [0x7] 7:	movl 1
          [0x8] 8:	checknull
          [0x9] 9:	not cmt, cmt
          [0xa] 10:	movr ebx, cmt
          [0xb] 11:	movi #23, adx
          [0xd] 13:	ifne
line: 173 [0xe] 14:	movl 2
          [0xf] 15:	pushobj
          [0x10] 16:	movl 1
          [0x11] 17:	pushobj
          [0x12] 18:	call @582 // <std#string.$operator+=(var[])>
          [0x13] 19:	movsl #0
          [0x14] 20:	returnobj
          [0x15] 21:	ret
          [0x16] 22:	goto @31
line: 175 [0x17] 23:	movl 2
          [0x18] 24:	pushobj
          [0x19] 25:	newstr @243 // "null"
          [0x1a] 26:	call @582 // <std#string.$operator+=(var[])>
          [0x1b] 27:	movsl #0
          [0x1c] 28:	returnobj
          [0x1d] 29:	ret
          [0x1e] 30:	nop
          [0x1f] 31:	nop
          [0x20] 32:	pushnil 
          [0x21] 33:	popobj
          [0x22] 34:	returnobj
          [0x23] 35:	ret

func:@533 [std#strbuf.$operator+] in file: lib/support//0.2.587//strbuf.sharp:179:28: note:  
		        public def operator+( Printable o ) : string
		                           ^


$operator+:
line: 180 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	movl 0
          [0x2] 2:	movn #0
          [0x3] 3:	pushobj
          [0x4] 4:	call @558 // <std#string.string(var[])>
          [0x5] 5:	movl 2
          [0x6] 6:	popobj
line: 181 [0x7] 7:	movl 1
          [0x8] 8:	pushobj
          [0x9] 9:	invoke_delegate 4, 0
          [0xa] 10:	movsl #0
          [0xb] 11:	movn #0
          [0xc] 12:	pushobj
          [0xd] 13:	movl 3
          [0xe] 14:	popobj
line: 182 [0xf] 15:	movl 1
          [0x10] 16:	checknull
          [0x11] 17:	not cmt, cmt
          [0x12] 18:	movr ebx, cmt
          [0x13] 19:	cmp ebx, 1
          [0x14] 20:	movr ebx, cmt
          [0x15] 21:	skne 9 // pc = 30
          [0x16] 22:	istore 1
          [0x17] 23:	movl 3
          [0x18] 24:	checknull
          [0x19] 25:	not cmt, cmt
          [0x1a] 26:	movr ebx, cmt
          [0x1b] 27:	loadval ecx
          [0x1c] 28:	and ecx, ebx
          [0x1d] 29:	movr ebx, cmt
          [0x1e] 30:	movr cmt, ebx
          [0x1f] 31:	movi #43, adx
          [0x21] 33:	ifne
line: 183 [0x22] 34:	movl 2
          [0x23] 35:	pushobj
          [0x24] 36:	movl 3
          [0x25] 37:	pushobj
          [0x26] 38:	call @582 // <std#string.$operator+=(var[])>
          [0x27] 39:	movsl #0
          [0x28] 40:	returnobj
          [0x29] 41:	ret
          [0x2a] 42:	goto @51
line: 185 [0x2b] 43:	movl 2
          [0x2c] 44:	pushobj
          [0x2d] 45:	newstr @243 // "null"
          [0x2e] 46:	call @582 // <std#string.$operator+=(var[])>
          [0x2f] 47:	movsl #0
          [0x30] 48:	returnobj
          [0x31] 49:	ret
          [0x32] 50:	nop
          [0x33] 51:	nop
          [0x34] 52:	pushnil 
          [0x35] 53:	popobj
          [0x36] 54:	returnobj
          [0x37] 55:	ret

func:@534 [std#strbuf.$operator==] in file: lib/support//0.2.587//strbuf.sharp:189:28: note:  
		        public def operator==( string str ) : var
		                           ^


$operator==:
line: 190 [0x0] 0:	movl 1
          [0x1] 1:	pushobj
          [0x2] 2:	call @595 // <std#string.size()>
          [0x3] 3:	movl 0
          [0x4] 4:	movn #0
          [0x5] 5:	sizeof ebx
          [0x6] 6:	movr egx, ebx
          [0x7] 7:	loadval ebx
          [0x8] 8:	tne ebx, egx
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	movi #18, adx
          [0xc] 12:	ifne
line: 191 [0xd] 13:	movi #0, ebx
          [0xf] 15:	return_val ebx
          [0x10] 16:	ret
          [0x11] 17:	nop
          [0x12] 18:	nop
line: 194 [0x13] 19:	istorel 0, fp+2
line: 195 [0x15] 21:	movi #0, ebx
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 0
          [0x19] 25:	movn #0
          [0x1a] 26:	smov ebx, sp+0
          [0x1b] 27:	sizeof egx
          [0x1c] 28:	lt ebx, egx
          [0x1d] 29:	movi #61, adx
          [0x1f] 31:	ifne
          [0x20] 32:	iaload_2 ebx, ebx
          [0x21] 33:	smovr_2 ebx, fp+3
line: 196 [0x22] 34:	loadl ebx, fp+3
          [0x23] 35:	rstore ebx
          [0x24] 36:	movl 1
          [0x25] 37:	pushobj
          [0x26] 38:	loadl ebx, fp+2
          [0x27] 39:	movi #1, ecx
          [0x29] 41:	addl ecx, @2
          [0x2a] 42:	rstore ebx
          [0x2b] 43:	call @569 // <std#string.at(var)>
          [0x2c] 44:	loadval egx
          [0x2d] 45:	loadval ebx
          [0x2e] 46:	tne ebx, egx
          [0x2f] 47:	movr ebx, cmt
          [0x30] 48:	movi #56, adx
          [0x32] 50:	ifne
line: 197 [0x33] 51:	movi #0, ebx
          [0x35] 53:	return_val ebx
          [0x36] 54:	ret
          [0x37] 55:	nop
          [0x38] 56:	nop
          [0x39] 57:	smov ebx, sp+0
          [0x3a] 58:	inc ebx
          [0x3b] 59:	smovr ebx, sp+0
          [0x3c] 60:	goto @24
          [0x3d] 61:	pop
line: 201 [0x3e] 62:	movi #1, ebx
          [0x40] 64:	return_val ebx
          [0x41] 65:	ret

func:@535 [std#strbuf.$operator!=] in file: lib/support//0.2.587//strbuf.sharp:205:28: note:  
		        public def operator!=( string str ) : var {
		                           ^


$operator!=:
line: 205 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	movl 1
          [0x3] 3:	pushobj
          [0x4] 4:	call @534 // <std#strbuf.$operator==(std#string)>
          [0x5] 5:	loadval ebx
          [0x6] 6:	not ebx, ebx
          [0x7] 7:	return_val ebx
          [0x8] 8:	ret

func:@536 [std#strbuf.$operator==] in file: lib/support//0.2.587//strbuf.sharp:209:28: note:  
		        public def operator==( var[] str ) : var
		                           ^


$operator==:
line: 210 [0x0] 0:	movl 1
          [0x1] 1:	sizeof ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #0
          [0x5] 5:	sizeof ebx
          [0x6] 6:	movr egx, ebx
          [0x7] 7:	loadval ebx
          [0x8] 8:	tne ebx, egx
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	movi #18, adx
          [0xc] 12:	ifne
line: 211 [0xd] 13:	movi #0, ebx
          [0xf] 15:	return_val ebx
          [0x10] 16:	ret
          [0x11] 17:	nop
          [0x12] 18:	nop
line: 214 [0x13] 19:	istorel 0, fp+2
line: 215 [0x15] 21:	movi #0, ebx
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 0
          [0x19] 25:	movn #0
          [0x1a] 26:	smov ebx, sp+0
          [0x1b] 27:	sizeof egx
          [0x1c] 28:	lt ebx, egx
          [0x1d] 29:	movi #60, adx
          [0x1f] 31:	ifne
          [0x20] 32:	iaload_2 ebx, ebx
          [0x21] 33:	smovr_2 ebx, fp+3
line: 216 [0x22] 34:	loadl ebx, fp+3
          [0x23] 35:	rstore ebx
          [0x24] 36:	movl 1
          [0x25] 37:	loadl ebx, fp+2
          [0x26] 38:	movi #1, ecx
          [0x28] 40:	addl ecx, @2
          [0x29] 41:	chklen ebx
          [0x2a] 42:	iaload_2 ebx, ebx
          [0x2b] 43:	movr egx, ebx
          [0x2c] 44:	loadval ebx
          [0x2d] 45:	tne ebx, egx
          [0x2e] 46:	movr ebx, cmt
          [0x2f] 47:	movi #55, adx
          [0x31] 49:	ifne
line: 217 [0x32] 50:	movi #0, ebx
          [0x34] 52:	return_val ebx
          [0x35] 53:	ret
          [0x36] 54:	nop
          [0x37] 55:	nop
          [0x38] 56:	smov ebx, sp+0
          [0x39] 57:	inc ebx
          [0x3a] 58:	smovr ebx, sp+0
          [0x3b] 59:	goto @24
          [0x3c] 60:	pop
line: 221 [0x3d] 61:	movi #1, ebx
          [0x3f] 63:	return_val ebx
          [0x40] 64:	ret

func:@537 [std#strbuf.$operator!=] in file: lib/support//0.2.587//strbuf.sharp:225:28: note:  
		        public def operator!=( var[] str ) : var {
		                           ^


$operator!=:
line: 225 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	new_class @46 // std#string
          [0x3] 3:	movl 1
          [0x4] 4:	pushobj
          [0x5] 5:	call @558 // <std#string.string(var[])>
          [0x6] 6:	call @534 // <std#strbuf.$operator==(std#string)>
          [0x7] 7:	loadval ebx
          [0x8] 8:	not ebx, ebx
          [0x9] 9:	return_val ebx
          [0xa] 10:	ret

func:@538 [std#strbuf.$operator=] in file: lib/support//0.2.587//strbuf.sharp:229:28: note:  
		        public def operator=( var[] immstr )
		                           ^


$operator=:
line: 230 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	call @539 // <std#strbuf.clear()>
line: 231 [0x3] 3:	movl 0
          [0x4] 4:	pushobj
          [0x5] 5:	movl 1
          [0x6] 6:	pushobj
          [0x7] 7:	call @528 // <std#strbuf.append(var[])>
          [0x8] 8:	pop
          [0x9] 9:	ret

func:@539 [std#strbuf.clear] in file: lib/support//0.2.587//strbuf.sharp:235:26: note:  
		        private def clear()
		                         ^


clear:
line: 236 [0x0] 0:	movl 0
          [0x1] 1:	movn #1
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	movl 0
          [0x7] 7:	movn #3
          [0x8] 8:	movi #0, adx
          [0xa] 10:	chklen adx
          [0xb] 11:	iaload_2 ebx, adx
          [0xc] 12:	gt ebx, egx
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	movi #21, adx
          [0x10] 16:	ifne
line: 237 [0x11] 17:	movl 0
          [0x12] 18:	pushobj
          [0x13] 19:	call @518 // <std#strbuf.setdefault()>
          [0x14] 20:	nop
          [0x15] 21:	nop
line: 240 [0x16] 22:	movi #1, ebx
          [0x18] 24:	imul ebx, #-1
          [0x19] 25:	nop
          [0x1a] 26:	rstore ebx
          [0x1b] 27:	movl 0
          [0x1c] 28:	movn #4
          [0x1d] 29:	movi #0, adx
          [0x1f] 31:	loadval ecx
          [0x20] 32:	rmov adx, ecx
          [0x21] 33:	ret

func:@540 [std#strbuf.$operator+] in file: lib/support//0.2.587//strbuf.sharp:244:28: note:  
		        public def operator+( var num ) : string
		                           ^


$operator+:
line: 245 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	movl 0
          [0x2] 2:	movn #0
          [0x3] 3:	pushobj
          [0x4] 4:	call @558 // <std#string.string(var[])>
          [0x5] 5:	movl 2
          [0x6] 6:	popobj
line: 246 [0x7] 7:	movl 2
          [0x8] 8:	pushobj
          [0x9] 9:	loadl ebx, fp+1
          [0xa] 10:	rstore ebx
          [0xb] 11:	call @546 // <std#strbuf.parse(var)>
          [0xc] 12:	call @584 // <std#string.toArray()>
          [0xd] 13:	call @582 // <std#string.$operator+=(var[])>
          [0xe] 14:	pop
line: 248 [0xf] 15:	movl 2
          [0x10] 16:	returnobj
          [0x11] 17:	ret

func:@541 [std#strbuf.$operator+=] in file: lib/support//0.2.587//strbuf.sharp:252:28: note:  
		        public def operator+=( var num ) : strbuf
		                           ^


$operator+=:
line: 253 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	loadl ebx, fp+1
          [0x3] 3:	rstore ebx
          [0x4] 4:	call @526 // <std#strbuf.append(var)>
          [0x5] 5:	movsl #0
          [0x6] 6:	returnobj
          [0x7] 7:	ret

func:@542 [std#strbuf.$operator+=] in file: lib/support//0.2.587//strbuf.sharp:257:28: note:  
		        public def operator+=( Printable o ) : strbuf
		                           ^


$operator+=:
line: 258 [0x0] 0:	movl 1
          [0x1] 1:	pushobj
          [0x2] 2:	invoke_delegate 4, 0
          [0x3] 3:	movl 2
          [0x4] 4:	popobj
line: 259 [0x5] 5:	movl 2
          [0x6] 6:	checknull
          [0x7] 7:	not cmt, cmt
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	cmp ebx, 1
          [0xa] 10:	movr ebx, cmt
          [0xb] 11:	skne 13 // pc = 24
          [0xc] 12:	istore 1
          [0xd] 13:	movl 2
          [0xe] 14:	pushobj
          [0xf] 15:	call @596 // <std#string.getData()>
          [0x10] 16:	movsl #0
          [0x11] 17:	pop
          [0x12] 18:	checknull
          [0x13] 19:	not cmt, cmt
          [0x14] 20:	movr ebx, cmt
          [0x15] 21:	loadval ecx
          [0x16] 22:	and ecx, ebx
          [0x17] 23:	movr ebx, cmt
          [0x18] 24:	movr cmt, ebx
          [0x19] 25:	movi #38, adx
          [0x1b] 27:	ifne
line: 260 [0x1c] 28:	movl 0
          [0x1d] 29:	pushobj
          [0x1e] 30:	movl 2
          [0x1f] 31:	pushobj
          [0x20] 32:	call @596 // <std#string.getData()>
          [0x21] 33:	call @528 // <std#strbuf.append(var[])>
          [0x22] 34:	movsl #0
          [0x23] 35:	returnobj
          [0x24] 36:	ret
          [0x25] 37:	goto @46
line: 262 [0x26] 38:	movl 0
          [0x27] 39:	pushobj
          [0x28] 40:	newstr @243 // "null"
          [0x29] 41:	call @528 // <std#strbuf.append(var[])>
          [0x2a] 42:	movsl #0
          [0x2b] 43:	returnobj
          [0x2c] 44:	ret
          [0x2d] 45:	nop
          [0x2e] 46:	nop
          [0x2f] 47:	pushnil 
          [0x30] 48:	popobj
          [0x31] 49:	returnobj
          [0x32] 50:	ret

func:@543 [std#strbuf.$operator+=] in file: lib/support//0.2.587//strbuf.sharp:266:28: note:  
		        public def operator+=( var[] immstr ) : strbuf
		                           ^


$operator+=:
line: 267 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	movl 1
          [0x3] 3:	pushobj
          [0x4] 4:	call @528 // <std#strbuf.append(var[])>
          [0x5] 5:	movsl #0
          [0x6] 6:	returnobj
          [0x7] 7:	ret

func:@544 [std#strbuf.$operator+=] in file: lib/support//0.2.587//strbuf.sharp:271:28: note:  
		        public def operator+=( string str ) : strbuf
		                           ^


$operator+=:
line: 272 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	movl 1
          [0x3] 3:	pushobj
          [0x4] 4:	call @584 // <std#string.toArray()>
          [0x5] 5:	call @528 // <std#strbuf.append(var[])>
          [0x6] 6:	movsl #0
          [0x7] 7:	returnobj
          [0x8] 8:	ret

func:@545 [std#strbuf.toArray] in file: lib/support//0.2.587//strbuf.sharp:276:27: note:  
		        public def toArray() : var[]
		                          ^


toArray:
line: 277 [0x0] 0:	movl 0
          [0x1] 1:	movn #4
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movi #1, ebx
          [0x8] 8:	imul ebx, #-1
          [0x9] 9:	movr egx, ebx
          [0xa] 10:	loadval ebx
          [0xb] 11:	test ebx, egx
          [0xc] 12:	movr ebx, cmt
          [0xd] 13:	movi #20, adx
          [0xf] 15:	ifne
line: 277 [0x10] 16:	movl 0
          [0x11] 17:	del
          [0x12] 18:	ret
          [0x13] 19:	nop
          [0x14] 20:	nop
line: 278 [0x15] 21:	movl 0
          [0x16] 22:	movn #0
          [0x17] 23:	pushobj
          [0x18] 24:	movl 0
          [0x19] 25:	movn #4
          [0x1a] 26:	movi #0, adx
          [0x1c] 28:	iaload_2 ebx, adx
          [0x1d] 29:	rstore ebx
          [0x1e] 30:	call @619 // <std#__SRT_Global.copyOf(object,var)>
          [0x1f] 31:	movsl #0
          [0x20] 32:	vcast 1
          [0x21] 33:	movsl #0
          [0x22] 34:	returnobj
          [0x23] 35:	ret

func:@546 [std#strbuf.parse] in file: lib/support//0.2.587//strbuf.sharp:282:32: note:  
		        public static def parse( var number ) : string
		                               ^


parse:
line: 283 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	movg @45 // @std#strbuf
          [0x2] 2:	movn #5
          [0x3] 3:	movi #0, adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	rstore ebx
          [0x7] 7:	loadl ebx, fp+0
          [0x8] 8:	rstore ebx
          [0x9] 9:	movg @45 // @std#strbuf
          [0xa] 10:	movn #6
          [0xb] 11:	movi #0, adx
          [0xd] 13:	iaload_2 ebx, adx
          [0xe] 14:	rstore ebx
          [0xf] 15:	call @626 // <std#__SRT_Global.snprintf(var,var,var)>
          [0x10] 16:	call @558 // <std#string.string(var[])>
          [0x11] 17:	movsl #0
          [0x12] 18:	returnobj
          [0x13] 19:	ret

func:@547 [std#strbuf.substring] in file: lib/support//0.2.587//strbuf.sharp:287:29: note:  
		        public def substring(var startIndex) : string {
		                            ^


substring:
line: 287 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	call @556 // <std#strbuf.size()>
          [0x3] 3:	loadval egx
          [0x4] 4:	loadl ebx, fp+1
          [0x5] 5:	gte ebx, egx
          [0x6] 6:	movr ebx, cmt
          [0x7] 7:	movr ebx, cmt
          [0x8] 8:	skpe 9 // pc = 17
          [0x9] 9:	movi #0, ebx
          [0xb] 11:	movr egx, ebx
          [0xc] 12:	loadl ebx, fp+1
          [0xd] 13:	lt ebx, egx
          [0xe] 14:	movr ebx, cmt
          [0xf] 15:	cmp ebx, 1
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	movr cmt, ebx
          [0x12] 18:	movi #28, adx
          [0x14] 20:	ifne
line: 288 [0x15] 21:	new_class @46 // std#string
          [0x16] 22:	newstr @226 // ""
          [0x17] 23:	call @558 // <std#string.string(var[])>
          [0x18] 24:	movsl #0
          [0x19] 25:	returnobj
          [0x1a] 26:	ret
          [0x1b] 27:	nop
          [0x1c] 28:	nop
line: 291 [0x1d] 29:	new_class @46 // std#string
          [0x1e] 30:	call @599 // <std#string.string()>
          [0x1f] 31:	movl 2
          [0x20] 32:	popobj
line: 292 [0x21] 33:	movl 2
          [0x22] 34:	pushobj
          [0x23] 35:	movl 0
          [0x24] 36:	movn #0
          [0x25] 37:	pushobj
          [0x26] 38:	loadl ebx, fp+1
          [0x27] 39:	rstore ebx
          [0x28] 40:	movi #1, ebx
          [0x2a] 42:	rstore ebx
          [0x2b] 43:	movl 0
          [0x2c] 44:	pushobj
          [0x2d] 45:	call @556 // <std#strbuf.size()>
          [0x2e] 46:	loadval ebx
          [0x2f] 47:	loadval ecx
          [0x30] 48:	sub ebx, ecx -> ebx
          [0x32] 50:	rstore ebx
          [0x33] 51:	call @621 // <std#__SRT_Global.memcpy(object,var,var)>
          [0x34] 52:	movsl #0
          [0x35] 53:	vcast 1
          [0x36] 54:	call @578 // <std#string.$operator=(var[])>
line: 293 [0x37] 55:	movl 2
          [0x38] 56:	returnobj
          [0x39] 57:	ret

func:@548 [std#strbuf.substring] in file: lib/support//0.2.587//strbuf.sharp:297:29: note:  
		        public def substring(var startIndex, var stopIndex) : string {
		                            ^


substring:
line: 297 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	call @556 // <std#strbuf.size()>
          [0x3] 3:	loadval egx
          [0x4] 4:	loadl ebx, fp+1
          [0x5] 5:	gte ebx, egx
          [0x6] 6:	movr ebx, cmt
          [0x7] 7:	movr ebx, cmt
          [0x8] 8:	skpe 9 // pc = 17
          [0x9] 9:	movi #0, ebx
          [0xb] 11:	movr egx, ebx
          [0xc] 12:	loadl ebx, fp+1
          [0xd] 13:	lt ebx, egx
          [0xe] 14:	movr ebx, cmt
          [0xf] 15:	cmp ebx, 1
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	movr cmt, ebx
          [0x12] 18:	movi #28, adx
          [0x14] 20:	ifne
line: 298 [0x15] 21:	new_class @46 // std#string
          [0x16] 22:	newstr @226 // ""
          [0x17] 23:	call @558 // <std#string.string(var[])>
          [0x18] 24:	movsl #0
          [0x19] 25:	returnobj
          [0x1a] 26:	ret
          [0x1b] 27:	nop
          [0x1c] 28:	nop
line: 299 [0x1d] 29:	loadl ebx, fp+1
          [0x1e] 30:	movr egx, ebx
          [0x1f] 31:	loadl ebx, fp+2
          [0x20] 32:	lt ebx, egx
          [0x21] 33:	movr ebx, cmt
          [0x22] 34:	movi #52, adx
          [0x24] 36:	ifne
line: 300 [0x25] 37:	new_class @11 // std#IllegalArgumentException
          [0x26] 38:	new_class @46 // std#string
          [0x27] 39:	newstr @298 // "stopIndex: "
          [0x28] 40:	call @558 // <std#string.string(var[])>
          [0x29] 41:	loadl ebx, fp+2
          [0x2a] 42:	rstore ebx
          [0x2b] 43:	call @579 // <std#string.$operator+(var)>
          [0x2c] 44:	newstr @299 // " cannot be less than startIndex: "
          [0x2d] 45:	call @572 // <std#string.$operator+(var[])>
          [0x2e] 46:	loadl ebx, fp+1
          [0x2f] 47:	rstore ebx
          [0x30] 48:	call @579 // <std#string.$operator+(var)>
          [0x31] 49:	call @85 // <std#IllegalArgumentException.IllegalArgumentException(std#string)>
          [0x32] 50:	throw 
          [0x33] 51:	nop
          [0x34] 52:	nop
line: 304 [0x35] 53:	new_class @46 // std#string
          [0x36] 54:	call @599 // <std#string.string()>
          [0x37] 55:	movl 3
          [0x38] 56:	popobj
line: 305 [0x39] 57:	movl 3
          [0x3a] 58:	pushobj
          [0x3b] 59:	movl 0
          [0x3c] 60:	movn #0
          [0x3d] 61:	pushobj
          [0x3e] 62:	loadl ebx, fp+1
          [0x3f] 63:	rstore ebx
          [0x40] 64:	loadl ebx, fp+2
          [0x41] 65:	rstore ebx
          [0x42] 66:	call @621 // <std#__SRT_Global.memcpy(object,var,var)>
          [0x43] 67:	movsl #0
          [0x44] 68:	vcast 1
          [0x45] 69:	call @578 // <std#string.$operator=(var[])>
line: 306 [0x46] 70:	movl 3
          [0x47] 71:	returnobj
          [0x48] 72:	ret

func:@549 [std#strbuf.parseInt] in file: lib/support//0.2.587//strbuf.sharp:310:35: note:  
		        public static def parseInt(string s) : var {
		                                  ^


parseInt:
line: 310 [0x0] 0:	istorel 0, fp+1
line: 311 [0x2] 2:	istorel 0, fp+2
line: 312 [0x4] 4:	istorel 0, fp+3
line: 313 [0x6] 6:	movl 0
          [0x7] 7:	pushobj
          [0x8] 8:	call @595 // <std#string.size()>
          [0x9] 9:	loadval ebx
          [0xa] 10:	smovr_2 ebx, fp+4
line: 314 [0xb] 11:	movl 0
          [0xc] 12:	pushobj
          [0xd] 13:	movi #0, ebx
          [0xf] 15:	rstore ebx
          [0x10] 16:	call @569 // <std#string.at(var)>
          [0x11] 17:	movi #45, ebx
          [0x13] 19:	movr egx, ebx
          [0x14] 20:	loadval ebx
          [0x15] 21:	test ebx, egx
          [0x16] 22:	movr ebx, cmt
          [0x17] 23:	movi #31, adx
          [0x19] 25:	ifne
line: 315 [0x1a] 26:	istorel 1, fp+3
line: 316 [0x1c] 28:	istorel 1, fp+1
          [0x1e] 30:	nop
          [0x1f] 31:	nop
line: 318 [0x20] 32:	loadl ebx, fp+4
          [0x21] 33:	movr egx, ebx
          [0x22] 34:	loadl ebx, fp+1
          [0x23] 35:	lt ebx, egx
          [0x24] 36:	movr ebx, cmt
          [0x25] 37:	movi #90, adx
          [0x27] 39:	ifne
line: 319 [0x28] 40:	movl 0
          [0x29] 41:	pushobj
          [0x2a] 42:	loadl ebx, fp+1
          [0x2b] 43:	rstore ebx
          [0x2c] 44:	call @569 // <std#string.at(var)>
          [0x2d] 45:	call @63 // <std#char.isDigit(var)>
          [0x2e] 46:	loadval ebx
          [0x2f] 47:	not ebx, ebx
          [0x30] 48:	movr cmt, ebx
          [0x31] 49:	movi #67, adx
          [0x33] 51:	ifne
line: 320 [0x34] 52:	new_class @11 // std#IllegalArgumentException
          [0x35] 53:	new_class @46 // std#string
          [0x36] 54:	newstr @300 // "illegal char in string: "
          [0x37] 55:	call @558 // <std#string.string(var[])>
          [0x38] 56:	new_class @8 // std#char
          [0x39] 57:	movl 0
          [0x3a] 58:	pushobj
          [0x3b] 59:	loadl ebx, fp+1
          [0x3c] 60:	rstore ebx
          [0x3d] 61:	call @569 // <std#string.at(var)>
          [0x3e] 62:	call @31 // <std#char.char(var)>
          [0x3f] 63:	call @573 // <std#string.$operator+(std#Printable)>
          [0x40] 64:	call @85 // <std#IllegalArgumentException.IllegalArgumentException(std#string)>
          [0x41] 65:	throw 
          [0x42] 66:	nop
          [0x43] 67:	nop
line: 324 [0x44] 68:	movi #10, ebx
          [0x46] 70:	mull ebx, @2
line: 325 [0x47] 71:	movi #48, ebx
          [0x49] 73:	rstore ebx
          [0x4a] 74:	movl 0
          [0x4b] 75:	pushobj
          [0x4c] 76:	loadl ebx, fp+1
          [0x4d] 77:	movi #1, ecx
          [0x4f] 79:	addl ecx, @1
          [0x50] 80:	rstore ebx
          [0x51] 81:	call @569 // <std#string.at(var)>
          [0x52] 82:	loadval ebx
          [0x53] 83:	loadval ecx
          [0x54] 84:	sub ebx, ecx -> ebx
          [0x56] 86:	rstore ebx
          [0x57] 87:	loadval ebx
          [0x58] 88:	addl ebx, @2
          [0x59] 89:	goto @32
line: 327 [0x5a] 90:	loadl ebx, fp+3
          [0x5b] 91:	movr cmt, ebx
          [0x5c] 92:	movi #99, adx
          [0x5e] 94:	ifne
line: 328 [0x5f] 95:	loadl ebx, fp+2
          [0x60] 96:	imul ebx, #-1
          [0x61] 97:	smovr_2 ebx, fp+2
          [0x62] 98:	nop
          [0x63] 99:	nop
line: 329 [0x64] 100:	loadl ebx, fp+2
          [0x65] 101:	return_val ebx
          [0x66] 102:	ret

func:@550 [std#strbuf.startsWith] in file: lib/support//0.2.587//strbuf.sharp:338:30: note:  
		        public def startsWith(string prefix, var toffset) : var {
		                             ^


startsWith:
line: 338 [0x0] 0:	loadl ebx, fp+2
          [0x1] 1:	smovr_2 ebx, fp+3
line: 339 [0x2] 2:	istorel 0, fp+4
line: 340 [0x4] 4:	movl 1
          [0x5] 5:	pushobj
          [0x6] 6:	call @595 // <std#string.size()>
          [0x7] 7:	loadval ebx
          [0x8] 8:	smovr_2 ebx, fp+5
line: 342 [0x9] 9:	movi #0, ebx
          [0xb] 11:	movr egx, ebx
          [0xc] 12:	loadl ebx, fp+2
          [0xd] 13:	lt ebx, egx
          [0xe] 14:	movr ebx, cmt
          [0xf] 15:	movr ebx, cmt
          [0x10] 16:	skpe 17 // pc = 33
          [0x11] 17:	loadl ebx, fp+5
          [0x12] 18:	rstore ebx
          [0x13] 19:	movl 0
          [0x14] 20:	pushobj
          [0x15] 21:	call @556 // <std#strbuf.size()>
          [0x16] 22:	loadval ebx
          [0x17] 23:	loadval egx
          [0x18] 24:	sub ebx, egx -> ebx
          [0x1a] 26:	rstore ebx
          [0x1b] 27:	loadval egx
          [0x1c] 28:	loadl ebx, fp+2
          [0x1d] 29:	gt ebx, egx
          [0x1e] 30:	movr ebx, cmt
          [0x1f] 31:	cmp ebx, 1
          [0x20] 32:	movr ebx, cmt
          [0x21] 33:	movr cmt, ebx
          [0x22] 34:	movi #42, adx
          [0x24] 36:	ifne
line: 343 [0x25] 37:	movi #0, ebx
          [0x27] 39:	return_val ebx
          [0x28] 40:	ret
          [0x29] 41:	nop
          [0x2a] 42:	nop
line: 345 [0x2b] 43:	movi #0, ebx
          [0x2d] 45:	rstore ebx
          [0x2e] 46:	loadl ebx, fp+5
          [0x2f] 47:	movi #1, ecx
          [0x31] 49:	subl ecx, @5
          [0x32] 50:	dec ebx
          [0x33] 51:	loadval ecx
          [0x34] 52:	gte ebx, ecx
          [0x35] 53:	movr ebx, cmt
          [0x36] 54:	movi #87, adx
          [0x38] 56:	ifne
line: 346 [0x39] 57:	movl 0
          [0x3a] 58:	pushobj
          [0x3b] 59:	loadl ebx, fp+3
          [0x3c] 60:	movi #1, ecx
          [0x3e] 62:	addl ecx, @3
          [0x3f] 63:	rstore ebx
          [0x40] 64:	call @529 // <std#strbuf.at(var)>
          [0x41] 65:	movl 1
          [0x42] 66:	pushobj
          [0x43] 67:	loadl ebx, fp+4
          [0x44] 68:	movi #1, ecx
          [0x46] 70:	addl ecx, @4
          [0x47] 71:	rstore ebx
          [0x48] 72:	call @569 // <std#string.at(var)>
          [0x49] 73:	loadval egx
          [0x4a] 74:	loadval ebx
          [0x4b] 75:	tne ebx, egx
          [0x4c] 76:	movr ebx, cmt
          [0x4d] 77:	movi #85, adx
          [0x4f] 79:	ifne
line: 347 [0x50] 80:	movi #0, ebx
          [0x52] 82:	return_val ebx
          [0x53] 83:	ret
          [0x54] 84:	nop
          [0x55] 85:	nop
          [0x56] 86:	goto @43
line: 350 [0x57] 87:	movi #1, ebx
          [0x59] 89:	return_val ebx
          [0x5a] 90:	ret

func:@551 [std#strbuf.find] in file: lib/support//0.2.587//strbuf.sharp:354:24: note:  
		        public def find(string str) : var {
		                       ^


find:
line: 354 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	call @556 // <std#strbuf.size()>
          [0x3] 3:	movl 1
          [0x4] 4:	pushobj
          [0x5] 5:	call @595 // <std#string.size()>
          [0x6] 6:	loadval ebx
          [0x7] 7:	loadval ecx
          [0x8] 8:	gt ebx, ecx
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	movi #18, adx
          [0xc] 12:	ifne
line: 355 [0xd] 13:	movi #0, ebx
          [0xf] 15:	return_val ebx
          [0x10] 16:	ret
          [0x11] 17:	nop
          [0x12] 18:	nop
line: 358 [0x13] 19:	istorel 0, fp+2
line: 359 [0x15] 21:	istorel 0, fp+3
          [0x17] 23:	movl 0
          [0x18] 24:	pushobj
          [0x19] 25:	call @556 // <std#strbuf.size()>
          [0x1a] 26:	loadval egx
          [0x1b] 27:	loadl ebx, fp+3
          [0x1c] 28:	lt ebx, egx
          [0x1d] 29:	movr ebx, cmt
          [0x1e] 30:	movi #83, adx
          [0x20] 32:	ifne
line: 360 [0x21] 33:	movl 1
          [0x22] 34:	pushobj
          [0x23] 35:	call @595 // <std#string.size()>
          [0x24] 36:	loadl ebx, fp+3
          [0x25] 37:	loadval egx
          [0x26] 38:	add ebx, egx -> ebx
          [0x28] 40:	rstore ebx
          [0x29] 41:	loadval ebx
          [0x2a] 42:	smovr_2 ebx, fp+2
line: 361 [0x2b] 43:	movl 0
          [0x2c] 44:	pushobj
          [0x2d] 45:	loadl ebx, fp+3
          [0x2e] 46:	rstore ebx
          [0x2f] 47:	movl 0
          [0x30] 48:	pushobj
          [0x31] 49:	call @556 // <std#strbuf.size()>
          [0x32] 50:	loadval egx
          [0x33] 51:	loadl ebx, fp+2
          [0x34] 52:	gt ebx, egx
          [0x35] 53:	movr ebx, cmt
          [0x36] 54:	loadpc_2 adx, pc+8 // adx = 62
          [0x37] 55:	ifne
          [0x38] 56:	movl 0
          [0x39] 57:	pushobj
          [0x3a] 58:	call @556 // <std#strbuf.size()>
          [0x3b] 59:	movi #1, cmt
          [0x3d] 61:	skpe 3 // pc = 64
          [0x3e] 62:	loadl ebx, fp+2
          [0x3f] 63:	rstore ebx
          [0x40] 64:	call @548 // <std#strbuf.substring(var,var)>
          [0x41] 65:	movl 1
          [0x42] 66:	pushobj
          [0x43] 67:	call @574 // <std#string.$operator==(std#string)>
          [0x44] 68:	loadval cmt
          [0x45] 69:	movi #77, adx
          [0x47] 71:	ifne
line: 362 [0x48] 72:	movi #1, ebx
          [0x4a] 74:	return_val ebx
          [0x4b] 75:	ret
          [0x4c] 76:	nop
          [0x4d] 77:	nop
          [0x4e] 78:	loadl ebx, fp+3
          [0x4f] 79:	movi #1, ecx
          [0x51] 81:	addl ecx, @3
          [0x52] 82:	goto @23
line: 365 [0x53] 83:	movi #0, ebx
          [0x55] 85:	return_val ebx
          [0x56] 86:	ret

func:@552 [std#strbuf.endsWith] in file: lib/support//0.2.587//strbuf.sharp:369:28: note:  
		        public def endsWith(string postFix) : var {
		                           ^


endsWith:
line: 369 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	call @556 // <std#strbuf.size()>
          [0x3] 3:	movl 1
          [0x4] 4:	pushobj
          [0x5] 5:	call @595 // <std#string.size()>
          [0x6] 6:	loadval ebx
          [0x7] 7:	loadval ecx
          [0x8] 8:	gt ebx, ecx
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	movi #18, adx
          [0xc] 12:	ifne
line: 370 [0xd] 13:	movi #0, ebx
          [0xf] 15:	return_val ebx
          [0x10] 16:	ret
          [0x11] 17:	nop
          [0x12] 18:	nop
line: 372 [0x13] 19:	movl 1
          [0x14] 20:	pushobj
          [0x15] 21:	call @595 // <std#string.size()>
          [0x16] 22:	loadval ebx
          [0x17] 23:	smovr_2 ebx, fp+2
line: 373 [0x18] 24:	new_class @46 // std#string
          [0x19] 25:	call @599 // <std#string.string()>
          [0x1a] 26:	movl 3
          [0x1b] 27:	popobj
line: 374 [0x1c] 28:	loadl ebx, fp+2
          [0x1d] 29:	rstore ebx
          [0x1e] 30:	movl 0
          [0x1f] 31:	pushobj
          [0x20] 32:	call @556 // <std#strbuf.size()>
          [0x21] 33:	loadval ebx
          [0x22] 34:	loadval egx
          [0x23] 35:	sub ebx, egx -> ebx
          [0x25] 37:	rstore ebx
          [0x26] 38:	loadval ebx
          [0x27] 39:	smovr_2 ebx, fp+4
          [0x28] 40:	movl 0
          [0x29] 41:	pushobj
          [0x2a] 42:	call @556 // <std#strbuf.size()>
          [0x2b] 43:	loadval egx
          [0x2c] 44:	loadl ebx, fp+4
          [0x2d] 45:	lt ebx, egx
          [0x2e] 46:	movr ebx, cmt
          [0x2f] 47:	movi #66, adx
          [0x31] 49:	ifne
line: 375 [0x32] 50:	movl 3
          [0x33] 51:	pushobj
          [0x34] 52:	new_class @8 // std#char
          [0x35] 53:	movl 0
          [0x36] 54:	pushobj
          [0x37] 55:	loadl ebx, fp+4
          [0x38] 56:	rstore ebx
          [0x39] 57:	call @529 // <std#strbuf.at(var)>
          [0x3a] 58:	call @31 // <std#char.char(var)>
          [0x3b] 59:	call @581 // <std#string.$operator+=(std#Printable)>
          [0x3c] 60:	pop
          [0x3d] 61:	loadl ebx, fp+4
          [0x3e] 62:	movi #1, ecx
          [0x40] 64:	addl ecx, @4
          [0x41] 65:	goto @40
line: 378 [0x42] 66:	movl 3
          [0x43] 67:	pushobj
          [0x44] 68:	movl 1
          [0x45] 69:	pushobj
          [0x46] 70:	call @574 // <std#string.$operator==(std#string)>
          [0x47] 71:	loadval ebx
          [0x48] 72:	return_val ebx
          [0x49] 73:	ret

func:@553 [std#strbuf.toLower] in file: lib/support//0.2.587//strbuf.sharp:383:34: note:  
		        public static def toLower(string s) : string {
		                                 ^


toLower:
line: 383 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	call @599 // <std#string.string()>
          [0x2] 2:	movl 1
          [0x3] 3:	popobj
line: 384 [0x4] 4:	movl 0
          [0x5] 5:	pushobj
          [0x6] 6:	call @584 // <std#string.toArray()>
          [0x7] 7:	movl 2
          [0x8] 8:	popobj
line: 385 [0x9] 9:	movi #0, ebx
          [0xb] 11:	rstore ebx
          [0xc] 12:	movl 2
          [0xd] 13:	smov ebx, sp+0
          [0xe] 14:	sizeof egx
          [0xf] 15:	lt ebx, egx
          [0x10] 16:	movi #32, adx
          [0x12] 18:	ifne
          [0x13] 19:	iaload_2 ebx, ebx
          [0x14] 20:	smovr_2 ebx, fp+3
line: 386 [0x15] 21:	movl 1
          [0x16] 22:	pushobj
          [0x17] 23:	loadl ebx, fp+3
          [0x18] 24:	rstore ebx
          [0x19] 25:	call @67 // <std#char.toLower(var)>
          [0x1a] 26:	call @580 // <std#string.$operator+=(var)>
          [0x1b] 27:	pop
          [0x1c] 28:	smov ebx, sp+0
          [0x1d] 29:	inc ebx
          [0x1e] 30:	smovr ebx, sp+0
          [0x1f] 31:	goto @12
          [0x20] 32:	pop
line: 388 [0x21] 33:	movl 1
          [0x22] 34:	returnobj
          [0x23] 35:	ret

func:@554 [std#strbuf.toUpper] in file: lib/support//0.2.587//strbuf.sharp:392:34: note:  
		        public static def toUpper(string s) : string {
		                                 ^


toUpper:
line: 392 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	call @599 // <std#string.string()>
          [0x2] 2:	movl 1
          [0x3] 3:	popobj
line: 393 [0x4] 4:	movl 0
          [0x5] 5:	pushobj
          [0x6] 6:	call @584 // <std#string.toArray()>
          [0x7] 7:	movl 2
          [0x8] 8:	popobj
line: 394 [0x9] 9:	movi #0, ebx
          [0xb] 11:	rstore ebx
          [0xc] 12:	movl 2
          [0xd] 13:	smov ebx, sp+0
          [0xe] 14:	sizeof egx
          [0xf] 15:	lt ebx, egx
          [0x10] 16:	movi #32, adx
          [0x12] 18:	ifne
          [0x13] 19:	iaload_2 ebx, ebx
          [0x14] 20:	smovr_2 ebx, fp+3
line: 395 [0x15] 21:	movl 1
          [0x16] 22:	pushobj
          [0x17] 23:	loadl ebx, fp+3
          [0x18] 24:	rstore ebx
          [0x19] 25:	call @68 // <std#char.toUpper(var)>
          [0x1a] 26:	call @580 // <std#string.$operator+=(var)>
          [0x1b] 27:	pop
          [0x1c] 28:	smov ebx, sp+0
          [0x1d] 29:	inc ebx
          [0x1e] 30:	smovr ebx, sp+0
          [0x1f] 31:	goto @12
          [0x20] 32:	pop
line: 397 [0x21] 33:	movl 1
          [0x22] 34:	returnobj
          [0x23] 35:	ret

func:@555 [std#strbuf.empty] in file: lib/support//0.2.587//strbuf.sharp:401:25: note:  
		        public def empty() : var {
		                        ^


empty:
line: 401 [0x0] 0:	movl 0
          [0x1] 1:	movn #4
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movi #1, ebx
          [0x8] 8:	imul ebx, #-1
          [0x9] 9:	movr egx, ebx
          [0xa] 10:	loadval ebx
          [0xb] 11:	test ebx, egx
          [0xc] 12:	movr ebx, cmt
          [0xd] 13:	return_val cmt
          [0xe] 14:	ret

func:@556 [std#strbuf.size] in file: lib/support//0.2.587//strbuf.sharp:405:24: note:  
		        public def size() : var
		                       ^


size:
line: 406 [0x0] 0:	movi #1, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #4
          [0x5] 5:	movi #0, adx
          [0x7] 7:	chklen adx
          [0x8] 8:	iaload_2 ebx, adx
          [0x9] 9:	loadval egx
          [0xa] 10:	add ebx, egx -> ebx
          [0xc] 12:	rstore ebx
          [0xd] 13:	loadval ebx
          [0xe] 14:	return_val ebx
          [0xf] 15:	ret

func:@557 [std#strbuf.toString] in file: lib/support//0.2.587//strbuf.sharp:410:28: note:  
		        public def delegate::toString() : string {
		                           ^


toString:
line: 410 [0x0] 0:	movl 0
          [0x1] 1:	movn #4
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movi #1, ebx
          [0x8] 8:	imul ebx, #-1
          [0x9] 9:	movr egx, ebx
          [0xa] 10:	loadval ebx
          [0xb] 11:	test ebx, egx
          [0xc] 12:	movr ebx, cmt
          [0xd] 13:	loadpc_2 adx, pc+7 // adx = 20
          [0xe] 14:	ifne
          [0xf] 15:	new_class @46 // std#string
          [0x10] 16:	call @599 // <std#string.string()>
          [0x11] 17:	movi #1, cmt
          [0x13] 19:	skpe 15 // pc = 34
          [0x14] 20:	new_class @46 // std#string
          [0x15] 21:	movl 0
          [0x16] 22:	movn #0
          [0x17] 23:	pushobj
          [0x18] 24:	movi #0, ebx
          [0x1a] 26:	rstore ebx
          [0x1b] 27:	movl 0
          [0x1c] 28:	movn #4
          [0x1d] 29:	movi #0, adx
          [0x1f] 31:	iaload_2 ebx, adx
          [0x20] 32:	rstore ebx
          [0x21] 33:	call @563 // <std#string.string(var[],var,var)>
          [0x22] 34:	movsl #0
          [0x23] 35:	returnobj
          [0x24] 36:	ret

func:@558 [std#string.string] in file: lib/support//0.2.587//string.sharp:13:22: note:  
		        public string( var[] immstr )
		                     ^


string:
line: 14 [0x0] 0:	movl 1
         [0x1] 1:	checknull
         [0x2] 2:	movr ebx, cmt
         [0x3] 3:	movi #10, adx
         [0x5] 5:	ifne
line: 15 [0x6] 6:	movl 0
         [0x7] 7:	movn #0
         [0x8] 8:	del
         [0x9] 9:	goto @17
line: 17 [0xa] 10:	movl 0
         [0xb] 11:	pushobj
         [0xc] 12:	movl 1
         [0xd] 13:	pushobj
         [0xe] 14:	call @567 // <std#string.append(var[])>
         [0xf] 15:	pop
         [0x10] 16:	nop
         [0x11] 17:	nop
         [0x12] 18:	movl 0
         [0x13] 19:	returnobj
         [0x14] 20:	ret

func:@559 [std#string.string] in file: lib/support//0.2.587//string.sharp:23:22: note:  
		        public string( var ch )
		                     ^


string:
line: 24 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	loadl ebx, fp+1
         [0x3] 3:	rstore ebx
         [0x4] 4:	call @565 // <std#string.append(var)>
         [0x5] 5:	pop
         [0x6] 6:	movl 0
         [0x7] 7:	returnobj
         [0x8] 8:	ret

func:@560 [std#string.string] in file: lib/support//0.2.587//string.sharp:28:22: note:  
		        public string( char[] immstr )
		                     ^


string:
line: 29 [0x0] 0:	movl 1
         [0x1] 1:	checknull
         [0x2] 2:	movr ebx, cmt
         [0x3] 3:	movi #10, adx
         [0x5] 5:	ifne
line: 30 [0x6] 6:	movl 0
         [0x7] 7:	movn #0
         [0x8] 8:	del
         [0x9] 9:	goto @56
line: 32 [0xa] 10:	movl 1
         [0xb] 11:	sizeof ebx
         [0xc] 12:	newarry ebx
         [0xd] 13:	movl 2
         [0xe] 14:	popobj
line: 33 [0xf] 15:	istorel 0, fp+3
line: 34 [0x11] 17:	movi #0, ebx
         [0x13] 19:	rstore ebx
         [0x14] 20:	movl 1
         [0x15] 21:	smov ebx, sp+0
         [0x16] 22:	sizeof egx
         [0x17] 23:	lt ebx, egx
         [0x18] 24:	movi #48, adx
         [0x1a] 26:	ifne
         [0x1b] 27:	movnd ebx
         [0x1c] 28:	pushobj
         [0x1d] 29:	movl 4
         [0x1e] 30:	popobj
line: 35 [0x1f] 31:	movl 4
         [0x20] 32:	pushobj
         [0x21] 33:	call @127 // <std#integer.getValue()>
         [0x22] 34:	loadval ebx
         [0x23] 35:	rstore ebx
         [0x24] 36:	movl 2
         [0x25] 37:	loadl ebx, fp+3
         [0x26] 38:	movi #1, ecx
         [0x28] 40:	addl ecx, @3
         [0x29] 41:	chklen ebx
         [0x2a] 42:	loadval egx
         [0x2b] 43:	rmov ebx, egx
         [0x2c] 44:	smov ebx, sp+0
         [0x2d] 45:	inc ebx
         [0x2e] 46:	smovr ebx, sp+0
         [0x2f] 47:	goto @20
         [0x30] 48:	pop
line: 38 [0x31] 49:	movl 0
         [0x32] 50:	pushobj
         [0x33] 51:	movl 2
         [0x34] 52:	pushobj
         [0x35] 53:	call @567 // <std#string.append(var[])>
         [0x36] 54:	pop
         [0x37] 55:	nop
         [0x38] 56:	nop
         [0x39] 57:	movl 0
         [0x3a] 58:	returnobj
         [0x3b] 59:	ret

func:@561 [std#string.string] in file: lib/support//0.2.587//string.sharp:44:22: note:  
		        public string(string str )
		                     ^


string:
line: 45 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	pushobj
         [0x5] 5:	call @558 // <std#string.string(var[])>
         [0x6] 6:	pop
         [0x7] 7:	movl 0
         [0x8] 8:	returnobj
         [0x9] 9:	ret

func:@562 [std#string.string] in file: lib/support//0.2.587//string.sharp:49:22: note:  
		        public string( var[] immstr, var offset )
		                     ^


string:
line: 50 [0x0] 0:	movl 1
         [0x1] 1:	checknull
         [0x2] 2:	movr ebx, cmt
         [0x3] 3:	movi #10, adx
         [0x5] 5:	ifne
line: 51 [0x6] 6:	movl 0
         [0x7] 7:	movn #0
         [0x8] 8:	del
         [0x9] 9:	goto @24
line: 53 [0xa] 10:	movl 1
         [0xb] 11:	pushobj
         [0xc] 12:	loadl ebx, fp+2
         [0xd] 13:	rstore ebx
         [0xe] 14:	movl 1
         [0xf] 15:	sizeof ebx
         [0x10] 16:	rstore ebx
         [0x11] 17:	call @621 // <std#__SRT_Global.memcpy(object,var,var)>
         [0x12] 18:	movsl #0
         [0x13] 19:	vcast 1
         [0x14] 20:	movl 0
         [0x15] 21:	movn #0
         [0x16] 22:	popobj
         [0x17] 23:	nop
         [0x18] 24:	nop
         [0x19] 25:	movl 0
         [0x1a] 26:	returnobj
         [0x1b] 27:	ret

func:@563 [std#string.string] in file: lib/support//0.2.587//string.sharp:58:22: note:  
		        public string( var[] immstr, var offset, var endIndex )
		                     ^


string:
line: 59 [0x0] 0:	movl 1
         [0x1] 1:	checknull
         [0x2] 2:	movr ebx, cmt
         [0x3] 3:	movi #10, adx
         [0x5] 5:	ifne
line: 60 [0x6] 6:	movl 0
         [0x7] 7:	movn #0
         [0x8] 8:	del
         [0x9] 9:	goto @23
line: 62 [0xa] 10:	movl 1
         [0xb] 11:	pushobj
         [0xc] 12:	loadl ebx, fp+2
         [0xd] 13:	rstore ebx
         [0xe] 14:	loadl ebx, fp+3
         [0xf] 15:	rstore ebx
         [0x10] 16:	call @621 // <std#__SRT_Global.memcpy(object,var,var)>
         [0x11] 17:	movsl #0
         [0x12] 18:	vcast 1
         [0x13] 19:	movl 0
         [0x14] 20:	movn #0
         [0x15] 21:	popobj
         [0x16] 22:	nop
         [0x17] 23:	nop
         [0x18] 24:	movl 0
         [0x19] 25:	returnobj
         [0x1a] 26:	ret

func:@564 [std#string.replace] in file: lib/support//0.2.587//string.sharp:67:27: note:  
		        public def replace( var pos, var replaceChar ) : string
		                          ^


replace:
line: 68 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	sizeof ebx
         [0x3] 3:	movr egx, ebx
         [0x4] 4:	loadl ebx, fp+1
         [0x5] 5:	gte ebx, egx
         [0x6] 6:	movr ebx, cmt
         [0x7] 7:	movi #15, adx
         [0x9] 9:	ifne
line: 69 [0xa] 10:	new_class @43 // std#RuntimeErr
         [0xb] 11:	newstr @294 // "Index out of bounds exception"
         [0xc] 12:	call @481 // <std#RuntimeErr.RuntimeErr(var[])>
         [0xd] 13:	throw 
         [0xe] 14:	nop
         [0xf] 15:	nop
line: 72 [0x10] 16:	loadl ebx, fp+2
         [0x11] 17:	rstore ebx
         [0x12] 18:	movl 0
         [0x13] 19:	movn #0
         [0x14] 20:	loadl ebx, fp+1
         [0x15] 21:	chklen ebx
         [0x16] 22:	loadval egx
         [0x17] 23:	rmov ebx, egx
line: 73 [0x18] 24:	movl 0
         [0x19] 25:	returnobj
         [0x1a] 26:	ret

func:@565 [std#string.append] in file: lib/support//0.2.587//string.sharp:77:19: note:  
		        def append(var char) : string
		                  ^


append:
line: 78 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	checknull
         [0x3] 3:	movr ebx, cmt
         [0x4] 4:	movi #14, adx
         [0x6] 6:	ifne
line: 79 [0x7] 7:	movi #1, ebx
         [0x9] 9:	newarry ebx
         [0xa] 10:	movl 0
         [0xb] 11:	movn #0
         [0xc] 12:	popobj
         [0xd] 13:	goto @29
line: 81 [0xe] 14:	movl 0
         [0xf] 15:	movn #0
         [0x10] 16:	pushobj
         [0x11] 17:	movi #1, ebx
         [0x13] 19:	rstore ebx
         [0x14] 20:	movl 0
         [0x15] 21:	movn #0
         [0x16] 22:	sizeof ebx
         [0x17] 23:	loadval ecx
         [0x18] 24:	add ebx, ecx -> ebx
         [0x1a] 26:	rstore ebx
         [0x1b] 27:	call @622 // <std#__SRT_Global.realloc(object,var)>
         [0x1c] 28:	nop
         [0x1d] 29:	nop
line: 83 [0x1e] 30:	loadl ebx, fp+1
         [0x1f] 31:	rstore ebx
         [0x20] 32:	movl 0
         [0x21] 33:	movn #0
         [0x22] 34:	pushobj
         [0x23] 35:	movi #1, ebx
         [0x25] 37:	rstore ebx
         [0x26] 38:	movl 0
         [0x27] 39:	movn #0
         [0x28] 40:	sizeof ebx
         [0x29] 41:	loadval ecx
         [0x2a] 42:	sub ebx, ecx -> ebx
         [0x2c] 44:	rstore ebx
         [0x2d] 45:	loadval ebx
         [0x2e] 46:	movsl #0
         [0x2f] 47:	chklen ebx
         [0x30] 48:	pop
         [0x31] 49:	loadval egx
         [0x32] 50:	rmov ebx, egx
line: 84 [0x33] 51:	movl 0
         [0x34] 52:	returnobj
         [0x35] 53:	ret

func:@566 [std#string.append] in file: lib/support//0.2.587//string.sharp:88:19: note:  
		        def append(char c) : string
		                  ^


append:
line: 89 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	pushobj
         [0x4] 4:	call @127 // <std#integer.getValue()>
         [0x5] 5:	call @565 // <std#string.append(var)>
         [0x6] 6:	movsl #0
         [0x7] 7:	returnobj
         [0x8] 8:	ret

func:@567 [std#string.append] in file: lib/support//0.2.587//string.sharp:93:19: note:  
		        def append(var[] immstr) : string
		                  ^


append:
line: 94 [0x0] 0:	movl 1
         [0x1] 1:	checknull
         [0x2] 2:	movr ebx, cmt
         [0x3] 3:	movi #10, adx
         [0x5] 5:	ifne
line: 94 [0x6] 6:	movl 0
         [0x7] 7:	returnobj
         [0x8] 8:	ret
         [0x9] 9:	nop
         [0xa] 10:	nop
line: 96 [0xb] 11:	movl 0
         [0xc] 12:	movn #0
         [0xd] 13:	sizeof ebx
         [0xe] 14:	smovr_2 ebx, fp+2
line: 98 [0xf] 15:	movl 0
         [0x10] 16:	movn #0
         [0x11] 17:	checknull
         [0x12] 18:	movr ebx, cmt
         [0x13] 19:	movi #29, adx
         [0x15] 21:	ifne
line: 99 [0x16] 22:	movl 1
         [0x17] 23:	sizeof ebx
         [0x18] 24:	newarry ebx
         [0x19] 25:	movl 0
         [0x1a] 26:	movn #0
         [0x1b] 27:	popobj
         [0x1c] 28:	goto @44
line: 101 [0x1d] 29:	movl 0
          [0x1e] 30:	movn #0
          [0x1f] 31:	pushobj
          [0x20] 32:	movl 1
          [0x21] 33:	sizeof ebx
          [0x22] 34:	rstore ebx
          [0x23] 35:	movl 0
          [0x24] 36:	movn #0
          [0x25] 37:	sizeof ebx
          [0x26] 38:	loadval ecx
          [0x27] 39:	add ebx, ecx -> ebx
          [0x29] 41:	rstore ebx
          [0x2a] 42:	call @622 // <std#__SRT_Global.realloc(object,var)>
          [0x2b] 43:	nop
          [0x2c] 44:	nop
line: 103 [0x2d] 45:	istorel 0, fp+3
          [0x2f] 47:	movl 1
          [0x30] 48:	sizeof ebx
          [0x31] 49:	movr egx, ebx
          [0x32] 50:	loadl ebx, fp+3
          [0x33] 51:	lt ebx, egx
          [0x34] 52:	movr ebx, cmt
          [0x35] 53:	movi #76, adx
          [0x37] 55:	ifne
line: 105 [0x38] 56:	movl 1
          [0x39] 57:	loadl ebx, fp+3
          [0x3a] 58:	chklen ebx
          [0x3b] 59:	iaload_2 ebx, ebx
          [0x3c] 60:	mov16 ebx, ebx
          [0x3d] 61:	rstore ebx
          [0x3e] 62:	movl 0
          [0x3f] 63:	movn #0
          [0x40] 64:	loadl ebx, fp+2
          [0x41] 65:	movi #1, ecx
          [0x43] 67:	addl ecx, @2
          [0x44] 68:	chklen ebx
          [0x45] 69:	loadval egx
          [0x46] 70:	rmov ebx, egx
          [0x47] 71:	loadl ebx, fp+3
          [0x48] 72:	movi #1, ecx
          [0x4a] 74:	addl ecx, @3
          [0x4b] 75:	goto @47
line: 108 [0x4c] 76:	movl 0
          [0x4d] 77:	returnobj
          [0x4e] 78:	ret

func:@568 [std#string.append] in file: lib/support//0.2.587//string.sharp:113:26: note:  
		        public def append(var[] immstr, var len) : string
		                         ^


append:
line: 114 [0x0] 0:	movl 1
          [0x1] 1:	checknull
          [0x2] 2:	movr ebx, cmt
          [0x3] 3:	movr ebx, cmt
          [0x4] 4:	skpe 20 // pc = 24
          [0x5] 5:	movi #0, ebx
          [0x7] 7:	movr egx, ebx
          [0x8] 8:	loadl ebx, fp+2
          [0x9] 9:	lte ebx, egx
          [0xa] 10:	movr ebx, cmt
          [0xb] 11:	cmp ebx, 1
          [0xc] 12:	movr ebx, cmt
          [0xd] 13:	movr cmt, ebx
          [0xe] 14:	movr ebx, cmt
          [0xf] 15:	skpe 9 // pc = 24
          [0x10] 16:	movl 1
          [0x11] 17:	sizeof ebx
          [0x12] 18:	movr egx, ebx
          [0x13] 19:	loadl ebx, fp+2
          [0x14] 20:	gt ebx, egx
          [0x15] 21:	movr ebx, cmt
          [0x16] 22:	cmp ebx, 1
          [0x17] 23:	movr ebx, cmt
          [0x18] 24:	movr cmt, ebx
          [0x19] 25:	movi #32, adx
          [0x1b] 27:	ifne
line: 114 [0x1c] 28:	movl 0
          [0x1d] 29:	returnobj
          [0x1e] 30:	ret
          [0x1f] 31:	nop
          [0x20] 32:	nop
line: 116 [0x21] 33:	movl 0
          [0x22] 34:	movn #0
          [0x23] 35:	sizeof ebx
          [0x24] 36:	smovr_2 ebx, fp+3
line: 118 [0x25] 37:	movl 0
          [0x26] 38:	movn #0
          [0x27] 39:	checknull
          [0x28] 40:	movr ebx, cmt
          [0x29] 41:	movi #50, adx
          [0x2b] 43:	ifne
line: 119 [0x2c] 44:	loadl ebx, fp+2
          [0x2d] 45:	newarry ebx
          [0x2e] 46:	movl 0
          [0x2f] 47:	movn #0
          [0x30] 48:	popobj
          [0x31] 49:	goto @64
line: 121 [0x32] 50:	movl 0
          [0x33] 51:	movn #0
          [0x34] 52:	pushobj
          [0x35] 53:	loadl ebx, fp+2
          [0x36] 54:	rstore ebx
          [0x37] 55:	movl 0
          [0x38] 56:	movn #0
          [0x39] 57:	sizeof ebx
          [0x3a] 58:	loadval egx
          [0x3b] 59:	add ebx, egx -> ebx
          [0x3d] 61:	rstore ebx
          [0x3e] 62:	call @622 // <std#__SRT_Global.realloc(object,var)>
          [0x3f] 63:	nop
          [0x40] 64:	nop
line: 123 [0x41] 65:	istorel 0, fp+4
          [0x43] 67:	loadl ebx, fp+2
          [0x44] 68:	movr egx, ebx
          [0x45] 69:	loadl ebx, fp+4
          [0x46] 70:	lt ebx, egx
          [0x47] 71:	movr ebx, cmt
          [0x48] 72:	movi #95, adx
          [0x4a] 74:	ifne
line: 125 [0x4b] 75:	movl 1
          [0x4c] 76:	loadl ebx, fp+4
          [0x4d] 77:	chklen ebx
          [0x4e] 78:	iaload_2 ebx, ebx
          [0x4f] 79:	mov16 ebx, ebx
          [0x50] 80:	rstore ebx
          [0x51] 81:	movl 0
          [0x52] 82:	movn #0
          [0x53] 83:	loadl ebx, fp+3
          [0x54] 84:	movi #1, ecx
          [0x56] 86:	addl ecx, @3
          [0x57] 87:	chklen ebx
          [0x58] 88:	loadval egx
          [0x59] 89:	rmov ebx, egx
          [0x5a] 90:	loadl ebx, fp+4
          [0x5b] 91:	movi #1, ecx
          [0x5d] 93:	addl ecx, @4
          [0x5e] 94:	goto @67
line: 128 [0x5f] 95:	movl 0
          [0x60] 96:	returnobj
          [0x61] 97:	ret

func:@569 [std#string.at] in file: lib/support//0.2.587//string.sharp:132:22: note:  
		        public def at( var pos ) : var
		                     ^


at:
line: 133 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	sizeof ebx
          [0x3] 3:	movr egx, ebx
          [0x4] 4:	loadl ebx, fp+1
          [0x5] 5:	gte ebx, egx
          [0x6] 6:	movr ebx, cmt
          [0x7] 7:	movi #27, adx
          [0x9] 9:	ifne
line: 134 [0xa] 10:	new_class @43 // std#RuntimeErr
          [0xb] 11:	new_class @46 // std#string
          [0xc] 12:	newstr @295 // "Index out of bounds Array: size "
          [0xd] 13:	call @558 // <std#string.string(var[])>
          [0xe] 14:	movl 0
          [0xf] 15:	movn #0
          [0x10] 16:	sizeof ebx
          [0x11] 17:	rstore ebx
          [0x12] 18:	call @579 // <std#string.$operator+(var)>
          [0x13] 19:	newstr @296 // " at index pos "
          [0x14] 20:	call @572 // <std#string.$operator+(var[])>
          [0x15] 21:	loadl ebx, fp+1
          [0x16] 22:	rstore ebx
          [0x17] 23:	call @579 // <std#string.$operator+(var)>
          [0x18] 24:	call @482 // <std#RuntimeErr.RuntimeErr(std#string)>
          [0x19] 25:	throw 
          [0x1a] 26:	nop
          [0x1b] 27:	nop
line: 138 [0x1c] 28:	movl 0
          [0x1d] 29:	movn #0
          [0x1e] 30:	loadl ebx, fp+1
          [0x1f] 31:	chklen ebx
          [0x20] 32:	iaload_2 ebx, ebx
          [0x21] 33:	return_val ebx
          [0x22] 34:	ret

func:@570 [std#string.fmt] in file: lib/support//0.2.587//string.sharp:142:30: note:  
		        public static def fmt( var _fmt ) {
		                             ^


fmt:
line: 142 [0x0] 0:	loadl ebx, fp+0
          [0x1] 1:	nop
          [0x2] 2:	rstore ebx
          [0x3] 3:	movg @46 // @std#string
          [0x4] 4:	movn #1
          [0x5] 5:	movi #0, adx
          [0x7] 7:	loadval ecx
          [0x8] 8:	rmov adx, ecx
line: 143 [0x9] 9:	loadl ebx, fp+0
          [0xa] 10:	rstore ebx
          [0xb] 11:	movi #102, ebx
          [0xd] 13:	movr egx, ebx
          [0xe] 14:	loadval ebx
          [0xf] 15:	tne ebx, egx
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	cmp ebx, 1
          [0x12] 18:	movr ebx, cmt
          [0x13] 19:	skne 13 // pc = 32
          [0x14] 20:	istore 1
          [0x15] 21:	loadl ebx, fp+0
          [0x16] 22:	rstore ebx
          [0x17] 23:	movi #70, ebx
          [0x19] 25:	movr egx, ebx
          [0x1a] 26:	loadval ebx
          [0x1b] 27:	tne ebx, egx
          [0x1c] 28:	movr ebx, cmt
          [0x1d] 29:	loadval ecx
          [0x1e] 30:	and ecx, ebx
          [0x1f] 31:	movr ebx, cmt
          [0x20] 32:	movr cmt, ebx
          [0x21] 33:	movi #47, adx
          [0x23] 35:	ifne
line: 143 [0x24] 36:	movi #0, ebx
          [0x26] 38:	nop
          [0x27] 39:	rstore ebx
          [0x28] 40:	movg @46 // @std#string
          [0x29] 41:	movn #2
          [0x2a] 42:	movi #0, adx
          [0x2c] 44:	loadval ecx
          [0x2d] 45:	rmov adx, ecx
          [0x2e] 46:	nop
          [0x2f] 47:	nop
          [0x30] 48:	ret

func:@571 [std#string.precision] in file: lib/support//0.2.587//string.sharp:147:36: note:  
		        public static def precision( var prec ) {
		                                   ^


precision:
line: 147 [0x0] 0:	movi #0, ebx
          [0x2] 2:	movr egx, ebx
          [0x3] 3:	loadl ebx, fp+0
          [0x4] 4:	lt ebx, egx
          [0x5] 5:	movr ebx, cmt
          [0x6] 6:	movr ebx, cmt
          [0x7] 7:	skpe 9 // pc = 16
          [0x8] 8:	movi #16, ebx
          [0xa] 10:	movr egx, ebx
          [0xb] 11:	loadl ebx, fp+0
          [0xc] 12:	gt ebx, egx
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	cmp ebx, 1
          [0xf] 15:	movr ebx, cmt
          [0x10] 16:	movr cmt, ebx
          [0x11] 17:	movi #30, adx
          [0x13] 19:	ifne
line: 148 [0x14] 20:	new_class @11 // std#IllegalArgumentException
          [0x15] 21:	new_class @46 // std#string
          [0x16] 22:	newstr @297 // "invalid precision: "
          [0x17] 23:	call @558 // <std#string.string(var[])>
          [0x18] 24:	loadl ebx, fp+0
          [0x19] 25:	rstore ebx
          [0x1a] 26:	call @579 // <std#string.$operator+(var)>
          [0x1b] 27:	call @85 // <std#IllegalArgumentException.IllegalArgumentException(std#string)>
          [0x1c] 28:	throw 
          [0x1d] 29:	nop
          [0x1e] 30:	nop
line: 149 [0x1f] 31:	loadl ebx, fp+0
          [0x20] 32:	nop
          [0x21] 33:	rstore ebx
          [0x22] 34:	movg @46 // @std#string
          [0x23] 35:	movn #2
          [0x24] 36:	movi #0, adx
          [0x26] 38:	loadval ecx
          [0x27] 39:	rmov adx, ecx
          [0x28] 40:	ret

func:@572 [std#string.$operator+] in file: lib/support//0.2.587//string.sharp:153:28: note:  
		        public def operator+( var[] immstr ) : string
		                           ^


$operator+:
line: 154 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	movl 0
          [0x2] 2:	movn #0
          [0x3] 3:	pushobj
          [0x4] 4:	call @558 // <std#string.string(var[])>
          [0x5] 5:	movl 2
          [0x6] 6:	popobj
line: 155 [0x7] 7:	movl 1
          [0x8] 8:	checknull
          [0x9] 9:	not cmt, cmt
          [0xa] 10:	movr ebx, cmt
          [0xb] 11:	movi #23, adx
          [0xd] 13:	ifne
line: 156 [0xe] 14:	movl 2
          [0xf] 15:	pushobj
          [0x10] 16:	movl 1
          [0x11] 17:	pushobj
          [0x12] 18:	call @567 // <std#string.append(var[])>
          [0x13] 19:	movsl #0
          [0x14] 20:	returnobj
          [0x15] 21:	ret
          [0x16] 22:	goto @31
line: 158 [0x17] 23:	movl 2
          [0x18] 24:	pushobj
          [0x19] 25:	newstr @243 // "null"
          [0x1a] 26:	call @567 // <std#string.append(var[])>
          [0x1b] 27:	movsl #0
          [0x1c] 28:	returnobj
          [0x1d] 29:	ret
          [0x1e] 30:	nop
          [0x1f] 31:	nop
          [0x20] 32:	pushnil 
          [0x21] 33:	popobj
          [0x22] 34:	returnobj
          [0x23] 35:	ret

func:@573 [std#string.$operator+] in file: lib/support//0.2.587//string.sharp:162:28: note:  
		        public def operator+( Printable o ) : string
		                           ^


$operator+:
line: 163 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	movl 0
          [0x2] 2:	movn #0
          [0x3] 3:	pushobj
          [0x4] 4:	call @558 // <std#string.string(var[])>
          [0x5] 5:	movl 2
          [0x6] 6:	popobj
line: 164 [0x7] 7:	movl 3
          [0x8] 8:	del
line: 165 [0x9] 9:	movl 1
          [0xa] 10:	checknull
          [0xb] 11:	not cmt, cmt
          [0xc] 12:	movr ebx, cmt
          [0xd] 13:	movi #25, adx
          [0xf] 15:	ifne
line: 165 [0x10] 16:	movl 1
          [0x11] 17:	pushobj
          [0x12] 18:	invoke_delegate 4, 0
          [0x13] 19:	movsl #0
          [0x14] 20:	movn #0
          [0x15] 21:	pushobj
          [0x16] 22:	movl 3
          [0x17] 23:	popobj
          [0x18] 24:	nop
          [0x19] 25:	nop
line: 167 [0x1a] 26:	movl 3
          [0x1b] 27:	checknull
          [0x1c] 28:	not cmt, cmt
          [0x1d] 29:	movr ebx, cmt
          [0x1e] 30:	movi #42, adx
          [0x20] 32:	ifne
line: 168 [0x21] 33:	movl 2
          [0x22] 34:	pushobj
          [0x23] 35:	movl 3
          [0x24] 36:	pushobj
          [0x25] 37:	call @567 // <std#string.append(var[])>
          [0x26] 38:	movsl #0
          [0x27] 39:	returnobj
          [0x28] 40:	ret
          [0x29] 41:	goto @50
line: 170 [0x2a] 42:	movl 2
          [0x2b] 43:	pushobj
          [0x2c] 44:	newstr @243 // "null"
          [0x2d] 45:	call @567 // <std#string.append(var[])>
          [0x2e] 46:	movsl #0
          [0x2f] 47:	returnobj
          [0x30] 48:	ret
          [0x31] 49:	nop
          [0x32] 50:	nop
          [0x33] 51:	pushnil 
          [0x34] 52:	popobj
          [0x35] 53:	returnobj
          [0x36] 54:	ret

func:@574 [std#string.$operator==] in file: lib/support//0.2.587//string.sharp:174:28: note:  
		        public def operator==( string str ) : var
		                           ^


$operator==:
line: 175 [0x0] 0:	movl 1
          [0x1] 1:	pushobj
          [0x2] 2:	call @595 // <std#string.size()>
          [0x3] 3:	movl 0
          [0x4] 4:	movn #0
          [0x5] 5:	sizeof ebx
          [0x6] 6:	movr egx, ebx
          [0x7] 7:	loadval ebx
          [0x8] 8:	tne ebx, egx
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	movi #18, adx
          [0xc] 12:	ifne
line: 176 [0xd] 13:	movi #0, ebx
          [0xf] 15:	return_val ebx
          [0x10] 16:	ret
          [0x11] 17:	nop
          [0x12] 18:	nop
line: 179 [0x13] 19:	istorel 0, fp+2
line: 180 [0x15] 21:	movi #0, ebx
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 0
          [0x19] 25:	movn #0
          [0x1a] 26:	smov ebx, sp+0
          [0x1b] 27:	sizeof egx
          [0x1c] 28:	lt ebx, egx
          [0x1d] 29:	movi #61, adx
          [0x1f] 31:	ifne
          [0x20] 32:	iaload_2 ebx, ebx
          [0x21] 33:	smovr_2 ebx, fp+3
line: 181 [0x22] 34:	loadl ebx, fp+3
          [0x23] 35:	rstore ebx
          [0x24] 36:	movl 1
          [0x25] 37:	pushobj
          [0x26] 38:	loadl ebx, fp+2
          [0x27] 39:	movi #1, ecx
          [0x29] 41:	addl ecx, @2
          [0x2a] 42:	rstore ebx
          [0x2b] 43:	call @569 // <std#string.at(var)>
          [0x2c] 44:	loadval egx
          [0x2d] 45:	loadval ebx
          [0x2e] 46:	tne ebx, egx
          [0x2f] 47:	movr ebx, cmt
          [0x30] 48:	movi #56, adx
          [0x32] 50:	ifne
line: 182 [0x33] 51:	movi #0, ebx
          [0x35] 53:	return_val ebx
          [0x36] 54:	ret
          [0x37] 55:	nop
          [0x38] 56:	nop
          [0x39] 57:	smov ebx, sp+0
          [0x3a] 58:	inc ebx
          [0x3b] 59:	smovr ebx, sp+0
          [0x3c] 60:	goto @24
          [0x3d] 61:	pop
line: 186 [0x3e] 62:	movi #1, ebx
          [0x40] 64:	return_val ebx
          [0x41] 65:	ret

func:@575 [std#string.$operator!=] in file: lib/support//0.2.587//string.sharp:190:28: note:  
		        public def operator!=( string str ) : var {
		                           ^


$operator!=:
line: 190 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	movl 1
          [0x3] 3:	pushobj
          [0x4] 4:	call @574 // <std#string.$operator==(std#string)>
          [0x5] 5:	loadval ebx
          [0x6] 6:	not ebx, ebx
          [0x7] 7:	return_val ebx
          [0x8] 8:	ret

func:@576 [std#string.$operator==] in file: lib/support//0.2.587//string.sharp:194:28: note:  
		        public def operator==( var[] str ) : var
		                           ^


$operator==:
line: 195 [0x0] 0:	movl 1
          [0x1] 1:	sizeof ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #0
          [0x5] 5:	sizeof ebx
          [0x6] 6:	movr egx, ebx
          [0x7] 7:	loadval ebx
          [0x8] 8:	tne ebx, egx
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	movi #18, adx
          [0xc] 12:	ifne
line: 196 [0xd] 13:	movi #0, ebx
          [0xf] 15:	return_val ebx
          [0x10] 16:	ret
          [0x11] 17:	nop
          [0x12] 18:	nop
line: 199 [0x13] 19:	istorel 0, fp+2
line: 200 [0x15] 21:	movi #0, ebx
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 0
          [0x19] 25:	movn #0
          [0x1a] 26:	smov ebx, sp+0
          [0x1b] 27:	sizeof egx
          [0x1c] 28:	lt ebx, egx
          [0x1d] 29:	movi #60, adx
          [0x1f] 31:	ifne
          [0x20] 32:	iaload_2 ebx, ebx
          [0x21] 33:	smovr_2 ebx, fp+3
line: 201 [0x22] 34:	loadl ebx, fp+3
          [0x23] 35:	rstore ebx
          [0x24] 36:	movl 1
          [0x25] 37:	loadl ebx, fp+2
          [0x26] 38:	movi #1, ecx
          [0x28] 40:	addl ecx, @2
          [0x29] 41:	chklen ebx
          [0x2a] 42:	iaload_2 ebx, ebx
          [0x2b] 43:	movr egx, ebx
          [0x2c] 44:	loadval ebx
          [0x2d] 45:	tne ebx, egx
          [0x2e] 46:	movr ebx, cmt
          [0x2f] 47:	movi #55, adx
          [0x31] 49:	ifne
line: 202 [0x32] 50:	movi #0, ebx
          [0x34] 52:	return_val ebx
          [0x35] 53:	ret
          [0x36] 54:	nop
          [0x37] 55:	nop
          [0x38] 56:	smov ebx, sp+0
          [0x39] 57:	inc ebx
          [0x3a] 58:	smovr ebx, sp+0
          [0x3b] 59:	goto @24
          [0x3c] 60:	pop
line: 206 [0x3d] 61:	movi #1, ebx
          [0x3f] 63:	return_val ebx
          [0x40] 64:	ret

func:@577 [std#string.$operator!=] in file: lib/support//0.2.587//string.sharp:210:28: note:  
		        public def operator!=( var[] str ) : var {
		                           ^


$operator!=:
line: 210 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	new_class @46 // std#string
          [0x3] 3:	movl 1
          [0x4] 4:	pushobj
          [0x5] 5:	call @558 // <std#string.string(var[])>
          [0x6] 6:	call @574 // <std#string.$operator==(std#string)>
          [0x7] 7:	loadval ebx
          [0x8] 8:	not ebx, ebx
          [0x9] 9:	return_val ebx
          [0xa] 10:	ret

func:@578 [std#string.$operator=] in file: lib/support//0.2.587//string.sharp:214:28: note:  
		        public def operator=( var[] immstr )
		                           ^


$operator=:
line: 215 [0x0] 0:	movl 1
          [0x1] 1:	checknull
          [0x2] 2:	movr ebx, cmt
          [0x3] 3:	movi #10, adx
          [0x5] 5:	ifne
line: 215 [0x6] 6:	movl 0
          [0x7] 7:	movn #0
          [0x8] 8:	del
          [0x9] 9:	goto @22
line: 217 [0xa] 10:	movl 1
          [0xb] 11:	pushobj
          [0xc] 12:	movl 1
          [0xd] 13:	sizeof ebx
          [0xe] 14:	rstore ebx
          [0xf] 15:	call @619 // <std#__SRT_Global.copyOf(object,var)>
          [0x10] 16:	movsl #0
          [0x11] 17:	vcast 1
          [0x12] 18:	movl 0
          [0x13] 19:	movn #0
          [0x14] 20:	popobj
          [0x15] 21:	nop
          [0x16] 22:	nop
          [0x17] 23:	ret

func:@579 [std#string.$operator+] in file: lib/support//0.2.587//string.sharp:221:28: note:  
		        public def operator+( var num ) : string
		                           ^


$operator+:
line: 222 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	movl 0
          [0x2] 2:	movn #0
          [0x3] 3:	pushobj
          [0x4] 4:	call @558 // <std#string.string(var[])>
          [0x5] 5:	movl 2
          [0x6] 6:	popobj
line: 223 [0x7] 7:	movl 2
          [0x8] 8:	pushobj
          [0x9] 9:	loadl ebx, fp+1
          [0xa] 10:	rstore ebx
          [0xb] 11:	call @585 // <std#string.parse(var)>
          [0xc] 12:	call @584 // <std#string.toArray()>
          [0xd] 13:	call @567 // <std#string.append(var[])>
          [0xe] 14:	pop
line: 225 [0xf] 15:	movl 2
          [0x10] 16:	returnobj
          [0x11] 17:	ret

func:@580 [std#string.$operator+=] in file: lib/support//0.2.587//string.sharp:229:28: note:  
		        public def operator+=( var num ) : string
		                           ^


$operator+=:
line: 230 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	loadl ebx, fp+1
          [0x3] 3:	rstore ebx
          [0x4] 4:	call @585 // <std#string.parse(var)>
          [0x5] 5:	call @584 // <std#string.toArray()>
          [0x6] 6:	call @567 // <std#string.append(var[])>
          [0x7] 7:	movsl #0
          [0x8] 8:	returnobj
          [0x9] 9:	ret

func:@581 [std#string.$operator+=] in file: lib/support//0.2.587//string.sharp:234:28: note:  
		        public def operator+=( Printable o ) : string
		                           ^


$operator+=:
line: 235 [0x0] 0:	movl 1
          [0x1] 1:	pushobj
          [0x2] 2:	invoke_delegate 4, 0
          [0x3] 3:	movl 2
          [0x4] 4:	popobj
line: 236 [0x5] 5:	movl 2
          [0x6] 6:	checknull
          [0x7] 7:	not cmt, cmt
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	cmp ebx, 1
          [0xa] 10:	movr ebx, cmt
          [0xb] 11:	skne 10 // pc = 21
          [0xc] 12:	istore 1
          [0xd] 13:	movl 2
          [0xe] 14:	movn #0
          [0xf] 15:	checknull
          [0x10] 16:	not cmt, cmt
          [0x11] 17:	movr ebx, cmt
          [0x12] 18:	loadval ecx
          [0x13] 19:	and ecx, ebx
          [0x14] 20:	movr ebx, cmt
          [0x15] 21:	movr cmt, ebx
          [0x16] 22:	movi #35, adx
          [0x18] 24:	ifne
line: 237 [0x19] 25:	movl 0
          [0x1a] 26:	pushobj
          [0x1b] 27:	movl 2
          [0x1c] 28:	movn #0
          [0x1d] 29:	pushobj
          [0x1e] 30:	call @567 // <std#string.append(var[])>
          [0x1f] 31:	movsl #0
          [0x20] 32:	returnobj
          [0x21] 33:	ret
          [0x22] 34:	goto @43
line: 239 [0x23] 35:	movl 0
          [0x24] 36:	pushobj
          [0x25] 37:	newstr @243 // "null"
          [0x26] 38:	call @567 // <std#string.append(var[])>
          [0x27] 39:	movsl #0
          [0x28] 40:	returnobj
          [0x29] 41:	ret
          [0x2a] 42:	nop
          [0x2b] 43:	nop
          [0x2c] 44:	pushnil 
          [0x2d] 45:	popobj
          [0x2e] 46:	returnobj
          [0x2f] 47:	ret

func:@582 [std#string.$operator+=] in file: lib/support//0.2.587//string.sharp:243:28: note:  
		        public def operator+=( var[] immstr ) : string
		                           ^


$operator+=:
line: 244 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	movl 1
          [0x3] 3:	pushobj
          [0x4] 4:	call @567 // <std#string.append(var[])>
          [0x5] 5:	movsl #0
          [0x6] 6:	returnobj
          [0x7] 7:	ret

func:@583 [std#string.$operator+=] in file: lib/support//0.2.587//string.sharp:248:28: note:  
		        public def operator+=( string str ) : string
		                           ^


$operator+=:
line: 249 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	movl 1
          [0x3] 3:	pushobj
          [0x4] 4:	call @584 // <std#string.toArray()>
          [0x5] 5:	call @567 // <std#string.append(var[])>
          [0x6] 6:	movsl #0
          [0x7] 7:	returnobj
          [0x8] 8:	ret

func:@584 [std#string.toArray] in file: lib/support//0.2.587//string.sharp:253:27: note:  
		        public def toArray() : var[]
		                          ^


toArray:
line: 254 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	checknull
          [0x3] 3:	movr ebx, cmt
          [0x4] 4:	movi #11, adx
          [0x6] 6:	ifne
line: 254 [0x7] 7:	movl 0
          [0x8] 8:	del
          [0x9] 9:	ret
          [0xa] 10:	nop
          [0xb] 11:	nop
line: 255 [0xc] 12:	movl 0
          [0xd] 13:	movn #0
          [0xe] 14:	pushobj
          [0xf] 15:	movl 0
          [0x10] 16:	movn #0
          [0x11] 17:	sizeof ebx
          [0x12] 18:	rstore ebx
          [0x13] 19:	call @619 // <std#__SRT_Global.copyOf(object,var)>
          [0x14] 20:	movsl #0
          [0x15] 21:	vcast 1
          [0x16] 22:	movsl #0
          [0x17] 23:	returnobj
          [0x18] 24:	ret

func:@585 [std#string.parse] in file: lib/support//0.2.587//string.sharp:259:32: note:  
		        public static def parse( var number ) : string
		                               ^


parse:
line: 260 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	movg @46 // @std#string
          [0x2] 2:	movn #1
          [0x3] 3:	movi #0, adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	rstore ebx
          [0x7] 7:	loadl ebx, fp+0
          [0x8] 8:	rstore ebx
          [0x9] 9:	movg @46 // @std#string
          [0xa] 10:	movn #2
          [0xb] 11:	movi #0, adx
          [0xd] 13:	iaload_2 ebx, adx
          [0xe] 14:	rstore ebx
          [0xf] 15:	call @626 // <std#__SRT_Global.snprintf(var,var,var)>
          [0x10] 16:	call @558 // <std#string.string(var[])>
          [0x11] 17:	movsl #0
          [0x12] 18:	returnobj
          [0x13] 19:	ret

func:@586 [std#string.substring] in file: lib/support//0.2.587//string.sharp:264:29: note:  
		        public def substring(var startIndex) : string {
		                            ^


substring:
line: 264 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	call @595 // <std#string.size()>
          [0x3] 3:	loadval egx
          [0x4] 4:	loadl ebx, fp+1
          [0x5] 5:	gte ebx, egx
          [0x6] 6:	movr ebx, cmt
          [0x7] 7:	movr ebx, cmt
          [0x8] 8:	skpe 9 // pc = 17
          [0x9] 9:	movi #0, ebx
          [0xb] 11:	movr egx, ebx
          [0xc] 12:	loadl ebx, fp+1
          [0xd] 13:	lt ebx, egx
          [0xe] 14:	movr ebx, cmt
          [0xf] 15:	cmp ebx, 1
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	movr cmt, ebx
          [0x12] 18:	movi #28, adx
          [0x14] 20:	ifne
line: 265 [0x15] 21:	new_class @46 // std#string
          [0x16] 22:	newstr @226 // ""
          [0x17] 23:	call @558 // <std#string.string(var[])>
          [0x18] 24:	movsl #0
          [0x19] 25:	returnobj
          [0x1a] 26:	ret
          [0x1b] 27:	nop
          [0x1c] 28:	nop
line: 268 [0x1d] 29:	new_class @46 // std#string
          [0x1e] 30:	call @599 // <std#string.string()>
          [0x1f] 31:	movl 2
          [0x20] 32:	popobj
line: 269 [0x21] 33:	movl 0
          [0x22] 34:	movn #0
          [0x23] 35:	pushobj
          [0x24] 36:	loadl ebx, fp+1
          [0x25] 37:	rstore ebx
          [0x26] 38:	movi #1, ebx
          [0x28] 40:	rstore ebx
          [0x29] 41:	movl 0
          [0x2a] 42:	pushobj
          [0x2b] 43:	call @595 // <std#string.size()>
          [0x2c] 44:	loadval ebx
          [0x2d] 45:	loadval ecx
          [0x2e] 46:	sub ebx, ecx -> ebx
          [0x30] 48:	rstore ebx
          [0x31] 49:	call @621 // <std#__SRT_Global.memcpy(object,var,var)>
          [0x32] 50:	movsl #0
          [0x33] 51:	vcast 1
          [0x34] 52:	movl 2
          [0x35] 53:	movn #0
          [0x36] 54:	popobj
line: 270 [0x37] 55:	movl 2
          [0x38] 56:	returnobj
          [0x39] 57:	ret

func:@587 [std#string.substring] in file: lib/support//0.2.587//string.sharp:274:29: note:  
		        public def substring(var startIndex, var stopIndex) : string {
		                            ^


substring:
line: 274 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	call @595 // <std#string.size()>
          [0x3] 3:	loadval egx
          [0x4] 4:	loadl ebx, fp+1
          [0x5] 5:	gte ebx, egx
          [0x6] 6:	movr ebx, cmt
          [0x7] 7:	movr ebx, cmt
          [0x8] 8:	skpe 9 // pc = 17
          [0x9] 9:	movi #0, ebx
          [0xb] 11:	movr egx, ebx
          [0xc] 12:	loadl ebx, fp+1
          [0xd] 13:	lt ebx, egx
          [0xe] 14:	movr ebx, cmt
          [0xf] 15:	cmp ebx, 1
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	movr cmt, ebx
          [0x12] 18:	movi #28, adx
          [0x14] 20:	ifne
line: 275 [0x15] 21:	new_class @46 // std#string
          [0x16] 22:	newstr @226 // ""
          [0x17] 23:	call @558 // <std#string.string(var[])>
          [0x18] 24:	movsl #0
          [0x19] 25:	returnobj
          [0x1a] 26:	ret
          [0x1b] 27:	nop
          [0x1c] 28:	nop
line: 276 [0x1d] 29:	loadl ebx, fp+1
          [0x1e] 30:	movr egx, ebx
          [0x1f] 31:	loadl ebx, fp+2
          [0x20] 32:	lt ebx, egx
          [0x21] 33:	movr ebx, cmt
          [0x22] 34:	movi #52, adx
          [0x24] 36:	ifne
line: 277 [0x25] 37:	new_class @11 // std#IllegalArgumentException
          [0x26] 38:	new_class @46 // std#string
          [0x27] 39:	newstr @298 // "stopIndex: "
          [0x28] 40:	call @558 // <std#string.string(var[])>
          [0x29] 41:	loadl ebx, fp+2
          [0x2a] 42:	rstore ebx
          [0x2b] 43:	call @579 // <std#string.$operator+(var)>
          [0x2c] 44:	newstr @299 // " cannot be less than startIndex: "
          [0x2d] 45:	call @572 // <std#string.$operator+(var[])>
          [0x2e] 46:	loadl ebx, fp+1
          [0x2f] 47:	rstore ebx
          [0x30] 48:	call @579 // <std#string.$operator+(var)>
          [0x31] 49:	call @85 // <std#IllegalArgumentException.IllegalArgumentException(std#string)>
          [0x32] 50:	throw 
          [0x33] 51:	nop
          [0x34] 52:	nop
line: 281 [0x35] 53:	new_class @46 // std#string
          [0x36] 54:	call @599 // <std#string.string()>
          [0x37] 55:	movl 3
          [0x38] 56:	popobj
line: 282 [0x39] 57:	movl 0
          [0x3a] 58:	movn #0
          [0x3b] 59:	pushobj
          [0x3c] 60:	loadl ebx, fp+1
          [0x3d] 61:	rstore ebx
          [0x3e] 62:	loadl ebx, fp+2
          [0x3f] 63:	rstore ebx
          [0x40] 64:	call @621 // <std#__SRT_Global.memcpy(object,var,var)>
          [0x41] 65:	movsl #0
          [0x42] 66:	vcast 1
          [0x43] 67:	movl 3
          [0x44] 68:	movn #0
          [0x45] 69:	popobj
line: 283 [0x46] 70:	movl 3
          [0x47] 71:	returnobj
          [0x48] 72:	ret

func:@588 [std#string.parseInt] in file: lib/support//0.2.587//string.sharp:287:35: note:  
		        public static def parseInt(string s) : var {
		                                  ^


parseInt:
line: 287 [0x0] 0:	istorel 0, fp+1
line: 288 [0x2] 2:	istorel 0, fp+2
line: 289 [0x4] 4:	istorel 0, fp+3
line: 290 [0x6] 6:	movl 0
          [0x7] 7:	pushobj
          [0x8] 8:	call @595 // <std#string.size()>
          [0x9] 9:	loadval ebx
          [0xa] 10:	smovr_2 ebx, fp+4
line: 291 [0xb] 11:	movl 0
          [0xc] 12:	pushobj
          [0xd] 13:	movi #0, ebx
          [0xf] 15:	rstore ebx
          [0x10] 16:	call @569 // <std#string.at(var)>
          [0x11] 17:	movi #45, ebx
          [0x13] 19:	movr egx, ebx
          [0x14] 20:	loadval ebx
          [0x15] 21:	test ebx, egx
          [0x16] 22:	movr ebx, cmt
          [0x17] 23:	movi #31, adx
          [0x19] 25:	ifne
line: 292 [0x1a] 26:	istorel 1, fp+3
line: 293 [0x1c] 28:	istorel 1, fp+1
          [0x1e] 30:	nop
          [0x1f] 31:	nop
line: 295 [0x20] 32:	loadl ebx, fp+4
          [0x21] 33:	movr egx, ebx
          [0x22] 34:	loadl ebx, fp+1
          [0x23] 35:	lt ebx, egx
          [0x24] 36:	movr ebx, cmt
          [0x25] 37:	movi #90, adx
          [0x27] 39:	ifne
line: 296 [0x28] 40:	movl 0
          [0x29] 41:	pushobj
          [0x2a] 42:	loadl ebx, fp+1
          [0x2b] 43:	rstore ebx
          [0x2c] 44:	call @569 // <std#string.at(var)>
          [0x2d] 45:	call @63 // <std#char.isDigit(var)>
          [0x2e] 46:	loadval ebx
          [0x2f] 47:	not ebx, ebx
          [0x30] 48:	movr cmt, ebx
          [0x31] 49:	movi #67, adx
          [0x33] 51:	ifne
line: 297 [0x34] 52:	new_class @11 // std#IllegalArgumentException
          [0x35] 53:	new_class @46 // std#string
          [0x36] 54:	newstr @300 // "illegal char in string: "
          [0x37] 55:	call @558 // <std#string.string(var[])>
          [0x38] 56:	new_class @8 // std#char
          [0x39] 57:	movl 0
          [0x3a] 58:	pushobj
          [0x3b] 59:	loadl ebx, fp+1
          [0x3c] 60:	rstore ebx
          [0x3d] 61:	call @569 // <std#string.at(var)>
          [0x3e] 62:	call @31 // <std#char.char(var)>
          [0x3f] 63:	call @573 // <std#string.$operator+(std#Printable)>
          [0x40] 64:	call @85 // <std#IllegalArgumentException.IllegalArgumentException(std#string)>
          [0x41] 65:	throw 
          [0x42] 66:	nop
          [0x43] 67:	nop
line: 301 [0x44] 68:	movi #10, ebx
          [0x46] 70:	mull ebx, @2
line: 302 [0x47] 71:	movi #48, ebx
          [0x49] 73:	rstore ebx
          [0x4a] 74:	movl 0
          [0x4b] 75:	pushobj
          [0x4c] 76:	loadl ebx, fp+1
          [0x4d] 77:	movi #1, ecx
          [0x4f] 79:	addl ecx, @1
          [0x50] 80:	rstore ebx
          [0x51] 81:	call @569 // <std#string.at(var)>
          [0x52] 82:	loadval ebx
          [0x53] 83:	loadval ecx
          [0x54] 84:	sub ebx, ecx -> ebx
          [0x56] 86:	rstore ebx
          [0x57] 87:	loadval ebx
          [0x58] 88:	addl ebx, @2
          [0x59] 89:	goto @32
line: 304 [0x5a] 90:	loadl ebx, fp+3
          [0x5b] 91:	movr cmt, ebx
          [0x5c] 92:	movi #99, adx
          [0x5e] 94:	ifne
line: 305 [0x5f] 95:	loadl ebx, fp+2
          [0x60] 96:	imul ebx, #-1
          [0x61] 97:	smovr_2 ebx, fp+2
          [0x62] 98:	nop
          [0x63] 99:	nop
line: 306 [0x64] 100:	loadl ebx, fp+2
          [0x65] 101:	return_val ebx
          [0x66] 102:	ret

func:@589 [std#string.startsWith] in file: lib/support//0.2.587//string.sharp:315:30: note:  
		        public def startsWith(string prefix) : var {
		                             ^


startsWith:
line: 316 [0x0] 0:	movl 1
          [0x1] 1:	checknull
          [0x2] 2:	movr ebx, cmt
          [0x3] 3:	movr ebx, cmt
          [0x4] 4:	skpe 13 // pc = 17
          [0x5] 5:	movl 0
          [0x6] 6:	movn #0
          [0x7] 7:	sizeof ebx
          [0x8] 8:	rstore ebx
          [0x9] 9:	movl 1
          [0xa] 10:	movn #0
          [0xb] 11:	sizeof ebx
          [0xc] 12:	loadval ecx
          [0xd] 13:	gt ebx, ecx
          [0xe] 14:	movr ebx, cmt
          [0xf] 15:	cmp ebx, 1
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	movr cmt, ebx
          [0x12] 18:	movi #26, adx
          [0x14] 20:	ifne
line: 317 [0x15] 21:	movi #0, ebx
          [0x17] 23:	return_val ebx
          [0x18] 24:	ret
          [0x19] 25:	nop
          [0x1a] 26:	nop
line: 319 [0x1b] 27:	istorel 0, fp+2
          [0x1d] 29:	movl 1
          [0x1e] 30:	movn #0
          [0x1f] 31:	sizeof ebx
          [0x20] 32:	movr egx, ebx
          [0x21] 33:	loadl ebx, fp+2
          [0x22] 34:	lt ebx, egx
          [0x23] 35:	movr ebx, cmt
          [0x24] 36:	movi #68, adx
          [0x26] 38:	ifne
line: 321 [0x27] 39:	movl 0
          [0x28] 40:	movn #0
          [0x29] 41:	loadl ebx, fp+2
          [0x2a] 42:	chklen ebx
          [0x2b] 43:	iaload_2 ebx, ebx
          [0x2c] 44:	rstore ebx
          [0x2d] 45:	movl 1
          [0x2e] 46:	movn #0
          [0x2f] 47:	loadl ebx, fp+2
          [0x30] 48:	chklen ebx
          [0x31] 49:	iaload_2 ebx, ebx
          [0x32] 50:	movr egx, ebx
          [0x33] 51:	loadval ebx
          [0x34] 52:	tne ebx, egx
          [0x35] 53:	movr ebx, cmt
          [0x36] 54:	movi #62, adx
          [0x38] 56:	ifne
line: 322 [0x39] 57:	movi #0, ebx
          [0x3b] 59:	return_val ebx
          [0x3c] 60:	ret
          [0x3d] 61:	nop
          [0x3e] 62:	nop
          [0x3f] 63:	loadl ebx, fp+2
          [0x40] 64:	movi #1, ecx
          [0x42] 66:	addl ecx, @2
          [0x43] 67:	goto @29
line: 324 [0x44] 68:	movi #1, ebx
          [0x46] 70:	return_val ebx
          [0x47] 71:	ret

func:@590 [std#string.find] in file: lib/support//0.2.587//string.sharp:328:24: note:  
		        public def find(string str) : var {
		                       ^


find:
line: 328 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	call @595 // <std#string.size()>
          [0x3] 3:	movl 1
          [0x4] 4:	pushobj
          [0x5] 5:	call @595 // <std#string.size()>
          [0x6] 6:	loadval ebx
          [0x7] 7:	loadval ecx
          [0x8] 8:	gt ebx, ecx
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	movi #18, adx
          [0xc] 12:	ifne
line: 329 [0xd] 13:	movi #0, ebx
          [0xf] 15:	return_val ebx
          [0x10] 16:	ret
          [0x11] 17:	nop
          [0x12] 18:	nop
line: 332 [0x13] 19:	istorel 0, fp+2
line: 333 [0x15] 21:	istorel 0, fp+3
          [0x17] 23:	movl 0
          [0x18] 24:	pushobj
          [0x19] 25:	call @595 // <std#string.size()>
          [0x1a] 26:	loadval egx
          [0x1b] 27:	loadl ebx, fp+3
          [0x1c] 28:	lt ebx, egx
          [0x1d] 29:	movr ebx, cmt
          [0x1e] 30:	movi #83, adx
          [0x20] 32:	ifne
line: 334 [0x21] 33:	movl 1
          [0x22] 34:	pushobj
          [0x23] 35:	call @595 // <std#string.size()>
          [0x24] 36:	loadl ebx, fp+3
          [0x25] 37:	loadval egx
          [0x26] 38:	add ebx, egx -> ebx
          [0x28] 40:	rstore ebx
          [0x29] 41:	loadval ebx
          [0x2a] 42:	smovr_2 ebx, fp+2
line: 335 [0x2b] 43:	movl 0
          [0x2c] 44:	pushobj
          [0x2d] 45:	loadl ebx, fp+3
          [0x2e] 46:	rstore ebx
          [0x2f] 47:	movl 0
          [0x30] 48:	pushobj
          [0x31] 49:	call @595 // <std#string.size()>
          [0x32] 50:	loadval egx
          [0x33] 51:	loadl ebx, fp+2
          [0x34] 52:	gt ebx, egx
          [0x35] 53:	movr ebx, cmt
          [0x36] 54:	loadpc_2 adx, pc+8 // adx = 62
          [0x37] 55:	ifne
          [0x38] 56:	movl 0
          [0x39] 57:	pushobj
          [0x3a] 58:	call @595 // <std#string.size()>
          [0x3b] 59:	movi #1, cmt
          [0x3d] 61:	skpe 3 // pc = 64
          [0x3e] 62:	loadl ebx, fp+2
          [0x3f] 63:	rstore ebx
          [0x40] 64:	call @587 // <std#string.substring(var,var)>
          [0x41] 65:	movl 1
          [0x42] 66:	pushobj
          [0x43] 67:	call @574 // <std#string.$operator==(std#string)>
          [0x44] 68:	loadval cmt
          [0x45] 69:	movi #77, adx
          [0x47] 71:	ifne
line: 336 [0x48] 72:	movi #1, ebx
          [0x4a] 74:	return_val ebx
          [0x4b] 75:	ret
          [0x4c] 76:	nop
          [0x4d] 77:	nop
          [0x4e] 78:	loadl ebx, fp+3
          [0x4f] 79:	movi #1, ecx
          [0x51] 81:	addl ecx, @3
          [0x52] 82:	goto @23
line: 339 [0x53] 83:	movi #0, ebx
          [0x55] 85:	return_val ebx
          [0x56] 86:	ret

func:@591 [std#string.endsWith] in file: lib/support//0.2.587//string.sharp:343:28: note:  
		        public def endsWith(string postFix) : var {
		                           ^


endsWith:
line: 343 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	call @595 // <std#string.size()>
          [0x3] 3:	movl 1
          [0x4] 4:	pushobj
          [0x5] 5:	call @595 // <std#string.size()>
          [0x6] 6:	loadval ebx
          [0x7] 7:	loadval ecx
          [0x8] 8:	gt ebx, ecx
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	movi #18, adx
          [0xc] 12:	ifne
line: 344 [0xd] 13:	movi #0, ebx
          [0xf] 15:	return_val ebx
          [0x10] 16:	ret
          [0x11] 17:	nop
          [0x12] 18:	nop
line: 346 [0x13] 19:	movl 1
          [0x14] 20:	pushobj
          [0x15] 21:	call @595 // <std#string.size()>
          [0x16] 22:	loadval ebx
          [0x17] 23:	smovr_2 ebx, fp+2
line: 347 [0x18] 24:	new_class @46 // std#string
          [0x19] 25:	call @599 // <std#string.string()>
          [0x1a] 26:	movl 3
          [0x1b] 27:	popobj
line: 348 [0x1c] 28:	loadl ebx, fp+2
          [0x1d] 29:	rstore ebx
          [0x1e] 30:	movl 0
          [0x1f] 31:	pushobj
          [0x20] 32:	call @595 // <std#string.size()>
          [0x21] 33:	loadval ebx
          [0x22] 34:	loadval egx
          [0x23] 35:	sub ebx, egx -> ebx
          [0x25] 37:	rstore ebx
          [0x26] 38:	loadval ebx
          [0x27] 39:	smovr_2 ebx, fp+4
          [0x28] 40:	movl 0
          [0x29] 41:	pushobj
          [0x2a] 42:	call @595 // <std#string.size()>
          [0x2b] 43:	loadval egx
          [0x2c] 44:	loadl ebx, fp+4
          [0x2d] 45:	lt ebx, egx
          [0x2e] 46:	movr ebx, cmt
          [0x2f] 47:	movi #66, adx
          [0x31] 49:	ifne
line: 349 [0x32] 50:	movl 3
          [0x33] 51:	pushobj
          [0x34] 52:	new_class @8 // std#char
          [0x35] 53:	movl 0
          [0x36] 54:	pushobj
          [0x37] 55:	loadl ebx, fp+4
          [0x38] 56:	rstore ebx
          [0x39] 57:	call @569 // <std#string.at(var)>
          [0x3a] 58:	call @31 // <std#char.char(var)>
          [0x3b] 59:	call @581 // <std#string.$operator+=(std#Printable)>
          [0x3c] 60:	pop
          [0x3d] 61:	loadl ebx, fp+4
          [0x3e] 62:	movi #1, ecx
          [0x40] 64:	addl ecx, @4
          [0x41] 65:	goto @40
line: 352 [0x42] 66:	movl 3
          [0x43] 67:	pushobj
          [0x44] 68:	movl 1
          [0x45] 69:	pushobj
          [0x46] 70:	call @574 // <std#string.$operator==(std#string)>
          [0x47] 71:	loadval ebx
          [0x48] 72:	return_val ebx
          [0x49] 73:	ret

func:@592 [std#string.toLower] in file: lib/support//0.2.587//string.sharp:357:34: note:  
		        public static def toLower(string s) : string {
		                                 ^


toLower:
line: 357 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	call @599 // <std#string.string()>
          [0x2] 2:	movl 1
          [0x3] 3:	popobj
line: 358 [0x4] 4:	movl 0
          [0x5] 5:	pushobj
          [0x6] 6:	call @596 // <std#string.getData()>
          [0x7] 7:	movl 2
          [0x8] 8:	popobj
line: 359 [0x9] 9:	movi #0, ebx
          [0xb] 11:	rstore ebx
          [0xc] 12:	movl 2
          [0xd] 13:	smov ebx, sp+0
          [0xe] 14:	sizeof egx
          [0xf] 15:	lt ebx, egx
          [0x10] 16:	movi #32, adx
          [0x12] 18:	ifne
          [0x13] 19:	iaload_2 ebx, ebx
          [0x14] 20:	smovr_2 ebx, fp+3
line: 360 [0x15] 21:	movl 1
          [0x16] 22:	pushobj
          [0x17] 23:	loadl ebx, fp+3
          [0x18] 24:	rstore ebx
          [0x19] 25:	call @67 // <std#char.toLower(var)>
          [0x1a] 26:	call @565 // <std#string.append(var)>
          [0x1b] 27:	pop
          [0x1c] 28:	smov ebx, sp+0
          [0x1d] 29:	inc ebx
          [0x1e] 30:	smovr ebx, sp+0
          [0x1f] 31:	goto @12
          [0x20] 32:	pop
line: 362 [0x21] 33:	movl 1
          [0x22] 34:	returnobj
          [0x23] 35:	ret

func:@593 [std#string.toUpper] in file: lib/support//0.2.587//string.sharp:366:34: note:  
		        public static def toUpper(string s) : string {
		                                 ^


toUpper:
line: 366 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	call @599 // <std#string.string()>
          [0x2] 2:	movl 1
          [0x3] 3:	popobj
line: 367 [0x4] 4:	movl 0
          [0x5] 5:	pushobj
          [0x6] 6:	call @596 // <std#string.getData()>
          [0x7] 7:	movl 2
          [0x8] 8:	popobj
line: 368 [0x9] 9:	movi #0, ebx
          [0xb] 11:	rstore ebx
          [0xc] 12:	movl 2
          [0xd] 13:	smov ebx, sp+0
          [0xe] 14:	sizeof egx
          [0xf] 15:	lt ebx, egx
          [0x10] 16:	movi #32, adx
          [0x12] 18:	ifne
          [0x13] 19:	iaload_2 ebx, ebx
          [0x14] 20:	smovr_2 ebx, fp+3
line: 369 [0x15] 21:	movl 1
          [0x16] 22:	pushobj
          [0x17] 23:	loadl ebx, fp+3
          [0x18] 24:	rstore ebx
          [0x19] 25:	call @68 // <std#char.toUpper(var)>
          [0x1a] 26:	call @580 // <std#string.$operator+=(var)>
          [0x1b] 27:	pop
          [0x1c] 28:	smov ebx, sp+0
          [0x1d] 29:	inc ebx
          [0x1e] 30:	smovr ebx, sp+0
          [0x1f] 31:	goto @12
          [0x20] 32:	pop
line: 371 [0x21] 33:	movl 1
          [0x22] 34:	returnobj
          [0x23] 35:	ret

func:@594 [std#string.empty] in file: lib/support//0.2.587//string.sharp:375:25: note:  
		        public def empty() : var {
		                        ^


empty:
line: 375 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	sizeof ebx
          [0x3] 3:	rstore ebx
          [0x4] 4:	movi #0, ebx
          [0x6] 6:	movr egx, ebx
          [0x7] 7:	loadval ebx
          [0x8] 8:	test ebx, egx
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	return_val cmt
          [0xb] 11:	ret

func:@595 [std#string.size] in file: lib/support//0.2.587//string.sharp:379:24: note:  
		        public def size() : var
		                       ^


size:
line: 380 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	sizeof ebx
          [0x3] 3:	return_val ebx
          [0x4] 4:	ret

func:@596 [std#string.getData] in file: lib/support//0.2.587//string.sharp:384:27: note:  
		        public def getData() : var[] {
		                          ^


getData:
line: 384 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	returnobj
          [0x3] 3:	ret

func:@597 [std#string.toString] in file: lib/support//0.2.587//string.sharp:388:28: note:  
		        public def delegate::toString() : string {
		                           ^


toString:
line: 388 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	movl 0
          [0x2] 2:	movn #0
          [0x3] 3:	pushobj
          [0x4] 4:	call @558 // <std#string.string(var[])>
          [0x5] 5:	movsl #0
          [0x6] 6:	returnobj
          [0x7] 7:	ret

func:@598 [std#string.hash] in file: lib/support//0.2.587//string.sharp:392:21: note:  
		        def delegate::hash() : var {
		                    ^


hash:
line: 392 [0x0] 0:	istorel 0, fp+1
line: 394 [0x2] 2:	movl 0
          [0x3] 3:	movn #0
          [0x4] 4:	checknull
          [0x5] 5:	not cmt, cmt
          [0x6] 6:	movr ebx, cmt
          [0x7] 7:	movi #88, adx
          [0x9] 9:	ifne
line: 395 [0xa] 10:	istorel 1, fp+2
          [0xc] 12:	movl 0
          [0xd] 13:	movn #0
          [0xe] 14:	sizeof ebx
          [0xf] 15:	movr egx, ebx
          [0x10] 16:	loadl ebx, fp+2
          [0x11] 17:	lt ebx, egx
          [0x12] 18:	movr ebx, cmt
          [0x13] 19:	movi #87, adx
          [0x15] 21:	ifne
line: 396 [0x16] 22:	movl 0
          [0x17] 23:	movn #0
          [0x18] 24:	sizeof ebx
          [0x19] 25:	rstore ebx
          [0x1a] 26:	loadl ebx, fp+2
          [0x1b] 27:	loadval egx
          [0x1c] 28:	add ebx, egx -> ebx
          [0x1e] 30:	rstore ebx
          [0x1f] 31:	movl 0
          [0x20] 32:	movn #0
          [0x21] 33:	loadl ebx, fp+2
          [0x22] 34:	chklen ebx
          [0x23] 35:	iaload_2 ebx, ebx
          [0x24] 36:	rstore ebx
          [0x25] 37:	loadl ebx, fp+1
          [0x26] 38:	rstore ebx
          [0x27] 39:	loadl ebx, fp+2
          [0x28] 40:	movr egx, ebx
          [0x29] 41:	loadl ebx, fp+1
          [0x2a] 42:	shr ebx, egx -> ebx
          [0x2c] 44:	loadval egx
          [0x2d] 45:	sub ebx, egx -> ebx
          [0x2f] 47:	rstore ebx
          [0x30] 48:	loadval ebx
          [0x31] 49:	loadval ecx
          [0x32] 50:	add ebx, ecx -> ebx
          [0x34] 52:	rstore ebx
          [0x35] 53:	movl 0
          [0x36] 54:	movn #0
          [0x37] 55:	movi #1, ebx
          [0x39] 57:	rstore ebx
          [0x3a] 58:	loadl ebx, fp+2
          [0x3b] 59:	loadval egx
          [0x3c] 60:	sub ebx, egx -> ebx
          [0x3e] 62:	rstore ebx
          [0x3f] 63:	loadval ebx
          [0x40] 64:	chklen ebx
          [0x41] 65:	iaload_2 ebx, ebx
          [0x42] 66:	rstore ebx
          [0x43] 67:	loadval ebx
          [0x44] 68:	loadval ecx
          [0x45] 69:	add ebx, ecx -> ebx
          [0x47] 71:	rstore ebx
          [0x48] 72:	loadval ebx
          [0x49] 73:	loadval ecx
          [0x4a] 74:	mul ebx, ecx -> ebx
          [0x4c] 76:	rstore ebx
          [0x4d] 77:	loadval ebx
          [0x4e] 78:	smovr_2 ebx, fp+1
line: 397 [0x4f] 79:	loadl ebx, fp+1
          [0x50] 80:	mov32 ebx, ebx
          [0x51] 81:	smovr_2 ebx, fp+1
          [0x52] 82:	loadl ebx, fp+2
          [0x53] 83:	movi #1, ecx
          [0x55] 85:	addl ecx, @2
          [0x56] 86:	goto @12
          [0x57] 87:	nop
          [0x58] 88:	nop
line: 401 [0x59] 89:	loadl ebx, fp+1
          [0x5a] 90:	mov32 ebx, ebx
          [0x5b] 91:	return_val ebx
          [0x5c] 92:	ret

func:@599 [std#string.string] in file: lib/support//0.2.587//string.sharp:6:13: note:  
		public class string {
		            ^


string:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@600 [std#__SRT_Global.print] in file: lib/support//0.2.587//System.sharp:18:4: note:  
		def print(var[] data) {
		   ^


print:
line: 18 [0x0] 0:	movg @0 // @std#__SRT_Global
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 0
         [0x4] 4:	pushobj
         [0x5] 5:	call @285 // <std.kernel#ConsoleHandler.printData(var[])>
         [0x6] 6:	ret

func:@601 [std#__SRT_Global.print] in file: lib/support//0.2.587//System.sharp:22:4: note:  
		def print(string str) {
		   ^


print:
line: 22 [0x0] 0:	movg @0 // @std#__SRT_Global
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 0
         [0x4] 4:	pushobj
         [0x5] 5:	call @584 // <std#string.toArray()>
         [0x6] 6:	call @285 // <std.kernel#ConsoleHandler.printData(var[])>
         [0x7] 7:	ret

func:@602 [std#__SRT_Global.println] in file: lib/support//0.2.587//System.sharp:26:4: note:  
		def println(var[] data) {
		   ^


println:
line: 26 [0x0] 0:	movg @0 // @std#__SRT_Global
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 0
         [0x4] 4:	pushobj
         [0x5] 5:	call @285 // <std.kernel#ConsoleHandler.printData(var[])>
line: 27 [0x6] 6:	movi #10, ebx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @614 // <std#__SRT_Global.printChar(var)>
         [0xa] 10:	ret

func:@603 [std#__SRT_Global.println] in file: lib/support//0.2.587//System.sharp:31:4: note:  
		def println(var data) {
		   ^


println:
line: 31 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	call @613 // <std#__SRT_Global.print(var)>
line: 32 [0x3] 3:	movi #10, ebx
         [0x5] 5:	rstore ebx
         [0x6] 6:	call @614 // <std#__SRT_Global.printChar(var)>
         [0x7] 7:	ret

func:@604 [std#__SRT_Global.println] in file: lib/support//0.2.587//System.sharp:36:4: note:  
		def println() {
		   ^


println:
line: 36 [0x0] 0:	movi #10, ebx
         [0x2] 2:	rstore ebx
         [0x3] 3:	call @614 // <std#__SRT_Global.printChar(var)>
         [0x4] 4:	ret

func:@605 [std#__SRT_Global.println] in file: lib/support//0.2.587//System.sharp:40:4: note:  
		def println(Enum e) {
		   ^


println:
line: 40 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	call @77 // <std#Enum.getName()>
         [0x3] 3:	call @601 // <std#__SRT_Global.print(std#string)>
line: 41 [0x4] 4:	movi #10, ebx
         [0x6] 6:	rstore ebx
         [0x7] 7:	call @614 // <std#__SRT_Global.printChar(var)>
         [0x8] 8:	ret

func:@606 [std#__SRT_Global.readLine] in file: lib/support//0.2.587//System.sharp:45:4: note:  
		def readLine() : string {
		   ^


readLine:
line: 45 [0x0] 0:	istorel 0, fp+0
line: 46 [0x2] 2:	new_class @46 // std#string
         [0x3] 3:	newstr @226 // ""
         [0x4] 4:	call @558 // <std#string.string(var[])>
         [0x5] 5:	popl 1
line: 48 [0x6] 6:	call @608 // <std#__SRT_Global.readChar()>
         [0x7] 7:	loadval ebx
         [0x8] 8:	smovr_2 ebx, fp+0
line: 49 [0x9] 9:	loadl ebx, fp+0
         [0xa] 10:	rstore ebx
         [0xb] 11:	movi #13, ebx
         [0xd] 13:	movr egx, ebx
         [0xe] 14:	loadval ebx
         [0xf] 15:	tne ebx, egx
         [0x10] 16:	movr ebx, cmt
         [0x11] 17:	cmp ebx, 1
         [0x12] 18:	movr ebx, cmt
         [0x13] 19:	skne 13 // pc = 32
         [0x14] 20:	istore 1
         [0x15] 21:	loadl ebx, fp+0
         [0x16] 22:	rstore ebx
         [0x17] 23:	movi #10, ebx
         [0x19] 25:	movr egx, ebx
         [0x1a] 26:	loadval ebx
         [0x1b] 27:	tne ebx, egx
         [0x1c] 28:	movr ebx, cmt
         [0x1d] 29:	loadval ecx
         [0x1e] 30:	and ecx, ebx
         [0x1f] 31:	movr ebx, cmt
         [0x20] 32:	movr cmt, ebx
         [0x21] 33:	movi #52, adx
         [0x23] 35:	ifne
line: 50 [0x24] 36:	movl 1
         [0x25] 37:	pushobj
         [0x26] 38:	movi #1, ebx
         [0x28] 40:	newarry ebx
         [0x29] 41:	movsl #0
         [0x2a] 42:	loadl ebx, fp+0
         [0x2b] 43:	movi #0, adx
         [0x2d] 45:	rmov adx, ebx
         [0x2e] 46:	call @582 // <std#string.$operator+=(var[])>
         [0x2f] 47:	pop
line: 51 [0x30] 48:	call @608 // <std#__SRT_Global.readChar()>
         [0x31] 49:	loadval ebx
         [0x32] 50:	smovr_2 ebx, fp+0
         [0x33] 51:	goto @9
line: 53 [0x34] 52:	movl 1
         [0x35] 53:	returnobj
         [0x36] 54:	ret

func:@607 [std#__SRT_Global.readPasswd] in file: lib/support//0.2.587//System.sharp:57:4: note:  
		def readPasswd() : string {
		   ^


readPasswd:
line: 57 [0x0] 0:	istorel 0, fp+0
line: 58 [0x2] 2:	new_class @46 // std#string
         [0x3] 3:	newstr @226 // ""
         [0x4] 4:	call @558 // <std#string.string(var[])>
         [0x5] 5:	popl 1
line: 60 [0x6] 6:	call @609 // <std#__SRT_Global.readRawChar()>
         [0x7] 7:	loadval ebx
         [0x8] 8:	smovr_2 ebx, fp+0
line: 61 [0x9] 9:	loadl ebx, fp+0
         [0xa] 10:	rstore ebx
         [0xb] 11:	movi #13, ebx
         [0xd] 13:	movr egx, ebx
         [0xe] 14:	loadval ebx
         [0xf] 15:	tne ebx, egx
         [0x10] 16:	movr ebx, cmt
         [0x11] 17:	cmp ebx, 1
         [0x12] 18:	movr ebx, cmt
         [0x13] 19:	skne 13 // pc = 32
         [0x14] 20:	istore 1
         [0x15] 21:	loadl ebx, fp+0
         [0x16] 22:	rstore ebx
         [0x17] 23:	movi #10, ebx
         [0x19] 25:	movr egx, ebx
         [0x1a] 26:	loadval ebx
         [0x1b] 27:	tne ebx, egx
         [0x1c] 28:	movr ebx, cmt
         [0x1d] 29:	loadval ecx
         [0x1e] 30:	and ecx, ebx
         [0x1f] 31:	movr ebx, cmt
         [0x20] 32:	movr cmt, ebx
         [0x21] 33:	movi #52, adx
         [0x23] 35:	ifne
line: 62 [0x24] 36:	movl 1
         [0x25] 37:	pushobj
         [0x26] 38:	movi #1, ebx
         [0x28] 40:	newarry ebx
         [0x29] 41:	movsl #0
         [0x2a] 42:	loadl ebx, fp+0
         [0x2b] 43:	movi #0, adx
         [0x2d] 45:	rmov adx, ebx
         [0x2e] 46:	call @582 // <std#string.$operator+=(var[])>
         [0x2f] 47:	pop
line: 63 [0x30] 48:	call @609 // <std#__SRT_Global.readRawChar()>
         [0x31] 49:	loadval ebx
         [0x32] 50:	smovr_2 ebx, fp+0
         [0x33] 51:	goto @9
line: 65 [0x34] 52:	movl 1
         [0x35] 53:	returnobj
         [0x36] 54:	ret

func:@608 [std#__SRT_Global.readChar] in file: lib/support//0.2.587//System.sharp:69:4: note:  
		def readChar() : var {
		   ^


readChar:
line: 69 [0x0] 0:	movg @0 // @std#__SRT_Global
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	call @287 // <std.kernel#ConsoleHandler.read()>
         [0x4] 4:	loadval ebx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@609 [std#__SRT_Global.readRawChar] in file: lib/support//0.2.587//System.sharp:73:4: note:  
		def readRawChar() : var {
		   ^


readRawChar:
line: 73 [0x0] 0:	movg @0 // @std#__SRT_Global
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	call @288 // <std.kernel#ConsoleHandler.readsilent()>
         [0x4] 4:	loadval ebx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@610 [std#__SRT_Global.println] in file: lib/support//0.2.587//System.sharp:77:4: note:  
		def println(string str) {
		   ^


println:
line: 77 [0x0] 0:	movg @0 // @std#__SRT_Global
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 0
         [0x4] 4:	pushobj
         [0x5] 5:	call @584 // <std#string.toArray()>
         [0x6] 6:	call @285 // <std.kernel#ConsoleHandler.printData(var[])>
line: 78 [0x7] 7:	movi #10, ebx
         [0x9] 9:	rstore ebx
         [0xa] 10:	call @614 // <std#__SRT_Global.printChar(var)>
         [0xb] 11:	ret

func:@611 [std#__SRT_Global.println] in file: lib/support//0.2.587//System.sharp:82:4: note:  
		def println(Printable o) {
		   ^


println:
line: 82 [0x0] 0:	movg @0 // @std#__SRT_Global
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 0
         [0x4] 4:	pushobj
         [0x5] 5:	invoke_delegate 4, 0
         [0x6] 6:	call @584 // <std#string.toArray()>
         [0x7] 7:	call @285 // <std.kernel#ConsoleHandler.printData(var[])>
line: 83 [0x8] 8:	movi #10, ebx
         [0xa] 10:	rstore ebx
         [0xb] 11:	call @614 // <std#__SRT_Global.printChar(var)>
         [0xc] 12:	ret

func:@612 [std#__SRT_Global.print] in file: lib/support//0.2.587//System.sharp:87:4: note:  
		def print(Printable o) {
		   ^


print:
line: 87 [0x0] 0:	movg @0 // @std#__SRT_Global
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 0
         [0x4] 4:	pushobj
         [0x5] 5:	invoke_delegate 4, 0
         [0x6] 6:	call @584 // <std#string.toArray()>
         [0x7] 7:	call @285 // <std.kernel#ConsoleHandler.printData(var[])>
         [0x8] 8:	ret

func:@613 [std#__SRT_Global.print] in file: lib/support//0.2.587//System.sharp:91:4: note:  
		def print(var data) {
		   ^


print:
line: 91 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	movi #0, ebx
         [0x4] 4:	rstore ebx
         [0x5] 5:	call @290 // <std.kernel#ConsoleHandler.__print_stdout_(var,var)>
         [0x6] 6:	ret

func:@614 [std#__SRT_Global.printChar] in file: lib/support//0.2.587//System.sharp:95:4: note:  
		def printChar(var data) {
		   ^


printChar:
line: 95 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	rstore ebx
         [0x2] 2:	movi #1, ebx
         [0x4] 4:	rstore ebx
         [0x5] 5:	call @290 // <std.kernel#ConsoleHandler.__print_stdout_(var,var)>
         [0x6] 6:	ret

func:@615 [std#__SRT_Global.flush] in file: lib/support//0.2.587//System.sharp:99:4: note:  
		def flush() {
		   ^


flush:
line: 99 [0x0] 0:	call @289 // <std.kernel#ConsoleHandler.flush()>
         [0x1] 1:	ret

func:@616 [std#__SRT_Global.getUtcTimeInMills] in file: lib/support//0.2.587//System.sharp:103:4: note:  
		def getUtcTimeInMills() : var {
		   ^


getUtcTimeInMills:
line: 103 [0x0] 0:	call @342 // <std.kernel#Time.millsTime()>
          [0x1] 1:	loadval ebx
          [0x2] 2:	return_val ebx
          [0x3] 3:	ret

func:@617 [std#__SRT_Global.getNanoTime] in file: lib/support//0.2.587//System.sharp:107:4: note:  
		def getNanoTime() : var {
		   ^


getNanoTime:
line: 107 [0x0] 0:	call @338 // <std.kernel#Time.nanoTime()>
          [0x1] 1:	loadval ebx
          [0x2] 2:	return_val ebx
          [0x3] 3:	ret

func:@618 [std#__SRT_Global.exit] in file: lib/support//0.2.587//System.sharp:111:4: note:  
		def exit() {
		   ^


exit:
line: 111 [0x0] 0:	call @305 // <std.kernel#Runtime.nativeExit()>
          [0x1] 1:	ret

func:@619 [std#__SRT_Global.copyOf] in file: lib/support//0.2.587//System.sharp:115:4: note:  
		def copyOf(object data, var len) : object[] {
		   ^


copyOf:
line: 115 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	loadl ebx, fp+1
          [0x3] 3:	rstore ebx
          [0x4] 4:	call @310 // <std.kernel#Runtime.copy(object[],var)>
          [0x5] 5:	movsl #0
          [0x6] 6:	returnobj
          [0x7] 7:	ret

func:@620 [std#__SRT_Global.copyOf] in file: lib/support//0.2.587//System.sharp:119:4: note:  
		def copyOf(object data, var indexLen, var len) : object[] {
		   ^


copyOf:
line: 119 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	loadl ebx, fp+1
          [0x3] 3:	rstore ebx
          [0x4] 4:	loadl ebx, fp+2
          [0x5] 5:	rstore ebx
          [0x6] 6:	call @311 // <std.kernel#Runtime.copy2(object[],var,var)>
          [0x7] 7:	movsl #0
          [0x8] 8:	returnobj
          [0x9] 9:	ret

func:@621 [std#__SRT_Global.memcpy] in file: lib/support//0.2.587//System.sharp:123:4: note:  
		def memcpy(object data, var startIndex, var endIndex) : object[] {
		   ^


memcpy:
line: 123 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	loadl ebx, fp+1
          [0x3] 3:	rstore ebx
          [0x4] 4:	loadl ebx, fp+2
          [0x5] 5:	rstore ebx
          [0x6] 6:	call @312 // <std.kernel#Runtime.copy3(object[],var,var)>
          [0x7] 7:	movsl #0
          [0x8] 8:	returnobj
          [0x9] 9:	ret

func:@622 [std#__SRT_Global.realloc] in file: lib/support//0.2.587//System.sharp:127:4: note:  
		def realloc(object data, var size) {
		   ^


realloc:
line: 127 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	loadl ebx, fp+1
          [0x3] 3:	rstore ebx
          [0x4] 4:	call @314 // <std.kernel#Runtime.realloc(object[],var)>
          [0x5] 5:	ret

func:@623 [std#__SRT_Global.invert] in file: lib/support//0.2.587//System.sharp:131:4: note:  
		def invert(object data, var startIndex, var endIndex) : object[] {
		   ^


invert:
line: 131 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	loadl ebx, fp+1
          [0x3] 3:	rstore ebx
          [0x4] 4:	loadl ebx, fp+2
          [0x5] 5:	rstore ebx
          [0x6] 6:	call @313 // <std.kernel#Runtime.copy4(object[],var,var)>
          [0x7] 7:	movsl #0
          [0x8] 8:	returnobj
          [0x9] 9:	ret

func:@624 [std#__SRT_Global.sizeOf] in file: lib/support//0.2.587//System.sharp:135:4: note:  
		def sizeOf(object data) : var {
		   ^


sizeOf:
line: 135 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	call @315 // <std.kernel#Runtime.sizeOf(object)>
          [0x3] 3:	loadval ebx
          [0x4] 4:	return_val ebx
          [0x5] 5:	ret

func:@625 [std#__SRT_Global.toString] in file: lib/support//0.2.587//System.sharp:139:4: note:  
		def toString(var data) : var[] {
		   ^


toString:
line: 139 [0x0] 0:	movi #103, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	loadl ebx, fp+0
          [0x4] 4:	rstore ebx
          [0x5] 5:	movi #0, ebx
          [0x7] 7:	rstore ebx
          [0x8] 8:	call @316 // <std.kernel#Runtime._snprintf(var,var,var)>
          [0x9] 9:	movsl #0
          [0xa] 10:	returnobj
          [0xb] 11:	ret

func:@626 [std#__SRT_Global.snprintf] in file: lib/support//0.2.587//System.sharp:143:4: note:  
		def snprintf(var fmt, var data, var precision) : var[] {
		   ^


snprintf:
line: 143 [0x0] 0:	loadl ebx, fp+0
          [0x1] 1:	rstore ebx
          [0x2] 2:	loadl ebx, fp+1
          [0x3] 3:	rstore ebx
          [0x4] 4:	loadl ebx, fp+2
          [0x5] 5:	rstore ebx
          [0x6] 6:	call @316 // <std.kernel#Runtime._snprintf(var,var,var)>
          [0x7] 7:	movsl #0
          [0x8] 8:	returnobj
          [0x9] 9:	ret

func:@627 [std#Throwable.Throwable] in file: lib/support//0.2.587//Throwable.sharp:12:21: note:  
		    public Throwable(var[] message) {
		                    ^


Throwable:
line: 12 [0x0] 0:	movl 1
         [0x1] 1:	pushobj
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	popobj
         [0x5] 5:	movl 0
         [0x6] 6:	returnobj
         [0x7] 7:	ret

func:@628 [std#Throwable.Throwable] in file: lib/support//0.2.587//Throwable.sharp:16:21: note:  
		    public Throwable(string message) {
		                    ^


Throwable:
line: 16 [0x0] 0:	movl 1
         [0x1] 1:	pushobj
         [0x2] 2:	call @584 // <std#string.toArray()>
         [0x3] 3:	movl 0
         [0x4] 4:	movn #0
         [0x5] 5:	popobj
         [0x6] 6:	movl 0
         [0x7] 7:	returnobj
         [0x8] 8:	ret

func:@629 [std#Throwable.getStackTrace] in file: lib/support//0.2.587//Throwable.sharp:20:29: note:  
		    public def getStackTrace() : string {
		                            ^


getStackTrace:
line: 20 [0x0] 0:	movl 0
         [0x1] 1:	movn #1
         [0x2] 2:	checknull
         [0x3] 3:	movr ebx, cmt
         [0x4] 4:	movi #12, adx
         [0x6] 6:	ifne
line: 21 [0x7] 7:	newstr @226 // ""
         [0x8] 8:	movl 0
         [0x9] 9:	movn #1
         [0xa] 10:	popobj
         [0xb] 11:	nop
         [0xc] 12:	nop
line: 24 [0xd] 13:	new_class @46 // std#string
         [0xe] 14:	movl 0
         [0xf] 15:	movn #1
         [0x10] 16:	pushobj
         [0x11] 17:	call @558 // <std#string.string(var[])>
         [0x12] 18:	movsl #0
         [0x13] 19:	returnobj
         [0x14] 20:	ret

func:@630 [std#Throwable.getMessage] in file: lib/support//0.2.587//Throwable.sharp:28:26: note:  
		    public def getMessage() : string {
		                         ^


getMessage:
line: 28 [0x0] 0:	new_class @46 // std#string
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	pushobj
         [0x4] 4:	call @558 // <std#string.string(var[])>
         [0x5] 5:	movsl #0
         [0x6] 6:	returnobj
         [0x7] 7:	ret

func:@631 [std#Throwable.Throwable] in file: lib/support//0.2.587//Throwable.sharp:8:13: note:  
		public class Throwable {
		            ^


Throwable:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@632 [std#uchar.uchar] in file: lib/support//0.2.587//uchar.sharp:6:17: note:  
		    public uchar(var num) {
		                ^


uchar:
line: 6 [0x0] 0:	loadl ebx, fp+1
        [0x1] 1:	movu8 ebx, ebx
        [0x2] 2:	nop
        [0x3] 3:	rstore ebx
        [0x4] 4:	movl 0
        [0x5] 5:	movn #2
        [0x6] 6:	movi #0, adx
        [0x8] 8:	loadval ecx
        [0x9] 9:	rmov adx, ecx
        [0xa] 10:	movl 0
        [0xb] 11:	returnobj
        [0xc] 12:	ret

func:@633 [std#uchar.uchar] in file: lib/support//0.2.587//uchar.sharp:10:17: note:  
		    public uchar(integer num) {
		                ^


uchar:
line: 10 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	movu8 ebx, ebx
         [0x9] 9:	rstore ebx
         [0xa] 10:	call @125 // <std#integer.integer(var)>
         [0xb] 11:	pop
         [0xc] 12:	movl 0
         [0xd] 13:	returnobj
         [0xe] 14:	ret

func:@634 [std#uchar.$operator+] in file: lib/support//0.2.587//uchar.sharp:14:24: note:  
		    public def operator+(var num) : var {
		                       ^


$operator+:
line: 14 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	add ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	movu8 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@635 [std#uchar.$operator+] in file: lib/support//0.2.587//uchar.sharp:18:24: note:  
		    public def operator+(integer num) : uchar {
		                       ^


$operator+:
line: 18 [0x0] 0:	new_class @48 // std#uchar
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @634 // <std#uchar.$operator+(var)>
         [0xa] 10:	call @632 // <std#uchar.uchar(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@636 [std#uchar.$operator-] in file: lib/support//0.2.587//uchar.sharp:22:24: note:  
		    public def operator-(var num) : var {
		                       ^


$operator-:
line: 22 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	sub ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	movu8 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@637 [std#uchar.$operator-] in file: lib/support//0.2.587//uchar.sharp:26:24: note:  
		    public def operator-(integer num) : uchar {
		                       ^


$operator-:
line: 26 [0x0] 0:	new_class @48 // std#uchar
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @636 // <std#uchar.$operator-(var)>
         [0xa] 10:	call @632 // <std#uchar.uchar(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@638 [std#uchar.$operator*] in file: lib/support//0.2.587//uchar.sharp:30:24: note:  
		    public def operator*(var num) : var {
		                       ^


$operator*:
line: 30 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	mul ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	movu8 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@639 [std#uchar.$operator*] in file: lib/support//0.2.587//uchar.sharp:34:24: note:  
		    public def operator*(integer num) : uchar {
		                       ^


$operator*:
line: 34 [0x0] 0:	new_class @48 // std#uchar
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @638 // <std#uchar.$operator*(var)>
         [0xa] 10:	call @632 // <std#uchar.uchar(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@640 [std#uchar.$operator/] in file: lib/support//0.2.587//uchar.sharp:38:24: note:  
		    public def operator/(var num) : var {
		                       ^


$operator/:
line: 38 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	div ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	movu8 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@641 [std#uchar.$operator/] in file: lib/support//0.2.587//uchar.sharp:42:24: note:  
		    public def operator/(integer num) : uchar {
		                       ^


$operator/:
line: 42 [0x0] 0:	new_class @48 // std#uchar
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @640 // <std#uchar.$operator/(var)>
         [0xa] 10:	call @632 // <std#uchar.uchar(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@642 [std#uchar.$operator=] in file: lib/support//0.2.587//uchar.sharp:46:24: note:  
		    public def operator=(var num) : var {
		                       ^


$operator=:
line: 46 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movu8 ebx, ebx
         [0x2] 2:	nop
         [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #2
         [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@643 [std#uchar.$operator=] in file: lib/support//0.2.587//uchar.sharp:50:24: note:  
		    public def operator=(integer num) : uchar {
		                       ^


$operator=:
line: 50 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @642 // <std#uchar.$operator=(var)>
         [0x9] 9:	pop
line: 51 [0xa] 10:	movl 0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@644 [std#uchar.$operator=] in file: lib/support//0.2.587//uchar.sharp:55:24: note:  
		    public def operator=(Enum num) : uchar {
		                       ^


$operator=:
line: 55 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	pushobj
         [0x4] 4:	call @78 // <std#Enum.getValue()>
         [0x5] 5:	call @642 // <std#uchar.$operator=(var)>
         [0x6] 6:	pop
line: 56 [0x7] 7:	movl 0
         [0x8] 8:	returnobj
         [0x9] 9:	ret

func:@645 [std#uchar.$operator+=] in file: lib/support//0.2.587//uchar.sharp:60:24: note:  
		    public def operator+=(var num) : var {
		                       ^


$operator+=:
line: 60 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	add ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	movu8 ebx, ebx
         [0xe] 14:	nop
         [0xf] 15:	rstore ebx
         [0x10] 16:	movl 0
         [0x11] 17:	movn #2
         [0x12] 18:	movi #0, adx
         [0x14] 20:	loadval ecx
         [0x15] 21:	rmov adx, ecx
line: 61 [0x16] 22:	movl 0
         [0x17] 23:	movn #2
         [0x18] 24:	movi #0, adx
         [0x1a] 26:	iaload_2 ebx, adx
         [0x1b] 27:	return_val ebx
         [0x1c] 28:	ret

func:@646 [std#uchar.$operator==] in file: lib/support//0.2.587//uchar.sharp:65:24: note:  
		    public def operator==(var num) : var {
		                       ^


$operator==:
line: 65 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	loadl ebx, fp+1
         [0x7] 7:	movr egx, ebx
         [0x8] 8:	loadval ebx
         [0x9] 9:	test ebx, egx
         [0xa] 10:	movr ebx, cmt
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@647 [std#uchar.$operator!=] in file: lib/support//0.2.587//uchar.sharp:69:24: note:  
		    public def operator!=(var num) : var {
		                       ^


$operator!=:
line: 69 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	loadl ebx, fp+1
         [0x7] 7:	movr egx, ebx
         [0x8] 8:	loadval ebx
         [0x9] 9:	tne ebx, egx
         [0xa] 10:	movr ebx, cmt
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@648 [std#uchar.$operator!=] in file: lib/support//0.2.587//uchar.sharp:73:24: note:  
		    public def operator!=(integer num) : var {
		                       ^


$operator!=:
line: 73 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 egx, adx
         [0xc] 12:	loadval ebx
         [0xd] 13:	tne ebx, egx
         [0xe] 14:	movr ebx, cmt
         [0xf] 15:	return_val cmt
         [0x10] 16:	ret

func:@649 [std#uchar.$operator==] in file: lib/support//0.2.587//uchar.sharp:77:24: note:  
		    public def operator==(integer num) : var {
		                       ^


$operator==:
line: 77 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 egx, adx
         [0xc] 12:	loadval ebx
         [0xd] 13:	test ebx, egx
         [0xe] 14:	movr ebx, cmt
         [0xf] 15:	return_val cmt
         [0x10] 16:	ret

func:@650 [std#uchar.$operator<] in file: lib/support//0.2.587//uchar.sharp:81:24: note:  
		    public def operator<(var num) : var {
		                       ^


$operator<:
line: 81 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr egx, ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lt ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@651 [std#uchar.$operator<] in file: lib/support//0.2.587//uchar.sharp:85:24: note:  
		    public def operator<(integer num) : var {
		                       ^


$operator<:
line: 85 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	chklen adx
         [0x5] 5:	iaload_2 egx, adx
         [0x6] 6:	movl 0
         [0x7] 7:	movn #2
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 ebx, adx
         [0xc] 12:	lt ebx, egx
         [0xd] 13:	movr ebx, cmt
         [0xe] 14:	return_val cmt
         [0xf] 15:	ret

func:@652 [std#uchar.$operator>] in file: lib/support//0.2.587//uchar.sharp:89:24: note:  
		    public def operator>(var num) : var {
		                       ^


$operator>:
line: 89 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr egx, ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	gt ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@653 [std#uchar.$operator>] in file: lib/support//0.2.587//uchar.sharp:93:24: note:  
		    public def operator>(integer num) : var {
		                       ^


$operator>:
line: 93 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	chklen adx
         [0x5] 5:	iaload_2 egx, adx
         [0x6] 6:	movl 0
         [0x7] 7:	movn #2
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 ebx, adx
         [0xc] 12:	gt ebx, egx
         [0xd] 13:	movr ebx, cmt
         [0xe] 14:	return_val cmt
         [0xf] 15:	ret

func:@654 [std#uchar.$operator<=] in file: lib/support//0.2.587//uchar.sharp:97:24: note:  
		    public def operator<=(var num) : var {
		                       ^


$operator<=:
line: 97 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr egx, ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lte ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@655 [std#uchar.$operator<=] in file: lib/support//0.2.587//uchar.sharp:101:24: note:  
		    public def operator<=(integer num) : var {
		                       ^


$operator<=:
line: 101 [0x0] 0:	movl 1
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	movl 0
          [0x7] 7:	movn #2
          [0x8] 8:	movi #0, adx
          [0xa] 10:	chklen adx
          [0xb] 11:	iaload_2 ebx, adx
          [0xc] 12:	lte ebx, egx
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	return_val cmt
          [0xf] 15:	ret

func:@656 [std#uchar.$operator>=] in file: lib/support//0.2.587//uchar.sharp:105:24: note:  
		    public def operator>=(var num) : var {
		                       ^


$operator>=:
line: 105 [0x0] 0:	loadl ebx, fp+1
          [0x1] 1:	movr egx, ebx
          [0x2] 2:	movl 0
          [0x3] 3:	movn #2
          [0x4] 4:	movi #0, adx
          [0x6] 6:	chklen adx
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	gte ebx, egx
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	return_val cmt
          [0xb] 11:	ret

func:@657 [std#uchar.$operator>=] in file: lib/support//0.2.587//uchar.sharp:109:24: note:  
		    public def operator>=(integer num) : var {
		                       ^


$operator>=:
line: 109 [0x0] 0:	movl 1
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	movl 0
          [0x7] 7:	movn #2
          [0x8] 8:	movi #0, adx
          [0xa] 10:	chklen adx
          [0xb] 11:	iaload_2 ebx, adx
          [0xc] 12:	gte ebx, egx
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	return_val cmt
          [0xf] 15:	ret

func:@658 [std#uchar.$operator++] in file: lib/support//0.2.587//uchar.sharp:113:24: note:  
		    public def operator++(var num) : var { // post inc i++
		                       ^


$operator++:
line: 113 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	smovr_2 ebx, fp+2
line: 114 [0x7] 7:	movi #1, ebx
          [0x9] 9:	rstore ebx
          [0xa] 10:	movl 0
          [0xb] 11:	movn #2
          [0xc] 12:	movi #0, adx
          [0xe] 14:	chklen adx
          [0xf] 15:	iaload_2 ebx, adx
          [0x10] 16:	loadval egx
          [0x11] 17:	add ebx, egx -> ebx
          [0x13] 19:	rstore ebx
          [0x14] 20:	loadval ebx
          [0x15] 21:	movu8 ebx, ebx
          [0x16] 22:	nop
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 0
          [0x19] 25:	movn #2
          [0x1a] 26:	movi #0, adx
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	rmov adx, ecx
line: 115 [0x1e] 30:	loadl ebx, fp+2
          [0x1f] 31:	return_val ebx
          [0x20] 32:	ret

func:@659 [std#uchar.$operator++] in file: lib/support//0.2.587//uchar.sharp:119:24: note:  
		    public def operator++() : var { // pre inc ++i
		                       ^


$operator++:
line: 119 [0x0] 0:	movi #1, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #2
          [0x5] 5:	movi #0, adx
          [0x7] 7:	chklen adx
          [0x8] 8:	iaload_2 ebx, adx
          [0x9] 9:	loadval egx
          [0xa] 10:	add ebx, egx -> ebx
          [0xc] 12:	rstore ebx
          [0xd] 13:	loadval ebx
          [0xe] 14:	movu8 ebx, ebx
          [0xf] 15:	nop
          [0x10] 16:	rstore ebx
          [0x11] 17:	movl 0
          [0x12] 18:	movn #2
          [0x13] 19:	movi #0, adx
          [0x15] 21:	loadval ecx
          [0x16] 22:	rmov adx, ecx
          [0x17] 23:	return_val ebx
          [0x18] 24:	ret

func:@660 [std#uchar.$operator--] in file: lib/support//0.2.587//uchar.sharp:123:24: note:  
		    public def operator--(var num) : var {
		                       ^


$operator--:
line: 123 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	smovr_2 ebx, fp+2
line: 124 [0x7] 7:	movi #1, ebx
          [0x9] 9:	rstore ebx
          [0xa] 10:	movl 0
          [0xb] 11:	movn #2
          [0xc] 12:	movi #0, adx
          [0xe] 14:	chklen adx
          [0xf] 15:	iaload_2 ebx, adx
          [0x10] 16:	loadval egx
          [0x11] 17:	sub ebx, egx -> ebx
          [0x13] 19:	rstore ebx
          [0x14] 20:	loadval ebx
          [0x15] 21:	movu8 ebx, ebx
          [0x16] 22:	nop
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 0
          [0x19] 25:	movn #2
          [0x1a] 26:	movi #0, adx
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	rmov adx, ecx
line: 125 [0x1e] 30:	loadl ebx, fp+2
          [0x1f] 31:	return_val ebx
          [0x20] 32:	ret

func:@661 [std#uchar.$operator--] in file: lib/support//0.2.587//uchar.sharp:129:24: note:  
		    public def operator--() : var {
		                       ^


$operator--:
line: 129 [0x0] 0:	movi #1, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #2
          [0x5] 5:	movi #0, adx
          [0x7] 7:	chklen adx
          [0x8] 8:	iaload_2 ebx, adx
          [0x9] 9:	loadval egx
          [0xa] 10:	sub ebx, egx -> ebx
          [0xc] 12:	rstore ebx
          [0xd] 13:	loadval ebx
          [0xe] 14:	movu8 ebx, ebx
          [0xf] 15:	nop
          [0x10] 16:	rstore ebx
          [0x11] 17:	movl 0
          [0x12] 18:	movn #2
          [0x13] 19:	movi #0, adx
          [0x15] 21:	loadval ecx
          [0x16] 22:	rmov adx, ecx
          [0x17] 23:	return_val ebx
          [0x18] 24:	ret

func:@662 [std#uchar.value] in file: lib/support//0.2.587//uchar.sharp:133:21: note:  
		    public def value() : var {
		                    ^


value:
line: 133 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@663 [std#uchar.toString] in file: lib/support//0.2.587//uchar.sharp:137:24: note:  
		    public def delegate::toString() : string {
		                       ^


toString:
line: 137 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	newstr @226 // ""
          [0x2] 2:	call @558 // <std#string.string(var[])>
          [0x3] 3:	movl 0
          [0x4] 4:	movn #2
          [0x5] 5:	movi #0, adx
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	rstore ebx
          [0x9] 9:	call @579 // <std#string.$operator+(var)>
          [0xa] 10:	movsl #0
          [0xb] 11:	returnobj
          [0xc] 12:	ret

func:@664 [std#uchar.uchar] in file: lib/support//0.2.587//uchar.sharp:3:13: note:  
		public class uchar base integer {
		            ^


uchar:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@665 [std#uint.uint] in file: lib/support//0.2.587//uint.sharp:6:16: note:  
		    public uint(var num) {
		               ^


uint:
line: 6 [0x0] 0:	loadl ebx, fp+1
        [0x1] 1:	movu32 ebx, ebx
        [0x2] 2:	nop
        [0x3] 3:	rstore ebx
        [0x4] 4:	movl 0
        [0x5] 5:	movn #2
        [0x6] 6:	movi #0, adx
        [0x8] 8:	loadval ecx
        [0x9] 9:	rmov adx, ecx
        [0xa] 10:	movl 0
        [0xb] 11:	returnobj
        [0xc] 12:	ret

func:@666 [std#uint.uint] in file: lib/support//0.2.587//uint.sharp:10:16: note:  
		    public uint(integer num) {
		               ^


uint:
line: 10 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	movu32 ebx, ebx
         [0x9] 9:	rstore ebx
         [0xa] 10:	call @125 // <std#integer.integer(var)>
         [0xb] 11:	pop
         [0xc] 12:	movl 0
         [0xd] 13:	returnobj
         [0xe] 14:	ret

func:@667 [std#uint.$operator+] in file: lib/support//0.2.587//uint.sharp:14:24: note:  
		    public def operator+(var num) : var {
		                       ^


$operator+:
line: 14 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	add ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	movu32 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@668 [std#uint.$operator+] in file: lib/support//0.2.587//uint.sharp:18:24: note:  
		    public def operator+(integer num) : uint {
		                       ^


$operator+:
line: 18 [0x0] 0:	new_class @49 // std#uint
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @667 // <std#uint.$operator+(var)>
         [0xa] 10:	call @665 // <std#uint.uint(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@669 [std#uint.$operator-] in file: lib/support//0.2.587//uint.sharp:22:24: note:  
		    public def operator-(var num) : var {
		                       ^


$operator-:
line: 22 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	sub ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	movu32 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@670 [std#uint.$operator-] in file: lib/support//0.2.587//uint.sharp:26:24: note:  
		    public def operator-(integer num) : uint {
		                       ^


$operator-:
line: 26 [0x0] 0:	new_class @49 // std#uint
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @669 // <std#uint.$operator-(var)>
         [0xa] 10:	call @665 // <std#uint.uint(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@671 [std#uint.$operator*] in file: lib/support//0.2.587//uint.sharp:30:24: note:  
		    public def operator*(var num) : var {
		                       ^


$operator*:
line: 30 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	mul ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	movu32 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@672 [std#uint.$operator*] in file: lib/support//0.2.587//uint.sharp:34:24: note:  
		    public def operator*(integer num) : uint {
		                       ^


$operator*:
line: 34 [0x0] 0:	new_class @49 // std#uint
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @671 // <std#uint.$operator*(var)>
         [0xa] 10:	call @665 // <std#uint.uint(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@673 [std#uint.$operator!=] in file: lib/support//0.2.587//uint.sharp:38:24: note:  
		    public def operator!=(var num) : var {
		                       ^


$operator!=:
line: 38 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	loadl ebx, fp+1
         [0x7] 7:	movr egx, ebx
         [0x8] 8:	loadval ebx
         [0x9] 9:	tne ebx, egx
         [0xa] 10:	movr ebx, cmt
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@674 [std#uint.$operator!=] in file: lib/support//0.2.587//uint.sharp:42:24: note:  
		    public def operator!=(integer num) : var {
		                       ^


$operator!=:
line: 42 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 egx, adx
         [0xc] 12:	loadval ebx
         [0xd] 13:	tne ebx, egx
         [0xe] 14:	movr ebx, cmt
         [0xf] 15:	return_val cmt
         [0x10] 16:	ret

func:@675 [std#uint.$operator/] in file: lib/support//0.2.587//uint.sharp:46:24: note:  
		    public def operator/(var num) : var {
		                       ^


$operator/:
line: 46 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	div ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	movu32 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@676 [std#uint.$operator/] in file: lib/support//0.2.587//uint.sharp:50:24: note:  
		    public def operator/(integer num) : uint {
		                       ^


$operator/:
line: 50 [0x0] 0:	new_class @49 // std#uint
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @675 // <std#uint.$operator/(var)>
         [0xa] 10:	call @665 // <std#uint.uint(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@677 [std#uint.$operator=] in file: lib/support//0.2.587//uint.sharp:54:24: note:  
		    public def operator=(var num) : var {
		                       ^


$operator=:
line: 54 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movu32 ebx, ebx
         [0x2] 2:	nop
         [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #2
         [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@678 [std#uint.$operator=] in file: lib/support//0.2.587//uint.sharp:58:24: note:  
		    public def operator=(integer num) : uint {
		                       ^


$operator=:
line: 58 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @677 // <std#uint.$operator=(var)>
         [0x9] 9:	pop
line: 59 [0xa] 10:	movl 0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@679 [std#uint.$operator+=] in file: lib/support//0.2.587//uint.sharp:63:24: note:  
		    public def operator+=(var num) : var {
		                       ^


$operator+=:
line: 63 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	add ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	movu32 ebx, ebx
         [0xe] 14:	nop
         [0xf] 15:	rstore ebx
         [0x10] 16:	movl 0
         [0x11] 17:	movn #2
         [0x12] 18:	movi #0, adx
         [0x14] 20:	loadval ecx
         [0x15] 21:	rmov adx, ecx
line: 64 [0x16] 22:	movl 0
         [0x17] 23:	movn #2
         [0x18] 24:	movi #0, adx
         [0x1a] 26:	iaload_2 ebx, adx
         [0x1b] 27:	return_val ebx
         [0x1c] 28:	ret

func:@680 [std#uint.$operator=] in file: lib/support//0.2.587//uint.sharp:68:24: note:  
		    public def operator=(Enum num) : uint {
		                       ^


$operator=:
line: 68 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	pushobj
         [0x4] 4:	call @78 // <std#Enum.getValue()>
         [0x5] 5:	call @677 // <std#uint.$operator=(var)>
         [0x6] 6:	pop
line: 69 [0x7] 7:	movl 0
         [0x8] 8:	returnobj
         [0x9] 9:	ret

func:@681 [std#uint.$operator==] in file: lib/support//0.2.587//uint.sharp:73:24: note:  
		    public def operator==(var num) : var {
		                       ^


$operator==:
line: 73 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	loadl ebx, fp+1
         [0x7] 7:	movr egx, ebx
         [0x8] 8:	loadval ebx
         [0x9] 9:	test ebx, egx
         [0xa] 10:	movr ebx, cmt
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@682 [std#uint.$operator==] in file: lib/support//0.2.587//uint.sharp:77:24: note:  
		    public def operator==(integer num) : var {
		                       ^


$operator==:
line: 77 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 egx, adx
         [0xc] 12:	loadval ebx
         [0xd] 13:	test ebx, egx
         [0xe] 14:	movr ebx, cmt
         [0xf] 15:	return_val cmt
         [0x10] 16:	ret

func:@683 [std#uint.$operator<] in file: lib/support//0.2.587//uint.sharp:81:24: note:  
		    public def operator<(var num) : var {
		                       ^


$operator<:
line: 81 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr egx, ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lt ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@684 [std#uint.$operator<] in file: lib/support//0.2.587//uint.sharp:85:24: note:  
		    public def operator<(integer num) : var {
		                       ^


$operator<:
line: 85 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	chklen adx
         [0x5] 5:	iaload_2 egx, adx
         [0x6] 6:	movl 0
         [0x7] 7:	movn #2
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 ebx, adx
         [0xc] 12:	lt ebx, egx
         [0xd] 13:	movr ebx, cmt
         [0xe] 14:	return_val cmt
         [0xf] 15:	ret

func:@685 [std#uint.$operator>] in file: lib/support//0.2.587//uint.sharp:89:24: note:  
		    public def operator>(var num) : var {
		                       ^


$operator>:
line: 89 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr egx, ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	gt ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@686 [std#uint.$operator>] in file: lib/support//0.2.587//uint.sharp:93:24: note:  
		    public def operator>(integer num) : var {
		                       ^


$operator>:
line: 93 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	chklen adx
         [0x5] 5:	iaload_2 egx, adx
         [0x6] 6:	movl 0
         [0x7] 7:	movn #2
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 ebx, adx
         [0xc] 12:	gt ebx, egx
         [0xd] 13:	movr ebx, cmt
         [0xe] 14:	return_val cmt
         [0xf] 15:	ret

func:@687 [std#uint.$operator<=] in file: lib/support//0.2.587//uint.sharp:97:24: note:  
		    public def operator<=(var num) : var {
		                       ^


$operator<=:
line: 97 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr egx, ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lte ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@688 [std#uint.$operator<=] in file: lib/support//0.2.587//uint.sharp:101:24: note:  
		    public def operator<=(integer num) : var {
		                       ^


$operator<=:
line: 101 [0x0] 0:	movl 1
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	movl 0
          [0x7] 7:	movn #2
          [0x8] 8:	movi #0, adx
          [0xa] 10:	chklen adx
          [0xb] 11:	iaload_2 ebx, adx
          [0xc] 12:	lte ebx, egx
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	return_val cmt
          [0xf] 15:	ret

func:@689 [std#uint.$operator>=] in file: lib/support//0.2.587//uint.sharp:105:24: note:  
		    public def operator>=(var num) : var {
		                       ^


$operator>=:
line: 105 [0x0] 0:	loadl ebx, fp+1
          [0x1] 1:	movr egx, ebx
          [0x2] 2:	movl 0
          [0x3] 3:	movn #2
          [0x4] 4:	movi #0, adx
          [0x6] 6:	chklen adx
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	gte ebx, egx
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	return_val cmt
          [0xb] 11:	ret

func:@690 [std#uint.$operator>=] in file: lib/support//0.2.587//uint.sharp:109:24: note:  
		    public def operator>=(integer num) : var {
		                       ^


$operator>=:
line: 109 [0x0] 0:	movl 1
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	movl 0
          [0x7] 7:	movn #2
          [0x8] 8:	movi #0, adx
          [0xa] 10:	chklen adx
          [0xb] 11:	iaload_2 ebx, adx
          [0xc] 12:	gte ebx, egx
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	return_val cmt
          [0xf] 15:	ret

func:@691 [std#uint.$operator++] in file: lib/support//0.2.587//uint.sharp:113:24: note:  
		    public def operator++(var num) : var { // post inc i++
		                       ^


$operator++:
line: 113 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	smovr_2 ebx, fp+2
line: 114 [0x7] 7:	movi #1, ebx
          [0x9] 9:	rstore ebx
          [0xa] 10:	movl 0
          [0xb] 11:	movn #2
          [0xc] 12:	movi #0, adx
          [0xe] 14:	chklen adx
          [0xf] 15:	iaload_2 ebx, adx
          [0x10] 16:	loadval egx
          [0x11] 17:	add ebx, egx -> ebx
          [0x13] 19:	rstore ebx
          [0x14] 20:	loadval ebx
          [0x15] 21:	movu32 ebx, ebx
          [0x16] 22:	nop
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 0
          [0x19] 25:	movn #2
          [0x1a] 26:	movi #0, adx
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	rmov adx, ecx
line: 115 [0x1e] 30:	loadl ebx, fp+2
          [0x1f] 31:	return_val ebx
          [0x20] 32:	ret

func:@692 [std#uint.$operator++] in file: lib/support//0.2.587//uint.sharp:119:24: note:  
		    public def operator++() : var { // pre inc ++i
		                       ^


$operator++:
line: 119 [0x0] 0:	movi #1, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #2
          [0x5] 5:	movi #0, adx
          [0x7] 7:	chklen adx
          [0x8] 8:	iaload_2 ebx, adx
          [0x9] 9:	loadval egx
          [0xa] 10:	add ebx, egx -> ebx
          [0xc] 12:	rstore ebx
          [0xd] 13:	loadval ebx
          [0xe] 14:	movu32 ebx, ebx
          [0xf] 15:	nop
          [0x10] 16:	rstore ebx
          [0x11] 17:	movl 0
          [0x12] 18:	movn #2
          [0x13] 19:	movi #0, adx
          [0x15] 21:	loadval ecx
          [0x16] 22:	rmov adx, ecx
          [0x17] 23:	return_val ebx
          [0x18] 24:	ret

func:@693 [std#uint.$operator--] in file: lib/support//0.2.587//uint.sharp:123:24: note:  
		    public def operator--(var num) : var {
		                       ^


$operator--:
line: 123 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	smovr_2 ebx, fp+2
line: 124 [0x7] 7:	movi #1, ebx
          [0x9] 9:	rstore ebx
          [0xa] 10:	movl 0
          [0xb] 11:	movn #2
          [0xc] 12:	movi #0, adx
          [0xe] 14:	chklen adx
          [0xf] 15:	iaload_2 ebx, adx
          [0x10] 16:	loadval egx
          [0x11] 17:	sub ebx, egx -> ebx
          [0x13] 19:	rstore ebx
          [0x14] 20:	loadval ebx
          [0x15] 21:	movu32 ebx, ebx
          [0x16] 22:	nop
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 0
          [0x19] 25:	movn #2
          [0x1a] 26:	movi #0, adx
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	rmov adx, ecx
line: 125 [0x1e] 30:	loadl ebx, fp+2
          [0x1f] 31:	return_val ebx
          [0x20] 32:	ret

func:@694 [std#uint.$operator--] in file: lib/support//0.2.587//uint.sharp:129:24: note:  
		    public def operator--() : var {
		                       ^


$operator--:
line: 129 [0x0] 0:	movi #1, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #2
          [0x5] 5:	movi #0, adx
          [0x7] 7:	chklen adx
          [0x8] 8:	iaload_2 ebx, adx
          [0x9] 9:	loadval egx
          [0xa] 10:	sub ebx, egx -> ebx
          [0xc] 12:	rstore ebx
          [0xd] 13:	loadval ebx
          [0xe] 14:	movu32 ebx, ebx
          [0xf] 15:	nop
          [0x10] 16:	rstore ebx
          [0x11] 17:	movl 0
          [0x12] 18:	movn #2
          [0x13] 19:	movi #0, adx
          [0x15] 21:	loadval ecx
          [0x16] 22:	rmov adx, ecx
          [0x17] 23:	return_val ebx
          [0x18] 24:	ret

func:@695 [std#uint.value] in file: lib/support//0.2.587//uint.sharp:133:21: note:  
		    public def value() : var {
		                    ^


value:
line: 133 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@696 [std#uint.toString] in file: lib/support//0.2.587//uint.sharp:137:24: note:  
		    public def delegate::toString() : string {
		                       ^


toString:
line: 137 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	newstr @226 // ""
          [0x2] 2:	call @558 // <std#string.string(var[])>
          [0x3] 3:	movl 0
          [0x4] 4:	movn #2
          [0x5] 5:	movi #0, adx
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	rstore ebx
          [0x9] 9:	call @579 // <std#string.$operator+(var)>
          [0xa] 10:	movsl #0
          [0xb] 11:	returnobj
          [0xc] 12:	ret

func:@697 [std#uint.uint] in file: lib/support//0.2.587//uint.sharp:3:13: note:  
		public class uint base integer {
		            ^


uint:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@698 [std#ulong.ulong] in file: lib/support//0.2.587//ulong.sharp:6:17: note:  
		    public ulong(var num) {
		                ^


ulong:
line: 6 [0x0] 0:	loadl ebx, fp+1
        [0x1] 1:	movu64 ebx, ebx
        [0x2] 2:	nop
        [0x3] 3:	rstore ebx
        [0x4] 4:	movl 0
        [0x5] 5:	movn #2
        [0x6] 6:	movi #0, adx
        [0x8] 8:	loadval ecx
        [0x9] 9:	rmov adx, ecx
        [0xa] 10:	movl 0
        [0xb] 11:	returnobj
        [0xc] 12:	ret

func:@699 [std#ulong.ulong] in file: lib/support//0.2.587//ulong.sharp:10:17: note:  
		    public ulong(integer num) {
		                ^


ulong:
line: 10 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	movu64 ebx, ebx
         [0x9] 9:	rstore ebx
         [0xa] 10:	call @125 // <std#integer.integer(var)>
         [0xb] 11:	pop
         [0xc] 12:	movl 0
         [0xd] 13:	returnobj
         [0xe] 14:	ret

func:@700 [std#ulong.$operator+] in file: lib/support//0.2.587//ulong.sharp:14:24: note:  
		    public def operator+(var num) : var {
		                       ^


$operator+:
line: 14 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	add ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	movu64 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@701 [std#ulong.$operator+] in file: lib/support//0.2.587//ulong.sharp:18:24: note:  
		    public def operator+(integer num) : ulong {
		                       ^


$operator+:
line: 18 [0x0] 0:	new_class @50 // std#ulong
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @700 // <std#ulong.$operator+(var)>
         [0xa] 10:	call @698 // <std#ulong.ulong(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@702 [std#ulong.$operator-] in file: lib/support//0.2.587//ulong.sharp:22:24: note:  
		    public def operator-(var num) : var {
		                       ^


$operator-:
line: 22 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	sub ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	movu64 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@703 [std#ulong.$operator-] in file: lib/support//0.2.587//ulong.sharp:26:24: note:  
		    public def operator-(integer num) : ulong {
		                       ^


$operator-:
line: 26 [0x0] 0:	new_class @50 // std#ulong
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @702 // <std#ulong.$operator-(var)>
         [0xa] 10:	call @698 // <std#ulong.ulong(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@704 [std#ulong.$operator*] in file: lib/support//0.2.587//ulong.sharp:30:24: note:  
		    public def operator*(var num) : var {
		                       ^


$operator*:
line: 30 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	mul ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	movu64 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@705 [std#ulong.$operator*] in file: lib/support//0.2.587//ulong.sharp:34:24: note:  
		    public def operator*(integer num) : ulong {
		                       ^


$operator*:
line: 34 [0x0] 0:	new_class @50 // std#ulong
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @704 // <std#ulong.$operator*(var)>
         [0xa] 10:	call @698 // <std#ulong.ulong(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@706 [std#ulong.$operator/] in file: lib/support//0.2.587//ulong.sharp:38:24: note:  
		    public def operator/(var num) : var {
		                       ^


$operator/:
line: 38 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	div ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	movu64 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@707 [std#ulong.$operator/] in file: lib/support//0.2.587//ulong.sharp:42:24: note:  
		    public def operator/(integer num) : ulong {
		                       ^


$operator/:
line: 42 [0x0] 0:	new_class @50 // std#ulong
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @706 // <std#ulong.$operator/(var)>
         [0xa] 10:	call @698 // <std#ulong.ulong(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@708 [std#ulong.$operator!=] in file: lib/support//0.2.587//ulong.sharp:46:24: note:  
		    public def operator!=(var num) : var {
		                       ^


$operator!=:
line: 46 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	loadl ebx, fp+1
         [0x7] 7:	movr egx, ebx
         [0x8] 8:	loadval ebx
         [0x9] 9:	tne ebx, egx
         [0xa] 10:	movr ebx, cmt
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@709 [std#ulong.$operator!=] in file: lib/support//0.2.587//ulong.sharp:50:24: note:  
		    public def operator!=(integer num) : var {
		                       ^


$operator!=:
line: 50 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 egx, adx
         [0xc] 12:	loadval ebx
         [0xd] 13:	tne ebx, egx
         [0xe] 14:	movr ebx, cmt
         [0xf] 15:	return_val cmt
         [0x10] 16:	ret

func:@710 [std#ulong.$operator=] in file: lib/support//0.2.587//ulong.sharp:54:24: note:  
		    public def operator=(var num) : var {
		                       ^


$operator=:
line: 54 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movu64 ebx, ebx
         [0x2] 2:	nop
         [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #2
         [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@711 [std#ulong.$operator=] in file: lib/support//0.2.587//ulong.sharp:58:24: note:  
		    public def operator=(integer num) : ulong {
		                       ^


$operator=:
line: 58 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @710 // <std#ulong.$operator=(var)>
         [0x9] 9:	pop
line: 59 [0xa] 10:	movl 0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@712 [std#ulong.$operator=] in file: lib/support//0.2.587//ulong.sharp:63:24: note:  
		    public def operator=(Enum num) : ulong {
		                       ^


$operator=:
line: 63 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	pushobj
         [0x4] 4:	call @78 // <std#Enum.getValue()>
         [0x5] 5:	call @710 // <std#ulong.$operator=(var)>
         [0x6] 6:	pop
line: 64 [0x7] 7:	movl 0
         [0x8] 8:	returnobj
         [0x9] 9:	ret

func:@713 [std#ulong.$operator+=] in file: lib/support//0.2.587//ulong.sharp:68:24: note:  
		    public def operator+=(var num) : var {
		                       ^


$operator+=:
line: 68 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	add ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	movu64 ebx, ebx
         [0xe] 14:	nop
         [0xf] 15:	rstore ebx
         [0x10] 16:	movl 0
         [0x11] 17:	movn #2
         [0x12] 18:	movi #0, adx
         [0x14] 20:	loadval ecx
         [0x15] 21:	rmov adx, ecx
line: 69 [0x16] 22:	movl 0
         [0x17] 23:	movn #2
         [0x18] 24:	movi #0, adx
         [0x1a] 26:	iaload_2 ebx, adx
         [0x1b] 27:	return_val ebx
         [0x1c] 28:	ret

func:@714 [std#ulong.$operator==] in file: lib/support//0.2.587//ulong.sharp:73:24: note:  
		    public def operator==(var num) : var {
		                       ^


$operator==:
line: 73 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	loadl ebx, fp+1
         [0x7] 7:	movr egx, ebx
         [0x8] 8:	loadval ebx
         [0x9] 9:	test ebx, egx
         [0xa] 10:	movr ebx, cmt
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@715 [std#ulong.$operator==] in file: lib/support//0.2.587//ulong.sharp:77:24: note:  
		    public def operator==(integer num) : var {
		                       ^


$operator==:
line: 77 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 egx, adx
         [0xc] 12:	loadval ebx
         [0xd] 13:	test ebx, egx
         [0xe] 14:	movr ebx, cmt
         [0xf] 15:	return_val cmt
         [0x10] 16:	ret

func:@716 [std#ulong.$operator<] in file: lib/support//0.2.587//ulong.sharp:81:24: note:  
		    public def operator<(var num) : var {
		                       ^


$operator<:
line: 81 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr egx, ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lt ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@717 [std#ulong.$operator<] in file: lib/support//0.2.587//ulong.sharp:85:24: note:  
		    public def operator<(integer num) : var {
		                       ^


$operator<:
line: 85 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	chklen adx
         [0x5] 5:	iaload_2 egx, adx
         [0x6] 6:	movl 0
         [0x7] 7:	movn #2
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 ebx, adx
         [0xc] 12:	lt ebx, egx
         [0xd] 13:	movr ebx, cmt
         [0xe] 14:	return_val cmt
         [0xf] 15:	ret

func:@718 [std#ulong.$operator>] in file: lib/support//0.2.587//ulong.sharp:89:24: note:  
		    public def operator>(var num) : var {
		                       ^


$operator>:
line: 89 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr egx, ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	gt ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@719 [std#ulong.$operator>] in file: lib/support//0.2.587//ulong.sharp:93:24: note:  
		    public def operator>(integer num) : var {
		                       ^


$operator>:
line: 93 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	chklen adx
         [0x5] 5:	iaload_2 egx, adx
         [0x6] 6:	movl 0
         [0x7] 7:	movn #2
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 ebx, adx
         [0xc] 12:	gt ebx, egx
         [0xd] 13:	movr ebx, cmt
         [0xe] 14:	return_val cmt
         [0xf] 15:	ret

func:@720 [std#ulong.$operator<=] in file: lib/support//0.2.587//ulong.sharp:97:24: note:  
		    public def operator<=(var num) : var {
		                       ^


$operator<=:
line: 97 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr egx, ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lte ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@721 [std#ulong.$operator<=] in file: lib/support//0.2.587//ulong.sharp:101:24: note:  
		    public def operator<=(integer num) : var {
		                       ^


$operator<=:
line: 101 [0x0] 0:	movl 1
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	movl 0
          [0x7] 7:	movn #2
          [0x8] 8:	movi #0, adx
          [0xa] 10:	chklen adx
          [0xb] 11:	iaload_2 ebx, adx
          [0xc] 12:	lte ebx, egx
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	return_val cmt
          [0xf] 15:	ret

func:@722 [std#ulong.$operator>=] in file: lib/support//0.2.587//ulong.sharp:105:24: note:  
		    public def operator>=(var num) : var {
		                       ^


$operator>=:
line: 105 [0x0] 0:	loadl ebx, fp+1
          [0x1] 1:	movr egx, ebx
          [0x2] 2:	movl 0
          [0x3] 3:	movn #2
          [0x4] 4:	movi #0, adx
          [0x6] 6:	chklen adx
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	gte ebx, egx
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	return_val cmt
          [0xb] 11:	ret

func:@723 [std#ulong.$operator>=] in file: lib/support//0.2.587//ulong.sharp:109:24: note:  
		    public def operator>=(integer num) : var {
		                       ^


$operator>=:
line: 109 [0x0] 0:	movl 1
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	movl 0
          [0x7] 7:	movn #2
          [0x8] 8:	movi #0, adx
          [0xa] 10:	chklen adx
          [0xb] 11:	iaload_2 ebx, adx
          [0xc] 12:	gte ebx, egx
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	return_val cmt
          [0xf] 15:	ret

func:@724 [std#ulong.$operator++] in file: lib/support//0.2.587//ulong.sharp:113:24: note:  
		    public def operator++(var num) : var { // post inc i++
		                       ^


$operator++:
line: 113 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	smovr_2 ebx, fp+2
line: 114 [0x7] 7:	movi #1, ebx
          [0x9] 9:	rstore ebx
          [0xa] 10:	movl 0
          [0xb] 11:	movn #2
          [0xc] 12:	movi #0, adx
          [0xe] 14:	chklen adx
          [0xf] 15:	iaload_2 ebx, adx
          [0x10] 16:	loadval egx
          [0x11] 17:	add ebx, egx -> ebx
          [0x13] 19:	rstore ebx
          [0x14] 20:	loadval ebx
          [0x15] 21:	movu64 ebx, ebx
          [0x16] 22:	nop
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 0
          [0x19] 25:	movn #2
          [0x1a] 26:	movi #0, adx
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	rmov adx, ecx
line: 115 [0x1e] 30:	loadl ebx, fp+2
          [0x1f] 31:	return_val ebx
          [0x20] 32:	ret

func:@725 [std#ulong.$operator++] in file: lib/support//0.2.587//ulong.sharp:119:24: note:  
		    public def operator++() : var { // pre inc ++i
		                       ^


$operator++:
line: 119 [0x0] 0:	movi #1, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #2
          [0x5] 5:	movi #0, adx
          [0x7] 7:	chklen adx
          [0x8] 8:	iaload_2 ebx, adx
          [0x9] 9:	loadval egx
          [0xa] 10:	add ebx, egx -> ebx
          [0xc] 12:	rstore ebx
          [0xd] 13:	loadval ebx
          [0xe] 14:	movu64 ebx, ebx
          [0xf] 15:	nop
          [0x10] 16:	rstore ebx
          [0x11] 17:	movl 0
          [0x12] 18:	movn #2
          [0x13] 19:	movi #0, adx
          [0x15] 21:	loadval ecx
          [0x16] 22:	rmov adx, ecx
          [0x17] 23:	return_val ebx
          [0x18] 24:	ret

func:@726 [std#ulong.$operator--] in file: lib/support//0.2.587//ulong.sharp:123:24: note:  
		    public def operator--(var num) : var {
		                       ^


$operator--:
line: 123 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	smovr_2 ebx, fp+2
line: 124 [0x7] 7:	movi #1, ebx
          [0x9] 9:	rstore ebx
          [0xa] 10:	movl 0
          [0xb] 11:	movn #2
          [0xc] 12:	movi #0, adx
          [0xe] 14:	chklen adx
          [0xf] 15:	iaload_2 ebx, adx
          [0x10] 16:	loadval egx
          [0x11] 17:	sub ebx, egx -> ebx
          [0x13] 19:	rstore ebx
          [0x14] 20:	loadval ebx
          [0x15] 21:	movu64 ebx, ebx
          [0x16] 22:	nop
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 0
          [0x19] 25:	movn #2
          [0x1a] 26:	movi #0, adx
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	rmov adx, ecx
line: 125 [0x1e] 30:	loadl ebx, fp+2
          [0x1f] 31:	return_val ebx
          [0x20] 32:	ret

func:@727 [std#ulong.$operator--] in file: lib/support//0.2.587//ulong.sharp:129:24: note:  
		    public def operator--() : var {
		                       ^


$operator--:
line: 129 [0x0] 0:	movi #1, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #2
          [0x5] 5:	movi #0, adx
          [0x7] 7:	chklen adx
          [0x8] 8:	iaload_2 ebx, adx
          [0x9] 9:	loadval egx
          [0xa] 10:	sub ebx, egx -> ebx
          [0xc] 12:	rstore ebx
          [0xd] 13:	loadval ebx
          [0xe] 14:	movu64 ebx, ebx
          [0xf] 15:	nop
          [0x10] 16:	rstore ebx
          [0x11] 17:	movl 0
          [0x12] 18:	movn #2
          [0x13] 19:	movi #0, adx
          [0x15] 21:	loadval ecx
          [0x16] 22:	rmov adx, ecx
          [0x17] 23:	return_val ebx
          [0x18] 24:	ret

func:@728 [std#ulong.value] in file: lib/support//0.2.587//ulong.sharp:133:21: note:  
		    public def value() : var {
		                    ^


value:
line: 133 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@729 [std#ulong.toString] in file: lib/support//0.2.587//ulong.sharp:137:24: note:  
		    public def delegate::toString() : string {
		                       ^


toString:
line: 137 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	newstr @226 // ""
          [0x2] 2:	call @558 // <std#string.string(var[])>
          [0x3] 3:	movl 0
          [0x4] 4:	movn #2
          [0x5] 5:	movi #0, adx
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	rstore ebx
          [0x9] 9:	call @579 // <std#string.$operator+(var)>
          [0xa] 10:	movsl #0
          [0xb] 11:	returnobj
          [0xc] 12:	ret

func:@730 [std#ulong.ulong] in file: lib/support//0.2.587//ulong.sharp:3:13: note:  
		public class ulong base integer {
		            ^


ulong:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@731 [std#Unique.Unique] in file: lib/support//0.2.587//Unique.sharp:10:10: note:  
		interface Unique {
		         ^


Unique:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@732 [std#ushort.ushort] in file: lib/support//0.2.587//ushort.sharp:6:18: note:  
		    public ushort(var num) {
		                 ^


ushort:
line: 6 [0x0] 0:	loadl ebx, fp+1
        [0x1] 1:	movu16 ebx, ebx
        [0x2] 2:	nop
        [0x3] 3:	rstore ebx
        [0x4] 4:	movl 0
        [0x5] 5:	movn #2
        [0x6] 6:	movi #0, adx
        [0x8] 8:	loadval ecx
        [0x9] 9:	rmov adx, ecx
        [0xa] 10:	movl 0
        [0xb] 11:	returnobj
        [0xc] 12:	ret

func:@733 [std#ushort.ushort] in file: lib/support//0.2.587//ushort.sharp:10:18: note:  
		    public ushort(integer num) {
		                 ^


ushort:
line: 10 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	movu16 ebx, ebx
         [0x9] 9:	rstore ebx
         [0xa] 10:	call @125 // <std#integer.integer(var)>
         [0xb] 11:	pop
         [0xc] 12:	movl 0
         [0xd] 13:	returnobj
         [0xe] 14:	ret

func:@734 [std#ushort.$operator+] in file: lib/support//0.2.587//ushort.sharp:14:24: note:  
		    public def operator+(var num) : var {
		                       ^


$operator+:
line: 14 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	add ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	movu16 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@735 [std#ushort.$operator+] in file: lib/support//0.2.587//ushort.sharp:18:24: note:  
		    public def operator+(integer num) : ushort {
		                       ^


$operator+:
line: 18 [0x0] 0:	new_class @52 // std#ushort
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @734 // <std#ushort.$operator+(var)>
         [0xa] 10:	call @732 // <std#ushort.ushort(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@736 [std#ushort.$operator-] in file: lib/support//0.2.587//ushort.sharp:22:24: note:  
		    public def operator-(var num) : var {
		                       ^


$operator-:
line: 22 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	sub ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	movu16 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@737 [std#ushort.$operator-] in file: lib/support//0.2.587//ushort.sharp:26:24: note:  
		    public def operator-(integer num) : ushort {
		                       ^


$operator-:
line: 26 [0x0] 0:	new_class @52 // std#ushort
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @736 // <std#ushort.$operator-(var)>
         [0xa] 10:	call @732 // <std#ushort.ushort(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@738 [std#ushort.$operator*] in file: lib/support//0.2.587//ushort.sharp:30:24: note:  
		    public def operator*(var num) : var {
		                       ^


$operator*:
line: 30 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	mul ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	movu16 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@739 [std#ushort.$operator*] in file: lib/support//0.2.587//ushort.sharp:34:24: note:  
		    public def operator*(integer num) : ushort {
		                       ^


$operator*:
line: 34 [0x0] 0:	new_class @52 // std#ushort
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @738 // <std#ushort.$operator*(var)>
         [0xa] 10:	call @732 // <std#ushort.ushort(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@740 [std#ushort.$operator/] in file: lib/support//0.2.587//ushort.sharp:38:24: note:  
		    public def operator/(var num) : var {
		                       ^


$operator/:
line: 38 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	div ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	movu16 ebx, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret

func:@741 [std#ushort.$operator/] in file: lib/support//0.2.587//ushort.sharp:42:24: note:  
		    public def operator/(integer num) : ushort {
		                       ^


$operator/:
line: 42 [0x0] 0:	new_class @52 // std#ushort
         [0x1] 1:	movl 0
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @740 // <std#ushort.$operator/(var)>
         [0xa] 10:	call @732 // <std#ushort.ushort(var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@742 [std#ushort.$operator=] in file: lib/support//0.2.587//ushort.sharp:46:24: note:  
		    public def operator=(var num) : var {
		                       ^


$operator=:
line: 46 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movu16 ebx, ebx
         [0x2] 2:	nop
         [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #2
         [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@743 [std#ushort.$operator=] in file: lib/support//0.2.587//ushort.sharp:50:24: note:  
		    public def operator=(integer num) : ushort {
		                       ^


$operator=:
line: 50 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @742 // <std#ushort.$operator=(var)>
         [0x9] 9:	pop
line: 51 [0xa] 10:	movl 0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@744 [std#ushort.$operator=] in file: lib/support//0.2.587//ushort.sharp:55:24: note:  
		    public def operator=(Enum num) : ushort {
		                       ^


$operator=:
line: 55 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	pushobj
         [0x4] 4:	call @78 // <std#Enum.getValue()>
         [0x5] 5:	call @742 // <std#ushort.$operator=(var)>
         [0x6] 6:	pop
line: 56 [0x7] 7:	movl 0
         [0x8] 8:	returnobj
         [0x9] 9:	ret

func:@745 [std#ushort.$operator+=] in file: lib/support//0.2.587//ushort.sharp:60:24: note:  
		    public def operator+=(var num) : var {
		                       ^


$operator+=:
line: 60 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	rstore ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	loadval egx
         [0x9] 9:	add ebx, egx -> ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	loadval ebx
         [0xd] 13:	movu16 ebx, ebx
         [0xe] 14:	nop
         [0xf] 15:	rstore ebx
         [0x10] 16:	movl 0
         [0x11] 17:	movn #2
         [0x12] 18:	movi #0, adx
         [0x14] 20:	loadval ecx
         [0x15] 21:	rmov adx, ecx
line: 61 [0x16] 22:	movl 0
         [0x17] 23:	movn #2
         [0x18] 24:	movi #0, adx
         [0x1a] 26:	iaload_2 ebx, adx
         [0x1b] 27:	return_val ebx
         [0x1c] 28:	ret

func:@746 [std#ushort.$operator!=] in file: lib/support//0.2.587//ushort.sharp:65:24: note:  
		    public def operator!=(var num) : var {
		                       ^


$operator!=:
line: 65 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	loadl ebx, fp+1
         [0x7] 7:	movr egx, ebx
         [0x8] 8:	loadval ebx
         [0x9] 9:	tne ebx, egx
         [0xa] 10:	movr ebx, cmt
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@747 [std#ushort.$operator!=] in file: lib/support//0.2.587//ushort.sharp:69:24: note:  
		    public def operator!=(integer num) : var {
		                       ^


$operator!=:
line: 69 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 egx, adx
         [0xc] 12:	loadval ebx
         [0xd] 13:	tne ebx, egx
         [0xe] 14:	movr ebx, cmt
         [0xf] 15:	return_val cmt
         [0x10] 16:	ret

func:@748 [std#ushort.$operator==] in file: lib/support//0.2.587//ushort.sharp:73:24: note:  
		    public def operator==(var num) : var {
		                       ^


$operator==:
line: 73 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	loadl ebx, fp+1
         [0x7] 7:	movr egx, ebx
         [0x8] 8:	loadval ebx
         [0x9] 9:	test ebx, egx
         [0xa] 10:	movr ebx, cmt
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@749 [std#ushort.$operator==] in file: lib/support//0.2.587//ushort.sharp:77:24: note:  
		    public def operator==(integer num) : var {
		                       ^


$operator==:
line: 77 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 egx, adx
         [0xc] 12:	loadval ebx
         [0xd] 13:	test ebx, egx
         [0xe] 14:	movr ebx, cmt
         [0xf] 15:	return_val cmt
         [0x10] 16:	ret

func:@750 [std#ushort.$operator<] in file: lib/support//0.2.587//ushort.sharp:81:24: note:  
		    public def operator<(var num) : var {
		                       ^


$operator<:
line: 81 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr egx, ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lt ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@751 [std#ushort.$operator<] in file: lib/support//0.2.587//ushort.sharp:85:24: note:  
		    public def operator<(integer num) : var {
		                       ^


$operator<:
line: 85 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	chklen adx
         [0x5] 5:	iaload_2 egx, adx
         [0x6] 6:	movl 0
         [0x7] 7:	movn #2
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 ebx, adx
         [0xc] 12:	lt ebx, egx
         [0xd] 13:	movr ebx, cmt
         [0xe] 14:	return_val cmt
         [0xf] 15:	ret

func:@752 [std#ushort.$operator>] in file: lib/support//0.2.587//ushort.sharp:89:24: note:  
		    public def operator>(var num) : var {
		                       ^


$operator>:
line: 89 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr egx, ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	gt ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@753 [std#ushort.$operator>] in file: lib/support//0.2.587//ushort.sharp:93:24: note:  
		    public def operator>(integer num) : var {
		                       ^


$operator>:
line: 93 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	chklen adx
         [0x5] 5:	iaload_2 egx, adx
         [0x6] 6:	movl 0
         [0x7] 7:	movn #2
         [0x8] 8:	movi #0, adx
         [0xa] 10:	chklen adx
         [0xb] 11:	iaload_2 ebx, adx
         [0xc] 12:	gt ebx, egx
         [0xd] 13:	movr ebx, cmt
         [0xe] 14:	return_val cmt
         [0xf] 15:	ret

func:@754 [std#ushort.$operator<=] in file: lib/support//0.2.587//ushort.sharp:97:24: note:  
		    public def operator<=(var num) : var {
		                       ^


$operator<=:
line: 97 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movr egx, ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	movi #0, adx
         [0x6] 6:	chklen adx
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lte ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@755 [std#ushort.$operator<=] in file: lib/support//0.2.587//ushort.sharp:101:24: note:  
		    public def operator<=(integer num) : var {
		                       ^


$operator<=:
line: 101 [0x0] 0:	movl 1
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	movl 0
          [0x7] 7:	movn #2
          [0x8] 8:	movi #0, adx
          [0xa] 10:	chklen adx
          [0xb] 11:	iaload_2 ebx, adx
          [0xc] 12:	lte ebx, egx
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	return_val cmt
          [0xf] 15:	ret

func:@756 [std#ushort.$operator>=] in file: lib/support//0.2.587//ushort.sharp:105:24: note:  
		    public def operator>=(var num) : var {
		                       ^


$operator>=:
line: 105 [0x0] 0:	loadl ebx, fp+1
          [0x1] 1:	movr egx, ebx
          [0x2] 2:	movl 0
          [0x3] 3:	movn #2
          [0x4] 4:	movi #0, adx
          [0x6] 6:	chklen adx
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	gte ebx, egx
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	return_val cmt
          [0xb] 11:	ret

func:@757 [std#ushort.$operator>=] in file: lib/support//0.2.587//ushort.sharp:109:24: note:  
		    public def operator>=(integer num) : var {
		                       ^


$operator>=:
line: 109 [0x0] 0:	movl 1
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	movl 0
          [0x7] 7:	movn #2
          [0x8] 8:	movi #0, adx
          [0xa] 10:	chklen adx
          [0xb] 11:	iaload_2 ebx, adx
          [0xc] 12:	gte ebx, egx
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	return_val cmt
          [0xf] 15:	ret

func:@758 [std#ushort.$operator++] in file: lib/support//0.2.587//ushort.sharp:113:24: note:  
		    public def operator++(var num) : var { // post inc i++
		                       ^


$operator++:
line: 113 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	smovr_2 ebx, fp+2
line: 114 [0x7] 7:	movi #1, ebx
          [0x9] 9:	rstore ebx
          [0xa] 10:	movl 0
          [0xb] 11:	movn #2
          [0xc] 12:	movi #0, adx
          [0xe] 14:	chklen adx
          [0xf] 15:	iaload_2 ebx, adx
          [0x10] 16:	loadval egx
          [0x11] 17:	add ebx, egx -> ebx
          [0x13] 19:	rstore ebx
          [0x14] 20:	loadval ebx
          [0x15] 21:	movu16 ebx, ebx
          [0x16] 22:	nop
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 0
          [0x19] 25:	movn #2
          [0x1a] 26:	movi #0, adx
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	rmov adx, ecx
line: 115 [0x1e] 30:	loadl ebx, fp+2
          [0x1f] 31:	return_val ebx
          [0x20] 32:	ret

func:@759 [std#ushort.$operator++] in file: lib/support//0.2.587//ushort.sharp:119:24: note:  
		    public def operator++() : var { // pre inc ++i
		                       ^


$operator++:
line: 119 [0x0] 0:	movi #1, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #2
          [0x5] 5:	movi #0, adx
          [0x7] 7:	chklen adx
          [0x8] 8:	iaload_2 ebx, adx
          [0x9] 9:	loadval egx
          [0xa] 10:	add ebx, egx -> ebx
          [0xc] 12:	rstore ebx
          [0xd] 13:	loadval ebx
          [0xe] 14:	movu16 ebx, ebx
          [0xf] 15:	nop
          [0x10] 16:	rstore ebx
          [0x11] 17:	movl 0
          [0x12] 18:	movn #2
          [0x13] 19:	movi #0, adx
          [0x15] 21:	loadval ecx
          [0x16] 22:	rmov adx, ecx
          [0x17] 23:	return_val ebx
          [0x18] 24:	ret

func:@760 [std#ushort.$operator--] in file: lib/support//0.2.587//ushort.sharp:123:24: note:  
		    public def operator--(var num) : var {
		                       ^


$operator--:
line: 123 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	smovr_2 ebx, fp+2
line: 124 [0x7] 7:	movi #1, ebx
          [0x9] 9:	rstore ebx
          [0xa] 10:	movl 0
          [0xb] 11:	movn #2
          [0xc] 12:	movi #0, adx
          [0xe] 14:	chklen adx
          [0xf] 15:	iaload_2 ebx, adx
          [0x10] 16:	loadval egx
          [0x11] 17:	sub ebx, egx -> ebx
          [0x13] 19:	rstore ebx
          [0x14] 20:	loadval ebx
          [0x15] 21:	movu16 ebx, ebx
          [0x16] 22:	nop
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 0
          [0x19] 25:	movn #2
          [0x1a] 26:	movi #0, adx
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	rmov adx, ecx
line: 125 [0x1e] 30:	loadl ebx, fp+2
          [0x1f] 31:	return_val ebx
          [0x20] 32:	ret

func:@761 [std#ushort.$operator--] in file: lib/support//0.2.587//ushort.sharp:129:24: note:  
		    public def operator--() : var {
		                       ^


$operator--:
line: 129 [0x0] 0:	movi #1, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #2
          [0x5] 5:	movi #0, adx
          [0x7] 7:	chklen adx
          [0x8] 8:	iaload_2 ebx, adx
          [0x9] 9:	loadval egx
          [0xa] 10:	sub ebx, egx -> ebx
          [0xc] 12:	rstore ebx
          [0xd] 13:	loadval ebx
          [0xe] 14:	movu16 ebx, ebx
          [0xf] 15:	nop
          [0x10] 16:	rstore ebx
          [0x11] 17:	movl 0
          [0x12] 18:	movn #2
          [0x13] 19:	movi #0, adx
          [0x15] 21:	loadval ecx
          [0x16] 22:	rmov adx, ecx
          [0x17] 23:	return_val ebx
          [0x18] 24:	ret

func:@762 [std#ushort.value] in file: lib/support//0.2.587//ushort.sharp:133:21: note:  
		    public def value() : var {
		                    ^


value:
line: 133 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@763 [std#ushort.toString] in file: lib/support//0.2.587//ushort.sharp:137:24: note:  
		    public def delegate::toString() : string {
		                       ^


toString:
line: 137 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	newstr @226 // ""
          [0x2] 2:	call @558 // <std#string.string(var[])>
          [0x3] 3:	movl 0
          [0x4] 4:	movn #2
          [0x5] 5:	movi #0, adx
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	rstore ebx
          [0x9] 9:	call @579 // <std#string.$operator+(var)>
          [0xa] 10:	movsl #0
          [0xb] 11:	returnobj
          [0xc] 12:	ret

func:@764 [std#ushort.ushort] in file: lib/support//0.2.587//ushort.sharp:3:13: note:  
		public class ushort base integer {
		            ^


ushort:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@765 [std#VarList.VarList] in file: lib/support//0.2.587//VarList.sharp:17:19: note:  
		    public VarList() {
		                  ^


VarList:
line: 18 [0x0] 0:	movi #10, ebx
         [0x2] 2:	newarry ebx
         [0x3] 3:	movl 0
         [0x4] 4:	movn #1
         [0x5] 5:	popobj
         [0x6] 6:	movl 0
         [0x7] 7:	returnobj
         [0x8] 8:	ret

func:@766 [std#VarList.size] in file: lib/support//0.2.587//VarList.sharp:25:20: note:  
		    public def size() : var {
		                   ^


size:
line: 25 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@767 [std#VarList.empty] in file: lib/support//0.2.587//VarList.sharp:33:21: note:  
		    public def empty() : var {
		                    ^


empty:
line: 33 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movi #0, ebx
         [0x8] 8:	movr egx, ebx
         [0x9] 9:	loadval ebx
         [0xa] 10:	test ebx, egx
         [0xb] 11:	movr ebx, cmt
         [0xc] 12:	return_val cmt
         [0xd] 13:	ret

func:@768 [std#VarList.toArray] in file: lib/support//0.2.587//VarList.sharp:42:23: note:  
		    public def toArray() : var[] {
		                      ^


toArray:
line: 42 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movi #0, ebx
         [0x8] 8:	movr egx, ebx
         [0x9] 9:	loadval ebx
         [0xa] 10:	test ebx, egx
         [0xb] 11:	movr ebx, cmt
         [0xc] 12:	movi #19, adx
         [0xe] 14:	ifne
line: 42 [0xf] 15:	movl 0
         [0x10] 16:	del
         [0x11] 17:	ret
         [0x12] 18:	nop
         [0x13] 19:	nop
line: 43 [0x14] 20:	movl 0
         [0x15] 21:	movn #1
         [0x16] 22:	pushobj
         [0x17] 23:	movl 0
         [0x18] 24:	movn #0
         [0x19] 25:	movi #0, adx
         [0x1b] 27:	iaload_2 ebx, adx
         [0x1c] 28:	rstore ebx
         [0x1d] 29:	call @619 // <std#__SRT_Global.copyOf(object,var)>
         [0x1e] 30:	movsl #0
         [0x1f] 31:	vcast 1
         [0x20] 32:	movsl #0
         [0x21] 33:	returnobj
         [0x22] 34:	ret

func:@769 [std#VarList.get] in file: lib/support//0.2.587//VarList.sharp:51:19: note:  
		    public def get(var index) : var {
		                  ^


get:
line: 51 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	chklen adx
         [0x5] 5:	iaload_2 egx, adx
         [0x6] 6:	loadl ebx, fp+1
         [0x7] 7:	gte ebx, egx
         [0x8] 8:	movr ebx, cmt
         [0x9] 9:	movi #21, adx
         [0xb] 11:	ifne
line: 52 [0xc] 12:	new_class @13 // std#IndexOutOfBoundsException
         [0xd] 13:	movl 0
         [0xe] 14:	pushobj
         [0xf] 15:	loadl ebx, fp+1
         [0x10] 16:	rstore ebx
         [0x11] 17:	call @779 // <std#VarList.outOfBoundsMsg(var)>
         [0x12] 18:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
         [0x13] 19:	throw 
         [0x14] 20:	nop
         [0x15] 21:	nop
line: 54 [0x16] 22:	movl 0
         [0x17] 23:	movn #1
         [0x18] 24:	loadl ebx, fp+1
         [0x19] 25:	chklen ebx
         [0x1a] 26:	iaload_2 ebx, ebx
         [0x1b] 27:	return_val ebx
         [0x1c] 28:	ret

func:@770 [std#VarList.last] in file: lib/support//0.2.587//VarList.sharp:62:20: note:  
		    public def last() : var {
		                   ^


last:
line: 62 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movi #1, ebx
         [0x4] 4:	rstore ebx
         [0x5] 5:	movl 0
         [0x6] 6:	pushobj
         [0x7] 7:	call @766 // <std#VarList.size()>
         [0x8] 8:	loadval ebx
         [0x9] 9:	loadval ecx
         [0xa] 10:	sub ebx, ecx -> ebx
         [0xc] 12:	rstore ebx
         [0xd] 13:	call @769 // <std#VarList.get(var)>
         [0xe] 14:	loadval ebx
         [0xf] 15:	return_val ebx
         [0x10] 16:	ret

func:@771 [std#VarList.set] in file: lib/support//0.2.587//VarList.sharp:71:19: note:  
		    public def set(var index, var element) : var {
		                  ^


set:
line: 71 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	chklen adx
         [0x5] 5:	iaload_2 egx, adx
         [0x6] 6:	loadl ebx, fp+1
         [0x7] 7:	gte ebx, egx
         [0x8] 8:	movr ebx, cmt
         [0x9] 9:	movi #21, adx
         [0xb] 11:	ifne
line: 72 [0xc] 12:	new_class @13 // std#IndexOutOfBoundsException
         [0xd] 13:	movl 0
         [0xe] 14:	pushobj
         [0xf] 15:	loadl ebx, fp+1
         [0x10] 16:	rstore ebx
         [0x11] 17:	call @779 // <std#VarList.outOfBoundsMsg(var)>
         [0x12] 18:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
         [0x13] 19:	throw 
         [0x14] 20:	nop
         [0x15] 21:	nop
line: 74 [0x16] 22:	movl 0
         [0x17] 23:	movn #1
         [0x18] 24:	loadl ebx, fp+1
         [0x19] 25:	chklen ebx
         [0x1a] 26:	iaload_2 ebx, ebx
         [0x1b] 27:	smovr_2 ebx, fp+3
line: 75 [0x1c] 28:	loadl ebx, fp+2
         [0x1d] 29:	rstore ebx
         [0x1e] 30:	movl 0
         [0x1f] 31:	movn #1
         [0x20] 32:	loadl ebx, fp+1
         [0x21] 33:	chklen ebx
         [0x22] 34:	loadval egx
         [0x23] 35:	rmov ebx, egx
line: 76 [0x24] 36:	loadl ebx, fp+3
         [0x25] 37:	return_val ebx
         [0x26] 38:	ret

func:@772 [std#VarList.shrink] in file: lib/support//0.2.587//VarList.sharp:84:23: note:  
		    private def shrink() {
		                      ^


shrink:
line: 84 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	call @258 // <std.kernel#CListVar.shrink()>
         [0x3] 3:	ret

func:@773 [std#VarList.add] in file: lib/support//0.2.587//VarList.sharp:94:20: note:  
		     public def add(VarList lst) {
		                   ^


add:
line: 94 [0x0] 0:	movl 1
         [0x1] 1:	pushobj
         [0x2] 2:	call @768 // <std#VarList.toArray()>
         [0x3] 3:	movl 2
         [0x4] 4:	popobj
line: 95 [0x5] 5:	movi #0, ebx
         [0x7] 7:	rstore ebx
         [0x8] 8:	movl 2
         [0x9] 9:	smov ebx, sp+0
         [0xa] 10:	sizeof egx
         [0xb] 11:	lt ebx, egx
         [0xc] 12:	movi #26, adx
         [0xe] 14:	ifne
         [0xf] 15:	iaload_2 ebx, ebx
         [0x10] 16:	smovr_2 ebx, fp+3
line: 96 [0x11] 17:	movl 0
         [0x12] 18:	pushobj
         [0x13] 19:	loadl ebx, fp+3
         [0x14] 20:	rstore ebx
         [0x15] 21:	call @257 // <std.kernel#CListVar.add(var)>
         [0x16] 22:	smov ebx, sp+0
         [0x17] 23:	inc ebx
         [0x18] 24:	smovr ebx, sp+0
         [0x19] 25:	goto @8
         [0x1a] 26:	pop
         [0x1b] 27:	ret

func:@774 [std#VarList.add] in file: lib/support//0.2.587//VarList.sharp:107:20: note:  
		     public def add(var num) {
		                   ^


add:
line: 107 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	loadl ebx, fp+1
          [0x3] 3:	rstore ebx
          [0x4] 4:	call @257 // <std.kernel#CListVar.add(var)>
          [0x5] 5:	ret

func:@775 [std#VarList.popBack] in file: lib/support//0.2.587//VarList.sharp:118:24: note:  
		     public def popBack() {
		                       ^


popBack:
line: 118 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	call @772 // <std#VarList.shrink()>
          [0x3] 3:	ret

func:@776 [std#VarList.insert] in file: lib/support//0.2.587//VarList.sharp:128:23: note:  
		     public def insert(var pos, var value) {
		                      ^


insert:
line: 128 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	loadl ebx, fp+1
          [0x3] 3:	rstore ebx
          [0x4] 4:	loadl ebx, fp+2
          [0x5] 5:	rstore ebx
          [0x6] 6:	call @259 // <std.kernel#CListVar.insert(var,var)>
          [0x7] 7:	ret

func:@777 [std#VarList.remove] in file: lib/support//0.2.587//VarList.sharp:138:23: note:  
		     public def remove(var pos) {
		                      ^


remove:
line: 138 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	loadl ebx, fp+1
          [0x3] 3:	rstore ebx
          [0x4] 4:	call @260 // <std.kernel#CListVar.remove(var)>
          [0x5] 5:	ret

func:@778 [std#VarList.clear] in file: lib/support//0.2.587//VarList.sharp:146:22: note:  
		     public def clear() {
		                     ^


clear:
line: 149 [0x0] 0:	movi #10, ebx
          [0x2] 2:	newarry ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #1
          [0x5] 5:	popobj
          [0x6] 6:	ret

func:@779 [std#VarList.outOfBoundsMsg] in file: lib/support//0.2.587//VarList.sharp:158:31: note:  
		    private def outOfBoundsMsg(var index) : string {
		                              ^


outOfBoundsMsg:
line: 158 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	newstr @224 // "Index: "
          [0x2] 2:	call @558 // <std#string.string(var[])>
          [0x3] 3:	loadl ebx, fp+1
          [0x4] 4:	rstore ebx
          [0x5] 5:	call @579 // <std#string.$operator+(var)>
          [0x6] 6:	newstr @225 // ", size: "
          [0x7] 7:	call @572 // <std#string.$operator+(var[])>
          [0x8] 8:	movl 0
          [0x9] 9:	movn #1
          [0xa] 10:	sizeof ebx
          [0xb] 11:	rstore ebx
          [0xc] 12:	call @579 // <std#string.$operator+(var)>
          [0xd] 13:	movsl #0
          [0xe] 14:	returnobj
          [0xf] 15:	ret

func:@780 [app#__SRT_Global.main] in file: lib/support//bootstrap//Application.sharp:5:4: note:  
		def main(string[] args) : var {
		   ^


main:
line: 5 [0x0] 0:	movl 0
        [0x1] 1:	pushobj
        [0x2] 2:	call @896 // <app#Runtime.bootstrap(std#string[])>
        [0x3] 3:	loadval ebx
        [0x4] 4:	return_val ebx
        [0x5] 5:	ret

func:@781 [app#ErrorManager.ErrorManager] in file: lib/support//bootstrap//frontend//ErrorManager.sharp:20:25: note:  
		    private ErrorManager() {
		                        ^


ErrorManager:
line: 20 [0x0] 0:	call @803 // <app#ErrorManager.initErrors()>
         [0x1] 1:	movl 0
         [0x2] 2:	returnobj
         [0x3] 3:	ret

func:@782 [app#ErrorManager.ErrorManager] in file: lib/support//bootstrap//frontend//ErrorManager.sharp:24:24: note:  
		    public ErrorManager(ArrayList<string> lines, string file, var asIs, var aggressive)
		                       ^


ErrorManager:
line: 25 [0x0] 0:	new_class @78 // std#ArrayList<std#ArrayList<app#ParseError>>
         [0x1] 1:	call @1010 // <std#ArrayList<std#ArrayList<app#ParseError>>.ArrayList()>
         [0x2] 2:	movl 0
         [0x3] 3:	movn #6
         [0x4] 4:	popobj
line: 26 [0x5] 5:	new_class @74 // std#ArrayList<app#ParseError>
         [0x6] 6:	call @938 // <std#ArrayList<app#ParseError>.ArrayList()>
         [0x7] 7:	movl 0
         [0x8] 8:	movn #3
         [0x9] 9:	popobj
line: 27 [0xa] 10:	new_class @74 // std#ArrayList<app#ParseError>
         [0xb] 11:	call @938 // <std#ArrayList<app#ParseError>.ArrayList()>
         [0xc] 12:	movl 0
         [0xd] 13:	movn #4
         [0xe] 14:	popobj
line: 28 [0xf] 15:	new_class @74 // std#ArrayList<app#ParseError>
         [0x10] 16:	call @938 // <std#ArrayList<app#ParseError>.ArrayList()>
         [0x11] 17:	movl 0
         [0x12] 18:	movn #5
         [0x13] 19:	popobj
line: 29 [0x14] 20:	loadl ebx, fp+3
         [0x15] 21:	nop
         [0x16] 22:	rstore ebx
         [0x17] 23:	movl 0
         [0x18] 24:	movn #11
         [0x19] 25:	movi #0, adx
         [0x1b] 27:	loadval ecx
         [0x1c] 28:	rmov adx, ecx
line: 30 [0x1d] 29:	new_class @73 // std#ArrayList<std#string>
         [0x1e] 30:	call @917 // <std#ArrayList<std#string>.ArrayList()>
         [0x1f] 31:	movl 0
         [0x20] 32:	movn #13
         [0x21] 33:	popobj
line: 31 [0x22] 34:	loadl ebx, fp+4
         [0x23] 35:	nop
         [0x24] 36:	rstore ebx
         [0x25] 37:	movl 0
         [0x26] 38:	movn #12
         [0x27] 39:	movi #0, adx
         [0x29] 41:	loadval ecx
         [0x2a] 42:	rmov adx, ecx
line: 33 [0x2b] 43:	movl 0
         [0x2c] 44:	movn #13
         [0x2d] 45:	pushobj
         [0x2e] 46:	movl 1
         [0x2f] 47:	pushobj
         [0x30] 48:	call @930 // <std#ArrayList<std#string>.addAll(std#ArrayList<std#string>)>
line: 34 [0x31] 49:	movg @54 // @app#ErrorManager
         [0x32] 50:	movn #2
         [0x33] 51:	pushobj
         [0x34] 52:	movl 0
         [0x35] 53:	movn #7
         [0x36] 54:	popobj
line: 35 [0x37] 55:	movg @54 // @app#ErrorManager
         [0x38] 56:	movn #2
         [0x39] 57:	pushobj
         [0x3a] 58:	movl 0
         [0x3b] 59:	movn #8
         [0x3c] 60:	popobj
line: 36 [0x3d] 61:	movl 2
         [0x3e] 62:	pushobj
         [0x3f] 63:	movl 0
         [0x40] 64:	movn #14
         [0x41] 65:	popobj
         [0x42] 66:	movl 0
         [0x43] 67:	returnobj
         [0x44] 68:	ret

func:@783 [app#ErrorManager.printErrors] in file: lib/support//bootstrap//frontend//ErrorManager.sharp:40:27: note:  
		    public def printErrors() {
		                          ^


printErrors:
line: 40 [0x0] 0:	movl 0
         [0x1] 1:	movn #11
         [0x2] 2:	movi #0, adx
         [0x4] 4:	chklen adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	not ebx, ebx
         [0x7] 7:	movr cmt, ebx
         [0x8] 8:	movi #103, adx
         [0xa] 10:	ifne
line: 41 [0xb] 11:	movl 1
         [0xc] 12:	del
line: 42 [0xd] 13:	movl 0
         [0xe] 14:	movn #9
         [0xf] 15:	movi #0, adx
         [0x11] 17:	chklen adx
         [0x12] 18:	iaload_2 cmt, adx
         [0x13] 19:	movi #79, adx
         [0x15] 21:	ifne
line: 43 [0x16] 22:	movl 0
         [0x17] 23:	movn #12
         [0x18] 24:	movi #0, adx
         [0x1a] 26:	chklen adx
         [0x1b] 27:	iaload_2 cmt, adx
         [0x1c] 28:	movi #54, adx
         [0x1e] 30:	ifne
line: 44 [0x1f] 31:	movl 0
         [0x20] 32:	pushobj
         [0x21] 33:	movl 0
         [0x22] 34:	movn #4
         [0x23] 35:	pushobj
         [0x24] 36:	call @784 // <app#ErrorManager.getErrors(std#ArrayList<app#ParseError>)>
         [0x25] 37:	movl 1
         [0x26] 38:	popobj
line: 45 [0x27] 39:	movl 1
         [0x28] 40:	pushobj
         [0x29] 41:	call @594 // <std#string.empty()>
         [0x2a] 42:	loadval ebx
         [0x2b] 43:	not ebx, ebx
         [0x2c] 44:	movr cmt, ebx
         [0x2d] 45:	movi #52, adx
         [0x2f] 47:	ifne
line: 45 [0x30] 48:	movl 1
         [0x31] 49:	pushobj
         [0x32] 50:	call @610 // <std#__SRT_Global.println(std#string)>
         [0x33] 51:	nop
         [0x34] 52:	nop
         [0x35] 53:	goto @77
line: 48 [0x36] 54:	movl 0
         [0x37] 55:	pushobj
         [0x38] 56:	movl 0
         [0x39] 57:	movn #3
         [0x3a] 58:	pushobj
         [0x3b] 59:	call @784 // <app#ErrorManager.getErrors(std#ArrayList<app#ParseError>)>
         [0x3c] 60:	movl 1
         [0x3d] 61:	popobj
line: 49 [0x3e] 62:	movl 1
         [0x3f] 63:	pushobj
         [0x40] 64:	call @594 // <std#string.empty()>
         [0x41] 65:	loadval ebx
         [0x42] 66:	not ebx, ebx
         [0x43] 67:	movr cmt, ebx
         [0x44] 68:	movi #75, adx
         [0x46] 70:	ifne
line: 49 [0x47] 71:	movl 1
         [0x48] 72:	pushobj
         [0x49] 73:	call @610 // <std#__SRT_Global.println(std#string)>
         [0x4a] 74:	nop
         [0x4b] 75:	nop
         [0x4c] 76:	nop
         [0x4d] 77:	nop
         [0x4e] 78:	nop
         [0x4f] 79:	nop
line: 53 [0x50] 80:	movl 0
         [0x51] 81:	pushobj
         [0x52] 82:	movl 0
         [0x53] 83:	movn #5
         [0x54] 84:	pushobj
         [0x55] 85:	call @784 // <app#ErrorManager.getErrors(std#ArrayList<app#ParseError>)>
         [0x56] 86:	movl 1
         [0x57] 87:	popobj
line: 54 [0x58] 88:	movl 1
         [0x59] 89:	pushobj
         [0x5a] 90:	call @594 // <std#string.empty()>
         [0x5b] 91:	loadval ebx
         [0x5c] 92:	not ebx, ebx
         [0x5d] 93:	movr cmt, ebx
         [0x5e] 94:	movi #101, adx
         [0x60] 96:	ifne
line: 54 [0x61] 97:	movl 1
         [0x62] 98:	pushobj
         [0x63] 99:	call @610 // <std#__SRT_Global.println(std#string)>
         [0x64] 100:	nop
         [0x65] 101:	nop
         [0x66] 102:	nop
         [0x67] 103:	nop
         [0x68] 104:	ret

func:@784 [app#ErrorManager.getErrors] in file: lib/support//bootstrap//frontend//ErrorManager.sharp:60:18: note:  
		    def getErrors(ArrayList<ParseError> errors) : string {
		                 ^


getErrors:
line: 60 [0x0] 0:	new_class @46 // std#string
         [0x1] 1:	newstr @226 // ""
         [0x2] 2:	call @558 // <std#string.string(var[])>
         [0x3] 3:	popl 2
line: 62 [0x4] 4:	movl 1
         [0x5] 5:	pushobj
         [0x6] 6:	call @945 // <std#ArrayList<app#ParseError>.toArray()>
         [0x7] 7:	movl 3
         [0x8] 8:	popobj
line: 63 [0x9] 9:	movi #0, ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	movl 3
         [0xd] 13:	smov ebx, sp+0
         [0xe] 14:	sizeof egx
         [0xf] 15:	lt ebx, egx
         [0x10] 16:	movi #181, adx
         [0x12] 18:	ifne
         [0x13] 19:	movnd ebx
         [0x14] 20:	pushobj
         [0x15] 21:	movl 4
         [0x16] 22:	popobj
line: 64 [0x17] 23:	movl 4
         [0x18] 24:	movn #4
         [0x19] 25:	movi #0, adx
         [0x1b] 27:	chklen adx
         [0x1c] 28:	iaload_2 cmt, adx
         [0x1d] 29:	movi #76, adx
         [0x1f] 31:	ifne
line: 65 [0x20] 32:	movl 2
         [0x21] 33:	pushobj
         [0x22] 34:	movl 0
         [0x23] 35:	movn #14
         [0x24] 36:	pushobj
         [0x25] 37:	newstr @301 // ":"
         [0x26] 38:	call @572 // <std#string.$operator+(var[])>
         [0x27] 39:	movl 4
         [0x28] 40:	movn #2
         [0x29] 41:	movi #0, adx
         [0x2b] 43:	iaload_2 ebx, adx
         [0x2c] 44:	rstore ebx
         [0x2d] 45:	call @579 // <std#string.$operator+(var)>
         [0x2e] 46:	newstr @301 // ":"
         [0x2f] 47:	call @572 // <std#string.$operator+(var[])>
         [0x30] 48:	movl 4
         [0x31] 49:	movn #3
         [0x32] 50:	movi #0, adx
         [0x34] 52:	iaload_2 ebx, adx
         [0x35] 53:	rstore ebx
         [0x36] 54:	call @579 // <std#string.$operator+(var)>
         [0x37] 55:	newstr @302 // ": warning S60"
         [0x38] 56:	call @572 // <std#string.$operator+(var[])>
         [0x39] 57:	movl 4
         [0x3a] 58:	movn #0
         [0x3b] 59:	movn #2
         [0x3c] 60:	movi #0, adx
         [0x3e] 62:	iaload_2 ebx, adx
         [0x3f] 63:	rstore ebx
         [0x40] 64:	call @579 // <std#string.$operator+(var)>
         [0x41] 65:	newstr @303 // ":  "
         [0x42] 66:	call @572 // <std#string.$operator+(var[])>
         [0x43] 67:	movl 4
         [0x44] 68:	movn #1
         [0x45] 69:	pushobj
         [0x46] 70:	call @573 // <std#string.$operator+(std#Printable)>
         [0x47] 71:	newstr @304 // "\n"
         [0x48] 72:	call @572 // <std#string.$operator+(var[])>
         [0x49] 73:	call @581 // <std#string.$operator+=(std#Printable)>
         [0x4a] 74:	pop
         [0x4b] 75:	goto @120
line: 68 [0x4c] 76:	movl 2
         [0x4d] 77:	pushobj
         [0x4e] 78:	movl 0
         [0x4f] 79:	movn #14
         [0x50] 80:	pushobj
         [0x51] 81:	newstr @301 // ":"
         [0x52] 82:	call @572 // <std#string.$operator+(var[])>
         [0x53] 83:	movl 4
         [0x54] 84:	movn #2
         [0x55] 85:	movi #0, adx
         [0x57] 87:	iaload_2 ebx, adx
         [0x58] 88:	rstore ebx
         [0x59] 89:	call @579 // <std#string.$operator+(var)>
         [0x5a] 90:	newstr @301 // ":"
         [0x5b] 91:	call @572 // <std#string.$operator+(var[])>
         [0x5c] 92:	movl 4
         [0x5d] 93:	movn #3
         [0x5e] 94:	movi #0, adx
         [0x60] 96:	iaload_2 ebx, adx
         [0x61] 97:	rstore ebx
         [0x62] 98:	call @579 // <std#string.$operator+(var)>
         [0x63] 99:	newstr @305 // ": error S60"
         [0x64] 100:	call @572 // <std#string.$operator+(var[])>
         [0x65] 101:	movl 4
         [0x66] 102:	movn #0
         [0x67] 103:	movn #2
         [0x68] 104:	movi #0, adx
         [0x6a] 106:	iaload_2 ebx, adx
         [0x6b] 107:	rstore ebx
         [0x6c] 108:	call @579 // <std#string.$operator+(var)>
         [0x6d] 109:	newstr @303 // ":  "
         [0x6e] 110:	call @572 // <std#string.$operator+(var[])>
         [0x6f] 111:	movl 4
         [0x70] 112:	movn #1
         [0x71] 113:	pushobj
         [0x72] 114:	call @573 // <std#string.$operator+(std#Printable)>
         [0x73] 115:	newstr @304 // "\n"
         [0x74] 116:	call @572 // <std#string.$operator+(var[])>
         [0x75] 117:	call @581 // <std#string.$operator+=(std#Printable)>
         [0x76] 118:	pop
         [0x77] 119:	nop
         [0x78] 120:	nop
line: 72 [0x79] 121:	movl 2
         [0x7a] 122:	pushobj
         [0x7b] 123:	new_class @46 // std#string
         [0x7c] 124:	newstr @306 // "\t"
         [0x7d] 125:	call @558 // <std#string.string(var[])>
         [0x7e] 126:	movl 0
         [0x7f] 127:	pushobj
         [0x80] 128:	movl 4
         [0x81] 129:	movn #2
         [0x82] 130:	movi #0, adx
         [0x84] 132:	iaload_2 ebx, adx
         [0x85] 133:	rstore ebx
         [0x86] 134:	call @786 // <app#ErrorManager.getLine(var)>
         [0x87] 135:	call @573 // <std#string.$operator+(std#Printable)>
         [0x88] 136:	newstr @307 // "\n\t"
         [0x89] 137:	call @572 // <std#string.$operator+(var[])>
         [0x8a] 138:	call @581 // <std#string.$operator+=(std#Printable)>
         [0x8b] 139:	pop
line: 74 [0x8c] 140:	istorel 0, fp+5
         [0x8e] 142:	movi #1, ebx
         [0x90] 144:	rstore ebx
         [0x91] 145:	movl 4
         [0x92] 146:	movn #3
         [0x93] 147:	movi #0, adx
         [0x95] 149:	chklen adx
         [0x96] 150:	iaload_2 ebx, adx
         [0x97] 151:	loadval egx
         [0x98] 152:	sub ebx, egx -> ebx
         [0x9a] 154:	rstore ebx
         [0x9b] 155:	loadval egx
         [0x9c] 156:	loadl ebx, fp+5
         [0x9d] 157:	lt ebx, egx
         [0x9e] 158:	movr ebx, cmt
         [0x9f] 159:	movi #172, adx
         [0xa1] 161:	ifne
line: 75 [0xa2] 162:	movl 2
         [0xa3] 163:	pushobj
         [0xa4] 164:	newstr @308 // " "
         [0xa5] 165:	call @582 // <std#string.$operator+=(var[])>
         [0xa6] 166:	pop
         [0xa7] 167:	loadl ebx, fp+5
         [0xa8] 168:	movi #1, ecx
         [0xaa] 170:	addl ecx, @5
         [0xab] 171:	goto @142
line: 76 [0xac] 172:	movl 2
         [0xad] 173:	pushobj
         [0xae] 174:	newstr @309 // "^\n"
         [0xaf] 175:	call @582 // <std#string.$operator+=(var[])>
         [0xb0] 176:	pop
         [0xb1] 177:	smov ebx, sp+0
         [0xb2] 178:	inc ebx
         [0xb3] 179:	smovr ebx, sp+0
         [0xb4] 180:	goto @12
         [0xb5] 181:	pop
line: 79 [0xb6] 182:	movl 2
         [0xb7] 183:	returnobj
         [0xb8] 184:	ret

func:@785 [app#ErrorManager.printError] in file: lib/support//bootstrap//frontend//ErrorManager.sharp:83:19: note:  
		    def printError(ParseError error) {
		                  ^


printError:
line: 84 [0x0] 0:	movl 1
         [0x1] 1:	movn #4
         [0x2] 2:	movi #0, adx
         [0x4] 4:	chklen adx
         [0x5] 5:	iaload_2 cmt, adx
         [0x6] 6:	movi #50, adx
         [0x8] 8:	ifne
line: 85 [0x9] 9:	movl 0
         [0xa] 10:	movn #14
         [0xb] 11:	pushobj
         [0xc] 12:	newstr @301 // ":"
         [0xd] 13:	call @572 // <std#string.$operator+(var[])>
         [0xe] 14:	movl 1
         [0xf] 15:	movn #2
         [0x10] 16:	movi #0, adx
         [0x12] 18:	iaload_2 ebx, adx
         [0x13] 19:	rstore ebx
         [0x14] 20:	call @579 // <std#string.$operator+(var)>
         [0x15] 21:	newstr @301 // ":"
         [0x16] 22:	call @572 // <std#string.$operator+(var[])>
         [0x17] 23:	movl 1
         [0x18] 24:	movn #3
         [0x19] 25:	movi #0, adx
         [0x1b] 27:	iaload_2 ebx, adx
         [0x1c] 28:	rstore ebx
         [0x1d] 29:	call @579 // <std#string.$operator+(var)>
         [0x1e] 30:	newstr @302 // ": warning S60"
         [0x1f] 31:	call @572 // <std#string.$operator+(var[])>
         [0x20] 32:	movl 1
         [0x21] 33:	movn #0
         [0x22] 34:	movn #2
         [0x23] 35:	movi #0, adx
         [0x25] 37:	iaload_2 ebx, adx
         [0x26] 38:	rstore ebx
         [0x27] 39:	call @579 // <std#string.$operator+(var)>
         [0x28] 40:	newstr @303 // ":  "
         [0x29] 41:	call @572 // <std#string.$operator+(var[])>
         [0x2a] 42:	movl 1
         [0x2b] 43:	movn #1
         [0x2c] 44:	pushobj
         [0x2d] 45:	call @573 // <std#string.$operator+(std#Printable)>
         [0x2e] 46:	newstr @304 // "\n"
         [0x2f] 47:	call @572 // <std#string.$operator+(var[])>
         [0x30] 48:	call @601 // <std#__SRT_Global.print(std#string)>
         [0x31] 49:	goto @91
line: 88 [0x32] 50:	movl 0
         [0x33] 51:	movn #14
         [0x34] 52:	pushobj
         [0x35] 53:	newstr @301 // ":"
         [0x36] 54:	call @572 // <std#string.$operator+(var[])>
         [0x37] 55:	movl 1
         [0x38] 56:	movn #2
         [0x39] 57:	movi #0, adx
         [0x3b] 59:	iaload_2 ebx, adx
         [0x3c] 60:	rstore ebx
         [0x3d] 61:	call @579 // <std#string.$operator+(var)>
         [0x3e] 62:	newstr @301 // ":"
         [0x3f] 63:	call @572 // <std#string.$operator+(var[])>
         [0x40] 64:	movl 1
         [0x41] 65:	movn #3
         [0x42] 66:	movi #0, adx
         [0x44] 68:	iaload_2 ebx, adx
         [0x45] 69:	rstore ebx
         [0x46] 70:	call @579 // <std#string.$operator+(var)>
         [0x47] 71:	newstr @305 // ": error S60"
         [0x48] 72:	call @572 // <std#string.$operator+(var[])>
         [0x49] 73:	movl 1
         [0x4a] 74:	movn #0
         [0x4b] 75:	movn #2
         [0x4c] 76:	movi #0, adx
         [0x4e] 78:	iaload_2 ebx, adx
         [0x4f] 79:	rstore ebx
         [0x50] 80:	call @579 // <std#string.$operator+(var)>
         [0x51] 81:	newstr @303 // ":  "
         [0x52] 82:	call @572 // <std#string.$operator+(var[])>
         [0x53] 83:	movl 1
         [0x54] 84:	movn #1
         [0x55] 85:	pushobj
         [0x56] 86:	call @573 // <std#string.$operator+(std#Printable)>
         [0x57] 87:	newstr @304 // "\n"
         [0x58] 88:	call @572 // <std#string.$operator+(var[])>
         [0x59] 89:	call @601 // <std#__SRT_Global.print(std#string)>
         [0x5a] 90:	nop
         [0x5b] 91:	nop
line: 92 [0x5c] 92:	new_class @46 // std#string
         [0x5d] 93:	newstr @306 // "\t"
         [0x5e] 94:	call @558 // <std#string.string(var[])>
         [0x5f] 95:	movl 0
         [0x60] 96:	pushobj
         [0x61] 97:	movl 1
         [0x62] 98:	movn #2
         [0x63] 99:	movi #0, adx
         [0x65] 101:	iaload_2 ebx, adx
         [0x66] 102:	rstore ebx
         [0x67] 103:	call @786 // <app#ErrorManager.getLine(var)>
         [0x68] 104:	call @573 // <std#string.$operator+(std#Printable)>
         [0x69] 105:	newstr @307 // "\n\t"
         [0x6a] 106:	call @572 // <std#string.$operator+(var[])>
         [0x6b] 107:	call @601 // <std#__SRT_Global.print(std#string)>
line: 94 [0x6c] 108:	istorel 0, fp+2
         [0x6e] 110:	movi #1, ebx
         [0x70] 112:	rstore ebx
         [0x71] 113:	movl 1
         [0x72] 114:	movn #3
         [0x73] 115:	movi #0, adx
         [0x75] 117:	chklen adx
         [0x76] 118:	iaload_2 ebx, adx
         [0x77] 119:	loadval egx
         [0x78] 120:	sub ebx, egx -> ebx
         [0x7a] 122:	rstore ebx
         [0x7b] 123:	loadval egx
         [0x7c] 124:	loadl ebx, fp+2
         [0x7d] 125:	lt ebx, egx
         [0x7e] 126:	movr ebx, cmt
         [0x7f] 127:	movi #137, adx
         [0x81] 129:	ifne
line: 95 [0x82] 130:	newstr @308 // " "
         [0x83] 131:	call @600 // <std#__SRT_Global.print(var[])>
         [0x84] 132:	loadl ebx, fp+2
         [0x85] 133:	movi #1, ecx
         [0x87] 135:	addl ecx, @2
         [0x88] 136:	goto @110
line: 96 [0x89] 137:	newstr @309 // "^\n"
         [0x8a] 138:	call @600 // <std#__SRT_Global.print(var[])>
         [0x8b] 139:	ret

func:@786 [app#ErrorManager.getLine] in file: lib/support//bootstrap//frontend//ErrorManager.sharp:100:16: note:  
		    def getLine(var line) : string {
		               ^


getLine:
line: 100 [0x0] 0:	movl 0
          [0x1] 1:	movn #13
          [0x2] 2:	pushobj
          [0x3] 3:	call @922 // <std#ArrayList<std#string>.size()>
          [0x4] 4:	movi #1, ebx
          [0x6] 6:	rstore ebx
          [0x7] 7:	loadl ebx, fp+1
          [0x8] 8:	loadval egx
          [0x9] 9:	sub ebx, egx -> ebx
          [0xb] 11:	rstore ebx
          [0xc] 12:	loadval ebx
          [0xd] 13:	loadval ecx
          [0xe] 14:	gte ebx, ecx
          [0xf] 15:	movr ebx, cmt
          [0x10] 16:	movi #26, adx
          [0x12] 18:	ifne
line: 101 [0x13] 19:	new_class @46 // std#string
          [0x14] 20:	newstr @310 // "End of File"
          [0x15] 21:	call @558 // <std#string.string(var[])>
          [0x16] 22:	movsl #0
          [0x17] 23:	returnobj
          [0x18] 24:	ret
          [0x19] 25:	goto @42
line: 103 [0x1a] 26:	movl 0
          [0x1b] 27:	movn #13
          [0x1c] 28:	pushobj
          [0x1d] 29:	movi #1, ebx
          [0x1f] 31:	rstore ebx
          [0x20] 32:	loadl ebx, fp+1
          [0x21] 33:	loadval egx
          [0x22] 34:	sub ebx, egx -> ebx
          [0x24] 36:	rstore ebx
          [0x25] 37:	call @925 // <std#ArrayList<std#string>.get(var)>
          [0x26] 38:	movsl #0
          [0x27] 39:	returnobj
          [0x28] 40:	ret
          [0x29] 41:	nop
          [0x2a] 42:	nop
          [0x2b] 43:	pushnil 
          [0x2c] 44:	popobj
          [0x2d] 45:	returnobj
          [0x2e] 46:	ret

func:@787 [app#ErrorManager.getErrorCount] in file: lib/support//bootstrap//frontend//ErrorManager.sharp:107:29: note:  
		    public def getErrorCount() : var {
		                            ^


getErrorCount:
line: 107 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	pushobj
          [0x3] 3:	call @943 // <std#ArrayList<app#ParseError>.size()>
          [0x4] 4:	loadval ebx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@788 [app#ErrorManager.getWarningCount] in file: lib/support//bootstrap//frontend//ErrorManager.sharp:111:31: note:  
		    public def getWarningCount() : var {
		                              ^


getWarningCount:
line: 111 [0x0] 0:	movl 0
          [0x1] 1:	movn #5
          [0x2] 2:	pushobj
          [0x3] 3:	call @943 // <std#ArrayList<app#ParseError>.size()>
          [0x4] 4:	loadval ebx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@789 [app#ErrorManager.getRawErrorCount] in file: lib/support//bootstrap//frontend//ErrorManager.sharp:115:32: note:  
		    public def getRawErrorCount() : var {
		                               ^


getRawErrorCount:
line: 115 [0x0] 0:	movl 0
          [0x1] 1:	movn #4
          [0x2] 2:	pushobj
          [0x3] 3:	call @943 // <std#ArrayList<app#ParseError>.size()>
          [0x4] 4:	loadval ebx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@790 [app#ErrorManager.hasErrors] in file: lib/support//bootstrap//frontend//ErrorManager.sharp:119:25: note:  
		    public def hasErrors() : var {
		                        ^


hasErrors:
line: 119 [0x0] 0:	movl 0
          [0x1] 1:	movn #9
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	cmp ebx, 1
          [0x7] 7:	movr ebx, cmt
          [0x8] 8:	skne 15 // pc = 23
          [0x9] 9:	istore 1
          [0xa] 10:	movl 0
          [0xb] 11:	movn #4
          [0xc] 12:	pushobj
          [0xd] 13:	call @943 // <std#ArrayList<app#ParseError>.size()>
          [0xe] 14:	movi #0, ebx
          [0x10] 16:	movr egx, ebx
          [0x11] 17:	loadval ebx
          [0x12] 18:	tne ebx, egx
          [0x13] 19:	movr ebx, cmt
          [0x14] 20:	loadval ecx
          [0x15] 21:	and ecx, ebx
          [0x16] 22:	movr ebx, cmt
          [0x17] 23:	return_val ebx
          [0x18] 24:	ret

func:@791 [app#ErrorManager.enableProtectedMode] in file: lib/support//bootstrap//frontend//ErrorManager.sharp:123:35: note:  
		    public def enableProtectedMode() {
		                                  ^


enableProtectedMode:
line: 123 [0x0] 0:	movi #1, ebx
          [0x2] 2:	nop
          [0x3] 3:	rstore ebx
          [0x4] 4:	movl 0
          [0x5] 5:	movn #10
          [0x6] 6:	movi #0, adx
          [0x8] 8:	loadval ecx
          [0x9] 9:	rmov adx, ecx
line: 124 [0xa] 10:	movl 0
          [0xb] 11:	movn #6
          [0xc] 12:	pushobj
          [0xd] 13:	new_class @74 // std#ArrayList<app#ParseError>
          [0xe] 14:	call @938 // <std#ArrayList<app#ParseError>.ArrayList()>
          [0xf] 15:	call @1024 // <std#ArrayList<std#ArrayList<app#ParseError>>.add(std#ArrayList<app#ParseError>)>
          [0x10] 16:	ret

func:@792 [app#ErrorManager.popErrorStack] in file: lib/support//bootstrap//frontend//ErrorManager.sharp:128:29: note:  
		    public def popErrorStack() {
		                            ^


popErrorStack:
line: 128 [0x0] 0:	movi #0, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #6
          [0x5] 5:	pushobj
          [0x6] 6:	call @1015 // <std#ArrayList<std#ArrayList<app#ParseError>>.size()>
          [0x7] 7:	loadval ebx
          [0x8] 8:	loadval ecx
          [0x9] 9:	gt ebx, ecx
          [0xa] 10:	movr ebx, cmt
          [0xb] 11:	movi #44, adx
          [0xd] 13:	ifne
line: 130 [0xe] 14:	movl 0
          [0xf] 15:	movn #6
          [0x10] 16:	pushobj
          [0x11] 17:	call @1015 // <std#ArrayList<std#ArrayList<app#ParseError>>.size()>
          [0x12] 18:	movi #1, ebx
          [0x14] 20:	movr egx, ebx
          [0x15] 21:	loadval ebx
          [0x16] 22:	test ebx, egx
          [0x17] 23:	movr ebx, cmt
          [0x18] 24:	movi #38, adx
          [0x1a] 26:	ifne
line: 131 [0x1b] 27:	movi #0, ebx
          [0x1d] 29:	nop
          [0x1e] 30:	rstore ebx
          [0x1f] 31:	movl 0
          [0x20] 32:	movn #10
          [0x21] 33:	movi #0, adx
          [0x23] 35:	loadval ecx
          [0x24] 36:	rmov adx, ecx
          [0x25] 37:	nop
          [0x26] 38:	nop
line: 132 [0x27] 39:	movl 0
          [0x28] 40:	movn #6
          [0x29] 41:	pushobj
          [0x2a] 42:	call @1025 // <std#ArrayList<std#ArrayList<app#ParseError>>.popBack()>
          [0x2b] 43:	nop
          [0x2c] 44:	nop
          [0x2d] 45:	ret

func:@793 [app#ErrorManager.reportStack] in file: lib/support//bootstrap//frontend//ErrorManager.sharp:137:27: note:  
		    public def reportStack() {
		                          ^


reportStack:
line: 137 [0x0] 0:	movi #0, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #6
          [0x5] 5:	pushobj
          [0x6] 6:	call @1015 // <std#ArrayList<std#ArrayList<app#ParseError>>.size()>
          [0x7] 7:	loadval ebx
          [0x8] 8:	loadval ecx
          [0x9] 9:	gt ebx, ecx
          [0xa] 10:	movr ebx, cmt
          [0xb] 11:	movi #144, adx
          [0xd] 13:	ifne
line: 138 [0xe] 14:	movl 0
          [0xf] 15:	movn #6
          [0x10] 16:	pushobj
          [0x11] 17:	call @1019 // <std#ArrayList<std#ArrayList<app#ParseError>>.last()>
          [0x12] 18:	movl 1
          [0x13] 19:	popobj
line: 139 [0x14] 20:	movl 1
          [0x15] 21:	pushobj
          [0x16] 22:	call @945 // <std#ArrayList<app#ParseError>.toArray()>
          [0x17] 23:	movl 2
          [0x18] 24:	popobj
line: 141 [0x19] 25:	movi #0, ebx
          [0x1b] 27:	rstore ebx
          [0x1c] 28:	movl 2
          [0x1d] 29:	smov ebx, sp+0
          [0x1e] 30:	sizeof egx
          [0x1f] 31:	lt ebx, egx
          [0x20] 32:	movi #139, adx
          [0x22] 34:	ifne
          [0x23] 35:	movnd ebx
          [0x24] 36:	pushobj
          [0x25] 37:	movl 3
          [0x26] 38:	popobj
line: 142 [0x27] 39:	movl 0
          [0x28] 40:	movn #11
          [0x29] 41:	movi #0, adx
          [0x2b] 43:	chklen adx
          [0x2c] 44:	iaload_2 cmt, adx
          [0x2d] 45:	movi #81, adx
          [0x2f] 47:	ifne
line: 143 [0x30] 48:	movi #1, ebx
          [0x32] 50:	nop
          [0x33] 51:	rstore ebx
          [0x34] 52:	movl 0
          [0x35] 53:	movn #9
          [0x36] 54:	movi #0, adx
          [0x38] 56:	loadval ecx
          [0x39] 57:	rmov adx, ecx
line: 144 [0x3a] 58:	movl 0
          [0x3b] 59:	pushobj
          [0x3c] 60:	movl 3
          [0x3d] 61:	pushobj
          [0x3e] 62:	call @785 // <app#ErrorManager.printError(app#ParseError)>
line: 146 [0x3f] 63:	movl 0
          [0x40] 64:	movn #3
          [0x41] 65:	pushobj
          [0x42] 66:	movl 3
          [0x43] 67:	pushobj
          [0x44] 68:	call @952 // <std#ArrayList<app#ParseError>.add(app#ParseError)>
line: 147 [0x45] 69:	movl 0
          [0x46] 70:	movn #4
          [0x47] 71:	pushobj
          [0x48] 72:	movl 3
          [0x49] 73:	pushobj
          [0x4a] 74:	call @952 // <std#ArrayList<app#ParseError>.add(app#ParseError)>
line: 148 [0x4b] 75:	movl 3
          [0x4c] 76:	pushobj
          [0x4d] 77:	movl 0
          [0x4e] 78:	movn #7
          [0x4f] 79:	popobj
          [0x50] 80:	goto @134
          [0x51] 81:	movl 0
          [0x52] 82:	movn #12
          [0x53] 83:	movi #0, adx
          [0x55] 85:	chklen adx
          [0x56] 86:	iaload_2 cmt, adx
          [0x57] 87:	movr ebx, cmt
          [0x58] 88:	skpe 13 // pc = 101
          [0x59] 89:	movl 0
          [0x5a] 90:	pushobj
          [0x5b] 91:	pushnil 
          [0x5c] 92:	movl 0
          [0x5d] 93:	movn #7
          [0x5e] 94:	pushobj
          [0x5f] 95:	movl 3
          [0x60] 96:	pushobj
          [0x61] 97:	call @798 // <app#ErrorManager.shouldReport(app#Token,app#ParseError,app#ParseError)>
          [0x62] 98:	loadval ebx
          [0x63] 99:	cmp ebx, 1
          [0x64] 100:	movr ebx, cmt
          [0x65] 101:	movr cmt, ebx
          [0x66] 102:	movi #133, adx
          [0x68] 104:	ifne
line: 150 [0x69] 105:	movi #1, ebx
          [0x6b] 107:	nop
          [0x6c] 108:	rstore ebx
          [0x6d] 109:	movl 0
          [0x6e] 110:	movn #9
          [0x6f] 111:	movi #0, adx
          [0x71] 113:	loadval ecx
          [0x72] 114:	rmov adx, ecx
line: 151 [0x73] 115:	movl 0
          [0x74] 116:	movn #3
          [0x75] 117:	pushobj
          [0x76] 118:	movl 3
          [0x77] 119:	pushobj
          [0x78] 120:	call @952 // <std#ArrayList<app#ParseError>.add(app#ParseError)>
line: 152 [0x79] 121:	movl 0
          [0x7a] 122:	movn #4
          [0x7b] 123:	pushobj
          [0x7c] 124:	movl 3
          [0x7d] 125:	pushobj
          [0x7e] 126:	call @952 // <std#ArrayList<app#ParseError>.add(app#ParseError)>
line: 153 [0x7f] 127:	movl 3
          [0x80] 128:	pushobj
          [0x81] 129:	movl 0
          [0x82] 130:	movn #7
          [0x83] 131:	popobj
          [0x84] 132:	goto @134
          [0x85] 133:	nop
          [0x86] 134:	nop
          [0x87] 135:	smov ebx, sp+0
          [0x88] 136:	inc ebx
          [0x89] 137:	smovr ebx, sp+0
          [0x8a] 138:	goto @28
          [0x8b] 139:	pop
line: 157 [0x8c] 140:	movl 0
          [0x8d] 141:	pushobj
          [0x8e] 142:	call @792 // <app#ErrorManager.popErrorStack()>
          [0x8f] 143:	nop
          [0x90] 144:	nop
          [0x91] 145:	ret

func:@794 [app#ErrorManager.createNewError] in file: lib/support//bootstrap//frontend//ErrorManager.sharp:162:30: note:  
		    public def createNewError(CompilerError err, Token token, string msg) {
		                             ^


createNewError:
line: 162 [0x0] 0:	movg @54 // @app#ErrorManager
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 1
          [0x4] 4:	pushobj
          [0x5] 5:	call @985 // <std#Map<app#CompilerError,std#string>.get(app#CompilerError)>
          [0x6] 6:	movl 4
          [0x7] 7:	popobj
line: 163 [0x8] 8:	new_class @55 // app#ParseError
          [0x9] 9:	movi #0, ebx
          [0xb] 11:	rstore ebx
          [0xc] 12:	movl 1
          [0xd] 13:	pushobj
          [0xe] 14:	movl 4
          [0xf] 15:	pushobj
          [0x10] 16:	movl 2
          [0x11] 17:	pushobj
          [0x12] 18:	movl 3
          [0x13] 19:	pushobj
          [0x14] 20:	call @807 // <app#ParseError.ParseError(var,app#CompilerError,std#string,app#Token,std#string)>
          [0x15] 21:	movl 5
          [0x16] 22:	popobj
line: 164 [0x17] 23:	movl 0
          [0x18] 24:	movn #10
          [0x19] 25:	movi #0, adx
          [0x1b] 27:	chklen adx
          [0x1c] 28:	iaload_2 cmt, adx
          [0x1d] 29:	loadpc_2 adx, pc+8 // adx = 37
          [0x1e] 30:	ifne
          [0x1f] 31:	movl 0
          [0x20] 32:	movn #8
          [0x21] 33:	pushobj
          [0x22] 34:	movi #1, cmt
          [0x24] 36:	skpe 4 // pc = 40
          [0x25] 37:	movl 0
          [0x26] 38:	movn #7
          [0x27] 39:	pushobj
          [0x28] 40:	movl 6
          [0x29] 41:	popobj
line: 166 [0x2a] 42:	movl 0
          [0x2b] 43:	movn #10
          [0x2c] 44:	movi #0, adx
          [0x2e] 46:	chklen adx
          [0x2f] 47:	iaload_2 cmt, adx
          [0x30] 48:	movi #65, adx
          [0x32] 50:	ifne
line: 167 [0x33] 51:	movl 5
          [0x34] 52:	pushobj
          [0x35] 53:	movl 0
          [0x36] 54:	movn #8
          [0x37] 55:	popobj
line: 168 [0x38] 56:	movl 0
          [0x39] 57:	movn #6
          [0x3a] 58:	pushobj
          [0x3b] 59:	call @1019 // <std#ArrayList<std#ArrayList<app#ParseError>>.last()>
          [0x3c] 60:	movl 5
          [0x3d] 61:	pushobj
          [0x3e] 62:	call @952 // <std#ArrayList<app#ParseError>.add(app#ParseError)>
line: 169 [0x3f] 63:	ret
          [0x40] 64:	goto @139
          [0x41] 65:	movl 0
          [0x42] 66:	movn #11
          [0x43] 67:	movi #0, adx
          [0x45] 69:	chklen adx
          [0x46] 70:	iaload_2 cmt, adx
          [0x47] 71:	movi #80, adx
          [0x49] 73:	ifne
line: 171 [0x4a] 74:	movl 0
          [0x4b] 75:	pushobj
          [0x4c] 76:	movl 5
          [0x4d] 77:	pushobj
          [0x4e] 78:	call @785 // <app#ErrorManager.printError(app#ParseError)>
          [0x4f] 79:	goto @139
          [0x50] 80:	movl 0
          [0x51] 81:	movn #12
          [0x52] 82:	movi #0, adx
          [0x54] 84:	chklen adx
          [0x55] 85:	iaload_2 cmt, adx
          [0x56] 86:	movr ebx, cmt
          [0x57] 87:	skpe 13 // pc = 100
          [0x58] 88:	movl 0
          [0x59] 89:	pushobj
          [0x5a] 90:	movl 2
          [0x5b] 91:	pushobj
          [0x5c] 92:	movl 6
          [0x5d] 93:	pushobj
          [0x5e] 94:	movl 5
          [0x5f] 95:	pushobj
          [0x60] 96:	call @798 // <app#ErrorManager.shouldReport(app#Token,app#ParseError,app#ParseError)>
          [0x61] 97:	loadval ebx
          [0x62] 98:	cmp ebx, 1
          [0x63] 99:	movr ebx, cmt
          [0x64] 100:	movr cmt, ebx
          [0x65] 101:	movi #132, adx
          [0x67] 103:	ifne
line: 173 [0x68] 104:	movi #1, ebx
          [0x6a] 106:	nop
          [0x6b] 107:	rstore ebx
          [0x6c] 108:	movl 0
          [0x6d] 109:	movn #9
          [0x6e] 110:	movi #0, adx
          [0x70] 112:	loadval ecx
          [0x71] 113:	rmov adx, ecx
line: 174 [0x72] 114:	movl 0
          [0x73] 115:	movn #3
          [0x74] 116:	pushobj
          [0x75] 117:	movl 5
          [0x76] 118:	pushobj
          [0x77] 119:	call @952 // <std#ArrayList<app#ParseError>.add(app#ParseError)>
line: 175 [0x78] 120:	movl 0
          [0x79] 121:	movn #4
          [0x7a] 122:	pushobj
          [0x7b] 123:	movl 5
          [0x7c] 124:	pushobj
          [0x7d] 125:	call @952 // <std#ArrayList<app#ParseError>.add(app#ParseError)>
line: 176 [0x7e] 126:	movl 5
          [0x7f] 127:	pushobj
          [0x80] 128:	movl 0
          [0x81] 129:	movn #7
          [0x82] 130:	popobj
          [0x83] 131:	goto @139
line: 178 [0x84] 132:	movl 0
          [0x85] 133:	movn #4
          [0x86] 134:	pushobj
          [0x87] 135:	movl 5
          [0x88] 136:	pushobj
          [0x89] 137:	call @952 // <std#ArrayList<app#ParseError>.add(app#ParseError)>
          [0x8a] 138:	nop
          [0x8b] 139:	nop
          [0x8c] 140:	ret

func:@795 [app#ErrorManager.createNewError] in file: lib/support//bootstrap//frontend//ErrorManager.sharp:183:30: note:  
		    public def createNewError(CompilerError err, var line, var col, string msg) {
		                             ^


createNewError:
line: 183 [0x0] 0:	movg @54 // @app#ErrorManager
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 1
          [0x4] 4:	pushobj
          [0x5] 5:	call @985 // <std#Map<app#CompilerError,std#string>.get(app#CompilerError)>
          [0x6] 6:	movl 5
          [0x7] 7:	popobj
line: 184 [0x8] 8:	new_class @55 // app#ParseError
          [0x9] 9:	movi #0, ebx
          [0xb] 11:	rstore ebx
          [0xc] 12:	movl 1
          [0xd] 13:	pushobj
          [0xe] 14:	movl 5
          [0xf] 15:	pushobj
          [0x10] 16:	loadl ebx, fp+2
          [0x11] 17:	rstore ebx
          [0x12] 18:	loadl ebx, fp+3
          [0x13] 19:	rstore ebx
          [0x14] 20:	movl 4
          [0x15] 21:	pushobj
          [0x16] 22:	call @806 // <app#ParseError.ParseError(var,app#CompilerError,std#string,var,var,std#string)>
          [0x17] 23:	movl 6
          [0x18] 24:	popobj
line: 185 [0x19] 25:	movl 0
          [0x1a] 26:	movn #10
          [0x1b] 27:	movi #0, adx
          [0x1d] 29:	chklen adx
          [0x1e] 30:	iaload_2 cmt, adx
          [0x1f] 31:	loadpc_2 adx, pc+8 // adx = 39
          [0x20] 32:	ifne
          [0x21] 33:	movl 0
          [0x22] 34:	movn #8
          [0x23] 35:	pushobj
          [0x24] 36:	movi #1, cmt
          [0x26] 38:	skpe 4 // pc = 42
          [0x27] 39:	movl 0
          [0x28] 40:	movn #7
          [0x29] 41:	pushobj
          [0x2a] 42:	movl 7
          [0x2b] 43:	popobj
line: 187 [0x2c] 44:	movl 0
          [0x2d] 45:	movn #10
          [0x2e] 46:	movi #0, adx
          [0x30] 48:	chklen adx
          [0x31] 49:	iaload_2 cmt, adx
          [0x32] 50:	movi #67, adx
          [0x34] 52:	ifne
line: 188 [0x35] 53:	movl 6
          [0x36] 54:	pushobj
          [0x37] 55:	movl 0
          [0x38] 56:	movn #8
          [0x39] 57:	popobj
line: 189 [0x3a] 58:	movl 0
          [0x3b] 59:	movn #6
          [0x3c] 60:	pushobj
          [0x3d] 61:	call @1019 // <std#ArrayList<std#ArrayList<app#ParseError>>.last()>
          [0x3e] 62:	movl 6
          [0x3f] 63:	pushobj
          [0x40] 64:	call @952 // <std#ArrayList<app#ParseError>.add(app#ParseError)>
line: 190 [0x41] 65:	ret
          [0x42] 66:	goto @140
          [0x43] 67:	movl 0
          [0x44] 68:	movn #11
          [0x45] 69:	movi #0, adx
          [0x47] 71:	chklen adx
          [0x48] 72:	iaload_2 cmt, adx
          [0x49] 73:	movi #82, adx
          [0x4b] 75:	ifne
line: 192 [0x4c] 76:	movl 0
          [0x4d] 77:	pushobj
          [0x4e] 78:	movl 6
          [0x4f] 79:	pushobj
          [0x50] 80:	call @785 // <app#ErrorManager.printError(app#ParseError)>
          [0x51] 81:	goto @140
          [0x52] 82:	movl 0
          [0x53] 83:	movn #12
          [0x54] 84:	movi #0, adx
          [0x56] 86:	chklen adx
          [0x57] 87:	iaload_2 cmt, adx
          [0x58] 88:	movr ebx, cmt
          [0x59] 89:	skpe 12 // pc = 101
          [0x5a] 90:	movl 0
          [0x5b] 91:	pushobj
          [0x5c] 92:	pushnil 
          [0x5d] 93:	movl 7
          [0x5e] 94:	pushobj
          [0x5f] 95:	movl 6
          [0x60] 96:	pushobj
          [0x61] 97:	call @798 // <app#ErrorManager.shouldReport(app#Token,app#ParseError,app#ParseError)>
          [0x62] 98:	loadval ebx
          [0x63] 99:	cmp ebx, 1
          [0x64] 100:	movr ebx, cmt
          [0x65] 101:	movr cmt, ebx
          [0x66] 102:	movi #133, adx
          [0x68] 104:	ifne
line: 194 [0x69] 105:	movi #1, ebx
          [0x6b] 107:	nop
          [0x6c] 108:	rstore ebx
          [0x6d] 109:	movl 0
          [0x6e] 110:	movn #9
          [0x6f] 111:	movi #0, adx
          [0x71] 113:	loadval ecx
          [0x72] 114:	rmov adx, ecx
line: 195 [0x73] 115:	movl 0
          [0x74] 116:	movn #3
          [0x75] 117:	pushobj
          [0x76] 118:	movl 6
          [0x77] 119:	pushobj
          [0x78] 120:	call @952 // <std#ArrayList<app#ParseError>.add(app#ParseError)>
line: 196 [0x79] 121:	movl 0
          [0x7a] 122:	movn #4
          [0x7b] 123:	pushobj
          [0x7c] 124:	movl 6
          [0x7d] 125:	pushobj
          [0x7e] 126:	call @952 // <std#ArrayList<app#ParseError>.add(app#ParseError)>
line: 197 [0x7f] 127:	movl 6
          [0x80] 128:	pushobj
          [0x81] 129:	movl 0
          [0x82] 130:	movn #7
          [0x83] 131:	popobj
          [0x84] 132:	goto @140
line: 199 [0x85] 133:	movl 0
          [0x86] 134:	movn #4
          [0x87] 135:	pushobj
          [0x88] 136:	movl 6
          [0x89] 137:	pushobj
          [0x8a] 138:	call @952 // <std#ArrayList<app#ParseError>.add(app#ParseError)>
          [0x8b] 139:	nop
          [0x8c] 140:	nop
          [0x8d] 141:	ret

func:@796 [app#ErrorManager.createNewError] in file: lib/support//bootstrap//frontend//ErrorManager.sharp:204:30: note:  
		    public def createNewError(CompilerError err, var line, var col) {
		                             ^


createNewError:
line: 204 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	movl 1
          [0x3] 3:	pushobj
          [0x4] 4:	loadl ebx, fp+2
          [0x5] 5:	rstore ebx
          [0x6] 6:	loadl ebx, fp+3
          [0x7] 7:	rstore ebx
          [0x8] 8:	new_class @46 // std#string
          [0x9] 9:	newstr @226 // ""
          [0xa] 10:	call @558 // <std#string.string(var[])>
          [0xb] 11:	call @795 // <app#ErrorManager.createNewError(app#CompilerError,var,var,std#string)>
          [0xc] 12:	ret

func:@797 [app#ErrorManager.createNewWarning] in file: lib/support//bootstrap//frontend//ErrorManager.sharp:208:32: note:  
		    public def createNewWarning(CompilerError err, var line, var col, string msg) {
		                               ^


createNewWarning:
line: 208 [0x0] 0:	movg @54 // @app#ErrorManager
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 1
          [0x4] 4:	pushobj
          [0x5] 5:	call @985 // <std#Map<app#CompilerError,std#string>.get(app#CompilerError)>
          [0x6] 6:	movl 5
          [0x7] 7:	popobj
line: 209 [0x8] 8:	new_class @55 // app#ParseError
          [0x9] 9:	movi #0, ebx
          [0xb] 11:	rstore ebx
          [0xc] 12:	movl 1
          [0xd] 13:	pushobj
          [0xe] 14:	movl 5
          [0xf] 15:	pushobj
          [0x10] 16:	loadl ebx, fp+2
          [0x11] 17:	rstore ebx
          [0x12] 18:	loadl ebx, fp+3
          [0x13] 19:	rstore ebx
          [0x14] 20:	movl 4
          [0x15] 21:	pushobj
          [0x16] 22:	call @806 // <app#ParseError.ParseError(var,app#CompilerError,std#string,var,var,std#string)>
          [0x17] 23:	movl 6
          [0x18] 24:	popobj
line: 210 [0x19] 25:	movl 7
          [0x1a] 26:	del
line: 211 [0x1b] 27:	movi #0, ebx
          [0x1d] 29:	rstore ebx
          [0x1e] 30:	movl 0
          [0x1f] 31:	movn #5
          [0x20] 32:	pushobj
          [0x21] 33:	call @943 // <std#ArrayList<app#ParseError>.size()>
          [0x22] 34:	loadval ebx
          [0x23] 35:	loadval ecx
          [0x24] 36:	gt ebx, ecx
          [0x25] 37:	movr ebx, cmt
          [0x26] 38:	movi #48, adx
          [0x28] 40:	ifne
line: 212 [0x29] 41:	movl 0
          [0x2a] 42:	movn #5
          [0x2b] 43:	pushobj
          [0x2c] 44:	call @947 // <std#ArrayList<app#ParseError>.last()>
          [0x2d] 45:	movl 7
          [0x2e] 46:	popobj
          [0x2f] 47:	goto @68
line: 214 [0x30] 48:	movl 0
          [0x31] 49:	movn #10
          [0x32] 50:	movi #0, adx
          [0x34] 52:	chklen adx
          [0x35] 53:	iaload_2 cmt, adx
          [0x36] 54:	loadpc_2 adx, pc+8 // adx = 62
          [0x37] 55:	ifne
          [0x38] 56:	movl 0
          [0x39] 57:	movn #8
          [0x3a] 58:	pushobj
          [0x3b] 59:	movi #1, cmt
          [0x3d] 61:	skpe 4 // pc = 65
          [0x3e] 62:	movl 0
          [0x3f] 63:	movn #7
          [0x40] 64:	pushobj
          [0x41] 65:	movl 7
          [0x42] 66:	popobj
          [0x43] 67:	nop
          [0x44] 68:	nop
line: 216 [0x45] 69:	movl 0
          [0x46] 70:	movn #5
          [0x47] 71:	pushobj
          [0x48] 72:	call @943 // <std#ArrayList<app#ParseError>.size()>
          [0x49] 73:	movi #0, ebx
          [0x4b] 75:	movr egx, ebx
          [0x4c] 76:	loadval ebx
          [0x4d] 77:	test ebx, egx
          [0x4e] 78:	movr ebx, cmt
          [0x4f] 79:	movr ebx, cmt
          [0x50] 80:	skpe 12 // pc = 92
          [0x51] 81:	movl 0
          [0x52] 82:	pushobj
          [0x53] 83:	pushnil 
          [0x54] 84:	movl 7
          [0x55] 85:	pushobj
          [0x56] 86:	movl 6
          [0x57] 87:	pushobj
          [0x58] 88:	call @799 // <app#ErrorManager.shouldReportWarning(app#Token,app#ParseError,app#ParseError)>
          [0x59] 89:	loadval ebx
          [0x5a] 90:	cmp ebx, 1
          [0x5b] 91:	movr ebx, cmt
          [0x5c] 92:	movr cmt, ebx
          [0x5d] 93:	movi #119, adx
          [0x5f] 95:	ifne
line: 217 [0x60] 96:	movl 0
          [0x61] 97:	movn #11
          [0x62] 98:	movi #0, adx
          [0x64] 100:	chklen adx
          [0x65] 101:	iaload_2 cmt, adx
          [0x66] 102:	movi #111, adx
          [0x68] 104:	ifne
line: 218 [0x69] 105:	movl 0
          [0x6a] 106:	pushobj
          [0x6b] 107:	movl 6
          [0x6c] 108:	pushobj
          [0x6d] 109:	call @785 // <app#ErrorManager.printError(app#ParseError)>
          [0x6e] 110:	nop
          [0x6f] 111:	nop
line: 220 [0x70] 112:	movl 0
          [0x71] 113:	movn #5
          [0x72] 114:	pushobj
          [0x73] 115:	movl 6
          [0x74] 116:	pushobj
          [0x75] 117:	call @952 // <std#ArrayList<app#ParseError>.add(app#ParseError)>
          [0x76] 118:	nop
          [0x77] 119:	nop
          [0x78] 120:	ret

func:@798 [app#ErrorManager.shouldReport] in file: lib/support//bootstrap//frontend//ErrorManager.sharp:225:21: note:  
		    def shouldReport(Token token, ParseError lastErr, ParseError newErr) : var
		                    ^


shouldReport:
line: 226 [0x0] 0:	movl 2
          [0x1] 1:	movn #1
          [0x2] 2:	pushobj
          [0x3] 3:	movl 3
          [0x4] 4:	movn #1
          [0x5] 5:	pushobj
          [0x6] 6:	call @575 // <std#string.$operator!=(std#string)>
          [0x7] 7:	loadval ebx
          [0x8] 8:	cmp ebx, 1
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	skne 76 // pc = 86
          [0xb] 11:	istore 1
          [0xc] 12:	movl 2
          [0xd] 13:	movn #2
          [0xe] 14:	movi #0, adx
          [0x10] 16:	iaload_2 ebx, adx
          [0x11] 17:	rstore ebx
          [0x12] 18:	movl 3
          [0x13] 19:	movn #2
          [0x14] 20:	movi #0, adx
          [0x16] 22:	chklen adx
          [0x17] 23:	iaload_2 egx, adx
          [0x18] 24:	loadval ebx
          [0x19] 25:	test ebx, egx
          [0x1a] 26:	movr ebx, cmt
          [0x1b] 27:	cmp ebx, 1
          [0x1c] 28:	movr ebx, cmt
          [0x1d] 29:	skne 20 // pc = 49
          [0x1e] 30:	istore 1
          [0x1f] 31:	movl 2
          [0x20] 32:	movn #3
          [0x21] 33:	movi #0, adx
          [0x23] 35:	iaload_2 ebx, adx
          [0x24] 36:	rstore ebx
          [0x25] 37:	movl 3
          [0x26] 38:	movn #3
          [0x27] 39:	movi #0, adx
          [0x29] 41:	chklen adx
          [0x2a] 42:	iaload_2 egx, adx
          [0x2b] 43:	loadval ebx
          [0x2c] 44:	test ebx, egx
          [0x2d] 45:	movr ebx, cmt
          [0x2e] 46:	loadval ecx
          [0x2f] 47:	and ecx, ebx
          [0x30] 48:	movr ebx, cmt
          [0x31] 49:	not ebx, ebx
          [0x32] 50:	loadval ecx
          [0x33] 51:	and ecx, ebx
          [0x34] 52:	movr ebx, cmt
          [0x35] 53:	cmp ebx, 1
          [0x36] 54:	movr ebx, cmt
          [0x37] 55:	skne 31 // pc = 86
          [0x38] 56:	istore 1
          [0x39] 57:	movl 2
          [0x3a] 58:	movn #1
          [0x3b] 59:	pushobj
          [0x3c] 60:	movl 3
          [0x3d] 61:	movn #1
          [0x3e] 62:	pushobj
          [0x3f] 63:	call @590 // <std#string.find(std#string)>
          [0x40] 64:	loadval ebx
          [0x41] 65:	not ebx, ebx
          [0x42] 66:	loadval ecx
          [0x43] 67:	and ecx, ebx
          [0x44] 68:	movr ebx, cmt
          [0x45] 69:	cmp ebx, 1
          [0x46] 70:	movr ebx, cmt
          [0x47] 71:	skne 15 // pc = 86
          [0x48] 72:	istore 1
          [0x49] 73:	movl 0
          [0x4a] 74:	pushobj
          [0x4b] 75:	movl 0
          [0x4c] 76:	movn #3
          [0x4d] 77:	pushobj
          [0x4e] 78:	movl 3
          [0x4f] 79:	pushobj
          [0x50] 80:	call @800 // <app#ErrorManager.hasError(std#ArrayList<app#ParseError>,app#ParseError)>
          [0x51] 81:	loadval ebx
          [0x52] 82:	not ebx, ebx
          [0x53] 83:	loadval ecx
          [0x54] 84:	and ecx, ebx
          [0x55] 85:	movr ebx, cmt
          [0x56] 86:	movr cmt, ebx
          [0x57] 87:	movi #166, adx
          [0x59] 89:	ifne
line: 229 [0x5a] 90:	movl 1
          [0x5b] 91:	checknull
          [0x5c] 92:	not cmt, cmt
          [0x5d] 93:	movr ebx, cmt
          [0x5e] 94:	cmp ebx, 1
          [0x5f] 95:	movr ebx, cmt
          [0x60] 96:	skne 48 // pc = 144
          [0x61] 97:	istore 1
          [0x62] 98:	movl 1
          [0x63] 99:	pushobj
          [0x64] 100:	movg @70 // @app#TokenId
          [0x65] 101:	movn #16
          [0x66] 102:	pushobj
          [0x67] 103:	call @858 // <app#Token.$operator==(app#TokenId)>
          [0x68] 104:	loadval cmt
          [0x69] 105:	movr ebx, cmt
          [0x6a] 106:	skpe 34 // pc = 140
          [0x6b] 107:	movl 1
          [0x6c] 108:	pushobj
          [0x6d] 109:	movg @70 // @app#TokenId
          [0x6e] 110:	movn #10
          [0x6f] 111:	pushobj
          [0x70] 112:	call @858 // <app#Token.$operator==(app#TokenId)>
          [0x71] 113:	loadval ebx
          [0x72] 114:	cmp ebx, 1
          [0x73] 115:	movr ebx, cmt
          [0x74] 116:	movr cmt, ebx
          [0x75] 117:	movr ebx, cmt
          [0x76] 118:	skpe 22 // pc = 140
          [0x77] 119:	movl 1
          [0x78] 120:	pushobj
          [0x79] 121:	movg @70 // @app#TokenId
          [0x7a] 122:	movn #9
          [0x7b] 123:	pushobj
          [0x7c] 124:	call @858 // <app#Token.$operator==(app#TokenId)>
          [0x7d] 125:	loadval ebx
          [0x7e] 126:	cmp ebx, 1
          [0x7f] 127:	movr ebx, cmt
          [0x80] 128:	movr cmt, ebx
          [0x81] 129:	movr ebx, cmt
          [0x82] 130:	skpe 10 // pc = 140
          [0x83] 131:	movl 1
          [0x84] 132:	pushobj
          [0x85] 133:	movg @70 // @app#TokenId
          [0x86] 134:	movn #6
          [0x87] 135:	pushobj
          [0x88] 136:	call @858 // <app#Token.$operator==(app#TokenId)>
          [0x89] 137:	loadval ebx
          [0x8a] 138:	cmp ebx, 1
          [0x8b] 139:	movr ebx, cmt
          [0x8c] 140:	not ebx, ebx
          [0x8d] 141:	loadval ecx
          [0x8e] 142:	and ecx, ebx
          [0x8f] 143:	movr ebx, cmt
          [0x90] 144:	movr cmt, ebx
          [0x91] 145:	movi #160, adx
          [0x93] 147:	ifne
line: 231 [0x94] 148:	movl 2
          [0x95] 149:	movn #1
          [0x96] 150:	pushobj
          [0x97] 151:	movl 1
          [0x98] 152:	pushobj
          [0x99] 153:	call @861 // <app#Token.getToken()>
          [0x9a] 154:	call @590 // <std#string.find(std#string)>
          [0x9b] 155:	loadval ebx
          [0x9c] 156:	not ebx, ebx
          [0x9d] 157:	return_val ebx
          [0x9e] 158:	ret
          [0x9f] 159:	nop
          [0xa0] 160:	nop
line: 234 [0xa1] 161:	movi #1, ebx
          [0xa3] 163:	return_val ebx
          [0xa4] 164:	ret
          [0xa5] 165:	nop
          [0xa6] 166:	nop
          [0xa7] 167:	movi #0, ebx
          [0xa9] 169:	return_val ebx
          [0xaa] 170:	ret

func:@799 [app#ErrorManager.shouldReportWarning] in file: lib/support//bootstrap//frontend//ErrorManager.sharp:239:28: note:  
		    def shouldReportWarning(Token token, ParseError lastErr, ParseError newErr) : var
		                           ^


shouldReportWarning:
line: 240 [0x0] 0:	movl 2
          [0x1] 1:	movn #1
          [0x2] 2:	pushobj
          [0x3] 3:	movl 3
          [0x4] 4:	movn #1
          [0x5] 5:	pushobj
          [0x6] 6:	call @575 // <std#string.$operator!=(std#string)>
          [0x7] 7:	loadval ebx
          [0x8] 8:	cmp ebx, 1
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	skne 59 // pc = 69
          [0xb] 11:	istore 1
          [0xc] 12:	movl 2
          [0xd] 13:	movn #2
          [0xe] 14:	movi #0, adx
          [0x10] 16:	iaload_2 ebx, adx
          [0x11] 17:	rstore ebx
          [0x12] 18:	movl 3
          [0x13] 19:	movn #2
          [0x14] 20:	movi #0, adx
          [0x16] 22:	chklen adx
          [0x17] 23:	iaload_2 egx, adx
          [0x18] 24:	loadval ebx
          [0x19] 25:	test ebx, egx
          [0x1a] 26:	movr ebx, cmt
          [0x1b] 27:	cmp ebx, 1
          [0x1c] 28:	movr ebx, cmt
          [0x1d] 29:	skne 20 // pc = 49
          [0x1e] 30:	istore 1
          [0x1f] 31:	movl 2
          [0x20] 32:	movn #3
          [0x21] 33:	movi #0, adx
          [0x23] 35:	iaload_2 ebx, adx
          [0x24] 36:	rstore ebx
          [0x25] 37:	movl 3
          [0x26] 38:	movn #3
          [0x27] 39:	movi #0, adx
          [0x29] 41:	chklen adx
          [0x2a] 42:	iaload_2 egx, adx
          [0x2b] 43:	loadval ebx
          [0x2c] 44:	test ebx, egx
          [0x2d] 45:	movr ebx, cmt
          [0x2e] 46:	loadval ecx
          [0x2f] 47:	and ecx, ebx
          [0x30] 48:	movr ebx, cmt
          [0x31] 49:	not ebx, ebx
          [0x32] 50:	loadval ecx
          [0x33] 51:	and ecx, ebx
          [0x34] 52:	movr ebx, cmt
          [0x35] 53:	cmp ebx, 1
          [0x36] 54:	movr ebx, cmt
          [0x37] 55:	skne 14 // pc = 69
          [0x38] 56:	istore 1
          [0x39] 57:	movl 2
          [0x3a] 58:	movn #1
          [0x3b] 59:	pushobj
          [0x3c] 60:	movl 3
          [0x3d] 61:	movn #1
          [0x3e] 62:	pushobj
          [0x3f] 63:	call @590 // <std#string.find(std#string)>
          [0x40] 64:	loadval ebx
          [0x41] 65:	not ebx, ebx
          [0x42] 66:	loadval ecx
          [0x43] 67:	and ecx, ebx
          [0x44] 68:	movr ebx, cmt
          [0x45] 69:	movr cmt, ebx
          [0x46] 70:	movi #149, adx
          [0x48] 72:	ifne
line: 243 [0x49] 73:	movl 1
          [0x4a] 74:	checknull
          [0x4b] 75:	not cmt, cmt
          [0x4c] 76:	movr ebx, cmt
          [0x4d] 77:	cmp ebx, 1
          [0x4e] 78:	movr ebx, cmt
          [0x4f] 79:	skne 48 // pc = 127
          [0x50] 80:	istore 1
          [0x51] 81:	movl 1
          [0x52] 82:	pushobj
          [0x53] 83:	movg @70 // @app#TokenId
          [0x54] 84:	movn #16
          [0x55] 85:	pushobj
          [0x56] 86:	call @858 // <app#Token.$operator==(app#TokenId)>
          [0x57] 87:	loadval cmt
          [0x58] 88:	movr ebx, cmt
          [0x59] 89:	skpe 34 // pc = 123
          [0x5a] 90:	movl 1
          [0x5b] 91:	pushobj
          [0x5c] 92:	movg @70 // @app#TokenId
          [0x5d] 93:	movn #10
          [0x5e] 94:	pushobj
          [0x5f] 95:	call @858 // <app#Token.$operator==(app#TokenId)>
          [0x60] 96:	loadval ebx
          [0x61] 97:	cmp ebx, 1
          [0x62] 98:	movr ebx, cmt
          [0x63] 99:	movr cmt, ebx
          [0x64] 100:	movr ebx, cmt
          [0x65] 101:	skpe 22 // pc = 123
          [0x66] 102:	movl 1
          [0x67] 103:	pushobj
          [0x68] 104:	movg @70 // @app#TokenId
          [0x69] 105:	movn #9
          [0x6a] 106:	pushobj
          [0x6b] 107:	call @858 // <app#Token.$operator==(app#TokenId)>
          [0x6c] 108:	loadval ebx
          [0x6d] 109:	cmp ebx, 1
          [0x6e] 110:	movr ebx, cmt
          [0x6f] 111:	movr cmt, ebx
          [0x70] 112:	movr ebx, cmt
          [0x71] 113:	skpe 10 // pc = 123
          [0x72] 114:	movl 1
          [0x73] 115:	pushobj
          [0x74] 116:	movg @70 // @app#TokenId
          [0x75] 117:	movn #6
          [0x76] 118:	pushobj
          [0x77] 119:	call @858 // <app#Token.$operator==(app#TokenId)>
          [0x78] 120:	loadval ebx
          [0x79] 121:	cmp ebx, 1
          [0x7a] 122:	movr ebx, cmt
          [0x7b] 123:	not ebx, ebx
          [0x7c] 124:	loadval ecx
          [0x7d] 125:	and ecx, ebx
          [0x7e] 126:	movr ebx, cmt
          [0x7f] 127:	movr cmt, ebx
          [0x80] 128:	movi #143, adx
          [0x82] 130:	ifne
line: 245 [0x83] 131:	movl 2
          [0x84] 132:	movn #1
          [0x85] 133:	pushobj
          [0x86] 134:	movl 1
          [0x87] 135:	pushobj
          [0x88] 136:	call @861 // <app#Token.getToken()>
          [0x89] 137:	call @590 // <std#string.find(std#string)>
          [0x8a] 138:	loadval ebx
          [0x8b] 139:	not ebx, ebx
          [0x8c] 140:	return_val ebx
          [0x8d] 141:	ret
          [0x8e] 142:	nop
          [0x8f] 143:	nop
line: 248 [0x90] 144:	movi #1, ebx
          [0x92] 146:	return_val ebx
          [0x93] 147:	ret
          [0x94] 148:	nop
          [0x95] 149:	nop
          [0x96] 150:	movi #0, ebx
          [0x98] 152:	return_val ebx
          [0x99] 153:	ret

func:@800 [app#ErrorManager.hasError] in file: lib/support//bootstrap//frontend//ErrorManager.sharp:253:17: note:  
		    def hasError(ArrayList<ParseError> errs, ParseError err) : var {
		                ^


hasError:
line: 253 [0x0] 0:	movl 1
          [0x1] 1:	pushobj
          [0x2] 2:	call @945 // <std#ArrayList<app#ParseError>.toArray()>
          [0x3] 3:	movl 3
          [0x4] 4:	popobj
line: 254 [0x5] 5:	movi #0, ebx
          [0x7] 7:	rstore ebx
          [0x8] 8:	movl 3
          [0x9] 9:	smov ebx, sp+0
          [0xa] 10:	sizeof egx
          [0xb] 11:	lt ebx, egx
          [0xc] 12:	movi #40, adx
          [0xe] 14:	ifne
          [0xf] 15:	movnd ebx
          [0x10] 16:	pushobj
          [0x11] 17:	movl 4
          [0x12] 18:	popobj
line: 255 [0x13] 19:	movl 4
          [0x14] 20:	movn #1
          [0x15] 21:	pushobj
          [0x16] 22:	movl 2
          [0x17] 23:	movn #1
          [0x18] 24:	pushobj
          [0x19] 25:	call @574 // <std#string.$operator==(std#string)>
          [0x1a] 26:	loadval cmt
          [0x1b] 27:	movi #35, adx
          [0x1d] 29:	ifne
line: 256 [0x1e] 30:	movi #1, ebx
          [0x20] 32:	return_val ebx
          [0x21] 33:	ret
          [0x22] 34:	nop
          [0x23] 35:	nop
          [0x24] 36:	smov ebx, sp+0
          [0x25] 37:	inc ebx
          [0x26] 38:	smovr ebx, sp+0
          [0x27] 39:	goto @8
          [0x28] 40:	pop
line: 259 [0x29] 41:	movi #0, ebx
          [0x2b] 43:	return_val ebx
          [0x2c] 44:	ret

func:@801 [app#ErrorManager.createNewError] in file: lib/support//bootstrap//frontend//ErrorManager.sharp:264:30: note:  
		    public def createNewError(CompilerError err, Ast ast, string msg) {
		                             ^


createNewError:
line: 264 [0x0] 0:	movg @54 // @app#ErrorManager
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 1
          [0x4] 4:	pushobj
          [0x5] 5:	call @985 // <std#Map<app#CompilerError,std#string>.get(app#CompilerError)>
          [0x6] 6:	movl 4
          [0x7] 7:	popobj
line: 265 [0x8] 8:	new_class @55 // app#ParseError
          [0x9] 9:	movi #0, ebx
          [0xb] 11:	rstore ebx
          [0xc] 12:	movl 1
          [0xd] 13:	pushobj
          [0xe] 14:	movl 4
          [0xf] 15:	pushobj
          [0x10] 16:	movl 2
          [0x11] 17:	movn #0
          [0x12] 18:	movi #0, adx
          [0x14] 20:	iaload_2 ebx, adx
          [0x15] 21:	rstore ebx
          [0x16] 22:	movl 2
          [0x17] 23:	movn #1
          [0x18] 24:	movi #0, adx
          [0x1a] 26:	iaload_2 ebx, adx
          [0x1b] 27:	rstore ebx
          [0x1c] 28:	movl 3
          [0x1d] 29:	pushobj
          [0x1e] 30:	call @806 // <app#ParseError.ParseError(var,app#CompilerError,std#string,var,var,std#string)>
          [0x1f] 31:	movl 5
          [0x20] 32:	popobj
line: 266 [0x21] 33:	movl 0
          [0x22] 34:	movn #10
          [0x23] 35:	movi #0, adx
          [0x25] 37:	chklen adx
          [0x26] 38:	iaload_2 cmt, adx
          [0x27] 39:	loadpc_2 adx, pc+8 // adx = 47
          [0x28] 40:	ifne
          [0x29] 41:	movl 0
          [0x2a] 42:	movn #8
          [0x2b] 43:	pushobj
          [0x2c] 44:	movi #1, cmt
          [0x2e] 46:	skpe 4 // pc = 50
          [0x2f] 47:	movl 0
          [0x30] 48:	movn #7
          [0x31] 49:	pushobj
          [0x32] 50:	movl 6
          [0x33] 51:	popobj
line: 268 [0x34] 52:	movl 0
          [0x35] 53:	movn #10
          [0x36] 54:	movi #0, adx
          [0x38] 56:	chklen adx
          [0x39] 57:	iaload_2 cmt, adx
          [0x3a] 58:	movi #75, adx
          [0x3c] 60:	ifne
line: 269 [0x3d] 61:	movl 5
          [0x3e] 62:	pushobj
          [0x3f] 63:	movl 0
          [0x40] 64:	movn #8
          [0x41] 65:	popobj
line: 270 [0x42] 66:	movl 0
          [0x43] 67:	movn #6
          [0x44] 68:	pushobj
          [0x45] 69:	call @1019 // <std#ArrayList<std#ArrayList<app#ParseError>>.last()>
          [0x46] 70:	movl 5
          [0x47] 71:	pushobj
          [0x48] 72:	call @952 // <std#ArrayList<app#ParseError>.add(app#ParseError)>
line: 271 [0x49] 73:	ret
          [0x4a] 74:	goto @148
          [0x4b] 75:	movl 0
          [0x4c] 76:	movn #11
          [0x4d] 77:	movi #0, adx
          [0x4f] 79:	chklen adx
          [0x50] 80:	iaload_2 cmt, adx
          [0x51] 81:	movi #90, adx
          [0x53] 83:	ifne
line: 273 [0x54] 84:	movl 0
          [0x55] 85:	pushobj
          [0x56] 86:	movl 5
          [0x57] 87:	pushobj
          [0x58] 88:	call @785 // <app#ErrorManager.printError(app#ParseError)>
          [0x59] 89:	goto @148
          [0x5a] 90:	movl 0
          [0x5b] 91:	movn #12
          [0x5c] 92:	movi #0, adx
          [0x5e] 94:	chklen adx
          [0x5f] 95:	iaload_2 cmt, adx
          [0x60] 96:	movr ebx, cmt
          [0x61] 97:	skpe 12 // pc = 109
          [0x62] 98:	movl 0
          [0x63] 99:	pushobj
          [0x64] 100:	pushnil 
          [0x65] 101:	movl 6
          [0x66] 102:	pushobj
          [0x67] 103:	movl 5
          [0x68] 104:	pushobj
          [0x69] 105:	call @798 // <app#ErrorManager.shouldReport(app#Token,app#ParseError,app#ParseError)>
          [0x6a] 106:	loadval ebx
          [0x6b] 107:	cmp ebx, 1
          [0x6c] 108:	movr ebx, cmt
          [0x6d] 109:	movr cmt, ebx
          [0x6e] 110:	movi #141, adx
          [0x70] 112:	ifne
line: 275 [0x71] 113:	movi #1, ebx
          [0x73] 115:	nop
          [0x74] 116:	rstore ebx
          [0x75] 117:	movl 0
          [0x76] 118:	movn #9
          [0x77] 119:	movi #0, adx
          [0x79] 121:	loadval ecx
          [0x7a] 122:	rmov adx, ecx
line: 276 [0x7b] 123:	movl 0
          [0x7c] 124:	movn #3
          [0x7d] 125:	pushobj
          [0x7e] 126:	movl 5
          [0x7f] 127:	pushobj
          [0x80] 128:	call @952 // <std#ArrayList<app#ParseError>.add(app#ParseError)>
line: 277 [0x81] 129:	movl 0
          [0x82] 130:	movn #4
          [0x83] 131:	pushobj
          [0x84] 132:	movl 5
          [0x85] 133:	pushobj
          [0x86] 134:	call @952 // <std#ArrayList<app#ParseError>.add(app#ParseError)>
line: 278 [0x87] 135:	movl 5
          [0x88] 136:	pushobj
          [0x89] 137:	movl 0
          [0x8a] 138:	movn #7
          [0x8b] 139:	popobj
          [0x8c] 140:	goto @148
line: 280 [0x8d] 141:	movl 0
          [0x8e] 142:	movn #4
          [0x8f] 143:	pushobj
          [0x90] 144:	movl 5
          [0x91] 145:	pushobj
          [0x92] 146:	call @952 // <std#ArrayList<app#ParseError>.add(app#ParseError)>
          [0x93] 147:	nop
          [0x94] 148:	nop
          [0x95] 149:	ret

func:@802 [app#ErrorManager.createNewWarning] in file: lib/support//bootstrap//frontend//ErrorManager.sharp:285:32: note:  
		    public def createNewWarning(CompilerError err, Ast ast, string msg) {
		                               ^


createNewWarning:
line: 285 [0x0] 0:	movg @54 // @app#ErrorManager
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 1
          [0x4] 4:	pushobj
          [0x5] 5:	call @985 // <std#Map<app#CompilerError,std#string>.get(app#CompilerError)>
          [0x6] 6:	movl 4
          [0x7] 7:	popobj
line: 286 [0x8] 8:	new_class @55 // app#ParseError
          [0x9] 9:	movi #0, ebx
          [0xb] 11:	rstore ebx
          [0xc] 12:	movl 1
          [0xd] 13:	pushobj
          [0xe] 14:	movl 4
          [0xf] 15:	pushobj
          [0x10] 16:	movl 2
          [0x11] 17:	movn #0
          [0x12] 18:	movi #0, adx
          [0x14] 20:	iaload_2 ebx, adx
          [0x15] 21:	rstore ebx
          [0x16] 22:	movl 2
          [0x17] 23:	movn #1
          [0x18] 24:	movi #0, adx
          [0x1a] 26:	iaload_2 ebx, adx
          [0x1b] 27:	rstore ebx
          [0x1c] 28:	movl 3
          [0x1d] 29:	pushobj
          [0x1e] 30:	call @806 // <app#ParseError.ParseError(var,app#CompilerError,std#string,var,var,std#string)>
          [0x1f] 31:	movl 5
          [0x20] 32:	popobj
line: 287 [0x21] 33:	movl 6
          [0x22] 34:	del
line: 288 [0x23] 35:	movi #0, ebx
          [0x25] 37:	rstore ebx
          [0x26] 38:	movl 0
          [0x27] 39:	movn #5
          [0x28] 40:	pushobj
          [0x29] 41:	call @943 // <std#ArrayList<app#ParseError>.size()>
          [0x2a] 42:	loadval ebx
          [0x2b] 43:	loadval ecx
          [0x2c] 44:	gt ebx, ecx
          [0x2d] 45:	movr ebx, cmt
          [0x2e] 46:	movi #56, adx
          [0x30] 48:	ifne
line: 289 [0x31] 49:	movl 0
          [0x32] 50:	movn #5
          [0x33] 51:	pushobj
          [0x34] 52:	call @947 // <std#ArrayList<app#ParseError>.last()>
          [0x35] 53:	movl 6
          [0x36] 54:	popobj
          [0x37] 55:	goto @76
line: 291 [0x38] 56:	movl 0
          [0x39] 57:	movn #10
          [0x3a] 58:	movi #0, adx
          [0x3c] 60:	chklen adx
          [0x3d] 61:	iaload_2 cmt, adx
          [0x3e] 62:	loadpc_2 adx, pc+8 // adx = 70
          [0x3f] 63:	ifne
          [0x40] 64:	movl 0
          [0x41] 65:	movn #8
          [0x42] 66:	pushobj
          [0x43] 67:	movi #1, cmt
          [0x45] 69:	skpe 4 // pc = 73
          [0x46] 70:	movl 0
          [0x47] 71:	movn #7
          [0x48] 72:	pushobj
          [0x49] 73:	movl 6
          [0x4a] 74:	popobj
          [0x4b] 75:	nop
          [0x4c] 76:	nop
line: 293 [0x4d] 77:	movl 0
          [0x4e] 78:	movn #5
          [0x4f] 79:	pushobj
          [0x50] 80:	call @943 // <std#ArrayList<app#ParseError>.size()>
          [0x51] 81:	movi #0, ebx
          [0x53] 83:	movr egx, ebx
          [0x54] 84:	loadval ebx
          [0x55] 85:	test ebx, egx
          [0x56] 86:	movr ebx, cmt
          [0x57] 87:	movr ebx, cmt
          [0x58] 88:	skpe 12 // pc = 100
          [0x59] 89:	movl 0
          [0x5a] 90:	pushobj
          [0x5b] 91:	pushnil 
          [0x5c] 92:	movl 6
          [0x5d] 93:	pushobj
          [0x5e] 94:	movl 5
          [0x5f] 95:	pushobj
          [0x60] 96:	call @799 // <app#ErrorManager.shouldReportWarning(app#Token,app#ParseError,app#ParseError)>
          [0x61] 97:	loadval ebx
          [0x62] 98:	cmp ebx, 1
          [0x63] 99:	movr ebx, cmt
          [0x64] 100:	movr cmt, ebx
          [0x65] 101:	movi #127, adx
          [0x67] 103:	ifne
line: 294 [0x68] 104:	movl 0
          [0x69] 105:	movn #11
          [0x6a] 106:	movi #0, adx
          [0x6c] 108:	chklen adx
          [0x6d] 109:	iaload_2 cmt, adx
          [0x6e] 110:	movi #119, adx
          [0x70] 112:	ifne
line: 295 [0x71] 113:	movl 0
          [0x72] 114:	pushobj
          [0x73] 115:	movl 5
          [0x74] 116:	pushobj
          [0x75] 117:	call @785 // <app#ErrorManager.printError(app#ParseError)>
          [0x76] 118:	nop
          [0x77] 119:	nop
line: 297 [0x78] 120:	movl 0
          [0x79] 121:	movn #5
          [0x7a] 122:	pushobj
          [0x7b] 123:	movl 5
          [0x7c] 124:	pushobj
          [0x7d] 125:	call @952 // <std#ArrayList<app#ParseError>.add(app#ParseError)>
          [0x7e] 126:	nop
          [0x7f] 127:	nop
          [0x80] 128:	ret

func:@803 [app#ErrorManager.initErrors] in file: lib/support//bootstrap//frontend//ErrorManager.sharp:302:33: note:  
		    public static def initErrors() {
		                                ^


initErrors:
line: 302 [0x0] 0:	movg @54 // @app#ErrorManager
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movg @68 // @app#CompilerError
          [0x4] 4:	movn #3
          [0x5] 5:	pushobj
          [0x6] 6:	new_class @46 // std#string
          [0x7] 7:	newstr @311 // "unexpected symbol"
          [0x8] 8:	call @558 // <std#string.string(var[])>
          [0x9] 9:	call @986 // <std#Map<app#CompilerError,std#string>.put(app#CompilerError,std#string)>
          [0xa] 10:	pop
line: 304 [0xb] 11:	movg @54 // @app#ErrorManager
          [0xc] 12:	movn #0
          [0xd] 13:	pushobj
          [0xe] 14:	movg @68 // @app#CompilerError
          [0xf] 15:	movn #4
          [0x10] 16:	pushobj
          [0x11] 17:	new_class @46 // std#string
          [0x12] 18:	newstr @312 // "illegal number format mismatch"
          [0x13] 19:	call @558 // <std#string.string(var[])>
          [0x14] 20:	call @986 // <std#Map<app#CompilerError,std#string>.put(app#CompilerError,std#string)>
          [0x15] 21:	pop
line: 306 [0x16] 22:	movg @54 // @app#ErrorManager
          [0x17] 23:	movn #0
          [0x18] 24:	pushobj
          [0x19] 25:	movg @68 // @app#CompilerError
          [0x1a] 26:	movn #5
          [0x1b] 27:	pushobj
          [0x1c] 28:	new_class @46 // std#string
          [0x1d] 29:	newstr @313 // "unexpected end of file"
          [0x1e] 30:	call @558 // <std#string.string(var[])>
          [0x1f] 31:	call @986 // <std#Map<app#CompilerError,std#string>.put(app#CompilerError,std#string)>
          [0x20] 32:	pop
line: 308 [0x21] 33:	movg @54 // @app#ErrorManager
          [0x22] 34:	movn #0
          [0x23] 35:	pushobj
          [0x24] 36:	movg @68 // @app#CompilerError
          [0x25] 37:	movn #6
          [0x26] 38:	pushobj
          [0x27] 39:	new_class @46 // std#string
          [0x28] 40:	newstr @314 // "expected string literal before end ..."
          [0x29] 41:	call @558 // <std#string.string(var[])>
          [0x2a] 42:	call @986 // <std#Map<app#CompilerError,std#string>.put(app#CompilerError,std#string)>
          [0x2b] 43:	pop
line: 310 [0x2c] 44:	movg @54 // @app#ErrorManager
          [0x2d] 45:	movn #0
          [0x2e] 46:	pushobj
          [0x2f] 47:	movg @68 // @app#CompilerError
          [0x30] 48:	movn #7
          [0x31] 49:	pushobj
          [0x32] 50:	new_class @46 // std#string
          [0x33] 51:	newstr @315 // "illegal string format"
          [0x34] 52:	call @558 // <std#string.string(var[])>
          [0x35] 53:	call @986 // <std#Map<app#CompilerError,std#string>.put(app#CompilerError,std#string)>
          [0x36] 54:	pop
line: 312 [0x37] 55:	movg @54 // @app#ErrorManager
          [0x38] 56:	movn #0
          [0x39] 57:	pushobj
          [0x3a] 58:	movg @68 // @app#CompilerError
          [0x3b] 59:	movn #8
          [0x3c] 60:	pushobj
          [0x3d] 61:	new_class @46 // std#string
          [0x3e] 62:	newstr @316 // "expected character literal before e..."
          [0x3f] 63:	call @558 // <std#string.string(var[])>
          [0x40] 64:	call @986 // <std#Map<app#CompilerError,std#string>.put(app#CompilerError,std#string)>
          [0x41] 65:	pop
line: 314 [0x42] 66:	movg @54 // @app#ErrorManager
          [0x43] 67:	movn #0
          [0x44] 68:	pushobj
          [0x45] 69:	movg @68 // @app#CompilerError
          [0x46] 70:	movn #9
          [0x47] 71:	pushobj
          [0x48] 72:	new_class @46 // std#string
          [0x49] 73:	newstr @317 // "illegal character literal format"
          [0x4a] 74:	call @558 // <std#string.string(var[])>
          [0x4b] 75:	call @986 // <std#Map<app#CompilerError,std#string>.put(app#CompilerError,std#string)>
          [0x4c] 76:	pop
line: 316 [0x4d] 77:	movg @54 // @app#ErrorManager
          [0x4e] 78:	movn #0
          [0x4f] 79:	pushobj
          [0x50] 80:	movg @68 // @app#CompilerError
          [0x51] 81:	movn #10
          [0x52] 82:	pushobj
          [0x53] 83:	new_class @46 // std#string
          [0x54] 84:	newstr @226 // ""
          [0x55] 85:	call @558 // <std#string.string(var[])>
          [0x56] 86:	call @986 // <std#Map<app#CompilerError,std#string>.put(app#CompilerError,std#string)>
          [0x57] 87:	pop
line: 318 [0x58] 88:	movg @54 // @app#ErrorManager
          [0x59] 89:	movn #0
          [0x5a] 90:	pushobj
          [0x5b] 91:	movg @68 // @app#CompilerError
          [0x5c] 92:	movn #11
          [0x5d] 93:	pushobj
          [0x5e] 94:	new_class @46 // std#string
          [0x5f] 95:	newstr @318 // "illegal specification of access spe..."
          [0x60] 96:	call @558 // <std#string.string(var[])>
          [0x61] 97:	call @986 // <std#Map<app#CompilerError,std#string>.put(app#CompilerError,std#string)>
          [0x62] 98:	pop
line: 320 [0x63] 99:	movg @54 // @app#ErrorManager
          [0x64] 100:	movn #0
          [0x65] 101:	pushobj
          [0x66] 102:	movg @68 // @app#CompilerError
          [0x67] 103:	movn #12
          [0x68] 104:	pushobj
          [0x69] 105:	new_class @46 // std#string
          [0x6a] 106:	newstr @319 // "illegal symbol mismatch, unexpected..."
          [0x6b] 107:	call @558 // <std#string.string(var[])>
          [0x6c] 108:	call @986 // <std#Map<app#CompilerError,std#string>.put(app#CompilerError,std#string)>
          [0x6d] 109:	pop
line: 322 [0x6e] 110:	movg @54 // @app#ErrorManager
          [0x6f] 111:	movn #0
          [0x70] 112:	pushobj
          [0x71] 113:	movg @68 // @app#CompilerError
          [0x72] 114:	movn #13
          [0x73] 115:	pushobj
          [0x74] 116:	new_class @46 // std#string
          [0x75] 117:	newstr @320 // "missing bracket"
          [0x76] 118:	call @558 // <std#string.string(var[])>
          [0x77] 119:	call @986 // <std#Map<app#CompilerError,std#string>.put(app#CompilerError,std#string)>
          [0x78] 120:	pop
line: 324 [0x79] 121:	movg @54 // @app#ErrorManager
          [0x7a] 122:	movn #0
          [0x7b] 123:	pushobj
          [0x7c] 124:	movg @68 // @app#CompilerError
          [0x7d] 125:	movn #14
          [0x7e] 126:	pushobj
          [0x7f] 127:	new_class @46 // std#string
          [0x80] 128:	newstr @321 // "invalid access specifier"
          [0x81] 129:	call @558 // <std#string.string(var[])>
          [0x82] 130:	call @986 // <std#Map<app#CompilerError,std#string>.put(app#CompilerError,std#string)>
          [0x83] 131:	pop
line: 326 [0x84] 132:	movg @54 // @app#ErrorManager
          [0x85] 133:	movn #0
          [0x86] 134:	pushobj
          [0x87] 135:	movg @68 // @app#CompilerError
          [0x88] 136:	movn #15
          [0x89] 137:	pushobj
          [0x8a] 138:	new_class @46 // std#string
          [0x8b] 139:	newstr @322 // "multiple definition of"
          [0x8c] 140:	call @558 // <std#string.string(var[])>
          [0x8d] 141:	call @986 // <std#Map<app#CompilerError,std#string>.put(app#CompilerError,std#string)>
          [0x8e] 142:	pop
line: 328 [0x8f] 143:	movg @54 // @app#ErrorManager
          [0x90] 144:	movn #0
          [0x91] 145:	pushobj
          [0x92] 146:	movg @68 // @app#CompilerError
          [0x93] 147:	movn #16
          [0x94] 148:	pushobj
          [0x95] 149:	new_class @46 // std#string
          [0x96] 150:	newstr @226 // ""
          [0x97] 151:	call @558 // <std#string.string(var[])>
          [0x98] 152:	call @986 // <std#Map<app#CompilerError,std#string>.put(app#CompilerError,std#string)>
          [0x99] 153:	pop
line: 330 [0x9a] 154:	movg @54 // @app#ErrorManager
          [0x9b] 155:	movn #0
          [0x9c] 156:	pushobj
          [0x9d] 157:	movg @68 // @app#CompilerError
          [0x9e] 158:	movn #17
          [0x9f] 159:	pushobj
          [0xa0] 160:	new_class @46 // std#string
          [0xa1] 161:	newstr @323 // "duplicate class:"
          [0xa2] 162:	call @558 // <std#string.string(var[])>
          [0xa3] 163:	call @986 // <std#Map<app#CompilerError,std#string>.put(app#CompilerError,std#string)>
          [0xa4] 164:	pop
line: 332 [0xa5] 165:	movg @54 // @app#ErrorManager
          [0xa6] 166:	movn #0
          [0xa7] 167:	pushobj
          [0xa8] 168:	movg @68 // @app#CompilerError
          [0xa9] 169:	movn #18
          [0xaa] 170:	pushobj
          [0xab] 171:	new_class @46 // std#string
          [0xac] 172:	newstr @324 // "redundant token"
          [0xad] 173:	call @558 // <std#string.string(var[])>
          [0xae] 174:	call @986 // <std#Map<app#CompilerError,std#string>.put(app#CompilerError,std#string)>
          [0xaf] 175:	pop
line: 334 [0xb0] 176:	movg @54 // @app#ErrorManager
          [0xb1] 177:	movn #0
          [0xb2] 178:	pushobj
          [0xb3] 179:	movg @68 // @app#CompilerError
          [0xb4] 180:	movn #19
          [0xb5] 181:	pushobj
          [0xb6] 182:	new_class @46 // std#string
          [0xb7] 183:	newstr @325 // "internal runtime error"
          [0xb8] 184:	call @558 // <std#string.string(var[])>
          [0xb9] 185:	call @986 // <std#Map<app#CompilerError,std#string>.put(app#CompilerError,std#string)>
          [0xba] 186:	pop
line: 336 [0xbb] 187:	movg @54 // @app#ErrorManager
          [0xbc] 188:	movn #0
          [0xbd] 189:	pushobj
          [0xbe] 190:	movg @68 // @app#CompilerError
          [0xbf] 191:	movn #20
          [0xc0] 192:	pushobj
          [0xc1] 193:	new_class @46 // std#string
          [0xc2] 194:	newstr @326 // "could not resolve symbol"
          [0xc3] 195:	call @558 // <std#string.string(var[])>
          [0xc4] 196:	call @986 // <std#Map<app#CompilerError,std#string>.put(app#CompilerError,std#string)>
          [0xc5] 197:	pop
line: 338 [0xc6] 198:	movg @54 // @app#ErrorManager
          [0xc7] 199:	movn #0
          [0xc8] 200:	pushobj
          [0xc9] 201:	movg @68 // @app#CompilerError
          [0xca] 202:	movn #21
          [0xcb] 203:	pushobj
          [0xcc] 204:	new_class @46 // std#string
          [0xcd] 205:	newstr @327 // "expected refrence of type"
          [0xce] 206:	call @558 // <std#string.string(var[])>
          [0xcf] 207:	call @986 // <std#Map<app#CompilerError,std#string>.put(app#CompilerError,std#string)>
          [0xd0] 208:	pop
line: 340 [0xd1] 209:	movg @54 // @app#ErrorManager
          [0xd2] 210:	movn #0
          [0xd3] 211:	pushobj
          [0xd4] 212:	movg @68 // @app#CompilerError
          [0xd5] 213:	movn #22
          [0xd6] 214:	pushobj
          [0xd7] 215:	new_class @46 // std#string
          [0xd8] 216:	newstr @328 // "invalid cAst of type"
          [0xd9] 217:	call @558 // <std#string.string(var[])>
          [0xda] 218:	call @986 // <std#Map<app#CompilerError,std#string>.put(app#CompilerError,std#string)>
          [0xdb] 219:	pop
line: 342 [0xdc] 220:	movg @54 // @app#ErrorManager
          [0xdd] 221:	movn #0
          [0xde] 222:	pushobj
          [0xdf] 223:	movg @68 // @app#CompilerError
          [0xe0] 224:	movn #23
          [0xe1] 225:	pushobj
          [0xe2] 226:	new_class @46 // std#string
          [0xe3] 227:	newstr @329 // "redundant cAst of type"
          [0xe4] 228:	call @558 // <std#string.string(var[])>
          [0xe5] 229:	call @986 // <std#Map<app#CompilerError,std#string>.put(app#CompilerError,std#string)>
          [0xe6] 230:	pop
line: 344 [0xe7] 231:	movg @54 // @app#ErrorManager
          [0xe8] 232:	movn #0
          [0xe9] 233:	pushobj
          [0xea] 234:	movg @68 // @app#CompilerError
          [0xeb] 235:	movn #24
          [0xec] 236:	pushobj
          [0xed] 237:	new_class @46 // std#string
          [0xee] 238:	newstr @330 // "redundant self import of module"
          [0xef] 239:	call @558 // <std#string.string(var[])>
          [0xf0] 240:	call @986 // <std#Map<app#CompilerError,std#string>.put(app#CompilerError,std#string)>
          [0xf1] 241:	pop
line: 346 [0xf2] 242:	movg @54 // @app#ErrorManager
          [0xf3] 243:	movn #0
          [0xf4] 244:	pushobj
          [0xf5] 245:	movg @68 // @app#CompilerError
          [0xf6] 246:	movn #25
          [0xf7] 247:	pushobj
          [0xf8] 248:	new_class @46 // std#string
          [0xf9] 249:	newstr @331 // "unexpected token"
          [0xfa] 250:	call @558 // <std#string.string(var[])>
          [0xfb] 251:	call @986 // <std#Map<app#CompilerError,std#string>.put(app#CompilerError,std#string)>
          [0xfc] 252:	pop
line: 348 [0xfd] 253:	movg @54 // @app#ErrorManager
          [0xfe] 254:	movn #0
          [0xff] 255:	pushobj
          [0x100] 256:	movg @68 // @app#CompilerError
          [0x101] 257:	movn #26
          [0x102] 258:	pushobj
          [0x103] 259:	new_class @46 // std#string
          [0x104] 260:	newstr @332 // "invalid access of"
          [0x105] 261:	call @558 // <std#string.string(var[])>
          [0x106] 262:	call @986 // <std#Map<app#CompilerError,std#string>.put(app#CompilerError,std#string)>
          [0x107] 263:	pop
line: 350 [0x108] 264:	movg @54 // @app#ErrorManager
          [0x109] 265:	movn #0
          [0x10a] 266:	pushobj
          [0x10b] 267:	movg @68 // @app#CompilerError
          [0x10c] 268:	movn #27
          [0x10d] 269:	pushobj
          [0x10e] 270:	new_class @46 // std#string
          [0x10f] 271:	newstr @226 // ""
          [0x110] 272:	call @558 // <std#string.string(var[])>
          [0x111] 273:	call @986 // <std#Map<app#CompilerError,std#string>.put(app#CompilerError,std#string)>
          [0x112] 274:	pop
line: 352 [0x113] 275:	movg @54 // @app#ErrorManager
          [0x114] 276:	movn #0
          [0x115] 277:	pushobj
          [0x116] 278:	movg @68 // @app#CompilerError
          [0x117] 279:	movn #28
          [0x118] 280:	pushobj
          [0x119] 281:	new_class @46 // std#string
          [0x11a] 282:	newstr @333 // "invalid param of type"
          [0x11b] 283:	call @558 // <std#string.string(var[])>
          [0x11c] 284:	call @986 // <std#Map<app#CompilerError,std#string>.put(app#CompilerError,std#string)>
          [0x11d] 285:	pop
line: 354 [0x11e] 286:	movg @54 // @app#ErrorManager
          [0x11f] 287:	movn #0
          [0x120] 288:	pushobj
          [0x121] 289:	movg @68 // @app#CompilerError
          [0x122] 290:	movn #29
          [0x123] 291:	pushobj
          [0x124] 292:	new_class @46 // std#string
          [0x125] 293:	newstr @334 // "incompatible types"
          [0x126] 294:	call @558 // <std#string.string(var[])>
          [0x127] 295:	call @986 // <std#Map<app#CompilerError,std#string>.put(app#CompilerError,std#string)>
          [0x128] 296:	pop
line: 356 [0x129] 297:	movg @54 // @app#ErrorManager
          [0x12a] 298:	movn #0
          [0x12b] 299:	pushobj
          [0x12c] 300:	movg @68 // @app#CompilerError
          [0x12d] 301:	movn #30
          [0x12e] 302:	pushobj
          [0x12f] 303:	new_class @46 // std#string
          [0x130] 304:	newstr @335 // "duplicate declaration of"
          [0x131] 305:	call @558 // <std#string.string(var[])>
          [0x132] 306:	call @986 // <std#Map<app#CompilerError,std#string>.put(app#CompilerError,std#string)>
          [0x133] 307:	pop
          [0x134] 308:	ret

func:@804 [app#ParseError.ParseError] in file: lib/support//bootstrap//frontend//ErrorManager.sharp:363:21: note:  
		   public ParseError() {
		                    ^


ParseError:
        [0x0] 0:	new_class @46 // std#string
        [0x1] 1:	newstr @226 // ""
        [0x2] 2:	call @558 // <std#string.string(var[])>
        [0x3] 3:	movl 0
        [0x4] 4:	movn #1
        [0x5] 5:	popobj
line: 363 [0x6] 6:	movg @68 // @app#CompilerError
          [0x7] 7:	movn #31
          [0x8] 8:	pushobj
          [0x9] 9:	movl 0
          [0xa] 10:	movn #0
          [0xb] 11:	popobj
          [0xc] 12:	movl 0
          [0xd] 13:	returnobj
          [0xe] 14:	ret

func:@805 [app#ParseError.ParseError] in file: lib/support//bootstrap//frontend//ErrorManager.sharp:367:21: note:  
		   public ParseError(CompilerError err, string msg, var l, var c,
		                    ^


ParseError:
        [0x0] 0:	new_class @46 // std#string
        [0x1] 1:	newstr @226 // ""
        [0x2] 2:	call @558 // <std#string.string(var[])>
        [0x3] 3:	movl 0
        [0x4] 4:	movn #1
        [0x5] 5:	popobj
line: 368 [0x6] 6:	movl 1
          [0x7] 7:	pushobj
          [0x8] 8:	movl 0
          [0x9] 9:	movn #0
          [0xa] 10:	popobj
line: 369 [0xb] 11:	movl 5
          [0xc] 12:	checknull
          [0xd] 13:	not cmt, cmt
          [0xe] 14:	movr ebx, cmt
          [0xf] 15:	cmp ebx, 1
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	skne 14 // pc = 31
          [0x12] 18:	istore 1
          [0x13] 19:	movl 5
          [0x14] 20:	pushobj
          [0x15] 21:	call @595 // <std#string.size()>
          [0x16] 22:	movi #0, ebx
          [0x18] 24:	movr egx, ebx
          [0x19] 25:	loadval ebx
          [0x1a] 26:	tne ebx, egx
          [0x1b] 27:	movr ebx, cmt
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	and ecx, ebx
          [0x1e] 30:	movr ebx, cmt
          [0x1f] 31:	movr cmt, ebx
          [0x20] 32:	movi #44, adx
          [0x22] 34:	ifne
line: 370 [0x23] 35:	movl 2
          [0x24] 36:	pushobj
          [0x25] 37:	movl 5
          [0x26] 38:	pushobj
          [0x27] 39:	call @573 // <std#string.$operator+(std#Printable)>
          [0x28] 40:	movl 0
          [0x29] 41:	movn #1
          [0x2a] 42:	popobj
          [0x2b] 43:	goto @50
line: 371 [0x2c] 44:	movl 2
          [0x2d] 45:	pushobj
          [0x2e] 46:	movl 0
          [0x2f] 47:	movn #1
          [0x30] 48:	popobj
          [0x31] 49:	nop
          [0x32] 50:	nop
line: 372 [0x33] 51:	loadl ebx, fp+3
          [0x34] 52:	nop
          [0x35] 53:	rstore ebx
          [0x36] 54:	movl 0
          [0x37] 55:	movn #2
          [0x38] 56:	movi #0, adx
          [0x3a] 58:	loadval ecx
          [0x3b] 59:	rmov adx, ecx
line: 373 [0x3c] 60:	loadl ebx, fp+4
          [0x3d] 61:	nop
          [0x3e] 62:	rstore ebx
          [0x3f] 63:	movl 0
          [0x40] 64:	movn #3
          [0x41] 65:	movi #0, adx
          [0x43] 67:	loadval ecx
          [0x44] 68:	rmov adx, ecx
line: 374 [0x45] 69:	movi #0, ebx
          [0x47] 71:	nop
          [0x48] 72:	rstore ebx
          [0x49] 73:	movl 0
          [0x4a] 74:	movn #4
          [0x4b] 75:	movi #0, adx
          [0x4d] 77:	loadval ecx
          [0x4e] 78:	rmov adx, ecx
          [0x4f] 79:	movl 0
          [0x50] 80:	returnobj
          [0x51] 81:	ret

func:@806 [app#ParseError.ParseError] in file: lib/support//bootstrap//frontend//ErrorManager.sharp:378:21: note:  
		   public ParseError(var warning, CompilerError err, string msg, var l, var c,
		                    ^


ParseError:
        [0x0] 0:	new_class @46 // std#string
        [0x1] 1:	newstr @226 // ""
        [0x2] 2:	call @558 // <std#string.string(var[])>
        [0x3] 3:	movl 0
        [0x4] 4:	movn #1
        [0x5] 5:	popobj
line: 379 [0x6] 6:	movl 2
          [0x7] 7:	pushobj
          [0x8] 8:	movl 0
          [0x9] 9:	movn #0
          [0xa] 10:	popobj
line: 380 [0xb] 11:	movl 6
          [0xc] 12:	checknull
          [0xd] 13:	not cmt, cmt
          [0xe] 14:	movr ebx, cmt
          [0xf] 15:	cmp ebx, 1
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	skne 14 // pc = 31
          [0x12] 18:	istore 1
          [0x13] 19:	movl 6
          [0x14] 20:	pushobj
          [0x15] 21:	call @595 // <std#string.size()>
          [0x16] 22:	movi #0, ebx
          [0x18] 24:	movr egx, ebx
          [0x19] 25:	loadval ebx
          [0x1a] 26:	tne ebx, egx
          [0x1b] 27:	movr ebx, cmt
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	and ecx, ebx
          [0x1e] 30:	movr ebx, cmt
          [0x1f] 31:	movr cmt, ebx
          [0x20] 32:	movi #44, adx
          [0x22] 34:	ifne
line: 381 [0x23] 35:	movl 3
          [0x24] 36:	pushobj
          [0x25] 37:	movl 6
          [0x26] 38:	pushobj
          [0x27] 39:	call @573 // <std#string.$operator+(std#Printable)>
          [0x28] 40:	movl 0
          [0x29] 41:	movn #1
          [0x2a] 42:	popobj
          [0x2b] 43:	goto @50
line: 382 [0x2c] 44:	movl 3
          [0x2d] 45:	pushobj
          [0x2e] 46:	movl 0
          [0x2f] 47:	movn #1
          [0x30] 48:	popobj
          [0x31] 49:	nop
          [0x32] 50:	nop
line: 383 [0x33] 51:	loadl ebx, fp+4
          [0x34] 52:	nop
          [0x35] 53:	rstore ebx
          [0x36] 54:	movl 0
          [0x37] 55:	movn #2
          [0x38] 56:	movi #0, adx
          [0x3a] 58:	loadval ecx
          [0x3b] 59:	rmov adx, ecx
line: 384 [0x3c] 60:	loadl ebx, fp+5
          [0x3d] 61:	nop
          [0x3e] 62:	rstore ebx
          [0x3f] 63:	movl 0
          [0x40] 64:	movn #3
          [0x41] 65:	movi #0, adx
          [0x43] 67:	loadval ecx
          [0x44] 68:	rmov adx, ecx
line: 385 [0x45] 69:	loadl ebx, fp+1
          [0x46] 70:	nop
          [0x47] 71:	rstore ebx
          [0x48] 72:	movl 0
          [0x49] 73:	movn #4
          [0x4a] 74:	movi #0, adx
          [0x4c] 76:	loadval ecx
          [0x4d] 77:	rmov adx, ecx
          [0x4e] 78:	movl 0
          [0x4f] 79:	returnobj
          [0x50] 80:	ret

func:@807 [app#ParseError.ParseError] in file: lib/support//bootstrap//frontend//ErrorManager.sharp:389:21: note:  
		   public ParseError(var warning, CompilerError err, string msg, Token entity,
		                    ^


ParseError:
        [0x0] 0:	new_class @46 // std#string
        [0x1] 1:	newstr @226 // ""
        [0x2] 2:	call @558 // <std#string.string(var[])>
        [0x3] 3:	movl 0
        [0x4] 4:	movn #1
        [0x5] 5:	popobj
line: 390 [0x6] 6:	movl 2
          [0x7] 7:	pushobj
          [0x8] 8:	movl 0
          [0x9] 9:	movn #0
          [0xa] 10:	popobj
line: 391 [0xb] 11:	movl 5
          [0xc] 12:	checknull
          [0xd] 13:	not cmt, cmt
          [0xe] 14:	movr ebx, cmt
          [0xf] 15:	cmp ebx, 1
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	skne 14 // pc = 31
          [0x12] 18:	istore 1
          [0x13] 19:	movl 5
          [0x14] 20:	pushobj
          [0x15] 21:	call @595 // <std#string.size()>
          [0x16] 22:	movi #0, ebx
          [0x18] 24:	movr egx, ebx
          [0x19] 25:	loadval ebx
          [0x1a] 26:	tne ebx, egx
          [0x1b] 27:	movr ebx, cmt
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	and ecx, ebx
          [0x1e] 30:	movr ebx, cmt
          [0x1f] 31:	movr cmt, ebx
          [0x20] 32:	movi #44, adx
          [0x22] 34:	ifne
line: 392 [0x23] 35:	movl 3
          [0x24] 36:	pushobj
          [0x25] 37:	movl 5
          [0x26] 38:	pushobj
          [0x27] 39:	call @573 // <std#string.$operator+(std#Printable)>
          [0x28] 40:	movl 0
          [0x29] 41:	movn #1
          [0x2a] 42:	popobj
          [0x2b] 43:	goto @50
line: 393 [0x2c] 44:	movl 3
          [0x2d] 45:	pushobj
          [0x2e] 46:	movl 0
          [0x2f] 47:	movn #1
          [0x30] 48:	popobj
          [0x31] 49:	nop
          [0x32] 50:	nop
line: 394 [0x33] 51:	movl 4
          [0x34] 52:	pushobj
          [0x35] 53:	call @863 // <app#Token.getLine()>
          [0x36] 54:	nop
          [0x37] 55:	movl 0
          [0x38] 56:	movn #2
          [0x39] 57:	movi #0, adx
          [0x3b] 59:	loadval ecx
          [0x3c] 60:	rmov adx, ecx
line: 395 [0x3d] 61:	movl 4
          [0x3e] 62:	pushobj
          [0x3f] 63:	call @862 // <app#Token.getCol()>
          [0x40] 64:	nop
          [0x41] 65:	movl 0
          [0x42] 66:	movn #3
          [0x43] 67:	movi #0, adx
          [0x45] 69:	loadval ecx
          [0x46] 70:	rmov adx, ecx
line: 396 [0x47] 71:	loadl ebx, fp+1
          [0x48] 72:	nop
          [0x49] 73:	rstore ebx
          [0x4a] 74:	movl 0
          [0x4b] 75:	movn #4
          [0x4c] 76:	movi #0, adx
          [0x4e] 78:	loadval ecx
          [0x4f] 79:	rmov adx, ecx
          [0x50] 80:	movl 0
          [0x51] 81:	returnobj
          [0x52] 82:	ret

func:@808 [app#Ast.Ast] in file: lib/support//bootstrap//frontend//parser//Ast.sharp:15:15: note:  
		    public Ast()
		              ^


Ast:
line: 16 [0x0] 0:	new_class @79 // std#ArrayList<app#Token>
         [0x1] 1:	movi #3, ebx
         [0x3] 3:	rstore ebx
         [0x4] 4:	call @1032 // <std#ArrayList<app#Token>.ArrayList(var)>
         [0x5] 5:	movl 0
         [0x6] 6:	movn #3
         [0x7] 7:	popobj
line: 17 [0x8] 8:	new_class @80 // std#ArrayList<app#Ast>
         [0x9] 9:	movi #3, ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	call @1053 // <std#ArrayList<app#Ast>.ArrayList(var)>
         [0xd] 13:	movl 0
         [0xe] 14:	movn #4
         [0xf] 15:	popobj
         [0x10] 16:	movl 0
         [0x11] 17:	returnobj
         [0x12] 18:	ret

func:@809 [app#Ast.Ast] in file: lib/support//bootstrap//frontend//parser//Ast.sharp:21:15: note:  
		    public Ast(AstType type, var line, var col)
		              ^


Ast:
line: 22 [0x0] 0:	movl 1
         [0x1] 1:	pushobj
         [0x2] 2:	movl 0
         [0x3] 3:	movn #2
         [0x4] 4:	popobj
line: 23 [0x5] 5:	loadl ebx, fp+2
         [0x6] 6:	nop
         [0x7] 7:	rstore ebx
         [0x8] 8:	movl 0
         [0x9] 9:	movn #0
         [0xa] 10:	movi #0, adx
         [0xc] 12:	loadval ecx
         [0xd] 13:	rmov adx, ecx
line: 24 [0xe] 14:	loadl ebx, fp+3
         [0xf] 15:	nop
         [0x10] 16:	rstore ebx
         [0x11] 17:	movl 0
         [0x12] 18:	movn #1
         [0x13] 19:	movi #0, adx
         [0x15] 21:	loadval ecx
         [0x16] 22:	rmov adx, ecx
line: 25 [0x17] 23:	new_class @79 // std#ArrayList<app#Token>
         [0x18] 24:	movi #3, ebx
         [0x1a] 26:	rstore ebx
         [0x1b] 27:	call @1032 // <std#ArrayList<app#Token>.ArrayList(var)>
         [0x1c] 28:	movl 0
         [0x1d] 29:	movn #3
         [0x1e] 30:	popobj
line: 26 [0x1f] 31:	new_class @80 // std#ArrayList<app#Ast>
         [0x20] 32:	movi #3, ebx
         [0x22] 34:	rstore ebx
         [0x23] 35:	call @1053 // <std#ArrayList<app#Ast>.ArrayList(var)>
         [0x24] 36:	movl 0
         [0x25] 37:	movn #4
         [0x26] 38:	popobj
         [0x27] 39:	movl 0
         [0x28] 40:	returnobj
         [0x29] 41:	ret

func:@810 [app#Ast.add] in file: lib/support//bootstrap//frontend//parser//Ast.sharp:30:19: note:  
		    public def add(Ast ast) {
		                  ^


add:
line: 30 [0x0] 0:	movl 1
         [0x1] 1:	checknull
         [0x2] 2:	movr ebx, cmt
         [0x3] 3:	movi #11, adx
         [0x5] 5:	ifne
line: 31 [0x6] 6:	new_class @10 // std#Exception
         [0x7] 7:	newstr @336 // "null Ast"
         [0x8] 8:	call @81 // <std#Exception.Exception(var[])>
         [0x9] 9:	throw 
         [0xa] 10:	nop
         [0xb] 11:	nop
line: 32 [0xc] 12:	movl 0
         [0xd] 13:	movn #4
         [0xe] 14:	pushobj
         [0xf] 15:	movl 1
         [0x10] 16:	pushobj
         [0x11] 17:	call @1066 // <std#ArrayList<app#Ast>.add(app#Ast)>
         [0x12] 18:	ret

func:@811 [app#Ast.add] in file: lib/support//bootstrap//frontend//parser//Ast.sharp:36:19: note:  
		    public def add(Token token) {
		                  ^


add:
line: 36 [0x0] 0:	movl 1
         [0x1] 1:	checknull
         [0x2] 2:	movr ebx, cmt
         [0x3] 3:	movi #11, adx
         [0x5] 5:	ifne
line: 37 [0x6] 6:	new_class @10 // std#Exception
         [0x7] 7:	newstr @337 // "null token"
         [0x8] 8:	call @81 // <std#Exception.Exception(var[])>
         [0x9] 9:	throw 
         [0xa] 10:	nop
         [0xb] 11:	nop
line: 38 [0xc] 12:	movl 0
         [0xd] 13:	movn #3
         [0xe] 14:	pushobj
         [0xf] 15:	movl 1
         [0x10] 16:	pushobj
         [0x11] 17:	call @1045 // <std#ArrayList<app#Token>.add(app#Token)>
         [0x12] 18:	ret

func:@812 [app#Ast.getToken] in file: lib/support//bootstrap//frontend//parser//Ast.sharp:42:24: note:  
		    public def getToken(var pos) : Token {
		                       ^


getToken:
line: 42 [0x0] 0:	movl 0
         [0x1] 1:	movn #3
         [0x2] 2:	pushobj
         [0x3] 3:	loadl ebx, fp+1
         [0x4] 4:	rstore ebx
         [0x5] 5:	call @1039 // <std#ArrayList<app#Token>.get(var)>
         [0x6] 6:	movsl #0
         [0x7] 7:	returnobj
         [0x8] 8:	ret

func:@813 [app#Ast.tokenSize] in file: lib/support//bootstrap//frontend//parser//Ast.sharp:46:25: note:  
		    public def tokenSize() : var {
		                        ^


tokenSize:
line: 46 [0x0] 0:	movl 0
         [0x1] 1:	movn #3
         [0x2] 2:	pushobj
         [0x3] 3:	call @1036 // <std#ArrayList<app#Token>.size()>
         [0x4] 4:	loadval ebx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@814 [app#Ast.childrenSize] in file: lib/support//bootstrap//frontend//parser//Ast.sharp:50:28: note:  
		    public def childrenSize() : var {
		                           ^


childrenSize:
line: 50 [0x0] 0:	movl 0
         [0x1] 1:	movn #4
         [0x2] 2:	pushobj
         [0x3] 3:	call @1057 // <std#ArrayList<app#Ast>.size()>
         [0x4] 4:	loadval ebx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@815 [app#Ast.hasToken] in file: lib/support//bootstrap//frontend//parser//Ast.sharp:54:24: note:  
		    public def hasToken(TokenType type) : var {
		                       ^


hasToken:
line: 54 [0x0] 0:	istorel 0, fp+2
         [0x2] 2:	movl 0
         [0x3] 3:	movn #3
         [0x4] 4:	pushobj
         [0x5] 5:	call @1036 // <std#ArrayList<app#Token>.size()>
         [0x6] 6:	loadval egx
         [0x7] 7:	loadl ebx, fp+2
         [0x8] 8:	lt ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	movi #42, adx
         [0xc] 12:	ifne
line: 55 [0xd] 13:	movl 0
         [0xe] 14:	movn #3
         [0xf] 15:	pushobj
         [0x10] 16:	loadl ebx, fp+2
         [0x11] 17:	rstore ebx
         [0x12] 18:	call @1039 // <std#ArrayList<app#Token>.get(var)>
         [0x13] 19:	movl 3
         [0x14] 20:	popobj
line: 56 [0x15] 21:	movl 3
         [0x16] 22:	pushobj
         [0x17] 23:	call @864 // <app#Token.getType()>
         [0x18] 24:	movl 1
         [0x19] 25:	pushobj
         [0x1a] 26:	call @74 // <std#Enum.$operator==(std#Enum)>
         [0x1b] 27:	loadval cmt
         [0x1c] 28:	movi #36, adx
         [0x1e] 30:	ifne
line: 57 [0x1f] 31:	movi #1, ebx
         [0x21] 33:	return_val ebx
         [0x22] 34:	ret
         [0x23] 35:	nop
         [0x24] 36:	nop
         [0x25] 37:	loadl ebx, fp+2
         [0x26] 38:	movi #1, ecx
         [0x28] 40:	addl ecx, @2
         [0x29] 41:	goto @2
line: 60 [0x2a] 42:	movi #0, ebx
         [0x2c] 44:	return_val ebx
         [0x2d] 45:	ret

func:@816 [app#Ast.clear] in file: lib/support//bootstrap//frontend//parser//Ast.sharp:64:21: note:  
		    public def clear() {
		                    ^


clear:
line: 64 [0x0] 0:	movl 0
         [0x1] 1:	movn #4
         [0x2] 2:	pushobj
         [0x3] 3:	call @1071 // <std#ArrayList<app#Ast>.clear()>
line: 65 [0x4] 4:	movl 0
         [0x5] 5:	movn #3
         [0x6] 6:	pushobj
         [0x7] 7:	call @1050 // <std#ArrayList<app#Token>.clear()>
         [0x8] 8:	ret

func:@817 [app#Ast.hasChild] in file: lib/support//bootstrap//frontend//parser//Ast.sharp:69:24: note:  
		    public def hasChild(AstType type) : var {
		                       ^


hasChild:
line: 69 [0x0] 0:	istorel 0, fp+2
         [0x2] 2:	movl 0
         [0x3] 3:	movn #4
         [0x4] 4:	pushobj
         [0x5] 5:	call @1057 // <std#ArrayList<app#Ast>.size()>
         [0x6] 6:	loadval egx
         [0x7] 7:	loadl ebx, fp+2
         [0x8] 8:	lt ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	movi #42, adx
         [0xc] 12:	ifne
line: 70 [0xd] 13:	movl 0
         [0xe] 14:	movn #4
         [0xf] 15:	pushobj
         [0x10] 16:	loadl ebx, fp+2
         [0x11] 17:	rstore ebx
         [0x12] 18:	call @1060 // <std#ArrayList<app#Ast>.get(var)>
         [0x13] 19:	movl 3
         [0x14] 20:	popobj
line: 71 [0x15] 21:	movl 3
         [0x16] 22:	movn #2
         [0x17] 23:	pushobj
         [0x18] 24:	movl 1
         [0x19] 25:	pushobj
         [0x1a] 26:	call @74 // <std#Enum.$operator==(std#Enum)>
         [0x1b] 27:	loadval cmt
         [0x1c] 28:	movi #36, adx
         [0x1e] 30:	ifne
line: 72 [0x1f] 31:	movi #1, ebx
         [0x21] 33:	return_val ebx
         [0x22] 34:	ret
         [0x23] 35:	nop
         [0x24] 36:	nop
         [0x25] 37:	loadl ebx, fp+2
         [0x26] 38:	movi #1, ecx
         [0x28] 40:	addl ecx, @2
         [0x29] 41:	goto @2
line: 75 [0x2a] 42:	movi #0, ebx
         [0x2c] 44:	return_val ebx
         [0x2d] 45:	ret

func:@818 [app#Ast.getChild] in file: lib/support//bootstrap//frontend//parser//Ast.sharp:79:24: note:  
		    public def getChild(var pos) : Ast {
		                       ^


getChild:
line: 79 [0x0] 0:	movl 0
         [0x1] 1:	movn #4
         [0x2] 2:	pushobj
         [0x3] 3:	loadl ebx, fp+1
         [0x4] 4:	rstore ebx
         [0x5] 5:	call @1060 // <std#ArrayList<app#Ast>.get(var)>
         [0x6] 6:	movsl #0
         [0x7] 7:	returnobj
         [0x8] 8:	ret

func:@819 [app#Ast.getChild] in file: lib/support//bootstrap//frontend//parser//Ast.sharp:83:24: note:  
		    public def getChild(AstType type) : Ast {
		                       ^


getChild:
line: 83 [0x0] 0:	istorel 0, fp+2
         [0x2] 2:	movl 0
         [0x3] 3:	movn #4
         [0x4] 4:	pushobj
         [0x5] 5:	call @1057 // <std#ArrayList<app#Ast>.size()>
         [0x6] 6:	loadval egx
         [0x7] 7:	loadl ebx, fp+2
         [0x8] 8:	lt ebx, egx
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	movi #41, adx
         [0xc] 12:	ifne
line: 84 [0xd] 13:	movl 0
         [0xe] 14:	movn #4
         [0xf] 15:	pushobj
         [0x10] 16:	loadl ebx, fp+2
         [0x11] 17:	rstore ebx
         [0x12] 18:	call @1060 // <std#ArrayList<app#Ast>.get(var)>
         [0x13] 19:	movl 3
         [0x14] 20:	popobj
line: 85 [0x15] 21:	movl 3
         [0x16] 22:	movn #2
         [0x17] 23:	pushobj
         [0x18] 24:	movl 1
         [0x19] 25:	pushobj
         [0x1a] 26:	call @74 // <std#Enum.$operator==(std#Enum)>
         [0x1b] 27:	loadval cmt
         [0x1c] 28:	movi #35, adx
         [0x1e] 30:	ifne
line: 86 [0x1f] 31:	movl 3
         [0x20] 32:	returnobj
         [0x21] 33:	ret
         [0x22] 34:	nop
         [0x23] 35:	nop
         [0x24] 36:	loadl ebx, fp+2
         [0x25] 37:	movi #1, ecx
         [0x27] 39:	addl ecx, @2
         [0x28] 40:	goto @2
line: 88 [0x29] 41:	movl 0
         [0x2a] 42:	del
         [0x2b] 43:	ret

func:@820 [app#Ast.last] in file: lib/support//bootstrap//frontend//parser//Ast.sharp:92:20: note:  
		    public def last() : Ast {
		                   ^


last:
line: 92 [0x0] 0:	movl 0
         [0x1] 1:	movn #4
         [0x2] 2:	pushobj
         [0x3] 3:	call @1061 // <std#ArrayList<app#Ast>.last()>
         [0x4] 4:	movsl #0
         [0x5] 5:	returnobj
         [0x6] 6:	ret

func:@821 [app#Ast.lastToken] in file: lib/support//bootstrap//frontend//parser//Ast.sharp:96:25: note:  
		    public def lastToken() : Token {
		                        ^


lastToken:
line: 96 [0x0] 0:	movl 0
         [0x1] 1:	movn #3
         [0x2] 2:	pushobj
         [0x3] 3:	call @1040 // <std#ArrayList<app#Token>.last()>
         [0x4] 4:	movsl #0
         [0x5] 5:	returnobj
         [0x6] 6:	ret

func:@822 [app#Ast.encapsulate] in file: lib/support//bootstrap//frontend//parser//Ast.sharp:100:27: note:  
		    public def encapsulate(AstType type) : Ast {
		                          ^


encapsulate:
line: 100 [0x0] 0:	new_class @56 // app#Ast
          [0x1] 1:	movl 1
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	movn #0
          [0x5] 5:	movi #0, adx
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	rstore ebx
          [0x9] 9:	movl 0
          [0xa] 10:	movn #1
          [0xb] 11:	movi #0, adx
          [0xd] 13:	iaload_2 ebx, adx
          [0xe] 14:	rstore ebx
          [0xf] 15:	call @809 // <app#Ast.Ast(app#AstType,var,var)>
          [0x10] 16:	movl 2
          [0x11] 17:	popobj
line: 102 [0x12] 18:	movl 2
          [0x13] 19:	movn #4
          [0x14] 20:	pushobj
          [0x15] 21:	movl 0
          [0x16] 22:	movn #4
          [0x17] 23:	pushobj
          [0x18] 24:	call @1065 // <std#ArrayList<app#Ast>.addAll(std#ArrayList<app#Ast>)>
line: 103 [0x19] 25:	movl 2
          [0x1a] 26:	movn #3
          [0x1b] 27:	pushobj
          [0x1c] 28:	movl 0
          [0x1d] 29:	movn #3
          [0x1e] 30:	pushobj
          [0x1f] 31:	call @1044 // <std#ArrayList<app#Token>.addAll(std#ArrayList<app#Token>)>
line: 105 [0x20] 32:	movl 0
          [0x21] 33:	movn #4
          [0x22] 34:	pushobj
          [0x23] 35:	call @1071 // <std#ArrayList<app#Ast>.clear()>
line: 106 [0x24] 36:	movl 0
          [0x25] 37:	movn #3
          [0x26] 38:	pushobj
          [0x27] 39:	call @1050 // <std#ArrayList<app#Token>.clear()>
line: 107 [0x28] 40:	movl 0
          [0x29] 41:	movn #4
          [0x2a] 42:	pushobj
          [0x2b] 43:	movl 2
          [0x2c] 44:	pushobj
          [0x2d] 45:	call @1066 // <std#ArrayList<app#Ast>.add(app#Ast)>
line: 108 [0x2e] 46:	movl 2
          [0x2f] 47:	returnobj
          [0x30] 48:	ret

func:@823 [app#Ast.addTabs] in file: lib/support//bootstrap//frontend//parser//Ast.sharp:112:24: note:  
		    private def addTabs(strbuf sb) {
		                       ^


addTabs:
line: 112 [0x0] 0:	istorel 0, fp+2
          [0x2] 2:	movg @56 // @app#Ast
          [0x3] 3:	movn #5
          [0x4] 4:	movi #0, adx
          [0x6] 6:	chklen adx
          [0x7] 7:	iaload_2 egx, adx
          [0x8] 8:	loadl ebx, fp+2
          [0x9] 9:	lt ebx, egx
          [0xa] 10:	movr ebx, cmt
          [0xb] 11:	movi #26, adx
          [0xd] 13:	ifne
line: 113 [0xe] 14:	movl 1
          [0xf] 15:	pushobj
          [0x10] 16:	movi #9, ebx
          [0x12] 18:	rstore ebx
          [0x13] 19:	call @541 // <std#strbuf.$operator+=(var)>
          [0x14] 20:	pop
          [0x15] 21:	loadl ebx, fp+2
          [0x16] 22:	movi #1, ecx
          [0x18] 24:	addl ecx, @2
          [0x19] 25:	goto @2
          [0x1a] 26:	ret

func:@824 [app#Ast.toString] in file: lib/support//bootstrap//frontend//parser//Ast.sharp:118:24: note:  
		    public def toString(strbuf sb) {
		                       ^


toString:
line: 118 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	movl 1
          [0x3] 3:	pushobj
          [0x4] 4:	call @823 // <app#Ast.addTabs(std#strbuf)>
line: 119 [0x5] 5:	movl 1
          [0x6] 6:	pushobj
          [0x7] 7:	new_class @46 // std#string
          [0x8] 8:	newstr @338 // "Ast: "
          [0x9] 9:	call @558 // <std#string.string(var[])>
          [0xa] 10:	movl 0
          [0xb] 11:	movn #2
          [0xc] 12:	pushobj
          [0xd] 13:	call @573 // <std#string.$operator+(std#Printable)>
          [0xe] 14:	newstr @339 // " ;"
          [0xf] 15:	call @572 // <std#string.$operator+(var[])>
          [0x10] 16:	movl 0
          [0x11] 17:	movn #0
          [0x12] 18:	movi #0, adx
          [0x14] 20:	iaload_2 ebx, adx
          [0x15] 21:	rstore ebx
          [0x16] 22:	call @579 // <std#string.$operator+(var)>
          [0x17] 23:	newstr @340 // ","
          [0x18] 24:	call @572 // <std#string.$operator+(var[])>
          [0x19] 25:	movl 0
          [0x1a] 26:	movn #1
          [0x1b] 27:	movi #0, adx
          [0x1d] 29:	iaload_2 ebx, adx
          [0x1e] 30:	rstore ebx
          [0x1f] 31:	call @579 // <std#string.$operator+(var)>
          [0x20] 32:	newstr @304 // "\n"
          [0x21] 33:	call @572 // <std#string.$operator+(var[])>
          [0x22] 34:	call @542 // <std#strbuf.$operator+=(std#Printable)>
          [0x23] 35:	pop
line: 121 [0x24] 36:	movg @56 // @app#Ast
          [0x25] 37:	movn #5
          [0x26] 38:	movi #0, adx
          [0x28] 40:	chklen adx
          [0x29] 41:	iaload_2 ebx, adx
          [0x2a] 42:	inc ebx
          [0x2b] 43:	rmov adx, ebx
          [0x2c] 44:	dec ebx
line: 122 [0x2d] 45:	movl 0
          [0x2e] 46:	pushobj
          [0x2f] 47:	movl 1
          [0x30] 48:	pushobj
          [0x31] 49:	call @823 // <app#Ast.addTabs(std#strbuf)>
line: 123 [0x32] 50:	movl 1
          [0x33] 51:	pushobj
          [0x34] 52:	newstr @341 // "tokens:\n"
          [0x35] 53:	call @543 // <std#strbuf.$operator+=(var[])>
          [0x36] 54:	pop
line: 124 [0x37] 55:	istorel 0, fp+2
          [0x39] 57:	movl 0
          [0x3a] 58:	movn #3
          [0x3b] 59:	pushobj
          [0x3c] 60:	call @1036 // <std#ArrayList<app#Token>.size()>
          [0x3d] 61:	loadval egx
          [0x3e] 62:	loadl ebx, fp+2
          [0x3f] 63:	lt ebx, egx
          [0x40] 64:	movr ebx, cmt
          [0x41] 65:	movi #113, adx
          [0x43] 67:	ifne
line: 125 [0x44] 68:	movl 0
          [0x45] 69:	movn #3
          [0x46] 70:	pushobj
          [0x47] 71:	loadl ebx, fp+2
          [0x48] 72:	rstore ebx
          [0x49] 73:	call @1039 // <std#ArrayList<app#Token>.get(var)>
          [0x4a] 74:	movl 3
          [0x4b] 75:	popobj
line: 126 [0x4c] 76:	movl 0
          [0x4d] 77:	pushobj
          [0x4e] 78:	movl 1
          [0x4f] 79:	pushobj
          [0x50] 80:	call @823 // <app#Ast.addTabs(std#strbuf)>
line: 127 [0x51] 81:	movl 3
          [0x52] 82:	checknull
          [0x53] 83:	not cmt, cmt
          [0x54] 84:	movr ebx, cmt
          [0x55] 85:	movi #101, adx
          [0x57] 87:	ifne
line: 128 [0x58] 88:	movl 1
          [0x59] 89:	pushobj
          [0x5a] 90:	new_class @46 // std#string
          [0x5b] 91:	newstr @226 // ""
          [0x5c] 92:	call @558 // <std#string.string(var[])>
          [0x5d] 93:	movl 3
          [0x5e] 94:	pushobj
          [0x5f] 95:	call @573 // <std#string.$operator+(std#Printable)>
          [0x60] 96:	newstr @304 // "\n"
          [0x61] 97:	call @572 // <std#string.$operator+(var[])>
          [0x62] 98:	call @542 // <std#strbuf.$operator+=(std#Printable)>
          [0x63] 99:	pop
          [0x64] 100:	goto @107
line: 130 [0x65] 101:	movl 1
          [0x66] 102:	pushobj
          [0x67] 103:	newstr @342 // "null\n"
          [0x68] 104:	call @543 // <std#strbuf.$operator+=(var[])>
          [0x69] 105:	pop
          [0x6a] 106:	nop
          [0x6b] 107:	nop
          [0x6c] 108:	loadl ebx, fp+2
          [0x6d] 109:	movi #1, ecx
          [0x6f] 111:	addl ecx, @2
          [0x70] 112:	goto @57
line: 133 [0x71] 113:	movl 0
          [0x72] 114:	pushobj
          [0x73] 115:	movl 1
          [0x74] 116:	pushobj
          [0x75] 117:	call @823 // <app#Ast.addTabs(std#strbuf)>
line: 134 [0x76] 118:	movl 1
          [0x77] 119:	pushobj
          [0x78] 120:	new_class @46 // std#string
          [0x79] 121:	newstr @343 // "children: ("
          [0x7a] 122:	call @558 // <std#string.string(var[])>
          [0x7b] 123:	movl 0
          [0x7c] 124:	movn #4
          [0x7d] 125:	pushobj
          [0x7e] 126:	call @1057 // <std#ArrayList<app#Ast>.size()>
          [0x7f] 127:	call @579 // <std#string.$operator+(var)>
          [0x80] 128:	newstr @344 // ")\n"
          [0x81] 129:	call @572 // <std#string.$operator+(var[])>
          [0x82] 130:	call @542 // <std#strbuf.$operator+=(std#Printable)>
          [0x83] 131:	pop
line: 136 [0x84] 132:	istorel 0, fp+4
          [0x86] 134:	movl 0
          [0x87] 135:	movn #4
          [0x88] 136:	pushobj
          [0x89] 137:	call @1057 // <std#ArrayList<app#Ast>.size()>
          [0x8a] 138:	loadval egx
          [0x8b] 139:	loadl ebx, fp+4
          [0x8c] 140:	lt ebx, egx
          [0x8d] 141:	movr ebx, cmt
          [0x8e] 142:	movi #183, adx
          [0x90] 144:	ifne
line: 137 [0x91] 145:	movl 0
          [0x92] 146:	movn #4
          [0x93] 147:	pushobj
          [0x94] 148:	loadl ebx, fp+4
          [0x95] 149:	rstore ebx
          [0x96] 150:	call @1060 // <std#ArrayList<app#Ast>.get(var)>
          [0x97] 151:	movl 5
          [0x98] 152:	popobj
line: 138 [0x99] 153:	movl 0
          [0x9a] 154:	pushobj
          [0x9b] 155:	movl 1
          [0x9c] 156:	pushobj
          [0x9d] 157:	call @823 // <app#Ast.addTabs(std#strbuf)>
line: 140 [0x9e] 158:	movl 5
          [0x9f] 159:	checknull
          [0xa0] 160:	not cmt, cmt
          [0xa1] 161:	movr ebx, cmt
          [0xa2] 162:	movi #171, adx
          [0xa4] 164:	ifne
line: 141 [0xa5] 165:	movl 5
          [0xa6] 166:	pushobj
          [0xa7] 167:	movl 1
          [0xa8] 168:	pushobj
          [0xa9] 169:	call @824 // <app#Ast.toString(std#strbuf)>
          [0xaa] 170:	goto @177
line: 143 [0xab] 171:	movl 1
          [0xac] 172:	pushobj
          [0xad] 173:	newstr @342 // "null\n"
          [0xae] 174:	call @543 // <std#strbuf.$operator+=(var[])>
          [0xaf] 175:	pop
          [0xb0] 176:	nop
          [0xb1] 177:	nop
          [0xb2] 178:	loadl ebx, fp+4
          [0xb3] 179:	movi #1, ecx
          [0xb5] 181:	addl ecx, @4
          [0xb6] 182:	goto @134
line: 146 [0xb7] 183:	movl 1
          [0xb8] 184:	pushobj
          [0xb9] 185:	movi #10, ebx
          [0xbb] 187:	rstore ebx
          [0xbc] 188:	call @541 // <std#strbuf.$operator+=(var)>
          [0xbd] 189:	pop
line: 147 [0xbe] 190:	movg @56 // @app#Ast
          [0xbf] 191:	movn #5
          [0xc0] 192:	movi #0, adx
          [0xc2] 194:	chklen adx
          [0xc3] 195:	iaload_2 ebx, adx
          [0xc4] 196:	dec ebx
          [0xc5] 197:	rmov adx, ebx
          [0xc6] 198:	inc ebx
          [0xc7] 199:	ret

func:@825 [app#Ast.copy] in file: lib/support//bootstrap//frontend//parser//Ast.sharp:151:20: note:  
		    public def copy(Ast ast) {
		                   ^


copy:
line: 151 [0x0] 0:	movl 1
          [0x1] 1:	movn #0
          [0x2] 2:	nop
          [0x3] 3:	movi #0, adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	rstore ebx
          [0x7] 7:	movl 0
          [0x8] 8:	movn #0
          [0x9] 9:	movi #0, adx
          [0xb] 11:	loadval ecx
          [0xc] 12:	rmov adx, ecx
line: 152 [0xd] 13:	movl 1
          [0xe] 14:	movn #1
          [0xf] 15:	nop
          [0x10] 16:	movi #0, adx
          [0x12] 18:	iaload_2 ebx, adx
          [0x13] 19:	rstore ebx
          [0x14] 20:	movl 0
          [0x15] 21:	movn #1
          [0x16] 22:	movi #0, adx
          [0x18] 24:	loadval ecx
          [0x19] 25:	rmov adx, ecx
line: 153 [0x1a] 26:	movl 1
          [0x1b] 27:	movn #2
          [0x1c] 28:	pushobj
          [0x1d] 29:	movl 0
          [0x1e] 30:	movn #2
          [0x1f] 31:	popobj
line: 155 [0x20] 32:	movl 0
          [0x21] 33:	movn #4
          [0x22] 34:	pushobj
          [0x23] 35:	movl 1
          [0x24] 36:	movn #4
          [0x25] 37:	pushobj
          [0x26] 38:	call @1065 // <std#ArrayList<app#Ast>.addAll(std#ArrayList<app#Ast>)>
line: 156 [0x27] 39:	movl 0
          [0x28] 40:	movn #3
          [0x29] 41:	pushobj
          [0x2a] 42:	movl 1
          [0x2b] 43:	movn #3
          [0x2c] 44:	pushobj
          [0x2d] 45:	call @1044 // <std#ArrayList<app#Token>.addAll(std#ArrayList<app#Token>)>
          [0x2e] 46:	ret

func:@826 [app#Ast.fastCopy] in file: lib/support//bootstrap//frontend//parser//Ast.sharp:160:24: note:  
		    public def fastCopy(Ast ast) {
		                       ^


fastCopy:
line: 160 [0x0] 0:	movl 0
          [0x1] 1:	movn #4
          [0x2] 2:	pushobj
          [0x3] 3:	call @1071 // <std#ArrayList<app#Ast>.clear()>
line: 161 [0x4] 4:	movl 0
          [0x5] 5:	movn #3
          [0x6] 6:	pushobj
          [0x7] 7:	call @1050 // <std#ArrayList<app#Token>.clear()>
line: 163 [0x8] 8:	movl 1
          [0x9] 9:	movn #0
          [0xa] 10:	nop
          [0xb] 11:	movi #0, adx
          [0xd] 13:	iaload_2 ebx, adx
          [0xe] 14:	rstore ebx
          [0xf] 15:	movl 0
          [0x10] 16:	movn #0
          [0x11] 17:	movi #0, adx
          [0x13] 19:	loadval ecx
          [0x14] 20:	rmov adx, ecx
line: 164 [0x15] 21:	movl 1
          [0x16] 22:	movn #1
          [0x17] 23:	nop
          [0x18] 24:	movi #0, adx
          [0x1a] 26:	iaload_2 ebx, adx
          [0x1b] 27:	rstore ebx
          [0x1c] 28:	movl 0
          [0x1d] 29:	movn #1
          [0x1e] 30:	movi #0, adx
          [0x20] 32:	loadval ecx
          [0x21] 33:	rmov adx, ecx
line: 165 [0x22] 34:	movl 1
          [0x23] 35:	movn #2
          [0x24] 36:	pushobj
          [0x25] 37:	movl 0
          [0x26] 38:	movn #2
          [0x27] 39:	popobj
line: 166 [0x28] 40:	movl 1
          [0x29] 41:	movn #4
          [0x2a] 42:	pushobj
          [0x2b] 43:	movl 0
          [0x2c] 44:	movn #4
          [0x2d] 45:	popobj
line: 167 [0x2e] 46:	movl 1
          [0x2f] 47:	movn #3
          [0x30] 48:	pushobj
          [0x31] 49:	movl 0
          [0x32] 50:	movn #3
          [0x33] 51:	popobj
          [0x34] 52:	ret

func:@827 [app#Ast.popToken] in file: lib/support//bootstrap//frontend//parser//Ast.sharp:171:24: note:  
		    public def popToken() {
		                       ^


popToken:
line: 171 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	pushobj
          [0x3] 3:	call @1046 // <std#ArrayList<app#Token>.popBack()>
          [0x4] 4:	ret

func:@828 [app#Ast.popChild] in file: lib/support//bootstrap//frontend//parser//Ast.sharp:175:24: note:  
		    public def popChild() {
		                       ^


popChild:
line: 175 [0x0] 0:	movl 0
          [0x1] 1:	movn #4
          [0x2] 2:	pushobj
          [0x3] 3:	call @1067 // <std#ArrayList<app#Ast>.popBack()>
          [0x4] 4:	ret

func:@829 [app#Ast.getType] in file: lib/support//bootstrap//frontend//parser//Ast.sharp:179:23: note:  
		    public def getType() : AstType {
		                      ^


getType:
line: 179 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	returnobj
          [0x3] 3:	ret

func:@830 [app#Ast.setType] in file: lib/support//bootstrap//frontend//parser//Ast.sharp:183:23: note:  
		    public def setType(AstType type) {
		                      ^


setType:
line: 183 [0x0] 0:	movl 1
          [0x1] 1:	pushobj
          [0x2] 2:	movl 0
          [0x3] 3:	movn #2
          [0x4] 4:	popobj
          [0x5] 5:	ret

func:@831 [app#Parser.Parser] in file: lib/support//bootstrap//frontend//parser//Parser.sharp:24:18: note:  
		    public Parser(Tokenizer tokenizer)
		                 ^


Parser:
line: 25 [0x0] 0:	movl 1
         [0x1] 1:	pushobj
         [0x2] 2:	movl 0
         [0x3] 3:	movn #9
         [0x4] 4:	popobj
line: 27 [0x5] 5:	movl 1
         [0x6] 6:	checknull
         [0x7] 7:	not cmt, cmt
         [0x8] 8:	movr ebx, cmt
         [0x9] 9:	cmp ebx, 1
         [0xa] 10:	movr ebx, cmt
         [0xb] 11:	skne 26 // pc = 37
         [0xc] 12:	istore 1
         [0xd] 13:	movl 1
         [0xe] 14:	pushobj
         [0xf] 15:	call @884 // <app#Tokenizer.getErrors()>
         [0x10] 16:	movsl #0
         [0x11] 17:	pop
         [0x12] 18:	checknull
         [0x13] 19:	not cmt, cmt
         [0x14] 20:	movr ebx, cmt
         [0x15] 21:	loadval ecx
         [0x16] 22:	and ecx, ebx
         [0x17] 23:	movr ebx, cmt
         [0x18] 24:	cmp ebx, 1
         [0x19] 25:	movr ebx, cmt
         [0x1a] 26:	skne 11 // pc = 37
         [0x1b] 27:	istore 1
         [0x1c] 28:	movl 1
         [0x1d] 29:	pushobj
         [0x1e] 30:	call @884 // <app#Tokenizer.getErrors()>
         [0x1f] 31:	call @790 // <app#ErrorManager.hasErrors()>
         [0x20] 32:	loadval ebx
         [0x21] 33:	not ebx, ebx
         [0x22] 34:	loadval ecx
         [0x23] 35:	and ecx, ebx
         [0x24] 36:	movr ebx, cmt
         [0x25] 37:	movr cmt, ebx
         [0x26] 38:	movi #154, adx
         [0x28] 40:	ifne
line: 30 [0x29] 41:	new_class @79 // std#ArrayList<app#Token>
         [0x2a] 42:	call @1031 // <std#ArrayList<app#Token>.ArrayList()>
         [0x2b] 43:	movl 0
         [0x2c] 44:	movn #10
         [0x2d] 45:	popobj
line: 31 [0x2e] 46:	new_class @80 // std#ArrayList<app#Ast>
         [0x2f] 47:	call @1052 // <std#ArrayList<app#Ast>.ArrayList()>
         [0x30] 48:	movl 0
         [0x31] 49:	movn #4
         [0x32] 50:	popobj
line: 32 [0x33] 51:	new_class @81 // std#Dictionary<var,app#Ast>
         [0x34] 52:	call @1073 // <std#Dictionary<var,app#Ast>.Dictionary()>
         [0x35] 53:	movl 0
         [0x36] 54:	movn #5
         [0x37] 55:	popobj
line: 33 [0x38] 56:	movl 1
         [0x39] 57:	pushobj
         [0x3a] 58:	call @886 // <app#Tokenizer.getLines()>
         [0x3b] 59:	movl 0
         [0x3c] 60:	movn #6
         [0x3d] 61:	popobj
line: 34 [0x3e] 62:	movl 1
         [0x3f] 63:	pushobj
         [0x40] 64:	call @890 // <app#Tokenizer.getTokens()>
         [0x41] 65:	movl 0
         [0x42] 66:	movn #8
         [0x43] 67:	popobj
line: 36 [0x44] 68:	movl 0
         [0x45] 69:	pushobj
         [0x46] 70:	call @832 // <app#Parser.parse()>
line: 38 [0x47] 71:	new_class @45 // std#strbuf
         [0x48] 72:	newstr @226 // ""
         [0x49] 73:	call @519 // <std#strbuf.strbuf(var[])>
         [0x4a] 74:	movl 2
         [0x4b] 75:	popobj
line: 39 [0x4c] 76:	istorel 0, fp+3
         [0x4e] 78:	movl 0
         [0x4f] 79:	movn #4
         [0x50] 80:	pushobj
         [0x51] 81:	call @1057 // <std#ArrayList<app#Ast>.size()>
         [0x52] 82:	loadval egx
         [0x53] 83:	loadl ebx, fp+3
         [0x54] 84:	lt ebx, egx
         [0x55] 85:	movr ebx, cmt
         [0x56] 86:	movi #122, adx
         [0x58] 88:	ifne
line: 40 [0x59] 89:	movl 0
         [0x5a] 90:	movn #4
         [0x5b] 91:	pushobj
         [0x5c] 92:	loadl ebx, fp+3
         [0x5d] 93:	rstore ebx
         [0x5e] 94:	call @1060 // <std#ArrayList<app#Ast>.get(var)>
         [0x5f] 95:	movl 4
         [0x60] 96:	popobj
line: 41 [0x61] 97:	movl 4
         [0x62] 98:	checknull
         [0x63] 99:	not cmt, cmt
         [0x64] 100:	movr ebx, cmt
         [0x65] 101:	movi #110, adx
         [0x67] 103:	ifne
line: 42 [0x68] 104:	movl 4
         [0x69] 105:	pushobj
         [0x6a] 106:	movl 2
         [0x6b] 107:	pushobj
         [0x6c] 108:	call @824 // <app#Ast.toString(std#strbuf)>
         [0x6d] 109:	goto @116
line: 44 [0x6e] 110:	movl 2
         [0x6f] 111:	pushobj
         [0x70] 112:	newstr @342 // "null\n"
         [0x71] 113:	call @543 // <std#strbuf.$operator+=(var[])>
         [0x72] 114:	pop
         [0x73] 115:	nop
         [0x74] 116:	nop
         [0x75] 117:	loadl ebx, fp+3
         [0x76] 118:	movi #1, ecx
         [0x78] 120:	addl ecx, @3
         [0x79] 121:	goto @78
line: 47 [0x7a] 122:	new_class @17 // std.io#File
         [0x7b] 123:	new_class @46 // std#string
         [0x7c] 124:	newstr @345 // "tree.txt"
         [0x7d] 125:	call @558 // <std#string.string(var[])>
         [0x7e] 126:	call @136 // <std.io#File.File(std#string)>
         [0x7f] 127:	movl 5
         [0x80] 128:	popobj
line: 48 [0x81] 129:	movl 5
         [0x82] 130:	pushobj
         [0x83] 131:	call @151 // <std.io#File.create()>
line: 49 [0x84] 132:	new_class @20 // std.io#IOStream
         [0x85] 133:	movl 5
         [0x86] 134:	pushobj
         [0x87] 135:	movg @20 // @std.io#IOStream
         [0x88] 136:	movn #5
         [0x89] 137:	movi #0, adx
         [0x8b] 139:	iaload_2 ebx, adx
         [0x8c] 140:	rstore ebx
         [0x8d] 141:	call @200 // <std.io#IOStream.IOStream(std.io#File,var)>
         [0x8e] 142:	movl 6
         [0x8f] 143:	popobj
line: 50 [0x90] 144:	movl 6
         [0x91] 145:	pushobj
         [0x92] 146:	movl 2
         [0x93] 147:	pushobj
         [0x94] 148:	call @557 // <std#strbuf.toString()>
         [0x95] 149:	call @208 // <std.io#IOStream.write(std#string)>
line: 51 [0x96] 150:	movl 6
         [0x97] 151:	pushobj
         [0x98] 152:	call @204 // <std.io#IOStream.close()>
         [0x99] 153:	nop
         [0x9a] 154:	nop
         [0x9b] 155:	movl 0
         [0x9c] 156:	returnobj
         [0x9d] 157:	ret

func:@832 [app#Parser.parse] in file: lib/support//bootstrap//frontend//parser//Parser.sharp:57:22: note:  
		    private def parse() {
		                     ^


parse:
line: 57 [0x0] 0:	movl 0
         [0x1] 1:	movn #9
         [0x2] 2:	pushobj
         [0x3] 3:	call @887 // <app#Tokenizer.getFile()>
         [0x4] 4:	movl 0
         [0x5] 5:	movn #0
         [0x6] 6:	popobj
line: 58 [0x7] 7:	new_class @54 // app#ErrorManager
         [0x8] 8:	movl 0
         [0x9] 9:	movn #6
         [0xa] 10:	pushobj
         [0xb] 11:	movl 0
         [0xc] 12:	movn #0
         [0xd] 13:	pushobj
         [0xe] 14:	movi #1, ebx
         [0x10] 16:	rstore ebx
         [0x11] 17:	movg @60 // @app#Options
         [0x12] 18:	movn #0
         [0x13] 19:	movi #0, adx
         [0x15] 21:	iaload_2 ebx, adx
         [0x16] 22:	rstore ebx
         [0x17] 23:	call @782 // <app#ErrorManager.ErrorManager(std#ArrayList<std#string>,std#string,var,var)>
         [0x18] 24:	movl 0
         [0x19] 25:	movn #11
         [0x1a] 26:	popobj
line: 59 [0x1b] 27:	movl 0
         [0x1c] 28:	movn #8
         [0x1d] 29:	pushobj
         [0x1e] 30:	movl 0
         [0x1f] 31:	movn #2
         [0x20] 32:	movi #0, adx
         [0x22] 34:	chklen adx
         [0x23] 35:	iaload_2 ebx, adx
         [0x24] 36:	inc ebx
         [0x25] 37:	rmov adx, ebx
         [0x26] 38:	dec ebx
         [0x27] 39:	movsl #0
         [0x28] 40:	chklen ebx
         [0x29] 41:	movnd ebx
         [0x2a] 42:	pop
         [0x2b] 43:	pushobj
         [0x2c] 44:	movl 0
         [0x2d] 45:	movn #7
         [0x2e] 46:	popobj
line: 62 [0x2f] 47:	movi #1, ebx
         [0x31] 49:	movr cmt, ebx
         [0x32] 50:	movi #148, adx
         [0x34] 52:	ifne
line: 64 [0x35] 53:	movl 0
         [0x36] 54:	pushobj
         [0x37] 55:	movl 0
         [0x38] 56:	movn #7
         [0x39] 57:	pushobj
         [0x3a] 58:	call @847 // <app#Parser.isAccessType(app#Token)>
         [0x3b] 59:	loadval cmt
         [0x3c] 60:	movi #67, adx
         [0x3e] 62:	ifne
line: 65 [0x3f] 63:	movl 0
         [0x40] 64:	pushobj
         [0x41] 65:	call @840 // <app#Parser.parseAccessTypes()>
         [0x42] 66:	nop
         [0x43] 67:	nop
line: 67 [0x44] 68:	movl 0
         [0x45] 69:	pushobj
         [0x46] 70:	call @841 // <app#Parser.quit()>
         [0x47] 71:	loadval cmt
         [0x48] 72:	movi #77, adx
         [0x4a] 74:	ifne
line: 67 [0x4b] 75:	goto @148
         [0x4c] 76:	nop
         [0x4d] 77:	nop
line: 69 [0x4e] 78:	movl 0
         [0x4f] 79:	pushobj
         [0x50] 80:	call @848 // <app#Parser.isEnd()>
         [0x51] 81:	loadval cmt
         [0x52] 82:	movi #91, adx
         [0x54] 84:	ifne
line: 70 [0x55] 85:	movl 0
         [0x56] 86:	movn #10
         [0x57] 87:	pushobj
         [0x58] 88:	call @1050 // <std#ArrayList<app#Token>.clear()>
line: 71 [0x59] 89:	ret
         [0x5a] 90:	goto @139
         [0x5b] 91:	movl 0
         [0x5c] 92:	pushobj
         [0x5d] 93:	movl 0
         [0x5e] 94:	movn #7
         [0x5f] 95:	pushobj
         [0x60] 96:	movg @57 // @app#Parser
         [0x61] 97:	movn #14
         [0x62] 98:	pushobj
         [0x63] 99:	call @839 // <app#Parser.isDecl(app#Token,var[])>
         [0x64] 100:	loadval cmt
         [0x65] 101:	movi #138, adx
         [0x67] 103:	ifne
line: 73 [0x68] 104:	movi #0, ebx
         [0x6a] 106:	rstore ebx
         [0x6b] 107:	movl 0
         [0x6c] 108:	movn #10
         [0x6d] 109:	pushobj
         [0x6e] 110:	call @1036 // <std#ArrayList<app#Token>.size()>
         [0x6f] 111:	loadval ebx
         [0x70] 112:	loadval ecx
         [0x71] 113:	gt ebx, ecx
         [0x72] 114:	movr ebx, cmt
         [0x73] 115:	movi #132, adx
         [0x75] 117:	ifne
line: 74 [0x76] 118:	movl 0
         [0x77] 119:	movn #11
         [0x78] 120:	pushobj
         [0x79] 121:	movg @68 // @app#CompilerError
         [0x7a] 122:	movn #11
         [0x7b] 123:	pushobj
         [0x7c] 124:	movl 0
         [0x7d] 125:	movn #7
         [0x7e] 126:	pushobj
         [0x7f] 127:	new_class @46 // std#string
         [0x80] 128:	newstr @226 // ""
         [0x81] 129:	call @558 // <std#string.string(var[])>
         [0x82] 130:	call @794 // <app#ErrorManager.createNewError(app#CompilerError,app#Token,std#string)>
         [0x83] 131:	nop
         [0x84] 132:	nop
line: 75 [0x85] 133:	movl 0
         [0x86] 134:	pushobj
         [0x87] 135:	pushnil 
         [0x88] 136:	call @833 // <app#Parser.parseModuleDecl(app#Ast)>
         [0x89] 137:	goto @139
         [0x8a] 138:	nop
         [0x8b] 139:	nop
line: 78 [0x8c] 140:	movl 0
line: 79 [0x8d] 141:	pushobj
         [0x8e] 142:	call @846 // <app#Parser.advance()>
line: 80 [0x8f] 143:	movl 0
         [0x90] 144:	movn #10
         [0x91] 145:	pushobj
         [0x92] 146:	call @1050 // <std#ArrayList<app#Token>.clear()>
         [0x93] 147:	goto @47
line: 83 [0x94] 148:	movi #1, ebx
         [0x96] 150:	nop
         [0x97] 151:	rstore ebx
         [0x98] 152:	movl 0
         [0x99] 153:	movn #3
         [0x9a] 154:	movi #0, adx
         [0x9c] 156:	loadval ecx
         [0x9d] 157:	rmov adx, ecx
         [0x9e] 158:	ret

func:@833 [app#Parser.parseModuleDecl] in file: lib/support//bootstrap//frontend//parser//Parser.sharp:87:32: note:  
		    private def parseModuleDecl(Ast ast) {
		                               ^


parseModuleDecl:
line: 87 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	movl 1
         [0x3] 3:	pushobj
         [0x4] 4:	movg @69 // @app#AstType
         [0x5] 5:	movn #8
         [0x6] 6:	pushobj
         [0x7] 7:	call @836 // <app#Parser.getAst(app#Ast,app#AstType)>
         [0x8] 8:	movl 2
         [0x9] 9:	popobj
line: 88 [0xa] 10:	movl 2
         [0xb] 11:	pushobj
         [0xc] 12:	movl 0
         [0xd] 13:	movn #7
         [0xe] 14:	pushobj
         [0xf] 15:	call @811 // <app#Ast.add(app#Token)>
line: 89 [0x10] 16:	movl 0
         [0x11] 17:	pushobj
         [0x12] 18:	call @846 // <app#Parser.advance()>
line: 91 [0x13] 19:	movl 0
         [0x14] 20:	pushobj
         [0x15] 21:	movl 2
         [0x16] 22:	pushobj
         [0x17] 23:	call @835 // <app#Parser.expectIdentifier(app#Ast)>
         [0x18] 24:	pop
line: 92 [0x19] 25:	movl 0
         [0x1a] 26:	pushobj
         [0x1b] 27:	movi #1, ebx
         [0x1d] 29:	rstore ebx
         [0x1e] 30:	call @837 // <app#Parser.peek(var)>
         [0x1f] 31:	movg @71 // @app#TokenType
         [0x20] 32:	movn #11
         [0x21] 33:	pushobj
         [0x22] 34:	call @859 // <app#Token.$operator==(app#TokenType)>
         [0x23] 35:	loadval cmt
         [0x24] 36:	movi #93, adx
         [0x26] 38:	ifne
line: 93 [0x27] 39:	movl 0
         [0x28] 40:	pushobj
         [0x29] 41:	call @846 // <app#Parser.advance()>
line: 94 [0x2a] 42:	movl 0
         [0x2b] 43:	movn #7
         [0x2c] 44:	pushobj
         [0x2d] 45:	movg @71 // @app#TokenType
         [0x2e] 46:	movn #11
         [0x2f] 47:	pushobj
         [0x30] 48:	call @859 // <app#Token.$operator==(app#TokenType)>
         [0x31] 49:	loadval cmt
         [0x32] 50:	movi #92, adx
         [0x34] 52:	ifne
line: 95 [0x35] 53:	movl 2
         [0x36] 54:	pushobj
         [0x37] 55:	movl 0
         [0x38] 56:	movn #7
         [0x39] 57:	pushobj
         [0x3a] 58:	call @811 // <app#Ast.add(app#Token)>
line: 96 [0x3b] 59:	movl 0
         [0x3c] 60:	pushobj
         [0x3d] 61:	call @846 // <app#Parser.advance()>
line: 98 [0x3e] 62:	movl 0
         [0x3f] 63:	movn #7
         [0x40] 64:	pushobj
         [0x41] 65:	movg @71 // @app#TokenType
         [0x42] 66:	movn #14
         [0x43] 67:	pushobj
         [0x44] 68:	call @859 // <app#Token.$operator==(app#TokenType)>
         [0x45] 69:	loadval cmt
         [0x46] 70:	movi #81, adx
         [0x48] 72:	ifne
line: 99 [0x49] 73:	movl 2
         [0x4a] 74:	pushobj
         [0x4b] 75:	movl 0
         [0x4c] 76:	movn #7
         [0x4d] 77:	pushobj
         [0x4e] 78:	call @811 // <app#Ast.add(app#Token)>
line: 100 [0x4f] 79:	ret
          [0x50] 80:	nop
          [0x51] 81:	nop
line: 103 [0x52] 82:	movl 0
          [0x53] 83:	pushobj
          [0x54] 84:	movl 2
          [0x55] 85:	pushobj
          [0x56] 86:	call @835 // <app#Parser.expectIdentifier(app#Ast)>
          [0x57] 87:	pop
line: 104 [0x58] 88:	movl 0
          [0x59] 89:	pushobj
          [0x5a] 90:	call @846 // <app#Parser.advance()>
          [0x5b] 91:	goto @42
          [0x5c] 92:	nop
          [0x5d] 93:	nop
line: 107 [0x5e] 94:	movl 0
          [0x5f] 95:	pushobj
          [0x60] 96:	movg @71 // @app#TokenType
          [0x61] 97:	movn #18
          [0x62] 98:	pushobj
          [0x63] 99:	movl 2
          [0x64] 100:	pushobj
          [0x65] 101:	newstr @346 // "`;`"
          [0x66] 102:	call @842 // <app#Parser.expect(app#TokenType,app#Ast,var[])>
          [0x67] 103:	ret

func:@834 [app#Parser.isKeyword] in file: lib/support//bootstrap//frontend//parser//Parser.sharp:167:26: note:  
		    private def isKeyword(string key) : var {
		                         ^


isKeyword:
line: 167 [0x0] 0:	movi #0, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movg @57 // @app#Parser
          [0x4] 4:	movn #12
          [0x5] 5:	smov ebx, sp+0
          [0x6] 6:	sizeof egx
          [0x7] 7:	lt ebx, egx
          [0x8] 8:	movi #35, adx
          [0xa] 10:	ifne
          [0xb] 11:	movnd ebx
          [0xc] 12:	vcast 1
          [0xd] 13:	pushobj
          [0xe] 14:	movl 2
          [0xf] 15:	popobj
line: 168 [0x10] 16:	movl 1
          [0x11] 17:	pushobj
          [0x12] 18:	movl 2
          [0x13] 19:	pushobj
          [0x14] 20:	call @576 // <std#string.$operator==(var[])>
          [0x15] 21:	loadval cmt
          [0x16] 22:	movi #30, adx
          [0x18] 24:	ifne
line: 169 [0x19] 25:	movi #1, ebx
          [0x1b] 27:	return_val ebx
          [0x1c] 28:	ret
          [0x1d] 29:	nop
          [0x1e] 30:	nop
          [0x1f] 31:	smov ebx, sp+0
          [0x20] 32:	inc ebx
          [0x21] 33:	smovr ebx, sp+0
          [0x22] 34:	goto @3
          [0x23] 35:	pop
line: 172 [0x24] 36:	movi #0, ebx
          [0x26] 38:	return_val ebx
          [0x27] 39:	ret

func:@835 [app#Parser.expectIdentifier] in file: lib/support//bootstrap//frontend//parser//Parser.sharp:176:33: note:  
		    private def expectIdentifier(Ast ast) : var {
		                                ^


expectIdentifier:
line: 177 [0x0] 0:	movl 0
          [0x1] 1:	movn #7
          [0x2] 2:	pushobj
          [0x3] 3:	movg @70 // @app#TokenId
          [0x4] 4:	movn #3
          [0x5] 5:	pushobj
          [0x6] 6:	call @858 // <app#Token.$operator==(app#TokenId)>
          [0x7] 7:	loadval ebx
          [0x8] 8:	cmp ebx, 1
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	skne 14 // pc = 24
          [0xb] 11:	istore 1
          [0xc] 12:	movl 0
          [0xd] 13:	pushobj
          [0xe] 14:	movl 0
          [0xf] 15:	movn #7
          [0x10] 16:	pushobj
          [0x11] 17:	call @861 // <app#Token.getToken()>
          [0x12] 18:	call @834 // <app#Parser.isKeyword(std#string)>
          [0x13] 19:	loadval ebx
          [0x14] 20:	not ebx, ebx
          [0x15] 21:	loadval ecx
          [0x16] 22:	and ecx, ebx
          [0x17] 23:	movr ebx, cmt
          [0x18] 24:	movr cmt, ebx
          [0x19] 25:	movi #39, adx
          [0x1b] 27:	ifne
line: 179 [0x1c] 28:	movl 1
          [0x1d] 29:	pushobj
          [0x1e] 30:	movl 0
          [0x1f] 31:	movn #7
          [0x20] 32:	pushobj
          [0x21] 33:	call @811 // <app#Ast.add(app#Token)>
line: 180 [0x22] 34:	movi #1, ebx
          [0x24] 36:	return_val ebx
          [0x25] 37:	ret
          [0x26] 38:	goto @53
line: 182 [0x27] 39:	movl 0
          [0x28] 40:	movn #11
          [0x29] 41:	pushobj
          [0x2a] 42:	movg @68 // @app#CompilerError
          [0x2b] 43:	movn #10
          [0x2c] 44:	pushobj
          [0x2d] 45:	movl 0
          [0x2e] 46:	movn #7
          [0x2f] 47:	pushobj
          [0x30] 48:	new_class @46 // std#string
          [0x31] 49:	newstr @347 // "expected identifier"
          [0x32] 50:	call @558 // <std#string.string(var[])>
          [0x33] 51:	call @794 // <app#ErrorManager.createNewError(app#CompilerError,app#Token,std#string)>
          [0x34] 52:	nop
          [0x35] 53:	nop
line: 185 [0x36] 54:	movi #0, ebx
          [0x38] 56:	return_val ebx
          [0x39] 57:	ret

func:@836 [app#Parser.getAst] in file: lib/support//bootstrap//frontend//parser//Parser.sharp:189:23: note:  
		    private def getAst(Ast ast, AstType type) : Ast {
		                      ^


getAst:
line: 189 [0x0] 0:	movl 1
          [0x1] 1:	checknull
          [0x2] 2:	movr ebx, cmt
          [0x3] 3:	movi #30, adx
          [0x5] 5:	ifne
line: 191 [0x6] 6:	movl 0
          [0x7] 7:	movn #4
          [0x8] 8:	pushobj
          [0x9] 9:	new_class @56 // app#Ast
          [0xa] 10:	movl 2
          [0xb] 11:	pushobj
          [0xc] 12:	movl 0
          [0xd] 13:	movn #7
          [0xe] 14:	pushobj
          [0xf] 15:	call @863 // <app#Token.getLine()>
          [0x10] 16:	movl 0
          [0x11] 17:	movn #7
          [0x12] 18:	pushobj
          [0x13] 19:	call @862 // <app#Token.getCol()>
          [0x14] 20:	call @809 // <app#Ast.Ast(app#AstType,var,var)>
          [0x15] 21:	call @1066 // <std#ArrayList<app#Ast>.add(app#Ast)>
line: 192 [0x16] 22:	movl 0
          [0x17] 23:	movn #4
          [0x18] 24:	pushobj
          [0x19] 25:	call @1061 // <std#ArrayList<app#Ast>.last()>
          [0x1a] 26:	movsl #0
          [0x1b] 27:	returnobj
          [0x1c] 28:	ret
          [0x1d] 29:	goto @52
line: 194 [0x1e] 30:	movl 1
          [0x1f] 31:	pushobj
          [0x20] 32:	new_class @56 // app#Ast
          [0x21] 33:	movl 2
          [0x22] 34:	pushobj
          [0x23] 35:	movl 0
          [0x24] 36:	movn #7
          [0x25] 37:	pushobj
          [0x26] 38:	call @863 // <app#Token.getLine()>
          [0x27] 39:	movl 0
          [0x28] 40:	movn #7
          [0x29] 41:	pushobj
          [0x2a] 42:	call @862 // <app#Token.getCol()>
          [0x2b] 43:	call @809 // <app#Ast.Ast(app#AstType,var,var)>
          [0x2c] 44:	call @810 // <app#Ast.add(app#Ast)>
line: 195 [0x2d] 45:	movl 1
          [0x2e] 46:	pushobj
          [0x2f] 47:	call @820 // <app#Ast.last()>
          [0x30] 48:	movsl #0
          [0x31] 49:	returnobj
          [0x32] 50:	ret
          [0x33] 51:	nop
          [0x34] 52:	nop
          [0x35] 53:	pushnil 
          [0x36] 54:	popobj
          [0x37] 55:	returnobj
          [0x38] 56:	ret

func:@837 [app#Parser.peek] in file: lib/support//bootstrap//frontend//parser//Parser.sharp:200:21: note:  
		    private def peek(var forward) : Token {
		                    ^


peek:
line: 200 [0x0] 0:	movl 0
          [0x1] 1:	movn #8
          [0x2] 2:	sizeof ebx
          [0x3] 3:	rstore ebx
          [0x4] 4:	loadl ebx, fp+1
          [0x5] 5:	rstore ebx
          [0x6] 6:	movl 0
          [0x7] 7:	movn #2
          [0x8] 8:	movi #0, adx
          [0xa] 10:	chklen adx
          [0xb] 11:	iaload_2 ebx, adx
          [0xc] 12:	loadval egx
          [0xd] 13:	add ebx, egx -> ebx
          [0xf] 15:	rstore ebx
          [0x10] 16:	loadval ebx
          [0x11] 17:	loadval ecx
          [0x12] 18:	gte ebx, ecx
          [0x13] 19:	movr ebx, cmt
          [0x14] 20:	movi #44, adx
          [0x16] 22:	ifne
line: 201 [0x17] 23:	movl 0
          [0x18] 24:	movn #8
          [0x19] 25:	pushobj
          [0x1a] 26:	movi #1, ebx
          [0x1c] 28:	rstore ebx
          [0x1d] 29:	movl 0
          [0x1e] 30:	movn #8
          [0x1f] 31:	sizeof ebx
          [0x20] 32:	loadval ecx
          [0x21] 33:	sub ebx, ecx -> ebx
          [0x23] 35:	rstore ebx
          [0x24] 36:	loadval ebx
          [0x25] 37:	movsl #0
          [0x26] 38:	chklen ebx
          [0x27] 39:	movnd ebx
          [0x28] 40:	pop
          [0x29] 41:	returnobj
          [0x2a] 42:	ret
          [0x2b] 43:	goto @67
line: 203 [0x2c] 44:	movl 0
          [0x2d] 45:	movn #8
          [0x2e] 46:	pushobj
          [0x2f] 47:	loadl ebx, fp+1
          [0x30] 48:	rstore ebx
          [0x31] 49:	movl 0
          [0x32] 50:	movn #2
          [0x33] 51:	movi #0, adx
          [0x35] 53:	chklen adx
          [0x36] 54:	iaload_2 ebx, adx
          [0x37] 55:	loadval egx
          [0x38] 56:	add ebx, egx -> ebx
          [0x3a] 58:	rstore ebx
          [0x3b] 59:	loadval ebx
          [0x3c] 60:	movsl #0
          [0x3d] 61:	chklen ebx
          [0x3e] 62:	movnd ebx
          [0x3f] 63:	pop
          [0x40] 64:	returnobj
          [0x41] 65:	ret
          [0x42] 66:	nop
          [0x43] 67:	nop
          [0x44] 68:	pushnil 
          [0x45] 69:	popobj
          [0x46] 70:	returnobj
          [0x47] 71:	ret

func:@838 [app#Parser.getErrors] in file: lib/support//bootstrap//frontend//parser//Parser.sharp:207:25: note:  
		    public def getErrors() : ErrorManager {
		                        ^


getErrors:
line: 207 [0x0] 0:	movl 0
          [0x1] 1:	movn #11
          [0x2] 2:	returnobj
          [0x3] 3:	ret

func:@839 [app#Parser.isDecl] in file: lib/support//bootstrap//frontend//parser//Parser.sharp:211:23: note:  
		    private def isDecl(Token token, var[] value) : var {
		                      ^


isDecl:
line: 211 [0x0] 0:	movl 1
          [0x1] 1:	pushobj
          [0x2] 2:	movg @70 // @app#TokenId
          [0x3] 3:	movn #3
          [0x4] 4:	pushobj
          [0x5] 5:	call @858 // <app#Token.$operator==(app#TokenId)>
          [0x6] 6:	loadval ebx
          [0x7] 7:	cmp ebx, 1
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	skne 11 // pc = 20
          [0xa] 10:	istore 1
          [0xb] 11:	movl 1
          [0xc] 12:	pushobj
          [0xd] 13:	movl 2
          [0xe] 14:	pushobj
          [0xf] 15:	call @855 // <app#Token.$operator==(var[])>
          [0x10] 16:	loadval ebx
          [0x11] 17:	loadval ecx
          [0x12] 18:	and ecx, ebx
          [0x13] 19:	movr ebx, cmt
          [0x14] 20:	return_val ebx
          [0x15] 21:	ret

func:@840 [app#Parser.parseAccessTypes] in file: lib/support//bootstrap//frontend//parser//Parser.sharp:215:33: note:  
		    private def parseAccessTypes() {
		                                ^


parseAccessTypes:
line: 215 [0x0] 0:	movl 0
          [0x1] 1:	movn #10
          [0x2] 2:	pushobj
          [0x3] 3:	call @1050 // <std#ArrayList<app#Token>.clear()>
line: 217 [0x4] 4:	movl 0
          [0x5] 5:	pushobj
          [0x6] 6:	movl 0
          [0x7] 7:	movn #7
          [0x8] 8:	pushobj
          [0x9] 9:	call @847 // <app#Parser.isAccessType(app#Token)>
          [0xa] 10:	loadval cmt
          [0xb] 11:	movi #25, adx
          [0xd] 13:	ifne
line: 219 [0xe] 14:	movl 0
          [0xf] 15:	movn #10
          [0x10] 16:	pushobj
          [0x11] 17:	movl 0
          [0x12] 18:	movn #7
          [0x13] 19:	pushobj
          [0x14] 20:	call @1045 // <std#ArrayList<app#Token>.add(app#Token)>
line: 220 [0x15] 21:	movl 0
          [0x16] 22:	pushobj
          [0x17] 23:	call @846 // <app#Parser.advance()>
          [0x18] 24:	goto @4
          [0x19] 25:	ret

func:@841 [app#Parser.quit] in file: lib/support//bootstrap//frontend//parser//Parser.sharp:225:21: note:  
		    private def quit() : var {
		                    ^


quit:
line: 225 [0x0] 0:	movl 0
          [0x1] 1:	movn #1
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 cmt, adx
          [0x6] 6:	movi #14, adx
          [0x8] 8:	ifne
line: 225 [0x9] 9:	movi #1, ebx
          [0xb] 11:	return_val ebx
          [0xc] 12:	ret
          [0xd] 13:	goto @46
          [0xe] 14:	movg @60 // @app#Options
          [0xf] 15:	movn #12
          [0x10] 16:	movi #0, adx
          [0x12] 18:	chklen adx
          [0x13] 19:	iaload_2 egx, adx
          [0x14] 20:	movl 0
          [0x15] 21:	movn #11
          [0x16] 22:	pushobj
          [0x17] 23:	call @789 // <app#ErrorManager.getRawErrorCount()>
          [0x18] 24:	loadval ebx
          [0x19] 25:	gt ebx, egx
          [0x1a] 26:	movr ebx, cmt
          [0x1b] 27:	movi #45, adx
          [0x1d] 29:	ifne
line: 227 [0x1e] 30:	movi #1, ebx
          [0x20] 32:	nop
          [0x21] 33:	rstore ebx
          [0x22] 34:	movl 0
          [0x23] 35:	movn #1
          [0x24] 36:	movi #0, adx
          [0x26] 38:	loadval ecx
          [0x27] 39:	rmov adx, ecx
line: 228 [0x28] 40:	movi #1, ebx
          [0x2a] 42:	return_val ebx
          [0x2b] 43:	ret
          [0x2c] 44:	goto @46
          [0x2d] 45:	nop
          [0x2e] 46:	nop
line: 231 [0x2f] 47:	movi #0, ebx
          [0x31] 49:	return_val ebx
          [0x32] 50:	ret

func:@842 [app#Parser.expect] in file: lib/support//bootstrap//frontend//parser//Parser.sharp:235:22: note:  
		    public def expect(TokenType type, Ast ast, var[] msg) {
		                     ^


expect:
line: 236 [0x0] 0:	movl 0
          [0x1] 1:	movn #7
          [0x2] 2:	pushobj
          [0x3] 3:	movl 1
          [0x4] 4:	pushobj
          [0x5] 5:	call @859 // <app#Token.$operator==(app#TokenType)>
          [0x6] 6:	loadval cmt
          [0x7] 7:	movi #17, adx
          [0x9] 9:	ifne
line: 237 [0xa] 10:	movl 2
          [0xb] 11:	pushobj
          [0xc] 12:	movl 0
          [0xd] 13:	movn #7
          [0xe] 14:	pushobj
          [0xf] 15:	call @811 // <app#Ast.add(app#Token)>
          [0x10] 16:	goto @34
line: 239 [0x11] 17:	movl 0
          [0x12] 18:	movn #11
          [0x13] 19:	pushobj
          [0x14] 20:	movg @68 // @app#CompilerError
          [0x15] 21:	movn #10
          [0x16] 22:	pushobj
          [0x17] 23:	movl 0
          [0x18] 24:	movn #7
          [0x19] 25:	pushobj
          [0x1a] 26:	new_class @46 // std#string
          [0x1b] 27:	newstr @348 // "expected "
          [0x1c] 28:	call @558 // <std#string.string(var[])>
          [0x1d] 29:	movl 3
          [0x1e] 30:	pushobj
          [0x1f] 31:	call @572 // <std#string.$operator+(var[])>
          [0x20] 32:	call @794 // <app#ErrorManager.createNewError(app#CompilerError,app#Token,std#string)>
          [0x21] 33:	nop
          [0x22] 34:	nop
          [0x23] 35:	ret

func:@843 [app#Parser.expect] in file: lib/support//bootstrap//frontend//parser//Parser.sharp:244:22: note:  
		    public def expect(TokenType type, var[] msg) : var {
		                     ^


expect:
line: 245 [0x0] 0:	movl 0
          [0x1] 1:	movn #7
          [0x2] 2:	pushobj
          [0x3] 3:	movl 1
          [0x4] 4:	pushobj
          [0x5] 5:	call @859 // <app#Token.$operator==(app#TokenType)>
          [0x6] 6:	loadval cmt
          [0x7] 7:	movi #15, adx
          [0x9] 9:	ifne
line: 246 [0xa] 10:	movi #1, ebx
          [0xc] 12:	return_val ebx
          [0xd] 13:	ret
          [0xe] 14:	goto @32
line: 248 [0xf] 15:	movl 0
          [0x10] 16:	movn #11
          [0x11] 17:	pushobj
          [0x12] 18:	movg @68 // @app#CompilerError
          [0x13] 19:	movn #10
          [0x14] 20:	pushobj
          [0x15] 21:	movl 0
          [0x16] 22:	movn #7
          [0x17] 23:	pushobj
          [0x18] 24:	new_class @46 // std#string
          [0x19] 25:	newstr @348 // "expected "
          [0x1a] 26:	call @558 // <std#string.string(var[])>
          [0x1b] 27:	movl 2
          [0x1c] 28:	pushobj
          [0x1d] 29:	call @572 // <std#string.$operator+(var[])>
          [0x1e] 30:	call @794 // <app#ErrorManager.createNewError(app#CompilerError,app#Token,std#string)>
          [0x1f] 31:	nop
          [0x20] 32:	nop
line: 251 [0x21] 33:	movi #0, ebx
          [0x23] 35:	return_val ebx
          [0x24] 36:	ret

func:@844 [app#Parser.expectToken] in file: lib/support//bootstrap//frontend//parser//Parser.sharp:255:27: note:  
		    public def expectToken(Ast ast, var[] token) {
		                          ^


expectToken:
line: 256 [0x0] 0:	movl 0
          [0x1] 1:	movn #7
          [0x2] 2:	pushobj
          [0x3] 3:	call @861 // <app#Token.getToken()>
          [0x4] 4:	movl 2
          [0x5] 5:	pushobj
          [0x6] 6:	call @577 // <std#string.$operator!=(var[])>
          [0x7] 7:	loadval cmt
          [0x8] 8:	movi #30, adx
          [0xa] 10:	ifne
line: 257 [0xb] 11:	movl 0
          [0xc] 12:	movn #11
          [0xd] 13:	pushobj
          [0xe] 14:	movg @68 // @app#CompilerError
          [0xf] 15:	movn #10
          [0x10] 16:	pushobj
          [0x11] 17:	movl 0
          [0x12] 18:	movn #7
          [0x13] 19:	pushobj
          [0x14] 20:	new_class @46 // std#string
          [0x15] 21:	newstr @349 // "expected `"
          [0x16] 22:	call @558 // <std#string.string(var[])>
          [0x17] 23:	movl 2
          [0x18] 24:	pushobj
          [0x19] 25:	call @572 // <std#string.$operator+(var[])>
          [0x1a] 26:	newstr @350 // "`"
          [0x1b] 27:	call @572 // <std#string.$operator+(var[])>
          [0x1c] 28:	call @794 // <app#ErrorManager.createNewError(app#CompilerError,app#Token,std#string)>
          [0x1d] 29:	goto @37
line: 259 [0x1e] 30:	movl 1
          [0x1f] 31:	pushobj
          [0x20] 32:	movl 0
          [0x21] 33:	movn #7
          [0x22] 34:	pushobj
          [0x23] 35:	call @811 // <app#Ast.add(app#Token)>
          [0x24] 36:	nop
          [0x25] 37:	nop
          [0x26] 38:	ret

func:@845 [app#Parser.expectToken] in file: lib/support//bootstrap//frontend//parser//Parser.sharp:264:27: note:  
		    public def expectToken(Ast ast, var[] token, var[] msg) {
		                          ^


expectToken:
line: 265 [0x0] 0:	movl 0
          [0x1] 1:	movn #7
          [0x2] 2:	pushobj
          [0x3] 3:	call @861 // <app#Token.getToken()>
          [0x4] 4:	movl 2
          [0x5] 5:	pushobj
          [0x6] 6:	call @577 // <std#string.$operator!=(var[])>
          [0x7] 7:	loadval cmt
          [0x8] 8:	movi #28, adx
          [0xa] 10:	ifne
line: 266 [0xb] 11:	movl 0
          [0xc] 12:	movn #11
          [0xd] 13:	pushobj
          [0xe] 14:	movg @68 // @app#CompilerError
          [0xf] 15:	movn #10
          [0x10] 16:	pushobj
          [0x11] 17:	movl 0
          [0x12] 18:	movn #7
          [0x13] 19:	pushobj
          [0x14] 20:	new_class @46 // std#string
          [0x15] 21:	newstr @348 // "expected "
          [0x16] 22:	call @558 // <std#string.string(var[])>
          [0x17] 23:	movl 3
          [0x18] 24:	pushobj
          [0x19] 25:	call @572 // <std#string.$operator+(var[])>
          [0x1a] 26:	call @794 // <app#ErrorManager.createNewError(app#CompilerError,app#Token,std#string)>
          [0x1b] 27:	goto @35
line: 268 [0x1c] 28:	movl 1
          [0x1d] 29:	pushobj
          [0x1e] 30:	movl 0
          [0x1f] 31:	movn #7
          [0x20] 32:	pushobj
          [0x21] 33:	call @811 // <app#Ast.add(app#Token)>
          [0x22] 34:	nop
          [0x23] 35:	nop
          [0x24] 36:	ret

func:@846 [app#Parser.advance] in file: lib/support//bootstrap//frontend//parser//Parser.sharp:273:24: note:  
		    private def advance() {
		                       ^


advance:
line: 273 [0x0] 0:	movl 0
          [0x1] 1:	movn #8
          [0x2] 2:	sizeof ebx
          [0x3] 3:	rstore ebx
          [0x4] 4:	movi #1, ebx
          [0x6] 6:	rstore ebx
          [0x7] 7:	movl 0
          [0x8] 8:	movn #2
          [0x9] 9:	movi #0, adx
          [0xb] 11:	chklen adx
          [0xc] 12:	iaload_2 ebx, adx
          [0xd] 13:	loadval egx
          [0xe] 14:	add ebx, egx -> ebx
          [0x10] 16:	rstore ebx
          [0x11] 17:	loadval ebx
          [0x12] 18:	loadval ecx
          [0x13] 19:	lt ebx, ecx
          [0x14] 20:	movr ebx, cmt
          [0x15] 21:	movi #45, adx
          [0x17] 23:	ifne
line: 274 [0x18] 24:	movl 0
          [0x19] 25:	movn #8
          [0x1a] 26:	pushobj
          [0x1b] 27:	movl 0
          [0x1c] 28:	movn #2
          [0x1d] 29:	movi #0, adx
          [0x1f] 31:	chklen adx
          [0x20] 32:	iaload_2 ebx, adx
          [0x21] 33:	inc ebx
          [0x22] 34:	rmov adx, ebx
          [0x23] 35:	dec ebx
          [0x24] 36:	movsl #0
          [0x25] 37:	chklen ebx
          [0x26] 38:	movnd ebx
          [0x27] 39:	pop
          [0x28] 40:	pushobj
          [0x29] 41:	movl 0
          [0x2a] 42:	movn #7
          [0x2b] 43:	popobj
          [0x2c] 44:	goto @68
line: 275 [0x2d] 45:	movl 0
          [0x2e] 46:	movn #8
          [0x2f] 47:	pushobj
          [0x30] 48:	movi #1, ebx
          [0x32] 50:	rstore ebx
          [0x33] 51:	movl 0
          [0x34] 52:	movn #8
          [0x35] 53:	sizeof ebx
          [0x36] 54:	loadval ecx
          [0x37] 55:	sub ebx, ecx -> ebx
          [0x39] 57:	rstore ebx
          [0x3a] 58:	loadval ebx
          [0x3b] 59:	movsl #0
          [0x3c] 60:	chklen ebx
          [0x3d] 61:	movnd ebx
          [0x3e] 62:	pop
          [0x3f] 63:	pushobj
          [0x40] 64:	movl 0
          [0x41] 65:	movn #7
          [0x42] 66:	popobj
          [0x43] 67:	nop
          [0x44] 68:	nop
          [0x45] 69:	ret

func:@847 [app#Parser.isAccessType] in file: lib/support//bootstrap//frontend//parser//Parser.sharp:279:29: note:  
		    private def isAccessType(Token token) : var {
		                            ^


isAccessType:
line: 280 [0x0] 0:	movl 1
          [0x1] 1:	pushobj
          [0x2] 2:	movg @70 // @app#TokenId
          [0x3] 3:	movn #3
          [0x4] 4:	pushobj
          [0x5] 5:	call @858 // <app#Token.$operator==(app#TokenId)>
          [0x6] 6:	loadval ebx
          [0x7] 7:	cmp ebx, 1
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	skne 116 // pc = 125
          [0xa] 10:	istore 1
          [0xb] 11:	movl 1
          [0xc] 12:	pushobj
          [0xd] 13:	movg @57 // @app#Parser
          [0xe] 14:	movn #44
          [0xf] 15:	pushobj
          [0x10] 16:	call @855 // <app#Token.$operator==(var[])>
          [0x11] 17:	loadval ebx
          [0x12] 18:	loadval ecx
          [0x13] 19:	and ecx, ebx
          [0x14] 20:	movr ebx, cmt
          [0x15] 21:	movr cmt, ebx
          [0x16] 22:	movr ebx, cmt
          [0x17] 23:	skpe 102 // pc = 125
          [0x18] 24:	movl 1
          [0x19] 25:	pushobj
          [0x1a] 26:	movg @70 // @app#TokenId
          [0x1b] 27:	movn #3
          [0x1c] 28:	pushobj
          [0x1d] 29:	call @858 // <app#Token.$operator==(app#TokenId)>
          [0x1e] 30:	loadval ebx
          [0x1f] 31:	cmp ebx, 1
          [0x20] 32:	movr ebx, cmt
          [0x21] 33:	cmp ebx, 1
          [0x22] 34:	movr ebx, cmt
          [0x23] 35:	skne 90 // pc = 125
          [0x24] 36:	istore 1
          [0x25] 37:	movl 1
          [0x26] 38:	pushobj
          [0x27] 39:	movg @57 // @app#Parser
          [0x28] 40:	movn #43
          [0x29] 41:	pushobj
          [0x2a] 42:	call @855 // <app#Token.$operator==(var[])>
          [0x2b] 43:	loadval ebx
          [0x2c] 44:	loadval ecx
          [0x2d] 45:	and ecx, ebx
          [0x2e] 46:	movr ebx, cmt
          [0x2f] 47:	movr cmt, ebx
          [0x30] 48:	movr ebx, cmt
          [0x31] 49:	skpe 76 // pc = 125
          [0x32] 50:	movl 1
          [0x33] 51:	pushobj
          [0x34] 52:	movg @70 // @app#TokenId
          [0x35] 53:	movn #3
          [0x36] 54:	pushobj
          [0x37] 55:	call @858 // <app#Token.$operator==(app#TokenId)>
          [0x38] 56:	loadval ebx
          [0x39] 57:	cmp ebx, 1
          [0x3a] 58:	movr ebx, cmt
          [0x3b] 59:	cmp ebx, 1
          [0x3c] 60:	movr ebx, cmt
          [0x3d] 61:	skne 64 // pc = 125
          [0x3e] 62:	istore 1
          [0x3f] 63:	movl 1
          [0x40] 64:	pushobj
          [0x41] 65:	movg @57 // @app#Parser
          [0x42] 66:	movn #42
          [0x43] 67:	pushobj
          [0x44] 68:	call @855 // <app#Token.$operator==(var[])>
          [0x45] 69:	loadval ebx
          [0x46] 70:	loadval ecx
          [0x47] 71:	and ecx, ebx
          [0x48] 72:	movr ebx, cmt
          [0x49] 73:	movr cmt, ebx
          [0x4a] 74:	movr ebx, cmt
          [0x4b] 75:	skpe 50 // pc = 125
          [0x4c] 76:	movl 1
          [0x4d] 77:	pushobj
          [0x4e] 78:	movg @70 // @app#TokenId
          [0x4f] 79:	movn #3
          [0x50] 80:	pushobj
          [0x51] 81:	call @858 // <app#Token.$operator==(app#TokenId)>
          [0x52] 82:	loadval ebx
          [0x53] 83:	cmp ebx, 1
          [0x54] 84:	movr ebx, cmt
          [0x55] 85:	cmp ebx, 1
          [0x56] 86:	movr ebx, cmt
          [0x57] 87:	skne 38 // pc = 125
          [0x58] 88:	istore 1
          [0x59] 89:	movl 1
          [0x5a] 90:	pushobj
          [0x5b] 91:	movg @57 // @app#Parser
          [0x5c] 92:	movn #40
          [0x5d] 93:	pushobj
          [0x5e] 94:	call @855 // <app#Token.$operator==(var[])>
          [0x5f] 95:	loadval ebx
          [0x60] 96:	loadval ecx
          [0x61] 97:	and ecx, ebx
          [0x62] 98:	movr ebx, cmt
          [0x63] 99:	movr cmt, ebx
          [0x64] 100:	movr ebx, cmt
          [0x65] 101:	skpe 24 // pc = 125
          [0x66] 102:	movl 1
          [0x67] 103:	pushobj
          [0x68] 104:	movg @70 // @app#TokenId
          [0x69] 105:	movn #3
          [0x6a] 106:	pushobj
          [0x6b] 107:	call @858 // <app#Token.$operator==(app#TokenId)>
          [0x6c] 108:	loadval ebx
          [0x6d] 109:	cmp ebx, 1
          [0x6e] 110:	movr ebx, cmt
          [0x6f] 111:	cmp ebx, 1
          [0x70] 112:	movr ebx, cmt
          [0x71] 113:	skne 12 // pc = 125
          [0x72] 114:	istore 1
          [0x73] 115:	movl 1
          [0x74] 116:	pushobj
          [0x75] 117:	movg @57 // @app#Parser
          [0x76] 118:	movn #41
          [0x77] 119:	pushobj
          [0x78] 120:	call @855 // <app#Token.$operator==(var[])>
          [0x79] 121:	loadval ebx
          [0x7a] 122:	loadval ecx
          [0x7b] 123:	and ecx, ebx
          [0x7c] 124:	movr ebx, cmt
          [0x7d] 125:	return_val ebx
          [0x7e] 126:	ret

func:@848 [app#Parser.isEnd] in file: lib/support//bootstrap//frontend//parser//Parser.sharp:288:14: note:  
		    def isEnd() : var {
		             ^


isEnd:
line: 288 [0x0] 0:	movl 0
          [0x1] 1:	movn #7
          [0x2] 2:	pushobj
          [0x3] 3:	movg @71 // @app#TokenType
          [0x4] 4:	movn #54
          [0x5] 5:	pushobj
          [0x6] 6:	call @859 // <app#Token.$operator==(app#TokenType)>
          [0x7] 7:	loadval ebx
          [0x8] 8:	return_val ebx
          [0x9] 9:	ret

func:@849 [app#Parser.Parser] in file: lib/support//bootstrap//frontend//parser//Parser.sharp:9:6: note:  
		class Parser {
		     ^


Parser:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@850 [app#Token.Token] in file: lib/support//bootstrap//frontend//tokenizer//Token.sharp:17:17: note:  
		    public Token() {
		                ^


Token:
line: 17 [0x0] 0:	movl 0
         [0x1] 1:	movn #4
         [0x2] 2:	pushobj
         [0x3] 3:	newstr @226 // ""
         [0x4] 4:	call @578 // <std#string.$operator=(var[])>
line: 18 [0x5] 5:	movg @71 // @app#TokenType
         [0x6] 6:	movn #55
         [0x7] 7:	pushobj
         [0x8] 8:	movl 0
         [0x9] 9:	movn #3
         [0xa] 10:	popobj
line: 19 [0xb] 11:	movg @70 // @app#TokenId
         [0xc] 12:	movn #17
         [0xd] 13:	pushobj
         [0xe] 14:	movl 0
         [0xf] 15:	movn #2
         [0x10] 16:	popobj
         [0x11] 17:	movl 0
         [0x12] 18:	returnobj
         [0x13] 19:	ret

func:@851 [app#Token.Token] in file: lib/support//bootstrap//frontend//tokenizer//Token.sharp:23:17: note:  
		    public Token(string tok, TokenId id, TokenType type, var col, var line) {
		                ^


Token:
line: 23 [0x0] 0:	movl 1
         [0x1] 1:	pushobj
         [0x2] 2:	movl 0
         [0x3] 3:	movn #4
         [0x4] 4:	popobj
line: 24 [0x5] 5:	movl 3
         [0x6] 6:	pushobj
         [0x7] 7:	movl 0
         [0x8] 8:	movn #3
         [0x9] 9:	popobj
line: 25 [0xa] 10:	movl 2
         [0xb] 11:	pushobj
         [0xc] 12:	movl 0
         [0xd] 13:	movn #2
         [0xe] 14:	popobj
line: 26 [0xf] 15:	loadl ebx, fp+4
         [0x10] 16:	nop
         [0x11] 17:	rstore ebx
         [0x12] 18:	movl 0
         [0x13] 19:	movn #1
         [0x14] 20:	movi #0, adx
         [0x16] 22:	loadval ecx
         [0x17] 23:	rmov adx, ecx
line: 27 [0x18] 24:	loadl ebx, fp+5
         [0x19] 25:	nop
         [0x1a] 26:	rstore ebx
         [0x1b] 27:	movl 0
         [0x1c] 28:	movn #0
         [0x1d] 29:	movi #0, adx
         [0x1f] 31:	loadval ecx
         [0x20] 32:	rmov adx, ecx
         [0x21] 33:	movl 0
         [0x22] 34:	returnobj
         [0x23] 35:	ret

func:@852 [app#Token.Token] in file: lib/support//bootstrap//frontend//tokenizer//Token.sharp:32:17: note:  
		    public Token(string tok, TokenId id, var col, var line) {
		                ^


Token:
line: 32 [0x0] 0:	movl 1
         [0x1] 1:	pushobj
         [0x2] 2:	movl 0
         [0x3] 3:	movn #4
         [0x4] 4:	popobj
line: 33 [0x5] 5:	movg @71 // @app#TokenType
         [0x6] 6:	movn #55
         [0x7] 7:	pushobj
         [0x8] 8:	movl 0
         [0x9] 9:	movn #3
         [0xa] 10:	popobj
line: 34 [0xb] 11:	movl 2
         [0xc] 12:	pushobj
         [0xd] 13:	movl 0
         [0xe] 14:	movn #2
         [0xf] 15:	popobj
line: 35 [0x10] 16:	loadl ebx, fp+3
         [0x11] 17:	nop
         [0x12] 18:	rstore ebx
         [0x13] 19:	movl 0
         [0x14] 20:	movn #1
         [0x15] 21:	movi #0, adx
         [0x17] 23:	loadval ecx
         [0x18] 24:	rmov adx, ecx
line: 36 [0x19] 25:	loadl ebx, fp+4
         [0x1a] 26:	nop
         [0x1b] 27:	rstore ebx
         [0x1c] 28:	movl 0
         [0x1d] 29:	movn #0
         [0x1e] 30:	movi #0, adx
         [0x20] 32:	loadval ecx
         [0x21] 33:	rmov adx, ecx
         [0x22] 34:	movl 0
         [0x23] 35:	returnobj
         [0x24] 36:	ret

func:@853 [app#Token.$operator!=] in file: lib/support//bootstrap//frontend//tokenizer//Token.sharp:40:24: note:  
		    public def operator!=(TokenId id) : var {
		                       ^


$operator!=:
line: 40 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	pushobj
         [0x5] 5:	call @72 // <std#Enum.$operator!=(std#Enum)>
         [0x6] 6:	loadval ebx
         [0x7] 7:	return_val ebx
         [0x8] 8:	ret

func:@854 [app#Token.$operator!=] in file: lib/support//bootstrap//frontend//tokenizer//Token.sharp:44:24: note:  
		    public def operator!=(TokenType type) : var {
		                       ^


$operator!=:
line: 44 [0x0] 0:	movl 0
         [0x1] 1:	movn #3
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	pushobj
         [0x5] 5:	call @72 // <std#Enum.$operator!=(std#Enum)>
         [0x6] 6:	loadval ebx
         [0x7] 7:	return_val ebx
         [0x8] 8:	ret

func:@855 [app#Token.$operator==] in file: lib/support//bootstrap//frontend//tokenizer//Token.sharp:48:24: note:  
		    public def operator==(var[] token) : var {
		                       ^


$operator==:
line: 48 [0x0] 0:	movl 0
         [0x1] 1:	movn #4
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	pushobj
         [0x5] 5:	call @576 // <std#string.$operator==(var[])>
         [0x6] 6:	loadval ebx
         [0x7] 7:	return_val ebx
         [0x8] 8:	ret

func:@856 [app#Token.$operator!=] in file: lib/support//bootstrap//frontend//tokenizer//Token.sharp:56:24: note:  
		    public def operator!=(string token) : var {
		                       ^


$operator!=:
line: 56 [0x0] 0:	movl 0
         [0x1] 1:	movn #4
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	pushobj
         [0x5] 5:	call @575 // <std#string.$operator!=(std#string)>
         [0x6] 6:	loadval ebx
         [0x7] 7:	return_val ebx
         [0x8] 8:	ret

func:@857 [app#Token.$operator==] in file: lib/support//bootstrap//frontend//tokenizer//Token.sharp:60:24: note:  
		    public def operator==(Token entity) : var {
		                       ^


$operator==:
line: 60 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	movn #2
         [0x5] 5:	pushobj
         [0x6] 6:	call @74 // <std#Enum.$operator==(std#Enum)>
         [0x7] 7:	loadval ebx
         [0x8] 8:	cmp ebx, 1
         [0x9] 9:	movr ebx, cmt
         [0xa] 10:	skne 13 // pc = 23
         [0xb] 11:	istore 1
         [0xc] 12:	movl 0
         [0xd] 13:	movn #4
         [0xe] 14:	pushobj
         [0xf] 15:	movl 1
         [0x10] 16:	movn #4
         [0x11] 17:	pushobj
         [0x12] 18:	call @574 // <std#string.$operator==(std#string)>
         [0x13] 19:	loadval ebx
         [0x14] 20:	loadval ecx
         [0x15] 21:	and ecx, ebx
         [0x16] 22:	movr ebx, cmt
         [0x17] 23:	return_val ebx
         [0x18] 24:	ret

func:@858 [app#Token.$operator==] in file: lib/support//bootstrap//frontend//tokenizer//Token.sharp:64:24: note:  
		    public def operator==(TokenId id) : var {
		                       ^


$operator==:
line: 64 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	pushobj
         [0x5] 5:	call @74 // <std#Enum.$operator==(std#Enum)>
         [0x6] 6:	loadval ebx
         [0x7] 7:	return_val ebx
         [0x8] 8:	ret

func:@859 [app#Token.$operator==] in file: lib/support//bootstrap//frontend//tokenizer//Token.sharp:68:24: note:  
		    public def operator==(TokenType type) : var {
		                       ^


$operator==:
line: 68 [0x0] 0:	movl 0
         [0x1] 1:	movn #3
         [0x2] 2:	pushobj
         [0x3] 3:	movl 1
         [0x4] 4:	pushobj
         [0x5] 5:	call @74 // <std#Enum.$operator==(std#Enum)>
         [0x6] 6:	loadval ebx
         [0x7] 7:	return_val ebx
         [0x8] 8:	ret

func:@860 [app#Token.getId] in file: lib/support//bootstrap//frontend//tokenizer//Token.sharp:72:21: note:  
		    public def getId() : TokenId {
		                    ^


getId:
line: 72 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	returnobj
         [0x3] 3:	ret

func:@861 [app#Token.getToken] in file: lib/support//bootstrap//frontend//tokenizer//Token.sharp:76:24: note:  
		    public def getToken() : string {
		                       ^


getToken:
line: 76 [0x0] 0:	movl 0
         [0x1] 1:	movn #4
         [0x2] 2:	returnobj
         [0x3] 3:	ret

func:@862 [app#Token.getCol] in file: lib/support//bootstrap//frontend//tokenizer//Token.sharp:80:22: note:  
		    public def getCol() : var {
		                     ^


getCol:
line: 80 [0x0] 0:	movl 0
         [0x1] 1:	movn #1
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@863 [app#Token.getLine] in file: lib/support//bootstrap//frontend//tokenizer//Token.sharp:84:23: note:  
		    public def getLine() : var {
		                      ^


getLine:
line: 84 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@864 [app#Token.getType] in file: lib/support//bootstrap//frontend//tokenizer//Token.sharp:88:23: note:  
		    public def getType() : TokenType {
		                      ^


getType:
line: 88 [0x0] 0:	movl 0
         [0x1] 1:	movn #3
         [0x2] 2:	returnobj
         [0x3] 3:	ret

func:@865 [app#Token.toString] in file: lib/support//bootstrap//frontend//tokenizer//Token.sharp:92:24: note:  
		    public def delegate::toString() : string {
		                       ^


toString:
line: 92 [0x0] 0:	movl 0
         [0x1] 1:	movn #4
         [0x2] 2:	pushobj
         [0x3] 3:	newstr @351 // ": "
         [0x4] 4:	call @572 // <std#string.$operator+(var[])>
         [0x5] 5:	movl 0
         [0x6] 6:	movn #0
         [0x7] 7:	movi #0, adx
         [0x9] 9:	iaload_2 ebx, adx
         [0xa] 10:	rstore ebx
         [0xb] 11:	call @579 // <std#string.$operator+(var)>
         [0xc] 12:	newstr @340 // ","
         [0xd] 13:	call @572 // <std#string.$operator+(var[])>
         [0xe] 14:	movl 0
         [0xf] 15:	movn #1
         [0x10] 16:	movi #0, adx
         [0x12] 18:	iaload_2 ebx, adx
         [0x13] 19:	rstore ebx
         [0x14] 20:	call @579 // <std#string.$operator+(var)>
         [0x15] 21:	movsl #0
         [0x16] 22:	returnobj
         [0x17] 23:	ret

func:@866 [app#Tokenizer.Tokenizer] in file: lib/support//bootstrap//frontend//tokenizer//Tokenizer.sharp:23:22: note:  
		    private Tokenizer(){ /* Dont call */ }
		                     ^


Tokenizer:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@867 [app#Tokenizer.Tokenizer] in file: lib/support//bootstrap//frontend//tokenizer//Tokenizer.sharp:25:21: note:  
		    public Tokenizer(string text, string file)
		                    ^


Tokenizer:
line: 26 [0x0] 0:	movi #1, ebx
         [0x2] 2:	nop
         [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #8
         [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
line: 27 [0xa] 10:	movl 2
         [0xb] 11:	pushobj
         [0xc] 12:	movl 0
         [0xd] 13:	movn #11
         [0xe] 14:	popobj
line: 28 [0xf] 15:	new_class @73 // std#ArrayList<std#string>
         [0x10] 16:	call @917 // <std#ArrayList<std#string>.ArrayList()>
         [0x11] 17:	movl 0
         [0x12] 18:	movn #2
         [0x13] 19:	popobj
line: 30 [0x14] 20:	movl 1
         [0x15] 21:	pushobj
         [0x16] 22:	call @594 // <std#string.empty()>
         [0x17] 23:	loadval ebx
         [0x18] 24:	not ebx, ebx
         [0x19] 25:	movr cmt, ebx
         [0x1a] 26:	movi #41, adx
         [0x1c] 28:	ifne
line: 31 [0x1d] 29:	movl 1
         [0x1e] 30:	pushobj
         [0x1f] 31:	movl 0
         [0x20] 32:	movn #3
         [0x21] 33:	popobj
line: 32 [0x22] 34:	movl 1
         [0x23] 35:	pushobj
         [0x24] 36:	call @596 // <std#string.getData()>
         [0x25] 37:	movl 0
         [0x26] 38:	movn #4
         [0x27] 39:	popobj
         [0x28] 40:	goto @52
line: 35 [0x29] 41:	movi #0, ebx
         [0x2b] 43:	nop
         [0x2c] 44:	rstore ebx
         [0x2d] 45:	movl 0
         [0x2e] 46:	movn #8
         [0x2f] 47:	movi #0, adx
         [0x31] 49:	loadval ecx
         [0x32] 50:	rmov adx, ecx
         [0x33] 51:	nop
         [0x34] 52:	nop
line: 38 [0x35] 53:	new_class @79 // std#ArrayList<app#Token>
         [0x36] 54:	movi #60, ebx
         [0x38] 56:	rstore ebx
         [0x39] 57:	movl 0
         [0x3a] 58:	movn #4
         [0x3b] 59:	sizeof ebx
         [0x3c] 60:	loadval ecx
         [0x3d] 61:	gt ebx, ecx
         [0x3e] 62:	movr ebx, cmt
         [0x3f] 63:	loadpc_2 adx, pc+15 // adx = 78
         [0x40] 64:	ifne
         [0x41] 65:	movi #6, ebx
         [0x43] 67:	rstore ebx
         [0x44] 68:	movl 0
         [0x45] 69:	movn #4
         [0x46] 70:	sizeof ebx
         [0x47] 71:	loadval ecx
         [0x48] 72:	div ebx, ecx -> ebx
         [0x4a] 74:	rstore ebx
         [0x4b] 75:	movi #1, cmt
         [0x4d] 77:	skpe 4 // pc = 81
         [0x4e] 78:	movi #10, ebx
         [0x50] 80:	rstore ebx
         [0x51] 81:	call @1032 // <std#ArrayList<app#Token>.ArrayList(var)>
         [0x52] 82:	movl 0
         [0x53] 83:	movn #0
         [0x54] 84:	popobj
line: 39 [0x55] 85:	movl 0
         [0x56] 86:	pushobj
         [0x57] 87:	call @868 // <app#Tokenizer.parse()>
         [0x58] 88:	movl 0
         [0x59] 89:	returnobj
         [0x5a] 90:	ret

func:@868 [app#Tokenizer.parse] in file: lib/support//bootstrap//frontend//tokenizer//Tokenizer.sharp:43:14: note:  
		    def parse() {
		             ^


parse:
line: 43 [0x0] 0:	movl 0
         [0x1] 1:	movn #3
         [0x2] 2:	pushobj
         [0x3] 3:	call @594 // <std#string.empty()>
         [0x4] 4:	loadval cmt
         [0x5] 5:	movi #10, adx
         [0x7] 7:	ifne
line: 44 [0x8] 8:	ret
         [0x9] 9:	nop
         [0xa] 10:	nop
line: 46 [0xb] 11:	movl 0
         [0xc] 12:	pushobj
         [0xd] 13:	call @892 // <app#Tokenizer.addLines()>
line: 47 [0xe] 14:	new_class @54 // app#ErrorManager
         [0xf] 15:	movl 0
         [0x10] 16:	movn #2
         [0x11] 17:	pushobj
         [0x12] 18:	movl 0
         [0x13] 19:	movn #11
         [0x14] 20:	pushobj
         [0x15] 21:	movi #0, ebx
         [0x17] 23:	rstore ebx
         [0x18] 24:	movg @60 // @app#Options
         [0x19] 25:	movn #0
         [0x1a] 26:	movi #0, adx
         [0x1c] 28:	iaload_2 ebx, adx
         [0x1d] 29:	rstore ebx
         [0x1e] 30:	call @782 // <app#ErrorManager.ErrorManager(std#ArrayList<std#string>,std#string,var,var)>
         [0x1f] 31:	movl 0
         [0x20] 32:	movn #1
         [0x21] 33:	popobj
line: 48 [0x22] 34:	movl 0
         [0x23] 35:	movn #3
         [0x24] 36:	pushobj
         [0x25] 37:	movi #0, ebx
         [0x27] 39:	rstore ebx
         [0x28] 40:	call @569 // <std#string.at(var)>
         [0x29] 41:	nop
         [0x2a] 42:	movl 0
         [0x2b] 43:	movn #7
         [0x2c] 44:	movi #0, adx
         [0x2e] 46:	loadval ecx
         [0x2f] 47:	rmov adx, ecx
line: 50 [0x30] 48:	movl 0
         [0x31] 49:	movn #9
         [0x32] 50:	movi #0, adx
         [0x34] 52:	chklen adx
         [0x35] 53:	iaload_2 ebx, adx
         [0x36] 54:	not ebx, ebx
         [0x37] 55:	movr cmt, ebx
         [0x38] 56:	movi #776, adx
         [0x3a] 58:	ifne
line: 51 [0x3b] 59:	movl 0
         [0x3c] 60:	movn #5
         [0x3d] 61:	nop
         [0x3e] 62:	movi #0, adx
         [0x40] 64:	iaload_2 ebx, adx
         [0x41] 65:	rstore ebx
         [0x42] 66:	movl 0
         [0x43] 67:	movn #6
         [0x44] 68:	movi #0, adx
         [0x46] 70:	loadval ecx
         [0x47] 71:	rmov adx, ecx
line: 52 [0x48] 72:	movl 0
         [0x49] 73:	movn #7
         [0x4a] 74:	movi #0, adx
         [0x4c] 76:	chklen adx
         [0x4d] 77:	iaload_2 ebx, adx
         [0x4e] 78:	switch 0 //  table [default: 738 case 95: @79, case 97: @79, case 98: @79, case 99: @79, case 100: @79, case 101: @79, case 102: @79, case 103: @79, case 104: @79, case 105: @79, case 106: @79, case 107: @79, case 108: @79, case 109: @79, case 110: @79, case 111: @79, case 112: @79, case 113: @79, case 114: @79, case 115: @79, case 116: @79, case 117: @79, case 118: @79, case 119: @79, case 120: @79, case 121: @79, case 122: @79, case 65: @79, case 66: @79, case 67: @79, case 68: @79, case 69: @79, case 70: @79, case 71: @79, case 72: @79, case 73: @79, case 74: @79, case 75: @79, case 76: @79, case 77: @79, case 78: @79, case 79: @79, case 80: @79, case 81: @79, case 82: @79, case 83: @79, case 84: @79, case 85: @79, case 86: @79, case 87: @79, case 88: @79, case 89: @79, case 90: @79, case 40: @83 case 41: @90 case 123: @97, case 125: @104, case 91: @111, case 93: @118, case 44: @125 case 46: @132 case 59: @139 case 35: @146 case 63: @153 case 36: @160 case 33: @167 case 61: @189 case 58: @211 case 60: @233 case 62: @274 case 38: @315 case 124: @356, case 94: @397, case 37: @419 case 43: @441 case 45: @482 case 42: @540 case 32: @567 case 9: @567 case 13: @567 case 47: @568 case 10: @722 case 34: @726 case 39: @730 case 48: @734 case 49: @734 case 50: @734 case 51: @734 case 52: @734 case 53: @734 case 54: @734 case 55: @734 case 56: @734 case 57: @734 ]
line: 106 [0x4f] 79:	movl 0
          [0x50] 80:	pushobj
          [0x51] 81:	call @873 // <app#Tokenizer.parseIdentifier()>
line: 107 [0x52] 82:	goto @772
line: 109 [0x53] 83:	movl 0
          [0x54] 84:	pushobj
          [0x55] 85:	movg @71 // @app#TokenType
          [0x56] 86:	movn #6
          [0x57] 87:	pushobj
          [0x58] 88:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
line: 109 [0x59] 89:	goto @772
line: 110 [0x5a] 90:	movl 0
          [0x5b] 91:	pushobj
          [0x5c] 92:	movg @71 // @app#TokenType
          [0x5d] 93:	movn #7
          [0x5e] 94:	pushobj
          [0x5f] 95:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
line: 110 [0x60] 96:	goto @772
line: 111 [0x61] 97:	movl 0
          [0x62] 98:	pushobj
          [0x63] 99:	movg @71 // @app#TokenType
          [0x64] 100:	movn #8
          [0x65] 101:	pushobj
          [0x66] 102:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
line: 111 [0x67] 103:	goto @772
line: 112 [0x68] 104:	movl 0
          [0x69] 105:	pushobj
          [0x6a] 106:	movg @71 // @app#TokenType
          [0x6b] 107:	movn #9
          [0x6c] 108:	pushobj
          [0x6d] 109:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
line: 112 [0x6e] 110:	goto @772
line: 113 [0x6f] 111:	movl 0
          [0x70] 112:	pushobj
          [0x71] 113:	movg @71 // @app#TokenType
          [0x72] 114:	movn #47
          [0x73] 115:	pushobj
          [0x74] 116:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
line: 113 [0x75] 117:	goto @772
line: 114 [0x76] 118:	movl 0
          [0x77] 119:	pushobj
          [0x78] 120:	movg @71 // @app#TokenType
          [0x79] 121:	movn #48
          [0x7a] 122:	pushobj
          [0x7b] 123:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
line: 114 [0x7c] 124:	goto @772
line: 115 [0x7d] 125:	movl 0
          [0x7e] 126:	pushobj
          [0x7f] 127:	movg @71 // @app#TokenType
          [0x80] 128:	movn #21
          [0x81] 129:	pushobj
          [0x82] 130:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
line: 115 [0x83] 131:	goto @772
line: 116 [0x84] 132:	movl 0
          [0x85] 133:	pushobj
          [0x86] 134:	movg @71 // @app#TokenType
          [0x87] 135:	movn #11
          [0x88] 136:	pushobj
          [0x89] 137:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
line: 116 [0x8a] 138:	goto @772
line: 117 [0x8b] 139:	movl 0
          [0x8c] 140:	pushobj
          [0x8d] 141:	movg @71 // @app#TokenType
          [0x8e] 142:	movn #18
          [0x8f] 143:	pushobj
          [0x90] 144:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
line: 117 [0x91] 145:	goto @772
line: 118 [0x92] 146:	movl 0
          [0x93] 147:	pushobj
          [0x94] 148:	movg @71 // @app#TokenType
          [0x95] 149:	movn #10
          [0x96] 150:	pushobj
          [0x97] 151:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
line: 118 [0x98] 152:	goto @772
line: 119 [0x99] 153:	movl 0
          [0x9a] 154:	pushobj
          [0x9b] 155:	movg @71 // @app#TokenType
          [0x9c] 156:	movn #49
          [0x9d] 157:	pushobj
          [0x9e] 158:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
line: 119 [0x9f] 159:	goto @772
line: 120 [0xa0] 160:	movl 0
          [0xa1] 161:	pushobj
          [0xa2] 162:	movg @71 // @app#TokenType
          [0xa3] 163:	movn #53
          [0xa4] 164:	pushobj
          [0xa5] 165:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
line: 120 [0xa6] 166:	goto @772
line: 121 [0xa7] 167:	movl 0
          [0xa8] 168:	pushobj
          [0xa9] 169:	movl 0
          [0xaa] 170:	pushobj
          [0xab] 171:	movi #61, ebx
          [0xad] 173:	rstore ebx
          [0xae] 174:	call @871 // <app#Tokenizer.match(var)>
          [0xaf] 175:	loadval cmt
          [0xb0] 176:	loadpc_2 adx, pc+8 // adx = 184
          [0xb1] 177:	ifne
          [0xb2] 178:	movg @71 // @app#TokenType
          [0xb3] 179:	movn #34
          [0xb4] 180:	pushobj
          [0xb5] 181:	movi #1, cmt
          [0xb7] 183:	skpe 4 // pc = 187
          [0xb8] 184:	movg @71 // @app#TokenType
          [0xb9] 185:	movn #44
          [0xba] 186:	pushobj
          [0xbb] 187:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
line: 121 [0xbc] 188:	goto @772
line: 122 [0xbd] 189:	movl 0
          [0xbe] 190:	pushobj
          [0xbf] 191:	movl 0
          [0xc0] 192:	pushobj
          [0xc1] 193:	movi #61, ebx
          [0xc3] 195:	rstore ebx
          [0xc4] 196:	call @871 // <app#Tokenizer.match(var)>
          [0xc5] 197:	loadval cmt
          [0xc6] 198:	loadpc_2 adx, pc+8 // adx = 206
          [0xc7] 199:	ifne
          [0xc8] 200:	movg @71 // @app#TokenType
          [0xc9] 201:	movn #25
          [0xca] 202:	pushobj
          [0xcb] 203:	movi #1, cmt
          [0xcd] 205:	skpe 4 // pc = 209
          [0xce] 206:	movg @71 // @app#TokenType
          [0xcf] 207:	movn #45
          [0xd0] 208:	pushobj
          [0xd1] 209:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
line: 122 [0xd2] 210:	goto @772
line: 123 [0xd3] 211:	movl 0
          [0xd4] 212:	pushobj
          [0xd5] 213:	movl 0
          [0xd6] 214:	pushobj
          [0xd7] 215:	movi #61, ebx
          [0xd9] 217:	rstore ebx
          [0xda] 218:	call @871 // <app#Tokenizer.match(var)>
          [0xdb] 219:	loadval cmt
          [0xdc] 220:	loadpc_2 adx, pc+8 // adx = 228
          [0xdd] 221:	ifne
          [0xde] 222:	movg @71 // @app#TokenType
          [0xdf] 223:	movn #46
          [0xe0] 224:	pushobj
          [0xe1] 225:	movi #1, cmt
          [0xe3] 227:	skpe 4 // pc = 231
          [0xe4] 228:	movg @71 // @app#TokenType
          [0xe5] 229:	movn #17
          [0xe6] 230:	pushobj
          [0xe7] 231:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
line: 123 [0xe8] 232:	goto @772
line: 125 [0xe9] 233:	movl 0
          [0xea] 234:	pushobj
          [0xeb] 235:	movi #60, ebx
          [0xed] 237:	rstore ebx
          [0xee] 238:	call @871 // <app#Tokenizer.match(var)>
          [0xef] 239:	loadval cmt
          [0xf0] 240:	movi #250, adx
          [0xf2] 242:	ifne
line: 126 [0xf3] 243:	movl 0
          [0xf4] 244:	pushobj
          [0xf5] 245:	movg @71 // @app#TokenType
          [0xf6] 246:	movn #35
          [0xf7] 247:	pushobj
          [0xf8] 248:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
          [0xf9] 249:	goto @272
line: 128 [0xfa] 250:	movl 0
          [0xfb] 251:	pushobj
          [0xfc] 252:	movl 0
          [0xfd] 253:	pushobj
          [0xfe] 254:	movi #61, ebx
          [0x100] 256:	rstore ebx
          [0x101] 257:	call @871 // <app#Tokenizer.match(var)>
          [0x102] 258:	loadval cmt
          [0x103] 259:	loadpc_2 adx, pc+8 // adx = 267
          [0x104] 260:	ifne
          [0x105] 261:	movg @71 // @app#TokenType
          [0x106] 262:	movn #23
          [0x107] 263:	pushobj
          [0x108] 264:	movi #1, cmt
          [0x10a] 266:	skpe 4 // pc = 270
          [0x10b] 267:	movg @71 // @app#TokenType
          [0x10c] 268:	movn #37
          [0x10d] 269:	pushobj
          [0x10e] 270:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
          [0x10f] 271:	nop
          [0x110] 272:	nop
line: 129 [0x111] 273:	goto @772
line: 131 [0x112] 274:	movl 0
          [0x113] 275:	pushobj
          [0x114] 276:	movi #62, ebx
          [0x116] 278:	rstore ebx
          [0x117] 279:	call @871 // <app#Tokenizer.match(var)>
          [0x118] 280:	loadval cmt
          [0x119] 281:	movi #291, adx
          [0x11b] 283:	ifne
line: 132 [0x11c] 284:	movl 0
          [0x11d] 285:	pushobj
          [0x11e] 286:	movg @71 // @app#TokenType
          [0x11f] 287:	movn #36
          [0x120] 288:	pushobj
          [0x121] 289:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
          [0x122] 290:	goto @313
line: 134 [0x123] 291:	movl 0
          [0x124] 292:	pushobj
          [0x125] 293:	movl 0
          [0x126] 294:	pushobj
          [0x127] 295:	movi #61, ebx
          [0x129] 297:	rstore ebx
          [0x12a] 298:	call @871 // <app#Tokenizer.match(var)>
          [0x12b] 299:	loadval cmt
          [0x12c] 300:	loadpc_2 adx, pc+8 // adx = 308
          [0x12d] 301:	ifne
          [0x12e] 302:	movg @71 // @app#TokenType
          [0x12f] 303:	movn #24
          [0x130] 304:	pushobj
          [0x131] 305:	movi #1, cmt
          [0x133] 307:	skpe 4 // pc = 311
          [0x134] 308:	movg @71 // @app#TokenType
          [0x135] 309:	movn #38
          [0x136] 310:	pushobj
          [0x137] 311:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
          [0x138] 312:	nop
          [0x139] 313:	nop
line: 135 [0x13a] 314:	goto @772
line: 138 [0x13b] 315:	movl 0
          [0x13c] 316:	pushobj
          [0x13d] 317:	movi #61, ebx
          [0x13f] 319:	rstore ebx
          [0x140] 320:	call @871 // <app#Tokenizer.match(var)>
          [0x141] 321:	loadval cmt
          [0x142] 322:	movi #332, adx
          [0x144] 324:	ifne
line: 139 [0x145] 325:	movl 0
          [0x146] 326:	pushobj
          [0x147] 327:	movg @71 // @app#TokenType
          [0x148] 328:	movn #30
          [0x149] 329:	pushobj
          [0x14a] 330:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
          [0x14b] 331:	goto @354
line: 141 [0x14c] 332:	movl 0
          [0x14d] 333:	pushobj
          [0x14e] 334:	movl 0
          [0x14f] 335:	pushobj
          [0x150] 336:	movi #38, ebx
          [0x152] 338:	rstore ebx
          [0x153] 339:	call @871 // <app#Tokenizer.match(var)>
          [0x154] 340:	loadval cmt
          [0x155] 341:	loadpc_2 adx, pc+8 // adx = 349
          [0x156] 342:	ifne
          [0x157] 343:	movg @71 // @app#TokenType
          [0x158] 344:	movn #40
          [0x159] 345:	pushobj
          [0x15a] 346:	movi #1, cmt
          [0x15c] 348:	skpe 4 // pc = 352
          [0x15d] 349:	movg @71 // @app#TokenType
          [0x15e] 350:	movn #39
          [0x15f] 351:	pushobj
          [0x160] 352:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
          [0x161] 353:	nop
          [0x162] 354:	nop
line: 142 [0x163] 355:	goto @772
line: 144 [0x164] 356:	movl 0
          [0x165] 357:	pushobj
          [0x166] 358:	movi #61, ebx
          [0x168] 360:	rstore ebx
          [0x169] 361:	call @871 // <app#Tokenizer.match(var)>
          [0x16a] 362:	loadval cmt
          [0x16b] 363:	movi #373, adx
          [0x16d] 365:	ifne
line: 145 [0x16e] 366:	movl 0
          [0x16f] 367:	pushobj
          [0x170] 368:	movg @71 // @app#TokenType
          [0x171] 369:	movn #31
          [0x172] 370:	pushobj
          [0x173] 371:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
          [0x174] 372:	goto @395
line: 147 [0x175] 373:	movl 0
          [0x176] 374:	pushobj
          [0x177] 375:	movl 0
          [0x178] 376:	pushobj
          [0x179] 377:	movi #124, ebx
          [0x17b] 379:	rstore ebx
          [0x17c] 380:	call @871 // <app#Tokenizer.match(var)>
          [0x17d] 381:	loadval cmt
          [0x17e] 382:	loadpc_2 adx, pc+8 // adx = 390
          [0x17f] 383:	ifne
          [0x180] 384:	movg @71 // @app#TokenType
          [0x181] 385:	movn #42
          [0x182] 386:	pushobj
          [0x183] 387:	movi #1, cmt
          [0x185] 389:	skpe 4 // pc = 393
          [0x186] 390:	movg @71 // @app#TokenType
          [0x187] 391:	movn #41
          [0x188] 392:	pushobj
          [0x189] 393:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
          [0x18a] 394:	nop
          [0x18b] 395:	nop
line: 148 [0x18c] 396:	goto @772
line: 149 [0x18d] 397:	movl 0
          [0x18e] 398:	pushobj
          [0x18f] 399:	movl 0
          [0x190] 400:	pushobj
          [0x191] 401:	movi #61, ebx
          [0x193] 403:	rstore ebx
          [0x194] 404:	call @871 // <app#Tokenizer.match(var)>
          [0x195] 405:	loadval cmt
          [0x196] 406:	loadpc_2 adx, pc+8 // adx = 414
          [0x197] 407:	ifne
          [0x198] 408:	movg @71 // @app#TokenType
          [0x199] 409:	movn #32
          [0x19a] 410:	pushobj
          [0x19b] 411:	movi #1, cmt
          [0x19d] 413:	skpe 4 // pc = 417
          [0x19e] 414:	movg @71 // @app#TokenType
          [0x19f] 415:	movn #43
          [0x1a0] 416:	pushobj
          [0x1a1] 417:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
line: 149 [0x1a2] 418:	goto @772
line: 150 [0x1a3] 419:	movl 0
          [0x1a4] 420:	pushobj
          [0x1a5] 421:	movl 0
          [0x1a6] 422:	pushobj
          [0x1a7] 423:	movi #61, ebx
          [0x1a9] 425:	rstore ebx
          [0x1aa] 426:	call @871 // <app#Tokenizer.match(var)>
          [0x1ab] 427:	loadval cmt
          [0x1ac] 428:	loadpc_2 adx, pc+8 // adx = 436
          [0x1ad] 429:	ifne
          [0x1ae] 430:	movg @71 // @app#TokenType
          [0x1af] 431:	movn #33
          [0x1b0] 432:	pushobj
          [0x1b1] 433:	movi #1, cmt
          [0x1b3] 435:	skpe 4 // pc = 439
          [0x1b4] 436:	movg @71 // @app#TokenType
          [0x1b5] 437:	movn #16
          [0x1b6] 438:	pushobj
          [0x1b7] 439:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
line: 150 [0x1b8] 440:	goto @772
line: 152 [0x1b9] 441:	movl 0
          [0x1ba] 442:	pushobj
          [0x1bb] 443:	movi #61, ebx
          [0x1bd] 445:	rstore ebx
          [0x1be] 446:	call @871 // <app#Tokenizer.match(var)>
          [0x1bf] 447:	loadval cmt
          [0x1c0] 448:	movi #458, adx
          [0x1c2] 450:	ifne
line: 153 [0x1c3] 451:	movl 0
          [0x1c4] 452:	pushobj
          [0x1c5] 453:	movg @71 // @app#TokenType
          [0x1c6] 454:	movn #26
          [0x1c7] 455:	pushobj
          [0x1c8] 456:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
          [0x1c9] 457:	goto @480
line: 155 [0x1ca] 458:	movl 0
          [0x1cb] 459:	pushobj
          [0x1cc] 460:	movl 0
          [0x1cd] 461:	pushobj
          [0x1ce] 462:	movi #43, ebx
          [0x1d0] 464:	rstore ebx
          [0x1d1] 465:	call @871 // <app#Tokenizer.match(var)>
          [0x1d2] 466:	loadval cmt
          [0x1d3] 467:	loadpc_2 adx, pc+8 // adx = 475
          [0x1d4] 468:	ifne
          [0x1d5] 469:	movg @71 // @app#TokenType
          [0x1d6] 470:	movn #51
          [0x1d7] 471:	pushobj
          [0x1d8] 472:	movi #1, cmt
          [0x1da] 474:	skpe 4 // pc = 478
          [0x1db] 475:	movg @71 // @app#TokenType
          [0x1dc] 476:	movn #12
          [0x1dd] 477:	pushobj
          [0x1de] 478:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
          [0x1df] 479:	nop
          [0x1e0] 480:	nop
line: 156 [0x1e1] 481:	goto @772
line: 158 [0x1e2] 482:	movl 0
          [0x1e3] 483:	pushobj
          [0x1e4] 484:	movi #61, ebx
          [0x1e6] 486:	rstore ebx
          [0x1e7] 487:	call @871 // <app#Tokenizer.match(var)>
          [0x1e8] 488:	loadval cmt
          [0x1e9] 489:	movi #499, adx
          [0x1eb] 491:	ifne
line: 159 [0x1ec] 492:	movl 0
          [0x1ed] 493:	pushobj
          [0x1ee] 494:	movg @71 // @app#TokenType
          [0x1ef] 495:	movn #27
          [0x1f0] 496:	pushobj
          [0x1f1] 497:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
          [0x1f2] 498:	goto @538
          [0x1f3] 499:	movl 0
          [0x1f4] 500:	pushobj
          [0x1f5] 501:	movi #62, ebx
          [0x1f7] 503:	rstore ebx
          [0x1f8] 504:	call @871 // <app#Tokenizer.match(var)>
          [0x1f9] 505:	loadval cmt
          [0x1fa] 506:	movi #516, adx
          [0x1fc] 508:	ifne
line: 161 [0x1fd] 509:	movl 0
          [0x1fe] 510:	pushobj
          [0x1ff] 511:	movg @71 // @app#TokenType
          [0x200] 512:	movn #50
          [0x201] 513:	pushobj
          [0x202] 514:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
          [0x203] 515:	goto @538
line: 163 [0x204] 516:	movl 0
          [0x205] 517:	pushobj
          [0x206] 518:	movl 0
          [0x207] 519:	pushobj
          [0x208] 520:	movi #45, ebx
          [0x20a] 522:	rstore ebx
          [0x20b] 523:	call @871 // <app#Tokenizer.match(var)>
          [0x20c] 524:	loadval cmt
          [0x20d] 525:	loadpc_2 adx, pc+8 // adx = 533
          [0x20e] 526:	ifne
          [0x20f] 527:	movg @71 // @app#TokenType
          [0x210] 528:	movn #52
          [0x211] 529:	pushobj
          [0x212] 530:	movi #1, cmt
          [0x214] 532:	skpe 4 // pc = 536
          [0x215] 533:	movg @71 // @app#TokenType
          [0x216] 534:	movn #13
          [0x217] 535:	pushobj
          [0x218] 536:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
          [0x219] 537:	nop
          [0x21a] 538:	nop
line: 164 [0x21b] 539:	goto @772
line: 165 [0x21c] 540:	movl 0
          [0x21d] 541:	pushobj
          [0x21e] 542:	movl 0
          [0x21f] 543:	pushobj
          [0x220] 544:	movi #1, ebx
          [0x222] 546:	rstore ebx
          [0x223] 547:	call @883 // <app#Tokenizer.peek(var)>
          [0x224] 548:	movi #61, ebx
          [0x226] 550:	movr egx, ebx
          [0x227] 551:	loadval ebx
          [0x228] 552:	test ebx, egx
          [0x229] 553:	movr ebx, cmt
          [0x22a] 554:	loadpc_2 adx, pc+8 // adx = 562
          [0x22b] 555:	ifne
          [0x22c] 556:	movg @71 // @app#TokenType
          [0x22d] 557:	movn #28
          [0x22e] 558:	pushobj
          [0x22f] 559:	movi #1, cmt
          [0x231] 561:	skpe 4 // pc = 565
          [0x232] 562:	movg @71 // @app#TokenType
          [0x233] 563:	movn #14
          [0x234] 564:	pushobj
          [0x235] 565:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
line: 165 [0x236] 566:	goto @772
line: 170 [0x237] 567:	goto @772
line: 172 [0x238] 568:	movl 0
          [0x239] 569:	pushobj
          [0x23a] 570:	movi #47, ebx
          [0x23c] 572:	rstore ebx
          [0x23d] 573:	call @871 // <app#Tokenizer.match(var)>
          [0x23e] 574:	loadval cmt
          [0x23f] 575:	movi #610, adx
          [0x241] 577:	ifne
line: 174 [0x242] 578:	movl 0
          [0x243] 579:	pushobj
          [0x244] 580:	movi #1, ebx
          [0x246] 582:	rstore ebx
          [0x247] 583:	call @883 // <app#Tokenizer.peek(var)>
          [0x248] 584:	call @64 // <std#char.isNewLine(var)>
          [0x249] 585:	loadval ebx
          [0x24a] 586:	not ebx, ebx
          [0x24b] 587:	cmp ebx, 1
          [0x24c] 588:	movr ebx, cmt
          [0x24d] 589:	skne 12 // pc = 601
          [0x24e] 590:	istore 1
          [0x24f] 591:	movl 0
          [0x250] 592:	movn #9
          [0x251] 593:	movi #0, adx
          [0x253] 595:	chklen adx
          [0x254] 596:	iaload_2 ebx, adx
          [0x255] 597:	not ebx, ebx
          [0x256] 598:	loadval ecx
          [0x257] 599:	and ecx, ebx
          [0x258] 600:	movr ebx, cmt
          [0x259] 601:	movr cmt, ebx
          [0x25a] 602:	movi #609, adx
          [0x25c] 604:	ifne
line: 174 [0x25d] 605:	movl 0
          [0x25e] 606:	pushobj
          [0x25f] 607:	call @880 // <app#Tokenizer.advance()>
          [0x260] 608:	goto @578
          [0x261] 609:	goto @720
          [0x262] 610:	movl 0
          [0x263] 611:	pushobj
          [0x264] 612:	movi #42, ebx
          [0x266] 614:	rstore ebx
          [0x267] 615:	call @871 // <app#Tokenizer.match(var)>
          [0x268] 616:	loadval cmt
          [0x269] 617:	movi #694, adx
          [0x26b] 619:	ifne
line: 177 [0x26c] 620:	movl 0
          [0x26d] 621:	movn #9
          [0x26e] 622:	movi #0, adx
          [0x270] 624:	chklen adx
          [0x271] 625:	iaload_2 ebx, adx
          [0x272] 626:	not ebx, ebx
          [0x273] 627:	cmp ebx, 1
          [0x274] 628:	movr ebx, cmt
          [0x275] 629:	skne 37 // pc = 666
          [0x276] 630:	istore 1
          [0x277] 631:	movl 0
          [0x278] 632:	movn #7
          [0x279] 633:	movi #0, adx
          [0x27b] 635:	iaload_2 ebx, adx
          [0x27c] 636:	rstore ebx
          [0x27d] 637:	movi #42, ebx
          [0x27f] 639:	movr egx, ebx
          [0x280] 640:	loadval ebx
          [0x281] 641:	test ebx, egx
          [0x282] 642:	movr ebx, cmt
          [0x283] 643:	cmp ebx, 1
          [0x284] 644:	movr ebx, cmt
          [0x285] 645:	skne 17 // pc = 662
          [0x286] 646:	istore 1
          [0x287] 647:	movl 0
          [0x288] 648:	pushobj
          [0x289] 649:	movi #1, ebx
          [0x28b] 651:	rstore ebx
          [0x28c] 652:	call @883 // <app#Tokenizer.peek(var)>
          [0x28d] 653:	movi #47, ebx
          [0x28f] 655:	movr egx, ebx
          [0x290] 656:	loadval ebx
          [0x291] 657:	test ebx, egx
          [0x292] 658:	movr ebx, cmt
          [0x293] 659:	loadval ecx
          [0x294] 660:	and ecx, ebx
          [0x295] 661:	movr ebx, cmt
          [0x296] 662:	not ebx, ebx
          [0x297] 663:	loadval ecx
          [0x298] 664:	and ecx, ebx
          [0x299] 665:	movr ebx, cmt
          [0x29a] 666:	movr cmt, ebx
          [0x29b] 667:	movi #690, adx
          [0x29d] 669:	ifne
line: 179 [0x29e] 670:	movl 0
          [0x29f] 671:	movn #7
          [0x2a0] 672:	movi #0, adx
          [0x2a2] 674:	iaload_2 ebx, adx
          [0x2a3] 675:	rstore ebx
          [0x2a4] 676:	call @64 // <std#char.isNewLine(var)>
          [0x2a5] 677:	loadval cmt
          [0x2a6] 678:	movi #685, adx
          [0x2a8] 680:	ifne
line: 180 [0x2a9] 681:	movl 0
          [0x2aa] 682:	pushobj
          [0x2ab] 683:	call @879 // <app#Tokenizer.newline()>
          [0x2ac] 684:	nop
          [0x2ad] 685:	nop
line: 183 [0x2ae] 686:	movl 0
          [0x2af] 687:	pushobj
          [0x2b0] 688:	call @880 // <app#Tokenizer.advance()>
          [0x2b1] 689:	goto @620
line: 185 [0x2b2] 690:	movl 0
          [0x2b3] 691:	pushobj
          [0x2b4] 692:	call @880 // <app#Tokenizer.advance()>
          [0x2b5] 693:	goto @720
line: 187 [0x2b6] 694:	movl 0
          [0x2b7] 695:	pushobj
          [0x2b8] 696:	movi #61, ebx
          [0x2ba] 698:	rstore ebx
          [0x2bb] 699:	call @871 // <app#Tokenizer.match(var)>
          [0x2bc] 700:	loadval cmt
          [0x2bd] 701:	movi #711, adx
          [0x2bf] 703:	ifne
line: 188 [0x2c0] 704:	movl 0
          [0x2c1] 705:	pushobj
          [0x2c2] 706:	movg @71 // @app#TokenType
          [0x2c3] 707:	movn #29
          [0x2c4] 708:	pushobj
          [0x2c5] 709:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
          [0x2c6] 710:	goto @718
line: 190 [0x2c7] 711:	movl 0
          [0x2c8] 712:	pushobj
          [0x2c9] 713:	movg @71 // @app#TokenType
          [0x2ca] 714:	movn #15
          [0x2cb] 715:	pushobj
          [0x2cc] 716:	call @870 // <app#Tokenizer.addToken(app#TokenType)>
          [0x2cd] 717:	nop
          [0x2ce] 718:	nop
          [0x2cf] 719:	nop
          [0x2d0] 720:	nop
line: 192 [0x2d1] 721:	goto @772
line: 195 [0x2d2] 722:	movl 0
          [0x2d3] 723:	pushobj
          [0x2d4] 724:	call @879 // <app#Tokenizer.newline()>
line: 196 [0x2d5] 725:	goto @772
line: 199 [0x2d6] 726:	movl 0
          [0x2d7] 727:	pushobj
          [0x2d8] 728:	call @875 // <app#Tokenizer.parseString()>
line: 200 [0x2d9] 729:	goto @772
line: 203 [0x2da] 730:	movl 0
          [0x2db] 731:	pushobj
          [0x2dc] 732:	call @872 // <app#Tokenizer.parseChar()>
line: 204 [0x2dd] 733:	goto @772
line: 216 [0x2de] 734:	movl 0
          [0x2df] 735:	pushobj
          [0x2e0] 736:	call @874 // <app#Tokenizer.parseNumber()>
line: 217 [0x2e1] 737:	goto @772
line: 220 [0x2e2] 738:	movl 0
          [0x2e3] 739:	movn #1
          [0x2e4] 740:	pushobj
          [0x2e5] 741:	movg @68 // @app#CompilerError
          [0x2e6] 742:	movn #3
          [0x2e7] 743:	pushobj
          [0x2e8] 744:	movl 0
          [0x2e9] 745:	movn #8
          [0x2ea] 746:	movi #0, adx
          [0x2ec] 748:	iaload_2 ebx, adx
          [0x2ed] 749:	rstore ebx
          [0x2ee] 750:	movl 0
          [0x2ef] 751:	movn #10
          [0x2f0] 752:	movi #0, adx
          [0x2f2] 754:	iaload_2 ebx, adx
          [0x2f3] 755:	rstore ebx
          [0x2f4] 756:	new_class @46 // std#string
          [0x2f5] 757:	newstr @352 // " `"
          [0x2f6] 758:	call @558 // <std#string.string(var[])>
          [0x2f7] 759:	new_class @8 // std#char
          [0x2f8] 760:	movl 0
          [0x2f9] 761:	movn #7
          [0x2fa] 762:	movi #0, adx
          [0x2fc] 764:	iaload_2 ebx, adx
          [0x2fd] 765:	rstore ebx
          [0x2fe] 766:	call @31 // <std#char.char(var)>
          [0x2ff] 767:	call @573 // <std#string.$operator+(std#Printable)>
          [0x300] 768:	newstr @350 // "`"
          [0x301] 769:	call @572 // <std#string.$operator+(var[])>
          [0x302] 770:	call @795 // <app#ErrorManager.createNewError(app#CompilerError,var,var,std#string)>
line: 221 [0x303] 771:	goto @772
line: 224 [0x304] 772:	movl 0
          [0x305] 773:	pushobj
          [0x306] 774:	call @880 // <app#Tokenizer.advance()>
          [0x307] 775:	goto @48
line: 233 [0x308] 776:	new_class @46 // std#string
          [0x309] 777:	newstr @353 // "errors "
          [0x30a] 778:	call @558 // <std#string.string(var[])>
          [0x30b] 779:	movl 0
          [0x30c] 780:	movn #1
          [0x30d] 781:	pushobj
          [0x30e] 782:	call @789 // <app#ErrorManager.getRawErrorCount()>
          [0x30f] 783:	call @579 // <std#string.$operator+(var)>
          [0x310] 784:	call @610 // <std#__SRT_Global.println(std#string)>
line: 235 [0x311] 785:	movl 0
line: 236 [0x312] 786:	movn #0
          [0x313] 787:	pushobj
          [0x314] 788:	new_class @58 // app#Token
          [0x315] 789:	new_class @46 // std#string
          [0x316] 790:	newstr @354 // "eof"
          [0x317] 791:	call @558 // <std#string.string(var[])>
          [0x318] 792:	movg @70 // @app#TokenId
          [0x319] 793:	movn #16
          [0x31a] 794:	pushobj
          [0x31b] 795:	movg @71 // @app#TokenType
          [0x31c] 796:	movn #54
          [0x31d] 797:	pushobj
          [0x31e] 798:	movi #0, ebx
          [0x320] 800:	rstore ebx
          [0x321] 801:	movl 0
          [0x322] 802:	movn #8
          [0x323] 803:	movi #0, adx
          [0x325] 805:	iaload_2 ebx, adx
          [0x326] 806:	rstore ebx
          [0x327] 807:	call @851 // <app#Token.Token(std#string,app#TokenId,app#TokenType,var,var)>
          [0x328] 808:	call @1045 // <std#ArrayList<app#Token>.add(app#Token)>
          [0x329] 809:	ret

func:@869 [app#Tokenizer.addToken] in file: lib/support//bootstrap//frontend//tokenizer//Tokenizer.sharp:240:25: note:  
		    private def addToken(TokenId id) {
		                        ^


addToken:
line: 240 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	new_class @58 // app#Token
          [0x4] 4:	movl 0
          [0x5] 5:	movn #3
          [0x6] 6:	pushobj
          [0x7] 7:	movl 0
          [0x8] 8:	movn #6
          [0x9] 9:	movi #0, adx
          [0xb] 11:	iaload_2 ebx, adx
          [0xc] 12:	rstore ebx
          [0xd] 13:	movl 0
          [0xe] 14:	movn #5
          [0xf] 15:	movi #0, adx
          [0x11] 17:	iaload_2 ebx, adx
          [0x12] 18:	rstore ebx
          [0x13] 19:	call @587 // <std#string.substring(var,var)>
          [0x14] 20:	movl 1
          [0x15] 21:	pushobj
          [0x16] 22:	movl 0
          [0x17] 23:	movn #10
          [0x18] 24:	movi #0, adx
          [0x1a] 26:	iaload_2 ebx, adx
          [0x1b] 27:	rstore ebx
          [0x1c] 28:	movl 0
          [0x1d] 29:	movn #8
          [0x1e] 30:	movi #0, adx
          [0x20] 32:	iaload_2 ebx, adx
          [0x21] 33:	rstore ebx
          [0x22] 34:	call @852 // <app#Token.Token(std#string,app#TokenId,var,var)>
          [0x23] 35:	call @1045 // <std#ArrayList<app#Token>.add(app#Token)>
          [0x24] 36:	ret

func:@870 [app#Tokenizer.addToken] in file: lib/support//bootstrap//frontend//tokenizer//Tokenizer.sharp:244:25: note:  
		    private def addToken(TokenType type) {
		                        ^


addToken:
line: 244 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	new_class @58 // app#Token
          [0x4] 4:	movl 0
          [0x5] 5:	movn #3
          [0x6] 6:	pushobj
          [0x7] 7:	movl 0
          [0x8] 8:	movn #6
          [0x9] 9:	movi #0, adx
          [0xb] 11:	iaload_2 ebx, adx
          [0xc] 12:	rstore ebx
          [0xd] 13:	movl 0
          [0xe] 14:	movn #5
          [0xf] 15:	movi #0, adx
          [0x11] 17:	iaload_2 ebx, adx
          [0x12] 18:	rstore ebx
          [0x13] 19:	call @587 // <std#string.substring(var,var)>
          [0x14] 20:	movg @70 // @app#TokenId
          [0x15] 21:	movn #16
          [0x16] 22:	pushobj
          [0x17] 23:	movl 1
          [0x18] 24:	pushobj
          [0x19] 25:	movl 0
          [0x1a] 26:	movn #10
          [0x1b] 27:	movi #0, adx
          [0x1d] 29:	iaload_2 ebx, adx
          [0x1e] 30:	rstore ebx
          [0x1f] 31:	movl 0
          [0x20] 32:	movn #8
          [0x21] 33:	movi #0, adx
          [0x23] 35:	iaload_2 ebx, adx
          [0x24] 36:	rstore ebx
          [0x25] 37:	call @851 // <app#Token.Token(std#string,app#TokenId,app#TokenType,var,var)>
          [0x26] 38:	call @1045 // <std#ArrayList<app#Token>.add(app#Token)>
          [0x27] 39:	ret

func:@871 [app#Tokenizer.match] in file: lib/support//bootstrap//frontend//tokenizer//Tokenizer.sharp:248:22: note:  
		    private def match(var c) : var {
		                     ^


match:
line: 248 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	movi #1, ebx
          [0x4] 4:	rstore ebx
          [0x5] 5:	call @883 // <app#Tokenizer.peek(var)>
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	movr egx, ebx
          [0x8] 8:	loadval ebx
          [0x9] 9:	test ebx, egx
          [0xa] 10:	movr ebx, cmt
          [0xb] 11:	movi #22, adx
          [0xd] 13:	ifne
line: 249 [0xe] 14:	movl 0
          [0xf] 15:	pushobj
          [0x10] 16:	call @880 // <app#Tokenizer.advance()>
line: 250 [0x11] 17:	movi #1, ebx
          [0x13] 19:	return_val ebx
          [0x14] 20:	ret
          [0x15] 21:	nop
          [0x16] 22:	nop
line: 253 [0x17] 23:	movi #0, ebx
          [0x19] 25:	return_val ebx
          [0x1a] 26:	ret

func:@872 [app#Tokenizer.parseChar] in file: lib/support//bootstrap//frontend//tokenizer//Tokenizer.sharp:257:26: note:  
		    private def parseChar() {
		                         ^


parseChar:
line: 257 [0x0] 0:	movi #2, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	pushobj
          [0x5] 5:	call @882 // <app#Tokenizer.tokensLeft()>
          [0x6] 6:	loadval ebx
          [0x7] 7:	loadval ecx
          [0x8] 8:	lt ebx, ecx
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	movi #37, adx
          [0xc] 12:	ifne
line: 259 [0xd] 13:	movl 0
          [0xe] 14:	movn #1
          [0xf] 15:	pushobj
          [0x10] 16:	movg @68 // @app#CompilerError
          [0x11] 17:	movn #8
          [0x12] 18:	pushobj
          [0x13] 19:	movl 0
          [0x14] 20:	movn #8
          [0x15] 21:	movi #0, adx
          [0x17] 23:	iaload_2 ebx, adx
          [0x18] 24:	rstore ebx
          [0x19] 25:	movl 0
          [0x1a] 26:	movn #10
          [0x1b] 27:	movi #0, adx
          [0x1d] 29:	iaload_2 ebx, adx
          [0x1e] 30:	rstore ebx
          [0x1f] 31:	call @796 // <app#ErrorManager.createNewError(app#CompilerError,var,var)>
line: 260 [0x20] 32:	movl 0
          [0x21] 33:	pushobj
          [0x22] 34:	call @880 // <app#Tokenizer.advance()>
line: 261 [0x23] 35:	ret
          [0x24] 36:	nop
          [0x25] 37:	nop
line: 263 [0x26] 38:	movl 0
          [0x27] 39:	pushobj
          [0x28] 40:	call @880 // <app#Tokenizer.advance()>
line: 265 [0x29] 41:	movl 0
          [0x2a] 42:	movn #5
          [0x2b] 43:	nop
          [0x2c] 44:	movi #0, adx
          [0x2e] 46:	iaload_2 ebx, adx
          [0x2f] 47:	rstore ebx
          [0x30] 48:	movl 0
          [0x31] 49:	movn #6
          [0x32] 50:	movi #0, adx
          [0x34] 52:	loadval ecx
          [0x35] 53:	rmov adx, ecx
line: 266 [0x36] 54:	istorel 0, fp+1
line: 267 [0x38] 56:	istorel 0, fp+2
line: 268 [0x3a] 58:	istorel 0, fp+3
line: 270 [0x3c] 60:	movl 0
          [0x3d] 61:	movn #9
          [0x3e] 62:	movi #0, adx
          [0x40] 64:	chklen adx
          [0x41] 65:	iaload_2 ebx, adx
          [0x42] 66:	not ebx, ebx
          [0x43] 67:	movr cmt, ebx
          [0x44] 68:	movi #341, adx
          [0x46] 70:	ifne
line: 272 [0x47] 71:	loadl ebx, fp+2
          [0x48] 72:	not ebx, ebx
          [0x49] 73:	cmp ebx, 1
          [0x4a] 74:	movr ebx, cmt
          [0x4b] 75:	skne 17 // pc = 92
          [0x4c] 76:	istore 1
          [0x4d] 77:	movi #92, ebx
          [0x4f] 79:	rstore ebx
          [0x50] 80:	movl 0
          [0x51] 81:	movn #7
          [0x52] 82:	movi #0, adx
          [0x54] 84:	chklen adx
          [0x55] 85:	iaload_2 egx, adx
          [0x56] 86:	loadval ebx
          [0x57] 87:	test ebx, egx
          [0x58] 88:	movr ebx, cmt
          [0x59] 89:	loadval ecx
          [0x5a] 90:	and ecx, ebx
          [0x5b] 91:	movr ebx, cmt
          [0x5c] 92:	movr cmt, ebx
          [0x5d] 93:	movi #135, adx
          [0x5f] 95:	ifne
line: 274 [0x60] 96:	loadl ebx, fp+3
          [0x61] 97:	movr cmt, ebx
          [0x62] 98:	movi #125, adx
          [0x64] 100:	ifne
line: 276 [0x65] 101:	movl 0
          [0x66] 102:	movn #1
          [0x67] 103:	pushobj
          [0x68] 104:	movg @68 // @app#CompilerError
          [0x69] 105:	movn #9
          [0x6a] 106:	pushobj
          [0x6b] 107:	movl 0
          [0x6c] 108:	movn #8
          [0x6d] 109:	movi #0, adx
          [0x6f] 111:	iaload_2 ebx, adx
          [0x70] 112:	rstore ebx
          [0x71] 113:	movl 0
          [0x72] 114:	movn #10
          [0x73] 115:	movi #0, adx
          [0x75] 117:	iaload_2 ebx, adx
          [0x76] 118:	rstore ebx
          [0x77] 119:	new_class @46 // std#string
          [0x78] 120:	newstr @355 // ", a chacacter literal cannot contai..."
          [0x79] 121:	call @558 // <std#string.string(var[])>
          [0x7a] 122:	call @795 // <app#ErrorManager.createNewError(app#CompilerError,var,var,std#string)>
line: 277 [0x7b] 123:	ret
          [0x7c] 124:	nop
          [0x7d] 125:	nop
line: 280 [0x7e] 126:	istorel 1, fp+1
line: 281 [0x80] 128:	istorel 1, fp+2
line: 282 [0x82] 130:	movl 0
          [0x83] 131:	pushobj
          [0x84] 132:	call @880 // <app#Tokenizer.advance()>
line: 283 [0x85] 133:	goto @60
          [0x86] 134:	goto @336
          [0x87] 135:	loadl ebx, fp+2
          [0x88] 136:	not ebx, ebx
          [0x89] 137:	movr cmt, ebx
          [0x8a] 138:	movi #192, adx
          [0x8c] 140:	ifne
line: 287 [0x8d] 141:	movi #39, ebx
          [0x8f] 143:	rstore ebx
          [0x90] 144:	movl 0
          [0x91] 145:	movn #7
          [0x92] 146:	movi #0, adx
          [0x94] 148:	chklen adx
          [0x95] 149:	iaload_2 egx, adx
          [0x96] 150:	loadval ebx
          [0x97] 151:	test ebx, egx
          [0x98] 152:	movr ebx, cmt
          [0x99] 153:	movi #158, adx
          [0x9b] 155:	ifne
line: 288 [0x9c] 156:	goto @341
          [0x9d] 157:	nop
          [0x9e] 158:	nop
line: 290 [0x9f] 159:	loadl ebx, fp+3
          [0xa0] 160:	movr cmt, ebx
          [0xa1] 161:	movi #188, adx
          [0xa3] 163:	ifne
line: 292 [0xa4] 164:	movl 0
          [0xa5] 165:	movn #1
          [0xa6] 166:	pushobj
          [0xa7] 167:	movg @68 // @app#CompilerError
          [0xa8] 168:	movn #9
          [0xa9] 169:	pushobj
          [0xaa] 170:	movl 0
          [0xab] 171:	movn #8
          [0xac] 172:	movi #0, adx
          [0xae] 174:	iaload_2 ebx, adx
          [0xaf] 175:	rstore ebx
          [0xb0] 176:	movl 0
          [0xb1] 177:	movn #10
          [0xb2] 178:	movi #0, adx
          [0xb4] 180:	iaload_2 ebx, adx
          [0xb5] 181:	rstore ebx
          [0xb6] 182:	new_class @46 // std#string
          [0xb7] 183:	newstr @355 // ", a chacacter literal cannot contai..."
          [0xb8] 184:	call @558 // <std#string.string(var[])>
          [0xb9] 185:	call @795 // <app#ErrorManager.createNewError(app#CompilerError,var,var,std#string)>
line: 293 [0xba] 186:	ret
          [0xbb] 187:	nop
          [0xbc] 188:	nop
line: 296 [0xbd] 189:	istorel 1, fp+3
          [0xbf] 191:	goto @336
          [0xc0] 192:	loadl ebx, fp+2
          [0xc1] 193:	movr cmt, ebx
          [0xc2] 194:	movi #335, adx
          [0xc4] 196:	ifne
line: 300 [0xc5] 197:	istorel 1, fp+3
line: 301 [0xc7] 199:	movl 0
          [0xc8] 200:	movn #7
          [0xc9] 201:	movi #0, adx
          [0xcb] 203:	iaload_2 ebx, adx
          [0xcc] 204:	rstore ebx
          [0xcd] 205:	movi #48, ebx
          [0xcf] 207:	movr egx, ebx
          [0xd0] 208:	loadval ebx
          [0xd1] 209:	tne ebx, egx
          [0xd2] 210:	movr ebx, cmt
          [0xd3] 211:	cmp ebx, 1
          [0xd4] 212:	movr ebx, cmt
          [0xd5] 213:	skne 90 // pc = 303
          [0xd6] 214:	istore 1
          [0xd7] 215:	movl 0
          [0xd8] 216:	movn #7
          [0xd9] 217:	movi #0, adx
          [0xdb] 219:	iaload_2 ebx, adx
          [0xdc] 220:	rstore ebx
          [0xdd] 221:	movi #97, ebx
          [0xdf] 223:	movr egx, ebx
          [0xe0] 224:	loadval ebx
          [0xe1] 225:	tne ebx, egx
          [0xe2] 226:	movr ebx, cmt
          [0xe3] 227:	loadval ecx
          [0xe4] 228:	and ecx, ebx
          [0xe5] 229:	movr ebx, cmt
          [0xe6] 230:	cmp ebx, 1
          [0xe7] 231:	movr ebx, cmt
          [0xe8] 232:	skne 71 // pc = 303
          [0xe9] 233:	istore 1
          [0xea] 234:	movl 0
          [0xeb] 235:	movn #7
          [0xec] 236:	movi #0, adx
          [0xee] 238:	iaload_2 ebx, adx
          [0xef] 239:	rstore ebx
          [0xf0] 240:	call @65 // <std#char.isAlpha(var)>
          [0xf1] 241:	loadval ebx
          [0xf2] 242:	not ebx, ebx
          [0xf3] 243:	loadval ecx
          [0xf4] 244:	and ecx, ebx
          [0xf5] 245:	movr ebx, cmt
          [0xf6] 246:	cmp ebx, 1
          [0xf7] 247:	movr ebx, cmt
          [0xf8] 248:	skne 55 // pc = 303
          [0xf9] 249:	istore 1
          [0xfa] 250:	movl 0
          [0xfb] 251:	movn #7
          [0xfc] 252:	movi #0, adx
          [0xfe] 254:	iaload_2 ebx, adx
          [0xff] 255:	rstore ebx
          [0x100] 256:	movi #92, ebx
          [0x102] 258:	movr egx, ebx
          [0x103] 259:	loadval ebx
          [0x104] 260:	tne ebx, egx
          [0x105] 261:	movr ebx, cmt
          [0x106] 262:	loadval ecx
          [0x107] 263:	and ecx, ebx
          [0x108] 264:	movr ebx, cmt
          [0x109] 265:	cmp ebx, 1
          [0x10a] 266:	movr ebx, cmt
          [0x10b] 267:	skne 36 // pc = 303
          [0x10c] 268:	istore 1
          [0x10d] 269:	movl 0
          [0x10e] 270:	movn #7
          [0x10f] 271:	movi #0, adx
          [0x111] 273:	iaload_2 ebx, adx
          [0x112] 274:	rstore ebx
          [0x113] 275:	movi #34, ebx
          [0x115] 277:	movr egx, ebx
          [0x116] 278:	loadval ebx
          [0x117] 279:	tne ebx, egx
          [0x118] 280:	movr ebx, cmt
          [0x119] 281:	loadval ecx
          [0x11a] 282:	and ecx, ebx
          [0x11b] 283:	movr ebx, cmt
          [0x11c] 284:	cmp ebx, 1
          [0x11d] 285:	movr ebx, cmt
          [0x11e] 286:	skne 17 // pc = 303
          [0x11f] 287:	istore 1
          [0x120] 288:	movl 0
          [0x121] 289:	movn #7
          [0x122] 290:	movi #0, adx
          [0x124] 292:	iaload_2 ebx, adx
          [0x125] 293:	rstore ebx
          [0x126] 294:	movi #39, ebx
          [0x128] 296:	movr egx, ebx
          [0x129] 297:	loadval ebx
          [0x12a] 298:	tne ebx, egx
          [0x12b] 299:	movr ebx, cmt
          [0x12c] 300:	loadval ecx
          [0x12d] 301:	and ecx, ebx
          [0x12e] 302:	movr ebx, cmt
          [0x12f] 303:	movr cmt, ebx
          [0x130] 304:	movi #331, adx
          [0x132] 306:	ifne
line: 304 [0x133] 307:	movl 0
          [0x134] 308:	movn #1
          [0x135] 309:	pushobj
          [0x136] 310:	movg @68 // @app#CompilerError
          [0x137] 311:	movn #9
          [0x138] 312:	pushobj
          [0x139] 313:	movl 0
          [0x13a] 314:	movn #8
          [0x13b] 315:	movi #0, adx
          [0x13d] 317:	iaload_2 ebx, adx
          [0x13e] 318:	rstore ebx
          [0x13f] 319:	movl 0
          [0x140] 320:	movn #10
          [0x141] 321:	movi #0, adx
          [0x143] 323:	iaload_2 ebx, adx
          [0x144] 324:	rstore ebx
          [0x145] 325:	new_class @46 // std#string
          [0x146] 326:	newstr @356 // ", text preceding `\` must be alpha,..."
          [0x147] 327:	call @558 // <std#string.string(var[])>
          [0x148] 328:	call @795 // <app#ErrorManager.createNewError(app#CompilerError,var,var,std#string)>
line: 305 [0x149] 329:	ret
          [0x14a] 330:	nop
          [0x14b] 331:	nop
line: 307 [0x14c] 332:	istorel 0, fp+2
          [0x14e] 334:	goto @336
          [0x14f] 335:	nop
          [0x150] 336:	nop
line: 309 [0x151] 337:	movl 0
          [0x152] 338:	pushobj
          [0x153] 339:	call @880 // <app#Tokenizer.advance()>
          [0x154] 340:	goto @60
line: 312 [0x155] 341:	movl 0
          [0x156] 342:	movn #9
          [0x157] 343:	movi #0, adx
          [0x159] 345:	chklen adx
          [0x15a] 346:	iaload_2 cmt, adx
          [0x15b] 347:	movi #371, adx
          [0x15d] 349:	ifne
line: 314 [0x15e] 350:	movl 0
          [0x15f] 351:	movn #1
          [0x160] 352:	pushobj
          [0x161] 353:	movg @68 // @app#CompilerError
          [0x162] 354:	movn #5
          [0x163] 355:	pushobj
          [0x164] 356:	movl 0
          [0x165] 357:	movn #8
          [0x166] 358:	movi #0, adx
          [0x168] 360:	iaload_2 ebx, adx
          [0x169] 361:	rstore ebx
          [0x16a] 362:	movl 0
          [0x16b] 363:	movn #10
          [0x16c] 364:	movi #0, adx
          [0x16e] 366:	iaload_2 ebx, adx
          [0x16f] 367:	rstore ebx
          [0x170] 368:	call @796 // <app#ErrorManager.createNewError(app#CompilerError,var,var)>
line: 315 [0x171] 369:	ret
          [0x172] 370:	nop
          [0x173] 371:	nop
line: 318 [0x174] 372:	loadl ebx, fp+1
          [0x175] 373:	not ebx, ebx
          [0x176] 374:	movr cmt, ebx
          [0x177] 375:	movi #434, adx
          [0x179] 377:	ifne
line: 320 [0x17a] 378:	movl 0
          [0x17b] 379:	movn #5
          [0x17c] 380:	movi #0, adx
          [0x17e] 382:	chklen adx
          [0x17f] 383:	iaload_2 ebx, adx
          [0x180] 384:	dec ebx
          [0x181] 385:	rmov adx, ebx
          [0x182] 386:	inc ebx
line: 321 [0x183] 387:	loadl ebx, fp+3
          [0x184] 388:	not ebx, ebx
          [0x185] 389:	movr cmt, ebx
          [0x186] 390:	movi #416, adx
          [0x188] 392:	ifne
line: 322 [0x189] 393:	movl 0
          [0x18a] 394:	movn #1
          [0x18b] 395:	pushobj
          [0x18c] 396:	movg @68 // @app#CompilerError
          [0x18d] 397:	movn #9
          [0x18e] 398:	pushobj
          [0x18f] 399:	movl 0
          [0x190] 400:	movn #8
          [0x191] 401:	movi #0, adx
          [0x193] 403:	iaload_2 ebx, adx
          [0x194] 404:	rstore ebx
          [0x195] 405:	movl 0
          [0x196] 406:	movn #10
          [0x197] 407:	movi #0, adx
          [0x199] 409:	iaload_2 ebx, adx
          [0x19a] 410:	rstore ebx
          [0x19b] 411:	new_class @46 // std#string
          [0x19c] 412:	newstr @357 // ", character literals cannot be empt..."
          [0x19d] 413:	call @558 // <std#string.string(var[])>
          [0x19e] 414:	call @795 // <app#ErrorManager.createNewError(app#CompilerError,var,var,std#string)>
          [0x19f] 415:	goto @423
line: 324 [0x1a0] 416:	movl 0
          [0x1a1] 417:	pushobj
          [0x1a2] 418:	movg @70 // @app#TokenId
          [0x1a3] 419:	movn #10
          [0x1a4] 420:	pushobj
          [0x1a5] 421:	call @869 // <app#Tokenizer.addToken(app#TokenId)>
          [0x1a6] 422:	nop
          [0x1a7] 423:	nop
line: 325 [0x1a8] 424:	movl 0
          [0x1a9] 425:	movn #5
          [0x1aa] 426:	movi #0, adx
          [0x1ac] 428:	chklen adx
          [0x1ad] 429:	iaload_2 ebx, adx
          [0x1ae] 430:	inc ebx
          [0x1af] 431:	rmov adx, ebx
          [0x1b0] 432:	dec ebx
          [0x1b1] 433:	goto @482
line: 329 [0x1b2] 434:	movl 0
          [0x1b3] 435:	movn #0
          [0x1b4] 436:	pushobj
          [0x1b5] 437:	new_class @58 // app#Token
          [0x1b6] 438:	movl 0
          [0x1b7] 439:	pushobj
          [0x1b8] 440:	movl 0
          [0x1b9] 441:	movn #3
          [0x1ba] 442:	pushobj
          [0x1bb] 443:	movl 0
          [0x1bc] 444:	movn #6
          [0x1bd] 445:	movi #0, adx
          [0x1bf] 447:	iaload_2 ebx, adx
          [0x1c0] 448:	rstore ebx
          [0x1c1] 449:	movi #1, ebx
          [0x1c3] 451:	rstore ebx
          [0x1c4] 452:	movl 0
          [0x1c5] 453:	movn #5
          [0x1c6] 454:	movi #0, adx
          [0x1c8] 456:	chklen adx
          [0x1c9] 457:	iaload_2 ebx, adx
          [0x1ca] 458:	loadval egx
          [0x1cb] 459:	sub ebx, egx -> ebx
          [0x1cd] 461:	rstore ebx
          [0x1ce] 462:	call @587 // <std#string.substring(var,var)>
          [0x1cf] 463:	call @877 // <app#Tokenizer.getEscapedString(std#string)>
          [0x1d0] 464:	movg @70 // @app#TokenId
          [0x1d1] 465:	movn #10
          [0x1d2] 466:	pushobj
          [0x1d3] 467:	movl 0
          [0x1d4] 468:	movn #10
          [0x1d5] 469:	movi #0, adx
          [0x1d7] 471:	iaload_2 ebx, adx
          [0x1d8] 472:	rstore ebx
          [0x1d9] 473:	movl 0
          [0x1da] 474:	movn #8
          [0x1db] 475:	movi #0, adx
          [0x1dd] 477:	iaload_2 ebx, adx
          [0x1de] 478:	rstore ebx
          [0x1df] 479:	call @852 // <app#Token.Token(std#string,app#TokenId,var,var)>
          [0x1e0] 480:	call @1045 // <std#ArrayList<app#Token>.add(app#Token)>
          [0x1e1] 481:	nop
          [0x1e2] 482:	nop
          [0x1e3] 483:	ret

func:@873 [app#Tokenizer.parseIdentifier] in file: lib/support//bootstrap//frontend//tokenizer//Tokenizer.sharp:335:32: note:  
		    private def parseIdentifier() {
		                               ^


parseIdentifier:
line: 335 [0x0] 0:	istorel 0, fp+1
line: 337 [0x2] 2:	movl 0
          [0x3] 3:	movn #9
          [0x4] 4:	movi #0, adx
          [0x6] 6:	chklen adx
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	not ebx, ebx
          [0x9] 9:	movr cmt, ebx
          [0xa] 10:	movi #29, adx
          [0xc] 12:	ifne
line: 339 [0xd] 13:	movl 0
          [0xe] 14:	movn #7
          [0xf] 15:	movi #0, adx
          [0x11] 17:	chklen adx
          [0x12] 18:	iaload_2 ebx, adx
          [0x13] 19:	switch 0 //  table [default: 24 case 95: @20, case 97: @20, case 98: @20, case 99: @20, case 100: @20, case 101: @20, case 102: @20, case 103: @20, case 104: @20, case 105: @20, case 106: @20, case 107: @20, case 108: @20, case 109: @20, case 110: @20, case 111: @20, case 112: @20, case 113: @20, case 114: @20, case 115: @20, case 116: @20, case 117: @20, case 118: @20, case 119: @20, case 120: @20, case 121: @20, case 122: @20, case 65: @20, case 66: @20, case 67: @20, case 68: @20, case 69: @20, case 70: @20, case 71: @20, case 72: @20, case 73: @20, case 74: @20, case 75: @20, case 76: @20, case 77: @20, case 78: @20, case 79: @20, case 80: @20, case 81: @20, case 82: @20, case 83: @20, case 84: @20, case 85: @20, case 86: @20, case 87: @20, case 88: @20, case 89: @20, case 90: @20, case 48: @23 case 49: @23 case 50: @23 case 51: @23 case 52: @23 case 53: @23 case 54: @23 case 55: @23 case 56: @23 case 57: @23 ]
line: 393 [0x14] 20:	istorel 1, fp+1
line: 394 [0x16] 22:	goto @25
line: 406 [0x17] 23:	goto @25
line: 408 [0x18] 24:	goto @29
line: 411 [0x19] 25:	movl 0
          [0x1a] 26:	pushobj
          [0x1b] 27:	call @880 // <app#Tokenizer.advance()>
          [0x1c] 28:	goto @2
line: 414 [0x1d] 29:	movl 0
line: 415 [0x1e] 30:	movn #5
          [0x1f] 31:	movi #0, adx
          [0x21] 33:	chklen adx
          [0x22] 34:	iaload_2 ebx, adx
          [0x23] 35:	dec ebx
          [0x24] 36:	rmov adx, ebx
          [0x25] 37:	inc ebx
line: 416 [0x26] 38:	loadl ebx, fp+1
          [0x27] 39:	not ebx, ebx
          [0x28] 40:	movr cmt, ebx
          [0x29] 41:	movi #67, adx
          [0x2b] 43:	ifne
line: 417 [0x2c] 44:	movl 0
          [0x2d] 45:	movn #1
          [0x2e] 46:	pushobj
          [0x2f] 47:	movg @68 // @app#CompilerError
          [0x30] 48:	movn #10
          [0x31] 49:	pushobj
          [0x32] 50:	movl 0
          [0x33] 51:	movn #8
          [0x34] 52:	movi #0, adx
          [0x36] 54:	iaload_2 ebx, adx
          [0x37] 55:	rstore ebx
          [0x38] 56:	movl 0
          [0x39] 57:	movn #10
          [0x3a] 58:	movi #0, adx
          [0x3c] 60:	iaload_2 ebx, adx
          [0x3d] 61:	rstore ebx
          [0x3e] 62:	new_class @46 // std#string
          [0x3f] 63:	newstr @358 // " expected at least 1 letter in iden..."
          [0x40] 64:	call @558 // <std#string.string(var[])>
          [0x41] 65:	call @795 // <app#ErrorManager.createNewError(app#CompilerError,var,var,std#string)>
          [0x42] 66:	goto @74
line: 419 [0x43] 67:	movl 0
          [0x44] 68:	pushobj
          [0x45] 69:	movg @70 // @app#TokenId
          [0x46] 70:	movn #3
          [0x47] 71:	pushobj
          [0x48] 72:	call @869 // <app#Tokenizer.addToken(app#TokenId)>
          [0x49] 73:	nop
          [0x4a] 74:	nop
          [0x4b] 75:	ret

func:@874 [app#Tokenizer.parseNumber] in file: lib/support//bootstrap//frontend//tokenizer//Tokenizer.sharp:423:28: note:  
		    private def parseNumber() {
		                           ^


parseNumber:
line: 423 [0x0] 0:	movl 0
          [0x1] 1:	movn #7
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movi #48, ebx
          [0x8] 8:	movr egx, ebx
          [0x9] 9:	loadval ebx
          [0xa] 10:	test ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	cmp ebx, 1
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	skne 17 // pc = 31
          [0xf] 15:	istore 1
          [0x10] 16:	movl 0
          [0x11] 17:	pushobj
          [0x12] 18:	movi #1, ebx
          [0x14] 20:	rstore ebx
          [0x15] 21:	call @883 // <app#Tokenizer.peek(var)>
          [0x16] 22:	movi #120, ebx
          [0x18] 24:	movr egx, ebx
          [0x19] 25:	loadval ebx
          [0x1a] 26:	test ebx, egx
          [0x1b] 27:	movr ebx, cmt
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	and ecx, ebx
          [0x1e] 30:	movr ebx, cmt
          [0x1f] 31:	movr cmt, ebx
          [0x20] 32:	movi #183, adx
          [0x22] 34:	ifne
line: 424 [0x23] 35:	istorel 0, fp+1
line: 426 [0x25] 37:	movi #2, ebx
          [0x27] 39:	nop
          [0x28] 40:	rstore ebx
          [0x29] 41:	movl 0
          [0x2a] 42:	movn #10
          [0x2b] 43:	movi #0, adx
          [0x2d] 45:	chklen adx
          [0x2e] 46:	iaload_2 ebx, adx
          [0x2f] 47:	movi #0, adx
          [0x31] 49:	loadval ecx
          [0x32] 50:	add ebx, ecx -> ecx
          [0x34] 52:	rmov adx, ecx
line: 426 [0x35] 53:	movi #2, ebx
          [0x37] 55:	nop
          [0x38] 56:	rstore ebx
          [0x39] 57:	movl 0
          [0x3a] 58:	movn #5
          [0x3b] 59:	movi #0, adx
          [0x3d] 61:	chklen adx
          [0x3e] 62:	iaload_2 ebx, adx
          [0x3f] 63:	movi #0, adx
          [0x41] 65:	loadval ecx
          [0x42] 66:	add ebx, ecx -> ecx
          [0x44] 68:	rmov adx, ecx
line: 427 [0x45] 69:	movl 0
          [0x46] 70:	movn #9
          [0x47] 71:	movi #0, adx
          [0x49] 73:	chklen adx
          [0x4a] 74:	iaload_2 ebx, adx
          [0x4b] 75:	not ebx, ebx
          [0x4c] 76:	cmp ebx, 1
          [0x4d] 77:	movr ebx, cmt
          [0x4e] 78:	skne 29 // pc = 107
          [0x4f] 79:	istore 1
          [0x50] 80:	movl 0
          [0x51] 81:	movn #7
          [0x52] 82:	movi #0, adx
          [0x54] 84:	iaload_2 ebx, adx
          [0x55] 85:	rstore ebx
          [0x56] 86:	call @893 // <app#Tokenizer.isHexNum(var)>
          [0x57] 87:	loadval cmt
          [0x58] 88:	movr ebx, cmt
          [0x59] 89:	skpe 15 // pc = 104
          [0x5a] 90:	movl 0
          [0x5b] 91:	movn #7
          [0x5c] 92:	movi #0, adx
          [0x5e] 94:	iaload_2 ebx, adx
          [0x5f] 95:	rstore ebx
          [0x60] 96:	movi #95, ebx
          [0x62] 98:	movr egx, ebx
          [0x63] 99:	loadval ebx
          [0x64] 100:	test ebx, egx
          [0x65] 101:	movr ebx, cmt
          [0x66] 102:	cmp ebx, 1
          [0x67] 103:	movr ebx, cmt
          [0x68] 104:	loadval ecx
          [0x69] 105:	and ecx, ebx
          [0x6a] 106:	movr ebx, cmt
          [0x6b] 107:	movr cmt, ebx
          [0x6c] 108:	movi #166, adx
          [0x6e] 110:	ifne
line: 428 [0x6f] 111:	movl 0
          [0x70] 112:	movn #7
          [0x71] 113:	movi #0, adx
          [0x73] 115:	iaload_2 ebx, adx
          [0x74] 116:	rstore ebx
          [0x75] 117:	call @893 // <app#Tokenizer.isHexNum(var)>
          [0x76] 118:	loadval cmt
          [0x77] 119:	movi #125, adx
          [0x79] 121:	ifne
line: 429 [0x7a] 122:	istorel 1, fp+1
          [0x7c] 124:	goto @161
line: 431 [0x7d] 125:	loadl ebx, fp+1
          [0x7e] 126:	not ebx, ebx
          [0x7f] 127:	movr cmt, ebx
          [0x80] 128:	movi #155, adx
          [0x82] 130:	ifne
line: 432 [0x83] 131:	movl 0
          [0x84] 132:	movn #1
          [0x85] 133:	pushobj
          [0x86] 134:	movg @68 // @app#CompilerError
          [0x87] 135:	movn #4
          [0x88] 136:	pushobj
          [0x89] 137:	movl 0
          [0x8a] 138:	movn #8
          [0x8b] 139:	movi #0, adx
          [0x8d] 141:	iaload_2 ebx, adx
          [0x8e] 142:	rstore ebx
          [0x8f] 143:	movl 0
          [0x90] 144:	movn #10
          [0x91] 145:	movi #0, adx
          [0x93] 147:	iaload_2 ebx, adx
          [0x94] 148:	rstore ebx
          [0x95] 149:	new_class @46 // std#string
          [0x96] 150:	newstr @359 // ", unexpected or illegally placed un..."
          [0x97] 151:	call @558 // <std#string.string(var[])>
          [0x98] 152:	call @795 // <app#ErrorManager.createNewError(app#CompilerError,var,var,std#string)>
line: 433 [0x99] 153:	goto @166
          [0x9a] 154:	nop
          [0x9b] 155:	nop
line: 436 [0x9c] 156:	movl 0
          [0x9d] 157:	pushobj
          [0x9e] 158:	call @880 // <app#Tokenizer.advance()>
line: 437 [0x9f] 159:	goto @69
          [0xa0] 160:	nop
          [0xa1] 161:	nop
line: 440 [0xa2] 162:	movl 0
          [0xa3] 163:	pushobj
          [0xa4] 164:	call @880 // <app#Tokenizer.advance()>
          [0xa5] 165:	goto @69
line: 443 [0xa6] 166:	movl 0
          [0xa7] 167:	movn #5
          [0xa8] 168:	movi #0, adx
          [0xaa] 170:	chklen adx
          [0xab] 171:	iaload_2 ebx, adx
          [0xac] 172:	dec ebx
          [0xad] 173:	rmov adx, ebx
          [0xae] 174:	inc ebx
line: 444 [0xaf] 175:	movl 0
          [0xb0] 176:	pushobj
          [0xb1] 177:	movg @70 // @app#TokenId
          [0xb2] 178:	movn #7
          [0xb3] 179:	pushobj
          [0xb4] 180:	call @869 // <app#Tokenizer.addToken(app#TokenId)>
line: 445 [0xb5] 181:	ret
          [0xb6] 182:	goto @610
line: 459 [0xb7] 183:	istorel 0, fp+2
line: 460 [0xb9] 185:	istorel 0, fp+3
line: 461 [0xbb] 187:	istorel 0, fp+4
line: 462 [0xbd] 189:	istorel 0, fp+5
line: 464 [0xbf] 191:	movl 0
          [0xc0] 192:	movn #9
          [0xc1] 193:	movi #0, adx
          [0xc3] 195:	chklen adx
          [0xc4] 196:	iaload_2 ebx, adx
          [0xc5] 197:	not ebx, ebx
          [0xc6] 198:	movr cmt, ebx
          [0xc7] 199:	movi #594, adx
          [0xc9] 201:	ifne
line: 466 [0xca] 202:	movi #95, ebx
          [0xcc] 204:	rstore ebx
          [0xcd] 205:	movl 0
          [0xce] 206:	movn #7
          [0xcf] 207:	movi #0, adx
          [0xd1] 209:	chklen adx
          [0xd2] 210:	iaload_2 egx, adx
          [0xd3] 211:	loadval ebx
          [0xd4] 212:	test ebx, egx
          [0xd5] 213:	movr ebx, cmt
          [0xd6] 214:	movi #285, adx
          [0xd8] 216:	ifne
line: 467 [0xd9] 217:	loadl ebx, fp+5
          [0xda] 218:	not ebx, ebx
          [0xdb] 219:	movr cmt, ebx
          [0xdc] 220:	movr ebx, cmt
          [0xdd] 221:	skpe 31 // pc = 252
          [0xde] 222:	movl 0
          [0xdf] 223:	movn #4
          [0xe0] 224:	pushobj
          [0xe1] 225:	movi #1, ebx
          [0xe3] 227:	rstore ebx
          [0xe4] 228:	movl 0
          [0xe5] 229:	movn #5
          [0xe6] 230:	movi #0, adx
          [0xe8] 232:	chklen adx
          [0xe9] 233:	iaload_2 ebx, adx
          [0xea] 234:	loadval egx
          [0xeb] 235:	sub ebx, egx -> ebx
          [0xed] 237:	rstore ebx
          [0xee] 238:	loadval ebx
          [0xef] 239:	movsl #0
          [0xf0] 240:	chklen ebx
          [0xf1] 241:	iaload_2 ebx, ebx
          [0xf2] 242:	pop
          [0xf3] 243:	rstore ebx
          [0xf4] 244:	movi #46, ebx
          [0xf6] 246:	movr egx, ebx
          [0xf7] 247:	loadval ebx
          [0xf8] 248:	test ebx, egx
          [0xf9] 249:	movr ebx, cmt
          [0xfa] 250:	cmp ebx, 1
          [0xfb] 251:	movr ebx, cmt
          [0xfc] 252:	movr cmt, ebx
          [0xfd] 253:	movi #280, adx
          [0xff] 255:	ifne
line: 469 [0x100] 256:	movl 0
          [0x101] 257:	movn #1
          [0x102] 258:	pushobj
          [0x103] 259:	movg @68 // @app#CompilerError
          [0x104] 260:	movn #4
          [0x105] 261:	pushobj
          [0x106] 262:	movl 0
          [0x107] 263:	movn #8
          [0x108] 264:	movi #0, adx
          [0x10a] 266:	iaload_2 ebx, adx
          [0x10b] 267:	rstore ebx
          [0x10c] 268:	movl 0
          [0x10d] 269:	movn #10
          [0x10e] 270:	movi #0, adx
          [0x110] 272:	iaload_2 ebx, adx
          [0x111] 273:	rstore ebx
          [0x112] 274:	new_class @46 // std#string
          [0x113] 275:	newstr @359 // ", unexpected or illegally placed un..."
          [0x114] 276:	call @558 // <std#string.string(var[])>
          [0x115] 277:	call @795 // <app#ErrorManager.createNewError(app#CompilerError,var,var,std#string)>
line: 470 [0x116] 278:	ret
          [0x117] 279:	nop
          [0x118] 280:	nop
line: 472 [0x119] 281:	movl 0
          [0x11a] 282:	pushobj
          [0x11b] 283:	call @880 // <app#Tokenizer.advance()>
          [0x11c] 284:	goto @592
          [0x11d] 285:	movi #46, ebx
          [0x11f] 287:	rstore ebx
          [0x120] 288:	movl 0
          [0x121] 289:	movn #7
          [0x122] 290:	movi #0, adx
          [0x124] 292:	chklen adx
          [0x125] 293:	iaload_2 egx, adx
          [0x126] 294:	loadval ebx
          [0x127] 295:	test ebx, egx
          [0x128] 296:	movr ebx, cmt
          [0x129] 297:	movi #337, adx
          [0x12b] 299:	ifne
line: 476 [0x12c] 300:	loadl ebx, fp+2
          [0x12d] 301:	movr cmt, ebx
          [0x12e] 302:	movi #329, adx
          [0x130] 304:	ifne
line: 478 [0x131] 305:	movl 0
          [0x132] 306:	movn #1
          [0x133] 307:	pushobj
          [0x134] 308:	movg @68 // @app#CompilerError
          [0x135] 309:	movn #4
          [0x136] 310:	pushobj
          [0x137] 311:	movl 0
          [0x138] 312:	movn #8
          [0x139] 313:	movi #0, adx
          [0x13b] 315:	iaload_2 ebx, adx
          [0x13c] 316:	rstore ebx
          [0x13d] 317:	movl 0
          [0x13e] 318:	movn #10
          [0x13f] 319:	movi #0, adx
          [0x141] 321:	iaload_2 ebx, adx
          [0x142] 322:	rstore ebx
          [0x143] 323:	new_class @46 // std#string
          [0x144] 324:	newstr @360 // ", double decimal"
          [0x145] 325:	call @558 // <std#string.string(var[])>
          [0x146] 326:	call @795 // <app#ErrorManager.createNewError(app#CompilerError,var,var,std#string)>
line: 479 [0x147] 327:	ret
          [0x148] 328:	nop
          [0x149] 329:	nop
line: 481 [0x14a] 330:	istorel 1, fp+2
line: 482 [0x14c] 332:	movl 0
          [0x14d] 333:	pushobj
          [0x14e] 334:	call @880 // <app#Tokenizer.advance()>
line: 483 [0x14f] 335:	goto @191
          [0x150] 336:	goto @592
          [0x151] 337:	movi #101, ebx
          [0x153] 339:	rstore ebx
          [0x154] 340:	movl 0
          [0x155] 341:	movn #7
          [0x156] 342:	movi #0, adx
          [0x158] 344:	iaload_2 ebx, adx
          [0x159] 345:	rstore ebx
          [0x15a] 346:	call @67 // <std#char.toLower(var)>
          [0x15b] 347:	loadval egx
          [0x15c] 348:	loadval ebx
          [0x15d] 349:	test ebx, egx
          [0x15e] 350:	movr ebx, cmt
          [0x15f] 351:	movi #470, adx
          [0x161] 353:	ifne
line: 487 [0x162] 354:	istorel 0, fp+5
line: 488 [0x164] 356:	movl 0
          [0x165] 357:	pushobj
          [0x166] 358:	movi #1, ebx
          [0x168] 360:	rstore ebx
          [0x169] 361:	call @883 // <app#Tokenizer.peek(var)>
          [0x16a] 362:	loadval ebx
          [0x16b] 363:	smovr_2 ebx, fp+6
line: 489 [0x16c] 364:	movl 0
          [0x16d] 365:	pushobj
          [0x16e] 366:	movi #1, ebx
          [0x170] 368:	rstore ebx
          [0x171] 369:	call @881 // <app#Tokenizer.peekEnd(var)>
          [0x172] 370:	loadval cmt
          [0x173] 371:	movi #398, adx
          [0x175] 373:	ifne
line: 491 [0x176] 374:	movl 0
          [0x177] 375:	movn #1
          [0x178] 376:	pushobj
          [0x179] 377:	movg @68 // @app#CompilerError
          [0x17a] 378:	movn #4
          [0x17b] 379:	pushobj
          [0x17c] 380:	movl 0
          [0x17d] 381:	movn #8
          [0x17e] 382:	movi #0, adx
          [0x180] 384:	iaload_2 ebx, adx
          [0x181] 385:	rstore ebx
          [0x182] 386:	movl 0
          [0x183] 387:	movn #10
          [0x184] 388:	movi #0, adx
          [0x186] 390:	iaload_2 ebx, adx
          [0x187] 391:	rstore ebx
          [0x188] 392:	new_class @46 // std#string
          [0x189] 393:	newstr @361 // ", missing exponent prefix"
          [0x18a] 394:	call @558 // <std#string.string(var[])>
          [0x18b] 395:	call @795 // <app#ErrorManager.createNewError(app#CompilerError,var,var,std#string)>
line: 492 [0x18c] 396:	ret
          [0x18d] 397:	goto @462
          [0x18e] 398:	movi #43, ebx
          [0x190] 400:	rstore ebx
          [0x191] 401:	loadl ebx, fp+6
          [0x192] 402:	movr egx, ebx
          [0x193] 403:	loadval ebx
          [0x194] 404:	tne ebx, egx
          [0x195] 405:	movr ebx, cmt
          [0x196] 406:	cmp ebx, 1
          [0x197] 407:	movr ebx, cmt
          [0x198] 408:	skne 25 // pc = 433
          [0x199] 409:	istore 1
          [0x19a] 410:	movi #45, ebx
          [0x19c] 412:	rstore ebx
          [0x19d] 413:	loadl ebx, fp+6
          [0x19e] 414:	movr egx, ebx
          [0x19f] 415:	loadval ebx
          [0x1a0] 416:	tne ebx, egx
          [0x1a1] 417:	movr ebx, cmt
          [0x1a2] 418:	loadval ecx
          [0x1a3] 419:	and ecx, ebx
          [0x1a4] 420:	movr ebx, cmt
          [0x1a5] 421:	cmp ebx, 1
          [0x1a6] 422:	movr ebx, cmt
          [0x1a7] 423:	skne 10 // pc = 433
          [0x1a8] 424:	istore 1
          [0x1a9] 425:	loadl ebx, fp+6
          [0x1aa] 426:	rstore ebx
          [0x1ab] 427:	call @63 // <std#char.isDigit(var)>
          [0x1ac] 428:	loadval ebx
          [0x1ad] 429:	not ebx, ebx
          [0x1ae] 430:	loadval ecx
          [0x1af] 431:	and ecx, ebx
          [0x1b0] 432:	movr ebx, cmt
          [0x1b1] 433:	movr cmt, ebx
          [0x1b2] 434:	movi #461, adx
          [0x1b4] 436:	ifne
line: 500 [0x1b5] 437:	movl 0
          [0x1b6] 438:	movn #1
          [0x1b7] 439:	pushobj
          [0x1b8] 440:	movg @68 // @app#CompilerError
          [0x1b9] 441:	movn #4
          [0x1ba] 442:	pushobj
          [0x1bb] 443:	movl 0
          [0x1bc] 444:	movn #8
          [0x1bd] 445:	movi #0, adx
          [0x1bf] 447:	iaload_2 ebx, adx
          [0x1c0] 448:	rstore ebx
          [0x1c1] 449:	movl 0
          [0x1c2] 450:	movn #10
          [0x1c3] 451:	movi #0, adx
          [0x1c5] 453:	iaload_2 ebx, adx
          [0x1c6] 454:	rstore ebx
          [0x1c7] 455:	new_class @46 // std#string
          [0x1c8] 456:	newstr @362 // ", expected `+`, `-`, or digit"
          [0x1c9] 457:	call @558 // <std#string.string(var[])>
          [0x1ca] 458:	call @795 // <app#ErrorManager.createNewError(app#CompilerError,var,var,std#string)>
line: 501 [0x1cb] 459:	ret
          [0x1cc] 460:	goto @462
          [0x1cd] 461:	nop
          [0x1ce] 462:	nop
line: 503 [0x1cf] 463:	istorel 1, fp+3
line: 504 [0x1d1] 465:	movl 0
          [0x1d2] 466:	pushobj
          [0x1d3] 467:	call @880 // <app#Tokenizer.advance()>
line: 505 [0x1d4] 468:	goto @191
          [0x1d5] 469:	goto @592
          [0x1d6] 470:	loadl ebx, fp+3
          [0x1d7] 471:	cmp ebx, 1
          [0x1d8] 472:	movr ebx, cmt
          [0x1d9] 473:	skne 15 // pc = 488
          [0x1da] 474:	istore 1
          [0x1db] 475:	movl 0
          [0x1dc] 476:	pushobj
          [0x1dd] 477:	movl 0
          [0x1de] 478:	movn #7
          [0x1df] 479:	movi #0, adx
          [0x1e1] 481:	iaload_2 ebx, adx
          [0x1e2] 482:	rstore ebx
          [0x1e3] 483:	call @878 // <app#Tokenizer.isSign(var)>
          [0x1e4] 484:	loadval ebx
          [0x1e5] 485:	loadval ecx
          [0x1e6] 486:	and ecx, ebx
          [0x1e7] 487:	movr ebx, cmt
          [0x1e8] 488:	movr cmt, ebx
          [0x1e9] 489:	movi #529, adx
          [0x1eb] 491:	ifne
line: 509 [0x1ec] 492:	loadl ebx, fp+4
          [0x1ed] 493:	movr cmt, ebx
          [0x1ee] 494:	movi #521, adx
          [0x1f0] 496:	ifne
line: 511 [0x1f1] 497:	movl 0
          [0x1f2] 498:	movn #1
          [0x1f3] 499:	pushobj
          [0x1f4] 500:	movg @68 // @app#CompilerError
          [0x1f5] 501:	movn #4
          [0x1f6] 502:	pushobj
          [0x1f7] 503:	movl 0
          [0x1f8] 504:	movn #8
          [0x1f9] 505:	movi #0, adx
          [0x1fb] 507:	iaload_2 ebx, adx
          [0x1fc] 508:	rstore ebx
          [0x1fd] 509:	movl 0
          [0x1fe] 510:	movn #10
          [0x1ff] 511:	movi #0, adx
          [0x201] 513:	iaload_2 ebx, adx
          [0x202] 514:	rstore ebx
          [0x203] 515:	new_class @46 // std#string
          [0x204] 516:	newstr @363 // ", duplicate exponent sign postfix"
          [0x205] 517:	call @558 // <std#string.string(var[])>
          [0x206] 518:	call @795 // <app#ErrorManager.createNewError(app#CompilerError,var,var,std#string)>
line: 512 [0x207] 519:	ret
          [0x208] 520:	nop
          [0x209] 521:	nop
line: 514 [0x20a] 522:	istorel 1, fp+4
line: 515 [0x20c] 524:	movl 0
          [0x20d] 525:	pushobj
          [0x20e] 526:	call @880 // <app#Tokenizer.advance()>
line: 516 [0x20f] 527:	goto @191
          [0x210] 528:	goto @592
          [0x211] 529:	movi #46, ebx
          [0x213] 531:	rstore ebx
          [0x214] 532:	movl 0
          [0x215] 533:	movn #7
          [0x216] 534:	movi #0, adx
          [0x218] 536:	chklen adx
          [0x219] 537:	iaload_2 egx, adx
          [0x21a] 538:	loadval ebx
          [0x21b] 539:	tne ebx, egx
          [0x21c] 540:	movr ebx, cmt
          [0x21d] 541:	cmp ebx, 1
          [0x21e] 542:	movr ebx, cmt
          [0x21f] 543:	skne 14 // pc = 557
          [0x220] 544:	istore 1
          [0x221] 545:	movl 0
          [0x222] 546:	movn #7
          [0x223] 547:	movi #0, adx
          [0x225] 549:	iaload_2 ebx, adx
          [0x226] 550:	rstore ebx
          [0x227] 551:	call @63 // <std#char.isDigit(var)>
          [0x228] 552:	loadval ebx
          [0x229] 553:	not ebx, ebx
          [0x22a] 554:	loadval ecx
          [0x22b] 555:	and ecx, ebx
          [0x22c] 556:	movr ebx, cmt
          [0x22d] 557:	movr cmt, ebx
          [0x22e] 558:	movi #563, adx
          [0x230] 560:	ifne
line: 519 [0x231] 561:	goto @594
          [0x232] 562:	goto @592
line: 522 [0x233] 563:	movl 0
          [0x234] 564:	movn #7
          [0x235] 565:	movi #0, adx
          [0x237] 567:	iaload_2 ebx, adx
          [0x238] 568:	rstore ebx
          [0x239] 569:	call @63 // <std#char.isDigit(var)>
          [0x23a] 570:	loadval ebx
          [0x23b] 571:	cmp ebx, 1
          [0x23c] 572:	movr ebx, cmt
          [0x23d] 573:	skne 7 // pc = 580
          [0x23e] 574:	istore 1
          [0x23f] 575:	loadl ebx, fp+3
          [0x240] 576:	not ebx, ebx
          [0x241] 577:	loadval ecx
          [0x242] 578:	and ecx, ebx
          [0x243] 579:	movr ebx, cmt
          [0x244] 580:	movr cmt, ebx
          [0x245] 581:	movi #587, adx
          [0x247] 583:	ifne
line: 523 [0x248] 584:	istorel 1, fp+5
          [0x24a] 586:	nop
          [0x24b] 587:	nop
line: 524 [0x24c] 588:	movl 0
          [0x24d] 589:	pushobj
          [0x24e] 590:	call @880 // <app#Tokenizer.advance()>
          [0x24f] 591:	nop
          [0x250] 592:	nop
          [0x251] 593:	goto @191
line: 528 [0x252] 594:	movl 0
          [0x253] 595:	movn #5
          [0x254] 596:	movi #0, adx
          [0x256] 598:	chklen adx
          [0x257] 599:	iaload_2 ebx, adx
          [0x258] 600:	dec ebx
          [0x259] 601:	rmov adx, ebx
          [0x25a] 602:	inc ebx
line: 529 [0x25b] 603:	movl 0
          [0x25c] 604:	pushobj
          [0x25d] 605:	movg @70 // @app#TokenId
          [0x25e] 606:	movn #6
          [0x25f] 607:	pushobj
          [0x260] 608:	call @869 // <app#Tokenizer.addToken(app#TokenId)>
          [0x261] 609:	nop
          [0x262] 610:	nop
          [0x263] 611:	ret

func:@875 [app#Tokenizer.parseString] in file: lib/support//bootstrap//frontend//tokenizer//Tokenizer.sharp:534:28: note:  
		    private def parseString() {
		                           ^


parseString:
line: 534 [0x0] 0:	movi #2, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	pushobj
          [0x5] 5:	call @882 // <app#Tokenizer.tokensLeft()>
          [0x6] 6:	loadval ebx
          [0x7] 7:	loadval ecx
          [0x8] 8:	lt ebx, ecx
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	movi #37, adx
          [0xc] 12:	ifne
line: 536 [0xd] 13:	movl 0
          [0xe] 14:	movn #1
          [0xf] 15:	pushobj
          [0x10] 16:	movg @68 // @app#CompilerError
          [0x11] 17:	movn #6
          [0x12] 18:	pushobj
          [0x13] 19:	movl 0
          [0x14] 20:	movn #8
          [0x15] 21:	movi #0, adx
          [0x17] 23:	iaload_2 ebx, adx
          [0x18] 24:	rstore ebx
          [0x19] 25:	movl 0
          [0x1a] 26:	movn #10
          [0x1b] 27:	movi #0, adx
          [0x1d] 29:	iaload_2 ebx, adx
          [0x1e] 30:	rstore ebx
          [0x1f] 31:	call @796 // <app#ErrorManager.createNewError(app#CompilerError,var,var)>
line: 537 [0x20] 32:	movl 0
          [0x21] 33:	pushobj
          [0x22] 34:	call @880 // <app#Tokenizer.advance()>
line: 538 [0x23] 35:	ret
          [0x24] 36:	nop
          [0x25] 37:	nop
line: 540 [0x26] 38:	movl 0
          [0x27] 39:	pushobj
          [0x28] 40:	call @880 // <app#Tokenizer.advance()>
line: 541 [0x29] 41:	movl 0
          [0x2a] 42:	movn #7
          [0x2b] 43:	movi #0, adx
          [0x2d] 45:	iaload_2 ebx, adx
          [0x2e] 46:	rstore ebx
          [0x2f] 47:	movi #34, ebx
          [0x31] 49:	movr egx, ebx
          [0x32] 50:	loadval ebx
          [0x33] 51:	test ebx, egx
          [0x34] 52:	movr ebx, cmt
          [0x35] 53:	movi #82, adx
          [0x37] 55:	ifne
line: 542 [0x38] 56:	movl 0
          [0x39] 57:	movn #0
          [0x3a] 58:	pushobj
          [0x3b] 59:	new_class @58 // app#Token
          [0x3c] 60:	new_class @46 // std#string
          [0x3d] 61:	newstr @226 // ""
          [0x3e] 62:	call @558 // <std#string.string(var[])>
          [0x3f] 63:	movg @70 // @app#TokenId
          [0x40] 64:	movn #9
          [0x41] 65:	pushobj
          [0x42] 66:	movl 0
          [0x43] 67:	movn #10
          [0x44] 68:	movi #0, adx
          [0x46] 70:	iaload_2 ebx, adx
          [0x47] 71:	rstore ebx
          [0x48] 72:	movl 0
          [0x49] 73:	movn #8
          [0x4a] 74:	movi #0, adx
          [0x4c] 76:	iaload_2 ebx, adx
          [0x4d] 77:	rstore ebx
          [0x4e] 78:	call @852 // <app#Token.Token(std#string,app#TokenId,var,var)>
          [0x4f] 79:	call @1045 // <std#ArrayList<app#Token>.add(app#Token)>
line: 543 [0x50] 80:	ret
          [0x51] 81:	nop
          [0x52] 82:	nop
line: 546 [0x53] 83:	movl 0
          [0x54] 84:	movn #5
          [0x55] 85:	nop
          [0x56] 86:	movi #0, adx
          [0x58] 88:	iaload_2 ebx, adx
          [0x59] 89:	rstore ebx
          [0x5a] 90:	movl 0
          [0x5b] 91:	movn #6
          [0x5c] 92:	movi #0, adx
          [0x5e] 94:	loadval ecx
          [0x5f] 95:	rmov adx, ecx
line: 547 [0x60] 96:	istorel 0, fp+1
line: 548 [0x62] 98:	istorel 0, fp+2
line: 550 [0x64] 100:	movl 0
          [0x65] 101:	movn #9
          [0x66] 102:	movi #0, adx
          [0x68] 104:	chklen adx
          [0x69] 105:	iaload_2 ebx, adx
          [0x6a] 106:	not ebx, ebx
          [0x6b] 107:	movr cmt, ebx
          [0x6c] 108:	movi #317, adx
          [0x6e] 110:	ifne
line: 552 [0x6f] 111:	movl 0
          [0x70] 112:	movn #7
          [0x71] 113:	movi #0, adx
          [0x73] 115:	iaload_2 ebx, adx
          [0x74] 116:	rstore ebx
          [0x75] 117:	call @64 // <std#char.isNewLine(var)>
          [0x76] 118:	loadval cmt
          [0x77] 119:	movi #149, adx
          [0x79] 121:	ifne
line: 554 [0x7a] 122:	movl 0
          [0x7b] 123:	movn #1
          [0x7c] 124:	pushobj
          [0x7d] 125:	movg @68 // @app#CompilerError
          [0x7e] 126:	movn #7
          [0x7f] 127:	pushobj
          [0x80] 128:	movl 0
          [0x81] 129:	movn #8
          [0x82] 130:	movi #0, adx
          [0x84] 132:	iaload_2 ebx, adx
          [0x85] 133:	rstore ebx
          [0x86] 134:	movl 0
          [0x87] 135:	movn #10
          [0x88] 136:	movi #0, adx
          [0x8a] 138:	iaload_2 ebx, adx
          [0x8b] 139:	rstore ebx
          [0x8c] 140:	new_class @46 // std#string
          [0x8d] 141:	newstr @364 // ", expected `"` before end of line"
          [0x8e] 142:	call @558 // <std#string.string(var[])>
          [0x8f] 143:	call @795 // <app#ErrorManager.createNewError(app#CompilerError,var,var,std#string)>
line: 555 [0x90] 144:	movl 0
          [0x91] 145:	pushobj
          [0x92] 146:	call @879 // <app#Tokenizer.newline()>
line: 556 [0x93] 147:	ret
          [0x94] 148:	goto @312
          [0x95] 149:	loadl ebx, fp+2
          [0x96] 150:	not ebx, ebx
          [0x97] 151:	cmp ebx, 1
          [0x98] 152:	movr ebx, cmt
          [0x99] 153:	skne 17 // pc = 170
          [0x9a] 154:	istore 1
          [0x9b] 155:	movi #92, ebx
          [0x9d] 157:	rstore ebx
          [0x9e] 158:	movl 0
          [0x9f] 159:	movn #7
          [0xa0] 160:	movi #0, adx
          [0xa2] 162:	chklen adx
          [0xa3] 163:	iaload_2 egx, adx
          [0xa4] 164:	loadval ebx
          [0xa5] 165:	test ebx, egx
          [0xa6] 166:	movr ebx, cmt
          [0xa7] 167:	loadval ecx
          [0xa8] 168:	and ecx, ebx
          [0xa9] 169:	movr ebx, cmt
          [0xaa] 170:	movr cmt, ebx
          [0xab] 171:	movi #183, adx
          [0xad] 173:	ifne
line: 560 [0xae] 174:	istorel 1, fp+1
line: 561 [0xb0] 176:	istorel 1, fp+2
line: 562 [0xb2] 178:	movl 0
          [0xb3] 179:	pushobj
          [0xb4] 180:	call @880 // <app#Tokenizer.advance()>
line: 563 [0xb5] 181:	goto @100
          [0xb6] 182:	goto @312
          [0xb7] 183:	loadl ebx, fp+2
          [0xb8] 184:	not ebx, ebx
          [0xb9] 185:	movr cmt, ebx
          [0xba] 186:	movi #208, adx
          [0xbc] 188:	ifne
line: 567 [0xbd] 189:	movi #34, ebx
          [0xbf] 191:	rstore ebx
          [0xc0] 192:	movl 0
          [0xc1] 193:	movn #7
          [0xc2] 194:	movi #0, adx
          [0xc4] 196:	chklen adx
          [0xc5] 197:	iaload_2 egx, adx
          [0xc6] 198:	loadval ebx
          [0xc7] 199:	test ebx, egx
          [0xc8] 200:	movr ebx, cmt
          [0xc9] 201:	movi #206, adx
          [0xcb] 203:	ifne
line: 568 [0xcc] 204:	goto @317
          [0xcd] 205:	nop
          [0xce] 206:	nop
          [0xcf] 207:	goto @312
          [0xd0] 208:	loadl ebx, fp+2
          [0xd1] 209:	movr cmt, ebx
          [0xd2] 210:	movi #311, adx
          [0xd4] 212:	ifne
line: 572 [0xd5] 213:	movl 0
          [0xd6] 214:	movn #7
          [0xd7] 215:	movi #0, adx
          [0xd9] 217:	iaload_2 ebx, adx
          [0xda] 218:	rstore ebx
          [0xdb] 219:	call @65 // <std#char.isAlpha(var)>
          [0xdc] 220:	loadval ebx
          [0xdd] 221:	not ebx, ebx
          [0xde] 222:	cmp ebx, 1
          [0xdf] 223:	movr ebx, cmt
          [0xe0] 224:	skne 55 // pc = 279
          [0xe1] 225:	istore 1
          [0xe2] 226:	movi #92, ebx
          [0xe4] 228:	rstore ebx
          [0xe5] 229:	movl 0
          [0xe6] 230:	movn #7
          [0xe7] 231:	movi #0, adx
          [0xe9] 233:	chklen adx
          [0xea] 234:	iaload_2 egx, adx
          [0xeb] 235:	loadval ebx
          [0xec] 236:	tne ebx, egx
          [0xed] 237:	movr ebx, cmt
          [0xee] 238:	loadval ecx
          [0xef] 239:	and ecx, ebx
          [0xf0] 240:	movr ebx, cmt
          [0xf1] 241:	cmp ebx, 1
          [0xf2] 242:	movr ebx, cmt
          [0xf3] 243:	skne 36 // pc = 279
          [0xf4] 244:	istore 1
          [0xf5] 245:	movi #34, ebx
          [0xf7] 247:	rstore ebx
          [0xf8] 248:	movl 0
          [0xf9] 249:	movn #7
          [0xfa] 250:	movi #0, adx
          [0xfc] 252:	chklen adx
          [0xfd] 253:	iaload_2 egx, adx
          [0xfe] 254:	loadval ebx
          [0xff] 255:	tne ebx, egx
          [0x100] 256:	movr ebx, cmt
          [0x101] 257:	loadval ecx
          [0x102] 258:	and ecx, ebx
          [0x103] 259:	movr ebx, cmt
          [0x104] 260:	cmp ebx, 1
          [0x105] 261:	movr ebx, cmt
          [0x106] 262:	skne 17 // pc = 279
          [0x107] 263:	istore 1
          [0x108] 264:	movi #39, ebx
          [0x10a] 266:	rstore ebx
          [0x10b] 267:	movl 0
          [0x10c] 268:	movn #7
          [0x10d] 269:	movi #0, adx
          [0x10f] 271:	chklen adx
          [0x110] 272:	iaload_2 egx, adx
          [0x111] 273:	loadval ebx
          [0x112] 274:	tne ebx, egx
          [0x113] 275:	movr ebx, cmt
          [0x114] 276:	loadval ecx
          [0x115] 277:	and ecx, ebx
          [0x116] 278:	movr ebx, cmt
          [0x117] 279:	movr cmt, ebx
          [0x118] 280:	movi #307, adx
          [0x11a] 282:	ifne
line: 574 [0x11b] 283:	movl 0
          [0x11c] 284:	movn #1
          [0x11d] 285:	pushobj
          [0x11e] 286:	movg @68 // @app#CompilerError
          [0x11f] 287:	movn #7
          [0x120] 288:	pushobj
          [0x121] 289:	movl 0
          [0x122] 290:	movn #8
          [0x123] 291:	movi #0, adx
          [0x125] 293:	iaload_2 ebx, adx
          [0x126] 294:	rstore ebx
          [0x127] 295:	movl 0
          [0x128] 296:	movn #10
          [0x129] 297:	movi #0, adx
          [0x12b] 299:	iaload_2 ebx, adx
          [0x12c] 300:	rstore ebx
          [0x12d] 301:	new_class @46 // std#string
          [0x12e] 302:	newstr @365 // ", text preceding `\` must be alpha,..."
          [0x12f] 303:	call @558 // <std#string.string(var[])>
          [0x130] 304:	call @795 // <app#ErrorManager.createNewError(app#CompilerError,var,var,std#string)>
line: 575 [0x131] 305:	ret
          [0x132] 306:	nop
          [0x133] 307:	nop
line: 578 [0x134] 308:	istorel 0, fp+2
          [0x136] 310:	goto @312
          [0x137] 311:	nop
          [0x138] 312:	nop
line: 581 [0x139] 313:	movl 0
          [0x13a] 314:	pushobj
          [0x13b] 315:	call @880 // <app#Tokenizer.advance()>
          [0x13c] 316:	goto @100
line: 584 [0x13d] 317:	movl 0
          [0x13e] 318:	movn #9
          [0x13f] 319:	movi #0, adx
          [0x141] 321:	chklen adx
          [0x142] 322:	iaload_2 cmt, adx
          [0x143] 323:	movi #347, adx
          [0x145] 325:	ifne
line: 586 [0x146] 326:	movl 0
          [0x147] 327:	movn #1
          [0x148] 328:	pushobj
          [0x149] 329:	movg @68 // @app#CompilerError
          [0x14a] 330:	movn #5
          [0x14b] 331:	pushobj
          [0x14c] 332:	movl 0
          [0x14d] 333:	movn #8
          [0x14e] 334:	movi #0, adx
          [0x150] 336:	iaload_2 ebx, adx
          [0x151] 337:	rstore ebx
          [0x152] 338:	movl 0
          [0x153] 339:	movn #10
          [0x154] 340:	movi #0, adx
          [0x156] 342:	iaload_2 ebx, adx
          [0x157] 343:	rstore ebx
          [0x158] 344:	call @796 // <app#ErrorManager.createNewError(app#CompilerError,var,var)>
line: 587 [0x159] 345:	ret
          [0x15a] 346:	nop
          [0x15b] 347:	nop
line: 590 [0x15c] 348:	movl 0
          [0x15d] 349:	movn #5
          [0x15e] 350:	movi #0, adx
          [0x160] 352:	chklen adx
          [0x161] 353:	iaload_2 ebx, adx
          [0x162] 354:	dec ebx
          [0x163] 355:	rmov adx, ebx
          [0x164] 356:	inc ebx
line: 591 [0x165] 357:	loadl ebx, fp+1
          [0x166] 358:	not ebx, ebx
          [0x167] 359:	movr cmt, ebx
          [0x168] 360:	movi #370, adx
          [0x16a] 362:	ifne
line: 592 [0x16b] 363:	movl 0
          [0x16c] 364:	pushobj
          [0x16d] 365:	movg @70 // @app#TokenId
          [0x16e] 366:	movn #9
          [0x16f] 367:	pushobj
          [0x170] 368:	call @869 // <app#Tokenizer.addToken(app#TokenId)>
          [0x171] 369:	goto @411
line: 594 [0x172] 370:	movl 0
          [0x173] 371:	movn #0
          [0x174] 372:	pushobj
          [0x175] 373:	new_class @58 // app#Token
          [0x176] 374:	movl 0
          [0x177] 375:	pushobj
          [0x178] 376:	movl 0
          [0x179] 377:	movn #3
          [0x17a] 378:	pushobj
          [0x17b] 379:	movl 0
          [0x17c] 380:	movn #6
          [0x17d] 381:	movi #0, adx
          [0x17f] 383:	iaload_2 ebx, adx
          [0x180] 384:	rstore ebx
          [0x181] 385:	movl 0
          [0x182] 386:	movn #5
          [0x183] 387:	movi #0, adx
          [0x185] 389:	iaload_2 ebx, adx
          [0x186] 390:	rstore ebx
          [0x187] 391:	call @587 // <std#string.substring(var,var)>
          [0x188] 392:	call @877 // <app#Tokenizer.getEscapedString(std#string)>
          [0x189] 393:	movg @70 // @app#TokenId
          [0x18a] 394:	movn #9
          [0x18b] 395:	pushobj
          [0x18c] 396:	movl 0
          [0x18d] 397:	movn #10
          [0x18e] 398:	movi #0, adx
          [0x190] 400:	iaload_2 ebx, adx
          [0x191] 401:	rstore ebx
          [0x192] 402:	movl 0
          [0x193] 403:	movn #8
          [0x194] 404:	movi #0, adx
          [0x196] 406:	iaload_2 ebx, adx
          [0x197] 407:	rstore ebx
          [0x198] 408:	call @852 // <app#Token.Token(std#string,app#TokenId,var,var)>
          [0x199] 409:	call @1045 // <std#ArrayList<app#Token>.add(app#Token)>
          [0x19a] 410:	nop
          [0x19b] 411:	nop
line: 595 [0x19c] 412:	movl 0
          [0x19d] 413:	movn #5
          [0x19e] 414:	movi #0, adx
          [0x1a0] 416:	chklen adx
          [0x1a1] 417:	iaload_2 ebx, adx
          [0x1a2] 418:	inc ebx
          [0x1a3] 419:	rmov adx, ebx
          [0x1a4] 420:	dec ebx
          [0x1a5] 421:	ret

func:@876 [app#Tokenizer.isWhitespace] in file: lib/support//bootstrap//frontend//tokenizer//Tokenizer.sharp:599:21: note:  
		    def isWhitespace(var c) : var {
		                    ^


isWhitespace:
line: 599 [0x0] 0:	movi #32, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	loadl ebx, fp+1
          [0x4] 4:	movr egx, ebx
          [0x5] 5:	loadval ebx
          [0x6] 6:	test ebx, egx
          [0x7] 7:	movr ebx, cmt
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	skpe 76 // pc = 85
          [0xa] 10:	movi #10, ebx
          [0xc] 12:	rstore ebx
          [0xd] 13:	loadl ebx, fp+1
          [0xe] 14:	movr egx, ebx
          [0xf] 15:	loadval ebx
          [0x10] 16:	test ebx, egx
          [0x11] 17:	movr ebx, cmt
          [0x12] 18:	cmp ebx, 1
          [0x13] 19:	movr ebx, cmt
          [0x14] 20:	movr cmt, ebx
          [0x15] 21:	movr ebx, cmt
          [0x16] 22:	skpe 63 // pc = 85
          [0x17] 23:	movi #13, ebx
          [0x19] 25:	rstore ebx
          [0x1a] 26:	loadl ebx, fp+1
          [0x1b] 27:	movr egx, ebx
          [0x1c] 28:	loadval ebx
          [0x1d] 29:	test ebx, egx
          [0x1e] 30:	movr ebx, cmt
          [0x1f] 31:	cmp ebx, 1
          [0x20] 32:	movr ebx, cmt
          [0x21] 33:	movr cmt, ebx
          [0x22] 34:	movr ebx, cmt
          [0x23] 35:	skpe 50 // pc = 85
          [0x24] 36:	movi #9, ebx
          [0x26] 38:	rstore ebx
          [0x27] 39:	loadl ebx, fp+1
          [0x28] 40:	movr egx, ebx
          [0x29] 41:	loadval ebx
          [0x2a] 42:	test ebx, egx
          [0x2b] 43:	movr ebx, cmt
          [0x2c] 44:	cmp ebx, 1
          [0x2d] 45:	movr ebx, cmt
          [0x2e] 46:	movr cmt, ebx
          [0x2f] 47:	movr ebx, cmt
          [0x30] 48:	skpe 37 // pc = 85
          [0x31] 49:	movi #8, ebx
          [0x33] 51:	rstore ebx
          [0x34] 52:	loadl ebx, fp+1
          [0x35] 53:	movr egx, ebx
          [0x36] 54:	loadval ebx
          [0x37] 55:	test ebx, egx
          [0x38] 56:	movr ebx, cmt
          [0x39] 57:	cmp ebx, 1
          [0x3a] 58:	movr ebx, cmt
          [0x3b] 59:	movr cmt, ebx
          [0x3c] 60:	movr ebx, cmt
          [0x3d] 61:	skpe 24 // pc = 85
          [0x3e] 62:	movi #11, ebx
          [0x40] 64:	rstore ebx
          [0x41] 65:	loadl ebx, fp+1
          [0x42] 66:	movr egx, ebx
          [0x43] 67:	loadval ebx
          [0x44] 68:	test ebx, egx
          [0x45] 69:	movr ebx, cmt
          [0x46] 70:	cmp ebx, 1
          [0x47] 71:	movr ebx, cmt
          [0x48] 72:	movr cmt, ebx
          [0x49] 73:	movr ebx, cmt
          [0x4a] 74:	skpe 11 // pc = 85
          [0x4b] 75:	movi #12, ebx
          [0x4d] 77:	rstore ebx
          [0x4e] 78:	loadl ebx, fp+1
          [0x4f] 79:	movr egx, ebx
          [0x50] 80:	loadval ebx
          [0x51] 81:	test ebx, egx
          [0x52] 82:	movr ebx, cmt
          [0x53] 83:	cmp ebx, 1
          [0x54] 84:	movr ebx, cmt
          [0x55] 85:	return_val ebx
          [0x56] 86:	ret

func:@877 [app#Tokenizer.getEscapedString] in file: lib/support//bootstrap//frontend//tokenizer//Tokenizer.sharp:606:25: note:  
		    def getEscapedString(string msg) : string {
		                        ^


getEscapedString:
line: 606 [0x0] 0:	movl 1
          [0x1] 1:	pushobj
          [0x2] 2:	call @595 // <std#string.size()>
          [0x3] 3:	loadval ebx
          [0x4] 4:	newarry ebx
          [0x5] 5:	movl 2
          [0x6] 6:	popobj
line: 607 [0x7] 7:	movl 1
          [0x8] 8:	pushobj
          [0x9] 9:	call @596 // <std#string.getData()>
          [0xa] 10:	movl 3
          [0xb] 11:	popobj
line: 608 [0xc] 12:	new_class @46 // std#string
          [0xd] 13:	newstr @226 // ""
          [0xe] 14:	call @558 // <std#string.string(var[])>
          [0xf] 15:	popl 4
line: 610 [0x10] 16:	new_class @8 // std#char
          [0x11] 17:	movi #0, ebx
          [0x13] 19:	rstore ebx
          [0x14] 20:	call @31 // <std#char.char(var)>
          [0x15] 21:	popl 5
line: 611 [0x16] 22:	istorel 0, fp+6
line: 612 [0x18] 24:	istorel 0, fp+7
          [0x1a] 26:	movl 3
          [0x1b] 27:	sizeof ebx
          [0x1c] 28:	movr egx, ebx
          [0x1d] 29:	loadl ebx, fp+7
          [0x1e] 30:	lt ebx, egx
          [0x1f] 31:	movr ebx, cmt
          [0x20] 32:	movi #205, adx
          [0x22] 34:	ifne
line: 614 [0x23] 35:	movl 3
          [0x24] 36:	loadl ebx, fp+7
          [0x25] 37:	chklen ebx
          [0x26] 38:	iaload_2 ebx, ebx
          [0x27] 39:	rstore ebx
          [0x28] 40:	movi #92, ebx
          [0x2a] 42:	movr egx, ebx
          [0x2b] 43:	loadval ebx
          [0x2c] 44:	test ebx, egx
          [0x2d] 45:	movr ebx, cmt
          [0x2e] 46:	movi #185, adx
          [0x30] 48:	ifne
line: 616 [0x31] 49:	movl 3
          [0x32] 50:	movi #1, ebx
          [0x34] 52:	rstore ebx
          [0x35] 53:	loadl ebx, fp+7
          [0x36] 54:	loadval egx
          [0x37] 55:	add ebx, egx -> ebx
          [0x39] 57:	rstore ebx
          [0x3a] 58:	loadval ebx
          [0x3b] 59:	chklen ebx
          [0x3c] 60:	iaload_2 ebx, ebx
          [0x3d] 61:	switch 0 //  table [default: 158 case 110: @62, case 116: @74, case 98: @86, case 118: @98, case 114: @110, case 102: @122, case 48: @134, case 97: @146, ]
line: 618 [0x3e] 62:	movi #10, ebx
          [0x40] 64:	rstore ebx
          [0x41] 65:	movl 2
          [0x42] 66:	loadl ebx, fp+6
          [0x43] 67:	movi #1, ecx
          [0x45] 69:	addl ecx, @6
          [0x46] 70:	chklen ebx
          [0x47] 71:	loadval egx
          [0x48] 72:	rmov ebx, egx
line: 619 [0x49] 73:	goto @180
line: 621 [0x4a] 74:	movi #9, ebx
          [0x4c] 76:	rstore ebx
          [0x4d] 77:	movl 2
          [0x4e] 78:	loadl ebx, fp+6
          [0x4f] 79:	movi #1, ecx
          [0x51] 81:	addl ecx, @6
          [0x52] 82:	chklen ebx
          [0x53] 83:	loadval egx
          [0x54] 84:	rmov ebx, egx
line: 622 [0x55] 85:	goto @180
line: 624 [0x56] 86:	movi #8, ebx
          [0x58] 88:	rstore ebx
          [0x59] 89:	movl 2
          [0x5a] 90:	loadl ebx, fp+6
          [0x5b] 91:	movi #1, ecx
          [0x5d] 93:	addl ecx, @6
          [0x5e] 94:	chklen ebx
          [0x5f] 95:	loadval egx
          [0x60] 96:	rmov ebx, egx
line: 625 [0x61] 97:	goto @180
line: 627 [0x62] 98:	movi #11, ebx
          [0x64] 100:	rstore ebx
          [0x65] 101:	movl 2
          [0x66] 102:	loadl ebx, fp+6
          [0x67] 103:	movi #1, ecx
          [0x69] 105:	addl ecx, @6
          [0x6a] 106:	chklen ebx
          [0x6b] 107:	loadval egx
          [0x6c] 108:	rmov ebx, egx
line: 628 [0x6d] 109:	goto @180
line: 630 [0x6e] 110:	movi #13, ebx
          [0x70] 112:	rstore ebx
          [0x71] 113:	movl 2
          [0x72] 114:	loadl ebx, fp+6
          [0x73] 115:	movi #1, ecx
          [0x75] 117:	addl ecx, @6
          [0x76] 118:	chklen ebx
          [0x77] 119:	loadval egx
          [0x78] 120:	rmov ebx, egx
line: 631 [0x79] 121:	goto @180
line: 633 [0x7a] 122:	movi #12, ebx
          [0x7c] 124:	rstore ebx
          [0x7d] 125:	movl 2
          [0x7e] 126:	loadl ebx, fp+6
          [0x7f] 127:	movi #1, ecx
          [0x81] 129:	addl ecx, @6
          [0x82] 130:	chklen ebx
          [0x83] 131:	loadval egx
          [0x84] 132:	rmov ebx, egx
line: 634 [0x85] 133:	goto @180
line: 636 [0x86] 134:	movi #0, ebx
          [0x88] 136:	rstore ebx
          [0x89] 137:	movl 2
          [0x8a] 138:	loadl ebx, fp+6
          [0x8b] 139:	movi #1, ecx
          [0x8d] 141:	addl ecx, @6
          [0x8e] 142:	chklen ebx
          [0x8f] 143:	loadval egx
          [0x90] 144:	rmov ebx, egx
line: 637 [0x91] 145:	goto @180
line: 639 [0x92] 146:	movi #7, ebx
          [0x94] 148:	rstore ebx
          [0x95] 149:	movl 2
          [0x96] 150:	loadl ebx, fp+6
          [0x97] 151:	movi #1, ecx
          [0x99] 153:	addl ecx, @6
          [0x9a] 154:	chklen ebx
          [0x9b] 155:	loadval egx
          [0x9c] 156:	rmov ebx, egx
line: 640 [0x9d] 157:	goto @180
line: 642 [0x9e] 158:	movl 3
          [0x9f] 159:	movi #1, ebx
          [0xa1] 161:	rstore ebx
          [0xa2] 162:	loadl ebx, fp+7
          [0xa3] 163:	loadval egx
          [0xa4] 164:	add ebx, egx -> ebx
          [0xa6] 166:	rstore ebx
          [0xa7] 167:	loadval ebx
          [0xa8] 168:	chklen ebx
          [0xa9] 169:	iaload_2 ebx, ebx
          [0xaa] 170:	rstore ebx
          [0xab] 171:	movl 2
          [0xac] 172:	loadl ebx, fp+6
          [0xad] 173:	movi #1, ecx
          [0xaf] 175:	addl ecx, @6
          [0xb0] 176:	chklen ebx
          [0xb1] 177:	loadval egx
          [0xb2] 178:	rmov ebx, egx
line: 643 [0xb3] 179:	goto @180
line: 646 [0xb4] 180:	loadl ebx, fp+7
          [0xb5] 181:	movi #1, ecx
          [0xb7] 183:	addl ecx, @7
          [0xb8] 184:	goto @199
line: 649 [0xb9] 185:	movl 3
          [0xba] 186:	loadl ebx, fp+7
          [0xbb] 187:	chklen ebx
          [0xbc] 188:	iaload_2 ebx, ebx
          [0xbd] 189:	rstore ebx
          [0xbe] 190:	movl 2
          [0xbf] 191:	loadl ebx, fp+6
          [0xc0] 192:	movi #1, ecx
          [0xc2] 194:	addl ecx, @6
          [0xc3] 195:	chklen ebx
          [0xc4] 196:	loadval egx
          [0xc5] 197:	rmov ebx, egx
          [0xc6] 198:	nop
          [0xc7] 199:	nop
          [0xc8] 200:	loadl ebx, fp+7
          [0xc9] 201:	movi #1, ecx
          [0xcb] 203:	addl ecx, @7
          [0xcc] 204:	goto @26
line: 651 [0xcd] 205:	movl 4
          [0xce] 206:	pushobj
          [0xcf] 207:	movl 2
          [0xd0] 208:	pushobj
          [0xd1] 209:	loadl ebx, fp+6
          [0xd2] 210:	rstore ebx
          [0xd3] 211:	call @562 // <std#string.string(var[],var)>
          [0xd4] 212:	movsl #0
          [0xd5] 213:	returnobj
          [0xd6] 214:	ret

func:@878 [app#Tokenizer.isSign] in file: lib/support//bootstrap//frontend//tokenizer//Tokenizer.sharp:655:15: note:  
		    def isSign(var c) : var {
		              ^


isSign:
line: 655 [0x0] 0:	movi #43, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	loadl ebx, fp+1
          [0x4] 4:	movr egx, ebx
          [0x5] 5:	loadval ebx
          [0x6] 6:	test ebx, egx
          [0x7] 7:	movr ebx, cmt
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	skpe 11 // pc = 20
          [0xa] 10:	movi #45, ebx
          [0xc] 12:	rstore ebx
          [0xd] 13:	loadl ebx, fp+1
          [0xe] 14:	movr egx, ebx
          [0xf] 15:	loadval ebx
          [0x10] 16:	test ebx, egx
          [0x11] 17:	movr ebx, cmt
          [0x12] 18:	cmp ebx, 1
          [0x13] 19:	movr ebx, cmt
          [0x14] 20:	return_val ebx
          [0x15] 21:	ret

func:@879 [app#Tokenizer.newline] in file: lib/support//bootstrap//frontend//tokenizer//Tokenizer.sharp:659:16: note:  
		    def newline() {
		               ^


newline:
line: 659 [0x0] 0:	movi #0, ebx
          [0x2] 2:	nop
          [0x3] 3:	rstore ebx
          [0x4] 4:	movl 0
          [0x5] 5:	movn #10
          [0x6] 6:	movi #0, adx
          [0x8] 8:	loadval ecx
          [0x9] 9:	rmov adx, ecx
line: 660 [0xa] 10:	movl 0
          [0xb] 11:	movn #8
          [0xc] 12:	movi #0, adx
          [0xe] 14:	chklen adx
          [0xf] 15:	iaload_2 ebx, adx
          [0x10] 16:	inc ebx
          [0x11] 17:	rmov adx, ebx
          [0x12] 18:	dec ebx
          [0x13] 19:	ret

func:@880 [app#Tokenizer.advance] in file: lib/support//bootstrap//frontend//tokenizer//Tokenizer.sharp:664:16: note:  
		    def advance() {
		               ^


advance:
line: 664 [0x0] 0:	movl 0
          [0x1] 1:	movn #10
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	inc ebx
          [0x7] 7:	rmov adx, ebx
          [0x8] 8:	dec ebx
line: 665 [0x9] 9:	movl 0
          [0xa] 10:	movn #5
          [0xb] 11:	movi #0, adx
          [0xd] 13:	chklen adx
          [0xe] 14:	iaload_2 ebx, adx
          [0xf] 15:	inc ebx
          [0x10] 16:	rmov adx, ebx
          [0x11] 17:	dec ebx
line: 666 [0x12] 18:	movl 0
          [0x13] 19:	movn #4
          [0x14] 20:	sizeof ebx
          [0x15] 21:	movr egx, ebx
          [0x16] 22:	movl 0
          [0x17] 23:	movn #5
          [0x18] 24:	movi #0, adx
          [0x1a] 26:	chklen adx
          [0x1b] 27:	iaload_2 ebx, adx
          [0x1c] 28:	lt ebx, egx
          [0x1d] 29:	movr ebx, cmt
          [0x1e] 30:	movi #55, adx
          [0x20] 32:	ifne
line: 667 [0x21] 33:	movl 0
          [0x22] 34:	movn #4
          [0x23] 35:	pushobj
          [0x24] 36:	movl 0
          [0x25] 37:	movn #5
          [0x26] 38:	movi #0, adx
          [0x28] 40:	chklen adx
          [0x29] 41:	iaload_2 ebx, adx
          [0x2a] 42:	movsl #0
          [0x2b] 43:	chklen ebx
          [0x2c] 44:	iaload_2 ebx, ebx
          [0x2d] 45:	pop
          [0x2e] 46:	nop
          [0x2f] 47:	rstore ebx
          [0x30] 48:	movl 0
          [0x31] 49:	movn #7
          [0x32] 50:	movi #0, adx
          [0x34] 52:	loadval ecx
          [0x35] 53:	rmov adx, ecx
          [0x36] 54:	goto @66
line: 668 [0x37] 55:	movi #1, ebx
          [0x39] 57:	nop
          [0x3a] 58:	rstore ebx
          [0x3b] 59:	movl 0
          [0x3c] 60:	movn #9
          [0x3d] 61:	movi #0, adx
          [0x3f] 63:	loadval ecx
          [0x40] 64:	rmov adx, ecx
          [0x41] 65:	nop
          [0x42] 66:	nop
          [0x43] 67:	ret

func:@881 [app#Tokenizer.peekEnd] in file: lib/support//bootstrap//frontend//tokenizer//Tokenizer.sharp:672:16: note:  
		    def peekEnd(var chars) : var {
		               ^


peekEnd:
line: 672 [0x0] 0:	movl 0
          [0x1] 1:	movn #4
          [0x2] 2:	sizeof ebx
          [0x3] 3:	rstore ebx
          [0x4] 4:	loadl ebx, fp+1
          [0x5] 5:	rstore ebx
          [0x6] 6:	movl 0
          [0x7] 7:	movn #5
          [0x8] 8:	movi #0, adx
          [0xa] 10:	chklen adx
          [0xb] 11:	iaload_2 ebx, adx
          [0xc] 12:	loadval egx
          [0xd] 13:	add ebx, egx -> ebx
          [0xf] 15:	rstore ebx
          [0x10] 16:	loadval ebx
          [0x11] 17:	loadval ecx
          [0x12] 18:	gte ebx, ecx
          [0x13] 19:	movr ebx, cmt
          [0x14] 20:	return_val cmt
          [0x15] 21:	ret

func:@882 [app#Tokenizer.tokensLeft] in file: lib/support//bootstrap//frontend//tokenizer//Tokenizer.sharp:676:19: note:  
		    def tokensLeft() : var {
		                  ^


tokensLeft:
line: 676 [0x0] 0:	movl 0
          [0x1] 1:	movn #5
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movl 0
          [0x7] 7:	movn #4
          [0x8] 8:	sizeof ebx
          [0x9] 9:	loadval egx
          [0xa] 10:	sub ebx, egx -> ebx
          [0xc] 12:	rstore ebx
          [0xd] 13:	loadval ebx
          [0xe] 14:	return_val ebx
          [0xf] 15:	ret

func:@883 [app#Tokenizer.peek] in file: lib/support//bootstrap//frontend//tokenizer//Tokenizer.sharp:680:13: note:  
		    def peek(var chars) : var {
		            ^


peek:
line: 680 [0x0] 0:	movl 0
          [0x1] 1:	movn #4
          [0x2] 2:	sizeof ebx
          [0x3] 3:	rstore ebx
          [0x4] 4:	loadl ebx, fp+1
          [0x5] 5:	rstore ebx
          [0x6] 6:	movl 0
          [0x7] 7:	movn #5
          [0x8] 8:	movi #0, adx
          [0xa] 10:	chklen adx
          [0xb] 11:	iaload_2 ebx, adx
          [0xc] 12:	loadval egx
          [0xd] 13:	add ebx, egx -> ebx
          [0xf] 15:	rstore ebx
          [0x10] 16:	loadval ebx
          [0x11] 17:	loadval ecx
          [0x12] 18:	gte ebx, ecx
          [0x13] 19:	movr ebx, cmt
          [0x14] 20:	movr ebx, cmt
          [0x15] 21:	skpe 22 // pc = 43
          [0x16] 22:	movi #0, ebx
          [0x18] 24:	rstore ebx
          [0x19] 25:	loadl ebx, fp+1
          [0x1a] 26:	rstore ebx
          [0x1b] 27:	movl 0
          [0x1c] 28:	movn #5
          [0x1d] 29:	movi #0, adx
          [0x1f] 31:	chklen adx
          [0x20] 32:	iaload_2 ebx, adx
          [0x21] 33:	loadval egx
          [0x22] 34:	add ebx, egx -> ebx
          [0x24] 36:	rstore ebx
          [0x25] 37:	loadval ebx
          [0x26] 38:	loadval ecx
          [0x27] 39:	lt ebx, ecx
          [0x28] 40:	movr ebx, cmt
          [0x29] 41:	cmp ebx, 1
          [0x2a] 42:	movr ebx, cmt
          [0x2b] 43:	movr cmt, ebx
          [0x2c] 44:	loadpc_2 adx, pc+24 // adx = 68
          [0x2d] 45:	ifne
          [0x2e] 46:	movl 0
          [0x2f] 47:	movn #4
          [0x30] 48:	pushobj
          [0x31] 49:	movi #1, ebx
          [0x33] 51:	rstore ebx
          [0x34] 52:	movl 0
          [0x35] 53:	movn #4
          [0x36] 54:	sizeof ebx
          [0x37] 55:	loadval ecx
          [0x38] 56:	sub ebx, ecx -> ebx
          [0x3a] 58:	rstore ebx
          [0x3b] 59:	loadval ebx
          [0x3c] 60:	movsl #0
          [0x3d] 61:	chklen ebx
          [0x3e] 62:	iaload_2 ebx, ebx
          [0x3f] 63:	pop
          [0x40] 64:	rstore ebx
          [0x41] 65:	movi #1, cmt
          [0x43] 67:	skpe 22 // pc = 89
          [0x44] 68:	movl 0
          [0x45] 69:	movn #4
          [0x46] 70:	pushobj
          [0x47] 71:	loadl ebx, fp+1
          [0x48] 72:	rstore ebx
          [0x49] 73:	movl 0
          [0x4a] 74:	movn #5
          [0x4b] 75:	movi #0, adx
          [0x4d] 77:	chklen adx
          [0x4e] 78:	iaload_2 ebx, adx
          [0x4f] 79:	loadval egx
          [0x50] 80:	add ebx, egx -> ebx
          [0x52] 82:	rstore ebx
          [0x53] 83:	loadval ebx
          [0x54] 84:	movsl #0
          [0x55] 85:	chklen ebx
          [0x56] 86:	iaload_2 ebx, ebx
          [0x57] 87:	pop
          [0x58] 88:	rstore ebx
          [0x59] 89:	loadval ebx
          [0x5a] 90:	return_val ebx
          [0x5b] 91:	ret

func:@884 [app#Tokenizer.getErrors] in file: lib/support//bootstrap//frontend//tokenizer//Tokenizer.sharp:685:25: note:  
		    public def getErrors() : ErrorManager {
		                        ^


getErrors:
line: 685 [0x0] 0:	movl 0
          [0x1] 1:	movn #1
          [0x2] 2:	returnobj
          [0x3] 3:	ret

func:@885 [app#Tokenizer.getData] in file: lib/support//bootstrap//frontend//tokenizer//Tokenizer.sharp:689:23: note:  
		    public def getData() : string {
		                      ^


getData:
line: 689 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	returnobj
          [0x3] 3:	ret

func:@886 [app#Tokenizer.getLines] in file: lib/support//bootstrap//frontend//tokenizer//Tokenizer.sharp:693:24: note:  
		    public def getLines() : ArrayList<string> {
		                       ^


getLines:
line: 693 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	returnobj
          [0x3] 3:	ret

func:@887 [app#Tokenizer.getFile] in file: lib/support//bootstrap//frontend//tokenizer//Tokenizer.sharp:697:23: note:  
		    public def getFile() : string {
		                      ^


getFile:
line: 697 [0x0] 0:	movl 0
          [0x1] 1:	movn #11
          [0x2] 2:	returnobj
          [0x3] 3:	ret

func:@888 [app#Tokenizer.get] in file: lib/support//bootstrap//frontend//tokenizer//Tokenizer.sharp:701:19: note:  
		    public def get(var pos) : Token {
		                  ^


get:
line: 701 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	loadl ebx, fp+1
          [0x4] 4:	rstore ebx
          [0x5] 5:	call @1039 // <std#ArrayList<app#Token>.get(var)>
          [0x6] 6:	movsl #0
          [0x7] 7:	returnobj
          [0x8] 8:	ret

func:@889 [app#Tokenizer.last] in file: lib/support//bootstrap//frontend//tokenizer//Tokenizer.sharp:705:20: note:  
		    public def last() : Token {
		                   ^


last:
line: 705 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	call @1040 // <std#ArrayList<app#Token>.last()>
          [0x4] 4:	movsl #0
          [0x5] 5:	returnobj
          [0x6] 6:	ret

func:@890 [app#Tokenizer.getTokens] in file: lib/support//bootstrap//frontend//tokenizer//Tokenizer.sharp:709:25: note:  
		    public def getTokens() : Token[] {
		                        ^


getTokens:
line: 709 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	call @1049 // <std#ArrayList<app#Token>.data()>
          [0x4] 4:	movsl #0
          [0x5] 5:	returnobj
          [0x6] 6:	ret

func:@891 [app#Tokenizer.size] in file: lib/support//bootstrap//frontend//tokenizer//Tokenizer.sharp:713:20: note:  
		    public def size() : var {
		                   ^


size:
line: 713 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	call @1036 // <std#ArrayList<app#Token>.size()>
          [0x4] 4:	loadval ebx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@892 [app#Tokenizer.addLines] in file: lib/support//bootstrap//frontend//tokenizer//Tokenizer.sharp:717:17: note:  
		    def addLines() {
		                ^


addLines:
line: 717 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	pushobj
          [0x3] 3:	call @596 // <std#string.getData()>
          [0x4] 4:	movl 1
          [0x5] 5:	popobj
line: 719 [0x6] 6:	movi #0, ebx
          [0x8] 8:	nop
          [0x9] 9:	rstore ebx
          [0xa] 10:	movl 0
          [0xb] 11:	movn #6
          [0xc] 12:	movi #0, adx
          [0xe] 14:	loadval ecx
          [0xf] 15:	rmov adx, ecx
line: 720 [0x10] 16:	istorel 0, fp+2
          [0x12] 18:	movl 1
          [0x13] 19:	sizeof ebx
          [0x14] 20:	movr egx, ebx
          [0x15] 21:	loadl ebx, fp+2
          [0x16] 22:	lt ebx, egx
          [0x17] 23:	movr ebx, cmt
          [0x18] 24:	movi #116, adx
          [0x1a] 26:	ifne
line: 721 [0x1b] 27:	movl 1
          [0x1c] 28:	loadl ebx, fp+2
          [0x1d] 29:	chklen ebx
          [0x1e] 30:	iaload_2 ebx, ebx
          [0x1f] 31:	rstore ebx
          [0x20] 32:	movi #10, ebx
          [0x22] 34:	movr egx, ebx
          [0x23] 35:	loadval ebx
          [0x24] 36:	test ebx, egx
          [0x25] 37:	movr ebx, cmt
          [0x26] 38:	movi #110, adx
          [0x28] 40:	ifne
line: 722 [0x29] 41:	movl 0
          [0x2a] 42:	movn #2
          [0x2b] 43:	pushobj
          [0x2c] 44:	movl 0
          [0x2d] 45:	movn #3
          [0x2e] 46:	pushobj
          [0x2f] 47:	movl 0
          [0x30] 48:	movn #6
          [0x31] 49:	movi #0, adx
          [0x33] 51:	iaload_2 ebx, adx
          [0x34] 52:	rstore ebx
          [0x35] 53:	loadl ebx, fp+2
          [0x36] 54:	rstore ebx
          [0x37] 55:	movi #0, ebx
          [0x39] 57:	movr egx, ebx
          [0x3a] 58:	loadval ebx
          [0x3b] 59:	test ebx, egx
          [0x3c] 60:	movr ebx, cmt
          [0x3d] 61:	movr ebx, cmt
          [0x3e] 62:	skpe 14 // pc = 76
          [0x3f] 63:	movl 0
          [0x40] 64:	movn #6
          [0x41] 65:	movi #0, adx
          [0x43] 67:	iaload_2 ebx, adx
          [0x44] 68:	rstore ebx
          [0x45] 69:	loadl ebx, fp+2
          [0x46] 70:	movr egx, ebx
          [0x47] 71:	loadval ebx
          [0x48] 72:	test ebx, egx
          [0x49] 73:	movr ebx, cmt
          [0x4a] 74:	cmp ebx, 1
          [0x4b] 75:	movr ebx, cmt
          [0x4c] 76:	movr cmt, ebx
          [0x4d] 77:	loadpc_2 adx, pc+7 // adx = 84
          [0x4e] 78:	ifne
          [0x4f] 79:	loadl ebx, fp+2
          [0x50] 80:	rstore ebx
          [0x51] 81:	movi #1, cmt
          [0x53] 83:	skpe 9 // pc = 92
          [0x54] 84:	movi #1, ebx
          [0x56] 86:	rstore ebx
          [0x57] 87:	loadl ebx, fp+2
          [0x58] 88:	loadval egx
          [0x59] 89:	sub ebx, egx -> ebx
          [0x5b] 91:	rstore ebx
          [0x5c] 92:	call @587 // <std#string.substring(var,var)>
          [0x5d] 93:	call @931 // <std#ArrayList<std#string>.add(std#string)>
line: 723 [0x5e] 94:	movi #1, ebx
          [0x60] 96:	rstore ebx
          [0x61] 97:	loadl ebx, fp+2
          [0x62] 98:	loadval egx
          [0x63] 99:	add ebx, egx -> ebx
          [0x65] 101:	rstore ebx
          [0x66] 102:	nop
          [0x67] 103:	movl 0
          [0x68] 104:	movn #6
          [0x69] 105:	movi #0, adx
          [0x6b] 107:	loadval ecx
          [0x6c] 108:	rmov adx, ecx
          [0x6d] 109:	nop
          [0x6e] 110:	nop
          [0x6f] 111:	loadl ebx, fp+2
          [0x70] 112:	movi #1, ecx
          [0x72] 114:	addl ecx, @2
          [0x73] 115:	goto @18
line: 727 [0x74] 116:	movl 0
          [0x75] 117:	movn #6
          [0x76] 118:	movi #0, adx
          [0x78] 120:	iaload_2 ebx, adx
          [0x79] 121:	rstore ebx
          [0x7a] 122:	movi #0, ebx
          [0x7c] 124:	movr egx, ebx
          [0x7d] 125:	loadval ebx
          [0x7e] 126:	test ebx, egx
          [0x7f] 127:	movr ebx, cmt
          [0x80] 128:	movi #140, adx
          [0x82] 130:	ifne
line: 728 [0x83] 131:	movl 0
          [0x84] 132:	movn #2
          [0x85] 133:	pushobj
          [0x86] 134:	new_class @46 // std#string
          [0x87] 135:	movl 1
          [0x88] 136:	pushobj
          [0x89] 137:	call @558 // <std#string.string(var[])>
          [0x8a] 138:	call @931 // <std#ArrayList<std#string>.add(std#string)>
          [0x8b] 139:	nop
          [0x8c] 140:	nop
          [0x8d] 141:	ret

func:@893 [app#Tokenizer.isHexNum] in file: lib/support//bootstrap//frontend//tokenizer//Tokenizer.sharp:732:32: note:  
		    private static def isHexNum(var c) : var {
		                               ^


isHexNum:
line: 732 [0x0] 0:	loadl ebx, fp+0
          [0x1] 1:	rstore ebx
          [0x2] 2:	call @63 // <std#char.isDigit(var)>
          [0x3] 3:	loadval cmt
          [0x4] 4:	movr ebx, cmt
          [0x5] 5:	skpe 46 // pc = 51
          [0x6] 6:	movi #65, ebx
          [0x8] 8:	movr egx, ebx
          [0x9] 9:	loadl ebx, fp+0
          [0xa] 10:	gte ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	cmp ebx, 1
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	skne 11 // pc = 25
          [0xf] 15:	istore 1
          [0x10] 16:	movi #72, ebx
          [0x12] 18:	movr egx, ebx
          [0x13] 19:	loadl ebx, fp+0
          [0x14] 20:	lte ebx, egx
          [0x15] 21:	movr ebx, cmt
          [0x16] 22:	loadval ecx
          [0x17] 23:	and ecx, ebx
          [0x18] 24:	movr ebx, cmt
          [0x19] 25:	cmp ebx, 1
          [0x1a] 26:	movr ebx, cmt
          [0x1b] 27:	movr cmt, ebx
          [0x1c] 28:	movr ebx, cmt
          [0x1d] 29:	skpe 22 // pc = 51
          [0x1e] 30:	movi #97, ebx
          [0x20] 32:	movr egx, ebx
          [0x21] 33:	loadl ebx, fp+0
          [0x22] 34:	gte ebx, egx
          [0x23] 35:	movr ebx, cmt
          [0x24] 36:	cmp ebx, 1
          [0x25] 37:	movr ebx, cmt
          [0x26] 38:	skne 11 // pc = 49
          [0x27] 39:	istore 1
          [0x28] 40:	movi #104, ebx
          [0x2a] 42:	movr egx, ebx
          [0x2b] 43:	loadl ebx, fp+0
          [0x2c] 44:	lte ebx, egx
          [0x2d] 45:	movr ebx, cmt
          [0x2e] 46:	loadval ecx
          [0x2f] 47:	and ecx, ebx
          [0x30] 48:	movr ebx, cmt
          [0x31] 49:	cmp ebx, 1
          [0x32] 50:	movr ebx, cmt
          [0x33] 51:	return_val ebx
          [0x34] 52:	ret

func:@894 [app#Options.Options] in file: lib/support//bootstrap//Options.sharp:9:6: note:  
		class Options {
		     ^


Options:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@895 [app#Platform.Platform] in file: lib/support//bootstrap//Platform.sharp:7:6: note:  
		class Platform {
		     ^


Platform:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@896 [app#Runtime.bootstrap] in file: lib/support//bootstrap//Runtime.sharp:16:32: note:  
		    public static def bootstrap(string[] args) : var {
		                               ^


bootstrap:
Exception Table: 
[
start_pc: 1050
end_pc: 1079
handler_pc: 1080
local: 12


start_pc: 1114
end_pc: 1119
handler_pc: 1120
local: 14
]
line: 16 [0x0] 0:	movl 0
         [0x1] 1:	checknull
         [0x2] 2:	movr ebx, cmt
         [0x3] 3:	movi #12, adx
         [0x5] 5:	ifne
line: 17 [0x6] 6:	call @903 // <app#Runtime.help()>
line: 18 [0x7] 7:	movi #1, ebx
         [0x9] 9:	return_val ebx
         [0xa] 10:	ret
         [0xb] 11:	nop
         [0xc] 12:	nop
line: 22 [0xd] 13:	new_class @73 // std#ArrayList<std#string>
         [0xe] 14:	call @917 // <std#ArrayList<std#string>.ArrayList()>
         [0xf] 15:	movl 1
         [0x10] 16:	popobj
line: 23 [0x11] 17:	istorel 0, fp+2
         [0x13] 19:	movl 0
         [0x14] 20:	sizeof ebx
         [0x15] 21:	movr egx, ebx
         [0x16] 22:	loadl ebx, fp+2
         [0x17] 23:	lt ebx, egx
         [0x18] 24:	movr ebx, cmt
         [0x19] 25:	movi #1003, adx
         [0x1b] 27:	ifne
line: 25 [0x1c] 28:	movl 0
line: 26 [0x1d] 29:	loadl ebx, fp+2
         [0x1e] 30:	chklen ebx
         [0x1f] 31:	movnd ebx
         [0x20] 32:	pushobj
         [0x21] 33:	movl 3
         [0x22] 34:	popobj
line: 27 [0x23] 35:	movl 3
         [0x24] 36:	pushobj
         [0x25] 37:	newstr @366 // "-a"
         [0x26] 38:	call @576 // <std#string.$operator==(var[])>
         [0x27] 39:	loadval cmt
         [0x28] 40:	movi #54, adx
         [0x2a] 42:	ifne
line: 28 [0x2b] 43:	movi #1, ebx
         [0x2d] 45:	nop
         [0x2e] 46:	rstore ebx
         [0x2f] 47:	movg @60 // @app#Options
         [0x30] 48:	movn #0
         [0x31] 49:	movi #0, adx
         [0x33] 51:	loadval ecx
         [0x34] 52:	rmov adx, ecx
         [0x35] 53:	goto @997
         [0x36] 54:	movl 3
         [0x37] 55:	pushobj
         [0x38] 56:	newstr @367 // "-c"
         [0x39] 57:	call @576 // <std#string.$operator==(var[])>
         [0x3a] 58:	loadval cmt
         [0x3b] 59:	movi #73, adx
         [0x3d] 61:	ifne
line: 31 [0x3e] 62:	movi #1, ebx
         [0x40] 64:	nop
         [0x41] 65:	rstore ebx
         [0x42] 66:	movg @60 // @app#Options
         [0x43] 67:	movn #1
         [0x44] 68:	movi #0, adx
         [0x46] 70:	loadval ecx
         [0x47] 71:	rmov adx, ecx
         [0x48] 72:	goto @997
         [0x49] 73:	movl 3
         [0x4a] 74:	pushobj
         [0x4b] 75:	newstr @368 // "-o"
         [0x4c] 76:	call @576 // <std#string.$operator==(var[])>
         [0x4d] 77:	loadval cmt
         [0x4e] 78:	movi #119, adx
         [0x50] 80:	ifne
line: 34 [0x51] 81:	movl 0
         [0x52] 82:	sizeof ebx
         [0x53] 83:	rstore ebx
         [0x54] 84:	movi #1, ebx
         [0x56] 86:	rstore ebx
         [0x57] 87:	loadl ebx, fp+2
         [0x58] 88:	loadval egx
         [0x59] 89:	add ebx, egx -> ebx
         [0x5b] 91:	rstore ebx
         [0x5c] 92:	loadval ebx
         [0x5d] 93:	loadval ecx
         [0x5e] 94:	gte ebx, ecx
         [0x5f] 95:	movr ebx, cmt
         [0x60] 96:	movi #104, adx
         [0x62] 98:	ifne
line: 35 [0x63] 99:	new_class @46 // std#string
         [0x64] 100:	newstr @369 // "output file required after option `..."
         [0x65] 101:	call @558 // <std#string.string(var[])>
         [0x66] 102:	call @901 // <app#Runtime.error(std#string)>
         [0x67] 103:	goto @117
line: 37 [0x68] 104:	movl 0
         [0x69] 105:	loadl ebx, fp+2
         [0x6a] 106:	movi #1, ecx
         [0x6c] 108:	addl ecx, @2
         [0x6d] 109:	inc ebx
         [0x6e] 110:	chklen ebx
         [0x6f] 111:	movnd ebx
         [0x70] 112:	pushobj
         [0x71] 113:	movg @60 // @app#Options
         [0x72] 114:	movn #2
         [0x73] 115:	popobj
         [0x74] 116:	nop
         [0x75] 117:	nop
         [0x76] 118:	goto @997
         [0x77] 119:	movl 3
         [0x78] 120:	pushobj
         [0x79] 121:	newstr @370 // "-L"
         [0x7a] 122:	call @576 // <std#string.$operator==(var[])>
         [0x7b] 123:	loadval cmt
         [0x7c] 124:	movi #166, adx
         [0x7e] 126:	ifne
line: 40 [0x7f] 127:	movl 0
         [0x80] 128:	sizeof ebx
         [0x81] 129:	rstore ebx
         [0x82] 130:	movi #1, ebx
         [0x84] 132:	rstore ebx
         [0x85] 133:	loadl ebx, fp+2
         [0x86] 134:	loadval egx
         [0x87] 135:	add ebx, egx -> ebx
         [0x89] 137:	rstore ebx
         [0x8a] 138:	loadval ebx
         [0x8b] 139:	loadval ecx
         [0x8c] 140:	gte ebx, ecx
         [0x8d] 141:	movr ebx, cmt
         [0x8e] 142:	movi #150, adx
         [0x90] 144:	ifne
line: 41 [0x91] 145:	new_class @46 // std#string
         [0x92] 146:	newstr @371 // "library directory required after op..."
         [0x93] 147:	call @558 // <std#string.string(var[])>
         [0x94] 148:	call @901 // <app#Runtime.error(std#string)>
         [0x95] 149:	goto @164
line: 43 [0x96] 150:	movg @60 // @app#Options
         [0x97] 151:	movn #14
         [0x98] 152:	pushobj
         [0x99] 153:	movl 0
         [0x9a] 154:	loadl ebx, fp+2
         [0x9b] 155:	movi #1, ecx
         [0x9d] 157:	addl ecx, @2
         [0x9e] 158:	inc ebx
         [0x9f] 159:	chklen ebx
         [0xa0] 160:	movnd ebx
         [0xa1] 161:	pushobj
         [0xa2] 162:	call @931 // <std#ArrayList<std#string>.add(std#string)>
         [0xa3] 163:	nop
         [0xa4] 164:	nop
         [0xa5] 165:	goto @997
         [0xa6] 166:	movl 3
         [0xa7] 167:	pushobj
         [0xa8] 168:	newstr @372 // "-V"
         [0xa9] 169:	call @576 // <std#string.$operator==(var[])>
         [0xaa] 170:	loadval cmt
         [0xab] 171:	movi #177, adx
         [0xad] 173:	ifne
line: 46 [0xae] 174:	call @902 // <app#Runtime.printVersion()>
line: 47 [0xaf] 175:	call @618 // <std#__SRT_Global.exit()>
         [0xb0] 176:	goto @997
         [0xb1] 177:	movl 3
         [0xb2] 178:	pushobj
         [0xb3] 179:	newstr @373 // "-O"
         [0xb4] 180:	call @576 // <std#string.$operator==(var[])>
         [0xb5] 181:	loadval cmt
         [0xb6] 182:	movr ebx, cmt
         [0xb7] 183:	skpe 8 // pc = 191
         [0xb8] 184:	movl 3
         [0xb9] 185:	pushobj
         [0xba] 186:	newstr @374 // "-O1"
         [0xbb] 187:	call @576 // <std#string.$operator==(var[])>
         [0xbc] 188:	loadval ebx
         [0xbd] 189:	cmp ebx, 1
         [0xbe] 190:	movr ebx, cmt
         [0xbf] 191:	movr cmt, ebx
         [0xc0] 192:	movi #202, adx
         [0xc2] 194:	ifne
line: 50 [0xc3] 195:	movg @72 // @app#Optimization
         [0xc4] 196:	movn #4
         [0xc5] 197:	pushobj
         [0xc6] 198:	movg @60 // @app#Options
         [0xc7] 199:	movn #5
         [0xc8] 200:	popobj
         [0xc9] 201:	goto @997
         [0xca] 202:	movl 3
         [0xcb] 203:	pushobj
         [0xcc] 204:	newstr @375 // "-O2"
         [0xcd] 205:	call @576 // <std#string.$operator==(var[])>
         [0xce] 206:	loadval cmt
         [0xcf] 207:	movi #217, adx
         [0xd1] 209:	ifne
line: 53 [0xd2] 210:	movg @72 // @app#Optimization
         [0xd3] 211:	movn #5
         [0xd4] 212:	pushobj
         [0xd5] 213:	movg @60 // @app#Options
         [0xd6] 214:	movn #5
         [0xd7] 215:	popobj
         [0xd8] 216:	goto @997
         [0xd9] 217:	movl 3
         [0xda] 218:	pushobj
         [0xdb] 219:	newstr @376 // "-h"
         [0xdc] 220:	call @576 // <std#string.$operator==(var[])>
         [0xdd] 221:	loadval cmt
         [0xde] 222:	movr ebx, cmt
         [0xdf] 223:	skpe 8 // pc = 231
         [0xe0] 224:	movl 3
         [0xe1] 225:	pushobj
         [0xe2] 226:	newstr @377 // "-?"
         [0xe3] 227:	call @576 // <std#string.$operator==(var[])>
         [0xe4] 228:	loadval ebx
         [0xe5] 229:	cmp ebx, 1
         [0xe6] 230:	movr ebx, cmt
         [0xe7] 231:	movr cmt, ebx
         [0xe8] 232:	movi #238, adx
         [0xea] 234:	ifne
line: 56 [0xeb] 235:	call @903 // <app#Runtime.help()>
line: 57 [0xec] 236:	call @618 // <std#__SRT_Global.exit()>
         [0xed] 237:	goto @997
         [0xee] 238:	movl 3
         [0xef] 239:	pushobj
         [0xf0] 240:	newstr @378 // "--hw"
         [0xf1] 241:	call @576 // <std#string.$operator==(var[])>
         [0xf2] 242:	loadval cmt
         [0xf3] 243:	movi #249, adx
         [0xf5] 245:	ifne
line: 60 [0xf6] 246:	call @904 // <app#Runtime.helpWarning()>
line: 61 [0xf7] 247:	call @618 // <std#__SRT_Global.exit()>
         [0xf8] 248:	goto @997
         [0xf9] 249:	movl 3
         [0xfa] 250:	pushobj
         [0xfb] 251:	newstr @379 // "-R"
         [0xfc] 252:	call @576 // <std#string.$operator==(var[])>
         [0xfd] 253:	loadval cmt
         [0xfe] 254:	movr ebx, cmt
         [0xff] 255:	skpe 8 // pc = 263
         [0x100] 256:	movl 3
         [0x101] 257:	pushobj
         [0x102] 258:	newstr @380 // "-release"
         [0x103] 259:	call @576 // <std#string.$operator==(var[])>
         [0x104] 260:	loadval ebx
         [0x105] 261:	cmp ebx, 1
         [0x106] 262:	movr ebx, cmt
         [0x107] 263:	movr cmt, ebx
         [0x108] 264:	movi #294, adx
         [0x10a] 266:	ifne
line: 64 [0x10b] 267:	movg @72 // @app#Optimization
         [0x10c] 268:	movn #5
         [0x10d] 269:	pushobj
         [0x10e] 270:	movg @60 // @app#Options
         [0x10f] 271:	movn #5
         [0x110] 272:	popobj
line: 65 [0x111] 273:	movi #0, ebx
         [0x113] 275:	nop
         [0x114] 276:	rstore ebx
         [0x115] 277:	movg @60 // @app#Options
         [0x116] 278:	movn #6
         [0x117] 279:	movi #0, adx
         [0x119] 281:	loadval ecx
         [0x11a] 282:	rmov adx, ecx
line: 66 [0x11b] 283:	movi #1, ebx
         [0x11d] 285:	nop
         [0x11e] 286:	rstore ebx
         [0x11f] 287:	movg @60 // @app#Options
         [0x120] 288:	movn #7
         [0x121] 289:	movi #0, adx
         [0x123] 291:	loadval ecx
         [0x124] 292:	rmov adx, ecx
         [0x125] 293:	goto @997
         [0x126] 294:	movl 3
         [0x127] 295:	pushobj
         [0x128] 296:	newstr @381 // "-s"
         [0x129] 297:	call @576 // <std#string.$operator==(var[])>
         [0x12a] 298:	loadval cmt
         [0x12b] 299:	movi #323, adx
         [0x12d] 301:	ifne
line: 69 [0x12e] 302:	movi #1, ebx
         [0x130] 304:	nop
         [0x131] 305:	rstore ebx
         [0x132] 306:	movg @60 // @app#Options
         [0x133] 307:	movn #7
         [0x134] 308:	movi #0, adx
         [0x136] 310:	loadval ecx
         [0x137] 311:	rmov adx, ecx
line: 70 [0x138] 312:	movi #0, ebx
         [0x13a] 314:	nop
         [0x13b] 315:	rstore ebx
         [0x13c] 316:	movg @60 // @app#Options
         [0x13d] 317:	movn #6
         [0x13e] 318:	movi #0, adx
         [0x140] 320:	loadval ecx
         [0x141] 321:	rmov adx, ecx
         [0x142] 322:	goto @997
         [0x143] 323:	movl 3
         [0x144] 324:	pushobj
         [0x145] 325:	newstr @382 // "-magic"
         [0x146] 326:	call @576 // <std#string.$operator==(var[])>
         [0x147] 327:	loadval cmt
         [0x148] 328:	movi #342, adx
         [0x14a] 330:	ifne
line: 73 [0x14b] 331:	movi #1, ebx
         [0x14d] 333:	nop
         [0x14e] 334:	rstore ebx
         [0x14f] 335:	movg @60 // @app#Options
         [0x150] 336:	movn #9
         [0x151] 337:	movi #0, adx
         [0x153] 339:	loadval ecx
         [0x154] 340:	rmov adx, ecx
         [0x155] 341:	goto @997
         [0x156] 342:	movl 3
         [0x157] 343:	pushobj
         [0x158] 344:	newstr @383 // "-dbg"
         [0x159] 345:	call @576 // <std#string.$operator==(var[])>
         [0x15a] 346:	loadval cmt
         [0x15b] 347:	movi #361, adx
         [0x15d] 349:	ifne
line: 76 [0x15e] 350:	movi #1, ebx
         [0x160] 352:	nop
         [0x161] 353:	rstore ebx
         [0x162] 354:	movg @60 // @app#Options
         [0x163] 355:	movn #10
         [0x164] 356:	movi #0, adx
         [0x166] 358:	loadval ecx
         [0x167] 359:	rmov adx, ecx
         [0x168] 360:	goto @997
         [0x169] 361:	movl 3
         [0x16a] 362:	pushobj
         [0x16b] 363:	newstr @384 // "-showversion"
         [0x16c] 364:	call @576 // <std#string.$operator==(var[])>
         [0x16d] 365:	loadval cmt
         [0x16e] 366:	movi #372, adx
         [0x170] 368:	ifne
line: 79 [0x171] 369:	call @902 // <app#Runtime.printVersion()>
line: 80 [0x172] 370:	call @604 // <std#__SRT_Global.println()>
         [0x173] 371:	goto @997
         [0x174] 372:	movl 3
         [0x175] 373:	pushobj
         [0x176] 374:	newstr @385 // "-target"
         [0x177] 375:	call @576 // <std#string.$operator==(var[])>
         [0x178] 376:	loadval cmt
         [0x179] 377:	movi #467, adx
         [0x17b] 379:	ifne
line: 83 [0x17c] 380:	movl 0
         [0x17d] 381:	sizeof ebx
         [0x17e] 382:	rstore ebx
         [0x17f] 383:	movi #1, ebx
         [0x181] 385:	rstore ebx
         [0x182] 386:	loadl ebx, fp+2
         [0x183] 387:	loadval egx
         [0x184] 388:	add ebx, egx -> ebx
         [0x186] 390:	rstore ebx
         [0x187] 391:	loadval ebx
         [0x188] 392:	loadval ecx
         [0x189] 393:	gte ebx, ecx
         [0x18a] 394:	movr ebx, cmt
         [0x18b] 395:	movi #403, adx
         [0x18d] 397:	ifne
line: 84 [0x18e] 398:	new_class @46 // std#string
         [0x18f] 399:	newstr @386 // "file version required after option ..."
         [0x190] 400:	call @558 // <std#string.string(var[])>
         [0x191] 401:	call @901 // <app#Runtime.error(std#string)>
         [0x192] 402:	goto @465
line: 86 [0x193] 403:	movl 0
         [0x194] 404:	loadl ebx, fp+2
         [0x195] 405:	movi #1, ecx
         [0x197] 407:	addl ecx, @2
         [0x198] 408:	inc ebx
         [0x199] 409:	chklen ebx
         [0x19a] 410:	movnd ebx
         [0x19b] 411:	pushobj
         [0x19c] 412:	movl 4
         [0x19d] 413:	popobj
line: 87 [0x19e] 414:	movl 4
         [0x19f] 415:	pushobj
         [0x1a0] 416:	call @899 // <app#Runtime.integerString(std#string)>
         [0x1a1] 417:	loadval cmt
         [0x1a2] 418:	movi #433, adx
         [0x1a4] 420:	ifne
line: 88 [0x1a5] 421:	movl 4
         [0x1a6] 422:	pushobj
         [0x1a7] 423:	call @588 // <std#string.parseInt(std#string)>
         [0x1a8] 424:	nop
         [0x1a9] 425:	movg @60 // @app#Options
         [0x1aa] 426:	movn #13
         [0x1ab] 427:	movi #0, adx
         [0x1ad] 429:	loadval ecx
         [0x1ae] 430:	rmov adx, ecx
line: 89 [0x1af] 431:	call @900 // <app#Runtime.checkTarget()>
         [0x1b0] 432:	goto @463
line: 91 [0x1b1] 433:	movl 4
         [0x1b2] 434:	pushobj
         [0x1b3] 435:	call @592 // <std#string.toLower(std#string)>
         [0x1b4] 436:	newstr @387 // "alpha"
         [0x1b5] 437:	call @576 // <std#string.$operator==(var[])>
         [0x1b6] 438:	loadval cmt
         [0x1b7] 439:	movi #453, adx
         [0x1b9] 441:	ifne
line: 92 [0x1ba] 442:	movi #2, ebx
         [0x1bc] 444:	nop
         [0x1bd] 445:	rstore ebx
         [0x1be] 446:	movg @60 // @app#Options
         [0x1bf] 447:	movn #13
         [0x1c0] 448:	movi #0, adx
         [0x1c2] 450:	loadval ecx
         [0x1c3] 451:	rmov adx, ecx
         [0x1c4] 452:	goto @461
line: 95 [0x1c5] 453:	new_class @46 // std#string
         [0x1c6] 454:	newstr @388 // "unknown platform target "
         [0x1c7] 455:	call @558 // <std#string.string(var[])>
         [0x1c8] 456:	movl 4
         [0x1c9] 457:	pushobj
         [0x1ca] 458:	call @573 // <std#string.$operator+(std#Printable)>
         [0x1cb] 459:	call @901 // <app#Runtime.error(std#string)>
         [0x1cc] 460:	nop
         [0x1cd] 461:	nop
         [0x1ce] 462:	nop
         [0x1cf] 463:	nop
         [0x1d0] 464:	nop
         [0x1d1] 465:	nop
         [0x1d2] 466:	goto @997
         [0x1d3] 467:	movl 3
         [0x1d4] 468:	pushobj
         [0x1d5] 469:	newstr @389 // "-w"
         [0x1d6] 470:	call @576 // <std#string.$operator==(var[])>
         [0x1d7] 471:	loadval cmt
         [0x1d8] 472:	movi #486, adx
         [0x1da] 474:	ifne
line: 101 [0x1db] 475:	movi #0, ebx
          [0x1dd] 477:	nop
          [0x1de] 478:	rstore ebx
          [0x1df] 479:	movg @60 // @app#Options
          [0x1e0] 480:	movn #4
          [0x1e1] 481:	movi #0, adx
          [0x1e3] 483:	loadval ecx
          [0x1e4] 484:	rmov adx, ecx
          [0x1e5] 485:	goto @997
          [0x1e6] 486:	movl 3
          [0x1e7] 487:	pushobj
          [0x1e8] 488:	newstr @390 // "-waccess"
          [0x1e9] 489:	call @576 // <std#string.$operator==(var[])>
          [0x1ea] 490:	loadval cmt
          [0x1eb] 491:	movi #505, adx
          [0x1ed] 493:	ifne
line: 104 [0x1ee] 494:	movi #0, ebx
          [0x1f0] 496:	rstore ebx
          [0x1f1] 497:	movg @6 // @app#__SRT_Global
          [0x1f2] 498:	movn #11
          [0x1f3] 499:	movi #1, ebx
          [0x1f5] 501:	chklen ebx
          [0x1f6] 502:	loadval egx
          [0x1f7] 503:	rmov ebx, egx
          [0x1f8] 504:	goto @997
          [0x1f9] 505:	movl 3
          [0x1fa] 506:	pushobj
          [0x1fb] 507:	newstr @391 // "-wambig"
          [0x1fc] 508:	call @576 // <std#string.$operator==(var[])>
          [0x1fd] 509:	loadval cmt
          [0x1fe] 510:	movi #524, adx
          [0x200] 512:	ifne
line: 107 [0x201] 513:	movi #0, ebx
          [0x203] 515:	rstore ebx
          [0x204] 516:	movg @6 // @app#__SRT_Global
          [0x205] 517:	movn #11
          [0x206] 518:	movi #2, ebx
          [0x208] 520:	chklen ebx
          [0x209] 521:	loadval egx
          [0x20a] 522:	rmov ebx, egx
          [0x20b] 523:	goto @997
          [0x20c] 524:	movl 3
          [0x20d] 525:	pushobj
          [0x20e] 526:	newstr @392 // "-wdecl"
          [0x20f] 527:	call @576 // <std#string.$operator==(var[])>
          [0x210] 528:	loadval cmt
          [0x211] 529:	movi #543, adx
          [0x213] 531:	ifne
line: 110 [0x214] 532:	movi #0, ebx
          [0x216] 534:	rstore ebx
          [0x217] 535:	movg @6 // @app#__SRT_Global
          [0x218] 536:	movn #11
          [0x219] 537:	movi #3, ebx
          [0x21b] 539:	chklen ebx
          [0x21c] 540:	loadval egx
          [0x21d] 541:	rmov ebx, egx
          [0x21e] 542:	goto @997
          [0x21f] 543:	movl 3
          [0x220] 544:	pushobj
          [0x221] 545:	newstr @393 // "-wmain"
          [0x222] 546:	call @576 // <std#string.$operator==(var[])>
          [0x223] 547:	loadval cmt
          [0x224] 548:	movi #562, adx
          [0x226] 550:	ifne
line: 113 [0x227] 551:	movi #0, ebx
          [0x229] 553:	rstore ebx
          [0x22a] 554:	movg @6 // @app#__SRT_Global
          [0x22b] 555:	movn #11
          [0x22c] 556:	movi #4, ebx
          [0x22e] 558:	chklen ebx
          [0x22f] 559:	loadval egx
          [0x230] 560:	rmov ebx, egx
          [0x231] 561:	goto @997
          [0x232] 562:	movl 3
          [0x233] 563:	pushobj
          [0x234] 564:	newstr @394 // "-wcast"
          [0x235] 565:	call @576 // <std#string.$operator==(var[])>
          [0x236] 566:	loadval cmt
          [0x237] 567:	movi #581, adx
          [0x239] 569:	ifne
line: 116 [0x23a] 570:	movi #0, ebx
          [0x23c] 572:	rstore ebx
          [0x23d] 573:	movg @6 // @app#__SRT_Global
          [0x23e] 574:	movn #11
          [0x23f] 575:	movi #5, ebx
          [0x241] 577:	chklen ebx
          [0x242] 578:	loadval egx
          [0x243] 579:	rmov ebx, egx
          [0x244] 580:	goto @997
          [0x245] 581:	movl 3
          [0x246] 582:	pushobj
          [0x247] 583:	newstr @395 // "-winit"
          [0x248] 584:	call @576 // <std#string.$operator==(var[])>
          [0x249] 585:	loadval cmt
          [0x24a] 586:	movi #600, adx
          [0x24c] 588:	ifne
line: 119 [0x24d] 589:	movi #0, ebx
          [0x24f] 591:	rstore ebx
          [0x250] 592:	movg @6 // @app#__SRT_Global
          [0x251] 593:	movn #11
          [0x252] 594:	movi #6, ebx
          [0x254] 596:	chklen ebx
          [0x255] 597:	loadval egx
          [0x256] 598:	rmov ebx, egx
          [0x257] 599:	goto @997
          [0x258] 600:	movl 3
          [0x259] 601:	pushobj
          [0x25a] 602:	newstr @396 // "-v"
          [0x25b] 603:	call @576 // <std#string.$operator==(var[])>
          [0x25c] 604:	loadval cmt
          [0x25d] 605:	movi #646, adx
          [0x25f] 607:	ifne
line: 122 [0x260] 608:	movl 0
          [0x261] 609:	sizeof ebx
          [0x262] 610:	rstore ebx
          [0x263] 611:	movi #1, ebx
          [0x265] 613:	rstore ebx
          [0x266] 614:	loadl ebx, fp+2
          [0x267] 615:	loadval egx
          [0x268] 616:	add ebx, egx -> ebx
          [0x26a] 618:	rstore ebx
          [0x26b] 619:	loadval ebx
          [0x26c] 620:	loadval ecx
          [0x26d] 621:	gte ebx, ecx
          [0x26e] 622:	movr ebx, cmt
          [0x26f] 623:	movi #631, adx
          [0x271] 625:	ifne
line: 123 [0x272] 626:	new_class @46 // std#string
          [0x273] 627:	newstr @397 // "file version required after option ..."
          [0x274] 628:	call @558 // <std#string.string(var[])>
          [0x275] 629:	call @901 // <app#Runtime.error(std#string)>
          [0x276] 630:	goto @644
line: 125 [0x277] 631:	movl 0
          [0x278] 632:	loadl ebx, fp+2
          [0x279] 633:	movi #1, ecx
          [0x27b] 635:	addl ecx, @2
          [0x27c] 636:	inc ebx
          [0x27d] 637:	chklen ebx
          [0x27e] 638:	movnd ebx
          [0x27f] 639:	pushobj
          [0x280] 640:	movg @60 // @app#Options
          [0x281] 641:	movn #3
          [0x282] 642:	popobj
          [0x283] 643:	nop
          [0x284] 644:	nop
          [0x285] 645:	goto @997
          [0x286] 646:	movl 3
          [0x287] 647:	pushobj
          [0x288] 648:	newstr @398 // "-werror"
          [0x289] 649:	call @576 // <std#string.$operator==(var[])>
          [0x28a] 650:	loadval cmt
          [0x28b] 651:	movi #675, adx
          [0x28d] 653:	ifne
line: 128 [0x28e] 654:	movi #1, ebx
          [0x290] 656:	nop
          [0x291] 657:	rstore ebx
          [0x292] 658:	movg @60 // @app#Options
          [0x293] 659:	movn #8
          [0x294] 660:	movi #0, adx
          [0x296] 662:	loadval ecx
          [0x297] 663:	rmov adx, ecx
line: 129 [0x298] 664:	movi #1, ebx
          [0x29a] 666:	nop
          [0x29b] 667:	rstore ebx
          [0x29c] 668:	movg @60 // @app#Options
          [0x29d] 669:	movn #4
          [0x29e] 670:	movi #0, adx
          [0x2a0] 672:	loadval ecx
          [0x2a1] 673:	rmov adx, ecx
          [0x2a2] 674:	goto @997
          [0x2a3] 675:	movl 3
          [0x2a4] 676:	pushobj
          [0x2a5] 677:	newstr @399 // "-errlmt"
          [0x2a6] 678:	call @576 // <std#string.$operator==(var[])>
          [0x2a7] 679:	loadval cmt
          [0x2a8] 680:	movi #765, adx
          [0x2aa] 682:	ifne
line: 132 [0x2ab] 683:	movl 0
          [0x2ac] 684:	loadl ebx, fp+2
          [0x2ad] 685:	movi #1, ecx
          [0x2af] 687:	addl ecx, @2
          [0x2b0] 688:	inc ebx
          [0x2b1] 689:	chklen ebx
          [0x2b2] 690:	movnd ebx
          [0x2b3] 691:	pushobj
          [0x2b4] 692:	movl 5
          [0x2b5] 693:	popobj
line: 134 [0x2b6] 694:	movl 5
          [0x2b7] 695:	pushobj
          [0x2b8] 696:	call @899 // <app#Runtime.integerString(std#string)>
          [0x2b9] 697:	loadval cmt
          [0x2ba] 698:	movi #755, adx
          [0x2bc] 700:	ifne
line: 135 [0x2bd] 701:	movl 5
          [0x2be] 702:	pushobj
          [0x2bf] 703:	call @588 // <std#string.parseInt(std#string)>
          [0x2c0] 704:	nop
          [0x2c1] 705:	movg @60 // @app#Options
          [0x2c2] 706:	movn #12
          [0x2c3] 707:	movi #0, adx
          [0x2c5] 709:	loadval ecx
          [0x2c6] 710:	rmov adx, ecx
line: 137 [0x2c7] 711:	movi #100000, ebx
          [0x2c9] 713:	movr egx, ebx
          [0x2ca] 714:	movg @60 // @app#Options
          [0x2cb] 715:	movn #12
          [0x2cc] 716:	movi #0, adx
          [0x2ce] 718:	chklen adx
          [0x2cf] 719:	iaload_2 ebx, adx
          [0x2d0] 720:	gt ebx, egx
          [0x2d1] 721:	movr ebx, cmt
          [0x2d2] 722:	movi #733, adx
          [0x2d4] 724:	ifne
line: 138 [0x2d5] 725:	new_class @46 // std#string
          [0x2d6] 726:	newstr @400 // "cannot set the max errors allowed h..."
          [0x2d7] 727:	call @558 // <std#string.string(var[])>
          [0x2d8] 728:	movl 5
          [0x2d9] 729:	pushobj
          [0x2da] 730:	call @573 // <std#string.$operator+(std#Printable)>
          [0x2db] 731:	call @901 // <app#Runtime.error(std#string)>
          [0x2dc] 732:	goto @753
          [0x2dd] 733:	movi #0, ebx
          [0x2df] 735:	movr egx, ebx
          [0x2e0] 736:	movg @60 // @app#Options
          [0x2e1] 737:	movn #12
          [0x2e2] 738:	movi #0, adx
          [0x2e4] 740:	chklen adx
          [0x2e5] 741:	iaload_2 ebx, adx
          [0x2e6] 742:	lte ebx, egx
          [0x2e7] 743:	movr ebx, cmt
          [0x2e8] 744:	movi #752, adx
          [0x2ea] 746:	ifne
line: 140 [0x2eb] 747:	new_class @46 // std#string
          [0x2ec] 748:	newstr @401 // "cannot have an error limit of 0 "
          [0x2ed] 749:	call @558 // <std#string.string(var[])>
          [0x2ee] 750:	call @901 // <app#Runtime.error(std#string)>
          [0x2ef] 751:	goto @753
          [0x2f0] 752:	nop
          [0x2f1] 753:	nop
          [0x2f2] 754:	goto @763
line: 144 [0x2f3] 755:	new_class @46 // std#string
          [0x2f4] 756:	newstr @402 // "invalid error limit set "
          [0x2f5] 757:	call @558 // <std#string.string(var[])>
          [0x2f6] 758:	movl 5
          [0x2f7] 759:	pushobj
          [0x2f8] 760:	call @573 // <std#string.$operator+(std#Printable)>
          [0x2f9] 761:	call @901 // <app#Runtime.error(std#string)>
          [0x2fa] 762:	nop
          [0x2fb] 763:	nop
          [0x2fc] 764:	goto @997
          [0x2fd] 765:	movl 3
          [0x2fe] 766:	pushobj
          [0x2ff] 767:	new_class @46 // std#string
          [0x300] 768:	newstr @403 // "-asmd"
          [0x301] 769:	call @558 // <std#string.string(var[])>
          [0x302] 770:	call @589 // <std#string.startsWith(std#string)>
          [0x303] 771:	loadval cmt
          [0x304] 772:	movi #914, adx
          [0x306] 774:	ifne
line: 148 [0x307] 775:	movi #1, ebx
          [0x309] 777:	nop
          [0x30a] 778:	rstore ebx
          [0x30b] 779:	movg @60 // @app#Options
          [0x30c] 780:	movn #11
          [0x30d] 781:	movi #0, adx
          [0x30f] 783:	loadval ecx
          [0x310] 784:	rmov adx, ecx
line: 150 [0x311] 785:	movl 3
          [0x312] 786:	pushobj
          [0x313] 787:	new_class @46 // std#string
          [0x314] 788:	newstr @404 // "-asmd:"
          [0x315] 789:	call @558 // <std#string.string(var[])>
          [0x316] 790:	call @589 // <std#string.startsWith(std#string)>
          [0x317] 791:	loadval cmt
          [0x318] 792:	movi #912, adx
          [0x31a] 794:	ifne
line: 151 [0x31b] 795:	movi #6, ebx
          [0x31d] 797:	rstore ebx
          [0x31e] 798:	movl 3
          [0x31f] 799:	pushobj
          [0x320] 800:	call @595 // <std#string.size()>
          [0x321] 801:	loadval ebx
          [0x322] 802:	loadval ecx
          [0x323] 803:	gt ebx, ecx
          [0x324] 804:	movr ebx, cmt
          [0x325] 805:	cmp ebx, 1
          [0x326] 806:	movr ebx, cmt
          [0x327] 807:	skne 15 // pc = 822
          [0x328] 808:	istore 1
          [0x329] 809:	movi #9, ebx
          [0x32b] 811:	rstore ebx
          [0x32c] 812:	movl 3
          [0x32d] 813:	pushobj
          [0x32e] 814:	call @595 // <std#string.size()>
          [0x32f] 815:	loadval ebx
          [0x330] 816:	loadval ecx
          [0x331] 817:	lte ebx, ecx
          [0x332] 818:	movr ebx, cmt
          [0x333] 819:	loadval ecx
          [0x334] 820:	and ecx, ebx
          [0x335] 821:	movr ebx, cmt
          [0x336] 822:	movr cmt, ebx
          [0x337] 823:	movi #900, adx
          [0x339] 825:	ifne
line: 152 [0x33a] 826:	movl 3
          [0x33b] 827:	pushobj
          [0x33c] 828:	movi #7, ebx
          [0x33e] 830:	rstore ebx
          [0x33f] 831:	call @586 // <std#string.substring(var)>
          [0x340] 832:	call @596 // <std#string.getData()>
          [0x341] 833:	movl 6
          [0x342] 834:	popobj
line: 153 [0x343] 835:	istorel 0, fp+7
          [0x345] 837:	movl 6
          [0x346] 838:	sizeof ebx
          [0x347] 839:	movr egx, ebx
          [0x348] 840:	loadl ebx, fp+7
          [0x349] 841:	lt ebx, egx
          [0x34a] 842:	movr ebx, cmt
          [0x34b] 843:	movi #899, adx
          [0x34d] 845:	ifne
line: 155 [0x34e] 846:	movl 6
          [0x34f] 847:	loadl ebx, fp+7
          [0x350] 848:	chklen ebx
          [0x351] 849:	iaload_2 ebx, ebx
          [0x352] 850:	switch 0 //  table [default: 884 case 100: @851, case 115: @862, case 105: @873, ]
line: 157 [0x353] 851:	movi #1, ebx
          [0x355] 853:	rstore ebx
          [0x356] 854:	movg @6 // @app#__SRT_Global
          [0x357] 855:	movn #10
          [0x358] 856:	movi #0, ebx
          [0x35a] 858:	chklen ebx
          [0x35b] 859:	loadval egx
          [0x35c] 860:	rmov ebx, egx
line: 158 [0x35d] 861:	goto @894
line: 160 [0x35e] 862:	movi #1, ebx
          [0x360] 864:	rstore ebx
          [0x361] 865:	movg @6 // @app#__SRT_Global
          [0x362] 866:	movn #10
          [0x363] 867:	movi #1, ebx
          [0x365] 869:	chklen ebx
          [0x366] 870:	loadval egx
          [0x367] 871:	rmov ebx, egx
line: 161 [0x368] 872:	goto @894
line: 163 [0x369] 873:	movi #1, ebx
          [0x36b] 875:	rstore ebx
          [0x36c] 876:	movg @6 // @app#__SRT_Global
          [0x36d] 877:	movn #10
          [0x36e] 878:	movi #2, ebx
          [0x370] 880:	chklen ebx
          [0x371] 881:	loadval egx
          [0x372] 882:	rmov ebx, egx
line: 164 [0x373] 883:	goto @894
line: 166 [0x374] 884:	new_class @46 // std#string
          [0x375] 885:	newstr @405 // "invalid option `"
          [0x376] 886:	call @558 // <std#string.string(var[])>
          [0x377] 887:	movl 3
          [0x378] 888:	pushobj
          [0x379] 889:	call @573 // <std#string.$operator+(std#Printable)>
          [0x37a] 890:	newstr @406 // "`, try bootstrap -h"
          [0x37b] 891:	call @572 // <std#string.$operator+(var[])>
          [0x37c] 892:	call @901 // <app#Runtime.error(std#string)>
line: 167 [0x37d] 893:	goto @894
          [0x37e] 894:	loadl ebx, fp+7
          [0x37f] 895:	movi #1, ecx
          [0x381] 897:	addl ecx, @7
          [0x382] 898:	goto @837
          [0x383] 899:	goto @910
line: 171 [0x384] 900:	new_class @46 // std#string
          [0x385] 901:	newstr @405 // "invalid option `"
          [0x386] 902:	call @558 // <std#string.string(var[])>
          [0x387] 903:	movl 3
          [0x388] 904:	pushobj
          [0x389] 905:	call @573 // <std#string.$operator+(std#Printable)>
          [0x38a] 906:	newstr @406 // "`, try bootstrap -h"
          [0x38b] 907:	call @572 // <std#string.$operator+(var[])>
          [0x38c] 908:	call @901 // <app#Runtime.error(std#string)>
          [0x38d] 909:	nop
          [0x38e] 910:	nop
          [0x38f] 911:	nop
          [0x390] 912:	nop
          [0x391] 913:	goto @997
          [0x392] 914:	movl 3
          [0x393] 915:	pushobj
          [0x394] 916:	movi #0, ebx
          [0x396] 918:	rstore ebx
          [0x397] 919:	call @569 // <std#string.at(var)>
          [0x398] 920:	movi #45, ebx
          [0x39a] 922:	movr egx, ebx
          [0x39b] 923:	loadval ebx
          [0x39c] 924:	test ebx, egx
          [0x39d] 925:	movr ebx, cmt
          [0x39e] 926:	movi #939, adx
          [0x3a0] 928:	ifne
line: 176 [0x3a1] 929:	new_class @46 // std#string
          [0x3a2] 930:	newstr @405 // "invalid option `"
          [0x3a3] 931:	call @558 // <std#string.string(var[])>
          [0x3a4] 932:	movl 3
          [0x3a5] 933:	pushobj
          [0x3a6] 934:	call @573 // <std#string.$operator+(std#Printable)>
          [0x3a7] 935:	newstr @406 // "`, try bootstrap -h"
          [0x3a8] 936:	call @572 // <std#string.$operator+(var[])>
          [0x3a9] 937:	call @901 // <app#Runtime.error(std#string)>
          [0x3aa] 938:	goto @997
line: 180 [0x3ab] 939:	movl 0
line: 181 [0x3ac] 940:	loadl ebx, fp+2
          [0x3ad] 941:	chklen ebx
          [0x3ae] 942:	movnd ebx
          [0x3af] 943:	pushobj
          [0x3b0] 944:	movl 3
          [0x3b1] 945:	popobj
line: 182 [0x3b2] 946:	movl 3
          [0x3b3] 947:	pushobj
          [0x3b4] 948:	movi #0, ebx
          [0x3b6] 950:	rstore ebx
          [0x3b7] 951:	call @569 // <std#string.at(var)>
          [0x3b8] 952:	movi #45, ebx
          [0x3ba] 954:	movr egx, ebx
          [0x3bb] 955:	loadval ebx
          [0x3bc] 956:	test ebx, egx
          [0x3bd] 957:	movr ebx, cmt
          [0x3be] 958:	movi #963, adx
          [0x3c0] 960:	ifne
line: 183 [0x3c1] 961:	goto @28
          [0x3c2] 962:	nop
          [0x3c3] 963:	nop
line: 185 [0x3c4] 964:	movl 1
          [0x3c5] 965:	pushobj
          [0x3c6] 966:	movl 3
          [0x3c7] 967:	pushobj
          [0x3c8] 968:	call @897 // <app#Runtime.contains(std#ArrayList<std#string>,std#string)>
          [0x3c9] 969:	loadval ebx
          [0x3ca] 970:	not ebx, ebx
          [0x3cb] 971:	movr cmt, ebx
          [0x3cc] 972:	movi #981, adx
          [0x3ce] 974:	ifne
line: 186 [0x3cf] 975:	movl 1
          [0x3d0] 976:	pushobj
          [0x3d1] 977:	movl 3
          [0x3d2] 978:	pushobj
          [0x3d3] 979:	call @931 // <std#ArrayList<std#string>.add(std#string)>
          [0x3d4] 980:	nop
          [0x3d5] 981:	nop
line: 187 [0x3d6] 982:	loadl ebx, fp+2
          [0x3d7] 983:	movi #1, ecx
          [0x3d9] 985:	addl ecx, @2
          [0x3da] 986:	movl 0
          [0x3db] 987:	sizeof ebx
          [0x3dc] 988:	movr egx, ebx
          [0x3dd] 989:	loadl ebx, fp+2
          [0x3de] 990:	lt ebx, egx
          [0x3df] 991:	movr ebx, cmt
          [0x3e0] 992:	movi #939, adx
          [0x3e2] 994:	ife
line: 189 [0x3e3] 995:	goto @1003
          [0x3e4] 996:	nop
          [0x3e5] 997:	nop
          [0x3e6] 998:	loadl ebx, fp+2
          [0x3e7] 999:	movi #1, ecx
          [0x3e9] 1001:	addl ecx, @2
          [0x3ea] 1002:	goto @19
line: 193 [0x3eb] 1003:	movl 1
          [0x3ec] 1004:	pushobj
          [0x3ed] 1005:	call @922 // <std#ArrayList<std#string>.size()>
          [0x3ee] 1006:	movi #0, ebx
          [0x3f0] 1008:	movr egx, ebx
          [0x3f1] 1009:	loadval ebx
          [0x3f2] 1010:	test ebx, egx
          [0x3f3] 1011:	movr ebx, cmt
          [0x3f4] 1012:	movi #1021, adx
          [0x3f6] 1014:	ifne
line: 194 [0x3f7] 1015:	call @903 // <app#Runtime.help()>
line: 195 [0x3f8] 1016:	movi #1, ebx
          [0x3fa] 1018:	return_val ebx
          [0x3fb] 1019:	ret
          [0x3fc] 1020:	nop
          [0x3fd] 1021:	nop
line: 198 [0x3fe] 1022:	new_class @46 // std#string
          [0x3ff] 1023:	newstr @226 // ""
          [0x400] 1024:	call @558 // <std#string.string(var[])>
          [0x401] 1025:	popl 8
line: 199 [0x402] 1026:	call @299 // <std.kernel#Manifest.isWindows()>
          [0x403] 1027:	loadval cmt
          [0x404] 1028:	movi #1036, adx
          [0x406] 1030:	ifne
line: 200 [0x407] 1031:	movl 8
          [0x408] 1032:	pushobj
          [0x409] 1033:	newstr @407 // "C:\Sharp\include"
          [0x40a] 1034:	call @578 // <std#string.$operator=(var[])>
          [0x40b] 1035:	goto @1041
line: 202 [0x40c] 1036:	movl 8
          [0x40d] 1037:	pushobj
          [0x40e] 1038:	newstr @408 // "/usr/include/sharp/"
          [0x40f] 1039:	call @578 // <std#string.$operator=(var[])>
          [0x410] 1040:	nop
          [0x411] 1041:	nop
line: 205 [0x412] 1042:	new_class @17 // std.io#File
          [0x413] 1043:	movl 8
          [0x414] 1044:	pushobj
          [0x415] 1045:	call @136 // <std.io#File.File(std#string)>
          [0x416] 1046:	movl 9
          [0x417] 1047:	popobj
line: 206 [0x418] 1048:	movl 10
          [0x419] 1049:	del
line: 208 [0x41a] 1050:	movl 9
line: 209 [0x41b] 1051:	pushobj
          [0x41c] 1052:	call @153 // <std.io#File.list()>
          [0x41d] 1053:	movl 10
          [0x41e] 1054:	popobj
line: 210 [0x41f] 1055:	movi #0, ebx
          [0x421] 1057:	rstore ebx
          [0x422] 1058:	movl 10
          [0x423] 1059:	smov ebx, sp+0
          [0x424] 1060:	sizeof egx
          [0x425] 1061:	lt ebx, egx
          [0x426] 1062:	movi #1078, adx
          [0x428] 1064:	ifne
          [0x429] 1065:	movnd ebx
          [0x42a] 1066:	pushobj
          [0x42b] 1067:	movl 11
          [0x42c] 1068:	popobj
line: 211 [0x42d] 1069:	movl 1
          [0x42e] 1070:	pushobj
          [0x42f] 1071:	movl 11
          [0x430] 1072:	pushobj
          [0x431] 1073:	call @931 // <std#ArrayList<std#string>.add(std#string)>
          [0x432] 1074:	smov ebx, sp+0
          [0x433] 1075:	inc ebx
          [0x434] 1076:	smovr ebx, sp+0
          [0x435] 1077:	goto @1058
          [0x436] 1078:	pop
          [0x437] 1079:	goto @1092
line: 215 [0x438] 1080:	new_class @46 // std#string
          [0x439] 1081:	newstr @409 // "warning: could not find support lib..."
          [0x43a] 1082:	call @558 // <std#string.string(var[])>
          [0x43b] 1083:	movl 8
          [0x43c] 1084:	pushobj
          [0x43d] 1085:	call @573 // <std#string.$operator+(std#Printable)>
          [0x43e] 1086:	newstr @410 // "`, do you have them installed?"
          [0x43f] 1087:	call @572 // <std#string.$operator+(var[])>
          [0x440] 1088:	call @610 // <std#__SRT_Global.println(std#string)>
          [0x441] 1089:	goto @1092
          [0x442] 1090:	nop
          [0x443] 1091:	nop
line: 219 [0x444] 1092:	istorel 0, fp+13
          [0x446] 1094:	movg @60 // @app#Options
          [0x447] 1095:	movn #14
          [0x448] 1096:	pushobj
          [0x449] 1097:	call @922 // <std#ArrayList<std#string>.size()>
          [0x44a] 1098:	loadval egx
          [0x44b] 1099:	loadl ebx, fp+13
          [0x44c] 1100:	lt ebx, egx
          [0x44d] 1101:	movr ebx, cmt
          [0x44e] 1102:	movi #1161, adx
          [0x450] 1104:	ifne
line: 220 [0x451] 1105:	movl 9
          [0x452] 1106:	pushobj
          [0x453] 1107:	movg @60 // @app#Options
          [0x454] 1108:	movn #14
          [0x455] 1109:	pushobj
          [0x456] 1110:	loadl ebx, fp+13
          [0x457] 1111:	rstore ebx
          [0x458] 1112:	call @925 // <std#ArrayList<std#string>.get(var)>
          [0x459] 1113:	call @139 // <std.io#File.updatePath(std#string)>
line: 222 [0x45a] 1114:	movl 9
line: 223 [0x45b] 1115:	pushobj
          [0x45c] 1116:	call @153 // <std.io#File.list()>
          [0x45d] 1117:	movl 10
          [0x45e] 1118:	popobj
          [0x45f] 1119:	goto @1132
line: 226 [0x460] 1120:	new_class @46 // std#string
          [0x461] 1121:	newstr @411 // "could not access library files in p..."
          [0x462] 1122:	call @558 // <std#string.string(var[])>
          [0x463] 1123:	movl 8
          [0x464] 1124:	pushobj
          [0x465] 1125:	call @573 // <std#string.$operator+(std#Printable)>
          [0x466] 1126:	newstr @350 // "`"
          [0x467] 1127:	call @572 // <std#string.$operator+(var[])>
          [0x468] 1128:	call @901 // <app#Runtime.error(std#string)>
          [0x469] 1129:	goto @1132
          [0x46a] 1130:	nop
          [0x46b] 1131:	nop
line: 229 [0x46c] 1132:	movi #0, ebx
          [0x46e] 1134:	rstore ebx
          [0x46f] 1135:	movl 10
          [0x470] 1136:	smov ebx, sp+0
          [0x471] 1137:	sizeof egx
          [0x472] 1138:	lt ebx, egx
          [0x473] 1139:	movi #1155, adx
          [0x475] 1141:	ifne
          [0x476] 1142:	movnd ebx
          [0x477] 1143:	pushobj
          [0x478] 1144:	movl 15
          [0x479] 1145:	popobj
line: 230 [0x47a] 1146:	movl 1
          [0x47b] 1147:	pushobj
          [0x47c] 1148:	movl 15
          [0x47d] 1149:	pushobj
          [0x47e] 1150:	call @931 // <std#ArrayList<std#string>.add(std#string)>
          [0x47f] 1151:	smov ebx, sp+0
          [0x480] 1152:	inc ebx
          [0x481] 1153:	smovr ebx, sp+0
          [0x482] 1154:	goto @1135
          [0x483] 1155:	pop
          [0x484] 1156:	loadl ebx, fp+13
          [0x485] 1157:	movi #1, ecx
          [0x487] 1159:	addl ecx, @13
          [0x488] 1160:	goto @1094
line: 234 [0x489] 1161:	new_class @17 // std.io#File
          [0x48a] 1162:	new_class @46 // std#string
          [0x48b] 1163:	newstr @412 // "no_file"
          [0x48c] 1164:	call @558 // <std#string.string(var[])>
          [0x48d] 1165:	call @136 // <std.io#File.File(std#string)>
          [0x48e] 1166:	movl 16
          [0x48f] 1167:	popobj
line: 235 [0x490] 1168:	istorel 0, fp+17
          [0x492] 1170:	movl 1
          [0x493] 1171:	pushobj
          [0x494] 1172:	call @922 // <std#ArrayList<std#string>.size()>
          [0x495] 1173:	loadval egx
          [0x496] 1174:	loadl ebx, fp+17
          [0x497] 1175:	lt ebx, egx
          [0x498] 1176:	movr ebx, cmt
          [0x499] 1177:	movi #1245, adx
          [0x49b] 1179:	ifne
line: 236 [0x49c] 1180:	movl 16
          [0x49d] 1181:	pushobj
          [0x49e] 1182:	movl 1
          [0x49f] 1183:	pushobj
          [0x4a0] 1184:	loadl ebx, fp+17
          [0x4a1] 1185:	rstore ebx
          [0x4a2] 1186:	call @925 // <std#ArrayList<std#string>.get(var)>
          [0x4a3] 1187:	call @139 // <std.io#File.updatePath(std#string)>
line: 237 [0x4a4] 1188:	movl 16
          [0x4a5] 1189:	pushobj
          [0x4a6] 1190:	call @145 // <std.io#File.exists()>
          [0x4a7] 1191:	loadval ebx
          [0x4a8] 1192:	not ebx, ebx
          [0x4a9] 1193:	movr cmt, ebx
          [0x4aa] 1194:	movi #1210, adx
          [0x4ac] 1196:	ifne
line: 238 [0x4ad] 1197:	new_class @46 // std#string
          [0x4ae] 1198:	newstr @413 // "file `"
          [0x4af] 1199:	call @558 // <std#string.string(var[])>
          [0x4b0] 1200:	movl 1
          [0x4b1] 1201:	pushobj
          [0x4b2] 1202:	loadl ebx, fp+17
          [0x4b3] 1203:	rstore ebx
          [0x4b4] 1204:	call @925 // <std#ArrayList<std#string>.get(var)>
          [0x4b5] 1205:	call @573 // <std#string.$operator+(std#Printable)>
          [0x4b6] 1206:	newstr @414 // "` doesnt exist!"
          [0x4b7] 1207:	call @572 // <std#string.$operator+(var[])>
          [0x4b8] 1208:	call @901 // <app#Runtime.error(std#string)>
          [0x4b9] 1209:	nop
          [0x4ba] 1210:	nop
line: 240 [0x4bb] 1211:	movl 1
          [0x4bc] 1212:	pushobj
          [0x4bd] 1213:	loadl ebx, fp+17
          [0x4be] 1214:	rstore ebx
          [0x4bf] 1215:	call @925 // <std#ArrayList<std#string>.get(var)>
          [0x4c0] 1216:	new_class @46 // std#string
          [0x4c1] 1217:	newstr @415 // ".sharp"
          [0x4c2] 1218:	call @558 // <std#string.string(var[])>
          [0x4c3] 1219:	call @591 // <std#string.endsWith(std#string)>
          [0x4c4] 1220:	loadval ebx
          [0x4c5] 1221:	not ebx, ebx
          [0x4c6] 1222:	movr cmt, ebx
          [0x4c7] 1223:	movi #1239, adx
          [0x4c9] 1225:	ifne
line: 241 [0x4ca] 1226:	new_class @46 // std#string
          [0x4cb] 1227:	newstr @413 // "file `"
          [0x4cc] 1228:	call @558 // <std#string.string(var[])>
          [0x4cd] 1229:	movl 1
          [0x4ce] 1230:	pushobj
          [0x4cf] 1231:	loadl ebx, fp+17
          [0x4d0] 1232:	rstore ebx
          [0x4d1] 1233:	call @925 // <std#ArrayList<std#string>.get(var)>
          [0x4d2] 1234:	call @573 // <std#string.$operator+(std#Printable)>
          [0x4d3] 1235:	newstr @416 // "` is not a sharp file!"
          [0x4d4] 1236:	call @572 // <std#string.$operator+(var[])>
          [0x4d5] 1237:	call @901 // <app#Runtime.error(std#string)>
          [0x4d6] 1238:	nop
          [0x4d7] 1239:	nop
          [0x4d8] 1240:	loadl ebx, fp+17
          [0x4d9] 1241:	movi #1, ecx
          [0x4db] 1243:	addl ecx, @17
          [0x4dc] 1244:	goto @1170
line: 244 [0x4dd] 1245:	movl 1
          [0x4de] 1246:	pushobj
          [0x4df] 1247:	call @898 // <app#Runtime.exec_runtime(std#ArrayList<std#string>)>
line: 245 [0x4e0] 1248:	movi #0, ebx
          [0x4e2] 1250:	return_val ebx
          [0x4e3] 1251:	ret

func:@897 [app#Runtime.contains] in file: lib/support//bootstrap//Runtime.sharp:249:24: note:  
		    static def contains(ArrayList<string> files, string file) : var {
		                       ^


contains:
line: 249 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	call @935 // <std#ArrayList<std#string>.data()>
          [0x3] 3:	movl 2
          [0x4] 4:	popobj
line: 250 [0x5] 5:	movl 0
          [0x6] 6:	pushobj
          [0x7] 7:	call @922 // <std#ArrayList<std#string>.size()>
          [0x8] 8:	loadval ebx
          [0x9] 9:	smovr_2 ebx, fp+3
line: 251 [0xa] 10:	istorel 0, fp+4
          [0xc] 12:	loadl ebx, fp+3
          [0xd] 13:	movr egx, ebx
          [0xe] 14:	loadl ebx, fp+4
          [0xf] 15:	lt ebx, egx
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	movi #43, adx
          [0x13] 19:	ifne
line: 252 [0x14] 20:	movl 2
          [0x15] 21:	loadl ebx, fp+4
          [0x16] 22:	chklen ebx
          [0x17] 23:	movnd ebx
          [0x18] 24:	pushobj
          [0x19] 25:	movl 1
          [0x1a] 26:	pushobj
          [0x1b] 27:	call @574 // <std#string.$operator==(std#string)>
          [0x1c] 28:	loadval cmt
          [0x1d] 29:	movi #37, adx
          [0x1f] 31:	ifne
line: 253 [0x20] 32:	movi #1, ebx
          [0x22] 34:	return_val ebx
          [0x23] 35:	ret
          [0x24] 36:	nop
          [0x25] 37:	nop
          [0x26] 38:	loadl ebx, fp+4
          [0x27] 39:	movi #1, ecx
          [0x29] 41:	addl ecx, @4
          [0x2a] 42:	goto @12
line: 256 [0x2b] 43:	movi #0, ebx
          [0x2d] 45:	return_val ebx
          [0x2e] 46:	ret

func:@898 [app#Runtime.exec_runtime] in file: lib/support//bootstrap//Runtime.sharp:260:28: note:  
		    static def exec_runtime(ArrayList<string> files) {
		                           ^


exec_runtime:
line: 261 [0x0] 0:	new_class @17 // std.io#File
          [0x1] 1:	movl 0
          [0x2] 2:	pushobj
          [0x3] 3:	movi #0, ebx
          [0x5] 5:	rstore ebx
          [0x6] 6:	call @925 // <std#ArrayList<std#string>.get(var)>
          [0x7] 7:	call @136 // <std.io#File.File(std#string)>
          [0x8] 8:	movl 1
          [0x9] 9:	popobj
line: 263 [0xa] 10:	new_class @20 // std.io#IOStream
          [0xb] 11:	movl 1
          [0xc] 12:	pushobj
          [0xd] 13:	movg @20 // @std.io#IOStream
          [0xe] 14:	movn #4
          [0xf] 15:	movi #0, adx
          [0x11] 17:	iaload_2 ebx, adx
          [0x12] 18:	rstore ebx
          [0x13] 19:	call @200 // <std.io#IOStream.IOStream(std.io#File,var)>
          [0x14] 20:	movl 2
          [0x15] 21:	popobj
line: 264 [0x16] 22:	movl 2
          [0x17] 23:	pushobj
          [0x18] 24:	call @213 // <std.io#IOStream.getData()>
          [0x19] 25:	movl 3
          [0x1a] 26:	popobj
line: 267 [0x1b] 27:	new_class @59 // app#Tokenizer
          [0x1c] 28:	movl 3
          [0x1d] 29:	pushobj
          [0x1e] 30:	movl 0
          [0x1f] 31:	pushobj
          [0x20] 32:	movi #0, ebx
          [0x22] 34:	rstore ebx
          [0x23] 35:	call @925 // <std#ArrayList<std#string>.get(var)>
          [0x24] 36:	call @867 // <app#Tokenizer.Tokenizer(std#string,std#string)>
          [0x25] 37:	movl 4
          [0x26] 38:	popobj
line: 268 [0x27] 39:	new_class @57 // app#Parser
          [0x28] 40:	movl 4
          [0x29] 41:	pushobj
          [0x2a] 42:	call @831 // <app#Parser.Parser(app#Tokenizer)>
          [0x2b] 43:	movl 5
          [0x2c] 44:	popobj
line: 269 [0x2d] 45:	movl 5
          [0x2e] 46:	pushobj
          [0x2f] 47:	call @838 // <app#Parser.getErrors()>
          [0x30] 48:	call @783 // <app#ErrorManager.printErrors()>
          [0x31] 49:	ret

func:@899 [app#Runtime.integerString] in file: lib/support//bootstrap//Runtime.sharp:274:37: note:  
		    private static def integerString(string str) : var {
		                                    ^


integerString:
line: 274 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	call @596 // <std#string.getData()>
          [0x3] 3:	movl 1
          [0x4] 4:	popobj
line: 275 [0x5] 5:	movi #0, ebx
          [0x7] 7:	rstore ebx
          [0x8] 8:	movl 1
          [0x9] 9:	smov ebx, sp+0
          [0xa] 10:	sizeof egx
          [0xb] 11:	lt ebx, egx
          [0xc] 12:	movi #36, adx
          [0xe] 14:	ifne
          [0xf] 15:	iaload_2 ebx, ebx
          [0x10] 16:	smovr_2 ebx, fp+2
line: 276 [0x11] 17:	loadl ebx, fp+2
          [0x12] 18:	rstore ebx
          [0x13] 19:	call @63 // <std#char.isDigit(var)>
          [0x14] 20:	loadval ebx
          [0x15] 21:	not ebx, ebx
          [0x16] 22:	movr cmt, ebx
          [0x17] 23:	movi #31, adx
          [0x19] 25:	ifne
line: 277 [0x1a] 26:	movi #0, ebx
          [0x1c] 28:	return_val ebx
          [0x1d] 29:	ret
          [0x1e] 30:	nop
          [0x1f] 31:	nop
          [0x20] 32:	smov ebx, sp+0
          [0x21] 33:	inc ebx
          [0x22] 34:	smovr ebx, sp+0
          [0x23] 35:	goto @8
          [0x24] 36:	pop
line: 279 [0x25] 37:	movi #1, ebx
          [0x27] 39:	return_val ebx
          [0x28] 40:	ret

func:@900 [app#Runtime.checkTarget] in file: lib/support//bootstrap//Runtime.sharp:283:35: note:  
		    private static def checkTarget() {
		                                  ^


checkTarget:
line: 283 [0x0] 0:	movg @60 // @app#Options
          [0x1] 1:	movn #13
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	switch 0 //  table [default: 8 case 2: @7, ]
line: 285 [0x7] 7:	ret
line: 287 [0x8] 8:	new_class @46 // std#string
          [0x9] 9:	newstr @417 // "invalid platform target `"
          [0xa] 10:	call @558 // <std#string.string(var[])>
          [0xb] 11:	movg @60 // @app#Options
          [0xc] 12:	movn #13
          [0xd] 13:	movi #0, adx
          [0xf] 15:	iaload_2 ebx, adx
          [0x10] 16:	rstore ebx
          [0x11] 17:	call @579 // <std#string.$operator+(var)>
          [0x12] 18:	newstr @350 // "`"
          [0x13] 19:	call @572 // <std#string.$operator+(var[])>
          [0x14] 20:	call @901 // <app#Runtime.error(std#string)>
line: 288 [0x15] 21:	goto @22
          [0x16] 22:	ret

func:@901 [app#Runtime.error] in file: lib/support//bootstrap//Runtime.sharp:293:29: note:  
		    private static def error(string message) {
		                            ^


error:
line: 293 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	newstr @418 // "sharpc:  error: "
          [0x2] 2:	call @558 // <std#string.string(var[])>
          [0x3] 3:	movl 0
          [0x4] 4:	pushobj
          [0x5] 5:	call @573 // <std#string.$operator+(std#Printable)>
          [0x6] 6:	call @610 // <std#__SRT_Global.println(std#string)>
line: 294 [0x7] 7:	call @618 // <std#__SRT_Global.exit()>
          [0x8] 8:	ret

func:@902 [app#Runtime.printVersion] in file: lib/support//bootstrap//Runtime.sharp:298:36: note:  
		    private static def printVersion() {
		                                   ^


printVersion:
line: 298 [0x0] 0:	movg @62 // @app#Runtime
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	newstr @308 // " "
          [0x4] 4:	call @572 // <std#string.$operator+(var[])>
          [0x5] 5:	movg @62 // @app#Runtime
          [0x6] 6:	movn #1
          [0x7] 7:	pushobj
          [0x8] 8:	call @573 // <std#string.$operator+(std#Printable)>
          [0x9] 9:	call @601 // <std#__SRT_Global.print(std#string)>
          [0xa] 10:	ret

func:@903 [app#Runtime.help] in file: lib/support//bootstrap//Runtime.sharp:302:28: note:  
		    private static def help() {
		                           ^


help:
line: 302 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	newstr @419 // "Usage: sharpc "
          [0x2] 2:	call @558 // <std#string.string(var[])>
          [0x3] 3:	newstr @420 // "{OPTIONS} SOURCE FILE(S)"
          [0x4] 4:	call @572 // <std#string.$operator+(var[])>
          [0x5] 5:	call @610 // <std#__SRT_Global.println(std#string)>
line: 303 [0x6] 6:	newstr @421 // "Source file must have a .sharp exti..."
          [0x7] 7:	call @602 // <std#__SRT_Global.println(var[])>
line: 304 [0x8] 8:	newstr @422 // "[-options]\n\n    -V                p..."
          [0x9] 9:	call @602 // <std#__SRT_Global.println(var[])>
line: 305 [0xa] 10:	newstr @423 // "    -showversion      print compile..."
          [0xb] 11:	call @602 // <std#__SRT_Global.println(var[])>
line: 306 [0xc] 12:	newstr @424 // "    -o<file>          set the outpu..."
          [0xd] 13:	call @602 // <std#__SRT_Global.println(var[])>
line: 307 [0xe] 14:	newstr @425 // "    -c                compile only ..."
          [0xf] 15:	call @602 // <std#__SRT_Global.println(var[])>
line: 308 [0x10] 16:	newstr @426 // "    -a                enable aggres..."
          [0x11] 17:	call @602 // <std#__SRT_Global.println(var[])>
line: 309 [0x12] 18:	newstr @427 // "    -s                strip debuggi..."
          [0x13] 19:	call @602 // <std#__SRT_Global.println(var[])>
line: 310 [0x14] 20:	newstr @428 // "    -O -O1            optimize code..."
          [0x15] 21:	call @602 // <std#__SRT_Global.println(var[])>
line: 311 [0x16] 22:	newstr @429 // "    -O2               optimize code..."
          [0x17] 23:	call @602 // <std#__SRT_Global.println(var[])>
line: 312 [0x18] 24:	newstr @430 // "    -L<path>          library direc..."
          [0x19] 25:	call @602 // <std#__SRT_Global.println(var[])>
line: 313 [0x1a] 26:	newstr @431 // "    -w                disable all w..."
          [0x1b] 27:	call @602 // <std#__SRT_Global.println(var[])>
line: 314 [0x1c] 28:	newstr @432 // "    -errlmt<count>    set max error..."
          [0x1d] 29:	call @602 // <std#__SRT_Global.println(var[])>
line: 315 [0x1e] 30:	newstr @433 // "    -v<version>       set the appli..."
          [0x1f] 31:	call @602 // <std#__SRT_Global.println(var[])>
line: 316 [0x20] 32:	newstr @434 // "    -unsafe -u        allow unsafe ..."
          [0x21] 33:	call @602 // <std#__SRT_Global.println(var[])>
line: 317 [0x22] 34:	newstr @435 // "    -objdmp           create dump f..."
          [0x23] 35:	call @602 // <std#__SRT_Global.println(var[])>
line: 318 [0x24] 36:	newstr @436 // "    -target           target the sp..."
          [0x25] 37:	call @602 // <std#__SRT_Global.println(var[])>
line: 319 [0x26] 38:	newstr @437 // "    -release -r       generate a re..."
          [0x27] 39:	call @602 // <std#__SRT_Global.println(var[])>
line: 320 [0x28] 40:	newstr @438 // "    --asmd            display assem..."
          [0x29] 41:	call @602 // <std#__SRT_Global.println(var[])>
line: 321 [0x2a] 42:	newstr @439 // "    --hw              display help ..."
          [0x2b] 43:	call @602 // <std#__SRT_Global.println(var[])>
line: 322 [0x2c] 44:	newstr @440 // "    --h -?            display this ..."
          [0x2d] 45:	call @602 // <std#__SRT_Global.println(var[])>
          [0x2e] 46:	ret

func:@904 [app#Runtime.helpWarning] in file: lib/support//bootstrap//Runtime.sharp:326:35: note:  
		    private static def helpWarning() {
		                                  ^


helpWarning:
line: 326 [0x0] 0:	newstr @441 // "Usage: sharpc {OPTIONS} SOURCE FILE..."
          [0x1] 1:	call @602 // <std#__SRT_Global.println(var[])>
line: 327 [0x2] 2:	newstr @421 // "Source file must have a .sharp exti..."
          [0x3] 3:	call @602 // <std#__SRT_Global.println(var[])>
line: 328 [0x4] 4:	newstr @442 // "Please note that not all warnings w..."
          [0x5] 5:	call @602 // <std#__SRT_Global.println(var[])>
line: 329 [0x6] 6:	newstr @443 // "[-options]\n\n    -w                d..."
          [0x7] 7:	call @602 // <std#__SRT_Global.println(var[])>
line: 330 [0x8] 8:	newstr @444 // "    -winit            disable class..."
          [0x9] 9:	call @602 // <std#__SRT_Global.println(var[])>
line: 331 [0xa] 10:	newstr @445 // "    -waccess          disable acces..."
          [0xb] 11:	call @602 // <std#__SRT_Global.println(var[])>
line: 332 [0xc] 12:	newstr @446 // "    -wambig           disable ambig..."
          [0xd] 13:	call @602 // <std#__SRT_Global.println(var[])>
line: 333 [0xe] 14:	newstr @447 // "    -wdecl            disable objec..."
          [0xf] 15:	call @602 // <std#__SRT_Global.println(var[])>
line: 334 [0x10] 16:	newstr @448 // "    -wmain            disable multi..."
          [0x11] 17:	call @602 // <std#__SRT_Global.println(var[])>
line: 335 [0x12] 18:	newstr @449 // "    -wcast            disable type ..."
          [0x13] 19:	call @602 // <std#__SRT_Global.println(var[])>
line: 336 [0x14] 20:	newstr @450 // "    -werror           enable warnin..."
          [0x15] 21:	call @602 // <std#__SRT_Global.println(var[])>
line: 337 [0x16] 22:	newstr @451 // "    --hw              display this ..."
          [0x17] 23:	call @602 // <std#__SRT_Global.println(var[])>
          [0x18] 24:	ret

func:@905 [app#Runtime.helpAssemblyDump] in file: lib/support//bootstrap//Runtime.sharp:341:40: note:  
		    private static def helpAssemblyDump() {
		                                       ^


helpAssemblyDump:
line: 341 [0x0] 0:	newstr @441 // "Usage: sharpc {OPTIONS} SOURCE FILE..."
          [0x1] 1:	call @602 // <std#__SRT_Global.println(var[])>
line: 342 [0x2] 2:	newstr @421 // "Source file must have a .sharp exti..."
          [0x3] 3:	call @602 // <std#__SRT_Global.println(var[])>
line: 343 [0x4] 4:	newstr @452 // "Please note that default output for..."
          [0x5] 5:	call @602 // <std#__SRT_Global.println(var[])>
line: 344 [0x6] 6:	newstr @453 // "All compiler options for `-asmd` ca..."
          [0x7] 7:	call @602 // <std#__SRT_Global.println(var[])>
line: 345 [0x8] 8:	newstr @454 // "[-options]\n\n    -asmd             d..."
          [0x9] 9:	call @602 // <std#__SRT_Global.println(var[])>
line: 346 [0xa] 10:	newstr @455 // "    -asmd:d           de-mangle sou..."
          [0xb] 11:	call @602 // <std#__SRT_Global.println(var[])>
line: 347 [0xc] 12:	newstr @456 // "    -asmd:s           reformat code..."
          [0xd] 13:	call @602 // <std#__SRT_Global.println(var[])>
line: 348 [0xe] 14:	newstr @457 // "    -asmd:i           display debug..."
          [0xf] 15:	call @602 // <std#__SRT_Global.println(var[])>
line: 349 [0x10] 16:	newstr @458 // "    --asmd            display this ..."
          [0x11] 17:	call @602 // <std#__SRT_Global.println(var[])>
          [0x12] 18:	ret

func:@906 [app#Runtime.Runtime] in file: lib/support//bootstrap//Runtime.sharp:11:13: note:  
		public class Runtime {
		            ^


Runtime:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@907 [std.kernel#TimeUnit.TimeUnit] in file: lib/support//0.2.587//kernel//Time.sharp:80:12: note:  
		public enum TimeUnit {
		           ^


TimeUnit:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@908 [std.os.gui#_GUI._GUI] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:8:5: note:  
		enum _GUI
		    ^


_GUI:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@909 [std.os.gui#_PAINT._PAINT] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:22:4: note:  
		enum _PAINT
		   ^


_PAINT:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@910 [std.os.gui#PaintStyle.PaintStyle] in file: lib/support//0.2.587//os//gui//win//kernel//Gui.sharp:41:5: note:  
		enum PaintStyle
		    ^


PaintStyle:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@911 [std#PayloadClass.PayloadClass] in file: lib/support//0.2.587//PayloadClass.sharp:13:12: note:  
		public enum PayloadClass {
		           ^


PayloadClass:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@912 [app#CompilerError.CompilerError] in file: lib/support//bootstrap//frontend//ErrorManager.sharp:407:5: note:  
		enum CompilerError {
		    ^


CompilerError:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@913 [app#AstType.AstType] in file: lib/support//bootstrap//frontend//parser//Ast.sharp:188:5: note:  
		enum AstType {
		    ^


AstType:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@914 [app#TokenId.TokenId] in file: lib/support//bootstrap//frontend//tokenizer//Token.sharp:97:5: note:  
		enum TokenId
		    ^


TokenId:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@915 [app#TokenType.TokenType] in file: lib/support//bootstrap//frontend//tokenizer//TokenType.sharp:13:5: note:  
		enum TokenType
		    ^


TokenType:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@916 [app#Optimization.Optimization] in file: lib/support//bootstrap//Options.sharp:120:5: note:  
		enum Optimization {
		    ^


Optimization:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@917 [std#ArrayList<std#string>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:45:21: note:  
		    public ArrayList() {
		                    ^


ArrayList:
line: 46 [0x0] 0:	movi #10, ebx
         [0x2] 2:	new_classarray ebx  // std#string[]
         [0x3] 3:	movl 0
         [0x4] 4:	movn #0
         [0x5] 5:	popobj
line: 47 [0x6] 6:	movg @67 // @std#PayloadClass
         [0x7] 7:	movn #3
         [0x8] 8:	pushobj
         [0x9] 9:	movl 0
         [0xa] 10:	movn #4
         [0xb] 11:	popobj
         [0xc] 12:	movl 0
         [0xd] 13:	returnobj
         [0xe] 14:	ret

func:@918 [std#ArrayList<std#string>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:55:21: note:  
		    public ArrayList(var startingCapacity) {
		                    ^


ArrayList:
line: 56 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	new_classarray ebx  // std#string[]
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	popobj
line: 57 [0x5] 5:	movg @67 // @std#PayloadClass
         [0x6] 6:	movn #3
         [0x7] 7:	pushobj
         [0x8] 8:	movl 0
         [0x9] 9:	movn #4
         [0xa] 10:	popobj
         [0xb] 11:	movl 0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@919 [std#ArrayList<std#string>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:65:21: note:  
		    public ArrayList(var startingCapacity, PayloadClass pc) {
		                    ^


ArrayList:
line: 66 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	new_classarray ebx  // std#string[]
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	popobj
line: 67 [0x5] 5:	movl 2
         [0x6] 6:	pushobj
         [0x7] 7:	movl 0
         [0x8] 8:	movn #4
         [0x9] 9:	popobj
         [0xa] 10:	movl 0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@920 [std#ArrayList<std#string>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:75:21: note:  
		    public ArrayList(PayloadClass pc) {
		                    ^


ArrayList:
line: 76 [0x0] 0:	movi #10, ebx
         [0x2] 2:	new_classarray ebx  // std#string[]
         [0x3] 3:	movl 0
         [0x4] 4:	movn #0
         [0x5] 5:	popobj
line: 77 [0x6] 6:	movl 1
         [0x7] 7:	pushobj
         [0x8] 8:	movl 0
         [0x9] 9:	movn #4
         [0xa] 10:	popobj
         [0xb] 11:	movl 0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@921 [std#ArrayList<std#string>.setPayloadClass] in file: lib/support//0.2.587//ArrayList.sharp:86:31: note:  
		    public def setPayloadClass(PayloadClass pc) {
		                              ^


setPayloadClass:
line: 86 [0x0] 0:	movl 1
         [0x1] 1:	pushobj
         [0x2] 2:	movl 0
         [0x3] 3:	movn #4
         [0x4] 4:	popobj
         [0x5] 5:	ret

func:@922 [std#ArrayList<std#string>.size] in file: lib/support//0.2.587//ArrayList.sharp:94:20: note:  
		    public def size() : var {
		                   ^


size:
line: 94 [0x0] 0:	movl 0
         [0x1] 1:	movn #3
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@923 [std#ArrayList<std#string>.empty] in file: lib/support//0.2.587//ArrayList.sharp:102:21: note:  
		    public def empty() : var {
		                    ^


empty:
line: 102 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movi #0, ebx
          [0x8] 8:	movr egx, ebx
          [0x9] 9:	loadval ebx
          [0xa] 10:	test ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	return_val cmt
          [0xd] 13:	ret

func:@924 [std#ArrayList<std#string>.toArray] in file: lib/support//0.2.587//ArrayList.sharp:111:23: note:  
		    public def toArray() : T[] {
		                      ^


toArray:
line: 111 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movi #0, ebx
          [0x8] 8:	movr egx, ebx
          [0x9] 9:	loadval ebx
          [0xa] 10:	test ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	movi #19, adx
          [0xe] 14:	ifne
line: 111 [0xf] 15:	movl 0
          [0x10] 16:	del
          [0x11] 17:	ret
          [0x12] 18:	nop
          [0x13] 19:	nop
line: 112 [0x14] 20:	movl 0
          [0x15] 21:	movn #0
          [0x16] 22:	pushobj
          [0x17] 23:	movl 0
          [0x18] 24:	movn #3
          [0x19] 25:	movi #0, adx
          [0x1b] 27:	iaload_2 ebx, adx
          [0x1c] 28:	rstore ebx
          [0x1d] 29:	call @619 // <std#__SRT_Global.copyOf(object,var)>
          [0x1e] 30:	movsl #0
          [0x1f] 31:	movi #46, cmt
          [0x21] 33:	cast cmt
          [0x22] 34:	movsl #0
          [0x23] 35:	returnobj
          [0x24] 36:	ret

func:@925 [std#ArrayList<std#string>.get] in file: lib/support//0.2.587//ArrayList.sharp:120:19: note:  
		    public def get(var index) : T {
		                  ^


get:
line: 120 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gte ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movi #21, adx
          [0xb] 11:	ifne
line: 121 [0xc] 12:	new_class @13 // std#IndexOutOfBoundsException
          [0xd] 13:	movl 0
          [0xe] 14:	pushobj
          [0xf] 15:	loadl ebx, fp+1
          [0x10] 16:	rstore ebx
          [0x11] 17:	call @937 // <std#ArrayList<std#string>.outOfBoundsMsg(var)>
          [0x12] 18:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x13] 19:	throw 
          [0x14] 20:	nop
          [0x15] 21:	nop
line: 123 [0x16] 22:	movl 0
          [0x17] 23:	movn #0
          [0x18] 24:	loadl ebx, fp+1
          [0x19] 25:	chklen ebx
          [0x1a] 26:	movnd ebx
          [0x1b] 27:	returnobj
          [0x1c] 28:	ret

func:@926 [std#ArrayList<std#string>.last] in file: lib/support//0.2.587//ArrayList.sharp:131:20: note:  
		    public def last() : T {
		                   ^


last:
line: 131 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	movi #1, ebx
          [0x4] 4:	rstore ebx
          [0x5] 5:	movl 0
          [0x6] 6:	movn #3
          [0x7] 7:	movi #0, adx
          [0x9] 9:	chklen adx
          [0xa] 10:	iaload_2 ebx, adx
          [0xb] 11:	loadval egx
          [0xc] 12:	sub ebx, egx -> ebx
          [0xe] 14:	rstore ebx
          [0xf] 15:	call @925 // <std#ArrayList<std#string>.get(var)>
          [0x10] 16:	movsl #0
          [0x11] 17:	returnobj
          [0x12] 18:	ret

func:@927 [std#ArrayList<std#string>.set] in file: lib/support//0.2.587//ArrayList.sharp:140:19: note:  
		    public def set(var index, T element) : T {
		                  ^


set:
line: 140 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gte ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movi #21, adx
          [0xb] 11:	ifne
line: 141 [0xc] 12:	new_class @13 // std#IndexOutOfBoundsException
          [0xd] 13:	movl 0
          [0xe] 14:	pushobj
          [0xf] 15:	loadl ebx, fp+1
          [0x10] 16:	rstore ebx
          [0x11] 17:	call @937 // <std#ArrayList<std#string>.outOfBoundsMsg(var)>
          [0x12] 18:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x13] 19:	throw 
          [0x14] 20:	nop
          [0x15] 21:	nop
line: 143 [0x16] 22:	movl 0
          [0x17] 23:	movn #0
          [0x18] 24:	loadl ebx, fp+1
          [0x19] 25:	chklen ebx
          [0x1a] 26:	movnd ebx
          [0x1b] 27:	pushobj
          [0x1c] 28:	movl 3
          [0x1d] 29:	popobj
line: 144 [0x1e] 30:	movl 2
          [0x1f] 31:	pushobj
          [0x20] 32:	movl 0
          [0x21] 33:	movn #0
          [0x22] 34:	loadl ebx, fp+1
          [0x23] 35:	chklen ebx
          [0x24] 36:	movnd ebx
          [0x25] 37:	popobj
line: 145 [0x26] 38:	movl 3
          [0x27] 39:	returnobj
          [0x28] 40:	ret

func:@928 [std#ArrayList<std#string>.expand] in file: lib/support//0.2.587//ArrayList.sharp:155:23: note:  
		    private def expand() {
		                      ^


expand:
line: 155 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	movn #4
          [0x5] 5:	pushobj
          [0x6] 6:	call @78 // <std#Enum.getValue()>
          [0x7] 7:	movl 0
          [0x8] 8:	movn #0
          [0x9] 9:	sizeof ebx
          [0xa] 10:	loadval ecx
          [0xb] 11:	shr ebx, ecx -> ebx
          [0xd] 13:	rstore ebx
          [0xe] 14:	movl 0
          [0xf] 15:	movn #0
          [0x10] 16:	sizeof ebx
          [0x11] 17:	loadval ecx
          [0x12] 18:	add ebx, ecx -> ebx
          [0x14] 20:	rstore ebx
          [0x15] 21:	movi #20, ebx
          [0x17] 23:	rstore ebx
          [0x18] 24:	loadval ebx
          [0x19] 25:	loadval ecx
          [0x1a] 26:	add ebx, ecx -> ebx
          [0x1c] 28:	rstore ebx
          [0x1d] 29:	call @622 // <std#__SRT_Global.realloc(object,var)>
          [0x1e] 30:	ret

func:@929 [std#ArrayList<std#string>.shrink] in file: lib/support//0.2.587//ArrayList.sharp:162:23: note:  
		    private def shrink() {
		                      ^


shrink:
line: 162 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	sizeof ebx
          [0x3] 3:	movr egx, ebx
          [0x4] 4:	movl 0
          [0x5] 5:	movn #3
          [0x6] 6:	movi #0, adx
          [0x8] 8:	chklen adx
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	lte ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	cmp ebx, 1
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	skne 16 // pc = 30
          [0xf] 15:	istore 1
          [0x10] 16:	movi #0, ebx
          [0x12] 18:	movr egx, ebx
          [0x13] 19:	movl 0
          [0x14] 20:	movn #3
          [0x15] 21:	movi #0, adx
          [0x17] 23:	chklen adx
          [0x18] 24:	iaload_2 ebx, adx
          [0x19] 25:	gt ebx, egx
          [0x1a] 26:	movr ebx, cmt
          [0x1b] 27:	loadval ecx
          [0x1c] 28:	and ecx, ebx
          [0x1d] 29:	movr ebx, cmt
          [0x1e] 30:	movr cmt, ebx
          [0x1f] 31:	movi #79, adx
          [0x21] 33:	ifne
line: 163 [0x22] 34:	movl 0
          [0x23] 35:	movn #3
          [0x24] 36:	movi #0, adx
          [0x26] 38:	chklen adx
          [0x27] 39:	iaload_2 ebx, adx
          [0x28] 40:	dec ebx
          [0x29] 41:	rmov adx, ebx
          [0x2a] 42:	inc ebx
line: 165 [0x2b] 43:	movl 0
          [0x2c] 44:	movn #0
          [0x2d] 45:	sizeof ebx
          [0x2e] 46:	rstore ebx
          [0x2f] 47:	movi #0, ebx
          [0x31] 49:	movr egx, ebx
          [0x32] 50:	loadval ebx
          [0x33] 51:	test ebx, egx
          [0x34] 52:	movr ebx, cmt
          [0x35] 53:	movr ebx, cmt
          [0x36] 54:	skpe 15 // pc = 69
          [0x37] 55:	movl 0
          [0x38] 56:	movn #3
          [0x39] 57:	movi #0, adx
          [0x3b] 59:	iaload_2 ebx, adx
          [0x3c] 60:	rstore ebx
          [0x3d] 61:	movi #0, ebx
          [0x3f] 63:	movr egx, ebx
          [0x40] 64:	loadval ebx
          [0x41] 65:	test ebx, egx
          [0x42] 66:	movr ebx, cmt
          [0x43] 67:	cmp ebx, 1
          [0x44] 68:	movr ebx, cmt
          [0x45] 69:	movr cmt, ebx
          [0x46] 70:	movi #77, adx
          [0x48] 72:	ifne
line: 166 [0x49] 73:	movl 0
          [0x4a] 74:	pushobj
          [0x4b] 75:	call @936 // <std#ArrayList<std#string>.clear()>
          [0x4c] 76:	nop
          [0x4d] 77:	nop
          [0x4e] 78:	nop
          [0x4f] 79:	nop
          [0x50] 80:	ret

func:@930 [std#ArrayList<std#string>.addAll] in file: lib/support//0.2.587//ArrayList.sharp:178:23: note:  
		     public def addAll(ArrayList<T> lst) {
		                      ^


addAll:
line: 178 [0x0] 0:	movl 1
          [0x1] 1:	pushobj
          [0x2] 2:	call @935 // <std#ArrayList<std#string>.data()>
          [0x3] 3:	movl 2
          [0x4] 4:	popobj
line: 179 [0x5] 5:	movl 2
          [0x6] 6:	pushobj
          [0x7] 7:	movl 2
          [0x8] 8:	sizeof ebx
          [0x9] 9:	rstore ebx
          [0xa] 10:	call @619 // <std#__SRT_Global.copyOf(object,var)>
          [0xb] 11:	movsl #0
          [0xc] 12:	movi #46, cmt
          [0xe] 14:	cast cmt
          [0xf] 15:	movl 0
          [0x10] 16:	movn #0
          [0x11] 17:	popobj
line: 180 [0x12] 18:	movl 0
          [0x13] 19:	movn #0
          [0x14] 20:	sizeof ebx
          [0x15] 21:	nop
          [0x16] 22:	rstore ebx
          [0x17] 23:	movl 0
          [0x18] 24:	movn #3
          [0x19] 25:	movi #0, adx
          [0x1b] 27:	loadval ecx
          [0x1c] 28:	rmov adx, ecx
          [0x1d] 29:	ret

func:@931 [std#ArrayList<std#string>.add] in file: lib/support//0.2.587//ArrayList.sharp:190:20: note:  
		     public def add(T e) {
		                   ^


add:
line: 190 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	sizeof ebx
          [0x3] 3:	movr egx, ebx
          [0x4] 4:	movl 0
          [0x5] 5:	movn #3
          [0x6] 6:	movi #0, adx
          [0x8] 8:	chklen adx
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	gte ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	movi #19, adx
          [0xe] 14:	ifne
line: 191 [0xf] 15:	movl 0
          [0x10] 16:	pushobj
          [0x11] 17:	call @928 // <std#ArrayList<std#string>.expand()>
          [0x12] 18:	nop
          [0x13] 19:	nop
line: 192 [0x14] 20:	movl 1
          [0x15] 21:	pushobj
          [0x16] 22:	movl 0
          [0x17] 23:	movn #0
          [0x18] 24:	pushobj
          [0x19] 25:	movl 0
          [0x1a] 26:	movn #3
          [0x1b] 27:	movi #0, adx
          [0x1d] 29:	chklen adx
          [0x1e] 30:	iaload_2 ebx, adx
          [0x1f] 31:	inc ebx
          [0x20] 32:	rmov adx, ebx
          [0x21] 33:	dec ebx
          [0x22] 34:	movsl #0
          [0x23] 35:	chklen ebx
          [0x24] 36:	movnd ebx
          [0x25] 37:	pop
          [0x26] 38:	popobj
          [0x27] 39:	ret

func:@932 [std#ArrayList<std#string>.popBack] in file: lib/support//0.2.587//ArrayList.sharp:203:24: note:  
		     public def popBack() {
		                       ^


popBack:
line: 203 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	call @929 // <std#ArrayList<std#string>.shrink()>
          [0x3] 3:	ret

func:@933 [std#ArrayList<std#string>.insert] in file: lib/support//0.2.587//ArrayList.sharp:213:23: note:  
		     public def insert(var pos, T value) {
		                      ^


insert:
line: 213 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gt ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	skpe 9 // pc = 19
          [0xb] 11:	movi #0, ebx
          [0xd] 13:	movr egx, ebx
          [0xe] 14:	loadl ebx, fp+1
          [0xf] 15:	lt ebx, egx
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	cmp ebx, 1
          [0x12] 18:	movr ebx, cmt
          [0x13] 19:	movr cmt, ebx
          [0x14] 20:	movi #32, adx
          [0x16] 22:	ifne
line: 214 [0x17] 23:	new_class @13 // std#IndexOutOfBoundsException
          [0x18] 24:	movl 0
          [0x19] 25:	pushobj
          [0x1a] 26:	loadl ebx, fp+1
          [0x1b] 27:	rstore ebx
          [0x1c] 28:	call @937 // <std#ArrayList<std#string>.outOfBoundsMsg(var)>
          [0x1d] 29:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x1e] 30:	throw 
          [0x1f] 31:	nop
          [0x20] 32:	nop
line: 216 [0x21] 33:	movl 0
          [0x22] 34:	movn #3
          [0x23] 35:	movi #0, adx
          [0x25] 37:	iaload_2 ebx, adx
          [0x26] 38:	rstore ebx
          [0x27] 39:	movi #0, ebx
          [0x29] 41:	movr egx, ebx
          [0x2a] 42:	loadval ebx
          [0x2b] 43:	test ebx, egx
          [0x2c] 44:	movr ebx, cmt
          [0x2d] 45:	movi #54, adx
          [0x2f] 47:	ifne
line: 217 [0x30] 48:	movl 0
          [0x31] 49:	pushobj
          [0x32] 50:	movl 2
          [0x33] 51:	pushobj
          [0x34] 52:	call @931 // <std#ArrayList<std#string>.add(std#string)>
          [0x35] 53:	goto @140
line: 219 [0x36] 54:	movl 0
          [0x37] 55:	movn #0
          [0x38] 56:	sizeof ebx
          [0x39] 57:	movr egx, ebx
          [0x3a] 58:	movl 0
          [0x3b] 59:	movn #3
          [0x3c] 60:	movi #0, adx
          [0x3e] 62:	chklen adx
          [0x3f] 63:	iaload_2 ebx, adx
          [0x40] 64:	gte ebx, egx
          [0x41] 65:	movr ebx, cmt
          [0x42] 66:	movi #73, adx
          [0x44] 68:	ifne
line: 220 [0x45] 69:	movl 0
          [0x46] 70:	pushobj
          [0x47] 71:	call @928 // <std#ArrayList<std#string>.expand()>
          [0x48] 72:	nop
          [0x49] 73:	nop
line: 221 [0x4a] 74:	movl 0
          [0x4b] 75:	movn #3
          [0x4c] 76:	movi #0, adx
          [0x4e] 78:	chklen adx
          [0x4f] 79:	iaload_2 ebx, adx
          [0x50] 80:	inc ebx
          [0x51] 81:	rmov adx, ebx
          [0x52] 82:	dec ebx
line: 222 [0x53] 83:	movi #1, ebx
          [0x55] 85:	rstore ebx
          [0x56] 86:	movl 0
          [0x57] 87:	movn #3
          [0x58] 88:	movi #0, adx
          [0x5a] 90:	chklen adx
          [0x5b] 91:	iaload_2 ebx, adx
          [0x5c] 92:	loadval egx
          [0x5d] 93:	sub ebx, egx -> ebx
          [0x5f] 95:	rstore ebx
          [0x60] 96:	loadval ebx
          [0x61] 97:	smovr_2 ebx, fp+3
          [0x62] 98:	loadl ebx, fp+1
          [0x63] 99:	movr egx, ebx
          [0x64] 100:	loadl ebx, fp+3
          [0x65] 101:	gt ebx, egx
          [0x66] 102:	movr ebx, cmt
          [0x67] 103:	movi #131, adx
          [0x69] 105:	ifne
line: 223 [0x6a] 106:	movl 0
          [0x6b] 107:	movn #0
          [0x6c] 108:	movi #1, ebx
          [0x6e] 110:	rstore ebx
          [0x6f] 111:	loadl ebx, fp+3
          [0x70] 112:	loadval egx
          [0x71] 113:	sub ebx, egx -> ebx
          [0x73] 115:	rstore ebx
          [0x74] 116:	loadval ebx
          [0x75] 117:	chklen ebx
          [0x76] 118:	movnd ebx
          [0x77] 119:	pushobj
          [0x78] 120:	movl 0
          [0x79] 121:	movn #0
          [0x7a] 122:	loadl ebx, fp+3
          [0x7b] 123:	chklen ebx
          [0x7c] 124:	movnd ebx
          [0x7d] 125:	popobj
          [0x7e] 126:	loadl ebx, fp+3
          [0x7f] 127:	movi #1, ecx
          [0x81] 129:	subl ecx, @3
          [0x82] 130:	goto @98
line: 224 [0x83] 131:	movl 2
          [0x84] 132:	pushobj
          [0x85] 133:	movl 0
          [0x86] 134:	movn #0
          [0x87] 135:	loadl ebx, fp+1
          [0x88] 136:	chklen ebx
          [0x89] 137:	movnd ebx
          [0x8a] 138:	popobj
          [0x8b] 139:	nop
          [0x8c] 140:	nop
          [0x8d] 141:	ret

func:@934 [std#ArrayList<std#string>.remove] in file: lib/support//0.2.587//ArrayList.sharp:236:23: note:  
		     public def remove(var pos) {
		                      ^


remove:
line: 236 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gt ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	skpe 9 // pc = 19
          [0xb] 11:	movi #0, ebx
          [0xd] 13:	movr egx, ebx
          [0xe] 14:	loadl ebx, fp+1
          [0xf] 15:	lt ebx, egx
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	cmp ebx, 1
          [0x12] 18:	movr ebx, cmt
          [0x13] 19:	movr cmt, ebx
          [0x14] 20:	movi #32, adx
          [0x16] 22:	ifne
line: 237 [0x17] 23:	new_class @13 // std#IndexOutOfBoundsException
          [0x18] 24:	movl 0
          [0x19] 25:	pushobj
          [0x1a] 26:	loadl ebx, fp+1
          [0x1b] 27:	rstore ebx
          [0x1c] 28:	call @937 // <std#ArrayList<std#string>.outOfBoundsMsg(var)>
          [0x1d] 29:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x1e] 30:	throw 
          [0x1f] 31:	nop
          [0x20] 32:	nop
line: 239 [0x21] 33:	movl 0
          [0x22] 34:	movn #3
          [0x23] 35:	movi #0, adx
          [0x25] 37:	iaload_2 ebx, adx
          [0x26] 38:	rstore ebx
          [0x27] 39:	movi #1, ebx
          [0x29] 41:	movr egx, ebx
          [0x2a] 42:	loadval ebx
          [0x2b] 43:	test ebx, egx
          [0x2c] 44:	movr ebx, cmt
          [0x2d] 45:	movi #58, adx
          [0x2f] 47:	ifne
line: 240 [0x30] 48:	movl 0
          [0x31] 49:	movn #3
          [0x32] 50:	movi #0, adx
          [0x34] 52:	chklen adx
          [0x35] 53:	iaload_2 ebx, adx
          [0x36] 54:	dec ebx
          [0x37] 55:	rmov adx, ebx
          [0x38] 56:	inc ebx
          [0x39] 57:	goto @158
          [0x3a] 58:	movl 0
          [0x3b] 59:	movn #3
          [0x3c] 60:	movi #0, adx
          [0x3e] 62:	iaload_2 ebx, adx
          [0x3f] 63:	rstore ebx
          [0x40] 64:	movi #2, ebx
          [0x42] 66:	movr egx, ebx
          [0x43] 67:	loadval ebx
          [0x44] 68:	test ebx, egx
          [0x45] 69:	movr ebx, cmt
          [0x46] 70:	movi #104, adx
          [0x48] 72:	ifne
line: 243 [0x49] 73:	loadl ebx, fp+1
          [0x4a] 74:	rstore ebx
          [0x4b] 75:	movi #0, ebx
          [0x4d] 77:	movr egx, ebx
          [0x4e] 78:	loadval ebx
          [0x4f] 79:	test ebx, egx
          [0x50] 80:	movr ebx, cmt
          [0x51] 81:	movi #99, adx
          [0x53] 83:	ifne
line: 244 [0x54] 84:	movl 0
          [0x55] 85:	movn #0
          [0x56] 86:	movi #1, ebx
          [0x58] 88:	chklen ebx
          [0x59] 89:	movnd ebx
          [0x5a] 90:	pushobj
          [0x5b] 91:	movl 0
          [0x5c] 92:	movn #0
          [0x5d] 93:	movi #0, ebx
          [0x5f] 95:	chklen ebx
          [0x60] 96:	movnd ebx
          [0x61] 97:	popobj
          [0x62] 98:	nop
          [0x63] 99:	nop
line: 246 [0x64] 100:	movl 0
          [0x65] 101:	pushobj
          [0x66] 102:	call @929 // <std#ArrayList<std#string>.shrink()>
          [0x67] 103:	goto @158
line: 248 [0x68] 104:	movi #1, ebx
          [0x6a] 106:	rstore ebx
          [0x6b] 107:	movl 0
          [0x6c] 108:	movn #3
          [0x6d] 109:	movi #0, adx
          [0x6f] 111:	chklen adx
          [0x70] 112:	iaload_2 ebx, adx
          [0x71] 113:	loadval egx
          [0x72] 114:	sub ebx, egx -> ebx
          [0x74] 116:	rstore ebx
          [0x75] 117:	loadval ebx
          [0x76] 118:	smovr_2 ebx, fp+2
line: 249 [0x77] 119:	loadl ebx, fp+1
          [0x78] 120:	smovr_2 ebx, fp+3
          [0x79] 121:	loadl ebx, fp+2
          [0x7a] 122:	movr egx, ebx
          [0x7b] 123:	loadl ebx, fp+3
          [0x7c] 124:	lt ebx, egx
          [0x7d] 125:	movr ebx, cmt
          [0x7e] 126:	movi #154, adx
          [0x80] 128:	ifne
line: 250 [0x81] 129:	movl 0
          [0x82] 130:	movn #0
          [0x83] 131:	movi #1, ebx
          [0x85] 133:	rstore ebx
          [0x86] 134:	loadl ebx, fp+3
          [0x87] 135:	loadval egx
          [0x88] 136:	add ebx, egx -> ebx
          [0x8a] 138:	rstore ebx
          [0x8b] 139:	loadval ebx
          [0x8c] 140:	chklen ebx
          [0x8d] 141:	movnd ebx
          [0x8e] 142:	pushobj
          [0x8f] 143:	movl 0
          [0x90] 144:	movn #0
          [0x91] 145:	loadl ebx, fp+3
          [0x92] 146:	chklen ebx
          [0x93] 147:	movnd ebx
          [0x94] 148:	popobj
          [0x95] 149:	loadl ebx, fp+3
          [0x96] 150:	movi #1, ecx
          [0x98] 152:	addl ecx, @3
          [0x99] 153:	goto @121
line: 252 [0x9a] 154:	movl 0
          [0x9b] 155:	pushobj
          [0x9c] 156:	call @929 // <std#ArrayList<std#string>.shrink()>
          [0x9d] 157:	nop
          [0x9e] 158:	nop
          [0x9f] 159:	ret

func:@935 [std#ArrayList<std#string>.data] in file: lib/support//0.2.587//ArrayList.sharp:260:21: note:  
		     public def data() : T[] {
		                    ^


data:
line: 260 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	returnobj
          [0x3] 3:	ret

func:@936 [std#ArrayList<std#string>.clear] in file: lib/support//0.2.587//ArrayList.sharp:268:22: note:  
		     public def clear() {
		                     ^


clear:
line: 269 [0x0] 0:	movi #10, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #0
          [0x5] 5:	sizeof ebx
          [0x6] 6:	loadval ecx
          [0x7] 7:	gt ebx, ecx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movi #19, adx
          [0xb] 11:	ifne
line: 270 [0xc] 12:	movi #10, ebx
          [0xe] 14:	new_classarray ebx  // std#string[]
          [0xf] 15:	movl 0
          [0x10] 16:	movn #0
          [0x11] 17:	popobj
          [0x12] 18:	nop
          [0x13] 19:	nop
line: 273 [0x14] 20:	movi #0, ebx
          [0x16] 22:	nop
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 0
          [0x19] 25:	movn #3
          [0x1a] 26:	movi #0, adx
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	rmov adx, ecx
          [0x1e] 30:	ret

func:@937 [std#ArrayList<std#string>.outOfBoundsMsg] in file: lib/support//0.2.587//ArrayList.sharp:282:31: note:  
		    private def outOfBoundsMsg(var index) : string {
		                              ^


outOfBoundsMsg:
line: 282 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	newstr @224 // "Index: "
          [0x2] 2:	call @558 // <std#string.string(var[])>
          [0x3] 3:	loadl ebx, fp+1
          [0x4] 4:	rstore ebx
          [0x5] 5:	call @579 // <std#string.$operator+(var)>
          [0x6] 6:	newstr @225 // ", size: "
          [0x7] 7:	call @572 // <std#string.$operator+(var[])>
          [0x8] 8:	movl 0
          [0x9] 9:	movn #3
          [0xa] 10:	movi #0, adx
          [0xc] 12:	iaload_2 ebx, adx
          [0xd] 13:	rstore ebx
          [0xe] 14:	call @579 // <std#string.$operator+(var)>
          [0xf] 15:	movsl #0
          [0x10] 16:	returnobj
          [0x11] 17:	ret

func:@938 [std#ArrayList<app#ParseError>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:45:21: note:  
		    public ArrayList() {
		                    ^


ArrayList:
line: 46 [0x0] 0:	movi #10, ebx
         [0x2] 2:	new_classarray ebx  // app#ParseError[]
         [0x3] 3:	movl 0
         [0x4] 4:	movn #0
         [0x5] 5:	popobj
line: 47 [0x6] 6:	movg @67 // @std#PayloadClass
         [0x7] 7:	movn #3
         [0x8] 8:	pushobj
         [0x9] 9:	movl 0
         [0xa] 10:	movn #4
         [0xb] 11:	popobj
         [0xc] 12:	movl 0
         [0xd] 13:	returnobj
         [0xe] 14:	ret

func:@939 [std#ArrayList<app#ParseError>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:55:21: note:  
		    public ArrayList(var startingCapacity) {
		                    ^


ArrayList:
line: 56 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	new_classarray ebx  // app#ParseError[]
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	popobj
line: 57 [0x5] 5:	movg @67 // @std#PayloadClass
         [0x6] 6:	movn #3
         [0x7] 7:	pushobj
         [0x8] 8:	movl 0
         [0x9] 9:	movn #4
         [0xa] 10:	popobj
         [0xb] 11:	movl 0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@940 [std#ArrayList<app#ParseError>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:65:21: note:  
		    public ArrayList(var startingCapacity, PayloadClass pc) {
		                    ^


ArrayList:
line: 66 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	new_classarray ebx  // app#ParseError[]
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	popobj
line: 67 [0x5] 5:	movl 2
         [0x6] 6:	pushobj
         [0x7] 7:	movl 0
         [0x8] 8:	movn #4
         [0x9] 9:	popobj
         [0xa] 10:	movl 0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@941 [std#ArrayList<app#ParseError>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:75:21: note:  
		    public ArrayList(PayloadClass pc) {
		                    ^


ArrayList:
line: 76 [0x0] 0:	movi #10, ebx
         [0x2] 2:	new_classarray ebx  // app#ParseError[]
         [0x3] 3:	movl 0
         [0x4] 4:	movn #0
         [0x5] 5:	popobj
line: 77 [0x6] 6:	movl 1
         [0x7] 7:	pushobj
         [0x8] 8:	movl 0
         [0x9] 9:	movn #4
         [0xa] 10:	popobj
         [0xb] 11:	movl 0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@942 [std#ArrayList<app#ParseError>.setPayloadClass] in file: lib/support//0.2.587//ArrayList.sharp:86:31: note:  
		    public def setPayloadClass(PayloadClass pc) {
		                              ^


setPayloadClass:
line: 86 [0x0] 0:	movl 1
         [0x1] 1:	pushobj
         [0x2] 2:	movl 0
         [0x3] 3:	movn #4
         [0x4] 4:	popobj
         [0x5] 5:	ret

func:@943 [std#ArrayList<app#ParseError>.size] in file: lib/support//0.2.587//ArrayList.sharp:94:20: note:  
		    public def size() : var {
		                   ^


size:
line: 94 [0x0] 0:	movl 0
         [0x1] 1:	movn #3
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@944 [std#ArrayList<app#ParseError>.empty] in file: lib/support//0.2.587//ArrayList.sharp:102:21: note:  
		    public def empty() : var {
		                    ^


empty:
line: 102 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movi #0, ebx
          [0x8] 8:	movr egx, ebx
          [0x9] 9:	loadval ebx
          [0xa] 10:	test ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	return_val cmt
          [0xd] 13:	ret

func:@945 [std#ArrayList<app#ParseError>.toArray] in file: lib/support//0.2.587//ArrayList.sharp:111:23: note:  
		    public def toArray() : T[] {
		                      ^


toArray:
line: 111 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movi #0, ebx
          [0x8] 8:	movr egx, ebx
          [0x9] 9:	loadval ebx
          [0xa] 10:	test ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	movi #19, adx
          [0xe] 14:	ifne
line: 111 [0xf] 15:	movl 0
          [0x10] 16:	del
          [0x11] 17:	ret
          [0x12] 18:	nop
          [0x13] 19:	nop
line: 112 [0x14] 20:	movl 0
          [0x15] 21:	movn #0
          [0x16] 22:	pushobj
          [0x17] 23:	movl 0
          [0x18] 24:	movn #3
          [0x19] 25:	movi #0, adx
          [0x1b] 27:	iaload_2 ebx, adx
          [0x1c] 28:	rstore ebx
          [0x1d] 29:	call @619 // <std#__SRT_Global.copyOf(object,var)>
          [0x1e] 30:	movsl #0
          [0x1f] 31:	movi #55, cmt
          [0x21] 33:	cast cmt
          [0x22] 34:	movsl #0
          [0x23] 35:	returnobj
          [0x24] 36:	ret

func:@946 [std#ArrayList<app#ParseError>.get] in file: lib/support//0.2.587//ArrayList.sharp:120:19: note:  
		    public def get(var index) : T {
		                  ^


get:
line: 120 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gte ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movi #21, adx
          [0xb] 11:	ifne
line: 121 [0xc] 12:	new_class @13 // std#IndexOutOfBoundsException
          [0xd] 13:	movl 0
          [0xe] 14:	pushobj
          [0xf] 15:	loadl ebx, fp+1
          [0x10] 16:	rstore ebx
          [0x11] 17:	call @958 // <std#ArrayList<app#ParseError>.outOfBoundsMsg(var)>
          [0x12] 18:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x13] 19:	throw 
          [0x14] 20:	nop
          [0x15] 21:	nop
line: 123 [0x16] 22:	movl 0
          [0x17] 23:	movn #0
          [0x18] 24:	loadl ebx, fp+1
          [0x19] 25:	chklen ebx
          [0x1a] 26:	movnd ebx
          [0x1b] 27:	returnobj
          [0x1c] 28:	ret

func:@947 [std#ArrayList<app#ParseError>.last] in file: lib/support//0.2.587//ArrayList.sharp:131:20: note:  
		    public def last() : T {
		                   ^


last:
line: 131 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	movi #1, ebx
          [0x4] 4:	rstore ebx
          [0x5] 5:	movl 0
          [0x6] 6:	movn #3
          [0x7] 7:	movi #0, adx
          [0x9] 9:	chklen adx
          [0xa] 10:	iaload_2 ebx, adx
          [0xb] 11:	loadval egx
          [0xc] 12:	sub ebx, egx -> ebx
          [0xe] 14:	rstore ebx
          [0xf] 15:	call @946 // <std#ArrayList<app#ParseError>.get(var)>
          [0x10] 16:	movsl #0
          [0x11] 17:	returnobj
          [0x12] 18:	ret

func:@948 [std#ArrayList<app#ParseError>.set] in file: lib/support//0.2.587//ArrayList.sharp:140:19: note:  
		    public def set(var index, T element) : T {
		                  ^


set:
line: 140 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gte ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movi #21, adx
          [0xb] 11:	ifne
line: 141 [0xc] 12:	new_class @13 // std#IndexOutOfBoundsException
          [0xd] 13:	movl 0
          [0xe] 14:	pushobj
          [0xf] 15:	loadl ebx, fp+1
          [0x10] 16:	rstore ebx
          [0x11] 17:	call @958 // <std#ArrayList<app#ParseError>.outOfBoundsMsg(var)>
          [0x12] 18:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x13] 19:	throw 
          [0x14] 20:	nop
          [0x15] 21:	nop
line: 143 [0x16] 22:	movl 0
          [0x17] 23:	movn #0
          [0x18] 24:	loadl ebx, fp+1
          [0x19] 25:	chklen ebx
          [0x1a] 26:	movnd ebx
          [0x1b] 27:	pushobj
          [0x1c] 28:	movl 3
          [0x1d] 29:	popobj
line: 144 [0x1e] 30:	movl 2
          [0x1f] 31:	pushobj
          [0x20] 32:	movl 0
          [0x21] 33:	movn #0
          [0x22] 34:	loadl ebx, fp+1
          [0x23] 35:	chklen ebx
          [0x24] 36:	movnd ebx
          [0x25] 37:	popobj
line: 145 [0x26] 38:	movl 3
          [0x27] 39:	returnobj
          [0x28] 40:	ret

func:@949 [std#ArrayList<app#ParseError>.expand] in file: lib/support//0.2.587//ArrayList.sharp:155:23: note:  
		    private def expand() {
		                      ^


expand:
line: 155 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	movn #4
          [0x5] 5:	pushobj
          [0x6] 6:	call @78 // <std#Enum.getValue()>
          [0x7] 7:	movl 0
          [0x8] 8:	movn #0
          [0x9] 9:	sizeof ebx
          [0xa] 10:	loadval ecx
          [0xb] 11:	shr ebx, ecx -> ebx
          [0xd] 13:	rstore ebx
          [0xe] 14:	movl 0
          [0xf] 15:	movn #0
          [0x10] 16:	sizeof ebx
          [0x11] 17:	loadval ecx
          [0x12] 18:	add ebx, ecx -> ebx
          [0x14] 20:	rstore ebx
          [0x15] 21:	movi #20, ebx
          [0x17] 23:	rstore ebx
          [0x18] 24:	loadval ebx
          [0x19] 25:	loadval ecx
          [0x1a] 26:	add ebx, ecx -> ebx
          [0x1c] 28:	rstore ebx
          [0x1d] 29:	call @622 // <std#__SRT_Global.realloc(object,var)>
          [0x1e] 30:	ret

func:@950 [std#ArrayList<app#ParseError>.shrink] in file: lib/support//0.2.587//ArrayList.sharp:162:23: note:  
		    private def shrink() {
		                      ^


shrink:
line: 162 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	sizeof ebx
          [0x3] 3:	movr egx, ebx
          [0x4] 4:	movl 0
          [0x5] 5:	movn #3
          [0x6] 6:	movi #0, adx
          [0x8] 8:	chklen adx
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	lte ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	cmp ebx, 1
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	skne 16 // pc = 30
          [0xf] 15:	istore 1
          [0x10] 16:	movi #0, ebx
          [0x12] 18:	movr egx, ebx
          [0x13] 19:	movl 0
          [0x14] 20:	movn #3
          [0x15] 21:	movi #0, adx
          [0x17] 23:	chklen adx
          [0x18] 24:	iaload_2 ebx, adx
          [0x19] 25:	gt ebx, egx
          [0x1a] 26:	movr ebx, cmt
          [0x1b] 27:	loadval ecx
          [0x1c] 28:	and ecx, ebx
          [0x1d] 29:	movr ebx, cmt
          [0x1e] 30:	movr cmt, ebx
          [0x1f] 31:	movi #79, adx
          [0x21] 33:	ifne
line: 163 [0x22] 34:	movl 0
          [0x23] 35:	movn #3
          [0x24] 36:	movi #0, adx
          [0x26] 38:	chklen adx
          [0x27] 39:	iaload_2 ebx, adx
          [0x28] 40:	dec ebx
          [0x29] 41:	rmov adx, ebx
          [0x2a] 42:	inc ebx
line: 165 [0x2b] 43:	movl 0
          [0x2c] 44:	movn #0
          [0x2d] 45:	sizeof ebx
          [0x2e] 46:	rstore ebx
          [0x2f] 47:	movi #0, ebx
          [0x31] 49:	movr egx, ebx
          [0x32] 50:	loadval ebx
          [0x33] 51:	test ebx, egx
          [0x34] 52:	movr ebx, cmt
          [0x35] 53:	movr ebx, cmt
          [0x36] 54:	skpe 15 // pc = 69
          [0x37] 55:	movl 0
          [0x38] 56:	movn #3
          [0x39] 57:	movi #0, adx
          [0x3b] 59:	iaload_2 ebx, adx
          [0x3c] 60:	rstore ebx
          [0x3d] 61:	movi #0, ebx
          [0x3f] 63:	movr egx, ebx
          [0x40] 64:	loadval ebx
          [0x41] 65:	test ebx, egx
          [0x42] 66:	movr ebx, cmt
          [0x43] 67:	cmp ebx, 1
          [0x44] 68:	movr ebx, cmt
          [0x45] 69:	movr cmt, ebx
          [0x46] 70:	movi #77, adx
          [0x48] 72:	ifne
line: 166 [0x49] 73:	movl 0
          [0x4a] 74:	pushobj
          [0x4b] 75:	call @957 // <std#ArrayList<app#ParseError>.clear()>
          [0x4c] 76:	nop
          [0x4d] 77:	nop
          [0x4e] 78:	nop
          [0x4f] 79:	nop
          [0x50] 80:	ret

func:@951 [std#ArrayList<app#ParseError>.addAll] in file: lib/support//0.2.587//ArrayList.sharp:178:23: note:  
		     public def addAll(ArrayList<T> lst) {
		                      ^


addAll:
line: 178 [0x0] 0:	movl 1
          [0x1] 1:	pushobj
          [0x2] 2:	call @956 // <std#ArrayList<app#ParseError>.data()>
          [0x3] 3:	movl 2
          [0x4] 4:	popobj
line: 179 [0x5] 5:	movl 2
          [0x6] 6:	pushobj
          [0x7] 7:	movl 2
          [0x8] 8:	sizeof ebx
          [0x9] 9:	rstore ebx
          [0xa] 10:	call @619 // <std#__SRT_Global.copyOf(object,var)>
          [0xb] 11:	movsl #0
          [0xc] 12:	movi #55, cmt
          [0xe] 14:	cast cmt
          [0xf] 15:	movl 0
          [0x10] 16:	movn #0
          [0x11] 17:	popobj
line: 180 [0x12] 18:	movl 0
          [0x13] 19:	movn #0
          [0x14] 20:	sizeof ebx
          [0x15] 21:	nop
          [0x16] 22:	rstore ebx
          [0x17] 23:	movl 0
          [0x18] 24:	movn #3
          [0x19] 25:	movi #0, adx
          [0x1b] 27:	loadval ecx
          [0x1c] 28:	rmov adx, ecx
          [0x1d] 29:	ret

func:@952 [std#ArrayList<app#ParseError>.add] in file: lib/support//0.2.587//ArrayList.sharp:190:20: note:  
		     public def add(T e) {
		                   ^


add:
line: 190 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	sizeof ebx
          [0x3] 3:	movr egx, ebx
          [0x4] 4:	movl 0
          [0x5] 5:	movn #3
          [0x6] 6:	movi #0, adx
          [0x8] 8:	chklen adx
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	gte ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	movi #19, adx
          [0xe] 14:	ifne
line: 191 [0xf] 15:	movl 0
          [0x10] 16:	pushobj
          [0x11] 17:	call @949 // <std#ArrayList<app#ParseError>.expand()>
          [0x12] 18:	nop
          [0x13] 19:	nop
line: 192 [0x14] 20:	movl 1
          [0x15] 21:	pushobj
          [0x16] 22:	movl 0
          [0x17] 23:	movn #0
          [0x18] 24:	pushobj
          [0x19] 25:	movl 0
          [0x1a] 26:	movn #3
          [0x1b] 27:	movi #0, adx
          [0x1d] 29:	chklen adx
          [0x1e] 30:	iaload_2 ebx, adx
          [0x1f] 31:	inc ebx
          [0x20] 32:	rmov adx, ebx
          [0x21] 33:	dec ebx
          [0x22] 34:	movsl #0
          [0x23] 35:	chklen ebx
          [0x24] 36:	movnd ebx
          [0x25] 37:	pop
          [0x26] 38:	popobj
          [0x27] 39:	ret

func:@953 [std#ArrayList<app#ParseError>.popBack] in file: lib/support//0.2.587//ArrayList.sharp:203:24: note:  
		     public def popBack() {
		                       ^


popBack:
line: 203 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	call @950 // <std#ArrayList<app#ParseError>.shrink()>
          [0x3] 3:	ret

func:@954 [std#ArrayList<app#ParseError>.insert] in file: lib/support//0.2.587//ArrayList.sharp:213:23: note:  
		     public def insert(var pos, T value) {
		                      ^


insert:
line: 213 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gt ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	skpe 9 // pc = 19
          [0xb] 11:	movi #0, ebx
          [0xd] 13:	movr egx, ebx
          [0xe] 14:	loadl ebx, fp+1
          [0xf] 15:	lt ebx, egx
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	cmp ebx, 1
          [0x12] 18:	movr ebx, cmt
          [0x13] 19:	movr cmt, ebx
          [0x14] 20:	movi #32, adx
          [0x16] 22:	ifne
line: 214 [0x17] 23:	new_class @13 // std#IndexOutOfBoundsException
          [0x18] 24:	movl 0
          [0x19] 25:	pushobj
          [0x1a] 26:	loadl ebx, fp+1
          [0x1b] 27:	rstore ebx
          [0x1c] 28:	call @958 // <std#ArrayList<app#ParseError>.outOfBoundsMsg(var)>
          [0x1d] 29:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x1e] 30:	throw 
          [0x1f] 31:	nop
          [0x20] 32:	nop
line: 216 [0x21] 33:	movl 0
          [0x22] 34:	movn #3
          [0x23] 35:	movi #0, adx
          [0x25] 37:	iaload_2 ebx, adx
          [0x26] 38:	rstore ebx
          [0x27] 39:	movi #0, ebx
          [0x29] 41:	movr egx, ebx
          [0x2a] 42:	loadval ebx
          [0x2b] 43:	test ebx, egx
          [0x2c] 44:	movr ebx, cmt
          [0x2d] 45:	movi #54, adx
          [0x2f] 47:	ifne
line: 217 [0x30] 48:	movl 0
          [0x31] 49:	pushobj
          [0x32] 50:	movl 2
          [0x33] 51:	pushobj
          [0x34] 52:	call @952 // <std#ArrayList<app#ParseError>.add(app#ParseError)>
          [0x35] 53:	goto @140
line: 219 [0x36] 54:	movl 0
          [0x37] 55:	movn #0
          [0x38] 56:	sizeof ebx
          [0x39] 57:	movr egx, ebx
          [0x3a] 58:	movl 0
          [0x3b] 59:	movn #3
          [0x3c] 60:	movi #0, adx
          [0x3e] 62:	chklen adx
          [0x3f] 63:	iaload_2 ebx, adx
          [0x40] 64:	gte ebx, egx
          [0x41] 65:	movr ebx, cmt
          [0x42] 66:	movi #73, adx
          [0x44] 68:	ifne
line: 220 [0x45] 69:	movl 0
          [0x46] 70:	pushobj
          [0x47] 71:	call @949 // <std#ArrayList<app#ParseError>.expand()>
          [0x48] 72:	nop
          [0x49] 73:	nop
line: 221 [0x4a] 74:	movl 0
          [0x4b] 75:	movn #3
          [0x4c] 76:	movi #0, adx
          [0x4e] 78:	chklen adx
          [0x4f] 79:	iaload_2 ebx, adx
          [0x50] 80:	inc ebx
          [0x51] 81:	rmov adx, ebx
          [0x52] 82:	dec ebx
line: 222 [0x53] 83:	movi #1, ebx
          [0x55] 85:	rstore ebx
          [0x56] 86:	movl 0
          [0x57] 87:	movn #3
          [0x58] 88:	movi #0, adx
          [0x5a] 90:	chklen adx
          [0x5b] 91:	iaload_2 ebx, adx
          [0x5c] 92:	loadval egx
          [0x5d] 93:	sub ebx, egx -> ebx
          [0x5f] 95:	rstore ebx
          [0x60] 96:	loadval ebx
          [0x61] 97:	smovr_2 ebx, fp+3
          [0x62] 98:	loadl ebx, fp+1
          [0x63] 99:	movr egx, ebx
          [0x64] 100:	loadl ebx, fp+3
          [0x65] 101:	gt ebx, egx
          [0x66] 102:	movr ebx, cmt
          [0x67] 103:	movi #131, adx
          [0x69] 105:	ifne
line: 223 [0x6a] 106:	movl 0
          [0x6b] 107:	movn #0
          [0x6c] 108:	movi #1, ebx
          [0x6e] 110:	rstore ebx
          [0x6f] 111:	loadl ebx, fp+3
          [0x70] 112:	loadval egx
          [0x71] 113:	sub ebx, egx -> ebx
          [0x73] 115:	rstore ebx
          [0x74] 116:	loadval ebx
          [0x75] 117:	chklen ebx
          [0x76] 118:	movnd ebx
          [0x77] 119:	pushobj
          [0x78] 120:	movl 0
          [0x79] 121:	movn #0
          [0x7a] 122:	loadl ebx, fp+3
          [0x7b] 123:	chklen ebx
          [0x7c] 124:	movnd ebx
          [0x7d] 125:	popobj
          [0x7e] 126:	loadl ebx, fp+3
          [0x7f] 127:	movi #1, ecx
          [0x81] 129:	subl ecx, @3
          [0x82] 130:	goto @98
line: 224 [0x83] 131:	movl 2
          [0x84] 132:	pushobj
          [0x85] 133:	movl 0
          [0x86] 134:	movn #0
          [0x87] 135:	loadl ebx, fp+1
          [0x88] 136:	chklen ebx
          [0x89] 137:	movnd ebx
          [0x8a] 138:	popobj
          [0x8b] 139:	nop
          [0x8c] 140:	nop
          [0x8d] 141:	ret

func:@955 [std#ArrayList<app#ParseError>.remove] in file: lib/support//0.2.587//ArrayList.sharp:236:23: note:  
		     public def remove(var pos) {
		                      ^


remove:
line: 236 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gt ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	skpe 9 // pc = 19
          [0xb] 11:	movi #0, ebx
          [0xd] 13:	movr egx, ebx
          [0xe] 14:	loadl ebx, fp+1
          [0xf] 15:	lt ebx, egx
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	cmp ebx, 1
          [0x12] 18:	movr ebx, cmt
          [0x13] 19:	movr cmt, ebx
          [0x14] 20:	movi #32, adx
          [0x16] 22:	ifne
line: 237 [0x17] 23:	new_class @13 // std#IndexOutOfBoundsException
          [0x18] 24:	movl 0
          [0x19] 25:	pushobj
          [0x1a] 26:	loadl ebx, fp+1
          [0x1b] 27:	rstore ebx
          [0x1c] 28:	call @958 // <std#ArrayList<app#ParseError>.outOfBoundsMsg(var)>
          [0x1d] 29:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x1e] 30:	throw 
          [0x1f] 31:	nop
          [0x20] 32:	nop
line: 239 [0x21] 33:	movl 0
          [0x22] 34:	movn #3
          [0x23] 35:	movi #0, adx
          [0x25] 37:	iaload_2 ebx, adx
          [0x26] 38:	rstore ebx
          [0x27] 39:	movi #1, ebx
          [0x29] 41:	movr egx, ebx
          [0x2a] 42:	loadval ebx
          [0x2b] 43:	test ebx, egx
          [0x2c] 44:	movr ebx, cmt
          [0x2d] 45:	movi #58, adx
          [0x2f] 47:	ifne
line: 240 [0x30] 48:	movl 0
          [0x31] 49:	movn #3
          [0x32] 50:	movi #0, adx
          [0x34] 52:	chklen adx
          [0x35] 53:	iaload_2 ebx, adx
          [0x36] 54:	dec ebx
          [0x37] 55:	rmov adx, ebx
          [0x38] 56:	inc ebx
          [0x39] 57:	goto @158
          [0x3a] 58:	movl 0
          [0x3b] 59:	movn #3
          [0x3c] 60:	movi #0, adx
          [0x3e] 62:	iaload_2 ebx, adx
          [0x3f] 63:	rstore ebx
          [0x40] 64:	movi #2, ebx
          [0x42] 66:	movr egx, ebx
          [0x43] 67:	loadval ebx
          [0x44] 68:	test ebx, egx
          [0x45] 69:	movr ebx, cmt
          [0x46] 70:	movi #104, adx
          [0x48] 72:	ifne
line: 243 [0x49] 73:	loadl ebx, fp+1
          [0x4a] 74:	rstore ebx
          [0x4b] 75:	movi #0, ebx
          [0x4d] 77:	movr egx, ebx
          [0x4e] 78:	loadval ebx
          [0x4f] 79:	test ebx, egx
          [0x50] 80:	movr ebx, cmt
          [0x51] 81:	movi #99, adx
          [0x53] 83:	ifne
line: 244 [0x54] 84:	movl 0
          [0x55] 85:	movn #0
          [0x56] 86:	movi #1, ebx
          [0x58] 88:	chklen ebx
          [0x59] 89:	movnd ebx
          [0x5a] 90:	pushobj
          [0x5b] 91:	movl 0
          [0x5c] 92:	movn #0
          [0x5d] 93:	movi #0, ebx
          [0x5f] 95:	chklen ebx
          [0x60] 96:	movnd ebx
          [0x61] 97:	popobj
          [0x62] 98:	nop
          [0x63] 99:	nop
line: 246 [0x64] 100:	movl 0
          [0x65] 101:	pushobj
          [0x66] 102:	call @950 // <std#ArrayList<app#ParseError>.shrink()>
          [0x67] 103:	goto @158
line: 248 [0x68] 104:	movi #1, ebx
          [0x6a] 106:	rstore ebx
          [0x6b] 107:	movl 0
          [0x6c] 108:	movn #3
          [0x6d] 109:	movi #0, adx
          [0x6f] 111:	chklen adx
          [0x70] 112:	iaload_2 ebx, adx
          [0x71] 113:	loadval egx
          [0x72] 114:	sub ebx, egx -> ebx
          [0x74] 116:	rstore ebx
          [0x75] 117:	loadval ebx
          [0x76] 118:	smovr_2 ebx, fp+2
line: 249 [0x77] 119:	loadl ebx, fp+1
          [0x78] 120:	smovr_2 ebx, fp+3
          [0x79] 121:	loadl ebx, fp+2
          [0x7a] 122:	movr egx, ebx
          [0x7b] 123:	loadl ebx, fp+3
          [0x7c] 124:	lt ebx, egx
          [0x7d] 125:	movr ebx, cmt
          [0x7e] 126:	movi #154, adx
          [0x80] 128:	ifne
line: 250 [0x81] 129:	movl 0
          [0x82] 130:	movn #0
          [0x83] 131:	movi #1, ebx
          [0x85] 133:	rstore ebx
          [0x86] 134:	loadl ebx, fp+3
          [0x87] 135:	loadval egx
          [0x88] 136:	add ebx, egx -> ebx
          [0x8a] 138:	rstore ebx
          [0x8b] 139:	loadval ebx
          [0x8c] 140:	chklen ebx
          [0x8d] 141:	movnd ebx
          [0x8e] 142:	pushobj
          [0x8f] 143:	movl 0
          [0x90] 144:	movn #0
          [0x91] 145:	loadl ebx, fp+3
          [0x92] 146:	chklen ebx
          [0x93] 147:	movnd ebx
          [0x94] 148:	popobj
          [0x95] 149:	loadl ebx, fp+3
          [0x96] 150:	movi #1, ecx
          [0x98] 152:	addl ecx, @3
          [0x99] 153:	goto @121
line: 252 [0x9a] 154:	movl 0
          [0x9b] 155:	pushobj
          [0x9c] 156:	call @950 // <std#ArrayList<app#ParseError>.shrink()>
          [0x9d] 157:	nop
          [0x9e] 158:	nop
          [0x9f] 159:	ret

func:@956 [std#ArrayList<app#ParseError>.data] in file: lib/support//0.2.587//ArrayList.sharp:260:21: note:  
		     public def data() : T[] {
		                    ^


data:
line: 260 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	returnobj
          [0x3] 3:	ret

func:@957 [std#ArrayList<app#ParseError>.clear] in file: lib/support//0.2.587//ArrayList.sharp:268:22: note:  
		     public def clear() {
		                     ^


clear:
line: 269 [0x0] 0:	movi #10, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #0
          [0x5] 5:	sizeof ebx
          [0x6] 6:	loadval ecx
          [0x7] 7:	gt ebx, ecx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movi #19, adx
          [0xb] 11:	ifne
line: 270 [0xc] 12:	movi #10, ebx
          [0xe] 14:	new_classarray ebx  // app#ParseError[]
          [0xf] 15:	movl 0
          [0x10] 16:	movn #0
          [0x11] 17:	popobj
          [0x12] 18:	nop
          [0x13] 19:	nop
line: 273 [0x14] 20:	movi #0, ebx
          [0x16] 22:	nop
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 0
          [0x19] 25:	movn #3
          [0x1a] 26:	movi #0, adx
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	rmov adx, ecx
          [0x1e] 30:	ret

func:@958 [std#ArrayList<app#ParseError>.outOfBoundsMsg] in file: lib/support//0.2.587//ArrayList.sharp:282:31: note:  
		    private def outOfBoundsMsg(var index) : string {
		                              ^


outOfBoundsMsg:
line: 282 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	newstr @224 // "Index: "
          [0x2] 2:	call @558 // <std#string.string(var[])>
          [0x3] 3:	loadl ebx, fp+1
          [0x4] 4:	rstore ebx
          [0x5] 5:	call @579 // <std#string.$operator+(var)>
          [0x6] 6:	newstr @225 // ", size: "
          [0x7] 7:	call @572 // <std#string.$operator+(var[])>
          [0x8] 8:	movl 0
          [0x9] 9:	movn #3
          [0xa] 10:	movi #0, adx
          [0xc] 12:	iaload_2 ebx, adx
          [0xd] 13:	rstore ebx
          [0xe] 14:	call @579 // <std#string.$operator+(var)>
          [0xf] 15:	movsl #0
          [0x10] 16:	returnobj
          [0x11] 17:	ret

func:@959 [std#ArrayList<std.io#Thread>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:45:21: note:  
		    public ArrayList() {
		                    ^


ArrayList:
line: 46 [0x0] 0:	movi #10, ebx
         [0x2] 2:	new_classarray ebx  // std.io#Thread[]
         [0x3] 3:	movl 0
         [0x4] 4:	movn #0
         [0x5] 5:	popobj
line: 47 [0x6] 6:	movg @67 // @std#PayloadClass
         [0x7] 7:	movn #3
         [0x8] 8:	pushobj
         [0x9] 9:	movl 0
         [0xa] 10:	movn #4
         [0xb] 11:	popobj
         [0xc] 12:	movl 0
         [0xd] 13:	returnobj
         [0xe] 14:	ret

func:@960 [std#ArrayList<std.io#Thread>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:55:21: note:  
		    public ArrayList(var startingCapacity) {
		                    ^


ArrayList:
line: 56 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	new_classarray ebx  // std.io#Thread[]
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	popobj
line: 57 [0x5] 5:	movg @67 // @std#PayloadClass
         [0x6] 6:	movn #3
         [0x7] 7:	pushobj
         [0x8] 8:	movl 0
         [0x9] 9:	movn #4
         [0xa] 10:	popobj
         [0xb] 11:	movl 0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@961 [std#ArrayList<std.io#Thread>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:65:21: note:  
		    public ArrayList(var startingCapacity, PayloadClass pc) {
		                    ^


ArrayList:
line: 66 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	new_classarray ebx  // std.io#Thread[]
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	popobj
line: 67 [0x5] 5:	movl 2
         [0x6] 6:	pushobj
         [0x7] 7:	movl 0
         [0x8] 8:	movn #4
         [0x9] 9:	popobj
         [0xa] 10:	movl 0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@962 [std#ArrayList<std.io#Thread>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:75:21: note:  
		    public ArrayList(PayloadClass pc) {
		                    ^


ArrayList:
line: 76 [0x0] 0:	movi #10, ebx
         [0x2] 2:	new_classarray ebx  // std.io#Thread[]
         [0x3] 3:	movl 0
         [0x4] 4:	movn #0
         [0x5] 5:	popobj
line: 77 [0x6] 6:	movl 1
         [0x7] 7:	pushobj
         [0x8] 8:	movl 0
         [0x9] 9:	movn #4
         [0xa] 10:	popobj
         [0xb] 11:	movl 0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@963 [std#ArrayList<std.io#Thread>.setPayloadClass] in file: lib/support//0.2.587//ArrayList.sharp:86:31: note:  
		    public def setPayloadClass(PayloadClass pc) {
		                              ^


setPayloadClass:
line: 86 [0x0] 0:	movl 1
         [0x1] 1:	pushobj
         [0x2] 2:	movl 0
         [0x3] 3:	movn #4
         [0x4] 4:	popobj
         [0x5] 5:	ret

func:@964 [std#ArrayList<std.io#Thread>.size] in file: lib/support//0.2.587//ArrayList.sharp:94:20: note:  
		    public def size() : var {
		                   ^


size:
line: 94 [0x0] 0:	movl 0
         [0x1] 1:	movn #3
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@965 [std#ArrayList<std.io#Thread>.empty] in file: lib/support//0.2.587//ArrayList.sharp:102:21: note:  
		    public def empty() : var {
		                    ^


empty:
line: 102 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movi #0, ebx
          [0x8] 8:	movr egx, ebx
          [0x9] 9:	loadval ebx
          [0xa] 10:	test ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	return_val cmt
          [0xd] 13:	ret

func:@966 [std#ArrayList<std.io#Thread>.toArray] in file: lib/support//0.2.587//ArrayList.sharp:111:23: note:  
		    public def toArray() : T[] {
		                      ^


toArray:
line: 111 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movi #0, ebx
          [0x8] 8:	movr egx, ebx
          [0x9] 9:	loadval ebx
          [0xa] 10:	test ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	movi #19, adx
          [0xe] 14:	ifne
line: 111 [0xf] 15:	movl 0
          [0x10] 16:	del
          [0x11] 17:	ret
          [0x12] 18:	nop
          [0x13] 19:	nop
line: 112 [0x14] 20:	movl 0
          [0x15] 21:	movn #0
          [0x16] 22:	pushobj
          [0x17] 23:	movl 0
          [0x18] 24:	movn #3
          [0x19] 25:	movi #0, adx
          [0x1b] 27:	iaload_2 ebx, adx
          [0x1c] 28:	rstore ebx
          [0x1d] 29:	call @619 // <std#__SRT_Global.copyOf(object,var)>
          [0x1e] 30:	movsl #0
          [0x1f] 31:	movi #22, cmt
          [0x21] 33:	cast cmt
          [0x22] 34:	movsl #0
          [0x23] 35:	returnobj
          [0x24] 36:	ret

func:@967 [std#ArrayList<std.io#Thread>.get] in file: lib/support//0.2.587//ArrayList.sharp:120:19: note:  
		    public def get(var index) : T {
		                  ^


get:
line: 120 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gte ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movi #21, adx
          [0xb] 11:	ifne
line: 121 [0xc] 12:	new_class @13 // std#IndexOutOfBoundsException
          [0xd] 13:	movl 0
          [0xe] 14:	pushobj
          [0xf] 15:	loadl ebx, fp+1
          [0x10] 16:	rstore ebx
          [0x11] 17:	call @979 // <std#ArrayList<std.io#Thread>.outOfBoundsMsg(var)>
          [0x12] 18:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x13] 19:	throw 
          [0x14] 20:	nop
          [0x15] 21:	nop
line: 123 [0x16] 22:	movl 0
          [0x17] 23:	movn #0
          [0x18] 24:	loadl ebx, fp+1
          [0x19] 25:	chklen ebx
          [0x1a] 26:	movnd ebx
          [0x1b] 27:	returnobj
          [0x1c] 28:	ret

func:@968 [std#ArrayList<std.io#Thread>.last] in file: lib/support//0.2.587//ArrayList.sharp:131:20: note:  
		    public def last() : T {
		                   ^


last:
line: 131 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	movi #1, ebx
          [0x4] 4:	rstore ebx
          [0x5] 5:	movl 0
          [0x6] 6:	movn #3
          [0x7] 7:	movi #0, adx
          [0x9] 9:	chklen adx
          [0xa] 10:	iaload_2 ebx, adx
          [0xb] 11:	loadval egx
          [0xc] 12:	sub ebx, egx -> ebx
          [0xe] 14:	rstore ebx
          [0xf] 15:	call @967 // <std#ArrayList<std.io#Thread>.get(var)>
          [0x10] 16:	movsl #0
          [0x11] 17:	returnobj
          [0x12] 18:	ret

func:@969 [std#ArrayList<std.io#Thread>.set] in file: lib/support//0.2.587//ArrayList.sharp:140:19: note:  
		    public def set(var index, T element) : T {
		                  ^


set:
line: 140 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gte ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movi #21, adx
          [0xb] 11:	ifne
line: 141 [0xc] 12:	new_class @13 // std#IndexOutOfBoundsException
          [0xd] 13:	movl 0
          [0xe] 14:	pushobj
          [0xf] 15:	loadl ebx, fp+1
          [0x10] 16:	rstore ebx
          [0x11] 17:	call @979 // <std#ArrayList<std.io#Thread>.outOfBoundsMsg(var)>
          [0x12] 18:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x13] 19:	throw 
          [0x14] 20:	nop
          [0x15] 21:	nop
line: 143 [0x16] 22:	movl 0
          [0x17] 23:	movn #0
          [0x18] 24:	loadl ebx, fp+1
          [0x19] 25:	chklen ebx
          [0x1a] 26:	movnd ebx
          [0x1b] 27:	pushobj
          [0x1c] 28:	movl 3
          [0x1d] 29:	popobj
line: 144 [0x1e] 30:	movl 2
          [0x1f] 31:	pushobj
          [0x20] 32:	movl 0
          [0x21] 33:	movn #0
          [0x22] 34:	loadl ebx, fp+1
          [0x23] 35:	chklen ebx
          [0x24] 36:	movnd ebx
          [0x25] 37:	popobj
line: 145 [0x26] 38:	movl 3
          [0x27] 39:	returnobj
          [0x28] 40:	ret

func:@970 [std#ArrayList<std.io#Thread>.expand] in file: lib/support//0.2.587//ArrayList.sharp:155:23: note:  
		    private def expand() {
		                      ^


expand:
line: 155 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	movn #4
          [0x5] 5:	pushobj
          [0x6] 6:	call @78 // <std#Enum.getValue()>
          [0x7] 7:	movl 0
          [0x8] 8:	movn #0
          [0x9] 9:	sizeof ebx
          [0xa] 10:	loadval ecx
          [0xb] 11:	shr ebx, ecx -> ebx
          [0xd] 13:	rstore ebx
          [0xe] 14:	movl 0
          [0xf] 15:	movn #0
          [0x10] 16:	sizeof ebx
          [0x11] 17:	loadval ecx
          [0x12] 18:	add ebx, ecx -> ebx
          [0x14] 20:	rstore ebx
          [0x15] 21:	movi #20, ebx
          [0x17] 23:	rstore ebx
          [0x18] 24:	loadval ebx
          [0x19] 25:	loadval ecx
          [0x1a] 26:	add ebx, ecx -> ebx
          [0x1c] 28:	rstore ebx
          [0x1d] 29:	call @622 // <std#__SRT_Global.realloc(object,var)>
          [0x1e] 30:	ret

func:@971 [std#ArrayList<std.io#Thread>.shrink] in file: lib/support//0.2.587//ArrayList.sharp:162:23: note:  
		    private def shrink() {
		                      ^


shrink:
line: 162 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	sizeof ebx
          [0x3] 3:	movr egx, ebx
          [0x4] 4:	movl 0
          [0x5] 5:	movn #3
          [0x6] 6:	movi #0, adx
          [0x8] 8:	chklen adx
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	lte ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	cmp ebx, 1
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	skne 16 // pc = 30
          [0xf] 15:	istore 1
          [0x10] 16:	movi #0, ebx
          [0x12] 18:	movr egx, ebx
          [0x13] 19:	movl 0
          [0x14] 20:	movn #3
          [0x15] 21:	movi #0, adx
          [0x17] 23:	chklen adx
          [0x18] 24:	iaload_2 ebx, adx
          [0x19] 25:	gt ebx, egx
          [0x1a] 26:	movr ebx, cmt
          [0x1b] 27:	loadval ecx
          [0x1c] 28:	and ecx, ebx
          [0x1d] 29:	movr ebx, cmt
          [0x1e] 30:	movr cmt, ebx
          [0x1f] 31:	movi #79, adx
          [0x21] 33:	ifne
line: 163 [0x22] 34:	movl 0
          [0x23] 35:	movn #3
          [0x24] 36:	movi #0, adx
          [0x26] 38:	chklen adx
          [0x27] 39:	iaload_2 ebx, adx
          [0x28] 40:	dec ebx
          [0x29] 41:	rmov adx, ebx
          [0x2a] 42:	inc ebx
line: 165 [0x2b] 43:	movl 0
          [0x2c] 44:	movn #0
          [0x2d] 45:	sizeof ebx
          [0x2e] 46:	rstore ebx
          [0x2f] 47:	movi #0, ebx
          [0x31] 49:	movr egx, ebx
          [0x32] 50:	loadval ebx
          [0x33] 51:	test ebx, egx
          [0x34] 52:	movr ebx, cmt
          [0x35] 53:	movr ebx, cmt
          [0x36] 54:	skpe 15 // pc = 69
          [0x37] 55:	movl 0
          [0x38] 56:	movn #3
          [0x39] 57:	movi #0, adx
          [0x3b] 59:	iaload_2 ebx, adx
          [0x3c] 60:	rstore ebx
          [0x3d] 61:	movi #0, ebx
          [0x3f] 63:	movr egx, ebx
          [0x40] 64:	loadval ebx
          [0x41] 65:	test ebx, egx
          [0x42] 66:	movr ebx, cmt
          [0x43] 67:	cmp ebx, 1
          [0x44] 68:	movr ebx, cmt
          [0x45] 69:	movr cmt, ebx
          [0x46] 70:	movi #77, adx
          [0x48] 72:	ifne
line: 166 [0x49] 73:	movl 0
          [0x4a] 74:	pushobj
          [0x4b] 75:	call @978 // <std#ArrayList<std.io#Thread>.clear()>
          [0x4c] 76:	nop
          [0x4d] 77:	nop
          [0x4e] 78:	nop
          [0x4f] 79:	nop
          [0x50] 80:	ret

func:@972 [std#ArrayList<std.io#Thread>.addAll] in file: lib/support//0.2.587//ArrayList.sharp:178:23: note:  
		     public def addAll(ArrayList<T> lst) {
		                      ^


addAll:
line: 178 [0x0] 0:	movl 1
          [0x1] 1:	pushobj
          [0x2] 2:	call @977 // <std#ArrayList<std.io#Thread>.data()>
          [0x3] 3:	movl 2
          [0x4] 4:	popobj
line: 179 [0x5] 5:	movl 2
          [0x6] 6:	pushobj
          [0x7] 7:	movl 2
          [0x8] 8:	sizeof ebx
          [0x9] 9:	rstore ebx
          [0xa] 10:	call @619 // <std#__SRT_Global.copyOf(object,var)>
          [0xb] 11:	movsl #0
          [0xc] 12:	movi #22, cmt
          [0xe] 14:	cast cmt
          [0xf] 15:	movl 0
          [0x10] 16:	movn #0
          [0x11] 17:	popobj
line: 180 [0x12] 18:	movl 0
          [0x13] 19:	movn #0
          [0x14] 20:	sizeof ebx
          [0x15] 21:	nop
          [0x16] 22:	rstore ebx
          [0x17] 23:	movl 0
          [0x18] 24:	movn #3
          [0x19] 25:	movi #0, adx
          [0x1b] 27:	loadval ecx
          [0x1c] 28:	rmov adx, ecx
          [0x1d] 29:	ret

func:@973 [std#ArrayList<std.io#Thread>.add] in file: lib/support//0.2.587//ArrayList.sharp:190:20: note:  
		     public def add(T e) {
		                   ^


add:
line: 190 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	sizeof ebx
          [0x3] 3:	movr egx, ebx
          [0x4] 4:	movl 0
          [0x5] 5:	movn #3
          [0x6] 6:	movi #0, adx
          [0x8] 8:	chklen adx
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	gte ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	movi #19, adx
          [0xe] 14:	ifne
line: 191 [0xf] 15:	movl 0
          [0x10] 16:	pushobj
          [0x11] 17:	call @970 // <std#ArrayList<std.io#Thread>.expand()>
          [0x12] 18:	nop
          [0x13] 19:	nop
line: 192 [0x14] 20:	movl 1
          [0x15] 21:	pushobj
          [0x16] 22:	movl 0
          [0x17] 23:	movn #0
          [0x18] 24:	pushobj
          [0x19] 25:	movl 0
          [0x1a] 26:	movn #3
          [0x1b] 27:	movi #0, adx
          [0x1d] 29:	chklen adx
          [0x1e] 30:	iaload_2 ebx, adx
          [0x1f] 31:	inc ebx
          [0x20] 32:	rmov adx, ebx
          [0x21] 33:	dec ebx
          [0x22] 34:	movsl #0
          [0x23] 35:	chklen ebx
          [0x24] 36:	movnd ebx
          [0x25] 37:	pop
          [0x26] 38:	popobj
          [0x27] 39:	ret

func:@974 [std#ArrayList<std.io#Thread>.popBack] in file: lib/support//0.2.587//ArrayList.sharp:203:24: note:  
		     public def popBack() {
		                       ^


popBack:
line: 203 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	call @971 // <std#ArrayList<std.io#Thread>.shrink()>
          [0x3] 3:	ret

func:@975 [std#ArrayList<std.io#Thread>.insert] in file: lib/support//0.2.587//ArrayList.sharp:213:23: note:  
		     public def insert(var pos, T value) {
		                      ^


insert:
line: 213 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gt ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	skpe 9 // pc = 19
          [0xb] 11:	movi #0, ebx
          [0xd] 13:	movr egx, ebx
          [0xe] 14:	loadl ebx, fp+1
          [0xf] 15:	lt ebx, egx
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	cmp ebx, 1
          [0x12] 18:	movr ebx, cmt
          [0x13] 19:	movr cmt, ebx
          [0x14] 20:	movi #32, adx
          [0x16] 22:	ifne
line: 214 [0x17] 23:	new_class @13 // std#IndexOutOfBoundsException
          [0x18] 24:	movl 0
          [0x19] 25:	pushobj
          [0x1a] 26:	loadl ebx, fp+1
          [0x1b] 27:	rstore ebx
          [0x1c] 28:	call @979 // <std#ArrayList<std.io#Thread>.outOfBoundsMsg(var)>
          [0x1d] 29:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x1e] 30:	throw 
          [0x1f] 31:	nop
          [0x20] 32:	nop
line: 216 [0x21] 33:	movl 0
          [0x22] 34:	movn #3
          [0x23] 35:	movi #0, adx
          [0x25] 37:	iaload_2 ebx, adx
          [0x26] 38:	rstore ebx
          [0x27] 39:	movi #0, ebx
          [0x29] 41:	movr egx, ebx
          [0x2a] 42:	loadval ebx
          [0x2b] 43:	test ebx, egx
          [0x2c] 44:	movr ebx, cmt
          [0x2d] 45:	movi #54, adx
          [0x2f] 47:	ifne
line: 217 [0x30] 48:	movl 0
          [0x31] 49:	pushobj
          [0x32] 50:	movl 2
          [0x33] 51:	pushobj
          [0x34] 52:	call @973 // <std#ArrayList<std.io#Thread>.add(std.io#Thread)>
          [0x35] 53:	goto @140
line: 219 [0x36] 54:	movl 0
          [0x37] 55:	movn #0
          [0x38] 56:	sizeof ebx
          [0x39] 57:	movr egx, ebx
          [0x3a] 58:	movl 0
          [0x3b] 59:	movn #3
          [0x3c] 60:	movi #0, adx
          [0x3e] 62:	chklen adx
          [0x3f] 63:	iaload_2 ebx, adx
          [0x40] 64:	gte ebx, egx
          [0x41] 65:	movr ebx, cmt
          [0x42] 66:	movi #73, adx
          [0x44] 68:	ifne
line: 220 [0x45] 69:	movl 0
          [0x46] 70:	pushobj
          [0x47] 71:	call @970 // <std#ArrayList<std.io#Thread>.expand()>
          [0x48] 72:	nop
          [0x49] 73:	nop
line: 221 [0x4a] 74:	movl 0
          [0x4b] 75:	movn #3
          [0x4c] 76:	movi #0, adx
          [0x4e] 78:	chklen adx
          [0x4f] 79:	iaload_2 ebx, adx
          [0x50] 80:	inc ebx
          [0x51] 81:	rmov adx, ebx
          [0x52] 82:	dec ebx
line: 222 [0x53] 83:	movi #1, ebx
          [0x55] 85:	rstore ebx
          [0x56] 86:	movl 0
          [0x57] 87:	movn #3
          [0x58] 88:	movi #0, adx
          [0x5a] 90:	chklen adx
          [0x5b] 91:	iaload_2 ebx, adx
          [0x5c] 92:	loadval egx
          [0x5d] 93:	sub ebx, egx -> ebx
          [0x5f] 95:	rstore ebx
          [0x60] 96:	loadval ebx
          [0x61] 97:	smovr_2 ebx, fp+3
          [0x62] 98:	loadl ebx, fp+1
          [0x63] 99:	movr egx, ebx
          [0x64] 100:	loadl ebx, fp+3
          [0x65] 101:	gt ebx, egx
          [0x66] 102:	movr ebx, cmt
          [0x67] 103:	movi #131, adx
          [0x69] 105:	ifne
line: 223 [0x6a] 106:	movl 0
          [0x6b] 107:	movn #0
          [0x6c] 108:	movi #1, ebx
          [0x6e] 110:	rstore ebx
          [0x6f] 111:	loadl ebx, fp+3
          [0x70] 112:	loadval egx
          [0x71] 113:	sub ebx, egx -> ebx
          [0x73] 115:	rstore ebx
          [0x74] 116:	loadval ebx
          [0x75] 117:	chklen ebx
          [0x76] 118:	movnd ebx
          [0x77] 119:	pushobj
          [0x78] 120:	movl 0
          [0x79] 121:	movn #0
          [0x7a] 122:	loadl ebx, fp+3
          [0x7b] 123:	chklen ebx
          [0x7c] 124:	movnd ebx
          [0x7d] 125:	popobj
          [0x7e] 126:	loadl ebx, fp+3
          [0x7f] 127:	movi #1, ecx
          [0x81] 129:	subl ecx, @3
          [0x82] 130:	goto @98
line: 224 [0x83] 131:	movl 2
          [0x84] 132:	pushobj
          [0x85] 133:	movl 0
          [0x86] 134:	movn #0
          [0x87] 135:	loadl ebx, fp+1
          [0x88] 136:	chklen ebx
          [0x89] 137:	movnd ebx
          [0x8a] 138:	popobj
          [0x8b] 139:	nop
          [0x8c] 140:	nop
          [0x8d] 141:	ret

func:@976 [std#ArrayList<std.io#Thread>.remove] in file: lib/support//0.2.587//ArrayList.sharp:236:23: note:  
		     public def remove(var pos) {
		                      ^


remove:
line: 236 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gt ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	skpe 9 // pc = 19
          [0xb] 11:	movi #0, ebx
          [0xd] 13:	movr egx, ebx
          [0xe] 14:	loadl ebx, fp+1
          [0xf] 15:	lt ebx, egx
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	cmp ebx, 1
          [0x12] 18:	movr ebx, cmt
          [0x13] 19:	movr cmt, ebx
          [0x14] 20:	movi #32, adx
          [0x16] 22:	ifne
line: 237 [0x17] 23:	new_class @13 // std#IndexOutOfBoundsException
          [0x18] 24:	movl 0
          [0x19] 25:	pushobj
          [0x1a] 26:	loadl ebx, fp+1
          [0x1b] 27:	rstore ebx
          [0x1c] 28:	call @979 // <std#ArrayList<std.io#Thread>.outOfBoundsMsg(var)>
          [0x1d] 29:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x1e] 30:	throw 
          [0x1f] 31:	nop
          [0x20] 32:	nop
line: 239 [0x21] 33:	movl 0
          [0x22] 34:	movn #3
          [0x23] 35:	movi #0, adx
          [0x25] 37:	iaload_2 ebx, adx
          [0x26] 38:	rstore ebx
          [0x27] 39:	movi #1, ebx
          [0x29] 41:	movr egx, ebx
          [0x2a] 42:	loadval ebx
          [0x2b] 43:	test ebx, egx
          [0x2c] 44:	movr ebx, cmt
          [0x2d] 45:	movi #58, adx
          [0x2f] 47:	ifne
line: 240 [0x30] 48:	movl 0
          [0x31] 49:	movn #3
          [0x32] 50:	movi #0, adx
          [0x34] 52:	chklen adx
          [0x35] 53:	iaload_2 ebx, adx
          [0x36] 54:	dec ebx
          [0x37] 55:	rmov adx, ebx
          [0x38] 56:	inc ebx
          [0x39] 57:	goto @158
          [0x3a] 58:	movl 0
          [0x3b] 59:	movn #3
          [0x3c] 60:	movi #0, adx
          [0x3e] 62:	iaload_2 ebx, adx
          [0x3f] 63:	rstore ebx
          [0x40] 64:	movi #2, ebx
          [0x42] 66:	movr egx, ebx
          [0x43] 67:	loadval ebx
          [0x44] 68:	test ebx, egx
          [0x45] 69:	movr ebx, cmt
          [0x46] 70:	movi #104, adx
          [0x48] 72:	ifne
line: 243 [0x49] 73:	loadl ebx, fp+1
          [0x4a] 74:	rstore ebx
          [0x4b] 75:	movi #0, ebx
          [0x4d] 77:	movr egx, ebx
          [0x4e] 78:	loadval ebx
          [0x4f] 79:	test ebx, egx
          [0x50] 80:	movr ebx, cmt
          [0x51] 81:	movi #99, adx
          [0x53] 83:	ifne
line: 244 [0x54] 84:	movl 0
          [0x55] 85:	movn #0
          [0x56] 86:	movi #1, ebx
          [0x58] 88:	chklen ebx
          [0x59] 89:	movnd ebx
          [0x5a] 90:	pushobj
          [0x5b] 91:	movl 0
          [0x5c] 92:	movn #0
          [0x5d] 93:	movi #0, ebx
          [0x5f] 95:	chklen ebx
          [0x60] 96:	movnd ebx
          [0x61] 97:	popobj
          [0x62] 98:	nop
          [0x63] 99:	nop
line: 246 [0x64] 100:	movl 0
          [0x65] 101:	pushobj
          [0x66] 102:	call @971 // <std#ArrayList<std.io#Thread>.shrink()>
          [0x67] 103:	goto @158
line: 248 [0x68] 104:	movi #1, ebx
          [0x6a] 106:	rstore ebx
          [0x6b] 107:	movl 0
          [0x6c] 108:	movn #3
          [0x6d] 109:	movi #0, adx
          [0x6f] 111:	chklen adx
          [0x70] 112:	iaload_2 ebx, adx
          [0x71] 113:	loadval egx
          [0x72] 114:	sub ebx, egx -> ebx
          [0x74] 116:	rstore ebx
          [0x75] 117:	loadval ebx
          [0x76] 118:	smovr_2 ebx, fp+2
line: 249 [0x77] 119:	loadl ebx, fp+1
          [0x78] 120:	smovr_2 ebx, fp+3
          [0x79] 121:	loadl ebx, fp+2
          [0x7a] 122:	movr egx, ebx
          [0x7b] 123:	loadl ebx, fp+3
          [0x7c] 124:	lt ebx, egx
          [0x7d] 125:	movr ebx, cmt
          [0x7e] 126:	movi #154, adx
          [0x80] 128:	ifne
line: 250 [0x81] 129:	movl 0
          [0x82] 130:	movn #0
          [0x83] 131:	movi #1, ebx
          [0x85] 133:	rstore ebx
          [0x86] 134:	loadl ebx, fp+3
          [0x87] 135:	loadval egx
          [0x88] 136:	add ebx, egx -> ebx
          [0x8a] 138:	rstore ebx
          [0x8b] 139:	loadval ebx
          [0x8c] 140:	chklen ebx
          [0x8d] 141:	movnd ebx
          [0x8e] 142:	pushobj
          [0x8f] 143:	movl 0
          [0x90] 144:	movn #0
          [0x91] 145:	loadl ebx, fp+3
          [0x92] 146:	chklen ebx
          [0x93] 147:	movnd ebx
          [0x94] 148:	popobj
          [0x95] 149:	loadl ebx, fp+3
          [0x96] 150:	movi #1, ecx
          [0x98] 152:	addl ecx, @3
          [0x99] 153:	goto @121
line: 252 [0x9a] 154:	movl 0
          [0x9b] 155:	pushobj
          [0x9c] 156:	call @971 // <std#ArrayList<std.io#Thread>.shrink()>
          [0x9d] 157:	nop
          [0x9e] 158:	nop
          [0x9f] 159:	ret

func:@977 [std#ArrayList<std.io#Thread>.data] in file: lib/support//0.2.587//ArrayList.sharp:260:21: note:  
		     public def data() : T[] {
		                    ^


data:
line: 260 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	returnobj
          [0x3] 3:	ret

func:@978 [std#ArrayList<std.io#Thread>.clear] in file: lib/support//0.2.587//ArrayList.sharp:268:22: note:  
		     public def clear() {
		                     ^


clear:
line: 269 [0x0] 0:	movi #10, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #0
          [0x5] 5:	sizeof ebx
          [0x6] 6:	loadval ecx
          [0x7] 7:	gt ebx, ecx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movi #19, adx
          [0xb] 11:	ifne
line: 270 [0xc] 12:	movi #10, ebx
          [0xe] 14:	new_classarray ebx  // std.io#Thread[]
          [0xf] 15:	movl 0
          [0x10] 16:	movn #0
          [0x11] 17:	popobj
          [0x12] 18:	nop
          [0x13] 19:	nop
line: 273 [0x14] 20:	movi #0, ebx
          [0x16] 22:	nop
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 0
          [0x19] 25:	movn #3
          [0x1a] 26:	movi #0, adx
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	rmov adx, ecx
          [0x1e] 30:	ret

func:@979 [std#ArrayList<std.io#Thread>.outOfBoundsMsg] in file: lib/support//0.2.587//ArrayList.sharp:282:31: note:  
		    private def outOfBoundsMsg(var index) : string {
		                              ^


outOfBoundsMsg:
line: 282 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	newstr @224 // "Index: "
          [0x2] 2:	call @558 // <std#string.string(var[])>
          [0x3] 3:	loadl ebx, fp+1
          [0x4] 4:	rstore ebx
          [0x5] 5:	call @579 // <std#string.$operator+(var)>
          [0x6] 6:	newstr @225 // ", size: "
          [0x7] 7:	call @572 // <std#string.$operator+(var[])>
          [0x8] 8:	movl 0
          [0x9] 9:	movn #3
          [0xa] 10:	movi #0, adx
          [0xc] 12:	iaload_2 ebx, adx
          [0xd] 13:	rstore ebx
          [0xe] 14:	call @579 // <std#string.$operator+(var)>
          [0xf] 15:	movsl #0
          [0x10] 16:	returnobj
          [0x11] 17:	ret

func:@980 [std#Map<app#CompilerError,std#string>.Map] in file: lib/support//0.2.587//Map.sharp:11:15: note:  
		    public Map() {
		              ^


Map:
line: 11 [0x0] 0:	new_class @77 // std#ArrayList<app#CompilerError>
         [0x1] 1:	call @989 // <std#ArrayList<app#CompilerError>.ArrayList()>
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	popobj
line: 12 [0x5] 5:	new_class @73 // std#ArrayList<std#string>
         [0x6] 6:	call @917 // <std#ArrayList<std#string>.ArrayList()>
         [0x7] 7:	movl 0
         [0x8] 8:	movn #1
         [0x9] 9:	popobj
         [0xa] 10:	movl 0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@981 [std#Map<app#CompilerError,std#string>.size] in file: lib/support//0.2.587//Map.sharp:20:20: note:  
		    public def size() : var {
		                   ^


size:
line: 20 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	call @994 // <std#ArrayList<app#CompilerError>.size()>
         [0x4] 4:	loadval ebx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@982 [std#Map<app#CompilerError,std#string>.empty] in file: lib/support//0.2.587//Map.sharp:30:21: note:  
		    public def empty() : var {
		                    ^


empty:
line: 30 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	call @995 // <std#ArrayList<app#CompilerError>.empty()>
         [0x4] 4:	loadval ebx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@983 [std#Map<app#CompilerError,std#string>.getKeys] in file: lib/support//0.2.587//Map.sharp:40:24: note:  
		     public def getKeys() : TKey[] {
		                       ^


getKeys:
line: 40 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	call @996 // <std#ArrayList<app#CompilerError>.toArray()>
         [0x4] 4:	movsl #0
         [0x5] 5:	returnobj
         [0x6] 6:	ret

func:@984 [std#Map<app#CompilerError,std#string>.elements] in file: lib/support//0.2.587//Map.sharp:50:25: note:  
		     public def elements() : TValue[] {
		                        ^


elements:
line: 50 [0x0] 0:	movl 0
         [0x1] 1:	movn #1
         [0x2] 2:	pushobj
         [0x3] 3:	call @924 // <std#ArrayList<std#string>.toArray()>
         [0x4] 4:	movsl #0
         [0x5] 5:	returnobj
         [0x6] 6:	ret

func:@985 [std#Map<app#CompilerError,std#string>.get] in file: lib/support//0.2.587//Map.sharp:62:20: note:  
		     public def get(TKey key) : TValue {
		                   ^


get:
line: 62 [0x0] 0:	movl 0
         [0x1] 1:	pushobj
         [0x2] 2:	call @983 // <std#Map<app#CompilerError,std#string>.getKeys()>
         [0x3] 3:	movl 2
         [0x4] 4:	popobj
line: 63 [0x5] 5:	istorel 0, fp+3
line: 64 [0x7] 7:	movi #0, ebx
         [0x9] 9:	rstore ebx
         [0xa] 10:	movl 2
         [0xb] 11:	smov ebx, sp+0
         [0xc] 12:	sizeof egx
         [0xd] 13:	lt ebx, egx
         [0xe] 14:	movi #49, adx
         [0x10] 16:	ifne
         [0x11] 17:	movnd ebx
         [0x12] 18:	pushobj
         [0x13] 19:	movl 4
         [0x14] 20:	popobj
line: 65 [0x15] 21:	movl 4
         [0x16] 22:	pushobj
         [0x17] 23:	movl 1
         [0x18] 24:	pushobj
         [0x19] 25:	call @74 // <std#Enum.$operator==(std#Enum)>
         [0x1a] 26:	loadval cmt
         [0x1b] 27:	movi #40, adx
         [0x1d] 29:	ifne
line: 66 [0x1e] 30:	movl 0
         [0x1f] 31:	movn #1
         [0x20] 32:	pushobj
         [0x21] 33:	loadl ebx, fp+3
         [0x22] 34:	rstore ebx
         [0x23] 35:	call @925 // <std#ArrayList<std#string>.get(var)>
         [0x24] 36:	movsl #0
         [0x25] 37:	returnobj
         [0x26] 38:	ret
         [0x27] 39:	nop
         [0x28] 40:	nop
line: 67 [0x29] 41:	loadl ebx, fp+3
         [0x2a] 42:	movi #1, ecx
         [0x2c] 44:	addl ecx, @3
         [0x2d] 45:	smov ebx, sp+0
         [0x2e] 46:	inc ebx
         [0x2f] 47:	smovr ebx, sp+0
         [0x30] 48:	goto @10
         [0x31] 49:	pop
line: 70 [0x32] 50:	movl 5
         [0x33] 51:	del
line: 71 [0x34] 52:	movl 5
         [0x35] 53:	returnobj
         [0x36] 54:	ret

func:@986 [std#Map<app#CompilerError,std#string>.put] in file: lib/support//0.2.587//Map.sharp:88:20: note:  
		     public def put(TKey key, TValue value) : TValue {
		                   ^


put:
line: 88 [0x0] 0:	istorel 0, fp+3
line: 89 [0x2] 2:	movl 0
         [0x3] 3:	pushobj
         [0x4] 4:	movl 1
         [0x5] 5:	pushobj
         [0x6] 6:	call @988 // <std#Map<app#CompilerError,std#string>.indexof(app#CompilerError)>
         [0x7] 7:	loadval ebx
         [0x8] 8:	smovr_2 ebx, fp+3
         [0x9] 9:	rstore ebx
         [0xa] 10:	movi #1, ebx
         [0xc] 12:	imul ebx, #-1
         [0xd] 13:	movr egx, ebx
         [0xe] 14:	loadval ebx
         [0xf] 15:	tne ebx, egx
         [0x10] 16:	movr ebx, cmt
         [0x11] 17:	movi #41, adx
         [0x13] 19:	ifne
line: 90 [0x14] 20:	movl 0
         [0x15] 21:	movn #1
         [0x16] 22:	pushobj
         [0x17] 23:	loadl ebx, fp+3
         [0x18] 24:	rstore ebx
         [0x19] 25:	call @925 // <std#ArrayList<std#string>.get(var)>
         [0x1a] 26:	movl 4
         [0x1b] 27:	popobj
line: 91 [0x1c] 28:	movl 0
         [0x1d] 29:	movn #1
         [0x1e] 30:	pushobj
         [0x1f] 31:	loadl ebx, fp+3
         [0x20] 32:	rstore ebx
         [0x21] 33:	movl 2
         [0x22] 34:	pushobj
         [0x23] 35:	call @927 // <std#ArrayList<std#string>.set(var,std#string)>
         [0x24] 36:	pop
line: 92 [0x25] 37:	movl 4
         [0x26] 38:	returnobj
         [0x27] 39:	ret
         [0x28] 40:	goto @59
line: 94 [0x29] 41:	movl 0
         [0x2a] 42:	movn #0
         [0x2b] 43:	pushobj
         [0x2c] 44:	movl 1
         [0x2d] 45:	pushobj
         [0x2e] 46:	call @1003 // <std#ArrayList<app#CompilerError>.add(app#CompilerError)>
line: 95 [0x2f] 47:	movl 0
         [0x30] 48:	movn #1
         [0x31] 49:	pushobj
         [0x32] 50:	movl 2
         [0x33] 51:	pushobj
         [0x34] 52:	call @931 // <std#ArrayList<std#string>.add(std#string)>
line: 97 [0x35] 53:	movl 5
         [0x36] 54:	del
line: 98 [0x37] 55:	movl 5
         [0x38] 56:	returnobj
         [0x39] 57:	ret
         [0x3a] 58:	nop
         [0x3b] 59:	nop
         [0x3c] 60:	pushnil 
         [0x3d] 61:	popobj
         [0x3e] 62:	returnobj
         [0x3f] 63:	ret

func:@987 [std#Map<app#CompilerError,std#string>.remove] in file: lib/support//0.2.587//Map.sharp:112:23: note:  
		     public def remove(TKey key) : TValue {
		                      ^


remove:
line: 112 [0x0] 0:	istorel 0, fp+2
line: 113 [0x2] 2:	movl 0
          [0x3] 3:	pushobj
          [0x4] 4:	movl 1
          [0x5] 5:	pushobj
          [0x6] 6:	call @988 // <std#Map<app#CompilerError,std#string>.indexof(app#CompilerError)>
          [0x7] 7:	loadval ebx
          [0x8] 8:	smovr_2 ebx, fp+2
          [0x9] 9:	rstore ebx
          [0xa] 10:	movi #1, ebx
          [0xc] 12:	imul ebx, #-1
          [0xd] 13:	movr egx, ebx
          [0xe] 14:	loadval ebx
          [0xf] 15:	tne ebx, egx
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	movi #44, adx
          [0x13] 19:	ifne
line: 114 [0x14] 20:	movl 0
          [0x15] 21:	movn #1
          [0x16] 22:	pushobj
          [0x17] 23:	loadl ebx, fp+2
          [0x18] 24:	rstore ebx
          [0x19] 25:	call @925 // <std#ArrayList<std#string>.get(var)>
          [0x1a] 26:	movl 3
          [0x1b] 27:	popobj
line: 115 [0x1c] 28:	movl 0
          [0x1d] 29:	movn #1
          [0x1e] 30:	pushobj
          [0x1f] 31:	loadl ebx, fp+2
          [0x20] 32:	rstore ebx
          [0x21] 33:	call @934 // <std#ArrayList<std#string>.remove(var)>
line: 116 [0x22] 34:	movl 0
          [0x23] 35:	movn #0
          [0x24] 36:	pushobj
          [0x25] 37:	loadl ebx, fp+2
          [0x26] 38:	rstore ebx
          [0x27] 39:	call @1006 // <std#ArrayList<app#CompilerError>.remove(var)>
line: 117 [0x28] 40:	movl 3
          [0x29] 41:	returnobj
          [0x2a] 42:	ret
          [0x2b] 43:	nop
          [0x2c] 44:	nop
line: 120 [0x2d] 45:	movl 4
          [0x2e] 46:	del
line: 121 [0x2f] 47:	movl 4
          [0x30] 48:	returnobj
          [0x31] 49:	ret

func:@988 [std#Map<app#CompilerError,std#string>.indexof] in file: lib/support//0.2.587//Map.sharp:130:24: note:  
		     public def indexof(TKey key) : var {
		                       ^


indexof:
line: 130 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	call @983 // <std#Map<app#CompilerError,std#string>.getKeys()>
          [0x3] 3:	movl 2
          [0x4] 4:	popobj
line: 131 [0x5] 5:	istorel 0, fp+3
line: 132 [0x7] 7:	movi #0, ebx
          [0x9] 9:	rstore ebx
          [0xa] 10:	movl 2
          [0xb] 11:	smov ebx, sp+0
          [0xc] 12:	sizeof egx
          [0xd] 13:	lt ebx, egx
          [0xe] 14:	movi #43, adx
          [0x10] 16:	ifne
          [0x11] 17:	movnd ebx
          [0x12] 18:	pushobj
          [0x13] 19:	movl 4
          [0x14] 20:	popobj
line: 133 [0x15] 21:	movl 4
          [0x16] 22:	pushobj
          [0x17] 23:	movl 1
          [0x18] 24:	pushobj
          [0x19] 25:	call @74 // <std#Enum.$operator==(std#Enum)>
          [0x1a] 26:	loadval cmt
          [0x1b] 27:	movi #34, adx
          [0x1d] 29:	ifne
line: 134 [0x1e] 30:	loadl ebx, fp+3
          [0x1f] 31:	return_val ebx
          [0x20] 32:	ret
          [0x21] 33:	nop
          [0x22] 34:	nop
line: 135 [0x23] 35:	loadl ebx, fp+3
          [0x24] 36:	movi #1, ecx
          [0x26] 38:	addl ecx, @3
          [0x27] 39:	smov ebx, sp+0
          [0x28] 40:	inc ebx
          [0x29] 41:	smovr ebx, sp+0
          [0x2a] 42:	goto @10
          [0x2b] 43:	pop
line: 138 [0x2c] 44:	movi #1, ebx
          [0x2e] 46:	imul ebx, #-1
          [0x2f] 47:	return_val ebx
          [0x30] 48:	ret

func:@989 [std#ArrayList<app#CompilerError>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:45:21: note:  
		    public ArrayList() {
		                    ^


ArrayList:
line: 46 [0x0] 0:	movi #10, ebx
         [0x2] 2:	new_classarray ebx  // app#CompilerError[]
         [0x3] 3:	movl 0
         [0x4] 4:	movn #0
         [0x5] 5:	popobj
line: 47 [0x6] 6:	movg @67 // @std#PayloadClass
         [0x7] 7:	movn #3
         [0x8] 8:	pushobj
         [0x9] 9:	movl 0
         [0xa] 10:	movn #4
         [0xb] 11:	popobj
         [0xc] 12:	movl 0
         [0xd] 13:	returnobj
         [0xe] 14:	ret

func:@990 [std#ArrayList<app#CompilerError>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:55:21: note:  
		    public ArrayList(var startingCapacity) {
		                    ^


ArrayList:
line: 56 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	new_classarray ebx  // app#CompilerError[]
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	popobj
line: 57 [0x5] 5:	movg @67 // @std#PayloadClass
         [0x6] 6:	movn #3
         [0x7] 7:	pushobj
         [0x8] 8:	movl 0
         [0x9] 9:	movn #4
         [0xa] 10:	popobj
         [0xb] 11:	movl 0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@991 [std#ArrayList<app#CompilerError>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:65:21: note:  
		    public ArrayList(var startingCapacity, PayloadClass pc) {
		                    ^


ArrayList:
line: 66 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	new_classarray ebx  // app#CompilerError[]
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	popobj
line: 67 [0x5] 5:	movl 2
         [0x6] 6:	pushobj
         [0x7] 7:	movl 0
         [0x8] 8:	movn #4
         [0x9] 9:	popobj
         [0xa] 10:	movl 0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@992 [std#ArrayList<app#CompilerError>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:75:21: note:  
		    public ArrayList(PayloadClass pc) {
		                    ^


ArrayList:
line: 76 [0x0] 0:	movi #10, ebx
         [0x2] 2:	new_classarray ebx  // app#CompilerError[]
         [0x3] 3:	movl 0
         [0x4] 4:	movn #0
         [0x5] 5:	popobj
line: 77 [0x6] 6:	movl 1
         [0x7] 7:	pushobj
         [0x8] 8:	movl 0
         [0x9] 9:	movn #4
         [0xa] 10:	popobj
         [0xb] 11:	movl 0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@993 [std#ArrayList<app#CompilerError>.setPayloadClass] in file: lib/support//0.2.587//ArrayList.sharp:86:31: note:  
		    public def setPayloadClass(PayloadClass pc) {
		                              ^


setPayloadClass:
line: 86 [0x0] 0:	movl 1
         [0x1] 1:	pushobj
         [0x2] 2:	movl 0
         [0x3] 3:	movn #4
         [0x4] 4:	popobj
         [0x5] 5:	ret

func:@994 [std#ArrayList<app#CompilerError>.size] in file: lib/support//0.2.587//ArrayList.sharp:94:20: note:  
		    public def size() : var {
		                   ^


size:
line: 94 [0x0] 0:	movl 0
         [0x1] 1:	movn #3
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@995 [std#ArrayList<app#CompilerError>.empty] in file: lib/support//0.2.587//ArrayList.sharp:102:21: note:  
		    public def empty() : var {
		                    ^


empty:
line: 102 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movi #0, ebx
          [0x8] 8:	movr egx, ebx
          [0x9] 9:	loadval ebx
          [0xa] 10:	test ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	return_val cmt
          [0xd] 13:	ret

func:@996 [std#ArrayList<app#CompilerError>.toArray] in file: lib/support//0.2.587//ArrayList.sharp:111:23: note:  
		    public def toArray() : T[] {
		                      ^


toArray:
line: 111 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movi #0, ebx
          [0x8] 8:	movr egx, ebx
          [0x9] 9:	loadval ebx
          [0xa] 10:	test ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	movi #19, adx
          [0xe] 14:	ifne
line: 111 [0xf] 15:	movl 0
          [0x10] 16:	del
          [0x11] 17:	ret
          [0x12] 18:	nop
          [0x13] 19:	nop
line: 112 [0x14] 20:	movl 0
          [0x15] 21:	movn #0
          [0x16] 22:	pushobj
          [0x17] 23:	movl 0
          [0x18] 24:	movn #3
          [0x19] 25:	movi #0, adx
          [0x1b] 27:	iaload_2 ebx, adx
          [0x1c] 28:	rstore ebx
          [0x1d] 29:	call @619 // <std#__SRT_Global.copyOf(object,var)>
          [0x1e] 30:	movsl #0
          [0x1f] 31:	movi #68, cmt
          [0x21] 33:	cast cmt
          [0x22] 34:	movsl #0
          [0x23] 35:	returnobj
          [0x24] 36:	ret

func:@997 [std#ArrayList<app#CompilerError>.get] in file: lib/support//0.2.587//ArrayList.sharp:120:19: note:  
		    public def get(var index) : T {
		                  ^


get:
line: 120 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gte ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movi #21, adx
          [0xb] 11:	ifne
line: 121 [0xc] 12:	new_class @13 // std#IndexOutOfBoundsException
          [0xd] 13:	movl 0
          [0xe] 14:	pushobj
          [0xf] 15:	loadl ebx, fp+1
          [0x10] 16:	rstore ebx
          [0x11] 17:	call @1009 // <std#ArrayList<app#CompilerError>.outOfBoundsMsg(var)>
          [0x12] 18:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x13] 19:	throw 
          [0x14] 20:	nop
          [0x15] 21:	nop
line: 123 [0x16] 22:	movl 0
          [0x17] 23:	movn #0
          [0x18] 24:	loadl ebx, fp+1
          [0x19] 25:	chklen ebx
          [0x1a] 26:	movnd ebx
          [0x1b] 27:	returnobj
          [0x1c] 28:	ret

func:@998 [std#ArrayList<app#CompilerError>.last] in file: lib/support//0.2.587//ArrayList.sharp:131:20: note:  
		    public def last() : T {
		                   ^


last:
line: 131 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	movi #1, ebx
          [0x4] 4:	rstore ebx
          [0x5] 5:	movl 0
          [0x6] 6:	movn #3
          [0x7] 7:	movi #0, adx
          [0x9] 9:	chklen adx
          [0xa] 10:	iaload_2 ebx, adx
          [0xb] 11:	loadval egx
          [0xc] 12:	sub ebx, egx -> ebx
          [0xe] 14:	rstore ebx
          [0xf] 15:	call @997 // <std#ArrayList<app#CompilerError>.get(var)>
          [0x10] 16:	movsl #0
          [0x11] 17:	returnobj
          [0x12] 18:	ret

func:@999 [std#ArrayList<app#CompilerError>.set] in file: lib/support//0.2.587//ArrayList.sharp:140:19: note:  
		    public def set(var index, T element) : T {
		                  ^


set:
line: 140 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gte ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movi #21, adx
          [0xb] 11:	ifne
line: 141 [0xc] 12:	new_class @13 // std#IndexOutOfBoundsException
          [0xd] 13:	movl 0
          [0xe] 14:	pushobj
          [0xf] 15:	loadl ebx, fp+1
          [0x10] 16:	rstore ebx
          [0x11] 17:	call @1009 // <std#ArrayList<app#CompilerError>.outOfBoundsMsg(var)>
          [0x12] 18:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x13] 19:	throw 
          [0x14] 20:	nop
          [0x15] 21:	nop
line: 143 [0x16] 22:	movl 0
          [0x17] 23:	movn #0
          [0x18] 24:	loadl ebx, fp+1
          [0x19] 25:	chklen ebx
          [0x1a] 26:	movnd ebx
          [0x1b] 27:	pushobj
          [0x1c] 28:	movl 3
          [0x1d] 29:	popobj
line: 144 [0x1e] 30:	movl 2
          [0x1f] 31:	pushobj
          [0x20] 32:	movl 0
          [0x21] 33:	movn #0
          [0x22] 34:	loadl ebx, fp+1
          [0x23] 35:	chklen ebx
          [0x24] 36:	movnd ebx
          [0x25] 37:	popobj
line: 145 [0x26] 38:	movl 3
          [0x27] 39:	returnobj
          [0x28] 40:	ret

func:@1000 [std#ArrayList<app#CompilerError>.expand] in file: lib/support//0.2.587//ArrayList.sharp:155:23: note:  
		    private def expand() {
		                      ^


expand:
line: 155 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	movn #4
          [0x5] 5:	pushobj
          [0x6] 6:	call @78 // <std#Enum.getValue()>
          [0x7] 7:	movl 0
          [0x8] 8:	movn #0
          [0x9] 9:	sizeof ebx
          [0xa] 10:	loadval ecx
          [0xb] 11:	shr ebx, ecx -> ebx
          [0xd] 13:	rstore ebx
          [0xe] 14:	movl 0
          [0xf] 15:	movn #0
          [0x10] 16:	sizeof ebx
          [0x11] 17:	loadval ecx
          [0x12] 18:	add ebx, ecx -> ebx
          [0x14] 20:	rstore ebx
          [0x15] 21:	movi #20, ebx
          [0x17] 23:	rstore ebx
          [0x18] 24:	loadval ebx
          [0x19] 25:	loadval ecx
          [0x1a] 26:	add ebx, ecx -> ebx
          [0x1c] 28:	rstore ebx
          [0x1d] 29:	call @622 // <std#__SRT_Global.realloc(object,var)>
          [0x1e] 30:	ret

func:@1001 [std#ArrayList<app#CompilerError>.shrink] in file: lib/support//0.2.587//ArrayList.sharp:162:23: note:  
		    private def shrink() {
		                      ^


shrink:
line: 162 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	sizeof ebx
          [0x3] 3:	movr egx, ebx
          [0x4] 4:	movl 0
          [0x5] 5:	movn #3
          [0x6] 6:	movi #0, adx
          [0x8] 8:	chklen adx
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	lte ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	cmp ebx, 1
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	skne 16 // pc = 30
          [0xf] 15:	istore 1
          [0x10] 16:	movi #0, ebx
          [0x12] 18:	movr egx, ebx
          [0x13] 19:	movl 0
          [0x14] 20:	movn #3
          [0x15] 21:	movi #0, adx
          [0x17] 23:	chklen adx
          [0x18] 24:	iaload_2 ebx, adx
          [0x19] 25:	gt ebx, egx
          [0x1a] 26:	movr ebx, cmt
          [0x1b] 27:	loadval ecx
          [0x1c] 28:	and ecx, ebx
          [0x1d] 29:	movr ebx, cmt
          [0x1e] 30:	movr cmt, ebx
          [0x1f] 31:	movi #79, adx
          [0x21] 33:	ifne
line: 163 [0x22] 34:	movl 0
          [0x23] 35:	movn #3
          [0x24] 36:	movi #0, adx
          [0x26] 38:	chklen adx
          [0x27] 39:	iaload_2 ebx, adx
          [0x28] 40:	dec ebx
          [0x29] 41:	rmov adx, ebx
          [0x2a] 42:	inc ebx
line: 165 [0x2b] 43:	movl 0
          [0x2c] 44:	movn #0
          [0x2d] 45:	sizeof ebx
          [0x2e] 46:	rstore ebx
          [0x2f] 47:	movi #0, ebx
          [0x31] 49:	movr egx, ebx
          [0x32] 50:	loadval ebx
          [0x33] 51:	test ebx, egx
          [0x34] 52:	movr ebx, cmt
          [0x35] 53:	movr ebx, cmt
          [0x36] 54:	skpe 15 // pc = 69
          [0x37] 55:	movl 0
          [0x38] 56:	movn #3
          [0x39] 57:	movi #0, adx
          [0x3b] 59:	iaload_2 ebx, adx
          [0x3c] 60:	rstore ebx
          [0x3d] 61:	movi #0, ebx
          [0x3f] 63:	movr egx, ebx
          [0x40] 64:	loadval ebx
          [0x41] 65:	test ebx, egx
          [0x42] 66:	movr ebx, cmt
          [0x43] 67:	cmp ebx, 1
          [0x44] 68:	movr ebx, cmt
          [0x45] 69:	movr cmt, ebx
          [0x46] 70:	movi #77, adx
          [0x48] 72:	ifne
line: 166 [0x49] 73:	movl 0
          [0x4a] 74:	pushobj
          [0x4b] 75:	call @1008 // <std#ArrayList<app#CompilerError>.clear()>
          [0x4c] 76:	nop
          [0x4d] 77:	nop
          [0x4e] 78:	nop
          [0x4f] 79:	nop
          [0x50] 80:	ret

func:@1002 [std#ArrayList<app#CompilerError>.addAll] in file: lib/support//0.2.587//ArrayList.sharp:178:23: note:  
		     public def addAll(ArrayList<T> lst) {
		                      ^


addAll:
line: 178 [0x0] 0:	movl 1
          [0x1] 1:	pushobj
          [0x2] 2:	call @1007 // <std#ArrayList<app#CompilerError>.data()>
          [0x3] 3:	movl 2
          [0x4] 4:	popobj
line: 179 [0x5] 5:	movl 2
          [0x6] 6:	pushobj
          [0x7] 7:	movl 2
          [0x8] 8:	sizeof ebx
          [0x9] 9:	rstore ebx
          [0xa] 10:	call @619 // <std#__SRT_Global.copyOf(object,var)>
          [0xb] 11:	movsl #0
          [0xc] 12:	movi #68, cmt
          [0xe] 14:	cast cmt
          [0xf] 15:	movl 0
          [0x10] 16:	movn #0
          [0x11] 17:	popobj
line: 180 [0x12] 18:	movl 0
          [0x13] 19:	movn #0
          [0x14] 20:	sizeof ebx
          [0x15] 21:	nop
          [0x16] 22:	rstore ebx
          [0x17] 23:	movl 0
          [0x18] 24:	movn #3
          [0x19] 25:	movi #0, adx
          [0x1b] 27:	loadval ecx
          [0x1c] 28:	rmov adx, ecx
          [0x1d] 29:	ret

func:@1003 [std#ArrayList<app#CompilerError>.add] in file: lib/support//0.2.587//ArrayList.sharp:190:20: note:  
		     public def add(T e) {
		                   ^


add:
line: 190 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	sizeof ebx
          [0x3] 3:	movr egx, ebx
          [0x4] 4:	movl 0
          [0x5] 5:	movn #3
          [0x6] 6:	movi #0, adx
          [0x8] 8:	chklen adx
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	gte ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	movi #19, adx
          [0xe] 14:	ifne
line: 191 [0xf] 15:	movl 0
          [0x10] 16:	pushobj
          [0x11] 17:	call @1000 // <std#ArrayList<app#CompilerError>.expand()>
          [0x12] 18:	nop
          [0x13] 19:	nop
line: 192 [0x14] 20:	movl 1
          [0x15] 21:	pushobj
          [0x16] 22:	movl 0
          [0x17] 23:	movn #0
          [0x18] 24:	pushobj
          [0x19] 25:	movl 0
          [0x1a] 26:	movn #3
          [0x1b] 27:	movi #0, adx
          [0x1d] 29:	chklen adx
          [0x1e] 30:	iaload_2 ebx, adx
          [0x1f] 31:	inc ebx
          [0x20] 32:	rmov adx, ebx
          [0x21] 33:	dec ebx
          [0x22] 34:	movsl #0
          [0x23] 35:	chklen ebx
          [0x24] 36:	movnd ebx
          [0x25] 37:	pop
          [0x26] 38:	popobj
          [0x27] 39:	ret

func:@1004 [std#ArrayList<app#CompilerError>.popBack] in file: lib/support//0.2.587//ArrayList.sharp:203:24: note:  
		     public def popBack() {
		                       ^


popBack:
line: 203 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	call @1001 // <std#ArrayList<app#CompilerError>.shrink()>
          [0x3] 3:	ret

func:@1005 [std#ArrayList<app#CompilerError>.insert] in file: lib/support//0.2.587//ArrayList.sharp:213:23: note:  
		     public def insert(var pos, T value) {
		                      ^


insert:
line: 213 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gt ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	skpe 9 // pc = 19
          [0xb] 11:	movi #0, ebx
          [0xd] 13:	movr egx, ebx
          [0xe] 14:	loadl ebx, fp+1
          [0xf] 15:	lt ebx, egx
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	cmp ebx, 1
          [0x12] 18:	movr ebx, cmt
          [0x13] 19:	movr cmt, ebx
          [0x14] 20:	movi #32, adx
          [0x16] 22:	ifne
line: 214 [0x17] 23:	new_class @13 // std#IndexOutOfBoundsException
          [0x18] 24:	movl 0
          [0x19] 25:	pushobj
          [0x1a] 26:	loadl ebx, fp+1
          [0x1b] 27:	rstore ebx
          [0x1c] 28:	call @1009 // <std#ArrayList<app#CompilerError>.outOfBoundsMsg(var)>
          [0x1d] 29:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x1e] 30:	throw 
          [0x1f] 31:	nop
          [0x20] 32:	nop
line: 216 [0x21] 33:	movl 0
          [0x22] 34:	movn #3
          [0x23] 35:	movi #0, adx
          [0x25] 37:	iaload_2 ebx, adx
          [0x26] 38:	rstore ebx
          [0x27] 39:	movi #0, ebx
          [0x29] 41:	movr egx, ebx
          [0x2a] 42:	loadval ebx
          [0x2b] 43:	test ebx, egx
          [0x2c] 44:	movr ebx, cmt
          [0x2d] 45:	movi #54, adx
          [0x2f] 47:	ifne
line: 217 [0x30] 48:	movl 0
          [0x31] 49:	pushobj
          [0x32] 50:	movl 2
          [0x33] 51:	pushobj
          [0x34] 52:	call @1003 // <std#ArrayList<app#CompilerError>.add(app#CompilerError)>
          [0x35] 53:	goto @140
line: 219 [0x36] 54:	movl 0
          [0x37] 55:	movn #0
          [0x38] 56:	sizeof ebx
          [0x39] 57:	movr egx, ebx
          [0x3a] 58:	movl 0
          [0x3b] 59:	movn #3
          [0x3c] 60:	movi #0, adx
          [0x3e] 62:	chklen adx
          [0x3f] 63:	iaload_2 ebx, adx
          [0x40] 64:	gte ebx, egx
          [0x41] 65:	movr ebx, cmt
          [0x42] 66:	movi #73, adx
          [0x44] 68:	ifne
line: 220 [0x45] 69:	movl 0
          [0x46] 70:	pushobj
          [0x47] 71:	call @1000 // <std#ArrayList<app#CompilerError>.expand()>
          [0x48] 72:	nop
          [0x49] 73:	nop
line: 221 [0x4a] 74:	movl 0
          [0x4b] 75:	movn #3
          [0x4c] 76:	movi #0, adx
          [0x4e] 78:	chklen adx
          [0x4f] 79:	iaload_2 ebx, adx
          [0x50] 80:	inc ebx
          [0x51] 81:	rmov adx, ebx
          [0x52] 82:	dec ebx
line: 222 [0x53] 83:	movi #1, ebx
          [0x55] 85:	rstore ebx
          [0x56] 86:	movl 0
          [0x57] 87:	movn #3
          [0x58] 88:	movi #0, adx
          [0x5a] 90:	chklen adx
          [0x5b] 91:	iaload_2 ebx, adx
          [0x5c] 92:	loadval egx
          [0x5d] 93:	sub ebx, egx -> ebx
          [0x5f] 95:	rstore ebx
          [0x60] 96:	loadval ebx
          [0x61] 97:	smovr_2 ebx, fp+3
          [0x62] 98:	loadl ebx, fp+1
          [0x63] 99:	movr egx, ebx
          [0x64] 100:	loadl ebx, fp+3
          [0x65] 101:	gt ebx, egx
          [0x66] 102:	movr ebx, cmt
          [0x67] 103:	movi #131, adx
          [0x69] 105:	ifne
line: 223 [0x6a] 106:	movl 0
          [0x6b] 107:	movn #0
          [0x6c] 108:	movi #1, ebx
          [0x6e] 110:	rstore ebx
          [0x6f] 111:	loadl ebx, fp+3
          [0x70] 112:	loadval egx
          [0x71] 113:	sub ebx, egx -> ebx
          [0x73] 115:	rstore ebx
          [0x74] 116:	loadval ebx
          [0x75] 117:	chklen ebx
          [0x76] 118:	movnd ebx
          [0x77] 119:	pushobj
          [0x78] 120:	movl 0
          [0x79] 121:	movn #0
          [0x7a] 122:	loadl ebx, fp+3
          [0x7b] 123:	chklen ebx
          [0x7c] 124:	movnd ebx
          [0x7d] 125:	popobj
          [0x7e] 126:	loadl ebx, fp+3
          [0x7f] 127:	movi #1, ecx
          [0x81] 129:	subl ecx, @3
          [0x82] 130:	goto @98
line: 224 [0x83] 131:	movl 2
          [0x84] 132:	pushobj
          [0x85] 133:	movl 0
          [0x86] 134:	movn #0
          [0x87] 135:	loadl ebx, fp+1
          [0x88] 136:	chklen ebx
          [0x89] 137:	movnd ebx
          [0x8a] 138:	popobj
          [0x8b] 139:	nop
          [0x8c] 140:	nop
          [0x8d] 141:	ret

func:@1006 [std#ArrayList<app#CompilerError>.remove] in file: lib/support//0.2.587//ArrayList.sharp:236:23: note:  
		     public def remove(var pos) {
		                      ^


remove:
line: 236 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gt ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	skpe 9 // pc = 19
          [0xb] 11:	movi #0, ebx
          [0xd] 13:	movr egx, ebx
          [0xe] 14:	loadl ebx, fp+1
          [0xf] 15:	lt ebx, egx
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	cmp ebx, 1
          [0x12] 18:	movr ebx, cmt
          [0x13] 19:	movr cmt, ebx
          [0x14] 20:	movi #32, adx
          [0x16] 22:	ifne
line: 237 [0x17] 23:	new_class @13 // std#IndexOutOfBoundsException
          [0x18] 24:	movl 0
          [0x19] 25:	pushobj
          [0x1a] 26:	loadl ebx, fp+1
          [0x1b] 27:	rstore ebx
          [0x1c] 28:	call @1009 // <std#ArrayList<app#CompilerError>.outOfBoundsMsg(var)>
          [0x1d] 29:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x1e] 30:	throw 
          [0x1f] 31:	nop
          [0x20] 32:	nop
line: 239 [0x21] 33:	movl 0
          [0x22] 34:	movn #3
          [0x23] 35:	movi #0, adx
          [0x25] 37:	iaload_2 ebx, adx
          [0x26] 38:	rstore ebx
          [0x27] 39:	movi #1, ebx
          [0x29] 41:	movr egx, ebx
          [0x2a] 42:	loadval ebx
          [0x2b] 43:	test ebx, egx
          [0x2c] 44:	movr ebx, cmt
          [0x2d] 45:	movi #58, adx
          [0x2f] 47:	ifne
line: 240 [0x30] 48:	movl 0
          [0x31] 49:	movn #3
          [0x32] 50:	movi #0, adx
          [0x34] 52:	chklen adx
          [0x35] 53:	iaload_2 ebx, adx
          [0x36] 54:	dec ebx
          [0x37] 55:	rmov adx, ebx
          [0x38] 56:	inc ebx
          [0x39] 57:	goto @158
          [0x3a] 58:	movl 0
          [0x3b] 59:	movn #3
          [0x3c] 60:	movi #0, adx
          [0x3e] 62:	iaload_2 ebx, adx
          [0x3f] 63:	rstore ebx
          [0x40] 64:	movi #2, ebx
          [0x42] 66:	movr egx, ebx
          [0x43] 67:	loadval ebx
          [0x44] 68:	test ebx, egx
          [0x45] 69:	movr ebx, cmt
          [0x46] 70:	movi #104, adx
          [0x48] 72:	ifne
line: 243 [0x49] 73:	loadl ebx, fp+1
          [0x4a] 74:	rstore ebx
          [0x4b] 75:	movi #0, ebx
          [0x4d] 77:	movr egx, ebx
          [0x4e] 78:	loadval ebx
          [0x4f] 79:	test ebx, egx
          [0x50] 80:	movr ebx, cmt
          [0x51] 81:	movi #99, adx
          [0x53] 83:	ifne
line: 244 [0x54] 84:	movl 0
          [0x55] 85:	movn #0
          [0x56] 86:	movi #1, ebx
          [0x58] 88:	chklen ebx
          [0x59] 89:	movnd ebx
          [0x5a] 90:	pushobj
          [0x5b] 91:	movl 0
          [0x5c] 92:	movn #0
          [0x5d] 93:	movi #0, ebx
          [0x5f] 95:	chklen ebx
          [0x60] 96:	movnd ebx
          [0x61] 97:	popobj
          [0x62] 98:	nop
          [0x63] 99:	nop
line: 246 [0x64] 100:	movl 0
          [0x65] 101:	pushobj
          [0x66] 102:	call @1001 // <std#ArrayList<app#CompilerError>.shrink()>
          [0x67] 103:	goto @158
line: 248 [0x68] 104:	movi #1, ebx
          [0x6a] 106:	rstore ebx
          [0x6b] 107:	movl 0
          [0x6c] 108:	movn #3
          [0x6d] 109:	movi #0, adx
          [0x6f] 111:	chklen adx
          [0x70] 112:	iaload_2 ebx, adx
          [0x71] 113:	loadval egx
          [0x72] 114:	sub ebx, egx -> ebx
          [0x74] 116:	rstore ebx
          [0x75] 117:	loadval ebx
          [0x76] 118:	smovr_2 ebx, fp+2
line: 249 [0x77] 119:	loadl ebx, fp+1
          [0x78] 120:	smovr_2 ebx, fp+3
          [0x79] 121:	loadl ebx, fp+2
          [0x7a] 122:	movr egx, ebx
          [0x7b] 123:	loadl ebx, fp+3
          [0x7c] 124:	lt ebx, egx
          [0x7d] 125:	movr ebx, cmt
          [0x7e] 126:	movi #154, adx
          [0x80] 128:	ifne
line: 250 [0x81] 129:	movl 0
          [0x82] 130:	movn #0
          [0x83] 131:	movi #1, ebx
          [0x85] 133:	rstore ebx
          [0x86] 134:	loadl ebx, fp+3
          [0x87] 135:	loadval egx
          [0x88] 136:	add ebx, egx -> ebx
          [0x8a] 138:	rstore ebx
          [0x8b] 139:	loadval ebx
          [0x8c] 140:	chklen ebx
          [0x8d] 141:	movnd ebx
          [0x8e] 142:	pushobj
          [0x8f] 143:	movl 0
          [0x90] 144:	movn #0
          [0x91] 145:	loadl ebx, fp+3
          [0x92] 146:	chklen ebx
          [0x93] 147:	movnd ebx
          [0x94] 148:	popobj
          [0x95] 149:	loadl ebx, fp+3
          [0x96] 150:	movi #1, ecx
          [0x98] 152:	addl ecx, @3
          [0x99] 153:	goto @121
line: 252 [0x9a] 154:	movl 0
          [0x9b] 155:	pushobj
          [0x9c] 156:	call @1001 // <std#ArrayList<app#CompilerError>.shrink()>
          [0x9d] 157:	nop
          [0x9e] 158:	nop
          [0x9f] 159:	ret

func:@1007 [std#ArrayList<app#CompilerError>.data] in file: lib/support//0.2.587//ArrayList.sharp:260:21: note:  
		     public def data() : T[] {
		                    ^


data:
line: 260 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	returnobj
          [0x3] 3:	ret

func:@1008 [std#ArrayList<app#CompilerError>.clear] in file: lib/support//0.2.587//ArrayList.sharp:268:22: note:  
		     public def clear() {
		                     ^


clear:
line: 269 [0x0] 0:	movi #10, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #0
          [0x5] 5:	sizeof ebx
          [0x6] 6:	loadval ecx
          [0x7] 7:	gt ebx, ecx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movi #19, adx
          [0xb] 11:	ifne
line: 270 [0xc] 12:	movi #10, ebx
          [0xe] 14:	new_classarray ebx  // app#CompilerError[]
          [0xf] 15:	movl 0
          [0x10] 16:	movn #0
          [0x11] 17:	popobj
          [0x12] 18:	nop
          [0x13] 19:	nop
line: 273 [0x14] 20:	movi #0, ebx
          [0x16] 22:	nop
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 0
          [0x19] 25:	movn #3
          [0x1a] 26:	movi #0, adx
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	rmov adx, ecx
          [0x1e] 30:	ret

func:@1009 [std#ArrayList<app#CompilerError>.outOfBoundsMsg] in file: lib/support//0.2.587//ArrayList.sharp:282:31: note:  
		    private def outOfBoundsMsg(var index) : string {
		                              ^


outOfBoundsMsg:
line: 282 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	newstr @224 // "Index: "
          [0x2] 2:	call @558 // <std#string.string(var[])>
          [0x3] 3:	loadl ebx, fp+1
          [0x4] 4:	rstore ebx
          [0x5] 5:	call @579 // <std#string.$operator+(var)>
          [0x6] 6:	newstr @225 // ", size: "
          [0x7] 7:	call @572 // <std#string.$operator+(var[])>
          [0x8] 8:	movl 0
          [0x9] 9:	movn #3
          [0xa] 10:	movi #0, adx
          [0xc] 12:	iaload_2 ebx, adx
          [0xd] 13:	rstore ebx
          [0xe] 14:	call @579 // <std#string.$operator+(var)>
          [0xf] 15:	movsl #0
          [0x10] 16:	returnobj
          [0x11] 17:	ret

func:@1010 [std#ArrayList<std#ArrayList<app#ParseError>>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:45:21: note:  
		    public ArrayList() {
		                    ^


ArrayList:
line: 46 [0x0] 0:	movi #10, ebx
         [0x2] 2:	new_classarray ebx  // std#ArrayList<app#ParseError>[]
         [0x3] 3:	movl 0
         [0x4] 4:	movn #0
         [0x5] 5:	popobj
line: 47 [0x6] 6:	movg @67 // @std#PayloadClass
         [0x7] 7:	movn #3
         [0x8] 8:	pushobj
         [0x9] 9:	movl 0
         [0xa] 10:	movn #4
         [0xb] 11:	popobj
         [0xc] 12:	movl 0
         [0xd] 13:	returnobj
         [0xe] 14:	ret

func:@1011 [std#ArrayList<std#ArrayList<app#ParseError>>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:55:21: note:  
		    public ArrayList(var startingCapacity) {
		                    ^


ArrayList:
line: 56 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	new_classarray ebx  // std#ArrayList<app#ParseError>[]
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	popobj
line: 57 [0x5] 5:	movg @67 // @std#PayloadClass
         [0x6] 6:	movn #3
         [0x7] 7:	pushobj
         [0x8] 8:	movl 0
         [0x9] 9:	movn #4
         [0xa] 10:	popobj
         [0xb] 11:	movl 0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@1012 [std#ArrayList<std#ArrayList<app#ParseError>>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:65:21: note:  
		    public ArrayList(var startingCapacity, PayloadClass pc) {
		                    ^


ArrayList:
line: 66 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	new_classarray ebx  // std#ArrayList<app#ParseError>[]
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	popobj
line: 67 [0x5] 5:	movl 2
         [0x6] 6:	pushobj
         [0x7] 7:	movl 0
         [0x8] 8:	movn #4
         [0x9] 9:	popobj
         [0xa] 10:	movl 0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@1013 [std#ArrayList<std#ArrayList<app#ParseError>>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:75:21: note:  
		    public ArrayList(PayloadClass pc) {
		                    ^


ArrayList:
line: 76 [0x0] 0:	movi #10, ebx
         [0x2] 2:	new_classarray ebx  // std#ArrayList<app#ParseError>[]
         [0x3] 3:	movl 0
         [0x4] 4:	movn #0
         [0x5] 5:	popobj
line: 77 [0x6] 6:	movl 1
         [0x7] 7:	pushobj
         [0x8] 8:	movl 0
         [0x9] 9:	movn #4
         [0xa] 10:	popobj
         [0xb] 11:	movl 0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@1014 [std#ArrayList<std#ArrayList<app#ParseError>>.setPayloadClass] in file: lib/support//0.2.587//ArrayList.sharp:86:31: note:  
		    public def setPayloadClass(PayloadClass pc) {
		                              ^


setPayloadClass:
line: 86 [0x0] 0:	movl 1
         [0x1] 1:	pushobj
         [0x2] 2:	movl 0
         [0x3] 3:	movn #4
         [0x4] 4:	popobj
         [0x5] 5:	ret

func:@1015 [std#ArrayList<std#ArrayList<app#ParseError>>.size] in file: lib/support//0.2.587//ArrayList.sharp:94:20: note:  
		    public def size() : var {
		                   ^


size:
line: 94 [0x0] 0:	movl 0
         [0x1] 1:	movn #3
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@1016 [std#ArrayList<std#ArrayList<app#ParseError>>.empty] in file: lib/support//0.2.587//ArrayList.sharp:102:21: note:  
		    public def empty() : var {
		                    ^


empty:
line: 102 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movi #0, ebx
          [0x8] 8:	movr egx, ebx
          [0x9] 9:	loadval ebx
          [0xa] 10:	test ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	return_val cmt
          [0xd] 13:	ret

func:@1017 [std#ArrayList<std#ArrayList<app#ParseError>>.toArray] in file: lib/support//0.2.587//ArrayList.sharp:111:23: note:  
		    public def toArray() : T[] {
		                      ^


toArray:
line: 111 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movi #0, ebx
          [0x8] 8:	movr egx, ebx
          [0x9] 9:	loadval ebx
          [0xa] 10:	test ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	movi #19, adx
          [0xe] 14:	ifne
line: 111 [0xf] 15:	movl 0
          [0x10] 16:	del
          [0x11] 17:	ret
          [0x12] 18:	nop
          [0x13] 19:	nop
line: 112 [0x14] 20:	movl 0
          [0x15] 21:	movn #0
          [0x16] 22:	pushobj
          [0x17] 23:	movl 0
          [0x18] 24:	movn #3
          [0x19] 25:	movi #0, adx
          [0x1b] 27:	iaload_2 ebx, adx
          [0x1c] 28:	rstore ebx
          [0x1d] 29:	call @619 // <std#__SRT_Global.copyOf(object,var)>
          [0x1e] 30:	movsl #0
          [0x1f] 31:	movi #74, cmt
          [0x21] 33:	cast cmt
          [0x22] 34:	movsl #0
          [0x23] 35:	returnobj
          [0x24] 36:	ret

func:@1018 [std#ArrayList<std#ArrayList<app#ParseError>>.get] in file: lib/support//0.2.587//ArrayList.sharp:120:19: note:  
		    public def get(var index) : T {
		                  ^


get:
line: 120 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gte ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movi #21, adx
          [0xb] 11:	ifne
line: 121 [0xc] 12:	new_class @13 // std#IndexOutOfBoundsException
          [0xd] 13:	movl 0
          [0xe] 14:	pushobj
          [0xf] 15:	loadl ebx, fp+1
          [0x10] 16:	rstore ebx
          [0x11] 17:	call @1030 // <std#ArrayList<std#ArrayList<app#ParseError>>.outOfBoundsMsg(var)>
          [0x12] 18:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x13] 19:	throw 
          [0x14] 20:	nop
          [0x15] 21:	nop
line: 123 [0x16] 22:	movl 0
          [0x17] 23:	movn #0
          [0x18] 24:	loadl ebx, fp+1
          [0x19] 25:	chklen ebx
          [0x1a] 26:	movnd ebx
          [0x1b] 27:	returnobj
          [0x1c] 28:	ret

func:@1019 [std#ArrayList<std#ArrayList<app#ParseError>>.last] in file: lib/support//0.2.587//ArrayList.sharp:131:20: note:  
		    public def last() : T {
		                   ^


last:
line: 131 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	movi #1, ebx
          [0x4] 4:	rstore ebx
          [0x5] 5:	movl 0
          [0x6] 6:	movn #3
          [0x7] 7:	movi #0, adx
          [0x9] 9:	chklen adx
          [0xa] 10:	iaload_2 ebx, adx
          [0xb] 11:	loadval egx
          [0xc] 12:	sub ebx, egx -> ebx
          [0xe] 14:	rstore ebx
          [0xf] 15:	call @1018 // <std#ArrayList<std#ArrayList<app#ParseError>>.get(var)>
          [0x10] 16:	movsl #0
          [0x11] 17:	returnobj
          [0x12] 18:	ret

func:@1020 [std#ArrayList<std#ArrayList<app#ParseError>>.set] in file: lib/support//0.2.587//ArrayList.sharp:140:19: note:  
		    public def set(var index, T element) : T {
		                  ^


set:
line: 140 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gte ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movi #21, adx
          [0xb] 11:	ifne
line: 141 [0xc] 12:	new_class @13 // std#IndexOutOfBoundsException
          [0xd] 13:	movl 0
          [0xe] 14:	pushobj
          [0xf] 15:	loadl ebx, fp+1
          [0x10] 16:	rstore ebx
          [0x11] 17:	call @1030 // <std#ArrayList<std#ArrayList<app#ParseError>>.outOfBoundsMsg(var)>
          [0x12] 18:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x13] 19:	throw 
          [0x14] 20:	nop
          [0x15] 21:	nop
line: 143 [0x16] 22:	movl 0
          [0x17] 23:	movn #0
          [0x18] 24:	loadl ebx, fp+1
          [0x19] 25:	chklen ebx
          [0x1a] 26:	movnd ebx
          [0x1b] 27:	pushobj
          [0x1c] 28:	movl 3
          [0x1d] 29:	popobj
line: 144 [0x1e] 30:	movl 2
          [0x1f] 31:	pushobj
          [0x20] 32:	movl 0
          [0x21] 33:	movn #0
          [0x22] 34:	loadl ebx, fp+1
          [0x23] 35:	chklen ebx
          [0x24] 36:	movnd ebx
          [0x25] 37:	popobj
line: 145 [0x26] 38:	movl 3
          [0x27] 39:	returnobj
          [0x28] 40:	ret

func:@1021 [std#ArrayList<std#ArrayList<app#ParseError>>.expand] in file: lib/support//0.2.587//ArrayList.sharp:155:23: note:  
		    private def expand() {
		                      ^


expand:
line: 155 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	movn #4
          [0x5] 5:	pushobj
          [0x6] 6:	call @78 // <std#Enum.getValue()>
          [0x7] 7:	movl 0
          [0x8] 8:	movn #0
          [0x9] 9:	sizeof ebx
          [0xa] 10:	loadval ecx
          [0xb] 11:	shr ebx, ecx -> ebx
          [0xd] 13:	rstore ebx
          [0xe] 14:	movl 0
          [0xf] 15:	movn #0
          [0x10] 16:	sizeof ebx
          [0x11] 17:	loadval ecx
          [0x12] 18:	add ebx, ecx -> ebx
          [0x14] 20:	rstore ebx
          [0x15] 21:	movi #20, ebx
          [0x17] 23:	rstore ebx
          [0x18] 24:	loadval ebx
          [0x19] 25:	loadval ecx
          [0x1a] 26:	add ebx, ecx -> ebx
          [0x1c] 28:	rstore ebx
          [0x1d] 29:	call @622 // <std#__SRT_Global.realloc(object,var)>
          [0x1e] 30:	ret

func:@1022 [std#ArrayList<std#ArrayList<app#ParseError>>.shrink] in file: lib/support//0.2.587//ArrayList.sharp:162:23: note:  
		    private def shrink() {
		                      ^


shrink:
line: 162 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	sizeof ebx
          [0x3] 3:	movr egx, ebx
          [0x4] 4:	movl 0
          [0x5] 5:	movn #3
          [0x6] 6:	movi #0, adx
          [0x8] 8:	chklen adx
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	lte ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	cmp ebx, 1
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	skne 16 // pc = 30
          [0xf] 15:	istore 1
          [0x10] 16:	movi #0, ebx
          [0x12] 18:	movr egx, ebx
          [0x13] 19:	movl 0
          [0x14] 20:	movn #3
          [0x15] 21:	movi #0, adx
          [0x17] 23:	chklen adx
          [0x18] 24:	iaload_2 ebx, adx
          [0x19] 25:	gt ebx, egx
          [0x1a] 26:	movr ebx, cmt
          [0x1b] 27:	loadval ecx
          [0x1c] 28:	and ecx, ebx
          [0x1d] 29:	movr ebx, cmt
          [0x1e] 30:	movr cmt, ebx
          [0x1f] 31:	movi #79, adx
          [0x21] 33:	ifne
line: 163 [0x22] 34:	movl 0
          [0x23] 35:	movn #3
          [0x24] 36:	movi #0, adx
          [0x26] 38:	chklen adx
          [0x27] 39:	iaload_2 ebx, adx
          [0x28] 40:	dec ebx
          [0x29] 41:	rmov adx, ebx
          [0x2a] 42:	inc ebx
line: 165 [0x2b] 43:	movl 0
          [0x2c] 44:	movn #0
          [0x2d] 45:	sizeof ebx
          [0x2e] 46:	rstore ebx
          [0x2f] 47:	movi #0, ebx
          [0x31] 49:	movr egx, ebx
          [0x32] 50:	loadval ebx
          [0x33] 51:	test ebx, egx
          [0x34] 52:	movr ebx, cmt
          [0x35] 53:	movr ebx, cmt
          [0x36] 54:	skpe 15 // pc = 69
          [0x37] 55:	movl 0
          [0x38] 56:	movn #3
          [0x39] 57:	movi #0, adx
          [0x3b] 59:	iaload_2 ebx, adx
          [0x3c] 60:	rstore ebx
          [0x3d] 61:	movi #0, ebx
          [0x3f] 63:	movr egx, ebx
          [0x40] 64:	loadval ebx
          [0x41] 65:	test ebx, egx
          [0x42] 66:	movr ebx, cmt
          [0x43] 67:	cmp ebx, 1
          [0x44] 68:	movr ebx, cmt
          [0x45] 69:	movr cmt, ebx
          [0x46] 70:	movi #77, adx
          [0x48] 72:	ifne
line: 166 [0x49] 73:	movl 0
          [0x4a] 74:	pushobj
          [0x4b] 75:	call @1029 // <std#ArrayList<std#ArrayList<app#ParseError>>.clear()>
          [0x4c] 76:	nop
          [0x4d] 77:	nop
          [0x4e] 78:	nop
          [0x4f] 79:	nop
          [0x50] 80:	ret

func:@1023 [std#ArrayList<std#ArrayList<app#ParseError>>.addAll] in file: lib/support//0.2.587//ArrayList.sharp:178:23: note:  
		     public def addAll(ArrayList<T> lst) {
		                      ^


addAll:
line: 178 [0x0] 0:	movl 1
          [0x1] 1:	pushobj
          [0x2] 2:	call @1028 // <std#ArrayList<std#ArrayList<app#ParseError>>.data()>
          [0x3] 3:	movl 2
          [0x4] 4:	popobj
line: 179 [0x5] 5:	movl 2
          [0x6] 6:	pushobj
          [0x7] 7:	movl 2
          [0x8] 8:	sizeof ebx
          [0x9] 9:	rstore ebx
          [0xa] 10:	call @619 // <std#__SRT_Global.copyOf(object,var)>
          [0xb] 11:	movsl #0
          [0xc] 12:	movi #74, cmt
          [0xe] 14:	cast cmt
          [0xf] 15:	movl 0
          [0x10] 16:	movn #0
          [0x11] 17:	popobj
line: 180 [0x12] 18:	movl 0
          [0x13] 19:	movn #0
          [0x14] 20:	sizeof ebx
          [0x15] 21:	nop
          [0x16] 22:	rstore ebx
          [0x17] 23:	movl 0
          [0x18] 24:	movn #3
          [0x19] 25:	movi #0, adx
          [0x1b] 27:	loadval ecx
          [0x1c] 28:	rmov adx, ecx
          [0x1d] 29:	ret

func:@1024 [std#ArrayList<std#ArrayList<app#ParseError>>.add] in file: lib/support//0.2.587//ArrayList.sharp:190:20: note:  
		     public def add(T e) {
		                   ^


add:
line: 190 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	sizeof ebx
          [0x3] 3:	movr egx, ebx
          [0x4] 4:	movl 0
          [0x5] 5:	movn #3
          [0x6] 6:	movi #0, adx
          [0x8] 8:	chklen adx
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	gte ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	movi #19, adx
          [0xe] 14:	ifne
line: 191 [0xf] 15:	movl 0
          [0x10] 16:	pushobj
          [0x11] 17:	call @1021 // <std#ArrayList<std#ArrayList<app#ParseError>>.expand()>
          [0x12] 18:	nop
          [0x13] 19:	nop
line: 192 [0x14] 20:	movl 1
          [0x15] 21:	pushobj
          [0x16] 22:	movl 0
          [0x17] 23:	movn #0
          [0x18] 24:	pushobj
          [0x19] 25:	movl 0
          [0x1a] 26:	movn #3
          [0x1b] 27:	movi #0, adx
          [0x1d] 29:	chklen adx
          [0x1e] 30:	iaload_2 ebx, adx
          [0x1f] 31:	inc ebx
          [0x20] 32:	rmov adx, ebx
          [0x21] 33:	dec ebx
          [0x22] 34:	movsl #0
          [0x23] 35:	chklen ebx
          [0x24] 36:	movnd ebx
          [0x25] 37:	pop
          [0x26] 38:	popobj
          [0x27] 39:	ret

func:@1025 [std#ArrayList<std#ArrayList<app#ParseError>>.popBack] in file: lib/support//0.2.587//ArrayList.sharp:203:24: note:  
		     public def popBack() {
		                       ^


popBack:
line: 203 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	call @1022 // <std#ArrayList<std#ArrayList<app#ParseError>>.shrink()>
          [0x3] 3:	ret

func:@1026 [std#ArrayList<std#ArrayList<app#ParseError>>.insert] in file: lib/support//0.2.587//ArrayList.sharp:213:23: note:  
		     public def insert(var pos, T value) {
		                      ^


insert:
line: 213 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gt ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	skpe 9 // pc = 19
          [0xb] 11:	movi #0, ebx
          [0xd] 13:	movr egx, ebx
          [0xe] 14:	loadl ebx, fp+1
          [0xf] 15:	lt ebx, egx
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	cmp ebx, 1
          [0x12] 18:	movr ebx, cmt
          [0x13] 19:	movr cmt, ebx
          [0x14] 20:	movi #32, adx
          [0x16] 22:	ifne
line: 214 [0x17] 23:	new_class @13 // std#IndexOutOfBoundsException
          [0x18] 24:	movl 0
          [0x19] 25:	pushobj
          [0x1a] 26:	loadl ebx, fp+1
          [0x1b] 27:	rstore ebx
          [0x1c] 28:	call @1030 // <std#ArrayList<std#ArrayList<app#ParseError>>.outOfBoundsMsg(var)>
          [0x1d] 29:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x1e] 30:	throw 
          [0x1f] 31:	nop
          [0x20] 32:	nop
line: 216 [0x21] 33:	movl 0
          [0x22] 34:	movn #3
          [0x23] 35:	movi #0, adx
          [0x25] 37:	iaload_2 ebx, adx
          [0x26] 38:	rstore ebx
          [0x27] 39:	movi #0, ebx
          [0x29] 41:	movr egx, ebx
          [0x2a] 42:	loadval ebx
          [0x2b] 43:	test ebx, egx
          [0x2c] 44:	movr ebx, cmt
          [0x2d] 45:	movi #54, adx
          [0x2f] 47:	ifne
line: 217 [0x30] 48:	movl 0
          [0x31] 49:	pushobj
          [0x32] 50:	movl 2
          [0x33] 51:	pushobj
          [0x34] 52:	call @1024 // <std#ArrayList<std#ArrayList<app#ParseError>>.add(std#ArrayList<app#ParseError>)>
          [0x35] 53:	goto @140
line: 219 [0x36] 54:	movl 0
          [0x37] 55:	movn #0
          [0x38] 56:	sizeof ebx
          [0x39] 57:	movr egx, ebx
          [0x3a] 58:	movl 0
          [0x3b] 59:	movn #3
          [0x3c] 60:	movi #0, adx
          [0x3e] 62:	chklen adx
          [0x3f] 63:	iaload_2 ebx, adx
          [0x40] 64:	gte ebx, egx
          [0x41] 65:	movr ebx, cmt
          [0x42] 66:	movi #73, adx
          [0x44] 68:	ifne
line: 220 [0x45] 69:	movl 0
          [0x46] 70:	pushobj
          [0x47] 71:	call @1021 // <std#ArrayList<std#ArrayList<app#ParseError>>.expand()>
          [0x48] 72:	nop
          [0x49] 73:	nop
line: 221 [0x4a] 74:	movl 0
          [0x4b] 75:	movn #3
          [0x4c] 76:	movi #0, adx
          [0x4e] 78:	chklen adx
          [0x4f] 79:	iaload_2 ebx, adx
          [0x50] 80:	inc ebx
          [0x51] 81:	rmov adx, ebx
          [0x52] 82:	dec ebx
line: 222 [0x53] 83:	movi #1, ebx
          [0x55] 85:	rstore ebx
          [0x56] 86:	movl 0
          [0x57] 87:	movn #3
          [0x58] 88:	movi #0, adx
          [0x5a] 90:	chklen adx
          [0x5b] 91:	iaload_2 ebx, adx
          [0x5c] 92:	loadval egx
          [0x5d] 93:	sub ebx, egx -> ebx
          [0x5f] 95:	rstore ebx
          [0x60] 96:	loadval ebx
          [0x61] 97:	smovr_2 ebx, fp+3
          [0x62] 98:	loadl ebx, fp+1
          [0x63] 99:	movr egx, ebx
          [0x64] 100:	loadl ebx, fp+3
          [0x65] 101:	gt ebx, egx
          [0x66] 102:	movr ebx, cmt
          [0x67] 103:	movi #131, adx
          [0x69] 105:	ifne
line: 223 [0x6a] 106:	movl 0
          [0x6b] 107:	movn #0
          [0x6c] 108:	movi #1, ebx
          [0x6e] 110:	rstore ebx
          [0x6f] 111:	loadl ebx, fp+3
          [0x70] 112:	loadval egx
          [0x71] 113:	sub ebx, egx -> ebx
          [0x73] 115:	rstore ebx
          [0x74] 116:	loadval ebx
          [0x75] 117:	chklen ebx
          [0x76] 118:	movnd ebx
          [0x77] 119:	pushobj
          [0x78] 120:	movl 0
          [0x79] 121:	movn #0
          [0x7a] 122:	loadl ebx, fp+3
          [0x7b] 123:	chklen ebx
          [0x7c] 124:	movnd ebx
          [0x7d] 125:	popobj
          [0x7e] 126:	loadl ebx, fp+3
          [0x7f] 127:	movi #1, ecx
          [0x81] 129:	subl ecx, @3
          [0x82] 130:	goto @98
line: 224 [0x83] 131:	movl 2
          [0x84] 132:	pushobj
          [0x85] 133:	movl 0
          [0x86] 134:	movn #0
          [0x87] 135:	loadl ebx, fp+1
          [0x88] 136:	chklen ebx
          [0x89] 137:	movnd ebx
          [0x8a] 138:	popobj
          [0x8b] 139:	nop
          [0x8c] 140:	nop
          [0x8d] 141:	ret

func:@1027 [std#ArrayList<std#ArrayList<app#ParseError>>.remove] in file: lib/support//0.2.587//ArrayList.sharp:236:23: note:  
		     public def remove(var pos) {
		                      ^


remove:
line: 236 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gt ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	skpe 9 // pc = 19
          [0xb] 11:	movi #0, ebx
          [0xd] 13:	movr egx, ebx
          [0xe] 14:	loadl ebx, fp+1
          [0xf] 15:	lt ebx, egx
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	cmp ebx, 1
          [0x12] 18:	movr ebx, cmt
          [0x13] 19:	movr cmt, ebx
          [0x14] 20:	movi #32, adx
          [0x16] 22:	ifne
line: 237 [0x17] 23:	new_class @13 // std#IndexOutOfBoundsException
          [0x18] 24:	movl 0
          [0x19] 25:	pushobj
          [0x1a] 26:	loadl ebx, fp+1
          [0x1b] 27:	rstore ebx
          [0x1c] 28:	call @1030 // <std#ArrayList<std#ArrayList<app#ParseError>>.outOfBoundsMsg(var)>
          [0x1d] 29:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x1e] 30:	throw 
          [0x1f] 31:	nop
          [0x20] 32:	nop
line: 239 [0x21] 33:	movl 0
          [0x22] 34:	movn #3
          [0x23] 35:	movi #0, adx
          [0x25] 37:	iaload_2 ebx, adx
          [0x26] 38:	rstore ebx
          [0x27] 39:	movi #1, ebx
          [0x29] 41:	movr egx, ebx
          [0x2a] 42:	loadval ebx
          [0x2b] 43:	test ebx, egx
          [0x2c] 44:	movr ebx, cmt
          [0x2d] 45:	movi #58, adx
          [0x2f] 47:	ifne
line: 240 [0x30] 48:	movl 0
          [0x31] 49:	movn #3
          [0x32] 50:	movi #0, adx
          [0x34] 52:	chklen adx
          [0x35] 53:	iaload_2 ebx, adx
          [0x36] 54:	dec ebx
          [0x37] 55:	rmov adx, ebx
          [0x38] 56:	inc ebx
          [0x39] 57:	goto @158
          [0x3a] 58:	movl 0
          [0x3b] 59:	movn #3
          [0x3c] 60:	movi #0, adx
          [0x3e] 62:	iaload_2 ebx, adx
          [0x3f] 63:	rstore ebx
          [0x40] 64:	movi #2, ebx
          [0x42] 66:	movr egx, ebx
          [0x43] 67:	loadval ebx
          [0x44] 68:	test ebx, egx
          [0x45] 69:	movr ebx, cmt
          [0x46] 70:	movi #104, adx
          [0x48] 72:	ifne
line: 243 [0x49] 73:	loadl ebx, fp+1
          [0x4a] 74:	rstore ebx
          [0x4b] 75:	movi #0, ebx
          [0x4d] 77:	movr egx, ebx
          [0x4e] 78:	loadval ebx
          [0x4f] 79:	test ebx, egx
          [0x50] 80:	movr ebx, cmt
          [0x51] 81:	movi #99, adx
          [0x53] 83:	ifne
line: 244 [0x54] 84:	movl 0
          [0x55] 85:	movn #0
          [0x56] 86:	movi #1, ebx
          [0x58] 88:	chklen ebx
          [0x59] 89:	movnd ebx
          [0x5a] 90:	pushobj
          [0x5b] 91:	movl 0
          [0x5c] 92:	movn #0
          [0x5d] 93:	movi #0, ebx
          [0x5f] 95:	chklen ebx
          [0x60] 96:	movnd ebx
          [0x61] 97:	popobj
          [0x62] 98:	nop
          [0x63] 99:	nop
line: 246 [0x64] 100:	movl 0
          [0x65] 101:	pushobj
          [0x66] 102:	call @1022 // <std#ArrayList<std#ArrayList<app#ParseError>>.shrink()>
          [0x67] 103:	goto @158
line: 248 [0x68] 104:	movi #1, ebx
          [0x6a] 106:	rstore ebx
          [0x6b] 107:	movl 0
          [0x6c] 108:	movn #3
          [0x6d] 109:	movi #0, adx
          [0x6f] 111:	chklen adx
          [0x70] 112:	iaload_2 ebx, adx
          [0x71] 113:	loadval egx
          [0x72] 114:	sub ebx, egx -> ebx
          [0x74] 116:	rstore ebx
          [0x75] 117:	loadval ebx
          [0x76] 118:	smovr_2 ebx, fp+2
line: 249 [0x77] 119:	loadl ebx, fp+1
          [0x78] 120:	smovr_2 ebx, fp+3
          [0x79] 121:	loadl ebx, fp+2
          [0x7a] 122:	movr egx, ebx
          [0x7b] 123:	loadl ebx, fp+3
          [0x7c] 124:	lt ebx, egx
          [0x7d] 125:	movr ebx, cmt
          [0x7e] 126:	movi #154, adx
          [0x80] 128:	ifne
line: 250 [0x81] 129:	movl 0
          [0x82] 130:	movn #0
          [0x83] 131:	movi #1, ebx
          [0x85] 133:	rstore ebx
          [0x86] 134:	loadl ebx, fp+3
          [0x87] 135:	loadval egx
          [0x88] 136:	add ebx, egx -> ebx
          [0x8a] 138:	rstore ebx
          [0x8b] 139:	loadval ebx
          [0x8c] 140:	chklen ebx
          [0x8d] 141:	movnd ebx
          [0x8e] 142:	pushobj
          [0x8f] 143:	movl 0
          [0x90] 144:	movn #0
          [0x91] 145:	loadl ebx, fp+3
          [0x92] 146:	chklen ebx
          [0x93] 147:	movnd ebx
          [0x94] 148:	popobj
          [0x95] 149:	loadl ebx, fp+3
          [0x96] 150:	movi #1, ecx
          [0x98] 152:	addl ecx, @3
          [0x99] 153:	goto @121
line: 252 [0x9a] 154:	movl 0
          [0x9b] 155:	pushobj
          [0x9c] 156:	call @1022 // <std#ArrayList<std#ArrayList<app#ParseError>>.shrink()>
          [0x9d] 157:	nop
          [0x9e] 158:	nop
          [0x9f] 159:	ret

func:@1028 [std#ArrayList<std#ArrayList<app#ParseError>>.data] in file: lib/support//0.2.587//ArrayList.sharp:260:21: note:  
		     public def data() : T[] {
		                    ^


data:
line: 260 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	returnobj
          [0x3] 3:	ret

func:@1029 [std#ArrayList<std#ArrayList<app#ParseError>>.clear] in file: lib/support//0.2.587//ArrayList.sharp:268:22: note:  
		     public def clear() {
		                     ^


clear:
line: 269 [0x0] 0:	movi #10, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #0
          [0x5] 5:	sizeof ebx
          [0x6] 6:	loadval ecx
          [0x7] 7:	gt ebx, ecx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movi #19, adx
          [0xb] 11:	ifne
line: 270 [0xc] 12:	movi #10, ebx
          [0xe] 14:	new_classarray ebx  // std#ArrayList<app#ParseError>[]
          [0xf] 15:	movl 0
          [0x10] 16:	movn #0
          [0x11] 17:	popobj
          [0x12] 18:	nop
          [0x13] 19:	nop
line: 273 [0x14] 20:	movi #0, ebx
          [0x16] 22:	nop
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 0
          [0x19] 25:	movn #3
          [0x1a] 26:	movi #0, adx
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	rmov adx, ecx
          [0x1e] 30:	ret

func:@1030 [std#ArrayList<std#ArrayList<app#ParseError>>.outOfBoundsMsg] in file: lib/support//0.2.587//ArrayList.sharp:282:31: note:  
		    private def outOfBoundsMsg(var index) : string {
		                              ^


outOfBoundsMsg:
line: 282 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	newstr @224 // "Index: "
          [0x2] 2:	call @558 // <std#string.string(var[])>
          [0x3] 3:	loadl ebx, fp+1
          [0x4] 4:	rstore ebx
          [0x5] 5:	call @579 // <std#string.$operator+(var)>
          [0x6] 6:	newstr @225 // ", size: "
          [0x7] 7:	call @572 // <std#string.$operator+(var[])>
          [0x8] 8:	movl 0
          [0x9] 9:	movn #3
          [0xa] 10:	movi #0, adx
          [0xc] 12:	iaload_2 ebx, adx
          [0xd] 13:	rstore ebx
          [0xe] 14:	call @579 // <std#string.$operator+(var)>
          [0xf] 15:	movsl #0
          [0x10] 16:	returnobj
          [0x11] 17:	ret

func:@1031 [std#ArrayList<app#Token>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:45:21: note:  
		    public ArrayList() {
		                    ^


ArrayList:
line: 46 [0x0] 0:	movi #10, ebx
         [0x2] 2:	new_classarray ebx  // app#Token[]
         [0x3] 3:	movl 0
         [0x4] 4:	movn #0
         [0x5] 5:	popobj
line: 47 [0x6] 6:	movg @67 // @std#PayloadClass
         [0x7] 7:	movn #3
         [0x8] 8:	pushobj
         [0x9] 9:	movl 0
         [0xa] 10:	movn #4
         [0xb] 11:	popobj
         [0xc] 12:	movl 0
         [0xd] 13:	returnobj
         [0xe] 14:	ret

func:@1032 [std#ArrayList<app#Token>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:55:21: note:  
		    public ArrayList(var startingCapacity) {
		                    ^


ArrayList:
line: 56 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	new_classarray ebx  // app#Token[]
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	popobj
line: 57 [0x5] 5:	movg @67 // @std#PayloadClass
         [0x6] 6:	movn #3
         [0x7] 7:	pushobj
         [0x8] 8:	movl 0
         [0x9] 9:	movn #4
         [0xa] 10:	popobj
         [0xb] 11:	movl 0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@1033 [std#ArrayList<app#Token>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:65:21: note:  
		    public ArrayList(var startingCapacity, PayloadClass pc) {
		                    ^


ArrayList:
line: 66 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	new_classarray ebx  // app#Token[]
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	popobj
line: 67 [0x5] 5:	movl 2
         [0x6] 6:	pushobj
         [0x7] 7:	movl 0
         [0x8] 8:	movn #4
         [0x9] 9:	popobj
         [0xa] 10:	movl 0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@1034 [std#ArrayList<app#Token>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:75:21: note:  
		    public ArrayList(PayloadClass pc) {
		                    ^


ArrayList:
line: 76 [0x0] 0:	movi #10, ebx
         [0x2] 2:	new_classarray ebx  // app#Token[]
         [0x3] 3:	movl 0
         [0x4] 4:	movn #0
         [0x5] 5:	popobj
line: 77 [0x6] 6:	movl 1
         [0x7] 7:	pushobj
         [0x8] 8:	movl 0
         [0x9] 9:	movn #4
         [0xa] 10:	popobj
         [0xb] 11:	movl 0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@1035 [std#ArrayList<app#Token>.setPayloadClass] in file: lib/support//0.2.587//ArrayList.sharp:86:31: note:  
		    public def setPayloadClass(PayloadClass pc) {
		                              ^


setPayloadClass:
line: 86 [0x0] 0:	movl 1
         [0x1] 1:	pushobj
         [0x2] 2:	movl 0
         [0x3] 3:	movn #4
         [0x4] 4:	popobj
         [0x5] 5:	ret

func:@1036 [std#ArrayList<app#Token>.size] in file: lib/support//0.2.587//ArrayList.sharp:94:20: note:  
		    public def size() : var {
		                   ^


size:
line: 94 [0x0] 0:	movl 0
         [0x1] 1:	movn #3
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@1037 [std#ArrayList<app#Token>.empty] in file: lib/support//0.2.587//ArrayList.sharp:102:21: note:  
		    public def empty() : var {
		                    ^


empty:
line: 102 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movi #0, ebx
          [0x8] 8:	movr egx, ebx
          [0x9] 9:	loadval ebx
          [0xa] 10:	test ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	return_val cmt
          [0xd] 13:	ret

func:@1038 [std#ArrayList<app#Token>.toArray] in file: lib/support//0.2.587//ArrayList.sharp:111:23: note:  
		    public def toArray() : T[] {
		                      ^


toArray:
line: 111 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movi #0, ebx
          [0x8] 8:	movr egx, ebx
          [0x9] 9:	loadval ebx
          [0xa] 10:	test ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	movi #19, adx
          [0xe] 14:	ifne
line: 111 [0xf] 15:	movl 0
          [0x10] 16:	del
          [0x11] 17:	ret
          [0x12] 18:	nop
          [0x13] 19:	nop
line: 112 [0x14] 20:	movl 0
          [0x15] 21:	movn #0
          [0x16] 22:	pushobj
          [0x17] 23:	movl 0
          [0x18] 24:	movn #3
          [0x19] 25:	movi #0, adx
          [0x1b] 27:	iaload_2 ebx, adx
          [0x1c] 28:	rstore ebx
          [0x1d] 29:	call @619 // <std#__SRT_Global.copyOf(object,var)>
          [0x1e] 30:	movsl #0
          [0x1f] 31:	movi #58, cmt
          [0x21] 33:	cast cmt
          [0x22] 34:	movsl #0
          [0x23] 35:	returnobj
          [0x24] 36:	ret

func:@1039 [std#ArrayList<app#Token>.get] in file: lib/support//0.2.587//ArrayList.sharp:120:19: note:  
		    public def get(var index) : T {
		                  ^


get:
line: 120 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gte ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movi #21, adx
          [0xb] 11:	ifne
line: 121 [0xc] 12:	new_class @13 // std#IndexOutOfBoundsException
          [0xd] 13:	movl 0
          [0xe] 14:	pushobj
          [0xf] 15:	loadl ebx, fp+1
          [0x10] 16:	rstore ebx
          [0x11] 17:	call @1051 // <std#ArrayList<app#Token>.outOfBoundsMsg(var)>
          [0x12] 18:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x13] 19:	throw 
          [0x14] 20:	nop
          [0x15] 21:	nop
line: 123 [0x16] 22:	movl 0
          [0x17] 23:	movn #0
          [0x18] 24:	loadl ebx, fp+1
          [0x19] 25:	chklen ebx
          [0x1a] 26:	movnd ebx
          [0x1b] 27:	returnobj
          [0x1c] 28:	ret

func:@1040 [std#ArrayList<app#Token>.last] in file: lib/support//0.2.587//ArrayList.sharp:131:20: note:  
		    public def last() : T {
		                   ^


last:
line: 131 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	movi #1, ebx
          [0x4] 4:	rstore ebx
          [0x5] 5:	movl 0
          [0x6] 6:	movn #3
          [0x7] 7:	movi #0, adx
          [0x9] 9:	chklen adx
          [0xa] 10:	iaload_2 ebx, adx
          [0xb] 11:	loadval egx
          [0xc] 12:	sub ebx, egx -> ebx
          [0xe] 14:	rstore ebx
          [0xf] 15:	call @1039 // <std#ArrayList<app#Token>.get(var)>
          [0x10] 16:	movsl #0
          [0x11] 17:	returnobj
          [0x12] 18:	ret

func:@1041 [std#ArrayList<app#Token>.set] in file: lib/support//0.2.587//ArrayList.sharp:140:19: note:  
		    public def set(var index, T element) : T {
		                  ^


set:
line: 140 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gte ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movi #21, adx
          [0xb] 11:	ifne
line: 141 [0xc] 12:	new_class @13 // std#IndexOutOfBoundsException
          [0xd] 13:	movl 0
          [0xe] 14:	pushobj
          [0xf] 15:	loadl ebx, fp+1
          [0x10] 16:	rstore ebx
          [0x11] 17:	call @1051 // <std#ArrayList<app#Token>.outOfBoundsMsg(var)>
          [0x12] 18:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x13] 19:	throw 
          [0x14] 20:	nop
          [0x15] 21:	nop
line: 143 [0x16] 22:	movl 0
          [0x17] 23:	movn #0
          [0x18] 24:	loadl ebx, fp+1
          [0x19] 25:	chklen ebx
          [0x1a] 26:	movnd ebx
          [0x1b] 27:	pushobj
          [0x1c] 28:	movl 3
          [0x1d] 29:	popobj
line: 144 [0x1e] 30:	movl 2
          [0x1f] 31:	pushobj
          [0x20] 32:	movl 0
          [0x21] 33:	movn #0
          [0x22] 34:	loadl ebx, fp+1
          [0x23] 35:	chklen ebx
          [0x24] 36:	movnd ebx
          [0x25] 37:	popobj
line: 145 [0x26] 38:	movl 3
          [0x27] 39:	returnobj
          [0x28] 40:	ret

func:@1042 [std#ArrayList<app#Token>.expand] in file: lib/support//0.2.587//ArrayList.sharp:155:23: note:  
		    private def expand() {
		                      ^


expand:
line: 155 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	movn #4
          [0x5] 5:	pushobj
          [0x6] 6:	call @78 // <std#Enum.getValue()>
          [0x7] 7:	movl 0
          [0x8] 8:	movn #0
          [0x9] 9:	sizeof ebx
          [0xa] 10:	loadval ecx
          [0xb] 11:	shr ebx, ecx -> ebx
          [0xd] 13:	rstore ebx
          [0xe] 14:	movl 0
          [0xf] 15:	movn #0
          [0x10] 16:	sizeof ebx
          [0x11] 17:	loadval ecx
          [0x12] 18:	add ebx, ecx -> ebx
          [0x14] 20:	rstore ebx
          [0x15] 21:	movi #20, ebx
          [0x17] 23:	rstore ebx
          [0x18] 24:	loadval ebx
          [0x19] 25:	loadval ecx
          [0x1a] 26:	add ebx, ecx -> ebx
          [0x1c] 28:	rstore ebx
          [0x1d] 29:	call @622 // <std#__SRT_Global.realloc(object,var)>
          [0x1e] 30:	ret

func:@1043 [std#ArrayList<app#Token>.shrink] in file: lib/support//0.2.587//ArrayList.sharp:162:23: note:  
		    private def shrink() {
		                      ^


shrink:
line: 162 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	sizeof ebx
          [0x3] 3:	movr egx, ebx
          [0x4] 4:	movl 0
          [0x5] 5:	movn #3
          [0x6] 6:	movi #0, adx
          [0x8] 8:	chklen adx
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	lte ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	cmp ebx, 1
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	skne 16 // pc = 30
          [0xf] 15:	istore 1
          [0x10] 16:	movi #0, ebx
          [0x12] 18:	movr egx, ebx
          [0x13] 19:	movl 0
          [0x14] 20:	movn #3
          [0x15] 21:	movi #0, adx
          [0x17] 23:	chklen adx
          [0x18] 24:	iaload_2 ebx, adx
          [0x19] 25:	gt ebx, egx
          [0x1a] 26:	movr ebx, cmt
          [0x1b] 27:	loadval ecx
          [0x1c] 28:	and ecx, ebx
          [0x1d] 29:	movr ebx, cmt
          [0x1e] 30:	movr cmt, ebx
          [0x1f] 31:	movi #79, adx
          [0x21] 33:	ifne
line: 163 [0x22] 34:	movl 0
          [0x23] 35:	movn #3
          [0x24] 36:	movi #0, adx
          [0x26] 38:	chklen adx
          [0x27] 39:	iaload_2 ebx, adx
          [0x28] 40:	dec ebx
          [0x29] 41:	rmov adx, ebx
          [0x2a] 42:	inc ebx
line: 165 [0x2b] 43:	movl 0
          [0x2c] 44:	movn #0
          [0x2d] 45:	sizeof ebx
          [0x2e] 46:	rstore ebx
          [0x2f] 47:	movi #0, ebx
          [0x31] 49:	movr egx, ebx
          [0x32] 50:	loadval ebx
          [0x33] 51:	test ebx, egx
          [0x34] 52:	movr ebx, cmt
          [0x35] 53:	movr ebx, cmt
          [0x36] 54:	skpe 15 // pc = 69
          [0x37] 55:	movl 0
          [0x38] 56:	movn #3
          [0x39] 57:	movi #0, adx
          [0x3b] 59:	iaload_2 ebx, adx
          [0x3c] 60:	rstore ebx
          [0x3d] 61:	movi #0, ebx
          [0x3f] 63:	movr egx, ebx
          [0x40] 64:	loadval ebx
          [0x41] 65:	test ebx, egx
          [0x42] 66:	movr ebx, cmt
          [0x43] 67:	cmp ebx, 1
          [0x44] 68:	movr ebx, cmt
          [0x45] 69:	movr cmt, ebx
          [0x46] 70:	movi #77, adx
          [0x48] 72:	ifne
line: 166 [0x49] 73:	movl 0
          [0x4a] 74:	pushobj
          [0x4b] 75:	call @1050 // <std#ArrayList<app#Token>.clear()>
          [0x4c] 76:	nop
          [0x4d] 77:	nop
          [0x4e] 78:	nop
          [0x4f] 79:	nop
          [0x50] 80:	ret

func:@1044 [std#ArrayList<app#Token>.addAll] in file: lib/support//0.2.587//ArrayList.sharp:178:23: note:  
		     public def addAll(ArrayList<T> lst) {
		                      ^


addAll:
line: 178 [0x0] 0:	movl 1
          [0x1] 1:	pushobj
          [0x2] 2:	call @1049 // <std#ArrayList<app#Token>.data()>
          [0x3] 3:	movl 2
          [0x4] 4:	popobj
line: 179 [0x5] 5:	movl 2
          [0x6] 6:	pushobj
          [0x7] 7:	movl 2
          [0x8] 8:	sizeof ebx
          [0x9] 9:	rstore ebx
          [0xa] 10:	call @619 // <std#__SRT_Global.copyOf(object,var)>
          [0xb] 11:	movsl #0
          [0xc] 12:	movi #58, cmt
          [0xe] 14:	cast cmt
          [0xf] 15:	movl 0
          [0x10] 16:	movn #0
          [0x11] 17:	popobj
line: 180 [0x12] 18:	movl 0
          [0x13] 19:	movn #0
          [0x14] 20:	sizeof ebx
          [0x15] 21:	nop
          [0x16] 22:	rstore ebx
          [0x17] 23:	movl 0
          [0x18] 24:	movn #3
          [0x19] 25:	movi #0, adx
          [0x1b] 27:	loadval ecx
          [0x1c] 28:	rmov adx, ecx
          [0x1d] 29:	ret

func:@1045 [std#ArrayList<app#Token>.add] in file: lib/support//0.2.587//ArrayList.sharp:190:20: note:  
		     public def add(T e) {
		                   ^


add:
line: 190 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	sizeof ebx
          [0x3] 3:	movr egx, ebx
          [0x4] 4:	movl 0
          [0x5] 5:	movn #3
          [0x6] 6:	movi #0, adx
          [0x8] 8:	chklen adx
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	gte ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	movi #19, adx
          [0xe] 14:	ifne
line: 191 [0xf] 15:	movl 0
          [0x10] 16:	pushobj
          [0x11] 17:	call @1042 // <std#ArrayList<app#Token>.expand()>
          [0x12] 18:	nop
          [0x13] 19:	nop
line: 192 [0x14] 20:	movl 1
          [0x15] 21:	pushobj
          [0x16] 22:	movl 0
          [0x17] 23:	movn #0
          [0x18] 24:	pushobj
          [0x19] 25:	movl 0
          [0x1a] 26:	movn #3
          [0x1b] 27:	movi #0, adx
          [0x1d] 29:	chklen adx
          [0x1e] 30:	iaload_2 ebx, adx
          [0x1f] 31:	inc ebx
          [0x20] 32:	rmov adx, ebx
          [0x21] 33:	dec ebx
          [0x22] 34:	movsl #0
          [0x23] 35:	chklen ebx
          [0x24] 36:	movnd ebx
          [0x25] 37:	pop
          [0x26] 38:	popobj
          [0x27] 39:	ret

func:@1046 [std#ArrayList<app#Token>.popBack] in file: lib/support//0.2.587//ArrayList.sharp:203:24: note:  
		     public def popBack() {
		                       ^


popBack:
line: 203 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	call @1043 // <std#ArrayList<app#Token>.shrink()>
          [0x3] 3:	ret

func:@1047 [std#ArrayList<app#Token>.insert] in file: lib/support//0.2.587//ArrayList.sharp:213:23: note:  
		     public def insert(var pos, T value) {
		                      ^


insert:
line: 213 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gt ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	skpe 9 // pc = 19
          [0xb] 11:	movi #0, ebx
          [0xd] 13:	movr egx, ebx
          [0xe] 14:	loadl ebx, fp+1
          [0xf] 15:	lt ebx, egx
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	cmp ebx, 1
          [0x12] 18:	movr ebx, cmt
          [0x13] 19:	movr cmt, ebx
          [0x14] 20:	movi #32, adx
          [0x16] 22:	ifne
line: 214 [0x17] 23:	new_class @13 // std#IndexOutOfBoundsException
          [0x18] 24:	movl 0
          [0x19] 25:	pushobj
          [0x1a] 26:	loadl ebx, fp+1
          [0x1b] 27:	rstore ebx
          [0x1c] 28:	call @1051 // <std#ArrayList<app#Token>.outOfBoundsMsg(var)>
          [0x1d] 29:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x1e] 30:	throw 
          [0x1f] 31:	nop
          [0x20] 32:	nop
line: 216 [0x21] 33:	movl 0
          [0x22] 34:	movn #3
          [0x23] 35:	movi #0, adx
          [0x25] 37:	iaload_2 ebx, adx
          [0x26] 38:	rstore ebx
          [0x27] 39:	movi #0, ebx
          [0x29] 41:	movr egx, ebx
          [0x2a] 42:	loadval ebx
          [0x2b] 43:	test ebx, egx
          [0x2c] 44:	movr ebx, cmt
          [0x2d] 45:	movi #54, adx
          [0x2f] 47:	ifne
line: 217 [0x30] 48:	movl 0
          [0x31] 49:	pushobj
          [0x32] 50:	movl 2
          [0x33] 51:	pushobj
          [0x34] 52:	call @1045 // <std#ArrayList<app#Token>.add(app#Token)>
          [0x35] 53:	goto @140
line: 219 [0x36] 54:	movl 0
          [0x37] 55:	movn #0
          [0x38] 56:	sizeof ebx
          [0x39] 57:	movr egx, ebx
          [0x3a] 58:	movl 0
          [0x3b] 59:	movn #3
          [0x3c] 60:	movi #0, adx
          [0x3e] 62:	chklen adx
          [0x3f] 63:	iaload_2 ebx, adx
          [0x40] 64:	gte ebx, egx
          [0x41] 65:	movr ebx, cmt
          [0x42] 66:	movi #73, adx
          [0x44] 68:	ifne
line: 220 [0x45] 69:	movl 0
          [0x46] 70:	pushobj
          [0x47] 71:	call @1042 // <std#ArrayList<app#Token>.expand()>
          [0x48] 72:	nop
          [0x49] 73:	nop
line: 221 [0x4a] 74:	movl 0
          [0x4b] 75:	movn #3
          [0x4c] 76:	movi #0, adx
          [0x4e] 78:	chklen adx
          [0x4f] 79:	iaload_2 ebx, adx
          [0x50] 80:	inc ebx
          [0x51] 81:	rmov adx, ebx
          [0x52] 82:	dec ebx
line: 222 [0x53] 83:	movi #1, ebx
          [0x55] 85:	rstore ebx
          [0x56] 86:	movl 0
          [0x57] 87:	movn #3
          [0x58] 88:	movi #0, adx
          [0x5a] 90:	chklen adx
          [0x5b] 91:	iaload_2 ebx, adx
          [0x5c] 92:	loadval egx
          [0x5d] 93:	sub ebx, egx -> ebx
          [0x5f] 95:	rstore ebx
          [0x60] 96:	loadval ebx
          [0x61] 97:	smovr_2 ebx, fp+3
          [0x62] 98:	loadl ebx, fp+1
          [0x63] 99:	movr egx, ebx
          [0x64] 100:	loadl ebx, fp+3
          [0x65] 101:	gt ebx, egx
          [0x66] 102:	movr ebx, cmt
          [0x67] 103:	movi #131, adx
          [0x69] 105:	ifne
line: 223 [0x6a] 106:	movl 0
          [0x6b] 107:	movn #0
          [0x6c] 108:	movi #1, ebx
          [0x6e] 110:	rstore ebx
          [0x6f] 111:	loadl ebx, fp+3
          [0x70] 112:	loadval egx
          [0x71] 113:	sub ebx, egx -> ebx
          [0x73] 115:	rstore ebx
          [0x74] 116:	loadval ebx
          [0x75] 117:	chklen ebx
          [0x76] 118:	movnd ebx
          [0x77] 119:	pushobj
          [0x78] 120:	movl 0
          [0x79] 121:	movn #0
          [0x7a] 122:	loadl ebx, fp+3
          [0x7b] 123:	chklen ebx
          [0x7c] 124:	movnd ebx
          [0x7d] 125:	popobj
          [0x7e] 126:	loadl ebx, fp+3
          [0x7f] 127:	movi #1, ecx
          [0x81] 129:	subl ecx, @3
          [0x82] 130:	goto @98
line: 224 [0x83] 131:	movl 2
          [0x84] 132:	pushobj
          [0x85] 133:	movl 0
          [0x86] 134:	movn #0
          [0x87] 135:	loadl ebx, fp+1
          [0x88] 136:	chklen ebx
          [0x89] 137:	movnd ebx
          [0x8a] 138:	popobj
          [0x8b] 139:	nop
          [0x8c] 140:	nop
          [0x8d] 141:	ret

func:@1048 [std#ArrayList<app#Token>.remove] in file: lib/support//0.2.587//ArrayList.sharp:236:23: note:  
		     public def remove(var pos) {
		                      ^


remove:
line: 236 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gt ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	skpe 9 // pc = 19
          [0xb] 11:	movi #0, ebx
          [0xd] 13:	movr egx, ebx
          [0xe] 14:	loadl ebx, fp+1
          [0xf] 15:	lt ebx, egx
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	cmp ebx, 1
          [0x12] 18:	movr ebx, cmt
          [0x13] 19:	movr cmt, ebx
          [0x14] 20:	movi #32, adx
          [0x16] 22:	ifne
line: 237 [0x17] 23:	new_class @13 // std#IndexOutOfBoundsException
          [0x18] 24:	movl 0
          [0x19] 25:	pushobj
          [0x1a] 26:	loadl ebx, fp+1
          [0x1b] 27:	rstore ebx
          [0x1c] 28:	call @1051 // <std#ArrayList<app#Token>.outOfBoundsMsg(var)>
          [0x1d] 29:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x1e] 30:	throw 
          [0x1f] 31:	nop
          [0x20] 32:	nop
line: 239 [0x21] 33:	movl 0
          [0x22] 34:	movn #3
          [0x23] 35:	movi #0, adx
          [0x25] 37:	iaload_2 ebx, adx
          [0x26] 38:	rstore ebx
          [0x27] 39:	movi #1, ebx
          [0x29] 41:	movr egx, ebx
          [0x2a] 42:	loadval ebx
          [0x2b] 43:	test ebx, egx
          [0x2c] 44:	movr ebx, cmt
          [0x2d] 45:	movi #58, adx
          [0x2f] 47:	ifne
line: 240 [0x30] 48:	movl 0
          [0x31] 49:	movn #3
          [0x32] 50:	movi #0, adx
          [0x34] 52:	chklen adx
          [0x35] 53:	iaload_2 ebx, adx
          [0x36] 54:	dec ebx
          [0x37] 55:	rmov adx, ebx
          [0x38] 56:	inc ebx
          [0x39] 57:	goto @158
          [0x3a] 58:	movl 0
          [0x3b] 59:	movn #3
          [0x3c] 60:	movi #0, adx
          [0x3e] 62:	iaload_2 ebx, adx
          [0x3f] 63:	rstore ebx
          [0x40] 64:	movi #2, ebx
          [0x42] 66:	movr egx, ebx
          [0x43] 67:	loadval ebx
          [0x44] 68:	test ebx, egx
          [0x45] 69:	movr ebx, cmt
          [0x46] 70:	movi #104, adx
          [0x48] 72:	ifne
line: 243 [0x49] 73:	loadl ebx, fp+1
          [0x4a] 74:	rstore ebx
          [0x4b] 75:	movi #0, ebx
          [0x4d] 77:	movr egx, ebx
          [0x4e] 78:	loadval ebx
          [0x4f] 79:	test ebx, egx
          [0x50] 80:	movr ebx, cmt
          [0x51] 81:	movi #99, adx
          [0x53] 83:	ifne
line: 244 [0x54] 84:	movl 0
          [0x55] 85:	movn #0
          [0x56] 86:	movi #1, ebx
          [0x58] 88:	chklen ebx
          [0x59] 89:	movnd ebx
          [0x5a] 90:	pushobj
          [0x5b] 91:	movl 0
          [0x5c] 92:	movn #0
          [0x5d] 93:	movi #0, ebx
          [0x5f] 95:	chklen ebx
          [0x60] 96:	movnd ebx
          [0x61] 97:	popobj
          [0x62] 98:	nop
          [0x63] 99:	nop
line: 246 [0x64] 100:	movl 0
          [0x65] 101:	pushobj
          [0x66] 102:	call @1043 // <std#ArrayList<app#Token>.shrink()>
          [0x67] 103:	goto @158
line: 248 [0x68] 104:	movi #1, ebx
          [0x6a] 106:	rstore ebx
          [0x6b] 107:	movl 0
          [0x6c] 108:	movn #3
          [0x6d] 109:	movi #0, adx
          [0x6f] 111:	chklen adx
          [0x70] 112:	iaload_2 ebx, adx
          [0x71] 113:	loadval egx
          [0x72] 114:	sub ebx, egx -> ebx
          [0x74] 116:	rstore ebx
          [0x75] 117:	loadval ebx
          [0x76] 118:	smovr_2 ebx, fp+2
line: 249 [0x77] 119:	loadl ebx, fp+1
          [0x78] 120:	smovr_2 ebx, fp+3
          [0x79] 121:	loadl ebx, fp+2
          [0x7a] 122:	movr egx, ebx
          [0x7b] 123:	loadl ebx, fp+3
          [0x7c] 124:	lt ebx, egx
          [0x7d] 125:	movr ebx, cmt
          [0x7e] 126:	movi #154, adx
          [0x80] 128:	ifne
line: 250 [0x81] 129:	movl 0
          [0x82] 130:	movn #0
          [0x83] 131:	movi #1, ebx
          [0x85] 133:	rstore ebx
          [0x86] 134:	loadl ebx, fp+3
          [0x87] 135:	loadval egx
          [0x88] 136:	add ebx, egx -> ebx
          [0x8a] 138:	rstore ebx
          [0x8b] 139:	loadval ebx
          [0x8c] 140:	chklen ebx
          [0x8d] 141:	movnd ebx
          [0x8e] 142:	pushobj
          [0x8f] 143:	movl 0
          [0x90] 144:	movn #0
          [0x91] 145:	loadl ebx, fp+3
          [0x92] 146:	chklen ebx
          [0x93] 147:	movnd ebx
          [0x94] 148:	popobj
          [0x95] 149:	loadl ebx, fp+3
          [0x96] 150:	movi #1, ecx
          [0x98] 152:	addl ecx, @3
          [0x99] 153:	goto @121
line: 252 [0x9a] 154:	movl 0
          [0x9b] 155:	pushobj
          [0x9c] 156:	call @1043 // <std#ArrayList<app#Token>.shrink()>
          [0x9d] 157:	nop
          [0x9e] 158:	nop
          [0x9f] 159:	ret

func:@1049 [std#ArrayList<app#Token>.data] in file: lib/support//0.2.587//ArrayList.sharp:260:21: note:  
		     public def data() : T[] {
		                    ^


data:
line: 260 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	returnobj
          [0x3] 3:	ret

func:@1050 [std#ArrayList<app#Token>.clear] in file: lib/support//0.2.587//ArrayList.sharp:268:22: note:  
		     public def clear() {
		                     ^


clear:
line: 269 [0x0] 0:	movi #10, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #0
          [0x5] 5:	sizeof ebx
          [0x6] 6:	loadval ecx
          [0x7] 7:	gt ebx, ecx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movi #19, adx
          [0xb] 11:	ifne
line: 270 [0xc] 12:	movi #10, ebx
          [0xe] 14:	new_classarray ebx  // app#Token[]
          [0xf] 15:	movl 0
          [0x10] 16:	movn #0
          [0x11] 17:	popobj
          [0x12] 18:	nop
          [0x13] 19:	nop
line: 273 [0x14] 20:	movi #0, ebx
          [0x16] 22:	nop
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 0
          [0x19] 25:	movn #3
          [0x1a] 26:	movi #0, adx
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	rmov adx, ecx
          [0x1e] 30:	ret

func:@1051 [std#ArrayList<app#Token>.outOfBoundsMsg] in file: lib/support//0.2.587//ArrayList.sharp:282:31: note:  
		    private def outOfBoundsMsg(var index) : string {
		                              ^


outOfBoundsMsg:
line: 282 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	newstr @224 // "Index: "
          [0x2] 2:	call @558 // <std#string.string(var[])>
          [0x3] 3:	loadl ebx, fp+1
          [0x4] 4:	rstore ebx
          [0x5] 5:	call @579 // <std#string.$operator+(var)>
          [0x6] 6:	newstr @225 // ", size: "
          [0x7] 7:	call @572 // <std#string.$operator+(var[])>
          [0x8] 8:	movl 0
          [0x9] 9:	movn #3
          [0xa] 10:	movi #0, adx
          [0xc] 12:	iaload_2 ebx, adx
          [0xd] 13:	rstore ebx
          [0xe] 14:	call @579 // <std#string.$operator+(var)>
          [0xf] 15:	movsl #0
          [0x10] 16:	returnobj
          [0x11] 17:	ret

func:@1052 [std#ArrayList<app#Ast>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:45:21: note:  
		    public ArrayList() {
		                    ^


ArrayList:
line: 46 [0x0] 0:	movi #10, ebx
         [0x2] 2:	new_classarray ebx  // app#Ast[]
         [0x3] 3:	movl 0
         [0x4] 4:	movn #0
         [0x5] 5:	popobj
line: 47 [0x6] 6:	movg @67 // @std#PayloadClass
         [0x7] 7:	movn #3
         [0x8] 8:	pushobj
         [0x9] 9:	movl 0
         [0xa] 10:	movn #4
         [0xb] 11:	popobj
         [0xc] 12:	movl 0
         [0xd] 13:	returnobj
         [0xe] 14:	ret

func:@1053 [std#ArrayList<app#Ast>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:55:21: note:  
		    public ArrayList(var startingCapacity) {
		                    ^


ArrayList:
line: 56 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	new_classarray ebx  // app#Ast[]
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	popobj
line: 57 [0x5] 5:	movg @67 // @std#PayloadClass
         [0x6] 6:	movn #3
         [0x7] 7:	pushobj
         [0x8] 8:	movl 0
         [0x9] 9:	movn #4
         [0xa] 10:	popobj
         [0xb] 11:	movl 0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@1054 [std#ArrayList<app#Ast>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:65:21: note:  
		    public ArrayList(var startingCapacity, PayloadClass pc) {
		                    ^


ArrayList:
line: 66 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	new_classarray ebx  // app#Ast[]
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	popobj
line: 67 [0x5] 5:	movl 2
         [0x6] 6:	pushobj
         [0x7] 7:	movl 0
         [0x8] 8:	movn #4
         [0x9] 9:	popobj
         [0xa] 10:	movl 0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@1055 [std#ArrayList<app#Ast>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:75:21: note:  
		    public ArrayList(PayloadClass pc) {
		                    ^


ArrayList:
line: 76 [0x0] 0:	movi #10, ebx
         [0x2] 2:	new_classarray ebx  // app#Ast[]
         [0x3] 3:	movl 0
         [0x4] 4:	movn #0
         [0x5] 5:	popobj
line: 77 [0x6] 6:	movl 1
         [0x7] 7:	pushobj
         [0x8] 8:	movl 0
         [0x9] 9:	movn #4
         [0xa] 10:	popobj
         [0xb] 11:	movl 0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@1056 [std#ArrayList<app#Ast>.setPayloadClass] in file: lib/support//0.2.587//ArrayList.sharp:86:31: note:  
		    public def setPayloadClass(PayloadClass pc) {
		                              ^


setPayloadClass:
line: 86 [0x0] 0:	movl 1
         [0x1] 1:	pushobj
         [0x2] 2:	movl 0
         [0x3] 3:	movn #4
         [0x4] 4:	popobj
         [0x5] 5:	ret

func:@1057 [std#ArrayList<app#Ast>.size] in file: lib/support//0.2.587//ArrayList.sharp:94:20: note:  
		    public def size() : var {
		                   ^


size:
line: 94 [0x0] 0:	movl 0
         [0x1] 1:	movn #3
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@1058 [std#ArrayList<app#Ast>.empty] in file: lib/support//0.2.587//ArrayList.sharp:102:21: note:  
		    public def empty() : var {
		                    ^


empty:
line: 102 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movi #0, ebx
          [0x8] 8:	movr egx, ebx
          [0x9] 9:	loadval ebx
          [0xa] 10:	test ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	return_val cmt
          [0xd] 13:	ret

func:@1059 [std#ArrayList<app#Ast>.toArray] in file: lib/support//0.2.587//ArrayList.sharp:111:23: note:  
		    public def toArray() : T[] {
		                      ^


toArray:
line: 111 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movi #0, ebx
          [0x8] 8:	movr egx, ebx
          [0x9] 9:	loadval ebx
          [0xa] 10:	test ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	movi #19, adx
          [0xe] 14:	ifne
line: 111 [0xf] 15:	movl 0
          [0x10] 16:	del
          [0x11] 17:	ret
          [0x12] 18:	nop
          [0x13] 19:	nop
line: 112 [0x14] 20:	movl 0
          [0x15] 21:	movn #0
          [0x16] 22:	pushobj
          [0x17] 23:	movl 0
          [0x18] 24:	movn #3
          [0x19] 25:	movi #0, adx
          [0x1b] 27:	iaload_2 ebx, adx
          [0x1c] 28:	rstore ebx
          [0x1d] 29:	call @619 // <std#__SRT_Global.copyOf(object,var)>
          [0x1e] 30:	movsl #0
          [0x1f] 31:	movi #56, cmt
          [0x21] 33:	cast cmt
          [0x22] 34:	movsl #0
          [0x23] 35:	returnobj
          [0x24] 36:	ret

func:@1060 [std#ArrayList<app#Ast>.get] in file: lib/support//0.2.587//ArrayList.sharp:120:19: note:  
		    public def get(var index) : T {
		                  ^


get:
line: 120 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gte ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movi #21, adx
          [0xb] 11:	ifne
line: 121 [0xc] 12:	new_class @13 // std#IndexOutOfBoundsException
          [0xd] 13:	movl 0
          [0xe] 14:	pushobj
          [0xf] 15:	loadl ebx, fp+1
          [0x10] 16:	rstore ebx
          [0x11] 17:	call @1072 // <std#ArrayList<app#Ast>.outOfBoundsMsg(var)>
          [0x12] 18:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x13] 19:	throw 
          [0x14] 20:	nop
          [0x15] 21:	nop
line: 123 [0x16] 22:	movl 0
          [0x17] 23:	movn #0
          [0x18] 24:	loadl ebx, fp+1
          [0x19] 25:	chklen ebx
          [0x1a] 26:	movnd ebx
          [0x1b] 27:	returnobj
          [0x1c] 28:	ret

func:@1061 [std#ArrayList<app#Ast>.last] in file: lib/support//0.2.587//ArrayList.sharp:131:20: note:  
		    public def last() : T {
		                   ^


last:
line: 131 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	movi #1, ebx
          [0x4] 4:	rstore ebx
          [0x5] 5:	movl 0
          [0x6] 6:	movn #3
          [0x7] 7:	movi #0, adx
          [0x9] 9:	chklen adx
          [0xa] 10:	iaload_2 ebx, adx
          [0xb] 11:	loadval egx
          [0xc] 12:	sub ebx, egx -> ebx
          [0xe] 14:	rstore ebx
          [0xf] 15:	call @1060 // <std#ArrayList<app#Ast>.get(var)>
          [0x10] 16:	movsl #0
          [0x11] 17:	returnobj
          [0x12] 18:	ret

func:@1062 [std#ArrayList<app#Ast>.set] in file: lib/support//0.2.587//ArrayList.sharp:140:19: note:  
		    public def set(var index, T element) : T {
		                  ^


set:
line: 140 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gte ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movi #21, adx
          [0xb] 11:	ifne
line: 141 [0xc] 12:	new_class @13 // std#IndexOutOfBoundsException
          [0xd] 13:	movl 0
          [0xe] 14:	pushobj
          [0xf] 15:	loadl ebx, fp+1
          [0x10] 16:	rstore ebx
          [0x11] 17:	call @1072 // <std#ArrayList<app#Ast>.outOfBoundsMsg(var)>
          [0x12] 18:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x13] 19:	throw 
          [0x14] 20:	nop
          [0x15] 21:	nop
line: 143 [0x16] 22:	movl 0
          [0x17] 23:	movn #0
          [0x18] 24:	loadl ebx, fp+1
          [0x19] 25:	chklen ebx
          [0x1a] 26:	movnd ebx
          [0x1b] 27:	pushobj
          [0x1c] 28:	movl 3
          [0x1d] 29:	popobj
line: 144 [0x1e] 30:	movl 2
          [0x1f] 31:	pushobj
          [0x20] 32:	movl 0
          [0x21] 33:	movn #0
          [0x22] 34:	loadl ebx, fp+1
          [0x23] 35:	chklen ebx
          [0x24] 36:	movnd ebx
          [0x25] 37:	popobj
line: 145 [0x26] 38:	movl 3
          [0x27] 39:	returnobj
          [0x28] 40:	ret

func:@1063 [std#ArrayList<app#Ast>.expand] in file: lib/support//0.2.587//ArrayList.sharp:155:23: note:  
		    private def expand() {
		                      ^


expand:
line: 155 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	movn #4
          [0x5] 5:	pushobj
          [0x6] 6:	call @78 // <std#Enum.getValue()>
          [0x7] 7:	movl 0
          [0x8] 8:	movn #0
          [0x9] 9:	sizeof ebx
          [0xa] 10:	loadval ecx
          [0xb] 11:	shr ebx, ecx -> ebx
          [0xd] 13:	rstore ebx
          [0xe] 14:	movl 0
          [0xf] 15:	movn #0
          [0x10] 16:	sizeof ebx
          [0x11] 17:	loadval ecx
          [0x12] 18:	add ebx, ecx -> ebx
          [0x14] 20:	rstore ebx
          [0x15] 21:	movi #20, ebx
          [0x17] 23:	rstore ebx
          [0x18] 24:	loadval ebx
          [0x19] 25:	loadval ecx
          [0x1a] 26:	add ebx, ecx -> ebx
          [0x1c] 28:	rstore ebx
          [0x1d] 29:	call @622 // <std#__SRT_Global.realloc(object,var)>
          [0x1e] 30:	ret

func:@1064 [std#ArrayList<app#Ast>.shrink] in file: lib/support//0.2.587//ArrayList.sharp:162:23: note:  
		    private def shrink() {
		                      ^


shrink:
line: 162 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	sizeof ebx
          [0x3] 3:	movr egx, ebx
          [0x4] 4:	movl 0
          [0x5] 5:	movn #3
          [0x6] 6:	movi #0, adx
          [0x8] 8:	chklen adx
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	lte ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	cmp ebx, 1
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	skne 16 // pc = 30
          [0xf] 15:	istore 1
          [0x10] 16:	movi #0, ebx
          [0x12] 18:	movr egx, ebx
          [0x13] 19:	movl 0
          [0x14] 20:	movn #3
          [0x15] 21:	movi #0, adx
          [0x17] 23:	chklen adx
          [0x18] 24:	iaload_2 ebx, adx
          [0x19] 25:	gt ebx, egx
          [0x1a] 26:	movr ebx, cmt
          [0x1b] 27:	loadval ecx
          [0x1c] 28:	and ecx, ebx
          [0x1d] 29:	movr ebx, cmt
          [0x1e] 30:	movr cmt, ebx
          [0x1f] 31:	movi #79, adx
          [0x21] 33:	ifne
line: 163 [0x22] 34:	movl 0
          [0x23] 35:	movn #3
          [0x24] 36:	movi #0, adx
          [0x26] 38:	chklen adx
          [0x27] 39:	iaload_2 ebx, adx
          [0x28] 40:	dec ebx
          [0x29] 41:	rmov adx, ebx
          [0x2a] 42:	inc ebx
line: 165 [0x2b] 43:	movl 0
          [0x2c] 44:	movn #0
          [0x2d] 45:	sizeof ebx
          [0x2e] 46:	rstore ebx
          [0x2f] 47:	movi #0, ebx
          [0x31] 49:	movr egx, ebx
          [0x32] 50:	loadval ebx
          [0x33] 51:	test ebx, egx
          [0x34] 52:	movr ebx, cmt
          [0x35] 53:	movr ebx, cmt
          [0x36] 54:	skpe 15 // pc = 69
          [0x37] 55:	movl 0
          [0x38] 56:	movn #3
          [0x39] 57:	movi #0, adx
          [0x3b] 59:	iaload_2 ebx, adx
          [0x3c] 60:	rstore ebx
          [0x3d] 61:	movi #0, ebx
          [0x3f] 63:	movr egx, ebx
          [0x40] 64:	loadval ebx
          [0x41] 65:	test ebx, egx
          [0x42] 66:	movr ebx, cmt
          [0x43] 67:	cmp ebx, 1
          [0x44] 68:	movr ebx, cmt
          [0x45] 69:	movr cmt, ebx
          [0x46] 70:	movi #77, adx
          [0x48] 72:	ifne
line: 166 [0x49] 73:	movl 0
          [0x4a] 74:	pushobj
          [0x4b] 75:	call @1071 // <std#ArrayList<app#Ast>.clear()>
          [0x4c] 76:	nop
          [0x4d] 77:	nop
          [0x4e] 78:	nop
          [0x4f] 79:	nop
          [0x50] 80:	ret

func:@1065 [std#ArrayList<app#Ast>.addAll] in file: lib/support//0.2.587//ArrayList.sharp:178:23: note:  
		     public def addAll(ArrayList<T> lst) {
		                      ^


addAll:
line: 178 [0x0] 0:	movl 1
          [0x1] 1:	pushobj
          [0x2] 2:	call @1070 // <std#ArrayList<app#Ast>.data()>
          [0x3] 3:	movl 2
          [0x4] 4:	popobj
line: 179 [0x5] 5:	movl 2
          [0x6] 6:	pushobj
          [0x7] 7:	movl 2
          [0x8] 8:	sizeof ebx
          [0x9] 9:	rstore ebx
          [0xa] 10:	call @619 // <std#__SRT_Global.copyOf(object,var)>
          [0xb] 11:	movsl #0
          [0xc] 12:	movi #56, cmt
          [0xe] 14:	cast cmt
          [0xf] 15:	movl 0
          [0x10] 16:	movn #0
          [0x11] 17:	popobj
line: 180 [0x12] 18:	movl 0
          [0x13] 19:	movn #0
          [0x14] 20:	sizeof ebx
          [0x15] 21:	nop
          [0x16] 22:	rstore ebx
          [0x17] 23:	movl 0
          [0x18] 24:	movn #3
          [0x19] 25:	movi #0, adx
          [0x1b] 27:	loadval ecx
          [0x1c] 28:	rmov adx, ecx
          [0x1d] 29:	ret

func:@1066 [std#ArrayList<app#Ast>.add] in file: lib/support//0.2.587//ArrayList.sharp:190:20: note:  
		     public def add(T e) {
		                   ^


add:
line: 190 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	sizeof ebx
          [0x3] 3:	movr egx, ebx
          [0x4] 4:	movl 0
          [0x5] 5:	movn #3
          [0x6] 6:	movi #0, adx
          [0x8] 8:	chklen adx
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	gte ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	movi #19, adx
          [0xe] 14:	ifne
line: 191 [0xf] 15:	movl 0
          [0x10] 16:	pushobj
          [0x11] 17:	call @1063 // <std#ArrayList<app#Ast>.expand()>
          [0x12] 18:	nop
          [0x13] 19:	nop
line: 192 [0x14] 20:	movl 1
          [0x15] 21:	pushobj
          [0x16] 22:	movl 0
          [0x17] 23:	movn #0
          [0x18] 24:	pushobj
          [0x19] 25:	movl 0
          [0x1a] 26:	movn #3
          [0x1b] 27:	movi #0, adx
          [0x1d] 29:	chklen adx
          [0x1e] 30:	iaload_2 ebx, adx
          [0x1f] 31:	inc ebx
          [0x20] 32:	rmov adx, ebx
          [0x21] 33:	dec ebx
          [0x22] 34:	movsl #0
          [0x23] 35:	chklen ebx
          [0x24] 36:	movnd ebx
          [0x25] 37:	pop
          [0x26] 38:	popobj
          [0x27] 39:	ret

func:@1067 [std#ArrayList<app#Ast>.popBack] in file: lib/support//0.2.587//ArrayList.sharp:203:24: note:  
		     public def popBack() {
		                       ^


popBack:
line: 203 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	call @1064 // <std#ArrayList<app#Ast>.shrink()>
          [0x3] 3:	ret

func:@1068 [std#ArrayList<app#Ast>.insert] in file: lib/support//0.2.587//ArrayList.sharp:213:23: note:  
		     public def insert(var pos, T value) {
		                      ^


insert:
line: 213 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gt ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	skpe 9 // pc = 19
          [0xb] 11:	movi #0, ebx
          [0xd] 13:	movr egx, ebx
          [0xe] 14:	loadl ebx, fp+1
          [0xf] 15:	lt ebx, egx
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	cmp ebx, 1
          [0x12] 18:	movr ebx, cmt
          [0x13] 19:	movr cmt, ebx
          [0x14] 20:	movi #32, adx
          [0x16] 22:	ifne
line: 214 [0x17] 23:	new_class @13 // std#IndexOutOfBoundsException
          [0x18] 24:	movl 0
          [0x19] 25:	pushobj
          [0x1a] 26:	loadl ebx, fp+1
          [0x1b] 27:	rstore ebx
          [0x1c] 28:	call @1072 // <std#ArrayList<app#Ast>.outOfBoundsMsg(var)>
          [0x1d] 29:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x1e] 30:	throw 
          [0x1f] 31:	nop
          [0x20] 32:	nop
line: 216 [0x21] 33:	movl 0
          [0x22] 34:	movn #3
          [0x23] 35:	movi #0, adx
          [0x25] 37:	iaload_2 ebx, adx
          [0x26] 38:	rstore ebx
          [0x27] 39:	movi #0, ebx
          [0x29] 41:	movr egx, ebx
          [0x2a] 42:	loadval ebx
          [0x2b] 43:	test ebx, egx
          [0x2c] 44:	movr ebx, cmt
          [0x2d] 45:	movi #54, adx
          [0x2f] 47:	ifne
line: 217 [0x30] 48:	movl 0
          [0x31] 49:	pushobj
          [0x32] 50:	movl 2
          [0x33] 51:	pushobj
          [0x34] 52:	call @1066 // <std#ArrayList<app#Ast>.add(app#Ast)>
          [0x35] 53:	goto @140
line: 219 [0x36] 54:	movl 0
          [0x37] 55:	movn #0
          [0x38] 56:	sizeof ebx
          [0x39] 57:	movr egx, ebx
          [0x3a] 58:	movl 0
          [0x3b] 59:	movn #3
          [0x3c] 60:	movi #0, adx
          [0x3e] 62:	chklen adx
          [0x3f] 63:	iaload_2 ebx, adx
          [0x40] 64:	gte ebx, egx
          [0x41] 65:	movr ebx, cmt
          [0x42] 66:	movi #73, adx
          [0x44] 68:	ifne
line: 220 [0x45] 69:	movl 0
          [0x46] 70:	pushobj
          [0x47] 71:	call @1063 // <std#ArrayList<app#Ast>.expand()>
          [0x48] 72:	nop
          [0x49] 73:	nop
line: 221 [0x4a] 74:	movl 0
          [0x4b] 75:	movn #3
          [0x4c] 76:	movi #0, adx
          [0x4e] 78:	chklen adx
          [0x4f] 79:	iaload_2 ebx, adx
          [0x50] 80:	inc ebx
          [0x51] 81:	rmov adx, ebx
          [0x52] 82:	dec ebx
line: 222 [0x53] 83:	movi #1, ebx
          [0x55] 85:	rstore ebx
          [0x56] 86:	movl 0
          [0x57] 87:	movn #3
          [0x58] 88:	movi #0, adx
          [0x5a] 90:	chklen adx
          [0x5b] 91:	iaload_2 ebx, adx
          [0x5c] 92:	loadval egx
          [0x5d] 93:	sub ebx, egx -> ebx
          [0x5f] 95:	rstore ebx
          [0x60] 96:	loadval ebx
          [0x61] 97:	smovr_2 ebx, fp+3
          [0x62] 98:	loadl ebx, fp+1
          [0x63] 99:	movr egx, ebx
          [0x64] 100:	loadl ebx, fp+3
          [0x65] 101:	gt ebx, egx
          [0x66] 102:	movr ebx, cmt
          [0x67] 103:	movi #131, adx
          [0x69] 105:	ifne
line: 223 [0x6a] 106:	movl 0
          [0x6b] 107:	movn #0
          [0x6c] 108:	movi #1, ebx
          [0x6e] 110:	rstore ebx
          [0x6f] 111:	loadl ebx, fp+3
          [0x70] 112:	loadval egx
          [0x71] 113:	sub ebx, egx -> ebx
          [0x73] 115:	rstore ebx
          [0x74] 116:	loadval ebx
          [0x75] 117:	chklen ebx
          [0x76] 118:	movnd ebx
          [0x77] 119:	pushobj
          [0x78] 120:	movl 0
          [0x79] 121:	movn #0
          [0x7a] 122:	loadl ebx, fp+3
          [0x7b] 123:	chklen ebx
          [0x7c] 124:	movnd ebx
          [0x7d] 125:	popobj
          [0x7e] 126:	loadl ebx, fp+3
          [0x7f] 127:	movi #1, ecx
          [0x81] 129:	subl ecx, @3
          [0x82] 130:	goto @98
line: 224 [0x83] 131:	movl 2
          [0x84] 132:	pushobj
          [0x85] 133:	movl 0
          [0x86] 134:	movn #0
          [0x87] 135:	loadl ebx, fp+1
          [0x88] 136:	chklen ebx
          [0x89] 137:	movnd ebx
          [0x8a] 138:	popobj
          [0x8b] 139:	nop
          [0x8c] 140:	nop
          [0x8d] 141:	ret

func:@1069 [std#ArrayList<app#Ast>.remove] in file: lib/support//0.2.587//ArrayList.sharp:236:23: note:  
		     public def remove(var pos) {
		                      ^


remove:
line: 236 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gt ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	skpe 9 // pc = 19
          [0xb] 11:	movi #0, ebx
          [0xd] 13:	movr egx, ebx
          [0xe] 14:	loadl ebx, fp+1
          [0xf] 15:	lt ebx, egx
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	cmp ebx, 1
          [0x12] 18:	movr ebx, cmt
          [0x13] 19:	movr cmt, ebx
          [0x14] 20:	movi #32, adx
          [0x16] 22:	ifne
line: 237 [0x17] 23:	new_class @13 // std#IndexOutOfBoundsException
          [0x18] 24:	movl 0
          [0x19] 25:	pushobj
          [0x1a] 26:	loadl ebx, fp+1
          [0x1b] 27:	rstore ebx
          [0x1c] 28:	call @1072 // <std#ArrayList<app#Ast>.outOfBoundsMsg(var)>
          [0x1d] 29:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x1e] 30:	throw 
          [0x1f] 31:	nop
          [0x20] 32:	nop
line: 239 [0x21] 33:	movl 0
          [0x22] 34:	movn #3
          [0x23] 35:	movi #0, adx
          [0x25] 37:	iaload_2 ebx, adx
          [0x26] 38:	rstore ebx
          [0x27] 39:	movi #1, ebx
          [0x29] 41:	movr egx, ebx
          [0x2a] 42:	loadval ebx
          [0x2b] 43:	test ebx, egx
          [0x2c] 44:	movr ebx, cmt
          [0x2d] 45:	movi #58, adx
          [0x2f] 47:	ifne
line: 240 [0x30] 48:	movl 0
          [0x31] 49:	movn #3
          [0x32] 50:	movi #0, adx
          [0x34] 52:	chklen adx
          [0x35] 53:	iaload_2 ebx, adx
          [0x36] 54:	dec ebx
          [0x37] 55:	rmov adx, ebx
          [0x38] 56:	inc ebx
          [0x39] 57:	goto @158
          [0x3a] 58:	movl 0
          [0x3b] 59:	movn #3
          [0x3c] 60:	movi #0, adx
          [0x3e] 62:	iaload_2 ebx, adx
          [0x3f] 63:	rstore ebx
          [0x40] 64:	movi #2, ebx
          [0x42] 66:	movr egx, ebx
          [0x43] 67:	loadval ebx
          [0x44] 68:	test ebx, egx
          [0x45] 69:	movr ebx, cmt
          [0x46] 70:	movi #104, adx
          [0x48] 72:	ifne
line: 243 [0x49] 73:	loadl ebx, fp+1
          [0x4a] 74:	rstore ebx
          [0x4b] 75:	movi #0, ebx
          [0x4d] 77:	movr egx, ebx
          [0x4e] 78:	loadval ebx
          [0x4f] 79:	test ebx, egx
          [0x50] 80:	movr ebx, cmt
          [0x51] 81:	movi #99, adx
          [0x53] 83:	ifne
line: 244 [0x54] 84:	movl 0
          [0x55] 85:	movn #0
          [0x56] 86:	movi #1, ebx
          [0x58] 88:	chklen ebx
          [0x59] 89:	movnd ebx
          [0x5a] 90:	pushobj
          [0x5b] 91:	movl 0
          [0x5c] 92:	movn #0
          [0x5d] 93:	movi #0, ebx
          [0x5f] 95:	chklen ebx
          [0x60] 96:	movnd ebx
          [0x61] 97:	popobj
          [0x62] 98:	nop
          [0x63] 99:	nop
line: 246 [0x64] 100:	movl 0
          [0x65] 101:	pushobj
          [0x66] 102:	call @1064 // <std#ArrayList<app#Ast>.shrink()>
          [0x67] 103:	goto @158
line: 248 [0x68] 104:	movi #1, ebx
          [0x6a] 106:	rstore ebx
          [0x6b] 107:	movl 0
          [0x6c] 108:	movn #3
          [0x6d] 109:	movi #0, adx
          [0x6f] 111:	chklen adx
          [0x70] 112:	iaload_2 ebx, adx
          [0x71] 113:	loadval egx
          [0x72] 114:	sub ebx, egx -> ebx
          [0x74] 116:	rstore ebx
          [0x75] 117:	loadval ebx
          [0x76] 118:	smovr_2 ebx, fp+2
line: 249 [0x77] 119:	loadl ebx, fp+1
          [0x78] 120:	smovr_2 ebx, fp+3
          [0x79] 121:	loadl ebx, fp+2
          [0x7a] 122:	movr egx, ebx
          [0x7b] 123:	loadl ebx, fp+3
          [0x7c] 124:	lt ebx, egx
          [0x7d] 125:	movr ebx, cmt
          [0x7e] 126:	movi #154, adx
          [0x80] 128:	ifne
line: 250 [0x81] 129:	movl 0
          [0x82] 130:	movn #0
          [0x83] 131:	movi #1, ebx
          [0x85] 133:	rstore ebx
          [0x86] 134:	loadl ebx, fp+3
          [0x87] 135:	loadval egx
          [0x88] 136:	add ebx, egx -> ebx
          [0x8a] 138:	rstore ebx
          [0x8b] 139:	loadval ebx
          [0x8c] 140:	chklen ebx
          [0x8d] 141:	movnd ebx
          [0x8e] 142:	pushobj
          [0x8f] 143:	movl 0
          [0x90] 144:	movn #0
          [0x91] 145:	loadl ebx, fp+3
          [0x92] 146:	chklen ebx
          [0x93] 147:	movnd ebx
          [0x94] 148:	popobj
          [0x95] 149:	loadl ebx, fp+3
          [0x96] 150:	movi #1, ecx
          [0x98] 152:	addl ecx, @3
          [0x99] 153:	goto @121
line: 252 [0x9a] 154:	movl 0
          [0x9b] 155:	pushobj
          [0x9c] 156:	call @1064 // <std#ArrayList<app#Ast>.shrink()>
          [0x9d] 157:	nop
          [0x9e] 158:	nop
          [0x9f] 159:	ret

func:@1070 [std#ArrayList<app#Ast>.data] in file: lib/support//0.2.587//ArrayList.sharp:260:21: note:  
		     public def data() : T[] {
		                    ^


data:
line: 260 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	returnobj
          [0x3] 3:	ret

func:@1071 [std#ArrayList<app#Ast>.clear] in file: lib/support//0.2.587//ArrayList.sharp:268:22: note:  
		     public def clear() {
		                     ^


clear:
line: 269 [0x0] 0:	movi #10, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #0
          [0x5] 5:	sizeof ebx
          [0x6] 6:	loadval ecx
          [0x7] 7:	gt ebx, ecx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movi #19, adx
          [0xb] 11:	ifne
line: 270 [0xc] 12:	movi #10, ebx
          [0xe] 14:	new_classarray ebx  // app#Ast[]
          [0xf] 15:	movl 0
          [0x10] 16:	movn #0
          [0x11] 17:	popobj
          [0x12] 18:	nop
          [0x13] 19:	nop
line: 273 [0x14] 20:	movi #0, ebx
          [0x16] 22:	nop
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 0
          [0x19] 25:	movn #3
          [0x1a] 26:	movi #0, adx
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	rmov adx, ecx
          [0x1e] 30:	ret

func:@1072 [std#ArrayList<app#Ast>.outOfBoundsMsg] in file: lib/support//0.2.587//ArrayList.sharp:282:31: note:  
		    private def outOfBoundsMsg(var index) : string {
		                              ^


outOfBoundsMsg:
line: 282 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	newstr @224 // "Index: "
          [0x2] 2:	call @558 // <std#string.string(var[])>
          [0x3] 3:	loadl ebx, fp+1
          [0x4] 4:	rstore ebx
          [0x5] 5:	call @579 // <std#string.$operator+(var)>
          [0x6] 6:	newstr @225 // ", size: "
          [0x7] 7:	call @572 // <std#string.$operator+(var[])>
          [0x8] 8:	movl 0
          [0x9] 9:	movn #3
          [0xa] 10:	movi #0, adx
          [0xc] 12:	iaload_2 ebx, adx
          [0xd] 13:	rstore ebx
          [0xe] 14:	call @579 // <std#string.$operator+(var)>
          [0xf] 15:	movsl #0
          [0x10] 16:	returnobj
          [0x11] 17:	ret

func:@1073 [std#Dictionary<var,app#Ast>.Dictionary] in file: lib/support//0.2.587//Dictionary.sharp:11:22: note:  
		    public Dictionary() {
		                     ^


Dictionary:
line: 11 [0x0] 0:	new_class @82 // std#ArrayList<var>
         [0x1] 1:	call @1089 // <std#ArrayList<var>.ArrayList()>
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	popobj
line: 12 [0x5] 5:	new_class @80 // std#ArrayList<app#Ast>
         [0x6] 6:	call @1052 // <std#ArrayList<app#Ast>.ArrayList()>
         [0x7] 7:	movl 0
         [0x8] 8:	movn #1
         [0x9] 9:	popobj
         [0xa] 10:	movl 0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@1074 [std#Dictionary<var,app#Ast>.size] in file: lib/support//0.2.587//Dictionary.sharp:20:20: note:  
		    public def size() : var {
		                   ^


size:
line: 20 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	call @1094 // <std#ArrayList<var>.size()>
         [0x4] 4:	loadval ebx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@1075 [std#Dictionary<var,app#Ast>.empty] in file: lib/support//0.2.587//Dictionary.sharp:30:21: note:  
		    public def empty() : var {
		                    ^


empty:
line: 30 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	call @1095 // <std#ArrayList<var>.empty()>
         [0x4] 4:	loadval ebx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@1076 [std#Dictionary<var,app#Ast>.getKeys] in file: lib/support//0.2.587//Dictionary.sharp:40:24: note:  
		     public def getKeys() : TKey[] {
		                       ^


getKeys:
line: 40 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	call @1096 // <std#ArrayList<var>.toArray()>
         [0x4] 4:	movsl #0
         [0x5] 5:	returnobj
         [0x6] 6:	ret

func:@1077 [std#Dictionary<var,app#Ast>.lastKey] in file: lib/support//0.2.587//Dictionary.sharp:51:25: note:  
		      public def lastKey() : TKey {
		                        ^


lastKey:
line: 51 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	call @1098 // <std#ArrayList<var>.last()>
         [0x4] 4:	loadval ebx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@1078 [std#Dictionary<var,app#Ast>.lastValue] in file: lib/support//0.2.587//Dictionary.sharp:62:27: note:  
		      public def lastValue() : TValue {
		                          ^


lastValue:
line: 62 [0x0] 0:	movl 0
         [0x1] 1:	movn #1
         [0x2] 2:	pushobj
         [0x3] 3:	call @1061 // <std#ArrayList<app#Ast>.last()>
         [0x4] 4:	movsl #0
         [0x5] 5:	returnobj
         [0x6] 6:	ret

func:@1079 [std#Dictionary<var,app#Ast>.elements] in file: lib/support//0.2.587//Dictionary.sharp:72:25: note:  
		     public def elements() : TValue[] {
		                        ^


elements:
line: 72 [0x0] 0:	movl 0
         [0x1] 1:	movn #1
         [0x2] 2:	pushobj
         [0x3] 3:	call @1059 // <std#ArrayList<app#Ast>.toArray()>
         [0x4] 4:	movsl #0
         [0x5] 5:	returnobj
         [0x6] 6:	ret

func:@1080 [std#Dictionary<var,app#Ast>.get] in file: lib/support//0.2.587//Dictionary.sharp:84:20: note:  
		     public def get(TKey key) : TValue {
		                   ^


get:
line: 84 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	call @1107 // <std#ArrayList<var>.data()>
         [0x4] 4:	movl 2
         [0x5] 5:	popobj
line: 85 [0x6] 6:	istorel 0, fp+3
line: 86 [0x8] 8:	movi #0, ebx
         [0xa] 10:	rstore ebx
         [0xb] 11:	movl 2
         [0xc] 12:	smov ebx, sp+0
         [0xd] 13:	sizeof egx
         [0xe] 14:	lt ebx, egx
         [0xf] 15:	movi #49, adx
         [0x11] 17:	ifne
         [0x12] 18:	iaload_2 ebx, ebx
         [0x13] 19:	smovr_2 ebx, fp+4
line: 87 [0x14] 20:	loadl ebx, fp+4
         [0x15] 21:	rstore ebx
         [0x16] 22:	loadl ebx, fp+1
         [0x17] 23:	movr egx, ebx
         [0x18] 24:	loadval ebx
         [0x19] 25:	test ebx, egx
         [0x1a] 26:	movr ebx, cmt
         [0x1b] 27:	movi #40, adx
         [0x1d] 29:	ifne
line: 88 [0x1e] 30:	movl 0
         [0x1f] 31:	movn #1
         [0x20] 32:	pushobj
         [0x21] 33:	loadl ebx, fp+3
         [0x22] 34:	rstore ebx
         [0x23] 35:	call @1060 // <std#ArrayList<app#Ast>.get(var)>
         [0x24] 36:	movsl #0
         [0x25] 37:	returnobj
         [0x26] 38:	ret
         [0x27] 39:	nop
         [0x28] 40:	nop
line: 89 [0x29] 41:	loadl ebx, fp+3
         [0x2a] 42:	movi #1, ecx
         [0x2c] 44:	addl ecx, @3
         [0x2d] 45:	smov ebx, sp+0
         [0x2e] 46:	inc ebx
         [0x2f] 47:	smovr ebx, sp+0
         [0x30] 48:	goto @11
         [0x31] 49:	pop
line: 92 [0x32] 50:	movl 5
         [0x33] 51:	del
line: 93 [0x34] 52:	movl 5
         [0x35] 53:	returnobj
         [0x36] 54:	ret

func:@1081 [std#Dictionary<var,app#Ast>.valueAt] in file: lib/support//0.2.587//Dictionary.sharp:105:24: note:  
		     public def valueAt(var index) : TValue {
		                       ^


valueAt:
line: 105 [0x0] 0:	movl 0
          [0x1] 1:	movn #1
          [0x2] 2:	pushobj
          [0x3] 3:	loadl ebx, fp+1
          [0x4] 4:	rstore ebx
          [0x5] 5:	call @1060 // <std#ArrayList<app#Ast>.get(var)>
          [0x6] 6:	movsl #0
          [0x7] 7:	returnobj
          [0x8] 8:	ret

func:@1082 [std#Dictionary<var,app#Ast>.keyAt] in file: lib/support//0.2.587//Dictionary.sharp:118:22: note:  
		     public def keyAt(var index) : TKey {
		                     ^


keyAt:
line: 118 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	loadl ebx, fp+1
          [0x4] 4:	rstore ebx
          [0x5] 5:	call @1097 // <std#ArrayList<var>.get(var)>
          [0x6] 6:	loadval ebx
          [0x7] 7:	return_val ebx
          [0x8] 8:	ret

func:@1083 [std#Dictionary<var,app#Ast>.drop] in file: lib/support//0.2.587//Dictionary.sharp:130:21: note:  
		     public def drop() {
		                    ^


drop:
line: 130 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	call @1095 // <std#ArrayList<var>.empty()>
          [0x4] 4:	loadval cmt
          [0x5] 5:	movi #13, adx
          [0x7] 7:	ifne
line: 131 [0x8] 8:	new_class @11 // std#IllegalArgumentException
          [0x9] 9:	newstr @227 // "cannot delete key from empty list"
          [0xa] 10:	call @84 // <std#IllegalArgumentException.IllegalArgumentException(var[])>
          [0xb] 11:	throw 
          [0xc] 12:	nop
          [0xd] 13:	nop
line: 133 [0xe] 14:	movl 0
          [0xf] 15:	movn #1
          [0x10] 16:	pushobj
          [0x11] 17:	call @1067 // <std#ArrayList<app#Ast>.popBack()>
line: 134 [0x12] 18:	movl 0
          [0x13] 19:	movn #0
          [0x14] 20:	pushobj
          [0x15] 21:	call @1104 // <std#ArrayList<var>.popBack()>
          [0x16] 22:	ret

func:@1084 [std#Dictionary<var,app#Ast>.getAll] in file: lib/support//0.2.587//Dictionary.sharp:145:23: note:  
		     public def getAll(TKey key) : TValue[] {
		                      ^


getAll:
line: 145 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	call @1107 // <std#ArrayList<var>.data()>
          [0x4] 4:	movl 2
          [0x5] 5:	popobj
line: 146 [0x6] 6:	new_class @80 // std#ArrayList<app#Ast>
          [0x7] 7:	call @1052 // <std#ArrayList<app#Ast>.ArrayList()>
          [0x8] 8:	movl 3
          [0x9] 9:	popobj
line: 147 [0xa] 10:	istorel 0, fp+4
line: 148 [0xc] 12:	movi #0, ebx
          [0xe] 14:	rstore ebx
          [0xf] 15:	movl 2
          [0x10] 16:	smov ebx, sp+0
          [0x11] 17:	sizeof egx
          [0x12] 18:	lt ebx, egx
          [0x13] 19:	movi #53, adx
          [0x15] 21:	ifne
          [0x16] 22:	iaload_2 ebx, ebx
          [0x17] 23:	smovr_2 ebx, fp+5
line: 149 [0x18] 24:	loadl ebx, fp+5
          [0x19] 25:	rstore ebx
          [0x1a] 26:	loadl ebx, fp+1
          [0x1b] 27:	movr egx, ebx
          [0x1c] 28:	loadval ebx
          [0x1d] 29:	test ebx, egx
          [0x1e] 30:	movr ebx, cmt
          [0x1f] 31:	movi #44, adx
          [0x21] 33:	ifne
line: 150 [0x22] 34:	movl 3
          [0x23] 35:	pushobj
          [0x24] 36:	movl 0
          [0x25] 37:	movn #1
          [0x26] 38:	pushobj
          [0x27] 39:	loadl ebx, fp+4
          [0x28] 40:	rstore ebx
          [0x29] 41:	call @1060 // <std#ArrayList<app#Ast>.get(var)>
          [0x2a] 42:	call @1066 // <std#ArrayList<app#Ast>.add(app#Ast)>
          [0x2b] 43:	nop
          [0x2c] 44:	nop
line: 151 [0x2d] 45:	loadl ebx, fp+4
          [0x2e] 46:	movi #1, ecx
          [0x30] 48:	addl ecx, @4
          [0x31] 49:	smov ebx, sp+0
          [0x32] 50:	inc ebx
          [0x33] 51:	smovr ebx, sp+0
          [0x34] 52:	goto @15
          [0x35] 53:	pop
line: 154 [0x36] 54:	movl 3
          [0x37] 55:	pushobj
          [0x38] 56:	call @1059 // <std#ArrayList<app#Ast>.toArray()>
          [0x39] 57:	movsl #0
          [0x3a] 58:	returnobj
          [0x3b] 59:	ret

func:@1085 [std#Dictionary<var,app#Ast>.put] in file: lib/support//0.2.587//Dictionary.sharp:168:20: note:  
		     public def put(TKey key, TValue value) {
		                   ^


put:
line: 168 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	loadl ebx, fp+1
          [0x4] 4:	rstore ebx
          [0x5] 5:	call @1103 // <std#ArrayList<var>.add(var)>
line: 169 [0x6] 6:	movl 0
          [0x7] 7:	movn #1
          [0x8] 8:	pushobj
          [0x9] 9:	movl 2
          [0xa] 10:	pushobj
          [0xb] 11:	call @1066 // <std#ArrayList<app#Ast>.add(app#Ast)>
          [0xc] 12:	ret

func:@1086 [std#Dictionary<var,app#Ast>.remove] in file: lib/support//0.2.587//Dictionary.sharp:179:23: note:  
		     public def remove(TKey key) {
		                      ^


remove:
line: 179 [0x0] 0:	istorel 0, fp+2
line: 180 [0x2] 2:	movl 0
          [0x3] 3:	movn #0
          [0x4] 4:	pushobj
          [0x5] 5:	call @1107 // <std#ArrayList<var>.data()>
          [0x6] 6:	movl 3
          [0x7] 7:	popobj
line: 181 [0x8] 8:	istorel 0, fp+4
          [0xa] 10:	movl 0
          [0xb] 11:	movn #0
          [0xc] 12:	pushobj
          [0xd] 13:	call @1094 // <std#ArrayList<var>.size()>
          [0xe] 14:	loadval egx
          [0xf] 15:	loadl ebx, fp+4
          [0x10] 16:	lt ebx, egx
          [0x11] 17:	movr ebx, cmt
          [0x12] 18:	movi #63, adx
          [0x14] 20:	ifne
line: 182 [0x15] 21:	loadl ebx, fp+1
          [0x16] 22:	rstore ebx
          [0x17] 23:	movl 3
          [0x18] 24:	loadl ebx, fp+4
          [0x19] 25:	chklen ebx
          [0x1a] 26:	iaload_2 ebx, ebx
          [0x1b] 27:	movr egx, ebx
          [0x1c] 28:	loadval ebx
          [0x1d] 29:	test ebx, egx
          [0x1e] 30:	movr ebx, cmt
          [0x1f] 31:	movi #57, adx
          [0x21] 33:	ifne
line: 183 [0x22] 34:	movl 0
          [0x23] 35:	movn #0
          [0x24] 36:	pushobj
          [0x25] 37:	loadl ebx, fp+4
          [0x26] 38:	rstore ebx
          [0x27] 39:	call @1106 // <std#ArrayList<var>.remove(var)>
line: 184 [0x28] 40:	movl 0
          [0x29] 41:	movn #1
          [0x2a] 42:	pushobj
          [0x2b] 43:	loadl ebx, fp+4
          [0x2c] 44:	rstore ebx
          [0x2d] 45:	call @1069 // <std#ArrayList<app#Ast>.remove(var)>
line: 186 [0x2e] 46:	loadl ebx, fp+4
          [0x2f] 47:	movi #1, ecx
          [0x31] 49:	subl ecx, @4
line: 187 [0x32] 50:	movl 0
          [0x33] 51:	movn #0
          [0x34] 52:	pushobj
          [0x35] 53:	call @1107 // <std#ArrayList<var>.data()>
          [0x36] 54:	movl 3
          [0x37] 55:	popobj
          [0x38] 56:	nop
          [0x39] 57:	nop
          [0x3a] 58:	loadl ebx, fp+4
          [0x3b] 59:	movi #1, ecx
          [0x3d] 61:	addl ecx, @4
          [0x3e] 62:	goto @10
          [0x3f] 63:	ret

func:@1087 [std#Dictionary<var,app#Ast>.removeAt] in file: lib/support//0.2.587//Dictionary.sharp:199:25: note:  
		     public def removeAt(var index) {
		                        ^


removeAt:
line: 199 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	loadl ebx, fp+1
          [0x4] 4:	rstore ebx
          [0x5] 5:	call @1106 // <std#ArrayList<var>.remove(var)>
line: 200 [0x6] 6:	movl 0
          [0x7] 7:	movn #1
          [0x8] 8:	pushobj
          [0x9] 9:	loadl ebx, fp+1
          [0xa] 10:	rstore ebx
          [0xb] 11:	call @1069 // <std#ArrayList<app#Ast>.remove(var)>
          [0xc] 12:	ret

func:@1088 [std#Dictionary<var,app#Ast>.indexof] in file: lib/support//0.2.587//Dictionary.sharp:209:24: note:  
		     public def indexof(TKey key) : var {
		                       ^


indexof:
line: 209 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	call @1107 // <std#ArrayList<var>.data()>
          [0x4] 4:	movl 2
          [0x5] 5:	popobj
line: 210 [0x6] 6:	istorel 0, fp+3
line: 211 [0x8] 8:	movi #0, ebx
          [0xa] 10:	rstore ebx
          [0xb] 11:	movl 2
          [0xc] 12:	smov ebx, sp+0
          [0xd] 13:	sizeof egx
          [0xe] 14:	lt ebx, egx
          [0xf] 15:	movi #43, adx
          [0x11] 17:	ifne
          [0x12] 18:	iaload_2 ebx, ebx
          [0x13] 19:	smovr_2 ebx, fp+4
line: 212 [0x14] 20:	loadl ebx, fp+4
          [0x15] 21:	rstore ebx
          [0x16] 22:	loadl ebx, fp+1
          [0x17] 23:	movr egx, ebx
          [0x18] 24:	loadval ebx
          [0x19] 25:	test ebx, egx
          [0x1a] 26:	movr ebx, cmt
          [0x1b] 27:	movi #34, adx
          [0x1d] 29:	ifne
line: 213 [0x1e] 30:	loadl ebx, fp+3
          [0x1f] 31:	return_val ebx
          [0x20] 32:	ret
          [0x21] 33:	nop
          [0x22] 34:	nop
line: 214 [0x23] 35:	loadl ebx, fp+3
          [0x24] 36:	movi #1, ecx
          [0x26] 38:	addl ecx, @3
          [0x27] 39:	smov ebx, sp+0
          [0x28] 40:	inc ebx
          [0x29] 41:	smovr ebx, sp+0
          [0x2a] 42:	goto @11
          [0x2b] 43:	pop
line: 217 [0x2c] 44:	movi #1, ebx
          [0x2e] 46:	imul ebx, #-1
          [0x2f] 47:	return_val ebx
          [0x30] 48:	ret

func:@1089 [std#ArrayList<var>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:45:21: note:  
		    public ArrayList() {
		                    ^


ArrayList:
line: 46 [0x0] 0:	movi #10, ebx
         [0x2] 2:	newarry ebx
         [0x3] 3:	movl 0
         [0x4] 4:	movn #0
         [0x5] 5:	popobj
line: 47 [0x6] 6:	movg @67 // @std#PayloadClass
         [0x7] 7:	movn #3
         [0x8] 8:	pushobj
         [0x9] 9:	movl 0
         [0xa] 10:	movn #4
         [0xb] 11:	popobj
         [0xc] 12:	movl 0
         [0xd] 13:	returnobj
         [0xe] 14:	ret

func:@1090 [std#ArrayList<var>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:55:21: note:  
		    public ArrayList(var startingCapacity) {
		                    ^


ArrayList:
line: 56 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	newarry ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	popobj
line: 57 [0x5] 5:	movg @67 // @std#PayloadClass
         [0x6] 6:	movn #3
         [0x7] 7:	pushobj
         [0x8] 8:	movl 0
         [0x9] 9:	movn #4
         [0xa] 10:	popobj
         [0xb] 11:	movl 0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@1091 [std#ArrayList<var>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:65:21: note:  
		    public ArrayList(var startingCapacity, PayloadClass pc) {
		                    ^


ArrayList:
line: 66 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	newarry ebx
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	popobj
line: 67 [0x5] 5:	movl 2
         [0x6] 6:	pushobj
         [0x7] 7:	movl 0
         [0x8] 8:	movn #4
         [0x9] 9:	popobj
         [0xa] 10:	movl 0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@1092 [std#ArrayList<var>.ArrayList] in file: lib/support//0.2.587//ArrayList.sharp:75:21: note:  
		    public ArrayList(PayloadClass pc) {
		                    ^


ArrayList:
line: 76 [0x0] 0:	movi #10, ebx
         [0x2] 2:	newarry ebx
         [0x3] 3:	movl 0
         [0x4] 4:	movn #0
         [0x5] 5:	popobj
line: 77 [0x6] 6:	movl 1
         [0x7] 7:	pushobj
         [0x8] 8:	movl 0
         [0x9] 9:	movn #4
         [0xa] 10:	popobj
         [0xb] 11:	movl 0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@1093 [std#ArrayList<var>.setPayloadClass] in file: lib/support//0.2.587//ArrayList.sharp:86:31: note:  
		    public def setPayloadClass(PayloadClass pc) {
		                              ^


setPayloadClass:
line: 86 [0x0] 0:	movl 1
         [0x1] 1:	pushobj
         [0x2] 2:	movl 0
         [0x3] 3:	movn #4
         [0x4] 4:	popobj
         [0x5] 5:	ret

func:@1094 [std#ArrayList<var>.size] in file: lib/support//0.2.587//ArrayList.sharp:94:20: note:  
		    public def size() : var {
		                   ^


size:
line: 94 [0x0] 0:	movl 0
         [0x1] 1:	movn #3
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@1095 [std#ArrayList<var>.empty] in file: lib/support//0.2.587//ArrayList.sharp:102:21: note:  
		    public def empty() : var {
		                    ^


empty:
line: 102 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movi #0, ebx
          [0x8] 8:	movr egx, ebx
          [0x9] 9:	loadval ebx
          [0xa] 10:	test ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	return_val cmt
          [0xd] 13:	ret

func:@1096 [std#ArrayList<var>.toArray] in file: lib/support//0.2.587//ArrayList.sharp:111:23: note:  
		    public def toArray() : T[] {
		                      ^


toArray:
line: 111 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movi #0, ebx
          [0x8] 8:	movr egx, ebx
          [0x9] 9:	loadval ebx
          [0xa] 10:	test ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	movi #19, adx
          [0xe] 14:	ifne
line: 111 [0xf] 15:	movl 0
          [0x10] 16:	del
          [0x11] 17:	ret
          [0x12] 18:	nop
          [0x13] 19:	nop
line: 112 [0x14] 20:	movl 0
          [0x15] 21:	movn #0
          [0x16] 22:	pushobj
          [0x17] 23:	movl 0
          [0x18] 24:	movn #3
          [0x19] 25:	movi #0, adx
          [0x1b] 27:	iaload_2 ebx, adx
          [0x1c] 28:	rstore ebx
          [0x1d] 29:	call @619 // <std#__SRT_Global.copyOf(object,var)>
          [0x1e] 30:	movsl #0
          [0x1f] 31:	vcast 1
          [0x20] 32:	movsl #0
          [0x21] 33:	returnobj
          [0x22] 34:	ret

func:@1097 [std#ArrayList<var>.get] in file: lib/support//0.2.587//ArrayList.sharp:120:19: note:  
		    public def get(var index) : T {
		                  ^


get:
line: 120 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gte ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movi #21, adx
          [0xb] 11:	ifne
line: 121 [0xc] 12:	new_class @13 // std#IndexOutOfBoundsException
          [0xd] 13:	movl 0
          [0xe] 14:	pushobj
          [0xf] 15:	loadl ebx, fp+1
          [0x10] 16:	rstore ebx
          [0x11] 17:	call @1109 // <std#ArrayList<var>.outOfBoundsMsg(var)>
          [0x12] 18:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x13] 19:	throw 
          [0x14] 20:	nop
          [0x15] 21:	nop
line: 123 [0x16] 22:	movl 0
          [0x17] 23:	movn #0
          [0x18] 24:	loadl ebx, fp+1
          [0x19] 25:	chklen ebx
          [0x1a] 26:	iaload_2 ebx, ebx
          [0x1b] 27:	return_val ebx
          [0x1c] 28:	ret

func:@1098 [std#ArrayList<var>.last] in file: lib/support//0.2.587//ArrayList.sharp:131:20: note:  
		    public def last() : T {
		                   ^


last:
line: 131 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	movi #1, ebx
          [0x4] 4:	rstore ebx
          [0x5] 5:	movl 0
          [0x6] 6:	movn #3
          [0x7] 7:	movi #0, adx
          [0x9] 9:	chklen adx
          [0xa] 10:	iaload_2 ebx, adx
          [0xb] 11:	loadval egx
          [0xc] 12:	sub ebx, egx -> ebx
          [0xe] 14:	rstore ebx
          [0xf] 15:	call @1097 // <std#ArrayList<var>.get(var)>
          [0x10] 16:	loadval ebx
          [0x11] 17:	return_val ebx
          [0x12] 18:	ret

func:@1099 [std#ArrayList<var>.set] in file: lib/support//0.2.587//ArrayList.sharp:140:19: note:  
		    public def set(var index, T element) : T {
		                  ^


set:
line: 140 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gte ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movi #21, adx
          [0xb] 11:	ifne
line: 141 [0xc] 12:	new_class @13 // std#IndexOutOfBoundsException
          [0xd] 13:	movl 0
          [0xe] 14:	pushobj
          [0xf] 15:	loadl ebx, fp+1
          [0x10] 16:	rstore ebx
          [0x11] 17:	call @1109 // <std#ArrayList<var>.outOfBoundsMsg(var)>
          [0x12] 18:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x13] 19:	throw 
          [0x14] 20:	nop
          [0x15] 21:	nop
line: 143 [0x16] 22:	movl 0
          [0x17] 23:	movn #0
          [0x18] 24:	loadl ebx, fp+1
          [0x19] 25:	chklen ebx
          [0x1a] 26:	iaload_2 ebx, ebx
          [0x1b] 27:	smovr_2 ebx, fp+3
line: 144 [0x1c] 28:	loadl ebx, fp+2
          [0x1d] 29:	rstore ebx
          [0x1e] 30:	movl 0
          [0x1f] 31:	movn #0
          [0x20] 32:	loadl ebx, fp+1
          [0x21] 33:	chklen ebx
          [0x22] 34:	loadval egx
          [0x23] 35:	rmov ebx, egx
line: 145 [0x24] 36:	loadl ebx, fp+3
          [0x25] 37:	return_val ebx
          [0x26] 38:	ret

func:@1100 [std#ArrayList<var>.expand] in file: lib/support//0.2.587//ArrayList.sharp:155:23: note:  
		    private def expand() {
		                      ^


expand:
line: 155 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	movn #4
          [0x5] 5:	pushobj
          [0x6] 6:	call @78 // <std#Enum.getValue()>
          [0x7] 7:	movl 0
          [0x8] 8:	movn #0
          [0x9] 9:	sizeof ebx
          [0xa] 10:	loadval ecx
          [0xb] 11:	shr ebx, ecx -> ebx
          [0xd] 13:	rstore ebx
          [0xe] 14:	movl 0
          [0xf] 15:	movn #0
          [0x10] 16:	sizeof ebx
          [0x11] 17:	loadval ecx
          [0x12] 18:	add ebx, ecx -> ebx
          [0x14] 20:	rstore ebx
          [0x15] 21:	movi #20, ebx
          [0x17] 23:	rstore ebx
          [0x18] 24:	loadval ebx
          [0x19] 25:	loadval ecx
          [0x1a] 26:	add ebx, ecx -> ebx
          [0x1c] 28:	rstore ebx
          [0x1d] 29:	call @622 // <std#__SRT_Global.realloc(object,var)>
          [0x1e] 30:	ret

func:@1101 [std#ArrayList<var>.shrink] in file: lib/support//0.2.587//ArrayList.sharp:162:23: note:  
		    private def shrink() {
		                      ^


shrink:
line: 162 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	sizeof ebx
          [0x3] 3:	movr egx, ebx
          [0x4] 4:	movl 0
          [0x5] 5:	movn #3
          [0x6] 6:	movi #0, adx
          [0x8] 8:	chklen adx
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	lte ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	cmp ebx, 1
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	skne 16 // pc = 30
          [0xf] 15:	istore 1
          [0x10] 16:	movi #0, ebx
          [0x12] 18:	movr egx, ebx
          [0x13] 19:	movl 0
          [0x14] 20:	movn #3
          [0x15] 21:	movi #0, adx
          [0x17] 23:	chklen adx
          [0x18] 24:	iaload_2 ebx, adx
          [0x19] 25:	gt ebx, egx
          [0x1a] 26:	movr ebx, cmt
          [0x1b] 27:	loadval ecx
          [0x1c] 28:	and ecx, ebx
          [0x1d] 29:	movr ebx, cmt
          [0x1e] 30:	movr cmt, ebx
          [0x1f] 31:	movi #79, adx
          [0x21] 33:	ifne
line: 163 [0x22] 34:	movl 0
          [0x23] 35:	movn #3
          [0x24] 36:	movi #0, adx
          [0x26] 38:	chklen adx
          [0x27] 39:	iaload_2 ebx, adx
          [0x28] 40:	dec ebx
          [0x29] 41:	rmov adx, ebx
          [0x2a] 42:	inc ebx
line: 165 [0x2b] 43:	movl 0
          [0x2c] 44:	movn #0
          [0x2d] 45:	sizeof ebx
          [0x2e] 46:	rstore ebx
          [0x2f] 47:	movi #0, ebx
          [0x31] 49:	movr egx, ebx
          [0x32] 50:	loadval ebx
          [0x33] 51:	test ebx, egx
          [0x34] 52:	movr ebx, cmt
          [0x35] 53:	movr ebx, cmt
          [0x36] 54:	skpe 15 // pc = 69
          [0x37] 55:	movl 0
          [0x38] 56:	movn #3
          [0x39] 57:	movi #0, adx
          [0x3b] 59:	iaload_2 ebx, adx
          [0x3c] 60:	rstore ebx
          [0x3d] 61:	movi #0, ebx
          [0x3f] 63:	movr egx, ebx
          [0x40] 64:	loadval ebx
          [0x41] 65:	test ebx, egx
          [0x42] 66:	movr ebx, cmt
          [0x43] 67:	cmp ebx, 1
          [0x44] 68:	movr ebx, cmt
          [0x45] 69:	movr cmt, ebx
          [0x46] 70:	movi #77, adx
          [0x48] 72:	ifne
line: 166 [0x49] 73:	movl 0
          [0x4a] 74:	pushobj
          [0x4b] 75:	call @1108 // <std#ArrayList<var>.clear()>
          [0x4c] 76:	nop
          [0x4d] 77:	nop
          [0x4e] 78:	nop
          [0x4f] 79:	nop
          [0x50] 80:	ret

func:@1102 [std#ArrayList<var>.addAll] in file: lib/support//0.2.587//ArrayList.sharp:178:23: note:  
		     public def addAll(ArrayList<T> lst) {
		                      ^


addAll:
line: 178 [0x0] 0:	movl 1
          [0x1] 1:	pushobj
          [0x2] 2:	call @1107 // <std#ArrayList<var>.data()>
          [0x3] 3:	movl 2
          [0x4] 4:	popobj
line: 179 [0x5] 5:	movl 2
          [0x6] 6:	pushobj
          [0x7] 7:	movl 2
          [0x8] 8:	sizeof ebx
          [0x9] 9:	rstore ebx
          [0xa] 10:	call @619 // <std#__SRT_Global.copyOf(object,var)>
          [0xb] 11:	movsl #0
          [0xc] 12:	vcast 1
          [0xd] 13:	movl 0
          [0xe] 14:	movn #0
          [0xf] 15:	popobj
line: 180 [0x10] 16:	movl 0
          [0x11] 17:	movn #0
          [0x12] 18:	sizeof ebx
          [0x13] 19:	nop
          [0x14] 20:	rstore ebx
          [0x15] 21:	movl 0
          [0x16] 22:	movn #3
          [0x17] 23:	movi #0, adx
          [0x19] 25:	loadval ecx
          [0x1a] 26:	rmov adx, ecx
          [0x1b] 27:	ret

func:@1103 [std#ArrayList<var>.add] in file: lib/support//0.2.587//ArrayList.sharp:190:20: note:  
		     public def add(T e) {
		                   ^


add:
line: 190 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	sizeof ebx
          [0x3] 3:	movr egx, ebx
          [0x4] 4:	movl 0
          [0x5] 5:	movn #3
          [0x6] 6:	movi #0, adx
          [0x8] 8:	chklen adx
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	gte ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	movi #19, adx
          [0xe] 14:	ifne
line: 191 [0xf] 15:	movl 0
          [0x10] 16:	pushobj
          [0x11] 17:	call @1100 // <std#ArrayList<var>.expand()>
          [0x12] 18:	nop
          [0x13] 19:	nop
line: 192 [0x14] 20:	loadl ebx, fp+1
          [0x15] 21:	rstore ebx
          [0x16] 22:	movl 0
          [0x17] 23:	movn #0
          [0x18] 24:	pushobj
          [0x19] 25:	movl 0
          [0x1a] 26:	movn #3
          [0x1b] 27:	movi #0, adx
          [0x1d] 29:	chklen adx
          [0x1e] 30:	iaload_2 ebx, adx
          [0x1f] 31:	inc ebx
          [0x20] 32:	rmov adx, ebx
          [0x21] 33:	dec ebx
          [0x22] 34:	movsl #0
          [0x23] 35:	chklen ebx
          [0x24] 36:	pop
          [0x25] 37:	loadval egx
          [0x26] 38:	rmov ebx, egx
          [0x27] 39:	ret

func:@1104 [std#ArrayList<var>.popBack] in file: lib/support//0.2.587//ArrayList.sharp:203:24: note:  
		     public def popBack() {
		                       ^


popBack:
line: 203 [0x0] 0:	movl 0
          [0x1] 1:	pushobj
          [0x2] 2:	call @1101 // <std#ArrayList<var>.shrink()>
          [0x3] 3:	ret

func:@1105 [std#ArrayList<var>.insert] in file: lib/support//0.2.587//ArrayList.sharp:213:23: note:  
		     public def insert(var pos, T value) {
		                      ^


insert:
line: 213 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gt ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	skpe 9 // pc = 19
          [0xb] 11:	movi #0, ebx
          [0xd] 13:	movr egx, ebx
          [0xe] 14:	loadl ebx, fp+1
          [0xf] 15:	lt ebx, egx
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	cmp ebx, 1
          [0x12] 18:	movr ebx, cmt
          [0x13] 19:	movr cmt, ebx
          [0x14] 20:	movi #32, adx
          [0x16] 22:	ifne
line: 214 [0x17] 23:	new_class @13 // std#IndexOutOfBoundsException
          [0x18] 24:	movl 0
          [0x19] 25:	pushobj
          [0x1a] 26:	loadl ebx, fp+1
          [0x1b] 27:	rstore ebx
          [0x1c] 28:	call @1109 // <std#ArrayList<var>.outOfBoundsMsg(var)>
          [0x1d] 29:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x1e] 30:	throw 
          [0x1f] 31:	nop
          [0x20] 32:	nop
line: 216 [0x21] 33:	movl 0
          [0x22] 34:	movn #3
          [0x23] 35:	movi #0, adx
          [0x25] 37:	iaload_2 ebx, adx
          [0x26] 38:	rstore ebx
          [0x27] 39:	movi #0, ebx
          [0x29] 41:	movr egx, ebx
          [0x2a] 42:	loadval ebx
          [0x2b] 43:	test ebx, egx
          [0x2c] 44:	movr ebx, cmt
          [0x2d] 45:	movi #54, adx
          [0x2f] 47:	ifne
line: 217 [0x30] 48:	movl 0
          [0x31] 49:	pushobj
          [0x32] 50:	loadl ebx, fp+2
          [0x33] 51:	rstore ebx
          [0x34] 52:	call @1103 // <std#ArrayList<var>.add(var)>
          [0x35] 53:	goto @140
line: 219 [0x36] 54:	movl 0
          [0x37] 55:	movn #0
          [0x38] 56:	sizeof ebx
          [0x39] 57:	movr egx, ebx
          [0x3a] 58:	movl 0
          [0x3b] 59:	movn #3
          [0x3c] 60:	movi #0, adx
          [0x3e] 62:	chklen adx
          [0x3f] 63:	iaload_2 ebx, adx
          [0x40] 64:	gte ebx, egx
          [0x41] 65:	movr ebx, cmt
          [0x42] 66:	movi #73, adx
          [0x44] 68:	ifne
line: 220 [0x45] 69:	movl 0
          [0x46] 70:	pushobj
          [0x47] 71:	call @1100 // <std#ArrayList<var>.expand()>
          [0x48] 72:	nop
          [0x49] 73:	nop
line: 221 [0x4a] 74:	movl 0
          [0x4b] 75:	movn #3
          [0x4c] 76:	movi #0, adx
          [0x4e] 78:	chklen adx
          [0x4f] 79:	iaload_2 ebx, adx
          [0x50] 80:	inc ebx
          [0x51] 81:	rmov adx, ebx
          [0x52] 82:	dec ebx
line: 222 [0x53] 83:	movi #1, ebx
          [0x55] 85:	rstore ebx
          [0x56] 86:	movl 0
          [0x57] 87:	movn #3
          [0x58] 88:	movi #0, adx
          [0x5a] 90:	chklen adx
          [0x5b] 91:	iaload_2 ebx, adx
          [0x5c] 92:	loadval egx
          [0x5d] 93:	sub ebx, egx -> ebx
          [0x5f] 95:	rstore ebx
          [0x60] 96:	loadval ebx
          [0x61] 97:	smovr_2 ebx, fp+3
          [0x62] 98:	loadl ebx, fp+1
          [0x63] 99:	movr egx, ebx
          [0x64] 100:	loadl ebx, fp+3
          [0x65] 101:	gt ebx, egx
          [0x66] 102:	movr ebx, cmt
          [0x67] 103:	movi #131, adx
          [0x69] 105:	ifne
line: 223 [0x6a] 106:	movl 0
          [0x6b] 107:	movn #0
          [0x6c] 108:	movi #1, ebx
          [0x6e] 110:	rstore ebx
          [0x6f] 111:	loadl ebx, fp+3
          [0x70] 112:	loadval egx
          [0x71] 113:	sub ebx, egx -> ebx
          [0x73] 115:	rstore ebx
          [0x74] 116:	loadval ebx
          [0x75] 117:	chklen ebx
          [0x76] 118:	iaload_2 ebx, ebx
          [0x77] 119:	rstore ebx
          [0x78] 120:	movl 0
          [0x79] 121:	movn #0
          [0x7a] 122:	loadl ebx, fp+3
          [0x7b] 123:	chklen ebx
          [0x7c] 124:	loadval egx
          [0x7d] 125:	rmov ebx, egx
          [0x7e] 126:	loadl ebx, fp+3
          [0x7f] 127:	movi #1, ecx
          [0x81] 129:	subl ecx, @3
          [0x82] 130:	goto @98
line: 224 [0x83] 131:	loadl ebx, fp+2
          [0x84] 132:	rstore ebx
          [0x85] 133:	movl 0
          [0x86] 134:	movn #0
          [0x87] 135:	loadl ebx, fp+1
          [0x88] 136:	chklen ebx
          [0x89] 137:	loadval egx
          [0x8a] 138:	rmov ebx, egx
          [0x8b] 139:	nop
          [0x8c] 140:	nop
          [0x8d] 141:	ret

func:@1106 [std#ArrayList<var>.remove] in file: lib/support//0.2.587//ArrayList.sharp:236:23: note:  
		     public def remove(var pos) {
		                      ^


remove:
line: 236 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	chklen adx
          [0x5] 5:	iaload_2 egx, adx
          [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	gt ebx, egx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	skpe 9 // pc = 19
          [0xb] 11:	movi #0, ebx
          [0xd] 13:	movr egx, ebx
          [0xe] 14:	loadl ebx, fp+1
          [0xf] 15:	lt ebx, egx
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	cmp ebx, 1
          [0x12] 18:	movr ebx, cmt
          [0x13] 19:	movr cmt, ebx
          [0x14] 20:	movi #32, adx
          [0x16] 22:	ifne
line: 237 [0x17] 23:	new_class @13 // std#IndexOutOfBoundsException
          [0x18] 24:	movl 0
          [0x19] 25:	pushobj
          [0x1a] 26:	loadl ebx, fp+1
          [0x1b] 27:	rstore ebx
          [0x1c] 28:	call @1109 // <std#ArrayList<var>.outOfBoundsMsg(var)>
          [0x1d] 29:	call @91 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x1e] 30:	throw 
          [0x1f] 31:	nop
          [0x20] 32:	nop
line: 239 [0x21] 33:	movl 0
          [0x22] 34:	movn #3
          [0x23] 35:	movi #0, adx
          [0x25] 37:	iaload_2 ebx, adx
          [0x26] 38:	rstore ebx
          [0x27] 39:	movi #1, ebx
          [0x29] 41:	movr egx, ebx
          [0x2a] 42:	loadval ebx
          [0x2b] 43:	test ebx, egx
          [0x2c] 44:	movr ebx, cmt
          [0x2d] 45:	movi #58, adx
          [0x2f] 47:	ifne
line: 240 [0x30] 48:	movl 0
          [0x31] 49:	movn #3
          [0x32] 50:	movi #0, adx
          [0x34] 52:	chklen adx
          [0x35] 53:	iaload_2 ebx, adx
          [0x36] 54:	dec ebx
          [0x37] 55:	rmov adx, ebx
          [0x38] 56:	inc ebx
          [0x39] 57:	goto @158
          [0x3a] 58:	movl 0
          [0x3b] 59:	movn #3
          [0x3c] 60:	movi #0, adx
          [0x3e] 62:	iaload_2 ebx, adx
          [0x3f] 63:	rstore ebx
          [0x40] 64:	movi #2, ebx
          [0x42] 66:	movr egx, ebx
          [0x43] 67:	loadval ebx
          [0x44] 68:	test ebx, egx
          [0x45] 69:	movr ebx, cmt
          [0x46] 70:	movi #104, adx
          [0x48] 72:	ifne
line: 243 [0x49] 73:	loadl ebx, fp+1
          [0x4a] 74:	rstore ebx
          [0x4b] 75:	movi #0, ebx
          [0x4d] 77:	movr egx, ebx
          [0x4e] 78:	loadval ebx
          [0x4f] 79:	test ebx, egx
          [0x50] 80:	movr ebx, cmt
          [0x51] 81:	movi #99, adx
          [0x53] 83:	ifne
line: 244 [0x54] 84:	movl 0
          [0x55] 85:	movn #0
          [0x56] 86:	movi #1, ebx
          [0x58] 88:	chklen ebx
          [0x59] 89:	iaload_2 ebx, ebx
          [0x5a] 90:	rstore ebx
          [0x5b] 91:	movl 0
          [0x5c] 92:	movn #0
          [0x5d] 93:	movi #0, ebx
          [0x5f] 95:	chklen ebx
          [0x60] 96:	loadval egx
          [0x61] 97:	rmov ebx, egx
          [0x62] 98:	nop
          [0x63] 99:	nop
line: 246 [0x64] 100:	movl 0
          [0x65] 101:	pushobj
          [0x66] 102:	call @1101 // <std#ArrayList<var>.shrink()>
          [0x67] 103:	goto @158
line: 248 [0x68] 104:	movi #1, ebx
          [0x6a] 106:	rstore ebx
          [0x6b] 107:	movl 0
          [0x6c] 108:	movn #3
          [0x6d] 109:	movi #0, adx
          [0x6f] 111:	chklen adx
          [0x70] 112:	iaload_2 ebx, adx
          [0x71] 113:	loadval egx
          [0x72] 114:	sub ebx, egx -> ebx
          [0x74] 116:	rstore ebx
          [0x75] 117:	loadval ebx
          [0x76] 118:	smovr_2 ebx, fp+2
line: 249 [0x77] 119:	loadl ebx, fp+1
          [0x78] 120:	smovr_2 ebx, fp+3
          [0x79] 121:	loadl ebx, fp+2
          [0x7a] 122:	movr egx, ebx
          [0x7b] 123:	loadl ebx, fp+3
          [0x7c] 124:	lt ebx, egx
          [0x7d] 125:	movr ebx, cmt
          [0x7e] 126:	movi #154, adx
          [0x80] 128:	ifne
line: 250 [0x81] 129:	movl 0
          [0x82] 130:	movn #0
          [0x83] 131:	movi #1, ebx
          [0x85] 133:	rstore ebx
          [0x86] 134:	loadl ebx, fp+3
          [0x87] 135:	loadval egx
          [0x88] 136:	add ebx, egx -> ebx
          [0x8a] 138:	rstore ebx
          [0x8b] 139:	loadval ebx
          [0x8c] 140:	chklen ebx
          [0x8d] 141:	iaload_2 ebx, ebx
          [0x8e] 142:	rstore ebx
          [0x8f] 143:	movl 0
          [0x90] 144:	movn #0
          [0x91] 145:	loadl ebx, fp+3
          [0x92] 146:	chklen ebx
          [0x93] 147:	loadval egx
          [0x94] 148:	rmov ebx, egx
          [0x95] 149:	loadl ebx, fp+3
          [0x96] 150:	movi #1, ecx
          [0x98] 152:	addl ecx, @3
          [0x99] 153:	goto @121
line: 252 [0x9a] 154:	movl 0
          [0x9b] 155:	pushobj
          [0x9c] 156:	call @1101 // <std#ArrayList<var>.shrink()>
          [0x9d] 157:	nop
          [0x9e] 158:	nop
          [0x9f] 159:	ret

func:@1107 [std#ArrayList<var>.data] in file: lib/support//0.2.587//ArrayList.sharp:260:21: note:  
		     public def data() : T[] {
		                    ^


data:
line: 260 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	returnobj
          [0x3] 3:	ret

func:@1108 [std#ArrayList<var>.clear] in file: lib/support//0.2.587//ArrayList.sharp:268:22: note:  
		     public def clear() {
		                     ^


clear:
line: 269 [0x0] 0:	movi #10, ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #0
          [0x5] 5:	sizeof ebx
          [0x6] 6:	loadval ecx
          [0x7] 7:	gt ebx, ecx
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	movi #19, adx
          [0xb] 11:	ifne
line: 270 [0xc] 12:	movi #10, ebx
          [0xe] 14:	newarry ebx
          [0xf] 15:	movl 0
          [0x10] 16:	movn #0
          [0x11] 17:	popobj
          [0x12] 18:	nop
          [0x13] 19:	nop
line: 273 [0x14] 20:	movi #0, ebx
          [0x16] 22:	nop
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 0
          [0x19] 25:	movn #3
          [0x1a] 26:	movi #0, adx
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	rmov adx, ecx
          [0x1e] 30:	ret

func:@1109 [std#ArrayList<var>.outOfBoundsMsg] in file: lib/support//0.2.587//ArrayList.sharp:282:31: note:  
		    private def outOfBoundsMsg(var index) : string {
		                              ^


outOfBoundsMsg:
line: 282 [0x0] 0:	new_class @46 // std#string
          [0x1] 1:	newstr @224 // "Index: "
          [0x2] 2:	call @558 // <std#string.string(var[])>
          [0x3] 3:	loadl ebx, fp+1
          [0x4] 4:	rstore ebx
          [0x5] 5:	call @579 // <std#string.$operator+(var)>
          [0x6] 6:	newstr @225 // ", size: "
          [0x7] 7:	call @572 // <std#string.$operator+(var[])>
          [0x8] 8:	movl 0
          [0x9] 9:	movn #3
          [0xa] 10:	movi #0, adx
          [0xc] 12:	iaload_2 ebx, adx
          [0xd] 13:	rstore ebx
          [0xe] 14:	call @579 // <std#string.$operator+(var)>
          [0xf] 15:	movsl #0
          [0x10] 16:	returnobj
          [0x11] 17:	ret

