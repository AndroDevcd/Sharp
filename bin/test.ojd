Object Dump file:
################################

Optimizer: Did optimize 1 result -> 3068


@0 app#__SRT_Global fields: 0 methods: 7
@1 std#__SRT_Global fields: 1 methods: 41
@7 std#bool fields: 2 methods: 31
@8 std#char fields: 2 methods: 48
@9 std#Enum fields: 3 methods: 15
@10 std#Exception fields: 2 methods: 13
@11 std#IllegalArgumentException fields: 2 methods: 16
@12 std#IllegalStateException fields: 2 methods: 16
@13 std#IndexOutOfBoundsException fields: 2 methods: 16
@14 std#int fields: 2 methods: 40
@15 std#integer fields: 2 methods: 10
@16 std#InvalidOperationException fields: 2 methods: 16
@2 std.io#__SRT_Global fields: 0 methods: 6
@17 std.io#File fields: 4 methods: 43
@18 std.io#FileSystem fields: 11 methods: 21
@19 std.io#IOException fields: 2 methods: 16
@20 std.io#IOStream fields: 6 methods: 17
@21 std.io#IOStream.StreamReader fields: 6 methods: 17
@22 std.io#StreamBuffer fields: 5 methods: 21
@23 std.io#Thread fields: 14 methods: 31
@24 std.io#UnixFileSystem fields: 12 methods: 26
@25 std.io#WinFileSystem fields: 12 methods: 26
@3 std.kernel#__SRT_Global fields: 0 methods: 13
@26 std.kernel#CListObj fields: 2 methods: 10
@27 std.kernel#CListVar fields: 2 methods: 10
@28 std.kernel#CMath fields: 0 methods: 28
@29 std.kernel#ConsoleHandler fields: 0 methods: 11
@30 std.kernel#Manifest fields: 4 methods: 8
@31 std.kernel#Runtime fields: 5 methods: 27
@4 std.kernel.vm#__SRT_Global fields: 0 methods: 6
@32 std.kernel.vm#ThreadCore fields: 0 methods: 18
@33 std.kernel#Time fields: 0 methods: 15
@55 std.kernel#TimeUnit fields: 6 methods: 16
@34 std#long fields: 3 methods: 41
@35 std#Math fields: 2 methods: 27
@36 std#NullptrException fields: 2 methods: 16
@37 std#Object fields: 0 methods: 5
@38 std#ObjList fields: 3 methods: 25
@5 std.os#__SRT_Global fields: 0 methods: 18
@6 std.os.gui#__SRT_Global fields: 1 methods: 34
@56 std.os.gui#_GUI fields: 12 methods: 16
@57 std.os.gui#_PAINT fields: 18 methods: 16
@58 std.os.gui#PaintStyle fields: 10 methods: 16
@39 std.os.gui#Message fields: 3 methods: 6
@40 std.os.gui#Polygon fields: 1 methods: 7
@41 std.os.gui#Point fields: 2 methods: 6
@42 std.os.gui#Window fields: 5 methods: 7
@43 std#Printable fields: 0 methods: 6
@44 std#RuntimeErr fields: 2 methods: 16
@45 std#short fields: 2 methods: 41
@46 std#strbuf fields: 7 methods: 46
@47 std#string fields: 3 methods: 46
@48 std#Throwable fields: 2 methods: 10
@49 std#uchar fields: 3 methods: 41
@50 std#uint fields: 3 methods: 41
@51 std#ulong fields: 3 methods: 41
@52 std#Unique fields: 0 methods: 6
@53 std#ushort fields: 3 methods: 41
@54 std#VarList fields: 3 methods: 25
@59 std#ArrayList<std.io#Thread> fields: 5 methods: 22
@60 std#ArrayList<var> fields: 5 methods: 22

"SECONDS"
"MILLISECONDS"
"MICROSECONDS"
"gui_quit"
"gui_paint"
"gui_set_ctx"
"gui_ctx"
"gui_dwnd"
"gui_show"
"gui_upd"
"gui_dsp"
"gui_msg"
"pt_text"
"pt_start"
"pt_end"
"pt_move"
"pt_line"
"pt_rect"
"pt_fillrect"
"pt_ellipsize"
"pt_polygon"
"pt_createPen"
"pt_selectPen"
"pt_deletePen"
"pt_createBrush"
"pt_selectBrush"
"pt_deleteBrush"
"PS_SOLID"
"PS_DASH"
"PS_DOT"
"PS_DASHDOT"
"PS_DASHDOTDOT"
"PS_NULL"
"PS_INSIDEFRAME"
""
"Index: "
", size: "
"in main"
"true"
"false"
"file path cannot be null"
"Negative time"
"file could not be resolved: "
"illegal read on IOStream"
"illegal write on IOStream"
"Access to buffer at: "
"  size: "
"invalid thread priority "
"main"
"null"
"win"
"posix"
"\nProgram finished with exit code "
"Index out of bounds exception"
"Index out of bounds Array: size "
" at index pos "
"invalid precision: "
"stopIndex: "
" cannot be less than startIndex: "
"illegal char in string: "


func:@0 [app#__SRT_Global.__SRT_Global] in file: :0:0: note:  
		
		^


__SRT_Global:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@1 [std#__SRT_Global.__SRT_Global] in file: :0:0: note:  
		
		^


__SRT_Global:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@2 [std.io#__SRT_Global.__SRT_Global] in file: :0:0: note:  
		
		^


__SRT_Global:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@3 [std.kernel#__SRT_Global.__SRT_Global] in file: :0:0: note:  
		
		^


__SRT_Global:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@4 [std.kernel.vm#__SRT_Global.__SRT_Global] in file: :0:0: note:  
		
		^


__SRT_Global:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@5 [std.os#__SRT_Global.__SRT_Global] in file: :0:0: note:  
		
		^


__SRT_Global:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@6 [std.os.gui#__SRT_Global.__SRT_Global] in file: :0:0: note:  
		
		^


__SRT_Global:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@7 [app#__SRT_Global.main] in file: tests/PerformanceTest3.sharp:6:4: note:  
		def main(string[] args) {
		   ^


main:
line: 6 [0x0] 0:	newstr @37 // "in main"
        [0x1] 1:	call @594 // <std#__SRT_Global.print(var[])>
line: 7 [0x2] 2:	new_class @60 // std#ArrayList<var>
        [0x3] 3:	call @786 // <std#ArrayList<var>.ArrayList()>
        [0x4] 4:	popl 1
        [0x5] 5:	movl 0
line: 8 [0x6] 6:	movi #0, ebx
        [0x8] 8:	movnd ebx
        [0x9] 9:	pushobj
        [0xa] 10:	call @582 // <std#string.parseInt(std#string)>
        [0xb] 11:	ipopl 2
line: 10 [0xc] 12:	istorel 0, fp+3
         [0xe] 14:	loadl egx, fp+2
         [0xf] 15:	loadl ebx, fp+3
         [0x10] 16:	lt ebx, egx
         [0x11] 17:	jne 23
line: 11 [0x12] 18:	pushl 1
         [0x13] 19:	ipushl #3
         [0x14] 20:	call @796 // <std#ArrayList<var>.add(var)>
         [0x15] 21:	iaddl 1, @3
         [0x16] 22:	goto @14
line: 14 [0x17] 23:	movl 1
         [0x18] 24:	del
line: 16 [0x19] 25:	istorel 0, fp+4
         [0x1b] 27:	loadl egx, fp+2
         [0x1c] 28:	loadl ebx, fp+4
         [0x1d] 29:	lt ebx, egx
         [0x1e] 30:	jne 33
         [0x1f] 31:	iaddl 1, @4
         [0x20] 32:	goto @27
line: 19 [0x21] 33:	new_class @14 // std#int
         [0x22] 34:	istore 0
         [0x23] 35:	call @89 // <std#int.int(var)>
         [0x24] 36:	popl 5
         [0x25] 37:	pushl 5
         [0x26] 38:	ipushl #2
         [0x27] 39:	call @105 // <std#int.$operator<(var)>
         [0x28] 40:	loadval cmt
         [0x29] 41:	jne 47
         [0x2a] 42:	pushl 5
         [0x2b] 43:	istore 1
         [0x2c] 44:	call @113 // <std#int.$operator++(var)>
         [0x2d] 45:	pop
         [0x2e] 46:	goto @37
         [0x2f] 47:	ret

func:@8 [std#bool.bool] in file: lib/support/0.2.422//bool.sharp:4:16: note:  
		    public bool(var num) {
		               ^


bool:
line: 4 [0x0] 0:	loadl cmt, fp+1
        [0x1] 1:	loadpc_2 adx, pc+6 // adx = 7
        [0x2] 2:	ifne
        [0x3] 3:	istore 1
        [0x4] 4:	movi #1, cmt
        [0x6] 6:	skpe 2 // pc = 8
        [0x7] 7:	istore 0
        [0x8] 8:	nop
        [0x9] 9:	movl 0
        [0xa] 10:	movn #0
        [0xb] 11:	movi #0, adx
        [0xd] 13:	loadval ecx
        [0xe] 14:	rmov adx, ecx
        [0xf] 15:	movl 0
        [0x10] 16:	returnobj
        [0x11] 17:	ret

func:@9 [std#bool.bool] in file: lib/support/0.2.422//bool.sharp:8:16: note:  
		    public bool(integer num) {
		               ^


bool:
line: 8 [0x0] 0:	movl 1
        [0x1] 1:	movn #0
        [0x2] 2:	movi #0, adx
        [0x4] 4:	iaload_2 cmt, adx
        [0x5] 5:	loadpc_2 adx, pc+6 // adx = 11
        [0x6] 6:	ifne
        [0x7] 7:	istore 1
        [0x8] 8:	movi #1, cmt
        [0xa] 10:	skpe 2 // pc = 12
        [0xb] 11:	istore 0
        [0xc] 12:	nop
        [0xd] 13:	movl 0
        [0xe] 14:	movn #0
        [0xf] 15:	movi #0, adx
        [0x11] 17:	loadval ecx
        [0x12] 18:	rmov adx, ecx
        [0x13] 19:	movl 0
        [0x14] 20:	returnobj
        [0x15] 21:	ret

func:@10 [std#bool.$operator+] in file: lib/support/0.2.422//bool.sharp:12:24: note:  
		    public def operator+(var num) : var {
		                       ^


$operator+:
line: 12 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	add ebx, egx -> ebx
         [0x9] 9:	return_val ebx
         [0xa] 10:	ret

func:@11 [std#bool.$operator-] in file: lib/support/0.2.422//bool.sharp:16:24: note:  
		    public def operator-(var num) : var {
		                       ^


$operator-:
line: 16 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	sub ebx, egx -> ebx
         [0x9] 9:	return_val ebx
         [0xa] 10:	ret

func:@12 [std#bool.$operator!=] in file: lib/support/0.2.422//bool.sharp:20:24: note:  
		    public def operator!=(var num) : var {
		                       ^


$operator!=:
line: 20 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	loadl egx, fp+1
         [0x6] 6:	tne ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@13 [std#bool.$operator!=] in file: lib/support/0.2.422//bool.sharp:24:24: note:  
		    public def operator!=(integer num) : var {
		                       ^


$operator!=:
line: 24 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	iaload_2 egx, adx
         [0x9] 9:	loadval ebx
         [0xa] 10:	tne ebx, egx
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@14 [std#bool.$operator*] in file: lib/support/0.2.422//bool.sharp:28:24: note:  
		    public def operator*(var num) : var {
		                       ^


$operator*:
line: 28 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	mul ebx, egx -> ebx
         [0x9] 9:	return_val ebx
         [0xa] 10:	ret

func:@15 [std#bool.$operator/] in file: lib/support/0.2.422//bool.sharp:32:24: note:  
		    public def operator/(var num) : var {
		                       ^


$operator/:
line: 32 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	div ebx, egx -> ebx
         [0x9] 9:	return_val ebx
         [0xa] 10:	ret

func:@16 [std#bool.$operator=] in file: lib/support/0.2.422//bool.sharp:36:24: note:  
		    public def operator=(var num) : var {
		                       ^


$operator=:
line: 36 [0x0] 0:	loadl cmt, fp+1
         [0x1] 1:	loadpc_2 adx, pc+6 // adx = 7
         [0x2] 2:	ifne
         [0x3] 3:	istore 1
         [0x4] 4:	movi #1, cmt
         [0x6] 6:	skpe 2 // pc = 8
         [0x7] 7:	istore 0
         [0x8] 8:	nop
         [0x9] 9:	movl 0
         [0xa] 10:	movn #0
         [0xb] 11:	movi #0, adx
         [0xd] 13:	loadval ecx
         [0xe] 14:	rmov adx, ecx
         [0xf] 15:	return_val ebx
         [0x10] 16:	ret

func:@17 [std#bool.$operator==] in file: lib/support/0.2.422//bool.sharp:40:24: note:  
		    public def operator==(var num) : var {
		                       ^


$operator==:
line: 40 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	loadl egx, fp+1
         [0x6] 6:	test ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@18 [std#bool.$operator<] in file: lib/support/0.2.422//bool.sharp:44:24: note:  
		    public def operator<(var num) : var {
		                       ^


$operator<:
line: 44 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	lt ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@19 [std#bool.$operator>] in file: lib/support/0.2.422//bool.sharp:48:24: note:  
		    public def operator>(var num) : var {
		                       ^


$operator>:
line: 48 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	gt ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@20 [std#bool.$operator<=] in file: lib/support/0.2.422//bool.sharp:52:24: note:  
		    public def operator<=(var num) : var {
		                       ^


$operator<=:
line: 52 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	lte ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@21 [std#bool.$operator>=] in file: lib/support/0.2.422//bool.sharp:56:24: note:  
		    public def operator>=(var num) : var {
		                       ^


$operator>=:
line: 56 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	gte ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@22 [std#bool.$operator++] in file: lib/support/0.2.422//bool.sharp:60:24: note:  
		    public def operator++(var num) : var { // post inc i++
		                       ^


$operator++:
line: 60 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	smovr_2 ebx, fp+2
line: 61 [0x6] 6:	movl 0
         [0x7] 7:	movn #0
         [0x8] 8:	iaload_2 ebx, adx
         [0x9] 9:	not ebx, ebx
         [0xa] 10:	nop
         [0xb] 11:	rstore ebx
         [0xc] 12:	movl 0
         [0xd] 13:	movn #0
         [0xe] 14:	loadval ecx
         [0xf] 15:	rmov adx, ecx
line: 62 [0x10] 16:	loadl ebx, fp+2
         [0x11] 17:	return_val ebx
         [0x12] 18:	ret

func:@23 [std#bool.$operator++] in file: lib/support/0.2.422//bool.sharp:66:24: note:  
		    public def operator++() : var { // pre inc ++i
		                       ^


$operator++:
line: 66 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	not ebx, ebx
         [0x6] 6:	nop
         [0x7] 7:	rstore ebx
         [0x8] 8:	movl 0
         [0x9] 9:	movn #0
         [0xa] 10:	loadval ecx
         [0xb] 11:	rmov adx, ecx
         [0xc] 12:	return_val ebx
         [0xd] 13:	ret

func:@24 [std#bool.$operator--] in file: lib/support/0.2.422//bool.sharp:70:24: note:  
		    public def operator--(var num) : var {
		                       ^


$operator--:
line: 70 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	smovr_2 ebx, fp+2
line: 71 [0x6] 6:	movl 0
         [0x7] 7:	movn #0
         [0x8] 8:	iaload_2 ebx, adx
         [0x9] 9:	not ebx, ebx
         [0xa] 10:	nop
         [0xb] 11:	rstore ebx
         [0xc] 12:	movl 0
         [0xd] 13:	movn #0
         [0xe] 14:	loadval ecx
         [0xf] 15:	rmov adx, ecx
line: 72 [0x10] 16:	loadl ebx, fp+2
         [0x11] 17:	return_val ebx
         [0x12] 18:	ret

func:@25 [std#bool.$operator--] in file: lib/support/0.2.422//bool.sharp:76:24: note:  
		    public def operator--() : var {
		                       ^


$operator--:
line: 76 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	not ebx, ebx
         [0x6] 6:	nop
         [0x7] 7:	rstore ebx
         [0x8] 8:	movl 0
         [0x9] 9:	movn #0
         [0xa] 10:	loadval ecx
         [0xb] 11:	rmov adx, ecx
         [0xc] 12:	return_val ebx
         [0xd] 13:	ret

func:@26 [std#bool.value] in file: lib/support/0.2.422//bool.sharp:80:21: note:  
		    public def value() : var {
		                    ^


value:
line: 80 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@27 [std#bool.toString] in file: lib/support/0.2.422//bool.sharp:84:24: note:  
		    public def delegate::toString() : string {
		                       ^


toString:
line: 84 [0x0] 0:	new_class @47 // std#string
         [0x1] 1:	newstr @34 // ""
         [0x2] 2:	call @553 // <std#string.string(var[])>
         [0x3] 3:	movl 0
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	iaload_2 cmt, adx
         [0x8] 8:	loadpc_2 adx, pc+6 // adx = 14
         [0x9] 9:	ifne
         [0xa] 10:	newstr @38 // "true"
         [0xb] 11:	movi #1, cmt
         [0xd] 13:	skpe 2 // pc = 15
         [0xe] 14:	newstr @39 // "false"
         [0xf] 15:	call @566 // <std#string.$operator+(var[])>
         [0x10] 16:	movsl #0
         [0x11] 17:	returnobj
         [0x12] 18:	ret

func:@28 [std#bool.bool] in file: lib/support/0.2.422//bool.sharp:3:13: note:  
		public class bool base integer {
		            ^


bool:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@29 [std#char.char] in file: lib/support/0.2.422//char.sharp:5:16: note:  
		    public char(var num) {
		               ^


char:
line: 5 [0x0] 0:	pushl 0
        [0x1] 1:	loadl ebx, fp+1
        [0x2] 2:	mov8 ebx, ebx
        [0x3] 3:	rstore ebx
        [0x4] 4:	call @119 // <std#integer.integer(var)>
        [0x5] 5:	pop
        [0x6] 6:	movl 0
        [0x7] 7:	returnobj
        [0x8] 8:	ret

func:@30 [std#char.char] in file: lib/support/0.2.422//char.sharp:9:16: note:  
		    public char(integer num) {
		               ^


char:
line: 9 [0x0] 0:	pushl 0
        [0x1] 1:	movl 1
        [0x2] 2:	movn #0
        [0x3] 3:	movi #0, adx
        [0x5] 5:	iaload_2 ebx, adx
        [0x6] 6:	mov8 ebx, ebx
        [0x7] 7:	rstore ebx
        [0x8] 8:	call @119 // <std#integer.integer(var)>
        [0x9] 9:	pop
        [0xa] 10:	movl 0
        [0xb] 11:	returnobj
        [0xc] 12:	ret

func:@31 [std#char.$operator+] in file: lib/support/0.2.422//char.sharp:13:24: note:  
		    public def operator+(var num) : var {
		                       ^


$operator+:
line: 13 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	add ebx, egx -> ebx
         [0x9] 9:	mov8 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@32 [std#char.$operator+] in file: lib/support/0.2.422//char.sharp:17:24: note:  
		    public def operator+(integer num) : char {
		                       ^


$operator+:
line: 17 [0x0] 0:	new_class @8 // std#char
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @31 // <std#char.$operator+(var)>
         [0x9] 9:	call @29 // <std#char.char(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@33 [std#char.$operator-] in file: lib/support/0.2.422//char.sharp:21:24: note:  
		    public def operator-(var num) : var {
		                       ^


$operator-:
line: 21 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	sub ebx, egx -> ebx
         [0x9] 9:	mov8 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@34 [std#char.$operator-] in file: lib/support/0.2.422//char.sharp:25:24: note:  
		    public def operator-(integer num) : char {
		                       ^


$operator-:
line: 25 [0x0] 0:	new_class @8 // std#char
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @33 // <std#char.$operator-(var)>
         [0x9] 9:	call @29 // <std#char.char(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@35 [std#char.$operator*] in file: lib/support/0.2.422//char.sharp:29:24: note:  
		    public def operator*(var num) : var {
		                       ^


$operator*:
line: 29 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	mul ebx, egx -> ebx
         [0x9] 9:	mov8 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@36 [std#char.$operator*] in file: lib/support/0.2.422//char.sharp:33:24: note:  
		    public def operator*(integer num) : char {
		                       ^


$operator*:
line: 33 [0x0] 0:	new_class @8 // std#char
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @35 // <std#char.$operator*(var)>
         [0x9] 9:	call @29 // <std#char.char(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@37 [std#char.$operator/] in file: lib/support/0.2.422//char.sharp:37:24: note:  
		    public def operator/(var num) : var {
		                       ^


$operator/:
line: 37 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	div ebx, egx -> ebx
         [0x9] 9:	mov8 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@38 [std#char.$operator/] in file: lib/support/0.2.422//char.sharp:41:24: note:  
		    public def operator/(integer num) : char {
		                       ^


$operator/:
line: 41 [0x0] 0:	new_class @8 // std#char
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @37 // <std#char.$operator/(var)>
         [0x9] 9:	call @29 // <std#char.char(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@39 [std#char.$operator=] in file: lib/support/0.2.422//char.sharp:45:24: note:  
		    public def operator=(var num) : var {
		                       ^


$operator=:
line: 45 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	mov8 ebx, ebx
         [0x2] 2:	nop
         [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #0
         [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@40 [std#char.$operator=] in file: lib/support/0.2.422//char.sharp:49:24: note:  
		    public def operator=(integer num) : char {
		                       ^


$operator=:
line: 49 [0x0] 0:	new_class @8 // std#char
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @39 // <std#char.$operator=(var)>
         [0x9] 9:	call @29 // <std#char.char(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@41 [std#char.$operator==] in file: lib/support/0.2.422//char.sharp:53:24: note:  
		    public def operator==(var num) : var {
		                       ^


$operator==:
line: 53 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	loadl egx, fp+1
         [0x6] 6:	test ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@42 [std#char.$operator!=] in file: lib/support/0.2.422//char.sharp:56:24: note:  
		    public def operator!=(char c) : var {
		                       ^


$operator!=:
line: 56 [0x0] 0:	pushl 1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	rstore ebx
         [0x7] 7:	call @41 // <std#char.$operator==(var)>
         [0x8] 8:	loadval ebx
         [0x9] 9:	return_val ebx
         [0xa] 10:	ret

func:@43 [std#char.$operator==] in file: lib/support/0.2.422//char.sharp:60:24: note:  
		    public def operator==(integer num) : var {
		                       ^


$operator==:
line: 60 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	iaload_2 egx, adx
         [0x9] 9:	loadval ebx
         [0xa] 10:	test ebx, egx
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@44 [std#char.$operator<] in file: lib/support/0.2.422//char.sharp:64:24: note:  
		    public def operator<(var num) : var {
		                       ^


$operator<:
line: 64 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	lt ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@45 [std#char.$operator<] in file: lib/support/0.2.422//char.sharp:68:24: note:  
		    public def operator<(integer num) : var {
		                       ^


$operator<:
line: 68 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #0
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lt ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@46 [std#char.$operator!=] in file: lib/support/0.2.422//char.sharp:72:24: note:  
		    public def operator!=(var num) : var {
		                       ^


$operator!=:
line: 72 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	loadl egx, fp+1
         [0x6] 6:	tne ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@47 [std#char.$operator!=] in file: lib/support/0.2.422//char.sharp:76:24: note:  
		    public def operator!=(integer num) : var {
		                       ^


$operator!=:
line: 76 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	iaload_2 egx, adx
         [0x9] 9:	loadval ebx
         [0xa] 10:	tne ebx, egx
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@48 [std#char.$operator>] in file: lib/support/0.2.422//char.sharp:80:24: note:  
		    public def operator>(var num) : var {
		                       ^


$operator>:
line: 80 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	gt ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@49 [std#char.$operator>] in file: lib/support/0.2.422//char.sharp:84:24: note:  
		    public def operator>(integer num) : var {
		                       ^


$operator>:
line: 84 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #0
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	gt ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@50 [std#char.$operator<=] in file: lib/support/0.2.422//char.sharp:88:24: note:  
		    public def operator<=(var num) : var {
		                       ^


$operator<=:
line: 88 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	lte ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@51 [std#char.$operator<=] in file: lib/support/0.2.422//char.sharp:92:24: note:  
		    public def operator<=(integer num) : var {
		                       ^


$operator<=:
line: 92 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #0
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lte ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@52 [std#char.$operator>=] in file: lib/support/0.2.422//char.sharp:96:24: note:  
		    public def operator>=(var num) : var {
		                       ^


$operator>=:
line: 96 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	gte ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@53 [std#char.$operator>=] in file: lib/support/0.2.422//char.sharp:100:24: note:  
		    public def operator>=(integer num) : var {
		                       ^


$operator>=:
line: 100 [0x0] 0:	movl 1
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 egx, adx
          [0x5] 5:	movl 0
          [0x6] 6:	movn #0
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	gte ebx, egx
          [0x9] 9:	return_val cmt
          [0xa] 10:	ret

func:@54 [std#char.$operator++] in file: lib/support/0.2.422//char.sharp:104:24: note:  
		    public def operator++(var num) : var { // post inc i++
		                       ^


$operator++:
line: 104 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	smovr_2 ebx, fp+2
line: 105 [0x6] 6:	istore 1
          [0x7] 7:	movl 0
          [0x8] 8:	movn #0
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	loadval egx
          [0xb] 11:	add ebx, egx -> ebx
          [0xd] 13:	mov8 ebx, ebx
          [0xe] 14:	nop
          [0xf] 15:	rstore ebx
          [0x10] 16:	movl 0
          [0x11] 17:	movn #0
          [0x12] 18:	loadval ecx
          [0x13] 19:	rmov adx, ecx
line: 106 [0x14] 20:	loadl ebx, fp+2
          [0x15] 21:	return_val ebx
          [0x16] 22:	ret

func:@55 [std#char.$operator++] in file: lib/support/0.2.422//char.sharp:110:24: note:  
		    public def operator++() : var { // pre inc ++i
		                       ^


$operator++:
line: 110 [0x0] 0:	istore 1
          [0x1] 1:	movl 0
          [0x2] 2:	movn #0
          [0x3] 3:	movi #0, adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	loadval egx
          [0x7] 7:	add ebx, egx -> ebx
          [0x9] 9:	mov8 ebx, ebx
          [0xa] 10:	nop
          [0xb] 11:	rstore ebx
          [0xc] 12:	movl 0
          [0xd] 13:	movn #0
          [0xe] 14:	loadval ecx
          [0xf] 15:	rmov adx, ecx
          [0x10] 16:	return_val ebx
          [0x11] 17:	ret

func:@56 [std#char.$operator--] in file: lib/support/0.2.422//char.sharp:114:24: note:  
		    public def operator--(var num) : var {
		                       ^


$operator--:
line: 114 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	smovr_2 ebx, fp+2
line: 115 [0x6] 6:	istore 1
          [0x7] 7:	movl 0
          [0x8] 8:	movn #0
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	loadval egx
          [0xb] 11:	sub ebx, egx -> ebx
          [0xd] 13:	mov8 ebx, ebx
          [0xe] 14:	nop
          [0xf] 15:	rstore ebx
          [0x10] 16:	movl 0
          [0x11] 17:	movn #0
          [0x12] 18:	loadval ecx
          [0x13] 19:	rmov adx, ecx
line: 116 [0x14] 20:	loadl ebx, fp+2
          [0x15] 21:	return_val ebx
          [0x16] 22:	ret

func:@57 [std#char.$operator--] in file: lib/support/0.2.422//char.sharp:120:24: note:  
		    public def operator--() : var {
		                       ^


$operator--:
line: 120 [0x0] 0:	istore 1
          [0x1] 1:	movl 0
          [0x2] 2:	movn #0
          [0x3] 3:	movi #0, adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	loadval egx
          [0x7] 7:	sub ebx, egx -> ebx
          [0x9] 9:	mov8 ebx, ebx
          [0xa] 10:	nop
          [0xb] 11:	rstore ebx
          [0xc] 12:	movl 0
          [0xd] 13:	movn #0
          [0xe] 14:	loadval ecx
          [0xf] 15:	rmov adx, ecx
          [0x10] 16:	return_val ebx
          [0x11] 17:	ret

func:@58 [std#char.value] in file: lib/support/0.2.422//char.sharp:124:21: note:  
		    public def value() : var {
		                    ^


value:
line: 124 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@59 [std#char.isDigit] in file: lib/support/0.2.422//char.sharp:128:30: note:  
		    public static def isDigit(var ch) : var {
		                             ^


isDigit:
line: 128 [0x0] 0:	movi #48, egx
          [0x2] 2:	loadl ebx, fp+0
          [0x3] 3:	gte ebx, egx
          [0x4] 4:	movr ebx, cmt
          [0x5] 5:	cmp ebx, 1
          [0x6] 6:	movr ebx, cmt
          [0x7] 7:	skne 9 // pc = 16
          [0x8] 8:	istore 1
          [0x9] 9:	movi #57, egx
          [0xb] 11:	loadl ebx, fp+0
          [0xc] 12:	lte ebx, egx
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	loadval ecx
          [0xf] 15:	and ecx, ebx
          [0x10] 16:	return_val cmt
          [0x11] 17:	ret

func:@60 [std#char.isNewLine] in file: lib/support/0.2.422//char.sharp:132:32: note:  
		    public static def isNewLine(var ch) : var {
		                               ^


isNewLine:
line: 132 [0x0] 0:	ipushl #0
          [0x1] 1:	movi #10, egx
          [0x3] 3:	loadval ebx
          [0x4] 4:	test ebx, egx
          [0x5] 5:	return_val cmt
          [0x6] 6:	ret

func:@61 [std#char.isAlpha] in file: lib/support/0.2.422//char.sharp:136:30: note:  
		    public static def isAlpha(var ch) : var {
		                             ^


isAlpha:
line: 136 [0x0] 0:	movi #65, egx
          [0x2] 2:	loadl ebx, fp+0
          [0x3] 3:	gte ebx, egx
          [0x4] 4:	movr ebx, cmt
          [0x5] 5:	cmp ebx, 1
          [0x6] 6:	movr ebx, cmt
          [0x7] 7:	skne 8 // pc = 15
          [0x8] 8:	istore 1
          [0x9] 9:	movi #90, egx
          [0xb] 11:	loadl ebx, fp+0
          [0xc] 12:	lte ebx, egx
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	loadval ecx
          [0xf] 15:	and ecx, ebx
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	skpe 19 // pc = 36
          [0x12] 18:	movi #97, egx
          [0x14] 20:	loadl ebx, fp+0
          [0x15] 21:	gte ebx, egx
          [0x16] 22:	movr ebx, cmt
          [0x17] 23:	cmp ebx, 1
          [0x18] 24:	movr ebx, cmt
          [0x19] 25:	skne 10 // pc = 35
          [0x1a] 26:	istore 1
          [0x1b] 27:	movi #122, egx
          [0x1d] 29:	loadl ebx, fp+0
          [0x1e] 30:	lte ebx, egx
          [0x1f] 31:	movr ebx, cmt
          [0x20] 32:	loadval ecx
          [0x21] 33:	and ecx, ebx
          [0x22] 34:	movr ebx, cmt
          [0x23] 35:	cmp ebx, 1
          [0x24] 36:	return_val cmt
          [0x25] 37:	ret

func:@62 [std#char.isAlphaNum] in file: lib/support/0.2.422//char.sharp:141:33: note:  
		    public static def isAlphaNum(var ch) : var {
		                                ^


isAlphaNum:
line: 141 [0x0] 0:	ipushl #0
          [0x1] 1:	call @61 // <std#char.isAlpha(var)>
          [0x2] 2:	loadval cmt
          [0x3] 3:	movr ebx, cmt
          [0x4] 4:	skpe 5 // pc = 9
          [0x5] 5:	ipushl #0
          [0x6] 6:	call @59 // <std#char.isDigit(var)>
          [0x7] 7:	loadval ebx
          [0x8] 8:	cmp ebx, 1
          [0x9] 9:	return_val cmt
          [0xa] 10:	ret

func:@63 [std#char.toLower] in file: lib/support/0.2.422//char.sharp:145:30: note:  
		    public static def toLower(var ch) : var {
		                             ^


toLower:
line: 145 [0x0] 0:	loadl egx, fp+0
          [0x1] 1:	movi #65, ebx
          [0x3] 3:	lte ebx, egx
          [0x4] 4:	movr ebx, cmt
          [0x5] 5:	cmp ebx, 1
          [0x6] 6:	movr ebx, cmt
          [0x7] 7:	skne 8 // pc = 15
          [0x8] 8:	istore 1
          [0x9] 9:	movi #90, egx
          [0xb] 11:	loadl ebx, fp+0
          [0xc] 12:	lte ebx, egx
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	loadval ecx
          [0xf] 15:	and ecx, ebx
          [0x10] 16:	jne 31
line: 146 [0x11] 17:	istore 65
          [0x12] 18:	loadl ebx, fp+0
          [0x13] 19:	loadval egx
          [0x14] 20:	sub ebx, egx -> ebx
          [0x16] 22:	rstore ebx
          [0x17] 23:	movi #97, ebx
          [0x19] 25:	loadval ecx
          [0x1a] 26:	add ebx, ecx -> ebx
          [0x1c] 28:	return_val ebx
          [0x1d] 29:	ret
          [0x1e] 30:	goto @35
line: 148 [0x1f] 31:	loadl ebx, fp+0
          [0x20] 32:	return_val ebx
          [0x21] 33:	ret
          [0x22] 34:	nop
          [0x23] 35:	nop
          [0x24] 36:	movi #0, ebx
          [0x26] 38:	return_val ebx
          [0x27] 39:	ret

func:@64 [std#char.toUpper] in file: lib/support/0.2.422//char.sharp:152:30: note:  
		    public static def toUpper(var ch) : var {
		                             ^


toUpper:
line: 152 [0x0] 0:	loadl egx, fp+0
          [0x1] 1:	movi #97, ebx
          [0x3] 3:	lte ebx, egx
          [0x4] 4:	movr ebx, cmt
          [0x5] 5:	cmp ebx, 1
          [0x6] 6:	movr ebx, cmt
          [0x7] 7:	skne 8 // pc = 15
          [0x8] 8:	istore 1
          [0x9] 9:	movi #122, egx
          [0xb] 11:	loadl ebx, fp+0
          [0xc] 12:	lte ebx, egx
          [0xd] 13:	movr ebx, cmt
          [0xe] 14:	loadval ecx
          [0xf] 15:	and ecx, ebx
          [0x10] 16:	jne 31
line: 153 [0x11] 17:	istore 97
          [0x12] 18:	loadl ebx, fp+0
          [0x13] 19:	loadval egx
          [0x14] 20:	sub ebx, egx -> ebx
          [0x16] 22:	rstore ebx
          [0x17] 23:	movi #65, ebx
          [0x19] 25:	loadval ecx
          [0x1a] 26:	add ebx, ecx -> ebx
          [0x1c] 28:	return_val ebx
          [0x1d] 29:	ret
          [0x1e] 30:	goto @35
line: 155 [0x1f] 31:	loadl ebx, fp+0
          [0x20] 32:	return_val ebx
          [0x21] 33:	ret
          [0x22] 34:	nop
          [0x23] 35:	nop
          [0x24] 36:	movi #0, ebx
          [0x26] 38:	return_val ebx
          [0x27] 39:	ret

func:@65 [std#char.toString] in file: lib/support/0.2.422//char.sharp:159:24: note:  
		    public def delegate::toString() : string {
		                       ^


toString:
line: 159 [0x0] 0:	new_class @47 // std#string
          [0x1] 1:	movl 0
          [0x2] 2:	movn #0
          [0x3] 3:	movi #0, adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	rstore ebx
          [0x7] 7:	call @554 // <std#string.string(var)>
          [0x8] 8:	movsl #0
          [0x9] 9:	returnobj
          [0xa] 10:	ret

func:@66 [std#char.char] in file: lib/support/0.2.422//char.sharp:3:13: note:  
		public class char base integer {
		            ^


char:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@67 [std#Enum.Enum] in file: lib/support/0.2.422//Enum.sharp:12:16: note:  
		    public Enum(var val) {
		               ^


Enum:
line: 12 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	nop
         [0x2] 2:	rstore ebx
         [0x3] 3:	movl 0
         [0x4] 4:	movn #2
         [0x5] 5:	movi #0, adx
         [0x7] 7:	loadval ecx
         [0x8] 8:	rmov adx, ecx
         [0x9] 9:	movl 0
         [0xa] 10:	returnobj
         [0xb] 11:	ret

func:@68 [std#Enum.$operator!=] in file: lib/support/0.2.422//Enum.sharp:16:24: note:  
		    public def operator!=(Enum e) : var {
		                       ^


$operator!=:
line: 16 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #2
         [0x8] 8:	iaload_2 egx, adx
         [0x9] 9:	loadval ebx
         [0xa] 10:	tne ebx, egx
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@69 [std#Enum.$operator!=] in file: lib/support/0.2.422//Enum.sharp:20:24: note:  
		    public def operator!=(var num) : var {
		                       ^


$operator!=:
line: 20 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	loadl egx, fp+1
         [0x6] 6:	tne ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@70 [std#Enum.$operator==] in file: lib/support/0.2.422//Enum.sharp:24:24: note:  
		    public def operator==(Enum e) : var {
		                       ^


$operator==:
line: 24 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #2
         [0x8] 8:	iaload_2 egx, adx
         [0x9] 9:	loadval ebx
         [0xa] 10:	test ebx, egx
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@71 [std#Enum.$operator==] in file: lib/support/0.2.422//Enum.sharp:28:24: note:  
		    public def operator==(var num) : var {
		                       ^


$operator==:
line: 28 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	loadl egx, fp+1
         [0x6] 6:	test ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@72 [std#Enum.Enum] in file: lib/support/0.2.422//Enum.sharp:32:16: note:  
		    public Enum(Enum e) {
		               ^


Enum:
line: 32 [0x0] 0:	movl 1
         [0x1] 1:	movn #2
         [0x2] 2:	nop
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	rstore ebx
         [0x7] 7:	movl 0
         [0x8] 8:	movn #2
         [0x9] 9:	loadval ecx
         [0xa] 10:	rmov adx, ecx
line: 33 [0xb] 11:	movl 1
         [0xc] 12:	movn #1
         [0xd] 13:	pushobj
         [0xe] 14:	movl 1
         [0xf] 15:	movn #1
         [0x10] 16:	sizeof ebx
         [0x11] 17:	rstore ebx
         [0x12] 18:	call @612 // <std#__SRT_Global.copyOf(object,var)>
         [0x13] 19:	movsl #0
         [0x14] 20:	vcast 1
         [0x15] 21:	movl 0
         [0x16] 22:	movn #1
         [0x17] 23:	popobj
         [0x18] 24:	movl 0
         [0x19] 25:	returnobj
         [0x1a] 26:	ret

func:@73 [std#Enum.getName] in file: lib/support/0.2.422//Enum.sharp:37:23: note:  
		    public def getName() : string {
		                      ^


getName:
line: 37 [0x0] 0:	new_class @47 // std#string
         [0x1] 1:	newstr @34 // ""
         [0x2] 2:	call @553 // <std#string.string(var[])>
         [0x3] 3:	movl 0
         [0x4] 4:	movn #1
         [0x5] 5:	pushobj
         [0x6] 6:	call @566 // <std#string.$operator+(var[])>
         [0x7] 7:	movsl #0
         [0x8] 8:	returnobj
         [0x9] 9:	ret

func:@74 [std#Enum.getValue] in file: lib/support/0.2.422//Enum.sharp:41:24: note:  
		    public def getValue() : var {
		                       ^


getValue:
line: 41 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@75 [std#Enum.toString] in file: lib/support/0.2.422//Enum.sharp:45:24: note:  
		    public def delegate::toString() : string {
		                       ^


toString:
line: 45 [0x0] 0:	pushl 0
         [0x1] 1:	call @73 // <std#Enum.getName()>
         [0x2] 2:	movsl #0
         [0x3] 3:	returnobj
         [0x4] 4:	ret

func:@76 [std#Enum.Enum] in file: lib/support/0.2.422//Enum.sharp:7:13: note:  
		public class Enum {
		            ^


Enum:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@77 [std#Exception.Exception] in file: lib/support/0.2.422//Exception.sharp:8:21: note:  
		    public Exception(var[] msg) {
		                    ^


Exception:
line: 8 [0x0] 0:	pushl 0
        [0x1] 1:	pushl 1
        [0x2] 2:	call @620 // <std#Throwable.Throwable(var[])>
        [0x3] 3:	pop
        [0x4] 4:	movl 0
        [0x5] 5:	returnobj
        [0x6] 6:	ret

func:@78 [std#Exception.Exception] in file: lib/support/0.2.422//Exception.sharp:12:21: note:  
		    public Exception(string msg) {
		                    ^


Exception:
line: 12 [0x0] 0:	pushl 0
         [0x1] 1:	pushl 1
         [0x2] 2:	call @621 // <std#Throwable.Throwable(std#string)>
         [0x3] 3:	pop
         [0x4] 4:	movl 0
         [0x5] 5:	returnobj
         [0x6] 6:	ret

func:@79 [std#Exception.Exception] in file: lib/support/0.2.422//Exception.sharp:6:13: note:  
		public class Exception base Throwable {
		            ^


Exception:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@80 [std#IllegalArgumentException.IllegalArgumentException] in file: lib/support/0.2.422//IllegalArgumentException.sharp:8:38: note:  
		      public IllegalArgumentException(var[] message) {
		                                     ^


IllegalArgumentException:
line: 8 [0x0] 0:	pushl 0
        [0x1] 1:	pushl 1
        [0x2] 2:	call @77 // <std#Exception.Exception(var[])>
        [0x3] 3:	pop
        [0x4] 4:	movl 0
        [0x5] 5:	returnobj
        [0x6] 6:	ret

func:@81 [std#IllegalArgumentException.IllegalArgumentException] in file: lib/support/0.2.422//IllegalArgumentException.sharp:12:38: note:  
		      public IllegalArgumentException(string message) {
		                                     ^


IllegalArgumentException:
line: 12 [0x0] 0:	pushl 0
         [0x1] 1:	pushl 1
         [0x2] 2:	call @78 // <std#Exception.Exception(std#string)>
         [0x3] 3:	pop
         [0x4] 4:	movl 0
         [0x5] 5:	returnobj
         [0x6] 6:	ret

func:@82 [std#IllegalArgumentException.IllegalArgumentException] in file: lib/support/0.2.422//IllegalArgumentException.sharp:6:13: note:  
		public class IllegalArgumentException base Exception {
		            ^


IllegalArgumentException:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@83 [std#IllegalStateException.IllegalStateException] in file: lib/support/0.2.422//IllegalStateException.sharp:8:35: note:  
		      public IllegalStateException(var[] message) {
		                                  ^


IllegalStateException:
line: 8 [0x0] 0:	pushl 0
        [0x1] 1:	pushl 1
        [0x2] 2:	call @77 // <std#Exception.Exception(var[])>
        [0x3] 3:	pop
        [0x4] 4:	movl 0
        [0x5] 5:	returnobj
        [0x6] 6:	ret

func:@84 [std#IllegalStateException.IllegalStateException] in file: lib/support/0.2.422//IllegalStateException.sharp:12:35: note:  
		      public IllegalStateException(string message) {
		                                  ^


IllegalStateException:
line: 12 [0x0] 0:	pushl 0
         [0x1] 1:	pushl 1
         [0x2] 2:	call @78 // <std#Exception.Exception(std#string)>
         [0x3] 3:	pop
         [0x4] 4:	movl 0
         [0x5] 5:	returnobj
         [0x6] 6:	ret

func:@85 [std#IllegalStateException.IllegalStateException] in file: lib/support/0.2.422//IllegalStateException.sharp:6:13: note:  
		public class IllegalStateException base Exception {
		            ^


IllegalStateException:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@86 [std#IndexOutOfBoundsException.IndexOutOfBoundsException] in file: lib/support/0.2.422//IndexOutOfBoundsException.sharp:8:39: note:  
		      public IndexOutOfBoundsException(var[] message) {
		                                      ^


IndexOutOfBoundsException:
line: 8 [0x0] 0:	pushl 0
        [0x1] 1:	pushl 1
        [0x2] 2:	call @77 // <std#Exception.Exception(var[])>
        [0x3] 3:	pop
        [0x4] 4:	movl 0
        [0x5] 5:	returnobj
        [0x6] 6:	ret

func:@87 [std#IndexOutOfBoundsException.IndexOutOfBoundsException] in file: lib/support/0.2.422//IndexOutOfBoundsException.sharp:12:39: note:  
		      public IndexOutOfBoundsException(string message) {
		                                      ^


IndexOutOfBoundsException:
line: 12 [0x0] 0:	pushl 0
         [0x1] 1:	pushl 1
         [0x2] 2:	call @78 // <std#Exception.Exception(std#string)>
         [0x3] 3:	pop
         [0x4] 4:	movl 0
         [0x5] 5:	returnobj
         [0x6] 6:	ret

func:@88 [std#IndexOutOfBoundsException.IndexOutOfBoundsException] in file: lib/support/0.2.422//IndexOutOfBoundsException.sharp:6:13: note:  
		public class IndexOutOfBoundsException base Exception {
		            ^


IndexOutOfBoundsException:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@89 [std#int.int] in file: lib/support/0.2.422//int.sharp:5:15: note:  
		    public int(var num) {
		              ^


int:
line: 5 [0x0] 0:	pushl 0
        [0x1] 1:	loadl ebx, fp+1
        [0x2] 2:	mov32 ebx, ebx
        [0x3] 3:	rstore ebx
        [0x4] 4:	call @119 // <std#integer.integer(var)>
        [0x5] 5:	pop
        [0x6] 6:	movl 0
        [0x7] 7:	returnobj
        [0x8] 8:	ret

func:@90 [std#int.int] in file: lib/support/0.2.422//int.sharp:9:15: note:  
		    public int(integer num) {
		              ^


int:
line: 9 [0x0] 0:	pushl 0
        [0x1] 1:	movl 1
        [0x2] 2:	movn #0
        [0x3] 3:	movi #0, adx
        [0x5] 5:	iaload_2 ebx, adx
        [0x6] 6:	mov32 ebx, ebx
        [0x7] 7:	rstore ebx
        [0x8] 8:	call @119 // <std#integer.integer(var)>
        [0x9] 9:	pop
        [0xa] 10:	movl 0
        [0xb] 11:	returnobj
        [0xc] 12:	ret

func:@91 [std#int.$operator+] in file: lib/support/0.2.422//int.sharp:13:24: note:  
		    public def operator+(var num) : var {
		                       ^


$operator+:
line: 13 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	add ebx, egx -> ebx
         [0x9] 9:	mov32 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@92 [std#int.$operator+] in file: lib/support/0.2.422//int.sharp:17:24: note:  
		    public def operator+(integer num) : int {
		                       ^


$operator+:
line: 17 [0x0] 0:	new_class @14 // std#int
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @91 // <std#int.$operator+(var)>
         [0x9] 9:	call @89 // <std#int.int(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@93 [std#int.$operator-] in file: lib/support/0.2.422//int.sharp:21:24: note:  
		    public def operator-(var num) : var {
		                       ^


$operator-:
line: 21 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	sub ebx, egx -> ebx
         [0x9] 9:	mov32 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@94 [std#int.$operator-] in file: lib/support/0.2.422//int.sharp:25:24: note:  
		    public def operator-(integer num) : int {
		                       ^


$operator-:
line: 25 [0x0] 0:	new_class @14 // std#int
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @93 // <std#int.$operator-(var)>
         [0x9] 9:	call @89 // <std#int.int(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@95 [std#int.$operator*] in file: lib/support/0.2.422//int.sharp:29:24: note:  
		    public def operator*(var num) : var {
		                       ^


$operator*:
line: 29 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	mul ebx, egx -> ebx
         [0x9] 9:	mov32 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@96 [std#int.$operator*] in file: lib/support/0.2.422//int.sharp:33:24: note:  
		    public def operator*(integer num) : int {
		                       ^


$operator*:
line: 33 [0x0] 0:	new_class @14 // std#int
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @95 // <std#int.$operator*(var)>
         [0x9] 9:	call @89 // <std#int.int(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@97 [std#int.$operator/] in file: lib/support/0.2.422//int.sharp:37:24: note:  
		    public def operator/(var num) : var {
		                       ^


$operator/:
line: 37 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	div ebx, egx -> ebx
         [0x9] 9:	mov32 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@98 [std#int.$operator/] in file: lib/support/0.2.422//int.sharp:41:24: note:  
		    public def operator/(integer num) : int {
		                       ^


$operator/:
line: 41 [0x0] 0:	new_class @14 // std#int
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @97 // <std#int.$operator/(var)>
         [0x9] 9:	call @89 // <std#int.int(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@99 [std#int.$operator=] in file: lib/support/0.2.422//int.sharp:45:24: note:  
		    public def operator=(var num) : var {
		                       ^


$operator=:
line: 45 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	mov32 ebx, ebx
         [0x2] 2:	nop
         [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #0
         [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
line: 46 [0xa] 10:	movl 0
         [0xb] 11:	movn #0
         [0xc] 12:	iaload_2 ebx, adx
         [0xd] 13:	return_val ebx
         [0xe] 14:	ret

func:@100 [std#int.$operator=] in file: lib/support/0.2.422//int.sharp:50:24: note:  
		    public def operator=(integer num) : int {
		                       ^


$operator=:
line: 50 [0x0] 0:	new_class @14 // std#int
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @99 // <std#int.$operator=(var)>
         [0x9] 9:	call @89 // <std#int.int(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@101 [std#int.$operator==] in file: lib/support/0.2.422//int.sharp:54:24: note:  
		    public def operator==(var num) : var {
		                       ^


$operator==:
line: 54 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	loadl egx, fp+1
         [0x6] 6:	test ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@102 [std#int.$operator==] in file: lib/support/0.2.422//int.sharp:58:24: note:  
		    public def operator==(integer num) : var {
		                       ^


$operator==:
line: 58 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	iaload_2 egx, adx
         [0x9] 9:	loadval ebx
         [0xa] 10:	test ebx, egx
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@103 [std#int.$operator!=] in file: lib/support/0.2.422//int.sharp:62:24: note:  
		    public def operator!=(var num) : var {
		                       ^


$operator!=:
line: 62 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	loadl egx, fp+1
         [0x6] 6:	tne ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@104 [std#int.$operator!=] in file: lib/support/0.2.422//int.sharp:66:24: note:  
		    public def operator!=(integer num) : var {
		                       ^


$operator!=:
line: 66 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	iaload_2 egx, adx
         [0x9] 9:	loadval ebx
         [0xa] 10:	tne ebx, egx
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@105 [std#int.$operator<] in file: lib/support/0.2.422//int.sharp:70:24: note:  
		    public def operator<(var num) : var {
		                       ^


$operator<:
line: 70 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	lt ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@106 [std#int.$operator<] in file: lib/support/0.2.422//int.sharp:74:24: note:  
		    public def operator<(integer num) : var {
		                       ^


$operator<:
line: 74 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #0
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lt ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@107 [std#int.$operator>] in file: lib/support/0.2.422//int.sharp:78:24: note:  
		    public def operator>(var num) : var {
		                       ^


$operator>:
line: 78 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	gt ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@108 [std#int.$operator>] in file: lib/support/0.2.422//int.sharp:82:24: note:  
		    public def operator>(integer num) : var {
		                       ^


$operator>:
line: 82 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #0
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	gt ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@109 [std#int.$operator<=] in file: lib/support/0.2.422//int.sharp:86:24: note:  
		    public def operator<=(var num) : var {
		                       ^


$operator<=:
line: 86 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	lte ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@110 [std#int.$operator<=] in file: lib/support/0.2.422//int.sharp:90:24: note:  
		    public def operator<=(integer num) : var {
		                       ^


$operator<=:
line: 90 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #0
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lte ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@111 [std#int.$operator>=] in file: lib/support/0.2.422//int.sharp:94:24: note:  
		    public def operator>=(var num) : var {
		                       ^


$operator>=:
line: 94 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	gte ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@112 [std#int.$operator>=] in file: lib/support/0.2.422//int.sharp:98:24: note:  
		    public def operator>=(integer num) : var {
		                       ^


$operator>=:
line: 98 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #0
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	gte ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@113 [std#int.$operator++] in file: lib/support/0.2.422//int.sharp:102:24: note:  
		    public def operator++(var num) : var { // post inc i++
		                       ^


$operator++:
line: 102 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	smovr_2 ebx, fp+2
line: 103 [0x6] 6:	istore 1
          [0x7] 7:	movl 0
          [0x8] 8:	movn #0
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	loadval egx
          [0xb] 11:	add ebx, egx -> ebx
          [0xd] 13:	mov32 ebx, ebx
          [0xe] 14:	nop
          [0xf] 15:	rstore ebx
          [0x10] 16:	movl 0
          [0x11] 17:	movn #0
          [0x12] 18:	loadval ecx
          [0x13] 19:	rmov adx, ecx
line: 104 [0x14] 20:	loadl ebx, fp+2
          [0x15] 21:	return_val ebx
          [0x16] 22:	ret

func:@114 [std#int.$operator++] in file: lib/support/0.2.422//int.sharp:108:24: note:  
		    public def operator++() : var { // pre inc ++i
		                       ^


$operator++:
line: 108 [0x0] 0:	istore 1
          [0x1] 1:	movl 0
          [0x2] 2:	movn #0
          [0x3] 3:	movi #0, adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	loadval egx
          [0x7] 7:	add ebx, egx -> ebx
          [0x9] 9:	mov32 ebx, ebx
          [0xa] 10:	nop
          [0xb] 11:	rstore ebx
          [0xc] 12:	movl 0
          [0xd] 13:	movn #0
          [0xe] 14:	loadval ecx
          [0xf] 15:	rmov adx, ecx
          [0x10] 16:	return_val ebx
          [0x11] 17:	ret

func:@115 [std#int.$operator--] in file: lib/support/0.2.422//int.sharp:112:24: note:  
		    public def operator--(var num) : var {
		                       ^


$operator--:
line: 112 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	smovr_2 ebx, fp+2
line: 113 [0x6] 6:	istore 1
          [0x7] 7:	movl 0
          [0x8] 8:	movn #0
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	loadval egx
          [0xb] 11:	sub ebx, egx -> ebx
          [0xd] 13:	mov32 ebx, ebx
          [0xe] 14:	nop
          [0xf] 15:	rstore ebx
          [0x10] 16:	movl 0
          [0x11] 17:	movn #0
          [0x12] 18:	loadval ecx
          [0x13] 19:	rmov adx, ecx
line: 114 [0x14] 20:	loadl ebx, fp+2
          [0x15] 21:	return_val ebx
          [0x16] 22:	ret

func:@116 [std#int.$operator--] in file: lib/support/0.2.422//int.sharp:118:24: note:  
		    public def operator--() : var {
		                       ^


$operator--:
line: 118 [0x0] 0:	istore 1
          [0x1] 1:	movl 0
          [0x2] 2:	movn #0
          [0x3] 3:	movi #0, adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	loadval egx
          [0x7] 7:	sub ebx, egx -> ebx
          [0x9] 9:	mov32 ebx, ebx
          [0xa] 10:	nop
          [0xb] 11:	rstore ebx
          [0xc] 12:	movl 0
          [0xd] 13:	movn #0
          [0xe] 14:	loadval ecx
          [0xf] 15:	rmov adx, ecx
          [0x10] 16:	return_val ebx
          [0x11] 17:	ret

func:@117 [std#int.toString] in file: lib/support/0.2.422//int.sharp:122:24: note:  
		    public def delegate::toString() : string {
		                       ^


toString:
line: 122 [0x0] 0:	new_class @47 // std#string
          [0x1] 1:	newstr @34 // ""
          [0x2] 2:	call @553 // <std#string.string(var[])>
          [0x3] 3:	movl 0
          [0x4] 4:	movn #0
          [0x5] 5:	movi #0, adx
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	rstore ebx
          [0x9] 9:	call @573 // <std#string.$operator+(var)>
          [0xa] 10:	movsl #0
          [0xb] 11:	returnobj
          [0xc] 12:	ret

func:@118 [std#int.int] in file: lib/support/0.2.422//int.sharp:3:13: note:  
		public class int base integer {
		            ^


int:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@119 [std#integer.integer] in file: lib/support/0.2.422//integer.sharp:11:19: note:  
		    public integer(var num) {
		                  ^


integer:
line: 11 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	nop
         [0x2] 2:	rstore ebx
         [0x3] 3:	movl 0
         [0x4] 4:	movn #0
         [0x5] 5:	movi #0, adx
         [0x7] 7:	loadval ecx
         [0x8] 8:	rmov adx, ecx
         [0x9] 9:	movl 0
         [0xa] 10:	returnobj
         [0xb] 11:	ret

func:@120 [std#integer.integer] in file: lib/support/0.2.422//integer.sharp:15:19: note:  
		    public integer(integer num) {
		                  ^


integer:
line: 15 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	nop
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	rstore ebx
         [0x7] 7:	movl 0
         [0x8] 8:	movn #0
         [0x9] 9:	loadval ecx
         [0xa] 10:	rmov adx, ecx
         [0xb] 11:	movl 0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@121 [std#integer.getValue] in file: lib/support/0.2.422//integer.sharp:19:24: note:  
		    public def getValue() : var {
		                       ^


getValue:
line: 19 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@122 [std#integer.hash] in file: lib/support/0.2.422//integer.sharp:23:17: note:  
		    def delegate::hash() : var {
		                ^


hash:
line: 23 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@123 [std#integer.integer] in file: lib/support/0.2.422//integer.sharp:6:6: note:  
		class integer {
		     ^


integer:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@124 [std#InvalidOperationException.InvalidOperationException] in file: lib/support/0.2.422//InvalidOperationException.sharp:8:39: note:  
		      public InvalidOperationException(var[] message) {
		                                      ^


InvalidOperationException:
line: 8 [0x0] 0:	pushl 0
        [0x1] 1:	pushl 1
        [0x2] 2:	call @77 // <std#Exception.Exception(var[])>
        [0x3] 3:	pop
        [0x4] 4:	movl 0
        [0x5] 5:	returnobj
        [0x6] 6:	ret

func:@125 [std#InvalidOperationException.InvalidOperationException] in file: lib/support/0.2.422//InvalidOperationException.sharp:12:39: note:  
		      public InvalidOperationException(string message) {
		                                      ^


InvalidOperationException:
line: 12 [0x0] 0:	pushl 0
         [0x1] 1:	pushl 1
         [0x2] 2:	call @78 // <std#Exception.Exception(std#string)>
         [0x3] 3:	pop
         [0x4] 4:	movl 0
         [0x5] 5:	returnobj
         [0x6] 6:	ret

func:@126 [std#InvalidOperationException.InvalidOperationException] in file: lib/support/0.2.422//InvalidOperationException.sharp:6:13: note:  
		public class InvalidOperationException base Exception {
		            ^


InvalidOperationException:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@127 [std.io#File.File] in file: lib/support/0.2.422//io//File.sharp:25:16: note:  
		    public File(string path) {
		               ^


File:
line: 25 [0x0] 0:	movl 1
         [0x1] 1:	checknull
         [0x2] 2:	jne 8
line: 26 [0x3] 3:	new_class @36 // std#NullptrException
         [0x4] 4:	newstr @40 // "file path cannot be null"
         [0x5] 5:	call @399 // <std#NullptrException.NullptrException(var[])>
         [0x6] 6:	throw 
         [0x7] 7:	nop
         [0x8] 8:	nop
line: 27 [0x9] 9:	movg @17 // @std.io#File
         [0xa] 10:	movn #0
         [0xb] 11:	pushobj
         [0xc] 12:	pushl 1
         [0xd] 13:	invoke_delegate 1, 1
         [0xe] 14:	movl 0
         [0xf] 15:	movn #1
         [0x10] 16:	popobj
         [0x11] 17:	movl 0
         [0x12] 18:	returnobj
         [0x13] 19:	ret

func:@128 [std.io#File.File] in file: lib/support/0.2.422//io//File.sharp:31:16: note:  
		    public File(var[] path) {
		               ^


File:
line: 31 [0x0] 0:	movl 1
         [0x1] 1:	checknull
         [0x2] 2:	jne 8
line: 32 [0x3] 3:	new_class @36 // std#NullptrException
         [0x4] 4:	newstr @40 // "file path cannot be null"
         [0x5] 5:	call @399 // <std#NullptrException.NullptrException(var[])>
         [0x6] 6:	throw 
         [0x7] 7:	nop
         [0x8] 8:	nop
line: 33 [0x9] 9:	movg @17 // @std.io#File
         [0xa] 10:	movn #0
         [0xb] 11:	pushobj
         [0xc] 12:	new_class @47 // std#string
         [0xd] 13:	newstr @34 // ""
         [0xe] 14:	call @553 // <std#string.string(var[])>
         [0xf] 15:	pushl 1
         [0x10] 16:	call @566 // <std#string.$operator+(var[])>
         [0x11] 17:	invoke_delegate 1, 1
         [0x12] 18:	movl 0
         [0x13] 19:	movn #1
         [0x14] 20:	popobj
         [0x15] 21:	movl 0
         [0x16] 22:	returnobj
         [0x17] 23:	ret

func:@129 [std.io#File.getName] in file: lib/support/0.2.422//io//File.sharp:37:23: note:  
		    public def getName() : string {
		                      ^


getName:
line: 37 [0x0] 0:	movl 0
         [0x1] 1:	movn #1
         [0x2] 2:	checknull
         [0x3] 3:	movr ebx, cmt
         [0x4] 4:	movr ebx, cmt
         [0x5] 5:	skpe 10 // pc = 15
         [0x6] 6:	movl 0
         [0x7] 7:	movn #1
         [0x8] 8:	pushobj
         [0x9] 9:	call @589 // <std#string.size()>
         [0xa] 10:	movi #0, egx
         [0xc] 12:	loadval ebx
         [0xd] 13:	test ebx, egx
         [0xe] 14:	movr ebx, cmt
         [0xf] 15:	cmp ebx, 1
         [0x10] 16:	jne 24
line: 38 [0x11] 17:	new_class @47 // std#string
         [0x12] 18:	newstr @34 // ""
         [0x13] 19:	call @553 // <std#string.string(var[])>
         [0x14] 20:	movsl #0
         [0x15] 21:	returnobj
         [0x16] 22:	ret
         [0x17] 23:	nop
         [0x18] 24:	nop
line: 41 [0x19] 25:	new_class @47 // std#string
         [0x1a] 26:	newstr @34 // ""
         [0x1b] 27:	call @553 // <std#string.string(var[])>
         [0x1c] 28:	popl 1
line: 42 [0x1d] 29:	istorel 0, fp+2
line: 44 [0x1f] 31:	istore 1
         [0x20] 32:	movl 0
         [0x21] 33:	movn #1
         [0x22] 34:	pushobj
         [0x23] 35:	call @589 // <std#string.size()>
         [0x24] 36:	loadval ebx
         [0x25] 37:	loadval ecx
         [0x26] 38:	sub ebx, ecx -> ebx
         [0x28] 40:	rstore ebx
         [0x29] 41:	ipopl 3
         [0x2a] 42:	movi #0, egx
         [0x2c] 44:	loadl ebx, fp+3
         [0x2d] 45:	gt ebx, egx
         [0x2e] 46:	jne 73
line: 45 [0x2f] 47:	movl 0
         [0x30] 48:	movn #1
         [0x31] 49:	pushobj
         [0x32] 50:	ipushl #3
         [0x33] 51:	call @563 // <std#string.at(var)>
         [0x34] 52:	movg @17 // @std.io#File
         [0x35] 53:	movn #2
         [0x36] 54:	movi #0, adx
         [0x38] 56:	iaload_2 egx, adx
         [0x39] 57:	loadval ebx
         [0x3a] 58:	test ebx, egx
         [0x3b] 59:	jne 69
line: 46 [0x3c] 60:	istore 1
         [0x3d] 61:	loadl ebx, fp+3
         [0x3e] 62:	loadval egx
         [0x3f] 63:	add ebx, egx -> ebx
         [0x41] 65:	rstore ebx
         [0x42] 66:	ipopl 2
line: 47 [0x43] 67:	goto @73
         [0x44] 68:	nop
         [0x45] 69:	nop
         [0x46] 70:	loadl ebx, fp+3
         [0x47] 71:	isubl #1, @3
         [0x48] 72:	goto @42
line: 50 [0x49] 73:	loadl ebx, fp+2
         [0x4a] 74:	smovr_2 ebx, fp+4
         [0x4b] 75:	movl 0
         [0x4c] 76:	movn #1
         [0x4d] 77:	pushobj
         [0x4e] 78:	call @589 // <std#string.size()>
         [0x4f] 79:	loadval egx
         [0x50] 80:	loadl ebx, fp+4
         [0x51] 81:	lt ebx, egx
         [0x52] 82:	jne 103
line: 51 [0x53] 83:	movi #1, ebx
         [0x55] 85:	newarry ebx
         [0x56] 86:	movl 0
         [0x57] 87:	movn #1
         [0x58] 88:	pushobj
         [0x59] 89:	ipushl #4
         [0x5a] 90:	call @563 // <std#string.at(var)>
         [0x5b] 91:	loadval ebx
         [0x5c] 92:	movsl #0
         [0x5d] 93:	movi #0, adx
         [0x5f] 95:	rmov adx, ebx
         [0x60] 96:	popl 5
         [0x61] 97:	pushl 1
line: 52 [0x62] 98:	pushl 5
         [0x63] 99:	call @576 // <std#string.$operator+=(var[])>
         [0x64] 100:	pop
         [0x65] 101:	iaddl 1, @4
         [0x66] 102:	goto @75
line: 55 [0x67] 103:	movl 1
         [0x68] 104:	returnobj
         [0x69] 105:	ret

func:@130 [std.io#File.getParentFile] in file: lib/support/0.2.422//io//File.sharp:59:29: note:  
		    public def getParentFile() : File {
		                            ^


getParentFile:
line: 59 [0x0] 0:	movl 0
         [0x1] 1:	movn #1
         [0x2] 2:	checknull
         [0x3] 3:	movr ebx, cmt
         [0x4] 4:	movr ebx, cmt
         [0x5] 5:	skpe 10 // pc = 15
         [0x6] 6:	movl 0
         [0x7] 7:	movn #1
         [0x8] 8:	pushobj
         [0x9] 9:	call @589 // <std#string.size()>
         [0xa] 10:	movi #0, egx
         [0xc] 12:	loadval ebx
         [0xd] 13:	test ebx, egx
         [0xe] 14:	movr ebx, cmt
         [0xf] 15:	cmp ebx, 1
         [0x10] 16:	jne 21
line: 60 [0x11] 17:	movl 0
         [0x12] 18:	del
         [0x13] 19:	ret
         [0x14] 20:	nop
         [0x15] 21:	nop
line: 63 [0x16] 22:	new_class @47 // std#string
         [0x17] 23:	newstr @34 // ""
         [0x18] 24:	call @553 // <std#string.string(var[])>
         [0x19] 25:	popl 1
line: 64 [0x1a] 26:	istorel 0, fp+2
line: 66 [0x1c] 28:	istore 1
         [0x1d] 29:	movl 0
         [0x1e] 30:	movn #1
         [0x1f] 31:	pushobj
         [0x20] 32:	call @589 // <std#string.size()>
         [0x21] 33:	loadval ebx
         [0x22] 34:	loadval ecx
         [0x23] 35:	sub ebx, ecx -> ebx
         [0x25] 37:	rstore ebx
         [0x26] 38:	ipopl 3
         [0x27] 39:	movi #0, egx
         [0x29] 41:	loadl ebx, fp+3
         [0x2a] 42:	gt ebx, egx
         [0x2b] 43:	jne 65
line: 67 [0x2c] 44:	movl 0
         [0x2d] 45:	movn #1
         [0x2e] 46:	pushobj
         [0x2f] 47:	ipushl #3
         [0x30] 48:	call @563 // <std#string.at(var)>
         [0x31] 49:	movg @17 // @std.io#File
         [0x32] 50:	movn #2
         [0x33] 51:	movi #0, adx
         [0x35] 53:	iaload_2 egx, adx
         [0x36] 54:	loadval ebx
         [0x37] 55:	test ebx, egx
         [0x38] 56:	jne 61
line: 68 [0x39] 57:	loadl ebx, fp+3
         [0x3a] 58:	smovr_2 ebx, fp+2
line: 69 [0x3b] 59:	goto @65
         [0x3c] 60:	nop
         [0x3d] 61:	nop
         [0x3e] 62:	loadl ebx, fp+3
         [0x3f] 63:	isubl #1, @3
         [0x40] 64:	goto @39
line: 72 [0x41] 65:	istorel 0, fp+4
         [0x43] 67:	loadl egx, fp+2
         [0x44] 68:	loadl ebx, fp+4
         [0x45] 69:	lt ebx, egx
         [0x46] 70:	jne 91
line: 73 [0x47] 71:	movi #1, ebx
         [0x49] 73:	newarry ebx
         [0x4a] 74:	movl 0
         [0x4b] 75:	movn #1
         [0x4c] 76:	pushobj
         [0x4d] 77:	ipushl #4
         [0x4e] 78:	call @563 // <std#string.at(var)>
         [0x4f] 79:	loadval ebx
         [0x50] 80:	movsl #0
         [0x51] 81:	movi #0, adx
         [0x53] 83:	rmov adx, ebx
         [0x54] 84:	popl 5
         [0x55] 85:	pushl 1
line: 74 [0x56] 86:	pushl 5
         [0x57] 87:	call @576 // <std#string.$operator+=(var[])>
         [0x58] 88:	pop
         [0x59] 89:	iaddl 1, @4
         [0x5a] 90:	goto @67
line: 77 [0x5b] 91:	new_class @17 // std.io#File
         [0x5c] 92:	pushl 1
         [0x5d] 93:	call @127 // <std.io#File.File(std#string)>
         [0x5e] 94:	movsl #0
         [0x5f] 95:	returnobj
         [0x60] 96:	ret

func:@131 [std.io#File.getPath] in file: lib/support/0.2.422//io//File.sharp:81:23: note:  
		    public def getPath() : string {
		                      ^


getPath:
line: 81 [0x0] 0:	movl 0
         [0x1] 1:	movn #1
         [0x2] 2:	returnobj
         [0x3] 3:	ret

func:@132 [std.io#File.getAbsolutePath] in file: lib/support/0.2.422//io//File.sharp:98:31: note:  
		    public def getAbsolutePath() : string {
		                              ^


getAbsolutePath:
line: 98 [0x0] 0:	movg @17 // @std.io#File
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	pushl 0
         [0x4] 4:	call @165 // <std.io#FileSystem.resolve(std.io#File)>
         [0x5] 5:	movsl #0
         [0x6] 6:	returnobj
         [0x7] 7:	ret

func:@133 [std.io#File.isReadable] in file: lib/support/0.2.422//io//File.sharp:107:26: note:  
		    public def isReadable() : var {
		                         ^


isReadable:
line: 107 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	pushl 0
          [0x4] 4:	istore 4
          [0x5] 5:	invoke_delegate 3, 2
          [0x6] 6:	movi #0, egx
          [0x8] 8:	loadval ebx
          [0x9] 9:	test ebx, egx
          [0xa] 10:	return_val cmt
          [0xb] 11:	ret

func:@134 [std.io#File.isWriteable] in file: lib/support/0.2.422//io//File.sharp:116:27: note:  
		    public def isWriteable() : var {
		                          ^


isWriteable:
line: 116 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	pushl 0
          [0x4] 4:	istore 2
          [0x5] 5:	invoke_delegate 3, 2
          [0x6] 6:	movi #0, egx
          [0x8] 8:	loadval ebx
          [0x9] 9:	test ebx, egx
          [0xa] 10:	return_val cmt
          [0xb] 11:	ret

func:@135 [std.io#File.exists] in file: lib/support/0.2.422//io//File.sharp:125:22: note:  
		    public def exists() : var {
		                     ^


exists:
line: 125 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	pushl 0
          [0x4] 4:	istore 0
          [0x5] 5:	invoke_delegate 3, 2
          [0x6] 6:	movi #0, egx
          [0x8] 8:	loadval ebx
          [0x9] 9:	test ebx, egx
          [0xa] 10:	return_val cmt
          [0xb] 11:	ret

func:@136 [std.io#File.isDirectory] in file: lib/support/0.2.422//io//File.sharp:134:27: note:  
		    public def isDirectory() : var {
		                          ^


isDirectory:
line: 134 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	pushl 0
          [0x4] 4:	invoke_delegate 2, 1
          [0x5] 5:	loadval ebx
          [0x6] 6:	rstore ebx
          [0x7] 7:	movi #4, ebx
          [0x9] 9:	loadval ecx
          [0xa] 10:	uand ecx, ebx
          [0xb] 11:	rstore cmt
          [0xc] 12:	movi #0, egx
          [0xe] 14:	loadval ebx
          [0xf] 15:	tne ebx, egx
          [0x10] 16:	return_val cmt
          [0x11] 17:	ret

func:@137 [std.io#File.isFile] in file: lib/support/0.2.422//io//File.sharp:145:22: note:  
		    public def isFile() : var {
		                     ^


isFile:
line: 145 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	pushl 0
          [0x4] 4:	invoke_delegate 2, 1
          [0x5] 5:	loadval ebx
          [0x6] 6:	rstore ebx
          [0x7] 7:	movi #2, ebx
          [0x9] 9:	loadval ecx
          [0xa] 10:	uand ecx, ebx
          [0xb] 11:	rstore cmt
          [0xc] 12:	movi #0, egx
          [0xe] 14:	loadval ebx
          [0xf] 15:	tne ebx, egx
          [0x10] 16:	return_val cmt
          [0x11] 17:	ret

func:@138 [std.io#File.isHidden] in file: lib/support/0.2.422//io//File.sharp:157:24: note:  
		    public def isHidden() : var {
		                       ^


isHidden:
line: 157 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	pushl 0
          [0x4] 4:	invoke_delegate 2, 1
          [0x5] 5:	loadval ebx
          [0x6] 6:	rstore ebx
          [0x7] 7:	movi #8, ebx
          [0x9] 9:	loadval ecx
          [0xa] 10:	uand ecx, ebx
          [0xb] 11:	rstore cmt
          [0xc] 12:	movi #0, egx
          [0xe] 14:	loadval ebx
          [0xf] 15:	tne ebx, egx
          [0x10] 16:	return_val cmt
          [0x11] 17:	ret

func:@139 [std.io#File.lastModified] in file: lib/support/0.2.422//io//File.sharp:166:28: note:  
		    public def lastModified() : var {
		                           ^


lastModified:
line: 166 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	pushl 0
          [0x4] 4:	call @167 // <std.io#FileSystem.getLastModifiedTime(std.io#File)>
          [0x5] 5:	loadval ebx
          [0x6] 6:	return_val ebx
          [0x7] 7:	ret

func:@140 [std.io#File.length] in file: lib/support/0.2.422//io//File.sharp:175:22: note:  
		    public def length() : var {
		                     ^


length:
line: 175 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	pushl 0
          [0x4] 4:	call @168 // <std.io#FileSystem.getLength(std.io#File)>
          [0x5] 5:	loadval ebx
          [0x6] 6:	return_val ebx
          [0x7] 7:	ret

func:@141 [std.io#File.create] in file: lib/support/0.2.422//io//File.sharp:190:22: note:  
		    public def create() {
		                     ^


create:
line: 190 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	movl 0
          [0x4] 4:	movn #1
          [0x5] 5:	pushobj
          [0x6] 6:	call @169 // <std.io#FileSystem.createFile(std#string)>
          [0x7] 7:	ret

func:@142 [std.io#File.delete] in file: lib/support/0.2.422//io//File.sharp:200:22: note:  
		    public def delete() : var {
		                     ^


delete:
line: 200 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	pushl 0
          [0x4] 4:	call @171 // <std.io#FileSystem.delete(std.io#File)>
          [0x5] 5:	movi #0, egx
          [0x7] 7:	loadval ebx
          [0x8] 8:	test ebx, egx
          [0x9] 9:	return_val cmt
          [0xa] 10:	ret

func:@143 [std.io#File.list] in file: lib/support/0.2.422//io//File.sharp:216:20: note:  
		    public def list() : string[] {
		                   ^


list:
line: 216 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	pushl 0
          [0x4] 4:	call @172 // <std.io#FileSystem.list(std.io#File)>
          [0x5] 5:	movsl #0
          [0x6] 6:	returnobj
          [0x7] 7:	ret

func:@144 [std.io#File.mkdir] in file: lib/support/0.2.422//io//File.sharp:224:21: note:  
		    public def mkdir() : var {
		                    ^


mkdir:
line: 224 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	pushl 0
          [0x4] 4:	call @173 // <std.io#FileSystem.createDirectory(std.io#File)>
          [0x5] 5:	movi #0, egx
          [0x7] 7:	loadval ebx
          [0x8] 8:	test ebx, egx
          [0x9] 9:	return_val cmt
          [0xa] 10:	ret

func:@145 [std.io#File.renameTo] in file: lib/support/0.2.422//io//File.sharp:243:24: note:  
		    public def renameTo(File dest) : var {
		                       ^


renameTo:
line: 243 [0x0] 0:	movl 1
          [0x1] 1:	checknull
          [0x2] 2:	jne 7
line: 244 [0x3] 3:	new_class @36 // std#NullptrException
          [0x4] 4:	call @401 // <std#NullptrException.NullptrException()>
          [0x5] 5:	throw 
          [0x6] 6:	nop
          [0x7] 7:	nop
line: 246 [0x8] 8:	movg @17 // @std.io#File
          [0x9] 9:	movn #0
          [0xa] 10:	pushobj
          [0xb] 11:	pushl 0
          [0xc] 12:	pushl 1
          [0xd] 13:	call @174 // <std.io#FileSystem.rename(std.io#File,std.io#File)>
          [0xe] 14:	ipopl 2
line: 247 [0xf] 15:	ipushl #2
          [0x10] 16:	movi #0, egx
          [0x12] 18:	loadval ebx
          [0x13] 19:	test ebx, egx
          [0x14] 20:	jne 27
line: 248 [0x15] 21:	pushl 1
          [0x16] 22:	call @131 // <std.io#File.getPath()>
          [0x17] 23:	movl 0
          [0x18] 24:	movn #1
          [0x19] 25:	popobj
          [0x1a] 26:	nop
          [0x1b] 27:	nop
line: 250 [0x1c] 28:	ipushl #2
          [0x1d] 29:	movi #0, egx
          [0x1f] 31:	loadval ebx
          [0x20] 32:	test ebx, egx
          [0x21] 33:	return_val cmt
          [0x22] 34:	ret

func:@146 [std.io#File.setLastModified] in file: lib/support/0.2.422//io//File.sharp:266:31: note:  
		    public def setLastModified(var time) : var {
		                              ^


setLastModified:
line: 266 [0x0] 0:	movi #0, egx
          [0x2] 2:	loadl ebx, fp+1
          [0x3] 3:	lt ebx, egx
          [0x4] 4:	movr ebx, cmt
          [0x5] 5:	mov32 ebx, ebx
          [0x6] 6:	movr cmt, ebx
          [0x7] 7:	jne 13
line: 266 [0x8] 8:	new_class @11 // std#IllegalArgumentException
          [0x9] 9:	newstr @41 // "Negative time"
          [0xa] 10:	call @80 // <std#IllegalArgumentException.IllegalArgumentException(var[])>
          [0xb] 11:	throw 
          [0xc] 12:	nop
          [0xd] 13:	nop
line: 267 [0xe] 14:	movg @17 // @std.io#File
          [0xf] 15:	movn #0
          [0x10] 16:	pushobj
          [0x11] 17:	pushl 0
          [0x12] 18:	ipushl #1
          [0x13] 19:	call @177 // <std.io#FileSystem.setLastModifiedTime(std.io#File,var)>
          [0x14] 20:	loadval ebx
          [0x15] 21:	return_val ebx
          [0x16] 22:	ret

func:@147 [std.io#File.setReadOnly] in file: lib/support/0.2.422//io//File.sharp:279:27: note:  
		    public def setReadOnly() : var {
		                          ^


setReadOnly:
line: 279 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	pushl 0
          [0x4] 4:	call @178 // <std.io#FileSystem.setReadOnly(std.io#File)>
          [0x5] 5:	movi #0, egx
          [0x7] 7:	loadval ebx
          [0x8] 8:	test ebx, egx
          [0x9] 9:	return_val cmt
          [0xa] 10:	ret

func:@148 [std.io#File.setWritable] in file: lib/support/0.2.422//io//File.sharp:288:27: note:  
		    public def setWritable(var writable, var ownerOnly) : var {
		                          ^


setWritable:
line: 288 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	pushl 0
          [0x4] 4:	istore 2
          [0x5] 5:	ipushl #1
          [0x6] 6:	ipushl #2
          [0x7] 7:	call @166 // <std.io#FileSystem.setPermission(std.io#File,var,var,var)>
          [0x8] 8:	loadval ebx
          [0x9] 9:	return_val ebx
          [0xa] 10:	ret

func:@149 [std.io#File.setWritable] in file: lib/support/0.2.422//io//File.sharp:297:27: note:  
		    public def setWritable(var writable) : var {
		                          ^


setWritable:
line: 297 [0x0] 0:	pushl 0
          [0x1] 1:	ipushl #1
          [0x2] 2:	istore 1
          [0x3] 3:	call @148 // <std.io#File.setWritable(var,var)>
          [0x4] 4:	loadval ebx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@150 [std.io#File.setReadable] in file: lib/support/0.2.422//io//File.sharp:306:27: note:  
		    public def setReadable(var readable, var ownerOnly) : var {
		                          ^


setReadable:
line: 306 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	pushl 0
          [0x4] 4:	istore 4
          [0x5] 5:	ipushl #1
          [0x6] 6:	ipushl #2
          [0x7] 7:	call @166 // <std.io#FileSystem.setPermission(std.io#File,var,var,var)>
          [0x8] 8:	loadval ebx
          [0x9] 9:	return_val ebx
          [0xa] 10:	ret

func:@151 [std.io#File.setReadable] in file: lib/support/0.2.422//io//File.sharp:315:27: note:  
		    public def setReadable(var readable) : var {
		                          ^


setReadable:
line: 315 [0x0] 0:	pushl 0
          [0x1] 1:	ipushl #1
          [0x2] 2:	istore 1
          [0x3] 3:	call @150 // <std.io#File.setReadable(var,var)>
          [0x4] 4:	loadval ebx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@152 [std.io#File.setExecutable] in file: lib/support/0.2.422//io//File.sharp:324:29: note:  
		    public def setExecutable(var executable, var ownerOnly) : var {
		                            ^


setExecutable:
line: 324 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	pushl 0
          [0x4] 4:	istore 1
          [0x5] 5:	ipushl #1
          [0x6] 6:	ipushl #2
          [0x7] 7:	call @166 // <std.io#FileSystem.setPermission(std.io#File,var,var,var)>
          [0x8] 8:	loadval ebx
          [0x9] 9:	return_val ebx
          [0xa] 10:	ret

func:@153 [std.io#File.setExecutable] in file: lib/support/0.2.422//io//File.sharp:333:29: note:  
		    public def setExecutable(var executable) : var {
		                            ^


setExecutable:
line: 333 [0x0] 0:	pushl 0
          [0x1] 1:	ipushl #1
          [0x2] 2:	istore 1
          [0x3] 3:	call @152 // <std.io#File.setExecutable(var,var)>
          [0x4] 4:	loadval ebx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@154 [std.io#File.canExecute] in file: lib/support/0.2.422//io//File.sharp:342:26: note:  
		    public def canExecute() : var {
		                         ^


canExecute:
line: 342 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	pushl 0
          [0x4] 4:	istore 1
          [0x5] 5:	invoke_delegate 3, 2
          [0x6] 6:	loadval ebx
          [0x7] 7:	return_val ebx
          [0x8] 8:	ret

func:@155 [std.io#File.getTotalSpace] in file: lib/support/0.2.422//io//File.sharp:354:29: note:  
		    public def getTotalSpace() : var {
		                            ^


getTotalSpace:
line: 354 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	pushl 0
          [0x4] 4:	istore 0
          [0x5] 5:	call @179 // <std.io#FileSystem.getSpace(std.io#File,var)>
          [0x6] 6:	loadval ebx
          [0x7] 7:	return_val ebx
          [0x8] 8:	ret

func:@156 [std.io#File.getFreeSpace] in file: lib/support/0.2.422//io//File.sharp:363:28: note:  
		    public def getFreeSpace() : var {
		                           ^


getFreeSpace:
line: 363 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	pushl 0
          [0x4] 4:	istore 1
          [0x5] 5:	call @179 // <std.io#FileSystem.getSpace(std.io#File,var)>
          [0x6] 6:	loadval ebx
          [0x7] 7:	return_val ebx
          [0x8] 8:	ret

func:@157 [std.io#File.getUsableSpace] in file: lib/support/0.2.422//io//File.sharp:386:30: note:  
		    public def getUsableSpace() : var {
		                             ^


getUsableSpace:
line: 386 [0x0] 0:	movg @17 // @std.io#File
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	pushl 0
          [0x4] 4:	istore 2
          [0x5] 5:	call @179 // <std.io#FileSystem.getSpace(std.io#File,var)>
          [0x6] 6:	loadval ebx
          [0x7] 7:	return_val ebx
          [0x8] 8:	ret

func:@158 [std.io#File.generateTempFile] in file: lib/support/0.2.422//io//File.sharp:393:39: note:  
		    private static def generateTempFile(string prefix, string suffix, File dir) : File
		                                      ^


generateTempFile:
line: 404 [0x0] 0:	movl 0
          [0x1] 1:	del
          [0x2] 2:	ret

func:@159 [std.io#File.createTempFile] in file: lib/support/0.2.422//io//File.sharp:414:37: note:  
		    public static def createTempFile(string prefix, string suffix,
		                                    ^


createTempFile:
line: 436 [0x0] 0:	movl 0
          [0x1] 1:	del
          [0x2] 2:	ret

func:@160 [std.io#File.createTempFile] in file: lib/support/0.2.422//io//File.sharp:448:37: note:  
		    public static def createTempFile(string prefix, string suffix) : File
		                                    ^


createTempFile:
line: 449 [0x0] 0:	pushl 0
          [0x1] 1:	pushl 1
          [0x2] 2:	pushnil 
          [0x3] 3:	call @159 // <std.io#File.createTempFile(std#string,std#string,std.io#File)>
          [0x4] 4:	movsl #0
          [0x5] 5:	returnobj
          [0x6] 6:	ret

func:@161 [std.io#File.readAllText] in file: lib/support/0.2.422//io//File.sharp:453:34: note:  
		    public static def readAllText(File file, StreamBuffer io) {
		                                 ^


readAllText:
line: 453 [0x0] 0:	pushl 0
          [0x1] 1:	pushl 1
          [0x2] 2:	call @175 // <std.io#FileSystem.read(std.io#File,std.io#StreamBuffer)>
          [0x3] 3:	ret

func:@162 [std.io#File.write] in file: lib/support/0.2.422//io//File.sharp:457:28: note:  
		    public static def write(File file, StreamBuffer io) {
		                           ^


write:
line: 457 [0x0] 0:	pushl 0
          [0x1] 1:	pushl 1
          [0x2] 2:	call @176 // <std.io#FileSystem.write(std.io#File,std.io#StreamBuffer)>
          [0x3] 3:	pop
          [0x4] 4:	ret

func:@163 [std.io#File.getFileSystem] in file: lib/support/0.2.422//io//File.sharp:461:37: note:  
		    private static def getFileSystem() : FileSystem {
		                                    ^


getFileSystem:
line: 461 [0x0] 0:	call @298 // <std.kernel#Manifest.isWindows()>
          [0x1] 1:	loadval cmt
          [0x2] 2:	jne 9
line: 462 [0x3] 3:	new_class @25 // std.io#WinFileSystem
          [0x4] 4:	call @247 // <std.io#WinFileSystem.WinFileSystem()>
          [0x5] 5:	movsl #0
          [0x6] 6:	returnobj
          [0x7] 7:	ret
          [0x8] 8:	goto @15
line: 464 [0x9] 9:	new_class @24 // std.io#UnixFileSystem
          [0xa] 10:	call @242 // <std.io#UnixFileSystem.UnixFileSystem()>
          [0xb] 11:	movsl #0
          [0xc] 12:	returnobj
          [0xd] 13:	ret
          [0xe] 14:	nop
          [0xf] 15:	nop
          [0x10] 16:	pushnil 
          [0x11] 17:	popobj
          [0x12] 18:	returnobj
          [0x13] 19:	ret

func:@164 [std.io#File.File] in file: lib/support/0.2.422//io//File.sharp:18:13: note:  
		public class File {
		            ^


File:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@165 [std.io#FileSystem.resolve] in file: lib/support/0.2.422//io//FileSystem.sharp:30:24: note:  
		     public def resolve(File f) : string {
		                       ^


resolve:
line: 31 [0x0] 0:	pushl 1
         [0x1] 1:	call @131 // <std.io#File.getPath()>
         [0x2] 2:	call @578 // <std#string.toArray()>
         [0x3] 3:	popl 2
         [0x4] 4:	pushl 2
line: 37 [0x5] 5:	int 0xb0
         [0x6] 6:	popl 2
line: 43 [0x7] 7:	movl 2
         [0x8] 8:	checknull
         [0x9] 9:	jne 20
line: 44 [0xa] 10:	new_class @19 // std.io#IOException
         [0xb] 11:	new_class @47 // std#string
         [0xc] 12:	newstr @42 // "file could not be resolved: "
         [0xd] 13:	call @553 // <std#string.string(var[])>
         [0xe] 14:	pushl 1
         [0xf] 15:	call @131 // <std.io#File.getPath()>
         [0x10] 16:	call @567 // <std#string.$operator+(std#Printable)>
         [0x11] 17:	call @182 // <std.io#IOException.IOException(std#string)>
         [0x12] 18:	throw 
         [0x13] 19:	nop
         [0x14] 20:	nop
line: 47 [0x15] 21:	new_class @47 // std#string
         [0x16] 22:	newstr @34 // ""
         [0x17] 23:	call @553 // <std#string.string(var[])>
         [0x18] 24:	pushl 2
         [0x19] 25:	call @566 // <std#string.$operator+(var[])>
         [0x1a] 26:	movsl #0
         [0x1b] 27:	returnobj
         [0x1c] 28:	ret

func:@166 [std.io#FileSystem.setPermission] in file: lib/support/0.2.422//io//FileSystem.sharp:84:30: note:  
		     public def setPermission(File f, var access, var enable, var owneronly) : var {
		                             ^


setPermission:
line: 85 [0x0] 0:	pushl 1
         [0x1] 1:	call @132 // <std.io#File.getAbsolutePath()>
         [0x2] 2:	call @578 // <std#string.toArray()>
         [0x3] 3:	popl 5
         [0x4] 4:	istorel 0, fp+6
line: 86 [0x6] 6:	pushl 5
line: 92 [0x7] 7:	loadl ebx, fp+2
         [0x8] 8:	loadl egx, fp+3
         [0x9] 9:	loadl ecx, fp+4
         [0xa] 10:	int 0xbc
         [0xb] 11:	smovr_2 ebx, fp+6
line: 101 [0xc] 12:	loadl ebx, fp+6
          [0xd] 13:	return_val ebx
          [0xe] 14:	ret

func:@167 [std.io#FileSystem.getLastModifiedTime] in file: lib/support/0.2.422//io//FileSystem.sharp:110:36: note:  
		     public def getLastModifiedTime(File f) : var {
		                                   ^


getLastModifiedTime:
line: 111 [0x0] 0:	pushl 1
          [0x1] 1:	call @132 // <std.io#File.getAbsolutePath()>
          [0x2] 2:	call @578 // <std#string.toArray()>
          [0x3] 3:	popl 2
          [0x4] 4:	istorel 0, fp+3
line: 112 [0x6] 6:	pushl 2
line: 118 [0x7] 7:	int 0xb3
          [0x8] 8:	smovr_2 ebx, fp+3
line: 124 [0x9] 9:	loadl ebx, fp+3
          [0xa] 10:	return_val ebx
          [0xb] 11:	ret

func:@168 [std.io#FileSystem.getLength] in file: lib/support/0.2.422//io//FileSystem.sharp:133:26: note:  
		     public def getLength(File f) : var {
		                         ^


getLength:
line: 134 [0x0] 0:	pushl 1
          [0x1] 1:	call @132 // <std.io#File.getAbsolutePath()>
          [0x2] 2:	call @578 // <std#string.toArray()>
          [0x3] 3:	popl 2
          [0x4] 4:	istorel 0, fp+3
line: 135 [0x6] 6:	pushl 2
line: 141 [0x7] 7:	int 0xb4
          [0x8] 8:	smovr_2 ebx, fp+3
line: 147 [0x9] 9:	loadl ebx, fp+3
          [0xa] 10:	return_val ebx
          [0xb] 11:	ret

func:@169 [std.io#FileSystem.createFile] in file: lib/support/0.2.422//io//FileSystem.sharp:158:26: note:  
		    public def createFile(string pathname) {
		                         ^


createFile:
line: 159 [0x0] 0:	pushl 1
          [0x1] 1:	call @578 // <std#string.toArray()>
          [0x2] 2:	popl 2
          [0x3] 3:	pushl 2
line: 165 [0x4] 4:	int 0xb5
          [0x5] 5:	ret

func:@170 [std.io#FileSystem.deleteDirectory] in file: lib/support/0.2.422//io//FileSystem.sharp:176:32: note:  
		    private def deleteDirectory(File f) : var {
		                               ^


deleteDirectory:
line: 177 [0x0] 0:	pushl 1
          [0x1] 1:	call @132 // <std.io#File.getAbsolutePath()>
          [0x2] 2:	call @578 // <std#string.toArray()>
          [0x3] 3:	popl 2
          [0x4] 4:	istorel 0, fp+3
line: 178 [0x6] 6:	pushl 2
line: 184 [0x7] 7:	int 0xb9
          [0x8] 8:	smovr_2 ebx, fp+3
line: 190 [0x9] 9:	loadl ebx, fp+3
          [0xa] 10:	return_val ebx
          [0xb] 11:	ret

func:@171 [std.io#FileSystem.delete] in file: lib/support/0.2.422//io//FileSystem.sharp:198:22: note:  
		    public def delete(File f) : var {
		                     ^


delete:
line: 199 [0x0] 0:	pushl 1
          [0x1] 1:	call @132 // <std.io#File.getAbsolutePath()>
          [0x2] 2:	call @578 // <std#string.toArray()>
          [0x3] 3:	popl 2
          [0x4] 4:	istorel 0, fp+3
line: 200 [0x6] 6:	pushl 1
line: 202 [0x7] 7:	call @136 // <std.io#File.isDirectory()>
          [0x8] 8:	loadval cmt
          [0x9] 9:	jne 17
line: 203 [0xa] 10:	pushl 0
          [0xb] 11:	pushl 1
          [0xc] 12:	call @170 // <std.io#FileSystem.deleteDirectory(std.io#File)>
          [0xd] 13:	loadval ebx
          [0xe] 14:	return_val ebx
          [0xf] 15:	ret
          [0x10] 16:	nop
          [0x11] 17:	nop
line: 209 [0x12] 18:	pushl 2
          [0x13] 19:	int 0xb6
          [0x14] 20:	smovr_2 ebx, fp+3
line: 215 [0x15] 21:	loadl ebx, fp+3
          [0x16] 22:	return_val ebx
          [0x17] 23:	ret

func:@172 [std.io#FileSystem.list] in file: lib/support/0.2.422//io//FileSystem.sharp:224:20: note:  
		    public def list(File f) : string[] {
		                   ^


list:
line: 225 [0x0] 0:	pushl 1
          [0x1] 1:	call @132 // <std.io#File.getAbsolutePath()>
          [0x2] 2:	call @578 // <std#string.toArray()>
          [0x3] 3:	popl 2
          [0x4] 4:	movl 3
line: 226 [0x5] 5:	del
line: 227 [0x6] 6:	movl 4
          [0x7] 7:	del
line: 229 [0x8] 8:	pushl 1
          [0x9] 9:	call @136 // <std.io#File.isDirectory()>
          [0xa] 10:	loadval ebx
          [0xb] 11:	not ebx, ebx
          [0xc] 12:	movr cmt, ebx
          [0xd] 13:	jne 18
line: 230 [0xe] 14:	movl 0
          [0xf] 15:	del
          [0x10] 16:	ret
          [0x11] 17:	nop
          [0x12] 18:	nop
line: 236 [0x13] 19:	pushl 2
          [0x14] 20:	int 0xb7
          [0x15] 21:	popl 3
line: 242 [0x16] 22:	movl 3
          [0x17] 23:	checknull
          [0x18] 24:	not cmt, cmt
          [0x19] 25:	jne 56
line: 243 [0x1a] 26:	movl 3
          [0x1b] 27:	sizeof ebx
          [0x1c] 28:	new_classarray ebx  // std#string[]
          [0x1d] 29:	popl 4
          [0x1e] 30:	istorel 0, fp+5
line: 244 [0x20] 32:	istore 0
line: 245 [0x21] 33:	movl 3
          [0x22] 34:	smov ebx, sp+0
          [0x23] 35:	sizeof egx
          [0x24] 36:	lt ebx, egx
          [0x25] 37:	jne 54
          [0x26] 38:	movnd ebx
          [0x27] 39:	pushobj
          [0x28] 40:	popl 6
          [0x29] 41:	new_class @47 // std#string
line: 246 [0x2a] 42:	movl 6
          [0x2b] 43:	vcast 1
          [0x2c] 44:	pushobj
          [0x2d] 45:	call @553 // <std#string.string(var[])>
          [0x2e] 46:	movl 4
          [0x2f] 47:	loadl ebx, fp+5
          [0x30] 48:	iaddl 1, @5
          [0x31] 49:	chklen ebx
          [0x32] 50:	movnd ebx
          [0x33] 51:	popobj
          [0x34] 52:	isadd 1, sp+0
          [0x35] 53:	goto @33
          [0x36] 54:	pop
          [0x37] 55:	nop
          [0x38] 56:	nop
line: 250 [0x39] 57:	movl 4
          [0x3a] 58:	returnobj
          [0x3b] 59:	ret

func:@173 [std.io#FileSystem.createDirectory] in file: lib/support/0.2.422//io//FileSystem.sharp:258:31: note:  
		    public def createDirectory(File f) : var {
		                              ^


createDirectory:
line: 259 [0x0] 0:	pushl 1
          [0x1] 1:	call @132 // <std.io#File.getAbsolutePath()>
          [0x2] 2:	call @578 // <std#string.toArray()>
          [0x3] 3:	popl 2
          [0x4] 4:	istorel 0, fp+3
line: 260 [0x6] 6:	pushl 2
line: 266 [0x7] 7:	int 0xb8
          [0x8] 8:	smovr_2 ebx, fp+3
line: 272 [0x9] 9:	loadl ebx, fp+3
          [0xa] 10:	return_val ebx
          [0xb] 11:	ret

func:@174 [std.io#FileSystem.rename] in file: lib/support/0.2.422//io//FileSystem.sharp:281:22: note:  
		    public def rename(File f1, File f2) : var {
		                     ^


rename:
line: 282 [0x0] 0:	pushl 1
          [0x1] 1:	call @132 // <std.io#File.getAbsolutePath()>
          [0x2] 2:	call @578 // <std#string.toArray()>
          [0x3] 3:	popl 3
          [0x4] 4:	pushl 2
line: 283 [0x5] 5:	call @129 // <std.io#File.getName()>
          [0x6] 6:	call @578 // <std#string.toArray()>
          [0x7] 7:	popl 4
          [0x8] 8:	istorel 0, fp+5
line: 284 [0xa] 10:	pushl 4
line: 290 [0xb] 11:	pushl 3
          [0xc] 12:	int 0xba
          [0xd] 13:	smovr_2 ebx, fp+5
line: 297 [0xe] 14:	loadl ebx, fp+5
          [0xf] 15:	return_val ebx
          [0x10] 16:	ret

func:@175 [std.io#FileSystem.read] in file: lib/support/0.2.422//io//FileSystem.sharp:302:27: note:  
		    public static def read(File file, StreamBuffer io) {
		                          ^


read:
line: 302 [0x0] 0:	pushl 0
          [0x1] 1:	call @132 // <std.io#File.getAbsolutePath()>
          [0x2] 2:	call @578 // <std#string.toArray()>
          [0x3] 3:	popl 2
          [0x4] 4:	movl 3
line: 303 [0x5] 5:	del
line: 304 [0x6] 6:	istorel 0, fp+4
line: 310 [0x8] 8:	pushl 2
          [0x9] 9:	int 0xbf
          [0xa] 10:	popl 3
line: 316 [0xb] 11:	pushl 1
          [0xc] 12:	call @213 // <std.io#StreamBuffer.begin()>
line: 317 [0xd] 13:	movl 3
          [0xe] 14:	checknull
          [0xf] 15:	not cmt, cmt
          [0x10] 16:	jne 26
line: 318 [0x11] 17:	pushl 1
          [0x12] 18:	new_class @47 // std#string
          [0x13] 19:	newstr @34 // ""
          [0x14] 20:	call @553 // <std#string.string(var[])>
          [0x15] 21:	pushl 3
          [0x16] 22:	call @566 // <std#string.$operator+(var[])>
          [0x17] 23:	call @209 // <std.io#StreamBuffer.$operator+(std#string)>
          [0x18] 24:	pop
          [0x19] 25:	nop
          [0x1a] 26:	nop
          [0x1b] 27:	ret

func:@176 [std.io#FileSystem.write] in file: lib/support/0.2.422//io//FileSystem.sharp:323:28: note:  
		    public static def write(File file, StreamBuffer io) : var {
		                           ^


write:
line: 323 [0x0] 0:	pushl 0
          [0x1] 1:	call @132 // <std.io#File.getAbsolutePath()>
          [0x2] 2:	call @578 // <std#string.toArray()>
          [0x3] 3:	popl 2
          [0x4] 4:	pushl 1
line: 324 [0x5] 5:	call @203 // <std.io#StreamBuffer.toString()>
          [0x6] 6:	call @578 // <std#string.toArray()>
          [0x7] 7:	popl 3
          [0x8] 8:	istorel 0, fp+4
line: 325 [0xa] 10:	pushl 3
line: 331 [0xb] 11:	pushl 2
          [0xc] 12:	int 0xbd
          [0xd] 13:	smovr_2 ebx, fp+4
line: 338 [0xe] 14:	loadl ebx, fp+4
          [0xf] 15:	return_val ebx
          [0x10] 16:	ret

func:@177 [std.io#FileSystem.setLastModifiedTime] in file: lib/support/0.2.422//io//FileSystem.sharp:347:35: note:  
		    public def setLastModifiedTime(File f, var time) : var {
		                                  ^


setLastModifiedTime:
line: 348 [0x0] 0:	pushl 1
          [0x1] 1:	call @132 // <std.io#File.getAbsolutePath()>
          [0x2] 2:	call @578 // <std#string.toArray()>
          [0x3] 3:	popl 3
          [0x4] 4:	istorel 0, fp+4
line: 349 [0x6] 6:	pushl 3
line: 355 [0x7] 7:	loadl ebx, fp+2
          [0x8] 8:	int 0xbb
          [0x9] 9:	smovr_2 ebx, fp+4
line: 362 [0xa] 10:	loadl ebx, fp+4
          [0xb] 11:	return_val ebx
          [0xc] 12:	ret

func:@178 [std.io#FileSystem.setReadOnly] in file: lib/support/0.2.422//io//FileSystem.sharp:371:27: note:  
		    public def setReadOnly(File f) : var {
		                          ^


setReadOnly:
line: 371 [0x0] 0:	pushl 0
          [0x1] 1:	pushl 1
          [0x2] 2:	istore 2
          [0x3] 3:	istore 0
          [0x4] 4:	istore 1
          [0x5] 5:	call @166 // <std.io#FileSystem.setPermission(std.io#File,var,var,var)>
          [0x6] 6:	pop
line: 372 [0x7] 7:	pushl 0
          [0x8] 8:	pushl 1
          [0x9] 9:	istore 4
          [0xa] 10:	istore 1
          [0xb] 11:	istore 1
          [0xc] 12:	call @166 // <std.io#FileSystem.setPermission(std.io#File,var,var,var)>
          [0xd] 13:	loadval ebx
          [0xe] 14:	return_val ebx
          [0xf] 15:	ret

func:@179 [std.io#FileSystem.getSpace] in file: lib/support/0.2.422//io//FileSystem.sharp:381:24: note:  
		    public def getSpace(File f, var request) : var {
		                       ^


getSpace:
line: 382 [0x0] 0:	istorel 0, fp+3
line: 388 [0x2] 2:	loadl ebx, fp+2
          [0x3] 3:	int 0xbe
          [0x4] 4:	smovr_2 ebx, fp+3
line: 394 [0x5] 5:	loadl ebx, fp+3
          [0x6] 6:	return_val ebx
          [0x7] 7:	ret

func:@180 [std.io#FileSystem.FileSystem] in file: lib/support/0.2.422//io//FileSystem.sharp:10:13: note:  
		public class FileSystem {
		            ^


FileSystem:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@181 [std.io#IOException.IOException] in file: lib/support/0.2.422//io//IOException.sharp:10:25: note:  
		      public IOException(var[] message) {
		                        ^


IOException:
line: 10 [0x0] 0:	pushl 0
         [0x1] 1:	pushl 1
         [0x2] 2:	call @77 // <std#Exception.Exception(var[])>
         [0x3] 3:	pop
         [0x4] 4:	movl 0
         [0x5] 5:	returnobj
         [0x6] 6:	ret

func:@182 [std.io#IOException.IOException] in file: lib/support/0.2.422//io//IOException.sharp:14:25: note:  
		      public IOException(string message) {
		                        ^


IOException:
line: 14 [0x0] 0:	pushl 0
         [0x1] 1:	pushl 1
         [0x2] 2:	call @78 // <std#Exception.Exception(std#string)>
         [0x3] 3:	pop
         [0x4] 4:	movl 0
         [0x5] 5:	returnobj
         [0x6] 6:	ret

func:@183 [std.io#IOException.IOException] in file: lib/support/0.2.422//io//IOException.sharp:8:13: note:  
		public class IOException base Exception {
		            ^


IOException:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@184 [std.io#IOStream.StreamReader.StreamReader] in file: lib/support/0.2.422//io//IOStream.sharp:31:31: note:  
		        protected StreamReader(StreamBuffer buf) {
		                              ^


StreamReader:
line: 31 [0x0] 0:	new_class @22 // std.io#StreamBuffer
         [0x1] 1:	call @201 // <std.io#StreamBuffer.StreamBuffer()>
         [0x2] 2:	movl 0
         [0x3] 3:	movn #1
         [0x4] 4:	popobj
         [0x5] 5:	movl 0
         [0x6] 6:	movn #1
         [0x7] 7:	pushobj
         [0x8] 8:	pushl 1
         [0x9] 9:	call @211 // <std.io#StreamBuffer.$operator=(std.io#StreamBuffer)>
         [0xa] 10:	pop
         [0xb] 11:	movl 0
         [0xc] 12:	returnobj
         [0xd] 13:	ret

func:@185 [std.io#IOStream.StreamReader.next] in file: lib/support/0.2.422//io//IOStream.sharp:35:24: note:  
		        public def next() : var {
		                       ^


next:
line: 35 [0x0] 0:	movl 0
         [0x1] 1:	movn #1
         [0x2] 2:	pushobj
         [0x3] 3:	call @206 // <std.io#StreamBuffer.size()>
         [0x4] 4:	loadval egx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #0
         [0x7] 7:	movi #0, adx
         [0x9] 9:	iaload_2 ebx, adx
         [0xa] 10:	gte ebx, egx
         [0xb] 11:	jne 17
line: 36 [0xc] 12:	movi #-1, ebx
         [0xe] 14:	return_val ebx
         [0xf] 15:	ret
         [0x10] 16:	nop
         [0x11] 17:	nop
line: 37 [0x12] 18:	movl 0
         [0x13] 19:	movn #1
         [0x14] 20:	pushobj
         [0x15] 21:	movl 0
         [0x16] 22:	movn #0
         [0x17] 23:	movi #0, adx
         [0x19] 25:	iaload_2 ebx, adx
         [0x1a] 26:	inc ebx
         [0x1b] 27:	rmov adx, ebx
         [0x1c] 28:	dec ebx
         [0x1d] 29:	rstore ebx
         [0x1e] 30:	call @205 // <std.io#StreamBuffer.at(var)>
         [0x1f] 31:	loadval ebx
         [0x20] 32:	return_val ebx
         [0x21] 33:	ret

func:@186 [std.io#IOStream.StreamReader.nextLine] in file: lib/support/0.2.422//io//IOStream.sharp:41:28: note:  
		        public def nextLine() : string {
		                           ^


nextLine:
line: 41 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	smovr_2 ebx, fp+1
line: 42 [0x6] 6:	movl 0
line: 43 [0x7] 7:	movn #1
         [0x8] 8:	pushobj
         [0x9] 9:	movl 0
         [0xa] 10:	movn #0
         [0xb] 11:	iaload_2 ebx, adx
         [0xc] 12:	inc ebx
         [0xd] 13:	rmov adx, ebx
         [0xe] 14:	dec ebx
         [0xf] 15:	rstore ebx
         [0x10] 16:	call @205 // <std.io#StreamBuffer.at(var)>
         [0x11] 17:	call @60 // <std#char.isNewLine(var)>
         [0x12] 18:	loadval cmt
         [0x13] 19:	jne 22
line: 44 [0x14] 20:	goto @28
         [0x15] 21:	nop
         [0x16] 22:	nop
         [0x17] 23:	movi #1, cmt
         [0x19] 25:	movi #6, adx
         [0x1b] 27:	ife
line: 47 [0x1c] 28:	movl 0
         [0x1d] 29:	movn #1
         [0x1e] 30:	pushobj
         [0x1f] 31:	ipushl #1
         [0x20] 32:	istore 1
         [0x21] 33:	movl 0
         [0x22] 34:	movn #0
         [0x23] 35:	movi #0, adx
         [0x25] 37:	iaload_2 ebx, adx
         [0x26] 38:	loadval egx
         [0x27] 39:	sub ebx, egx -> ebx
         [0x29] 41:	rstore ebx
         [0x2a] 42:	call @204 // <std.io#StreamBuffer.substring(var,var)>
         [0x2b] 43:	movsl #0
         [0x2c] 44:	returnobj
         [0x2d] 45:	ret

func:@187 [std.io#IOStream.StreamReader.StreamReader] in file: lib/support/0.2.422//io//IOStream.sharp:27:23: note:  
		    class StreamReader {
		                      ^


StreamReader:
        [0x0] 0:	new_class @22 // std.io#StreamBuffer
        [0x1] 1:	call @201 // <std.io#StreamBuffer.StreamBuffer()>
        [0x2] 2:	movl 0
        [0x3] 3:	movn #1
        [0x4] 4:	popobj
        [0x5] 5:	movl 0
        [0x6] 6:	returnobj
        [0x7] 7:	ret

func:@188 [std.io#IOStream.IOStream] in file: lib/support/0.2.422//io//IOStream.sharp:52:21: note:  
		    private IOStream() {} // to prevent user from calling this
		                    ^


IOStream:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@189 [std.io#IOStream.IOStream] in file: lib/support/0.2.422//io//IOStream.sharp:54:20: note:  
		    public IOStream(File file, var direction) {
		                   ^


IOStream:
line: 54 [0x0] 0:	pushl 1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #1
         [0x3] 3:	popobj
line: 55 [0x4] 4:	loadl ebx, fp+2
         [0x5] 5:	nop
         [0x6] 6:	rstore ebx
         [0x7] 7:	movl 0
         [0x8] 8:	movn #2
         [0x9] 9:	movi #0, adx
         [0xb] 11:	loadval ecx
         [0xc] 12:	rmov adx, ecx
line: 56 [0xd] 13:	new_class @22 // std.io#StreamBuffer
         [0xe] 14:	call @201 // <std.io#StreamBuffer.StreamBuffer()>
         [0xf] 15:	movl 0
         [0x10] 16:	movn #0
         [0x11] 17:	popobj
line: 58 [0x12] 18:	ipushl #2
         [0x13] 19:	movg @20 // @std.io#IOStream
         [0x14] 20:	movn #4
         [0x15] 21:	movi #0, adx
         [0x17] 23:	iaload_2 egx, adx
         [0x18] 24:	loadval ebx
         [0x19] 25:	test ebx, egx
         [0x1a] 26:	jne 41
line: 59 [0x1b] 27:	new_class @21 // std.io#IOStream.StreamReader
         [0x1c] 28:	movl 0
         [0x1d] 29:	movn #0
         [0x1e] 30:	pushobj
         [0x1f] 31:	call @184 // <std.io#IOStream.StreamReader.StreamReader(std.io#StreamBuffer)>
         [0x20] 32:	movl 0
         [0x21] 33:	movn #3
         [0x22] 34:	popobj
line: 60 [0x23] 35:	pushl 1
         [0x24] 36:	movl 0
         [0x25] 37:	movn #0
         [0x26] 38:	pushobj
         [0x27] 39:	call @161 // <std.io#File.readAllText(std.io#File,std.io#StreamBuffer)>
         [0x28] 40:	nop
         [0x29] 41:	nop
         [0x2a] 42:	movl 0
         [0x2b] 43:	returnobj
         [0x2c] 44:	ret

func:@190 [std.io#IOStream.close] in file: lib/support/0.2.422//io//IOStream.sharp:65:21: note:  
		    public def close() {
		                    ^


close:
line: 65 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movg @20 // @std.io#IOStream
         [0x7] 7:	movn #5
         [0x8] 8:	iaload_2 egx, adx
         [0x9] 9:	loadval ebx
         [0xa] 10:	test ebx, egx
         [0xb] 11:	jne 20
line: 66 [0xc] 12:	movl 0
         [0xd] 13:	movn #1
         [0xe] 14:	pushobj
         [0xf] 15:	movl 0
         [0x10] 16:	movn #0
         [0x11] 17:	pushobj
         [0x12] 18:	call @162 // <std.io#File.write(std.io#File,std.io#StreamBuffer)>
         [0x13] 19:	nop
         [0x14] 20:	nop
line: 68 [0x15] 21:	movl 0
         [0x16] 22:	movn #0
         [0x17] 23:	pushobj
         [0x18] 24:	call @202 // <std.io#StreamBuffer.end()>
         [0x19] 25:	ret

func:@191 [std.io#IOStream.nextChar] in file: lib/support/0.2.422//io//IOStream.sharp:76:24: note:  
		    public def nextChar() : var {
		                       ^


nextChar:
line: 76 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movg @20 // @std.io#IOStream
         [0x7] 7:	movn #4
         [0x8] 8:	iaload_2 egx, adx
         [0x9] 9:	loadval ebx
         [0xa] 10:	test ebx, egx
         [0xb] 11:	jne 20
line: 77 [0xc] 12:	movl 0
         [0xd] 13:	movn #3
         [0xe] 14:	pushobj
         [0xf] 15:	call @185 // <std.io#IOStream.StreamReader.next()>
         [0x10] 16:	loadval ebx
         [0x11] 17:	return_val ebx
         [0x12] 18:	ret
         [0x13] 19:	goto @25
line: 79 [0x14] 20:	new_class @12 // std#IllegalStateException
         [0x15] 21:	newstr @43 // "illegal read on IOStream"
         [0x16] 22:	call @83 // <std#IllegalStateException.IllegalStateException(var[])>
         [0x17] 23:	throw 
         [0x18] 24:	nop
         [0x19] 25:	nop
         [0x1a] 26:	movi #0, ebx
         [0x1c] 28:	return_val ebx
         [0x1d] 29:	ret

func:@192 [std.io#IOStream.nextLine] in file: lib/support/0.2.422//io//IOStream.sharp:87:24: note:  
		    public def nextLine() : string {
		                       ^


nextLine:
line: 87 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movg @20 // @std.io#IOStream
         [0x7] 7:	movn #4
         [0x8] 8:	iaload_2 egx, adx
         [0x9] 9:	loadval ebx
         [0xa] 10:	test ebx, egx
         [0xb] 11:	jne 20
line: 88 [0xc] 12:	movl 0
         [0xd] 13:	movn #3
         [0xe] 14:	pushobj
         [0xf] 15:	call @186 // <std.io#IOStream.StreamReader.nextLine()>
         [0x10] 16:	movsl #0
         [0x11] 17:	returnobj
         [0x12] 18:	ret
         [0x13] 19:	goto @25
line: 90 [0x14] 20:	new_class @12 // std#IllegalStateException
         [0x15] 21:	newstr @43 // "illegal read on IOStream"
         [0x16] 22:	call @83 // <std#IllegalStateException.IllegalStateException(var[])>
         [0x17] 23:	throw 
         [0x18] 24:	nop
         [0x19] 25:	nop
         [0x1a] 26:	pushnil 
         [0x1b] 27:	popobj
         [0x1c] 28:	returnobj
         [0x1d] 29:	ret

func:@193 [std.io#IOStream.size] in file: lib/support/0.2.422//io//IOStream.sharp:94:20: note:  
		    public def size() : var {
		                   ^


size:
line: 94 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	call @206 // <std.io#StreamBuffer.size()>
         [0x4] 4:	loadval ebx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@194 [std.io#IOStream.write] in file: lib/support/0.2.422//io//IOStream.sharp:98:21: note:  
		    public def write(string data) {
		                    ^


write:
line: 98 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movg @20 // @std.io#IOStream
         [0x7] 7:	movn #4
         [0x8] 8:	iaload_2 egx, adx
         [0x9] 9:	loadval ebx
         [0xa] 10:	test ebx, egx
         [0xb] 11:	jne 17
line: 99 [0xc] 12:	new_class @12 // std#IllegalStateException
         [0xd] 13:	newstr @44 // "illegal write on IOStream"
         [0xe] 14:	call @83 // <std#IllegalStateException.IllegalStateException(var[])>
         [0xf] 15:	throw 
         [0x10] 16:	nop
         [0x11] 17:	nop
line: 100 [0x12] 18:	movl 0
          [0x13] 19:	movn #0
          [0x14] 20:	pushobj
          [0x15] 21:	pushl 1
          [0x16] 22:	call @209 // <std.io#StreamBuffer.$operator+(std#string)>
          [0x17] 23:	pop
          [0x18] 24:	ret

func:@195 [std.io#IOStream.write] in file: lib/support/0.2.422//io//IOStream.sharp:104:21: note:  
		    public def write(var n) {
		                    ^


write:
line: 104 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movg @20 // @std.io#IOStream
          [0x7] 7:	movn #4
          [0x8] 8:	iaload_2 egx, adx
          [0x9] 9:	loadval ebx
          [0xa] 10:	test ebx, egx
          [0xb] 11:	jne 17
line: 105 [0xc] 12:	new_class @12 // std#IllegalStateException
          [0xd] 13:	newstr @44 // "illegal write on IOStream"
          [0xe] 14:	call @83 // <std#IllegalStateException.IllegalStateException(var[])>
          [0xf] 15:	throw 
          [0x10] 16:	nop
          [0x11] 17:	nop
line: 106 [0x12] 18:	movl 0
          [0x13] 19:	movn #0
          [0x14] 20:	pushobj
          [0x15] 21:	ipushl #1
          [0x16] 22:	call @579 // <std#string.parse(var)>
          [0x17] 23:	call @209 // <std.io#StreamBuffer.$operator+(std#string)>
          [0x18] 24:	pop
          [0x19] 25:	ret

func:@196 [std.io#IOStream.writeChar] in file: lib/support/0.2.422//io//IOStream.sharp:110:25: note:  
		    public def writeChar(var n) {
		                        ^


writeChar:
line: 110 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movg @20 // @std.io#IOStream
          [0x7] 7:	movn #4
          [0x8] 8:	iaload_2 egx, adx
          [0x9] 9:	loadval ebx
          [0xa] 10:	test ebx, egx
          [0xb] 11:	jne 17
line: 111 [0xc] 12:	new_class @12 // std#IllegalStateException
          [0xd] 13:	newstr @44 // "illegal write on IOStream"
          [0xe] 14:	call @83 // <std#IllegalStateException.IllegalStateException(var[])>
          [0xf] 15:	throw 
          [0x10] 16:	nop
          [0x11] 17:	nop
line: 112 [0x12] 18:	movl 0
          [0x13] 19:	movn #0
          [0x14] 20:	pushobj
          [0x15] 21:	ipushl #1
          [0x16] 22:	call @208 // <std.io#StreamBuffer.$operator+(var)>
          [0x17] 23:	pop
          [0x18] 24:	ret

func:@197 [std.io#IOStream.clear] in file: lib/support/0.2.422//io//IOStream.sharp:116:21: note:  
		    public def clear() {
		                    ^


clear:
line: 116 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	call @202 // <std.io#StreamBuffer.end()>
          [0x4] 4:	ret

func:@198 [std.io#IOStream.toString] in file: lib/support/0.2.422//io//IOStream.sharp:120:24: note:  
		    public def toString() : string {
		                       ^


toString:
line: 120 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	pushobj
          [0x3] 3:	call @203 // <std.io#StreamBuffer.toString()>
          [0x4] 4:	movsl #0
          [0x5] 5:	returnobj
          [0x6] 6:	ret

func:@199 [std.io#IOStream.write] in file: lib/support/0.2.422//io//IOStream.sharp:124:21: note:  
		    public def write(var[] data) {
		                    ^


write:
line: 124 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movg @20 // @std.io#IOStream
          [0x7] 7:	movn #4
          [0x8] 8:	iaload_2 egx, adx
          [0x9] 9:	loadval ebx
          [0xa] 10:	test ebx, egx
          [0xb] 11:	jne 17
line: 125 [0xc] 12:	new_class @12 // std#IllegalStateException
          [0xd] 13:	newstr @44 // "illegal write on IOStream"
          [0xe] 14:	call @83 // <std#IllegalStateException.IllegalStateException(var[])>
          [0xf] 15:	throw 
          [0x10] 16:	nop
          [0x11] 17:	nop
line: 126 [0x12] 18:	movl 0
          [0x13] 19:	movn #0
          [0x14] 20:	pushobj
          [0x15] 21:	pushl 1
          [0x16] 22:	call @210 // <std.io#StreamBuffer.$operator+(var[])>
          [0x17] 23:	pop
          [0x18] 24:	ret

func:@200 [std.io#StreamBuffer.StreamBuffer] in file: lib/support/0.2.422//io//StreamBuffer.sharp:24:24: note:  
		    public StreamBuffer(string data) {
		                       ^


StreamBuffer:
line: 24 [0x0] 0:	pushl 0
         [0x1] 1:	call @213 // <std.io#StreamBuffer.begin()>
line: 26 [0x2] 2:	pushl 0
         [0x3] 3:	pushl 1
         [0x4] 4:	call @209 // <std.io#StreamBuffer.$operator+(std#string)>
         [0x5] 5:	pop
         [0x6] 6:	movl 0
         [0x7] 7:	returnobj
         [0x8] 8:	ret

func:@201 [std.io#StreamBuffer.StreamBuffer] in file: lib/support/0.2.422//io//StreamBuffer.sharp:30:24: note:  
		    public StreamBuffer() {
		                       ^


StreamBuffer:
line: 30 [0x0] 0:	pushl 0
         [0x1] 1:	call @213 // <std.io#StreamBuffer.begin()>
         [0x2] 2:	movl 0
         [0x3] 3:	returnobj
         [0x4] 4:	ret

func:@202 [std.io#StreamBuffer.end] in file: lib/support/0.2.422//io//StreamBuffer.sharp:34:19: note:  
		    public def end() {
		                  ^


end:
line: 34 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	del
line: 35 [0x3] 3:	movi #0, ebx
         [0x5] 5:	nop
         [0x6] 6:	rstore ebx
         [0x7] 7:	movl 0
         [0x8] 8:	movn #3
         [0x9] 9:	movi #0, adx
         [0xb] 11:	loadval ecx
         [0xc] 12:	rmov adx, ecx
line: 36 [0xd] 13:	movi #0, ebx
         [0xf] 15:	nop
         [0x10] 16:	rstore ebx
         [0x11] 17:	movl 0
         [0x12] 18:	movn #4
         [0x13] 19:	movi #0, adx
         [0x15] 21:	loadval ecx
         [0x16] 22:	rmov adx, ecx
         [0x17] 23:	ret

func:@203 [std.io#StreamBuffer.toString] in file: lib/support/0.2.422//io//StreamBuffer.sharp:43:24: note:  
		    public def toString() : string {
		                       ^


toString:
line: 43 [0x0] 0:	movl 0
         [0x1] 1:	movn #4
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movi #0, egx
         [0x8] 8:	loadval ebx
         [0x9] 9:	test ebx, egx
         [0xa] 10:	jne 17
line: 43 [0xb] 11:	new_class @47 // std#string
         [0xc] 12:	call @593 // <std#string.string()>
         [0xd] 13:	movsl #0
         [0xe] 14:	returnobj
         [0xf] 15:	ret
         [0x10] 16:	nop
         [0x11] 17:	nop
line: 44 [0x12] 18:	new_class @47 // std#string
         [0x13] 19:	movl 0
         [0x14] 20:	movn #2
         [0x15] 21:	pushobj
         [0x16] 22:	istore 0
         [0x17] 23:	istore 1
         [0x18] 24:	movl 0
         [0x19] 25:	movn #4
         [0x1a] 26:	movi #0, adx
         [0x1c] 28:	iaload_2 ebx, adx
         [0x1d] 29:	loadval egx
         [0x1e] 30:	sub ebx, egx -> ebx
         [0x20] 32:	rstore ebx
         [0x21] 33:	call @558 // <std#string.string(var[],var,var)>
         [0x22] 34:	movsl #0
         [0x23] 35:	returnobj
         [0x24] 36:	ret

func:@204 [std.io#StreamBuffer.substring] in file: lib/support/0.2.422//io//StreamBuffer.sharp:51:25: note:  
		    public def substring(var startIndex, var endIndex) : string {
		                        ^


substring:
line: 51 [0x0] 0:	new_class @47 // std#string
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	pushobj
         [0x4] 4:	ipushl #1
         [0x5] 5:	ipushl #2
         [0x6] 6:	call @558 // <std#string.string(var[],var,var)>
         [0x7] 7:	movsl #0
         [0x8] 8:	returnobj
         [0x9] 9:	ret

func:@205 [std.io#StreamBuffer.at] in file: lib/support/0.2.422//io//StreamBuffer.sharp:55:18: note:  
		    public def at(var pos) : var {
		                 ^


at:
line: 55 [0x0] 0:	movl 0
         [0x1] 1:	movn #4
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	loadl ebx, fp+1
         [0x6] 6:	gte ebx, egx
         [0x7] 7:	movr ebx, cmt
         [0x8] 8:	movr ebx, cmt
         [0x9] 9:	skpe 6 // pc = 15
         [0xa] 10:	movi #0, egx
         [0xc] 12:	loadl ebx, fp+1
         [0xd] 13:	lt ebx, egx
         [0xe] 14:	movr ebx, cmt
         [0xf] 15:	cmp ebx, 1
         [0x10] 16:	jne 35
line: 56 [0x11] 17:	new_class @13 // std#IndexOutOfBoundsException
         [0x12] 18:	new_class @47 // std#string
         [0x13] 19:	newstr @45 // "Access to buffer at: "
         [0x14] 20:	call @553 // <std#string.string(var[])>
         [0x15] 21:	ipushl #1
         [0x16] 22:	call @573 // <std#string.$operator+(var)>
         [0x17] 23:	newstr @46 // "  size: "
         [0x18] 24:	call @566 // <std#string.$operator+(var[])>
         [0x19] 25:	movl 0
         [0x1a] 26:	movn #4
         [0x1b] 27:	movi #0, adx
         [0x1d] 29:	iaload_2 ebx, adx
         [0x1e] 30:	rstore ebx
         [0x1f] 31:	call @573 // <std#string.$operator+(var)>
         [0x20] 32:	call @87 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
         [0x21] 33:	throw 
         [0x22] 34:	nop
         [0x23] 35:	nop
line: 58 [0x24] 36:	movl 0
         [0x25] 37:	movn #2
         [0x26] 38:	loadl ebx, fp+1
         [0x27] 39:	chklen ebx
         [0x28] 40:	iaload_2 ebx, ebx
         [0x29] 41:	return_val ebx
         [0x2a] 42:	ret

func:@206 [std.io#StreamBuffer.size] in file: lib/support/0.2.422//io//StreamBuffer.sharp:62:20: note:  
		    public def size() : var {
		                   ^


size:
line: 62 [0x0] 0:	movl 0
         [0x1] 1:	movn #4
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@207 [std.io#StreamBuffer.isEmpty] in file: lib/support/0.2.422//io//StreamBuffer.sharp:66:23: note:  
		    public def isEmpty() : var {
		                      ^


isEmpty:
line: 66 [0x0] 0:	movl 0
         [0x1] 1:	movn #4
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movi #0, egx
         [0x8] 8:	loadval ebx
         [0x9] 9:	test ebx, egx
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@208 [std.io#StreamBuffer.$operator+] in file: lib/support/0.2.422//io//StreamBuffer.sharp:70:24: note:  
		    public def operator+(var data) : StreamBuffer {
		                       ^


$operator+:
line: 70 [0x0] 0:	pushl 0
         [0x1] 1:	loadl ebx, fp+1
         [0x2] 2:	mov16 ebx, ebx
         [0x3] 3:	rstore ebx
         [0x4] 4:	call @214 // <std.io#StreamBuffer.pushBack(var)>
line: 71 [0x5] 5:	movl 0
         [0x6] 6:	returnobj
         [0x7] 7:	ret

func:@209 [std.io#StreamBuffer.$operator+] in file: lib/support/0.2.422//io//StreamBuffer.sharp:75:24: note:  
		    public def operator+(string data) : StreamBuffer {
		                       ^


$operator+:
line: 75 [0x0] 0:	pushl 1
         [0x1] 1:	call @578 // <std#string.toArray()>
         [0x2] 2:	popl 2
         [0x3] 3:	pushl 0
line: 76 [0x4] 4:	pushl 2
         [0x5] 5:	call @215 // <std.io#StreamBuffer.pushBack(var[])>
line: 77 [0x6] 6:	movl 0
         [0x7] 7:	returnobj
         [0x8] 8:	ret

func:@210 [std.io#StreamBuffer.$operator+] in file: lib/support/0.2.422//io//StreamBuffer.sharp:81:24: note:  
		    public def operator+(var[] raw) : StreamBuffer {
		                       ^


$operator+:
line: 81 [0x0] 0:	pushl 0
         [0x1] 1:	pushl 1
         [0x2] 2:	call @215 // <std.io#StreamBuffer.pushBack(var[])>
line: 82 [0x3] 3:	movl 0
         [0x4] 4:	returnobj
         [0x5] 5:	ret

func:@211 [std.io#StreamBuffer.$operator=] in file: lib/support/0.2.422//io//StreamBuffer.sharp:86:24: note:  
		    public def operator=(StreamBuffer buf) : StreamBuffer {
		                       ^


$operator=:
line: 86 [0x0] 0:	pushl 0
         [0x1] 1:	call @213 // <std.io#StreamBuffer.begin()>
line: 88 [0x2] 2:	pushl 0
         [0x3] 3:	movl 1
         [0x4] 4:	movn #2
         [0x5] 5:	pushobj
         [0x6] 6:	call @215 // <std.io#StreamBuffer.pushBack(var[])>
line: 89 [0x7] 7:	movl 0
         [0x8] 8:	returnobj
         [0x9] 9:	ret

func:@212 [std.io#StreamBuffer.$operator=] in file: lib/support/0.2.422//io//StreamBuffer.sharp:93:24: note:  
		    public def operator=(string data) : StreamBuffer {
		                       ^


$operator=:
line: 93 [0x0] 0:	pushl 0
         [0x1] 1:	call @213 // <std.io#StreamBuffer.begin()>
line: 95 [0x2] 2:	pushl 1
         [0x3] 3:	call @578 // <std#string.toArray()>
         [0x4] 4:	popl 2
         [0x5] 5:	pushl 0
line: 96 [0x6] 6:	pushl 2
         [0x7] 7:	call @215 // <std.io#StreamBuffer.pushBack(var[])>
line: 97 [0x8] 8:	movl 0
         [0x9] 9:	returnobj
         [0xa] 10:	ret

func:@213 [std.io#StreamBuffer.begin] in file: lib/support/0.2.422//io//StreamBuffer.sharp:101:21: note:  
		    public def begin() {
		                    ^


begin:
line: 101 [0x0] 0:	movg @22 // @std.io#StreamBuffer
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	newarry ebx
          [0x6] 6:	movl 0
          [0x7] 7:	movn #2
          [0x8] 8:	popobj
line: 102 [0x9] 9:	movg @22 // @std.io#StreamBuffer
          [0xa] 10:	movn #0
          [0xb] 11:	nop
          [0xc] 12:	iaload_2 ebx, adx
          [0xd] 13:	rstore ebx
          [0xe] 14:	movl 0
          [0xf] 15:	movn #3
          [0x10] 16:	loadval ecx
          [0x11] 17:	rmov adx, ecx
line: 103 [0x12] 18:	movi #0, ebx
          [0x14] 20:	nop
          [0x15] 21:	rstore ebx
          [0x16] 22:	movl 0
          [0x17] 23:	movn #4
          [0x18] 24:	movi #0, adx
          [0x1a] 26:	loadval ecx
          [0x1b] 27:	rmov adx, ecx
          [0x1c] 28:	ret

func:@214 [std.io#StreamBuffer.pushBack] in file: lib/support/0.2.422//io//StreamBuffer.sharp:107:24: note:  
		    public def pushBack(var _char) {
		                       ^


pushBack:
line: 107 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	checknull
          [0x3] 3:	jne 7
line: 108 [0x4] 4:	pushl 0
          [0x5] 5:	call @213 // <std.io#StreamBuffer.begin()>
          [0x6] 6:	nop
          [0x7] 7:	nop
line: 110 [0x8] 8:	movl 0
          [0x9] 9:	movn #3
          [0xa] 10:	movi #0, adx
          [0xc] 12:	iaload_2 egx, adx
          [0xd] 13:	movl 0
          [0xe] 14:	movn #4
          [0xf] 15:	iaload_2 ebx, adx
          [0x10] 16:	gte ebx, egx
          [0x11] 17:	jne 54
line: 111 [0x12] 18:	movg @22 // @std.io#StreamBuffer
          [0x13] 19:	movn #1
          [0x14] 20:	movi #0, adx
          [0x16] 22:	iaload_2 ebx, adx
          [0x17] 23:	rstore ebx
          [0x18] 24:	movi #3, egx
          [0x1a] 26:	movl 0
          [0x1b] 27:	movn #3
          [0x1c] 28:	movi #0, adx
          [0x1e] 30:	iaload_2 ebx, adx
          [0x1f] 31:	shr ebx, egx -> ebx
          [0x21] 33:	loadval egx
          [0x22] 34:	add ebx, egx -> ebx
          [0x24] 36:	rstore ebx
          [0x25] 37:	nop
          [0x26] 38:	movl 0
          [0x27] 39:	movn #3
          [0x28] 40:	iaload_2 ebx, adx
          [0x29] 41:	loadval ecx
          [0x2a] 42:	add ebx, ecx -> ecx
          [0x2c] 44:	rmov adx, ecx
line: 112 [0x2d] 45:	movl 0
          [0x2e] 46:	movn #2
          [0x2f] 47:	pushobj
          [0x30] 48:	movl 0
          [0x31] 49:	movn #3
          [0x32] 50:	iaload_2 ebx, adx
          [0x33] 51:	rstore ebx
          [0x34] 52:	call @615 // <std#__SRT_Global.realloc(object,var)>
          [0x35] 53:	nop
          [0x36] 54:	nop
line: 115 [0x37] 55:	ipushl #1
          [0x38] 56:	movl 0
          [0x39] 57:	movn #2
          [0x3a] 58:	pushobj
          [0x3b] 59:	movl 0
          [0x3c] 60:	movn #4
          [0x3d] 61:	movi #0, adx
          [0x3f] 63:	iaload_2 ebx, adx
          [0x40] 64:	inc ebx
          [0x41] 65:	rmov adx, ebx
          [0x42] 66:	dec ebx
          [0x43] 67:	movsl #0
          [0x44] 68:	chklen ebx
          [0x45] 69:	pop
          [0x46] 70:	loadval egx
          [0x47] 71:	rmov ebx, egx
          [0x48] 72:	ret

func:@215 [std.io#StreamBuffer.pushBack] in file: lib/support/0.2.422//io//StreamBuffer.sharp:119:24: note:  
		    public def pushBack(var[] raw) {
		                       ^


pushBack:
line: 119 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	checknull
          [0x3] 3:	jne 7
line: 120 [0x4] 4:	pushl 0
          [0x5] 5:	call @213 // <std.io#StreamBuffer.begin()>
          [0x6] 6:	nop
          [0x7] 7:	nop
line: 122 [0x8] 8:	movl 0
          [0x9] 9:	movn #3
          [0xa] 10:	movi #0, adx
          [0xc] 12:	iaload_2 egx, adx
          [0xd] 13:	movl 1
          [0xe] 14:	sizeof ebx
          [0xf] 15:	rstore ebx
          [0x10] 16:	movl 0
          [0x11] 17:	movn #4
          [0x12] 18:	iaload_2 ebx, adx
          [0x13] 19:	loadval egx
          [0x14] 20:	add ebx, egx -> ebx
          [0x16] 22:	gte ebx, egx
          [0x17] 23:	jne 64
line: 123 [0x18] 24:	movi #4, egx
          [0x1a] 26:	movl 0
          [0x1b] 27:	movn #3
          [0x1c] 28:	movi #0, adx
          [0x1e] 30:	iaload_2 ebx, adx
          [0x1f] 31:	shr ebx, egx -> ebx
          [0x21] 33:	rstore ebx
          [0x22] 34:	movl 1
          [0x23] 35:	sizeof ebx
          [0x24] 36:	loadval ecx
          [0x25] 37:	add ebx, ecx -> ebx
          [0x27] 39:	rstore ebx
          [0x28] 40:	movg @22 // @std.io#StreamBuffer
          [0x29] 41:	movn #1
          [0x2a] 42:	iaload_2 ebx, adx
          [0x2b] 43:	loadval egx
          [0x2c] 44:	add ebx, egx -> ebx
          [0x2e] 46:	rstore ebx
          [0x2f] 47:	nop
          [0x30] 48:	movl 0
          [0x31] 49:	movn #3
          [0x32] 50:	iaload_2 ebx, adx
          [0x33] 51:	loadval ecx
          [0x34] 52:	add ebx, ecx -> ecx
          [0x36] 54:	rmov adx, ecx
line: 124 [0x37] 55:	movl 0
          [0x38] 56:	movn #2
          [0x39] 57:	pushobj
          [0x3a] 58:	movl 0
          [0x3b] 59:	movn #3
          [0x3c] 60:	iaload_2 ebx, adx
          [0x3d] 61:	rstore ebx
          [0x3e] 62:	call @615 // <std#__SRT_Global.realloc(object,var)>
          [0x3f] 63:	nop
          [0x40] 64:	nop
line: 127 [0x41] 65:	istore 0
          [0x42] 66:	movl 1
          [0x43] 67:	smov ebx, sp+0
          [0x44] 68:	sizeof egx
          [0x45] 69:	lt ebx, egx
          [0x46] 70:	jne 92
          [0x47] 71:	iaload_2 ebx, ebx
          [0x48] 72:	smovr_2 ebx, fp+2
line: 128 [0x49] 73:	ipushl #2
          [0x4a] 74:	movl 0
          [0x4b] 75:	movn #2
          [0x4c] 76:	pushobj
          [0x4d] 77:	movl 0
          [0x4e] 78:	movn #4
          [0x4f] 79:	movi #0, adx
          [0x51] 81:	iaload_2 ebx, adx
          [0x52] 82:	inc ebx
          [0x53] 83:	rmov adx, ebx
          [0x54] 84:	dec ebx
          [0x55] 85:	movsl #0
          [0x56] 86:	chklen ebx
          [0x57] 87:	pop
          [0x58] 88:	loadval egx
          [0x59] 89:	rmov ebx, egx
          [0x5a] 90:	isadd 1, sp+0
          [0x5b] 91:	goto @66
          [0x5c] 92:	pop
          [0x5d] 93:	ret

func:@216 [std.io#Thread.Thread] in file: lib/support/0.2.422//io//Thread.sharp:36:19: note:  
		    private Thread() {}
		                  ^


Thread:
        [0x0] 0:	new_class @47 // std#string
        [0x1] 1:	newstr @34 // ""
        [0x2] 2:	call @553 // <std#string.string(var[])>
        [0x3] 3:	movl 0
        [0x4] 4:	movn #10
        [0x5] 5:	popobj
        [0x6] 6:	movl 0
        [0x7] 7:	returnobj
        [0x8] 8:	ret

func:@217 [std.io#Thread.Thread] in file: lib/support/0.2.422//io//Thread.sharp:38:18: note:  
		    public Thread(string name, fn main (object[]) : var) {
		                 ^


Thread:
        [0x0] 0:	new_class @47 // std#string
        [0x1] 1:	newstr @34 // ""
        [0x2] 2:	call @553 // <std#string.string(var[])>
        [0x3] 3:	movl 0
        [0x4] 4:	movn #10
        [0x5] 5:	popobj
line: 38 [0x6] 6:	loadl ebx, fp+2
         [0x7] 7:	nop
         [0x8] 8:	rstore ebx
         [0x9] 9:	movl 0
         [0xa] 10:	movn #13
         [0xb] 11:	movi #0, adx
         [0xd] 13:	loadval ecx
         [0xe] 14:	rmov adx, ecx
line: 39 [0xf] 15:	pushl 1
         [0x10] 16:	movl 0
         [0x11] 17:	movn #10
         [0x12] 18:	popobj
line: 40 [0x13] 19:	movi #4, ebx
         [0x15] 21:	nop
         [0x16] 22:	rstore ebx
         [0x17] 23:	movl 0
         [0x18] 24:	movn #6
         [0x19] 25:	movi #0, adx
         [0x1b] 27:	loadval ecx
         [0x1c] 28:	rmov adx, ecx
line: 41 [0x1d] 29:	pushl 0
         [0x1e] 30:	call @323 // <std.kernel.vm#ThreadCore.__thread_create(std.io#Thread)>
         [0x1f] 31:	nop
         [0x20] 32:	movl 0
         [0x21] 33:	movn #5
         [0x22] 34:	movi #0, adx
         [0x24] 36:	loadval ecx
         [0x25] 37:	rmov adx, ecx
line: 43 [0x26] 38:	pushl 0
         [0x27] 39:	call @228 // <std.io#Thread.addThread(std.io#Thread)>
         [0x28] 40:	movl 0
         [0x29] 41:	returnobj
         [0x2a] 42:	ret

func:@218 [std.io#Thread.Thread] in file: lib/support/0.2.422//io//Thread.sharp:47:18: note:  
		    public Thread(string name, fn main (object[]) : var, var stackSize) {
		                 ^


Thread:
        [0x0] 0:	new_class @47 // std#string
        [0x1] 1:	newstr @34 // ""
        [0x2] 2:	call @553 // <std#string.string(var[])>
        [0x3] 3:	movl 0
        [0x4] 4:	movn #10
        [0x5] 5:	popobj
line: 47 [0x6] 6:	loadl ebx, fp+2
         [0x7] 7:	nop
         [0x8] 8:	rstore ebx
         [0x9] 9:	movl 0
         [0xa] 10:	movn #13
         [0xb] 11:	movi #0, adx
         [0xd] 13:	loadval ecx
         [0xe] 14:	rmov adx, ecx
line: 48 [0xf] 15:	pushl 1
         [0x10] 16:	movl 0
         [0x11] 17:	movn #10
         [0x12] 18:	popobj
line: 49 [0x13] 19:	loadl ebx, fp+3
         [0x14] 20:	nop
         [0x15] 21:	rstore ebx
         [0x16] 22:	movl 0
         [0x17] 23:	movn #12
         [0x18] 24:	loadval ecx
         [0x19] 25:	rmov adx, ecx
line: 50 [0x1a] 26:	movi #4, ebx
         [0x1c] 28:	nop
         [0x1d] 29:	rstore ebx
         [0x1e] 30:	movl 0
         [0x1f] 31:	movn #6
         [0x20] 32:	movi #0, adx
         [0x22] 34:	loadval ecx
         [0x23] 35:	rmov adx, ecx
line: 51 [0x24] 36:	pushl 0
         [0x25] 37:	call @323 // <std.kernel.vm#ThreadCore.__thread_create(std.io#Thread)>
         [0x26] 38:	nop
         [0x27] 39:	movl 0
         [0x28] 40:	movn #5
         [0x29] 41:	movi #0, adx
         [0x2b] 43:	loadval ecx
         [0x2c] 44:	rmov adx, ecx
line: 53 [0x2d] 45:	pushl 0
         [0x2e] 46:	call @228 // <std.io#Thread.addThread(std.io#Thread)>
         [0x2f] 47:	movl 0
         [0x30] 48:	returnobj
         [0x31] 49:	ret

func:@219 [std.io#Thread.start] in file: lib/support/0.2.422//io//Thread.sharp:57:21: note:  
		    public def start(object[] args) : var {
		                    ^


start:
line: 57 [0x0] 0:	pushl 0
         [0x1] 1:	pushl 1
         [0x2] 2:	call @324 // <std.kernel.vm#ThreadCore.__thread_start(std.io#Thread,object[])>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@220 [std.io#Thread.join] in file: lib/support/0.2.422//io//Thread.sharp:61:20: note:  
		    public def join() : var {
		                   ^


join:
line: 61 [0x0] 0:	pushl 0
         [0x1] 1:	call @325 // <std.kernel.vm#ThreadCore.__thread_join(std.io#Thread)>
         [0x2] 2:	loadval ebx
         [0x3] 3:	return_val ebx
         [0x4] 4:	ret

func:@221 [std.io#Thread.interrupt] in file: lib/support/0.2.422//io//Thread.sharp:65:25: note:  
		    public def interrupt() : var {
		                        ^


interrupt:
line: 65 [0x0] 0:	pushl 0
         [0x1] 1:	call @329 // <std.kernel.vm#ThreadCore.__thread_interrupt(std.io#Thread)>
         [0x2] 2:	loadval ebx
         [0x3] 3:	return_val ebx
         [0x4] 4:	ret

func:@222 [std.io#Thread.destroy] in file: lib/support/0.2.422//io//Thread.sharp:69:23: note:  
		    public def destroy() : var {
		                      ^


destroy:
line: 69 [0x0] 0:	pushl 0
         [0x1] 1:	call @330 // <std.kernel.vm#ThreadCore.__thread_destroy(std.io#Thread)>
         [0x2] 2:	loadval ebx
         [0x3] 3:	return_val ebx
         [0x4] 4:	ret

func:@223 [std.io#Thread.currentThread] in file: lib/support/0.2.422//io//Thread.sharp:73:36: note:  
		    public static def currentThread() : Thread {
		                                   ^


currentThread:
line: 73 [0x0] 0:	call @331 // <std.kernel.vm#ThreadCore.__thread_current()>
         [0x1] 1:	movsl #0
         [0x2] 2:	returnobj
         [0x3] 3:	ret

func:@224 [std.io#Thread.sleep] in file: lib/support/0.2.422//io//Thread.sharp:77:28: note:  
		    public static def sleep(var time) {
		                           ^


sleep:
line: 77 [0x0] 0:	movg @55 // @std.kernel#TimeUnit
         [0x1] 1:	movn #4
         [0x2] 2:	pushobj
         [0x3] 3:	ipushl #0
         [0x4] 4:	call @342 // <std.kernel#Time.sleep(std.kernel#TimeUnit,var)>
         [0x5] 5:	ret

func:@225 [std.io#Thread.exit] in file: lib/support/0.2.422//io//Thread.sharp:81:20: note:  
		    public def exit(var code) {
		                   ^


exit:
line: 81 [0x0] 0:	pushl 0
         [0x1] 1:	ipushl #1
         [0x2] 2:	call @333 // <std.kernel.vm#ThreadCore.__thread_exit(std.io#Thread,var)>
         [0x3] 3:	ret

func:@226 [std.io#Thread.yield] in file: lib/support/0.2.422//io//Thread.sharp:85:28: note:  
		    public static def yield() {
		                           ^


yield:
line: 85 [0x0] 0:	call @328 // <std.kernel.vm#ThreadCore.__thread_yield()>
         [0x1] 1:	ret

func:@227 [std.io#Thread.setPriority] in file: lib/support/0.2.422//io//Thread.sharp:89:27: note:  
		    public def setPriority(var priority) {
		                          ^


setPriority:
line: 89 [0x0] 0:	movi #6, egx
         [0x2] 2:	loadl ebx, fp+1
         [0x3] 3:	gt ebx, egx
         [0x4] 4:	movr ebx, cmt
         [0x5] 5:	movr ebx, cmt
         [0x6] 6:	skpe 6 // pc = 12
         [0x7] 7:	movi #1, egx
         [0x9] 9:	loadl ebx, fp+1
         [0xa] 10:	lt ebx, egx
         [0xb] 11:	movr ebx, cmt
         [0xc] 12:	cmp ebx, 1
         [0xd] 13:	jne 23
line: 90 [0xe] 14:	new_class @11 // std#IllegalArgumentException
         [0xf] 15:	new_class @47 // std#string
         [0x10] 16:	newstr @47 // "invalid thread priority "
         [0x11] 17:	call @553 // <std#string.string(var[])>
         [0x12] 18:	ipushl #1
         [0x13] 19:	call @573 // <std#string.$operator+(var)>
         [0x14] 20:	call @81 // <std#IllegalArgumentException.IllegalArgumentException(std#string)>
         [0x15] 21:	throw 
         [0x16] 22:	nop
         [0x17] 23:	nop
line: 92 [0x18] 24:	movl 0
         [0x19] 25:	_lck 
line: 93 [0x1a] 26:	loadl ebx, fp+1
         [0x1b] 27:	nop
         [0x1c] 28:	rstore ebx
         [0x1d] 29:	movl 0
         [0x1e] 30:	movn #6
         [0x1f] 31:	movi #0, adx
         [0x21] 33:	loadval ecx
         [0x22] 34:	rmov adx, ecx
line: 94 [0x23] 35:	movl 0
         [0x24] 36:	movn #9
         [0x25] 37:	iaload_2 ebx, adx
         [0x26] 38:	not ebx, ebx
         [0x27] 39:	movr cmt, ebx
         [0x28] 40:	jne 46
line: 95 [0x29] 41:	pushl 0
         [0x2a] 42:	ipushl #1
         [0x2b] 43:	call @327 // <std.kernel.vm#ThreadCore.__thread_priority(std.io#Thread,var)>
         [0x2c] 44:	pop
         [0x2d] 45:	nop
         [0x2e] 46:	nop
         [0x2f] 47:	movl 0
         [0x30] 48:	_ulck
         [0x31] 49:	ret

func:@228 [std.io#Thread.addThread] in file: lib/support/0.2.422//io//Thread.sharp:101:25: note:  
		    static def addThread(Thread thread) {
		                        ^


addThread:
line: 101 [0x0] 0:	movg @23 // @std.io#Thread
          [0x1] 1:	movn #3
          [0x2] 2:	_lck 
line: 102 [0x3] 3:	movg @23 // @std.io#Thread
          [0x4] 4:	movn #3
          [0x5] 5:	pushobj
          [0x6] 6:	pushl 0
          [0x7] 7:	call @779 // <std#ArrayList<std.io#Thread>.add(std.io#Thread)>
          [0x8] 8:	movg @23 // @std.io#Thread
          [0x9] 9:	movn #3
          [0xa] 10:	_ulck
          [0xb] 11:	ret

func:@229 [std.io#Thread.popThread] in file: lib/support/0.2.422//io//Thread.sharp:107:25: note:  
		    static def popThread(Thread thread) {
		                        ^


popThread:
line: 107 [0x0] 0:	movg @23 // @std.io#Thread
          [0x1] 1:	movn #3
          [0x2] 2:	_lck 
line: 108 [0x3] 3:	movg @23 // @std.io#Thread
          [0x4] 4:	movn #3
          [0x5] 5:	pushobj
          [0x6] 6:	call @772 // <std#ArrayList<std.io#Thread>.toArray()>
          [0x7] 7:	popl 1
          [0x8] 8:	istorel 0, fp+2
line: 109 [0xa] 10:	istore 0
line: 110 [0xb] 11:	movl 1
          [0xc] 12:	smov ebx, sp+0
          [0xd] 13:	sizeof egx
          [0xe] 14:	lt ebx, egx
          [0xf] 15:	jne 43
          [0x10] 16:	movnd ebx
          [0x11] 17:	pushobj
          [0x12] 18:	popl 3
          [0x13] 19:	movl 0
line: 111 [0x14] 20:	movn #5
          [0x15] 21:	movi #0, adx
          [0x17] 23:	iaload_2 ebx, adx
          [0x18] 24:	rstore ebx
          [0x19] 25:	movl 3
          [0x1a] 26:	movn #5
          [0x1b] 27:	iaload_2 egx, adx
          [0x1c] 28:	loadval ebx
          [0x1d] 29:	test ebx, egx
          [0x1e] 30:	jne 38
line: 112 [0x1f] 31:	movg @23 // @std.io#Thread
          [0x20] 32:	movn #3
          [0x21] 33:	pushobj
          [0x22] 34:	ipushl #2
          [0x23] 35:	call @782 // <std#ArrayList<std.io#Thread>.remove(var)>
line: 113 [0x24] 36:	goto @43
          [0x25] 37:	nop
          [0x26] 38:	nop
line: 115 [0x27] 39:	loadl ebx, fp+2
          [0x28] 40:	iaddl 1, @2
          [0x29] 41:	isadd 1, sp+0
          [0x2a] 42:	goto @11
          [0x2b] 43:	pop
          [0x2c] 44:	movg @23 // @std.io#Thread
          [0x2d] 45:	movn #3
          [0x2e] 46:	_ulck
          [0x2f] 47:	ret

func:@230 [std.io#Thread.getId] in file: lib/support/0.2.422//io//Thread.sharp:136:21: note:  
		    public def getId() : var { return id; }
		                    ^


getId:
line: 135 [0x0] 0:	movl 0
          [0x1] 1:	movn #5
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@231 [std.io#Thread.getStackSize] in file: lib/support/0.2.422//io//Thread.sharp:137:28: note:  
		    public def getStackSize() : var { return stackSize; }
		                           ^


getStackSize:
line: 136 [0x0] 0:	movl 0
          [0x1] 1:	movn #12
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@232 [std.io#Thread.getName] in file: lib/support/0.2.422//io//Thread.sharp:138:23: note:  
		    public def getName() : string { return name; }
		                      ^


getName:
line: 137 [0x0] 0:	movl 0
          [0x1] 1:	movn #10
          [0x2] 2:	returnobj
          [0x3] 3:	ret

func:@233 [std.io#Thread.setExited] in file: lib/support/0.2.422//io//Thread.sharp:139:25: note:  
		    public def setExited(var exited) { self->exited = exited; }
		                        ^


setExited:
line: 138 [0x0] 0:	loadl ebx, fp+1
          [0x1] 1:	nop
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #9
          [0x5] 5:	movi #0, adx
          [0x7] 7:	loadval ecx
          [0x8] 8:	rmov adx, ecx
          [0x9] 9:	ret

func:@234 [std.io#Thread.isExited] in file: lib/support/0.2.422//io//Thread.sharp:140:24: note:  
		    public def isExited() : var { return exited; }
		                       ^


isExited:
line: 139 [0x0] 0:	movl 0
          [0x1] 1:	movn #9
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@235 [std.io#Thread.isDaemon] in file: lib/support/0.2.422//io//Thread.sharp:141:24: note:  
		    public def isDaemon() : var { return daemon; }
		                       ^


isDaemon:
line: 140 [0x0] 0:	movl 0
          [0x1] 1:	movn #7
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@236 [std.io#Thread.setStarted] in file: lib/support/0.2.422//io//Thread.sharp:142:26: note:  
		    public def setStarted(var started) { self->started = started; }
		                         ^


setStarted:
line: 141 [0x0] 0:	loadl ebx, fp+1
          [0x1] 1:	nop
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #11
          [0x5] 5:	movi #0, adx
          [0x7] 7:	loadval ecx
          [0x8] 8:	rmov adx, ecx
          [0x9] 9:	ret

func:@237 [std.io#Thread.isStarted] in file: lib/support/0.2.422//io//Thread.sharp:143:25: note:  
		    public def isStarted() : var { return started; }
		                        ^


isStarted:
line: 142 [0x0] 0:	movl 0
          [0x1] 1:	movn #11
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@238 [std.io#Thread.setTerminated] in file: lib/support/0.2.422//io//Thread.sharp:144:29: note:  
		    public def setTerminated(var term) { self->terminated = term; }
		                            ^


setTerminated:
line: 143 [0x0] 0:	loadl ebx, fp+1
          [0x1] 1:	nop
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #8
          [0x5] 5:	movi #0, adx
          [0x7] 7:	loadval ecx
          [0x8] 8:	rmov adx, ecx
          [0x9] 9:	ret

func:@239 [std.io#Thread.isTerminated] in file: lib/support/0.2.422//io//Thread.sharp:145:28: note:  
		    public def isTerminated() : var { return terminated; }
		                           ^


isTerminated:
line: 144 [0x0] 0:	movl 0
          [0x1] 1:	movn #8
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@240 [std.io#Thread.setupMainThread] in file: lib/support/0.2.422//io//Thread.sharp:147:38: note:  
		    public static def setupMainThread() {
		                                     ^


setupMainThread:
line: 147 [0x0] 0:	new_class @23 // std.io#Thread
          [0x1] 1:	call @216 // <std.io#Thread.Thread()>
          [0x2] 2:	popl 0
          [0x3] 3:	movi #0, ebx
line: 149 [0x5] 5:	nop
          [0x6] 6:	rstore ebx
          [0x7] 7:	movl 0
          [0x8] 8:	movn #5
          [0x9] 9:	movi #0, adx
          [0xb] 11:	loadval ecx
          [0xc] 12:	rmov adx, ecx
line: 150 [0xd] 13:	movl 0
          [0xe] 14:	movn #10
          [0xf] 15:	pushobj
          [0x10] 16:	newstr @48 // "main"
          [0x11] 17:	call @572 // <std#string.$operator=(var[])>
line: 151 [0x12] 18:	movi #1, ebx
          [0x14] 20:	nop
          [0x15] 21:	rstore ebx
          [0x16] 22:	movl 0
          [0x17] 23:	movn #11
          [0x18] 24:	movi #0, adx
          [0x1a] 26:	loadval ecx
          [0x1b] 27:	rmov adx, ecx
line: 153 [0x1c] 28:	pushl 0
          [0x1d] 29:	call @228 // <std.io#Thread.addThread(std.io#Thread)>
line: 154 [0x1e] 30:	pushl 0
          [0x1f] 31:	call @326 // <std.kernel.vm#ThreadCore.__thread_set_thread(std.io#Thread)>
          [0x20] 32:	ret

func:@241 [std.io#Thread.$operator==] in file: lib/support/0.2.422//io//Thread.sharp:158:24: note:  
		    public def operator==(Thread thread) : var {
		                       ^


$operator==:
line: 158 [0x0] 0:	movl 0
          [0x1] 1:	movn #5
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movl 1
          [0x7] 7:	movn #5
          [0x8] 8:	iaload_2 egx, adx
          [0x9] 9:	loadval ebx
          [0xa] 10:	test ebx, egx
          [0xb] 11:	return_val cmt
          [0xc] 12:	ret

func:@242 [std.io#UnixFileSystem.UnixFileSystem] in file: lib/support/0.2.422//io//UnixFileSystem.sharp:13:26: note:  
		    public UnixFileSystem() {
		                         ^


UnixFileSystem:
line: 13 [0x0] 0:	movi #47, ebx
         [0x2] 2:	nop
         [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #11
         [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
         [0xa] 10:	movl 0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@243 [std.io#UnixFileSystem.getPathSeparator] in file: lib/support/0.2.422//io//UnixFileSystem.sharp:17:24: note:  
		    public def delegate::getPathSeparator() : var {
		                       ^


getPathSeparator:
line: 17 [0x0] 0:	movl 0
         [0x1] 1:	movn #11
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@244 [std.io#UnixFileSystem.normalize] in file: lib/support/0.2.422//io//UnixFileSystem.sharp:25:24: note:  
		    public def delegate::normalize(string pathname) : string {
		                       ^


normalize:
line: 25 [0x0] 0:	pushl 1
         [0x1] 1:	call @589 // <std#string.size()>
         [0x2] 2:	ipopl 2
line: 26 [0x3] 3:	pushl 1
         [0x4] 4:	call @578 // <std#string.toArray()>
         [0x5] 5:	popl 3
         [0x6] 6:	new_class @47 // std#string
line: 27 [0x7] 7:	newstr @34 // ""
         [0x8] 8:	call @553 // <std#string.string(var[])>
         [0x9] 9:	popl 4
line: 28 [0xa] 10:	new_class @8 // std#char
         [0xb] 11:	istore 0
         [0xc] 12:	call @29 // <std#char.char(var)>
         [0xd] 13:	popl 5
         [0xe] 14:	new_class @8 // std#char
         [0xf] 15:	istore 0
         [0x10] 16:	call @29 // <std#char.char(var)>
         [0x11] 17:	popl 6
line: 29 [0x12] 18:	istorel 0, fp+7
         [0x14] 20:	pushl 1
         [0x15] 21:	call @589 // <std#string.size()>
         [0x16] 22:	loadval egx
         [0x17] 23:	loadl ebx, fp+7
         [0x18] 24:	lt ebx, egx
         [0x19] 25:	jne 82
line: 30 [0x1a] 26:	pushl 5
         [0x1b] 27:	movl 3
         [0x1c] 28:	loadl ebx, fp+7
         [0x1d] 29:	chklen ebx
         [0x1e] 30:	iaload_2 ebx, ebx
         [0x1f] 31:	rstore ebx
         [0x20] 32:	call @39 // <std#char.$operator=(var)>
         [0x21] 33:	pop
line: 32 [0x22] 34:	pushl 5
         [0x23] 35:	istore 47
         [0x24] 36:	call @41 // <std#char.$operator==(var)>
         [0x25] 37:	loadval ebx
         [0x26] 38:	cmp ebx, 1
         [0x27] 39:	movr ebx, cmt
         [0x28] 40:	skne 7 // pc = 47
         [0x29] 41:	istore 1
         [0x2a] 42:	pushl 6
         [0x2b] 43:	istore 47
         [0x2c] 44:	call @41 // <std#char.$operator==(var)>
         [0x2d] 45:	loadval ebx
         [0x2e] 46:	loadval ecx
         [0x2f] 47:	and ecx, ebx
         [0x30] 48:	jne 51
line: 33 [0x31] 49:	goto @79
         [0x32] 50:	goto @75
         [0x33] 51:	pushl 5
         [0x34] 52:	istore 92
         [0x35] 53:	call @41 // <std#char.$operator==(var)>
         [0x36] 54:	loadval cmt
         [0x37] 55:	jne 70
line: 35 [0x38] 56:	pushl 6
         [0x39] 57:	istore 92
         [0x3a] 58:	call @46 // <std#char.$operator!=(var)>
         [0x3b] 59:	loadval cmt
         [0x3c] 60:	jne 68
line: 36 [0x3d] 61:	pushl 4
         [0x3e] 62:	new_class @8 // std#char
         [0x3f] 63:	istore 47
         [0x40] 64:	call @29 // <std#char.char(var)>
         [0x41] 65:	call @575 // <std#string.$operator+=(std#Printable)>
         [0x42] 66:	pop
         [0x43] 67:	nop
         [0x44] 68:	nop
         [0x45] 69:	goto @75
line: 39 [0x46] 70:	pushl 4
         [0x47] 71:	pushl 5
         [0x48] 72:	call @575 // <std#string.$operator+=(std#Printable)>
         [0x49] 73:	pop
         [0x4a] 74:	nop
         [0x4b] 75:	nop
line: 41 [0x4c] 76:	pushl 6
         [0x4d] 77:	pushl 5
         [0x4e] 78:	call @40 // <std#char.$operator=(std#integer)>
         [0x4f] 79:	pop
         [0x50] 80:	iaddl 1, @7
         [0x51] 81:	goto @20
line: 45 [0x52] 82:	movl 4
         [0x53] 83:	returnobj
         [0x54] 84:	ret

func:@245 [std.io#UnixFileSystem.getFileAttributes] in file: lib/support/0.2.422//io//UnixFileSystem.sharp:54:25: note:  
		     public def delegate::getFileAttributes(File f) : var {
		                        ^


getFileAttributes:
Exception Table: 
[
start_pc: 2
end_pc: 6
handler_pc: 7
local: 3
]
line: 54 [0x0] 0:	movl 2
         [0x1] 1:	del
line: 56 [0x2] 2:	pushl 1
line: 57 [0x3] 3:	call @132 // <std.io#File.getAbsolutePath()>
         [0x4] 4:	call @578 // <std#string.toArray()>
         [0x5] 5:	popl 2
         [0x6] 6:	goto @14
line: 59 [0x7] 7:	movi #0, ebx
         [0x9] 9:	return_val ebx
         [0xa] 10:	ret
         [0xb] 11:	goto @14
         [0xc] 12:	nop
         [0xd] 13:	nop
line: 61 [0xe] 14:	istorel 0, fp+4
line: 67 [0x10] 16:	pushl 2
         [0x11] 17:	int 0xb2
         [0x12] 18:	smovr_2 ebx, fp+4
line: 73 [0x13] 19:	loadl ebx, fp+4
         [0x14] 20:	return_val ebx
         [0x15] 21:	ret

func:@246 [std.io#UnixFileSystem.checkAccess] in file: lib/support/0.2.422//io//UnixFileSystem.sharp:84:25: note:  
		     public def delegate::checkAccess(File f, var access) : var {
		                        ^


checkAccess:
Exception Table: 
[
start_pc: 2
end_pc: 6
handler_pc: 7
local: 4
]
line: 84 [0x0] 0:	movl 3
         [0x1] 1:	del
line: 86 [0x2] 2:	pushl 1
line: 87 [0x3] 3:	call @132 // <std.io#File.getAbsolutePath()>
         [0x4] 4:	call @578 // <std#string.toArray()>
         [0x5] 5:	popl 3
         [0x6] 6:	goto @14
line: 89 [0x7] 7:	movi #1, ebx
         [0x9] 9:	return_val ebx
         [0xa] 10:	ret
         [0xb] 11:	goto @14
         [0xc] 12:	nop
         [0xd] 13:	nop
line: 91 [0xe] 14:	istorel 0, fp+5
line: 97 [0x10] 16:	pushl 3
         [0x11] 17:	loadl ebx, fp+2
         [0x12] 18:	int 0xb1
         [0x13] 19:	smovr_2 ebx, fp+5
line: 104 [0x14] 20:	loadl ebx, fp+5
          [0x15] 21:	return_val ebx
          [0x16] 22:	ret

func:@247 [std.io#WinFileSystem.WinFileSystem] in file: lib/support/0.2.422//io//WinFileSystem.sharp:16:25: note:  
		    public WinFileSystem() {
		                        ^


WinFileSystem:
line: 16 [0x0] 0:	movi #92, ebx
         [0x2] 2:	nop
         [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #11
         [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
         [0xa] 10:	movl 0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@248 [std.io#WinFileSystem.getPathSeparator] in file: lib/support/0.2.422//io//WinFileSystem.sharp:20:24: note:  
		    public def delegate::getPathSeparator() : var {
		                       ^


getPathSeparator:
line: 20 [0x0] 0:	movl 0
         [0x1] 1:	movn #11
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@249 [std.io#WinFileSystem.normalize] in file: lib/support/0.2.422//io//WinFileSystem.sharp:28:24: note:  
		    public def delegate::normalize(string pathname) : string {
		                       ^


normalize:
line: 28 [0x0] 0:	pushl 1
         [0x1] 1:	call @589 // <std#string.size()>
         [0x2] 2:	ipopl 2
line: 29 [0x3] 3:	pushl 1
         [0x4] 4:	call @578 // <std#string.toArray()>
         [0x5] 5:	popl 3
         [0x6] 6:	new_class @47 // std#string
line: 30 [0x7] 7:	newstr @34 // ""
         [0x8] 8:	call @553 // <std#string.string(var[])>
         [0x9] 9:	popl 4
line: 31 [0xa] 10:	movi #1, ebx
         [0xc] 12:	newarry ebx
         [0xd] 13:	popl 5
         [0xe] 14:	istorel 0, fp+6
line: 31 [0x10] 16:	istorel 0, fp+7
line: 32 [0x12] 18:	movl 3
         [0x13] 19:	sizeof egx
         [0x14] 20:	loadl ebx, fp+7
         [0x15] 21:	lt ebx, egx
         [0x16] 22:	jne 98
line: 33 [0x17] 23:	movl 3
         [0x18] 24:	loadl ebx, fp+7
         [0x19] 25:	chklen ebx
         [0x1a] 26:	iaload_2 ebx, ebx
         [0x1b] 27:	rstore ebx
         [0x1c] 28:	movl 5
         [0x1d] 29:	movi #0, ebx
         [0x1f] 31:	chklen ebx
         [0x20] 32:	loadval egx
         [0x21] 33:	rmov ebx, egx
line: 35 [0x22] 34:	movl 5
         [0x23] 35:	chklen ebx
         [0x24] 36:	iaload_2 ebx, ebx
         [0x25] 37:	rstore ebx
         [0x26] 38:	movi #47, egx
         [0x28] 40:	loadval ebx
         [0x29] 41:	test ebx, egx
         [0x2a] 42:	movr ebx, cmt
         [0x2b] 43:	cmp ebx, 1
         [0x2c] 44:	movr ebx, cmt
         [0x2d] 45:	skne 9 // pc = 54
         [0x2e] 46:	istore 1
         [0x2f] 47:	ipushl #6
         [0x30] 48:	movi #47, egx
         [0x32] 50:	loadval ebx
         [0x33] 51:	test ebx, egx
         [0x34] 52:	movr ebx, cmt
         [0x35] 53:	loadval ecx
         [0x36] 54:	and ecx, ebx
         [0x37] 55:	jne 58
line: 36 [0x38] 56:	goto @95
         [0x39] 57:	goto @89
         [0x3a] 58:	movl 5
         [0x3b] 59:	movi #0, ebx
         [0x3d] 61:	chklen ebx
         [0x3e] 62:	iaload_2 ebx, ebx
         [0x3f] 63:	rstore ebx
         [0x40] 64:	movi #92, egx
         [0x42] 66:	loadval ebx
         [0x43] 67:	test ebx, egx
         [0x44] 68:	jne 84
line: 38 [0x45] 69:	ipushl #6
         [0x46] 70:	movi #92, egx
         [0x48] 72:	loadval ebx
         [0x49] 73:	tne ebx, egx
         [0x4a] 74:	jne 82
line: 39 [0x4b] 75:	pushl 4
         [0x4c] 76:	new_class @8 // std#char
         [0x4d] 77:	istore 92
         [0x4e] 78:	call @29 // <std#char.char(var)>
         [0x4f] 79:	call @575 // <std#string.$operator+=(std#Printable)>
         [0x50] 80:	pop
         [0x51] 81:	nop
         [0x52] 82:	nop
         [0x53] 83:	goto @89
line: 42 [0x54] 84:	pushl 4
         [0x55] 85:	pushl 5
         [0x56] 86:	call @576 // <std#string.$operator+=(var[])>
         [0x57] 87:	pop
         [0x58] 88:	nop
         [0x59] 89:	nop
line: 44 [0x5a] 90:	movl 5
         [0x5b] 91:	movi #0, ebx
         [0x5d] 93:	chklen ebx
         [0x5e] 94:	iaload_2 ebx, ebx
         [0x5f] 95:	smovr_2 ebx, fp+6
         [0x60] 96:	iaddl 1, @7
         [0x61] 97:	goto @18
line: 47 [0x62] 98:	movl 4
         [0x63] 99:	returnobj
         [0x64] 100:	ret

func:@250 [std.io#WinFileSystem.getFileAttributes] in file: lib/support/0.2.422//io//WinFileSystem.sharp:56:25: note:  
		     public def delegate::getFileAttributes(File f) : var {
		                        ^


getFileAttributes:
Exception Table: 
[
start_pc: 2
end_pc: 6
handler_pc: 7
local: 3
]
line: 56 [0x0] 0:	movl 2
         [0x1] 1:	del
line: 58 [0x2] 2:	pushl 1
line: 59 [0x3] 3:	call @132 // <std.io#File.getAbsolutePath()>
         [0x4] 4:	call @578 // <std#string.toArray()>
         [0x5] 5:	popl 2
         [0x6] 6:	goto @14
line: 61 [0x7] 7:	movi #0, ebx
         [0x9] 9:	return_val ebx
         [0xa] 10:	ret
         [0xb] 11:	goto @14
         [0xc] 12:	nop
         [0xd] 13:	nop
line: 63 [0xe] 14:	istorel 0, fp+4
line: 69 [0x10] 16:	pushl 2
         [0x11] 17:	int 0xb2
         [0x12] 18:	smovr_2 ebx, fp+4
line: 75 [0x13] 19:	loadl ebx, fp+4
         [0x14] 20:	return_val ebx
         [0x15] 21:	ret

func:@251 [std.io#WinFileSystem.checkAccess] in file: lib/support/0.2.422//io//WinFileSystem.sharp:86:25: note:  
		     public def delegate::checkAccess(File f, var access) : var {
		                        ^


checkAccess:
Exception Table: 
[
start_pc: 2
end_pc: 6
handler_pc: 7
local: 4
]
line: 86 [0x0] 0:	movl 3
         [0x1] 1:	del
line: 88 [0x2] 2:	pushl 1
line: 89 [0x3] 3:	call @132 // <std.io#File.getAbsolutePath()>
         [0x4] 4:	call @578 // <std#string.toArray()>
         [0x5] 5:	popl 3
         [0x6] 6:	goto @14
line: 91 [0x7] 7:	movi #1, ebx
         [0x9] 9:	return_val ebx
         [0xa] 10:	ret
         [0xb] 11:	goto @14
         [0xc] 12:	nop
         [0xd] 13:	nop
line: 93 [0xe] 14:	istorel 0, fp+5
line: 96 [0x10] 16:	ipushl #2
         [0x11] 17:	movi #1, egx
         [0x13] 19:	loadval ebx
         [0x14] 20:	test ebx, egx
         [0x15] 21:	jne 27
line: 97 [0x16] 22:	movi #-1, ebx
         [0x18] 24:	return_val ebx
         [0x19] 25:	ret
         [0x1a] 26:	nop
         [0x1b] 27:	nop
line: 102 [0x1c] 28:	pushl 3
          [0x1d] 29:	loadl ebx, fp+2
          [0x1e] 30:	int 0xb1
          [0x1f] 31:	smovr_2 ebx, fp+5
line: 109 [0x20] 32:	loadl ebx, fp+5
          [0x21] 33:	return_val ebx
          [0x22] 34:	ret

func:@252 [std.kernel#CListObj.add] in file: lib/support/0.2.422//kernel//CListObj.sharp:11:22: note:  
		    protected def add(object element) {
		                     ^


add:
line: 11 [0x0] 0:	pushl 1
         [0x1] 1:	pushl 0
         [0x2] 2:	loadl ebx, fp+1
         [0x3] 3:	movi #0, adx
         [0x5] 5:	int 0xe6
         [0x6] 6:	ret

func:@253 [std.kernel#CListObj.shrink] in file: lib/support/0.2.422//kernel//CListObj.sharp:21:25: note:  
		    protected def shrink() {
		                        ^


shrink:
line: 21 [0x0] 0:	pushl 0
         [0x1] 1:	movi #1, adx
         [0x3] 3:	int 0xe6
         [0x4] 4:	ret

func:@254 [std.kernel#CListObj.insert] in file: lib/support/0.2.422//kernel//CListObj.sharp:29:25: note:  
		    protected def insert(var pos, object element) {
		                        ^


insert:
line: 29 [0x0] 0:	pushl 2
         [0x1] 1:	pushl 0
         [0x2] 2:	loadl ebx, fp+1
         [0x3] 3:	loadl egx, fp+2
         [0x4] 4:	movi #2, adx
         [0x6] 6:	int 0xe6
         [0x7] 7:	ret

func:@255 [std.kernel#CListObj.remove] in file: lib/support/0.2.422//kernel//CListObj.sharp:40:25: note:  
		    protected def remove(var pos) {
		                        ^


remove:
line: 40 [0x0] 0:	pushl 0
         [0x1] 1:	loadl ebx, fp+1
         [0x2] 2:	movi #3, adx
         [0x4] 4:	int 0xe6
         [0x5] 5:	ret

func:@256 [std.kernel#CListObj.CListObj] in file: lib/support/0.2.422//kernel//CListObj.sharp:7:13: note:  
		public class CListObj {
		            ^


CListObj:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@257 [std.kernel#CListVar.add] in file: lib/support/0.2.422//kernel//CListVar.sharp:11:22: note:  
		    protected def add(var element) {
		                     ^


add:
line: 11 [0x0] 0:	pushl 0
         [0x1] 1:	loadl ebx, fp+1
         [0x2] 2:	movi #0, adx
         [0x4] 4:	int 0xe6
         [0x5] 5:	ret

func:@258 [std.kernel#CListVar.shrink] in file: lib/support/0.2.422//kernel//CListVar.sharp:20:25: note:  
		    protected def shrink() {
		                        ^


shrink:
line: 20 [0x0] 0:	pushl 0
         [0x1] 1:	movi #1, adx
         [0x3] 3:	int 0xe6
         [0x4] 4:	ret

func:@259 [std.kernel#CListVar.insert] in file: lib/support/0.2.422//kernel//CListVar.sharp:28:25: note:  
		    protected def insert(var pos, var element) {
		                        ^


insert:
line: 28 [0x0] 0:	pushl 0
         [0x1] 1:	loadl ebx, fp+1
         [0x2] 2:	loadl egx, fp+2
         [0x3] 3:	movi #2, adx
         [0x5] 5:	int 0xe6
         [0x6] 6:	ret

func:@260 [std.kernel#CListVar.remove] in file: lib/support/0.2.422//kernel//CListVar.sharp:38:25: note:  
		    protected def remove(var pos) {
		                        ^


remove:
line: 38 [0x0] 0:	pushl 0
         [0x1] 1:	loadl ebx, fp+1
         [0x2] 2:	movi #3, adx
         [0x4] 4:	int 0xe6
         [0x5] 5:	ret

func:@261 [std.kernel#CListVar.CListVar] in file: lib/support/0.2.422//kernel//CListVar.sharp:7:13: note:  
		public class CListVar {
		            ^


CListVar:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@262 [std.kernel#CMath.__cmath] in file: lib/support/0.2.422//kernel//CMath.sharp:9:31: note:  
		    private static def __cmath(var n, var procedure) : var {
		                              ^


__cmath:
line: 9 [0x0] 0:	loadl ebx, fp+0
        [0x1] 1:	loadl ecx, fp+1
        [0x2] 2:	int 0xe3
        [0x3] 3:	return_val cmt
        [0x4] 4:	ret

func:@263 [std.kernel#CMath.__cmath] in file: lib/support/0.2.422//kernel//CMath.sharp:19:31: note:  
		    private static def __cmath(var n, var n2, var procedure) : var {
		                              ^


__cmath:
line: 19 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	loadl egx, fp+1
         [0x2] 2:	loadl ecx, fp+2
         [0x3] 3:	int 0xe3
         [0x4] 4:	return_val cmt
         [0x5] 5:	ret

func:@264 [std.kernel#CMath.sin] in file: lib/support/0.2.422//kernel//CMath.sharp:30:26: note:  
		    public static def sin(var n) : var {
		                         ^


sin:
line: 30 [0x0] 0:	ipushl #0
         [0x1] 1:	istore 0
         [0x2] 2:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@265 [std.kernel#CMath.cos] in file: lib/support/0.2.422//kernel//CMath.sharp:34:26: note:  
		    public static def cos(var n) : var {
		                         ^


cos:
line: 34 [0x0] 0:	ipushl #0
         [0x1] 1:	istore 2
         [0x2] 2:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@266 [std.kernel#CMath.tan] in file: lib/support/0.2.422//kernel//CMath.sharp:38:26: note:  
		    public static def tan(var n) : var {
		                         ^


tan:
line: 38 [0x0] 0:	ipushl #0
         [0x1] 1:	istore 3
         [0x2] 2:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@267 [std.kernel#CMath.sinh] in file: lib/support/0.2.422//kernel//CMath.sharp:42:27: note:  
		    public static def sinh(var n) : var {
		                          ^


sinh:
line: 42 [0x0] 0:	ipushl #0
         [0x1] 1:	istore 4
         [0x2] 2:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@268 [std.kernel#CMath.cosh] in file: lib/support/0.2.422//kernel//CMath.sharp:46:27: note:  
		    public static def cosh(var n) : var {
		                          ^


cosh:
line: 46 [0x0] 0:	ipushl #0
         [0x1] 1:	istore 5
         [0x2] 2:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@269 [std.kernel#CMath.tanh] in file: lib/support/0.2.422//kernel//CMath.sharp:50:27: note:  
		    public static def tanh(var n) : var {
		                          ^


tanh:
line: 50 [0x0] 0:	ipushl #0
         [0x1] 1:	istore 6
         [0x2] 2:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@270 [std.kernel#CMath.asin] in file: lib/support/0.2.422//kernel//CMath.sharp:54:27: note:  
		    public static def asin(var n) : var {
		                          ^


asin:
line: 54 [0x0] 0:	ipushl #0
         [0x1] 1:	istore 7
         [0x2] 2:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@271 [std.kernel#CMath.acos] in file: lib/support/0.2.422//kernel//CMath.sharp:58:27: note:  
		    public static def acos(var n) : var {
		                          ^


acos:
line: 58 [0x0] 0:	ipushl #0
         [0x1] 1:	istore 8
         [0x2] 2:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@272 [std.kernel#CMath.atan] in file: lib/support/0.2.422//kernel//CMath.sharp:62:27: note:  
		    public static def atan(var n) : var {
		                          ^


atan:
line: 62 [0x0] 0:	ipushl #0
         [0x1] 1:	istore 9
         [0x2] 2:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@273 [std.kernel#CMath.atan2] in file: lib/support/0.2.422//kernel//CMath.sharp:66:28: note:  
		    public static def atan2(var n, var n2) : var {
		                           ^


atan2:
line: 66 [0x0] 0:	ipushl #0
         [0x1] 1:	ipushl #1
         [0x2] 2:	istore 10
         [0x3] 3:	call @263 // <std.kernel#CMath.__cmath(var,var,var)>
         [0x4] 4:	loadval ebx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@274 [std.kernel#CMath.exp] in file: lib/support/0.2.422//kernel//CMath.sharp:70:26: note:  
		    public static def exp(var n) : var {
		                         ^


exp:
line: 70 [0x0] 0:	ipushl #0
         [0x1] 1:	istore 11
         [0x2] 2:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@275 [std.kernel#CMath.log] in file: lib/support/0.2.422//kernel//CMath.sharp:74:26: note:  
		    public static def log(var n) : var {
		                         ^


log:
line: 74 [0x0] 0:	ipushl #0
         [0x1] 1:	istore 12
         [0x2] 2:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@276 [std.kernel#CMath.log10] in file: lib/support/0.2.422//kernel//CMath.sharp:78:28: note:  
		    public static def log10(var n) : var {
		                           ^


log10:
line: 78 [0x0] 0:	ipushl #0
         [0x1] 1:	istore 13
         [0x2] 2:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@277 [std.kernel#CMath.pow] in file: lib/support/0.2.422//kernel//CMath.sharp:82:26: note:  
		    public static def pow(var n, var exp) : var {
		                         ^


pow:
line: 82 [0x0] 0:	ipushl #0
         [0x1] 1:	ipushl #1
         [0x2] 2:	istore 14
         [0x3] 3:	call @263 // <std.kernel#CMath.__cmath(var,var,var)>
         [0x4] 4:	loadval ebx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@278 [std.kernel#CMath.sqrt] in file: lib/support/0.2.422//kernel//CMath.sharp:86:27: note:  
		    public static def sqrt(var n) : var {
		                          ^


sqrt:
line: 86 [0x0] 0:	ipushl #0
         [0x1] 1:	istore 15
         [0x2] 2:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@279 [std.kernel#CMath.ceil] in file: lib/support/0.2.422//kernel//CMath.sharp:90:27: note:  
		    public static def ceil(var n) : var {
		                          ^


ceil:
line: 90 [0x0] 0:	ipushl #0
         [0x1] 1:	istore 16
         [0x2] 2:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@280 [std.kernel#CMath.floor] in file: lib/support/0.2.422//kernel//CMath.sharp:94:28: note:  
		    public static def floor(var n) : var {
		                           ^


floor:
line: 94 [0x0] 0:	ipushl #0
         [0x1] 1:	istore 17
         [0x2] 2:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@281 [std.kernel#CMath.fabs] in file: lib/support/0.2.422//kernel//CMath.sharp:98:27: note:  
		    public static def fabs(var n) : var {
		                          ^


fabs:
line: 98 [0x0] 0:	ipushl #0
         [0x1] 1:	istore 18
         [0x2] 2:	call @262 // <std.kernel#CMath.__cmath(var,var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@282 [std.kernel#CMath.ldexp] in file: lib/support/0.2.422//kernel//CMath.sharp:102:28: note:  
		    public static def ldexp(var n, var n2) : var {
		                           ^


ldexp:
line: 102 [0x0] 0:	ipushl #0
          [0x1] 1:	ipushl #1
          [0x2] 2:	istore 19
          [0x3] 3:	call @263 // <std.kernel#CMath.__cmath(var,var,var)>
          [0x4] 4:	loadval ebx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@283 [std.kernel#CMath.fmod] in file: lib/support/0.2.422//kernel//CMath.sharp:106:27: note:  
		    public static def fmod(var n, var n2) : var {
		                          ^


fmod:
line: 106 [0x0] 0:	ipushl #0
          [0x1] 1:	ipushl #1
          [0x2] 2:	istore 20
          [0x3] 3:	call @263 // <std.kernel#CMath.__cmath(var,var,var)>
          [0x4] 4:	loadval ebx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@284 [std.kernel#CMath.CMath] in file: lib/support/0.2.422//kernel//CMath.sharp:7:13: note:  
		public class CMath {
		            ^


CMath:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@285 [std.kernel#ConsoleHandler.printData] in file: lib/support/0.2.422//kernel//ConsoleHandler.sharp:9:25: note:  
		    public def printData(var[] data)
		                        ^


printData:
line: 10 [0x0] 0:	pushl 0
         [0x1] 1:	pushl 1
         [0x2] 2:	call @286 // <std.kernel#ConsoleHandler.__print_(var[])>
         [0x3] 3:	ret

func:@286 [std.kernel#ConsoleHandler.__print_] in file: lib/support/0.2.422//kernel//ConsoleHandler.sharp:18:26: note:  
		     private def __print_(var[] message)
		                         ^


__print_:
line: 19 [0x0] 0:	movl 1
         [0x1] 1:	checknull
         [0x2] 2:	not cmt, cmt
         [0x3] 3:	jne 19
line: 20 [0x4] 4:	istore 0
         [0x5] 5:	movl 1
         [0x6] 6:	smov ebx, sp+0
         [0x7] 7:	sizeof egx
         [0x8] 8:	lt ebx, egx
         [0x9] 9:	jne 17
         [0xa] 10:	iaload_2 ebx, ebx
         [0xb] 11:	smovr_2 ebx, fp+2
line: 21 [0xc] 12:	ipushl #2
         [0xd] 13:	istore 1
         [0xe] 14:	call @289 // <std.kernel#ConsoleHandler.__print_stdout_(var,var)>
         [0xf] 15:	isadd 1, sp+0
         [0x10] 16:	goto @5
         [0x11] 17:	pop
         [0x12] 18:	goto @23
line: 24 [0x13] 19:	pushl 0
         [0x14] 20:	newstr @49 // "null"
         [0x15] 21:	call @286 // <std.kernel#ConsoleHandler.__print_(var[])>
         [0x16] 22:	nop
         [0x17] 23:	nop
         [0x18] 24:	ret

func:@287 [std.kernel#ConsoleHandler.read] in file: lib/support/0.2.422//kernel//ConsoleHandler.sharp:29:21: note:  
		     public def read() : var
		                    ^


read:
line: 30 [0x0] 0:	movi #1, cmt
         [0x2] 2:	get ebx
         [0x3] 3:	return_val ebx
         [0x4] 4:	ret

func:@288 [std.kernel#ConsoleHandler.readsilent] in file: lib/support/0.2.422//kernel//ConsoleHandler.sharp:39:27: note:  
		     public def readsilent() : var
		                          ^


readsilent:
line: 40 [0x0] 0:	movi #0, cmt
         [0x2] 2:	get ebx
         [0x3] 3:	return_val ebx
         [0x4] 4:	ret

func:@289 [std.kernel#ConsoleHandler.__print_stdout_] in file: lib/support/0.2.422//kernel//ConsoleHandler.sharp:52:39: note:  
		     public static def __print_stdout_(var char, var isCharacter)
		                                      ^


__print_stdout_:
line: 53 [0x0] 0:	loadl cmt, fp+1
         [0x1] 1:	jne 6
line: 54 [0x2] 2:	loadl ebx, fp+0
         [0x3] 3:	_putc ebx
         [0x4] 4:	ret
         [0x5] 5:	goto @10
line: 60 [0x6] 6:	loadl ebx, fp+0
         [0x7] 7:	put ebx
         [0x8] 8:	ret
         [0x9] 9:	nop
         [0xa] 10:	nop
         [0xb] 11:	ret

func:@290 [std.kernel#ConsoleHandler.ConsoleHandler] in file: lib/support/0.2.422//kernel//ConsoleHandler.sharp:8:13: note:  
		public class ConsoleHandler {
		            ^


ConsoleHandler:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@291 [std.kernel#__SRT_Global.__seed] in file: lib/support/0.2.422//kernel//CRamdom.sharp:10:4: note:  
		def __seed(var sd)
		   ^


__seed:
line: 11 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	movi #3, adx
         [0x3] 3:	int 0xe7
         [0x4] 4:	ret

func:@292 [std.kernel#__SRT_Global.__rand] in file: lib/support/0.2.422//kernel//CRamdom.sharp:19:4: note:  
		def __rand(var min, var max) : var
		   ^


__rand:
line: 20 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	loadl ecx, fp+1
         [0x2] 2:	movi #0, adx
         [0x4] 4:	int 0xe7
         [0x5] 5:	return_val bmr
         [0x6] 6:	ret

func:@293 [std.kernel#__SRT_Global.__randInt] in file: lib/support/0.2.422//kernel//CRamdom.sharp:31:4: note:  
		def __randInt(var min, var max) : var
		   ^


__randInt:
line: 32 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	loadl ecx, fp+1
         [0x2] 2:	movi #1, adx
         [0x4] 4:	int 0xe7
         [0x5] 5:	return_val bmr
         [0x6] 6:	ret

func:@294 [std.kernel#__SRT_Global.__rand] in file: lib/support/0.2.422//kernel//CRamdom.sharp:43:4: note:  
		def __rand() : var
		   ^


__rand:
line: 44 [0x0] 0:	movi #5, adx
         [0x2] 2:	int 0xe7
         [0x3] 3:	return_val bmr
         [0x4] 4:	ret

func:@295 [std.kernel#__SRT_Global.__randInt] in file: lib/support/0.2.422//kernel//CRamdom.sharp:53:4: note:  
		def __randInt() : var
		   ^


__randInt:
line: 54 [0x0] 0:	movi #6, adx
         [0x2] 2:	int 0xe7
         [0x3] 3:	return_val bmr
         [0x4] 4:	ret

func:@296 [std.kernel#__SRT_Global.__reset] in file: lib/support/0.2.422//kernel//CRamdom.sharp:63:4: note:  
		def __reset() : var
		   ^


__reset:
line: 64 [0x0] 0:	movi #2, adx
         [0x2] 2:	int 0xe7
         [0x3] 3:	return_val bmr
         [0x4] 4:	ret

func:@297 [std.kernel#__SRT_Global.__seed] in file: lib/support/0.2.422//kernel//CRamdom.sharp:73:4: note:  
		def __seed() : var
		   ^


__seed:
line: 74 [0x0] 0:	movi #4, adx
         [0x2] 2:	int 0xe7
         [0x3] 3:	return_val bmr
         [0x4] 4:	ret

func:@298 [std.kernel#Manifest.isWindows] in file: lib/support/0.2.422//kernel//Manifest.sharp:11:32: note:  
		    public static def isWindows() : var {
		                               ^


isWindows:
line: 11 [0x0] 0:	movg @30 // @std.kernel#Manifest
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	newstr @50 // "win"
         [0x4] 4:	call @570 // <std#string.$operator==(var[])>
         [0x5] 5:	loadval ebx
         [0x6] 6:	return_val ebx
         [0x7] 7:	ret

func:@299 [std.kernel#Manifest.isLinux] in file: lib/support/0.2.422//kernel//Manifest.sharp:15:30: note:  
		    public static def isLinux() : var {
		                             ^


isLinux:
line: 15 [0x0] 0:	movg @30 // @std.kernel#Manifest
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	newstr @51 // "posix"
         [0x4] 4:	call @570 // <std#string.$operator==(var[])>
         [0x5] 5:	loadval ebx
         [0x6] 6:	return_val ebx
         [0x7] 7:	ret

func:@300 [std.kernel#Manifest.Manifest] in file: lib/support/0.2.422//kernel//Manifest.sharp:5:13: note:  
		public class Manifest {
		            ^


Manifest:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@301 [std.kernel#Runtime.initializeRTE] in file: lib/support/0.2.422//kernel//Runtime.sharp:31:37: note:  
		    private static def initializeRTE() {
		                                    ^


initializeRTE:
        [0x0] 0:	movi #6, ebx
        [0x2] 2:	nop
        [0x3] 3:	rstore ebx
        [0x4] 4:	new_class @58 // std.os.gui#PaintStyle
        [0x5] 5:	call @76 // <std#Enum.Enum()>
        [0x6] 6:	movg @58 // @std.os.gui#PaintStyle
        [0x7] 7:	movn #9
        [0x8] 8:	popobj
        [0x9] 9:	movn #2
        [0xa] 10:	movi #0, adx
        [0xc] 12:	loadval ecx
        [0xd] 13:	rmov adx, ecx
        [0xe] 14:	newstr @33 // "PS_INSIDEFRAME"
        [0xf] 15:	movg @58 // @std.os.gui#PaintStyle
        [0x10] 16:	movn #9
        [0x11] 17:	movn #1
        [0x12] 18:	popobj
        [0x13] 19:	movi #5, ebx
        [0x15] 21:	nop
        [0x16] 22:	rstore ebx
        [0x17] 23:	new_class @58 // std.os.gui#PaintStyle
        [0x18] 24:	call @76 // <std#Enum.Enum()>
        [0x19] 25:	movg @58 // @std.os.gui#PaintStyle
        [0x1a] 26:	movn #8
        [0x1b] 27:	popobj
        [0x1c] 28:	movn #2
        [0x1d] 29:	movi #0, adx
        [0x1f] 31:	loadval ecx
        [0x20] 32:	rmov adx, ecx
        [0x21] 33:	newstr @32 // "PS_NULL"
        [0x22] 34:	movg @58 // @std.os.gui#PaintStyle
        [0x23] 35:	movn #8
        [0x24] 36:	movn #1
        [0x25] 37:	popobj
        [0x26] 38:	movi #4, ebx
        [0x28] 40:	nop
        [0x29] 41:	rstore ebx
        [0x2a] 42:	new_class @58 // std.os.gui#PaintStyle
        [0x2b] 43:	call @76 // <std#Enum.Enum()>
        [0x2c] 44:	movg @58 // @std.os.gui#PaintStyle
        [0x2d] 45:	movn #7
        [0x2e] 46:	popobj
        [0x2f] 47:	movn #2
        [0x30] 48:	movi #0, adx
        [0x32] 50:	loadval ecx
        [0x33] 51:	rmov adx, ecx
        [0x34] 52:	newstr @31 // "PS_DASHDOTDOT"
        [0x35] 53:	movg @58 // @std.os.gui#PaintStyle
        [0x36] 54:	movn #7
        [0x37] 55:	movn #1
        [0x38] 56:	popobj
        [0x39] 57:	movi #3, ebx
        [0x3b] 59:	nop
        [0x3c] 60:	rstore ebx
        [0x3d] 61:	new_class @58 // std.os.gui#PaintStyle
        [0x3e] 62:	call @76 // <std#Enum.Enum()>
        [0x3f] 63:	movg @58 // @std.os.gui#PaintStyle
        [0x40] 64:	movn #6
        [0x41] 65:	popobj
        [0x42] 66:	movn #2
        [0x43] 67:	movi #0, adx
        [0x45] 69:	loadval ecx
        [0x46] 70:	rmov adx, ecx
        [0x47] 71:	newstr @30 // "PS_DASHDOT"
        [0x48] 72:	movg @58 // @std.os.gui#PaintStyle
        [0x49] 73:	movn #6
        [0x4a] 74:	movn #1
        [0x4b] 75:	popobj
        [0x4c] 76:	movi #2, ebx
        [0x4e] 78:	nop
        [0x4f] 79:	rstore ebx
        [0x50] 80:	new_class @58 // std.os.gui#PaintStyle
        [0x51] 81:	call @76 // <std#Enum.Enum()>
        [0x52] 82:	movg @58 // @std.os.gui#PaintStyle
        [0x53] 83:	movn #5
        [0x54] 84:	popobj
        [0x55] 85:	movn #2
        [0x56] 86:	movi #0, adx
        [0x58] 88:	loadval ecx
        [0x59] 89:	rmov adx, ecx
        [0x5a] 90:	newstr @29 // "PS_DOT"
        [0x5b] 91:	movg @58 // @std.os.gui#PaintStyle
        [0x5c] 92:	movn #5
        [0x5d] 93:	movn #1
        [0x5e] 94:	popobj
        [0x5f] 95:	movi #1, ebx
        [0x61] 97:	nop
        [0x62] 98:	rstore ebx
        [0x63] 99:	new_class @58 // std.os.gui#PaintStyle
        [0x64] 100:	call @76 // <std#Enum.Enum()>
        [0x65] 101:	movg @58 // @std.os.gui#PaintStyle
        [0x66] 102:	movn #4
        [0x67] 103:	popobj
        [0x68] 104:	movn #2
        [0x69] 105:	movi #0, adx
        [0x6b] 107:	loadval ecx
        [0x6c] 108:	rmov adx, ecx
        [0x6d] 109:	newstr @28 // "PS_DASH"
        [0x6e] 110:	movg @58 // @std.os.gui#PaintStyle
        [0x6f] 111:	movn #4
        [0x70] 112:	movn #1
        [0x71] 113:	popobj
        [0x72] 114:	movi #0, ebx
        [0x74] 116:	nop
        [0x75] 117:	rstore ebx
        [0x76] 118:	new_class @58 // std.os.gui#PaintStyle
        [0x77] 119:	call @76 // <std#Enum.Enum()>
        [0x78] 120:	movg @58 // @std.os.gui#PaintStyle
        [0x79] 121:	movn #3
        [0x7a] 122:	popobj
        [0x7b] 123:	movn #2
        [0x7c] 124:	movi #0, adx
        [0x7e] 126:	loadval ecx
        [0x7f] 127:	rmov adx, ecx
        [0x80] 128:	newstr @27 // "PS_SOLID"
        [0x81] 129:	movg @58 // @std.os.gui#PaintStyle
        [0x82] 130:	movn #3
        [0x83] 131:	movn #1
        [0x84] 132:	popobj
        [0x85] 133:	movi #14, ebx
        [0x87] 135:	nop
        [0x88] 136:	rstore ebx
        [0x89] 137:	new_class @57 // std.os.gui#_PAINT
        [0x8a] 138:	call @76 // <std#Enum.Enum()>
        [0x8b] 139:	movg @57 // @std.os.gui#_PAINT
        [0x8c] 140:	movn #17
        [0x8d] 141:	popobj
        [0x8e] 142:	movn #2
        [0x8f] 143:	movi #0, adx
        [0x91] 145:	loadval ecx
        [0x92] 146:	rmov adx, ecx
        [0x93] 147:	newstr @26 // "pt_deleteBrush"
        [0x94] 148:	movg @57 // @std.os.gui#_PAINT
        [0x95] 149:	movn #17
        [0x96] 150:	movn #1
        [0x97] 151:	popobj
        [0x98] 152:	movi #13, ebx
        [0x9a] 154:	nop
        [0x9b] 155:	rstore ebx
        [0x9c] 156:	new_class @57 // std.os.gui#_PAINT
        [0x9d] 157:	call @76 // <std#Enum.Enum()>
        [0x9e] 158:	movg @57 // @std.os.gui#_PAINT
        [0x9f] 159:	movn #16
        [0xa0] 160:	popobj
        [0xa1] 161:	movn #2
        [0xa2] 162:	movi #0, adx
        [0xa4] 164:	loadval ecx
        [0xa5] 165:	rmov adx, ecx
        [0xa6] 166:	newstr @25 // "pt_selectBrush"
        [0xa7] 167:	movg @57 // @std.os.gui#_PAINT
        [0xa8] 168:	movn #16
        [0xa9] 169:	movn #1
        [0xaa] 170:	popobj
        [0xab] 171:	movi #12, ebx
        [0xad] 173:	nop
        [0xae] 174:	rstore ebx
        [0xaf] 175:	new_class @57 // std.os.gui#_PAINT
        [0xb0] 176:	call @76 // <std#Enum.Enum()>
        [0xb1] 177:	movg @57 // @std.os.gui#_PAINT
        [0xb2] 178:	movn #15
        [0xb3] 179:	popobj
        [0xb4] 180:	movn #2
        [0xb5] 181:	movi #0, adx
        [0xb7] 183:	loadval ecx
        [0xb8] 184:	rmov adx, ecx
        [0xb9] 185:	newstr @24 // "pt_createBrush"
        [0xba] 186:	movg @57 // @std.os.gui#_PAINT
        [0xbb] 187:	movn #15
        [0xbc] 188:	movn #1
        [0xbd] 189:	popobj
        [0xbe] 190:	movi #11, ebx
        [0xc0] 192:	nop
        [0xc1] 193:	rstore ebx
        [0xc2] 194:	new_class @57 // std.os.gui#_PAINT
        [0xc3] 195:	call @76 // <std#Enum.Enum()>
        [0xc4] 196:	movg @57 // @std.os.gui#_PAINT
        [0xc5] 197:	movn #14
        [0xc6] 198:	popobj
        [0xc7] 199:	movn #2
        [0xc8] 200:	movi #0, adx
        [0xca] 202:	loadval ecx
        [0xcb] 203:	rmov adx, ecx
        [0xcc] 204:	newstr @23 // "pt_deletePen"
        [0xcd] 205:	movg @57 // @std.os.gui#_PAINT
        [0xce] 206:	movn #14
        [0xcf] 207:	movn #1
        [0xd0] 208:	popobj
        [0xd1] 209:	movi #10, ebx
        [0xd3] 211:	nop
        [0xd4] 212:	rstore ebx
        [0xd5] 213:	new_class @57 // std.os.gui#_PAINT
        [0xd6] 214:	call @76 // <std#Enum.Enum()>
        [0xd7] 215:	movg @57 // @std.os.gui#_PAINT
        [0xd8] 216:	movn #13
        [0xd9] 217:	popobj
        [0xda] 218:	movn #2
        [0xdb] 219:	movi #0, adx
        [0xdd] 221:	loadval ecx
        [0xde] 222:	rmov adx, ecx
        [0xdf] 223:	newstr @22 // "pt_selectPen"
        [0xe0] 224:	movg @57 // @std.os.gui#_PAINT
        [0xe1] 225:	movn #13
        [0xe2] 226:	movn #1
        [0xe3] 227:	popobj
        [0xe4] 228:	movi #9, ebx
        [0xe6] 230:	nop
        [0xe7] 231:	rstore ebx
        [0xe8] 232:	new_class @57 // std.os.gui#_PAINT
        [0xe9] 233:	call @76 // <std#Enum.Enum()>
        [0xea] 234:	movg @57 // @std.os.gui#_PAINT
        [0xeb] 235:	movn #12
        [0xec] 236:	popobj
        [0xed] 237:	movn #2
        [0xee] 238:	movi #0, adx
        [0xf0] 240:	loadval ecx
        [0xf1] 241:	rmov adx, ecx
        [0xf2] 242:	newstr @21 // "pt_createPen"
        [0xf3] 243:	movg @57 // @std.os.gui#_PAINT
        [0xf4] 244:	movn #12
        [0xf5] 245:	movn #1
        [0xf6] 246:	popobj
        [0xf7] 247:	movi #8, ebx
        [0xf9] 249:	nop
        [0xfa] 250:	rstore ebx
        [0xfb] 251:	new_class @57 // std.os.gui#_PAINT
        [0xfc] 252:	call @76 // <std#Enum.Enum()>
        [0xfd] 253:	movg @57 // @std.os.gui#_PAINT
        [0xfe] 254:	movn #11
        [0xff] 255:	popobj
        [0x100] 256:	movn #2
        [0x101] 257:	movi #0, adx
        [0x103] 259:	loadval ecx
        [0x104] 260:	rmov adx, ecx
        [0x105] 261:	newstr @20 // "pt_polygon"
        [0x106] 262:	movg @57 // @std.os.gui#_PAINT
        [0x107] 263:	movn #11
        [0x108] 264:	movn #1
        [0x109] 265:	popobj
        [0x10a] 266:	movi #7, ebx
        [0x10c] 268:	nop
        [0x10d] 269:	rstore ebx
        [0x10e] 270:	new_class @57 // std.os.gui#_PAINT
        [0x10f] 271:	call @76 // <std#Enum.Enum()>
        [0x110] 272:	movg @57 // @std.os.gui#_PAINT
        [0x111] 273:	movn #10
        [0x112] 274:	popobj
        [0x113] 275:	movn #2
        [0x114] 276:	movi #0, adx
        [0x116] 278:	loadval ecx
        [0x117] 279:	rmov adx, ecx
        [0x118] 280:	newstr @19 // "pt_ellipsize"
        [0x119] 281:	movg @57 // @std.os.gui#_PAINT
        [0x11a] 282:	movn #10
        [0x11b] 283:	movn #1
        [0x11c] 284:	popobj
        [0x11d] 285:	movi #6, ebx
        [0x11f] 287:	nop
        [0x120] 288:	rstore ebx
        [0x121] 289:	new_class @57 // std.os.gui#_PAINT
        [0x122] 290:	call @76 // <std#Enum.Enum()>
        [0x123] 291:	movg @57 // @std.os.gui#_PAINT
        [0x124] 292:	movn #9
        [0x125] 293:	popobj
        [0x126] 294:	movn #2
        [0x127] 295:	movi #0, adx
        [0x129] 297:	loadval ecx
        [0x12a] 298:	rmov adx, ecx
        [0x12b] 299:	newstr @18 // "pt_fillrect"
        [0x12c] 300:	movg @57 // @std.os.gui#_PAINT
        [0x12d] 301:	movn #9
        [0x12e] 302:	movn #1
        [0x12f] 303:	popobj
        [0x130] 304:	movi #5, ebx
        [0x132] 306:	nop
        [0x133] 307:	rstore ebx
        [0x134] 308:	new_class @57 // std.os.gui#_PAINT
        [0x135] 309:	call @76 // <std#Enum.Enum()>
        [0x136] 310:	movg @57 // @std.os.gui#_PAINT
        [0x137] 311:	movn #8
        [0x138] 312:	popobj
        [0x139] 313:	movn #2
        [0x13a] 314:	movi #0, adx
        [0x13c] 316:	loadval ecx
        [0x13d] 317:	rmov adx, ecx
        [0x13e] 318:	newstr @17 // "pt_rect"
        [0x13f] 319:	movg @57 // @std.os.gui#_PAINT
        [0x140] 320:	movn #8
        [0x141] 321:	movn #1
        [0x142] 322:	popobj
        [0x143] 323:	movi #4, ebx
        [0x145] 325:	nop
        [0x146] 326:	rstore ebx
        [0x147] 327:	new_class @57 // std.os.gui#_PAINT
        [0x148] 328:	call @76 // <std#Enum.Enum()>
        [0x149] 329:	movg @57 // @std.os.gui#_PAINT
        [0x14a] 330:	movn #7
        [0x14b] 331:	popobj
        [0x14c] 332:	movn #2
        [0x14d] 333:	movi #0, adx
        [0x14f] 335:	loadval ecx
        [0x150] 336:	rmov adx, ecx
        [0x151] 337:	newstr @16 // "pt_line"
        [0x152] 338:	movg @57 // @std.os.gui#_PAINT
        [0x153] 339:	movn #7
        [0x154] 340:	movn #1
        [0x155] 341:	popobj
        [0x156] 342:	movi #3, ebx
        [0x158] 344:	nop
        [0x159] 345:	rstore ebx
        [0x15a] 346:	new_class @57 // std.os.gui#_PAINT
        [0x15b] 347:	call @76 // <std#Enum.Enum()>
        [0x15c] 348:	movg @57 // @std.os.gui#_PAINT
        [0x15d] 349:	movn #6
        [0x15e] 350:	popobj
        [0x15f] 351:	movn #2
        [0x160] 352:	movi #0, adx
        [0x162] 354:	loadval ecx
        [0x163] 355:	rmov adx, ecx
        [0x164] 356:	newstr @15 // "pt_move"
        [0x165] 357:	movg @57 // @std.os.gui#_PAINT
        [0x166] 358:	movn #6
        [0x167] 359:	movn #1
        [0x168] 360:	popobj
        [0x169] 361:	movi #2, ebx
        [0x16b] 363:	nop
        [0x16c] 364:	rstore ebx
        [0x16d] 365:	new_class @57 // std.os.gui#_PAINT
        [0x16e] 366:	call @76 // <std#Enum.Enum()>
        [0x16f] 367:	movg @57 // @std.os.gui#_PAINT
        [0x170] 368:	movn #5
        [0x171] 369:	popobj
        [0x172] 370:	movn #2
        [0x173] 371:	movi #0, adx
        [0x175] 373:	loadval ecx
        [0x176] 374:	rmov adx, ecx
        [0x177] 375:	newstr @14 // "pt_end"
        [0x178] 376:	movg @57 // @std.os.gui#_PAINT
        [0x179] 377:	movn #5
        [0x17a] 378:	movn #1
        [0x17b] 379:	popobj
        [0x17c] 380:	movi #1, ebx
        [0x17e] 382:	nop
        [0x17f] 383:	rstore ebx
        [0x180] 384:	new_class @57 // std.os.gui#_PAINT
        [0x181] 385:	call @76 // <std#Enum.Enum()>
        [0x182] 386:	movg @57 // @std.os.gui#_PAINT
        [0x183] 387:	movn #4
        [0x184] 388:	popobj
        [0x185] 389:	movn #2
        [0x186] 390:	movi #0, adx
        [0x188] 392:	loadval ecx
        [0x189] 393:	rmov adx, ecx
        [0x18a] 394:	newstr @13 // "pt_start"
        [0x18b] 395:	movg @57 // @std.os.gui#_PAINT
        [0x18c] 396:	movn #4
        [0x18d] 397:	movn #1
        [0x18e] 398:	popobj
        [0x18f] 399:	movi #0, ebx
        [0x191] 401:	nop
        [0x192] 402:	rstore ebx
        [0x193] 403:	new_class @57 // std.os.gui#_PAINT
        [0x194] 404:	call @76 // <std#Enum.Enum()>
        [0x195] 405:	movg @57 // @std.os.gui#_PAINT
        [0x196] 406:	movn #3
        [0x197] 407:	popobj
        [0x198] 408:	movn #2
        [0x199] 409:	movi #0, adx
        [0x19b] 411:	loadval ecx
        [0x19c] 412:	rmov adx, ecx
        [0x19d] 413:	newstr @12 // "pt_text"
        [0x19e] 414:	movg @57 // @std.os.gui#_PAINT
        [0x19f] 415:	movn #3
        [0x1a0] 416:	movn #1
        [0x1a1] 417:	popobj
        [0x1a2] 418:	movi #8, ebx
        [0x1a4] 420:	nop
        [0x1a5] 421:	rstore ebx
        [0x1a6] 422:	new_class @56 // std.os.gui#_GUI
        [0x1a7] 423:	call @76 // <std#Enum.Enum()>
        [0x1a8] 424:	movg @56 // @std.os.gui#_GUI
        [0x1a9] 425:	movn #11
        [0x1aa] 426:	popobj
        [0x1ab] 427:	movn #2
        [0x1ac] 428:	movi #0, adx
        [0x1ae] 430:	loadval ecx
        [0x1af] 431:	rmov adx, ecx
        [0x1b0] 432:	newstr @11 // "gui_msg"
        [0x1b1] 433:	movg @56 // @std.os.gui#_GUI
        [0x1b2] 434:	movn #11
        [0x1b3] 435:	movn #1
        [0x1b4] 436:	popobj
        [0x1b5] 437:	movi #7, ebx
        [0x1b7] 439:	nop
        [0x1b8] 440:	rstore ebx
        [0x1b9] 441:	new_class @56 // std.os.gui#_GUI
        [0x1ba] 442:	call @76 // <std#Enum.Enum()>
        [0x1bb] 443:	movg @56 // @std.os.gui#_GUI
        [0x1bc] 444:	movn #10
        [0x1bd] 445:	popobj
        [0x1be] 446:	movn #2
        [0x1bf] 447:	movi #0, adx
        [0x1c1] 449:	loadval ecx
        [0x1c2] 450:	rmov adx, ecx
        [0x1c3] 451:	newstr @10 // "gui_dsp"
        [0x1c4] 452:	movg @56 // @std.os.gui#_GUI
        [0x1c5] 453:	movn #10
        [0x1c6] 454:	movn #1
        [0x1c7] 455:	popobj
        [0x1c8] 456:	movi #6, ebx
        [0x1ca] 458:	nop
        [0x1cb] 459:	rstore ebx
        [0x1cc] 460:	new_class @56 // std.os.gui#_GUI
        [0x1cd] 461:	call @76 // <std#Enum.Enum()>
        [0x1ce] 462:	movg @56 // @std.os.gui#_GUI
        [0x1cf] 463:	movn #9
        [0x1d0] 464:	popobj
        [0x1d1] 465:	movn #2
        [0x1d2] 466:	movi #0, adx
        [0x1d4] 468:	loadval ecx
        [0x1d5] 469:	rmov adx, ecx
        [0x1d6] 470:	newstr @9 // "gui_upd"
        [0x1d7] 471:	movg @56 // @std.os.gui#_GUI
        [0x1d8] 472:	movn #9
        [0x1d9] 473:	movn #1
        [0x1da] 474:	popobj
        [0x1db] 475:	movi #5, ebx
        [0x1dd] 477:	nop
        [0x1de] 478:	rstore ebx
        [0x1df] 479:	new_class @56 // std.os.gui#_GUI
        [0x1e0] 480:	call @76 // <std#Enum.Enum()>
        [0x1e1] 481:	movg @56 // @std.os.gui#_GUI
        [0x1e2] 482:	movn #8
        [0x1e3] 483:	popobj
        [0x1e4] 484:	movn #2
        [0x1e5] 485:	movi #0, adx
        [0x1e7] 487:	loadval ecx
        [0x1e8] 488:	rmov adx, ecx
        [0x1e9] 489:	newstr @8 // "gui_show"
        [0x1ea] 490:	movg @56 // @std.os.gui#_GUI
        [0x1eb] 491:	movn #8
        [0x1ec] 492:	movn #1
        [0x1ed] 493:	popobj
        [0x1ee] 494:	movi #4, ebx
        [0x1f0] 496:	nop
        [0x1f1] 497:	rstore ebx
        [0x1f2] 498:	new_class @56 // std.os.gui#_GUI
        [0x1f3] 499:	call @76 // <std#Enum.Enum()>
        [0x1f4] 500:	movg @56 // @std.os.gui#_GUI
        [0x1f5] 501:	movn #7
        [0x1f6] 502:	popobj
        [0x1f7] 503:	movn #2
        [0x1f8] 504:	movi #0, adx
        [0x1fa] 506:	loadval ecx
        [0x1fb] 507:	rmov adx, ecx
        [0x1fc] 508:	newstr @7 // "gui_dwnd"
        [0x1fd] 509:	movg @56 // @std.os.gui#_GUI
        [0x1fe] 510:	movn #7
        [0x1ff] 511:	movn #1
        [0x200] 512:	popobj
        [0x201] 513:	movi #3, ebx
        [0x203] 515:	nop
        [0x204] 516:	rstore ebx
        [0x205] 517:	new_class @56 // std.os.gui#_GUI
        [0x206] 518:	call @76 // <std#Enum.Enum()>
        [0x207] 519:	movg @56 // @std.os.gui#_GUI
        [0x208] 520:	movn #6
        [0x209] 521:	popobj
        [0x20a] 522:	movn #2
        [0x20b] 523:	movi #0, adx
        [0x20d] 525:	loadval ecx
        [0x20e] 526:	rmov adx, ecx
        [0x20f] 527:	newstr @6 // "gui_ctx"
        [0x210] 528:	movg @56 // @std.os.gui#_GUI
        [0x211] 529:	movn #6
        [0x212] 530:	movn #1
        [0x213] 531:	popobj
        [0x214] 532:	movi #2, ebx
        [0x216] 534:	nop
        [0x217] 535:	rstore ebx
        [0x218] 536:	new_class @56 // std.os.gui#_GUI
        [0x219] 537:	call @76 // <std#Enum.Enum()>
        [0x21a] 538:	movg @56 // @std.os.gui#_GUI
        [0x21b] 539:	movn #5
        [0x21c] 540:	popobj
        [0x21d] 541:	movn #2
        [0x21e] 542:	movi #0, adx
        [0x220] 544:	loadval ecx
        [0x221] 545:	rmov adx, ecx
        [0x222] 546:	newstr @5 // "gui_set_ctx"
        [0x223] 547:	movg @56 // @std.os.gui#_GUI
        [0x224] 548:	movn #5
        [0x225] 549:	movn #1
        [0x226] 550:	popobj
        [0x227] 551:	movi #1, ebx
        [0x229] 553:	nop
        [0x22a] 554:	rstore ebx
        [0x22b] 555:	new_class @56 // std.os.gui#_GUI
        [0x22c] 556:	call @76 // <std#Enum.Enum()>
        [0x22d] 557:	movg @56 // @std.os.gui#_GUI
        [0x22e] 558:	movn #4
        [0x22f] 559:	popobj
        [0x230] 560:	movn #2
        [0x231] 561:	movi #0, adx
        [0x233] 563:	loadval ecx
        [0x234] 564:	rmov adx, ecx
        [0x235] 565:	newstr @4 // "gui_paint"
        [0x236] 566:	movg @56 // @std.os.gui#_GUI
        [0x237] 567:	movn #4
        [0x238] 568:	movn #1
        [0x239] 569:	popobj
        [0x23a] 570:	movi #0, ebx
        [0x23c] 572:	nop
        [0x23d] 573:	rstore ebx
        [0x23e] 574:	new_class @56 // std.os.gui#_GUI
        [0x23f] 575:	call @76 // <std#Enum.Enum()>
        [0x240] 576:	movg @56 // @std.os.gui#_GUI
        [0x241] 577:	movn #3
        [0x242] 578:	popobj
        [0x243] 579:	movn #2
        [0x244] 580:	movi #0, adx
        [0x246] 582:	loadval ecx
        [0x247] 583:	rmov adx, ecx
        [0x248] 584:	newstr @3 // "gui_quit"
        [0x249] 585:	movg @56 // @std.os.gui#_GUI
        [0x24a] 586:	movn #3
        [0x24b] 587:	movn #1
        [0x24c] 588:	popobj
        [0x24d] 589:	movi #2, ebx
        [0x24f] 591:	nop
        [0x250] 592:	rstore ebx
        [0x251] 593:	new_class @55 // std.kernel#TimeUnit
        [0x252] 594:	call @76 // <std#Enum.Enum()>
        [0x253] 595:	movg @55 // @std.kernel#TimeUnit
        [0x254] 596:	movn #5
        [0x255] 597:	popobj
        [0x256] 598:	movn #2
        [0x257] 599:	movi #0, adx
        [0x259] 601:	loadval ecx
        [0x25a] 602:	rmov adx, ecx
        [0x25b] 603:	newstr @2 // "MICROSECONDS"
        [0x25c] 604:	movg @55 // @std.kernel#TimeUnit
        [0x25d] 605:	movn #5
        [0x25e] 606:	movn #1
        [0x25f] 607:	popobj
        [0x260] 608:	movi #1, ebx
        [0x262] 610:	nop
        [0x263] 611:	rstore ebx
        [0x264] 612:	new_class @55 // std.kernel#TimeUnit
        [0x265] 613:	call @76 // <std#Enum.Enum()>
        [0x266] 614:	movg @55 // @std.kernel#TimeUnit
        [0x267] 615:	movn #4
        [0x268] 616:	popobj
        [0x269] 617:	movn #2
        [0x26a] 618:	movi #0, adx
        [0x26c] 620:	loadval ecx
        [0x26d] 621:	rmov adx, ecx
        [0x26e] 622:	newstr @1 // "MILLISECONDS"
        [0x26f] 623:	movg @55 // @std.kernel#TimeUnit
        [0x270] 624:	movn #4
        [0x271] 625:	movn #1
        [0x272] 626:	popobj
        [0x273] 627:	movi #0, ebx
        [0x275] 629:	nop
        [0x276] 630:	rstore ebx
        [0x277] 631:	new_class @55 // std.kernel#TimeUnit
        [0x278] 632:	call @76 // <std#Enum.Enum()>
        [0x279] 633:	movg @55 // @std.kernel#TimeUnit
        [0x27a] 634:	movn #3
        [0x27b] 635:	popobj
        [0x27c] 636:	movn #2
        [0x27d] 637:	movi #0, adx
        [0x27f] 639:	loadval ecx
        [0x280] 640:	rmov adx, ecx
        [0x281] 641:	newstr @0 // "SECONDS"
        [0x282] 642:	movg @55 // @std.kernel#TimeUnit
        [0x283] 643:	movn #3
        [0x284] 644:	movn #1
        [0x285] 645:	popobj
        [0x286] 646:	movi #0, ebx
        [0x288] 648:	new_classarray ebx  // std.kernel#TimeUnit[]
        [0x289] 649:	movg @55 // @std.kernel#TimeUnit
        [0x28a] 650:	movn #0
        [0x28b] 651:	popobj
        [0x28c] 652:	movi #6, ebx
        [0x28e] 654:	new_classarray ebx  // std.os.gui#_GUI[]
        [0x28f] 655:	movg @56 // @std.os.gui#_GUI
        [0x290] 656:	movn #6
        [0x291] 657:	pushobj
        [0x292] 658:	movsl #-1
        [0x293] 659:	movn #0
        [0x294] 660:	popobj
        [0x295] 661:	movg @56 // @std.os.gui#_GUI
        [0x296] 662:	movn #7
        [0x297] 663:	pushobj
        [0x298] 664:	movsl #-1
        [0x299] 665:	movn #1
        [0x29a] 666:	popobj
        [0x29b] 667:	movg @56 // @std.os.gui#_GUI
        [0x29c] 668:	movn #8
        [0x29d] 669:	pushobj
        [0x29e] 670:	movsl #-1
        [0x29f] 671:	movn #2
        [0x2a0] 672:	popobj
        [0x2a1] 673:	movg @56 // @std.os.gui#_GUI
        [0x2a2] 674:	movn #9
        [0x2a3] 675:	pushobj
        [0x2a4] 676:	movsl #-1
        [0x2a5] 677:	movn #3
        [0x2a6] 678:	popobj
        [0x2a7] 679:	movg @56 // @std.os.gui#_GUI
        [0x2a8] 680:	movn #10
        [0x2a9] 681:	pushobj
        [0x2aa] 682:	movsl #-1
        [0x2ab] 683:	movn #4
        [0x2ac] 684:	popobj
        [0x2ad] 685:	movg @56 // @std.os.gui#_GUI
        [0x2ae] 686:	movn #11
        [0x2af] 687:	pushobj
        [0x2b0] 688:	movsl #-1
        [0x2b1] 689:	movn #5
        [0x2b2] 690:	popobj
        [0x2b3] 691:	movg @56 // @std.os.gui#_GUI
        [0x2b4] 692:	movn #0
        [0x2b5] 693:	popobj
        [0x2b6] 694:	movi #12, ebx
        [0x2b8] 696:	new_classarray ebx  // std.os.gui#_PAINT[]
        [0x2b9] 697:	movg @57 // @std.os.gui#_PAINT
        [0x2ba] 698:	movn #6
        [0x2bb] 699:	pushobj
        [0x2bc] 700:	movsl #-1
        [0x2bd] 701:	movn #0
        [0x2be] 702:	popobj
        [0x2bf] 703:	movg @57 // @std.os.gui#_PAINT
        [0x2c0] 704:	movn #7
        [0x2c1] 705:	pushobj
        [0x2c2] 706:	movsl #-1
        [0x2c3] 707:	movn #1
        [0x2c4] 708:	popobj
        [0x2c5] 709:	movg @57 // @std.os.gui#_PAINT
        [0x2c6] 710:	movn #8
        [0x2c7] 711:	pushobj
        [0x2c8] 712:	movsl #-1
        [0x2c9] 713:	movn #2
        [0x2ca] 714:	popobj
        [0x2cb] 715:	movg @57 // @std.os.gui#_PAINT
        [0x2cc] 716:	movn #9
        [0x2cd] 717:	pushobj
        [0x2ce] 718:	movsl #-1
        [0x2cf] 719:	movn #3
        [0x2d0] 720:	popobj
        [0x2d1] 721:	movg @57 // @std.os.gui#_PAINT
        [0x2d2] 722:	movn #10
        [0x2d3] 723:	pushobj
        [0x2d4] 724:	movsl #-1
        [0x2d5] 725:	movn #4
        [0x2d6] 726:	popobj
        [0x2d7] 727:	movg @57 // @std.os.gui#_PAINT
        [0x2d8] 728:	movn #11
        [0x2d9] 729:	pushobj
        [0x2da] 730:	movsl #-1
        [0x2db] 731:	movn #5
        [0x2dc] 732:	popobj
        [0x2dd] 733:	movg @57 // @std.os.gui#_PAINT
        [0x2de] 734:	movn #12
        [0x2df] 735:	pushobj
        [0x2e0] 736:	movsl #-1
        [0x2e1] 737:	movn #6
        [0x2e2] 738:	popobj
        [0x2e3] 739:	movg @57 // @std.os.gui#_PAINT
        [0x2e4] 740:	movn #13
        [0x2e5] 741:	pushobj
        [0x2e6] 742:	movsl #-1
        [0x2e7] 743:	movn #7
        [0x2e8] 744:	popobj
        [0x2e9] 745:	movg @57 // @std.os.gui#_PAINT
        [0x2ea] 746:	movn #14
        [0x2eb] 747:	pushobj
        [0x2ec] 748:	movsl #-1
        [0x2ed] 749:	movn #8
        [0x2ee] 750:	popobj
        [0x2ef] 751:	movg @57 // @std.os.gui#_PAINT
        [0x2f0] 752:	movn #15
        [0x2f1] 753:	pushobj
        [0x2f2] 754:	movsl #-1
        [0x2f3] 755:	movn #9
        [0x2f4] 756:	popobj
        [0x2f5] 757:	movg @57 // @std.os.gui#_PAINT
        [0x2f6] 758:	movn #16
        [0x2f7] 759:	pushobj
        [0x2f8] 760:	movsl #-1
        [0x2f9] 761:	movn #10
        [0x2fa] 762:	popobj
        [0x2fb] 763:	movg @57 // @std.os.gui#_PAINT
        [0x2fc] 764:	movn #17
        [0x2fd] 765:	pushobj
        [0x2fe] 766:	movsl #-1
        [0x2ff] 767:	movn #11
        [0x300] 768:	popobj
        [0x301] 769:	movg @57 // @std.os.gui#_PAINT
        [0x302] 770:	movn #0
        [0x303] 771:	popobj
        [0x304] 772:	movi #4, ebx
        [0x306] 774:	new_classarray ebx  // std.os.gui#PaintStyle[]
        [0x307] 775:	movg @58 // @std.os.gui#PaintStyle
        [0x308] 776:	movn #6
        [0x309] 777:	pushobj
        [0x30a] 778:	movsl #-1
        [0x30b] 779:	movn #0
        [0x30c] 780:	popobj
        [0x30d] 781:	movg @58 // @std.os.gui#PaintStyle
        [0x30e] 782:	movn #7
        [0x30f] 783:	pushobj
        [0x310] 784:	movsl #-1
        [0x311] 785:	movn #1
        [0x312] 786:	popobj
        [0x313] 787:	movg @58 // @std.os.gui#PaintStyle
        [0x314] 788:	movn #8
        [0x315] 789:	pushobj
        [0x316] 790:	movsl #-1
        [0x317] 791:	movn #2
        [0x318] 792:	popobj
        [0x319] 793:	movg @58 // @std.os.gui#PaintStyle
        [0x31a] 794:	movn #9
        [0x31b] 795:	pushobj
        [0x31c] 796:	movsl #-1
        [0x31d] 797:	movn #3
        [0x31e] 798:	popobj
        [0x31f] 799:	movg @58 // @std.os.gui#PaintStyle
        [0x320] 800:	movn #0
        [0x321] 801:	popobj
        [0x322] 802:	movi #-36028797018963968, ebx
        [0x324] 804:	nop
        [0x325] 805:	rstore ebx
        [0x326] 806:	movg @15 // @std#integer
        [0x327] 807:	movn #1
        [0x328] 808:	movi #0, adx
        [0x32a] 810:	loadval ecx
        [0x32b] 811:	rmov adx, ecx
        [0x32c] 812:	call @163 // <std.io#File.getFileSystem()>
        [0x32d] 813:	movg @17 // @std.io#File
        [0x32e] 814:	movn #0
        [0x32f] 815:	popobj
        [0x330] 816:	movg @17 // @std.io#File
        [0x331] 817:	movn #0
        [0x332] 818:	pushobj
        [0x333] 819:	invoke_delegate 0, 0
        [0x334] 820:	nop
        [0x335] 821:	movg @17 // @std.io#File
        [0x336] 822:	movn #2
        [0x337] 823:	movi #0, adx
        [0x339] 825:	loadval ecx
        [0x33a] 826:	rmov adx, ecx
        [0x33b] 827:	new_class @47 // std#string
        [0x33c] 828:	newstr @34 // ""
        [0x33d] 829:	call @553 // <std#string.string(var[])>
        [0x33e] 830:	movi #1, ebx
        [0x340] 832:	newarry ebx
        [0x341] 833:	movg @17 // @std.io#File
        [0x342] 834:	movn #2
        [0x343] 835:	movi #0, adx
        [0x345] 837:	iaload_2 ebx, adx
        [0x346] 838:	movsl #0
        [0x347] 839:	rmov adx, ebx
        [0x348] 840:	call @566 // <std#string.$operator+(var[])>
        [0x349] 841:	movg @17 // @std.io#File
        [0x34a] 842:	movn #3
        [0x34b] 843:	popobj
        [0x34c] 844:	movi #1, ebx
        [0x34e] 846:	nop
        [0x34f] 847:	rstore ebx
        [0x350] 848:	movg @20 // @std.io#IOStream
        [0x351] 849:	movn #4
        [0x352] 850:	movi #0, adx
        [0x354] 852:	loadval ecx
        [0x355] 853:	rmov adx, ecx
        [0x356] 854:	movi #0, ebx
        [0x358] 856:	nop
        [0x359] 857:	rstore ebx
        [0x35a] 858:	movg @20 // @std.io#IOStream
        [0x35b] 859:	movn #5
        [0x35c] 860:	movi #0, adx
        [0x35e] 862:	loadval ecx
        [0x35f] 863:	rmov adx, ecx
        [0x360] 864:	movi #512, ebx
        [0x362] 866:	nop
        [0x363] 867:	rstore ebx
        [0x364] 868:	movg @22 // @std.io#StreamBuffer
        [0x365] 869:	movn #0
        [0x366] 870:	movi #0, adx
        [0x368] 872:	loadval ecx
        [0x369] 873:	rmov adx, ecx
        [0x36a] 874:	movi #128, ebx
        [0x36c] 876:	nop
        [0x36d] 877:	rstore ebx
        [0x36e] 878:	movg @22 // @std.io#StreamBuffer
        [0x36f] 879:	movn #1
        [0x370] 880:	movi #0, adx
        [0x372] 882:	loadval ecx
        [0x373] 883:	rmov adx, ecx
        [0x374] 884:	new_class @59 // std#ArrayList<std.io#Thread>
        [0x375] 885:	call @769 // <std#ArrayList<std.io#Thread>.ArrayList()>
        [0x376] 886:	movg @23 // @std.io#Thread
        [0x377] 887:	movn #3
        [0x378] 888:	popobj
        [0x379] 889:	movi #4, ebx
        [0x37b] 891:	nop
        [0x37c] 892:	rstore ebx
        [0x37d] 893:	movg @31 // @std.kernel#Runtime
        [0x37e] 894:	movn #0
        [0x37f] 895:	movi #0, adx
        [0x381] 897:	loadval ecx
        [0x382] 898:	rmov adx, ecx
        [0x383] 899:	movg @31 // @std.kernel#Runtime
        [0x384] 900:	movn #1
        [0x385] 901:	del
        [0x386] 902:	new_class @39 // std.os.gui#Message
        [0x387] 903:	call @444 // <std.os.gui#Message.Message()>
        [0x388] 904:	movg @6 // @std.os.gui#__SRT_Global
        [0x389] 905:	movn #0
        [0x38a] 906:	popobj
        [0x38b] 907:	movi #103, ebx
        [0x38d] 909:	nop
        [0x38e] 910:	rstore ebx
        [0x38f] 911:	movg @46 // @std#strbuf
        [0x390] 912:	movn #5
        [0x391] 913:	movi #0, adx
        [0x393] 915:	loadval ecx
        [0x394] 916:	rmov adx, ecx
        [0x395] 917:	movi #0, ebx
        [0x397] 919:	nop
        [0x398] 920:	rstore ebx
        [0x399] 921:	movg @46 // @std#strbuf
        [0x39a] 922:	movn #6
        [0x39b] 923:	movi #0, adx
        [0x39d] 925:	loadval ecx
        [0x39e] 926:	rmov adx, ecx
        [0x39f] 927:	movi #103, ebx
        [0x3a1] 929:	nop
        [0x3a2] 930:	rstore ebx
        [0x3a3] 931:	movg @47 // @std#string
        [0x3a4] 932:	movn #1
        [0x3a5] 933:	movi #0, adx
        [0x3a7] 935:	loadval ecx
        [0x3a8] 936:	rmov adx, ecx
        [0x3a9] 937:	movi #0, ebx
        [0x3ab] 939:	nop
        [0x3ac] 940:	rstore ebx
        [0x3ad] 941:	movg @47 // @std#string
        [0x3ae] 942:	movn #2
        [0x3af] 943:	movi #0, adx
        [0x3b1] 945:	loadval ecx
        [0x3b2] 946:	rmov adx, ecx
        [0x3b3] 947:	new_class @29 // std.kernel#ConsoleHandler
        [0x3b4] 948:	call @290 // <std.kernel#ConsoleHandler.ConsoleHandler()>
        [0x3b5] 949:	movg @1 // @std#__SRT_Global
        [0x3b6] 950:	movn #0
        [0x3b7] 951:	popobj
        [0x3b8] 952:	movg @31 // @std.kernel#Runtime
        [0x3b9] 953:	movn #3
        [0x3ba] 954:	movi #0, adx
        [0x3bc] 956:	movi #7, ebx
        [0x3be] 958:	rmov adx, ebx
        [0x3bf] 959:	ret

func:@302 [std.kernel#Runtime.initializeTLS] in file: lib/support/0.2.422//kernel//Runtime.sharp:41:36: note:  
		    public static def initializeTLS() {
		                                   ^


initializeTLS:
        [0x0] 0:	ret

func:@303 [std.kernel#Runtime.__srt_init_] in file: lib/support/0.2.422//kernel//Runtime.sharp:59:34: note:  
		    public static def __srt_init_(object[] args) : var {
		                                 ^


__srt_init_:
line: 60 [0x0] 0:	new_class @47 // std#string
         [0x1] 1:	newstr @34 // ""
         [0x2] 2:	call @553 // <std#string.string(var[])>
         [0x3] 3:	movl 0
         [0x4] 4:	movi #0, ebx
         [0x6] 6:	movnd ebx
         [0x7] 7:	vcast 1
         [0x8] 8:	pushobj
         [0x9] 9:	call @566 // <std#string.$operator+(var[])>
         [0xa] 10:	movg @30 // @std.kernel#Manifest
         [0xb] 11:	movn #1
         [0xc] 12:	popobj
line: 61 [0xd] 13:	new_class @47 // std#string
         [0xe] 14:	newstr @34 // ""
         [0xf] 15:	call @553 // <std#string.string(var[])>
         [0x10] 16:	movl 0
         [0x11] 17:	movi #1, ebx
         [0x13] 19:	movnd ebx
         [0x14] 20:	vcast 1
         [0x15] 21:	pushobj
         [0x16] 22:	call @566 // <std#string.$operator+(var[])>
         [0x17] 23:	movg @30 // @std.kernel#Manifest
         [0x18] 24:	movn #3
         [0x19] 25:	popobj
line: 62 [0x1a] 26:	new_class @47 // std#string
         [0x1b] 27:	newstr @34 // ""
         [0x1c] 28:	call @553 // <std#string.string(var[])>
         [0x1d] 29:	movl 0
         [0x1e] 30:	movi #2, ebx
         [0x20] 32:	movnd ebx
         [0x21] 33:	vcast 1
         [0x22] 34:	pushobj
         [0x23] 35:	call @566 // <std#string.$operator+(var[])>
         [0x24] 36:	movg @30 // @std.kernel#Manifest
         [0x25] 37:	movn #2
         [0x26] 38:	popobj
line: 63 [0x27] 39:	new_class @47 // std#string
         [0x28] 40:	newstr @34 // ""
         [0x29] 41:	call @553 // <std#string.string(var[])>
         [0x2a] 42:	movl 0
         [0x2b] 43:	movi #3, ebx
         [0x2d] 45:	movnd ebx
         [0x2e] 46:	vcast 1
         [0x2f] 47:	pushobj
         [0x30] 48:	call @566 // <std#string.$operator+(var[])>
         [0x31] 49:	movg @30 // @std.kernel#Manifest
         [0x32] 50:	movn #0
         [0x33] 51:	popobj
line: 68 [0x34] 52:	call @301 // <std.kernel#Runtime.initializeRTE()>
line: 69 [0x35] 53:	call @302 // <std.kernel#Runtime.initializeTLS()>
line: 70 [0x36] 54:	call @240 // <std.io#Thread.setupMainThread()>
line: 71 [0x37] 55:	movg @31 // @std.kernel#Runtime
         [0x38] 56:	movn #0
         [0x39] 57:	movi #0, adx
         [0x3b] 59:	iaload_2 ebx, adx
         [0x3c] 60:	rstore ebx
         [0x3d] 61:	movl 0
         [0x3e] 62:	sizeof ebx
         [0x3f] 63:	loadval egx
         [0x40] 64:	sub ebx, egx -> ebx
         [0x42] 66:	new_classarray ebx  // std#string[]
         [0x43] 67:	movg @31 // @std.kernel#Runtime
         [0x44] 68:	movn #1
         [0x45] 69:	popobj
line: 79 [0x46] 70:	istorel 0, fp+1
line: 80 [0x48] 72:	movg @31 // @std.kernel#Runtime
         [0x49] 73:	movn #0
         [0x4a] 74:	iaload_2 ebx, adx
         [0x4b] 75:	smovr_2 ebx, fp+2
         [0x4c] 76:	movl 0
         [0x4d] 77:	sizeof egx
         [0x4e] 78:	loadl ebx, fp+2
         [0x4f] 79:	lt ebx, egx
         [0x50] 80:	jne 98
line: 81 [0x51] 81:	new_class @47 // std#string
         [0x52] 82:	movl 0
         [0x53] 83:	loadl ebx, fp+2
         [0x54] 84:	chklen ebx
         [0x55] 85:	movnd ebx
         [0x56] 86:	vcast 1
         [0x57] 87:	pushobj
         [0x58] 88:	call @553 // <std#string.string(var[])>
         [0x59] 89:	movg @31 // @std.kernel#Runtime
         [0x5a] 90:	movn #1
         [0x5b] 91:	loadl ebx, fp+1
         [0x5c] 92:	iaddl 1, @1
         [0x5d] 93:	chklen ebx
         [0x5e] 94:	movnd ebx
         [0x5f] 95:	popobj
         [0x60] 96:	iaddl 1, @2
         [0x61] 97:	goto @76
line: 84 [0x62] 98:	istorel 0, fp+3
line: 86 [0x64] 100:	movg @31 // @std.kernel#Runtime
         [0x65] 101:	movn #2
         [0x66] 102:	movi #0, adx
         [0x68] 104:	iaload_2 ebx, adx
         [0x69] 105:	rstore ebx
         [0x6a] 106:	movi #0, egx
         [0x6c] 108:	loadval ebx
         [0x6d] 109:	tne ebx, egx
         [0x6e] 110:	jne 128
line: 87 [0x6f] 111:	movg @31 // @std.kernel#Runtime
         [0x70] 112:	movn #1
         [0x71] 113:	pushobj
         [0x72] 114:	movg @31 // @std.kernel#Runtime
         [0x73] 115:	movn #2
         [0x74] 116:	movi #0, adx
         [0x76] 118:	iaload_2 ebx, adx
         [0x77] 119:	calld ebx
         [0x78] 120:	ipopl 3
line: 88 [0x79] 121:	new_class @47 // std#string
         [0x7a] 122:	newstr @52 // "\nProgram finished with exit code "
         [0x7b] 123:	call @553 // <std#string.string(var[])>
         [0x7c] 124:	ipushl #3
         [0x7d] 125:	call @573 // <std#string.$operator+(var)>
         [0x7e] 126:	call @595 // <std#__SRT_Global.print(std#string)>
         [0x7f] 127:	goto @156
         [0x80] 128:	movg @31 // @std.kernel#Runtime
         [0x81] 129:	movn #3
         [0x82] 130:	movi #0, adx
         [0x84] 132:	iaload_2 ebx, adx
         [0x85] 133:	rstore ebx
         [0x86] 134:	movi #0, egx
         [0x88] 136:	loadval ebx
         [0x89] 137:	tne ebx, egx
         [0x8a] 138:	jne 149
line: 90 [0x8b] 139:	movg @31 // @std.kernel#Runtime
         [0x8c] 140:	movn #1
         [0x8d] 141:	pushobj
         [0x8e] 142:	movg @31 // @std.kernel#Runtime
         [0x8f] 143:	movn #3
         [0x90] 144:	movi #0, adx
         [0x92] 146:	iaload_2 ebx, adx
         [0x93] 147:	calld ebx
         [0x94] 148:	goto @156
line: 92 [0x95] 149:	movg @31 // @std.kernel#Runtime
         [0x96] 150:	movn #4
         [0x97] 151:	movi #0, adx
         [0x99] 153:	iaload_2 ebx, adx
         [0x9a] 154:	calld ebx
         [0x9b] 155:	nop
         [0x9c] 156:	nop
line: 94 [0x9d] 157:	loadl ebx, fp+3
         [0x9e] 158:	return_val ebx
         [0x9f] 159:	ret

func:@304 [std.kernel#Runtime.nativeExit] in file: lib/support/0.2.422//kernel//Runtime.sharp:98:33: note:  
		    public static def nativeExit() {
		                                ^


nativeExit:
line: 98 [0x0] 0:	int 0xa9
         [0x1] 1:	ret

func:@305 [std.kernel#Runtime.gc] in file: lib/support/0.2.422//kernel//Runtime.sharp:104:25: note:  
		    public static def gc() {
		                        ^


gc:
line: 104 [0x0] 0:	int 0xa1
          [0x1] 1:	ret

func:@306 [std.kernel#Runtime.memoryLimit] in file: lib/support/0.2.422//kernel//Runtime.sharp:110:34: note:  
		    public static def memoryLimit() : var {
		                                 ^


memoryLimit:
line: 110 [0x0] 0:	istorel 0, fp+0
line: 112 [0x2] 2:	int 0xaa
          [0x3] 3:	smovr_2 cmt, fp+0
line: 115 [0x4] 4:	loadl ebx, fp+0
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@307 [std.kernel#Runtime.managedMemory] in file: lib/support/0.2.422//kernel//Runtime.sharp:119:36: note:  
		    public static def managedMemory() : var {
		                                   ^


managedMemory:
line: 119 [0x0] 0:	istorel 0, fp+0
line: 121 [0x2] 2:	int 0xab
          [0x3] 3:	smovr_2 cmt, fp+0
line: 124 [0x4] 4:	loadl ebx, fp+0
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@308 [std.kernel#Runtime.freeMemory] in file: lib/support/0.2.422//kernel//Runtime.sharp:128:33: note:  
		    public static def freeMemory() : var {
		                                ^


freeMemory:
line: 128 [0x0] 0:	call @307 // <std.kernel#Runtime.managedMemory()>
          [0x1] 1:	call @306 // <std.kernel#Runtime.memoryLimit()>
          [0x2] 2:	loadval ebx
          [0x3] 3:	loadval ecx
          [0x4] 4:	sub ebx, ecx -> ebx
          [0x6] 6:	return_val ebx
          [0x7] 7:	ret

func:@309 [std.kernel#Runtime.copy] in file: lib/support/0.2.422//kernel//Runtime.sharp:132:27: note:  
		    public static def copy(object[] data, var len) : object[] {
		                          ^


copy:
line: 132 [0x0] 0:	pushl 0
          [0x1] 1:	ipushl #1
          [0x2] 2:	int 0xc0
          [0x3] 3:	popl 0
          [0x4] 4:	ret

func:@310 [std.kernel#Runtime.copy2] in file: lib/support/0.2.422//kernel//Runtime.sharp:141:28: note:  
		    public static def copy2(object[] data, var indexLen, var len) : object[] {
		                           ^


copy2:
line: 141 [0x0] 0:	pushl 0
          [0x1] 1:	ipushl #1
          [0x2] 2:	ipushl #2
          [0x3] 3:	int 0xc1
          [0x4] 4:	popl 0
          [0x5] 5:	ret

func:@311 [std.kernel#Runtime.copy3] in file: lib/support/0.2.422//kernel//Runtime.sharp:151:28: note:  
		    public static def copy3(object[] data, var startIndex, var stopIndex) : object[] {
		                           ^


copy3:
line: 151 [0x0] 0:	pushl 0
          [0x1] 1:	ipushl #1
          [0x2] 2:	ipushl #2
          [0x3] 3:	int 0xc3
          [0x4] 4:	popl 0
          [0x5] 5:	ret

func:@312 [std.kernel#Runtime.copy4] in file: lib/support/0.2.422//kernel//Runtime.sharp:161:28: note:  
		    public static def copy4(object[] data, var startIndex, var stopIndex) : object[] {
		                           ^


copy4:
line: 161 [0x0] 0:	pushl 0
          [0x1] 1:	ipushl #1
          [0x2] 2:	ipushl #2
          [0x3] 3:	int 0xc4
          [0x4] 4:	popl 0
          [0x5] 5:	ret

func:@313 [std.kernel#Runtime.realloc] in file: lib/support/0.2.422//kernel//Runtime.sharp:171:30: note:  
		    public static def realloc(object[] data, var size) {
		                             ^


realloc:
line: 171 [0x0] 0:	pushl 0
          [0x1] 1:	ipushl #1
          [0x2] 2:	int 0xc6
          [0x3] 3:	ret

func:@314 [std.kernel#Runtime.sizeOf] in file: lib/support/0.2.422//kernel//Runtime.sharp:179:29: note:  
		    public static def sizeOf(object data) : var {
		                            ^


sizeOf:
line: 179 [0x0] 0:	pushl 0
line: 202 [0x1] 1:	int 0xc2
          [0x2] 2:	return_val ebx
          [0x3] 3:	ret
          [0x4] 4:	pushl 1
          [0x5] 5:	int 0xc2
          [0x6] 6:	return_val ebx
          [0x7] 7:	ret

func:@315 [std.kernel#Runtime._snprintf] in file: lib/support/0.2.422//kernel//Runtime.sharp:188:32: note:  
		    public static def _snprintf(var fmt, var data, var precision) : var[] {
		                               ^


_snprintf:
line: 188 [0x0] 0:	movl 3
          [0x1] 1:	del
line: 189 [0x2] 2:	loadl egx, fp+0
          [0x3] 3:	loadl ebx, fp+1
          [0x4] 4:	loadl ecx, fp+2
          [0x5] 5:	int 0xc7
          [0x6] 6:	popl 3
          [0x7] 7:	movl 3
line: 197 [0x8] 8:	returnobj
          [0x9] 9:	ret

func:@316 [std.kernel#Runtime.sizeOf] in file: lib/support/0.2.422//kernel//Runtime.sharp:202:29: note:  
		    public static def sizeOf(object[] data) : var {
		                            ^


sizeOf:
        [0x0] 0:	movi #0, ebx
        [0x2] 2:	return_val ebx
        [0x3] 3:	ret

func:@317 [std.kernel#Runtime.sedateGc] in file: lib/support/0.2.422//kernel//Runtime.sharp:212:31: note:  
		    public static def sedateGc() {
		                              ^


sedateGc:
line: 212 [0x0] 0:	int 0xf1
          [0x1] 1:	ret

func:@318 [std.kernel#Runtime.selfCollect] in file: lib/support/0.2.422//kernel//Runtime.sharp:219:34: note:  
		    public static def selfCollect() : var {
		                                 ^


selfCollect:
line: 219 [0x0] 0:	int 0xf0
          [0x1] 1:	return_val cmt
          [0x2] 2:	ret

func:@319 [std.kernel#Runtime.wakeGc] in file: lib/support/0.2.422//kernel//Runtime.sharp:227:29: note:  
		    public static def wakeGc() {
		                            ^


wakeGc:
line: 227 [0x0] 0:	int 0xf2
          [0x1] 1:	ret

func:@320 [std.kernel#Runtime.killGc] in file: lib/support/0.2.422//kernel//Runtime.sharp:234:29: note:  
		    public static def killGc() {
		                            ^


killGc:
line: 234 [0x0] 0:	int 0xf3
          [0x1] 1:	ret

func:@321 [std.kernel#Runtime.isGcAwake] in file: lib/support/0.2.422//kernel//Runtime.sharp:241:32: note:  
		    public static def isGcAwake() : var {
		                               ^


isGcAwake:
line: 241 [0x0] 0:	int 0xf4
          [0x1] 1:	return_val cmt
          [0x2] 2:	ret

func:@322 [std.kernel#Runtime.Runtime] in file: lib/support/0.2.422//kernel//Runtime.sharp:14:13: note:  
		public class Runtime { // TODO: implement hashMap "https://www.geeksforgeeks.org/implementing-hash-table-open-addressing-linear-probing-cpp/"
		            ^


Runtime:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@323 [std.kernel.vm#ThreadCore.__thread_create] in file: lib/support/0.2.422//kernel//ThreadCore.sharp:12:38: note:  
		    public static def __thread_create(Thread thread) : var
		                                     ^


__thread_create:
line: 13 [0x0] 0:	movi #334, ebx
         [0x2] 2:	smovr_2 ebx, fp+1
line: 15 [0x3] 3:	loadl adx, fp+1
         [0x4] 4:	int 0xa8
         [0x5] 5:	return_val cmt
         [0x6] 6:	ret

func:@324 [std.kernel.vm#ThreadCore.__thread_start] in file: lib/support/0.2.422//kernel//ThreadCore.sharp:24:37: note:  
		    public static def __thread_start(Thread thread, object[] args) : var
		                                    ^


__thread_start:
line: 25 [0x0] 0:	pushl 0
         [0x1] 1:	call @230 // <std.io#Thread.getId()>
         [0x2] 2:	ipopl 2
line: 26 [0x3] 3:	pushl 0
         [0x4] 4:	call @231 // <std.io#Thread.getStackSize()>
         [0x5] 5:	ipopl 3
line: 28 [0x6] 6:	loadl adx, fp+2
         [0x7] 7:	pushl 1
         [0x8] 8:	pushl 0
         [0x9] 9:	loadl ebx, fp+3
         [0xa] 10:	int 0xa4
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@325 [std.kernel.vm#ThreadCore.__thread_join] in file: lib/support/0.2.422//kernel//ThreadCore.sharp:40:36: note:  
		    public static def __thread_join(Thread thread) : var
		                                   ^


__thread_join:
line: 41 [0x0] 0:	pushl 0
         [0x1] 1:	call @230 // <std.io#Thread.getId()>
         [0x2] 2:	ipopl 1
line: 43 [0x3] 3:	loadl adx, fp+1
         [0x4] 4:	int 0xa5
         [0x5] 5:	return_val cmt
         [0x6] 6:	ret

func:@326 [std.kernel.vm#ThreadCore.__thread_set_thread] in file: lib/support/0.2.422//kernel//ThreadCore.sharp:52:42: note:  
		    public static def __thread_set_thread(Thread thread)
		                                         ^


__thread_set_thread:
line: 53 [0x0] 0:	pushl 0
         [0x1] 1:	int 0xe2
         [0x2] 2:	ret

func:@327 [std.kernel.vm#ThreadCore.__thread_priority] in file: lib/support/0.2.422//kernel//ThreadCore.sharp:62:40: note:  
		    public static def __thread_priority(Thread thread, var priority) : var
		                                       ^


__thread_priority:
line: 63 [0x0] 0:	pushl 0
         [0x1] 1:	call @230 // <std.io#Thread.getId()>
         [0x2] 2:	ipopl 2
line: 65 [0x3] 3:	loadl adx, fp+2
         [0x4] 4:	loadl egx, fp+1
         [0x5] 5:	int 0xe2
         [0x6] 6:	return_val cmt
         [0x7] 7:	ret

func:@328 [std.kernel.vm#ThreadCore.__thread_yield] in file: lib/support/0.2.422//kernel//ThreadCore.sharp:75:37: note:  
		    public static def __thread_yield()
		                                    ^


__thread_yield:
line: 76 [0x0] 0:	int 0xe5
         [0x1] 1:	ret

func:@329 [std.kernel.vm#ThreadCore.__thread_interrupt] in file: lib/support/0.2.422//kernel//ThreadCore.sharp:83:41: note:  
		    public static def __thread_interrupt(Thread thread) : var
		                                        ^


__thread_interrupt:
line: 84 [0x0] 0:	pushl 0
         [0x1] 1:	call @230 // <std.io#Thread.getId()>
         [0x2] 2:	ipopl 1
         [0x3] 3:	istorel 0, fp+2
line: 86 [0x5] 5:	loadl adx, fp+1
         [0x6] 6:	int 0xa6
         [0x7] 7:	smovr_2 cmt, fp+2
line: 92 [0x8] 8:	ipushl #2
         [0x9] 9:	movi #0, egx
         [0xb] 11:	loadval ebx
         [0xc] 12:	test ebx, egx
         [0xd] 13:	jne 21
line: 93 [0xe] 14:	pushl 0
         [0xf] 15:	istore 0
         [0x10] 16:	call @236 // <std.io#Thread.setStarted(var)>
line: 94 [0x11] 17:	pushl 0
         [0x12] 18:	istore 1
         [0x13] 19:	call @233 // <std.io#Thread.setExited(var)>
         [0x14] 20:	nop
         [0x15] 21:	nop
line: 97 [0x16] 22:	loadl ebx, fp+2
         [0x17] 23:	return_val ebx
         [0x18] 24:	ret

func:@330 [std.kernel.vm#ThreadCore.__thread_destroy] in file: lib/support/0.2.422//kernel//ThreadCore.sharp:101:39: note:  
		    public static def __thread_destroy(Thread thread) : var
		                                      ^


__thread_destroy:
line: 102 [0x0] 0:	pushl 0
          [0x1] 1:	call @230 // <std.io#Thread.getId()>
          [0x2] 2:	ipopl 1
          [0x3] 3:	istorel 0, fp+2
line: 104 [0x5] 5:	loadl adx, fp+1
          [0x6] 6:	int 0xa7
          [0x7] 7:	smovr_2 cmt, fp+2
line: 110 [0x8] 8:	ipushl #2
          [0x9] 9:	movi #0, egx
          [0xb] 11:	loadval ebx
          [0xc] 12:	test ebx, egx
          [0xd] 13:	jne 21
line: 111 [0xe] 14:	pushl 0
          [0xf] 15:	istore 1
          [0x10] 16:	call @238 // <std.io#Thread.setTerminated(var)>
line: 112 [0x11] 17:	pushl 0
          [0x12] 18:	istore 1
          [0x13] 19:	call @233 // <std.io#Thread.setExited(var)>
          [0x14] 20:	nop
          [0x15] 21:	nop
line: 115 [0x16] 22:	loadl ebx, fp+2
          [0x17] 23:	return_val ebx
          [0x18] 24:	ret

func:@331 [std.kernel.vm#ThreadCore.__thread_current] in file: lib/support/0.2.422//kernel//ThreadCore.sharp:119:39: note:  
		    public static def __thread_current() : Thread
		                                      ^


__thread_current:
line: 120 [0x0] 0:	movl 0
          [0x1] 1:	del
line: 122 [0x2] 2:	int 0xe0
          [0x3] 3:	popl 0
          [0x4] 4:	movl 0
line: 128 [0x5] 5:	movi #23, cmt
          [0x7] 7:	cast cmt
          [0x8] 8:	returnobj
          [0x9] 9:	ret

func:@332 [std.kernel.vm#ThreadCore.__thread_args] in file: lib/support/0.2.422//kernel//ThreadCore.sharp:132:37: note:  
		    private static def __thread_args() : object[]
		                                    ^


__thread_args:
line: 133 [0x0] 0:	movl 0
          [0x1] 1:	del
line: 135 [0x2] 2:	int 0xe1
          [0x3] 3:	popl 0
          [0x4] 4:	movl 0
line: 141 [0x5] 5:	returnobj
          [0x6] 6:	ret

func:@333 [std.kernel.vm#ThreadCore.__thread_exit] in file: lib/support/0.2.422//kernel//ThreadCore.sharp:145:36: note:  
		    public static def __thread_exit(Thread thread, var code)
		                                   ^


__thread_exit:
line: 146 [0x0] 0:	pushl 0
          [0x1] 1:	istore 0
          [0x2] 2:	call @236 // <std.io#Thread.setStarted(var)>
line: 147 [0x3] 3:	pushl 0
          [0x4] 4:	istore 1
          [0x5] 5:	call @233 // <std.io#Thread.setExited(var)>
line: 148 [0x6] 6:	loadl ebx, fp+1
          [0x7] 7:	nop
          [0x8] 8:	rstore ebx
          [0x9] 9:	movl 0
          [0xa] 10:	movn #4
          [0xb] 11:	movi #0, adx
          [0xd] 13:	loadval ecx
          [0xe] 14:	rmov adx, ecx
line: 150 [0xf] 15:	hlt
          [0x10] 16:	ret

func:@334 [std.kernel.vm#ThreadCore.__thread_init_run] in file: lib/support/0.2.422//kernel//ThreadCore.sharp:160:41: note:  
		    private static def __thread_init_run()
		                                        ^


__thread_init_run:
line: 161 [0x0] 0:	call @331 // <std.kernel.vm#ThreadCore.__thread_current()>
          [0x1] 1:	popl 0
          [0x2] 2:	pushl 0
line: 162 [0x3] 3:	istore 1
          [0x4] 4:	call @236 // <std.io#Thread.setStarted(var)>
line: 163 [0x5] 5:	pushl 0
          [0x6] 6:	istore 0
          [0x7] 7:	call @233 // <std.io#Thread.setExited(var)>
line: 165 [0x8] 8:	call @302 // <std.kernel#Runtime.initializeTLS()>
line: 166 [0x9] 9:	call @332 // <std.kernel.vm#ThreadCore.__thread_args()>
          [0xa] 10:	movl 0
          [0xb] 11:	movn #13
          [0xc] 12:	movi #0, adx
          [0xe] 14:	iaload_2 ebx, adx
          [0xf] 15:	calld ebx
          [0x10] 16:	nop
          [0x11] 17:	movl 0
          [0x12] 18:	movn #4
          [0x13] 19:	loadval ecx
          [0x14] 20:	rmov adx, ecx
line: 167 [0x15] 21:	pushl 0
          [0x16] 22:	istore 0
          [0x17] 23:	call @236 // <std.io#Thread.setStarted(var)>
line: 168 [0x18] 24:	pushl 0
          [0x19] 25:	istore 1
          [0x1a] 26:	call @233 // <std.io#Thread.setExited(var)>
          [0x1b] 27:	ret

func:@335 [std.kernel.vm#ThreadCore.ThreadCore] in file: lib/support/0.2.422//kernel//ThreadCore.sharp:10:13: note:  
		public class ThreadCore
		            ^


ThreadCore:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@336 [std.kernel#Time.nativeTime] in file: lib/support/0.2.422//kernel//Time.sharp:12:34: note:  
		    private static def nativeTime() : var {
		                                 ^


nativeTime:
line: 12 [0x0] 0:	istorel 0, fp+0
line: 15 [0x2] 2:	int 0xa3
         [0x3] 3:	smovr_2 bmr, fp+0
line: 19 [0x4] 4:	loadl ebx, fp+0
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@337 [std.kernel#Time.nanoTime] in file: lib/support/0.2.422//kernel//Time.sharp:23:31: note:  
		    public static def nanoTime() : var {
		                              ^


nanoTime:
line: 23 [0x0] 0:	call @336 // <std.kernel#Time.nativeTime()>
         [0x1] 1:	loadval ebx
         [0x2] 2:	return_val ebx
         [0x3] 3:	ret

func:@338 [std.kernel#Time.timeToMicro] in file: lib/support/0.2.422//kernel//Time.sharp:27:34: note:  
		    public static def timeToMicro(var nano) : var {
		                                 ^


timeToMicro:
line: 27 [0x0] 0:	istore 1000
         [0x1] 1:	loadl ebx, fp+0
         [0x2] 2:	loadval egx
         [0x3] 3:	div ebx, egx -> ebx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@339 [std.kernel#Time.timeToMills] in file: lib/support/0.2.422//kernel//Time.sharp:31:34: note:  
		    public static def timeToMills(var nano) : var {
		                                 ^


timeToMills:
line: 31 [0x0] 0:	istore 1000
         [0x1] 1:	ipushl #0
         [0x2] 2:	call @338 // <std.kernel#Time.timeToMicro(var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	loadval ecx
         [0x5] 5:	div ebx, ecx -> ebx
         [0x7] 7:	return_val ebx
         [0x8] 8:	ret

func:@340 [std.kernel#Time.timeToSecs] in file: lib/support/0.2.422//kernel//Time.sharp:35:33: note:  
		    public static def timeToSecs(var nano) : var {
		                                ^


timeToSecs:
line: 35 [0x0] 0:	istore 1000
         [0x1] 1:	ipushl #0
         [0x2] 2:	call @339 // <std.kernel#Time.timeToMills(var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	loadval ecx
         [0x5] 5:	div ebx, ecx -> ebx
         [0x7] 7:	return_val ebx
         [0x8] 8:	ret

func:@341 [std.kernel#Time.millsTime] in file: lib/support/0.2.422//kernel//Time.sharp:39:32: note:  
		    public static def millsTime() : var {
		                               ^


millsTime:
line: 39 [0x0] 0:	call @336 // <std.kernel#Time.nativeTime()>
         [0x1] 1:	call @339 // <std.kernel#Time.timeToMills(var)>
         [0x2] 2:	loadval ebx
         [0x3] 3:	return_val ebx
         [0x4] 4:	ret

func:@342 [std.kernel#Time.sleep] in file: lib/support/0.2.422//kernel//Time.sharp:44:28: note:  
		    public static def sleep(TimeUnit timeUnit, var time) {
		                           ^


sleep:
line: 44 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	ipushl #1
         [0x7] 7:	call @343 // <std.kernel#Time.sleep(var,var)>
         [0x8] 8:	ret

func:@343 [std.kernel#Time.sleep] in file: lib/support/0.2.422//kernel//Time.sharp:48:28: note:  
		    public static def sleep(var timeUnit, var time) {
		                           ^


sleep:
line: 49 [0x0] 0:	movg @55 // @std.kernel#TimeUnit
         [0x1] 1:	movn #3
         [0x2] 2:	pushobj
         [0x3] 3:	ipushl #0
         [0x4] 4:	call @71 // <std#Enum.$operator==(var)>
         [0x5] 5:	loadval cmt
         [0x6] 6:	jne 16
line: 50 [0x7] 7:	istore 1000000
         [0x8] 8:	loadl ebx, fp+1
         [0x9] 9:	loadval egx
         [0xa] 10:	mul ebx, egx -> ebx
         [0xc] 12:	rstore ebx
         [0xd] 13:	call @344 // <std.kernel#Time.adjustTime(var)>
         [0xe] 14:	ipopl 1
         [0xf] 15:	goto @43
         [0x10] 16:	movg @55 // @std.kernel#TimeUnit
         [0x11] 17:	movn #4
         [0x12] 18:	pushobj
         [0x13] 19:	ipushl #0
         [0x14] 20:	call @71 // <std#Enum.$operator==(var)>
         [0x15] 21:	loadval cmt
         [0x16] 22:	jne 32
line: 52 [0x17] 23:	istore 1000
         [0x18] 24:	loadl ebx, fp+1
         [0x19] 25:	loadval egx
         [0x1a] 26:	mul ebx, egx -> ebx
         [0x1c] 28:	rstore ebx
         [0x1d] 29:	call @344 // <std.kernel#Time.adjustTime(var)>
         [0x1e] 30:	ipopl 1
         [0x1f] 31:	goto @43
         [0x20] 32:	movg @55 // @std.kernel#TimeUnit
         [0x21] 33:	movn #5
         [0x22] 34:	pushobj
         [0x23] 35:	ipushl #0
         [0x24] 36:	call @71 // <std#Enum.$operator==(var)>
         [0x25] 37:	loadval cmt
         [0x26] 38:	jne 43
line: 54 [0x27] 39:	ipushl #1
         [0x28] 40:	call @344 // <std.kernel#Time.adjustTime(var)>
         [0x29] 41:	ipopl 1
         [0x2a] 42:	nop
         [0x2b] 43:	nop
line: 58 [0x2c] 44:	loadl ebx, fp+1
         [0x2d] 45:	int 0xac
         [0x2e] 46:	ret

func:@344 [std.kernel#Time.adjustTime] in file: lib/support/0.2.422//kernel//Time.sharp:70:34: note:  
		    private static def adjustTime(var usec) : var {
		                                 ^


adjustTime:
line: 71 [0x0] 0:	call @298 // <std.kernel#Manifest.isWindows()>
         [0x1] 1:	loadval cmt
         [0x2] 2:	jne 11
line: 72 [0x3] 3:	istore 1000
         [0x4] 4:	loadl ebx, fp+0
         [0x5] 5:	loadval egx
         [0x6] 6:	div ebx, egx -> ebx
         [0x8] 8:	return_val ebx
         [0x9] 9:	ret
         [0xa] 10:	nop
         [0xb] 11:	nop
line: 75 [0xc] 12:	loadl ebx, fp+0
         [0xd] 13:	return_val ebx
         [0xe] 14:	ret

func:@345 [std.kernel#Time.Time] in file: lib/support/0.2.422//kernel//Time.sharp:10:13: note:  
		public class Time {
		            ^


Time:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@346 [std#long.long] in file: lib/support/0.2.422//long.sharp:6:16: note:  
		    public long(var num) {
		               ^


long:
line: 6 [0x0] 0:	loadl ebx, fp+1
        [0x1] 1:	mov64 ebx, ebx
        [0x2] 2:	nop
        [0x3] 3:	rstore ebx
        [0x4] 4:	movl 0
        [0x5] 5:	movn #2
        [0x6] 6:	movi #0, adx
        [0x8] 8:	loadval ecx
        [0x9] 9:	rmov adx, ecx
        [0xa] 10:	movl 0
        [0xb] 11:	returnobj
        [0xc] 12:	ret

func:@347 [std#long.long] in file: lib/support/0.2.422//long.sharp:10:16: note:  
		    public long(integer num) {
		               ^


long:
line: 10 [0x0] 0:	pushl 0
         [0x1] 1:	movl 1
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	mov64 ebx, ebx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @119 // <std#integer.integer(var)>
         [0x9] 9:	pop
         [0xa] 10:	movl 0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@348 [std#long.$operator+] in file: lib/support/0.2.422//long.sharp:14:24: note:  
		    public def operator+(var num) : var {
		                       ^


$operator+:
line: 14 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	add ebx, egx -> ebx
         [0x9] 9:	mov64 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@349 [std#long.$operator+] in file: lib/support/0.2.422//long.sharp:18:24: note:  
		    public def operator+(integer num) : long {
		                       ^


$operator+:
line: 18 [0x0] 0:	new_class @34 // std#long
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @348 // <std#long.$operator+(var)>
         [0x9] 9:	call @346 // <std#long.long(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@350 [std#long.$operator-] in file: lib/support/0.2.422//long.sharp:22:24: note:  
		    public def operator-(var num) : var {
		                       ^


$operator-:
line: 22 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	sub ebx, egx -> ebx
         [0x9] 9:	mov64 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@351 [std#long.$operator-] in file: lib/support/0.2.422//long.sharp:26:24: note:  
		    public def operator-(integer num) : long {
		                       ^


$operator-:
line: 26 [0x0] 0:	new_class @34 // std#long
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @350 // <std#long.$operator-(var)>
         [0x9] 9:	call @346 // <std#long.long(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@352 [std#long.$operator*] in file: lib/support/0.2.422//long.sharp:30:24: note:  
		    public def operator*(var num) : var {
		                       ^


$operator*:
line: 30 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	mul ebx, egx -> ebx
         [0x9] 9:	mov64 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@353 [std#long.$operator*] in file: lib/support/0.2.422//long.sharp:34:24: note:  
		    public def operator*(integer num) : long {
		                       ^


$operator*:
line: 34 [0x0] 0:	new_class @34 // std#long
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @352 // <std#long.$operator*(var)>
         [0x9] 9:	call @346 // <std#long.long(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@354 [std#long.$operator/] in file: lib/support/0.2.422//long.sharp:38:24: note:  
		    public def operator/(var num) : var {
		                       ^


$operator/:
line: 38 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	div ebx, egx -> ebx
         [0x9] 9:	mov64 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@355 [std#long.$operator!=] in file: lib/support/0.2.422//long.sharp:42:24: note:  
		    public def operator!=(var num) : var {
		                       ^


$operator!=:
line: 42 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	loadl egx, fp+1
         [0x6] 6:	tne ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@356 [std#long.$operator!=] in file: lib/support/0.2.422//long.sharp:46:24: note:  
		    public def operator!=(integer num) : var {
		                       ^


$operator!=:
line: 46 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	iaload_2 egx, adx
         [0x9] 9:	loadval ebx
         [0xa] 10:	tne ebx, egx
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@357 [std#long.$operator/] in file: lib/support/0.2.422//long.sharp:50:24: note:  
		    public def operator/(integer num) : long {
		                       ^


$operator/:
line: 50 [0x0] 0:	new_class @34 // std#long
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @354 // <std#long.$operator/(var)>
         [0x9] 9:	call @346 // <std#long.long(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@358 [std#long.$operator=] in file: lib/support/0.2.422//long.sharp:54:24: note:  
		    public def operator=(var num) : var {
		                       ^


$operator=:
line: 54 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	mov64 ebx, ebx
         [0x2] 2:	nop
         [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #2
         [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@359 [std#long.$operator=] in file: lib/support/0.2.422//long.sharp:58:24: note:  
		    public def operator=(integer num) : long {
		                       ^


$operator=:
line: 58 [0x0] 0:	new_class @34 // std#long
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @358 // <std#long.$operator=(var)>
         [0x9] 9:	call @346 // <std#long.long(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@360 [std#long.$operator==] in file: lib/support/0.2.422//long.sharp:62:24: note:  
		    public def operator==(var num) : var {
		                       ^


$operator==:
line: 62 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	loadl egx, fp+1
         [0x6] 6:	test ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@361 [std#long.$operator==] in file: lib/support/0.2.422//long.sharp:66:24: note:  
		    public def operator==(integer num) : var {
		                       ^


$operator==:
line: 66 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	iaload_2 egx, adx
         [0x9] 9:	loadval ebx
         [0xa] 10:	test ebx, egx
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@362 [std#long.$operator<] in file: lib/support/0.2.422//long.sharp:70:24: note:  
		    public def operator<(var num) : var {
		                       ^


$operator<:
line: 70 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	lt ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@363 [std#long.$operator<] in file: lib/support/0.2.422//long.sharp:74:24: note:  
		    public def operator<(integer num) : var {
		                       ^


$operator<:
line: 74 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #2
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lt ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@364 [std#long.$operator>] in file: lib/support/0.2.422//long.sharp:78:24: note:  
		    public def operator>(var num) : var {
		                       ^


$operator>:
line: 78 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	gt ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@365 [std#long.$operator>] in file: lib/support/0.2.422//long.sharp:82:24: note:  
		    public def operator>(integer num) : var {
		                       ^


$operator>:
line: 82 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #2
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	gt ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@366 [std#long.$operator<=] in file: lib/support/0.2.422//long.sharp:86:24: note:  
		    public def operator<=(var num) : var {
		                       ^


$operator<=:
line: 86 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	lte ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@367 [std#long.$operator<=] in file: lib/support/0.2.422//long.sharp:90:24: note:  
		    public def operator<=(integer num) : var {
		                       ^


$operator<=:
line: 90 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #2
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lte ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@368 [std#long.$operator>=] in file: lib/support/0.2.422//long.sharp:94:24: note:  
		    public def operator>=(var num) : var {
		                       ^


$operator>=:
line: 94 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	gte ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@369 [std#long.$operator>=] in file: lib/support/0.2.422//long.sharp:98:24: note:  
		    public def operator>=(integer num) : var {
		                       ^


$operator>=:
line: 98 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #2
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	gte ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@370 [std#long.$operator++] in file: lib/support/0.2.422//long.sharp:102:24: note:  
		    public def operator++(var num) : var { // post inc i++
		                       ^


$operator++:
line: 102 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	smovr_2 ebx, fp+2
line: 103 [0x6] 6:	istore 1
          [0x7] 7:	movl 0
          [0x8] 8:	movn #2
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	loadval egx
          [0xb] 11:	add ebx, egx -> ebx
          [0xd] 13:	mov64 ebx, ebx
          [0xe] 14:	nop
          [0xf] 15:	rstore ebx
          [0x10] 16:	movl 0
          [0x11] 17:	movn #2
          [0x12] 18:	loadval ecx
          [0x13] 19:	rmov adx, ecx
line: 104 [0x14] 20:	loadl ebx, fp+2
          [0x15] 21:	return_val ebx
          [0x16] 22:	ret

func:@371 [std#long.$operator++] in file: lib/support/0.2.422//long.sharp:108:24: note:  
		    public def operator++() : var { // pre inc ++i
		                       ^


$operator++:
line: 108 [0x0] 0:	istore 1
          [0x1] 1:	movl 0
          [0x2] 2:	movn #2
          [0x3] 3:	movi #0, adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	loadval egx
          [0x7] 7:	add ebx, egx -> ebx
          [0x9] 9:	mov64 ebx, ebx
          [0xa] 10:	nop
          [0xb] 11:	rstore ebx
          [0xc] 12:	movl 0
          [0xd] 13:	movn #2
          [0xe] 14:	loadval ecx
          [0xf] 15:	rmov adx, ecx
          [0x10] 16:	return_val ebx
          [0x11] 17:	ret

func:@372 [std#long.$operator--] in file: lib/support/0.2.422//long.sharp:112:24: note:  
		    public def operator--(var num) : var {
		                       ^


$operator--:
line: 112 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	smovr_2 ebx, fp+2
line: 113 [0x6] 6:	istore 1
          [0x7] 7:	movl 0
          [0x8] 8:	movn #2
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	loadval egx
          [0xb] 11:	sub ebx, egx -> ebx
          [0xd] 13:	mov64 ebx, ebx
          [0xe] 14:	nop
          [0xf] 15:	rstore ebx
          [0x10] 16:	movl 0
          [0x11] 17:	movn #2
          [0x12] 18:	loadval ecx
          [0x13] 19:	rmov adx, ecx
line: 114 [0x14] 20:	loadl ebx, fp+2
          [0x15] 21:	return_val ebx
          [0x16] 22:	ret

func:@373 [std#long.$operator--] in file: lib/support/0.2.422//long.sharp:118:24: note:  
		    public def operator--() : var {
		                       ^


$operator--:
line: 118 [0x0] 0:	istore 1
          [0x1] 1:	movl 0
          [0x2] 2:	movn #2
          [0x3] 3:	movi #0, adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	loadval egx
          [0x7] 7:	sub ebx, egx -> ebx
          [0x9] 9:	mov64 ebx, ebx
          [0xa] 10:	nop
          [0xb] 11:	rstore ebx
          [0xc] 12:	movl 0
          [0xd] 13:	movn #2
          [0xe] 14:	loadval ecx
          [0xf] 15:	rmov adx, ecx
          [0x10] 16:	return_val ebx
          [0x11] 17:	ret

func:@374 [std#long.value] in file: lib/support/0.2.422//long.sharp:122:21: note:  
		    public def value() : var {
		                    ^


value:
line: 122 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@375 [std#long.toString] in file: lib/support/0.2.422//long.sharp:126:24: note:  
		    public def delegate::toString() : string {
		                       ^


toString:
line: 126 [0x0] 0:	new_class @47 // std#string
          [0x1] 1:	newstr @34 // ""
          [0x2] 2:	call @553 // <std#string.string(var[])>
          [0x3] 3:	movl 0
          [0x4] 4:	movn #2
          [0x5] 5:	movi #0, adx
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	rstore ebx
          [0x9] 9:	call @573 // <std#string.$operator+(var)>
          [0xa] 10:	movsl #0
          [0xb] 11:	returnobj
          [0xc] 12:	ret

func:@376 [std#long.long] in file: lib/support/0.2.422//long.sharp:3:13: note:  
		public class long base integer {
		            ^


long:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@377 [std#Math.Math] in file: lib/support/0.2.422//Math.sharp:11:16: note:  
		    public Math() { }
		               ^


Math:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@378 [std#Math.sin] in file: lib/support/0.2.422//Math.sharp:37:26: note:  
		    public static def sin(var n) : var { return CMath.sin(n); }
		                         ^


sin:
line: 36 [0x0] 0:	ipushl #0
         [0x1] 1:	call @264 // <std.kernel#CMath.sin(var)>
         [0x2] 2:	loadval ebx
         [0x3] 3:	return_val ebx
         [0x4] 4:	ret

func:@379 [std#Math.cos] in file: lib/support/0.2.422//Math.sharp:39:26: note:  
		    public static def cos(var n) : var { return CMath.cos(n); }
		                         ^


cos:
line: 38 [0x0] 0:	ipushl #0
         [0x1] 1:	call @265 // <std.kernel#CMath.cos(var)>
         [0x2] 2:	loadval ebx
         [0x3] 3:	return_val ebx
         [0x4] 4:	ret

func:@380 [std#Math.tan] in file: lib/support/0.2.422//Math.sharp:41:26: note:  
		    public static def tan(var n) : var { return CMath.tan(n); }
		                         ^


tan:
line: 40 [0x0] 0:	ipushl #0
         [0x1] 1:	call @266 // <std.kernel#CMath.tan(var)>
         [0x2] 2:	loadval ebx
         [0x3] 3:	return_val ebx
         [0x4] 4:	ret

func:@381 [std#Math.sinh] in file: lib/support/0.2.422//Math.sharp:43:27: note:  
		    public static def sinh(var n) : var { return CMath.sinh(n); }
		                          ^


sinh:
line: 42 [0x0] 0:	ipushl #0
         [0x1] 1:	call @267 // <std.kernel#CMath.sinh(var)>
         [0x2] 2:	loadval ebx
         [0x3] 3:	return_val ebx
         [0x4] 4:	ret

func:@382 [std#Math.cosh] in file: lib/support/0.2.422//Math.sharp:45:27: note:  
		    public static def cosh(var n) : var { return CMath.cosh(n); }
		                          ^


cosh:
line: 44 [0x0] 0:	ipushl #0
         [0x1] 1:	call @268 // <std.kernel#CMath.cosh(var)>
         [0x2] 2:	loadval ebx
         [0x3] 3:	return_val ebx
         [0x4] 4:	ret

func:@383 [std#Math.tanh] in file: lib/support/0.2.422//Math.sharp:47:27: note:  
		    public static def tanh(var n) : var { return CMath.tanh(n); }
		                          ^


tanh:
line: 46 [0x0] 0:	ipushl #0
         [0x1] 1:	call @269 // <std.kernel#CMath.tanh(var)>
         [0x2] 2:	loadval ebx
         [0x3] 3:	return_val ebx
         [0x4] 4:	ret

func:@384 [std#Math.asin] in file: lib/support/0.2.422//Math.sharp:49:27: note:  
		    public static def asin(var n) : var { return CMath.asin(n); }
		                          ^


asin:
line: 48 [0x0] 0:	ipushl #0
         [0x1] 1:	call @270 // <std.kernel#CMath.asin(var)>
         [0x2] 2:	loadval ebx
         [0x3] 3:	return_val ebx
         [0x4] 4:	ret

func:@385 [std#Math.acos] in file: lib/support/0.2.422//Math.sharp:51:27: note:  
		    public static def acos(var n) : var { return CMath.acos(n); }
		                          ^


acos:
line: 50 [0x0] 0:	ipushl #0
         [0x1] 1:	call @271 // <std.kernel#CMath.acos(var)>
         [0x2] 2:	loadval ebx
         [0x3] 3:	return_val ebx
         [0x4] 4:	ret

func:@386 [std#Math.atan] in file: lib/support/0.2.422//Math.sharp:53:27: note:  
		    public static def atan(var n) : var { return CMath.atan(n); }
		                          ^


atan:
line: 52 [0x0] 0:	ipushl #0
         [0x1] 1:	call @272 // <std.kernel#CMath.atan(var)>
         [0x2] 2:	loadval ebx
         [0x3] 3:	return_val ebx
         [0x4] 4:	ret

func:@387 [std#Math.atan2] in file: lib/support/0.2.422//Math.sharp:55:28: note:  
		    public static def atan2(var n, var n2) : var { return CMath.atan2(n, n2); }
		                           ^


atan2:
line: 54 [0x0] 0:	ipushl #0
         [0x1] 1:	ipushl #1
         [0x2] 2:	call @273 // <std.kernel#CMath.atan2(var,var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@388 [std#Math.exp] in file: lib/support/0.2.422//Math.sharp:57:26: note:  
		    public static def exp(var n) : var { return CMath.exp(n); }
		                         ^


exp:
line: 56 [0x0] 0:	ipushl #0
         [0x1] 1:	call @274 // <std.kernel#CMath.exp(var)>
         [0x2] 2:	loadval ebx
         [0x3] 3:	return_val ebx
         [0x4] 4:	ret

func:@389 [std#Math.log] in file: lib/support/0.2.422//Math.sharp:59:26: note:  
		    public static def log(var n) : var { return CMath.log(n); }
		                         ^


log:
line: 58 [0x0] 0:	ipushl #0
         [0x1] 1:	call @275 // <std.kernel#CMath.log(var)>
         [0x2] 2:	loadval ebx
         [0x3] 3:	return_val ebx
         [0x4] 4:	ret

func:@390 [std#Math.log10] in file: lib/support/0.2.422//Math.sharp:61:28: note:  
		    public static def log10(var n) : var { return CMath.log10(n); }
		                           ^


log10:
line: 60 [0x0] 0:	ipushl #0
         [0x1] 1:	call @276 // <std.kernel#CMath.log10(var)>
         [0x2] 2:	loadval ebx
         [0x3] 3:	return_val ebx
         [0x4] 4:	ret

func:@391 [std#Math.pow] in file: lib/support/0.2.422//Math.sharp:63:26: note:  
		    public static def pow(var n, var exp) : var { return CMath.pow(n, exp); }
		                         ^


pow:
line: 62 [0x0] 0:	ipushl #0
         [0x1] 1:	ipushl #1
         [0x2] 2:	call @277 // <std.kernel#CMath.pow(var,var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@392 [std#Math.sqrt] in file: lib/support/0.2.422//Math.sharp:65:27: note:  
		    public static def sqrt(var n) : var { return CMath.sqrt(n); }
		                          ^


sqrt:
line: 64 [0x0] 0:	ipushl #0
         [0x1] 1:	call @278 // <std.kernel#CMath.sqrt(var)>
         [0x2] 2:	loadval ebx
         [0x3] 3:	return_val ebx
         [0x4] 4:	ret

func:@393 [std#Math.ceil] in file: lib/support/0.2.422//Math.sharp:67:27: note:  
		    public static def ceil(var n) : var { return CMath.ceil(n); }
		                          ^


ceil:
line: 66 [0x0] 0:	ipushl #0
         [0x1] 1:	call @279 // <std.kernel#CMath.ceil(var)>
         [0x2] 2:	loadval ebx
         [0x3] 3:	return_val ebx
         [0x4] 4:	ret

func:@394 [std#Math.floor] in file: lib/support/0.2.422//Math.sharp:69:28: note:  
		    public static def floor(var n) : var { return CMath.floor(n); }
		                           ^


floor:
line: 68 [0x0] 0:	ipushl #0
         [0x1] 1:	call @280 // <std.kernel#CMath.floor(var)>
         [0x2] 2:	loadval ebx
         [0x3] 3:	return_val ebx
         [0x4] 4:	ret

func:@395 [std#Math.abs] in file: lib/support/0.2.422//Math.sharp:71:26: note:  
		    public static def abs(var n) : var { return fabs(n); }
		                         ^


abs:
line: 70 [0x0] 0:	ipushl #0
         [0x1] 1:	call @396 // <std#Math.fabs(var)>
         [0x2] 2:	loadval ebx
         [0x3] 3:	return_val ebx
         [0x4] 4:	ret

func:@396 [std#Math.fabs] in file: lib/support/0.2.422//Math.sharp:73:27: note:  
		    public static def fabs(var n) : var { return CMath.fabs(n); }
		                          ^


fabs:
line: 72 [0x0] 0:	ipushl #0
         [0x1] 1:	call @281 // <std.kernel#CMath.fabs(var)>
         [0x2] 2:	loadval ebx
         [0x3] 3:	return_val ebx
         [0x4] 4:	ret

func:@397 [std#Math.ldexp] in file: lib/support/0.2.422//Math.sharp:75:28: note:  
		    public static def ldexp(var n, var n2) : var { return CMath.ldexp(n, n2); }
		                           ^


ldexp:
line: 74 [0x0] 0:	ipushl #0
         [0x1] 1:	ipushl #1
         [0x2] 2:	call @282 // <std.kernel#CMath.ldexp(var,var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@398 [std#Math.fmod] in file: lib/support/0.2.422//Math.sharp:77:27: note:  
		    public static def fmod(var n, var n2) : var { return CMath.fmod(n, n2); }
		                          ^


fmod:
line: 76 [0x0] 0:	ipushl #0
         [0x1] 1:	ipushl #1
         [0x2] 2:	call @283 // <std.kernel#CMath.fmod(var,var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@399 [std#NullptrException.NullptrException] in file: lib/support/0.2.422//NullptrException.sharp:8:23: note:  
		      NullptrException(var[] message) {
		                      ^


NullptrException:
line: 8 [0x0] 0:	pushl 0
        [0x1] 1:	pushl 1
        [0x2] 2:	call @77 // <std#Exception.Exception(var[])>
        [0x3] 3:	pop
        [0x4] 4:	movl 0
        [0x5] 5:	returnobj
        [0x6] 6:	ret

func:@400 [std#NullptrException.NullptrException] in file: lib/support/0.2.422//NullptrException.sharp:12:23: note:  
		      NullptrException(string message) {
		                      ^


NullptrException:
line: 12 [0x0] 0:	pushl 0
         [0x1] 1:	pushl 1
         [0x2] 2:	call @78 // <std#Exception.Exception(std#string)>
         [0x3] 3:	pop
         [0x4] 4:	movl 0
         [0x5] 5:	returnobj
         [0x6] 6:	ret

func:@401 [std#NullptrException.NullptrException] in file: lib/support/0.2.422//NullptrException.sharp:6:13: note:  
		public class NullptrException base Exception {
		            ^


NullptrException:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@402 [std#Object.$operator==] in file: lib/support/0.2.422//Object.sharp:11:24: note:  
		    public def operator==(object o) : var {
		                       ^


$operator==:
line: 11 [0x0] 0:	pushl 1
         [0x1] 1:	pushl 0
         [0x2] 2:	itest cmt
         [0x3] 3:	return_val cmt
         [0x4] 4:	ret

func:@403 [std#Object.toString] in file: lib/support/0.2.422//Object.sharp:15:24: note:  
		    public def delegate::toString() : string {
		                       ^


toString:
line: 15 [0x0] 0:	new_class @47 // std#string
         [0x1] 1:	newstr @34 // ""
         [0x2] 2:	call @553 // <std#string.string(var[])>
         [0x3] 3:	movsl #0
         [0x4] 4:	returnobj
         [0x5] 5:	ret

func:@404 [std#Object.hash] in file: lib/support/0.2.422//Object.sharp:19:17: note:  
		    def delegate::hash() : var {
		                ^


hash:
line: 20 [0x0] 0:	movi #0, ebx
         [0x2] 2:	return_val ebx
         [0x3] 3:	ret

func:@405 [std#Object.guid] in file: lib/support/0.2.422//Object.sharp:24:17: note:  
		    def delegate::guid() : var {
		                ^


guid:
line: 24 [0x0] 0:	call @337 // <std.kernel#Time.nanoTime()>
         [0x1] 1:	loadval ebx
         [0x2] 2:	return_val ebx
         [0x3] 3:	ret

func:@406 [std#Object.Object] in file: lib/support/0.2.422//Object.sharp:9:6: note:  
		class Object : Printable, Unique {
		     ^


Object:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@407 [std#ObjList.ObjList] in file: lib/support/0.2.422//ObjList.sharp:17:19: note:  
		    public ObjList() {
		                  ^


ObjList:
line: 18 [0x0] 0:	movi #10, ebx
         [0x2] 2:	newobj_arry ebx
         [0x3] 3:	movl 0
         [0x4] 4:	movn #1
         [0x5] 5:	popobj
         [0x6] 6:	movl 0
         [0x7] 7:	returnobj
         [0x8] 8:	ret

func:@408 [std#ObjList.size] in file: lib/support/0.2.422//ObjList.sharp:25:20: note:  
		    public def size() : var {
		                   ^


size:
line: 25 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@409 [std#ObjList.empty] in file: lib/support/0.2.422//ObjList.sharp:33:21: note:  
		    public def empty() : var {
		                    ^


empty:
line: 33 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movi #0, egx
         [0x8] 8:	loadval ebx
         [0x9] 9:	test ebx, egx
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@410 [std#ObjList.toArray] in file: lib/support/0.2.422//ObjList.sharp:42:23: note:  
		    public def toArray() : object[] {
		                      ^


toArray:
line: 42 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movi #0, egx
         [0x8] 8:	loadval ebx
         [0x9] 9:	test ebx, egx
         [0xa] 10:	jne 15
line: 42 [0xb] 11:	movl 0
         [0xc] 12:	del
         [0xd] 13:	ret
         [0xe] 14:	nop
         [0xf] 15:	nop
line: 43 [0x10] 16:	movl 0
         [0x11] 17:	movn #1
         [0x12] 18:	pushobj
         [0x13] 19:	movl 0
         [0x14] 20:	movn #0
         [0x15] 21:	movi #0, adx
         [0x17] 23:	iaload_2 ebx, adx
         [0x18] 24:	rstore ebx
         [0x19] 25:	call @612 // <std#__SRT_Global.copyOf(object,var)>
         [0x1a] 26:	returnobj
         [0x1b] 27:	ret

func:@411 [std#ObjList.get] in file: lib/support/0.2.422//ObjList.sharp:51:19: note:  
		    public def get(var index) : object {
		                  ^


get:
line: 51 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	loadl ebx, fp+1
         [0x6] 6:	gte ebx, egx
         [0x7] 7:	jne 15
line: 52 [0x8] 8:	new_class @13 // std#IndexOutOfBoundsException
         [0x9] 9:	pushl 0
         [0xa] 10:	ipushl #1
         [0xb] 11:	call @421 // <std#ObjList.outOfBoundsMsg(var)>
         [0xc] 12:	call @87 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
         [0xd] 13:	throw 
         [0xe] 14:	nop
         [0xf] 15:	nop
line: 54 [0x10] 16:	movl 0
         [0x11] 17:	movn #1
         [0x12] 18:	loadl ebx, fp+1
         [0x13] 19:	chklen ebx
         [0x14] 20:	movnd ebx
         [0x15] 21:	returnobj
         [0x16] 22:	ret

func:@412 [std#ObjList.last] in file: lib/support/0.2.422//ObjList.sharp:62:20: note:  
		    public def last() : object {
		                   ^


last:
line: 62 [0x0] 0:	pushl 0
         [0x1] 1:	istore 1
         [0x2] 2:	pushl 0
         [0x3] 3:	call @408 // <std#ObjList.size()>
         [0x4] 4:	loadval ebx
         [0x5] 5:	loadval ecx
         [0x6] 6:	sub ebx, ecx -> ebx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @411 // <std#ObjList.get(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@413 [std#ObjList.set] in file: lib/support/0.2.422//ObjList.sharp:71:19: note:  
		    public def set(var index, object element) : object {
		                  ^


set:
line: 71 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	loadl ebx, fp+1
         [0x6] 6:	gte ebx, egx
         [0x7] 7:	jne 15
line: 72 [0x8] 8:	new_class @13 // std#IndexOutOfBoundsException
         [0x9] 9:	pushl 0
         [0xa] 10:	ipushl #1
         [0xb] 11:	call @421 // <std#ObjList.outOfBoundsMsg(var)>
         [0xc] 12:	call @87 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
         [0xd] 13:	throw 
         [0xe] 14:	nop
         [0xf] 15:	nop
line: 74 [0x10] 16:	movl 0
         [0x11] 17:	movn #1
         [0x12] 18:	loadl ebx, fp+1
         [0x13] 19:	chklen ebx
         [0x14] 20:	movnd ebx
         [0x15] 21:	pushobj
         [0x16] 22:	popl 3
         [0x17] 23:	pushl 2
line: 75 [0x18] 24:	movl 0
         [0x19] 25:	movn #1
         [0x1a] 26:	loadl ebx, fp+1
         [0x1b] 27:	chklen ebx
         [0x1c] 28:	movnd ebx
         [0x1d] 29:	popobj
line: 76 [0x1e] 30:	movl 3
         [0x1f] 31:	returnobj
         [0x20] 32:	ret

func:@414 [std#ObjList.shrink] in file: lib/support/0.2.422//ObjList.sharp:84:23: note:  
		    private def shrink() {
		                      ^


shrink:
line: 84 [0x0] 0:	pushl 0
         [0x1] 1:	call @253 // <std.kernel#CListObj.shrink()>
         [0x2] 2:	ret

func:@415 [std#ObjList.add] in file: lib/support/0.2.422//ObjList.sharp:94:20: note:  
		     public def add(ObjList lst) {
		                   ^


add:
line: 94 [0x0] 0:	pushl 1
         [0x1] 1:	call @410 // <std#ObjList.toArray()>
         [0x2] 2:	popl 2
         [0x3] 3:	istore 0
line: 95 [0x4] 4:	movl 2
         [0x5] 5:	smov ebx, sp+0
         [0x6] 6:	sizeof egx
         [0x7] 7:	lt ebx, egx
         [0x8] 8:	jne 17
         [0x9] 9:	movnd ebx
         [0xa] 10:	pushobj
         [0xb] 11:	popl 3
         [0xc] 12:	pushl 0
line: 96 [0xd] 13:	pushl 3
         [0xe] 14:	call @252 // <std.kernel#CListObj.add(object)>
         [0xf] 15:	isadd 1, sp+0
         [0x10] 16:	goto @4
         [0x11] 17:	pop
         [0x12] 18:	ret

func:@416 [std#ObjList.add] in file: lib/support/0.2.422//ObjList.sharp:107:20: note:  
		     public def add(object num) {
		                   ^


add:
line: 107 [0x0] 0:	pushl 0
          [0x1] 1:	pushl 1
          [0x2] 2:	call @252 // <std.kernel#CListObj.add(object)>
          [0x3] 3:	ret

func:@417 [std#ObjList.popBack] in file: lib/support/0.2.422//ObjList.sharp:118:24: note:  
		     public def popBack() {
		                       ^


popBack:
line: 118 [0x0] 0:	pushl 0
          [0x1] 1:	call @414 // <std#ObjList.shrink()>
          [0x2] 2:	ret

func:@418 [std#ObjList.insert] in file: lib/support/0.2.422//ObjList.sharp:128:23: note:  
		     public def insert(var pos, object value) {
		                      ^


insert:
line: 128 [0x0] 0:	pushl 0
          [0x1] 1:	ipushl #1
          [0x2] 2:	pushl 2
          [0x3] 3:	call @254 // <std.kernel#CListObj.insert(var,object)>
          [0x4] 4:	ret

func:@419 [std#ObjList.remove] in file: lib/support/0.2.422//ObjList.sharp:138:23: note:  
		     public def remove(var pos) {
		                      ^


remove:
line: 138 [0x0] 0:	pushl 0
          [0x1] 1:	ipushl #1
          [0x2] 2:	call @255 // <std.kernel#CListObj.remove(var)>
          [0x3] 3:	ret

func:@420 [std#ObjList.clear] in file: lib/support/0.2.422//ObjList.sharp:146:22: note:  
		     public def clear() {
		                     ^


clear:
line: 149 [0x0] 0:	movi #10, ebx
          [0x2] 2:	newobj_arry ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #1
          [0x5] 5:	popobj
          [0x6] 6:	ret

func:@421 [std#ObjList.outOfBoundsMsg] in file: lib/support/0.2.422//ObjList.sharp:158:31: note:  
		    private def outOfBoundsMsg(var index) : string {
		                              ^


outOfBoundsMsg:
line: 158 [0x0] 0:	new_class @47 // std#string
          [0x1] 1:	newstr @35 // "Index: "
          [0x2] 2:	call @553 // <std#string.string(var[])>
          [0x3] 3:	ipushl #1
          [0x4] 4:	call @573 // <std#string.$operator+(var)>
          [0x5] 5:	newstr @36 // ", size: "
          [0x6] 6:	call @566 // <std#string.$operator+(var[])>
          [0x7] 7:	movl 0
          [0x8] 8:	movn #1
          [0x9] 9:	sizeof ebx
          [0xa] 10:	rstore ebx
          [0xb] 11:	call @573 // <std#string.$operator+(var)>
          [0xc] 12:	movsl #0
          [0xd] 13:	returnobj
          [0xe] 14:	ret

func:@422 [std.os#__SRT_Global.gc] in file: lib/support/0.2.422//os//gc.sharp:9:4: note:  
		def gc() {
		   ^


gc:
line: 9 [0x0] 0:	call @305 // <std.kernel#Runtime.gc()>
        [0x1] 1:	ret

func:@423 [std.os#__SRT_Global.freeMemory] in file: lib/support/0.2.422//os//gc.sharp:13:4: note:  
		def freeMemory() : var {
		   ^


freeMemory:
line: 13 [0x0] 0:	call @308 // <std.kernel#Runtime.freeMemory()>
         [0x1] 1:	loadval ebx
         [0x2] 2:	return_val ebx
         [0x3] 3:	ret

func:@424 [std.os#__SRT_Global.maxMemory] in file: lib/support/0.2.422//os//gc.sharp:17:4: note:  
		def maxMemory() : var {
		   ^


maxMemory:
line: 17 [0x0] 0:	call @306 // <std.kernel#Runtime.memoryLimit()>
         [0x1] 1:	loadval ebx
         [0x2] 2:	return_val ebx
         [0x3] 3:	ret

func:@425 [std.os#__SRT_Global.managedMemory] in file: lib/support/0.2.422//os//gc.sharp:21:4: note:  
		def managedMemory() : var {
		   ^


managedMemory:
line: 21 [0x0] 0:	call @307 // <std.kernel#Runtime.managedMemory()>
         [0x1] 1:	loadval ebx
         [0x2] 2:	return_val ebx
         [0x3] 3:	ret

func:@426 [std.os#__SRT_Global.sedate] in file: lib/support/0.2.422//os//gc.sharp:25:4: note:  
		def sedate() {
		   ^


sedate:
line: 25 [0x0] 0:	call @317 // <std.kernel#Runtime.sedateGc()>
         [0x1] 1:	ret

func:@427 [std.os#__SRT_Global.collect] in file: lib/support/0.2.422//os//gc.sharp:29:4: note:  
		def collect() : var {
		   ^


collect:
line: 29 [0x0] 0:	call @318 // <std.kernel#Runtime.selfCollect()>
         [0x1] 1:	loadval ebx
         [0x2] 2:	return_val ebx
         [0x3] 3:	ret

func:@428 [std.os#__SRT_Global.wake] in file: lib/support/0.2.422//os//gc.sharp:33:4: note:  
		def wake() {
		   ^


wake:
line: 33 [0x0] 0:	call @319 // <std.kernel#Runtime.wakeGc()>
         [0x1] 1:	ret

func:@429 [std.os#__SRT_Global.kill] in file: lib/support/0.2.422//os//gc.sharp:37:4: note:  
		def kill() {
		   ^


kill:
line: 37 [0x0] 0:	call @320 // <std.kernel#Runtime.killGc()>
         [0x1] 1:	ret

func:@430 [std.os#__SRT_Global.isAwake] in file: lib/support/0.2.422//os//gc.sharp:41:4: note:  
		def isAwake() : var {
		   ^


isAwake:
line: 41 [0x0] 0:	call @321 // <std.kernel#Runtime.isGcAwake()>
         [0x1] 1:	loadval ebx
         [0x2] 2:	return_val ebx
         [0x3] 3:	ret

func:@431 [std.os.gui#__SRT_Global.guiPipe] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:53:3: note:  
		def guiPipe(var proc) {
		  ^


guiPipe:
line: 53 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	int 0xf5
         [0x2] 2:	ret

func:@432 [std.os.gui#__SRT_Global.guiPipe2] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:61:3: note:  
		def guiPipe2(var proc) : var {
		  ^


guiPipe2:
line: 61 [0x0] 0:	loadl ebx, fp+0
         [0x1] 1:	int 0xf5
         [0x2] 2:	return_val cmt
         [0x3] 3:	ret

func:@433 [std.os.gui#__SRT_Global.guiPipe3] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:71:3: note:  
		def guiPipe3(var paintProc, var x, var y) : var {
		  ^


guiPipe3:
line: 71 [0x0] 0:	movi #1, ebx
         [0x2] 2:	loadl ecx, fp+0
         [0x3] 3:	ipushl #2
         [0x4] 4:	ipushl #1
         [0x5] 5:	int 0xf5
         [0x6] 6:	return_val cmt
         [0x7] 7:	ret

func:@434 [std.os.gui#__SRT_Global.guiPipe4] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:84:3: note:  
		def guiPipe4(var paintProc, var a, var b, var c, var d) : var {
		  ^


guiPipe4:
line: 84 [0x0] 0:	movi #1, ebx
         [0x2] 2:	loadl ecx, fp+0
         [0x3] 3:	ipushl #4
         [0x4] 4:	ipushl #3
         [0x5] 5:	ipushl #2
         [0x6] 6:	ipushl #1
         [0x7] 7:	int 0xf5
         [0x8] 8:	return_val cmt
         [0x9] 9:	ret

func:@435 [std.os.gui#__SRT_Global.quit] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:98:4: note:  
		def quit() {
		   ^


quit:
line: 98 [0x0] 0:	istore 0
         [0x1] 1:	call @431 // <std.os.gui#__SRT_Global.guiPipe(var)>
         [0x2] 2:	ret

func:@436 [std.os.gui#__SRT_Global.paintStart] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:102:4: note:  
		def paintStart() : var {
		   ^


paintStart:
line: 102 [0x0] 0:	movi #1, ecx
line: 103 [0x2] 2:	movi #1, ebx
          [0x4] 4:	rstore ebx
          [0x5] 5:	call @432 // <std.os.gui#__SRT_Global.guiPipe2(var)>
          [0x6] 6:	loadval ebx
          [0x7] 7:	return_val ebx
          [0x8] 8:	ret

func:@437 [std.os.gui#__SRT_Global.paintEnd] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:107:4: note:  
		def paintEnd() : var {
		   ^


paintEnd:
line: 107 [0x0] 0:	movi #2, ecx
line: 108 [0x2] 2:	movi #1, ebx
          [0x4] 4:	rstore ebx
          [0x5] 5:	call @432 // <std.os.gui#__SRT_Global.guiPipe2(var)>
          [0x6] 6:	loadval ebx
          [0x7] 7:	return_val ebx
          [0x8] 8:	ret

func:@438 [std.os.gui#__SRT_Global.paintText] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:112:4: note:  
		def paintText(var[] msg, var x, var y) : var {
		   ^


paintText:
line: 112 [0x0] 0:	movi #1, ebx
          [0x2] 2:	movi #0, ecx
          [0x4] 4:	ipushl #2
          [0x5] 5:	ipushl #1
          [0x6] 6:	pushl 0
          [0x7] 7:	int 0xf5
          [0x8] 8:	movi #0, ebx
          [0xa] 10:	return_val ebx
          [0xb] 11:	ret

func:@439 [std.os.gui#__SRT_Global.setContext] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:123:4: note:  
		def setContext(var wnd) : var {
		   ^


setContext:
line: 123 [0x0] 0:	movi #2, ebx
          [0x2] 2:	loadl adx, fp+0
          [0x3] 3:	int 0xf5
          [0x4] 4:	return_val cmt
          [0x5] 5:	ret

func:@440 [std.os.gui#__SRT_Global.getContext] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:133:4: note:  
		def getContext() : var {
		   ^


getContext:
line: 133 [0x0] 0:	istore 3
          [0x1] 1:	call @432 // <std.os.gui#__SRT_Global.guiPipe2(var)>
          [0x2] 2:	loadval ebx
          [0x3] 3:	return_val ebx
          [0x4] 4:	ret

func:@441 [std.os.gui#__SRT_Global.createDefaultWnd] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:137:4: note:  
		def createDefaultWnd(string name, string title, var width, var height) : var {
		   ^


createDefaultWnd:
line: 137 [0x0] 0:	pushl 0
          [0x1] 1:	call @590 // <std#string.getData()>
          [0x2] 2:	popl 4
          [0x3] 3:	pushl 1
line: 138 [0x4] 4:	call @590 // <std#string.getData()>
          [0x5] 5:	popl 5
          [0x6] 6:	movi #4, ebx
line: 139 [0x8] 8:	pushl 5
          [0x9] 9:	pushl 4
          [0xa] 10:	loadl ecx, fp+2
          [0xb] 11:	loadl egx, fp+3
          [0xc] 12:	int 0xf5
          [0xd] 13:	return_val cmt
          [0xe] 14:	ret

func:@442 [std.os.gui#__SRT_Global.show] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:152:4: note:  
		def show(var wnd, var cmd) : var {
		   ^


show:
line: 152 [0x0] 0:	loadl adx, fp+0
          [0x1] 1:	loadl egx, fp+1
line: 154 [0x2] 2:	istore 5
          [0x3] 3:	call @432 // <std.os.gui#__SRT_Global.guiPipe2(var)>
          [0x4] 4:	loadval ebx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@443 [std.os.gui#__SRT_Global.update] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:158:4: note:  
		def update(var wnd) : var {
		   ^


update:
line: 158 [0x0] 0:	loadl adx, fp+0
line: 159 [0x1] 1:	istore 6
          [0x2] 2:	call @432 // <std.os.gui#__SRT_Global.guiPipe2(var)>
          [0x3] 3:	loadval ebx
          [0x4] 4:	return_val ebx
          [0x5] 5:	ret

func:@444 [std.os.gui#Message.Message] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:163:13: note:  
		public class Message {
		            ^


Message:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@445 [std.os.gui#__SRT_Global.getMessage] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:171:4: note:  
		def getMessage() : Message {
		   ^


getMessage:
line: 171 [0x0] 0:	istore 8
          [0x1] 1:	call @431 // <std.os.gui#__SRT_Global.guiPipe(var)>
line: 172 [0x2] 2:	movg @6 // @std.os.gui#__SRT_Global
          [0x3] 3:	movn #0
          [0x4] 4:	pushobj
          [0x5] 5:	popl 0
          [0x6] 6:	movl 0
line: 174 [0x7] 7:	movn #0
          [0x8] 8:	movi #0, adx
          [0xa] 10:	rmov adx, ebx
          [0xb] 11:	movl 0
          [0xc] 12:	movn #1
          [0xd] 13:	rmov adx, ecx
          [0xe] 14:	movl 0
          [0xf] 15:	movn #2
          [0x10] 16:	rmov adx, egx
line: 186 [0x11] 17:	movl 0
          [0x12] 18:	returnobj
          [0x13] 19:	ret

func:@446 [std.os.gui#__SRT_Global.dispatchMessage] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:190:4: note:  
		def dispatchMessage() : var {
		   ^


dispatchMessage:
line: 190 [0x0] 0:	istore 7
          [0x1] 1:	call @432 // <std.os.gui#__SRT_Global.guiPipe2(var)>
          [0x2] 2:	loadval ebx
          [0x3] 3:	return_val ebx
          [0x4] 4:	ret

func:@447 [std.os.gui#__SRT_Global.moveTo] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:194:4: note:  
		def moveTo(var x, var y) : var {
		   ^


moveTo:
line: 194 [0x0] 0:	istore 3
          [0x1] 1:	ipushl #0
          [0x2] 2:	ipushl #1
          [0x3] 3:	call @433 // <std.os.gui#__SRT_Global.guiPipe3(var,var,var)>
          [0x4] 4:	loadval ebx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@448 [std.os.gui#__SRT_Global.lineTo] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:198:4: note:  
		def lineTo(var x, var y) : var {
		   ^


lineTo:
line: 198 [0x0] 0:	istore 4
          [0x1] 1:	ipushl #0
          [0x2] 2:	ipushl #1
          [0x3] 3:	call @433 // <std.os.gui#__SRT_Global.guiPipe3(var,var,var)>
          [0x4] 4:	loadval ebx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@449 [std.os.gui#__SRT_Global.rectangle] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:202:4: note:  
		def rectangle(var left, var top, var right, var bottom) : var {
		   ^


rectangle:
line: 202 [0x0] 0:	istore 5
          [0x1] 1:	ipushl #0
          [0x2] 2:	ipushl #1
          [0x3] 3:	ipushl #2
          [0x4] 4:	ipushl #3
          [0x5] 5:	call @434 // <std.os.gui#__SRT_Global.guiPipe4(var,var,var,var,var)>
          [0x6] 6:	loadval ebx
          [0x7] 7:	return_val ebx
          [0x8] 8:	ret

func:@450 [std.os.gui#__SRT_Global.fillRect] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:206:4: note:  
		def fillRect(var left, var top, var right, var bottom) : var {
		   ^


fillRect:
line: 206 [0x0] 0:	istore 6
          [0x1] 1:	ipushl #0
          [0x2] 2:	ipushl #1
          [0x3] 3:	ipushl #2
          [0x4] 4:	ipushl #3
          [0x5] 5:	call @434 // <std.os.gui#__SRT_Global.guiPipe4(var,var,var,var,var)>
          [0x6] 6:	loadval ebx
          [0x7] 7:	return_val ebx
          [0x8] 8:	ret

func:@451 [std.os.gui#__SRT_Global.ellipsize] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:210:4: note:  
		def ellipsize(var left, var top, var right, var bottom) : var {
		   ^


ellipsize:
line: 210 [0x0] 0:	istore 7
          [0x1] 1:	ipushl #0
          [0x2] 2:	ipushl #1
          [0x3] 3:	ipushl #2
          [0x4] 4:	ipushl #3
          [0x5] 5:	call @434 // <std.os.gui#__SRT_Global.guiPipe4(var,var,var,var,var)>
          [0x6] 6:	loadval ebx
          [0x7] 7:	return_val ebx
          [0x8] 8:	ret

func:@452 [std.os.gui#__SRT_Global.polygon] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:214:4: note:  
		def polygon(Polygon poly) : var {
		   ^


polygon:
line: 215 [0x0] 0:	movi #1, ebx
          [0x2] 2:	movi #8, ecx
          [0x4] 4:	pushl 0
          [0x5] 5:	int 0xf5
          [0x6] 6:	return_val cmt
          [0x7] 7:	ret

func:@453 [std.os.gui#__SRT_Global.RGB] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:229:3: note:  
		def RGB(var r, var g, var b) : var
		  ^


RGB:
line: 230 [0x0] 0:	istore 8
          [0x1] 1:	ipushl #1
          [0x2] 2:	movi #255, ebx
          [0x4] 4:	loadval ecx
          [0x5] 5:	uand ecx, ebx
          [0x6] 6:	movr ebx, cmt
          [0x7] 7:	loadval ecx
          [0x8] 8:	shl ebx, ecx -> ebx
          [0xa] 10:	rstore ebx
          [0xb] 11:	istore 16
          [0xc] 12:	ipushl #2
          [0xd] 13:	movi #255, ebx
          [0xf] 15:	loadval ecx
          [0x10] 16:	uand ecx, ebx
          [0x11] 17:	movr ebx, cmt
          [0x12] 18:	loadval ecx
          [0x13] 19:	shl ebx, ecx -> ebx
          [0x15] 21:	loadval ecx
          [0x16] 22:	add ebx, ecx -> ebx
          [0x18] 24:	rstore ebx
          [0x19] 25:	ipushl #0
          [0x1a] 26:	movi #255, ebx
          [0x1c] 28:	loadval ecx
          [0x1d] 29:	uand ecx, ebx
          [0x1e] 30:	rstore cmt
          [0x1f] 31:	loadval ebx
          [0x20] 32:	loadval ecx
          [0x21] 33:	add ebx, ecx -> ebx
          [0x23] 35:	return_val ebx
          [0x24] 36:	ret

func:@454 [std.os.gui#__SRT_Global.createPen] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:234:4: note:  
		def createPen(var style, var width, var color) {
		   ^


createPen:
line: 235 [0x0] 0:	movi #1, ebx
          [0x2] 2:	movi #9, ecx
          [0x4] 4:	ipushl #2
          [0x5] 5:	ipushl #1
          [0x6] 6:	ipushl #0
          [0x7] 7:	int 0xf5
          [0x8] 8:	ret

func:@455 [std.os.gui#__SRT_Global.selectPen] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:247:4: note:  
		def selectPen(var pen): var {
		   ^


selectPen:
line: 247 [0x0] 0:	loadl adx, fp+0
          [0x1] 1:	movi #10, ecx
line: 251 [0x3] 3:	movi #1, ebx
          [0x5] 5:	rstore ebx
          [0x6] 6:	call @432 // <std.os.gui#__SRT_Global.guiPipe2(var)>
          [0x7] 7:	loadval ebx
          [0x8] 8:	return_val ebx
          [0x9] 9:	ret

func:@456 [std.os.gui#__SRT_Global.deletePen] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:255:4: note:  
		def deletePen(var pen): var {
		   ^


deletePen:
line: 255 [0x0] 0:	loadl adx, fp+0
          [0x1] 1:	movi #11, ecx
line: 259 [0x3] 3:	movi #1, ebx
          [0x5] 5:	rstore ebx
          [0x6] 6:	call @432 // <std.os.gui#__SRT_Global.guiPipe2(var)>
          [0x7] 7:	loadval ebx
          [0x8] 8:	return_val ebx
          [0x9] 9:	ret

func:@457 [std.os.gui#__SRT_Global.selectBrush] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:263:4: note:  
		def selectBrush(var brush): var {
		   ^


selectBrush:
line: 263 [0x0] 0:	loadl adx, fp+0
          [0x1] 1:	movi #13, ecx
line: 267 [0x3] 3:	movi #1, ebx
          [0x5] 5:	rstore ebx
          [0x6] 6:	call @432 // <std.os.gui#__SRT_Global.guiPipe2(var)>
          [0x7] 7:	loadval ebx
          [0x8] 8:	return_val ebx
          [0x9] 9:	ret

func:@458 [std.os.gui#__SRT_Global.deleteBrush] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:271:4: note:  
		def deleteBrush(var brush): var {
		   ^


deleteBrush:
line: 271 [0x0] 0:	loadl adx, fp+0
          [0x1] 1:	movi #14, ecx
line: 275 [0x3] 3:	movi #1, ebx
          [0x5] 5:	rstore ebx
          [0x6] 6:	call @432 // <std.os.gui#__SRT_Global.guiPipe2(var)>
          [0x7] 7:	loadval ebx
          [0x8] 8:	return_val ebx
          [0x9] 9:	ret

func:@459 [std.os.gui#__SRT_Global.createBrush] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:280:3: note:  
		def createBrush(var color) {
		  ^


createBrush:
line: 281 [0x0] 0:	movi #1, ebx
          [0x2] 2:	movi #12, ecx
          [0x4] 4:	ipushl #0
          [0x5] 5:	int 0xf5
          [0x6] 6:	ret

func:@460 [std.os.gui#Polygon.Polygon] in file: lib/support/0.2.422//os//gui//win//Polygon.sharp:9:19: note:  
		    public Polygon(var size) {
		                  ^


Polygon:
line: 9 [0x0] 0:	loadl ebx, fp+1
        [0x1] 1:	new_classarray ebx  // std.os.gui#Point[]
        [0x2] 2:	movl 0
        [0x3] 3:	movn #0
        [0x4] 4:	popobj
        [0x5] 5:	movl 0
        [0x6] 6:	returnobj
        [0x7] 7:	ret

func:@461 [std.os.gui#Polygon.Polygon] in file: lib/support/0.2.422//os//gui//win//Polygon.sharp:6:13: note:  
		public class Polygon {
		            ^


Polygon:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@462 [std.os.gui#Point.Point] in file: lib/support/0.2.422//os//gui//win//Polygon.sharp:15:12: note:  
		public class Point {
		           ^


Point:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@463 [std.os.gui#Window.Window] in file: lib/support/0.2.422//os//gui//win//Window.sharp:11:18: note:  
		    public Window(string name, string title) {
		                 ^


Window:
line: 11 [0x0] 0:	pushl 1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #1
         [0x3] 3:	popobj
line: 12 [0x4] 4:	pushl 2
         [0x5] 5:	movl 0
         [0x6] 6:	movn #2
         [0x7] 7:	popobj
line: 13 [0x8] 8:	movi #500, ebx
         [0xa] 10:	nop
         [0xb] 11:	rstore ebx
         [0xc] 12:	movl 0
         [0xd] 13:	movn #3
         [0xe] 14:	movi #0, adx
         [0x10] 16:	loadval ecx
         [0x11] 17:	rmov adx, ecx
line: 14 [0x12] 18:	movi #650, ebx
         [0x14] 20:	nop
         [0x15] 21:	rstore ebx
         [0x16] 22:	movl 0
         [0x17] 23:	movn #4
         [0x18] 24:	movi #0, adx
         [0x1a] 26:	loadval ecx
         [0x1b] 27:	rmov adx, ecx
line: 15 [0x1c] 28:	pushl 1
         [0x1d] 29:	pushl 2
         [0x1e] 30:	istore 500
         [0x1f] 31:	istore 650
         [0x20] 32:	call @441 // <std.os.gui#__SRT_Global.createDefaultWnd(std#string,std#string,var,var)>
         [0x21] 33:	nop
         [0x22] 34:	movl 0
         [0x23] 35:	movn #0
         [0x24] 36:	movi #0, adx
         [0x26] 38:	loadval ecx
         [0x27] 39:	rmov adx, ecx
         [0x28] 40:	movl 0
         [0x29] 41:	returnobj
         [0x2a] 42:	ret

func:@464 [std.os.gui#Window.Window] in file: lib/support/0.2.422//os//gui//win//Window.sharp:5:13: note:  
		public class Window {
		            ^


Window:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@465 [std.os#__SRT_Global.sysexec] in file: lib/support/0.2.422//os//system.sharp:3:4: note:  
		def sysexec(var[] cmd) : var {
		   ^


sysexec:
line: 3 [0x0] 0:	pushl 0
        [0x1] 1:	call @467 // <std.os#__SRT_Global.__os_exec(var[])>
        [0x2] 2:	loadval ebx
        [0x3] 3:	return_val ebx
        [0x4] 4:	ret

func:@466 [std.os#__SRT_Global._kbhit] in file: lib/support/0.2.422//os//system.sharp:7:4: note:  
		def _kbhit() : var {
		   ^


_kbhit:
line: 7 [0x0] 0:	int 0xe9
        [0x1] 1:	return_val cmt
        [0x2] 2:	ret

func:@467 [std.os#__SRT_Global.__os_exec] in file: lib/support/0.2.422//os//system.sharp:15:4: note:  
		def __os_exec(var[] cmd) : var {
		   ^


__os_exec:
line: 15 [0x0] 0:	pushl 0
         [0x1] 1:	int 0xe8
         [0x2] 2:	return_val cmt
         [0x3] 3:	ret

func:@468 [std#Printable.Printable] in file: lib/support/0.2.422//Printable.sharp:10:10: note:  
		interface Printable {
		         ^


Printable:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@469 [std#__SRT_Global.random] in file: lib/support/0.2.422//Random.sharp:5:4: note:  
		def random() : var {
		   ^


random:
line: 5 [0x0] 0:	call @294 // <std.kernel#__SRT_Global.__rand()>
        [0x1] 1:	loadval ebx
        [0x2] 2:	return_val ebx
        [0x3] 3:	ret

func:@470 [std#__SRT_Global.randomInt] in file: lib/support/0.2.422//Random.sharp:9:4: note:  
		def randomInt() : var {
		   ^


randomInt:
line: 9 [0x0] 0:	call @295 // <std.kernel#__SRT_Global.__randInt()>
        [0x1] 1:	loadval ebx
        [0x2] 2:	return_val ebx
        [0x3] 3:	ret

func:@471 [std#__SRT_Global.random] in file: lib/support/0.2.422//Random.sharp:13:4: note:  
		def random(var min, var max) : var {
		   ^


random:
line: 13 [0x0] 0:	ipushl #0
         [0x1] 1:	ipushl #1
         [0x2] 2:	call @292 // <std.kernel#__SRT_Global.__rand(var,var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@472 [std#__SRT_Global.randomInt] in file: lib/support/0.2.422//Random.sharp:17:4: note:  
		def randomInt(var min, var max) : var {
		   ^


randomInt:
line: 17 [0x0] 0:	ipushl #0
         [0x1] 1:	ipushl #1
         [0x2] 2:	call @293 // <std.kernel#__SRT_Global.__randInt(var,var)>
         [0x3] 3:	loadval ebx
         [0x4] 4:	return_val ebx
         [0x5] 5:	ret

func:@473 [std#__SRT_Global.pick] in file: lib/support/0.2.422//Random.sharp:21:4: note:  
		def pick(object[] arry) : object {
		   ^


pick:
line: 21 [0x0] 0:	pushl 0
line: 25 [0x1] 1:	istore 0
         [0x2] 2:	istore 1
         [0x3] 3:	movl 0
         [0x4] 4:	sizeof ebx
         [0x5] 5:	loadval ecx
         [0x6] 6:	sub ebx, ecx -> ebx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @472 // <std#__SRT_Global.randomInt(var,var)>
         [0xa] 10:	loadval ebx
         [0xb] 11:	movsl #0
         [0xc] 12:	chklen ebx
         [0xd] 13:	movnd ebx
         [0xe] 14:	pop
         [0xf] 15:	returnobj
         [0x10] 16:	ret
         [0x11] 17:	pushl 1
         [0x12] 18:	istore 0
         [0x13] 19:	istore 1
         [0x14] 20:	movl 1
         [0x15] 21:	sizeof ebx
         [0x16] 22:	loadval ecx
         [0x17] 23:	sub ebx, ecx -> ebx
         [0x19] 25:	rstore ebx
         [0x1a] 26:	call @472 // <std#__SRT_Global.randomInt(var,var)>
         [0x1b] 27:	loadval ebx
         [0x1c] 28:	movsl #0
         [0x1d] 29:	chklen ebx
         [0x1e] 30:	iaload_2 ebx, ebx
         [0x1f] 31:	pop
         [0x20] 32:	return_val ebx
         [0x21] 33:	ret

func:@474 [std#__SRT_Global.pick] in file: lib/support/0.2.422//Random.sharp:25:4: note:  
		def pick(var[] arry) : object {
		   ^


pick:
        [0x0] 0:	pushnil 
        [0x1] 1:	popobj
        [0x2] 2:	returnobj
        [0x3] 3:	ret

func:@475 [std#__SRT_Global.randomSeed] in file: lib/support/0.2.422//Random.sharp:29:4: note:  
		def randomSeed() : var {
		   ^


randomSeed:
line: 29 [0x0] 0:	call @297 // <std.kernel#__SRT_Global.__seed()>
         [0x1] 1:	loadval ebx
         [0x2] 2:	return_val ebx
         [0x3] 3:	ret

func:@476 [std#__SRT_Global.reset] in file: lib/support/0.2.422//Random.sharp:33:4: note:  
		def reset() : var {
		   ^


reset:
line: 33 [0x0] 0:	call @296 // <std.kernel#__SRT_Global.__reset()>
         [0x1] 1:	loadval ebx
         [0x2] 2:	return_val ebx
         [0x3] 3:	ret

func:@477 [std#__SRT_Global.seed] in file: lib/support/0.2.422//Random.sharp:37:4: note:  
		def seed(var sd) {
		   ^


seed:
line: 37 [0x0] 0:	ipushl #0
         [0x1] 1:	call @291 // <std.kernel#__SRT_Global.__seed(var)>
         [0x2] 2:	ret

func:@478 [std#RuntimeErr.RuntimeErr] in file: lib/support/0.2.422//RuntimeErr.sharp:10:24: note:  
		      public RuntimeErr(var[] message) {
		                       ^


RuntimeErr:
line: 10 [0x0] 0:	pushl 0
         [0x1] 1:	pushl 1
         [0x2] 2:	call @77 // <std#Exception.Exception(var[])>
         [0x3] 3:	pop
         [0x4] 4:	movl 0
         [0x5] 5:	returnobj
         [0x6] 6:	ret

func:@479 [std#RuntimeErr.RuntimeErr] in file: lib/support/0.2.422//RuntimeErr.sharp:14:24: note:  
		      public RuntimeErr(string message) {
		                       ^


RuntimeErr:
line: 14 [0x0] 0:	pushl 0
         [0x1] 1:	pushl 1
         [0x2] 2:	call @78 // <std#Exception.Exception(std#string)>
         [0x3] 3:	pop
         [0x4] 4:	movl 0
         [0x5] 5:	returnobj
         [0x6] 6:	ret

func:@480 [std#RuntimeErr.RuntimeErr] in file: lib/support/0.2.422//RuntimeErr.sharp:8:13: note:  
		public class RuntimeErr base Exception {
		            ^


RuntimeErr:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@481 [std#short.short] in file: lib/support/0.2.422//short.sharp:5:17: note:  
		    public short(var num) {
		                ^


short:
line: 5 [0x0] 0:	loadl ebx, fp+1
        [0x1] 1:	mov16 ebx, ebx
        [0x2] 2:	nop
        [0x3] 3:	rstore ebx
        [0x4] 4:	movl 0
        [0x5] 5:	movn #0
        [0x6] 6:	movi #0, adx
        [0x8] 8:	loadval ecx
        [0x9] 9:	rmov adx, ecx
        [0xa] 10:	movl 0
        [0xb] 11:	returnobj
        [0xc] 12:	ret

func:@482 [std#short.short] in file: lib/support/0.2.422//short.sharp:9:17: note:  
		    public short(integer num) {
		                ^


short:
line: 9 [0x0] 0:	pushl 0
        [0x1] 1:	movl 1
        [0x2] 2:	movn #0
        [0x3] 3:	movi #0, adx
        [0x5] 5:	iaload_2 ebx, adx
        [0x6] 6:	mov16 ebx, ebx
        [0x7] 7:	rstore ebx
        [0x8] 8:	call @119 // <std#integer.integer(var)>
        [0x9] 9:	pop
        [0xa] 10:	movl 0
        [0xb] 11:	returnobj
        [0xc] 12:	ret

func:@483 [std#short.$operator+] in file: lib/support/0.2.422//short.sharp:13:24: note:  
		    public def operator+(var num) : var {
		                       ^


$operator+:
line: 13 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	add ebx, egx -> ebx
         [0x9] 9:	mov16 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@484 [std#short.$operator+] in file: lib/support/0.2.422//short.sharp:17:24: note:  
		    public def operator+(integer num) : short {
		                       ^


$operator+:
line: 17 [0x0] 0:	new_class @45 // std#short
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @483 // <std#short.$operator+(var)>
         [0x9] 9:	call @481 // <std#short.short(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@485 [std#short.$operator-] in file: lib/support/0.2.422//short.sharp:21:24: note:  
		    public def operator-(var num) : var {
		                       ^


$operator-:
line: 21 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	sub ebx, egx -> ebx
         [0x9] 9:	mov16 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@486 [std#short.$operator-] in file: lib/support/0.2.422//short.sharp:25:24: note:  
		    public def operator-(integer num) : short {
		                       ^


$operator-:
line: 25 [0x0] 0:	new_class @45 // std#short
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @485 // <std#short.$operator-(var)>
         [0x9] 9:	call @481 // <std#short.short(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@487 [std#short.$operator*] in file: lib/support/0.2.422//short.sharp:29:24: note:  
		    public def operator*(var num) : var {
		                       ^


$operator*:
line: 29 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	mul ebx, egx -> ebx
         [0x9] 9:	mov16 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@488 [std#short.$operator!=] in file: lib/support/0.2.422//short.sharp:33:24: note:  
		    public def operator!=(var num) : var {
		                       ^


$operator!=:
line: 33 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	loadl egx, fp+1
         [0x6] 6:	tne ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@489 [std#short.$operator!=] in file: lib/support/0.2.422//short.sharp:37:24: note:  
		    public def operator!=(integer num) : var {
		                       ^


$operator!=:
line: 37 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	iaload_2 egx, adx
         [0x9] 9:	loadval ebx
         [0xa] 10:	tne ebx, egx
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@490 [std#short.$operator*] in file: lib/support/0.2.422//short.sharp:41:24: note:  
		    public def operator*(integer num) : short {
		                       ^


$operator*:
line: 41 [0x0] 0:	new_class @45 // std#short
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @487 // <std#short.$operator*(var)>
         [0x9] 9:	call @481 // <std#short.short(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@491 [std#short.$operator/] in file: lib/support/0.2.422//short.sharp:45:24: note:  
		    public def operator/(var num) : var {
		                       ^


$operator/:
line: 45 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	div ebx, egx -> ebx
         [0x9] 9:	mov16 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@492 [std#short.$operator/] in file: lib/support/0.2.422//short.sharp:49:24: note:  
		    public def operator/(integer num) : short {
		                       ^


$operator/:
line: 49 [0x0] 0:	new_class @45 // std#short
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @491 // <std#short.$operator/(var)>
         [0x9] 9:	call @481 // <std#short.short(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@493 [std#short.$operator=] in file: lib/support/0.2.422//short.sharp:53:24: note:  
		    public def operator=(var num) : var {
		                       ^


$operator=:
line: 53 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	mov16 ebx, ebx
         [0x2] 2:	nop
         [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #0
         [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@494 [std#short.$operator=] in file: lib/support/0.2.422//short.sharp:57:24: note:  
		    public def operator=(integer num) : short {
		                       ^


$operator=:
line: 57 [0x0] 0:	new_class @45 // std#short
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @493 // <std#short.$operator=(var)>
         [0x9] 9:	call @481 // <std#short.short(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@495 [std#short.$operator==] in file: lib/support/0.2.422//short.sharp:61:24: note:  
		    public def operator==(var num) : var {
		                       ^


$operator==:
line: 61 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	loadl egx, fp+1
         [0x6] 6:	test ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@496 [std#short.$operator==] in file: lib/support/0.2.422//short.sharp:65:24: note:  
		    public def operator==(integer num) : var {
		                       ^


$operator==:
line: 65 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	iaload_2 egx, adx
         [0x9] 9:	loadval ebx
         [0xa] 10:	test ebx, egx
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@497 [std#short.$operator<] in file: lib/support/0.2.422//short.sharp:69:24: note:  
		    public def operator<(var num) : var {
		                       ^


$operator<:
line: 69 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	lt ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@498 [std#short.$operator<] in file: lib/support/0.2.422//short.sharp:73:24: note:  
		    public def operator<(integer num) : var {
		                       ^


$operator<:
line: 73 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #0
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lt ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@499 [std#short.$operator>] in file: lib/support/0.2.422//short.sharp:77:24: note:  
		    public def operator>(var num) : var {
		                       ^


$operator>:
line: 77 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	gt ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@500 [std#short.$operator>] in file: lib/support/0.2.422//short.sharp:81:24: note:  
		    public def operator>(integer num) : var {
		                       ^


$operator>:
line: 81 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #0
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	gt ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@501 [std#short.$operator<=] in file: lib/support/0.2.422//short.sharp:85:24: note:  
		    public def operator<=(var num) : var {
		                       ^


$operator<=:
line: 85 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	lte ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@502 [std#short.$operator<=] in file: lib/support/0.2.422//short.sharp:89:24: note:  
		    public def operator<=(integer num) : var {
		                       ^


$operator<=:
line: 89 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #0
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lte ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@503 [std#short.$operator>=] in file: lib/support/0.2.422//short.sharp:93:24: note:  
		    public def operator>=(var num) : var {
		                       ^


$operator>=:
line: 93 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	gte ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@504 [std#short.$operator>=] in file: lib/support/0.2.422//short.sharp:97:24: note:  
		    public def operator>=(integer num) : var {
		                       ^


$operator>=:
line: 97 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #0
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	gte ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@505 [std#short.$operator++] in file: lib/support/0.2.422//short.sharp:101:24: note:  
		    public def operator++(var num) : var { // post inc i++
		                       ^


$operator++:
line: 101 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	smovr_2 ebx, fp+2
line: 102 [0x6] 6:	istore 1
          [0x7] 7:	movl 0
          [0x8] 8:	movn #0
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	loadval egx
          [0xb] 11:	add ebx, egx -> ebx
          [0xd] 13:	mov16 ebx, ebx
          [0xe] 14:	nop
          [0xf] 15:	rstore ebx
          [0x10] 16:	movl 0
          [0x11] 17:	movn #0
          [0x12] 18:	loadval ecx
          [0x13] 19:	rmov adx, ecx
line: 103 [0x14] 20:	loadl ebx, fp+2
          [0x15] 21:	return_val ebx
          [0x16] 22:	ret

func:@506 [std#short.$operator++] in file: lib/support/0.2.422//short.sharp:107:24: note:  
		    public def operator++() : var { // pre inc ++i
		                       ^


$operator++:
line: 107 [0x0] 0:	istore 1
          [0x1] 1:	movl 0
          [0x2] 2:	movn #0
          [0x3] 3:	movi #0, adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	loadval egx
          [0x7] 7:	add ebx, egx -> ebx
          [0x9] 9:	mov16 ebx, ebx
          [0xa] 10:	nop
          [0xb] 11:	rstore ebx
          [0xc] 12:	movl 0
          [0xd] 13:	movn #0
          [0xe] 14:	loadval ecx
          [0xf] 15:	rmov adx, ecx
          [0x10] 16:	return_val ebx
          [0x11] 17:	ret

func:@507 [std#short.$operator--] in file: lib/support/0.2.422//short.sharp:111:24: note:  
		    public def operator--(var num) : var {
		                       ^


$operator--:
line: 111 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	smovr_2 ebx, fp+2
line: 112 [0x6] 6:	istore 1
          [0x7] 7:	movl 0
          [0x8] 8:	movn #0
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	loadval egx
          [0xb] 11:	sub ebx, egx -> ebx
          [0xd] 13:	mov16 ebx, ebx
          [0xe] 14:	nop
          [0xf] 15:	rstore ebx
          [0x10] 16:	movl 0
          [0x11] 17:	movn #0
          [0x12] 18:	loadval ecx
          [0x13] 19:	rmov adx, ecx
line: 113 [0x14] 20:	loadl ebx, fp+2
          [0x15] 21:	return_val ebx
          [0x16] 22:	ret

func:@508 [std#short.$operator--] in file: lib/support/0.2.422//short.sharp:117:24: note:  
		    public def operator--() : var {
		                       ^


$operator--:
line: 117 [0x0] 0:	istore 1
          [0x1] 1:	movl 0
          [0x2] 2:	movn #0
          [0x3] 3:	movi #0, adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	loadval egx
          [0x7] 7:	sub ebx, egx -> ebx
          [0x9] 9:	mov16 ebx, ebx
          [0xa] 10:	nop
          [0xb] 11:	rstore ebx
          [0xc] 12:	movl 0
          [0xd] 13:	movn #0
          [0xe] 14:	loadval ecx
          [0xf] 15:	rmov adx, ecx
          [0x10] 16:	return_val ebx
          [0x11] 17:	ret

func:@509 [std#short.value] in file: lib/support/0.2.422//short.sharp:121:21: note:  
		    public def value() : var {
		                    ^


value:
line: 121 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@510 [std#short.toString] in file: lib/support/0.2.422//short.sharp:125:24: note:  
		    public def delegate::toString() : string {
		                       ^


toString:
line: 125 [0x0] 0:	new_class @47 // std#string
          [0x1] 1:	newstr @34 // ""
          [0x2] 2:	call @553 // <std#string.string(var[])>
          [0x3] 3:	movl 0
          [0x4] 4:	movn #0
          [0x5] 5:	movi #0, adx
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	rstore ebx
          [0x9] 9:	call @573 // <std#string.$operator+(var)>
          [0xa] 10:	movsl #0
          [0xb] 11:	returnobj
          [0xc] 12:	ret

func:@511 [std#short.short] in file: lib/support/0.2.422//short.sharp:3:13: note:  
		public class short base integer {
		            ^


short:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@512 [std#strbuf.strbuf] in file: lib/support/0.2.422//strbuf.sharp:18:22: note:  
		        public strbuf()
		                     ^


strbuf:
line: 19 [0x0] 0:	movi #128, ebx
         [0x2] 2:	nop
         [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #2
         [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
         [0xa] 10:	movi #255, ebx
         [0xc] 12:	nop
         [0xd] 13:	rstore ebx
         [0xe] 14:	movl 0
         [0xf] 15:	movn #1
         [0x10] 16:	movi #0, adx
         [0x12] 18:	loadval ecx
         [0x13] 19:	rmov adx, ecx
         [0x14] 20:	pushl 0
         [0x15] 21:	call @513 // <std#strbuf.setdefault()>
         [0x16] 22:	movl 0
         [0x17] 23:	returnobj
         [0x18] 24:	ret

func:@513 [std#strbuf.setdefault] in file: lib/support/0.2.422//strbuf.sharp:23:31: note:  
		        private def setdefault()
		                              ^


setdefault:
line: 24 [0x0] 0:	movl 0
         [0x1] 1:	movn #1
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	newarry ebx
         [0x6] 6:	movl 0
         [0x7] 7:	movn #0
         [0x8] 8:	popobj
line: 25 [0x9] 9:	movl 0
         [0xa] 10:	movn #1
         [0xb] 11:	nop
         [0xc] 12:	iaload_2 ebx, adx
         [0xd] 13:	rstore ebx
         [0xe] 14:	movl 0
         [0xf] 15:	movn #3
         [0x10] 16:	loadval ecx
         [0x11] 17:	rmov adx, ecx
line: 26 [0x12] 18:	movi #-1, ebx
         [0x14] 20:	nop
         [0x15] 21:	rstore ebx
         [0x16] 22:	movl 0
         [0x17] 23:	movn #4
         [0x18] 24:	movi #0, adx
         [0x1a] 26:	loadval ecx
         [0x1b] 27:	rmov adx, ecx
         [0x1c] 28:	ret

func:@514 [std#strbuf.strbuf] in file: lib/support/0.2.422//strbuf.sharp:30:22: note:  
		        public strbuf( var[] immstr )
		                     ^


strbuf:
line: 31 [0x0] 0:	movi #128, ebx
         [0x2] 2:	nop
         [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #2
line: 32 [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
line: 34 [0xa] 10:	movi #255, ebx
         [0xc] 12:	nop
         [0xd] 13:	rstore ebx
         [0xe] 14:	movl 0
         [0xf] 15:	movn #1
         [0x10] 16:	movi #0, adx
         [0x12] 18:	loadval ecx
         [0x13] 19:	rmov adx, ecx
         [0x14] 20:	movl 1
         [0x15] 21:	checknull
line: 35 [0x16] 22:	jne 10
         [0x17] 23:	pushl 0
         [0x18] 24:	call @513 // <std#strbuf.setdefault()>
         [0x19] 25:	goto @41
         [0x1a] 26:	pushl 1
         [0x1b] 27:	istore 0
line: 36 [0x1c] 28:	movl 1
         [0x1d] 29:	sizeof ebx
         [0x1e] 30:	rstore ebx
         [0x1f] 31:	call @614 // <std#__SRT_Global.memcpy(object,var,var)>
         [0x20] 32:	movsl #0
         [0x21] 33:	vcast 1
         [0x22] 34:	movl 0
         [0x23] 35:	movn #0
         [0x24] 36:	popobj
         [0x25] 37:	movl 1
         [0x26] 38:	sizeof ebx
         [0x27] 39:	nop
         [0x28] 40:	rstore ebx
         [0x29] 41:	movl 0
         [0x2a] 42:	movn #3
         [0x2b] 43:	movi #0, adx
         [0x2d] 45:	loadval ecx
         [0x2e] 46:	rmov adx, ecx
         [0x2f] 47:	movl 0
         [0x30] 48:	movn #3
         [0x31] 49:	nop
         [0x32] 50:	iaload_2 ebx, adx
         [0x33] 51:	rstore ebx
         [0x34] 52:	movl 0
         [0x35] 53:	movn #4
         [0x36] 54:	loadval ecx
         [0x37] 55:	rmov adx, ecx
         [0x38] 56:	nop
         [0x39] 57:	nop
         [0x3a] 58:	movl 0
         [0x3b] 59:	returnobj
         [0x3c] 60:	ret

func:@515 [std#strbuf.strbuf] in file: lib/support/0.2.422//strbuf.sharp:41:22: note:  
		        public strbuf( var ch )
		                     ^


strbuf:
line: 42 [0x0] 0:	movi #128, ebx
         [0x2] 2:	nop
line: 43 [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #2
         [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
         [0xa] 10:	movi #255, ebx
         [0xc] 12:	nop
         [0xd] 13:	rstore ebx
         [0xe] 14:	movl 0
         [0xf] 15:	movn #1
         [0x10] 16:	movi #0, adx
         [0x12] 18:	loadval ecx
         [0x13] 19:	rmov adx, ecx
         [0x14] 20:	pushl 0
         [0x15] 21:	call @513 // <std#strbuf.setdefault()>
         [0x16] 22:	pushl 0
         [0x17] 23:	ipushl #1
         [0x18] 24:	call @521 // <std#strbuf.append(var)>
         [0x19] 25:	pop
         [0x1a] 26:	movl 0
         [0x1b] 27:	returnobj
         [0x1c] 28:	ret

func:@516 [std#strbuf.strbuf] in file: lib/support/0.2.422//strbuf.sharp:47:22: note:  
		        public strbuf( char[] immstr )
		                     ^


strbuf:
line: 48 [0x0] 0:	movi #128, ebx
         [0x2] 2:	nop
line: 49 [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #2
         [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
line: 51 [0xa] 10:	movi #255, ebx
         [0xc] 12:	nop
         [0xd] 13:	rstore ebx
         [0xe] 14:	movl 0
line: 52 [0xf] 15:	movn #1
         [0x10] 16:	movi #0, adx
line: 53 [0x12] 18:	loadval ecx
         [0x13] 19:	rmov adx, ecx
         [0x14] 20:	pushl 0
         [0x15] 21:	call @513 // <std#strbuf.setdefault()>
         [0x16] 22:	movl 1
         [0x17] 23:	checknull
         [0x18] 24:	not cmt, cmt
         [0x19] 25:	jne 50
         [0x1a] 26:	movl 1
line: 54 [0x1b] 27:	sizeof ebx
         [0x1c] 28:	newarry ebx
         [0x1d] 29:	popl 2
         [0x1e] 30:	istorel 0, fp+3
         [0x20] 32:	istore 0
         [0x21] 33:	movl 1
         [0x22] 34:	smov ebx, sp+0
         [0x23] 35:	sizeof egx
         [0x24] 36:	lt ebx, egx
         [0x25] 37:	jne 44
line: 57 [0x26] 38:	movnd ebx
         [0x27] 39:	pushobj
         [0x28] 40:	popl 4
         [0x29] 41:	pushl 4
         [0x2a] 42:	call @121 // <std#integer.getValue()>
         [0x2b] 43:	loadval ebx
         [0x2c] 44:	rstore ebx
         [0x2d] 45:	movl 2
         [0x2e] 46:	loadl ebx, fp+3
         [0x2f] 47:	iaddl 1, @3
         [0x30] 48:	chklen ebx
         [0x31] 49:	loadval egx
         [0x32] 50:	rmov ebx, egx
         [0x33] 51:	isadd 1, sp+0
         [0x34] 52:	goto @20
         [0x35] 53:	pop
         [0x36] 54:	pushl 0
         [0x37] 55:	pushl 2
         [0x38] 56:	call @523 // <std#strbuf.append(var[])>
         [0x39] 57:	pop
         [0x3a] 58:	nop
         [0x3b] 59:	nop
         [0x3c] 60:	movl 0
         [0x3d] 61:	returnobj
         [0x3e] 62:	ret

func:@517 [std#strbuf.strbuf] in file: lib/support/0.2.422//strbuf.sharp:63:22: note:  
		        public strbuf(string str )
		                     ^


strbuf:
line: 64 [0x0] 0:	movi #128, ebx
         [0x2] 2:	nop
         [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #2
         [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
         [0xa] 10:	movi #255, ebx
         [0xc] 12:	nop
         [0xd] 13:	rstore ebx
         [0xe] 14:	movl 0
         [0xf] 15:	movn #1
         [0x10] 16:	movi #0, adx
         [0x12] 18:	loadval ecx
         [0x13] 19:	rmov adx, ecx
         [0x14] 20:	pushl 0
         [0x15] 21:	pushl 1
         [0x16] 22:	call @578 // <std#string.toArray()>
         [0x17] 23:	call @514 // <std#strbuf.strbuf(var[])>
         [0x18] 24:	pop
         [0x19] 25:	movl 0
         [0x1a] 26:	returnobj
         [0x1b] 27:	ret

func:@518 [std#strbuf.strbuf] in file: lib/support/0.2.422//strbuf.sharp:68:22: note:  
		        public strbuf( var[] immstr, var offset )
		                     ^


strbuf:
line: 69 [0x0] 0:	movi #128, ebx
         [0x2] 2:	nop
         [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #2
line: 70 [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
line: 72 [0xa] 10:	movi #255, ebx
         [0xc] 12:	nop
         [0xd] 13:	rstore ebx
         [0xe] 14:	movl 0
         [0xf] 15:	movn #1
         [0x10] 16:	movi #0, adx
         [0x12] 18:	loadval ecx
         [0x13] 19:	rmov adx, ecx
         [0x14] 20:	movl 1
         [0x15] 21:	checknull
line: 73 [0x16] 22:	jne 10
         [0x17] 23:	pushl 0
         [0x18] 24:	call @513 // <std#strbuf.setdefault()>
         [0x19] 25:	goto @41
         [0x1a] 26:	pushl 1
         [0x1b] 27:	ipushl #2
line: 74 [0x1c] 28:	movl 1
         [0x1d] 29:	sizeof ebx
         [0x1e] 30:	rstore ebx
         [0x1f] 31:	call @614 // <std#__SRT_Global.memcpy(object,var,var)>
         [0x20] 32:	movsl #0
         [0x21] 33:	vcast 1
         [0x22] 34:	movl 0
         [0x23] 35:	movn #0
         [0x24] 36:	popobj
         [0x25] 37:	movl 1
         [0x26] 38:	sizeof ebx
         [0x27] 39:	nop
         [0x28] 40:	rstore ebx
         [0x29] 41:	movl 0
         [0x2a] 42:	movn #3
         [0x2b] 43:	movi #0, adx
         [0x2d] 45:	loadval ecx
         [0x2e] 46:	rmov adx, ecx
         [0x2f] 47:	movl 0
         [0x30] 48:	movn #3
         [0x31] 49:	nop
         [0x32] 50:	iaload_2 ebx, adx
         [0x33] 51:	rstore ebx
         [0x34] 52:	movl 0
         [0x35] 53:	movn #4
         [0x36] 54:	loadval ecx
         [0x37] 55:	rmov adx, ecx
         [0x38] 56:	nop
         [0x39] 57:	nop
         [0x3a] 58:	movl 0
         [0x3b] 59:	returnobj
         [0x3c] 60:	ret

func:@519 [std#strbuf.strbuf] in file: lib/support/0.2.422//strbuf.sharp:79:22: note:  
		        public strbuf( var[] immstr, var offset, var endIndex )
		                     ^


strbuf:
line: 80 [0x0] 0:	movi #128, ebx
         [0x2] 2:	nop
         [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #2
line: 81 [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
line: 83 [0xa] 10:	movi #255, ebx
         [0xc] 12:	nop
         [0xd] 13:	rstore ebx
         [0xe] 14:	movl 0
         [0xf] 15:	movn #1
         [0x10] 16:	movi #0, adx
         [0x12] 18:	loadval ecx
         [0x13] 19:	rmov adx, ecx
         [0x14] 20:	movl 1
         [0x15] 21:	checknull
line: 84 [0x16] 22:	jne 10
         [0x17] 23:	pushl 0
         [0x18] 24:	call @513 // <std#strbuf.setdefault()>
         [0x19] 25:	goto @39
         [0x1a] 26:	pushl 1
line: 85 [0x1b] 27:	ipushl #2
         [0x1c] 28:	ipushl #3
         [0x1d] 29:	call @614 // <std#__SRT_Global.memcpy(object,var,var)>
         [0x1e] 30:	movsl #0
         [0x1f] 31:	vcast 1
         [0x20] 32:	movl 0
         [0x21] 33:	movn #0
         [0x22] 34:	popobj
         [0x23] 35:	movl 1
         [0x24] 36:	sizeof ebx
         [0x25] 37:	nop
         [0x26] 38:	rstore ebx
         [0x27] 39:	movl 0
         [0x28] 40:	movn #3
         [0x29] 41:	movi #0, adx
         [0x2b] 43:	loadval ecx
         [0x2c] 44:	rmov adx, ecx
         [0x2d] 45:	movl 0
         [0x2e] 46:	movn #3
         [0x2f] 47:	nop
         [0x30] 48:	iaload_2 ebx, adx
         [0x31] 49:	rstore ebx
         [0x32] 50:	movl 0
         [0x33] 51:	movn #4
         [0x34] 52:	loadval ecx
         [0x35] 53:	rmov adx, ecx
         [0x36] 54:	nop
         [0x37] 55:	nop
         [0x38] 56:	movl 0
         [0x39] 57:	returnobj
         [0x3a] 58:	ret

func:@520 [std#strbuf.replace] in file: lib/support/0.2.422//strbuf.sharp:90:27: note:  
		        public def replace( var pos, var replaceChar ) : strbuf
		                          ^


replace:
line: 91 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	sizeof egx
         [0x3] 3:	loadl ebx, fp+1
         [0x4] 4:	gte ebx, egx
         [0x5] 5:	jne 11
line: 92 [0x6] 6:	new_class @44 // std#RuntimeErr
         [0x7] 7:	newstr @53 // "Index out of bounds exception"
         [0x8] 8:	call @478 // <std#RuntimeErr.RuntimeErr(var[])>
         [0x9] 9:	throw 
         [0xa] 10:	nop
         [0xb] 11:	nop
line: 95 [0xc] 12:	ipushl #2
         [0xd] 13:	movl 0
         [0xe] 14:	movn #0
         [0xf] 15:	loadl ebx, fp+1
         [0x10] 16:	chklen ebx
         [0x11] 17:	loadval egx
         [0x12] 18:	rmov ebx, egx
line: 96 [0x13] 19:	movl 0
         [0x14] 20:	returnobj
         [0x15] 21:	ret

func:@521 [std#strbuf.append] in file: lib/support/0.2.422//strbuf.sharp:100:19: note:  
		        def append(var char) : strbuf
		                  ^


append:
line: 101 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	checknull
          [0x3] 3:	jne 7
line: 102 [0x4] 4:	pushl 0
          [0x5] 5:	call @513 // <std#strbuf.setdefault()>
          [0x6] 6:	goto @63
line: 105 [0x7] 7:	istore 1
          [0x8] 8:	movl 0
          [0x9] 9:	movn #4
          [0xa] 10:	movi #0, adx
          [0xc] 12:	iaload_2 ebx, adx
          [0xd] 13:	rstore ebx
          [0xe] 14:	movl 0
          [0xf] 15:	movn #3
          [0x10] 16:	iaload_2 ebx, adx
          [0x11] 17:	loadval egx
          [0x12] 18:	sub ebx, egx -> ebx
          [0x14] 20:	loadval ecx
          [0x15] 21:	lte ebx, ecx
          [0x16] 22:	jne 61
line: 106 [0x17] 23:	istore 3
          [0x18] 24:	movl 0
          [0x19] 25:	movn #0
          [0x1a] 26:	sizeof ebx
          [0x1b] 27:	loadval ecx
          [0x1c] 28:	shr ebx, ecx -> ebx
          [0x1e] 30:	rstore ebx
          [0x1f] 31:	movl 0
          [0x20] 32:	movn #0
          [0x21] 33:	sizeof ebx
          [0x22] 34:	loadval ecx
          [0x23] 35:	add ebx, ecx -> ebx
          [0x25] 37:	rstore ebx
          [0x26] 38:	movl 0
          [0x27] 39:	movn #2
          [0x28] 40:	movi #0, adx
          [0x2a] 42:	iaload_2 ebx, adx
          [0x2b] 43:	loadval egx
          [0x2c] 44:	add ebx, egx -> ebx
          [0x2e] 46:	rstore ebx
          [0x2f] 47:	nop
          [0x30] 48:	movl 0
          [0x31] 49:	movn #3
          [0x32] 50:	loadval ecx
          [0x33] 51:	rmov adx, ecx
line: 107 [0x34] 52:	movl 0
          [0x35] 53:	movn #0
          [0x36] 54:	pushobj
          [0x37] 55:	movl 0
          [0x38] 56:	movn #3
          [0x39] 57:	iaload_2 ebx, adx
          [0x3a] 58:	rstore ebx
          [0x3b] 59:	call @615 // <std#__SRT_Global.realloc(object,var)>
          [0x3c] 60:	nop
          [0x3d] 61:	nop
          [0x3e] 62:	nop
          [0x3f] 63:	nop
line: 111 [0x40] 64:	ipushl #1
          [0x41] 65:	movl 0
          [0x42] 66:	movn #0
          [0x43] 67:	pushobj
          [0x44] 68:	movl 0
          [0x45] 69:	movn #4
          [0x46] 70:	movi #0, adx
          [0x48] 72:	iaload_2 ebx, adx
          [0x49] 73:	inc ebx
          [0x4a] 74:	rmov adx, ebx
          [0x4b] 75:	movsl #0
          [0x4c] 76:	chklen ebx
          [0x4d] 77:	pop
          [0x4e] 78:	loadval egx
          [0x4f] 79:	rmov ebx, egx
line: 112 [0x50] 80:	movl 0
          [0x51] 81:	returnobj
          [0x52] 82:	ret

func:@522 [std#strbuf.append] in file: lib/support/0.2.422//strbuf.sharp:116:19: note:  
		        def append(char c) : strbuf
		                  ^


append:
line: 117 [0x0] 0:	pushl 0
          [0x1] 1:	pushl 1
          [0x2] 2:	call @121 // <std#integer.getValue()>
          [0x3] 3:	call @521 // <std#strbuf.append(var)>
          [0x4] 4:	movsl #0
          [0x5] 5:	returnobj
          [0x6] 6:	ret

func:@523 [std#strbuf.append] in file: lib/support/0.2.422//strbuf.sharp:121:19: note:  
		        def append(var[] immstr) : strbuf
		                  ^


append:
line: 122 [0x0] 0:	movl 1
          [0x1] 1:	checknull
          [0x2] 2:	jne 7
line: 122 [0x3] 3:	movl 0
          [0x4] 4:	returnobj
          [0x5] 5:	ret
          [0x6] 6:	nop
          [0x7] 7:	nop
line: 124 [0x8] 8:	movl 0
          [0x9] 9:	movn #4
          [0xa] 10:	movi #0, adx
          [0xc] 12:	iaload_2 ebx, adx
          [0xd] 13:	smovr_2 ebx, fp+2
line: 126 [0xe] 14:	movl 0
          [0xf] 15:	movn #0
          [0x10] 16:	checknull
          [0x11] 17:	jne 53
line: 127 [0x12] 18:	movl 0
          [0x13] 19:	movn #1
          [0x14] 20:	movi #0, adx
          [0x16] 22:	iaload_2 ebx, adx
          [0x17] 23:	rstore ebx
          [0x18] 24:	movl 1
          [0x19] 25:	sizeof ebx
          [0x1a] 26:	loadval egx
          [0x1b] 27:	add ebx, egx -> ebx
          [0x1d] 29:	rstore ebx
          [0x1e] 30:	nop
          [0x1f] 31:	movl 0
          [0x20] 32:	movn #3
          [0x21] 33:	loadval ecx
          [0x22] 34:	rmov adx, ecx
line: 128 [0x23] 35:	movi #-1, ebx
          [0x25] 37:	nop
          [0x26] 38:	rstore ebx
          [0x27] 39:	movl 0
          [0x28] 40:	movn #4
          [0x29] 41:	movi #0, adx
          [0x2b] 43:	loadval ecx
          [0x2c] 44:	rmov adx, ecx
line: 129 [0x2d] 45:	movl 0
          [0x2e] 46:	movn #3
          [0x2f] 47:	iaload_2 ebx, adx
          [0x30] 48:	newarry ebx
          [0x31] 49:	movl 0
          [0x32] 50:	movn #0
          [0x33] 51:	popobj
          [0x34] 52:	goto @118
line: 132 [0x35] 53:	movl 1
          [0x36] 54:	sizeof ebx
          [0x37] 55:	rstore ebx
          [0x38] 56:	movl 0
          [0x39] 57:	movn #4
          [0x3a] 58:	movi #0, adx
          [0x3c] 60:	iaload_2 ebx, adx
          [0x3d] 61:	rstore ebx
          [0x3e] 62:	movl 0
          [0x3f] 63:	movn #3
          [0x40] 64:	iaload_2 ebx, adx
          [0x41] 65:	loadval egx
          [0x42] 66:	sub ebx, egx -> ebx
          [0x44] 68:	loadval ecx
          [0x45] 69:	lte ebx, ecx
          [0x46] 70:	jne 116
line: 133 [0x47] 71:	movl 1
          [0x48] 72:	sizeof ebx
          [0x49] 73:	rstore ebx
          [0x4a] 74:	movl 0
          [0x4b] 75:	movn #0
          [0x4c] 76:	sizeof ebx
          [0x4d] 77:	loadval ecx
          [0x4e] 78:	add ebx, ecx -> ebx
          [0x50] 80:	rstore ebx
          [0x51] 81:	ipopl 3
line: 134 [0x52] 82:	movi #3, egx
          [0x54] 84:	loadl ebx, fp+3
          [0x55] 85:	shr ebx, egx -> ebx
          [0x57] 87:	rstore ebx
          [0x58] 88:	loadl ebx, fp+3
          [0x59] 89:	loadval egx
          [0x5a] 90:	add ebx, egx -> ebx
          [0x5c] 92:	rstore ebx
          [0x5d] 93:	movl 0
          [0x5e] 94:	movn #2
          [0x5f] 95:	movi #0, adx
          [0x61] 97:	iaload_2 ebx, adx
          [0x62] 98:	loadval egx
          [0x63] 99:	add ebx, egx -> ebx
          [0x65] 101:	rstore ebx
          [0x66] 102:	nop
          [0x67] 103:	movl 0
          [0x68] 104:	movn #3
          [0x69] 105:	loadval ecx
          [0x6a] 106:	rmov adx, ecx
line: 135 [0x6b] 107:	movl 0
          [0x6c] 108:	movn #0
          [0x6d] 109:	pushobj
          [0x6e] 110:	movl 0
          [0x6f] 111:	movn #3
          [0x70] 112:	iaload_2 ebx, adx
          [0x71] 113:	rstore ebx
          [0x72] 114:	call @615 // <std#__SRT_Global.realloc(object,var)>
          [0x73] 115:	nop
          [0x74] 116:	nop
          [0x75] 117:	nop
          [0x76] 118:	nop
line: 139 [0x77] 119:	istorel 0, fp+4
          [0x79] 121:	movl 1
          [0x7a] 122:	sizeof egx
          [0x7b] 123:	loadl ebx, fp+4
          [0x7c] 124:	lt ebx, egx
          [0x7d] 125:	jne 142
line: 141 [0x7e] 126:	movl 1
          [0x7f] 127:	loadl ebx, fp+4
          [0x80] 128:	chklen ebx
          [0x81] 129:	iaload_2 ebx, ebx
          [0x82] 130:	mov16 ebx, ebx
          [0x83] 131:	rstore ebx
          [0x84] 132:	movl 0
          [0x85] 133:	movn #0
          [0x86] 134:	loadl ebx, fp+2
          [0x87] 135:	iaddl 1, @2
          [0x88] 136:	inc ebx
          [0x89] 137:	chklen ebx
          [0x8a] 138:	loadval egx
          [0x8b] 139:	rmov ebx, egx
          [0x8c] 140:	iaddl 1, @4
          [0x8d] 141:	goto @121
line: 144 [0x8e] 142:	loadl ebx, fp+2
          [0x8f] 143:	nop
          [0x90] 144:	rstore ebx
          [0x91] 145:	movl 0
          [0x92] 146:	movn #4
          [0x93] 147:	movi #0, adx
          [0x95] 149:	loadval ecx
          [0x96] 150:	rmov adx, ecx
line: 145 [0x97] 151:	movl 0
          [0x98] 152:	returnobj
          [0x99] 153:	ret

func:@524 [std#strbuf.at] in file: lib/support/0.2.422//strbuf.sharp:149:22: note:  
		        public def at( var pos ) : var
		                     ^


at:
line: 150 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	sizeof egx
          [0x3] 3:	loadl ebx, fp+1
          [0x4] 4:	gte ebx, egx
          [0x5] 5:	jne 22
line: 151 [0x6] 6:	new_class @44 // std#RuntimeErr
          [0x7] 7:	new_class @47 // std#string
          [0x8] 8:	newstr @54 // "Index out of bounds Array: size "
          [0x9] 9:	call @553 // <std#string.string(var[])>
          [0xa] 10:	movl 0
          [0xb] 11:	movn #0
          [0xc] 12:	sizeof ebx
          [0xd] 13:	rstore ebx
          [0xe] 14:	call @573 // <std#string.$operator+(var)>
          [0xf] 15:	newstr @55 // " at index pos "
          [0x10] 16:	call @566 // <std#string.$operator+(var[])>
          [0x11] 17:	ipushl #1
          [0x12] 18:	call @573 // <std#string.$operator+(var)>
          [0x13] 19:	call @479 // <std#RuntimeErr.RuntimeErr(std#string)>
          [0x14] 20:	throw 
          [0x15] 21:	nop
          [0x16] 22:	nop
line: 155 [0x17] 23:	movl 0
          [0x18] 24:	movn #0
          [0x19] 25:	loadl ebx, fp+1
          [0x1a] 26:	chklen ebx
          [0x1b] 27:	iaload_2 ebx, ebx
          [0x1c] 28:	return_val ebx
          [0x1d] 29:	ret

func:@525 [std#strbuf.fmt] in file: lib/support/0.2.422//strbuf.sharp:159:30: note:  
		        public static def fmt( var _fmt ) {
		                             ^


fmt:
line: 159 [0x0] 0:	loadl ebx, fp+0
          [0x1] 1:	nop
          [0x2] 2:	rstore ebx
          [0x3] 3:	movg @46 // @std#strbuf
          [0x4] 4:	movn #5
          [0x5] 5:	movi #0, adx
          [0x7] 7:	loadval ecx
          [0x8] 8:	rmov adx, ecx
line: 160 [0x9] 9:	ipushl #0
          [0xa] 10:	movi #102, egx
          [0xc] 12:	loadval ebx
          [0xd] 13:	tne ebx, egx
          [0xe] 14:	movr ebx, cmt
          [0xf] 15:	cmp ebx, 1
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	skne 9 // pc = 26
          [0x12] 18:	istore 1
          [0x13] 19:	ipushl #0
          [0x14] 20:	movi #70, egx
          [0x16] 22:	loadval ebx
          [0x17] 23:	tne ebx, egx
          [0x18] 24:	movr ebx, cmt
          [0x19] 25:	loadval ecx
          [0x1a] 26:	and ecx, ebx
          [0x1b] 27:	jne 39
line: 160 [0x1c] 28:	movi #0, ebx
          [0x1e] 30:	nop
          [0x1f] 31:	rstore ebx
          [0x20] 32:	movg @46 // @std#strbuf
          [0x21] 33:	movn #6
          [0x22] 34:	movi #0, adx
          [0x24] 36:	loadval ecx
          [0x25] 37:	rmov adx, ecx
          [0x26] 38:	nop
          [0x27] 39:	nop
          [0x28] 40:	ret

func:@526 [std#strbuf.precision] in file: lib/support/0.2.422//strbuf.sharp:164:36: note:  
		        public static def precision( var prec ) {
		                                   ^


precision:
line: 164 [0x0] 0:	movi #0, egx
          [0x2] 2:	loadl ebx, fp+0
          [0x3] 3:	lt ebx, egx
          [0x4] 4:	jne 14
line: 165 [0x5] 5:	new_class @11 // std#IllegalArgumentException
          [0x6] 6:	new_class @47 // std#string
          [0x7] 7:	newstr @56 // "invalid precision: "
          [0x8] 8:	call @553 // <std#string.string(var[])>
          [0x9] 9:	ipushl #0
          [0xa] 10:	call @573 // <std#string.$operator+(var)>
          [0xb] 11:	call @81 // <std#IllegalArgumentException.IllegalArgumentException(std#string)>
          [0xc] 12:	throw 
          [0xd] 13:	nop
          [0xe] 14:	nop
line: 166 [0xf] 15:	loadl ebx, fp+0
          [0x10] 16:	nop
          [0x11] 17:	rstore ebx
          [0x12] 18:	movg @46 // @std#strbuf
          [0x13] 19:	movn #6
          [0x14] 20:	movi #0, adx
          [0x16] 22:	loadval ecx
          [0x17] 23:	rmov adx, ecx
          [0x18] 24:	ret

func:@527 [std#strbuf.$operator+] in file: lib/support/0.2.422//strbuf.sharp:170:28: note:  
		        public def operator+( var[] immstr ) : string
		                           ^


$operator+:
line: 171 [0x0] 0:	new_class @47 // std#string
          [0x1] 1:	movl 0
          [0x2] 2:	movn #0
          [0x3] 3:	pushobj
          [0x4] 4:	call @553 // <std#string.string(var[])>
          [0x5] 5:	popl 2
          [0x6] 6:	movl 1
line: 172 [0x7] 7:	checknull
          [0x8] 8:	not cmt, cmt
          [0x9] 9:	jne 17
line: 173 [0xa] 10:	pushl 2
          [0xb] 11:	pushl 1
          [0xc] 12:	call @576 // <std#string.$operator+=(var[])>
          [0xd] 13:	movsl #0
          [0xe] 14:	returnobj
          [0xf] 15:	ret
          [0x10] 16:	goto @24
line: 175 [0x11] 17:	pushl 2
          [0x12] 18:	newstr @49 // "null"
          [0x13] 19:	call @576 // <std#string.$operator+=(var[])>
          [0x14] 20:	movsl #0
          [0x15] 21:	returnobj
          [0x16] 22:	ret
          [0x17] 23:	nop
          [0x18] 24:	nop
          [0x19] 25:	pushnil 
          [0x1a] 26:	popobj
          [0x1b] 27:	returnobj
          [0x1c] 28:	ret

func:@528 [std#strbuf.$operator+] in file: lib/support/0.2.422//strbuf.sharp:179:28: note:  
		        public def operator+( Printable o ) : string
		                           ^


$operator+:
line: 180 [0x0] 0:	new_class @47 // std#string
          [0x1] 1:	movl 0
          [0x2] 2:	movn #0
          [0x3] 3:	pushobj
          [0x4] 4:	call @553 // <std#string.string(var[])>
          [0x5] 5:	popl 2
          [0x6] 6:	pushl 1
line: 181 [0x7] 7:	invoke_delegate 4, 0
          [0x8] 8:	movsl #0
          [0x9] 9:	movn #0
          [0xa] 10:	pushobj
          [0xb] 11:	popl 3
          [0xc] 12:	movl 1
line: 182 [0xd] 13:	checknull
          [0xe] 14:	not ebx, cmt
          [0xf] 15:	cmp ebx, 1
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	skne 6 // pc = 23
          [0x12] 18:	istore 1
          [0x13] 19:	movl 3
          [0x14] 20:	checknull
          [0x15] 21:	not ebx, cmt
          [0x16] 22:	loadval ecx
          [0x17] 23:	and ecx, ebx
          [0x18] 24:	jne 32
line: 183 [0x19] 25:	pushl 2
          [0x1a] 26:	pushl 3
          [0x1b] 27:	call @576 // <std#string.$operator+=(var[])>
          [0x1c] 28:	movsl #0
          [0x1d] 29:	returnobj
          [0x1e] 30:	ret
          [0x1f] 31:	goto @39
line: 185 [0x20] 32:	pushl 2
          [0x21] 33:	newstr @49 // "null"
          [0x22] 34:	call @576 // <std#string.$operator+=(var[])>
          [0x23] 35:	movsl #0
          [0x24] 36:	returnobj
          [0x25] 37:	ret
          [0x26] 38:	nop
          [0x27] 39:	nop
          [0x28] 40:	pushnil 
          [0x29] 41:	popobj
          [0x2a] 42:	returnobj
          [0x2b] 43:	ret

func:@529 [std#strbuf.$operator==] in file: lib/support/0.2.422//strbuf.sharp:189:28: note:  
		        public def operator==( string str ) : var
		                           ^


$operator==:
line: 190 [0x0] 0:	pushl 1
          [0x1] 1:	call @589 // <std#string.size()>
          [0x2] 2:	movl 0
          [0x3] 3:	movn #0
          [0x4] 4:	sizeof egx
          [0x5] 5:	loadval ebx
          [0x6] 6:	tne ebx, egx
          [0x7] 7:	jne 13
line: 191 [0x8] 8:	movi #0, ebx
          [0xa] 10:	return_val ebx
          [0xb] 11:	ret
          [0xc] 12:	nop
          [0xd] 13:	nop
line: 194 [0xe] 14:	istorel 0, fp+2
line: 195 [0x10] 16:	istore 0
          [0x11] 17:	movl 0
          [0x12] 18:	movn #0
          [0x13] 19:	smov ebx, sp+0
          [0x14] 20:	sizeof egx
          [0x15] 21:	lt ebx, egx
          [0x16] 22:	jne 43
          [0x17] 23:	iaload_2 ebx, ebx
          [0x18] 24:	smovr_2 ebx, fp+3
line: 196 [0x19] 25:	ipushl #3
          [0x1a] 26:	pushl 1
          [0x1b] 27:	loadl ebx, fp+2
          [0x1c] 28:	iaddl 1, @2
          [0x1d] 29:	rstore ebx
          [0x1e] 30:	call @563 // <std#string.at(var)>
          [0x1f] 31:	loadval egx
          [0x20] 32:	loadval ebx
          [0x21] 33:	tne ebx, egx
          [0x22] 34:	jne 40
line: 197 [0x23] 35:	movi #0, ebx
          [0x25] 37:	return_val ebx
          [0x26] 38:	ret
          [0x27] 39:	nop
          [0x28] 40:	nop
          [0x29] 41:	isadd 1, sp+0
          [0x2a] 42:	goto @17
          [0x2b] 43:	pop
line: 201 [0x2c] 44:	movi #1, ebx
          [0x2e] 46:	return_val ebx
          [0x2f] 47:	ret

func:@530 [std#strbuf.$operator!=] in file: lib/support/0.2.422//strbuf.sharp:205:28: note:  
		        public def operator!=( string str ) : var {
		                           ^


$operator!=:
line: 205 [0x0] 0:	pushl 0
          [0x1] 1:	pushl 1
          [0x2] 2:	call @529 // <std#strbuf.$operator==(std#string)>
          [0x3] 3:	loadval ebx
          [0x4] 4:	not ebx, ebx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@531 [std#strbuf.$operator==] in file: lib/support/0.2.422//strbuf.sharp:209:28: note:  
		        public def operator==( var[] str ) : var
		                           ^


$operator==:
line: 210 [0x0] 0:	movl 1
          [0x1] 1:	sizeof ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #0
          [0x5] 5:	sizeof egx
          [0x6] 6:	loadval ebx
          [0x7] 7:	tne ebx, egx
          [0x8] 8:	jne 14
line: 211 [0x9] 9:	movi #0, ebx
          [0xb] 11:	return_val ebx
          [0xc] 12:	ret
          [0xd] 13:	nop
          [0xe] 14:	nop
line: 214 [0xf] 15:	istorel 0, fp+2
line: 215 [0x11] 17:	istore 0
          [0x12] 18:	movl 0
          [0x13] 19:	movn #0
          [0x14] 20:	smov ebx, sp+0
          [0x15] 21:	sizeof egx
          [0x16] 22:	lt ebx, egx
          [0x17] 23:	jne 43
          [0x18] 24:	iaload_2 ebx, ebx
          [0x19] 25:	smovr_2 ebx, fp+3
line: 216 [0x1a] 26:	ipushl #3
          [0x1b] 27:	movl 1
          [0x1c] 28:	loadl ebx, fp+2
          [0x1d] 29:	iaddl 1, @2
          [0x1e] 30:	chklen ebx
          [0x1f] 31:	iaload_2 egx, ebx
          [0x20] 32:	loadval ebx
          [0x21] 33:	tne ebx, egx
          [0x22] 34:	jne 40
line: 217 [0x23] 35:	movi #0, ebx
          [0x25] 37:	return_val ebx
          [0x26] 38:	ret
          [0x27] 39:	nop
          [0x28] 40:	nop
          [0x29] 41:	isadd 1, sp+0
          [0x2a] 42:	goto @18
          [0x2b] 43:	pop
line: 221 [0x2c] 44:	movi #1, ebx
          [0x2e] 46:	return_val ebx
          [0x2f] 47:	ret

func:@532 [std#strbuf.$operator!=] in file: lib/support/0.2.422//strbuf.sharp:225:28: note:  
		        public def operator!=( var[] str ) : var {
		                           ^


$operator!=:
line: 225 [0x0] 0:	pushl 0
          [0x1] 1:	new_class @47 // std#string
          [0x2] 2:	pushl 1
          [0x3] 3:	call @553 // <std#string.string(var[])>
          [0x4] 4:	call @529 // <std#strbuf.$operator==(std#string)>
          [0x5] 5:	loadval ebx
          [0x6] 6:	not ebx, ebx
          [0x7] 7:	return_val ebx
          [0x8] 8:	ret

func:@533 [std#strbuf.$operator=] in file: lib/support/0.2.422//strbuf.sharp:229:28: note:  
		        public def operator=( var[] immstr )
		                           ^


$operator=:
line: 230 [0x0] 0:	pushl 0
          [0x1] 1:	call @534 // <std#strbuf.clear()>
line: 231 [0x2] 2:	pushl 0
          [0x3] 3:	pushl 1
          [0x4] 4:	call @523 // <std#strbuf.append(var[])>
          [0x5] 5:	pop
          [0x6] 6:	ret

func:@534 [std#strbuf.clear] in file: lib/support/0.2.422//strbuf.sharp:235:26: note:  
		        private def clear()
		                         ^


clear:
line: 236 [0x0] 0:	movl 0
          [0x1] 1:	movn #1
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 egx, adx
          [0x5] 5:	movl 0
          [0x6] 6:	movn #3
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	gt ebx, egx
          [0x9] 9:	jne 13
line: 237 [0xa] 10:	pushl 0
          [0xb] 11:	call @513 // <std#strbuf.setdefault()>
          [0xc] 12:	nop
          [0xd] 13:	nop
line: 240 [0xe] 14:	movi #-1, ebx
          [0x10] 16:	nop
          [0x11] 17:	rstore ebx
          [0x12] 18:	movl 0
          [0x13] 19:	movn #4
          [0x14] 20:	movi #0, adx
          [0x16] 22:	loadval ecx
          [0x17] 23:	rmov adx, ecx
          [0x18] 24:	ret

func:@535 [std#strbuf.$operator+] in file: lib/support/0.2.422//strbuf.sharp:244:28: note:  
		        public def operator+( var num ) : string
		                           ^


$operator+:
line: 245 [0x0] 0:	new_class @47 // std#string
          [0x1] 1:	movl 0
          [0x2] 2:	movn #0
          [0x3] 3:	pushobj
          [0x4] 4:	call @553 // <std#string.string(var[])>
          [0x5] 5:	popl 2
          [0x6] 6:	pushl 2
line: 246 [0x7] 7:	ipushl #1
          [0x8] 8:	call @541 // <std#strbuf.parse(var)>
          [0x9] 9:	call @578 // <std#string.toArray()>
          [0xa] 10:	call @576 // <std#string.$operator+=(var[])>
          [0xb] 11:	pop
line: 248 [0xc] 12:	movl 2
          [0xd] 13:	returnobj
          [0xe] 14:	ret

func:@536 [std#strbuf.$operator+=] in file: lib/support/0.2.422//strbuf.sharp:252:28: note:  
		        public def operator+=( var num ) : strbuf
		                           ^


$operator+=:
line: 253 [0x0] 0:	pushl 0
          [0x1] 1:	ipushl #1
          [0x2] 2:	call @521 // <std#strbuf.append(var)>
          [0x3] 3:	movsl #0
          [0x4] 4:	returnobj
          [0x5] 5:	ret

func:@537 [std#strbuf.$operator+=] in file: lib/support/0.2.422//strbuf.sharp:257:28: note:  
		        public def operator+=( Printable o ) : strbuf
		                           ^


$operator+=:
line: 258 [0x0] 0:	pushl 1
          [0x1] 1:	invoke_delegate 4, 0
          [0x2] 2:	popl 2
          [0x3] 3:	movl 2
line: 259 [0x4] 4:	checknull
          [0x5] 5:	not ebx, cmt
          [0x6] 6:	cmp ebx, 1
          [0x7] 7:	movr ebx, cmt
          [0x8] 8:	skne 9 // pc = 17
          [0x9] 9:	istore 1
          [0xa] 10:	pushl 2
          [0xb] 11:	call @590 // <std#string.getData()>
          [0xc] 12:	movsl #0
          [0xd] 13:	pop
          [0xe] 14:	checknull
          [0xf] 15:	not ebx, cmt
          [0x10] 16:	loadval ecx
          [0x11] 17:	and ecx, ebx
          [0x12] 18:	jne 27
line: 260 [0x13] 19:	pushl 0
          [0x14] 20:	pushl 2
          [0x15] 21:	call @590 // <std#string.getData()>
          [0x16] 22:	call @523 // <std#strbuf.append(var[])>
          [0x17] 23:	movsl #0
          [0x18] 24:	returnobj
          [0x19] 25:	ret
          [0x1a] 26:	goto @34
line: 262 [0x1b] 27:	pushl 0
          [0x1c] 28:	newstr @49 // "null"
          [0x1d] 29:	call @523 // <std#strbuf.append(var[])>
          [0x1e] 30:	movsl #0
          [0x1f] 31:	returnobj
          [0x20] 32:	ret
          [0x21] 33:	nop
          [0x22] 34:	nop
          [0x23] 35:	pushnil 
          [0x24] 36:	popobj
          [0x25] 37:	returnobj
          [0x26] 38:	ret

func:@538 [std#strbuf.$operator+=] in file: lib/support/0.2.422//strbuf.sharp:266:28: note:  
		        public def operator+=( var[] immstr ) : strbuf
		                           ^


$operator+=:
line: 267 [0x0] 0:	pushl 0
          [0x1] 1:	pushl 1
          [0x2] 2:	call @523 // <std#strbuf.append(var[])>
          [0x3] 3:	movsl #0
          [0x4] 4:	returnobj
          [0x5] 5:	ret

func:@539 [std#strbuf.$operator+=] in file: lib/support/0.2.422//strbuf.sharp:271:28: note:  
		        public def operator+=( string str ) : strbuf
		                           ^


$operator+=:
line: 272 [0x0] 0:	pushl 0
          [0x1] 1:	pushl 1
          [0x2] 2:	call @578 // <std#string.toArray()>
          [0x3] 3:	call @523 // <std#strbuf.append(var[])>
          [0x4] 4:	movsl #0
          [0x5] 5:	returnobj
          [0x6] 6:	ret

func:@540 [std#strbuf.toArray] in file: lib/support/0.2.422//strbuf.sharp:276:27: note:  
		        public def toArray() : var[]
		                          ^


toArray:
line: 277 [0x0] 0:	movl 0
          [0x1] 1:	movn #4
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movi #-1, egx
          [0x8] 8:	loadval ebx
          [0x9] 9:	test ebx, egx
          [0xa] 10:	jne 15
line: 277 [0xb] 11:	movl 0
          [0xc] 12:	del
          [0xd] 13:	ret
          [0xe] 14:	nop
          [0xf] 15:	nop
line: 278 [0x10] 16:	movl 0
          [0x11] 17:	movn #0
          [0x12] 18:	pushobj
          [0x13] 19:	movl 0
          [0x14] 20:	movn #4
          [0x15] 21:	movi #0, adx
          [0x17] 23:	iaload_2 ebx, adx
          [0x18] 24:	rstore ebx
          [0x19] 25:	call @612 // <std#__SRT_Global.copyOf(object,var)>
          [0x1a] 26:	movsl #0
          [0x1b] 27:	vcast 1
          [0x1c] 28:	movsl #0
          [0x1d] 29:	returnobj
          [0x1e] 30:	ret

func:@541 [std#strbuf.parse] in file: lib/support/0.2.422//strbuf.sharp:282:32: note:  
		        public static def parse( var number ) : string
		                               ^


parse:
line: 283 [0x0] 0:	new_class @47 // std#string
          [0x1] 1:	movg @46 // @std#strbuf
          [0x2] 2:	movn #5
          [0x3] 3:	movi #0, adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	rstore ebx
          [0x7] 7:	ipushl #0
          [0x8] 8:	movg @46 // @std#strbuf
          [0x9] 9:	movn #6
          [0xa] 10:	iaload_2 ebx, adx
          [0xb] 11:	rstore ebx
          [0xc] 12:	call @619 // <std#__SRT_Global.snprintf(var,var,var)>
          [0xd] 13:	call @553 // <std#string.string(var[])>
          [0xe] 14:	movsl #0
          [0xf] 15:	returnobj
          [0x10] 16:	ret

func:@542 [std#strbuf.substring] in file: lib/support/0.2.422//strbuf.sharp:287:29: note:  
		        public def substring(var startIndex) : string {
		                            ^


substring:
line: 287 [0x0] 0:	pushl 0
          [0x1] 1:	call @551 // <std#strbuf.size()>
          [0x2] 2:	loadval egx
          [0x3] 3:	loadl ebx, fp+1
          [0x4] 4:	gte ebx, egx
          [0x5] 5:	movr ebx, cmt
          [0x6] 6:	movr ebx, cmt
          [0x7] 7:	skpe 6 // pc = 13
          [0x8] 8:	movi #0, egx
          [0xa] 10:	loadl ebx, fp+1
          [0xb] 11:	lt ebx, egx
          [0xc] 12:	movr ebx, cmt
          [0xd] 13:	cmp ebx, 1
          [0xe] 14:	jne 22
line: 288 [0xf] 15:	new_class @47 // std#string
          [0x10] 16:	newstr @34 // ""
          [0x11] 17:	call @553 // <std#string.string(var[])>
          [0x12] 18:	movsl #0
          [0x13] 19:	returnobj
          [0x14] 20:	ret
          [0x15] 21:	nop
          [0x16] 22:	nop
line: 291 [0x17] 23:	new_class @47 // std#string
          [0x18] 24:	call @593 // <std#string.string()>
          [0x19] 25:	popl 2
          [0x1a] 26:	pushl 2
line: 292 [0x1b] 27:	movl 0
          [0x1c] 28:	movn #0
          [0x1d] 29:	pushobj
          [0x1e] 30:	ipushl #1
          [0x1f] 31:	istore 1
          [0x20] 32:	pushl 0
          [0x21] 33:	call @551 // <std#strbuf.size()>
          [0x22] 34:	loadval ebx
          [0x23] 35:	loadval ecx
          [0x24] 36:	sub ebx, ecx -> ebx
          [0x26] 38:	rstore ebx
          [0x27] 39:	call @614 // <std#__SRT_Global.memcpy(object,var,var)>
          [0x28] 40:	movsl #0
          [0x29] 41:	vcast 1
          [0x2a] 42:	call @572 // <std#string.$operator=(var[])>
line: 293 [0x2b] 43:	movl 2
          [0x2c] 44:	returnobj
          [0x2d] 45:	ret

func:@543 [std#strbuf.substring] in file: lib/support/0.2.422//strbuf.sharp:297:29: note:  
		        public def substring(var startIndex, var stopIndex) : string {
		                            ^


substring:
line: 297 [0x0] 0:	pushl 0
          [0x1] 1:	call @551 // <std#strbuf.size()>
          [0x2] 2:	loadval egx
          [0x3] 3:	loadl ebx, fp+1
          [0x4] 4:	gte ebx, egx
          [0x5] 5:	movr ebx, cmt
          [0x6] 6:	movr ebx, cmt
          [0x7] 7:	skpe 6 // pc = 13
          [0x8] 8:	movi #0, egx
          [0xa] 10:	loadl ebx, fp+1
          [0xb] 11:	lt ebx, egx
          [0xc] 12:	movr ebx, cmt
          [0xd] 13:	cmp ebx, 1
          [0xe] 14:	jne 22
line: 298 [0xf] 15:	new_class @47 // std#string
          [0x10] 16:	newstr @34 // ""
          [0x11] 17:	call @553 // <std#string.string(var[])>
          [0x12] 18:	movsl #0
          [0x13] 19:	returnobj
          [0x14] 20:	ret
          [0x15] 21:	nop
          [0x16] 22:	nop
line: 299 [0x17] 23:	loadl egx, fp+1
          [0x18] 24:	loadl ebx, fp+2
          [0x19] 25:	lt ebx, egx
          [0x1a] 26:	jne 40
line: 300 [0x1b] 27:	new_class @11 // std#IllegalArgumentException
          [0x1c] 28:	new_class @47 // std#string
          [0x1d] 29:	newstr @57 // "stopIndex: "
          [0x1e] 30:	call @553 // <std#string.string(var[])>
          [0x1f] 31:	ipushl #2
          [0x20] 32:	call @573 // <std#string.$operator+(var)>
          [0x21] 33:	newstr @58 // " cannot be less than startIndex: "
          [0x22] 34:	call @566 // <std#string.$operator+(var[])>
          [0x23] 35:	ipushl #1
          [0x24] 36:	call @573 // <std#string.$operator+(var)>
          [0x25] 37:	call @81 // <std#IllegalArgumentException.IllegalArgumentException(std#string)>
          [0x26] 38:	throw 
          [0x27] 39:	nop
          [0x28] 40:	nop
line: 304 [0x29] 41:	new_class @47 // std#string
          [0x2a] 42:	call @593 // <std#string.string()>
          [0x2b] 43:	popl 3
          [0x2c] 44:	pushl 3
line: 305 [0x2d] 45:	movl 0
          [0x2e] 46:	movn #0
          [0x2f] 47:	pushobj
          [0x30] 48:	ipushl #1
          [0x31] 49:	ipushl #2
          [0x32] 50:	call @614 // <std#__SRT_Global.memcpy(object,var,var)>
          [0x33] 51:	movsl #0
          [0x34] 52:	vcast 1
          [0x35] 53:	call @572 // <std#string.$operator=(var[])>
line: 306 [0x36] 54:	movl 3
          [0x37] 55:	returnobj
          [0x38] 56:	ret

func:@544 [std#strbuf.parseInt] in file: lib/support/0.2.422//strbuf.sharp:310:35: note:  
		        public static def parseInt(string s) : var {
		                                  ^


parseInt:
line: 310 [0x0] 0:	istorel 0, fp+1
line: 311 [0x2] 2:	istorel 0, fp+2
line: 312 [0x4] 4:	istorel 0, fp+3
line: 313 [0x6] 6:	pushl 0
          [0x7] 7:	call @589 // <std#string.size()>
          [0x8] 8:	ipopl 4
line: 314 [0x9] 9:	pushl 0
          [0xa] 10:	istore 0
          [0xb] 11:	call @563 // <std#string.at(var)>
          [0xc] 12:	movi #45, egx
          [0xe] 14:	loadval ebx
          [0xf] 15:	test ebx, egx
          [0x10] 16:	jne 22
line: 315 [0x11] 17:	istorel 1, fp+3
line: 316 [0x13] 19:	istorel 1, fp+1
          [0x15] 21:	nop
          [0x16] 22:	nop
line: 318 [0x17] 23:	loadl egx, fp+4
          [0x18] 24:	loadl ebx, fp+1
          [0x19] 25:	lt ebx, egx
          [0x1a] 26:	jne 64
line: 319 [0x1b] 27:	pushl 0
          [0x1c] 28:	ipushl #1
          [0x1d] 29:	call @563 // <std#string.at(var)>
          [0x1e] 30:	call @59 // <std#char.isDigit(var)>
          [0x1f] 31:	loadval ebx
          [0x20] 32:	not ebx, ebx
          [0x21] 33:	movr cmt, ebx
          [0x22] 34:	jne 48
line: 320 [0x23] 35:	new_class @11 // std#IllegalArgumentException
          [0x24] 36:	new_class @47 // std#string
          [0x25] 37:	newstr @59 // "illegal char in string: "
          [0x26] 38:	call @553 // <std#string.string(var[])>
          [0x27] 39:	new_class @8 // std#char
          [0x28] 40:	pushl 0
          [0x29] 41:	ipushl #1
          [0x2a] 42:	call @563 // <std#string.at(var)>
          [0x2b] 43:	call @29 // <std#char.char(var)>
          [0x2c] 44:	call @567 // <std#string.$operator+(std#Printable)>
          [0x2d] 45:	call @81 // <std#IllegalArgumentException.IllegalArgumentException(std#string)>
          [0x2e] 46:	throw 
          [0x2f] 47:	nop
          [0x30] 48:	nop
line: 324 [0x31] 49:	movi #10, ebx
          [0x33] 51:	mull ebx, @2
line: 325 [0x34] 52:	istore 48
          [0x35] 53:	pushl 0
          [0x36] 54:	loadl ebx, fp+1
          [0x37] 55:	iaddl 1, @1
          [0x38] 56:	rstore ebx
          [0x39] 57:	call @563 // <std#string.at(var)>
          [0x3a] 58:	loadval ebx
          [0x3b] 59:	loadval ecx
          [0x3c] 60:	sub ebx, ecx -> ebx
          [0x3e] 62:	addl ebx, @2
          [0x3f] 63:	goto @23
line: 327 [0x40] 64:	loadl cmt, fp+3
          [0x41] 65:	jne 70
line: 328 [0x42] 66:	loadl ebx, fp+2
          [0x43] 67:	imul ebx, #-1
          [0x44] 68:	smovr_2 ebx, fp+2
          [0x45] 69:	nop
          [0x46] 70:	nop
line: 329 [0x47] 71:	loadl ebx, fp+2
          [0x48] 72:	return_val ebx
          [0x49] 73:	ret

func:@545 [std#strbuf.startsWith] in file: lib/support/0.2.422//strbuf.sharp:338:30: note:  
		        public def startsWith(string prefix, var toffset) : var {
		                             ^


startsWith:
line: 338 [0x0] 0:	loadl ebx, fp+2
          [0x1] 1:	smovr_2 ebx, fp+3
line: 339 [0x2] 2:	istorel 0, fp+4
line: 340 [0x4] 4:	pushl 1
          [0x5] 5:	call @589 // <std#string.size()>
          [0x6] 6:	ipopl 5
line: 342 [0x7] 7:	movi #0, egx
          [0x9] 9:	loadl ebx, fp+2
          [0xa] 10:	lt ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	movr ebx, cmt
          [0xd] 13:	skpe 13 // pc = 26
          [0xe] 14:	ipushl #5
          [0xf] 15:	pushl 0
          [0x10] 16:	call @551 // <std#strbuf.size()>
          [0x11] 17:	loadval ebx
          [0x12] 18:	loadval egx
          [0x13] 19:	sub ebx, egx -> ebx
          [0x15] 21:	rstore ebx
          [0x16] 22:	loadval egx
          [0x17] 23:	loadl ebx, fp+2
          [0x18] 24:	gt ebx, egx
          [0x19] 25:	movr ebx, cmt
          [0x1a] 26:	cmp ebx, 1
          [0x1b] 27:	jne 33
line: 343 [0x1c] 28:	movi #0, ebx
          [0x1e] 30:	return_val ebx
          [0x1f] 31:	ret
          [0x20] 32:	nop
          [0x21] 33:	nop
line: 345 [0x22] 34:	istore 0
          [0x23] 35:	loadl ebx, fp+5
          [0x24] 36:	isubl #1, @5
          [0x25] 37:	dec ebx
          [0x26] 38:	loadval ecx
          [0x27] 39:	gte ebx, ecx
          [0x28] 40:	jne 62
line: 346 [0x29] 41:	pushl 0
          [0x2a] 42:	loadl ebx, fp+3
          [0x2b] 43:	iaddl 1, @3
          [0x2c] 44:	rstore ebx
          [0x2d] 45:	call @524 // <std#strbuf.at(var)>
          [0x2e] 46:	pushl 1
          [0x2f] 47:	loadl ebx, fp+4
          [0x30] 48:	iaddl 1, @4
          [0x31] 49:	rstore ebx
          [0x32] 50:	call @563 // <std#string.at(var)>
          [0x33] 51:	loadval egx
          [0x34] 52:	loadval ebx
          [0x35] 53:	tne ebx, egx
          [0x36] 54:	jne 60
line: 347 [0x37] 55:	movi #0, ebx
          [0x39] 57:	return_val ebx
          [0x3a] 58:	ret
          [0x3b] 59:	nop
          [0x3c] 60:	nop
          [0x3d] 61:	goto @34
line: 350 [0x3e] 62:	movi #1, ebx
          [0x40] 64:	return_val ebx
          [0x41] 65:	ret

func:@546 [std#strbuf.find] in file: lib/support/0.2.422//strbuf.sharp:354:24: note:  
		        public def find(string str) : var {
		                       ^


find:
line: 354 [0x0] 0:	pushl 0
          [0x1] 1:	call @551 // <std#strbuf.size()>
          [0x2] 2:	pushl 1
          [0x3] 3:	call @589 // <std#string.size()>
          [0x4] 4:	loadval ebx
          [0x5] 5:	loadval ecx
          [0x6] 6:	gt ebx, ecx
          [0x7] 7:	jne 13
line: 355 [0x8] 8:	movi #0, ebx
          [0xa] 10:	return_val ebx
          [0xb] 11:	ret
          [0xc] 12:	nop
          [0xd] 13:	nop
line: 358 [0xe] 14:	istorel 0, fp+2
line: 359 [0x10] 16:	istorel 0, fp+3
          [0x12] 18:	pushl 0
          [0x13] 19:	call @551 // <std#strbuf.size()>
          [0x14] 20:	loadval egx
          [0x15] 21:	loadl ebx, fp+3
          [0x16] 22:	lt ebx, egx
          [0x17] 23:	jne 61
line: 360 [0x18] 24:	pushl 1
          [0x19] 25:	call @589 // <std#string.size()>
          [0x1a] 26:	loadl ebx, fp+3
          [0x1b] 27:	loadval egx
          [0x1c] 28:	add ebx, egx -> ebx
          [0x1e] 30:	rstore ebx
          [0x1f] 31:	ipopl 2
line: 361 [0x20] 32:	pushl 0
          [0x21] 33:	ipushl #3
          [0x22] 34:	pushl 0
          [0x23] 35:	call @551 // <std#strbuf.size()>
          [0x24] 36:	loadval egx
          [0x25] 37:	loadl ebx, fp+2
          [0x26] 38:	gt ebx, egx
          [0x27] 39:	movr ebx, cmt
          [0x28] 40:	loadpc_2 adx, pc+7 // adx = 47
          [0x29] 41:	ifne
          [0x2a] 42:	pushl 0
          [0x2b] 43:	call @551 // <std#strbuf.size()>
          [0x2c] 44:	movi #1, cmt
          [0x2e] 46:	skpe 2 // pc = 48
          [0x2f] 47:	ipushl #2
          [0x30] 48:	call @543 // <std#strbuf.substring(var,var)>
          [0x31] 49:	pushl 1
          [0x32] 50:	call @568 // <std#string.$operator==(std#string)>
          [0x33] 51:	loadval cmt
          [0x34] 52:	jne 58
line: 362 [0x35] 53:	movi #1, ebx
          [0x37] 55:	return_val ebx
          [0x38] 56:	ret
          [0x39] 57:	nop
          [0x3a] 58:	nop
          [0x3b] 59:	iaddl 1, @3
          [0x3c] 60:	goto @18
line: 365 [0x3d] 61:	movi #0, ebx
          [0x3f] 63:	return_val ebx
          [0x40] 64:	ret

func:@547 [std#strbuf.endsWith] in file: lib/support/0.2.422//strbuf.sharp:369:28: note:  
		        public def endsWith(string postFix) : var {
		                           ^


endsWith:
line: 369 [0x0] 0:	pushl 0
          [0x1] 1:	call @551 // <std#strbuf.size()>
          [0x2] 2:	pushl 1
          [0x3] 3:	call @589 // <std#string.size()>
          [0x4] 4:	loadval ebx
          [0x5] 5:	loadval ecx
          [0x6] 6:	gt ebx, ecx
          [0x7] 7:	jne 13
line: 370 [0x8] 8:	movi #0, ebx
          [0xa] 10:	return_val ebx
          [0xb] 11:	ret
          [0xc] 12:	nop
          [0xd] 13:	nop
line: 372 [0xe] 14:	pushl 1
          [0xf] 15:	call @589 // <std#string.size()>
          [0x10] 16:	ipopl 2
line: 373 [0x11] 17:	new_class @47 // std#string
          [0x12] 18:	call @593 // <std#string.string()>
          [0x13] 19:	popl 3
          [0x14] 20:	ipushl #2
line: 374 [0x15] 21:	pushl 0
          [0x16] 22:	call @551 // <std#strbuf.size()>
          [0x17] 23:	loadval ebx
          [0x18] 24:	loadval egx
          [0x19] 25:	sub ebx, egx -> ebx
          [0x1b] 27:	rstore ebx
          [0x1c] 28:	ipopl 4
          [0x1d] 29:	pushl 0
          [0x1e] 30:	call @551 // <std#strbuf.size()>
          [0x1f] 31:	loadval egx
          [0x20] 32:	loadl ebx, fp+4
          [0x21] 33:	lt ebx, egx
          [0x22] 34:	jne 45
line: 375 [0x23] 35:	pushl 3
          [0x24] 36:	new_class @8 // std#char
          [0x25] 37:	pushl 0
          [0x26] 38:	ipushl #4
          [0x27] 39:	call @524 // <std#strbuf.at(var)>
          [0x28] 40:	call @29 // <std#char.char(var)>
          [0x29] 41:	call @575 // <std#string.$operator+=(std#Printable)>
          [0x2a] 42:	pop
          [0x2b] 43:	iaddl 1, @4
          [0x2c] 44:	goto @29
line: 378 [0x2d] 45:	pushl 3
          [0x2e] 46:	pushl 1
          [0x2f] 47:	call @568 // <std#string.$operator==(std#string)>
          [0x30] 48:	loadval ebx
          [0x31] 49:	return_val ebx
          [0x32] 50:	ret

func:@548 [std#strbuf.toLower] in file: lib/support/0.2.422//strbuf.sharp:383:34: note:  
		        public static def toLower(string s) : string {
		                                 ^


toLower:
line: 383 [0x0] 0:	new_class @47 // std#string
          [0x1] 1:	call @593 // <std#string.string()>
          [0x2] 2:	popl 1
          [0x3] 3:	pushl 0
line: 384 [0x4] 4:	call @578 // <std#string.toArray()>
          [0x5] 5:	popl 2
          [0x6] 6:	istore 0
line: 385 [0x7] 7:	movl 2
          [0x8] 8:	smov ebx, sp+0
          [0x9] 9:	sizeof egx
          [0xa] 10:	lt ebx, egx
          [0xb] 11:	jne 21
          [0xc] 12:	iaload_2 ebx, ebx
          [0xd] 13:	smovr_2 ebx, fp+3
line: 386 [0xe] 14:	pushl 1
          [0xf] 15:	ipushl #3
          [0x10] 16:	call @63 // <std#char.toLower(var)>
          [0x11] 17:	call @574 // <std#string.$operator+=(var)>
          [0x12] 18:	pop
          [0x13] 19:	isadd 1, sp+0
          [0x14] 20:	goto @7
          [0x15] 21:	pop
line: 388 [0x16] 22:	movl 1
          [0x17] 23:	returnobj
          [0x18] 24:	ret

func:@549 [std#strbuf.toUpper] in file: lib/support/0.2.422//strbuf.sharp:392:34: note:  
		        public static def toUpper(string s) : string {
		                                 ^


toUpper:
line: 392 [0x0] 0:	new_class @47 // std#string
          [0x1] 1:	call @593 // <std#string.string()>
          [0x2] 2:	popl 1
          [0x3] 3:	pushl 0
line: 393 [0x4] 4:	call @578 // <std#string.toArray()>
          [0x5] 5:	popl 2
          [0x6] 6:	istore 0
line: 394 [0x7] 7:	movl 2
          [0x8] 8:	smov ebx, sp+0
          [0x9] 9:	sizeof egx
          [0xa] 10:	lt ebx, egx
          [0xb] 11:	jne 21
          [0xc] 12:	iaload_2 ebx, ebx
          [0xd] 13:	smovr_2 ebx, fp+3
line: 395 [0xe] 14:	pushl 1
          [0xf] 15:	ipushl #3
          [0x10] 16:	call @64 // <std#char.toUpper(var)>
          [0x11] 17:	call @574 // <std#string.$operator+=(var)>
          [0x12] 18:	pop
          [0x13] 19:	isadd 1, sp+0
          [0x14] 20:	goto @7
          [0x15] 21:	pop
line: 397 [0x16] 22:	movl 1
          [0x17] 23:	returnobj
          [0x18] 24:	ret

func:@550 [std#strbuf.empty] in file: lib/support/0.2.422//strbuf.sharp:401:25: note:  
		        public def empty() : var {
		                        ^


empty:
line: 401 [0x0] 0:	movl 0
          [0x1] 1:	movn #4
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movi #-1, egx
          [0x8] 8:	loadval ebx
          [0x9] 9:	test ebx, egx
          [0xa] 10:	return_val cmt
          [0xb] 11:	ret

func:@551 [std#strbuf.size] in file: lib/support/0.2.422//strbuf.sharp:405:24: note:  
		        public def size() : var
		                       ^


size:
line: 406 [0x0] 0:	istore 1
          [0x1] 1:	movl 0
          [0x2] 2:	movn #4
          [0x3] 3:	movi #0, adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	loadval egx
          [0x7] 7:	add ebx, egx -> ebx
          [0x9] 9:	return_val ebx
          [0xa] 10:	ret

func:@552 [std#strbuf.toString] in file: lib/support/0.2.422//strbuf.sharp:410:28: note:  
		        public def delegate::toString() : string {
		                           ^


toString:
line: 410 [0x0] 0:	movl 0
          [0x1] 1:	movn #4
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movi #-1, egx
          [0x8] 8:	loadval ebx
          [0x9] 9:	test ebx, egx
          [0xa] 10:	movr ebx, cmt
          [0xb] 11:	loadpc_2 adx, pc+7 // adx = 18
          [0xc] 12:	ifne
          [0xd] 13:	new_class @47 // std#string
          [0xe] 14:	call @593 // <std#string.string()>
          [0xf] 15:	movi #1, cmt
          [0x11] 17:	skpe 13 // pc = 30
          [0x12] 18:	new_class @47 // std#string
          [0x13] 19:	movl 0
          [0x14] 20:	movn #0
          [0x15] 21:	pushobj
          [0x16] 22:	istore 0
          [0x17] 23:	movl 0
          [0x18] 24:	movn #4
          [0x19] 25:	movi #0, adx
          [0x1b] 27:	iaload_2 ebx, adx
          [0x1c] 28:	rstore ebx
          [0x1d] 29:	call @558 // <std#string.string(var[],var,var)>
          [0x1e] 30:	movsl #0
          [0x1f] 31:	returnobj
          [0x20] 32:	ret

func:@553 [std#string.string] in file: lib/support/0.2.422//string.sharp:12:22: note:  
		        public string( var[] immstr )
		                     ^


string:
line: 13 [0x0] 0:	movl 1
         [0x1] 1:	checknull
         [0x2] 2:	jne 7
line: 14 [0x3] 3:	movl 0
         [0x4] 4:	movn #0
         [0x5] 5:	del
         [0x6] 6:	goto @12
line: 16 [0x7] 7:	pushl 0
         [0x8] 8:	pushl 1
         [0x9] 9:	call @562 // <std#string.append(var[])>
         [0xa] 10:	pop
         [0xb] 11:	nop
         [0xc] 12:	nop
         [0xd] 13:	movl 0
         [0xe] 14:	returnobj
         [0xf] 15:	ret

func:@554 [std#string.string] in file: lib/support/0.2.422//string.sharp:22:22: note:  
		        public string( var ch )
		                     ^


string:
line: 23 [0x0] 0:	pushl 0
         [0x1] 1:	ipushl #1
         [0x2] 2:	call @560 // <std#string.append(var)>
         [0x3] 3:	pop
         [0x4] 4:	movl 0
         [0x5] 5:	returnobj
         [0x6] 6:	ret

func:@555 [std#string.string] in file: lib/support/0.2.422//string.sharp:27:22: note:  
		        public string( char[] immstr )
		                     ^


string:
line: 28 [0x0] 0:	movl 1
         [0x1] 1:	checknull
         [0x2] 2:	jne 7
line: 29 [0x3] 3:	movl 0
         [0x4] 4:	movn #0
         [0x5] 5:	del
         [0x6] 6:	goto @40
line: 31 [0x7] 7:	movl 1
         [0x8] 8:	sizeof ebx
         [0x9] 9:	newarry ebx
         [0xa] 10:	popl 2
         [0xb] 11:	istorel 0, fp+3
line: 32 [0xd] 13:	istore 0
line: 33 [0xe] 14:	movl 1
         [0xf] 15:	smov ebx, sp+0
         [0x10] 16:	sizeof egx
         [0x11] 17:	lt ebx, egx
         [0x12] 18:	jne 34
         [0x13] 19:	movnd ebx
         [0x14] 20:	pushobj
         [0x15] 21:	popl 4
         [0x16] 22:	pushl 4
line: 34 [0x17] 23:	call @121 // <std#integer.getValue()>
         [0x18] 24:	loadval ebx
         [0x19] 25:	rstore ebx
         [0x1a] 26:	movl 2
         [0x1b] 27:	loadl ebx, fp+3
         [0x1c] 28:	iaddl 1, @3
         [0x1d] 29:	chklen ebx
         [0x1e] 30:	loadval egx
         [0x1f] 31:	rmov ebx, egx
         [0x20] 32:	isadd 1, sp+0
         [0x21] 33:	goto @14
         [0x22] 34:	pop
line: 37 [0x23] 35:	pushl 0
         [0x24] 36:	pushl 2
         [0x25] 37:	call @562 // <std#string.append(var[])>
         [0x26] 38:	pop
         [0x27] 39:	nop
         [0x28] 40:	nop
         [0x29] 41:	movl 0
         [0x2a] 42:	returnobj
         [0x2b] 43:	ret

func:@556 [std#string.string] in file: lib/support/0.2.422//string.sharp:43:22: note:  
		        public string(string str )
		                     ^


string:
line: 44 [0x0] 0:	pushl 0
         [0x1] 1:	pushl 1
         [0x2] 2:	call @578 // <std#string.toArray()>
         [0x3] 3:	call @553 // <std#string.string(var[])>
         [0x4] 4:	pop
         [0x5] 5:	movl 0
         [0x6] 6:	returnobj
         [0x7] 7:	ret

func:@557 [std#string.string] in file: lib/support/0.2.422//string.sharp:48:22: note:  
		        public string( var[] immstr, var offset )
		                     ^


string:
line: 49 [0x0] 0:	movl 1
         [0x1] 1:	checknull
         [0x2] 2:	jne 7
line: 50 [0x3] 3:	movl 0
         [0x4] 4:	movn #0
         [0x5] 5:	del
         [0x6] 6:	goto @19
line: 52 [0x7] 7:	pushl 1
         [0x8] 8:	ipushl #2
         [0x9] 9:	movl 1
         [0xa] 10:	sizeof ebx
         [0xb] 11:	rstore ebx
         [0xc] 12:	call @614 // <std#__SRT_Global.memcpy(object,var,var)>
         [0xd] 13:	movsl #0
         [0xe] 14:	vcast 1
         [0xf] 15:	movl 0
         [0x10] 16:	movn #0
         [0x11] 17:	popobj
         [0x12] 18:	nop
         [0x13] 19:	nop
         [0x14] 20:	movl 0
         [0x15] 21:	returnobj
         [0x16] 22:	ret

func:@558 [std#string.string] in file: lib/support/0.2.422//string.sharp:57:22: note:  
		        public string( var[] immstr, var offset, var endIndex )
		                     ^


string:
line: 58 [0x0] 0:	movl 1
         [0x1] 1:	checknull
         [0x2] 2:	jne 7
line: 59 [0x3] 3:	movl 0
         [0x4] 4:	movn #0
         [0x5] 5:	del
         [0x6] 6:	goto @17
line: 61 [0x7] 7:	pushl 1
         [0x8] 8:	ipushl #2
         [0x9] 9:	ipushl #3
         [0xa] 10:	call @614 // <std#__SRT_Global.memcpy(object,var,var)>
         [0xb] 11:	movsl #0
         [0xc] 12:	vcast 1
         [0xd] 13:	movl 0
         [0xe] 14:	movn #0
         [0xf] 15:	popobj
         [0x10] 16:	nop
         [0x11] 17:	nop
         [0x12] 18:	movl 0
         [0x13] 19:	returnobj
         [0x14] 20:	ret

func:@559 [std#string.replace] in file: lib/support/0.2.422//string.sharp:66:27: note:  
		        public def replace( var pos, var replaceChar ) : string
		                          ^


replace:
line: 67 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	sizeof egx
         [0x3] 3:	loadl ebx, fp+1
         [0x4] 4:	gte ebx, egx
         [0x5] 5:	jne 11
line: 68 [0x6] 6:	new_class @44 // std#RuntimeErr
         [0x7] 7:	newstr @53 // "Index out of bounds exception"
         [0x8] 8:	call @478 // <std#RuntimeErr.RuntimeErr(var[])>
         [0x9] 9:	throw 
         [0xa] 10:	nop
         [0xb] 11:	nop
line: 71 [0xc] 12:	ipushl #2
         [0xd] 13:	movl 0
         [0xe] 14:	movn #0
         [0xf] 15:	loadl ebx, fp+1
         [0x10] 16:	chklen ebx
         [0x11] 17:	loadval egx
         [0x12] 18:	rmov ebx, egx
line: 72 [0x13] 19:	movl 0
         [0x14] 20:	returnobj
         [0x15] 21:	ret

func:@560 [std#string.append] in file: lib/support/0.2.422//string.sharp:76:19: note:  
		        def append(var char) : string
		                  ^


append:
line: 77 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	checknull
         [0x3] 3:	jne 11
line: 78 [0x4] 4:	movi #1, ebx
         [0x6] 6:	newarry ebx
         [0x7] 7:	movl 0
         [0x8] 8:	movn #0
         [0x9] 9:	popobj
         [0xa] 10:	goto @24
line: 80 [0xb] 11:	movl 0
         [0xc] 12:	movn #0
         [0xd] 13:	pushobj
         [0xe] 14:	istore 1
         [0xf] 15:	movl 0
         [0x10] 16:	movn #0
         [0x11] 17:	sizeof ebx
         [0x12] 18:	loadval ecx
         [0x13] 19:	add ebx, ecx -> ebx
         [0x15] 21:	rstore ebx
         [0x16] 22:	call @615 // <std#__SRT_Global.realloc(object,var)>
         [0x17] 23:	nop
         [0x18] 24:	nop
line: 82 [0x19] 25:	ipushl #1
         [0x1a] 26:	movl 0
         [0x1b] 27:	movn #0
         [0x1c] 28:	pushobj
         [0x1d] 29:	istore 1
         [0x1e] 30:	movl 0
         [0x1f] 31:	movn #0
         [0x20] 32:	sizeof ebx
         [0x21] 33:	loadval ecx
         [0x22] 34:	sub ebx, ecx -> ebx
         [0x24] 36:	movsl #0
         [0x25] 37:	chklen ebx
         [0x26] 38:	pop
         [0x27] 39:	loadval egx
         [0x28] 40:	rmov ebx, egx
line: 83 [0x29] 41:	movl 0
         [0x2a] 42:	returnobj
         [0x2b] 43:	ret

func:@561 [std#string.append] in file: lib/support/0.2.422//string.sharp:87:19: note:  
		        def append(char c) : string
		                  ^


append:
line: 88 [0x0] 0:	pushl 0
         [0x1] 1:	pushl 1
         [0x2] 2:	call @121 // <std#integer.getValue()>
         [0x3] 3:	call @560 // <std#string.append(var)>
         [0x4] 4:	movsl #0
         [0x5] 5:	returnobj
         [0x6] 6:	ret

func:@562 [std#string.append] in file: lib/support/0.2.422//string.sharp:92:19: note:  
		        def append(var[] immstr) : string
		                  ^


append:
line: 93 [0x0] 0:	movl 1
         [0x1] 1:	checknull
         [0x2] 2:	jne 7
line: 93 [0x3] 3:	movl 0
         [0x4] 4:	returnobj
         [0x5] 5:	ret
         [0x6] 6:	nop
         [0x7] 7:	nop
line: 95 [0x8] 8:	movl 0
         [0x9] 9:	movn #0
         [0xa] 10:	sizeof ebx
         [0xb] 11:	smovr_2 ebx, fp+2
line: 97 [0xc] 12:	movl 0
         [0xd] 13:	movn #0
         [0xe] 14:	checknull
         [0xf] 15:	jne 23
line: 98 [0x10] 16:	movl 1
         [0x11] 17:	sizeof ebx
         [0x12] 18:	newarry ebx
         [0x13] 19:	movl 0
         [0x14] 20:	movn #0
         [0x15] 21:	popobj
         [0x16] 22:	goto @38
line: 100 [0x17] 23:	movl 0
          [0x18] 24:	movn #0
          [0x19] 25:	pushobj
          [0x1a] 26:	movl 1
          [0x1b] 27:	sizeof ebx
          [0x1c] 28:	rstore ebx
          [0x1d] 29:	movl 0
          [0x1e] 30:	movn #0
          [0x1f] 31:	sizeof ebx
          [0x20] 32:	loadval ecx
          [0x21] 33:	add ebx, ecx -> ebx
          [0x23] 35:	rstore ebx
          [0x24] 36:	call @615 // <std#__SRT_Global.realloc(object,var)>
          [0x25] 37:	nop
          [0x26] 38:	nop
line: 102 [0x27] 39:	istorel 0, fp+3
          [0x29] 41:	movl 1
          [0x2a] 42:	sizeof egx
          [0x2b] 43:	loadl ebx, fp+3
          [0x2c] 44:	lt ebx, egx
          [0x2d] 45:	jne 61
line: 104 [0x2e] 46:	movl 1
          [0x2f] 47:	loadl ebx, fp+3
          [0x30] 48:	chklen ebx
          [0x31] 49:	iaload_2 ebx, ebx
          [0x32] 50:	mov16 ebx, ebx
          [0x33] 51:	rstore ebx
          [0x34] 52:	movl 0
          [0x35] 53:	movn #0
          [0x36] 54:	loadl ebx, fp+2
          [0x37] 55:	iaddl 1, @2
          [0x38] 56:	chklen ebx
          [0x39] 57:	loadval egx
          [0x3a] 58:	rmov ebx, egx
          [0x3b] 59:	iaddl 1, @3
          [0x3c] 60:	goto @41
line: 107 [0x3d] 61:	movl 0
          [0x3e] 62:	returnobj
          [0x3f] 63:	ret

func:@563 [std#string.at] in file: lib/support/0.2.422//string.sharp:111:22: note:  
		        public def at( var pos ) : var
		                     ^


at:
line: 112 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	sizeof egx
          [0x3] 3:	loadl ebx, fp+1
          [0x4] 4:	gte ebx, egx
          [0x5] 5:	jne 22
line: 113 [0x6] 6:	new_class @44 // std#RuntimeErr
          [0x7] 7:	new_class @47 // std#string
          [0x8] 8:	newstr @54 // "Index out of bounds Array: size "
          [0x9] 9:	call @553 // <std#string.string(var[])>
          [0xa] 10:	movl 0
          [0xb] 11:	movn #0
          [0xc] 12:	sizeof ebx
          [0xd] 13:	rstore ebx
          [0xe] 14:	call @573 // <std#string.$operator+(var)>
          [0xf] 15:	newstr @55 // " at index pos "
          [0x10] 16:	call @566 // <std#string.$operator+(var[])>
          [0x11] 17:	ipushl #1
          [0x12] 18:	call @573 // <std#string.$operator+(var)>
          [0x13] 19:	call @479 // <std#RuntimeErr.RuntimeErr(std#string)>
          [0x14] 20:	throw 
          [0x15] 21:	nop
          [0x16] 22:	nop
line: 117 [0x17] 23:	movl 0
          [0x18] 24:	movn #0
          [0x19] 25:	loadl ebx, fp+1
          [0x1a] 26:	chklen ebx
          [0x1b] 27:	iaload_2 ebx, ebx
          [0x1c] 28:	return_val ebx
          [0x1d] 29:	ret

func:@564 [std#string.fmt] in file: lib/support/0.2.422//string.sharp:121:30: note:  
		        public static def fmt( var _fmt ) {
		                             ^


fmt:
line: 121 [0x0] 0:	loadl ebx, fp+0
          [0x1] 1:	nop
          [0x2] 2:	rstore ebx
          [0x3] 3:	movg @47 // @std#string
          [0x4] 4:	movn #1
          [0x5] 5:	movi #0, adx
          [0x7] 7:	loadval ecx
          [0x8] 8:	rmov adx, ecx
line: 122 [0x9] 9:	ipushl #0
          [0xa] 10:	movi #102, egx
          [0xc] 12:	loadval ebx
          [0xd] 13:	tne ebx, egx
          [0xe] 14:	movr ebx, cmt
          [0xf] 15:	cmp ebx, 1
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	skne 9 // pc = 26
          [0x12] 18:	istore 1
          [0x13] 19:	ipushl #0
          [0x14] 20:	movi #70, egx
          [0x16] 22:	loadval ebx
          [0x17] 23:	tne ebx, egx
          [0x18] 24:	movr ebx, cmt
          [0x19] 25:	loadval ecx
          [0x1a] 26:	and ecx, ebx
          [0x1b] 27:	jne 39
line: 122 [0x1c] 28:	movi #0, ebx
          [0x1e] 30:	nop
          [0x1f] 31:	rstore ebx
          [0x20] 32:	movg @47 // @std#string
          [0x21] 33:	movn #2
          [0x22] 34:	movi #0, adx
          [0x24] 36:	loadval ecx
          [0x25] 37:	rmov adx, ecx
          [0x26] 38:	nop
          [0x27] 39:	nop
          [0x28] 40:	ret

func:@565 [std#string.precision] in file: lib/support/0.2.422//string.sharp:126:36: note:  
		        public static def precision( var prec ) {
		                                   ^


precision:
line: 126 [0x0] 0:	movi #0, egx
          [0x2] 2:	loadl ebx, fp+0
          [0x3] 3:	lt ebx, egx
          [0x4] 4:	jne 14
line: 127 [0x5] 5:	new_class @11 // std#IllegalArgumentException
          [0x6] 6:	new_class @47 // std#string
          [0x7] 7:	newstr @56 // "invalid precision: "
          [0x8] 8:	call @553 // <std#string.string(var[])>
          [0x9] 9:	ipushl #0
          [0xa] 10:	call @573 // <std#string.$operator+(var)>
          [0xb] 11:	call @81 // <std#IllegalArgumentException.IllegalArgumentException(std#string)>
          [0xc] 12:	throw 
          [0xd] 13:	nop
          [0xe] 14:	nop
line: 128 [0xf] 15:	loadl ebx, fp+0
          [0x10] 16:	nop
          [0x11] 17:	rstore ebx
          [0x12] 18:	movg @47 // @std#string
          [0x13] 19:	movn #2
          [0x14] 20:	movi #0, adx
          [0x16] 22:	loadval ecx
          [0x17] 23:	rmov adx, ecx
          [0x18] 24:	ret

func:@566 [std#string.$operator+] in file: lib/support/0.2.422//string.sharp:132:28: note:  
		        public def operator+( var[] immstr ) : string
		                           ^


$operator+:
line: 133 [0x0] 0:	new_class @47 // std#string
          [0x1] 1:	movl 0
          [0x2] 2:	movn #0
          [0x3] 3:	pushobj
          [0x4] 4:	call @553 // <std#string.string(var[])>
          [0x5] 5:	popl 2
          [0x6] 6:	movl 1
line: 134 [0x7] 7:	checknull
          [0x8] 8:	not cmt, cmt
          [0x9] 9:	jne 17
line: 135 [0xa] 10:	pushl 2
          [0xb] 11:	pushl 1
          [0xc] 12:	call @562 // <std#string.append(var[])>
          [0xd] 13:	movsl #0
          [0xe] 14:	returnobj
          [0xf] 15:	ret
          [0x10] 16:	goto @24
line: 137 [0x11] 17:	pushl 2
          [0x12] 18:	newstr @49 // "null"
          [0x13] 19:	call @562 // <std#string.append(var[])>
          [0x14] 20:	movsl #0
          [0x15] 21:	returnobj
          [0x16] 22:	ret
          [0x17] 23:	nop
          [0x18] 24:	nop
          [0x19] 25:	pushnil 
          [0x1a] 26:	popobj
          [0x1b] 27:	returnobj
          [0x1c] 28:	ret

func:@567 [std#string.$operator+] in file: lib/support/0.2.422//string.sharp:141:28: note:  
		        public def operator+( Printable o ) : string
		                           ^


$operator+:
line: 142 [0x0] 0:	new_class @47 // std#string
          [0x1] 1:	movl 0
          [0x2] 2:	movn #0
          [0x3] 3:	pushobj
          [0x4] 4:	call @553 // <std#string.string(var[])>
          [0x5] 5:	popl 2
          [0x6] 6:	pushl 1
line: 143 [0x7] 7:	invoke_delegate 4, 0
          [0x8] 8:	movsl #0
          [0x9] 9:	movn #0
          [0xa] 10:	pushobj
          [0xb] 11:	popl 3
          [0xc] 12:	movl 1
line: 144 [0xd] 13:	checknull
          [0xe] 14:	not ebx, cmt
          [0xf] 15:	cmp ebx, 1
          [0x10] 16:	movr ebx, cmt
          [0x11] 17:	skne 6 // pc = 23
          [0x12] 18:	istore 1
          [0x13] 19:	movl 3
          [0x14] 20:	checknull
          [0x15] 21:	not ebx, cmt
          [0x16] 22:	loadval ecx
          [0x17] 23:	and ecx, ebx
          [0x18] 24:	jne 32
line: 145 [0x19] 25:	pushl 2
          [0x1a] 26:	pushl 3
          [0x1b] 27:	call @562 // <std#string.append(var[])>
          [0x1c] 28:	movsl #0
          [0x1d] 29:	returnobj
          [0x1e] 30:	ret
          [0x1f] 31:	goto @39
line: 147 [0x20] 32:	pushl 2
          [0x21] 33:	newstr @49 // "null"
          [0x22] 34:	call @562 // <std#string.append(var[])>
          [0x23] 35:	movsl #0
          [0x24] 36:	returnobj
          [0x25] 37:	ret
          [0x26] 38:	nop
          [0x27] 39:	nop
          [0x28] 40:	pushnil 
          [0x29] 41:	popobj
          [0x2a] 42:	returnobj
          [0x2b] 43:	ret

func:@568 [std#string.$operator==] in file: lib/support/0.2.422//string.sharp:151:28: note:  
		        public def operator==( string str ) : var
		                           ^


$operator==:
line: 152 [0x0] 0:	pushl 1
          [0x1] 1:	call @589 // <std#string.size()>
          [0x2] 2:	movl 0
          [0x3] 3:	movn #0
          [0x4] 4:	sizeof egx
          [0x5] 5:	loadval ebx
          [0x6] 6:	tne ebx, egx
          [0x7] 7:	jne 13
line: 153 [0x8] 8:	movi #0, ebx
          [0xa] 10:	return_val ebx
          [0xb] 11:	ret
          [0xc] 12:	nop
          [0xd] 13:	nop
line: 156 [0xe] 14:	istorel 0, fp+2
line: 157 [0x10] 16:	istore 0
          [0x11] 17:	movl 0
          [0x12] 18:	movn #0
          [0x13] 19:	smov ebx, sp+0
          [0x14] 20:	sizeof egx
          [0x15] 21:	lt ebx, egx
          [0x16] 22:	jne 43
          [0x17] 23:	iaload_2 ebx, ebx
          [0x18] 24:	smovr_2 ebx, fp+3
line: 158 [0x19] 25:	ipushl #3
          [0x1a] 26:	pushl 1
          [0x1b] 27:	loadl ebx, fp+2
          [0x1c] 28:	iaddl 1, @2
          [0x1d] 29:	rstore ebx
          [0x1e] 30:	call @563 // <std#string.at(var)>
          [0x1f] 31:	loadval egx
          [0x20] 32:	loadval ebx
          [0x21] 33:	tne ebx, egx
          [0x22] 34:	jne 40
line: 159 [0x23] 35:	movi #0, ebx
          [0x25] 37:	return_val ebx
          [0x26] 38:	ret
          [0x27] 39:	nop
          [0x28] 40:	nop
          [0x29] 41:	isadd 1, sp+0
          [0x2a] 42:	goto @17
          [0x2b] 43:	pop
line: 163 [0x2c] 44:	movi #1, ebx
          [0x2e] 46:	return_val ebx
          [0x2f] 47:	ret

func:@569 [std#string.$operator!=] in file: lib/support/0.2.422//string.sharp:167:28: note:  
		        public def operator!=( string str ) : var {
		                           ^


$operator!=:
line: 167 [0x0] 0:	pushl 0
          [0x1] 1:	pushl 1
          [0x2] 2:	call @568 // <std#string.$operator==(std#string)>
          [0x3] 3:	loadval ebx
          [0x4] 4:	not ebx, ebx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@570 [std#string.$operator==] in file: lib/support/0.2.422//string.sharp:171:28: note:  
		        public def operator==( var[] str ) : var
		                           ^


$operator==:
line: 172 [0x0] 0:	movl 1
          [0x1] 1:	sizeof ebx
          [0x2] 2:	rstore ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #0
          [0x5] 5:	sizeof egx
          [0x6] 6:	loadval ebx
          [0x7] 7:	tne ebx, egx
          [0x8] 8:	jne 14
line: 173 [0x9] 9:	movi #0, ebx
          [0xb] 11:	return_val ebx
          [0xc] 12:	ret
          [0xd] 13:	nop
          [0xe] 14:	nop
line: 176 [0xf] 15:	istorel 0, fp+2
line: 177 [0x11] 17:	istore 0
          [0x12] 18:	movl 0
          [0x13] 19:	movn #0
          [0x14] 20:	smov ebx, sp+0
          [0x15] 21:	sizeof egx
          [0x16] 22:	lt ebx, egx
          [0x17] 23:	jne 43
          [0x18] 24:	iaload_2 ebx, ebx
          [0x19] 25:	smovr_2 ebx, fp+3
line: 178 [0x1a] 26:	ipushl #3
          [0x1b] 27:	movl 1
          [0x1c] 28:	loadl ebx, fp+2
          [0x1d] 29:	iaddl 1, @2
          [0x1e] 30:	chklen ebx
          [0x1f] 31:	iaload_2 egx, ebx
          [0x20] 32:	loadval ebx
          [0x21] 33:	tne ebx, egx
          [0x22] 34:	jne 40
line: 179 [0x23] 35:	movi #0, ebx
          [0x25] 37:	return_val ebx
          [0x26] 38:	ret
          [0x27] 39:	nop
          [0x28] 40:	nop
          [0x29] 41:	isadd 1, sp+0
          [0x2a] 42:	goto @18
          [0x2b] 43:	pop
line: 183 [0x2c] 44:	movi #1, ebx
          [0x2e] 46:	return_val ebx
          [0x2f] 47:	ret

func:@571 [std#string.$operator!=] in file: lib/support/0.2.422//string.sharp:187:28: note:  
		        public def operator!=( var[] str ) : var {
		                           ^


$operator!=:
line: 187 [0x0] 0:	pushl 0
          [0x1] 1:	new_class @47 // std#string
          [0x2] 2:	pushl 1
          [0x3] 3:	call @553 // <std#string.string(var[])>
          [0x4] 4:	call @568 // <std#string.$operator==(std#string)>
          [0x5] 5:	loadval ebx
          [0x6] 6:	not ebx, ebx
          [0x7] 7:	return_val ebx
          [0x8] 8:	ret

func:@572 [std#string.$operator=] in file: lib/support/0.2.422//string.sharp:191:28: note:  
		        public def operator=( var[] immstr )
		                           ^


$operator=:
line: 192 [0x0] 0:	movl 1
          [0x1] 1:	checknull
          [0x2] 2:	jne 7
line: 192 [0x3] 3:	movl 0
          [0x4] 4:	movn #0
          [0x5] 5:	del
          [0x6] 6:	goto @18
line: 194 [0x7] 7:	pushl 1
          [0x8] 8:	movl 1
          [0x9] 9:	sizeof ebx
          [0xa] 10:	rstore ebx
          [0xb] 11:	call @612 // <std#__SRT_Global.copyOf(object,var)>
          [0xc] 12:	movsl #0
          [0xd] 13:	vcast 1
          [0xe] 14:	movl 0
          [0xf] 15:	movn #0
          [0x10] 16:	popobj
          [0x11] 17:	nop
          [0x12] 18:	nop
          [0x13] 19:	ret

func:@573 [std#string.$operator+] in file: lib/support/0.2.422//string.sharp:198:28: note:  
		        public def operator+( var num ) : string
		                           ^


$operator+:
line: 199 [0x0] 0:	new_class @47 // std#string
          [0x1] 1:	movl 0
          [0x2] 2:	movn #0
          [0x3] 3:	pushobj
          [0x4] 4:	call @553 // <std#string.string(var[])>
          [0x5] 5:	popl 2
          [0x6] 6:	pushl 2
line: 200 [0x7] 7:	ipushl #1
          [0x8] 8:	call @579 // <std#string.parse(var)>
          [0x9] 9:	call @578 // <std#string.toArray()>
          [0xa] 10:	call @562 // <std#string.append(var[])>
          [0xb] 11:	pop
line: 202 [0xc] 12:	movl 2
          [0xd] 13:	returnobj
          [0xe] 14:	ret

func:@574 [std#string.$operator+=] in file: lib/support/0.2.422//string.sharp:206:28: note:  
		        public def operator+=( var num ) : string
		                           ^


$operator+=:
line: 207 [0x0] 0:	pushl 0
          [0x1] 1:	ipushl #1
          [0x2] 2:	call @579 // <std#string.parse(var)>
          [0x3] 3:	call @578 // <std#string.toArray()>
          [0x4] 4:	call @562 // <std#string.append(var[])>
          [0x5] 5:	movsl #0
          [0x6] 6:	returnobj
          [0x7] 7:	ret

func:@575 [std#string.$operator+=] in file: lib/support/0.2.422//string.sharp:211:28: note:  
		        public def operator+=( Printable o ) : string
		                           ^


$operator+=:
line: 212 [0x0] 0:	pushl 1
          [0x1] 1:	invoke_delegate 4, 0
          [0x2] 2:	popl 2
          [0x3] 3:	movl 2
line: 213 [0x4] 4:	checknull
          [0x5] 5:	not ebx, cmt
          [0x6] 6:	cmp ebx, 1
          [0x7] 7:	movr ebx, cmt
          [0x8] 8:	skne 7 // pc = 15
          [0x9] 9:	istore 1
          [0xa] 10:	movl 2
          [0xb] 11:	movn #0
          [0xc] 12:	checknull
          [0xd] 13:	not ebx, cmt
          [0xe] 14:	loadval ecx
          [0xf] 15:	and ecx, ebx
          [0x10] 16:	jne 26
line: 214 [0x11] 17:	pushl 0
          [0x12] 18:	movl 2
          [0x13] 19:	movn #0
          [0x14] 20:	pushobj
          [0x15] 21:	call @562 // <std#string.append(var[])>
          [0x16] 22:	movsl #0
          [0x17] 23:	returnobj
          [0x18] 24:	ret
          [0x19] 25:	goto @33
line: 216 [0x1a] 26:	pushl 0
          [0x1b] 27:	newstr @49 // "null"
          [0x1c] 28:	call @562 // <std#string.append(var[])>
          [0x1d] 29:	movsl #0
          [0x1e] 30:	returnobj
          [0x1f] 31:	ret
          [0x20] 32:	nop
          [0x21] 33:	nop
          [0x22] 34:	pushnil 
          [0x23] 35:	popobj
          [0x24] 36:	returnobj
          [0x25] 37:	ret

func:@576 [std#string.$operator+=] in file: lib/support/0.2.422//string.sharp:220:28: note:  
		        public def operator+=( var[] immstr ) : string
		                           ^


$operator+=:
line: 221 [0x0] 0:	pushl 0
          [0x1] 1:	pushl 1
          [0x2] 2:	call @562 // <std#string.append(var[])>
          [0x3] 3:	movsl #0
          [0x4] 4:	returnobj
          [0x5] 5:	ret

func:@577 [std#string.$operator+=] in file: lib/support/0.2.422//string.sharp:225:28: note:  
		        public def operator+=( string str ) : string
		                           ^


$operator+=:
line: 226 [0x0] 0:	pushl 0
          [0x1] 1:	pushl 1
          [0x2] 2:	call @578 // <std#string.toArray()>
          [0x3] 3:	call @562 // <std#string.append(var[])>
          [0x4] 4:	movsl #0
          [0x5] 5:	returnobj
          [0x6] 6:	ret

func:@578 [std#string.toArray] in file: lib/support/0.2.422//string.sharp:230:27: note:  
		        public def toArray() : var[]
		                          ^


toArray:
line: 231 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	checknull
          [0x3] 3:	jne 8
line: 231 [0x4] 4:	movl 0
          [0x5] 5:	del
          [0x6] 6:	ret
          [0x7] 7:	nop
          [0x8] 8:	nop
line: 232 [0x9] 9:	movl 0
          [0xa] 10:	movn #0
          [0xb] 11:	pushobj
          [0xc] 12:	movl 0
          [0xd] 13:	movn #0
          [0xe] 14:	sizeof ebx
          [0xf] 15:	rstore ebx
          [0x10] 16:	call @612 // <std#__SRT_Global.copyOf(object,var)>
          [0x11] 17:	movsl #0
          [0x12] 18:	vcast 1
          [0x13] 19:	movsl #0
          [0x14] 20:	returnobj
          [0x15] 21:	ret

func:@579 [std#string.parse] in file: lib/support/0.2.422//string.sharp:236:32: note:  
		        public static def parse( var number ) : string
		                               ^


parse:
line: 237 [0x0] 0:	new_class @47 // std#string
          [0x1] 1:	movg @47 // @std#string
          [0x2] 2:	movn #1
          [0x3] 3:	movi #0, adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	rstore ebx
          [0x7] 7:	ipushl #0
          [0x8] 8:	movg @47 // @std#string
          [0x9] 9:	movn #2
          [0xa] 10:	iaload_2 ebx, adx
          [0xb] 11:	rstore ebx
          [0xc] 12:	call @619 // <std#__SRT_Global.snprintf(var,var,var)>
          [0xd] 13:	call @553 // <std#string.string(var[])>
          [0xe] 14:	movsl #0
          [0xf] 15:	returnobj
          [0x10] 16:	ret

func:@580 [std#string.substring] in file: lib/support/0.2.422//string.sharp:241:29: note:  
		        public def substring(var startIndex) : string {
		                            ^


substring:
line: 241 [0x0] 0:	pushl 0
          [0x1] 1:	call @589 // <std#string.size()>
          [0x2] 2:	loadval egx
          [0x3] 3:	loadl ebx, fp+1
          [0x4] 4:	gte ebx, egx
          [0x5] 5:	movr ebx, cmt
          [0x6] 6:	movr ebx, cmt
          [0x7] 7:	skpe 6 // pc = 13
          [0x8] 8:	movi #0, egx
          [0xa] 10:	loadl ebx, fp+1
          [0xb] 11:	lt ebx, egx
          [0xc] 12:	movr ebx, cmt
          [0xd] 13:	cmp ebx, 1
          [0xe] 14:	jne 22
line: 242 [0xf] 15:	new_class @47 // std#string
          [0x10] 16:	newstr @34 // ""
          [0x11] 17:	call @553 // <std#string.string(var[])>
          [0x12] 18:	movsl #0
          [0x13] 19:	returnobj
          [0x14] 20:	ret
          [0x15] 21:	nop
          [0x16] 22:	nop
line: 245 [0x17] 23:	new_class @47 // std#string
          [0x18] 24:	call @593 // <std#string.string()>
          [0x19] 25:	popl 2
          [0x1a] 26:	movl 0
line: 246 [0x1b] 27:	movn #0
          [0x1c] 28:	pushobj
          [0x1d] 29:	ipushl #1
          [0x1e] 30:	istore 1
          [0x1f] 31:	pushl 0
          [0x20] 32:	call @589 // <std#string.size()>
          [0x21] 33:	loadval ebx
          [0x22] 34:	loadval ecx
          [0x23] 35:	sub ebx, ecx -> ebx
          [0x25] 37:	rstore ebx
          [0x26] 38:	call @614 // <std#__SRT_Global.memcpy(object,var,var)>
          [0x27] 39:	movsl #0
          [0x28] 40:	vcast 1
          [0x29] 41:	movl 2
          [0x2a] 42:	movn #0
          [0x2b] 43:	popobj
line: 247 [0x2c] 44:	movl 2
          [0x2d] 45:	returnobj
          [0x2e] 46:	ret

func:@581 [std#string.substring] in file: lib/support/0.2.422//string.sharp:251:29: note:  
		        public def substring(var startIndex, var stopIndex) : string {
		                            ^


substring:
line: 251 [0x0] 0:	pushl 0
          [0x1] 1:	call @589 // <std#string.size()>
          [0x2] 2:	loadval egx
          [0x3] 3:	loadl ebx, fp+1
          [0x4] 4:	gte ebx, egx
          [0x5] 5:	movr ebx, cmt
          [0x6] 6:	movr ebx, cmt
          [0x7] 7:	skpe 6 // pc = 13
          [0x8] 8:	movi #0, egx
          [0xa] 10:	loadl ebx, fp+1
          [0xb] 11:	lt ebx, egx
          [0xc] 12:	movr ebx, cmt
          [0xd] 13:	cmp ebx, 1
          [0xe] 14:	jne 22
line: 252 [0xf] 15:	new_class @47 // std#string
          [0x10] 16:	newstr @34 // ""
          [0x11] 17:	call @553 // <std#string.string(var[])>
          [0x12] 18:	movsl #0
          [0x13] 19:	returnobj
          [0x14] 20:	ret
          [0x15] 21:	nop
          [0x16] 22:	nop
line: 253 [0x17] 23:	loadl egx, fp+1
          [0x18] 24:	loadl ebx, fp+2
          [0x19] 25:	lt ebx, egx
          [0x1a] 26:	jne 40
line: 254 [0x1b] 27:	new_class @11 // std#IllegalArgumentException
          [0x1c] 28:	new_class @47 // std#string
          [0x1d] 29:	newstr @57 // "stopIndex: "
          [0x1e] 30:	call @553 // <std#string.string(var[])>
          [0x1f] 31:	ipushl #2
          [0x20] 32:	call @573 // <std#string.$operator+(var)>
          [0x21] 33:	newstr @58 // " cannot be less than startIndex: "
          [0x22] 34:	call @566 // <std#string.$operator+(var[])>
          [0x23] 35:	ipushl #1
          [0x24] 36:	call @573 // <std#string.$operator+(var)>
          [0x25] 37:	call @81 // <std#IllegalArgumentException.IllegalArgumentException(std#string)>
          [0x26] 38:	throw 
          [0x27] 39:	nop
          [0x28] 40:	nop
line: 258 [0x29] 41:	new_class @47 // std#string
          [0x2a] 42:	call @593 // <std#string.string()>
          [0x2b] 43:	popl 3
          [0x2c] 44:	movl 0
line: 259 [0x2d] 45:	movn #0
          [0x2e] 46:	pushobj
          [0x2f] 47:	ipushl #1
          [0x30] 48:	ipushl #2
          [0x31] 49:	call @614 // <std#__SRT_Global.memcpy(object,var,var)>
          [0x32] 50:	movsl #0
          [0x33] 51:	vcast 1
          [0x34] 52:	movl 3
          [0x35] 53:	movn #0
          [0x36] 54:	popobj
line: 260 [0x37] 55:	movl 3
          [0x38] 56:	returnobj
          [0x39] 57:	ret

func:@582 [std#string.parseInt] in file: lib/support/0.2.422//string.sharp:264:35: note:  
		        public static def parseInt(string s) : var {
		                                  ^


parseInt:
line: 264 [0x0] 0:	istorel 0, fp+1
line: 265 [0x2] 2:	istorel 0, fp+2
line: 266 [0x4] 4:	istorel 0, fp+3
line: 267 [0x6] 6:	pushl 0
          [0x7] 7:	call @589 // <std#string.size()>
          [0x8] 8:	ipopl 4
line: 268 [0x9] 9:	pushl 0
          [0xa] 10:	istore 0
          [0xb] 11:	call @563 // <std#string.at(var)>
          [0xc] 12:	movi #45, egx
          [0xe] 14:	loadval ebx
          [0xf] 15:	test ebx, egx
          [0x10] 16:	jne 22
line: 269 [0x11] 17:	istorel 1, fp+3
line: 270 [0x13] 19:	istorel 1, fp+1
          [0x15] 21:	nop
          [0x16] 22:	nop
line: 272 [0x17] 23:	loadl egx, fp+4
          [0x18] 24:	loadl ebx, fp+1
          [0x19] 25:	lt ebx, egx
          [0x1a] 26:	jne 64
line: 273 [0x1b] 27:	pushl 0
          [0x1c] 28:	ipushl #1
          [0x1d] 29:	call @563 // <std#string.at(var)>
          [0x1e] 30:	call @59 // <std#char.isDigit(var)>
          [0x1f] 31:	loadval ebx
          [0x20] 32:	not ebx, ebx
          [0x21] 33:	movr cmt, ebx
          [0x22] 34:	jne 48
line: 274 [0x23] 35:	new_class @11 // std#IllegalArgumentException
          [0x24] 36:	new_class @47 // std#string
          [0x25] 37:	newstr @59 // "illegal char in string: "
          [0x26] 38:	call @553 // <std#string.string(var[])>
          [0x27] 39:	new_class @8 // std#char
          [0x28] 40:	pushl 0
          [0x29] 41:	ipushl #1
          [0x2a] 42:	call @563 // <std#string.at(var)>
          [0x2b] 43:	call @29 // <std#char.char(var)>
          [0x2c] 44:	call @567 // <std#string.$operator+(std#Printable)>
          [0x2d] 45:	call @81 // <std#IllegalArgumentException.IllegalArgumentException(std#string)>
          [0x2e] 46:	throw 
          [0x2f] 47:	nop
          [0x30] 48:	nop
line: 278 [0x31] 49:	movi #10, ebx
          [0x33] 51:	mull ebx, @2
line: 279 [0x34] 52:	istore 48
          [0x35] 53:	pushl 0
          [0x36] 54:	loadl ebx, fp+1
          [0x37] 55:	iaddl 1, @1
          [0x38] 56:	rstore ebx
          [0x39] 57:	call @563 // <std#string.at(var)>
          [0x3a] 58:	loadval ebx
          [0x3b] 59:	loadval ecx
          [0x3c] 60:	sub ebx, ecx -> ebx
          [0x3e] 62:	addl ebx, @2
          [0x3f] 63:	goto @23
line: 281 [0x40] 64:	loadl cmt, fp+3
          [0x41] 65:	jne 70
line: 282 [0x42] 66:	loadl ebx, fp+2
          [0x43] 67:	imul ebx, #-1
          [0x44] 68:	smovr_2 ebx, fp+2
          [0x45] 69:	nop
          [0x46] 70:	nop
line: 283 [0x47] 71:	loadl ebx, fp+2
          [0x48] 72:	return_val ebx
          [0x49] 73:	ret

func:@583 [std#string.startsWith] in file: lib/support/0.2.422//string.sharp:292:30: note:  
		        public def startsWith(string prefix, var toffset) : var {
		                             ^


startsWith:
line: 292 [0x0] 0:	loadl ebx, fp+2
          [0x1] 1:	smovr_2 ebx, fp+3
line: 293 [0x2] 2:	istorel 0, fp+4
line: 294 [0x4] 4:	pushl 1
          [0x5] 5:	call @589 // <std#string.size()>
          [0x6] 6:	ipopl 5
line: 296 [0x7] 7:	movi #0, egx
          [0x9] 9:	loadl ebx, fp+2
          [0xa] 10:	lt ebx, egx
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	movr ebx, cmt
          [0xd] 13:	skpe 13 // pc = 26
          [0xe] 14:	ipushl #5
          [0xf] 15:	pushl 0
          [0x10] 16:	call @589 // <std#string.size()>
          [0x11] 17:	loadval ebx
          [0x12] 18:	loadval egx
          [0x13] 19:	sub ebx, egx -> ebx
          [0x15] 21:	rstore ebx
          [0x16] 22:	loadval egx
          [0x17] 23:	loadl ebx, fp+2
          [0x18] 24:	gt ebx, egx
          [0x19] 25:	movr ebx, cmt
          [0x1a] 26:	cmp ebx, 1
          [0x1b] 27:	jne 33
line: 297 [0x1c] 28:	movi #0, ebx
          [0x1e] 30:	return_val ebx
          [0x1f] 31:	ret
          [0x20] 32:	nop
          [0x21] 33:	nop
line: 299 [0x22] 34:	istore 0
          [0x23] 35:	loadl ebx, fp+5
          [0x24] 36:	isubl #1, @5
          [0x25] 37:	dec ebx
          [0x26] 38:	loadval ecx
          [0x27] 39:	gte ebx, ecx
          [0x28] 40:	jne 62
line: 300 [0x29] 41:	pushl 0
          [0x2a] 42:	loadl ebx, fp+3
          [0x2b] 43:	iaddl 1, @3
          [0x2c] 44:	rstore ebx
          [0x2d] 45:	call @563 // <std#string.at(var)>
          [0x2e] 46:	pushl 1
          [0x2f] 47:	loadl ebx, fp+4
          [0x30] 48:	iaddl 1, @4
          [0x31] 49:	rstore ebx
          [0x32] 50:	call @563 // <std#string.at(var)>
          [0x33] 51:	loadval egx
          [0x34] 52:	loadval ebx
          [0x35] 53:	tne ebx, egx
          [0x36] 54:	jne 60
line: 301 [0x37] 55:	movi #0, ebx
          [0x39] 57:	return_val ebx
          [0x3a] 58:	ret
          [0x3b] 59:	nop
          [0x3c] 60:	nop
          [0x3d] 61:	goto @34
line: 304 [0x3e] 62:	movi #1, ebx
          [0x40] 64:	return_val ebx
          [0x41] 65:	ret

func:@584 [std#string.find] in file: lib/support/0.2.422//string.sharp:308:24: note:  
		        public def find(string str) : var {
		                       ^


find:
line: 308 [0x0] 0:	pushl 0
          [0x1] 1:	call @589 // <std#string.size()>
          [0x2] 2:	pushl 1
          [0x3] 3:	call @589 // <std#string.size()>
          [0x4] 4:	loadval ebx
          [0x5] 5:	loadval ecx
          [0x6] 6:	gt ebx, ecx
          [0x7] 7:	jne 13
line: 309 [0x8] 8:	movi #0, ebx
          [0xa] 10:	return_val ebx
          [0xb] 11:	ret
          [0xc] 12:	nop
          [0xd] 13:	nop
line: 312 [0xe] 14:	istorel 0, fp+2
line: 313 [0x10] 16:	istorel 0, fp+3
          [0x12] 18:	pushl 0
          [0x13] 19:	call @589 // <std#string.size()>
          [0x14] 20:	loadval egx
          [0x15] 21:	loadl ebx, fp+3
          [0x16] 22:	lt ebx, egx
          [0x17] 23:	jne 61
line: 314 [0x18] 24:	pushl 1
          [0x19] 25:	call @589 // <std#string.size()>
          [0x1a] 26:	loadl ebx, fp+3
          [0x1b] 27:	loadval egx
          [0x1c] 28:	add ebx, egx -> ebx
          [0x1e] 30:	rstore ebx
          [0x1f] 31:	ipopl 2
line: 315 [0x20] 32:	pushl 0
          [0x21] 33:	ipushl #3
          [0x22] 34:	pushl 0
          [0x23] 35:	call @589 // <std#string.size()>
          [0x24] 36:	loadval egx
          [0x25] 37:	loadl ebx, fp+2
          [0x26] 38:	gt ebx, egx
          [0x27] 39:	movr ebx, cmt
          [0x28] 40:	loadpc_2 adx, pc+7 // adx = 47
          [0x29] 41:	ifne
          [0x2a] 42:	pushl 0
          [0x2b] 43:	call @589 // <std#string.size()>
          [0x2c] 44:	movi #1, cmt
          [0x2e] 46:	skpe 2 // pc = 48
          [0x2f] 47:	ipushl #2
          [0x30] 48:	call @581 // <std#string.substring(var,var)>
          [0x31] 49:	pushl 1
          [0x32] 50:	call @568 // <std#string.$operator==(std#string)>
          [0x33] 51:	loadval cmt
          [0x34] 52:	jne 58
line: 316 [0x35] 53:	movi #1, ebx
          [0x37] 55:	return_val ebx
          [0x38] 56:	ret
          [0x39] 57:	nop
          [0x3a] 58:	nop
          [0x3b] 59:	iaddl 1, @3
          [0x3c] 60:	goto @18
line: 319 [0x3d] 61:	movi #0, ebx
          [0x3f] 63:	return_val ebx
          [0x40] 64:	ret

func:@585 [std#string.endsWith] in file: lib/support/0.2.422//string.sharp:323:28: note:  
		        public def endsWith(string postFix) : var {
		                           ^


endsWith:
line: 323 [0x0] 0:	pushl 0
          [0x1] 1:	call @589 // <std#string.size()>
          [0x2] 2:	pushl 1
          [0x3] 3:	call @589 // <std#string.size()>
          [0x4] 4:	loadval ebx
          [0x5] 5:	loadval ecx
          [0x6] 6:	gt ebx, ecx
          [0x7] 7:	jne 13
line: 324 [0x8] 8:	movi #0, ebx
          [0xa] 10:	return_val ebx
          [0xb] 11:	ret
          [0xc] 12:	nop
          [0xd] 13:	nop
line: 326 [0xe] 14:	pushl 1
          [0xf] 15:	call @589 // <std#string.size()>
          [0x10] 16:	ipopl 2
line: 327 [0x11] 17:	new_class @47 // std#string
          [0x12] 18:	call @593 // <std#string.string()>
          [0x13] 19:	popl 3
          [0x14] 20:	ipushl #2
line: 328 [0x15] 21:	pushl 0
          [0x16] 22:	call @589 // <std#string.size()>
          [0x17] 23:	loadval ebx
          [0x18] 24:	loadval egx
          [0x19] 25:	sub ebx, egx -> ebx
          [0x1b] 27:	rstore ebx
          [0x1c] 28:	ipopl 4
          [0x1d] 29:	pushl 0
          [0x1e] 30:	call @589 // <std#string.size()>
          [0x1f] 31:	loadval egx
          [0x20] 32:	loadl ebx, fp+4
          [0x21] 33:	lt ebx, egx
          [0x22] 34:	jne 45
line: 329 [0x23] 35:	pushl 3
          [0x24] 36:	new_class @8 // std#char
          [0x25] 37:	pushl 0
          [0x26] 38:	ipushl #4
          [0x27] 39:	call @563 // <std#string.at(var)>
          [0x28] 40:	call @29 // <std#char.char(var)>
          [0x29] 41:	call @575 // <std#string.$operator+=(std#Printable)>
          [0x2a] 42:	pop
          [0x2b] 43:	iaddl 1, @4
          [0x2c] 44:	goto @29
line: 332 [0x2d] 45:	pushl 3
          [0x2e] 46:	pushl 1
          [0x2f] 47:	call @568 // <std#string.$operator==(std#string)>
          [0x30] 48:	loadval ebx
          [0x31] 49:	return_val ebx
          [0x32] 50:	ret

func:@586 [std#string.toLower] in file: lib/support/0.2.422//string.sharp:337:34: note:  
		        public static def toLower(string s) : string {
		                                 ^


toLower:
line: 337 [0x0] 0:	new_class @47 // std#string
          [0x1] 1:	call @593 // <std#string.string()>
          [0x2] 2:	popl 1
          [0x3] 3:	pushl 0
line: 338 [0x4] 4:	call @578 // <std#string.toArray()>
          [0x5] 5:	popl 2
          [0x6] 6:	istore 0
line: 339 [0x7] 7:	movl 2
          [0x8] 8:	smov ebx, sp+0
          [0x9] 9:	sizeof egx
          [0xa] 10:	lt ebx, egx
          [0xb] 11:	jne 21
          [0xc] 12:	iaload_2 ebx, ebx
          [0xd] 13:	smovr_2 ebx, fp+3
line: 340 [0xe] 14:	pushl 1
          [0xf] 15:	ipushl #3
          [0x10] 16:	call @63 // <std#char.toLower(var)>
          [0x11] 17:	call @574 // <std#string.$operator+=(var)>
          [0x12] 18:	pop
          [0x13] 19:	isadd 1, sp+0
          [0x14] 20:	goto @7
          [0x15] 21:	pop
line: 342 [0x16] 22:	movl 1
          [0x17] 23:	returnobj
          [0x18] 24:	ret

func:@587 [std#string.toUpper] in file: lib/support/0.2.422//string.sharp:346:34: note:  
		        public static def toUpper(string s) : string {
		                                 ^


toUpper:
line: 346 [0x0] 0:	new_class @47 // std#string
          [0x1] 1:	call @593 // <std#string.string()>
          [0x2] 2:	popl 1
          [0x3] 3:	pushl 0
line: 347 [0x4] 4:	call @578 // <std#string.toArray()>
          [0x5] 5:	popl 2
          [0x6] 6:	istore 0
line: 348 [0x7] 7:	movl 2
          [0x8] 8:	smov ebx, sp+0
          [0x9] 9:	sizeof egx
          [0xa] 10:	lt ebx, egx
          [0xb] 11:	jne 21
          [0xc] 12:	iaload_2 ebx, ebx
          [0xd] 13:	smovr_2 ebx, fp+3
line: 349 [0xe] 14:	pushl 1
          [0xf] 15:	ipushl #3
          [0x10] 16:	call @64 // <std#char.toUpper(var)>
          [0x11] 17:	call @574 // <std#string.$operator+=(var)>
          [0x12] 18:	pop
          [0x13] 19:	isadd 1, sp+0
          [0x14] 20:	goto @7
          [0x15] 21:	pop
line: 351 [0x16] 22:	movl 1
          [0x17] 23:	returnobj
          [0x18] 24:	ret

func:@588 [std#string.empty] in file: lib/support/0.2.422//string.sharp:355:25: note:  
		        public def empty() : var {
		                        ^


empty:
line: 355 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	sizeof ebx
          [0x3] 3:	rstore ebx
          [0x4] 4:	movi #0, egx
          [0x6] 6:	loadval ebx
          [0x7] 7:	test ebx, egx
          [0x8] 8:	return_val cmt
          [0x9] 9:	ret

func:@589 [std#string.size] in file: lib/support/0.2.422//string.sharp:359:24: note:  
		        public def size() : var
		                       ^


size:
line: 360 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	sizeof ebx
          [0x3] 3:	return_val ebx
          [0x4] 4:	ret

func:@590 [std#string.getData] in file: lib/support/0.2.422//string.sharp:364:27: note:  
		        public def getData() : var[] {
		                          ^


getData:
line: 364 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	returnobj
          [0x3] 3:	ret

func:@591 [std#string.toString] in file: lib/support/0.2.422//string.sharp:368:28: note:  
		        public def delegate::toString() : string {
		                           ^


toString:
line: 368 [0x0] 0:	new_class @47 // std#string
          [0x1] 1:	movl 0
          [0x2] 2:	movn #0
          [0x3] 3:	pushobj
          [0x4] 4:	call @553 // <std#string.string(var[])>
          [0x5] 5:	movsl #0
          [0x6] 6:	returnobj
          [0x7] 7:	ret

func:@592 [std#string.hash] in file: lib/support/0.2.422//string.sharp:372:21: note:  
		        def delegate::hash() : var {
		                    ^


hash:
line: 372 [0x0] 0:	istorel 0, fp+1
line: 374 [0x2] 2:	movl 0
          [0x3] 3:	movn #0
          [0x4] 4:	checknull
          [0x5] 5:	not cmt, cmt
          [0x6] 6:	jne 95
line: 375 [0x7] 7:	istore 31
          [0x8] 8:	movl 0
          [0x9] 9:	movn #0
          [0xa] 10:	movi #0, ebx
          [0xc] 12:	chklen ebx
          [0xd] 13:	iaload_2 ebx, ebx
          [0xe] 14:	loadval ecx
          [0xf] 15:	mul ebx, ecx -> ebx
          [0x11] 17:	rstore ebx
          [0x12] 18:	istore 1
          [0x13] 19:	movl 0
          [0x14] 20:	movn #0
          [0x15] 21:	sizeof ebx
          [0x16] 22:	loadval ecx
          [0x17] 23:	sub ebx, ecx -> ebx
          [0x19] 25:	rstore ebx
          [0x1a] 26:	call @391 // <std#Math.pow(var,var)>
          [0x1b] 27:	movl 0
          [0x1c] 28:	movn #0
          [0x1d] 29:	movi #0, ebx
          [0x1f] 31:	chklen ebx
          [0x20] 32:	iaload_2 ebx, ebx
          [0x21] 33:	loadval ecx
          [0x22] 34:	add ebx, ecx -> ebx
          [0x24] 36:	rstore ebx
          [0x25] 37:	ipopl 1
line: 377 [0x26] 38:	istore 1
          [0x27] 39:	movl 0
          [0x28] 40:	movn #0
          [0x29] 41:	sizeof ebx
          [0x2a] 42:	loadval ecx
          [0x2b] 43:	gte ebx, ecx
          [0x2c] 44:	jne 93
line: 378 [0x2d] 45:	istore 31
          [0x2e] 46:	movl 0
          [0x2f] 47:	movn #0
          [0x30] 48:	movi #1, ebx
          [0x32] 50:	chklen ebx
          [0x33] 51:	iaload_2 ebx, ebx
          [0x34] 52:	loadval ecx
          [0x35] 53:	mul ebx, ecx -> ebx
          [0x37] 55:	rstore ebx
          [0x38] 56:	istore 2
          [0x39] 57:	movl 0
          [0x3a] 58:	movn #0
          [0x3b] 59:	sizeof ebx
          [0x3c] 60:	loadval ecx
          [0x3d] 61:	sub ebx, ecx -> ebx
          [0x3f] 63:	rstore ebx
          [0x40] 64:	call @391 // <std#Math.pow(var,var)>
          [0x41] 65:	loadval ebx
          [0x42] 66:	addl ebx, @1
line: 380 [0x43] 67:	istorel 2, fp+2
          [0x45] 69:	movl 0
          [0x46] 70:	movn #0
          [0x47] 71:	sizeof egx
          [0x48] 72:	loadl ebx, fp+2
          [0x49] 73:	lt ebx, egx
          [0x4a] 74:	jne 92
line: 381 [0x4b] 75:	movi #15, egx
          [0x4d] 77:	loadl ebx, fp+2
          [0x4e] 78:	lt ebx, egx
          [0x4f] 79:	jne 87
line: 382 [0x50] 80:	movl 0
          [0x51] 81:	movn #0
          [0x52] 82:	loadl ebx, fp+2
          [0x53] 83:	chklen ebx
          [0x54] 84:	iaload_2 ebx, ebx
          [0x55] 85:	addl ebx, @1
          [0x56] 86:	goto @89
line: 384 [0x57] 87:	goto @92
          [0x58] 88:	nop
          [0x59] 89:	nop
          [0x5a] 90:	iaddl 1, @2
          [0x5b] 91:	goto @69
          [0x5c] 92:	nop
          [0x5d] 93:	nop
          [0x5e] 94:	nop
          [0x5f] 95:	nop
line: 389 [0x60] 96:	loadl ebx, fp+1
          [0x61] 97:	return_val ebx
          [0x62] 98:	ret

func:@593 [std#string.string] in file: lib/support/0.2.422//string.sharp:6:13: note:  
		public class string {
		            ^


string:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@594 [std#__SRT_Global.print] in file: lib/support/0.2.422//System.sharp:18:4: note:  
		def print(var[] data) {
		   ^


print:
line: 18 [0x0] 0:	movg @1 // @std#__SRT_Global
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	pushl 0
         [0x4] 4:	call @285 // <std.kernel#ConsoleHandler.printData(var[])>
         [0x5] 5:	ret

func:@595 [std#__SRT_Global.print] in file: lib/support/0.2.422//System.sharp:22:4: note:  
		def print(string str) {
		   ^


print:
line: 22 [0x0] 0:	movg @1 // @std#__SRT_Global
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	pushl 0
         [0x4] 4:	call @578 // <std#string.toArray()>
         [0x5] 5:	call @285 // <std.kernel#ConsoleHandler.printData(var[])>
         [0x6] 6:	ret

func:@596 [std#__SRT_Global.println] in file: lib/support/0.2.422//System.sharp:26:4: note:  
		def println(var[] data) {
		   ^


println:
line: 26 [0x0] 0:	movg @1 // @std#__SRT_Global
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	pushl 0
         [0x4] 4:	call @285 // <std.kernel#ConsoleHandler.printData(var[])>
line: 27 [0x5] 5:	istore 10
         [0x6] 6:	call @608 // <std#__SRT_Global.printChar(var)>
         [0x7] 7:	ret

func:@597 [std#__SRT_Global.println] in file: lib/support/0.2.422//System.sharp:31:4: note:  
		def println(var data) {
		   ^


println:
line: 31 [0x0] 0:	ipushl #0
         [0x1] 1:	call @607 // <std#__SRT_Global.print(var)>
line: 32 [0x2] 2:	istore 10
         [0x3] 3:	call @608 // <std#__SRT_Global.printChar(var)>
         [0x4] 4:	ret

func:@598 [std#__SRT_Global.println] in file: lib/support/0.2.422//System.sharp:36:4: note:  
		def println() {
		   ^


println:
line: 36 [0x0] 0:	istore 10
         [0x1] 1:	call @608 // <std#__SRT_Global.printChar(var)>
         [0x2] 2:	ret

func:@599 [std#__SRT_Global.println] in file: lib/support/0.2.422//System.sharp:40:4: note:  
		def println(Enum e) {
		   ^


println:
line: 40 [0x0] 0:	pushl 0
         [0x1] 1:	call @73 // <std#Enum.getName()>
         [0x2] 2:	call @595 // <std#__SRT_Global.print(std#string)>
line: 41 [0x3] 3:	istore 10
         [0x4] 4:	call @608 // <std#__SRT_Global.printChar(var)>
         [0x5] 5:	ret

func:@600 [std#__SRT_Global.readLine] in file: lib/support/0.2.422//System.sharp:45:4: note:  
		def readLine() : string {
		   ^


readLine:
line: 45 [0x0] 0:	istorel 0, fp+0
line: 46 [0x2] 2:	new_class @47 // std#string
         [0x3] 3:	newstr @34 // ""
         [0x4] 4:	call @553 // <std#string.string(var[])>
         [0x5] 5:	popl 1
line: 48 [0x6] 6:	call @602 // <std#__SRT_Global.readChar()>
         [0x7] 7:	ipopl 0
line: 49 [0x8] 8:	ipushl #0
         [0x9] 9:	movi #13, egx
         [0xb] 11:	loadval ebx
         [0xc] 12:	tne ebx, egx
         [0xd] 13:	movr ebx, cmt
         [0xe] 14:	cmp ebx, 1
         [0xf] 15:	movr ebx, cmt
         [0x10] 16:	skne 9 // pc = 25
         [0x11] 17:	istore 1
         [0x12] 18:	ipushl #0
         [0x13] 19:	movi #10, egx
         [0x15] 21:	loadval ebx
         [0x16] 22:	tne ebx, egx
         [0x17] 23:	movr ebx, cmt
         [0x18] 24:	loadval ecx
         [0x19] 25:	and ecx, ebx
         [0x1a] 26:	jne 41
line: 50 [0x1b] 27:	pushl 1
         [0x1c] 28:	movi #1, ebx
         [0x1e] 30:	newarry ebx
         [0x1f] 31:	movsl #0
         [0x20] 32:	loadl ebx, fp+0
         [0x21] 33:	movi #0, adx
         [0x23] 35:	rmov adx, ebx
         [0x24] 36:	call @576 // <std#string.$operator+=(var[])>
         [0x25] 37:	pop
line: 51 [0x26] 38:	call @602 // <std#__SRT_Global.readChar()>
         [0x27] 39:	ipopl 0
         [0x28] 40:	goto @8
line: 53 [0x29] 41:	movl 1
         [0x2a] 42:	returnobj
         [0x2b] 43:	ret

func:@601 [std#__SRT_Global.readPasswd] in file: lib/support/0.2.422//System.sharp:57:4: note:  
		def readPasswd() : string {
		   ^


readPasswd:
line: 57 [0x0] 0:	istorel 0, fp+0
line: 58 [0x2] 2:	new_class @47 // std#string
         [0x3] 3:	newstr @34 // ""
         [0x4] 4:	call @553 // <std#string.string(var[])>
         [0x5] 5:	popl 1
line: 60 [0x6] 6:	call @603 // <std#__SRT_Global.readRawChar()>
         [0x7] 7:	ipopl 0
line: 61 [0x8] 8:	ipushl #0
         [0x9] 9:	movi #13, egx
         [0xb] 11:	loadval ebx
         [0xc] 12:	tne ebx, egx
         [0xd] 13:	movr ebx, cmt
         [0xe] 14:	cmp ebx, 1
         [0xf] 15:	movr ebx, cmt
         [0x10] 16:	skne 9 // pc = 25
         [0x11] 17:	istore 1
         [0x12] 18:	ipushl #0
         [0x13] 19:	movi #10, egx
         [0x15] 21:	loadval ebx
         [0x16] 22:	tne ebx, egx
         [0x17] 23:	movr ebx, cmt
         [0x18] 24:	loadval ecx
         [0x19] 25:	and ecx, ebx
         [0x1a] 26:	jne 41
line: 62 [0x1b] 27:	pushl 1
         [0x1c] 28:	movi #1, ebx
         [0x1e] 30:	newarry ebx
         [0x1f] 31:	movsl #0
         [0x20] 32:	loadl ebx, fp+0
         [0x21] 33:	movi #0, adx
         [0x23] 35:	rmov adx, ebx
         [0x24] 36:	call @576 // <std#string.$operator+=(var[])>
         [0x25] 37:	pop
line: 63 [0x26] 38:	call @603 // <std#__SRT_Global.readRawChar()>
         [0x27] 39:	ipopl 0
         [0x28] 40:	goto @8
line: 65 [0x29] 41:	movl 1
         [0x2a] 42:	returnobj
         [0x2b] 43:	ret

func:@602 [std#__SRT_Global.readChar] in file: lib/support/0.2.422//System.sharp:69:4: note:  
		def readChar() : var {
		   ^


readChar:
line: 69 [0x0] 0:	movg @1 // @std#__SRT_Global
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	call @287 // <std.kernel#ConsoleHandler.read()>
         [0x4] 4:	loadval ebx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@603 [std#__SRT_Global.readRawChar] in file: lib/support/0.2.422//System.sharp:73:4: note:  
		def readRawChar() : var {
		   ^


readRawChar:
line: 73 [0x0] 0:	movg @1 // @std#__SRT_Global
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	call @288 // <std.kernel#ConsoleHandler.readsilent()>
         [0x4] 4:	loadval ebx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@604 [std#__SRT_Global.println] in file: lib/support/0.2.422//System.sharp:77:4: note:  
		def println(string str) {
		   ^


println:
line: 77 [0x0] 0:	movg @1 // @std#__SRT_Global
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	pushl 0
         [0x4] 4:	call @578 // <std#string.toArray()>
         [0x5] 5:	call @285 // <std.kernel#ConsoleHandler.printData(var[])>
line: 78 [0x6] 6:	istore 10
         [0x7] 7:	call @608 // <std#__SRT_Global.printChar(var)>
         [0x8] 8:	ret

func:@605 [std#__SRT_Global.println] in file: lib/support/0.2.422//System.sharp:82:4: note:  
		def println(Printable o) {
		   ^


println:
line: 82 [0x0] 0:	movg @1 // @std#__SRT_Global
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	pushl 0
         [0x4] 4:	invoke_delegate 4, 0
         [0x5] 5:	call @578 // <std#string.toArray()>
         [0x6] 6:	call @285 // <std.kernel#ConsoleHandler.printData(var[])>
line: 83 [0x7] 7:	istore 10
         [0x8] 8:	call @608 // <std#__SRT_Global.printChar(var)>
         [0x9] 9:	ret

func:@606 [std#__SRT_Global.print] in file: lib/support/0.2.422//System.sharp:87:4: note:  
		def print(Printable o) {
		   ^


print:
line: 87 [0x0] 0:	movg @1 // @std#__SRT_Global
         [0x1] 1:	movn #0
         [0x2] 2:	pushobj
         [0x3] 3:	pushl 0
         [0x4] 4:	invoke_delegate 4, 0
         [0x5] 5:	call @578 // <std#string.toArray()>
         [0x6] 6:	call @285 // <std.kernel#ConsoleHandler.printData(var[])>
         [0x7] 7:	ret

func:@607 [std#__SRT_Global.print] in file: lib/support/0.2.422//System.sharp:91:4: note:  
		def print(var data) {
		   ^


print:
line: 91 [0x0] 0:	ipushl #0
         [0x1] 1:	istore 0
         [0x2] 2:	call @289 // <std.kernel#ConsoleHandler.__print_stdout_(var,var)>
         [0x3] 3:	ret

func:@608 [std#__SRT_Global.printChar] in file: lib/support/0.2.422//System.sharp:95:4: note:  
		def printChar(var data) {
		   ^


printChar:
line: 95 [0x0] 0:	ipushl #0
         [0x1] 1:	istore 1
         [0x2] 2:	call @289 // <std.kernel#ConsoleHandler.__print_stdout_(var,var)>
         [0x3] 3:	ret

func:@609 [std#__SRT_Global.getUtcTimeInMills] in file: lib/support/0.2.422//System.sharp:99:4: note:  
		def getUtcTimeInMills() : var {
		   ^


getUtcTimeInMills:
line: 99 [0x0] 0:	call @341 // <std.kernel#Time.millsTime()>
         [0x1] 1:	loadval ebx
         [0x2] 2:	return_val ebx
         [0x3] 3:	ret

func:@610 [std#__SRT_Global.getNanoTime] in file: lib/support/0.2.422//System.sharp:103:4: note:  
		def getNanoTime() : var {
		   ^


getNanoTime:
line: 103 [0x0] 0:	call @337 // <std.kernel#Time.nanoTime()>
          [0x1] 1:	loadval ebx
          [0x2] 2:	return_val ebx
          [0x3] 3:	ret

func:@611 [std#__SRT_Global.exit] in file: lib/support/0.2.422//System.sharp:107:4: note:  
		def exit() {
		   ^


exit:
line: 107 [0x0] 0:	call @304 // <std.kernel#Runtime.nativeExit()>
          [0x1] 1:	ret

func:@612 [std#__SRT_Global.copyOf] in file: lib/support/0.2.422//System.sharp:111:4: note:  
		def copyOf(object data, var len) : object[] {
		   ^


copyOf:
line: 111 [0x0] 0:	pushl 0
          [0x1] 1:	ipushl #1
          [0x2] 2:	call @309 // <std.kernel#Runtime.copy(object[],var)>
          [0x3] 3:	movsl #0
          [0x4] 4:	returnobj
          [0x5] 5:	ret

func:@613 [std#__SRT_Global.copyOf] in file: lib/support/0.2.422//System.sharp:115:4: note:  
		def copyOf(object data, var indexLen, var len) : object[] {
		   ^


copyOf:
line: 115 [0x0] 0:	pushl 0
          [0x1] 1:	ipushl #1
          [0x2] 2:	ipushl #2
          [0x3] 3:	call @310 // <std.kernel#Runtime.copy2(object[],var,var)>
          [0x4] 4:	movsl #0
          [0x5] 5:	returnobj
          [0x6] 6:	ret

func:@614 [std#__SRT_Global.memcpy] in file: lib/support/0.2.422//System.sharp:119:4: note:  
		def memcpy(object data, var startIndex, var endIndex) : object[] {
		   ^


memcpy:
line: 119 [0x0] 0:	pushl 0
          [0x1] 1:	ipushl #1
          [0x2] 2:	ipushl #2
          [0x3] 3:	call @311 // <std.kernel#Runtime.copy3(object[],var,var)>
          [0x4] 4:	movsl #0
          [0x5] 5:	returnobj
          [0x6] 6:	ret

func:@615 [std#__SRT_Global.realloc] in file: lib/support/0.2.422//System.sharp:123:4: note:  
		def realloc(object data, var size) {
		   ^


realloc:
line: 123 [0x0] 0:	pushl 0
          [0x1] 1:	ipushl #1
          [0x2] 2:	call @313 // <std.kernel#Runtime.realloc(object[],var)>
          [0x3] 3:	ret

func:@616 [std#__SRT_Global.invert] in file: lib/support/0.2.422//System.sharp:127:4: note:  
		def invert(object data, var startIndex, var endIndex) : object[] {
		   ^


invert:
line: 127 [0x0] 0:	pushl 0
          [0x1] 1:	ipushl #1
          [0x2] 2:	ipushl #2
          [0x3] 3:	call @312 // <std.kernel#Runtime.copy4(object[],var,var)>
          [0x4] 4:	movsl #0
          [0x5] 5:	returnobj
          [0x6] 6:	ret

func:@617 [std#__SRT_Global.sizeOf] in file: lib/support/0.2.422//System.sharp:131:4: note:  
		def sizeOf(object data) : var {
		   ^


sizeOf:
line: 131 [0x0] 0:	pushl 0
          [0x1] 1:	call @314 // <std.kernel#Runtime.sizeOf(object)>
          [0x2] 2:	loadval ebx
          [0x3] 3:	return_val ebx
          [0x4] 4:	ret

func:@618 [std#__SRT_Global.toString] in file: lib/support/0.2.422//System.sharp:135:4: note:  
		def toString(var data) : var[] {
		   ^


toString:
line: 135 [0x0] 0:	istore 103
          [0x1] 1:	ipushl #0
          [0x2] 2:	istore 0
          [0x3] 3:	call @315 // <std.kernel#Runtime._snprintf(var,var,var)>
          [0x4] 4:	movsl #0
          [0x5] 5:	returnobj
          [0x6] 6:	ret

func:@619 [std#__SRT_Global.snprintf] in file: lib/support/0.2.422//System.sharp:139:4: note:  
		def snprintf(var fmt, var data, var precision) : var[] {
		   ^


snprintf:
line: 139 [0x0] 0:	ipushl #0
          [0x1] 1:	ipushl #1
          [0x2] 2:	ipushl #2
          [0x3] 3:	call @315 // <std.kernel#Runtime._snprintf(var,var,var)>
          [0x4] 4:	movsl #0
          [0x5] 5:	returnobj
          [0x6] 6:	ret

func:@620 [std#Throwable.Throwable] in file: lib/support/0.2.422//Throwable.sharp:12:21: note:  
		    public Throwable(var[] message) {
		                    ^


Throwable:
line: 12 [0x0] 0:	pushl 1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	popobj
         [0x4] 4:	movl 0
         [0x5] 5:	returnobj
         [0x6] 6:	ret

func:@621 [std#Throwable.Throwable] in file: lib/support/0.2.422//Throwable.sharp:16:21: note:  
		    public Throwable(string message) {
		                    ^


Throwable:
line: 16 [0x0] 0:	pushl 1
         [0x1] 1:	call @578 // <std#string.toArray()>
         [0x2] 2:	movl 0
         [0x3] 3:	movn #0
         [0x4] 4:	popobj
         [0x5] 5:	movl 0
         [0x6] 6:	returnobj
         [0x7] 7:	ret

func:@622 [std#Throwable.getStackTrace] in file: lib/support/0.2.422//Throwable.sharp:20:29: note:  
		    public def getStackTrace() : string {
		                            ^


getStackTrace:
line: 20 [0x0] 0:	movl 0
         [0x1] 1:	movn #1
         [0x2] 2:	checknull
         [0x3] 3:	jne 9
line: 21 [0x4] 4:	newstr @34 // ""
         [0x5] 5:	movl 0
         [0x6] 6:	movn #1
         [0x7] 7:	popobj
         [0x8] 8:	nop
         [0x9] 9:	nop
line: 24 [0xa] 10:	new_class @47 // std#string
         [0xb] 11:	movl 0
         [0xc] 12:	movn #1
         [0xd] 13:	pushobj
         [0xe] 14:	call @553 // <std#string.string(var[])>
         [0xf] 15:	movsl #0
         [0x10] 16:	returnobj
         [0x11] 17:	ret

func:@623 [std#Throwable.getMessage] in file: lib/support/0.2.422//Throwable.sharp:28:26: note:  
		    public def getMessage() : string {
		                         ^


getMessage:
line: 28 [0x0] 0:	new_class @47 // std#string
         [0x1] 1:	movl 0
         [0x2] 2:	movn #0
         [0x3] 3:	pushobj
         [0x4] 4:	call @553 // <std#string.string(var[])>
         [0x5] 5:	movsl #0
         [0x6] 6:	returnobj
         [0x7] 7:	ret

func:@624 [std#Throwable.Throwable] in file: lib/support/0.2.422//Throwable.sharp:8:13: note:  
		public class Throwable {
		            ^


Throwable:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@625 [std#uchar.uchar] in file: lib/support/0.2.422//uchar.sharp:6:17: note:  
		    public uchar(var num) {
		                ^


uchar:
line: 6 [0x0] 0:	loadl ebx, fp+1
        [0x1] 1:	movu8 ebx, ebx
        [0x2] 2:	nop
        [0x3] 3:	rstore ebx
        [0x4] 4:	movl 0
        [0x5] 5:	movn #2
        [0x6] 6:	movi #0, adx
        [0x8] 8:	loadval ecx
        [0x9] 9:	rmov adx, ecx
        [0xa] 10:	movl 0
        [0xb] 11:	returnobj
        [0xc] 12:	ret

func:@626 [std#uchar.uchar] in file: lib/support/0.2.422//uchar.sharp:10:17: note:  
		    public uchar(integer num) {
		                ^


uchar:
line: 10 [0x0] 0:	pushl 0
         [0x1] 1:	movl 1
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	movu8 ebx, ebx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @119 // <std#integer.integer(var)>
         [0x9] 9:	pop
         [0xa] 10:	movl 0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@627 [std#uchar.$operator+] in file: lib/support/0.2.422//uchar.sharp:14:24: note:  
		    public def operator+(var num) : var {
		                       ^


$operator+:
line: 14 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	add ebx, egx -> ebx
         [0x9] 9:	movu8 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@628 [std#uchar.$operator+] in file: lib/support/0.2.422//uchar.sharp:18:24: note:  
		    public def operator+(integer num) : uchar {
		                       ^


$operator+:
line: 18 [0x0] 0:	new_class @49 // std#uchar
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @627 // <std#uchar.$operator+(var)>
         [0x9] 9:	call @625 // <std#uchar.uchar(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@629 [std#uchar.$operator-] in file: lib/support/0.2.422//uchar.sharp:22:24: note:  
		    public def operator-(var num) : var {
		                       ^


$operator-:
line: 22 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	sub ebx, egx -> ebx
         [0x9] 9:	movu8 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@630 [std#uchar.$operator-] in file: lib/support/0.2.422//uchar.sharp:26:24: note:  
		    public def operator-(integer num) : uchar {
		                       ^


$operator-:
line: 26 [0x0] 0:	new_class @49 // std#uchar
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @629 // <std#uchar.$operator-(var)>
         [0x9] 9:	call @625 // <std#uchar.uchar(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@631 [std#uchar.$operator*] in file: lib/support/0.2.422//uchar.sharp:30:24: note:  
		    public def operator*(var num) : var {
		                       ^


$operator*:
line: 30 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	mul ebx, egx -> ebx
         [0x9] 9:	movu8 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@632 [std#uchar.$operator*] in file: lib/support/0.2.422//uchar.sharp:34:24: note:  
		    public def operator*(integer num) : uchar {
		                       ^


$operator*:
line: 34 [0x0] 0:	new_class @49 // std#uchar
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @631 // <std#uchar.$operator*(var)>
         [0x9] 9:	call @625 // <std#uchar.uchar(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@633 [std#uchar.$operator/] in file: lib/support/0.2.422//uchar.sharp:38:24: note:  
		    public def operator/(var num) : var {
		                       ^


$operator/:
line: 38 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	div ebx, egx -> ebx
         [0x9] 9:	movu8 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@634 [std#uchar.$operator/] in file: lib/support/0.2.422//uchar.sharp:42:24: note:  
		    public def operator/(integer num) : uchar {
		                       ^


$operator/:
line: 42 [0x0] 0:	new_class @49 // std#uchar
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @633 // <std#uchar.$operator/(var)>
         [0x9] 9:	call @625 // <std#uchar.uchar(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@635 [std#uchar.$operator=] in file: lib/support/0.2.422//uchar.sharp:46:24: note:  
		    public def operator=(var num) : var {
		                       ^


$operator=:
line: 46 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movu8 ebx, ebx
         [0x2] 2:	nop
         [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #2
         [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@636 [std#uchar.$operator=] in file: lib/support/0.2.422//uchar.sharp:50:24: note:  
		    public def operator=(integer num) : uchar {
		                       ^


$operator=:
line: 50 [0x0] 0:	new_class @49 // std#uchar
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @635 // <std#uchar.$operator=(var)>
         [0x9] 9:	call @625 // <std#uchar.uchar(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@637 [std#uchar.$operator==] in file: lib/support/0.2.422//uchar.sharp:54:24: note:  
		    public def operator==(var num) : var {
		                       ^


$operator==:
line: 54 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	loadl egx, fp+1
         [0x6] 6:	test ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@638 [std#uchar.$operator!=] in file: lib/support/0.2.422//uchar.sharp:58:24: note:  
		    public def operator!=(var num) : var {
		                       ^


$operator!=:
line: 58 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	loadl egx, fp+1
         [0x6] 6:	tne ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@639 [std#uchar.$operator!=] in file: lib/support/0.2.422//uchar.sharp:62:24: note:  
		    public def operator!=(integer num) : var {
		                       ^


$operator!=:
line: 62 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	iaload_2 egx, adx
         [0x9] 9:	loadval ebx
         [0xa] 10:	tne ebx, egx
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@640 [std#uchar.$operator==] in file: lib/support/0.2.422//uchar.sharp:66:24: note:  
		    public def operator==(integer num) : var {
		                       ^


$operator==:
line: 66 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	iaload_2 egx, adx
         [0x9] 9:	loadval ebx
         [0xa] 10:	test ebx, egx
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@641 [std#uchar.$operator<] in file: lib/support/0.2.422//uchar.sharp:70:24: note:  
		    public def operator<(var num) : var {
		                       ^


$operator<:
line: 70 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	lt ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@642 [std#uchar.$operator<] in file: lib/support/0.2.422//uchar.sharp:74:24: note:  
		    public def operator<(integer num) : var {
		                       ^


$operator<:
line: 74 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #2
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lt ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@643 [std#uchar.$operator>] in file: lib/support/0.2.422//uchar.sharp:78:24: note:  
		    public def operator>(var num) : var {
		                       ^


$operator>:
line: 78 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	gt ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@644 [std#uchar.$operator>] in file: lib/support/0.2.422//uchar.sharp:82:24: note:  
		    public def operator>(integer num) : var {
		                       ^


$operator>:
line: 82 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #2
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	gt ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@645 [std#uchar.$operator<=] in file: lib/support/0.2.422//uchar.sharp:86:24: note:  
		    public def operator<=(var num) : var {
		                       ^


$operator<=:
line: 86 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	lte ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@646 [std#uchar.$operator<=] in file: lib/support/0.2.422//uchar.sharp:90:24: note:  
		    public def operator<=(integer num) : var {
		                       ^


$operator<=:
line: 90 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #2
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lte ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@647 [std#uchar.$operator>=] in file: lib/support/0.2.422//uchar.sharp:94:24: note:  
		    public def operator>=(var num) : var {
		                       ^


$operator>=:
line: 94 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	gte ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@648 [std#uchar.$operator>=] in file: lib/support/0.2.422//uchar.sharp:98:24: note:  
		    public def operator>=(integer num) : var {
		                       ^


$operator>=:
line: 98 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #2
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	gte ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@649 [std#uchar.$operator++] in file: lib/support/0.2.422//uchar.sharp:102:24: note:  
		    public def operator++(var num) : var { // post inc i++
		                       ^


$operator++:
line: 102 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	smovr_2 ebx, fp+2
line: 103 [0x6] 6:	istore 1
          [0x7] 7:	movl 0
          [0x8] 8:	movn #2
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	loadval egx
          [0xb] 11:	add ebx, egx -> ebx
          [0xd] 13:	movu8 ebx, ebx
          [0xe] 14:	nop
          [0xf] 15:	rstore ebx
          [0x10] 16:	movl 0
          [0x11] 17:	movn #2
          [0x12] 18:	loadval ecx
          [0x13] 19:	rmov adx, ecx
line: 104 [0x14] 20:	loadl ebx, fp+2
          [0x15] 21:	return_val ebx
          [0x16] 22:	ret

func:@650 [std#uchar.$operator++] in file: lib/support/0.2.422//uchar.sharp:108:24: note:  
		    public def operator++() : var { // pre inc ++i
		                       ^


$operator++:
line: 108 [0x0] 0:	istore 1
          [0x1] 1:	movl 0
          [0x2] 2:	movn #2
          [0x3] 3:	movi #0, adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	loadval egx
          [0x7] 7:	add ebx, egx -> ebx
          [0x9] 9:	movu8 ebx, ebx
          [0xa] 10:	nop
          [0xb] 11:	rstore ebx
          [0xc] 12:	movl 0
          [0xd] 13:	movn #2
          [0xe] 14:	loadval ecx
          [0xf] 15:	rmov adx, ecx
          [0x10] 16:	return_val ebx
          [0x11] 17:	ret

func:@651 [std#uchar.$operator--] in file: lib/support/0.2.422//uchar.sharp:112:24: note:  
		    public def operator--(var num) : var {
		                       ^


$operator--:
line: 112 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	smovr_2 ebx, fp+2
line: 113 [0x6] 6:	istore 1
          [0x7] 7:	movl 0
          [0x8] 8:	movn #2
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	loadval egx
          [0xb] 11:	sub ebx, egx -> ebx
          [0xd] 13:	movu8 ebx, ebx
          [0xe] 14:	nop
          [0xf] 15:	rstore ebx
          [0x10] 16:	movl 0
          [0x11] 17:	movn #2
          [0x12] 18:	loadval ecx
          [0x13] 19:	rmov adx, ecx
line: 114 [0x14] 20:	loadl ebx, fp+2
          [0x15] 21:	return_val ebx
          [0x16] 22:	ret

func:@652 [std#uchar.$operator--] in file: lib/support/0.2.422//uchar.sharp:118:24: note:  
		    public def operator--() : var {
		                       ^


$operator--:
line: 118 [0x0] 0:	istore 1
          [0x1] 1:	movl 0
          [0x2] 2:	movn #2
          [0x3] 3:	movi #0, adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	loadval egx
          [0x7] 7:	sub ebx, egx -> ebx
          [0x9] 9:	movu8 ebx, ebx
          [0xa] 10:	nop
          [0xb] 11:	rstore ebx
          [0xc] 12:	movl 0
          [0xd] 13:	movn #2
          [0xe] 14:	loadval ecx
          [0xf] 15:	rmov adx, ecx
          [0x10] 16:	return_val ebx
          [0x11] 17:	ret

func:@653 [std#uchar.value] in file: lib/support/0.2.422//uchar.sharp:122:21: note:  
		    public def value() : var {
		                    ^


value:
line: 122 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@654 [std#uchar.toString] in file: lib/support/0.2.422//uchar.sharp:126:24: note:  
		    public def delegate::toString() : string {
		                       ^


toString:
line: 126 [0x0] 0:	new_class @47 // std#string
          [0x1] 1:	newstr @34 // ""
          [0x2] 2:	call @553 // <std#string.string(var[])>
          [0x3] 3:	movl 0
          [0x4] 4:	movn #2
          [0x5] 5:	movi #0, adx
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	rstore ebx
          [0x9] 9:	call @573 // <std#string.$operator+(var)>
          [0xa] 10:	movsl #0
          [0xb] 11:	returnobj
          [0xc] 12:	ret

func:@655 [std#uchar.uchar] in file: lib/support/0.2.422//uchar.sharp:3:13: note:  
		public class uchar base integer {
		            ^


uchar:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@656 [std#uint.uint] in file: lib/support/0.2.422//uint.sharp:6:16: note:  
		    public uint(var num) {
		               ^


uint:
line: 6 [0x0] 0:	loadl ebx, fp+1
        [0x1] 1:	movu32 ebx, ebx
        [0x2] 2:	nop
        [0x3] 3:	rstore ebx
        [0x4] 4:	movl 0
        [0x5] 5:	movn #2
        [0x6] 6:	movi #0, adx
        [0x8] 8:	loadval ecx
        [0x9] 9:	rmov adx, ecx
        [0xa] 10:	movl 0
        [0xb] 11:	returnobj
        [0xc] 12:	ret

func:@657 [std#uint.uint] in file: lib/support/0.2.422//uint.sharp:10:16: note:  
		    public uint(integer num) {
		               ^


uint:
line: 10 [0x0] 0:	pushl 0
         [0x1] 1:	movl 1
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	movu32 ebx, ebx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @119 // <std#integer.integer(var)>
         [0x9] 9:	pop
         [0xa] 10:	movl 0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@658 [std#uint.$operator+] in file: lib/support/0.2.422//uint.sharp:14:24: note:  
		    public def operator+(var num) : var {
		                       ^


$operator+:
line: 14 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	add ebx, egx -> ebx
         [0x9] 9:	movu32 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@659 [std#uint.$operator+] in file: lib/support/0.2.422//uint.sharp:18:24: note:  
		    public def operator+(integer num) : uint {
		                       ^


$operator+:
line: 18 [0x0] 0:	new_class @50 // std#uint
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @658 // <std#uint.$operator+(var)>
         [0x9] 9:	call @656 // <std#uint.uint(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@660 [std#uint.$operator-] in file: lib/support/0.2.422//uint.sharp:22:24: note:  
		    public def operator-(var num) : var {
		                       ^


$operator-:
line: 22 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	sub ebx, egx -> ebx
         [0x9] 9:	movu32 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@661 [std#uint.$operator-] in file: lib/support/0.2.422//uint.sharp:26:24: note:  
		    public def operator-(integer num) : uint {
		                       ^


$operator-:
line: 26 [0x0] 0:	new_class @50 // std#uint
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @660 // <std#uint.$operator-(var)>
         [0x9] 9:	call @656 // <std#uint.uint(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@662 [std#uint.$operator*] in file: lib/support/0.2.422//uint.sharp:30:24: note:  
		    public def operator*(var num) : var {
		                       ^


$operator*:
line: 30 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	mul ebx, egx -> ebx
         [0x9] 9:	movu32 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@663 [std#uint.$operator*] in file: lib/support/0.2.422//uint.sharp:34:24: note:  
		    public def operator*(integer num) : uint {
		                       ^


$operator*:
line: 34 [0x0] 0:	new_class @50 // std#uint
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @662 // <std#uint.$operator*(var)>
         [0x9] 9:	call @656 // <std#uint.uint(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@664 [std#uint.$operator!=] in file: lib/support/0.2.422//uint.sharp:38:24: note:  
		    public def operator!=(var num) : var {
		                       ^


$operator!=:
line: 38 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	loadl egx, fp+1
         [0x6] 6:	tne ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@665 [std#uint.$operator!=] in file: lib/support/0.2.422//uint.sharp:42:24: note:  
		    public def operator!=(integer num) : var {
		                       ^


$operator!=:
line: 42 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	iaload_2 egx, adx
         [0x9] 9:	loadval ebx
         [0xa] 10:	tne ebx, egx
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@666 [std#uint.$operator/] in file: lib/support/0.2.422//uint.sharp:46:24: note:  
		    public def operator/(var num) : var {
		                       ^


$operator/:
line: 46 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	div ebx, egx -> ebx
         [0x9] 9:	movu32 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@667 [std#uint.$operator/] in file: lib/support/0.2.422//uint.sharp:50:24: note:  
		    public def operator/(integer num) : uint {
		                       ^


$operator/:
line: 50 [0x0] 0:	new_class @50 // std#uint
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @666 // <std#uint.$operator/(var)>
         [0x9] 9:	call @656 // <std#uint.uint(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@668 [std#uint.$operator=] in file: lib/support/0.2.422//uint.sharp:54:24: note:  
		    public def operator=(var num) : var {
		                       ^


$operator=:
line: 54 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movu32 ebx, ebx
         [0x2] 2:	nop
         [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #2
         [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@669 [std#uint.$operator=] in file: lib/support/0.2.422//uint.sharp:58:24: note:  
		    public def operator=(integer num) : uint {
		                       ^


$operator=:
line: 58 [0x0] 0:	new_class @50 // std#uint
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @668 // <std#uint.$operator=(var)>
         [0x9] 9:	call @656 // <std#uint.uint(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@670 [std#uint.$operator==] in file: lib/support/0.2.422//uint.sharp:62:24: note:  
		    public def operator==(var num) : var {
		                       ^


$operator==:
line: 62 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	loadl egx, fp+1
         [0x6] 6:	test ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@671 [std#uint.$operator==] in file: lib/support/0.2.422//uint.sharp:66:24: note:  
		    public def operator==(integer num) : var {
		                       ^


$operator==:
line: 66 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	iaload_2 egx, adx
         [0x9] 9:	loadval ebx
         [0xa] 10:	test ebx, egx
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@672 [std#uint.$operator<] in file: lib/support/0.2.422//uint.sharp:70:24: note:  
		    public def operator<(var num) : var {
		                       ^


$operator<:
line: 70 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	lt ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@673 [std#uint.$operator<] in file: lib/support/0.2.422//uint.sharp:74:24: note:  
		    public def operator<(integer num) : var {
		                       ^


$operator<:
line: 74 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #2
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lt ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@674 [std#uint.$operator>] in file: lib/support/0.2.422//uint.sharp:78:24: note:  
		    public def operator>(var num) : var {
		                       ^


$operator>:
line: 78 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	gt ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@675 [std#uint.$operator>] in file: lib/support/0.2.422//uint.sharp:82:24: note:  
		    public def operator>(integer num) : var {
		                       ^


$operator>:
line: 82 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #2
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	gt ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@676 [std#uint.$operator<=] in file: lib/support/0.2.422//uint.sharp:86:24: note:  
		    public def operator<=(var num) : var {
		                       ^


$operator<=:
line: 86 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	lte ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@677 [std#uint.$operator<=] in file: lib/support/0.2.422//uint.sharp:90:24: note:  
		    public def operator<=(integer num) : var {
		                       ^


$operator<=:
line: 90 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #2
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lte ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@678 [std#uint.$operator>=] in file: lib/support/0.2.422//uint.sharp:94:24: note:  
		    public def operator>=(var num) : var {
		                       ^


$operator>=:
line: 94 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	gte ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@679 [std#uint.$operator>=] in file: lib/support/0.2.422//uint.sharp:98:24: note:  
		    public def operator>=(integer num) : var {
		                       ^


$operator>=:
line: 98 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #2
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	gte ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@680 [std#uint.$operator++] in file: lib/support/0.2.422//uint.sharp:102:24: note:  
		    public def operator++(var num) : var { // post inc i++
		                       ^


$operator++:
line: 102 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	smovr_2 ebx, fp+2
line: 103 [0x6] 6:	istore 1
          [0x7] 7:	movl 0
          [0x8] 8:	movn #2
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	loadval egx
          [0xb] 11:	add ebx, egx -> ebx
          [0xd] 13:	movu32 ebx, ebx
          [0xe] 14:	nop
          [0xf] 15:	rstore ebx
          [0x10] 16:	movl 0
          [0x11] 17:	movn #2
          [0x12] 18:	loadval ecx
          [0x13] 19:	rmov adx, ecx
line: 104 [0x14] 20:	loadl ebx, fp+2
          [0x15] 21:	return_val ebx
          [0x16] 22:	ret

func:@681 [std#uint.$operator++] in file: lib/support/0.2.422//uint.sharp:108:24: note:  
		    public def operator++() : var { // pre inc ++i
		                       ^


$operator++:
line: 108 [0x0] 0:	istore 1
          [0x1] 1:	movl 0
          [0x2] 2:	movn #2
          [0x3] 3:	movi #0, adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	loadval egx
          [0x7] 7:	add ebx, egx -> ebx
          [0x9] 9:	movu32 ebx, ebx
          [0xa] 10:	nop
          [0xb] 11:	rstore ebx
          [0xc] 12:	movl 0
          [0xd] 13:	movn #2
          [0xe] 14:	loadval ecx
          [0xf] 15:	rmov adx, ecx
          [0x10] 16:	return_val ebx
          [0x11] 17:	ret

func:@682 [std#uint.$operator--] in file: lib/support/0.2.422//uint.sharp:112:24: note:  
		    public def operator--(var num) : var {
		                       ^


$operator--:
line: 112 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	smovr_2 ebx, fp+2
line: 113 [0x6] 6:	istore 1
          [0x7] 7:	movl 0
          [0x8] 8:	movn #2
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	loadval egx
          [0xb] 11:	sub ebx, egx -> ebx
          [0xd] 13:	movu32 ebx, ebx
          [0xe] 14:	nop
          [0xf] 15:	rstore ebx
          [0x10] 16:	movl 0
          [0x11] 17:	movn #2
          [0x12] 18:	loadval ecx
          [0x13] 19:	rmov adx, ecx
line: 114 [0x14] 20:	loadl ebx, fp+2
          [0x15] 21:	return_val ebx
          [0x16] 22:	ret

func:@683 [std#uint.$operator--] in file: lib/support/0.2.422//uint.sharp:118:24: note:  
		    public def operator--() : var {
		                       ^


$operator--:
line: 118 [0x0] 0:	istore 1
          [0x1] 1:	movl 0
          [0x2] 2:	movn #2
          [0x3] 3:	movi #0, adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	loadval egx
          [0x7] 7:	sub ebx, egx -> ebx
          [0x9] 9:	movu32 ebx, ebx
          [0xa] 10:	nop
          [0xb] 11:	rstore ebx
          [0xc] 12:	movl 0
          [0xd] 13:	movn #2
          [0xe] 14:	loadval ecx
          [0xf] 15:	rmov adx, ecx
          [0x10] 16:	return_val ebx
          [0x11] 17:	ret

func:@684 [std#uint.value] in file: lib/support/0.2.422//uint.sharp:122:21: note:  
		    public def value() : var {
		                    ^


value:
line: 122 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@685 [std#uint.toString] in file: lib/support/0.2.422//uint.sharp:126:24: note:  
		    public def delegate::toString() : string {
		                       ^


toString:
line: 126 [0x0] 0:	new_class @47 // std#string
          [0x1] 1:	newstr @34 // ""
          [0x2] 2:	call @553 // <std#string.string(var[])>
          [0x3] 3:	movl 0
          [0x4] 4:	movn #2
          [0x5] 5:	movi #0, adx
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	rstore ebx
          [0x9] 9:	call @573 // <std#string.$operator+(var)>
          [0xa] 10:	movsl #0
          [0xb] 11:	returnobj
          [0xc] 12:	ret

func:@686 [std#uint.uint] in file: lib/support/0.2.422//uint.sharp:3:13: note:  
		public class uint base integer {
		            ^


uint:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@687 [std#ulong.ulong] in file: lib/support/0.2.422//ulong.sharp:6:17: note:  
		    public ulong(var num) {
		                ^


ulong:
line: 6 [0x0] 0:	loadl ebx, fp+1
        [0x1] 1:	movu64 ebx, ebx
        [0x2] 2:	nop
        [0x3] 3:	rstore ebx
        [0x4] 4:	movl 0
        [0x5] 5:	movn #2
        [0x6] 6:	movi #0, adx
        [0x8] 8:	loadval ecx
        [0x9] 9:	rmov adx, ecx
        [0xa] 10:	movl 0
        [0xb] 11:	returnobj
        [0xc] 12:	ret

func:@688 [std#ulong.ulong] in file: lib/support/0.2.422//ulong.sharp:10:17: note:  
		    public ulong(integer num) {
		                ^


ulong:
line: 10 [0x0] 0:	pushl 0
         [0x1] 1:	movl 1
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	movu64 ebx, ebx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @119 // <std#integer.integer(var)>
         [0x9] 9:	pop
         [0xa] 10:	movl 0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@689 [std#ulong.$operator+] in file: lib/support/0.2.422//ulong.sharp:14:24: note:  
		    public def operator+(var num) : var {
		                       ^


$operator+:
line: 14 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	add ebx, egx -> ebx
         [0x9] 9:	movu64 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@690 [std#ulong.$operator+] in file: lib/support/0.2.422//ulong.sharp:18:24: note:  
		    public def operator+(integer num) : ulong {
		                       ^


$operator+:
line: 18 [0x0] 0:	new_class @51 // std#ulong
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @689 // <std#ulong.$operator+(var)>
         [0x9] 9:	call @687 // <std#ulong.ulong(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@691 [std#ulong.$operator-] in file: lib/support/0.2.422//ulong.sharp:22:24: note:  
		    public def operator-(var num) : var {
		                       ^


$operator-:
line: 22 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	sub ebx, egx -> ebx
         [0x9] 9:	movu64 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@692 [std#ulong.$operator-] in file: lib/support/0.2.422//ulong.sharp:26:24: note:  
		    public def operator-(integer num) : ulong {
		                       ^


$operator-:
line: 26 [0x0] 0:	new_class @51 // std#ulong
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @691 // <std#ulong.$operator-(var)>
         [0x9] 9:	call @687 // <std#ulong.ulong(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@693 [std#ulong.$operator*] in file: lib/support/0.2.422//ulong.sharp:30:24: note:  
		    public def operator*(var num) : var {
		                       ^


$operator*:
line: 30 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	mul ebx, egx -> ebx
         [0x9] 9:	movu64 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@694 [std#ulong.$operator*] in file: lib/support/0.2.422//ulong.sharp:34:24: note:  
		    public def operator*(integer num) : ulong {
		                       ^


$operator*:
line: 34 [0x0] 0:	new_class @51 // std#ulong
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @693 // <std#ulong.$operator*(var)>
         [0x9] 9:	call @687 // <std#ulong.ulong(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@695 [std#ulong.$operator/] in file: lib/support/0.2.422//ulong.sharp:38:24: note:  
		    public def operator/(var num) : var {
		                       ^


$operator/:
line: 38 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	div ebx, egx -> ebx
         [0x9] 9:	movu64 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@696 [std#ulong.$operator/] in file: lib/support/0.2.422//ulong.sharp:42:24: note:  
		    public def operator/(integer num) : ulong {
		                       ^


$operator/:
line: 42 [0x0] 0:	new_class @51 // std#ulong
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @695 // <std#ulong.$operator/(var)>
         [0x9] 9:	call @687 // <std#ulong.ulong(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@697 [std#ulong.$operator!=] in file: lib/support/0.2.422//ulong.sharp:46:24: note:  
		    public def operator!=(var num) : var {
		                       ^


$operator!=:
line: 46 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	loadl egx, fp+1
         [0x6] 6:	tne ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@698 [std#ulong.$operator!=] in file: lib/support/0.2.422//ulong.sharp:50:24: note:  
		    public def operator!=(integer num) : var {
		                       ^


$operator!=:
line: 50 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	iaload_2 egx, adx
         [0x9] 9:	loadval ebx
         [0xa] 10:	tne ebx, egx
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@699 [std#ulong.$operator=] in file: lib/support/0.2.422//ulong.sharp:54:24: note:  
		    public def operator=(var num) : var {
		                       ^


$operator=:
line: 54 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movu64 ebx, ebx
         [0x2] 2:	nop
         [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #2
         [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@700 [std#ulong.$operator=] in file: lib/support/0.2.422//ulong.sharp:58:24: note:  
		    public def operator=(integer num) : ulong {
		                       ^


$operator=:
line: 58 [0x0] 0:	new_class @51 // std#ulong
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @699 // <std#ulong.$operator=(var)>
         [0x9] 9:	call @687 // <std#ulong.ulong(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@701 [std#ulong.$operator==] in file: lib/support/0.2.422//ulong.sharp:62:24: note:  
		    public def operator==(var num) : var {
		                       ^


$operator==:
line: 62 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	loadl egx, fp+1
         [0x6] 6:	test ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@702 [std#ulong.$operator==] in file: lib/support/0.2.422//ulong.sharp:66:24: note:  
		    public def operator==(integer num) : var {
		                       ^


$operator==:
line: 66 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	iaload_2 egx, adx
         [0x9] 9:	loadval ebx
         [0xa] 10:	test ebx, egx
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@703 [std#ulong.$operator<] in file: lib/support/0.2.422//ulong.sharp:70:24: note:  
		    public def operator<(var num) : var {
		                       ^


$operator<:
line: 70 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	lt ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@704 [std#ulong.$operator<] in file: lib/support/0.2.422//ulong.sharp:74:24: note:  
		    public def operator<(integer num) : var {
		                       ^


$operator<:
line: 74 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #2
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lt ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@705 [std#ulong.$operator>] in file: lib/support/0.2.422//ulong.sharp:78:24: note:  
		    public def operator>(var num) : var {
		                       ^


$operator>:
line: 78 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	gt ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@706 [std#ulong.$operator>] in file: lib/support/0.2.422//ulong.sharp:82:24: note:  
		    public def operator>(integer num) : var {
		                       ^


$operator>:
line: 82 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #2
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	gt ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@707 [std#ulong.$operator<=] in file: lib/support/0.2.422//ulong.sharp:86:24: note:  
		    public def operator<=(var num) : var {
		                       ^


$operator<=:
line: 86 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	lte ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@708 [std#ulong.$operator<=] in file: lib/support/0.2.422//ulong.sharp:90:24: note:  
		    public def operator<=(integer num) : var {
		                       ^


$operator<=:
line: 90 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #2
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lte ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@709 [std#ulong.$operator>=] in file: lib/support/0.2.422//ulong.sharp:94:24: note:  
		    public def operator>=(var num) : var {
		                       ^


$operator>=:
line: 94 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	gte ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@710 [std#ulong.$operator>=] in file: lib/support/0.2.422//ulong.sharp:98:24: note:  
		    public def operator>=(integer num) : var {
		                       ^


$operator>=:
line: 98 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #2
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	gte ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@711 [std#ulong.$operator++] in file: lib/support/0.2.422//ulong.sharp:102:24: note:  
		    public def operator++(var num) : var { // post inc i++
		                       ^


$operator++:
line: 102 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	smovr_2 ebx, fp+2
line: 103 [0x6] 6:	istore 1
          [0x7] 7:	movl 0
          [0x8] 8:	movn #2
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	loadval egx
          [0xb] 11:	add ebx, egx -> ebx
          [0xd] 13:	movu64 ebx, ebx
          [0xe] 14:	nop
          [0xf] 15:	rstore ebx
          [0x10] 16:	movl 0
          [0x11] 17:	movn #2
          [0x12] 18:	loadval ecx
          [0x13] 19:	rmov adx, ecx
line: 104 [0x14] 20:	loadl ebx, fp+2
          [0x15] 21:	return_val ebx
          [0x16] 22:	ret

func:@712 [std#ulong.$operator++] in file: lib/support/0.2.422//ulong.sharp:108:24: note:  
		    public def operator++() : var { // pre inc ++i
		                       ^


$operator++:
line: 108 [0x0] 0:	istore 1
          [0x1] 1:	movl 0
          [0x2] 2:	movn #2
          [0x3] 3:	movi #0, adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	loadval egx
          [0x7] 7:	add ebx, egx -> ebx
          [0x9] 9:	movu64 ebx, ebx
          [0xa] 10:	nop
          [0xb] 11:	rstore ebx
          [0xc] 12:	movl 0
          [0xd] 13:	movn #2
          [0xe] 14:	loadval ecx
          [0xf] 15:	rmov adx, ecx
          [0x10] 16:	return_val ebx
          [0x11] 17:	ret

func:@713 [std#ulong.$operator--] in file: lib/support/0.2.422//ulong.sharp:112:24: note:  
		    public def operator--(var num) : var {
		                       ^


$operator--:
line: 112 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	smovr_2 ebx, fp+2
line: 113 [0x6] 6:	istore 1
          [0x7] 7:	movl 0
          [0x8] 8:	movn #2
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	loadval egx
          [0xb] 11:	sub ebx, egx -> ebx
          [0xd] 13:	movu64 ebx, ebx
          [0xe] 14:	nop
          [0xf] 15:	rstore ebx
          [0x10] 16:	movl 0
          [0x11] 17:	movn #2
          [0x12] 18:	loadval ecx
          [0x13] 19:	rmov adx, ecx
line: 114 [0x14] 20:	loadl ebx, fp+2
          [0x15] 21:	return_val ebx
          [0x16] 22:	ret

func:@714 [std#ulong.$operator--] in file: lib/support/0.2.422//ulong.sharp:118:24: note:  
		    public def operator--() : var {
		                       ^


$operator--:
line: 118 [0x0] 0:	istore 1
          [0x1] 1:	movl 0
          [0x2] 2:	movn #2
          [0x3] 3:	movi #0, adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	loadval egx
          [0x7] 7:	sub ebx, egx -> ebx
          [0x9] 9:	movu64 ebx, ebx
          [0xa] 10:	nop
          [0xb] 11:	rstore ebx
          [0xc] 12:	movl 0
          [0xd] 13:	movn #2
          [0xe] 14:	loadval ecx
          [0xf] 15:	rmov adx, ecx
          [0x10] 16:	return_val ebx
          [0x11] 17:	ret

func:@715 [std#ulong.value] in file: lib/support/0.2.422//ulong.sharp:122:21: note:  
		    public def value() : var {
		                    ^


value:
line: 122 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@716 [std#ulong.toString] in file: lib/support/0.2.422//ulong.sharp:126:24: note:  
		    public def delegate::toString() : string {
		                       ^


toString:
line: 126 [0x0] 0:	new_class @47 // std#string
          [0x1] 1:	newstr @34 // ""
          [0x2] 2:	call @553 // <std#string.string(var[])>
          [0x3] 3:	movl 0
          [0x4] 4:	movn #2
          [0x5] 5:	movi #0, adx
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	rstore ebx
          [0x9] 9:	call @573 // <std#string.$operator+(var)>
          [0xa] 10:	movsl #0
          [0xb] 11:	returnobj
          [0xc] 12:	ret

func:@717 [std#ulong.ulong] in file: lib/support/0.2.422//ulong.sharp:3:13: note:  
		public class ulong base integer {
		            ^


ulong:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@718 [std#Unique.Unique] in file: lib/support/0.2.422//Unique.sharp:10:10: note:  
		interface Unique {
		         ^


Unique:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@719 [std#ushort.ushort] in file: lib/support/0.2.422//ushort.sharp:6:18: note:  
		    public ushort(var num) {
		                 ^


ushort:
line: 6 [0x0] 0:	loadl ebx, fp+1
        [0x1] 1:	movu16 ebx, ebx
        [0x2] 2:	nop
        [0x3] 3:	rstore ebx
        [0x4] 4:	movl 0
        [0x5] 5:	movn #2
        [0x6] 6:	movi #0, adx
        [0x8] 8:	loadval ecx
        [0x9] 9:	rmov adx, ecx
        [0xa] 10:	movl 0
        [0xb] 11:	returnobj
        [0xc] 12:	ret

func:@720 [std#ushort.ushort] in file: lib/support/0.2.422//ushort.sharp:10:18: note:  
		    public ushort(integer num) {
		                 ^


ushort:
line: 10 [0x0] 0:	pushl 0
         [0x1] 1:	movl 1
         [0x2] 2:	movn #0
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	movu16 ebx, ebx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @119 // <std#integer.integer(var)>
         [0x9] 9:	pop
         [0xa] 10:	movl 0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@721 [std#ushort.$operator+] in file: lib/support/0.2.422//ushort.sharp:14:24: note:  
		    public def operator+(var num) : var {
		                       ^


$operator+:
line: 14 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	add ebx, egx -> ebx
         [0x9] 9:	movu16 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@722 [std#ushort.$operator+] in file: lib/support/0.2.422//ushort.sharp:18:24: note:  
		    public def operator+(integer num) : ushort {
		                       ^


$operator+:
line: 18 [0x0] 0:	new_class @53 // std#ushort
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @721 // <std#ushort.$operator+(var)>
         [0x9] 9:	call @719 // <std#ushort.ushort(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@723 [std#ushort.$operator-] in file: lib/support/0.2.422//ushort.sharp:22:24: note:  
		    public def operator-(var num) : var {
		                       ^


$operator-:
line: 22 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	sub ebx, egx -> ebx
         [0x9] 9:	movu16 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@724 [std#ushort.$operator-] in file: lib/support/0.2.422//ushort.sharp:26:24: note:  
		    public def operator-(integer num) : ushort {
		                       ^


$operator-:
line: 26 [0x0] 0:	new_class @53 // std#ushort
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @723 // <std#ushort.$operator-(var)>
         [0x9] 9:	call @719 // <std#ushort.ushort(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@725 [std#ushort.$operator*] in file: lib/support/0.2.422//ushort.sharp:30:24: note:  
		    public def operator*(var num) : var {
		                       ^


$operator*:
line: 30 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	mul ebx, egx -> ebx
         [0x9] 9:	movu16 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@726 [std#ushort.$operator*] in file: lib/support/0.2.422//ushort.sharp:34:24: note:  
		    public def operator*(integer num) : ushort {
		                       ^


$operator*:
line: 34 [0x0] 0:	new_class @53 // std#ushort
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @725 // <std#ushort.$operator*(var)>
         [0x9] 9:	call @719 // <std#ushort.ushort(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@727 [std#ushort.$operator/] in file: lib/support/0.2.422//ushort.sharp:38:24: note:  
		    public def operator/(var num) : var {
		                       ^


$operator/:
line: 38 [0x0] 0:	ipushl #1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	loadval egx
         [0x7] 7:	div ebx, egx -> ebx
         [0x9] 9:	movu16 ebx, ebx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@728 [std#ushort.$operator/] in file: lib/support/0.2.422//ushort.sharp:42:24: note:  
		    public def operator/(integer num) : ushort {
		                       ^


$operator/:
line: 42 [0x0] 0:	new_class @53 // std#ushort
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @727 // <std#ushort.$operator/(var)>
         [0x9] 9:	call @719 // <std#ushort.ushort(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@729 [std#ushort.$operator=] in file: lib/support/0.2.422//ushort.sharp:46:24: note:  
		    public def operator=(var num) : var {
		                       ^


$operator=:
line: 46 [0x0] 0:	loadl ebx, fp+1
         [0x1] 1:	movu16 ebx, ebx
         [0x2] 2:	nop
         [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #2
         [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
         [0xa] 10:	return_val ebx
         [0xb] 11:	ret

func:@730 [std#ushort.$operator=] in file: lib/support/0.2.422//ushort.sharp:50:24: note:  
		    public def operator=(integer num) : ushort {
		                       ^


$operator=:
line: 50 [0x0] 0:	new_class @53 // std#ushort
         [0x1] 1:	pushl 0
         [0x2] 2:	movl 1
         [0x3] 3:	movn #0
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	rstore ebx
         [0x8] 8:	call @729 // <std#ushort.$operator=(var)>
         [0x9] 9:	call @719 // <std#ushort.ushort(var)>
         [0xa] 10:	movsl #0
         [0xb] 11:	returnobj
         [0xc] 12:	ret

func:@731 [std#ushort.$operator!=] in file: lib/support/0.2.422//ushort.sharp:54:24: note:  
		    public def operator!=(var num) : var {
		                       ^


$operator!=:
line: 54 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	loadl egx, fp+1
         [0x6] 6:	tne ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@732 [std#ushort.$operator!=] in file: lib/support/0.2.422//ushort.sharp:58:24: note:  
		    public def operator!=(integer num) : var {
		                       ^


$operator!=:
line: 58 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	iaload_2 egx, adx
         [0x9] 9:	loadval ebx
         [0xa] 10:	tne ebx, egx
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@733 [std#ushort.$operator==] in file: lib/support/0.2.422//ushort.sharp:62:24: note:  
		    public def operator==(var num) : var {
		                       ^


$operator==:
line: 62 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	loadl egx, fp+1
         [0x6] 6:	test ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@734 [std#ushort.$operator==] in file: lib/support/0.2.422//ushort.sharp:66:24: note:  
		    public def operator==(integer num) : var {
		                       ^


$operator==:
line: 66 [0x0] 0:	movl 0
         [0x1] 1:	movn #2
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movl 1
         [0x7] 7:	movn #0
         [0x8] 8:	iaload_2 egx, adx
         [0x9] 9:	loadval ebx
         [0xa] 10:	test ebx, egx
         [0xb] 11:	return_val cmt
         [0xc] 12:	ret

func:@735 [std#ushort.$operator<] in file: lib/support/0.2.422//ushort.sharp:70:24: note:  
		    public def operator<(var num) : var {
		                       ^


$operator<:
line: 70 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	lt ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@736 [std#ushort.$operator<] in file: lib/support/0.2.422//ushort.sharp:74:24: note:  
		    public def operator<(integer num) : var {
		                       ^


$operator<:
line: 74 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #2
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lt ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@737 [std#ushort.$operator>] in file: lib/support/0.2.422//ushort.sharp:78:24: note:  
		    public def operator>(var num) : var {
		                       ^


$operator>:
line: 78 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	gt ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@738 [std#ushort.$operator>] in file: lib/support/0.2.422//ushort.sharp:82:24: note:  
		    public def operator>(integer num) : var {
		                       ^


$operator>:
line: 82 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #2
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	gt ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@739 [std#ushort.$operator<=] in file: lib/support/0.2.422//ushort.sharp:86:24: note:  
		    public def operator<=(var num) : var {
		                       ^


$operator<=:
line: 86 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	lte ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@740 [std#ushort.$operator<=] in file: lib/support/0.2.422//ushort.sharp:90:24: note:  
		    public def operator<=(integer num) : var {
		                       ^


$operator<=:
line: 90 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #2
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	lte ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@741 [std#ushort.$operator>=] in file: lib/support/0.2.422//ushort.sharp:94:24: note:  
		    public def operator>=(var num) : var {
		                       ^


$operator>=:
line: 94 [0x0] 0:	loadl egx, fp+1
         [0x1] 1:	movl 0
         [0x2] 2:	movn #2
         [0x3] 3:	movi #0, adx
         [0x5] 5:	iaload_2 ebx, adx
         [0x6] 6:	gte ebx, egx
         [0x7] 7:	return_val cmt
         [0x8] 8:	ret

func:@742 [std#ushort.$operator>=] in file: lib/support/0.2.422//ushort.sharp:98:24: note:  
		    public def operator>=(integer num) : var {
		                       ^


$operator>=:
line: 98 [0x0] 0:	movl 1
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #2
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	gte ebx, egx
         [0x9] 9:	return_val cmt
         [0xa] 10:	ret

func:@743 [std#ushort.$operator++] in file: lib/support/0.2.422//ushort.sharp:102:24: note:  
		    public def operator++(var num) : var { // post inc i++
		                       ^


$operator++:
line: 102 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	smovr_2 ebx, fp+2
line: 103 [0x6] 6:	istore 1
          [0x7] 7:	movl 0
          [0x8] 8:	movn #2
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	loadval egx
          [0xb] 11:	add ebx, egx -> ebx
          [0xd] 13:	movu16 ebx, ebx
          [0xe] 14:	nop
          [0xf] 15:	rstore ebx
          [0x10] 16:	movl 0
          [0x11] 17:	movn #2
          [0x12] 18:	loadval ecx
          [0x13] 19:	rmov adx, ecx
line: 104 [0x14] 20:	loadl ebx, fp+2
          [0x15] 21:	return_val ebx
          [0x16] 22:	ret

func:@744 [std#ushort.$operator++] in file: lib/support/0.2.422//ushort.sharp:108:24: note:  
		    public def operator++() : var { // pre inc ++i
		                       ^


$operator++:
line: 108 [0x0] 0:	istore 1
          [0x1] 1:	movl 0
          [0x2] 2:	movn #2
          [0x3] 3:	movi #0, adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	loadval egx
          [0x7] 7:	add ebx, egx -> ebx
          [0x9] 9:	movu16 ebx, ebx
          [0xa] 10:	nop
          [0xb] 11:	rstore ebx
          [0xc] 12:	movl 0
          [0xd] 13:	movn #2
          [0xe] 14:	loadval ecx
          [0xf] 15:	rmov adx, ecx
          [0x10] 16:	return_val ebx
          [0x11] 17:	ret

func:@745 [std#ushort.$operator--] in file: lib/support/0.2.422//ushort.sharp:112:24: note:  
		    public def operator--(var num) : var {
		                       ^


$operator--:
line: 112 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	smovr_2 ebx, fp+2
line: 113 [0x6] 6:	istore 1
          [0x7] 7:	movl 0
          [0x8] 8:	movn #2
          [0x9] 9:	iaload_2 ebx, adx
          [0xa] 10:	loadval egx
          [0xb] 11:	sub ebx, egx -> ebx
          [0xd] 13:	movu16 ebx, ebx
          [0xe] 14:	nop
          [0xf] 15:	rstore ebx
          [0x10] 16:	movl 0
          [0x11] 17:	movn #2
          [0x12] 18:	loadval ecx
          [0x13] 19:	rmov adx, ecx
line: 114 [0x14] 20:	loadl ebx, fp+2
          [0x15] 21:	return_val ebx
          [0x16] 22:	ret

func:@746 [std#ushort.$operator--] in file: lib/support/0.2.422//ushort.sharp:118:24: note:  
		    public def operator--() : var {
		                       ^


$operator--:
line: 118 [0x0] 0:	istore 1
          [0x1] 1:	movl 0
          [0x2] 2:	movn #2
          [0x3] 3:	movi #0, adx
          [0x5] 5:	iaload_2 ebx, adx
          [0x6] 6:	loadval egx
          [0x7] 7:	sub ebx, egx -> ebx
          [0x9] 9:	movu16 ebx, ebx
          [0xa] 10:	nop
          [0xb] 11:	rstore ebx
          [0xc] 12:	movl 0
          [0xd] 13:	movn #2
          [0xe] 14:	loadval ecx
          [0xf] 15:	rmov adx, ecx
          [0x10] 16:	return_val ebx
          [0x11] 17:	ret

func:@747 [std#ushort.value] in file: lib/support/0.2.422//ushort.sharp:122:21: note:  
		    public def value() : var {
		                    ^


value:
line: 122 [0x0] 0:	movl 0
          [0x1] 1:	movn #2
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	return_val ebx
          [0x6] 6:	ret

func:@748 [std#ushort.toString] in file: lib/support/0.2.422//ushort.sharp:126:24: note:  
		    public def delegate::toString() : string {
		                       ^


toString:
line: 126 [0x0] 0:	new_class @47 // std#string
          [0x1] 1:	newstr @34 // ""
          [0x2] 2:	call @553 // <std#string.string(var[])>
          [0x3] 3:	movl 0
          [0x4] 4:	movn #2
          [0x5] 5:	movi #0, adx
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	rstore ebx
          [0x9] 9:	call @573 // <std#string.$operator+(var)>
          [0xa] 10:	movsl #0
          [0xb] 11:	returnobj
          [0xc] 12:	ret

func:@749 [std#ushort.ushort] in file: lib/support/0.2.422//ushort.sharp:3:13: note:  
		public class ushort base integer {
		            ^


ushort:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@750 [std#VarList.VarList] in file: lib/support/0.2.422//VarList.sharp:17:19: note:  
		    public VarList() {
		                  ^


VarList:
line: 18 [0x0] 0:	movi #10, ebx
         [0x2] 2:	newarry ebx
         [0x3] 3:	movl 0
         [0x4] 4:	movn #1
         [0x5] 5:	popobj
         [0x6] 6:	movl 0
         [0x7] 7:	returnobj
         [0x8] 8:	ret

func:@751 [std#VarList.size] in file: lib/support/0.2.422//VarList.sharp:25:20: note:  
		    public def size() : var {
		                   ^


size:
line: 25 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@752 [std#VarList.empty] in file: lib/support/0.2.422//VarList.sharp:33:21: note:  
		    public def empty() : var {
		                    ^


empty:
line: 33 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movi #0, egx
         [0x8] 8:	loadval ebx
         [0x9] 9:	test ebx, egx
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@753 [std#VarList.toArray] in file: lib/support/0.2.422//VarList.sharp:42:23: note:  
		    public def toArray() : var[] {
		                      ^


toArray:
line: 42 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movi #0, egx
         [0x8] 8:	loadval ebx
         [0x9] 9:	test ebx, egx
         [0xa] 10:	jne 15
line: 42 [0xb] 11:	movl 0
         [0xc] 12:	del
         [0xd] 13:	ret
         [0xe] 14:	nop
         [0xf] 15:	nop
line: 43 [0x10] 16:	movl 0
         [0x11] 17:	movn #1
         [0x12] 18:	pushobj
         [0x13] 19:	movl 0
         [0x14] 20:	movn #0
         [0x15] 21:	movi #0, adx
         [0x17] 23:	iaload_2 ebx, adx
         [0x18] 24:	rstore ebx
         [0x19] 25:	call @612 // <std#__SRT_Global.copyOf(object,var)>
         [0x1a] 26:	movsl #0
         [0x1b] 27:	vcast 1
         [0x1c] 28:	movsl #0
         [0x1d] 29:	returnobj
         [0x1e] 30:	ret

func:@754 [std#VarList.get] in file: lib/support/0.2.422//VarList.sharp:51:19: note:  
		    public def get(var index) : var {
		                  ^


get:
line: 51 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	loadl ebx, fp+1
         [0x6] 6:	gte ebx, egx
         [0x7] 7:	jne 15
line: 52 [0x8] 8:	new_class @13 // std#IndexOutOfBoundsException
         [0x9] 9:	pushl 0
         [0xa] 10:	ipushl #1
         [0xb] 11:	call @764 // <std#VarList.outOfBoundsMsg(var)>
         [0xc] 12:	call @87 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
         [0xd] 13:	throw 
         [0xe] 14:	nop
         [0xf] 15:	nop
line: 54 [0x10] 16:	movl 0
         [0x11] 17:	movn #1
         [0x12] 18:	loadl ebx, fp+1
         [0x13] 19:	chklen ebx
         [0x14] 20:	iaload_2 ebx, ebx
         [0x15] 21:	return_val ebx
         [0x16] 22:	ret

func:@755 [std#VarList.last] in file: lib/support/0.2.422//VarList.sharp:62:20: note:  
		    public def last() : var {
		                   ^


last:
line: 62 [0x0] 0:	pushl 0
         [0x1] 1:	istore 1
         [0x2] 2:	pushl 0
         [0x3] 3:	call @751 // <std#VarList.size()>
         [0x4] 4:	loadval ebx
         [0x5] 5:	loadval ecx
         [0x6] 6:	sub ebx, ecx -> ebx
         [0x8] 8:	rstore ebx
         [0x9] 9:	call @754 // <std#VarList.get(var)>
         [0xa] 10:	loadval ebx
         [0xb] 11:	return_val ebx
         [0xc] 12:	ret

func:@756 [std#VarList.set] in file: lib/support/0.2.422//VarList.sharp:71:19: note:  
		    public def set(var index, var element) : var {
		                  ^


set:
line: 71 [0x0] 0:	movl 0
         [0x1] 1:	movn #0
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	loadl ebx, fp+1
         [0x6] 6:	gte ebx, egx
         [0x7] 7:	jne 15
line: 72 [0x8] 8:	new_class @13 // std#IndexOutOfBoundsException
         [0x9] 9:	pushl 0
         [0xa] 10:	ipushl #1
         [0xb] 11:	call @764 // <std#VarList.outOfBoundsMsg(var)>
         [0xc] 12:	call @87 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
         [0xd] 13:	throw 
         [0xe] 14:	nop
         [0xf] 15:	nop
line: 74 [0x10] 16:	movl 0
         [0x11] 17:	movn #1
         [0x12] 18:	loadl ebx, fp+1
         [0x13] 19:	chklen ebx
         [0x14] 20:	iaload_2 ebx, ebx
         [0x15] 21:	smovr_2 ebx, fp+3
line: 75 [0x16] 22:	ipushl #2
         [0x17] 23:	movl 0
         [0x18] 24:	movn #1
         [0x19] 25:	loadl ebx, fp+1
         [0x1a] 26:	chklen ebx
         [0x1b] 27:	loadval egx
         [0x1c] 28:	rmov ebx, egx
line: 76 [0x1d] 29:	loadl ebx, fp+3
         [0x1e] 30:	return_val ebx
         [0x1f] 31:	ret

func:@757 [std#VarList.shrink] in file: lib/support/0.2.422//VarList.sharp:84:23: note:  
		    private def shrink() {
		                      ^


shrink:
line: 84 [0x0] 0:	pushl 0
         [0x1] 1:	call @258 // <std.kernel#CListVar.shrink()>
         [0x2] 2:	ret

func:@758 [std#VarList.add] in file: lib/support/0.2.422//VarList.sharp:94:20: note:  
		     public def add(VarList lst) {
		                   ^


add:
line: 94 [0x0] 0:	pushl 1
         [0x1] 1:	call @753 // <std#VarList.toArray()>
         [0x2] 2:	popl 2
         [0x3] 3:	istore 0
line: 95 [0x4] 4:	movl 2
         [0x5] 5:	smov ebx, sp+0
         [0x6] 6:	sizeof egx
         [0x7] 7:	lt ebx, egx
         [0x8] 8:	jne 16
         [0x9] 9:	iaload_2 ebx, ebx
         [0xa] 10:	smovr_2 ebx, fp+3
line: 96 [0xb] 11:	pushl 0
         [0xc] 12:	ipushl #3
         [0xd] 13:	call @257 // <std.kernel#CListVar.add(var)>
         [0xe] 14:	isadd 1, sp+0
         [0xf] 15:	goto @4
         [0x10] 16:	pop
         [0x11] 17:	ret

func:@759 [std#VarList.add] in file: lib/support/0.2.422//VarList.sharp:107:20: note:  
		     public def add(var num) {
		                   ^


add:
line: 107 [0x0] 0:	pushl 0
          [0x1] 1:	ipushl #1
          [0x2] 2:	call @257 // <std.kernel#CListVar.add(var)>
          [0x3] 3:	ret

func:@760 [std#VarList.popBack] in file: lib/support/0.2.422//VarList.sharp:118:24: note:  
		     public def popBack() {
		                       ^


popBack:
line: 118 [0x0] 0:	pushl 0
          [0x1] 1:	call @757 // <std#VarList.shrink()>
          [0x2] 2:	ret

func:@761 [std#VarList.insert] in file: lib/support/0.2.422//VarList.sharp:128:23: note:  
		     public def insert(var pos, var value) {
		                      ^


insert:
line: 128 [0x0] 0:	pushl 0
          [0x1] 1:	ipushl #1
          [0x2] 2:	ipushl #2
          [0x3] 3:	call @259 // <std.kernel#CListVar.insert(var,var)>
          [0x4] 4:	ret

func:@762 [std#VarList.remove] in file: lib/support/0.2.422//VarList.sharp:138:23: note:  
		     public def remove(var pos) {
		                      ^


remove:
line: 138 [0x0] 0:	pushl 0
          [0x1] 1:	ipushl #1
          [0x2] 2:	call @260 // <std.kernel#CListVar.remove(var)>
          [0x3] 3:	ret

func:@763 [std#VarList.clear] in file: lib/support/0.2.422//VarList.sharp:146:22: note:  
		     public def clear() {
		                     ^


clear:
line: 149 [0x0] 0:	movi #10, ebx
          [0x2] 2:	newarry ebx
          [0x3] 3:	movl 0
          [0x4] 4:	movn #1
          [0x5] 5:	popobj
          [0x6] 6:	ret

func:@764 [std#VarList.outOfBoundsMsg] in file: lib/support/0.2.422//VarList.sharp:158:31: note:  
		    private def outOfBoundsMsg(var index) : string {
		                              ^


outOfBoundsMsg:
line: 158 [0x0] 0:	new_class @47 // std#string
          [0x1] 1:	newstr @35 // "Index: "
          [0x2] 2:	call @553 // <std#string.string(var[])>
          [0x3] 3:	ipushl #1
          [0x4] 4:	call @573 // <std#string.$operator+(var)>
          [0x5] 5:	newstr @36 // ", size: "
          [0x6] 6:	call @566 // <std#string.$operator+(var[])>
          [0x7] 7:	movl 0
          [0x8] 8:	movn #1
          [0x9] 9:	sizeof ebx
          [0xa] 10:	rstore ebx
          [0xb] 11:	call @573 // <std#string.$operator+(var)>
          [0xc] 12:	movsl #0
          [0xd] 13:	returnobj
          [0xe] 14:	ret

func:@765 [std.kernel#TimeUnit.TimeUnit] in file: lib/support/0.2.422//kernel//Time.sharp:80:12: note:  
		public enum TimeUnit {
		           ^


TimeUnit:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@766 [std.os.gui#_GUI._GUI] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:8:5: note:  
		enum _GUI
		    ^


_GUI:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@767 [std.os.gui#_PAINT._PAINT] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:22:4: note:  
		enum _PAINT
		   ^


_PAINT:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@768 [std.os.gui#PaintStyle.PaintStyle] in file: lib/support/0.2.422//os//gui//win//kernel//Gui.sharp:41:5: note:  
		enum PaintStyle
		    ^


PaintStyle:
        [0x0] 0:	movl 0
        [0x1] 1:	returnobj
        [0x2] 2:	ret

func:@769 [std#ArrayList<std.io#Thread>.ArrayList] in file: lib/support/0.2.422//ArrayList.sharp:23:21: note:  
		    public ArrayList() {
		                    ^


ArrayList:
line: 24 [0x0] 0:	movi #10, ebx
         [0x2] 2:	nop
         [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #3
         [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
line: 25 [0xa] 10:	movi #10, ebx
         [0xc] 12:	new_classarray ebx  // std.io#Thread[]
         [0xd] 13:	movl 0
         [0xe] 14:	movn #0
         [0xf] 15:	popobj
         [0x10] 16:	movl 0
         [0x11] 17:	returnobj
         [0x12] 18:	ret

func:@770 [std#ArrayList<std.io#Thread>.size] in file: lib/support/0.2.422//ArrayList.sharp:33:20: note:  
		    public def size() : var {
		                   ^


size:
line: 33 [0x0] 0:	movl 0
         [0x1] 1:	movn #4
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@771 [std#ArrayList<std.io#Thread>.empty] in file: lib/support/0.2.422//ArrayList.sharp:41:21: note:  
		    public def empty() : var {
		                    ^


empty:
line: 41 [0x0] 0:	movl 0
         [0x1] 1:	movn #4
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movi #0, egx
         [0x8] 8:	loadval ebx
         [0x9] 9:	test ebx, egx
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@772 [std#ArrayList<std.io#Thread>.toArray] in file: lib/support/0.2.422//ArrayList.sharp:50:23: note:  
		    public def toArray() : T[] {
		                      ^


toArray:
line: 50 [0x0] 0:	movl 0
         [0x1] 1:	movn #4
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movi #0, egx
         [0x8] 8:	loadval ebx
         [0x9] 9:	test ebx, egx
         [0xa] 10:	jne 15
line: 50 [0xb] 11:	movl 0
         [0xc] 12:	del
         [0xd] 13:	ret
         [0xe] 14:	nop
         [0xf] 15:	nop
line: 51 [0x10] 16:	movl 0
         [0x11] 17:	movn #0
         [0x12] 18:	pushobj
         [0x13] 19:	movl 0
         [0x14] 20:	movn #4
         [0x15] 21:	movi #0, adx
         [0x17] 23:	iaload_2 ebx, adx
         [0x18] 24:	rstore ebx
         [0x19] 25:	call @612 // <std#__SRT_Global.copyOf(object,var)>
         [0x1a] 26:	movsl #0
         [0x1b] 27:	movi #23, cmt
         [0x1d] 29:	cast cmt
         [0x1e] 30:	movsl #0
         [0x1f] 31:	returnobj
         [0x20] 32:	ret

func:@773 [std#ArrayList<std.io#Thread>.get] in file: lib/support/0.2.422//ArrayList.sharp:59:19: note:  
		    public def get(var index) : T {
		                  ^


get:
line: 59 [0x0] 0:	movl 0
         [0x1] 1:	movn #4
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	loadl ebx, fp+1
         [0x6] 6:	gte ebx, egx
         [0x7] 7:	jne 15
line: 60 [0x8] 8:	new_class @13 // std#IndexOutOfBoundsException
         [0x9] 9:	pushl 0
         [0xa] 10:	ipushl #1
         [0xb] 11:	call @785 // <std#ArrayList<std.io#Thread>.outOfBoundsMsg(var)>
         [0xc] 12:	call @87 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
         [0xd] 13:	throw 
         [0xe] 14:	nop
         [0xf] 15:	nop
line: 62 [0x10] 16:	movl 0
         [0x11] 17:	movn #0
         [0x12] 18:	loadl ebx, fp+1
         [0x13] 19:	chklen ebx
         [0x14] 20:	movnd ebx
         [0x15] 21:	returnobj
         [0x16] 22:	ret

func:@774 [std#ArrayList<std.io#Thread>.last] in file: lib/support/0.2.422//ArrayList.sharp:70:20: note:  
		    public def last() : T {
		                   ^


last:
line: 70 [0x0] 0:	pushl 0
         [0x1] 1:	istore 1
         [0x2] 2:	movl 0
         [0x3] 3:	movn #4
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	loadval egx
         [0x8] 8:	sub ebx, egx -> ebx
         [0xa] 10:	rstore ebx
         [0xb] 11:	call @773 // <std#ArrayList<std.io#Thread>.get(var)>
         [0xc] 12:	movsl #0
         [0xd] 13:	returnobj
         [0xe] 14:	ret

func:@775 [std#ArrayList<std.io#Thread>.set] in file: lib/support/0.2.422//ArrayList.sharp:79:19: note:  
		    public def set(var index, T element) : T {
		                  ^


set:
line: 79 [0x0] 0:	movl 0
         [0x1] 1:	movn #4
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	loadl ebx, fp+1
         [0x6] 6:	gte ebx, egx
         [0x7] 7:	jne 15
line: 80 [0x8] 8:	new_class @13 // std#IndexOutOfBoundsException
         [0x9] 9:	pushl 0
         [0xa] 10:	ipushl #1
         [0xb] 11:	call @785 // <std#ArrayList<std.io#Thread>.outOfBoundsMsg(var)>
         [0xc] 12:	call @87 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
         [0xd] 13:	throw 
         [0xe] 14:	nop
         [0xf] 15:	nop
line: 82 [0x10] 16:	movl 0
         [0x11] 17:	movn #0
         [0x12] 18:	loadl ebx, fp+1
         [0x13] 19:	chklen ebx
         [0x14] 20:	movnd ebx
         [0x15] 21:	pushobj
         [0x16] 22:	popl 3
         [0x17] 23:	pushl 2
line: 83 [0x18] 24:	movl 0
         [0x19] 25:	movn #0
         [0x1a] 26:	loadl ebx, fp+1
         [0x1b] 27:	chklen ebx
         [0x1c] 28:	movnd ebx
         [0x1d] 29:	popobj
line: 84 [0x1e] 30:	movl 3
         [0x1f] 31:	returnobj
         [0x20] 32:	ret

func:@776 [std#ArrayList<std.io#Thread>.expand] in file: lib/support/0.2.422//ArrayList.sharp:94:23: note:  
		    private def expand() {
		                      ^


expand:
line: 94 [0x0] 0:	movl 0
         [0x1] 1:	movn #3
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #4
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	gte ebx, egx
         [0x9] 9:	jne 41
line: 96 [0xa] 10:	istore 20
         [0xb] 11:	movi #2, egx
         [0xd] 13:	movl 0
         [0xe] 14:	movn #3
         [0xf] 15:	movi #0, adx
         [0x11] 17:	iaload_2 ebx, adx
         [0x12] 18:	shr ebx, egx -> ebx
         [0x14] 20:	loadval ecx
         [0x15] 21:	add ebx, ecx -> ebx
         [0x17] 23:	rstore ebx
         [0x18] 24:	nop
         [0x19] 25:	movl 0
         [0x1a] 26:	movn #3
         [0x1b] 27:	iaload_2 ebx, adx
         [0x1c] 28:	loadval ecx
         [0x1d] 29:	add ebx, ecx -> ecx
         [0x1f] 31:	rmov adx, ecx
line: 97 [0x20] 32:	movl 0
         [0x21] 33:	movn #0
         [0x22] 34:	pushobj
         [0x23] 35:	movl 0
         [0x24] 36:	movn #3
         [0x25] 37:	iaload_2 ebx, adx
         [0x26] 38:	rstore ebx
         [0x27] 39:	call @615 // <std#__SRT_Global.realloc(object,var)>
         [0x28] 40:	nop
         [0x29] 41:	nop
         [0x2a] 42:	ret

func:@777 [std#ArrayList<std.io#Thread>.shrink] in file: lib/support/0.2.422//ArrayList.sharp:105:23: note:  
		    private def shrink() {
		                      ^


shrink:
line: 105 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 egx, adx
          [0x5] 5:	movl 0
          [0x6] 6:	movn #4
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	lte ebx, egx
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	cmp ebx, 1
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	skne 12 // pc = 24
          [0xd] 13:	istore 1
          [0xe] 14:	movi #0, egx
          [0x10] 16:	movl 0
          [0x11] 17:	movn #4
          [0x12] 18:	movi #0, adx
          [0x14] 20:	iaload_2 ebx, adx
          [0x15] 21:	gt ebx, egx
          [0x16] 22:	movr ebx, cmt
          [0x17] 23:	loadval ecx
          [0x18] 24:	and ecx, ebx
          [0x19] 25:	jne 80
line: 106 [0x1a] 26:	movl 0
          [0x1b] 27:	movn #4
          [0x1c] 28:	movi #0, adx
          [0x1e] 30:	iaload_2 ebx, adx
          [0x1f] 31:	dec ebx
          [0x20] 32:	rmov adx, ebx
          [0x21] 33:	inc ebx
line: 107 [0x22] 34:	movl 0
          [0x23] 35:	movn #3
          [0x24] 36:	iaload_2 ebx, adx
          [0x25] 37:	dec ebx
          [0x26] 38:	rmov adx, ebx
          [0x27] 39:	inc ebx
line: 109 [0x28] 40:	movl 0
          [0x29] 41:	movn #3
          [0x2a] 42:	iaload_2 ebx, adx
          [0x2b] 43:	rstore ebx
          [0x2c] 44:	movi #0, egx
          [0x2e] 46:	loadval ebx
          [0x2f] 47:	test ebx, egx
          [0x30] 48:	movr ebx, cmt
          [0x31] 49:	movr ebx, cmt
          [0x32] 50:	skpe 12 // pc = 62
          [0x33] 51:	movl 0
          [0x34] 52:	movn #4
          [0x35] 53:	movi #0, adx
          [0x37] 55:	iaload_2 ebx, adx
          [0x38] 56:	rstore ebx
          [0x39] 57:	movi #0, egx
          [0x3b] 59:	loadval ebx
          [0x3c] 60:	test ebx, egx
          [0x3d] 61:	movr ebx, cmt
          [0x3e] 62:	cmp ebx, 1
          [0x3f] 63:	jne 67
line: 110 [0x40] 64:	pushl 0
          [0x41] 65:	call @784 // <std#ArrayList<std.io#Thread>.clear()>
          [0x42] 66:	goto @78
line: 112 [0x43] 67:	movl 0
          [0x44] 68:	movn #0
          [0x45] 69:	pushobj
          [0x46] 70:	movl 0
          [0x47] 71:	movn #3
          [0x48] 72:	movi #0, adx
          [0x4a] 74:	iaload_2 ebx, adx
          [0x4b] 75:	rstore ebx
          [0x4c] 76:	call @615 // <std#__SRT_Global.realloc(object,var)>
          [0x4d] 77:	nop
          [0x4e] 78:	nop
          [0x4f] 79:	nop
          [0x50] 80:	nop
          [0x51] 81:	ret

func:@778 [std#ArrayList<std.io#Thread>.addAll] in file: lib/support/0.2.422//ArrayList.sharp:123:23: note:  
		     public def addAll(ArrayList<T> lst) {
		                      ^


addAll:
line: 123 [0x0] 0:	pushl 1
          [0x1] 1:	call @772 // <std#ArrayList<std.io#Thread>.toArray()>
          [0x2] 2:	popl 2
          [0x3] 3:	istore 0
line: 124 [0x4] 4:	movl 2
          [0x5] 5:	smov ebx, sp+0
          [0x6] 6:	sizeof egx
          [0x7] 7:	lt ebx, egx
          [0x8] 8:	jne 17
          [0x9] 9:	movnd ebx
          [0xa] 10:	pushobj
          [0xb] 11:	popl 3
          [0xc] 12:	pushl 0
line: 125 [0xd] 13:	pushl 3
          [0xe] 14:	call @779 // <std#ArrayList<std.io#Thread>.add(std.io#Thread)>
          [0xf] 15:	isadd 1, sp+0
          [0x10] 16:	goto @4
          [0x11] 17:	pop
          [0x12] 18:	ret

func:@779 [std#ArrayList<std.io#Thread>.add] in file: lib/support/0.2.422//ArrayList.sharp:136:20: note:  
		     public def add(T e) {
		                   ^


add:
line: 136 [0x0] 0:	pushl 0
          [0x1] 1:	call @776 // <std#ArrayList<std.io#Thread>.expand()>
line: 137 [0x2] 2:	pushl 1
          [0x3] 3:	movl 0
          [0x4] 4:	movn #0
          [0x5] 5:	pushobj
          [0x6] 6:	movl 0
          [0x7] 7:	movn #4
          [0x8] 8:	movi #0, adx
          [0xa] 10:	iaload_2 ebx, adx
          [0xb] 11:	inc ebx
          [0xc] 12:	rmov adx, ebx
          [0xd] 13:	dec ebx
          [0xe] 14:	movsl #0
          [0xf] 15:	chklen ebx
          [0x10] 16:	movnd ebx
          [0x11] 17:	pop
          [0x12] 18:	popobj
          [0x13] 19:	ret

func:@780 [std#ArrayList<std.io#Thread>.popBack] in file: lib/support/0.2.422//ArrayList.sharp:148:24: note:  
		     public def popBack() {
		                       ^


popBack:
line: 148 [0x0] 0:	pushl 0
          [0x1] 1:	call @777 // <std#ArrayList<std.io#Thread>.shrink()>
          [0x2] 2:	ret

func:@781 [std#ArrayList<std.io#Thread>.insert] in file: lib/support/0.2.422//ArrayList.sharp:158:23: note:  
		     public def insert(var pos, T value) {
		                      ^


insert:
line: 158 [0x0] 0:	movl 0
          [0x1] 1:	movn #4
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 egx, adx
          [0x5] 5:	loadl ebx, fp+1
          [0x6] 6:	gt ebx, egx
          [0x7] 7:	movr ebx, cmt
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	skpe 6 // pc = 15
          [0xa] 10:	movi #0, egx
          [0xc] 12:	loadl ebx, fp+1
          [0xd] 13:	lt ebx, egx
          [0xe] 14:	movr ebx, cmt
          [0xf] 15:	cmp ebx, 1
          [0x10] 16:	jne 24
line: 159 [0x11] 17:	new_class @13 // std#IndexOutOfBoundsException
          [0x12] 18:	pushl 0
          [0x13] 19:	ipushl #1
          [0x14] 20:	call @785 // <std#ArrayList<std.io#Thread>.outOfBoundsMsg(var)>
          [0x15] 21:	call @87 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x16] 22:	throw 
          [0x17] 23:	nop
          [0x18] 24:	nop
line: 161 [0x19] 25:	movl 0
          [0x1a] 26:	movn #4
          [0x1b] 27:	movi #0, adx
          [0x1d] 29:	iaload_2 ebx, adx
          [0x1e] 30:	rstore ebx
          [0x1f] 31:	movi #0, egx
          [0x21] 33:	loadval ebx
          [0x22] 34:	test ebx, egx
          [0x23] 35:	jne 40
line: 162 [0x24] 36:	pushl 0
          [0x25] 37:	pushl 2
          [0x26] 38:	call @779 // <std#ArrayList<std.io#Thread>.add(std.io#Thread)>
          [0x27] 39:	goto @90
line: 164 [0x28] 40:	pushl 0
          [0x29] 41:	call @776 // <std#ArrayList<std.io#Thread>.expand()>
line: 165 [0x2a] 42:	movl 0
          [0x2b] 43:	movn #4
          [0x2c] 44:	movi #0, adx
          [0x2e] 46:	iaload_2 ebx, adx
          [0x2f] 47:	inc ebx
          [0x30] 48:	rmov adx, ebx
          [0x31] 49:	dec ebx
line: 166 [0x32] 50:	istore 1
          [0x33] 51:	movl 0
          [0x34] 52:	movn #4
          [0x35] 53:	iaload_2 ebx, adx
          [0x36] 54:	loadval egx
          [0x37] 55:	sub ebx, egx -> ebx
          [0x39] 57:	rstore ebx
          [0x3a] 58:	ipopl 3
          [0x3b] 59:	loadl egx, fp+1
          [0x3c] 60:	loadl ebx, fp+3
          [0x3d] 61:	gt ebx, egx
          [0x3e] 62:	jne 82
line: 167 [0x3f] 63:	movl 0
          [0x40] 64:	movn #0
          [0x41] 65:	istore 1
          [0x42] 66:	loadl ebx, fp+3
          [0x43] 67:	loadval egx
          [0x44] 68:	sub ebx, egx -> ebx
          [0x46] 70:	chklen ebx
          [0x47] 71:	movnd ebx
          [0x48] 72:	pushobj
          [0x49] 73:	movl 0
          [0x4a] 74:	movn #0
          [0x4b] 75:	loadl ebx, fp+3
          [0x4c] 76:	chklen ebx
          [0x4d] 77:	movnd ebx
          [0x4e] 78:	popobj
          [0x4f] 79:	loadl ebx, fp+3
          [0x50] 80:	isubl #1, @3
          [0x51] 81:	goto @59
line: 168 [0x52] 82:	pushl 2
          [0x53] 83:	movl 0
          [0x54] 84:	movn #0
          [0x55] 85:	loadl ebx, fp+1
          [0x56] 86:	chklen ebx
          [0x57] 87:	movnd ebx
          [0x58] 88:	popobj
          [0x59] 89:	nop
          [0x5a] 90:	nop
          [0x5b] 91:	ret

func:@782 [std#ArrayList<std.io#Thread>.remove] in file: lib/support/0.2.422//ArrayList.sharp:180:23: note:  
		     public def remove(var pos) {
		                      ^


remove:
line: 180 [0x0] 0:	movl 0
          [0x1] 1:	movn #4
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 egx, adx
          [0x5] 5:	loadl ebx, fp+1
          [0x6] 6:	gt ebx, egx
          [0x7] 7:	movr ebx, cmt
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	skpe 6 // pc = 15
          [0xa] 10:	movi #0, egx
          [0xc] 12:	loadl ebx, fp+1
          [0xd] 13:	lt ebx, egx
          [0xe] 14:	movr ebx, cmt
          [0xf] 15:	cmp ebx, 1
          [0x10] 16:	jne 24
line: 181 [0x11] 17:	new_class @13 // std#IndexOutOfBoundsException
          [0x12] 18:	pushl 0
          [0x13] 19:	ipushl #1
          [0x14] 20:	call @785 // <std#ArrayList<std.io#Thread>.outOfBoundsMsg(var)>
          [0x15] 21:	call @87 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x16] 22:	throw 
          [0x17] 23:	nop
          [0x18] 24:	nop
line: 183 [0x19] 25:	movl 0
          [0x1a] 26:	movn #4
          [0x1b] 27:	movi #0, adx
          [0x1d] 29:	iaload_2 ebx, adx
          [0x1e] 30:	rstore ebx
          [0x1f] 31:	movi #1, egx
          [0x21] 33:	loadval ebx
          [0x22] 34:	test ebx, egx
          [0x23] 35:	jne 44
line: 184 [0x24] 36:	movl 0
          [0x25] 37:	movn #4
          [0x26] 38:	movi #0, adx
          [0x28] 40:	iaload_2 ebx, adx
          [0x29] 41:	dec ebx
          [0x2a] 42:	rmov adx, ebx
          [0x2b] 43:	goto @116
          [0x2c] 44:	movl 0
          [0x2d] 45:	movn #4
          [0x2e] 46:	movi #0, adx
          [0x30] 48:	iaload_2 ebx, adx
          [0x31] 49:	rstore ebx
          [0x32] 50:	movi #2, egx
          [0x34] 52:	loadval ebx
          [0x35] 53:	test ebx, egx
          [0x36] 54:	jne 78
line: 187 [0x37] 55:	ipushl #1
          [0x38] 56:	movi #0, egx
          [0x3a] 58:	loadval ebx
          [0x3b] 59:	test ebx, egx
          [0x3c] 60:	jne 74
line: 188 [0x3d] 61:	movl 0
          [0x3e] 62:	movn #0
          [0x3f] 63:	movi #1, ebx
          [0x41] 65:	movnd ebx
          [0x42] 66:	pushobj
          [0x43] 67:	movl 0
          [0x44] 68:	movn #0
          [0x45] 69:	movi #0, ebx
          [0x47] 71:	movnd ebx
          [0x48] 72:	popobj
          [0x49] 73:	nop
          [0x4a] 74:	nop
line: 190 [0x4b] 75:	pushl 0
          [0x4c] 76:	call @777 // <std#ArrayList<std.io#Thread>.shrink()>
          [0x4d] 77:	goto @116
line: 192 [0x4e] 78:	istore 1
          [0x4f] 79:	movl 0
          [0x50] 80:	movn #4
          [0x51] 81:	movi #0, adx
          [0x53] 83:	iaload_2 ebx, adx
          [0x54] 84:	loadval egx
          [0x55] 85:	sub ebx, egx -> ebx
          [0x57] 87:	rstore ebx
          [0x58] 88:	ipopl 2
line: 193 [0x59] 89:	loadl ebx, fp+1
          [0x5a] 90:	smovr_2 ebx, fp+3
          [0x5b] 91:	loadl egx, fp+2
          [0x5c] 92:	loadl ebx, fp+3
          [0x5d] 93:	lt ebx, egx
          [0x5e] 94:	jne 113
line: 194 [0x5f] 95:	movl 0
          [0x60] 96:	movn #0
          [0x61] 97:	istore 1
          [0x62] 98:	loadl ebx, fp+3
          [0x63] 99:	loadval egx
          [0x64] 100:	add ebx, egx -> ebx
          [0x66] 102:	chklen ebx
          [0x67] 103:	movnd ebx
          [0x68] 104:	pushobj
          [0x69] 105:	movl 0
          [0x6a] 106:	movn #0
          [0x6b] 107:	loadl ebx, fp+3
          [0x6c] 108:	chklen ebx
          [0x6d] 109:	movnd ebx
          [0x6e] 110:	popobj
          [0x6f] 111:	iaddl 1, @3
          [0x70] 112:	goto @91
line: 196 [0x71] 113:	pushl 0
          [0x72] 114:	call @777 // <std#ArrayList<std.io#Thread>.shrink()>
          [0x73] 115:	nop
          [0x74] 116:	nop
          [0x75] 117:	ret

func:@783 [std#ArrayList<std.io#Thread>.data] in file: lib/support/0.2.422//ArrayList.sharp:204:21: note:  
		     public def data() : T[] {
		                    ^


data:
line: 204 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	returnobj
          [0x3] 3:	ret

func:@784 [std#ArrayList<std.io#Thread>.clear] in file: lib/support/0.2.422//ArrayList.sharp:212:22: note:  
		     public def clear() {
		                     ^


clear:
line: 213 [0x0] 0:	movl 0
          [0x1] 1:	movn #4
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movi #0, egx
          [0x8] 8:	loadval ebx
          [0x9] 9:	tne ebx, egx
          [0xa] 10:	movr ebx, cmt
          [0xb] 11:	cmp ebx, 1
          [0xc] 12:	movr ebx, cmt
          [0xd] 13:	skne 12 // pc = 25
          [0xe] 14:	istore 1
          [0xf] 15:	movi #10, egx
          [0x11] 17:	movl 0
          [0x12] 18:	movn #3
          [0x13] 19:	movi #0, adx
          [0x15] 21:	iaload_2 ebx, adx
          [0x16] 22:	gt ebx, egx
          [0x17] 23:	movr ebx, cmt
          [0x18] 24:	loadval ecx
          [0x19] 25:	and ecx, ebx
          [0x1a] 26:	jne 44
line: 214 [0x1b] 27:	movi #10, ebx
          [0x1d] 29:	nop
          [0x1e] 30:	rstore ebx
          [0x1f] 31:	movl 0
          [0x20] 32:	movn #3
          [0x21] 33:	movi #0, adx
          [0x23] 35:	loadval ecx
          [0x24] 36:	rmov adx, ecx
line: 215 [0x25] 37:	movi #10, ebx
          [0x27] 39:	new_classarray ebx  // std.io#Thread[]
          [0x28] 40:	movl 0
          [0x29] 41:	movn #0
          [0x2a] 42:	popobj
          [0x2b] 43:	nop
          [0x2c] 44:	nop
line: 218 [0x2d] 45:	movi #0, ebx
          [0x2f] 47:	nop
          [0x30] 48:	rstore ebx
          [0x31] 49:	movl 0
          [0x32] 50:	movn #4
          [0x33] 51:	movi #0, adx
          [0x35] 53:	loadval ecx
          [0x36] 54:	rmov adx, ecx
          [0x37] 55:	ret

func:@785 [std#ArrayList<std.io#Thread>.outOfBoundsMsg] in file: lib/support/0.2.422//ArrayList.sharp:227:31: note:  
		    private def outOfBoundsMsg(var index) : string {
		                              ^


outOfBoundsMsg:
line: 227 [0x0] 0:	new_class @47 // std#string
          [0x1] 1:	newstr @35 // "Index: "
          [0x2] 2:	call @553 // <std#string.string(var[])>
          [0x3] 3:	ipushl #1
          [0x4] 4:	call @573 // <std#string.$operator+(var)>
          [0x5] 5:	newstr @36 // ", size: "
          [0x6] 6:	call @566 // <std#string.$operator+(var[])>
          [0x7] 7:	movl 0
          [0x8] 8:	movn #4
          [0x9] 9:	movi #0, adx
          [0xb] 11:	iaload_2 ebx, adx
          [0xc] 12:	rstore ebx
          [0xd] 13:	call @573 // <std#string.$operator+(var)>
          [0xe] 14:	movsl #0
          [0xf] 15:	returnobj
          [0x10] 16:	ret

func:@786 [std#ArrayList<var>.ArrayList] in file: lib/support/0.2.422//ArrayList.sharp:23:21: note:  
		    public ArrayList() {
		                    ^


ArrayList:
line: 24 [0x0] 0:	movi #10, ebx
         [0x2] 2:	nop
         [0x3] 3:	rstore ebx
         [0x4] 4:	movl 0
         [0x5] 5:	movn #3
         [0x6] 6:	movi #0, adx
         [0x8] 8:	loadval ecx
         [0x9] 9:	rmov adx, ecx
line: 25 [0xa] 10:	movi #10, ebx
         [0xc] 12:	newarry ebx
         [0xd] 13:	movl 0
         [0xe] 14:	movn #0
         [0xf] 15:	popobj
         [0x10] 16:	movl 0
         [0x11] 17:	returnobj
         [0x12] 18:	ret

func:@787 [std#ArrayList<var>.size] in file: lib/support/0.2.422//ArrayList.sharp:33:20: note:  
		    public def size() : var {
		                   ^


size:
line: 33 [0x0] 0:	movl 0
         [0x1] 1:	movn #4
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	return_val ebx
         [0x6] 6:	ret

func:@788 [std#ArrayList<var>.empty] in file: lib/support/0.2.422//ArrayList.sharp:41:21: note:  
		    public def empty() : var {
		                    ^


empty:
line: 41 [0x0] 0:	movl 0
         [0x1] 1:	movn #4
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movi #0, egx
         [0x8] 8:	loadval ebx
         [0x9] 9:	test ebx, egx
         [0xa] 10:	return_val cmt
         [0xb] 11:	ret

func:@789 [std#ArrayList<var>.toArray] in file: lib/support/0.2.422//ArrayList.sharp:50:23: note:  
		    public def toArray() : T[] {
		                      ^


toArray:
line: 50 [0x0] 0:	movl 0
         [0x1] 1:	movn #4
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 ebx, adx
         [0x5] 5:	rstore ebx
         [0x6] 6:	movi #0, egx
         [0x8] 8:	loadval ebx
         [0x9] 9:	test ebx, egx
         [0xa] 10:	jne 15
line: 50 [0xb] 11:	movl 0
         [0xc] 12:	del
         [0xd] 13:	ret
         [0xe] 14:	nop
         [0xf] 15:	nop
line: 51 [0x10] 16:	movl 0
         [0x11] 17:	movn #0
         [0x12] 18:	pushobj
         [0x13] 19:	movl 0
         [0x14] 20:	movn #4
         [0x15] 21:	movi #0, adx
         [0x17] 23:	iaload_2 ebx, adx
         [0x18] 24:	rstore ebx
         [0x19] 25:	call @612 // <std#__SRT_Global.copyOf(object,var)>
         [0x1a] 26:	movsl #0
         [0x1b] 27:	vcast 1
         [0x1c] 28:	movsl #0
         [0x1d] 29:	returnobj
         [0x1e] 30:	ret

func:@790 [std#ArrayList<var>.get] in file: lib/support/0.2.422//ArrayList.sharp:59:19: note:  
		    public def get(var index) : T {
		                  ^


get:
line: 59 [0x0] 0:	movl 0
         [0x1] 1:	movn #4
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	loadl ebx, fp+1
         [0x6] 6:	gte ebx, egx
         [0x7] 7:	jne 15
line: 60 [0x8] 8:	new_class @13 // std#IndexOutOfBoundsException
         [0x9] 9:	pushl 0
         [0xa] 10:	ipushl #1
         [0xb] 11:	call @802 // <std#ArrayList<var>.outOfBoundsMsg(var)>
         [0xc] 12:	call @87 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
         [0xd] 13:	throw 
         [0xe] 14:	nop
         [0xf] 15:	nop
line: 62 [0x10] 16:	movl 0
         [0x11] 17:	movn #0
         [0x12] 18:	loadl ebx, fp+1
         [0x13] 19:	chklen ebx
         [0x14] 20:	iaload_2 ebx, ebx
         [0x15] 21:	return_val ebx
         [0x16] 22:	ret

func:@791 [std#ArrayList<var>.last] in file: lib/support/0.2.422//ArrayList.sharp:70:20: note:  
		    public def last() : T {
		                   ^


last:
line: 70 [0x0] 0:	pushl 0
         [0x1] 1:	istore 1
         [0x2] 2:	movl 0
         [0x3] 3:	movn #4
         [0x4] 4:	movi #0, adx
         [0x6] 6:	iaload_2 ebx, adx
         [0x7] 7:	loadval egx
         [0x8] 8:	sub ebx, egx -> ebx
         [0xa] 10:	rstore ebx
         [0xb] 11:	call @790 // <std#ArrayList<var>.get(var)>
         [0xc] 12:	loadval ebx
         [0xd] 13:	return_val ebx
         [0xe] 14:	ret

func:@792 [std#ArrayList<var>.set] in file: lib/support/0.2.422//ArrayList.sharp:79:19: note:  
		    public def set(var index, T element) : T {
		                  ^


set:
line: 79 [0x0] 0:	movl 0
         [0x1] 1:	movn #4
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	loadl ebx, fp+1
         [0x6] 6:	gte ebx, egx
         [0x7] 7:	jne 15
line: 80 [0x8] 8:	new_class @13 // std#IndexOutOfBoundsException
         [0x9] 9:	pushl 0
         [0xa] 10:	ipushl #1
         [0xb] 11:	call @802 // <std#ArrayList<var>.outOfBoundsMsg(var)>
         [0xc] 12:	call @87 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
         [0xd] 13:	throw 
         [0xe] 14:	nop
         [0xf] 15:	nop
line: 82 [0x10] 16:	movl 0
         [0x11] 17:	movn #0
         [0x12] 18:	loadl ebx, fp+1
         [0x13] 19:	chklen ebx
         [0x14] 20:	iaload_2 ebx, ebx
         [0x15] 21:	smovr_2 ebx, fp+3
line: 83 [0x16] 22:	ipushl #2
         [0x17] 23:	movl 0
         [0x18] 24:	movn #0
         [0x19] 25:	loadl ebx, fp+1
         [0x1a] 26:	chklen ebx
         [0x1b] 27:	loadval egx
         [0x1c] 28:	rmov ebx, egx
line: 84 [0x1d] 29:	loadl ebx, fp+3
         [0x1e] 30:	return_val ebx
         [0x1f] 31:	ret

func:@793 [std#ArrayList<var>.expand] in file: lib/support/0.2.422//ArrayList.sharp:94:23: note:  
		    private def expand() {
		                      ^


expand:
line: 94 [0x0] 0:	movl 0
         [0x1] 1:	movn #3
         [0x2] 2:	movi #0, adx
         [0x4] 4:	iaload_2 egx, adx
         [0x5] 5:	movl 0
         [0x6] 6:	movn #4
         [0x7] 7:	iaload_2 ebx, adx
         [0x8] 8:	gte ebx, egx
         [0x9] 9:	jne 41
line: 96 [0xa] 10:	istore 20
         [0xb] 11:	movi #2, egx
         [0xd] 13:	movl 0
         [0xe] 14:	movn #3
         [0xf] 15:	movi #0, adx
         [0x11] 17:	iaload_2 ebx, adx
         [0x12] 18:	shr ebx, egx -> ebx
         [0x14] 20:	loadval ecx
         [0x15] 21:	add ebx, ecx -> ebx
         [0x17] 23:	rstore ebx
         [0x18] 24:	nop
         [0x19] 25:	movl 0
         [0x1a] 26:	movn #3
         [0x1b] 27:	iaload_2 ebx, adx
         [0x1c] 28:	loadval ecx
         [0x1d] 29:	add ebx, ecx -> ecx
         [0x1f] 31:	rmov adx, ecx
line: 97 [0x20] 32:	movl 0
         [0x21] 33:	movn #0
         [0x22] 34:	pushobj
         [0x23] 35:	movl 0
         [0x24] 36:	movn #3
         [0x25] 37:	iaload_2 ebx, adx
         [0x26] 38:	rstore ebx
         [0x27] 39:	call @615 // <std#__SRT_Global.realloc(object,var)>
         [0x28] 40:	nop
         [0x29] 41:	nop
         [0x2a] 42:	ret

func:@794 [std#ArrayList<var>.shrink] in file: lib/support/0.2.422//ArrayList.sharp:105:23: note:  
		    private def shrink() {
		                      ^


shrink:
line: 105 [0x0] 0:	movl 0
          [0x1] 1:	movn #3
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 egx, adx
          [0x5] 5:	movl 0
          [0x6] 6:	movn #4
          [0x7] 7:	iaload_2 ebx, adx
          [0x8] 8:	lte ebx, egx
          [0x9] 9:	movr ebx, cmt
          [0xa] 10:	cmp ebx, 1
          [0xb] 11:	movr ebx, cmt
          [0xc] 12:	skne 12 // pc = 24
          [0xd] 13:	istore 1
          [0xe] 14:	movi #0, egx
          [0x10] 16:	movl 0
          [0x11] 17:	movn #4
          [0x12] 18:	movi #0, adx
          [0x14] 20:	iaload_2 ebx, adx
          [0x15] 21:	gt ebx, egx
          [0x16] 22:	movr ebx, cmt
          [0x17] 23:	loadval ecx
          [0x18] 24:	and ecx, ebx
          [0x19] 25:	jne 80
line: 106 [0x1a] 26:	movl 0
          [0x1b] 27:	movn #4
          [0x1c] 28:	movi #0, adx
          [0x1e] 30:	iaload_2 ebx, adx
          [0x1f] 31:	dec ebx
          [0x20] 32:	rmov adx, ebx
          [0x21] 33:	inc ebx
line: 107 [0x22] 34:	movl 0
          [0x23] 35:	movn #3
          [0x24] 36:	iaload_2 ebx, adx
          [0x25] 37:	dec ebx
          [0x26] 38:	rmov adx, ebx
          [0x27] 39:	inc ebx
line: 109 [0x28] 40:	movl 0
          [0x29] 41:	movn #3
          [0x2a] 42:	iaload_2 ebx, adx
          [0x2b] 43:	rstore ebx
          [0x2c] 44:	movi #0, egx
          [0x2e] 46:	loadval ebx
          [0x2f] 47:	test ebx, egx
          [0x30] 48:	movr ebx, cmt
          [0x31] 49:	movr ebx, cmt
          [0x32] 50:	skpe 12 // pc = 62
          [0x33] 51:	movl 0
          [0x34] 52:	movn #4
          [0x35] 53:	movi #0, adx
          [0x37] 55:	iaload_2 ebx, adx
          [0x38] 56:	rstore ebx
          [0x39] 57:	movi #0, egx
          [0x3b] 59:	loadval ebx
          [0x3c] 60:	test ebx, egx
          [0x3d] 61:	movr ebx, cmt
          [0x3e] 62:	cmp ebx, 1
          [0x3f] 63:	jne 67
line: 110 [0x40] 64:	pushl 0
          [0x41] 65:	call @801 // <std#ArrayList<var>.clear()>
          [0x42] 66:	goto @78
line: 112 [0x43] 67:	movl 0
          [0x44] 68:	movn #0
          [0x45] 69:	pushobj
          [0x46] 70:	movl 0
          [0x47] 71:	movn #3
          [0x48] 72:	movi #0, adx
          [0x4a] 74:	iaload_2 ebx, adx
          [0x4b] 75:	rstore ebx
          [0x4c] 76:	call @615 // <std#__SRT_Global.realloc(object,var)>
          [0x4d] 77:	nop
          [0x4e] 78:	nop
          [0x4f] 79:	nop
          [0x50] 80:	nop
          [0x51] 81:	ret

func:@795 [std#ArrayList<var>.addAll] in file: lib/support/0.2.422//ArrayList.sharp:123:23: note:  
		     public def addAll(ArrayList<T> lst) {
		                      ^


addAll:
line: 123 [0x0] 0:	pushl 1
          [0x1] 1:	call @789 // <std#ArrayList<var>.toArray()>
          [0x2] 2:	popl 2
          [0x3] 3:	istore 0
line: 124 [0x4] 4:	movl 2
          [0x5] 5:	smov ebx, sp+0
          [0x6] 6:	sizeof egx
          [0x7] 7:	lt ebx, egx
          [0x8] 8:	jne 16
          [0x9] 9:	iaload_2 ebx, ebx
          [0xa] 10:	smovr_2 ebx, fp+3
line: 125 [0xb] 11:	pushl 0
          [0xc] 12:	ipushl #3
          [0xd] 13:	call @796 // <std#ArrayList<var>.add(var)>
          [0xe] 14:	isadd 1, sp+0
          [0xf] 15:	goto @4
          [0x10] 16:	pop
          [0x11] 17:	ret

func:@796 [std#ArrayList<var>.add] in file: lib/support/0.2.422//ArrayList.sharp:136:20: note:  
		     public def add(T e) {
		                   ^


add:
line: 136 [0x0] 0:	pushl 0
          [0x1] 1:	call @793 // <std#ArrayList<var>.expand()>
line: 137 [0x2] 2:	ipushl #1
          [0x3] 3:	movl 0
          [0x4] 4:	movn #0
          [0x5] 5:	pushobj
          [0x6] 6:	movl 0
          [0x7] 7:	movn #4
          [0x8] 8:	movi #0, adx
          [0xa] 10:	iaload_2 ebx, adx
          [0xb] 11:	inc ebx
          [0xc] 12:	rmov adx, ebx
          [0xd] 13:	dec ebx
          [0xe] 14:	movsl #0
          [0xf] 15:	chklen ebx
          [0x10] 16:	pop
          [0x11] 17:	loadval egx
          [0x12] 18:	rmov ebx, egx
          [0x13] 19:	ret

func:@797 [std#ArrayList<var>.popBack] in file: lib/support/0.2.422//ArrayList.sharp:148:24: note:  
		     public def popBack() {
		                       ^


popBack:
line: 148 [0x0] 0:	pushl 0
          [0x1] 1:	call @794 // <std#ArrayList<var>.shrink()>
          [0x2] 2:	ret

func:@798 [std#ArrayList<var>.insert] in file: lib/support/0.2.422//ArrayList.sharp:158:23: note:  
		     public def insert(var pos, T value) {
		                      ^


insert:
line: 158 [0x0] 0:	movl 0
          [0x1] 1:	movn #4
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 egx, adx
          [0x5] 5:	loadl ebx, fp+1
          [0x6] 6:	gt ebx, egx
          [0x7] 7:	movr ebx, cmt
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	skpe 6 // pc = 15
          [0xa] 10:	movi #0, egx
          [0xc] 12:	loadl ebx, fp+1
          [0xd] 13:	lt ebx, egx
          [0xe] 14:	movr ebx, cmt
          [0xf] 15:	cmp ebx, 1
          [0x10] 16:	jne 24
line: 159 [0x11] 17:	new_class @13 // std#IndexOutOfBoundsException
          [0x12] 18:	pushl 0
          [0x13] 19:	ipushl #1
          [0x14] 20:	call @802 // <std#ArrayList<var>.outOfBoundsMsg(var)>
          [0x15] 21:	call @87 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x16] 22:	throw 
          [0x17] 23:	nop
          [0x18] 24:	nop
line: 161 [0x19] 25:	movl 0
          [0x1a] 26:	movn #4
          [0x1b] 27:	movi #0, adx
          [0x1d] 29:	iaload_2 ebx, adx
          [0x1e] 30:	rstore ebx
          [0x1f] 31:	movi #0, egx
          [0x21] 33:	loadval ebx
          [0x22] 34:	test ebx, egx
          [0x23] 35:	jne 40
line: 162 [0x24] 36:	pushl 0
          [0x25] 37:	ipushl #2
          [0x26] 38:	call @796 // <std#ArrayList<var>.add(var)>
          [0x27] 39:	goto @90
line: 164 [0x28] 40:	pushl 0
          [0x29] 41:	call @793 // <std#ArrayList<var>.expand()>
line: 165 [0x2a] 42:	movl 0
          [0x2b] 43:	movn #4
          [0x2c] 44:	movi #0, adx
          [0x2e] 46:	iaload_2 ebx, adx
          [0x2f] 47:	inc ebx
          [0x30] 48:	rmov adx, ebx
          [0x31] 49:	dec ebx
line: 166 [0x32] 50:	istore 1
          [0x33] 51:	movl 0
          [0x34] 52:	movn #4
          [0x35] 53:	iaload_2 ebx, adx
          [0x36] 54:	loadval egx
          [0x37] 55:	sub ebx, egx -> ebx
          [0x39] 57:	rstore ebx
          [0x3a] 58:	ipopl 3
          [0x3b] 59:	loadl egx, fp+1
          [0x3c] 60:	loadl ebx, fp+3
          [0x3d] 61:	gt ebx, egx
          [0x3e] 62:	jne 82
line: 167 [0x3f] 63:	movl 0
          [0x40] 64:	movn #0
          [0x41] 65:	istore 1
          [0x42] 66:	loadl ebx, fp+3
          [0x43] 67:	loadval egx
          [0x44] 68:	sub ebx, egx -> ebx
          [0x46] 70:	chklen ebx
          [0x47] 71:	iaload_2 ebx, ebx
          [0x48] 72:	rstore ebx
          [0x49] 73:	movl 0
          [0x4a] 74:	movn #0
          [0x4b] 75:	loadl ebx, fp+3
          [0x4c] 76:	chklen ebx
          [0x4d] 77:	loadval egx
          [0x4e] 78:	rmov ebx, egx
          [0x4f] 79:	loadl ebx, fp+3
          [0x50] 80:	isubl #1, @3
          [0x51] 81:	goto @59
line: 168 [0x52] 82:	ipushl #2
          [0x53] 83:	movl 0
          [0x54] 84:	movn #0
          [0x55] 85:	loadl ebx, fp+1
          [0x56] 86:	chklen ebx
          [0x57] 87:	loadval egx
          [0x58] 88:	rmov ebx, egx
          [0x59] 89:	nop
          [0x5a] 90:	nop
          [0x5b] 91:	ret

func:@799 [std#ArrayList<var>.remove] in file: lib/support/0.2.422//ArrayList.sharp:180:23: note:  
		     public def remove(var pos) {
		                      ^


remove:
line: 180 [0x0] 0:	movl 0
          [0x1] 1:	movn #4
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 egx, adx
          [0x5] 5:	loadl ebx, fp+1
          [0x6] 6:	gt ebx, egx
          [0x7] 7:	movr ebx, cmt
          [0x8] 8:	movr ebx, cmt
          [0x9] 9:	skpe 6 // pc = 15
          [0xa] 10:	movi #0, egx
          [0xc] 12:	loadl ebx, fp+1
          [0xd] 13:	lt ebx, egx
          [0xe] 14:	movr ebx, cmt
          [0xf] 15:	cmp ebx, 1
          [0x10] 16:	jne 24
line: 181 [0x11] 17:	new_class @13 // std#IndexOutOfBoundsException
          [0x12] 18:	pushl 0
          [0x13] 19:	ipushl #1
          [0x14] 20:	call @802 // <std#ArrayList<var>.outOfBoundsMsg(var)>
          [0x15] 21:	call @87 // <std#IndexOutOfBoundsException.IndexOutOfBoundsException(std#string)>
          [0x16] 22:	throw 
          [0x17] 23:	nop
          [0x18] 24:	nop
line: 183 [0x19] 25:	movl 0
          [0x1a] 26:	movn #4
          [0x1b] 27:	movi #0, adx
          [0x1d] 29:	iaload_2 ebx, adx
          [0x1e] 30:	rstore ebx
          [0x1f] 31:	movi #1, egx
          [0x21] 33:	loadval ebx
          [0x22] 34:	test ebx, egx
          [0x23] 35:	jne 44
line: 184 [0x24] 36:	movl 0
          [0x25] 37:	movn #4
          [0x26] 38:	movi #0, adx
          [0x28] 40:	iaload_2 ebx, adx
          [0x29] 41:	dec ebx
          [0x2a] 42:	rmov adx, ebx
          [0x2b] 43:	goto @118
          [0x2c] 44:	movl 0
          [0x2d] 45:	movn #4
          [0x2e] 46:	movi #0, adx
          [0x30] 48:	iaload_2 ebx, adx
          [0x31] 49:	rstore ebx
          [0x32] 50:	movi #2, egx
          [0x34] 52:	loadval ebx
          [0x35] 53:	test ebx, egx
          [0x36] 54:	jne 80
line: 187 [0x37] 55:	ipushl #1
          [0x38] 56:	movi #0, egx
          [0x3a] 58:	loadval ebx
          [0x3b] 59:	test ebx, egx
          [0x3c] 60:	jne 76
line: 188 [0x3d] 61:	movl 0
          [0x3e] 62:	movn #0
          [0x3f] 63:	movi #1, ebx
          [0x41] 65:	chklen ebx
          [0x42] 66:	iaload_2 ebx, ebx
          [0x43] 67:	rstore ebx
          [0x44] 68:	movl 0
          [0x45] 69:	movn #0
          [0x46] 70:	movi #0, ebx
          [0x48] 72:	chklen ebx
          [0x49] 73:	loadval egx
          [0x4a] 74:	rmov ebx, egx
          [0x4b] 75:	nop
          [0x4c] 76:	nop
line: 190 [0x4d] 77:	pushl 0
          [0x4e] 78:	call @794 // <std#ArrayList<var>.shrink()>
          [0x4f] 79:	goto @118
line: 192 [0x50] 80:	istore 1
          [0x51] 81:	movl 0
          [0x52] 82:	movn #4
          [0x53] 83:	movi #0, adx
          [0x55] 85:	iaload_2 ebx, adx
          [0x56] 86:	loadval egx
          [0x57] 87:	sub ebx, egx -> ebx
          [0x59] 89:	rstore ebx
          [0x5a] 90:	ipopl 2
line: 193 [0x5b] 91:	loadl ebx, fp+1
          [0x5c] 92:	smovr_2 ebx, fp+3
          [0x5d] 93:	loadl egx, fp+2
          [0x5e] 94:	loadl ebx, fp+3
          [0x5f] 95:	lt ebx, egx
          [0x60] 96:	jne 115
line: 194 [0x61] 97:	movl 0
          [0x62] 98:	movn #0
          [0x63] 99:	istore 1
          [0x64] 100:	loadl ebx, fp+3
          [0x65] 101:	loadval egx
          [0x66] 102:	add ebx, egx -> ebx
          [0x68] 104:	chklen ebx
          [0x69] 105:	iaload_2 ebx, ebx
          [0x6a] 106:	rstore ebx
          [0x6b] 107:	movl 0
          [0x6c] 108:	movn #0
          [0x6d] 109:	loadl ebx, fp+3
          [0x6e] 110:	chklen ebx
          [0x6f] 111:	loadval egx
          [0x70] 112:	rmov ebx, egx
          [0x71] 113:	iaddl 1, @3
          [0x72] 114:	goto @93
line: 196 [0x73] 115:	pushl 0
          [0x74] 116:	call @794 // <std#ArrayList<var>.shrink()>
          [0x75] 117:	nop
          [0x76] 118:	nop
          [0x77] 119:	ret

func:@800 [std#ArrayList<var>.data] in file: lib/support/0.2.422//ArrayList.sharp:204:21: note:  
		     public def data() : T[] {
		                    ^


data:
line: 204 [0x0] 0:	movl 0
          [0x1] 1:	movn #0
          [0x2] 2:	returnobj
          [0x3] 3:	ret

func:@801 [std#ArrayList<var>.clear] in file: lib/support/0.2.422//ArrayList.sharp:212:22: note:  
		     public def clear() {
		                     ^


clear:
line: 213 [0x0] 0:	movl 0
          [0x1] 1:	movn #4
          [0x2] 2:	movi #0, adx
          [0x4] 4:	iaload_2 ebx, adx
          [0x5] 5:	rstore ebx
          [0x6] 6:	movi #0, egx
          [0x8] 8:	loadval ebx
          [0x9] 9:	tne ebx, egx
          [0xa] 10:	movr ebx, cmt
          [0xb] 11:	cmp ebx, 1
          [0xc] 12:	movr ebx, cmt
          [0xd] 13:	skne 12 // pc = 25
          [0xe] 14:	istore 1
          [0xf] 15:	movi #10, egx
          [0x11] 17:	movl 0
          [0x12] 18:	movn #3
          [0x13] 19:	movi #0, adx
          [0x15] 21:	iaload_2 ebx, adx
          [0x16] 22:	gt ebx, egx
          [0x17] 23:	movr ebx, cmt
          [0x18] 24:	loadval ecx
          [0x19] 25:	and ecx, ebx
          [0x1a] 26:	jne 44
line: 214 [0x1b] 27:	movi #10, ebx
          [0x1d] 29:	nop
          [0x1e] 30:	rstore ebx
          [0x1f] 31:	movl 0
          [0x20] 32:	movn #3
          [0x21] 33:	movi #0, adx
          [0x23] 35:	loadval ecx
          [0x24] 36:	rmov adx, ecx
line: 215 [0x25] 37:	movi #10, ebx
          [0x27] 39:	newarry ebx
          [0x28] 40:	movl 0
          [0x29] 41:	movn #0
          [0x2a] 42:	popobj
          [0x2b] 43:	nop
          [0x2c] 44:	nop
line: 218 [0x2d] 45:	movi #0, ebx
          [0x2f] 47:	nop
          [0x30] 48:	rstore ebx
          [0x31] 49:	movl 0
          [0x32] 50:	movn #4
          [0x33] 51:	movi #0, adx
          [0x35] 53:	loadval ecx
          [0x36] 54:	rmov adx, ecx
          [0x37] 55:	ret

func:@802 [std#ArrayList<var>.outOfBoundsMsg] in file: lib/support/0.2.422//ArrayList.sharp:227:31: note:  
		    private def outOfBoundsMsg(var index) : string {
		                              ^


outOfBoundsMsg:
line: 227 [0x0] 0:	new_class @47 // std#string
          [0x1] 1:	newstr @35 // "Index: "
          [0x2] 2:	call @553 // <std#string.string(var[])>
          [0x3] 3:	ipushl #1
          [0x4] 4:	call @573 // <std#string.$operator+(var)>
          [0x5] 5:	newstr @36 // ", size: "
          [0x6] 6:	call @566 // <std#string.$operator+(var[])>
          [0x7] 7:	movl 0
          [0x8] 8:	movn #4
          [0x9] 9:	movi #0, adx
          [0xb] 11:	iaload_2 ebx, adx
          [0xc] 12:	rstore ebx
          [0xd] 13:	call @573 // <std#string.$operator+(var)>
          [0xe] 14:	movsl #0
          [0xf] 15:	returnobj
          [0x10] 16:	ret

