## Object Dump file for bin/syntax:

pre codebase size: 90330
post codebase size: 81631
optimized opcodes: 8699
net % gain 9.63024


class: std#__srt_global[0] fields(1) methods(47)
class: std#_enum_[1] fields(2) methods(17)
class: std#throwable[2] fields(3) methods(12)
class: std#exception[3] fields(3) methods(15)
class: std#illegal_argument_exception[4] fields(3) methods(18)
class: std#illegal_state_exception[5] fields(3) methods(18)
class: std#out_of_bounds_exception[6] fields(3) methods(18)
class: std#io_exception[7] fields(3) methods(18)
class: std#invalid_operation_exception[8] fields(3) methods(18)
class: std#nullptr_exception[9] fields(3) methods(18)
class: std#runtime_exception[10] fields(3) methods(18)
class: std#stack_overflow_exception[11] fields(3) methods(18)
class: std#thread_stack_exception[12] fields(3) methods(18)
class: std#class_cast_exception[13] fields(3) methods(18)
class: std#out_of_memory_exception[14] fields(3) methods(18)
class: std#not_implemented_error[15] fields(3) methods(18)
class: std#unsatisfied_link_error[16] fields(3) methods(18)
class: std.io#__srt_global[17] fields(1) methods(45)
class: std.io#file[18] fields(3) methods(50)
class: std.io#file_system[19] fields(18) methods(27)
class: std.io.task#__srt_global[20] fields(6) methods(18)
class: std.io.task#cancellation_exception[21] fields(3) methods(21)
class: std.io.task#job[22] fields(22) methods(28)
class: std.io.task#job_builder[23] fields(2) methods(21)
class: std.io.task#job_controller[24] fields(2) methods(8)
class: std.io.task#job_master[25] fields(5) methods(15)
enum: std.io.task#job_state[26] fields(6) methods(17)
class: std.io.task#task[27] fields(0) methods(16)
class: std.io#thread[28] fields(14) methods(45)
class: std.io#thread_group[29] fields(6) methods(20)
enum: std.io#thread_priority[30] fields(5) methods(17)
enum: std.io#thread_result[31] fields(20) methods(20)
interface: std.io#uncaught_exception_handler[32] fields(0) methods(9)
class: std.io#unix_fs[33] fields(20) methods(32)
class: std.io#win_fs[34] fields(20) methods(32)
class: std.math#__srt_global[35] fields(5) methods(27)
class: std#_nil_[36] fields(1) methods(11)
class: std#_object_[37] fields(0) methods(7)
class: platform#__srt_global[38] fields(0) methods(4)
class: platform#build[39] fields(4) methods(10)
class: platform.kernel#__srt_global[40] fields(0) methods(1)
class: platform.kernel#platform[41] fields(4) methods(16)
class: platform.kernel#stack_state[42] fields(2) methods(8)
class: platform.kernel#vm[43] fields(0) methods(24)
class: std#ulong[44] fields(1) methods(294)
class: std#long[45] fields(1) methods(294)
class: std#uint[46] fields(1) methods(294)
class: std#int[47] fields(1) methods(294)
class: std#ushort[48] fields(1) methods(294)
class: std#short[49] fields(1) methods(294)
class: std#uchar[50] fields(1) methods(294)
class: std#char[51] fields(1) methods(300)
class: std#byte[52] fields(1) methods(394)
class: std#bool[53] fields(1) methods(295)
interface: std#printable[54] fields(0) methods(9)
class: std.reflect#__srt_global[55] fields(0) methods(1)
class: std.reflect#_class_[56] fields(6) methods(9)
class: std.reflect#data_entity[57] fields(6) methods(8)
enum: std.reflect#data_type[58] fields(19) methods(17)
enum: std.reflect#property_type[59] fields(5) methods(17)
class: std.reflect#data_property[60] fields(6) methods(9)
class: std.reflect#field[61] fields(2) methods(8)
class: std.reflect#function[62] fields(6) methods(9)
class: std.reflect#reflect[63] fields(4) methods(11)
class: std#string[64] fields(3) methods(67)
class: std#string_builder[65] fields(7) methods(53)
class: std#time[66] fields(1) methods(20)
enum: std#time_request[67] fields(11) methods(17)
enum: std#time_unit[68] fields(6) methods(17)
interface: std#unique[69] fields(0) methods(10)
class: common#__srt_global[70] fields(0) methods(1)
class: common#constants[71] fields(33) methods(9)
class: common#constants.strings[72] fields(16) methods(9)
class: common.gpio#__srt_global[73] fields(0) methods(5)
class: common.network.core#__srt_global[74] fields(0) methods(2)
class: common.network.core#request[75] fields(3) methods(15)
class: common.network.core#request_data[76] fields(3) methods(13)
class: common.network.core#request_data.request_item[77] fields(2) methods(9)
class: common.network.data.request#__srt_global[78] fields(0) methods(1)
interface: common.network.data.request#acknowledge_request[79] fields(0) methods(9)
interface: common.network.data.request#command_request[80] fields(0) methods(10)
interface: common.network.data.request#flight_data_request[81] fields(0) methods(10)
interface: common.network.data.request#flight_mode_change_request[82] fields(0) methods(9)
interface: common.network.data.request#handshake_request[83] fields(0) methods(9)
interface: common.network.data.request#network_scan_request[84] fields(0) methods(9)
interface: common.network.data.request#signal_strength_request[85] fields(0) methods(9)
class: common.network.data.response#__srt_global[86] fields(0) methods(1)
class: common.network.data.response#command_response[87] fields(2) methods(9)
class: common.network.data.response#flight_data_response[88] fields(3) methods(9)
class: common.network.driver#__srt_global[89] fields(0) methods(13)
class: common.network.driver#nrf24[90] fields(4) methods(19)
class: common.network#__srt_global[91] fields(0) methods(1)
class: common.network#network[92] fields(8) methods(17)
class: common.network.remote#__srt_global[93] fields(0) methods(2)
class: common.network.remote#acknowledge_request_impl[94] fields(4) methods(20)
class: common.network.remote#command_request_impl[95] fields(3) methods(18)
class: common.network.remote#flight_data_request_impl[96] fields(4) methods(21)
class: common.network.remote#flight_mode_change_request_impl[97] fields(4) methods(20)
class: common.network.remote#handshake_request_impl[98] fields(4) methods(20)
class: common.network.remote#network_scan_request_impl[99] fields(3) methods(17)
class: common.network.remote#signal_strength_request_impl[100] fields(3) methods(17)
class: main#__srt_global[101] fields(4) methods(8)
class: ui.driver#__srt_global[102] fields(0) methods(8)
class: ui.driver#ssd1306[103] fields(1) methods(14)
class: ui.layout.config#__srt_global[104] fields(1) methods(3)
class: ui.layout#__srt_global[105] fields(1) methods(5)
class: ui.layout#home_screen[106] fields(7) methods(23)
class: ui.res#__srt_global[107] fields(3) methods(1)
class: ui.res.drawable#__srt_global[108] fields(24) methods(2)
class: ui.res#resources[109] fields(2) methods(11)
class: ui.support#__srt_global[110] fields(0) methods(1)
class: ui.support#constants[111] fields(0) methods(8)
class: ui.support#constants.view[112] fields(7) methods(8)
class: ui.support#constants.window[113] fields(3) methods(8)
class: ui.support#constants.lifecycle[114] fields(2) methods(8)
class: ui.support#constants.time[115] fields(2) methods(8)
class: ui.support#constants.layout[116] fields(1) methods(8)
class: ui.support#constants.margins[117] fields(0) methods(8)
class: ui.support#constants.resource[118] fields(0) methods(8)
class: ui.support#constants.resource.id[119] fields(22) methods(8)
class: ui.support#constants.standard[120] fields(2) methods(8)
class: ui.support#drawable[121] fields(4) methods(9)
class: ui.support#fragment[122] fields(4) methods(17)
class: ui.support#image_view[123] fields(19) methods(37)
interface: ui.support#lifecycle[124] fields(0) methods(10)
class: ui.support#margin[125] fields(4) methods(8)
class: ui.support#text_view[126] fields(20) methods(38)
class: ui.support#view[127] fields(18) methods(30)
class: ui.support#window[128] fields(6) methods(17)
std#loopable<std.io#thread>[129] fields(0) methods(9)
generic: std#integer<_uint64>[130] fields(1) methods(200)
generic: std#integer<_int64>[131] fields(1) methods(200)
generic: std#integer<_uint32>[132] fields(1) methods(200)
generic: std#integer<_int32>[133] fields(1) methods(200)
generic: std#integer<_uint16>[134] fields(1) methods(200)
generic: std#integer<_int16>[135] fields(1) methods(200)
generic: std#integer<_uint8>[136] fields(1) methods(200)
generic: std#integer<_int8>[137] fields(1) methods(200)
std#loopable<_int8>[138] fields(0) methods(9)
generic: std#list<std#string>[139] fields(5) methods(34)
std#loopable<std#string>[140] fields(0) methods(9)
generic: std#hashtable<std.io#thread,std.io.task#job_controller>[141] fields(6) methods(15)
generic: std#hashtable<std#int,std.io#thread>[142] fields(6) methods(15)
generic: std#list<std.io#thread>[143] fields(5) methods(34)
generic: std#synced_list<std.io.task#job>[144] fields(5) methods(32)
std#loopable<std.io.task#job>[145] fields(0) methods(9)
generic: std#list<std.io.task#job>[146] fields(5) methods(34)
generic: std#list<var>[147] fields(5) methods(34)
std#loopable<var>[148] fields(0) methods(9)
generic: std#list<common.network.core#request_data.request_item>[149] fields(5) methods(34)
std#loopable<common.network.core#request_data.request_item>[150] fields(0) methods(9)
generic: std#hashmap<std#int,ui.support#drawable>[151] fields(5) methods(15)
generic: std#list<ui.support#view>[152] fields(5) methods(34)
std#loopable<ui.support#view>[153] fields(0) methods(9)
generic: std#list<ui.support#fragment>[154] fields(5) methods(34)
std#loopable<ui.support#fragment>[155] fields(0) methods(9)
generic: std.io.task#entry<std.io#thread,std.io.task#job_controller>[156] fields(3) methods(10)
generic: std.io#entry<std#int,std.io#thread>[157] fields(3) methods(10)
generic: ui.res#entry<std#int,ui.support#drawable>[158] fields(3) methods(10)


 strings: 

[0]: job#
[1]: nil
[2]: main
[3]: 100
[4]: 200
[5]: cmd
[6]: response
[7]: yes
[8]: mode
[9]: altitude
[10]: bat_lvl
[11]: speed
[12]: 0
[13]: 1
[14]: 2
[15]: 3
[16]: 4
[17]: 5
[18]: 6
[19]: signal-updater
[20]: clock-updater
[21]: flight-data-updater
[22]: 
[23]: file path cannot be null
[24]: file path cannot be empty
[25]: Negative time
[26]: file could not be resolved: 
[27]: cannot set update restart interval on non-recurring job
[28]: cannot set a timeout on a job that's blocking the calling thread
[29]: cannot set a job recurring that's blocking the calling thread
[30]: cannot block calling thread on job that has a timeout
[31]: cannot block calling thread on a recurring job
[32]: recurring jobs cannot be deferred tasks
[33]: Long term jobs
[34]: Short term jobs
[35]: task_scheduler
[36]: cannot modify max thread count after task library has started, 
[37]: try calling this before your first task
[38]: cannot modify max thread count after task library has started, try calling this before your first ta
[39]: cannot have less than 2 max threads
[40]: long_term_worker_thread#
[41]: worker_thread#
[42]: invalid thread priority 
[43]: win
[44]: posix
[45]: .dll
[46]: .so
[47]: length cannot be less than zero
[48]: length of: 
[49]:  is greater than the string: 
[50]: null
[51]: invalid precision: 
[52]: end_pos: 
[53]:  cannot be less than the start_pos: 
[54]: Index out of bounds exception at: 
[55]:  with size of: 
[56]: endPos: 
[57]:  cannot be less than the startPos: 
[58]: cannot sleep for negative time: 
[59]: device is not setup
[60]: device is shutown
[61]: data
[62]: bin/dragonfly
[63]: image has invalid size: 
[64]:  x 
[65]:  img size is: 
[66]: skip count < 0: 
[67]: main-container
[68]: ALT
[69]: 999M
[70]: 9
[71]: Kph
[72]: cannot align view to left of parent use 'to_start_of(parent)' instead
[73]: cannot align view to top of another view to whom we are not left aligned to
[74]: cannot align view to top of another view with top or bottom alignment
[75]: cannot align view above parent view, use 'to_top_of(parent)' instead
[76]: cannot align view to bottom while also having top alignment
[77]: cannot align view below the parent, use 'to_bottom_of(parent)' instead
[78]: cannot align view to right while also having left alignment
[79]: created
[80]: active
[81]: completed
[82]: cancelled
[83]: min_priority
[84]: norm_priority
[85]: max_priority
[86]: result_ok
[87]: result_ill_thread_start
[88]: result_thread_running
[89]: result_thread_terminated
[90]: result_invalid_stack_size
[91]: result_thread_not_started
[92]: result_ill_thread_join
[93]: result_thread_join_failed
[94]: result_ill_thread_interrupt
[95]: result_thread_interrupt_failed
[96]: result_ill_thread_destroy
[97]: result_thread_create_failed
[98]: result_no_thread_id
[99]: result_thread_destroy_failed
[100]: result_ill_priority_set
[101]: result_ill_thread_suspend
[102]: result_max_spin
[103]: enums
[104]: int8
[105]: int16
[106]: int32
[107]: int64
[108]: uint8
[109]: uint16
[110]: uint32
[111]: uint64
[112]: fnptr
[113]: _var
[114]: _object
[115]: _class
[116]: method
[117]: _nil
[118]: any
[119]: untyped
[120]: undefined
[121]: class_property
[122]: field_property
[123]: function_property
[124]: tm_seconds
[125]: tm_minutes
[126]: tm_hour
[127]: tm_mday
[128]: tm_mon
[129]: tm_year
[130]: tm_wday
[131]: tm_yday
[132]: tm_isdst
[133]: seconds
[134]: milliseconds
[135]: microseconds
[136]: nanoseconds
[137]: illegal char in string: 
[138]: [ 
[139]: , 
[140]:  ]
[141]: Index: 
[142]: , size: 
[143]: key 
[144]:  value 
[145]: =
[146]: ,
[147]: text size too large for view height: 
[148]:  txt size: 
[149]:  calc height: 
[150]: M
[151]: am
[152]: :

 constants: 

[0]: 2.7182818284590451e+00
[1]: 3.1415926535897931e+00
[2]: 1.0000000000000000e+00
[3]: 0.0000000000000000e+00
[4]: inf
[5]: nan
[6]: nan
[7]: 7.5000000000000000e-01
[8]: 2.5000000000000000e-01
[9]: 5.0000000000000000e-01
[10]: 1.0000000000000000e+09

 methods: 
constructor: std#__srt_global.__srt_global[0] params(0) in file: lib\support\0.2.805/console.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: std.io#__srt_global.__srt_global[1] params(0) in file: lib\support\0.2.805/io//critical_section.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: std.io.task#__srt_global.__srt_global[2] params(0) in file: lib\support\0.2.805/io//task//cancellation_exception.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: std.math#__srt_global.__srt_global[3] params(0) in file: lib\support\0.2.805/math//math.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: platform#__srt_global.__srt_global[4] params(0) in file: lib\support\0.2.805/platform//build.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: platform.kernel#__srt_global.__srt_global[5] params(0) in file: lib\support\0.2.805/platform//kernel//platform.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: std.reflect#__srt_global.__srt_global[6] params(0) in file: lib\support\0.2.805/reflect//class.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: common#__srt_global.__srt_global[7] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/constants.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: common.gpio#__srt_global.__srt_global[8] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/gpio//gpio.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: common.network.core#__srt_global.__srt_global[9] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//core//request.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: common.network.data.request#__srt_global.__srt_global[10] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//data//request//ackowledge_request.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: common.network.data.response#__srt_global.__srt_global[11] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//data//response//command_response.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: common.network.driver#__srt_global.__srt_global[12] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//driver//dev_interface.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: common.network#__srt_global.__srt_global[13] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//network.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: common.network.remote#__srt_global.__srt_global[14] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//remote//acknowledge_request_impl.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: main#__srt_global.__srt_global[15] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/connection_tracker.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: ui.driver#__srt_global.__srt_global[16] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//driver//dev_interface.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: ui.layout.config#__srt_global.__srt_global[17] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//layout//config//layout_config.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: ui.layout#__srt_global.__srt_global[18] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//layout//home_screen.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: ui.res#__srt_global.__srt_global[19] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//res//colors.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: ui.res.drawable#__srt_global.__srt_global[20] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//res//drawable//ico_battery_0.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: ui.support#__srt_global.__srt_global[21] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//constants.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


std#loopable<std.io#thread>.get_elements[22] params(0) in file: lib\support\0.2.805/io//thread_group.sharp:4:8: note:  
			
		       ^



constructor: std#loopable<std.io#thread>.loopable[23] params(0) in file: lib\support\0.2.805/io//thread_group.sharp:3:10: note:  
		public class thread_group : loopable<thread> {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#integer<_uint64>.integer[24] params(1) in file: lib\support\0.2.805/primitives.sharp:8:12: note:  
		    integer(initial_val : var) {
		           ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 9 ipushl #1   
2 [0x2]:         movl 0   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         movu64 ebx, ebx   
7 [0x7]:         movi #0, adx   
9 [0x9]:         rmov adx, ebx   
10 [0xa]:         ret   


function: std#integer<_uint64>.hash[25] params(0) in file: lib\support\0.2.805/primitives.sharp:12:8: note:  
		    def hash() : long {
		       ^

0 [0x0]: line: 13 new_class @45 // std#long   
1 [0x1]:          dup    
2 [0x2]:          movl 0   
3 [0x3]:          movn #0   
5 [0x5]:          movi #0, adx   
7 [0x7]:          iaload ebx, adx   
8 [0x8]:          rstore ebx   
9 [0x9]:          call @2077 // <std#long.long>   
10 [0xa]:          popobj2    
11 [0xb]:          returnobj   
12 [0xc]:          ret   


overload function: std#integer<_uint64>.operator!=[26] params(1) in file: lib\support\0.2.805/primitives.sharp:16:8: note:  
		    def operator!=(num : ulong) := (value!=num.value);
		       ^

0 [0x0]: line: 16 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator==[27] params(1) in file: lib\support\0.2.805/primitives.sharp:17:8: note:  
		    def operator==(num : ulong) := (value==num.value);
		       ^

0 [0x0]: line: 17 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator!=[28] params(1) in file: lib\support\0.2.805/primitives.sharp:18:8: note:  
		    def operator!=(num : long) := (value!=num.value);
		       ^

0 [0x0]: line: 18 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator==[29] params(1) in file: lib\support\0.2.805/primitives.sharp:19:8: note:  
		    def operator==(num : long) := (value==num.value);
		       ^

0 [0x0]: line: 19 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator!=[30] params(1) in file: lib\support\0.2.805/primitives.sharp:20:8: note:  
		    def operator!=(num : uint) := (value!=num.value);
		       ^

0 [0x0]: line: 20 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator==[31] params(1) in file: lib\support\0.2.805/primitives.sharp:21:8: note:  
		    def operator==(num : uint) := (value==num.value);
		       ^

0 [0x0]: line: 21 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator!=[32] params(1) in file: lib\support\0.2.805/primitives.sharp:22:8: note:  
		    def operator!=(num : int) := (value!=num.value);
		       ^

0 [0x0]: line: 22 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator==[33] params(1) in file: lib\support\0.2.805/primitives.sharp:23:8: note:  
		    def operator==(num : int) := (value==num.value);
		       ^

0 [0x0]: line: 23 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator!=[34] params(1) in file: lib\support\0.2.805/primitives.sharp:24:8: note:  
		    def operator!=(num : ushort) := (value!=num.value);
		       ^

0 [0x0]: line: 24 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator==[35] params(1) in file: lib\support\0.2.805/primitives.sharp:25:8: note:  
		    def operator==(num : ushort) := (value==num.value);
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator!=[36] params(1) in file: lib\support\0.2.805/primitives.sharp:26:8: note:  
		    def operator!=(num : short) := (value!=num.value);
		       ^

0 [0x0]: line: 26 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator==[37] params(1) in file: lib\support\0.2.805/primitives.sharp:27:8: note:  
		    def operator==(num : short) := (value==num.value);
		       ^

0 [0x0]: line: 27 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator!=[38] params(1) in file: lib\support\0.2.805/primitives.sharp:28:8: note:  
		    def operator!=(num : uchar) := (value!=num.value);
		       ^

0 [0x0]: line: 28 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator==[39] params(1) in file: lib\support\0.2.805/primitives.sharp:29:8: note:  
		    def operator==(num : uchar) := (value==num.value);
		       ^

0 [0x0]: line: 29 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator!=[40] params(1) in file: lib\support\0.2.805/primitives.sharp:30:8: note:  
		    def operator!=(num : char) := (value!=num.value);
		       ^

0 [0x0]: line: 30 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator==[41] params(1) in file: lib\support\0.2.805/primitives.sharp:31:8: note:  
		    def operator==(num : char) := (value==num.value);
		       ^

0 [0x0]: line: 31 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator!=[42] params(1) in file: lib\support\0.2.805/primitives.sharp:32:8: note:  
		    def operator!=(num : byte) := (value!=num.value);
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator==[43] params(1) in file: lib\support\0.2.805/primitives.sharp:33:8: note:  
		    def operator==(num : byte) := (value==num.value);
		       ^

0 [0x0]: line: 33 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator!=[44] params(1) in file: lib\support\0.2.805/primitives.sharp:34:8: note:  
		    def operator!=(num : bool) := (value!=num.value);
		       ^

0 [0x0]: line: 34 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator==[45] params(1) in file: lib\support\0.2.805/primitives.sharp:35:8: note:  
		    def operator==(num : bool) := (value==num.value);
		       ^

0 [0x0]: line: 35 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator+[46] params(1) in file: lib\support\0.2.805/primitives.sharp:37:8: note:  
		    def operator+(num : ulong)  := (value+num.value);
		       ^

0 [0x0]: line: 37 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator+[47] params(1) in file: lib\support\0.2.805/primitives.sharp:38:8: note:  
		    def operator+(num : long)   := (value+num.value);
		       ^

0 [0x0]: line: 38 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator+[48] params(1) in file: lib\support\0.2.805/primitives.sharp:39:8: note:  
		    def operator+(num : uint)   := (value+num.value);
		       ^

0 [0x0]: line: 39 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator+[49] params(1) in file: lib\support\0.2.805/primitives.sharp:40:8: note:  
		    def operator+(num : int)    := (value+num.value);
		       ^

0 [0x0]: line: 40 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator+[50] params(1) in file: lib\support\0.2.805/primitives.sharp:41:8: note:  
		    def operator+(num : ushort) := (value+num.value);
		       ^

0 [0x0]: line: 41 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator+[51] params(1) in file: lib\support\0.2.805/primitives.sharp:42:8: note:  
		    def operator+(num : short)  := (value+num.value);
		       ^

0 [0x0]: line: 42 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator+[52] params(1) in file: lib\support\0.2.805/primitives.sharp:43:8: note:  
		    def operator+(num : uchar)  := (value+num.value);
		       ^

0 [0x0]: line: 43 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator+[53] params(1) in file: lib\support\0.2.805/primitives.sharp:44:8: note:  
		    def operator+(num : char)   := (value+num.value);
		       ^

0 [0x0]: line: 44 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator+[54] params(1) in file: lib\support\0.2.805/primitives.sharp:45:8: note:  
		    def operator+(num : byte)   := (value+num.value);
		       ^

0 [0x0]: line: 45 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator+[55] params(1) in file: lib\support\0.2.805/primitives.sharp:46:8: note:  
		    def operator+(num : bool)   := (value+num.value);
		       ^

0 [0x0]: line: 46 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator+[56] params(1) in file: lib\support\0.2.805/primitives.sharp:47:8: note:  
		    def operator+(num : var)    := (value+num);
		       ^

0 [0x0]: line: 47 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          add ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint64>.operator-[57] params(1) in file: lib\support\0.2.805/primitives.sharp:49:8: note:  
		    def operator-(num : ulong)  := (value-num.value);
		       ^

0 [0x0]: line: 49 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator-[58] params(1) in file: lib\support\0.2.805/primitives.sharp:50:8: note:  
		    def operator-(num : long)   := (value-num.value);
		       ^

0 [0x0]: line: 50 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator-[59] params(1) in file: lib\support\0.2.805/primitives.sharp:51:8: note:  
		    def operator-(num : uint)   := (value-num.value);
		       ^

0 [0x0]: line: 51 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator-[60] params(1) in file: lib\support\0.2.805/primitives.sharp:52:8: note:  
		    def operator-(num : int)    := (value-num.value);
		       ^

0 [0x0]: line: 52 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator-[61] params(1) in file: lib\support\0.2.805/primitives.sharp:53:8: note:  
		    def operator-(num : ushort) := (value-num.value);
		       ^

0 [0x0]: line: 53 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator-[62] params(1) in file: lib\support\0.2.805/primitives.sharp:54:8: note:  
		    def operator-(num : short)  := (value-num.value);
		       ^

0 [0x0]: line: 54 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator-[63] params(1) in file: lib\support\0.2.805/primitives.sharp:55:8: note:  
		    def operator-(num : uchar)  := (value-num.value);
		       ^

0 [0x0]: line: 55 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator-[64] params(1) in file: lib\support\0.2.805/primitives.sharp:56:8: note:  
		    def operator-(num : char)   := (value-num.value);
		       ^

0 [0x0]: line: 56 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator-[65] params(1) in file: lib\support\0.2.805/primitives.sharp:57:8: note:  
		    def operator-(num : byte)   := (value-num.value);
		       ^

0 [0x0]: line: 57 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator-[66] params(1) in file: lib\support\0.2.805/primitives.sharp:58:8: note:  
		    def operator-(num : bool)   := (value-num.value);
		       ^

0 [0x0]: line: 58 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator-[67] params(1) in file: lib\support\0.2.805/primitives.sharp:59:8: note:  
		    def operator-(num : var)    := (value-num);
		       ^

0 [0x0]: line: 59 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          sub ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint64>.operator*[68] params(1) in file: lib\support\0.2.805/primitives.sharp:61:8: note:  
		    def operator*(num : ulong)  := (value*num.value);
		       ^

0 [0x0]: line: 61 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator*[69] params(1) in file: lib\support\0.2.805/primitives.sharp:62:8: note:  
		    def operator*(num : long)   := (value*num.value);
		       ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator*[70] params(1) in file: lib\support\0.2.805/primitives.sharp:63:8: note:  
		    def operator*(num : uint)   := (value*num.value);
		       ^

0 [0x0]: line: 63 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator*[71] params(1) in file: lib\support\0.2.805/primitives.sharp:64:8: note:  
		    def operator*(num : int)    := (value*num.value);
		       ^

0 [0x0]: line: 64 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator*[72] params(1) in file: lib\support\0.2.805/primitives.sharp:65:8: note:  
		    def operator*(num : ushort) := (value*num.value);
		       ^

0 [0x0]: line: 65 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator*[73] params(1) in file: lib\support\0.2.805/primitives.sharp:66:8: note:  
		    def operator*(num : short)  := (value*num.value);
		       ^

0 [0x0]: line: 66 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator*[74] params(1) in file: lib\support\0.2.805/primitives.sharp:67:8: note:  
		    def operator*(num : uchar)  := (value*num.value);
		       ^

0 [0x0]: line: 67 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator*[75] params(1) in file: lib\support\0.2.805/primitives.sharp:68:8: note:  
		    def operator*(num : char)   := (value*num.value);
		       ^

0 [0x0]: line: 68 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator*[76] params(1) in file: lib\support\0.2.805/primitives.sharp:69:8: note:  
		    def operator*(num : byte)   := (value*num.value);
		       ^

0 [0x0]: line: 69 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator*[77] params(1) in file: lib\support\0.2.805/primitives.sharp:70:8: note:  
		    def operator*(num : bool)   := (value*num.value);
		       ^

0 [0x0]: line: 70 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator*[78] params(1) in file: lib\support\0.2.805/primitives.sharp:71:8: note:  
		    def operator*(num : var)    := (value*num);
		       ^

0 [0x0]: line: 71 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          mul ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint64>.operator/[79] params(1) in file: lib\support\0.2.805/primitives.sharp:73:8: note:  
		    def operator/(num : ulong)  := (value/num.value);
		       ^

0 [0x0]: line: 73 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator/[80] params(1) in file: lib\support\0.2.805/primitives.sharp:74:8: note:  
		    def operator/(num : long)   := (value/num.value);
		       ^

0 [0x0]: line: 74 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator/[81] params(1) in file: lib\support\0.2.805/primitives.sharp:75:8: note:  
		    def operator/(num : uint)   := (value/num.value);
		       ^

0 [0x0]: line: 75 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator/[82] params(1) in file: lib\support\0.2.805/primitives.sharp:76:8: note:  
		    def operator/(num : int)    := (value/num.value);
		       ^

0 [0x0]: line: 76 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator/[83] params(1) in file: lib\support\0.2.805/primitives.sharp:77:8: note:  
		    def operator/(num : ushort) := (value/num.value);
		       ^

0 [0x0]: line: 77 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator/[84] params(1) in file: lib\support\0.2.805/primitives.sharp:78:8: note:  
		    def operator/(num : short)  := (value/num.value);
		       ^

0 [0x0]: line: 78 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator/[85] params(1) in file: lib\support\0.2.805/primitives.sharp:79:8: note:  
		    def operator/(num : uchar)  := (value/num.value);
		       ^

0 [0x0]: line: 79 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator/[86] params(1) in file: lib\support\0.2.805/primitives.sharp:80:8: note:  
		    def operator/(num : char)   := (value/num.value);
		       ^

0 [0x0]: line: 80 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator/[87] params(1) in file: lib\support\0.2.805/primitives.sharp:81:8: note:  
		    def operator/(num : byte)   := (value/num.value);
		       ^

0 [0x0]: line: 81 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator/[88] params(1) in file: lib\support\0.2.805/primitives.sharp:82:8: note:  
		    def operator/(num : bool)   := (value/num.value);
		       ^

0 [0x0]: line: 82 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator/[89] params(1) in file: lib\support\0.2.805/primitives.sharp:83:8: note:  
		    def operator/(num : var)    := (value/num);
		       ^

0 [0x0]: line: 83 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          div ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint64>.operator%[90] params(1) in file: lib\support\0.2.805/primitives.sharp:85:8: note:  
		    def operator%(num : ulong)  := (value%num.value);
		       ^

0 [0x0]: line: 85 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator%[91] params(1) in file: lib\support\0.2.805/primitives.sharp:86:8: note:  
		    def operator%(num : long)   := (value%num.value);
		       ^

0 [0x0]: line: 86 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator%[92] params(1) in file: lib\support\0.2.805/primitives.sharp:87:8: note:  
		    def operator%(num : uint)   := (value%num.value);
		       ^

0 [0x0]: line: 87 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator%[93] params(1) in file: lib\support\0.2.805/primitives.sharp:88:8: note:  
		    def operator%(num : int)    := (value%num.value);
		       ^

0 [0x0]: line: 88 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator%[94] params(1) in file: lib\support\0.2.805/primitives.sharp:89:8: note:  
		    def operator%(num : ushort) := (value%num.value);
		       ^

0 [0x0]: line: 89 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator%[95] params(1) in file: lib\support\0.2.805/primitives.sharp:90:8: note:  
		    def operator%(num : short)  := (value%num.value);
		       ^

0 [0x0]: line: 90 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator%[96] params(1) in file: lib\support\0.2.805/primitives.sharp:91:8: note:  
		    def operator%(num : uchar)  := (value%num.value);
		       ^

0 [0x0]: line: 91 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator%[97] params(1) in file: lib\support\0.2.805/primitives.sharp:92:8: note:  
		    def operator%(num : char)   := (value%num.value);
		       ^

0 [0x0]: line: 92 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator%[98] params(1) in file: lib\support\0.2.805/primitives.sharp:93:8: note:  
		    def operator%(num : byte)   := (value%num.value);
		       ^

0 [0x0]: line: 93 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator%[99] params(1) in file: lib\support\0.2.805/primitives.sharp:94:8: note:  
		    def operator%(num : bool)   := (value%num.value);
		       ^

0 [0x0]: line: 94 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator%[100] params(1) in file: lib\support\0.2.805/primitives.sharp:95:8: note:  
		    def operator%(num : var)    := (value%num);
		       ^

0 [0x0]: line: 95 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          mod ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint64>.operator<[101] params(1) in file: lib\support\0.2.805/primitives.sharp:97:8: note:  
		    def operator<(num : ulong)  := (value<num.value);
		       ^

0 [0x0]: line: 97 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator<[102] params(1) in file: lib\support\0.2.805/primitives.sharp:98:8: note:  
		    def operator<(num : long)   := (value<num.value);
		       ^

0 [0x0]: line: 98 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator<[103] params(1) in file: lib\support\0.2.805/primitives.sharp:99:8: note:  
		    def operator<(num : uint)   := (value<num.value);
		       ^

0 [0x0]: line: 99 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator<[104] params(1) in file: lib\support\0.2.805/primitives.sharp:100:8: note:  
		    def operator<(num : int)    := (value<num.value);
		       ^

0 [0x0]: line: 100 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<[105] params(1) in file: lib\support\0.2.805/primitives.sharp:101:8: note:  
		    def operator<(num : ushort) := (value<num.value);
		       ^

0 [0x0]: line: 101 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<[106] params(1) in file: lib\support\0.2.805/primitives.sharp:102:8: note:  
		    def operator<(num : short)  := (value<num.value);
		       ^

0 [0x0]: line: 102 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<[107] params(1) in file: lib\support\0.2.805/primitives.sharp:103:8: note:  
		    def operator<(num : uchar)  := (value<num.value);
		       ^

0 [0x0]: line: 103 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<[108] params(1) in file: lib\support\0.2.805/primitives.sharp:104:8: note:  
		    def operator<(num : char)   := (value<num.value);
		       ^

0 [0x0]: line: 104 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<[109] params(1) in file: lib\support\0.2.805/primitives.sharp:105:8: note:  
		    def operator<(num : byte)   := (value<num.value);
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<[110] params(1) in file: lib\support\0.2.805/primitives.sharp:106:8: note:  
		    def operator<(num : bool)   := (value<num.value);
		       ^

0 [0x0]: line: 106 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<[111] params(1) in file: lib\support\0.2.805/primitives.sharp:107:8: note:  
		    def operator<(num : var)    := (value<num);
		       ^

0 [0x0]: line: 107 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           lt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint64>.operator>[112] params(1) in file: lib\support\0.2.805/primitives.sharp:109:8: note:  
		    def operator>(num : ulong)  := (value>num.value);
		       ^

0 [0x0]: line: 109 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>[113] params(1) in file: lib\support\0.2.805/primitives.sharp:110:8: note:  
		    def operator>(num : long)   := (value>num.value);
		       ^

0 [0x0]: line: 110 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>[114] params(1) in file: lib\support\0.2.805/primitives.sharp:111:8: note:  
		    def operator>(num : uint)   := (value>num.value);
		       ^

0 [0x0]: line: 111 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>[115] params(1) in file: lib\support\0.2.805/primitives.sharp:112:8: note:  
		    def operator>(num : int)    := (value>num.value);
		       ^

0 [0x0]: line: 112 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>[116] params(1) in file: lib\support\0.2.805/primitives.sharp:113:8: note:  
		    def operator>(num : ushort) := (value>num.value);
		       ^

0 [0x0]: line: 113 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>[117] params(1) in file: lib\support\0.2.805/primitives.sharp:114:8: note:  
		    def operator>(num : short)  := (value>num.value);
		       ^

0 [0x0]: line: 114 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>[118] params(1) in file: lib\support\0.2.805/primitives.sharp:115:8: note:  
		    def operator>(num : uchar)  := (value>num.value);
		       ^

0 [0x0]: line: 115 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>[119] params(1) in file: lib\support\0.2.805/primitives.sharp:116:8: note:  
		    def operator>(num : char)   := (value>num.value);
		       ^

0 [0x0]: line: 116 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>[120] params(1) in file: lib\support\0.2.805/primitives.sharp:117:8: note:  
		    def operator>(num : byte)   := (value>num.value);
		       ^

0 [0x0]: line: 117 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>[121] params(1) in file: lib\support\0.2.805/primitives.sharp:118:8: note:  
		    def operator>(num : bool)   := (value>num.value);
		       ^

0 [0x0]: line: 118 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>[122] params(1) in file: lib\support\0.2.805/primitives.sharp:119:8: note:  
		    def operator>(num : var)    := (value>num);
		       ^

0 [0x0]: line: 119 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint64>.operator<=[123] params(1) in file: lib\support\0.2.805/primitives.sharp:121:8: note:  
		    def operator<=(num : ulong)  := (value>=num.value);
		       ^

0 [0x0]: line: 121 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<=[124] params(1) in file: lib\support\0.2.805/primitives.sharp:122:8: note:  
		    def operator<=(num : long)   := (value>=num.value);
		       ^

0 [0x0]: line: 122 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<=[125] params(1) in file: lib\support\0.2.805/primitives.sharp:123:8: note:  
		    def operator<=(num : uint)   := (value>=num.value);
		       ^

0 [0x0]: line: 123 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<=[126] params(1) in file: lib\support\0.2.805/primitives.sharp:124:8: note:  
		    def operator<=(num : int)    := (value>=num.value);
		       ^

0 [0x0]: line: 124 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<=[127] params(1) in file: lib\support\0.2.805/primitives.sharp:125:8: note:  
		    def operator<=(num : ushort) := (value>=num.value);
		       ^

0 [0x0]: line: 125 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<=[128] params(1) in file: lib\support\0.2.805/primitives.sharp:126:8: note:  
		    def operator<=(num : short)  := (value>=num.value);
		       ^

0 [0x0]: line: 126 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<=[129] params(1) in file: lib\support\0.2.805/primitives.sharp:127:8: note:  
		    def operator<=(num : uchar)  := (value>=num.value);
		       ^

0 [0x0]: line: 127 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<=[130] params(1) in file: lib\support\0.2.805/primitives.sharp:128:8: note:  
		    def operator<=(num : char)   := (value>=num.value);
		       ^

0 [0x0]: line: 128 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<=[131] params(1) in file: lib\support\0.2.805/primitives.sharp:129:8: note:  
		    def operator<=(num : byte)   := (value>=num.value);
		       ^

0 [0x0]: line: 129 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<=[132] params(1) in file: lib\support\0.2.805/primitives.sharp:130:8: note:  
		    def operator<=(num : bool)   := (value>=num.value);
		       ^

0 [0x0]: line: 130 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<=[133] params(1) in file: lib\support\0.2.805/primitives.sharp:131:8: note:  
		    def operator<=(num : var)    := (value>=num);
		       ^

0 [0x0]: line: 131 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gte ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint64>.operator**[134] params(1) in file: lib\support\0.2.805/primitives.sharp:133:8: note:  
		    def operator**(num : ulong)  := (value**num.value);
		       ^

0 [0x0]: line: 133 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator**[135] params(1) in file: lib\support\0.2.805/primitives.sharp:134:8: note:  
		    def operator**(num : long)   := (value**num.value);
		       ^

0 [0x0]: line: 134 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator**[136] params(1) in file: lib\support\0.2.805/primitives.sharp:135:8: note:  
		    def operator**(num : uint)   := (value**num.value);
		       ^

0 [0x0]: line: 135 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator**[137] params(1) in file: lib\support\0.2.805/primitives.sharp:136:8: note:  
		    def operator**(num : int)    := (value**num.value);
		       ^

0 [0x0]: line: 136 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator**[138] params(1) in file: lib\support\0.2.805/primitives.sharp:137:8: note:  
		    def operator**(num : ushort) := (value**num.value);
		       ^

0 [0x0]: line: 137 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator**[139] params(1) in file: lib\support\0.2.805/primitives.sharp:138:8: note:  
		    def operator**(num : short)  := (value**num.value);
		       ^

0 [0x0]: line: 138 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator**[140] params(1) in file: lib\support\0.2.805/primitives.sharp:139:8: note:  
		    def operator**(num : uchar)  := (value**num.value);
		       ^

0 [0x0]: line: 139 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator**[141] params(1) in file: lib\support\0.2.805/primitives.sharp:140:8: note:  
		    def operator**(num : char)   := (value**num.value);
		       ^

0 [0x0]: line: 140 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator**[142] params(1) in file: lib\support\0.2.805/primitives.sharp:141:8: note:  
		    def operator**(num : byte)   := (value**num.value);
		       ^

0 [0x0]: line: 141 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator**[143] params(1) in file: lib\support\0.2.805/primitives.sharp:142:8: note:  
		    def operator**(num : bool)   := (value**num.value);
		       ^

0 [0x0]: line: 142 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator**[144] params(1) in file: lib\support\0.2.805/primitives.sharp:143:8: note:  
		    def operator**(num : var)    := (value**num);
		       ^

0 [0x0]: line: 143 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           exp ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint64>.operator<<[145] params(1) in file: lib\support\0.2.805/primitives.sharp:145:8: note:  
		    def operator<<(num : ulong)  := (value<<num.value);
		       ^

0 [0x0]: line: 145 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<<[146] params(1) in file: lib\support\0.2.805/primitives.sharp:146:8: note:  
		    def operator<<(num : long)   := (value<<num.value);
		       ^

0 [0x0]: line: 146 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<<[147] params(1) in file: lib\support\0.2.805/primitives.sharp:147:8: note:  
		    def operator<<(num : uint)   := (value<<num.value);
		       ^

0 [0x0]: line: 147 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<<[148] params(1) in file: lib\support\0.2.805/primitives.sharp:148:8: note:  
		    def operator<<(num : int)    := (value<<num.value);
		       ^

0 [0x0]: line: 148 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<<[149] params(1) in file: lib\support\0.2.805/primitives.sharp:149:8: note:  
		    def operator<<(num : ushort) := (value<<num.value);
		       ^

0 [0x0]: line: 149 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<<[150] params(1) in file: lib\support\0.2.805/primitives.sharp:150:8: note:  
		    def operator<<(num : short)  := (value<<num.value);
		       ^

0 [0x0]: line: 150 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<<[151] params(1) in file: lib\support\0.2.805/primitives.sharp:151:8: note:  
		    def operator<<(num : uchar)  := (value<<num.value);
		       ^

0 [0x0]: line: 151 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<<[152] params(1) in file: lib\support\0.2.805/primitives.sharp:152:8: note:  
		    def operator<<(num : char)   := (value<<num.value);
		       ^

0 [0x0]: line: 152 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<<[153] params(1) in file: lib\support\0.2.805/primitives.sharp:153:8: note:  
		    def operator<<(num : byte)   := (value<<num.value);
		       ^

0 [0x0]: line: 153 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<<[154] params(1) in file: lib\support\0.2.805/primitives.sharp:154:8: note:  
		    def operator<<(num : bool)   := (value<<num.value);
		       ^

0 [0x0]: line: 154 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<<[155] params(1) in file: lib\support\0.2.805/primitives.sharp:155:8: note:  
		    def operator<<(num : var)    := (value<<num);
		       ^

0 [0x0]: line: 155 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shl ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint64>.operator>>[156] params(1) in file: lib\support\0.2.805/primitives.sharp:157:8: note:  
		    def operator>>(num : ulong)  := (value>>num.value);
		       ^

0 [0x0]: line: 157 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>>[157] params(1) in file: lib\support\0.2.805/primitives.sharp:158:8: note:  
		    def operator>>(num : long)   := (value>>num.value);
		       ^

0 [0x0]: line: 158 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>>[158] params(1) in file: lib\support\0.2.805/primitives.sharp:159:8: note:  
		    def operator>>(num : uint)   := (value>>num.value);
		       ^

0 [0x0]: line: 159 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>>[159] params(1) in file: lib\support\0.2.805/primitives.sharp:160:8: note:  
		    def operator>>(num : int)    := (value>>num.value);
		       ^

0 [0x0]: line: 160 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>>[160] params(1) in file: lib\support\0.2.805/primitives.sharp:161:8: note:  
		    def operator>>(num : ushort) := (value>>num.value);
		       ^

0 [0x0]: line: 161 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>>[161] params(1) in file: lib\support\0.2.805/primitives.sharp:162:8: note:  
		    def operator>>(num : short)  := (value>>num.value);
		       ^

0 [0x0]: line: 162 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>>[162] params(1) in file: lib\support\0.2.805/primitives.sharp:163:8: note:  
		    def operator>>(num : uchar)  := (value>>num.value);
		       ^

0 [0x0]: line: 163 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>>[163] params(1) in file: lib\support\0.2.805/primitives.sharp:164:8: note:  
		    def operator>>(num : char)   := (value>>num.value);
		       ^

0 [0x0]: line: 164 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>>[164] params(1) in file: lib\support\0.2.805/primitives.sharp:165:8: note:  
		    def operator>>(num : byte)   := (value>>num.value);
		       ^

0 [0x0]: line: 165 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>>[165] params(1) in file: lib\support\0.2.805/primitives.sharp:166:8: note:  
		    def operator>>(num : bool)   := (value>>num.value);
		       ^

0 [0x0]: line: 166 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>>[166] params(1) in file: lib\support\0.2.805/primitives.sharp:167:8: note:  
		    def operator>>(num : var)    := (value>>num);
		       ^

0 [0x0]: line: 167 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shr ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint64>.operator^[167] params(1) in file: lib\support\0.2.805/primitives.sharp:169:8: note:  
		    def operator^(num : ulong)  := (value^num.value);
		       ^

0 [0x0]: line: 169 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator^[168] params(1) in file: lib\support\0.2.805/primitives.sharp:170:8: note:  
		    def operator^(num : long)   := (value^num.value);
		       ^

0 [0x0]: line: 170 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator^[169] params(1) in file: lib\support\0.2.805/primitives.sharp:171:8: note:  
		    def operator^(num : uint)   := (value^num.value);
		       ^

0 [0x0]: line: 171 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator^[170] params(1) in file: lib\support\0.2.805/primitives.sharp:172:8: note:  
		    def operator^(num : int)    := (value^num.value);
		       ^

0 [0x0]: line: 172 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator^[171] params(1) in file: lib\support\0.2.805/primitives.sharp:173:8: note:  
		    def operator^(num : ushort) := (value^num.value);
		       ^

0 [0x0]: line: 173 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator^[172] params(1) in file: lib\support\0.2.805/primitives.sharp:174:8: note:  
		    def operator^(num : short)  := (value^num.value);
		       ^

0 [0x0]: line: 174 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator^[173] params(1) in file: lib\support\0.2.805/primitives.sharp:175:8: note:  
		    def operator^(num : uchar)  := (value^num.value);
		       ^

0 [0x0]: line: 175 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator^[174] params(1) in file: lib\support\0.2.805/primitives.sharp:176:8: note:  
		    def operator^(num : char)   := (value^num.value);
		       ^

0 [0x0]: line: 176 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator^[175] params(1) in file: lib\support\0.2.805/primitives.sharp:177:8: note:  
		    def operator^(num : byte)   := (value^num.value);
		       ^

0 [0x0]: line: 177 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator^[176] params(1) in file: lib\support\0.2.805/primitives.sharp:178:8: note:  
		    def operator^(num : bool)   := (value^num.value);
		       ^

0 [0x0]: line: 178 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator^[177] params(1) in file: lib\support\0.2.805/primitives.sharp:179:8: note:  
		    def operator^(num : var)    := (value^num);
		       ^

0 [0x0]: line: 179 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           xor ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint64>.operator&[178] params(1) in file: lib\support\0.2.805/primitives.sharp:181:8: note:  
		    def operator&(num : ulong)  := (value&num.value);
		       ^

0 [0x0]: line: 181 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator&[179] params(1) in file: lib\support\0.2.805/primitives.sharp:182:8: note:  
		    def operator&(num : long)   := (value&num.value);
		       ^

0 [0x0]: line: 182 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator&[180] params(1) in file: lib\support\0.2.805/primitives.sharp:183:8: note:  
		    def operator&(num : uint)   := (value&num.value);
		       ^

0 [0x0]: line: 183 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator&[181] params(1) in file: lib\support\0.2.805/primitives.sharp:184:8: note:  
		    def operator&(num : int)    := (value&num.value);
		       ^

0 [0x0]: line: 184 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator&[182] params(1) in file: lib\support\0.2.805/primitives.sharp:185:8: note:  
		    def operator&(num : ushort) := (value&num.value);
		       ^

0 [0x0]: line: 185 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator&[183] params(1) in file: lib\support\0.2.805/primitives.sharp:186:8: note:  
		    def operator&(num : short)  := (value&num.value);
		       ^

0 [0x0]: line: 186 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator&[184] params(1) in file: lib\support\0.2.805/primitives.sharp:187:8: note:  
		    def operator&(num : uchar)  := (value&num.value);
		       ^

0 [0x0]: line: 187 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator&[185] params(1) in file: lib\support\0.2.805/primitives.sharp:188:8: note:  
		    def operator&(num : char)   := (value&num.value);
		       ^

0 [0x0]: line: 188 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator&[186] params(1) in file: lib\support\0.2.805/primitives.sharp:189:8: note:  
		    def operator&(num : byte)   := (value&num.value);
		       ^

0 [0x0]: line: 189 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator&[187] params(1) in file: lib\support\0.2.805/primitives.sharp:190:8: note:  
		    def operator&(num : bool)   := (value&num.value);
		       ^

0 [0x0]: line: 190 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator&[188] params(1) in file: lib\support\0.2.805/primitives.sharp:191:8: note:  
		    def operator&(num : var)    := (value&num);
		       ^

0 [0x0]: line: 191 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           uand ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint64>.operator|[189] params(1) in file: lib\support\0.2.805/primitives.sharp:193:8: note:  
		    def operator|(num : ulong)  := (value|num.value);
		       ^

0 [0x0]: line: 193 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator|[190] params(1) in file: lib\support\0.2.805/primitives.sharp:194:8: note:  
		    def operator|(num : long)   := (value|num.value);
		       ^

0 [0x0]: line: 194 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator|[191] params(1) in file: lib\support\0.2.805/primitives.sharp:195:8: note:  
		    def operator|(num : uint)   := (value|num.value);
		       ^

0 [0x0]: line: 195 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator|[192] params(1) in file: lib\support\0.2.805/primitives.sharp:196:8: note:  
		    def operator|(num : int)    := (value|num.value);
		       ^

0 [0x0]: line: 196 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator|[193] params(1) in file: lib\support\0.2.805/primitives.sharp:197:8: note:  
		    def operator|(num : ushort) := (value|num.value);
		       ^

0 [0x0]: line: 197 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator|[194] params(1) in file: lib\support\0.2.805/primitives.sharp:198:8: note:  
		    def operator|(num : short)  := (value|num.value);
		       ^

0 [0x0]: line: 198 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator|[195] params(1) in file: lib\support\0.2.805/primitives.sharp:199:8: note:  
		    def operator|(num : uchar)  := (value|num.value);
		       ^

0 [0x0]: line: 199 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator|[196] params(1) in file: lib\support\0.2.805/primitives.sharp:200:8: note:  
		    def operator|(num : char)   := (value|num.value);
		       ^

0 [0x0]: line: 200 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator|[197] params(1) in file: lib\support\0.2.805/primitives.sharp:201:8: note:  
		    def operator|(num : byte)   := (value|num.value);
		       ^

0 [0x0]: line: 201 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator|[198] params(1) in file: lib\support\0.2.805/primitives.sharp:202:8: note:  
		    def operator|(num : bool)   := (value|num.value);
		       ^

0 [0x0]: line: 202 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator|[199] params(1) in file: lib\support\0.2.805/primitives.sharp:203:8: note:  
		    def operator|(num : var)    := (value|num);
		       ^

0 [0x0]: line: 203 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           or ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint64>.operator!=[200] params(1) in file: lib\support\0.2.805/primitives.sharp:205:8: note:  
		    def operator!=(num : var) := value!=num;
		       ^

0 [0x0]: line: 205 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           tne ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint64>.operator==[201] params(1) in file: lib\support\0.2.805/primitives.sharp:206:8: note:  
		    def operator==(num : var) := value==num;
		       ^

0 [0x0]: line: 206 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           test ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint64>.operator=[202] params(1) in file: lib\support\0.2.805/primitives.sharp:207:8: note:  
		    def operator=(num : var) := value=num;
		       ^

0 [0x0]: line: 207 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           loadval ebx   
5 [0x5]:           movu64 ebx, ebx   
6 [0x6]:           movi #0, adx   
8 [0x8]:           rmov adx, ebx   
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std#integer<_uint64>.to_string[203] params(0) in file: lib\support\0.2.805/primitives.sharp:209:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 210 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           newstr @22 //    
3 [0x3]:           call @2935 // <std#string.string>   
4 [0x4]:           movl 0   
5 [0x5]:           movn #0   
7 [0x7]:           movi #0, adx   
9 [0x9]:           iaload ebx, adx   
10 [0xa]:           rstore ebx   
11 [0xb]:           call @2975 // <std#string.operator+>   
12 [0xc]:           popobj2    
13 [0xd]:           returnobj   
14 [0xe]:           ret   


function: std#integer<_uint64>.parse[204] params(1) in file: lib\support\0.2.805/primitives.sharp:214:15: note:  
		    static def parse(s: string) : native_type {
		              ^

0 [0x0]: line: 215 istorel 0, fp+1   
2 [0x2]: line: 216 movi #0, ebx   
4 [0x4]:           movu64 ebx, ebx   
5 [0x5]:           smovr_2 ebx, fp+2   
6 [0x6]: line: 217 istorel 0, fp+3   
8 [0x8]: line: 218 pushl 0   
9 [0x9]:           call @2976 // <std#string.size>   
10 [0xa]:           ipopl 4   
11 [0xb]: line: 220 pushl 0   
12 [0xc]:           istore 0   
14 [0xe]:           call @2957 // <std#string.at>   
15 [0xf]:           loadval ebx   
16 [0x10]:           rstore ebx   
17 [0x11]:           movi #45, ebx   
19 [0x13]:           loadval ecx   
20 [0x14]:           test ecx, ebx   
21 [0x15]:           jne 26   
22 [0x16]: line: 221 istorel 1, fp+3   
24 [0x18]: line: 222 istorel 1, fp+1   
26 [0x1a]:           nop   
27 [0x1b]: line: 225 ipushl #1   
28 [0x1c]:           loadl ebx, fp+4   
29 [0x1d]:           loadval ecx   
30 [0x1e]:           lt ecx, ebx   
31 [0x1f]:           movr ebx, cmt   
32 [0x20]:           movr cmt, ebx   
33 [0x21]:           jne 79   
34 [0x22]: line: 226 pushl 0   
35 [0x23]:           ipushl #1   
36 [0x24]:           call @2957 // <std#string.at>   
37 [0x25]:           call @2724 // <std#char.is_digit>   
38 [0x26]:           loadval ebx   
39 [0x27]:           not ebx, ebx   
40 [0x28]:           movr cmt, ebx   
41 [0x29]:           jne 54   
42 [0x2a]: line: 227 new_class @4 // std#illegal_argument_exception   
43 [0x2b]:           dup    
44 [0x2c]:           new_class @64 // std#string   
45 [0x2d]:           dup    
46 [0x2e]:           newstr @137 // illegal char in string:    
47 [0x2f]:           call @2935 // <std#string.string>   
48 [0x30]:           pushl 0   
49 [0x31]:           ipushl #1   
50 [0x32]:           call @2957 // <std#string.at>   
51 [0x33]:           call @2968 // <std#string.operator+>   
52 [0x34]:           call @1630 // <std#illegal_argument_exception.illegal_argument_exception>   
53 [0x35]:           throw    
54 [0x36]:           nop   
55 [0x37]: line: 231 movi #10, ebx   
57 [0x39]:           loadl ecx, fp+2   
58 [0x3a]:           mul ecx, ebx -> ebx   
59 [0x3b]:           movu64 ebx, ebx   
60 [0x3c]:           smovr_2 ebx, fp+2   
61 [0x3d]: line: 232 pushl 0   
62 [0x3e]:           loadl ebx, fp+1   
63 [0x3f]:           movr egx, ebx   
64 [0x40]:           inc ebx   
65 [0x41]:           smovr_2 ebx, fp+1   
66 [0x42]:           rstore egx   
67 [0x43]:           call @2957 // <std#string.at>   
68 [0x44]:           loadval ebx   
69 [0x45]:           rstore ebx   
70 [0x46]:           movi #48, ebx   
72 [0x48]:           loadval ecx   
73 [0x49]:           sub ecx, ebx -> ebx   
74 [0x4a]:           loadl ecx, fp+2   
75 [0x4b]:           add ecx, ebx -> ebx   
76 [0x4c]:           movu64 ebx, ebx   
77 [0x4d]:           smovr_2 ebx, fp+2   
78 [0x4e]:           jmp @27   
79 [0x4f]: line: 234 loadl ebx, fp+3   
80 [0x50]:           movr cmt, ebx   
81 [0x51]:           jne 86   
82 [0x52]: line: 235 loadl ebx, fp+2   
83 [0x53]:           neg ebx, ebx   
84 [0x54]:           movu64 ebx, ebx   
85 [0x55]:           smovr_2 ebx, fp+2   
86 [0x56]:           nop   
87 [0x57]: line: 236 loadl ebx, fp+2   
88 [0x58]:           return_val ebx   
89 [0x59]:           ret   


function: std#integer<_uint64>.to_ulong[205] params(0) in file: lib\support\0.2.805/primitives.sharp:239:8: note:  
		    def to_ulong() := new ulong { value };
		       ^

0 [0x0]: line: 239 new_class @44 // std#ulong   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu64 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint64>.to_long[206] params(0) in file: lib\support\0.2.805/primitives.sharp:240:8: note:  
		    def to_long() := new long { value };
		       ^

0 [0x0]: line: 240 new_class @45 // std#long   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov64 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint64>.to_uint[207] params(0) in file: lib\support\0.2.805/primitives.sharp:241:8: note:  
		    def to_uint() := new uint { value };
		       ^

0 [0x0]: line: 241 new_class @46 // std#uint   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu32 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint64>.to_int[208] params(0) in file: lib\support\0.2.805/primitives.sharp:242:8: note:  
		    def to_int() := new int { value };
		       ^

0 [0x0]: line: 242 new_class @47 // std#int   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov32 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint64>.to_ushort[209] params(0) in file: lib\support\0.2.805/primitives.sharp:243:8: note:  
		    def to_ushort() := new ushort { value };
		       ^

0 [0x0]: line: 243 new_class @48 // std#ushort   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu16 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint64>.to_short[210] params(0) in file: lib\support\0.2.805/primitives.sharp:244:8: note:  
		    def to_short() := new short { value };
		       ^

0 [0x0]: line: 244 new_class @49 // std#short   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov16 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint64>.to_uchar[211] params(0) in file: lib\support\0.2.805/primitives.sharp:245:8: note:  
		    def to_uchar() := new uchar { value };
		       ^

0 [0x0]: line: 245 new_class @50 // std#uchar   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint64>.to_char[212] params(0) in file: lib\support\0.2.805/primitives.sharp:246:8: note:  
		    def to_char() := new char { value };
		       ^

0 [0x0]: line: 246 new_class @51 // std#char   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint64>.to_byte[213] params(0) in file: lib\support\0.2.805/primitives.sharp:247:8: note:  
		    def to_byte() := new byte { value };
		       ^

0 [0x0]: line: 247 new_class @52 // std#byte   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint64>.to_bool[214] params(0) in file: lib\support\0.2.805/primitives.sharp:248:8: note:  
		    def to_bool() := new bool { value };
		       ^

0 [0x0]: line: 248 new_class @53 // std#bool   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint64>.get_value[215] params(0) in file: lib\support\0.2.805/primitives.sharp:250:8: note:  
		    def get_value() := value;
		       ^

0 [0x0]: line: 250 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


constructor: std#integer<_uint64>.integer[216] params(0) in file: lib\support\0.2.805/primitives.sharp:5:13: note:  
		public class integer<native_type> {
		            ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#integer<_int64>.integer[217] params(1) in file: lib\support\0.2.805/primitives.sharp:8:12: note:  
		    integer(initial_val : var) {
		           ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 9 ipushl #1   
2 [0x2]:         movl 0   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         mov64 ebx, ebx   
7 [0x7]:         movi #0, adx   
9 [0x9]:         rmov adx, ebx   
10 [0xa]:         ret   


function: std#integer<_int64>.hash[218] params(0) in file: lib\support\0.2.805/primitives.sharp:12:8: note:  
		    def hash() : long {
		       ^

0 [0x0]: line: 13 new_class @45 // std#long   
1 [0x1]:          dup    
2 [0x2]:          movl 0   
3 [0x3]:          movn #0   
5 [0x5]:          movi #0, adx   
7 [0x7]:          iaload ebx, adx   
8 [0x8]:          rstore ebx   
9 [0x9]:          call @2077 // <std#long.long>   
10 [0xa]:          popobj2    
11 [0xb]:          returnobj   
12 [0xc]:          ret   


overload function: std#integer<_int64>.operator!=[219] params(1) in file: lib\support\0.2.805/primitives.sharp:16:8: note:  
		    def operator!=(num : ulong) := (value!=num.value);
		       ^

0 [0x0]: line: 16 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator==[220] params(1) in file: lib\support\0.2.805/primitives.sharp:17:8: note:  
		    def operator==(num : ulong) := (value==num.value);
		       ^

0 [0x0]: line: 17 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator!=[221] params(1) in file: lib\support\0.2.805/primitives.sharp:18:8: note:  
		    def operator!=(num : long) := (value!=num.value);
		       ^

0 [0x0]: line: 18 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator==[222] params(1) in file: lib\support\0.2.805/primitives.sharp:19:8: note:  
		    def operator==(num : long) := (value==num.value);
		       ^

0 [0x0]: line: 19 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator!=[223] params(1) in file: lib\support\0.2.805/primitives.sharp:20:8: note:  
		    def operator!=(num : uint) := (value!=num.value);
		       ^

0 [0x0]: line: 20 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator==[224] params(1) in file: lib\support\0.2.805/primitives.sharp:21:8: note:  
		    def operator==(num : uint) := (value==num.value);
		       ^

0 [0x0]: line: 21 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator!=[225] params(1) in file: lib\support\0.2.805/primitives.sharp:22:8: note:  
		    def operator!=(num : int) := (value!=num.value);
		       ^

0 [0x0]: line: 22 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator==[226] params(1) in file: lib\support\0.2.805/primitives.sharp:23:8: note:  
		    def operator==(num : int) := (value==num.value);
		       ^

0 [0x0]: line: 23 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator!=[227] params(1) in file: lib\support\0.2.805/primitives.sharp:24:8: note:  
		    def operator!=(num : ushort) := (value!=num.value);
		       ^

0 [0x0]: line: 24 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator==[228] params(1) in file: lib\support\0.2.805/primitives.sharp:25:8: note:  
		    def operator==(num : ushort) := (value==num.value);
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator!=[229] params(1) in file: lib\support\0.2.805/primitives.sharp:26:8: note:  
		    def operator!=(num : short) := (value!=num.value);
		       ^

0 [0x0]: line: 26 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator==[230] params(1) in file: lib\support\0.2.805/primitives.sharp:27:8: note:  
		    def operator==(num : short) := (value==num.value);
		       ^

0 [0x0]: line: 27 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator!=[231] params(1) in file: lib\support\0.2.805/primitives.sharp:28:8: note:  
		    def operator!=(num : uchar) := (value!=num.value);
		       ^

0 [0x0]: line: 28 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator==[232] params(1) in file: lib\support\0.2.805/primitives.sharp:29:8: note:  
		    def operator==(num : uchar) := (value==num.value);
		       ^

0 [0x0]: line: 29 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator!=[233] params(1) in file: lib\support\0.2.805/primitives.sharp:30:8: note:  
		    def operator!=(num : char) := (value!=num.value);
		       ^

0 [0x0]: line: 30 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator==[234] params(1) in file: lib\support\0.2.805/primitives.sharp:31:8: note:  
		    def operator==(num : char) := (value==num.value);
		       ^

0 [0x0]: line: 31 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator!=[235] params(1) in file: lib\support\0.2.805/primitives.sharp:32:8: note:  
		    def operator!=(num : byte) := (value!=num.value);
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator==[236] params(1) in file: lib\support\0.2.805/primitives.sharp:33:8: note:  
		    def operator==(num : byte) := (value==num.value);
		       ^

0 [0x0]: line: 33 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator!=[237] params(1) in file: lib\support\0.2.805/primitives.sharp:34:8: note:  
		    def operator!=(num : bool) := (value!=num.value);
		       ^

0 [0x0]: line: 34 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator==[238] params(1) in file: lib\support\0.2.805/primitives.sharp:35:8: note:  
		    def operator==(num : bool) := (value==num.value);
		       ^

0 [0x0]: line: 35 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator+[239] params(1) in file: lib\support\0.2.805/primitives.sharp:37:8: note:  
		    def operator+(num : ulong)  := (value+num.value);
		       ^

0 [0x0]: line: 37 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator+[240] params(1) in file: lib\support\0.2.805/primitives.sharp:38:8: note:  
		    def operator+(num : long)   := (value+num.value);
		       ^

0 [0x0]: line: 38 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator+[241] params(1) in file: lib\support\0.2.805/primitives.sharp:39:8: note:  
		    def operator+(num : uint)   := (value+num.value);
		       ^

0 [0x0]: line: 39 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator+[242] params(1) in file: lib\support\0.2.805/primitives.sharp:40:8: note:  
		    def operator+(num : int)    := (value+num.value);
		       ^

0 [0x0]: line: 40 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator+[243] params(1) in file: lib\support\0.2.805/primitives.sharp:41:8: note:  
		    def operator+(num : ushort) := (value+num.value);
		       ^

0 [0x0]: line: 41 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator+[244] params(1) in file: lib\support\0.2.805/primitives.sharp:42:8: note:  
		    def operator+(num : short)  := (value+num.value);
		       ^

0 [0x0]: line: 42 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator+[245] params(1) in file: lib\support\0.2.805/primitives.sharp:43:8: note:  
		    def operator+(num : uchar)  := (value+num.value);
		       ^

0 [0x0]: line: 43 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator+[246] params(1) in file: lib\support\0.2.805/primitives.sharp:44:8: note:  
		    def operator+(num : char)   := (value+num.value);
		       ^

0 [0x0]: line: 44 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator+[247] params(1) in file: lib\support\0.2.805/primitives.sharp:45:8: note:  
		    def operator+(num : byte)   := (value+num.value);
		       ^

0 [0x0]: line: 45 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator+[248] params(1) in file: lib\support\0.2.805/primitives.sharp:46:8: note:  
		    def operator+(num : bool)   := (value+num.value);
		       ^

0 [0x0]: line: 46 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator+[249] params(1) in file: lib\support\0.2.805/primitives.sharp:47:8: note:  
		    def operator+(num : var)    := (value+num);
		       ^

0 [0x0]: line: 47 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          add ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int64>.operator-[250] params(1) in file: lib\support\0.2.805/primitives.sharp:49:8: note:  
		    def operator-(num : ulong)  := (value-num.value);
		       ^

0 [0x0]: line: 49 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator-[251] params(1) in file: lib\support\0.2.805/primitives.sharp:50:8: note:  
		    def operator-(num : long)   := (value-num.value);
		       ^

0 [0x0]: line: 50 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator-[252] params(1) in file: lib\support\0.2.805/primitives.sharp:51:8: note:  
		    def operator-(num : uint)   := (value-num.value);
		       ^

0 [0x0]: line: 51 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator-[253] params(1) in file: lib\support\0.2.805/primitives.sharp:52:8: note:  
		    def operator-(num : int)    := (value-num.value);
		       ^

0 [0x0]: line: 52 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator-[254] params(1) in file: lib\support\0.2.805/primitives.sharp:53:8: note:  
		    def operator-(num : ushort) := (value-num.value);
		       ^

0 [0x0]: line: 53 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator-[255] params(1) in file: lib\support\0.2.805/primitives.sharp:54:8: note:  
		    def operator-(num : short)  := (value-num.value);
		       ^

0 [0x0]: line: 54 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator-[256] params(1) in file: lib\support\0.2.805/primitives.sharp:55:8: note:  
		    def operator-(num : uchar)  := (value-num.value);
		       ^

0 [0x0]: line: 55 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator-[257] params(1) in file: lib\support\0.2.805/primitives.sharp:56:8: note:  
		    def operator-(num : char)   := (value-num.value);
		       ^

0 [0x0]: line: 56 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator-[258] params(1) in file: lib\support\0.2.805/primitives.sharp:57:8: note:  
		    def operator-(num : byte)   := (value-num.value);
		       ^

0 [0x0]: line: 57 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator-[259] params(1) in file: lib\support\0.2.805/primitives.sharp:58:8: note:  
		    def operator-(num : bool)   := (value-num.value);
		       ^

0 [0x0]: line: 58 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator-[260] params(1) in file: lib\support\0.2.805/primitives.sharp:59:8: note:  
		    def operator-(num : var)    := (value-num);
		       ^

0 [0x0]: line: 59 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          sub ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int64>.operator*[261] params(1) in file: lib\support\0.2.805/primitives.sharp:61:8: note:  
		    def operator*(num : ulong)  := (value*num.value);
		       ^

0 [0x0]: line: 61 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator*[262] params(1) in file: lib\support\0.2.805/primitives.sharp:62:8: note:  
		    def operator*(num : long)   := (value*num.value);
		       ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator*[263] params(1) in file: lib\support\0.2.805/primitives.sharp:63:8: note:  
		    def operator*(num : uint)   := (value*num.value);
		       ^

0 [0x0]: line: 63 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator*[264] params(1) in file: lib\support\0.2.805/primitives.sharp:64:8: note:  
		    def operator*(num : int)    := (value*num.value);
		       ^

0 [0x0]: line: 64 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator*[265] params(1) in file: lib\support\0.2.805/primitives.sharp:65:8: note:  
		    def operator*(num : ushort) := (value*num.value);
		       ^

0 [0x0]: line: 65 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator*[266] params(1) in file: lib\support\0.2.805/primitives.sharp:66:8: note:  
		    def operator*(num : short)  := (value*num.value);
		       ^

0 [0x0]: line: 66 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator*[267] params(1) in file: lib\support\0.2.805/primitives.sharp:67:8: note:  
		    def operator*(num : uchar)  := (value*num.value);
		       ^

0 [0x0]: line: 67 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator*[268] params(1) in file: lib\support\0.2.805/primitives.sharp:68:8: note:  
		    def operator*(num : char)   := (value*num.value);
		       ^

0 [0x0]: line: 68 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator*[269] params(1) in file: lib\support\0.2.805/primitives.sharp:69:8: note:  
		    def operator*(num : byte)   := (value*num.value);
		       ^

0 [0x0]: line: 69 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator*[270] params(1) in file: lib\support\0.2.805/primitives.sharp:70:8: note:  
		    def operator*(num : bool)   := (value*num.value);
		       ^

0 [0x0]: line: 70 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator*[271] params(1) in file: lib\support\0.2.805/primitives.sharp:71:8: note:  
		    def operator*(num : var)    := (value*num);
		       ^

0 [0x0]: line: 71 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          mul ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int64>.operator/[272] params(1) in file: lib\support\0.2.805/primitives.sharp:73:8: note:  
		    def operator/(num : ulong)  := (value/num.value);
		       ^

0 [0x0]: line: 73 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator/[273] params(1) in file: lib\support\0.2.805/primitives.sharp:74:8: note:  
		    def operator/(num : long)   := (value/num.value);
		       ^

0 [0x0]: line: 74 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator/[274] params(1) in file: lib\support\0.2.805/primitives.sharp:75:8: note:  
		    def operator/(num : uint)   := (value/num.value);
		       ^

0 [0x0]: line: 75 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator/[275] params(1) in file: lib\support\0.2.805/primitives.sharp:76:8: note:  
		    def operator/(num : int)    := (value/num.value);
		       ^

0 [0x0]: line: 76 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator/[276] params(1) in file: lib\support\0.2.805/primitives.sharp:77:8: note:  
		    def operator/(num : ushort) := (value/num.value);
		       ^

0 [0x0]: line: 77 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator/[277] params(1) in file: lib\support\0.2.805/primitives.sharp:78:8: note:  
		    def operator/(num : short)  := (value/num.value);
		       ^

0 [0x0]: line: 78 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator/[278] params(1) in file: lib\support\0.2.805/primitives.sharp:79:8: note:  
		    def operator/(num : uchar)  := (value/num.value);
		       ^

0 [0x0]: line: 79 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator/[279] params(1) in file: lib\support\0.2.805/primitives.sharp:80:8: note:  
		    def operator/(num : char)   := (value/num.value);
		       ^

0 [0x0]: line: 80 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator/[280] params(1) in file: lib\support\0.2.805/primitives.sharp:81:8: note:  
		    def operator/(num : byte)   := (value/num.value);
		       ^

0 [0x0]: line: 81 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator/[281] params(1) in file: lib\support\0.2.805/primitives.sharp:82:8: note:  
		    def operator/(num : bool)   := (value/num.value);
		       ^

0 [0x0]: line: 82 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator/[282] params(1) in file: lib\support\0.2.805/primitives.sharp:83:8: note:  
		    def operator/(num : var)    := (value/num);
		       ^

0 [0x0]: line: 83 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          div ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int64>.operator%[283] params(1) in file: lib\support\0.2.805/primitives.sharp:85:8: note:  
		    def operator%(num : ulong)  := (value%num.value);
		       ^

0 [0x0]: line: 85 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator%[284] params(1) in file: lib\support\0.2.805/primitives.sharp:86:8: note:  
		    def operator%(num : long)   := (value%num.value);
		       ^

0 [0x0]: line: 86 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator%[285] params(1) in file: lib\support\0.2.805/primitives.sharp:87:8: note:  
		    def operator%(num : uint)   := (value%num.value);
		       ^

0 [0x0]: line: 87 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator%[286] params(1) in file: lib\support\0.2.805/primitives.sharp:88:8: note:  
		    def operator%(num : int)    := (value%num.value);
		       ^

0 [0x0]: line: 88 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator%[287] params(1) in file: lib\support\0.2.805/primitives.sharp:89:8: note:  
		    def operator%(num : ushort) := (value%num.value);
		       ^

0 [0x0]: line: 89 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator%[288] params(1) in file: lib\support\0.2.805/primitives.sharp:90:8: note:  
		    def operator%(num : short)  := (value%num.value);
		       ^

0 [0x0]: line: 90 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator%[289] params(1) in file: lib\support\0.2.805/primitives.sharp:91:8: note:  
		    def operator%(num : uchar)  := (value%num.value);
		       ^

0 [0x0]: line: 91 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator%[290] params(1) in file: lib\support\0.2.805/primitives.sharp:92:8: note:  
		    def operator%(num : char)   := (value%num.value);
		       ^

0 [0x0]: line: 92 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator%[291] params(1) in file: lib\support\0.2.805/primitives.sharp:93:8: note:  
		    def operator%(num : byte)   := (value%num.value);
		       ^

0 [0x0]: line: 93 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator%[292] params(1) in file: lib\support\0.2.805/primitives.sharp:94:8: note:  
		    def operator%(num : bool)   := (value%num.value);
		       ^

0 [0x0]: line: 94 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator%[293] params(1) in file: lib\support\0.2.805/primitives.sharp:95:8: note:  
		    def operator%(num : var)    := (value%num);
		       ^

0 [0x0]: line: 95 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          mod ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int64>.operator<[294] params(1) in file: lib\support\0.2.805/primitives.sharp:97:8: note:  
		    def operator<(num : ulong)  := (value<num.value);
		       ^

0 [0x0]: line: 97 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator<[295] params(1) in file: lib\support\0.2.805/primitives.sharp:98:8: note:  
		    def operator<(num : long)   := (value<num.value);
		       ^

0 [0x0]: line: 98 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator<[296] params(1) in file: lib\support\0.2.805/primitives.sharp:99:8: note:  
		    def operator<(num : uint)   := (value<num.value);
		       ^

0 [0x0]: line: 99 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator<[297] params(1) in file: lib\support\0.2.805/primitives.sharp:100:8: note:  
		    def operator<(num : int)    := (value<num.value);
		       ^

0 [0x0]: line: 100 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<[298] params(1) in file: lib\support\0.2.805/primitives.sharp:101:8: note:  
		    def operator<(num : ushort) := (value<num.value);
		       ^

0 [0x0]: line: 101 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<[299] params(1) in file: lib\support\0.2.805/primitives.sharp:102:8: note:  
		    def operator<(num : short)  := (value<num.value);
		       ^

0 [0x0]: line: 102 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<[300] params(1) in file: lib\support\0.2.805/primitives.sharp:103:8: note:  
		    def operator<(num : uchar)  := (value<num.value);
		       ^

0 [0x0]: line: 103 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<[301] params(1) in file: lib\support\0.2.805/primitives.sharp:104:8: note:  
		    def operator<(num : char)   := (value<num.value);
		       ^

0 [0x0]: line: 104 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<[302] params(1) in file: lib\support\0.2.805/primitives.sharp:105:8: note:  
		    def operator<(num : byte)   := (value<num.value);
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<[303] params(1) in file: lib\support\0.2.805/primitives.sharp:106:8: note:  
		    def operator<(num : bool)   := (value<num.value);
		       ^

0 [0x0]: line: 106 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<[304] params(1) in file: lib\support\0.2.805/primitives.sharp:107:8: note:  
		    def operator<(num : var)    := (value<num);
		       ^

0 [0x0]: line: 107 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           lt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int64>.operator>[305] params(1) in file: lib\support\0.2.805/primitives.sharp:109:8: note:  
		    def operator>(num : ulong)  := (value>num.value);
		       ^

0 [0x0]: line: 109 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>[306] params(1) in file: lib\support\0.2.805/primitives.sharp:110:8: note:  
		    def operator>(num : long)   := (value>num.value);
		       ^

0 [0x0]: line: 110 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>[307] params(1) in file: lib\support\0.2.805/primitives.sharp:111:8: note:  
		    def operator>(num : uint)   := (value>num.value);
		       ^

0 [0x0]: line: 111 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>[308] params(1) in file: lib\support\0.2.805/primitives.sharp:112:8: note:  
		    def operator>(num : int)    := (value>num.value);
		       ^

0 [0x0]: line: 112 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>[309] params(1) in file: lib\support\0.2.805/primitives.sharp:113:8: note:  
		    def operator>(num : ushort) := (value>num.value);
		       ^

0 [0x0]: line: 113 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>[310] params(1) in file: lib\support\0.2.805/primitives.sharp:114:8: note:  
		    def operator>(num : short)  := (value>num.value);
		       ^

0 [0x0]: line: 114 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>[311] params(1) in file: lib\support\0.2.805/primitives.sharp:115:8: note:  
		    def operator>(num : uchar)  := (value>num.value);
		       ^

0 [0x0]: line: 115 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>[312] params(1) in file: lib\support\0.2.805/primitives.sharp:116:8: note:  
		    def operator>(num : char)   := (value>num.value);
		       ^

0 [0x0]: line: 116 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>[313] params(1) in file: lib\support\0.2.805/primitives.sharp:117:8: note:  
		    def operator>(num : byte)   := (value>num.value);
		       ^

0 [0x0]: line: 117 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>[314] params(1) in file: lib\support\0.2.805/primitives.sharp:118:8: note:  
		    def operator>(num : bool)   := (value>num.value);
		       ^

0 [0x0]: line: 118 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>[315] params(1) in file: lib\support\0.2.805/primitives.sharp:119:8: note:  
		    def operator>(num : var)    := (value>num);
		       ^

0 [0x0]: line: 119 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int64>.operator<=[316] params(1) in file: lib\support\0.2.805/primitives.sharp:121:8: note:  
		    def operator<=(num : ulong)  := (value>=num.value);
		       ^

0 [0x0]: line: 121 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<=[317] params(1) in file: lib\support\0.2.805/primitives.sharp:122:8: note:  
		    def operator<=(num : long)   := (value>=num.value);
		       ^

0 [0x0]: line: 122 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<=[318] params(1) in file: lib\support\0.2.805/primitives.sharp:123:8: note:  
		    def operator<=(num : uint)   := (value>=num.value);
		       ^

0 [0x0]: line: 123 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<=[319] params(1) in file: lib\support\0.2.805/primitives.sharp:124:8: note:  
		    def operator<=(num : int)    := (value>=num.value);
		       ^

0 [0x0]: line: 124 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<=[320] params(1) in file: lib\support\0.2.805/primitives.sharp:125:8: note:  
		    def operator<=(num : ushort) := (value>=num.value);
		       ^

0 [0x0]: line: 125 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<=[321] params(1) in file: lib\support\0.2.805/primitives.sharp:126:8: note:  
		    def operator<=(num : short)  := (value>=num.value);
		       ^

0 [0x0]: line: 126 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<=[322] params(1) in file: lib\support\0.2.805/primitives.sharp:127:8: note:  
		    def operator<=(num : uchar)  := (value>=num.value);
		       ^

0 [0x0]: line: 127 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<=[323] params(1) in file: lib\support\0.2.805/primitives.sharp:128:8: note:  
		    def operator<=(num : char)   := (value>=num.value);
		       ^

0 [0x0]: line: 128 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<=[324] params(1) in file: lib\support\0.2.805/primitives.sharp:129:8: note:  
		    def operator<=(num : byte)   := (value>=num.value);
		       ^

0 [0x0]: line: 129 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<=[325] params(1) in file: lib\support\0.2.805/primitives.sharp:130:8: note:  
		    def operator<=(num : bool)   := (value>=num.value);
		       ^

0 [0x0]: line: 130 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<=[326] params(1) in file: lib\support\0.2.805/primitives.sharp:131:8: note:  
		    def operator<=(num : var)    := (value>=num);
		       ^

0 [0x0]: line: 131 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gte ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int64>.operator**[327] params(1) in file: lib\support\0.2.805/primitives.sharp:133:8: note:  
		    def operator**(num : ulong)  := (value**num.value);
		       ^

0 [0x0]: line: 133 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator**[328] params(1) in file: lib\support\0.2.805/primitives.sharp:134:8: note:  
		    def operator**(num : long)   := (value**num.value);
		       ^

0 [0x0]: line: 134 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator**[329] params(1) in file: lib\support\0.2.805/primitives.sharp:135:8: note:  
		    def operator**(num : uint)   := (value**num.value);
		       ^

0 [0x0]: line: 135 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator**[330] params(1) in file: lib\support\0.2.805/primitives.sharp:136:8: note:  
		    def operator**(num : int)    := (value**num.value);
		       ^

0 [0x0]: line: 136 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator**[331] params(1) in file: lib\support\0.2.805/primitives.sharp:137:8: note:  
		    def operator**(num : ushort) := (value**num.value);
		       ^

0 [0x0]: line: 137 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator**[332] params(1) in file: lib\support\0.2.805/primitives.sharp:138:8: note:  
		    def operator**(num : short)  := (value**num.value);
		       ^

0 [0x0]: line: 138 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator**[333] params(1) in file: lib\support\0.2.805/primitives.sharp:139:8: note:  
		    def operator**(num : uchar)  := (value**num.value);
		       ^

0 [0x0]: line: 139 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator**[334] params(1) in file: lib\support\0.2.805/primitives.sharp:140:8: note:  
		    def operator**(num : char)   := (value**num.value);
		       ^

0 [0x0]: line: 140 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator**[335] params(1) in file: lib\support\0.2.805/primitives.sharp:141:8: note:  
		    def operator**(num : byte)   := (value**num.value);
		       ^

0 [0x0]: line: 141 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator**[336] params(1) in file: lib\support\0.2.805/primitives.sharp:142:8: note:  
		    def operator**(num : bool)   := (value**num.value);
		       ^

0 [0x0]: line: 142 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator**[337] params(1) in file: lib\support\0.2.805/primitives.sharp:143:8: note:  
		    def operator**(num : var)    := (value**num);
		       ^

0 [0x0]: line: 143 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           exp ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int64>.operator<<[338] params(1) in file: lib\support\0.2.805/primitives.sharp:145:8: note:  
		    def operator<<(num : ulong)  := (value<<num.value);
		       ^

0 [0x0]: line: 145 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<<[339] params(1) in file: lib\support\0.2.805/primitives.sharp:146:8: note:  
		    def operator<<(num : long)   := (value<<num.value);
		       ^

0 [0x0]: line: 146 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<<[340] params(1) in file: lib\support\0.2.805/primitives.sharp:147:8: note:  
		    def operator<<(num : uint)   := (value<<num.value);
		       ^

0 [0x0]: line: 147 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<<[341] params(1) in file: lib\support\0.2.805/primitives.sharp:148:8: note:  
		    def operator<<(num : int)    := (value<<num.value);
		       ^

0 [0x0]: line: 148 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<<[342] params(1) in file: lib\support\0.2.805/primitives.sharp:149:8: note:  
		    def operator<<(num : ushort) := (value<<num.value);
		       ^

0 [0x0]: line: 149 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<<[343] params(1) in file: lib\support\0.2.805/primitives.sharp:150:8: note:  
		    def operator<<(num : short)  := (value<<num.value);
		       ^

0 [0x0]: line: 150 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<<[344] params(1) in file: lib\support\0.2.805/primitives.sharp:151:8: note:  
		    def operator<<(num : uchar)  := (value<<num.value);
		       ^

0 [0x0]: line: 151 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<<[345] params(1) in file: lib\support\0.2.805/primitives.sharp:152:8: note:  
		    def operator<<(num : char)   := (value<<num.value);
		       ^

0 [0x0]: line: 152 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<<[346] params(1) in file: lib\support\0.2.805/primitives.sharp:153:8: note:  
		    def operator<<(num : byte)   := (value<<num.value);
		       ^

0 [0x0]: line: 153 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<<[347] params(1) in file: lib\support\0.2.805/primitives.sharp:154:8: note:  
		    def operator<<(num : bool)   := (value<<num.value);
		       ^

0 [0x0]: line: 154 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<<[348] params(1) in file: lib\support\0.2.805/primitives.sharp:155:8: note:  
		    def operator<<(num : var)    := (value<<num);
		       ^

0 [0x0]: line: 155 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shl ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int64>.operator>>[349] params(1) in file: lib\support\0.2.805/primitives.sharp:157:8: note:  
		    def operator>>(num : ulong)  := (value>>num.value);
		       ^

0 [0x0]: line: 157 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>>[350] params(1) in file: lib\support\0.2.805/primitives.sharp:158:8: note:  
		    def operator>>(num : long)   := (value>>num.value);
		       ^

0 [0x0]: line: 158 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>>[351] params(1) in file: lib\support\0.2.805/primitives.sharp:159:8: note:  
		    def operator>>(num : uint)   := (value>>num.value);
		       ^

0 [0x0]: line: 159 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>>[352] params(1) in file: lib\support\0.2.805/primitives.sharp:160:8: note:  
		    def operator>>(num : int)    := (value>>num.value);
		       ^

0 [0x0]: line: 160 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>>[353] params(1) in file: lib\support\0.2.805/primitives.sharp:161:8: note:  
		    def operator>>(num : ushort) := (value>>num.value);
		       ^

0 [0x0]: line: 161 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>>[354] params(1) in file: lib\support\0.2.805/primitives.sharp:162:8: note:  
		    def operator>>(num : short)  := (value>>num.value);
		       ^

0 [0x0]: line: 162 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>>[355] params(1) in file: lib\support\0.2.805/primitives.sharp:163:8: note:  
		    def operator>>(num : uchar)  := (value>>num.value);
		       ^

0 [0x0]: line: 163 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>>[356] params(1) in file: lib\support\0.2.805/primitives.sharp:164:8: note:  
		    def operator>>(num : char)   := (value>>num.value);
		       ^

0 [0x0]: line: 164 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>>[357] params(1) in file: lib\support\0.2.805/primitives.sharp:165:8: note:  
		    def operator>>(num : byte)   := (value>>num.value);
		       ^

0 [0x0]: line: 165 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>>[358] params(1) in file: lib\support\0.2.805/primitives.sharp:166:8: note:  
		    def operator>>(num : bool)   := (value>>num.value);
		       ^

0 [0x0]: line: 166 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>>[359] params(1) in file: lib\support\0.2.805/primitives.sharp:167:8: note:  
		    def operator>>(num : var)    := (value>>num);
		       ^

0 [0x0]: line: 167 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shr ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int64>.operator^[360] params(1) in file: lib\support\0.2.805/primitives.sharp:169:8: note:  
		    def operator^(num : ulong)  := (value^num.value);
		       ^

0 [0x0]: line: 169 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator^[361] params(1) in file: lib\support\0.2.805/primitives.sharp:170:8: note:  
		    def operator^(num : long)   := (value^num.value);
		       ^

0 [0x0]: line: 170 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator^[362] params(1) in file: lib\support\0.2.805/primitives.sharp:171:8: note:  
		    def operator^(num : uint)   := (value^num.value);
		       ^

0 [0x0]: line: 171 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator^[363] params(1) in file: lib\support\0.2.805/primitives.sharp:172:8: note:  
		    def operator^(num : int)    := (value^num.value);
		       ^

0 [0x0]: line: 172 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator^[364] params(1) in file: lib\support\0.2.805/primitives.sharp:173:8: note:  
		    def operator^(num : ushort) := (value^num.value);
		       ^

0 [0x0]: line: 173 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator^[365] params(1) in file: lib\support\0.2.805/primitives.sharp:174:8: note:  
		    def operator^(num : short)  := (value^num.value);
		       ^

0 [0x0]: line: 174 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator^[366] params(1) in file: lib\support\0.2.805/primitives.sharp:175:8: note:  
		    def operator^(num : uchar)  := (value^num.value);
		       ^

0 [0x0]: line: 175 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator^[367] params(1) in file: lib\support\0.2.805/primitives.sharp:176:8: note:  
		    def operator^(num : char)   := (value^num.value);
		       ^

0 [0x0]: line: 176 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator^[368] params(1) in file: lib\support\0.2.805/primitives.sharp:177:8: note:  
		    def operator^(num : byte)   := (value^num.value);
		       ^

0 [0x0]: line: 177 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator^[369] params(1) in file: lib\support\0.2.805/primitives.sharp:178:8: note:  
		    def operator^(num : bool)   := (value^num.value);
		       ^

0 [0x0]: line: 178 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator^[370] params(1) in file: lib\support\0.2.805/primitives.sharp:179:8: note:  
		    def operator^(num : var)    := (value^num);
		       ^

0 [0x0]: line: 179 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           xor ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int64>.operator&[371] params(1) in file: lib\support\0.2.805/primitives.sharp:181:8: note:  
		    def operator&(num : ulong)  := (value&num.value);
		       ^

0 [0x0]: line: 181 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator&[372] params(1) in file: lib\support\0.2.805/primitives.sharp:182:8: note:  
		    def operator&(num : long)   := (value&num.value);
		       ^

0 [0x0]: line: 182 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator&[373] params(1) in file: lib\support\0.2.805/primitives.sharp:183:8: note:  
		    def operator&(num : uint)   := (value&num.value);
		       ^

0 [0x0]: line: 183 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator&[374] params(1) in file: lib\support\0.2.805/primitives.sharp:184:8: note:  
		    def operator&(num : int)    := (value&num.value);
		       ^

0 [0x0]: line: 184 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator&[375] params(1) in file: lib\support\0.2.805/primitives.sharp:185:8: note:  
		    def operator&(num : ushort) := (value&num.value);
		       ^

0 [0x0]: line: 185 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator&[376] params(1) in file: lib\support\0.2.805/primitives.sharp:186:8: note:  
		    def operator&(num : short)  := (value&num.value);
		       ^

0 [0x0]: line: 186 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator&[377] params(1) in file: lib\support\0.2.805/primitives.sharp:187:8: note:  
		    def operator&(num : uchar)  := (value&num.value);
		       ^

0 [0x0]: line: 187 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator&[378] params(1) in file: lib\support\0.2.805/primitives.sharp:188:8: note:  
		    def operator&(num : char)   := (value&num.value);
		       ^

0 [0x0]: line: 188 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator&[379] params(1) in file: lib\support\0.2.805/primitives.sharp:189:8: note:  
		    def operator&(num : byte)   := (value&num.value);
		       ^

0 [0x0]: line: 189 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator&[380] params(1) in file: lib\support\0.2.805/primitives.sharp:190:8: note:  
		    def operator&(num : bool)   := (value&num.value);
		       ^

0 [0x0]: line: 190 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator&[381] params(1) in file: lib\support\0.2.805/primitives.sharp:191:8: note:  
		    def operator&(num : var)    := (value&num);
		       ^

0 [0x0]: line: 191 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           uand ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int64>.operator|[382] params(1) in file: lib\support\0.2.805/primitives.sharp:193:8: note:  
		    def operator|(num : ulong)  := (value|num.value);
		       ^

0 [0x0]: line: 193 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator|[383] params(1) in file: lib\support\0.2.805/primitives.sharp:194:8: note:  
		    def operator|(num : long)   := (value|num.value);
		       ^

0 [0x0]: line: 194 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator|[384] params(1) in file: lib\support\0.2.805/primitives.sharp:195:8: note:  
		    def operator|(num : uint)   := (value|num.value);
		       ^

0 [0x0]: line: 195 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator|[385] params(1) in file: lib\support\0.2.805/primitives.sharp:196:8: note:  
		    def operator|(num : int)    := (value|num.value);
		       ^

0 [0x0]: line: 196 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator|[386] params(1) in file: lib\support\0.2.805/primitives.sharp:197:8: note:  
		    def operator|(num : ushort) := (value|num.value);
		       ^

0 [0x0]: line: 197 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator|[387] params(1) in file: lib\support\0.2.805/primitives.sharp:198:8: note:  
		    def operator|(num : short)  := (value|num.value);
		       ^

0 [0x0]: line: 198 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator|[388] params(1) in file: lib\support\0.2.805/primitives.sharp:199:8: note:  
		    def operator|(num : uchar)  := (value|num.value);
		       ^

0 [0x0]: line: 199 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator|[389] params(1) in file: lib\support\0.2.805/primitives.sharp:200:8: note:  
		    def operator|(num : char)   := (value|num.value);
		       ^

0 [0x0]: line: 200 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator|[390] params(1) in file: lib\support\0.2.805/primitives.sharp:201:8: note:  
		    def operator|(num : byte)   := (value|num.value);
		       ^

0 [0x0]: line: 201 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator|[391] params(1) in file: lib\support\0.2.805/primitives.sharp:202:8: note:  
		    def operator|(num : bool)   := (value|num.value);
		       ^

0 [0x0]: line: 202 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator|[392] params(1) in file: lib\support\0.2.805/primitives.sharp:203:8: note:  
		    def operator|(num : var)    := (value|num);
		       ^

0 [0x0]: line: 203 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           or ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int64>.operator!=[393] params(1) in file: lib\support\0.2.805/primitives.sharp:205:8: note:  
		    def operator!=(num : var) := value!=num;
		       ^

0 [0x0]: line: 205 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           tne ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int64>.operator==[394] params(1) in file: lib\support\0.2.805/primitives.sharp:206:8: note:  
		    def operator==(num : var) := value==num;
		       ^

0 [0x0]: line: 206 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           test ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int64>.operator=[395] params(1) in file: lib\support\0.2.805/primitives.sharp:207:8: note:  
		    def operator=(num : var) := value=num;
		       ^

0 [0x0]: line: 207 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           loadval ebx   
5 [0x5]:           mov64 ebx, ebx   
6 [0x6]:           movi #0, adx   
8 [0x8]:           rmov adx, ebx   
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std#integer<_int64>.to_string[396] params(0) in file: lib\support\0.2.805/primitives.sharp:209:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 210 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           newstr @22 //    
3 [0x3]:           call @2935 // <std#string.string>   
4 [0x4]:           movl 0   
5 [0x5]:           movn #0   
7 [0x7]:           movi #0, adx   
9 [0x9]:           iaload ebx, adx   
10 [0xa]:           rstore ebx   
11 [0xb]:           call @2971 // <std#string.operator+>   
12 [0xc]:           popobj2    
13 [0xd]:           returnobj   
14 [0xe]:           ret   


function: std#integer<_int64>.parse[397] params(1) in file: lib\support\0.2.805/primitives.sharp:214:15: note:  
		    static def parse(s: string) : native_type {
		              ^

0 [0x0]: line: 215 istorel 0, fp+1   
2 [0x2]: line: 216 movi #0, ebx   
4 [0x4]:           mov64 ebx, ebx   
5 [0x5]:           smovr_2 ebx, fp+2   
6 [0x6]: line: 217 istorel 0, fp+3   
8 [0x8]: line: 218 pushl 0   
9 [0x9]:           call @2976 // <std#string.size>   
10 [0xa]:           ipopl 4   
11 [0xb]: line: 220 pushl 0   
12 [0xc]:           istore 0   
14 [0xe]:           call @2957 // <std#string.at>   
15 [0xf]:           loadval ebx   
16 [0x10]:           rstore ebx   
17 [0x11]:           movi #45, ebx   
19 [0x13]:           loadval ecx   
20 [0x14]:           test ecx, ebx   
21 [0x15]:           jne 26   
22 [0x16]: line: 221 istorel 1, fp+3   
24 [0x18]: line: 222 istorel 1, fp+1   
26 [0x1a]:           nop   
27 [0x1b]: line: 225 ipushl #1   
28 [0x1c]:           loadl ebx, fp+4   
29 [0x1d]:           loadval ecx   
30 [0x1e]:           lt ecx, ebx   
31 [0x1f]:           movr ebx, cmt   
32 [0x20]:           movr cmt, ebx   
33 [0x21]:           jne 79   
34 [0x22]: line: 226 pushl 0   
35 [0x23]:           ipushl #1   
36 [0x24]:           call @2957 // <std#string.at>   
37 [0x25]:           call @2724 // <std#char.is_digit>   
38 [0x26]:           loadval ebx   
39 [0x27]:           not ebx, ebx   
40 [0x28]:           movr cmt, ebx   
41 [0x29]:           jne 54   
42 [0x2a]: line: 227 new_class @4 // std#illegal_argument_exception   
43 [0x2b]:           dup    
44 [0x2c]:           new_class @64 // std#string   
45 [0x2d]:           dup    
46 [0x2e]:           newstr @137 // illegal char in string:    
47 [0x2f]:           call @2935 // <std#string.string>   
48 [0x30]:           pushl 0   
49 [0x31]:           ipushl #1   
50 [0x32]:           call @2957 // <std#string.at>   
51 [0x33]:           call @2968 // <std#string.operator+>   
52 [0x34]:           call @1630 // <std#illegal_argument_exception.illegal_argument_exception>   
53 [0x35]:           throw    
54 [0x36]:           nop   
55 [0x37]: line: 231 movi #10, ebx   
57 [0x39]:           loadl ecx, fp+2   
58 [0x3a]:           mul ecx, ebx -> ebx   
59 [0x3b]:           mov64 ebx, ebx   
60 [0x3c]:           smovr_2 ebx, fp+2   
61 [0x3d]: line: 232 pushl 0   
62 [0x3e]:           loadl ebx, fp+1   
63 [0x3f]:           movr egx, ebx   
64 [0x40]:           inc ebx   
65 [0x41]:           smovr_2 ebx, fp+1   
66 [0x42]:           rstore egx   
67 [0x43]:           call @2957 // <std#string.at>   
68 [0x44]:           loadval ebx   
69 [0x45]:           rstore ebx   
70 [0x46]:           movi #48, ebx   
72 [0x48]:           loadval ecx   
73 [0x49]:           sub ecx, ebx -> ebx   
74 [0x4a]:           loadl ecx, fp+2   
75 [0x4b]:           add ecx, ebx -> ebx   
76 [0x4c]:           mov64 ebx, ebx   
77 [0x4d]:           smovr_2 ebx, fp+2   
78 [0x4e]:           jmp @27   
79 [0x4f]: line: 234 loadl ebx, fp+3   
80 [0x50]:           movr cmt, ebx   
81 [0x51]:           jne 86   
82 [0x52]: line: 235 loadl ebx, fp+2   
83 [0x53]:           neg ebx, ebx   
84 [0x54]:           mov64 ebx, ebx   
85 [0x55]:           smovr_2 ebx, fp+2   
86 [0x56]:           nop   
87 [0x57]: line: 236 loadl ebx, fp+2   
88 [0x58]:           return_val ebx   
89 [0x59]:           ret   


function: std#integer<_int64>.to_ulong[398] params(0) in file: lib\support\0.2.805/primitives.sharp:239:8: note:  
		    def to_ulong() := new ulong { value };
		       ^

0 [0x0]: line: 239 new_class @44 // std#ulong   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu64 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int64>.to_long[399] params(0) in file: lib\support\0.2.805/primitives.sharp:240:8: note:  
		    def to_long() := new long { value };
		       ^

0 [0x0]: line: 240 new_class @45 // std#long   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov64 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int64>.to_uint[400] params(0) in file: lib\support\0.2.805/primitives.sharp:241:8: note:  
		    def to_uint() := new uint { value };
		       ^

0 [0x0]: line: 241 new_class @46 // std#uint   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu32 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int64>.to_int[401] params(0) in file: lib\support\0.2.805/primitives.sharp:242:8: note:  
		    def to_int() := new int { value };
		       ^

0 [0x0]: line: 242 new_class @47 // std#int   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov32 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int64>.to_ushort[402] params(0) in file: lib\support\0.2.805/primitives.sharp:243:8: note:  
		    def to_ushort() := new ushort { value };
		       ^

0 [0x0]: line: 243 new_class @48 // std#ushort   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu16 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int64>.to_short[403] params(0) in file: lib\support\0.2.805/primitives.sharp:244:8: note:  
		    def to_short() := new short { value };
		       ^

0 [0x0]: line: 244 new_class @49 // std#short   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov16 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int64>.to_uchar[404] params(0) in file: lib\support\0.2.805/primitives.sharp:245:8: note:  
		    def to_uchar() := new uchar { value };
		       ^

0 [0x0]: line: 245 new_class @50 // std#uchar   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int64>.to_char[405] params(0) in file: lib\support\0.2.805/primitives.sharp:246:8: note:  
		    def to_char() := new char { value };
		       ^

0 [0x0]: line: 246 new_class @51 // std#char   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int64>.to_byte[406] params(0) in file: lib\support\0.2.805/primitives.sharp:247:8: note:  
		    def to_byte() := new byte { value };
		       ^

0 [0x0]: line: 247 new_class @52 // std#byte   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int64>.to_bool[407] params(0) in file: lib\support\0.2.805/primitives.sharp:248:8: note:  
		    def to_bool() := new bool { value };
		       ^

0 [0x0]: line: 248 new_class @53 // std#bool   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int64>.get_value[408] params(0) in file: lib\support\0.2.805/primitives.sharp:250:8: note:  
		    def get_value() := value;
		       ^

0 [0x0]: line: 250 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


constructor: std#integer<_int64>.integer[409] params(0) in file: lib\support\0.2.805/primitives.sharp:5:13: note:  
		public class integer<native_type> {
		            ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#integer<_uint32>.integer[410] params(1) in file: lib\support\0.2.805/primitives.sharp:8:12: note:  
		    integer(initial_val : var) {
		           ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 9 ipushl #1   
2 [0x2]:         movl 0   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         movu32 ebx, ebx   
7 [0x7]:         movi #0, adx   
9 [0x9]:         rmov adx, ebx   
10 [0xa]:         ret   


function: std#integer<_uint32>.hash[411] params(0) in file: lib\support\0.2.805/primitives.sharp:12:8: note:  
		    def hash() : long {
		       ^

0 [0x0]: line: 13 new_class @45 // std#long   
1 [0x1]:          dup    
2 [0x2]:          movl 0   
3 [0x3]:          movn #0   
5 [0x5]:          movi #0, adx   
7 [0x7]:          iaload ebx, adx   
8 [0x8]:          rstore ebx   
9 [0x9]:          call @2077 // <std#long.long>   
10 [0xa]:          popobj2    
11 [0xb]:          returnobj   
12 [0xc]:          ret   


overload function: std#integer<_uint32>.operator!=[412] params(1) in file: lib\support\0.2.805/primitives.sharp:16:8: note:  
		    def operator!=(num : ulong) := (value!=num.value);
		       ^

0 [0x0]: line: 16 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator==[413] params(1) in file: lib\support\0.2.805/primitives.sharp:17:8: note:  
		    def operator==(num : ulong) := (value==num.value);
		       ^

0 [0x0]: line: 17 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator!=[414] params(1) in file: lib\support\0.2.805/primitives.sharp:18:8: note:  
		    def operator!=(num : long) := (value!=num.value);
		       ^

0 [0x0]: line: 18 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator==[415] params(1) in file: lib\support\0.2.805/primitives.sharp:19:8: note:  
		    def operator==(num : long) := (value==num.value);
		       ^

0 [0x0]: line: 19 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator!=[416] params(1) in file: lib\support\0.2.805/primitives.sharp:20:8: note:  
		    def operator!=(num : uint) := (value!=num.value);
		       ^

0 [0x0]: line: 20 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator==[417] params(1) in file: lib\support\0.2.805/primitives.sharp:21:8: note:  
		    def operator==(num : uint) := (value==num.value);
		       ^

0 [0x0]: line: 21 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator!=[418] params(1) in file: lib\support\0.2.805/primitives.sharp:22:8: note:  
		    def operator!=(num : int) := (value!=num.value);
		       ^

0 [0x0]: line: 22 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator==[419] params(1) in file: lib\support\0.2.805/primitives.sharp:23:8: note:  
		    def operator==(num : int) := (value==num.value);
		       ^

0 [0x0]: line: 23 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator!=[420] params(1) in file: lib\support\0.2.805/primitives.sharp:24:8: note:  
		    def operator!=(num : ushort) := (value!=num.value);
		       ^

0 [0x0]: line: 24 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator==[421] params(1) in file: lib\support\0.2.805/primitives.sharp:25:8: note:  
		    def operator==(num : ushort) := (value==num.value);
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator!=[422] params(1) in file: lib\support\0.2.805/primitives.sharp:26:8: note:  
		    def operator!=(num : short) := (value!=num.value);
		       ^

0 [0x0]: line: 26 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator==[423] params(1) in file: lib\support\0.2.805/primitives.sharp:27:8: note:  
		    def operator==(num : short) := (value==num.value);
		       ^

0 [0x0]: line: 27 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator!=[424] params(1) in file: lib\support\0.2.805/primitives.sharp:28:8: note:  
		    def operator!=(num : uchar) := (value!=num.value);
		       ^

0 [0x0]: line: 28 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator==[425] params(1) in file: lib\support\0.2.805/primitives.sharp:29:8: note:  
		    def operator==(num : uchar) := (value==num.value);
		       ^

0 [0x0]: line: 29 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator!=[426] params(1) in file: lib\support\0.2.805/primitives.sharp:30:8: note:  
		    def operator!=(num : char) := (value!=num.value);
		       ^

0 [0x0]: line: 30 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator==[427] params(1) in file: lib\support\0.2.805/primitives.sharp:31:8: note:  
		    def operator==(num : char) := (value==num.value);
		       ^

0 [0x0]: line: 31 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator!=[428] params(1) in file: lib\support\0.2.805/primitives.sharp:32:8: note:  
		    def operator!=(num : byte) := (value!=num.value);
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator==[429] params(1) in file: lib\support\0.2.805/primitives.sharp:33:8: note:  
		    def operator==(num : byte) := (value==num.value);
		       ^

0 [0x0]: line: 33 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator!=[430] params(1) in file: lib\support\0.2.805/primitives.sharp:34:8: note:  
		    def operator!=(num : bool) := (value!=num.value);
		       ^

0 [0x0]: line: 34 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator==[431] params(1) in file: lib\support\0.2.805/primitives.sharp:35:8: note:  
		    def operator==(num : bool) := (value==num.value);
		       ^

0 [0x0]: line: 35 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator+[432] params(1) in file: lib\support\0.2.805/primitives.sharp:37:8: note:  
		    def operator+(num : ulong)  := (value+num.value);
		       ^

0 [0x0]: line: 37 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator+[433] params(1) in file: lib\support\0.2.805/primitives.sharp:38:8: note:  
		    def operator+(num : long)   := (value+num.value);
		       ^

0 [0x0]: line: 38 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator+[434] params(1) in file: lib\support\0.2.805/primitives.sharp:39:8: note:  
		    def operator+(num : uint)   := (value+num.value);
		       ^

0 [0x0]: line: 39 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator+[435] params(1) in file: lib\support\0.2.805/primitives.sharp:40:8: note:  
		    def operator+(num : int)    := (value+num.value);
		       ^

0 [0x0]: line: 40 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator+[436] params(1) in file: lib\support\0.2.805/primitives.sharp:41:8: note:  
		    def operator+(num : ushort) := (value+num.value);
		       ^

0 [0x0]: line: 41 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator+[437] params(1) in file: lib\support\0.2.805/primitives.sharp:42:8: note:  
		    def operator+(num : short)  := (value+num.value);
		       ^

0 [0x0]: line: 42 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator+[438] params(1) in file: lib\support\0.2.805/primitives.sharp:43:8: note:  
		    def operator+(num : uchar)  := (value+num.value);
		       ^

0 [0x0]: line: 43 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator+[439] params(1) in file: lib\support\0.2.805/primitives.sharp:44:8: note:  
		    def operator+(num : char)   := (value+num.value);
		       ^

0 [0x0]: line: 44 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator+[440] params(1) in file: lib\support\0.2.805/primitives.sharp:45:8: note:  
		    def operator+(num : byte)   := (value+num.value);
		       ^

0 [0x0]: line: 45 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator+[441] params(1) in file: lib\support\0.2.805/primitives.sharp:46:8: note:  
		    def operator+(num : bool)   := (value+num.value);
		       ^

0 [0x0]: line: 46 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator+[442] params(1) in file: lib\support\0.2.805/primitives.sharp:47:8: note:  
		    def operator+(num : var)    := (value+num);
		       ^

0 [0x0]: line: 47 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          add ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint32>.operator-[443] params(1) in file: lib\support\0.2.805/primitives.sharp:49:8: note:  
		    def operator-(num : ulong)  := (value-num.value);
		       ^

0 [0x0]: line: 49 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator-[444] params(1) in file: lib\support\0.2.805/primitives.sharp:50:8: note:  
		    def operator-(num : long)   := (value-num.value);
		       ^

0 [0x0]: line: 50 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator-[445] params(1) in file: lib\support\0.2.805/primitives.sharp:51:8: note:  
		    def operator-(num : uint)   := (value-num.value);
		       ^

0 [0x0]: line: 51 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator-[446] params(1) in file: lib\support\0.2.805/primitives.sharp:52:8: note:  
		    def operator-(num : int)    := (value-num.value);
		       ^

0 [0x0]: line: 52 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator-[447] params(1) in file: lib\support\0.2.805/primitives.sharp:53:8: note:  
		    def operator-(num : ushort) := (value-num.value);
		       ^

0 [0x0]: line: 53 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator-[448] params(1) in file: lib\support\0.2.805/primitives.sharp:54:8: note:  
		    def operator-(num : short)  := (value-num.value);
		       ^

0 [0x0]: line: 54 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator-[449] params(1) in file: lib\support\0.2.805/primitives.sharp:55:8: note:  
		    def operator-(num : uchar)  := (value-num.value);
		       ^

0 [0x0]: line: 55 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator-[450] params(1) in file: lib\support\0.2.805/primitives.sharp:56:8: note:  
		    def operator-(num : char)   := (value-num.value);
		       ^

0 [0x0]: line: 56 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator-[451] params(1) in file: lib\support\0.2.805/primitives.sharp:57:8: note:  
		    def operator-(num : byte)   := (value-num.value);
		       ^

0 [0x0]: line: 57 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator-[452] params(1) in file: lib\support\0.2.805/primitives.sharp:58:8: note:  
		    def operator-(num : bool)   := (value-num.value);
		       ^

0 [0x0]: line: 58 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator-[453] params(1) in file: lib\support\0.2.805/primitives.sharp:59:8: note:  
		    def operator-(num : var)    := (value-num);
		       ^

0 [0x0]: line: 59 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          sub ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint32>.operator*[454] params(1) in file: lib\support\0.2.805/primitives.sharp:61:8: note:  
		    def operator*(num : ulong)  := (value*num.value);
		       ^

0 [0x0]: line: 61 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator*[455] params(1) in file: lib\support\0.2.805/primitives.sharp:62:8: note:  
		    def operator*(num : long)   := (value*num.value);
		       ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator*[456] params(1) in file: lib\support\0.2.805/primitives.sharp:63:8: note:  
		    def operator*(num : uint)   := (value*num.value);
		       ^

0 [0x0]: line: 63 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator*[457] params(1) in file: lib\support\0.2.805/primitives.sharp:64:8: note:  
		    def operator*(num : int)    := (value*num.value);
		       ^

0 [0x0]: line: 64 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator*[458] params(1) in file: lib\support\0.2.805/primitives.sharp:65:8: note:  
		    def operator*(num : ushort) := (value*num.value);
		       ^

0 [0x0]: line: 65 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator*[459] params(1) in file: lib\support\0.2.805/primitives.sharp:66:8: note:  
		    def operator*(num : short)  := (value*num.value);
		       ^

0 [0x0]: line: 66 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator*[460] params(1) in file: lib\support\0.2.805/primitives.sharp:67:8: note:  
		    def operator*(num : uchar)  := (value*num.value);
		       ^

0 [0x0]: line: 67 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator*[461] params(1) in file: lib\support\0.2.805/primitives.sharp:68:8: note:  
		    def operator*(num : char)   := (value*num.value);
		       ^

0 [0x0]: line: 68 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator*[462] params(1) in file: lib\support\0.2.805/primitives.sharp:69:8: note:  
		    def operator*(num : byte)   := (value*num.value);
		       ^

0 [0x0]: line: 69 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator*[463] params(1) in file: lib\support\0.2.805/primitives.sharp:70:8: note:  
		    def operator*(num : bool)   := (value*num.value);
		       ^

0 [0x0]: line: 70 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator*[464] params(1) in file: lib\support\0.2.805/primitives.sharp:71:8: note:  
		    def operator*(num : var)    := (value*num);
		       ^

0 [0x0]: line: 71 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          mul ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint32>.operator/[465] params(1) in file: lib\support\0.2.805/primitives.sharp:73:8: note:  
		    def operator/(num : ulong)  := (value/num.value);
		       ^

0 [0x0]: line: 73 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator/[466] params(1) in file: lib\support\0.2.805/primitives.sharp:74:8: note:  
		    def operator/(num : long)   := (value/num.value);
		       ^

0 [0x0]: line: 74 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator/[467] params(1) in file: lib\support\0.2.805/primitives.sharp:75:8: note:  
		    def operator/(num : uint)   := (value/num.value);
		       ^

0 [0x0]: line: 75 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator/[468] params(1) in file: lib\support\0.2.805/primitives.sharp:76:8: note:  
		    def operator/(num : int)    := (value/num.value);
		       ^

0 [0x0]: line: 76 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator/[469] params(1) in file: lib\support\0.2.805/primitives.sharp:77:8: note:  
		    def operator/(num : ushort) := (value/num.value);
		       ^

0 [0x0]: line: 77 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator/[470] params(1) in file: lib\support\0.2.805/primitives.sharp:78:8: note:  
		    def operator/(num : short)  := (value/num.value);
		       ^

0 [0x0]: line: 78 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator/[471] params(1) in file: lib\support\0.2.805/primitives.sharp:79:8: note:  
		    def operator/(num : uchar)  := (value/num.value);
		       ^

0 [0x0]: line: 79 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator/[472] params(1) in file: lib\support\0.2.805/primitives.sharp:80:8: note:  
		    def operator/(num : char)   := (value/num.value);
		       ^

0 [0x0]: line: 80 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator/[473] params(1) in file: lib\support\0.2.805/primitives.sharp:81:8: note:  
		    def operator/(num : byte)   := (value/num.value);
		       ^

0 [0x0]: line: 81 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator/[474] params(1) in file: lib\support\0.2.805/primitives.sharp:82:8: note:  
		    def operator/(num : bool)   := (value/num.value);
		       ^

0 [0x0]: line: 82 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator/[475] params(1) in file: lib\support\0.2.805/primitives.sharp:83:8: note:  
		    def operator/(num : var)    := (value/num);
		       ^

0 [0x0]: line: 83 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          div ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint32>.operator%[476] params(1) in file: lib\support\0.2.805/primitives.sharp:85:8: note:  
		    def operator%(num : ulong)  := (value%num.value);
		       ^

0 [0x0]: line: 85 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator%[477] params(1) in file: lib\support\0.2.805/primitives.sharp:86:8: note:  
		    def operator%(num : long)   := (value%num.value);
		       ^

0 [0x0]: line: 86 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator%[478] params(1) in file: lib\support\0.2.805/primitives.sharp:87:8: note:  
		    def operator%(num : uint)   := (value%num.value);
		       ^

0 [0x0]: line: 87 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator%[479] params(1) in file: lib\support\0.2.805/primitives.sharp:88:8: note:  
		    def operator%(num : int)    := (value%num.value);
		       ^

0 [0x0]: line: 88 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator%[480] params(1) in file: lib\support\0.2.805/primitives.sharp:89:8: note:  
		    def operator%(num : ushort) := (value%num.value);
		       ^

0 [0x0]: line: 89 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator%[481] params(1) in file: lib\support\0.2.805/primitives.sharp:90:8: note:  
		    def operator%(num : short)  := (value%num.value);
		       ^

0 [0x0]: line: 90 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator%[482] params(1) in file: lib\support\0.2.805/primitives.sharp:91:8: note:  
		    def operator%(num : uchar)  := (value%num.value);
		       ^

0 [0x0]: line: 91 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator%[483] params(1) in file: lib\support\0.2.805/primitives.sharp:92:8: note:  
		    def operator%(num : char)   := (value%num.value);
		       ^

0 [0x0]: line: 92 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator%[484] params(1) in file: lib\support\0.2.805/primitives.sharp:93:8: note:  
		    def operator%(num : byte)   := (value%num.value);
		       ^

0 [0x0]: line: 93 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator%[485] params(1) in file: lib\support\0.2.805/primitives.sharp:94:8: note:  
		    def operator%(num : bool)   := (value%num.value);
		       ^

0 [0x0]: line: 94 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator%[486] params(1) in file: lib\support\0.2.805/primitives.sharp:95:8: note:  
		    def operator%(num : var)    := (value%num);
		       ^

0 [0x0]: line: 95 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          mod ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint32>.operator<[487] params(1) in file: lib\support\0.2.805/primitives.sharp:97:8: note:  
		    def operator<(num : ulong)  := (value<num.value);
		       ^

0 [0x0]: line: 97 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator<[488] params(1) in file: lib\support\0.2.805/primitives.sharp:98:8: note:  
		    def operator<(num : long)   := (value<num.value);
		       ^

0 [0x0]: line: 98 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator<[489] params(1) in file: lib\support\0.2.805/primitives.sharp:99:8: note:  
		    def operator<(num : uint)   := (value<num.value);
		       ^

0 [0x0]: line: 99 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator<[490] params(1) in file: lib\support\0.2.805/primitives.sharp:100:8: note:  
		    def operator<(num : int)    := (value<num.value);
		       ^

0 [0x0]: line: 100 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<[491] params(1) in file: lib\support\0.2.805/primitives.sharp:101:8: note:  
		    def operator<(num : ushort) := (value<num.value);
		       ^

0 [0x0]: line: 101 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<[492] params(1) in file: lib\support\0.2.805/primitives.sharp:102:8: note:  
		    def operator<(num : short)  := (value<num.value);
		       ^

0 [0x0]: line: 102 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<[493] params(1) in file: lib\support\0.2.805/primitives.sharp:103:8: note:  
		    def operator<(num : uchar)  := (value<num.value);
		       ^

0 [0x0]: line: 103 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<[494] params(1) in file: lib\support\0.2.805/primitives.sharp:104:8: note:  
		    def operator<(num : char)   := (value<num.value);
		       ^

0 [0x0]: line: 104 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<[495] params(1) in file: lib\support\0.2.805/primitives.sharp:105:8: note:  
		    def operator<(num : byte)   := (value<num.value);
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<[496] params(1) in file: lib\support\0.2.805/primitives.sharp:106:8: note:  
		    def operator<(num : bool)   := (value<num.value);
		       ^

0 [0x0]: line: 106 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<[497] params(1) in file: lib\support\0.2.805/primitives.sharp:107:8: note:  
		    def operator<(num : var)    := (value<num);
		       ^

0 [0x0]: line: 107 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           lt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint32>.operator>[498] params(1) in file: lib\support\0.2.805/primitives.sharp:109:8: note:  
		    def operator>(num : ulong)  := (value>num.value);
		       ^

0 [0x0]: line: 109 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>[499] params(1) in file: lib\support\0.2.805/primitives.sharp:110:8: note:  
		    def operator>(num : long)   := (value>num.value);
		       ^

0 [0x0]: line: 110 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>[500] params(1) in file: lib\support\0.2.805/primitives.sharp:111:8: note:  
		    def operator>(num : uint)   := (value>num.value);
		       ^

0 [0x0]: line: 111 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>[501] params(1) in file: lib\support\0.2.805/primitives.sharp:112:8: note:  
		    def operator>(num : int)    := (value>num.value);
		       ^

0 [0x0]: line: 112 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>[502] params(1) in file: lib\support\0.2.805/primitives.sharp:113:8: note:  
		    def operator>(num : ushort) := (value>num.value);
		       ^

0 [0x0]: line: 113 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>[503] params(1) in file: lib\support\0.2.805/primitives.sharp:114:8: note:  
		    def operator>(num : short)  := (value>num.value);
		       ^

0 [0x0]: line: 114 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>[504] params(1) in file: lib\support\0.2.805/primitives.sharp:115:8: note:  
		    def operator>(num : uchar)  := (value>num.value);
		       ^

0 [0x0]: line: 115 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>[505] params(1) in file: lib\support\0.2.805/primitives.sharp:116:8: note:  
		    def operator>(num : char)   := (value>num.value);
		       ^

0 [0x0]: line: 116 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>[506] params(1) in file: lib\support\0.2.805/primitives.sharp:117:8: note:  
		    def operator>(num : byte)   := (value>num.value);
		       ^

0 [0x0]: line: 117 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>[507] params(1) in file: lib\support\0.2.805/primitives.sharp:118:8: note:  
		    def operator>(num : bool)   := (value>num.value);
		       ^

0 [0x0]: line: 118 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>[508] params(1) in file: lib\support\0.2.805/primitives.sharp:119:8: note:  
		    def operator>(num : var)    := (value>num);
		       ^

0 [0x0]: line: 119 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint32>.operator<=[509] params(1) in file: lib\support\0.2.805/primitives.sharp:121:8: note:  
		    def operator<=(num : ulong)  := (value>=num.value);
		       ^

0 [0x0]: line: 121 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<=[510] params(1) in file: lib\support\0.2.805/primitives.sharp:122:8: note:  
		    def operator<=(num : long)   := (value>=num.value);
		       ^

0 [0x0]: line: 122 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<=[511] params(1) in file: lib\support\0.2.805/primitives.sharp:123:8: note:  
		    def operator<=(num : uint)   := (value>=num.value);
		       ^

0 [0x0]: line: 123 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<=[512] params(1) in file: lib\support\0.2.805/primitives.sharp:124:8: note:  
		    def operator<=(num : int)    := (value>=num.value);
		       ^

0 [0x0]: line: 124 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<=[513] params(1) in file: lib\support\0.2.805/primitives.sharp:125:8: note:  
		    def operator<=(num : ushort) := (value>=num.value);
		       ^

0 [0x0]: line: 125 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<=[514] params(1) in file: lib\support\0.2.805/primitives.sharp:126:8: note:  
		    def operator<=(num : short)  := (value>=num.value);
		       ^

0 [0x0]: line: 126 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<=[515] params(1) in file: lib\support\0.2.805/primitives.sharp:127:8: note:  
		    def operator<=(num : uchar)  := (value>=num.value);
		       ^

0 [0x0]: line: 127 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<=[516] params(1) in file: lib\support\0.2.805/primitives.sharp:128:8: note:  
		    def operator<=(num : char)   := (value>=num.value);
		       ^

0 [0x0]: line: 128 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<=[517] params(1) in file: lib\support\0.2.805/primitives.sharp:129:8: note:  
		    def operator<=(num : byte)   := (value>=num.value);
		       ^

0 [0x0]: line: 129 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<=[518] params(1) in file: lib\support\0.2.805/primitives.sharp:130:8: note:  
		    def operator<=(num : bool)   := (value>=num.value);
		       ^

0 [0x0]: line: 130 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<=[519] params(1) in file: lib\support\0.2.805/primitives.sharp:131:8: note:  
		    def operator<=(num : var)    := (value>=num);
		       ^

0 [0x0]: line: 131 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gte ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint32>.operator**[520] params(1) in file: lib\support\0.2.805/primitives.sharp:133:8: note:  
		    def operator**(num : ulong)  := (value**num.value);
		       ^

0 [0x0]: line: 133 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator**[521] params(1) in file: lib\support\0.2.805/primitives.sharp:134:8: note:  
		    def operator**(num : long)   := (value**num.value);
		       ^

0 [0x0]: line: 134 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator**[522] params(1) in file: lib\support\0.2.805/primitives.sharp:135:8: note:  
		    def operator**(num : uint)   := (value**num.value);
		       ^

0 [0x0]: line: 135 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator**[523] params(1) in file: lib\support\0.2.805/primitives.sharp:136:8: note:  
		    def operator**(num : int)    := (value**num.value);
		       ^

0 [0x0]: line: 136 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator**[524] params(1) in file: lib\support\0.2.805/primitives.sharp:137:8: note:  
		    def operator**(num : ushort) := (value**num.value);
		       ^

0 [0x0]: line: 137 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator**[525] params(1) in file: lib\support\0.2.805/primitives.sharp:138:8: note:  
		    def operator**(num : short)  := (value**num.value);
		       ^

0 [0x0]: line: 138 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator**[526] params(1) in file: lib\support\0.2.805/primitives.sharp:139:8: note:  
		    def operator**(num : uchar)  := (value**num.value);
		       ^

0 [0x0]: line: 139 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator**[527] params(1) in file: lib\support\0.2.805/primitives.sharp:140:8: note:  
		    def operator**(num : char)   := (value**num.value);
		       ^

0 [0x0]: line: 140 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator**[528] params(1) in file: lib\support\0.2.805/primitives.sharp:141:8: note:  
		    def operator**(num : byte)   := (value**num.value);
		       ^

0 [0x0]: line: 141 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator**[529] params(1) in file: lib\support\0.2.805/primitives.sharp:142:8: note:  
		    def operator**(num : bool)   := (value**num.value);
		       ^

0 [0x0]: line: 142 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator**[530] params(1) in file: lib\support\0.2.805/primitives.sharp:143:8: note:  
		    def operator**(num : var)    := (value**num);
		       ^

0 [0x0]: line: 143 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           exp ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint32>.operator<<[531] params(1) in file: lib\support\0.2.805/primitives.sharp:145:8: note:  
		    def operator<<(num : ulong)  := (value<<num.value);
		       ^

0 [0x0]: line: 145 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<<[532] params(1) in file: lib\support\0.2.805/primitives.sharp:146:8: note:  
		    def operator<<(num : long)   := (value<<num.value);
		       ^

0 [0x0]: line: 146 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<<[533] params(1) in file: lib\support\0.2.805/primitives.sharp:147:8: note:  
		    def operator<<(num : uint)   := (value<<num.value);
		       ^

0 [0x0]: line: 147 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<<[534] params(1) in file: lib\support\0.2.805/primitives.sharp:148:8: note:  
		    def operator<<(num : int)    := (value<<num.value);
		       ^

0 [0x0]: line: 148 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<<[535] params(1) in file: lib\support\0.2.805/primitives.sharp:149:8: note:  
		    def operator<<(num : ushort) := (value<<num.value);
		       ^

0 [0x0]: line: 149 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<<[536] params(1) in file: lib\support\0.2.805/primitives.sharp:150:8: note:  
		    def operator<<(num : short)  := (value<<num.value);
		       ^

0 [0x0]: line: 150 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<<[537] params(1) in file: lib\support\0.2.805/primitives.sharp:151:8: note:  
		    def operator<<(num : uchar)  := (value<<num.value);
		       ^

0 [0x0]: line: 151 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<<[538] params(1) in file: lib\support\0.2.805/primitives.sharp:152:8: note:  
		    def operator<<(num : char)   := (value<<num.value);
		       ^

0 [0x0]: line: 152 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<<[539] params(1) in file: lib\support\0.2.805/primitives.sharp:153:8: note:  
		    def operator<<(num : byte)   := (value<<num.value);
		       ^

0 [0x0]: line: 153 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<<[540] params(1) in file: lib\support\0.2.805/primitives.sharp:154:8: note:  
		    def operator<<(num : bool)   := (value<<num.value);
		       ^

0 [0x0]: line: 154 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<<[541] params(1) in file: lib\support\0.2.805/primitives.sharp:155:8: note:  
		    def operator<<(num : var)    := (value<<num);
		       ^

0 [0x0]: line: 155 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shl ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint32>.operator>>[542] params(1) in file: lib\support\0.2.805/primitives.sharp:157:8: note:  
		    def operator>>(num : ulong)  := (value>>num.value);
		       ^

0 [0x0]: line: 157 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>>[543] params(1) in file: lib\support\0.2.805/primitives.sharp:158:8: note:  
		    def operator>>(num : long)   := (value>>num.value);
		       ^

0 [0x0]: line: 158 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>>[544] params(1) in file: lib\support\0.2.805/primitives.sharp:159:8: note:  
		    def operator>>(num : uint)   := (value>>num.value);
		       ^

0 [0x0]: line: 159 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>>[545] params(1) in file: lib\support\0.2.805/primitives.sharp:160:8: note:  
		    def operator>>(num : int)    := (value>>num.value);
		       ^

0 [0x0]: line: 160 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>>[546] params(1) in file: lib\support\0.2.805/primitives.sharp:161:8: note:  
		    def operator>>(num : ushort) := (value>>num.value);
		       ^

0 [0x0]: line: 161 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>>[547] params(1) in file: lib\support\0.2.805/primitives.sharp:162:8: note:  
		    def operator>>(num : short)  := (value>>num.value);
		       ^

0 [0x0]: line: 162 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>>[548] params(1) in file: lib\support\0.2.805/primitives.sharp:163:8: note:  
		    def operator>>(num : uchar)  := (value>>num.value);
		       ^

0 [0x0]: line: 163 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>>[549] params(1) in file: lib\support\0.2.805/primitives.sharp:164:8: note:  
		    def operator>>(num : char)   := (value>>num.value);
		       ^

0 [0x0]: line: 164 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>>[550] params(1) in file: lib\support\0.2.805/primitives.sharp:165:8: note:  
		    def operator>>(num : byte)   := (value>>num.value);
		       ^

0 [0x0]: line: 165 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>>[551] params(1) in file: lib\support\0.2.805/primitives.sharp:166:8: note:  
		    def operator>>(num : bool)   := (value>>num.value);
		       ^

0 [0x0]: line: 166 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>>[552] params(1) in file: lib\support\0.2.805/primitives.sharp:167:8: note:  
		    def operator>>(num : var)    := (value>>num);
		       ^

0 [0x0]: line: 167 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shr ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint32>.operator^[553] params(1) in file: lib\support\0.2.805/primitives.sharp:169:8: note:  
		    def operator^(num : ulong)  := (value^num.value);
		       ^

0 [0x0]: line: 169 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator^[554] params(1) in file: lib\support\0.2.805/primitives.sharp:170:8: note:  
		    def operator^(num : long)   := (value^num.value);
		       ^

0 [0x0]: line: 170 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator^[555] params(1) in file: lib\support\0.2.805/primitives.sharp:171:8: note:  
		    def operator^(num : uint)   := (value^num.value);
		       ^

0 [0x0]: line: 171 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator^[556] params(1) in file: lib\support\0.2.805/primitives.sharp:172:8: note:  
		    def operator^(num : int)    := (value^num.value);
		       ^

0 [0x0]: line: 172 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator^[557] params(1) in file: lib\support\0.2.805/primitives.sharp:173:8: note:  
		    def operator^(num : ushort) := (value^num.value);
		       ^

0 [0x0]: line: 173 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator^[558] params(1) in file: lib\support\0.2.805/primitives.sharp:174:8: note:  
		    def operator^(num : short)  := (value^num.value);
		       ^

0 [0x0]: line: 174 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator^[559] params(1) in file: lib\support\0.2.805/primitives.sharp:175:8: note:  
		    def operator^(num : uchar)  := (value^num.value);
		       ^

0 [0x0]: line: 175 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator^[560] params(1) in file: lib\support\0.2.805/primitives.sharp:176:8: note:  
		    def operator^(num : char)   := (value^num.value);
		       ^

0 [0x0]: line: 176 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator^[561] params(1) in file: lib\support\0.2.805/primitives.sharp:177:8: note:  
		    def operator^(num : byte)   := (value^num.value);
		       ^

0 [0x0]: line: 177 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator^[562] params(1) in file: lib\support\0.2.805/primitives.sharp:178:8: note:  
		    def operator^(num : bool)   := (value^num.value);
		       ^

0 [0x0]: line: 178 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator^[563] params(1) in file: lib\support\0.2.805/primitives.sharp:179:8: note:  
		    def operator^(num : var)    := (value^num);
		       ^

0 [0x0]: line: 179 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           xor ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint32>.operator&[564] params(1) in file: lib\support\0.2.805/primitives.sharp:181:8: note:  
		    def operator&(num : ulong)  := (value&num.value);
		       ^

0 [0x0]: line: 181 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator&[565] params(1) in file: lib\support\0.2.805/primitives.sharp:182:8: note:  
		    def operator&(num : long)   := (value&num.value);
		       ^

0 [0x0]: line: 182 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator&[566] params(1) in file: lib\support\0.2.805/primitives.sharp:183:8: note:  
		    def operator&(num : uint)   := (value&num.value);
		       ^

0 [0x0]: line: 183 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator&[567] params(1) in file: lib\support\0.2.805/primitives.sharp:184:8: note:  
		    def operator&(num : int)    := (value&num.value);
		       ^

0 [0x0]: line: 184 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator&[568] params(1) in file: lib\support\0.2.805/primitives.sharp:185:8: note:  
		    def operator&(num : ushort) := (value&num.value);
		       ^

0 [0x0]: line: 185 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator&[569] params(1) in file: lib\support\0.2.805/primitives.sharp:186:8: note:  
		    def operator&(num : short)  := (value&num.value);
		       ^

0 [0x0]: line: 186 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator&[570] params(1) in file: lib\support\0.2.805/primitives.sharp:187:8: note:  
		    def operator&(num : uchar)  := (value&num.value);
		       ^

0 [0x0]: line: 187 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator&[571] params(1) in file: lib\support\0.2.805/primitives.sharp:188:8: note:  
		    def operator&(num : char)   := (value&num.value);
		       ^

0 [0x0]: line: 188 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator&[572] params(1) in file: lib\support\0.2.805/primitives.sharp:189:8: note:  
		    def operator&(num : byte)   := (value&num.value);
		       ^

0 [0x0]: line: 189 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator&[573] params(1) in file: lib\support\0.2.805/primitives.sharp:190:8: note:  
		    def operator&(num : bool)   := (value&num.value);
		       ^

0 [0x0]: line: 190 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator&[574] params(1) in file: lib\support\0.2.805/primitives.sharp:191:8: note:  
		    def operator&(num : var)    := (value&num);
		       ^

0 [0x0]: line: 191 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           uand ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint32>.operator|[575] params(1) in file: lib\support\0.2.805/primitives.sharp:193:8: note:  
		    def operator|(num : ulong)  := (value|num.value);
		       ^

0 [0x0]: line: 193 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator|[576] params(1) in file: lib\support\0.2.805/primitives.sharp:194:8: note:  
		    def operator|(num : long)   := (value|num.value);
		       ^

0 [0x0]: line: 194 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator|[577] params(1) in file: lib\support\0.2.805/primitives.sharp:195:8: note:  
		    def operator|(num : uint)   := (value|num.value);
		       ^

0 [0x0]: line: 195 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator|[578] params(1) in file: lib\support\0.2.805/primitives.sharp:196:8: note:  
		    def operator|(num : int)    := (value|num.value);
		       ^

0 [0x0]: line: 196 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator|[579] params(1) in file: lib\support\0.2.805/primitives.sharp:197:8: note:  
		    def operator|(num : ushort) := (value|num.value);
		       ^

0 [0x0]: line: 197 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator|[580] params(1) in file: lib\support\0.2.805/primitives.sharp:198:8: note:  
		    def operator|(num : short)  := (value|num.value);
		       ^

0 [0x0]: line: 198 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator|[581] params(1) in file: lib\support\0.2.805/primitives.sharp:199:8: note:  
		    def operator|(num : uchar)  := (value|num.value);
		       ^

0 [0x0]: line: 199 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator|[582] params(1) in file: lib\support\0.2.805/primitives.sharp:200:8: note:  
		    def operator|(num : char)   := (value|num.value);
		       ^

0 [0x0]: line: 200 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator|[583] params(1) in file: lib\support\0.2.805/primitives.sharp:201:8: note:  
		    def operator|(num : byte)   := (value|num.value);
		       ^

0 [0x0]: line: 201 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator|[584] params(1) in file: lib\support\0.2.805/primitives.sharp:202:8: note:  
		    def operator|(num : bool)   := (value|num.value);
		       ^

0 [0x0]: line: 202 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator|[585] params(1) in file: lib\support\0.2.805/primitives.sharp:203:8: note:  
		    def operator|(num : var)    := (value|num);
		       ^

0 [0x0]: line: 203 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           or ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint32>.operator!=[586] params(1) in file: lib\support\0.2.805/primitives.sharp:205:8: note:  
		    def operator!=(num : var) := value!=num;
		       ^

0 [0x0]: line: 205 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           tne ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint32>.operator==[587] params(1) in file: lib\support\0.2.805/primitives.sharp:206:8: note:  
		    def operator==(num : var) := value==num;
		       ^

0 [0x0]: line: 206 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           test ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint32>.operator=[588] params(1) in file: lib\support\0.2.805/primitives.sharp:207:8: note:  
		    def operator=(num : var) := value=num;
		       ^

0 [0x0]: line: 207 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           loadval ebx   
5 [0x5]:           movu32 ebx, ebx   
6 [0x6]:           movi #0, adx   
8 [0x8]:           rmov adx, ebx   
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std#integer<_uint32>.to_string[589] params(0) in file: lib\support\0.2.805/primitives.sharp:209:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 210 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           newstr @22 //    
3 [0x3]:           call @2935 // <std#string.string>   
4 [0x4]:           movl 0   
5 [0x5]:           movn #0   
7 [0x7]:           movi #0, adx   
9 [0x9]:           iaload ebx, adx   
10 [0xa]:           rstore ebx   
11 [0xb]:           call @2974 // <std#string.operator+>   
12 [0xc]:           popobj2    
13 [0xd]:           returnobj   
14 [0xe]:           ret   


function: std#integer<_uint32>.parse[590] params(1) in file: lib\support\0.2.805/primitives.sharp:214:15: note:  
		    static def parse(s: string) : native_type {
		              ^

0 [0x0]: line: 215 istorel 0, fp+1   
2 [0x2]: line: 216 movi #0, ebx   
4 [0x4]:           movu32 ebx, ebx   
5 [0x5]:           smovr_2 ebx, fp+2   
6 [0x6]: line: 217 istorel 0, fp+3   
8 [0x8]: line: 218 pushl 0   
9 [0x9]:           call @2976 // <std#string.size>   
10 [0xa]:           ipopl 4   
11 [0xb]: line: 220 pushl 0   
12 [0xc]:           istore 0   
14 [0xe]:           call @2957 // <std#string.at>   
15 [0xf]:           loadval ebx   
16 [0x10]:           rstore ebx   
17 [0x11]:           movi #45, ebx   
19 [0x13]:           loadval ecx   
20 [0x14]:           test ecx, ebx   
21 [0x15]:           jne 26   
22 [0x16]: line: 221 istorel 1, fp+3   
24 [0x18]: line: 222 istorel 1, fp+1   
26 [0x1a]:           nop   
27 [0x1b]: line: 225 ipushl #1   
28 [0x1c]:           loadl ebx, fp+4   
29 [0x1d]:           loadval ecx   
30 [0x1e]:           lt ecx, ebx   
31 [0x1f]:           movr ebx, cmt   
32 [0x20]:           movr cmt, ebx   
33 [0x21]:           jne 79   
34 [0x22]: line: 226 pushl 0   
35 [0x23]:           ipushl #1   
36 [0x24]:           call @2957 // <std#string.at>   
37 [0x25]:           call @2724 // <std#char.is_digit>   
38 [0x26]:           loadval ebx   
39 [0x27]:           not ebx, ebx   
40 [0x28]:           movr cmt, ebx   
41 [0x29]:           jne 54   
42 [0x2a]: line: 227 new_class @4 // std#illegal_argument_exception   
43 [0x2b]:           dup    
44 [0x2c]:           new_class @64 // std#string   
45 [0x2d]:           dup    
46 [0x2e]:           newstr @137 // illegal char in string:    
47 [0x2f]:           call @2935 // <std#string.string>   
48 [0x30]:           pushl 0   
49 [0x31]:           ipushl #1   
50 [0x32]:           call @2957 // <std#string.at>   
51 [0x33]:           call @2968 // <std#string.operator+>   
52 [0x34]:           call @1630 // <std#illegal_argument_exception.illegal_argument_exception>   
53 [0x35]:           throw    
54 [0x36]:           nop   
55 [0x37]: line: 231 movi #10, ebx   
57 [0x39]:           loadl ecx, fp+2   
58 [0x3a]:           mul ecx, ebx -> ebx   
59 [0x3b]:           movu32 ebx, ebx   
60 [0x3c]:           smovr_2 ebx, fp+2   
61 [0x3d]: line: 232 pushl 0   
62 [0x3e]:           loadl ebx, fp+1   
63 [0x3f]:           movr egx, ebx   
64 [0x40]:           inc ebx   
65 [0x41]:           smovr_2 ebx, fp+1   
66 [0x42]:           rstore egx   
67 [0x43]:           call @2957 // <std#string.at>   
68 [0x44]:           loadval ebx   
69 [0x45]:           rstore ebx   
70 [0x46]:           movi #48, ebx   
72 [0x48]:           loadval ecx   
73 [0x49]:           sub ecx, ebx -> ebx   
74 [0x4a]:           loadl ecx, fp+2   
75 [0x4b]:           add ecx, ebx -> ebx   
76 [0x4c]:           movu32 ebx, ebx   
77 [0x4d]:           smovr_2 ebx, fp+2   
78 [0x4e]:           jmp @27   
79 [0x4f]: line: 234 loadl ebx, fp+3   
80 [0x50]:           movr cmt, ebx   
81 [0x51]:           jne 86   
82 [0x52]: line: 235 loadl ebx, fp+2   
83 [0x53]:           neg ebx, ebx   
84 [0x54]:           movu32 ebx, ebx   
85 [0x55]:           smovr_2 ebx, fp+2   
86 [0x56]:           nop   
87 [0x57]: line: 236 loadl ebx, fp+2   
88 [0x58]:           return_val ebx   
89 [0x59]:           ret   


function: std#integer<_uint32>.to_ulong[591] params(0) in file: lib\support\0.2.805/primitives.sharp:239:8: note:  
		    def to_ulong() := new ulong { value };
		       ^

0 [0x0]: line: 239 new_class @44 // std#ulong   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu64 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint32>.to_long[592] params(0) in file: lib\support\0.2.805/primitives.sharp:240:8: note:  
		    def to_long() := new long { value };
		       ^

0 [0x0]: line: 240 new_class @45 // std#long   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov64 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint32>.to_uint[593] params(0) in file: lib\support\0.2.805/primitives.sharp:241:8: note:  
		    def to_uint() := new uint { value };
		       ^

0 [0x0]: line: 241 new_class @46 // std#uint   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu32 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint32>.to_int[594] params(0) in file: lib\support\0.2.805/primitives.sharp:242:8: note:  
		    def to_int() := new int { value };
		       ^

0 [0x0]: line: 242 new_class @47 // std#int   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov32 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint32>.to_ushort[595] params(0) in file: lib\support\0.2.805/primitives.sharp:243:8: note:  
		    def to_ushort() := new ushort { value };
		       ^

0 [0x0]: line: 243 new_class @48 // std#ushort   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu16 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint32>.to_short[596] params(0) in file: lib\support\0.2.805/primitives.sharp:244:8: note:  
		    def to_short() := new short { value };
		       ^

0 [0x0]: line: 244 new_class @49 // std#short   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov16 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint32>.to_uchar[597] params(0) in file: lib\support\0.2.805/primitives.sharp:245:8: note:  
		    def to_uchar() := new uchar { value };
		       ^

0 [0x0]: line: 245 new_class @50 // std#uchar   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint32>.to_char[598] params(0) in file: lib\support\0.2.805/primitives.sharp:246:8: note:  
		    def to_char() := new char { value };
		       ^

0 [0x0]: line: 246 new_class @51 // std#char   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint32>.to_byte[599] params(0) in file: lib\support\0.2.805/primitives.sharp:247:8: note:  
		    def to_byte() := new byte { value };
		       ^

0 [0x0]: line: 247 new_class @52 // std#byte   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint32>.to_bool[600] params(0) in file: lib\support\0.2.805/primitives.sharp:248:8: note:  
		    def to_bool() := new bool { value };
		       ^

0 [0x0]: line: 248 new_class @53 // std#bool   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint32>.get_value[601] params(0) in file: lib\support\0.2.805/primitives.sharp:250:8: note:  
		    def get_value() := value;
		       ^

0 [0x0]: line: 250 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


constructor: std#integer<_uint32>.integer[602] params(0) in file: lib\support\0.2.805/primitives.sharp:5:13: note:  
		public class integer<native_type> {
		            ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#integer<_int32>.integer[603] params(1) in file: lib\support\0.2.805/primitives.sharp:8:12: note:  
		    integer(initial_val : var) {
		           ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 9 ipushl #1   
2 [0x2]:         movl 0   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         mov32 ebx, ebx   
7 [0x7]:         movi #0, adx   
9 [0x9]:         rmov adx, ebx   
10 [0xa]:         ret   


function: std#integer<_int32>.hash[604] params(0) in file: lib\support\0.2.805/primitives.sharp:12:8: note:  
		    def hash() : long {
		       ^

0 [0x0]: line: 13 new_class @45 // std#long   
1 [0x1]:          dup    
2 [0x2]:          movl 0   
3 [0x3]:          movn #0   
5 [0x5]:          movi #0, adx   
7 [0x7]:          iaload ebx, adx   
8 [0x8]:          rstore ebx   
9 [0x9]:          call @2077 // <std#long.long>   
10 [0xa]:          popobj2    
11 [0xb]:          returnobj   
12 [0xc]:          ret   


overload function: std#integer<_int32>.operator!=[605] params(1) in file: lib\support\0.2.805/primitives.sharp:16:8: note:  
		    def operator!=(num : ulong) := (value!=num.value);
		       ^

0 [0x0]: line: 16 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator==[606] params(1) in file: lib\support\0.2.805/primitives.sharp:17:8: note:  
		    def operator==(num : ulong) := (value==num.value);
		       ^

0 [0x0]: line: 17 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator!=[607] params(1) in file: lib\support\0.2.805/primitives.sharp:18:8: note:  
		    def operator!=(num : long) := (value!=num.value);
		       ^

0 [0x0]: line: 18 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator==[608] params(1) in file: lib\support\0.2.805/primitives.sharp:19:8: note:  
		    def operator==(num : long) := (value==num.value);
		       ^

0 [0x0]: line: 19 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator!=[609] params(1) in file: lib\support\0.2.805/primitives.sharp:20:8: note:  
		    def operator!=(num : uint) := (value!=num.value);
		       ^

0 [0x0]: line: 20 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator==[610] params(1) in file: lib\support\0.2.805/primitives.sharp:21:8: note:  
		    def operator==(num : uint) := (value==num.value);
		       ^

0 [0x0]: line: 21 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator!=[611] params(1) in file: lib\support\0.2.805/primitives.sharp:22:8: note:  
		    def operator!=(num : int) := (value!=num.value);
		       ^

0 [0x0]: line: 22 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator==[612] params(1) in file: lib\support\0.2.805/primitives.sharp:23:8: note:  
		    def operator==(num : int) := (value==num.value);
		       ^

0 [0x0]: line: 23 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator!=[613] params(1) in file: lib\support\0.2.805/primitives.sharp:24:8: note:  
		    def operator!=(num : ushort) := (value!=num.value);
		       ^

0 [0x0]: line: 24 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator==[614] params(1) in file: lib\support\0.2.805/primitives.sharp:25:8: note:  
		    def operator==(num : ushort) := (value==num.value);
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator!=[615] params(1) in file: lib\support\0.2.805/primitives.sharp:26:8: note:  
		    def operator!=(num : short) := (value!=num.value);
		       ^

0 [0x0]: line: 26 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator==[616] params(1) in file: lib\support\0.2.805/primitives.sharp:27:8: note:  
		    def operator==(num : short) := (value==num.value);
		       ^

0 [0x0]: line: 27 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator!=[617] params(1) in file: lib\support\0.2.805/primitives.sharp:28:8: note:  
		    def operator!=(num : uchar) := (value!=num.value);
		       ^

0 [0x0]: line: 28 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator==[618] params(1) in file: lib\support\0.2.805/primitives.sharp:29:8: note:  
		    def operator==(num : uchar) := (value==num.value);
		       ^

0 [0x0]: line: 29 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator!=[619] params(1) in file: lib\support\0.2.805/primitives.sharp:30:8: note:  
		    def operator!=(num : char) := (value!=num.value);
		       ^

0 [0x0]: line: 30 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator==[620] params(1) in file: lib\support\0.2.805/primitives.sharp:31:8: note:  
		    def operator==(num : char) := (value==num.value);
		       ^

0 [0x0]: line: 31 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator!=[621] params(1) in file: lib\support\0.2.805/primitives.sharp:32:8: note:  
		    def operator!=(num : byte) := (value!=num.value);
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator==[622] params(1) in file: lib\support\0.2.805/primitives.sharp:33:8: note:  
		    def operator==(num : byte) := (value==num.value);
		       ^

0 [0x0]: line: 33 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator!=[623] params(1) in file: lib\support\0.2.805/primitives.sharp:34:8: note:  
		    def operator!=(num : bool) := (value!=num.value);
		       ^

0 [0x0]: line: 34 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator==[624] params(1) in file: lib\support\0.2.805/primitives.sharp:35:8: note:  
		    def operator==(num : bool) := (value==num.value);
		       ^

0 [0x0]: line: 35 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator+[625] params(1) in file: lib\support\0.2.805/primitives.sharp:37:8: note:  
		    def operator+(num : ulong)  := (value+num.value);
		       ^

0 [0x0]: line: 37 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator+[626] params(1) in file: lib\support\0.2.805/primitives.sharp:38:8: note:  
		    def operator+(num : long)   := (value+num.value);
		       ^

0 [0x0]: line: 38 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator+[627] params(1) in file: lib\support\0.2.805/primitives.sharp:39:8: note:  
		    def operator+(num : uint)   := (value+num.value);
		       ^

0 [0x0]: line: 39 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator+[628] params(1) in file: lib\support\0.2.805/primitives.sharp:40:8: note:  
		    def operator+(num : int)    := (value+num.value);
		       ^

0 [0x0]: line: 40 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator+[629] params(1) in file: lib\support\0.2.805/primitives.sharp:41:8: note:  
		    def operator+(num : ushort) := (value+num.value);
		       ^

0 [0x0]: line: 41 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator+[630] params(1) in file: lib\support\0.2.805/primitives.sharp:42:8: note:  
		    def operator+(num : short)  := (value+num.value);
		       ^

0 [0x0]: line: 42 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator+[631] params(1) in file: lib\support\0.2.805/primitives.sharp:43:8: note:  
		    def operator+(num : uchar)  := (value+num.value);
		       ^

0 [0x0]: line: 43 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator+[632] params(1) in file: lib\support\0.2.805/primitives.sharp:44:8: note:  
		    def operator+(num : char)   := (value+num.value);
		       ^

0 [0x0]: line: 44 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator+[633] params(1) in file: lib\support\0.2.805/primitives.sharp:45:8: note:  
		    def operator+(num : byte)   := (value+num.value);
		       ^

0 [0x0]: line: 45 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator+[634] params(1) in file: lib\support\0.2.805/primitives.sharp:46:8: note:  
		    def operator+(num : bool)   := (value+num.value);
		       ^

0 [0x0]: line: 46 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator+[635] params(1) in file: lib\support\0.2.805/primitives.sharp:47:8: note:  
		    def operator+(num : var)    := (value+num);
		       ^

0 [0x0]: line: 47 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          add ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int32>.operator-[636] params(1) in file: lib\support\0.2.805/primitives.sharp:49:8: note:  
		    def operator-(num : ulong)  := (value-num.value);
		       ^

0 [0x0]: line: 49 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator-[637] params(1) in file: lib\support\0.2.805/primitives.sharp:50:8: note:  
		    def operator-(num : long)   := (value-num.value);
		       ^

0 [0x0]: line: 50 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator-[638] params(1) in file: lib\support\0.2.805/primitives.sharp:51:8: note:  
		    def operator-(num : uint)   := (value-num.value);
		       ^

0 [0x0]: line: 51 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator-[639] params(1) in file: lib\support\0.2.805/primitives.sharp:52:8: note:  
		    def operator-(num : int)    := (value-num.value);
		       ^

0 [0x0]: line: 52 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator-[640] params(1) in file: lib\support\0.2.805/primitives.sharp:53:8: note:  
		    def operator-(num : ushort) := (value-num.value);
		       ^

0 [0x0]: line: 53 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator-[641] params(1) in file: lib\support\0.2.805/primitives.sharp:54:8: note:  
		    def operator-(num : short)  := (value-num.value);
		       ^

0 [0x0]: line: 54 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator-[642] params(1) in file: lib\support\0.2.805/primitives.sharp:55:8: note:  
		    def operator-(num : uchar)  := (value-num.value);
		       ^

0 [0x0]: line: 55 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator-[643] params(1) in file: lib\support\0.2.805/primitives.sharp:56:8: note:  
		    def operator-(num : char)   := (value-num.value);
		       ^

0 [0x0]: line: 56 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator-[644] params(1) in file: lib\support\0.2.805/primitives.sharp:57:8: note:  
		    def operator-(num : byte)   := (value-num.value);
		       ^

0 [0x0]: line: 57 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator-[645] params(1) in file: lib\support\0.2.805/primitives.sharp:58:8: note:  
		    def operator-(num : bool)   := (value-num.value);
		       ^

0 [0x0]: line: 58 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator-[646] params(1) in file: lib\support\0.2.805/primitives.sharp:59:8: note:  
		    def operator-(num : var)    := (value-num);
		       ^

0 [0x0]: line: 59 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          sub ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int32>.operator*[647] params(1) in file: lib\support\0.2.805/primitives.sharp:61:8: note:  
		    def operator*(num : ulong)  := (value*num.value);
		       ^

0 [0x0]: line: 61 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator*[648] params(1) in file: lib\support\0.2.805/primitives.sharp:62:8: note:  
		    def operator*(num : long)   := (value*num.value);
		       ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator*[649] params(1) in file: lib\support\0.2.805/primitives.sharp:63:8: note:  
		    def operator*(num : uint)   := (value*num.value);
		       ^

0 [0x0]: line: 63 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator*[650] params(1) in file: lib\support\0.2.805/primitives.sharp:64:8: note:  
		    def operator*(num : int)    := (value*num.value);
		       ^

0 [0x0]: line: 64 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator*[651] params(1) in file: lib\support\0.2.805/primitives.sharp:65:8: note:  
		    def operator*(num : ushort) := (value*num.value);
		       ^

0 [0x0]: line: 65 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator*[652] params(1) in file: lib\support\0.2.805/primitives.sharp:66:8: note:  
		    def operator*(num : short)  := (value*num.value);
		       ^

0 [0x0]: line: 66 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator*[653] params(1) in file: lib\support\0.2.805/primitives.sharp:67:8: note:  
		    def operator*(num : uchar)  := (value*num.value);
		       ^

0 [0x0]: line: 67 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator*[654] params(1) in file: lib\support\0.2.805/primitives.sharp:68:8: note:  
		    def operator*(num : char)   := (value*num.value);
		       ^

0 [0x0]: line: 68 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator*[655] params(1) in file: lib\support\0.2.805/primitives.sharp:69:8: note:  
		    def operator*(num : byte)   := (value*num.value);
		       ^

0 [0x0]: line: 69 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator*[656] params(1) in file: lib\support\0.2.805/primitives.sharp:70:8: note:  
		    def operator*(num : bool)   := (value*num.value);
		       ^

0 [0x0]: line: 70 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator*[657] params(1) in file: lib\support\0.2.805/primitives.sharp:71:8: note:  
		    def operator*(num : var)    := (value*num);
		       ^

0 [0x0]: line: 71 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          mul ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int32>.operator/[658] params(1) in file: lib\support\0.2.805/primitives.sharp:73:8: note:  
		    def operator/(num : ulong)  := (value/num.value);
		       ^

0 [0x0]: line: 73 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator/[659] params(1) in file: lib\support\0.2.805/primitives.sharp:74:8: note:  
		    def operator/(num : long)   := (value/num.value);
		       ^

0 [0x0]: line: 74 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator/[660] params(1) in file: lib\support\0.2.805/primitives.sharp:75:8: note:  
		    def operator/(num : uint)   := (value/num.value);
		       ^

0 [0x0]: line: 75 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator/[661] params(1) in file: lib\support\0.2.805/primitives.sharp:76:8: note:  
		    def operator/(num : int)    := (value/num.value);
		       ^

0 [0x0]: line: 76 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator/[662] params(1) in file: lib\support\0.2.805/primitives.sharp:77:8: note:  
		    def operator/(num : ushort) := (value/num.value);
		       ^

0 [0x0]: line: 77 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator/[663] params(1) in file: lib\support\0.2.805/primitives.sharp:78:8: note:  
		    def operator/(num : short)  := (value/num.value);
		       ^

0 [0x0]: line: 78 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator/[664] params(1) in file: lib\support\0.2.805/primitives.sharp:79:8: note:  
		    def operator/(num : uchar)  := (value/num.value);
		       ^

0 [0x0]: line: 79 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator/[665] params(1) in file: lib\support\0.2.805/primitives.sharp:80:8: note:  
		    def operator/(num : char)   := (value/num.value);
		       ^

0 [0x0]: line: 80 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator/[666] params(1) in file: lib\support\0.2.805/primitives.sharp:81:8: note:  
		    def operator/(num : byte)   := (value/num.value);
		       ^

0 [0x0]: line: 81 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator/[667] params(1) in file: lib\support\0.2.805/primitives.sharp:82:8: note:  
		    def operator/(num : bool)   := (value/num.value);
		       ^

0 [0x0]: line: 82 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator/[668] params(1) in file: lib\support\0.2.805/primitives.sharp:83:8: note:  
		    def operator/(num : var)    := (value/num);
		       ^

0 [0x0]: line: 83 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          div ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int32>.operator%[669] params(1) in file: lib\support\0.2.805/primitives.sharp:85:8: note:  
		    def operator%(num : ulong)  := (value%num.value);
		       ^

0 [0x0]: line: 85 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator%[670] params(1) in file: lib\support\0.2.805/primitives.sharp:86:8: note:  
		    def operator%(num : long)   := (value%num.value);
		       ^

0 [0x0]: line: 86 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator%[671] params(1) in file: lib\support\0.2.805/primitives.sharp:87:8: note:  
		    def operator%(num : uint)   := (value%num.value);
		       ^

0 [0x0]: line: 87 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator%[672] params(1) in file: lib\support\0.2.805/primitives.sharp:88:8: note:  
		    def operator%(num : int)    := (value%num.value);
		       ^

0 [0x0]: line: 88 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator%[673] params(1) in file: lib\support\0.2.805/primitives.sharp:89:8: note:  
		    def operator%(num : ushort) := (value%num.value);
		       ^

0 [0x0]: line: 89 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator%[674] params(1) in file: lib\support\0.2.805/primitives.sharp:90:8: note:  
		    def operator%(num : short)  := (value%num.value);
		       ^

0 [0x0]: line: 90 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator%[675] params(1) in file: lib\support\0.2.805/primitives.sharp:91:8: note:  
		    def operator%(num : uchar)  := (value%num.value);
		       ^

0 [0x0]: line: 91 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator%[676] params(1) in file: lib\support\0.2.805/primitives.sharp:92:8: note:  
		    def operator%(num : char)   := (value%num.value);
		       ^

0 [0x0]: line: 92 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator%[677] params(1) in file: lib\support\0.2.805/primitives.sharp:93:8: note:  
		    def operator%(num : byte)   := (value%num.value);
		       ^

0 [0x0]: line: 93 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator%[678] params(1) in file: lib\support\0.2.805/primitives.sharp:94:8: note:  
		    def operator%(num : bool)   := (value%num.value);
		       ^

0 [0x0]: line: 94 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator%[679] params(1) in file: lib\support\0.2.805/primitives.sharp:95:8: note:  
		    def operator%(num : var)    := (value%num);
		       ^

0 [0x0]: line: 95 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          mod ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int32>.operator<[680] params(1) in file: lib\support\0.2.805/primitives.sharp:97:8: note:  
		    def operator<(num : ulong)  := (value<num.value);
		       ^

0 [0x0]: line: 97 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator<[681] params(1) in file: lib\support\0.2.805/primitives.sharp:98:8: note:  
		    def operator<(num : long)   := (value<num.value);
		       ^

0 [0x0]: line: 98 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator<[682] params(1) in file: lib\support\0.2.805/primitives.sharp:99:8: note:  
		    def operator<(num : uint)   := (value<num.value);
		       ^

0 [0x0]: line: 99 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator<[683] params(1) in file: lib\support\0.2.805/primitives.sharp:100:8: note:  
		    def operator<(num : int)    := (value<num.value);
		       ^

0 [0x0]: line: 100 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<[684] params(1) in file: lib\support\0.2.805/primitives.sharp:101:8: note:  
		    def operator<(num : ushort) := (value<num.value);
		       ^

0 [0x0]: line: 101 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<[685] params(1) in file: lib\support\0.2.805/primitives.sharp:102:8: note:  
		    def operator<(num : short)  := (value<num.value);
		       ^

0 [0x0]: line: 102 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<[686] params(1) in file: lib\support\0.2.805/primitives.sharp:103:8: note:  
		    def operator<(num : uchar)  := (value<num.value);
		       ^

0 [0x0]: line: 103 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<[687] params(1) in file: lib\support\0.2.805/primitives.sharp:104:8: note:  
		    def operator<(num : char)   := (value<num.value);
		       ^

0 [0x0]: line: 104 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<[688] params(1) in file: lib\support\0.2.805/primitives.sharp:105:8: note:  
		    def operator<(num : byte)   := (value<num.value);
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<[689] params(1) in file: lib\support\0.2.805/primitives.sharp:106:8: note:  
		    def operator<(num : bool)   := (value<num.value);
		       ^

0 [0x0]: line: 106 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<[690] params(1) in file: lib\support\0.2.805/primitives.sharp:107:8: note:  
		    def operator<(num : var)    := (value<num);
		       ^

0 [0x0]: line: 107 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           lt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int32>.operator>[691] params(1) in file: lib\support\0.2.805/primitives.sharp:109:8: note:  
		    def operator>(num : ulong)  := (value>num.value);
		       ^

0 [0x0]: line: 109 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>[692] params(1) in file: lib\support\0.2.805/primitives.sharp:110:8: note:  
		    def operator>(num : long)   := (value>num.value);
		       ^

0 [0x0]: line: 110 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>[693] params(1) in file: lib\support\0.2.805/primitives.sharp:111:8: note:  
		    def operator>(num : uint)   := (value>num.value);
		       ^

0 [0x0]: line: 111 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>[694] params(1) in file: lib\support\0.2.805/primitives.sharp:112:8: note:  
		    def operator>(num : int)    := (value>num.value);
		       ^

0 [0x0]: line: 112 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>[695] params(1) in file: lib\support\0.2.805/primitives.sharp:113:8: note:  
		    def operator>(num : ushort) := (value>num.value);
		       ^

0 [0x0]: line: 113 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>[696] params(1) in file: lib\support\0.2.805/primitives.sharp:114:8: note:  
		    def operator>(num : short)  := (value>num.value);
		       ^

0 [0x0]: line: 114 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>[697] params(1) in file: lib\support\0.2.805/primitives.sharp:115:8: note:  
		    def operator>(num : uchar)  := (value>num.value);
		       ^

0 [0x0]: line: 115 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>[698] params(1) in file: lib\support\0.2.805/primitives.sharp:116:8: note:  
		    def operator>(num : char)   := (value>num.value);
		       ^

0 [0x0]: line: 116 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>[699] params(1) in file: lib\support\0.2.805/primitives.sharp:117:8: note:  
		    def operator>(num : byte)   := (value>num.value);
		       ^

0 [0x0]: line: 117 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>[700] params(1) in file: lib\support\0.2.805/primitives.sharp:118:8: note:  
		    def operator>(num : bool)   := (value>num.value);
		       ^

0 [0x0]: line: 118 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>[701] params(1) in file: lib\support\0.2.805/primitives.sharp:119:8: note:  
		    def operator>(num : var)    := (value>num);
		       ^

0 [0x0]: line: 119 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int32>.operator<=[702] params(1) in file: lib\support\0.2.805/primitives.sharp:121:8: note:  
		    def operator<=(num : ulong)  := (value>=num.value);
		       ^

0 [0x0]: line: 121 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<=[703] params(1) in file: lib\support\0.2.805/primitives.sharp:122:8: note:  
		    def operator<=(num : long)   := (value>=num.value);
		       ^

0 [0x0]: line: 122 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<=[704] params(1) in file: lib\support\0.2.805/primitives.sharp:123:8: note:  
		    def operator<=(num : uint)   := (value>=num.value);
		       ^

0 [0x0]: line: 123 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<=[705] params(1) in file: lib\support\0.2.805/primitives.sharp:124:8: note:  
		    def operator<=(num : int)    := (value>=num.value);
		       ^

0 [0x0]: line: 124 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<=[706] params(1) in file: lib\support\0.2.805/primitives.sharp:125:8: note:  
		    def operator<=(num : ushort) := (value>=num.value);
		       ^

0 [0x0]: line: 125 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<=[707] params(1) in file: lib\support\0.2.805/primitives.sharp:126:8: note:  
		    def operator<=(num : short)  := (value>=num.value);
		       ^

0 [0x0]: line: 126 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<=[708] params(1) in file: lib\support\0.2.805/primitives.sharp:127:8: note:  
		    def operator<=(num : uchar)  := (value>=num.value);
		       ^

0 [0x0]: line: 127 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<=[709] params(1) in file: lib\support\0.2.805/primitives.sharp:128:8: note:  
		    def operator<=(num : char)   := (value>=num.value);
		       ^

0 [0x0]: line: 128 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<=[710] params(1) in file: lib\support\0.2.805/primitives.sharp:129:8: note:  
		    def operator<=(num : byte)   := (value>=num.value);
		       ^

0 [0x0]: line: 129 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<=[711] params(1) in file: lib\support\0.2.805/primitives.sharp:130:8: note:  
		    def operator<=(num : bool)   := (value>=num.value);
		       ^

0 [0x0]: line: 130 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<=[712] params(1) in file: lib\support\0.2.805/primitives.sharp:131:8: note:  
		    def operator<=(num : var)    := (value>=num);
		       ^

0 [0x0]: line: 131 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gte ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int32>.operator**[713] params(1) in file: lib\support\0.2.805/primitives.sharp:133:8: note:  
		    def operator**(num : ulong)  := (value**num.value);
		       ^

0 [0x0]: line: 133 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator**[714] params(1) in file: lib\support\0.2.805/primitives.sharp:134:8: note:  
		    def operator**(num : long)   := (value**num.value);
		       ^

0 [0x0]: line: 134 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator**[715] params(1) in file: lib\support\0.2.805/primitives.sharp:135:8: note:  
		    def operator**(num : uint)   := (value**num.value);
		       ^

0 [0x0]: line: 135 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator**[716] params(1) in file: lib\support\0.2.805/primitives.sharp:136:8: note:  
		    def operator**(num : int)    := (value**num.value);
		       ^

0 [0x0]: line: 136 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator**[717] params(1) in file: lib\support\0.2.805/primitives.sharp:137:8: note:  
		    def operator**(num : ushort) := (value**num.value);
		       ^

0 [0x0]: line: 137 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator**[718] params(1) in file: lib\support\0.2.805/primitives.sharp:138:8: note:  
		    def operator**(num : short)  := (value**num.value);
		       ^

0 [0x0]: line: 138 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator**[719] params(1) in file: lib\support\0.2.805/primitives.sharp:139:8: note:  
		    def operator**(num : uchar)  := (value**num.value);
		       ^

0 [0x0]: line: 139 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator**[720] params(1) in file: lib\support\0.2.805/primitives.sharp:140:8: note:  
		    def operator**(num : char)   := (value**num.value);
		       ^

0 [0x0]: line: 140 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator**[721] params(1) in file: lib\support\0.2.805/primitives.sharp:141:8: note:  
		    def operator**(num : byte)   := (value**num.value);
		       ^

0 [0x0]: line: 141 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator**[722] params(1) in file: lib\support\0.2.805/primitives.sharp:142:8: note:  
		    def operator**(num : bool)   := (value**num.value);
		       ^

0 [0x0]: line: 142 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator**[723] params(1) in file: lib\support\0.2.805/primitives.sharp:143:8: note:  
		    def operator**(num : var)    := (value**num);
		       ^

0 [0x0]: line: 143 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           exp ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int32>.operator<<[724] params(1) in file: lib\support\0.2.805/primitives.sharp:145:8: note:  
		    def operator<<(num : ulong)  := (value<<num.value);
		       ^

0 [0x0]: line: 145 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<<[725] params(1) in file: lib\support\0.2.805/primitives.sharp:146:8: note:  
		    def operator<<(num : long)   := (value<<num.value);
		       ^

0 [0x0]: line: 146 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<<[726] params(1) in file: lib\support\0.2.805/primitives.sharp:147:8: note:  
		    def operator<<(num : uint)   := (value<<num.value);
		       ^

0 [0x0]: line: 147 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<<[727] params(1) in file: lib\support\0.2.805/primitives.sharp:148:8: note:  
		    def operator<<(num : int)    := (value<<num.value);
		       ^

0 [0x0]: line: 148 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<<[728] params(1) in file: lib\support\0.2.805/primitives.sharp:149:8: note:  
		    def operator<<(num : ushort) := (value<<num.value);
		       ^

0 [0x0]: line: 149 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<<[729] params(1) in file: lib\support\0.2.805/primitives.sharp:150:8: note:  
		    def operator<<(num : short)  := (value<<num.value);
		       ^

0 [0x0]: line: 150 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<<[730] params(1) in file: lib\support\0.2.805/primitives.sharp:151:8: note:  
		    def operator<<(num : uchar)  := (value<<num.value);
		       ^

0 [0x0]: line: 151 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<<[731] params(1) in file: lib\support\0.2.805/primitives.sharp:152:8: note:  
		    def operator<<(num : char)   := (value<<num.value);
		       ^

0 [0x0]: line: 152 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<<[732] params(1) in file: lib\support\0.2.805/primitives.sharp:153:8: note:  
		    def operator<<(num : byte)   := (value<<num.value);
		       ^

0 [0x0]: line: 153 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<<[733] params(1) in file: lib\support\0.2.805/primitives.sharp:154:8: note:  
		    def operator<<(num : bool)   := (value<<num.value);
		       ^

0 [0x0]: line: 154 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<<[734] params(1) in file: lib\support\0.2.805/primitives.sharp:155:8: note:  
		    def operator<<(num : var)    := (value<<num);
		       ^

0 [0x0]: line: 155 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shl ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int32>.operator>>[735] params(1) in file: lib\support\0.2.805/primitives.sharp:157:8: note:  
		    def operator>>(num : ulong)  := (value>>num.value);
		       ^

0 [0x0]: line: 157 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>>[736] params(1) in file: lib\support\0.2.805/primitives.sharp:158:8: note:  
		    def operator>>(num : long)   := (value>>num.value);
		       ^

0 [0x0]: line: 158 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>>[737] params(1) in file: lib\support\0.2.805/primitives.sharp:159:8: note:  
		    def operator>>(num : uint)   := (value>>num.value);
		       ^

0 [0x0]: line: 159 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>>[738] params(1) in file: lib\support\0.2.805/primitives.sharp:160:8: note:  
		    def operator>>(num : int)    := (value>>num.value);
		       ^

0 [0x0]: line: 160 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>>[739] params(1) in file: lib\support\0.2.805/primitives.sharp:161:8: note:  
		    def operator>>(num : ushort) := (value>>num.value);
		       ^

0 [0x0]: line: 161 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>>[740] params(1) in file: lib\support\0.2.805/primitives.sharp:162:8: note:  
		    def operator>>(num : short)  := (value>>num.value);
		       ^

0 [0x0]: line: 162 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>>[741] params(1) in file: lib\support\0.2.805/primitives.sharp:163:8: note:  
		    def operator>>(num : uchar)  := (value>>num.value);
		       ^

0 [0x0]: line: 163 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>>[742] params(1) in file: lib\support\0.2.805/primitives.sharp:164:8: note:  
		    def operator>>(num : char)   := (value>>num.value);
		       ^

0 [0x0]: line: 164 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>>[743] params(1) in file: lib\support\0.2.805/primitives.sharp:165:8: note:  
		    def operator>>(num : byte)   := (value>>num.value);
		       ^

0 [0x0]: line: 165 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>>[744] params(1) in file: lib\support\0.2.805/primitives.sharp:166:8: note:  
		    def operator>>(num : bool)   := (value>>num.value);
		       ^

0 [0x0]: line: 166 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>>[745] params(1) in file: lib\support\0.2.805/primitives.sharp:167:8: note:  
		    def operator>>(num : var)    := (value>>num);
		       ^

0 [0x0]: line: 167 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shr ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int32>.operator^[746] params(1) in file: lib\support\0.2.805/primitives.sharp:169:8: note:  
		    def operator^(num : ulong)  := (value^num.value);
		       ^

0 [0x0]: line: 169 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator^[747] params(1) in file: lib\support\0.2.805/primitives.sharp:170:8: note:  
		    def operator^(num : long)   := (value^num.value);
		       ^

0 [0x0]: line: 170 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator^[748] params(1) in file: lib\support\0.2.805/primitives.sharp:171:8: note:  
		    def operator^(num : uint)   := (value^num.value);
		       ^

0 [0x0]: line: 171 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator^[749] params(1) in file: lib\support\0.2.805/primitives.sharp:172:8: note:  
		    def operator^(num : int)    := (value^num.value);
		       ^

0 [0x0]: line: 172 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator^[750] params(1) in file: lib\support\0.2.805/primitives.sharp:173:8: note:  
		    def operator^(num : ushort) := (value^num.value);
		       ^

0 [0x0]: line: 173 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator^[751] params(1) in file: lib\support\0.2.805/primitives.sharp:174:8: note:  
		    def operator^(num : short)  := (value^num.value);
		       ^

0 [0x0]: line: 174 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator^[752] params(1) in file: lib\support\0.2.805/primitives.sharp:175:8: note:  
		    def operator^(num : uchar)  := (value^num.value);
		       ^

0 [0x0]: line: 175 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator^[753] params(1) in file: lib\support\0.2.805/primitives.sharp:176:8: note:  
		    def operator^(num : char)   := (value^num.value);
		       ^

0 [0x0]: line: 176 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator^[754] params(1) in file: lib\support\0.2.805/primitives.sharp:177:8: note:  
		    def operator^(num : byte)   := (value^num.value);
		       ^

0 [0x0]: line: 177 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator^[755] params(1) in file: lib\support\0.2.805/primitives.sharp:178:8: note:  
		    def operator^(num : bool)   := (value^num.value);
		       ^

0 [0x0]: line: 178 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator^[756] params(1) in file: lib\support\0.2.805/primitives.sharp:179:8: note:  
		    def operator^(num : var)    := (value^num);
		       ^

0 [0x0]: line: 179 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           xor ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int32>.operator&[757] params(1) in file: lib\support\0.2.805/primitives.sharp:181:8: note:  
		    def operator&(num : ulong)  := (value&num.value);
		       ^

0 [0x0]: line: 181 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator&[758] params(1) in file: lib\support\0.2.805/primitives.sharp:182:8: note:  
		    def operator&(num : long)   := (value&num.value);
		       ^

0 [0x0]: line: 182 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator&[759] params(1) in file: lib\support\0.2.805/primitives.sharp:183:8: note:  
		    def operator&(num : uint)   := (value&num.value);
		       ^

0 [0x0]: line: 183 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator&[760] params(1) in file: lib\support\0.2.805/primitives.sharp:184:8: note:  
		    def operator&(num : int)    := (value&num.value);
		       ^

0 [0x0]: line: 184 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator&[761] params(1) in file: lib\support\0.2.805/primitives.sharp:185:8: note:  
		    def operator&(num : ushort) := (value&num.value);
		       ^

0 [0x0]: line: 185 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator&[762] params(1) in file: lib\support\0.2.805/primitives.sharp:186:8: note:  
		    def operator&(num : short)  := (value&num.value);
		       ^

0 [0x0]: line: 186 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator&[763] params(1) in file: lib\support\0.2.805/primitives.sharp:187:8: note:  
		    def operator&(num : uchar)  := (value&num.value);
		       ^

0 [0x0]: line: 187 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator&[764] params(1) in file: lib\support\0.2.805/primitives.sharp:188:8: note:  
		    def operator&(num : char)   := (value&num.value);
		       ^

0 [0x0]: line: 188 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator&[765] params(1) in file: lib\support\0.2.805/primitives.sharp:189:8: note:  
		    def operator&(num : byte)   := (value&num.value);
		       ^

0 [0x0]: line: 189 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator&[766] params(1) in file: lib\support\0.2.805/primitives.sharp:190:8: note:  
		    def operator&(num : bool)   := (value&num.value);
		       ^

0 [0x0]: line: 190 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator&[767] params(1) in file: lib\support\0.2.805/primitives.sharp:191:8: note:  
		    def operator&(num : var)    := (value&num);
		       ^

0 [0x0]: line: 191 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           uand ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int32>.operator|[768] params(1) in file: lib\support\0.2.805/primitives.sharp:193:8: note:  
		    def operator|(num : ulong)  := (value|num.value);
		       ^

0 [0x0]: line: 193 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator|[769] params(1) in file: lib\support\0.2.805/primitives.sharp:194:8: note:  
		    def operator|(num : long)   := (value|num.value);
		       ^

0 [0x0]: line: 194 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator|[770] params(1) in file: lib\support\0.2.805/primitives.sharp:195:8: note:  
		    def operator|(num : uint)   := (value|num.value);
		       ^

0 [0x0]: line: 195 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator|[771] params(1) in file: lib\support\0.2.805/primitives.sharp:196:8: note:  
		    def operator|(num : int)    := (value|num.value);
		       ^

0 [0x0]: line: 196 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator|[772] params(1) in file: lib\support\0.2.805/primitives.sharp:197:8: note:  
		    def operator|(num : ushort) := (value|num.value);
		       ^

0 [0x0]: line: 197 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator|[773] params(1) in file: lib\support\0.2.805/primitives.sharp:198:8: note:  
		    def operator|(num : short)  := (value|num.value);
		       ^

0 [0x0]: line: 198 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator|[774] params(1) in file: lib\support\0.2.805/primitives.sharp:199:8: note:  
		    def operator|(num : uchar)  := (value|num.value);
		       ^

0 [0x0]: line: 199 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator|[775] params(1) in file: lib\support\0.2.805/primitives.sharp:200:8: note:  
		    def operator|(num : char)   := (value|num.value);
		       ^

0 [0x0]: line: 200 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator|[776] params(1) in file: lib\support\0.2.805/primitives.sharp:201:8: note:  
		    def operator|(num : byte)   := (value|num.value);
		       ^

0 [0x0]: line: 201 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator|[777] params(1) in file: lib\support\0.2.805/primitives.sharp:202:8: note:  
		    def operator|(num : bool)   := (value|num.value);
		       ^

0 [0x0]: line: 202 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator|[778] params(1) in file: lib\support\0.2.805/primitives.sharp:203:8: note:  
		    def operator|(num : var)    := (value|num);
		       ^

0 [0x0]: line: 203 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           or ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int32>.operator!=[779] params(1) in file: lib\support\0.2.805/primitives.sharp:205:8: note:  
		    def operator!=(num : var) := value!=num;
		       ^

0 [0x0]: line: 205 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           tne ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int32>.operator==[780] params(1) in file: lib\support\0.2.805/primitives.sharp:206:8: note:  
		    def operator==(num : var) := value==num;
		       ^

0 [0x0]: line: 206 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           test ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int32>.operator=[781] params(1) in file: lib\support\0.2.805/primitives.sharp:207:8: note:  
		    def operator=(num : var) := value=num;
		       ^

0 [0x0]: line: 207 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           loadval ebx   
5 [0x5]:           mov32 ebx, ebx   
6 [0x6]:           movi #0, adx   
8 [0x8]:           rmov adx, ebx   
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std#integer<_int32>.to_string[782] params(0) in file: lib\support\0.2.805/primitives.sharp:209:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 210 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           newstr @22 //    
3 [0x3]:           call @2935 // <std#string.string>   
4 [0x4]:           movl 0   
5 [0x5]:           movn #0   
7 [0x7]:           movi #0, adx   
9 [0x9]:           iaload ebx, adx   
10 [0xa]:           rstore ebx   
11 [0xb]:           call @2970 // <std#string.operator+>   
12 [0xc]:           popobj2    
13 [0xd]:           returnobj   
14 [0xe]:           ret   


function: std#integer<_int32>.parse[783] params(1) in file: lib\support\0.2.805/primitives.sharp:214:15: note:  
		    static def parse(s: string) : native_type {
		              ^

0 [0x0]: line: 215 istorel 0, fp+1   
2 [0x2]: line: 216 movi #0, ebx   
4 [0x4]:           mov32 ebx, ebx   
5 [0x5]:           smovr_2 ebx, fp+2   
6 [0x6]: line: 217 istorel 0, fp+3   
8 [0x8]: line: 218 pushl 0   
9 [0x9]:           call @2976 // <std#string.size>   
10 [0xa]:           ipopl 4   
11 [0xb]: line: 220 pushl 0   
12 [0xc]:           istore 0   
14 [0xe]:           call @2957 // <std#string.at>   
15 [0xf]:           loadval ebx   
16 [0x10]:           rstore ebx   
17 [0x11]:           movi #45, ebx   
19 [0x13]:           loadval ecx   
20 [0x14]:           test ecx, ebx   
21 [0x15]:           jne 26   
22 [0x16]: line: 221 istorel 1, fp+3   
24 [0x18]: line: 222 istorel 1, fp+1   
26 [0x1a]:           nop   
27 [0x1b]: line: 225 ipushl #1   
28 [0x1c]:           loadl ebx, fp+4   
29 [0x1d]:           loadval ecx   
30 [0x1e]:           lt ecx, ebx   
31 [0x1f]:           movr ebx, cmt   
32 [0x20]:           movr cmt, ebx   
33 [0x21]:           jne 79   
34 [0x22]: line: 226 pushl 0   
35 [0x23]:           ipushl #1   
36 [0x24]:           call @2957 // <std#string.at>   
37 [0x25]:           call @2724 // <std#char.is_digit>   
38 [0x26]:           loadval ebx   
39 [0x27]:           not ebx, ebx   
40 [0x28]:           movr cmt, ebx   
41 [0x29]:           jne 54   
42 [0x2a]: line: 227 new_class @4 // std#illegal_argument_exception   
43 [0x2b]:           dup    
44 [0x2c]:           new_class @64 // std#string   
45 [0x2d]:           dup    
46 [0x2e]:           newstr @137 // illegal char in string:    
47 [0x2f]:           call @2935 // <std#string.string>   
48 [0x30]:           pushl 0   
49 [0x31]:           ipushl #1   
50 [0x32]:           call @2957 // <std#string.at>   
51 [0x33]:           call @2968 // <std#string.operator+>   
52 [0x34]:           call @1630 // <std#illegal_argument_exception.illegal_argument_exception>   
53 [0x35]:           throw    
54 [0x36]:           nop   
55 [0x37]: line: 231 movi #10, ebx   
57 [0x39]:           loadl ecx, fp+2   
58 [0x3a]:           mul ecx, ebx -> ebx   
59 [0x3b]:           mov32 ebx, ebx   
60 [0x3c]:           smovr_2 ebx, fp+2   
61 [0x3d]: line: 232 pushl 0   
62 [0x3e]:           loadl ebx, fp+1   
63 [0x3f]:           movr egx, ebx   
64 [0x40]:           inc ebx   
65 [0x41]:           smovr_2 ebx, fp+1   
66 [0x42]:           rstore egx   
67 [0x43]:           call @2957 // <std#string.at>   
68 [0x44]:           loadval ebx   
69 [0x45]:           rstore ebx   
70 [0x46]:           movi #48, ebx   
72 [0x48]:           loadval ecx   
73 [0x49]:           sub ecx, ebx -> ebx   
74 [0x4a]:           loadl ecx, fp+2   
75 [0x4b]:           add ecx, ebx -> ebx   
76 [0x4c]:           mov32 ebx, ebx   
77 [0x4d]:           smovr_2 ebx, fp+2   
78 [0x4e]:           jmp @27   
79 [0x4f]: line: 234 loadl ebx, fp+3   
80 [0x50]:           movr cmt, ebx   
81 [0x51]:           jne 86   
82 [0x52]: line: 235 loadl ebx, fp+2   
83 [0x53]:           neg ebx, ebx   
84 [0x54]:           mov32 ebx, ebx   
85 [0x55]:           smovr_2 ebx, fp+2   
86 [0x56]:           nop   
87 [0x57]: line: 236 loadl ebx, fp+2   
88 [0x58]:           return_val ebx   
89 [0x59]:           ret   


function: std#integer<_int32>.to_ulong[784] params(0) in file: lib\support\0.2.805/primitives.sharp:239:8: note:  
		    def to_ulong() := new ulong { value };
		       ^

0 [0x0]: line: 239 new_class @44 // std#ulong   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu64 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int32>.to_long[785] params(0) in file: lib\support\0.2.805/primitives.sharp:240:8: note:  
		    def to_long() := new long { value };
		       ^

0 [0x0]: line: 240 new_class @45 // std#long   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov64 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int32>.to_uint[786] params(0) in file: lib\support\0.2.805/primitives.sharp:241:8: note:  
		    def to_uint() := new uint { value };
		       ^

0 [0x0]: line: 241 new_class @46 // std#uint   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu32 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int32>.to_int[787] params(0) in file: lib\support\0.2.805/primitives.sharp:242:8: note:  
		    def to_int() := new int { value };
		       ^

0 [0x0]: line: 242 new_class @47 // std#int   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov32 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int32>.to_ushort[788] params(0) in file: lib\support\0.2.805/primitives.sharp:243:8: note:  
		    def to_ushort() := new ushort { value };
		       ^

0 [0x0]: line: 243 new_class @48 // std#ushort   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu16 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int32>.to_short[789] params(0) in file: lib\support\0.2.805/primitives.sharp:244:8: note:  
		    def to_short() := new short { value };
		       ^

0 [0x0]: line: 244 new_class @49 // std#short   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov16 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int32>.to_uchar[790] params(0) in file: lib\support\0.2.805/primitives.sharp:245:8: note:  
		    def to_uchar() := new uchar { value };
		       ^

0 [0x0]: line: 245 new_class @50 // std#uchar   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int32>.to_char[791] params(0) in file: lib\support\0.2.805/primitives.sharp:246:8: note:  
		    def to_char() := new char { value };
		       ^

0 [0x0]: line: 246 new_class @51 // std#char   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int32>.to_byte[792] params(0) in file: lib\support\0.2.805/primitives.sharp:247:8: note:  
		    def to_byte() := new byte { value };
		       ^

0 [0x0]: line: 247 new_class @52 // std#byte   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int32>.to_bool[793] params(0) in file: lib\support\0.2.805/primitives.sharp:248:8: note:  
		    def to_bool() := new bool { value };
		       ^

0 [0x0]: line: 248 new_class @53 // std#bool   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int32>.get_value[794] params(0) in file: lib\support\0.2.805/primitives.sharp:250:8: note:  
		    def get_value() := value;
		       ^

0 [0x0]: line: 250 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


constructor: std#integer<_int32>.integer[795] params(0) in file: lib\support\0.2.805/primitives.sharp:5:13: note:  
		public class integer<native_type> {
		            ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#integer<_uint16>.integer[796] params(1) in file: lib\support\0.2.805/primitives.sharp:8:12: note:  
		    integer(initial_val : var) {
		           ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 9 ipushl #1   
2 [0x2]:         movl 0   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         movu16 ebx, ebx   
7 [0x7]:         movi #0, adx   
9 [0x9]:         rmov adx, ebx   
10 [0xa]:         ret   


function: std#integer<_uint16>.hash[797] params(0) in file: lib\support\0.2.805/primitives.sharp:12:8: note:  
		    def hash() : long {
		       ^

0 [0x0]: line: 13 new_class @45 // std#long   
1 [0x1]:          dup    
2 [0x2]:          movl 0   
3 [0x3]:          movn #0   
5 [0x5]:          movi #0, adx   
7 [0x7]:          iaload ebx, adx   
8 [0x8]:          rstore ebx   
9 [0x9]:          call @2077 // <std#long.long>   
10 [0xa]:          popobj2    
11 [0xb]:          returnobj   
12 [0xc]:          ret   


overload function: std#integer<_uint16>.operator!=[798] params(1) in file: lib\support\0.2.805/primitives.sharp:16:8: note:  
		    def operator!=(num : ulong) := (value!=num.value);
		       ^

0 [0x0]: line: 16 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator==[799] params(1) in file: lib\support\0.2.805/primitives.sharp:17:8: note:  
		    def operator==(num : ulong) := (value==num.value);
		       ^

0 [0x0]: line: 17 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator!=[800] params(1) in file: lib\support\0.2.805/primitives.sharp:18:8: note:  
		    def operator!=(num : long) := (value!=num.value);
		       ^

0 [0x0]: line: 18 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator==[801] params(1) in file: lib\support\0.2.805/primitives.sharp:19:8: note:  
		    def operator==(num : long) := (value==num.value);
		       ^

0 [0x0]: line: 19 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator!=[802] params(1) in file: lib\support\0.2.805/primitives.sharp:20:8: note:  
		    def operator!=(num : uint) := (value!=num.value);
		       ^

0 [0x0]: line: 20 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator==[803] params(1) in file: lib\support\0.2.805/primitives.sharp:21:8: note:  
		    def operator==(num : uint) := (value==num.value);
		       ^

0 [0x0]: line: 21 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator!=[804] params(1) in file: lib\support\0.2.805/primitives.sharp:22:8: note:  
		    def operator!=(num : int) := (value!=num.value);
		       ^

0 [0x0]: line: 22 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator==[805] params(1) in file: lib\support\0.2.805/primitives.sharp:23:8: note:  
		    def operator==(num : int) := (value==num.value);
		       ^

0 [0x0]: line: 23 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator!=[806] params(1) in file: lib\support\0.2.805/primitives.sharp:24:8: note:  
		    def operator!=(num : ushort) := (value!=num.value);
		       ^

0 [0x0]: line: 24 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator==[807] params(1) in file: lib\support\0.2.805/primitives.sharp:25:8: note:  
		    def operator==(num : ushort) := (value==num.value);
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator!=[808] params(1) in file: lib\support\0.2.805/primitives.sharp:26:8: note:  
		    def operator!=(num : short) := (value!=num.value);
		       ^

0 [0x0]: line: 26 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator==[809] params(1) in file: lib\support\0.2.805/primitives.sharp:27:8: note:  
		    def operator==(num : short) := (value==num.value);
		       ^

0 [0x0]: line: 27 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator!=[810] params(1) in file: lib\support\0.2.805/primitives.sharp:28:8: note:  
		    def operator!=(num : uchar) := (value!=num.value);
		       ^

0 [0x0]: line: 28 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator==[811] params(1) in file: lib\support\0.2.805/primitives.sharp:29:8: note:  
		    def operator==(num : uchar) := (value==num.value);
		       ^

0 [0x0]: line: 29 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator!=[812] params(1) in file: lib\support\0.2.805/primitives.sharp:30:8: note:  
		    def operator!=(num : char) := (value!=num.value);
		       ^

0 [0x0]: line: 30 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator==[813] params(1) in file: lib\support\0.2.805/primitives.sharp:31:8: note:  
		    def operator==(num : char) := (value==num.value);
		       ^

0 [0x0]: line: 31 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator!=[814] params(1) in file: lib\support\0.2.805/primitives.sharp:32:8: note:  
		    def operator!=(num : byte) := (value!=num.value);
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator==[815] params(1) in file: lib\support\0.2.805/primitives.sharp:33:8: note:  
		    def operator==(num : byte) := (value==num.value);
		       ^

0 [0x0]: line: 33 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator!=[816] params(1) in file: lib\support\0.2.805/primitives.sharp:34:8: note:  
		    def operator!=(num : bool) := (value!=num.value);
		       ^

0 [0x0]: line: 34 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator==[817] params(1) in file: lib\support\0.2.805/primitives.sharp:35:8: note:  
		    def operator==(num : bool) := (value==num.value);
		       ^

0 [0x0]: line: 35 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator+[818] params(1) in file: lib\support\0.2.805/primitives.sharp:37:8: note:  
		    def operator+(num : ulong)  := (value+num.value);
		       ^

0 [0x0]: line: 37 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator+[819] params(1) in file: lib\support\0.2.805/primitives.sharp:38:8: note:  
		    def operator+(num : long)   := (value+num.value);
		       ^

0 [0x0]: line: 38 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator+[820] params(1) in file: lib\support\0.2.805/primitives.sharp:39:8: note:  
		    def operator+(num : uint)   := (value+num.value);
		       ^

0 [0x0]: line: 39 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator+[821] params(1) in file: lib\support\0.2.805/primitives.sharp:40:8: note:  
		    def operator+(num : int)    := (value+num.value);
		       ^

0 [0x0]: line: 40 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator+[822] params(1) in file: lib\support\0.2.805/primitives.sharp:41:8: note:  
		    def operator+(num : ushort) := (value+num.value);
		       ^

0 [0x0]: line: 41 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator+[823] params(1) in file: lib\support\0.2.805/primitives.sharp:42:8: note:  
		    def operator+(num : short)  := (value+num.value);
		       ^

0 [0x0]: line: 42 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator+[824] params(1) in file: lib\support\0.2.805/primitives.sharp:43:8: note:  
		    def operator+(num : uchar)  := (value+num.value);
		       ^

0 [0x0]: line: 43 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator+[825] params(1) in file: lib\support\0.2.805/primitives.sharp:44:8: note:  
		    def operator+(num : char)   := (value+num.value);
		       ^

0 [0x0]: line: 44 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator+[826] params(1) in file: lib\support\0.2.805/primitives.sharp:45:8: note:  
		    def operator+(num : byte)   := (value+num.value);
		       ^

0 [0x0]: line: 45 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator+[827] params(1) in file: lib\support\0.2.805/primitives.sharp:46:8: note:  
		    def operator+(num : bool)   := (value+num.value);
		       ^

0 [0x0]: line: 46 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator+[828] params(1) in file: lib\support\0.2.805/primitives.sharp:47:8: note:  
		    def operator+(num : var)    := (value+num);
		       ^

0 [0x0]: line: 47 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          add ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint16>.operator-[829] params(1) in file: lib\support\0.2.805/primitives.sharp:49:8: note:  
		    def operator-(num : ulong)  := (value-num.value);
		       ^

0 [0x0]: line: 49 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator-[830] params(1) in file: lib\support\0.2.805/primitives.sharp:50:8: note:  
		    def operator-(num : long)   := (value-num.value);
		       ^

0 [0x0]: line: 50 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator-[831] params(1) in file: lib\support\0.2.805/primitives.sharp:51:8: note:  
		    def operator-(num : uint)   := (value-num.value);
		       ^

0 [0x0]: line: 51 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator-[832] params(1) in file: lib\support\0.2.805/primitives.sharp:52:8: note:  
		    def operator-(num : int)    := (value-num.value);
		       ^

0 [0x0]: line: 52 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator-[833] params(1) in file: lib\support\0.2.805/primitives.sharp:53:8: note:  
		    def operator-(num : ushort) := (value-num.value);
		       ^

0 [0x0]: line: 53 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator-[834] params(1) in file: lib\support\0.2.805/primitives.sharp:54:8: note:  
		    def operator-(num : short)  := (value-num.value);
		       ^

0 [0x0]: line: 54 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator-[835] params(1) in file: lib\support\0.2.805/primitives.sharp:55:8: note:  
		    def operator-(num : uchar)  := (value-num.value);
		       ^

0 [0x0]: line: 55 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator-[836] params(1) in file: lib\support\0.2.805/primitives.sharp:56:8: note:  
		    def operator-(num : char)   := (value-num.value);
		       ^

0 [0x0]: line: 56 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator-[837] params(1) in file: lib\support\0.2.805/primitives.sharp:57:8: note:  
		    def operator-(num : byte)   := (value-num.value);
		       ^

0 [0x0]: line: 57 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator-[838] params(1) in file: lib\support\0.2.805/primitives.sharp:58:8: note:  
		    def operator-(num : bool)   := (value-num.value);
		       ^

0 [0x0]: line: 58 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator-[839] params(1) in file: lib\support\0.2.805/primitives.sharp:59:8: note:  
		    def operator-(num : var)    := (value-num);
		       ^

0 [0x0]: line: 59 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          sub ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint16>.operator*[840] params(1) in file: lib\support\0.2.805/primitives.sharp:61:8: note:  
		    def operator*(num : ulong)  := (value*num.value);
		       ^

0 [0x0]: line: 61 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator*[841] params(1) in file: lib\support\0.2.805/primitives.sharp:62:8: note:  
		    def operator*(num : long)   := (value*num.value);
		       ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator*[842] params(1) in file: lib\support\0.2.805/primitives.sharp:63:8: note:  
		    def operator*(num : uint)   := (value*num.value);
		       ^

0 [0x0]: line: 63 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator*[843] params(1) in file: lib\support\0.2.805/primitives.sharp:64:8: note:  
		    def operator*(num : int)    := (value*num.value);
		       ^

0 [0x0]: line: 64 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator*[844] params(1) in file: lib\support\0.2.805/primitives.sharp:65:8: note:  
		    def operator*(num : ushort) := (value*num.value);
		       ^

0 [0x0]: line: 65 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator*[845] params(1) in file: lib\support\0.2.805/primitives.sharp:66:8: note:  
		    def operator*(num : short)  := (value*num.value);
		       ^

0 [0x0]: line: 66 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator*[846] params(1) in file: lib\support\0.2.805/primitives.sharp:67:8: note:  
		    def operator*(num : uchar)  := (value*num.value);
		       ^

0 [0x0]: line: 67 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator*[847] params(1) in file: lib\support\0.2.805/primitives.sharp:68:8: note:  
		    def operator*(num : char)   := (value*num.value);
		       ^

0 [0x0]: line: 68 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator*[848] params(1) in file: lib\support\0.2.805/primitives.sharp:69:8: note:  
		    def operator*(num : byte)   := (value*num.value);
		       ^

0 [0x0]: line: 69 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator*[849] params(1) in file: lib\support\0.2.805/primitives.sharp:70:8: note:  
		    def operator*(num : bool)   := (value*num.value);
		       ^

0 [0x0]: line: 70 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator*[850] params(1) in file: lib\support\0.2.805/primitives.sharp:71:8: note:  
		    def operator*(num : var)    := (value*num);
		       ^

0 [0x0]: line: 71 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          mul ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint16>.operator/[851] params(1) in file: lib\support\0.2.805/primitives.sharp:73:8: note:  
		    def operator/(num : ulong)  := (value/num.value);
		       ^

0 [0x0]: line: 73 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator/[852] params(1) in file: lib\support\0.2.805/primitives.sharp:74:8: note:  
		    def operator/(num : long)   := (value/num.value);
		       ^

0 [0x0]: line: 74 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator/[853] params(1) in file: lib\support\0.2.805/primitives.sharp:75:8: note:  
		    def operator/(num : uint)   := (value/num.value);
		       ^

0 [0x0]: line: 75 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator/[854] params(1) in file: lib\support\0.2.805/primitives.sharp:76:8: note:  
		    def operator/(num : int)    := (value/num.value);
		       ^

0 [0x0]: line: 76 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator/[855] params(1) in file: lib\support\0.2.805/primitives.sharp:77:8: note:  
		    def operator/(num : ushort) := (value/num.value);
		       ^

0 [0x0]: line: 77 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator/[856] params(1) in file: lib\support\0.2.805/primitives.sharp:78:8: note:  
		    def operator/(num : short)  := (value/num.value);
		       ^

0 [0x0]: line: 78 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator/[857] params(1) in file: lib\support\0.2.805/primitives.sharp:79:8: note:  
		    def operator/(num : uchar)  := (value/num.value);
		       ^

0 [0x0]: line: 79 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator/[858] params(1) in file: lib\support\0.2.805/primitives.sharp:80:8: note:  
		    def operator/(num : char)   := (value/num.value);
		       ^

0 [0x0]: line: 80 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator/[859] params(1) in file: lib\support\0.2.805/primitives.sharp:81:8: note:  
		    def operator/(num : byte)   := (value/num.value);
		       ^

0 [0x0]: line: 81 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator/[860] params(1) in file: lib\support\0.2.805/primitives.sharp:82:8: note:  
		    def operator/(num : bool)   := (value/num.value);
		       ^

0 [0x0]: line: 82 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator/[861] params(1) in file: lib\support\0.2.805/primitives.sharp:83:8: note:  
		    def operator/(num : var)    := (value/num);
		       ^

0 [0x0]: line: 83 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          div ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint16>.operator%[862] params(1) in file: lib\support\0.2.805/primitives.sharp:85:8: note:  
		    def operator%(num : ulong)  := (value%num.value);
		       ^

0 [0x0]: line: 85 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator%[863] params(1) in file: lib\support\0.2.805/primitives.sharp:86:8: note:  
		    def operator%(num : long)   := (value%num.value);
		       ^

0 [0x0]: line: 86 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator%[864] params(1) in file: lib\support\0.2.805/primitives.sharp:87:8: note:  
		    def operator%(num : uint)   := (value%num.value);
		       ^

0 [0x0]: line: 87 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator%[865] params(1) in file: lib\support\0.2.805/primitives.sharp:88:8: note:  
		    def operator%(num : int)    := (value%num.value);
		       ^

0 [0x0]: line: 88 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator%[866] params(1) in file: lib\support\0.2.805/primitives.sharp:89:8: note:  
		    def operator%(num : ushort) := (value%num.value);
		       ^

0 [0x0]: line: 89 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator%[867] params(1) in file: lib\support\0.2.805/primitives.sharp:90:8: note:  
		    def operator%(num : short)  := (value%num.value);
		       ^

0 [0x0]: line: 90 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator%[868] params(1) in file: lib\support\0.2.805/primitives.sharp:91:8: note:  
		    def operator%(num : uchar)  := (value%num.value);
		       ^

0 [0x0]: line: 91 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator%[869] params(1) in file: lib\support\0.2.805/primitives.sharp:92:8: note:  
		    def operator%(num : char)   := (value%num.value);
		       ^

0 [0x0]: line: 92 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator%[870] params(1) in file: lib\support\0.2.805/primitives.sharp:93:8: note:  
		    def operator%(num : byte)   := (value%num.value);
		       ^

0 [0x0]: line: 93 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator%[871] params(1) in file: lib\support\0.2.805/primitives.sharp:94:8: note:  
		    def operator%(num : bool)   := (value%num.value);
		       ^

0 [0x0]: line: 94 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator%[872] params(1) in file: lib\support\0.2.805/primitives.sharp:95:8: note:  
		    def operator%(num : var)    := (value%num);
		       ^

0 [0x0]: line: 95 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          mod ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint16>.operator<[873] params(1) in file: lib\support\0.2.805/primitives.sharp:97:8: note:  
		    def operator<(num : ulong)  := (value<num.value);
		       ^

0 [0x0]: line: 97 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator<[874] params(1) in file: lib\support\0.2.805/primitives.sharp:98:8: note:  
		    def operator<(num : long)   := (value<num.value);
		       ^

0 [0x0]: line: 98 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator<[875] params(1) in file: lib\support\0.2.805/primitives.sharp:99:8: note:  
		    def operator<(num : uint)   := (value<num.value);
		       ^

0 [0x0]: line: 99 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator<[876] params(1) in file: lib\support\0.2.805/primitives.sharp:100:8: note:  
		    def operator<(num : int)    := (value<num.value);
		       ^

0 [0x0]: line: 100 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<[877] params(1) in file: lib\support\0.2.805/primitives.sharp:101:8: note:  
		    def operator<(num : ushort) := (value<num.value);
		       ^

0 [0x0]: line: 101 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<[878] params(1) in file: lib\support\0.2.805/primitives.sharp:102:8: note:  
		    def operator<(num : short)  := (value<num.value);
		       ^

0 [0x0]: line: 102 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<[879] params(1) in file: lib\support\0.2.805/primitives.sharp:103:8: note:  
		    def operator<(num : uchar)  := (value<num.value);
		       ^

0 [0x0]: line: 103 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<[880] params(1) in file: lib\support\0.2.805/primitives.sharp:104:8: note:  
		    def operator<(num : char)   := (value<num.value);
		       ^

0 [0x0]: line: 104 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<[881] params(1) in file: lib\support\0.2.805/primitives.sharp:105:8: note:  
		    def operator<(num : byte)   := (value<num.value);
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<[882] params(1) in file: lib\support\0.2.805/primitives.sharp:106:8: note:  
		    def operator<(num : bool)   := (value<num.value);
		       ^

0 [0x0]: line: 106 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<[883] params(1) in file: lib\support\0.2.805/primitives.sharp:107:8: note:  
		    def operator<(num : var)    := (value<num);
		       ^

0 [0x0]: line: 107 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           lt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint16>.operator>[884] params(1) in file: lib\support\0.2.805/primitives.sharp:109:8: note:  
		    def operator>(num : ulong)  := (value>num.value);
		       ^

0 [0x0]: line: 109 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>[885] params(1) in file: lib\support\0.2.805/primitives.sharp:110:8: note:  
		    def operator>(num : long)   := (value>num.value);
		       ^

0 [0x0]: line: 110 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>[886] params(1) in file: lib\support\0.2.805/primitives.sharp:111:8: note:  
		    def operator>(num : uint)   := (value>num.value);
		       ^

0 [0x0]: line: 111 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>[887] params(1) in file: lib\support\0.2.805/primitives.sharp:112:8: note:  
		    def operator>(num : int)    := (value>num.value);
		       ^

0 [0x0]: line: 112 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>[888] params(1) in file: lib\support\0.2.805/primitives.sharp:113:8: note:  
		    def operator>(num : ushort) := (value>num.value);
		       ^

0 [0x0]: line: 113 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>[889] params(1) in file: lib\support\0.2.805/primitives.sharp:114:8: note:  
		    def operator>(num : short)  := (value>num.value);
		       ^

0 [0x0]: line: 114 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>[890] params(1) in file: lib\support\0.2.805/primitives.sharp:115:8: note:  
		    def operator>(num : uchar)  := (value>num.value);
		       ^

0 [0x0]: line: 115 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>[891] params(1) in file: lib\support\0.2.805/primitives.sharp:116:8: note:  
		    def operator>(num : char)   := (value>num.value);
		       ^

0 [0x0]: line: 116 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>[892] params(1) in file: lib\support\0.2.805/primitives.sharp:117:8: note:  
		    def operator>(num : byte)   := (value>num.value);
		       ^

0 [0x0]: line: 117 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>[893] params(1) in file: lib\support\0.2.805/primitives.sharp:118:8: note:  
		    def operator>(num : bool)   := (value>num.value);
		       ^

0 [0x0]: line: 118 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>[894] params(1) in file: lib\support\0.2.805/primitives.sharp:119:8: note:  
		    def operator>(num : var)    := (value>num);
		       ^

0 [0x0]: line: 119 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint16>.operator<=[895] params(1) in file: lib\support\0.2.805/primitives.sharp:121:8: note:  
		    def operator<=(num : ulong)  := (value>=num.value);
		       ^

0 [0x0]: line: 121 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<=[896] params(1) in file: lib\support\0.2.805/primitives.sharp:122:8: note:  
		    def operator<=(num : long)   := (value>=num.value);
		       ^

0 [0x0]: line: 122 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<=[897] params(1) in file: lib\support\0.2.805/primitives.sharp:123:8: note:  
		    def operator<=(num : uint)   := (value>=num.value);
		       ^

0 [0x0]: line: 123 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<=[898] params(1) in file: lib\support\0.2.805/primitives.sharp:124:8: note:  
		    def operator<=(num : int)    := (value>=num.value);
		       ^

0 [0x0]: line: 124 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<=[899] params(1) in file: lib\support\0.2.805/primitives.sharp:125:8: note:  
		    def operator<=(num : ushort) := (value>=num.value);
		       ^

0 [0x0]: line: 125 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<=[900] params(1) in file: lib\support\0.2.805/primitives.sharp:126:8: note:  
		    def operator<=(num : short)  := (value>=num.value);
		       ^

0 [0x0]: line: 126 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<=[901] params(1) in file: lib\support\0.2.805/primitives.sharp:127:8: note:  
		    def operator<=(num : uchar)  := (value>=num.value);
		       ^

0 [0x0]: line: 127 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<=[902] params(1) in file: lib\support\0.2.805/primitives.sharp:128:8: note:  
		    def operator<=(num : char)   := (value>=num.value);
		       ^

0 [0x0]: line: 128 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<=[903] params(1) in file: lib\support\0.2.805/primitives.sharp:129:8: note:  
		    def operator<=(num : byte)   := (value>=num.value);
		       ^

0 [0x0]: line: 129 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<=[904] params(1) in file: lib\support\0.2.805/primitives.sharp:130:8: note:  
		    def operator<=(num : bool)   := (value>=num.value);
		       ^

0 [0x0]: line: 130 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<=[905] params(1) in file: lib\support\0.2.805/primitives.sharp:131:8: note:  
		    def operator<=(num : var)    := (value>=num);
		       ^

0 [0x0]: line: 131 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gte ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint16>.operator**[906] params(1) in file: lib\support\0.2.805/primitives.sharp:133:8: note:  
		    def operator**(num : ulong)  := (value**num.value);
		       ^

0 [0x0]: line: 133 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator**[907] params(1) in file: lib\support\0.2.805/primitives.sharp:134:8: note:  
		    def operator**(num : long)   := (value**num.value);
		       ^

0 [0x0]: line: 134 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator**[908] params(1) in file: lib\support\0.2.805/primitives.sharp:135:8: note:  
		    def operator**(num : uint)   := (value**num.value);
		       ^

0 [0x0]: line: 135 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator**[909] params(1) in file: lib\support\0.2.805/primitives.sharp:136:8: note:  
		    def operator**(num : int)    := (value**num.value);
		       ^

0 [0x0]: line: 136 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator**[910] params(1) in file: lib\support\0.2.805/primitives.sharp:137:8: note:  
		    def operator**(num : ushort) := (value**num.value);
		       ^

0 [0x0]: line: 137 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator**[911] params(1) in file: lib\support\0.2.805/primitives.sharp:138:8: note:  
		    def operator**(num : short)  := (value**num.value);
		       ^

0 [0x0]: line: 138 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator**[912] params(1) in file: lib\support\0.2.805/primitives.sharp:139:8: note:  
		    def operator**(num : uchar)  := (value**num.value);
		       ^

0 [0x0]: line: 139 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator**[913] params(1) in file: lib\support\0.2.805/primitives.sharp:140:8: note:  
		    def operator**(num : char)   := (value**num.value);
		       ^

0 [0x0]: line: 140 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator**[914] params(1) in file: lib\support\0.2.805/primitives.sharp:141:8: note:  
		    def operator**(num : byte)   := (value**num.value);
		       ^

0 [0x0]: line: 141 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator**[915] params(1) in file: lib\support\0.2.805/primitives.sharp:142:8: note:  
		    def operator**(num : bool)   := (value**num.value);
		       ^

0 [0x0]: line: 142 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator**[916] params(1) in file: lib\support\0.2.805/primitives.sharp:143:8: note:  
		    def operator**(num : var)    := (value**num);
		       ^

0 [0x0]: line: 143 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           exp ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint16>.operator<<[917] params(1) in file: lib\support\0.2.805/primitives.sharp:145:8: note:  
		    def operator<<(num : ulong)  := (value<<num.value);
		       ^

0 [0x0]: line: 145 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<<[918] params(1) in file: lib\support\0.2.805/primitives.sharp:146:8: note:  
		    def operator<<(num : long)   := (value<<num.value);
		       ^

0 [0x0]: line: 146 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<<[919] params(1) in file: lib\support\0.2.805/primitives.sharp:147:8: note:  
		    def operator<<(num : uint)   := (value<<num.value);
		       ^

0 [0x0]: line: 147 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<<[920] params(1) in file: lib\support\0.2.805/primitives.sharp:148:8: note:  
		    def operator<<(num : int)    := (value<<num.value);
		       ^

0 [0x0]: line: 148 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<<[921] params(1) in file: lib\support\0.2.805/primitives.sharp:149:8: note:  
		    def operator<<(num : ushort) := (value<<num.value);
		       ^

0 [0x0]: line: 149 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<<[922] params(1) in file: lib\support\0.2.805/primitives.sharp:150:8: note:  
		    def operator<<(num : short)  := (value<<num.value);
		       ^

0 [0x0]: line: 150 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<<[923] params(1) in file: lib\support\0.2.805/primitives.sharp:151:8: note:  
		    def operator<<(num : uchar)  := (value<<num.value);
		       ^

0 [0x0]: line: 151 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<<[924] params(1) in file: lib\support\0.2.805/primitives.sharp:152:8: note:  
		    def operator<<(num : char)   := (value<<num.value);
		       ^

0 [0x0]: line: 152 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<<[925] params(1) in file: lib\support\0.2.805/primitives.sharp:153:8: note:  
		    def operator<<(num : byte)   := (value<<num.value);
		       ^

0 [0x0]: line: 153 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<<[926] params(1) in file: lib\support\0.2.805/primitives.sharp:154:8: note:  
		    def operator<<(num : bool)   := (value<<num.value);
		       ^

0 [0x0]: line: 154 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<<[927] params(1) in file: lib\support\0.2.805/primitives.sharp:155:8: note:  
		    def operator<<(num : var)    := (value<<num);
		       ^

0 [0x0]: line: 155 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shl ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint16>.operator>>[928] params(1) in file: lib\support\0.2.805/primitives.sharp:157:8: note:  
		    def operator>>(num : ulong)  := (value>>num.value);
		       ^

0 [0x0]: line: 157 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>>[929] params(1) in file: lib\support\0.2.805/primitives.sharp:158:8: note:  
		    def operator>>(num : long)   := (value>>num.value);
		       ^

0 [0x0]: line: 158 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>>[930] params(1) in file: lib\support\0.2.805/primitives.sharp:159:8: note:  
		    def operator>>(num : uint)   := (value>>num.value);
		       ^

0 [0x0]: line: 159 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>>[931] params(1) in file: lib\support\0.2.805/primitives.sharp:160:8: note:  
		    def operator>>(num : int)    := (value>>num.value);
		       ^

0 [0x0]: line: 160 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>>[932] params(1) in file: lib\support\0.2.805/primitives.sharp:161:8: note:  
		    def operator>>(num : ushort) := (value>>num.value);
		       ^

0 [0x0]: line: 161 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>>[933] params(1) in file: lib\support\0.2.805/primitives.sharp:162:8: note:  
		    def operator>>(num : short)  := (value>>num.value);
		       ^

0 [0x0]: line: 162 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>>[934] params(1) in file: lib\support\0.2.805/primitives.sharp:163:8: note:  
		    def operator>>(num : uchar)  := (value>>num.value);
		       ^

0 [0x0]: line: 163 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>>[935] params(1) in file: lib\support\0.2.805/primitives.sharp:164:8: note:  
		    def operator>>(num : char)   := (value>>num.value);
		       ^

0 [0x0]: line: 164 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>>[936] params(1) in file: lib\support\0.2.805/primitives.sharp:165:8: note:  
		    def operator>>(num : byte)   := (value>>num.value);
		       ^

0 [0x0]: line: 165 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>>[937] params(1) in file: lib\support\0.2.805/primitives.sharp:166:8: note:  
		    def operator>>(num : bool)   := (value>>num.value);
		       ^

0 [0x0]: line: 166 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>>[938] params(1) in file: lib\support\0.2.805/primitives.sharp:167:8: note:  
		    def operator>>(num : var)    := (value>>num);
		       ^

0 [0x0]: line: 167 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shr ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint16>.operator^[939] params(1) in file: lib\support\0.2.805/primitives.sharp:169:8: note:  
		    def operator^(num : ulong)  := (value^num.value);
		       ^

0 [0x0]: line: 169 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator^[940] params(1) in file: lib\support\0.2.805/primitives.sharp:170:8: note:  
		    def operator^(num : long)   := (value^num.value);
		       ^

0 [0x0]: line: 170 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator^[941] params(1) in file: lib\support\0.2.805/primitives.sharp:171:8: note:  
		    def operator^(num : uint)   := (value^num.value);
		       ^

0 [0x0]: line: 171 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator^[942] params(1) in file: lib\support\0.2.805/primitives.sharp:172:8: note:  
		    def operator^(num : int)    := (value^num.value);
		       ^

0 [0x0]: line: 172 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator^[943] params(1) in file: lib\support\0.2.805/primitives.sharp:173:8: note:  
		    def operator^(num : ushort) := (value^num.value);
		       ^

0 [0x0]: line: 173 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator^[944] params(1) in file: lib\support\0.2.805/primitives.sharp:174:8: note:  
		    def operator^(num : short)  := (value^num.value);
		       ^

0 [0x0]: line: 174 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator^[945] params(1) in file: lib\support\0.2.805/primitives.sharp:175:8: note:  
		    def operator^(num : uchar)  := (value^num.value);
		       ^

0 [0x0]: line: 175 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator^[946] params(1) in file: lib\support\0.2.805/primitives.sharp:176:8: note:  
		    def operator^(num : char)   := (value^num.value);
		       ^

0 [0x0]: line: 176 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator^[947] params(1) in file: lib\support\0.2.805/primitives.sharp:177:8: note:  
		    def operator^(num : byte)   := (value^num.value);
		       ^

0 [0x0]: line: 177 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator^[948] params(1) in file: lib\support\0.2.805/primitives.sharp:178:8: note:  
		    def operator^(num : bool)   := (value^num.value);
		       ^

0 [0x0]: line: 178 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator^[949] params(1) in file: lib\support\0.2.805/primitives.sharp:179:8: note:  
		    def operator^(num : var)    := (value^num);
		       ^

0 [0x0]: line: 179 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           xor ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint16>.operator&[950] params(1) in file: lib\support\0.2.805/primitives.sharp:181:8: note:  
		    def operator&(num : ulong)  := (value&num.value);
		       ^

0 [0x0]: line: 181 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator&[951] params(1) in file: lib\support\0.2.805/primitives.sharp:182:8: note:  
		    def operator&(num : long)   := (value&num.value);
		       ^

0 [0x0]: line: 182 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator&[952] params(1) in file: lib\support\0.2.805/primitives.sharp:183:8: note:  
		    def operator&(num : uint)   := (value&num.value);
		       ^

0 [0x0]: line: 183 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator&[953] params(1) in file: lib\support\0.2.805/primitives.sharp:184:8: note:  
		    def operator&(num : int)    := (value&num.value);
		       ^

0 [0x0]: line: 184 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator&[954] params(1) in file: lib\support\0.2.805/primitives.sharp:185:8: note:  
		    def operator&(num : ushort) := (value&num.value);
		       ^

0 [0x0]: line: 185 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator&[955] params(1) in file: lib\support\0.2.805/primitives.sharp:186:8: note:  
		    def operator&(num : short)  := (value&num.value);
		       ^

0 [0x0]: line: 186 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator&[956] params(1) in file: lib\support\0.2.805/primitives.sharp:187:8: note:  
		    def operator&(num : uchar)  := (value&num.value);
		       ^

0 [0x0]: line: 187 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator&[957] params(1) in file: lib\support\0.2.805/primitives.sharp:188:8: note:  
		    def operator&(num : char)   := (value&num.value);
		       ^

0 [0x0]: line: 188 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator&[958] params(1) in file: lib\support\0.2.805/primitives.sharp:189:8: note:  
		    def operator&(num : byte)   := (value&num.value);
		       ^

0 [0x0]: line: 189 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator&[959] params(1) in file: lib\support\0.2.805/primitives.sharp:190:8: note:  
		    def operator&(num : bool)   := (value&num.value);
		       ^

0 [0x0]: line: 190 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator&[960] params(1) in file: lib\support\0.2.805/primitives.sharp:191:8: note:  
		    def operator&(num : var)    := (value&num);
		       ^

0 [0x0]: line: 191 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           uand ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint16>.operator|[961] params(1) in file: lib\support\0.2.805/primitives.sharp:193:8: note:  
		    def operator|(num : ulong)  := (value|num.value);
		       ^

0 [0x0]: line: 193 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator|[962] params(1) in file: lib\support\0.2.805/primitives.sharp:194:8: note:  
		    def operator|(num : long)   := (value|num.value);
		       ^

0 [0x0]: line: 194 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator|[963] params(1) in file: lib\support\0.2.805/primitives.sharp:195:8: note:  
		    def operator|(num : uint)   := (value|num.value);
		       ^

0 [0x0]: line: 195 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator|[964] params(1) in file: lib\support\0.2.805/primitives.sharp:196:8: note:  
		    def operator|(num : int)    := (value|num.value);
		       ^

0 [0x0]: line: 196 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator|[965] params(1) in file: lib\support\0.2.805/primitives.sharp:197:8: note:  
		    def operator|(num : ushort) := (value|num.value);
		       ^

0 [0x0]: line: 197 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator|[966] params(1) in file: lib\support\0.2.805/primitives.sharp:198:8: note:  
		    def operator|(num : short)  := (value|num.value);
		       ^

0 [0x0]: line: 198 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator|[967] params(1) in file: lib\support\0.2.805/primitives.sharp:199:8: note:  
		    def operator|(num : uchar)  := (value|num.value);
		       ^

0 [0x0]: line: 199 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator|[968] params(1) in file: lib\support\0.2.805/primitives.sharp:200:8: note:  
		    def operator|(num : char)   := (value|num.value);
		       ^

0 [0x0]: line: 200 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator|[969] params(1) in file: lib\support\0.2.805/primitives.sharp:201:8: note:  
		    def operator|(num : byte)   := (value|num.value);
		       ^

0 [0x0]: line: 201 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator|[970] params(1) in file: lib\support\0.2.805/primitives.sharp:202:8: note:  
		    def operator|(num : bool)   := (value|num.value);
		       ^

0 [0x0]: line: 202 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator|[971] params(1) in file: lib\support\0.2.805/primitives.sharp:203:8: note:  
		    def operator|(num : var)    := (value|num);
		       ^

0 [0x0]: line: 203 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           or ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint16>.operator!=[972] params(1) in file: lib\support\0.2.805/primitives.sharp:205:8: note:  
		    def operator!=(num : var) := value!=num;
		       ^

0 [0x0]: line: 205 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           tne ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint16>.operator==[973] params(1) in file: lib\support\0.2.805/primitives.sharp:206:8: note:  
		    def operator==(num : var) := value==num;
		       ^

0 [0x0]: line: 206 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           test ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint16>.operator=[974] params(1) in file: lib\support\0.2.805/primitives.sharp:207:8: note:  
		    def operator=(num : var) := value=num;
		       ^

0 [0x0]: line: 207 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           loadval ebx   
5 [0x5]:           movu16 ebx, ebx   
6 [0x6]:           movi #0, adx   
8 [0x8]:           rmov adx, ebx   
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std#integer<_uint16>.to_string[975] params(0) in file: lib\support\0.2.805/primitives.sharp:209:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 210 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           newstr @22 //    
3 [0x3]:           call @2935 // <std#string.string>   
4 [0x4]:           movl 0   
5 [0x5]:           movn #0   
7 [0x7]:           movi #0, adx   
9 [0x9]:           iaload ebx, adx   
10 [0xa]:           rstore ebx   
11 [0xb]:           call @2973 // <std#string.operator+>   
12 [0xc]:           popobj2    
13 [0xd]:           returnobj   
14 [0xe]:           ret   


function: std#integer<_uint16>.parse[976] params(1) in file: lib\support\0.2.805/primitives.sharp:214:15: note:  
		    static def parse(s: string) : native_type {
		              ^

0 [0x0]: line: 215 istorel 0, fp+1   
2 [0x2]: line: 216 movi #0, ebx   
4 [0x4]:           movu16 ebx, ebx   
5 [0x5]:           smovr_2 ebx, fp+2   
6 [0x6]: line: 217 istorel 0, fp+3   
8 [0x8]: line: 218 pushl 0   
9 [0x9]:           call @2976 // <std#string.size>   
10 [0xa]:           ipopl 4   
11 [0xb]: line: 220 pushl 0   
12 [0xc]:           istore 0   
14 [0xe]:           call @2957 // <std#string.at>   
15 [0xf]:           loadval ebx   
16 [0x10]:           rstore ebx   
17 [0x11]:           movi #45, ebx   
19 [0x13]:           loadval ecx   
20 [0x14]:           test ecx, ebx   
21 [0x15]:           jne 26   
22 [0x16]: line: 221 istorel 1, fp+3   
24 [0x18]: line: 222 istorel 1, fp+1   
26 [0x1a]:           nop   
27 [0x1b]: line: 225 ipushl #1   
28 [0x1c]:           loadl ebx, fp+4   
29 [0x1d]:           loadval ecx   
30 [0x1e]:           lt ecx, ebx   
31 [0x1f]:           movr ebx, cmt   
32 [0x20]:           movr cmt, ebx   
33 [0x21]:           jne 79   
34 [0x22]: line: 226 pushl 0   
35 [0x23]:           ipushl #1   
36 [0x24]:           call @2957 // <std#string.at>   
37 [0x25]:           call @2724 // <std#char.is_digit>   
38 [0x26]:           loadval ebx   
39 [0x27]:           not ebx, ebx   
40 [0x28]:           movr cmt, ebx   
41 [0x29]:           jne 54   
42 [0x2a]: line: 227 new_class @4 // std#illegal_argument_exception   
43 [0x2b]:           dup    
44 [0x2c]:           new_class @64 // std#string   
45 [0x2d]:           dup    
46 [0x2e]:           newstr @137 // illegal char in string:    
47 [0x2f]:           call @2935 // <std#string.string>   
48 [0x30]:           pushl 0   
49 [0x31]:           ipushl #1   
50 [0x32]:           call @2957 // <std#string.at>   
51 [0x33]:           call @2968 // <std#string.operator+>   
52 [0x34]:           call @1630 // <std#illegal_argument_exception.illegal_argument_exception>   
53 [0x35]:           throw    
54 [0x36]:           nop   
55 [0x37]: line: 231 movi #10, ebx   
57 [0x39]:           loadl ecx, fp+2   
58 [0x3a]:           mul ecx, ebx -> ebx   
59 [0x3b]:           movu16 ebx, ebx   
60 [0x3c]:           smovr_2 ebx, fp+2   
61 [0x3d]: line: 232 pushl 0   
62 [0x3e]:           loadl ebx, fp+1   
63 [0x3f]:           movr egx, ebx   
64 [0x40]:           inc ebx   
65 [0x41]:           smovr_2 ebx, fp+1   
66 [0x42]:           rstore egx   
67 [0x43]:           call @2957 // <std#string.at>   
68 [0x44]:           loadval ebx   
69 [0x45]:           rstore ebx   
70 [0x46]:           movi #48, ebx   
72 [0x48]:           loadval ecx   
73 [0x49]:           sub ecx, ebx -> ebx   
74 [0x4a]:           loadl ecx, fp+2   
75 [0x4b]:           add ecx, ebx -> ebx   
76 [0x4c]:           movu16 ebx, ebx   
77 [0x4d]:           smovr_2 ebx, fp+2   
78 [0x4e]:           jmp @27   
79 [0x4f]: line: 234 loadl ebx, fp+3   
80 [0x50]:           movr cmt, ebx   
81 [0x51]:           jne 86   
82 [0x52]: line: 235 loadl ebx, fp+2   
83 [0x53]:           neg ebx, ebx   
84 [0x54]:           movu16 ebx, ebx   
85 [0x55]:           smovr_2 ebx, fp+2   
86 [0x56]:           nop   
87 [0x57]: line: 236 loadl ebx, fp+2   
88 [0x58]:           return_val ebx   
89 [0x59]:           ret   


function: std#integer<_uint16>.to_ulong[977] params(0) in file: lib\support\0.2.805/primitives.sharp:239:8: note:  
		    def to_ulong() := new ulong { value };
		       ^

0 [0x0]: line: 239 new_class @44 // std#ulong   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu64 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint16>.to_long[978] params(0) in file: lib\support\0.2.805/primitives.sharp:240:8: note:  
		    def to_long() := new long { value };
		       ^

0 [0x0]: line: 240 new_class @45 // std#long   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov64 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint16>.to_uint[979] params(0) in file: lib\support\0.2.805/primitives.sharp:241:8: note:  
		    def to_uint() := new uint { value };
		       ^

0 [0x0]: line: 241 new_class @46 // std#uint   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu32 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint16>.to_int[980] params(0) in file: lib\support\0.2.805/primitives.sharp:242:8: note:  
		    def to_int() := new int { value };
		       ^

0 [0x0]: line: 242 new_class @47 // std#int   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov32 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint16>.to_ushort[981] params(0) in file: lib\support\0.2.805/primitives.sharp:243:8: note:  
		    def to_ushort() := new ushort { value };
		       ^

0 [0x0]: line: 243 new_class @48 // std#ushort   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu16 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint16>.to_short[982] params(0) in file: lib\support\0.2.805/primitives.sharp:244:8: note:  
		    def to_short() := new short { value };
		       ^

0 [0x0]: line: 244 new_class @49 // std#short   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov16 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint16>.to_uchar[983] params(0) in file: lib\support\0.2.805/primitives.sharp:245:8: note:  
		    def to_uchar() := new uchar { value };
		       ^

0 [0x0]: line: 245 new_class @50 // std#uchar   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint16>.to_char[984] params(0) in file: lib\support\0.2.805/primitives.sharp:246:8: note:  
		    def to_char() := new char { value };
		       ^

0 [0x0]: line: 246 new_class @51 // std#char   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint16>.to_byte[985] params(0) in file: lib\support\0.2.805/primitives.sharp:247:8: note:  
		    def to_byte() := new byte { value };
		       ^

0 [0x0]: line: 247 new_class @52 // std#byte   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint16>.to_bool[986] params(0) in file: lib\support\0.2.805/primitives.sharp:248:8: note:  
		    def to_bool() := new bool { value };
		       ^

0 [0x0]: line: 248 new_class @53 // std#bool   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint16>.get_value[987] params(0) in file: lib\support\0.2.805/primitives.sharp:250:8: note:  
		    def get_value() := value;
		       ^

0 [0x0]: line: 250 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


constructor: std#integer<_uint16>.integer[988] params(0) in file: lib\support\0.2.805/primitives.sharp:5:13: note:  
		public class integer<native_type> {
		            ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#integer<_int16>.integer[989] params(1) in file: lib\support\0.2.805/primitives.sharp:8:12: note:  
		    integer(initial_val : var) {
		           ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 9 ipushl #1   
2 [0x2]:         movl 0   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         mov16 ebx, ebx   
7 [0x7]:         movi #0, adx   
9 [0x9]:         rmov adx, ebx   
10 [0xa]:         ret   


function: std#integer<_int16>.hash[990] params(0) in file: lib\support\0.2.805/primitives.sharp:12:8: note:  
		    def hash() : long {
		       ^

0 [0x0]: line: 13 new_class @45 // std#long   
1 [0x1]:          dup    
2 [0x2]:          movl 0   
3 [0x3]:          movn #0   
5 [0x5]:          movi #0, adx   
7 [0x7]:          iaload ebx, adx   
8 [0x8]:          rstore ebx   
9 [0x9]:          call @2077 // <std#long.long>   
10 [0xa]:          popobj2    
11 [0xb]:          returnobj   
12 [0xc]:          ret   


overload function: std#integer<_int16>.operator!=[991] params(1) in file: lib\support\0.2.805/primitives.sharp:16:8: note:  
		    def operator!=(num : ulong) := (value!=num.value);
		       ^

0 [0x0]: line: 16 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator==[992] params(1) in file: lib\support\0.2.805/primitives.sharp:17:8: note:  
		    def operator==(num : ulong) := (value==num.value);
		       ^

0 [0x0]: line: 17 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator!=[993] params(1) in file: lib\support\0.2.805/primitives.sharp:18:8: note:  
		    def operator!=(num : long) := (value!=num.value);
		       ^

0 [0x0]: line: 18 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator==[994] params(1) in file: lib\support\0.2.805/primitives.sharp:19:8: note:  
		    def operator==(num : long) := (value==num.value);
		       ^

0 [0x0]: line: 19 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator!=[995] params(1) in file: lib\support\0.2.805/primitives.sharp:20:8: note:  
		    def operator!=(num : uint) := (value!=num.value);
		       ^

0 [0x0]: line: 20 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator==[996] params(1) in file: lib\support\0.2.805/primitives.sharp:21:8: note:  
		    def operator==(num : uint) := (value==num.value);
		       ^

0 [0x0]: line: 21 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator!=[997] params(1) in file: lib\support\0.2.805/primitives.sharp:22:8: note:  
		    def operator!=(num : int) := (value!=num.value);
		       ^

0 [0x0]: line: 22 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator==[998] params(1) in file: lib\support\0.2.805/primitives.sharp:23:8: note:  
		    def operator==(num : int) := (value==num.value);
		       ^

0 [0x0]: line: 23 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator!=[999] params(1) in file: lib\support\0.2.805/primitives.sharp:24:8: note:  
		    def operator!=(num : ushort) := (value!=num.value);
		       ^

0 [0x0]: line: 24 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator==[1000] params(1) in file: lib\support\0.2.805/primitives.sharp:25:8: note:  
		    def operator==(num : ushort) := (value==num.value);
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator!=[1001] params(1) in file: lib\support\0.2.805/primitives.sharp:26:8: note:  
		    def operator!=(num : short) := (value!=num.value);
		       ^

0 [0x0]: line: 26 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator==[1002] params(1) in file: lib\support\0.2.805/primitives.sharp:27:8: note:  
		    def operator==(num : short) := (value==num.value);
		       ^

0 [0x0]: line: 27 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator!=[1003] params(1) in file: lib\support\0.2.805/primitives.sharp:28:8: note:  
		    def operator!=(num : uchar) := (value!=num.value);
		       ^

0 [0x0]: line: 28 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator==[1004] params(1) in file: lib\support\0.2.805/primitives.sharp:29:8: note:  
		    def operator==(num : uchar) := (value==num.value);
		       ^

0 [0x0]: line: 29 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator!=[1005] params(1) in file: lib\support\0.2.805/primitives.sharp:30:8: note:  
		    def operator!=(num : char) := (value!=num.value);
		       ^

0 [0x0]: line: 30 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator==[1006] params(1) in file: lib\support\0.2.805/primitives.sharp:31:8: note:  
		    def operator==(num : char) := (value==num.value);
		       ^

0 [0x0]: line: 31 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator!=[1007] params(1) in file: lib\support\0.2.805/primitives.sharp:32:8: note:  
		    def operator!=(num : byte) := (value!=num.value);
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator==[1008] params(1) in file: lib\support\0.2.805/primitives.sharp:33:8: note:  
		    def operator==(num : byte) := (value==num.value);
		       ^

0 [0x0]: line: 33 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator!=[1009] params(1) in file: lib\support\0.2.805/primitives.sharp:34:8: note:  
		    def operator!=(num : bool) := (value!=num.value);
		       ^

0 [0x0]: line: 34 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator==[1010] params(1) in file: lib\support\0.2.805/primitives.sharp:35:8: note:  
		    def operator==(num : bool) := (value==num.value);
		       ^

0 [0x0]: line: 35 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator+[1011] params(1) in file: lib\support\0.2.805/primitives.sharp:37:8: note:  
		    def operator+(num : ulong)  := (value+num.value);
		       ^

0 [0x0]: line: 37 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator+[1012] params(1) in file: lib\support\0.2.805/primitives.sharp:38:8: note:  
		    def operator+(num : long)   := (value+num.value);
		       ^

0 [0x0]: line: 38 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator+[1013] params(1) in file: lib\support\0.2.805/primitives.sharp:39:8: note:  
		    def operator+(num : uint)   := (value+num.value);
		       ^

0 [0x0]: line: 39 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator+[1014] params(1) in file: lib\support\0.2.805/primitives.sharp:40:8: note:  
		    def operator+(num : int)    := (value+num.value);
		       ^

0 [0x0]: line: 40 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator+[1015] params(1) in file: lib\support\0.2.805/primitives.sharp:41:8: note:  
		    def operator+(num : ushort) := (value+num.value);
		       ^

0 [0x0]: line: 41 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator+[1016] params(1) in file: lib\support\0.2.805/primitives.sharp:42:8: note:  
		    def operator+(num : short)  := (value+num.value);
		       ^

0 [0x0]: line: 42 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator+[1017] params(1) in file: lib\support\0.2.805/primitives.sharp:43:8: note:  
		    def operator+(num : uchar)  := (value+num.value);
		       ^

0 [0x0]: line: 43 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator+[1018] params(1) in file: lib\support\0.2.805/primitives.sharp:44:8: note:  
		    def operator+(num : char)   := (value+num.value);
		       ^

0 [0x0]: line: 44 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator+[1019] params(1) in file: lib\support\0.2.805/primitives.sharp:45:8: note:  
		    def operator+(num : byte)   := (value+num.value);
		       ^

0 [0x0]: line: 45 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator+[1020] params(1) in file: lib\support\0.2.805/primitives.sharp:46:8: note:  
		    def operator+(num : bool)   := (value+num.value);
		       ^

0 [0x0]: line: 46 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator+[1021] params(1) in file: lib\support\0.2.805/primitives.sharp:47:8: note:  
		    def operator+(num : var)    := (value+num);
		       ^

0 [0x0]: line: 47 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          add ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int16>.operator-[1022] params(1) in file: lib\support\0.2.805/primitives.sharp:49:8: note:  
		    def operator-(num : ulong)  := (value-num.value);
		       ^

0 [0x0]: line: 49 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator-[1023] params(1) in file: lib\support\0.2.805/primitives.sharp:50:8: note:  
		    def operator-(num : long)   := (value-num.value);
		       ^

0 [0x0]: line: 50 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator-[1024] params(1) in file: lib\support\0.2.805/primitives.sharp:51:8: note:  
		    def operator-(num : uint)   := (value-num.value);
		       ^

0 [0x0]: line: 51 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator-[1025] params(1) in file: lib\support\0.2.805/primitives.sharp:52:8: note:  
		    def operator-(num : int)    := (value-num.value);
		       ^

0 [0x0]: line: 52 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator-[1026] params(1) in file: lib\support\0.2.805/primitives.sharp:53:8: note:  
		    def operator-(num : ushort) := (value-num.value);
		       ^

0 [0x0]: line: 53 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator-[1027] params(1) in file: lib\support\0.2.805/primitives.sharp:54:8: note:  
		    def operator-(num : short)  := (value-num.value);
		       ^

0 [0x0]: line: 54 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator-[1028] params(1) in file: lib\support\0.2.805/primitives.sharp:55:8: note:  
		    def operator-(num : uchar)  := (value-num.value);
		       ^

0 [0x0]: line: 55 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator-[1029] params(1) in file: lib\support\0.2.805/primitives.sharp:56:8: note:  
		    def operator-(num : char)   := (value-num.value);
		       ^

0 [0x0]: line: 56 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator-[1030] params(1) in file: lib\support\0.2.805/primitives.sharp:57:8: note:  
		    def operator-(num : byte)   := (value-num.value);
		       ^

0 [0x0]: line: 57 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator-[1031] params(1) in file: lib\support\0.2.805/primitives.sharp:58:8: note:  
		    def operator-(num : bool)   := (value-num.value);
		       ^

0 [0x0]: line: 58 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator-[1032] params(1) in file: lib\support\0.2.805/primitives.sharp:59:8: note:  
		    def operator-(num : var)    := (value-num);
		       ^

0 [0x0]: line: 59 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          sub ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int16>.operator*[1033] params(1) in file: lib\support\0.2.805/primitives.sharp:61:8: note:  
		    def operator*(num : ulong)  := (value*num.value);
		       ^

0 [0x0]: line: 61 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator*[1034] params(1) in file: lib\support\0.2.805/primitives.sharp:62:8: note:  
		    def operator*(num : long)   := (value*num.value);
		       ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator*[1035] params(1) in file: lib\support\0.2.805/primitives.sharp:63:8: note:  
		    def operator*(num : uint)   := (value*num.value);
		       ^

0 [0x0]: line: 63 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator*[1036] params(1) in file: lib\support\0.2.805/primitives.sharp:64:8: note:  
		    def operator*(num : int)    := (value*num.value);
		       ^

0 [0x0]: line: 64 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator*[1037] params(1) in file: lib\support\0.2.805/primitives.sharp:65:8: note:  
		    def operator*(num : ushort) := (value*num.value);
		       ^

0 [0x0]: line: 65 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator*[1038] params(1) in file: lib\support\0.2.805/primitives.sharp:66:8: note:  
		    def operator*(num : short)  := (value*num.value);
		       ^

0 [0x0]: line: 66 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator*[1039] params(1) in file: lib\support\0.2.805/primitives.sharp:67:8: note:  
		    def operator*(num : uchar)  := (value*num.value);
		       ^

0 [0x0]: line: 67 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator*[1040] params(1) in file: lib\support\0.2.805/primitives.sharp:68:8: note:  
		    def operator*(num : char)   := (value*num.value);
		       ^

0 [0x0]: line: 68 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator*[1041] params(1) in file: lib\support\0.2.805/primitives.sharp:69:8: note:  
		    def operator*(num : byte)   := (value*num.value);
		       ^

0 [0x0]: line: 69 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator*[1042] params(1) in file: lib\support\0.2.805/primitives.sharp:70:8: note:  
		    def operator*(num : bool)   := (value*num.value);
		       ^

0 [0x0]: line: 70 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator*[1043] params(1) in file: lib\support\0.2.805/primitives.sharp:71:8: note:  
		    def operator*(num : var)    := (value*num);
		       ^

0 [0x0]: line: 71 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          mul ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int16>.operator/[1044] params(1) in file: lib\support\0.2.805/primitives.sharp:73:8: note:  
		    def operator/(num : ulong)  := (value/num.value);
		       ^

0 [0x0]: line: 73 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator/[1045] params(1) in file: lib\support\0.2.805/primitives.sharp:74:8: note:  
		    def operator/(num : long)   := (value/num.value);
		       ^

0 [0x0]: line: 74 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator/[1046] params(1) in file: lib\support\0.2.805/primitives.sharp:75:8: note:  
		    def operator/(num : uint)   := (value/num.value);
		       ^

0 [0x0]: line: 75 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator/[1047] params(1) in file: lib\support\0.2.805/primitives.sharp:76:8: note:  
		    def operator/(num : int)    := (value/num.value);
		       ^

0 [0x0]: line: 76 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator/[1048] params(1) in file: lib\support\0.2.805/primitives.sharp:77:8: note:  
		    def operator/(num : ushort) := (value/num.value);
		       ^

0 [0x0]: line: 77 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator/[1049] params(1) in file: lib\support\0.2.805/primitives.sharp:78:8: note:  
		    def operator/(num : short)  := (value/num.value);
		       ^

0 [0x0]: line: 78 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator/[1050] params(1) in file: lib\support\0.2.805/primitives.sharp:79:8: note:  
		    def operator/(num : uchar)  := (value/num.value);
		       ^

0 [0x0]: line: 79 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator/[1051] params(1) in file: lib\support\0.2.805/primitives.sharp:80:8: note:  
		    def operator/(num : char)   := (value/num.value);
		       ^

0 [0x0]: line: 80 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator/[1052] params(1) in file: lib\support\0.2.805/primitives.sharp:81:8: note:  
		    def operator/(num : byte)   := (value/num.value);
		       ^

0 [0x0]: line: 81 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator/[1053] params(1) in file: lib\support\0.2.805/primitives.sharp:82:8: note:  
		    def operator/(num : bool)   := (value/num.value);
		       ^

0 [0x0]: line: 82 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator/[1054] params(1) in file: lib\support\0.2.805/primitives.sharp:83:8: note:  
		    def operator/(num : var)    := (value/num);
		       ^

0 [0x0]: line: 83 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          div ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int16>.operator%[1055] params(1) in file: lib\support\0.2.805/primitives.sharp:85:8: note:  
		    def operator%(num : ulong)  := (value%num.value);
		       ^

0 [0x0]: line: 85 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator%[1056] params(1) in file: lib\support\0.2.805/primitives.sharp:86:8: note:  
		    def operator%(num : long)   := (value%num.value);
		       ^

0 [0x0]: line: 86 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator%[1057] params(1) in file: lib\support\0.2.805/primitives.sharp:87:8: note:  
		    def operator%(num : uint)   := (value%num.value);
		       ^

0 [0x0]: line: 87 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator%[1058] params(1) in file: lib\support\0.2.805/primitives.sharp:88:8: note:  
		    def operator%(num : int)    := (value%num.value);
		       ^

0 [0x0]: line: 88 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator%[1059] params(1) in file: lib\support\0.2.805/primitives.sharp:89:8: note:  
		    def operator%(num : ushort) := (value%num.value);
		       ^

0 [0x0]: line: 89 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator%[1060] params(1) in file: lib\support\0.2.805/primitives.sharp:90:8: note:  
		    def operator%(num : short)  := (value%num.value);
		       ^

0 [0x0]: line: 90 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator%[1061] params(1) in file: lib\support\0.2.805/primitives.sharp:91:8: note:  
		    def operator%(num : uchar)  := (value%num.value);
		       ^

0 [0x0]: line: 91 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator%[1062] params(1) in file: lib\support\0.2.805/primitives.sharp:92:8: note:  
		    def operator%(num : char)   := (value%num.value);
		       ^

0 [0x0]: line: 92 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator%[1063] params(1) in file: lib\support\0.2.805/primitives.sharp:93:8: note:  
		    def operator%(num : byte)   := (value%num.value);
		       ^

0 [0x0]: line: 93 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator%[1064] params(1) in file: lib\support\0.2.805/primitives.sharp:94:8: note:  
		    def operator%(num : bool)   := (value%num.value);
		       ^

0 [0x0]: line: 94 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator%[1065] params(1) in file: lib\support\0.2.805/primitives.sharp:95:8: note:  
		    def operator%(num : var)    := (value%num);
		       ^

0 [0x0]: line: 95 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          mod ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int16>.operator<[1066] params(1) in file: lib\support\0.2.805/primitives.sharp:97:8: note:  
		    def operator<(num : ulong)  := (value<num.value);
		       ^

0 [0x0]: line: 97 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator<[1067] params(1) in file: lib\support\0.2.805/primitives.sharp:98:8: note:  
		    def operator<(num : long)   := (value<num.value);
		       ^

0 [0x0]: line: 98 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator<[1068] params(1) in file: lib\support\0.2.805/primitives.sharp:99:8: note:  
		    def operator<(num : uint)   := (value<num.value);
		       ^

0 [0x0]: line: 99 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator<[1069] params(1) in file: lib\support\0.2.805/primitives.sharp:100:8: note:  
		    def operator<(num : int)    := (value<num.value);
		       ^

0 [0x0]: line: 100 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<[1070] params(1) in file: lib\support\0.2.805/primitives.sharp:101:8: note:  
		    def operator<(num : ushort) := (value<num.value);
		       ^

0 [0x0]: line: 101 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<[1071] params(1) in file: lib\support\0.2.805/primitives.sharp:102:8: note:  
		    def operator<(num : short)  := (value<num.value);
		       ^

0 [0x0]: line: 102 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<[1072] params(1) in file: lib\support\0.2.805/primitives.sharp:103:8: note:  
		    def operator<(num : uchar)  := (value<num.value);
		       ^

0 [0x0]: line: 103 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<[1073] params(1) in file: lib\support\0.2.805/primitives.sharp:104:8: note:  
		    def operator<(num : char)   := (value<num.value);
		       ^

0 [0x0]: line: 104 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<[1074] params(1) in file: lib\support\0.2.805/primitives.sharp:105:8: note:  
		    def operator<(num : byte)   := (value<num.value);
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<[1075] params(1) in file: lib\support\0.2.805/primitives.sharp:106:8: note:  
		    def operator<(num : bool)   := (value<num.value);
		       ^

0 [0x0]: line: 106 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<[1076] params(1) in file: lib\support\0.2.805/primitives.sharp:107:8: note:  
		    def operator<(num : var)    := (value<num);
		       ^

0 [0x0]: line: 107 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           lt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int16>.operator>[1077] params(1) in file: lib\support\0.2.805/primitives.sharp:109:8: note:  
		    def operator>(num : ulong)  := (value>num.value);
		       ^

0 [0x0]: line: 109 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>[1078] params(1) in file: lib\support\0.2.805/primitives.sharp:110:8: note:  
		    def operator>(num : long)   := (value>num.value);
		       ^

0 [0x0]: line: 110 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>[1079] params(1) in file: lib\support\0.2.805/primitives.sharp:111:8: note:  
		    def operator>(num : uint)   := (value>num.value);
		       ^

0 [0x0]: line: 111 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>[1080] params(1) in file: lib\support\0.2.805/primitives.sharp:112:8: note:  
		    def operator>(num : int)    := (value>num.value);
		       ^

0 [0x0]: line: 112 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>[1081] params(1) in file: lib\support\0.2.805/primitives.sharp:113:8: note:  
		    def operator>(num : ushort) := (value>num.value);
		       ^

0 [0x0]: line: 113 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>[1082] params(1) in file: lib\support\0.2.805/primitives.sharp:114:8: note:  
		    def operator>(num : short)  := (value>num.value);
		       ^

0 [0x0]: line: 114 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>[1083] params(1) in file: lib\support\0.2.805/primitives.sharp:115:8: note:  
		    def operator>(num : uchar)  := (value>num.value);
		       ^

0 [0x0]: line: 115 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>[1084] params(1) in file: lib\support\0.2.805/primitives.sharp:116:8: note:  
		    def operator>(num : char)   := (value>num.value);
		       ^

0 [0x0]: line: 116 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>[1085] params(1) in file: lib\support\0.2.805/primitives.sharp:117:8: note:  
		    def operator>(num : byte)   := (value>num.value);
		       ^

0 [0x0]: line: 117 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>[1086] params(1) in file: lib\support\0.2.805/primitives.sharp:118:8: note:  
		    def operator>(num : bool)   := (value>num.value);
		       ^

0 [0x0]: line: 118 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>[1087] params(1) in file: lib\support\0.2.805/primitives.sharp:119:8: note:  
		    def operator>(num : var)    := (value>num);
		       ^

0 [0x0]: line: 119 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int16>.operator<=[1088] params(1) in file: lib\support\0.2.805/primitives.sharp:121:8: note:  
		    def operator<=(num : ulong)  := (value>=num.value);
		       ^

0 [0x0]: line: 121 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<=[1089] params(1) in file: lib\support\0.2.805/primitives.sharp:122:8: note:  
		    def operator<=(num : long)   := (value>=num.value);
		       ^

0 [0x0]: line: 122 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<=[1090] params(1) in file: lib\support\0.2.805/primitives.sharp:123:8: note:  
		    def operator<=(num : uint)   := (value>=num.value);
		       ^

0 [0x0]: line: 123 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<=[1091] params(1) in file: lib\support\0.2.805/primitives.sharp:124:8: note:  
		    def operator<=(num : int)    := (value>=num.value);
		       ^

0 [0x0]: line: 124 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<=[1092] params(1) in file: lib\support\0.2.805/primitives.sharp:125:8: note:  
		    def operator<=(num : ushort) := (value>=num.value);
		       ^

0 [0x0]: line: 125 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<=[1093] params(1) in file: lib\support\0.2.805/primitives.sharp:126:8: note:  
		    def operator<=(num : short)  := (value>=num.value);
		       ^

0 [0x0]: line: 126 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<=[1094] params(1) in file: lib\support\0.2.805/primitives.sharp:127:8: note:  
		    def operator<=(num : uchar)  := (value>=num.value);
		       ^

0 [0x0]: line: 127 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<=[1095] params(1) in file: lib\support\0.2.805/primitives.sharp:128:8: note:  
		    def operator<=(num : char)   := (value>=num.value);
		       ^

0 [0x0]: line: 128 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<=[1096] params(1) in file: lib\support\0.2.805/primitives.sharp:129:8: note:  
		    def operator<=(num : byte)   := (value>=num.value);
		       ^

0 [0x0]: line: 129 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<=[1097] params(1) in file: lib\support\0.2.805/primitives.sharp:130:8: note:  
		    def operator<=(num : bool)   := (value>=num.value);
		       ^

0 [0x0]: line: 130 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<=[1098] params(1) in file: lib\support\0.2.805/primitives.sharp:131:8: note:  
		    def operator<=(num : var)    := (value>=num);
		       ^

0 [0x0]: line: 131 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gte ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int16>.operator**[1099] params(1) in file: lib\support\0.2.805/primitives.sharp:133:8: note:  
		    def operator**(num : ulong)  := (value**num.value);
		       ^

0 [0x0]: line: 133 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator**[1100] params(1) in file: lib\support\0.2.805/primitives.sharp:134:8: note:  
		    def operator**(num : long)   := (value**num.value);
		       ^

0 [0x0]: line: 134 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator**[1101] params(1) in file: lib\support\0.2.805/primitives.sharp:135:8: note:  
		    def operator**(num : uint)   := (value**num.value);
		       ^

0 [0x0]: line: 135 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator**[1102] params(1) in file: lib\support\0.2.805/primitives.sharp:136:8: note:  
		    def operator**(num : int)    := (value**num.value);
		       ^

0 [0x0]: line: 136 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator**[1103] params(1) in file: lib\support\0.2.805/primitives.sharp:137:8: note:  
		    def operator**(num : ushort) := (value**num.value);
		       ^

0 [0x0]: line: 137 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator**[1104] params(1) in file: lib\support\0.2.805/primitives.sharp:138:8: note:  
		    def operator**(num : short)  := (value**num.value);
		       ^

0 [0x0]: line: 138 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator**[1105] params(1) in file: lib\support\0.2.805/primitives.sharp:139:8: note:  
		    def operator**(num : uchar)  := (value**num.value);
		       ^

0 [0x0]: line: 139 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator**[1106] params(1) in file: lib\support\0.2.805/primitives.sharp:140:8: note:  
		    def operator**(num : char)   := (value**num.value);
		       ^

0 [0x0]: line: 140 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator**[1107] params(1) in file: lib\support\0.2.805/primitives.sharp:141:8: note:  
		    def operator**(num : byte)   := (value**num.value);
		       ^

0 [0x0]: line: 141 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator**[1108] params(1) in file: lib\support\0.2.805/primitives.sharp:142:8: note:  
		    def operator**(num : bool)   := (value**num.value);
		       ^

0 [0x0]: line: 142 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator**[1109] params(1) in file: lib\support\0.2.805/primitives.sharp:143:8: note:  
		    def operator**(num : var)    := (value**num);
		       ^

0 [0x0]: line: 143 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           exp ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int16>.operator<<[1110] params(1) in file: lib\support\0.2.805/primitives.sharp:145:8: note:  
		    def operator<<(num : ulong)  := (value<<num.value);
		       ^

0 [0x0]: line: 145 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<<[1111] params(1) in file: lib\support\0.2.805/primitives.sharp:146:8: note:  
		    def operator<<(num : long)   := (value<<num.value);
		       ^

0 [0x0]: line: 146 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<<[1112] params(1) in file: lib\support\0.2.805/primitives.sharp:147:8: note:  
		    def operator<<(num : uint)   := (value<<num.value);
		       ^

0 [0x0]: line: 147 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<<[1113] params(1) in file: lib\support\0.2.805/primitives.sharp:148:8: note:  
		    def operator<<(num : int)    := (value<<num.value);
		       ^

0 [0x0]: line: 148 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<<[1114] params(1) in file: lib\support\0.2.805/primitives.sharp:149:8: note:  
		    def operator<<(num : ushort) := (value<<num.value);
		       ^

0 [0x0]: line: 149 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<<[1115] params(1) in file: lib\support\0.2.805/primitives.sharp:150:8: note:  
		    def operator<<(num : short)  := (value<<num.value);
		       ^

0 [0x0]: line: 150 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<<[1116] params(1) in file: lib\support\0.2.805/primitives.sharp:151:8: note:  
		    def operator<<(num : uchar)  := (value<<num.value);
		       ^

0 [0x0]: line: 151 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<<[1117] params(1) in file: lib\support\0.2.805/primitives.sharp:152:8: note:  
		    def operator<<(num : char)   := (value<<num.value);
		       ^

0 [0x0]: line: 152 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<<[1118] params(1) in file: lib\support\0.2.805/primitives.sharp:153:8: note:  
		    def operator<<(num : byte)   := (value<<num.value);
		       ^

0 [0x0]: line: 153 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<<[1119] params(1) in file: lib\support\0.2.805/primitives.sharp:154:8: note:  
		    def operator<<(num : bool)   := (value<<num.value);
		       ^

0 [0x0]: line: 154 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<<[1120] params(1) in file: lib\support\0.2.805/primitives.sharp:155:8: note:  
		    def operator<<(num : var)    := (value<<num);
		       ^

0 [0x0]: line: 155 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shl ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int16>.operator>>[1121] params(1) in file: lib\support\0.2.805/primitives.sharp:157:8: note:  
		    def operator>>(num : ulong)  := (value>>num.value);
		       ^

0 [0x0]: line: 157 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>>[1122] params(1) in file: lib\support\0.2.805/primitives.sharp:158:8: note:  
		    def operator>>(num : long)   := (value>>num.value);
		       ^

0 [0x0]: line: 158 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>>[1123] params(1) in file: lib\support\0.2.805/primitives.sharp:159:8: note:  
		    def operator>>(num : uint)   := (value>>num.value);
		       ^

0 [0x0]: line: 159 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>>[1124] params(1) in file: lib\support\0.2.805/primitives.sharp:160:8: note:  
		    def operator>>(num : int)    := (value>>num.value);
		       ^

0 [0x0]: line: 160 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>>[1125] params(1) in file: lib\support\0.2.805/primitives.sharp:161:8: note:  
		    def operator>>(num : ushort) := (value>>num.value);
		       ^

0 [0x0]: line: 161 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>>[1126] params(1) in file: lib\support\0.2.805/primitives.sharp:162:8: note:  
		    def operator>>(num : short)  := (value>>num.value);
		       ^

0 [0x0]: line: 162 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>>[1127] params(1) in file: lib\support\0.2.805/primitives.sharp:163:8: note:  
		    def operator>>(num : uchar)  := (value>>num.value);
		       ^

0 [0x0]: line: 163 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>>[1128] params(1) in file: lib\support\0.2.805/primitives.sharp:164:8: note:  
		    def operator>>(num : char)   := (value>>num.value);
		       ^

0 [0x0]: line: 164 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>>[1129] params(1) in file: lib\support\0.2.805/primitives.sharp:165:8: note:  
		    def operator>>(num : byte)   := (value>>num.value);
		       ^

0 [0x0]: line: 165 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>>[1130] params(1) in file: lib\support\0.2.805/primitives.sharp:166:8: note:  
		    def operator>>(num : bool)   := (value>>num.value);
		       ^

0 [0x0]: line: 166 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>>[1131] params(1) in file: lib\support\0.2.805/primitives.sharp:167:8: note:  
		    def operator>>(num : var)    := (value>>num);
		       ^

0 [0x0]: line: 167 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shr ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int16>.operator^[1132] params(1) in file: lib\support\0.2.805/primitives.sharp:169:8: note:  
		    def operator^(num : ulong)  := (value^num.value);
		       ^

0 [0x0]: line: 169 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator^[1133] params(1) in file: lib\support\0.2.805/primitives.sharp:170:8: note:  
		    def operator^(num : long)   := (value^num.value);
		       ^

0 [0x0]: line: 170 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator^[1134] params(1) in file: lib\support\0.2.805/primitives.sharp:171:8: note:  
		    def operator^(num : uint)   := (value^num.value);
		       ^

0 [0x0]: line: 171 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator^[1135] params(1) in file: lib\support\0.2.805/primitives.sharp:172:8: note:  
		    def operator^(num : int)    := (value^num.value);
		       ^

0 [0x0]: line: 172 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator^[1136] params(1) in file: lib\support\0.2.805/primitives.sharp:173:8: note:  
		    def operator^(num : ushort) := (value^num.value);
		       ^

0 [0x0]: line: 173 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator^[1137] params(1) in file: lib\support\0.2.805/primitives.sharp:174:8: note:  
		    def operator^(num : short)  := (value^num.value);
		       ^

0 [0x0]: line: 174 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator^[1138] params(1) in file: lib\support\0.2.805/primitives.sharp:175:8: note:  
		    def operator^(num : uchar)  := (value^num.value);
		       ^

0 [0x0]: line: 175 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator^[1139] params(1) in file: lib\support\0.2.805/primitives.sharp:176:8: note:  
		    def operator^(num : char)   := (value^num.value);
		       ^

0 [0x0]: line: 176 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator^[1140] params(1) in file: lib\support\0.2.805/primitives.sharp:177:8: note:  
		    def operator^(num : byte)   := (value^num.value);
		       ^

0 [0x0]: line: 177 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator^[1141] params(1) in file: lib\support\0.2.805/primitives.sharp:178:8: note:  
		    def operator^(num : bool)   := (value^num.value);
		       ^

0 [0x0]: line: 178 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator^[1142] params(1) in file: lib\support\0.2.805/primitives.sharp:179:8: note:  
		    def operator^(num : var)    := (value^num);
		       ^

0 [0x0]: line: 179 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           xor ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int16>.operator&[1143] params(1) in file: lib\support\0.2.805/primitives.sharp:181:8: note:  
		    def operator&(num : ulong)  := (value&num.value);
		       ^

0 [0x0]: line: 181 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator&[1144] params(1) in file: lib\support\0.2.805/primitives.sharp:182:8: note:  
		    def operator&(num : long)   := (value&num.value);
		       ^

0 [0x0]: line: 182 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator&[1145] params(1) in file: lib\support\0.2.805/primitives.sharp:183:8: note:  
		    def operator&(num : uint)   := (value&num.value);
		       ^

0 [0x0]: line: 183 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator&[1146] params(1) in file: lib\support\0.2.805/primitives.sharp:184:8: note:  
		    def operator&(num : int)    := (value&num.value);
		       ^

0 [0x0]: line: 184 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator&[1147] params(1) in file: lib\support\0.2.805/primitives.sharp:185:8: note:  
		    def operator&(num : ushort) := (value&num.value);
		       ^

0 [0x0]: line: 185 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator&[1148] params(1) in file: lib\support\0.2.805/primitives.sharp:186:8: note:  
		    def operator&(num : short)  := (value&num.value);
		       ^

0 [0x0]: line: 186 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator&[1149] params(1) in file: lib\support\0.2.805/primitives.sharp:187:8: note:  
		    def operator&(num : uchar)  := (value&num.value);
		       ^

0 [0x0]: line: 187 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator&[1150] params(1) in file: lib\support\0.2.805/primitives.sharp:188:8: note:  
		    def operator&(num : char)   := (value&num.value);
		       ^

0 [0x0]: line: 188 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator&[1151] params(1) in file: lib\support\0.2.805/primitives.sharp:189:8: note:  
		    def operator&(num : byte)   := (value&num.value);
		       ^

0 [0x0]: line: 189 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator&[1152] params(1) in file: lib\support\0.2.805/primitives.sharp:190:8: note:  
		    def operator&(num : bool)   := (value&num.value);
		       ^

0 [0x0]: line: 190 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator&[1153] params(1) in file: lib\support\0.2.805/primitives.sharp:191:8: note:  
		    def operator&(num : var)    := (value&num);
		       ^

0 [0x0]: line: 191 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           uand ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int16>.operator|[1154] params(1) in file: lib\support\0.2.805/primitives.sharp:193:8: note:  
		    def operator|(num : ulong)  := (value|num.value);
		       ^

0 [0x0]: line: 193 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator|[1155] params(1) in file: lib\support\0.2.805/primitives.sharp:194:8: note:  
		    def operator|(num : long)   := (value|num.value);
		       ^

0 [0x0]: line: 194 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator|[1156] params(1) in file: lib\support\0.2.805/primitives.sharp:195:8: note:  
		    def operator|(num : uint)   := (value|num.value);
		       ^

0 [0x0]: line: 195 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator|[1157] params(1) in file: lib\support\0.2.805/primitives.sharp:196:8: note:  
		    def operator|(num : int)    := (value|num.value);
		       ^

0 [0x0]: line: 196 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator|[1158] params(1) in file: lib\support\0.2.805/primitives.sharp:197:8: note:  
		    def operator|(num : ushort) := (value|num.value);
		       ^

0 [0x0]: line: 197 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator|[1159] params(1) in file: lib\support\0.2.805/primitives.sharp:198:8: note:  
		    def operator|(num : short)  := (value|num.value);
		       ^

0 [0x0]: line: 198 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator|[1160] params(1) in file: lib\support\0.2.805/primitives.sharp:199:8: note:  
		    def operator|(num : uchar)  := (value|num.value);
		       ^

0 [0x0]: line: 199 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator|[1161] params(1) in file: lib\support\0.2.805/primitives.sharp:200:8: note:  
		    def operator|(num : char)   := (value|num.value);
		       ^

0 [0x0]: line: 200 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator|[1162] params(1) in file: lib\support\0.2.805/primitives.sharp:201:8: note:  
		    def operator|(num : byte)   := (value|num.value);
		       ^

0 [0x0]: line: 201 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator|[1163] params(1) in file: lib\support\0.2.805/primitives.sharp:202:8: note:  
		    def operator|(num : bool)   := (value|num.value);
		       ^

0 [0x0]: line: 202 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator|[1164] params(1) in file: lib\support\0.2.805/primitives.sharp:203:8: note:  
		    def operator|(num : var)    := (value|num);
		       ^

0 [0x0]: line: 203 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           or ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int16>.operator!=[1165] params(1) in file: lib\support\0.2.805/primitives.sharp:205:8: note:  
		    def operator!=(num : var) := value!=num;
		       ^

0 [0x0]: line: 205 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           tne ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int16>.operator==[1166] params(1) in file: lib\support\0.2.805/primitives.sharp:206:8: note:  
		    def operator==(num : var) := value==num;
		       ^

0 [0x0]: line: 206 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           test ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int16>.operator=[1167] params(1) in file: lib\support\0.2.805/primitives.sharp:207:8: note:  
		    def operator=(num : var) := value=num;
		       ^

0 [0x0]: line: 207 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           loadval ebx   
5 [0x5]:           mov16 ebx, ebx   
6 [0x6]:           movi #0, adx   
8 [0x8]:           rmov adx, ebx   
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std#integer<_int16>.to_string[1168] params(0) in file: lib\support\0.2.805/primitives.sharp:209:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 210 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           newstr @22 //    
3 [0x3]:           call @2935 // <std#string.string>   
4 [0x4]:           movl 0   
5 [0x5]:           movn #0   
7 [0x7]:           movi #0, adx   
9 [0x9]:           iaload ebx, adx   
10 [0xa]:           rstore ebx   
11 [0xb]:           call @2969 // <std#string.operator+>   
12 [0xc]:           popobj2    
13 [0xd]:           returnobj   
14 [0xe]:           ret   


function: std#integer<_int16>.parse[1169] params(1) in file: lib\support\0.2.805/primitives.sharp:214:15: note:  
		    static def parse(s: string) : native_type {
		              ^

0 [0x0]: line: 215 istorel 0, fp+1   
2 [0x2]: line: 216 movi #0, ebx   
4 [0x4]:           mov16 ebx, ebx   
5 [0x5]:           smovr_2 ebx, fp+2   
6 [0x6]: line: 217 istorel 0, fp+3   
8 [0x8]: line: 218 pushl 0   
9 [0x9]:           call @2976 // <std#string.size>   
10 [0xa]:           ipopl 4   
11 [0xb]: line: 220 pushl 0   
12 [0xc]:           istore 0   
14 [0xe]:           call @2957 // <std#string.at>   
15 [0xf]:           loadval ebx   
16 [0x10]:           rstore ebx   
17 [0x11]:           movi #45, ebx   
19 [0x13]:           loadval ecx   
20 [0x14]:           test ecx, ebx   
21 [0x15]:           jne 26   
22 [0x16]: line: 221 istorel 1, fp+3   
24 [0x18]: line: 222 istorel 1, fp+1   
26 [0x1a]:           nop   
27 [0x1b]: line: 225 ipushl #1   
28 [0x1c]:           loadl ebx, fp+4   
29 [0x1d]:           loadval ecx   
30 [0x1e]:           lt ecx, ebx   
31 [0x1f]:           movr ebx, cmt   
32 [0x20]:           movr cmt, ebx   
33 [0x21]:           jne 79   
34 [0x22]: line: 226 pushl 0   
35 [0x23]:           ipushl #1   
36 [0x24]:           call @2957 // <std#string.at>   
37 [0x25]:           call @2724 // <std#char.is_digit>   
38 [0x26]:           loadval ebx   
39 [0x27]:           not ebx, ebx   
40 [0x28]:           movr cmt, ebx   
41 [0x29]:           jne 54   
42 [0x2a]: line: 227 new_class @4 // std#illegal_argument_exception   
43 [0x2b]:           dup    
44 [0x2c]:           new_class @64 // std#string   
45 [0x2d]:           dup    
46 [0x2e]:           newstr @137 // illegal char in string:    
47 [0x2f]:           call @2935 // <std#string.string>   
48 [0x30]:           pushl 0   
49 [0x31]:           ipushl #1   
50 [0x32]:           call @2957 // <std#string.at>   
51 [0x33]:           call @2968 // <std#string.operator+>   
52 [0x34]:           call @1630 // <std#illegal_argument_exception.illegal_argument_exception>   
53 [0x35]:           throw    
54 [0x36]:           nop   
55 [0x37]: line: 231 movi #10, ebx   
57 [0x39]:           loadl ecx, fp+2   
58 [0x3a]:           mul ecx, ebx -> ebx   
59 [0x3b]:           mov16 ebx, ebx   
60 [0x3c]:           smovr_2 ebx, fp+2   
61 [0x3d]: line: 232 pushl 0   
62 [0x3e]:           loadl ebx, fp+1   
63 [0x3f]:           movr egx, ebx   
64 [0x40]:           inc ebx   
65 [0x41]:           smovr_2 ebx, fp+1   
66 [0x42]:           rstore egx   
67 [0x43]:           call @2957 // <std#string.at>   
68 [0x44]:           loadval ebx   
69 [0x45]:           rstore ebx   
70 [0x46]:           movi #48, ebx   
72 [0x48]:           loadval ecx   
73 [0x49]:           sub ecx, ebx -> ebx   
74 [0x4a]:           loadl ecx, fp+2   
75 [0x4b]:           add ecx, ebx -> ebx   
76 [0x4c]:           mov16 ebx, ebx   
77 [0x4d]:           smovr_2 ebx, fp+2   
78 [0x4e]:           jmp @27   
79 [0x4f]: line: 234 loadl ebx, fp+3   
80 [0x50]:           movr cmt, ebx   
81 [0x51]:           jne 86   
82 [0x52]: line: 235 loadl ebx, fp+2   
83 [0x53]:           neg ebx, ebx   
84 [0x54]:           mov16 ebx, ebx   
85 [0x55]:           smovr_2 ebx, fp+2   
86 [0x56]:           nop   
87 [0x57]: line: 236 loadl ebx, fp+2   
88 [0x58]:           return_val ebx   
89 [0x59]:           ret   


function: std#integer<_int16>.to_ulong[1170] params(0) in file: lib\support\0.2.805/primitives.sharp:239:8: note:  
		    def to_ulong() := new ulong { value };
		       ^

0 [0x0]: line: 239 new_class @44 // std#ulong   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu64 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int16>.to_long[1171] params(0) in file: lib\support\0.2.805/primitives.sharp:240:8: note:  
		    def to_long() := new long { value };
		       ^

0 [0x0]: line: 240 new_class @45 // std#long   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov64 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int16>.to_uint[1172] params(0) in file: lib\support\0.2.805/primitives.sharp:241:8: note:  
		    def to_uint() := new uint { value };
		       ^

0 [0x0]: line: 241 new_class @46 // std#uint   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu32 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int16>.to_int[1173] params(0) in file: lib\support\0.2.805/primitives.sharp:242:8: note:  
		    def to_int() := new int { value };
		       ^

0 [0x0]: line: 242 new_class @47 // std#int   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov32 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int16>.to_ushort[1174] params(0) in file: lib\support\0.2.805/primitives.sharp:243:8: note:  
		    def to_ushort() := new ushort { value };
		       ^

0 [0x0]: line: 243 new_class @48 // std#ushort   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu16 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int16>.to_short[1175] params(0) in file: lib\support\0.2.805/primitives.sharp:244:8: note:  
		    def to_short() := new short { value };
		       ^

0 [0x0]: line: 244 new_class @49 // std#short   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov16 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int16>.to_uchar[1176] params(0) in file: lib\support\0.2.805/primitives.sharp:245:8: note:  
		    def to_uchar() := new uchar { value };
		       ^

0 [0x0]: line: 245 new_class @50 // std#uchar   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int16>.to_char[1177] params(0) in file: lib\support\0.2.805/primitives.sharp:246:8: note:  
		    def to_char() := new char { value };
		       ^

0 [0x0]: line: 246 new_class @51 // std#char   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int16>.to_byte[1178] params(0) in file: lib\support\0.2.805/primitives.sharp:247:8: note:  
		    def to_byte() := new byte { value };
		       ^

0 [0x0]: line: 247 new_class @52 // std#byte   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int16>.to_bool[1179] params(0) in file: lib\support\0.2.805/primitives.sharp:248:8: note:  
		    def to_bool() := new bool { value };
		       ^

0 [0x0]: line: 248 new_class @53 // std#bool   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int16>.get_value[1180] params(0) in file: lib\support\0.2.805/primitives.sharp:250:8: note:  
		    def get_value() := value;
		       ^

0 [0x0]: line: 250 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


constructor: std#integer<_int16>.integer[1181] params(0) in file: lib\support\0.2.805/primitives.sharp:5:13: note:  
		public class integer<native_type> {
		            ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#integer<_uint8>.integer[1182] params(1) in file: lib\support\0.2.805/primitives.sharp:8:12: note:  
		    integer(initial_val : var) {
		           ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 9 ipushl #1   
2 [0x2]:         movl 0   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         movu8 ebx, ebx   
7 [0x7]:         movi #0, adx   
9 [0x9]:         rmov adx, ebx   
10 [0xa]:         ret   


function: std#integer<_uint8>.hash[1183] params(0) in file: lib\support\0.2.805/primitives.sharp:12:8: note:  
		    def hash() : long {
		       ^

0 [0x0]: line: 13 new_class @45 // std#long   
1 [0x1]:          dup    
2 [0x2]:          movl 0   
3 [0x3]:          movn #0   
5 [0x5]:          movi #0, adx   
7 [0x7]:          iaload ebx, adx   
8 [0x8]:          rstore ebx   
9 [0x9]:          call @2077 // <std#long.long>   
10 [0xa]:          popobj2    
11 [0xb]:          returnobj   
12 [0xc]:          ret   


overload function: std#integer<_uint8>.operator!=[1184] params(1) in file: lib\support\0.2.805/primitives.sharp:16:8: note:  
		    def operator!=(num : ulong) := (value!=num.value);
		       ^

0 [0x0]: line: 16 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator==[1185] params(1) in file: lib\support\0.2.805/primitives.sharp:17:8: note:  
		    def operator==(num : ulong) := (value==num.value);
		       ^

0 [0x0]: line: 17 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator!=[1186] params(1) in file: lib\support\0.2.805/primitives.sharp:18:8: note:  
		    def operator!=(num : long) := (value!=num.value);
		       ^

0 [0x0]: line: 18 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator==[1187] params(1) in file: lib\support\0.2.805/primitives.sharp:19:8: note:  
		    def operator==(num : long) := (value==num.value);
		       ^

0 [0x0]: line: 19 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator!=[1188] params(1) in file: lib\support\0.2.805/primitives.sharp:20:8: note:  
		    def operator!=(num : uint) := (value!=num.value);
		       ^

0 [0x0]: line: 20 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator==[1189] params(1) in file: lib\support\0.2.805/primitives.sharp:21:8: note:  
		    def operator==(num : uint) := (value==num.value);
		       ^

0 [0x0]: line: 21 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator!=[1190] params(1) in file: lib\support\0.2.805/primitives.sharp:22:8: note:  
		    def operator!=(num : int) := (value!=num.value);
		       ^

0 [0x0]: line: 22 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator==[1191] params(1) in file: lib\support\0.2.805/primitives.sharp:23:8: note:  
		    def operator==(num : int) := (value==num.value);
		       ^

0 [0x0]: line: 23 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator!=[1192] params(1) in file: lib\support\0.2.805/primitives.sharp:24:8: note:  
		    def operator!=(num : ushort) := (value!=num.value);
		       ^

0 [0x0]: line: 24 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator==[1193] params(1) in file: lib\support\0.2.805/primitives.sharp:25:8: note:  
		    def operator==(num : ushort) := (value==num.value);
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator!=[1194] params(1) in file: lib\support\0.2.805/primitives.sharp:26:8: note:  
		    def operator!=(num : short) := (value!=num.value);
		       ^

0 [0x0]: line: 26 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator==[1195] params(1) in file: lib\support\0.2.805/primitives.sharp:27:8: note:  
		    def operator==(num : short) := (value==num.value);
		       ^

0 [0x0]: line: 27 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator!=[1196] params(1) in file: lib\support\0.2.805/primitives.sharp:28:8: note:  
		    def operator!=(num : uchar) := (value!=num.value);
		       ^

0 [0x0]: line: 28 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator==[1197] params(1) in file: lib\support\0.2.805/primitives.sharp:29:8: note:  
		    def operator==(num : uchar) := (value==num.value);
		       ^

0 [0x0]: line: 29 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator!=[1198] params(1) in file: lib\support\0.2.805/primitives.sharp:30:8: note:  
		    def operator!=(num : char) := (value!=num.value);
		       ^

0 [0x0]: line: 30 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator==[1199] params(1) in file: lib\support\0.2.805/primitives.sharp:31:8: note:  
		    def operator==(num : char) := (value==num.value);
		       ^

0 [0x0]: line: 31 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator!=[1200] params(1) in file: lib\support\0.2.805/primitives.sharp:32:8: note:  
		    def operator!=(num : byte) := (value!=num.value);
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator==[1201] params(1) in file: lib\support\0.2.805/primitives.sharp:33:8: note:  
		    def operator==(num : byte) := (value==num.value);
		       ^

0 [0x0]: line: 33 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator!=[1202] params(1) in file: lib\support\0.2.805/primitives.sharp:34:8: note:  
		    def operator!=(num : bool) := (value!=num.value);
		       ^

0 [0x0]: line: 34 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator==[1203] params(1) in file: lib\support\0.2.805/primitives.sharp:35:8: note:  
		    def operator==(num : bool) := (value==num.value);
		       ^

0 [0x0]: line: 35 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator+[1204] params(1) in file: lib\support\0.2.805/primitives.sharp:37:8: note:  
		    def operator+(num : ulong)  := (value+num.value);
		       ^

0 [0x0]: line: 37 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator+[1205] params(1) in file: lib\support\0.2.805/primitives.sharp:38:8: note:  
		    def operator+(num : long)   := (value+num.value);
		       ^

0 [0x0]: line: 38 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator+[1206] params(1) in file: lib\support\0.2.805/primitives.sharp:39:8: note:  
		    def operator+(num : uint)   := (value+num.value);
		       ^

0 [0x0]: line: 39 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator+[1207] params(1) in file: lib\support\0.2.805/primitives.sharp:40:8: note:  
		    def operator+(num : int)    := (value+num.value);
		       ^

0 [0x0]: line: 40 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator+[1208] params(1) in file: lib\support\0.2.805/primitives.sharp:41:8: note:  
		    def operator+(num : ushort) := (value+num.value);
		       ^

0 [0x0]: line: 41 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator+[1209] params(1) in file: lib\support\0.2.805/primitives.sharp:42:8: note:  
		    def operator+(num : short)  := (value+num.value);
		       ^

0 [0x0]: line: 42 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator+[1210] params(1) in file: lib\support\0.2.805/primitives.sharp:43:8: note:  
		    def operator+(num : uchar)  := (value+num.value);
		       ^

0 [0x0]: line: 43 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator+[1211] params(1) in file: lib\support\0.2.805/primitives.sharp:44:8: note:  
		    def operator+(num : char)   := (value+num.value);
		       ^

0 [0x0]: line: 44 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator+[1212] params(1) in file: lib\support\0.2.805/primitives.sharp:45:8: note:  
		    def operator+(num : byte)   := (value+num.value);
		       ^

0 [0x0]: line: 45 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator+[1213] params(1) in file: lib\support\0.2.805/primitives.sharp:46:8: note:  
		    def operator+(num : bool)   := (value+num.value);
		       ^

0 [0x0]: line: 46 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator+[1214] params(1) in file: lib\support\0.2.805/primitives.sharp:47:8: note:  
		    def operator+(num : var)    := (value+num);
		       ^

0 [0x0]: line: 47 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          add ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint8>.operator-[1215] params(1) in file: lib\support\0.2.805/primitives.sharp:49:8: note:  
		    def operator-(num : ulong)  := (value-num.value);
		       ^

0 [0x0]: line: 49 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator-[1216] params(1) in file: lib\support\0.2.805/primitives.sharp:50:8: note:  
		    def operator-(num : long)   := (value-num.value);
		       ^

0 [0x0]: line: 50 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator-[1217] params(1) in file: lib\support\0.2.805/primitives.sharp:51:8: note:  
		    def operator-(num : uint)   := (value-num.value);
		       ^

0 [0x0]: line: 51 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator-[1218] params(1) in file: lib\support\0.2.805/primitives.sharp:52:8: note:  
		    def operator-(num : int)    := (value-num.value);
		       ^

0 [0x0]: line: 52 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator-[1219] params(1) in file: lib\support\0.2.805/primitives.sharp:53:8: note:  
		    def operator-(num : ushort) := (value-num.value);
		       ^

0 [0x0]: line: 53 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator-[1220] params(1) in file: lib\support\0.2.805/primitives.sharp:54:8: note:  
		    def operator-(num : short)  := (value-num.value);
		       ^

0 [0x0]: line: 54 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator-[1221] params(1) in file: lib\support\0.2.805/primitives.sharp:55:8: note:  
		    def operator-(num : uchar)  := (value-num.value);
		       ^

0 [0x0]: line: 55 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator-[1222] params(1) in file: lib\support\0.2.805/primitives.sharp:56:8: note:  
		    def operator-(num : char)   := (value-num.value);
		       ^

0 [0x0]: line: 56 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator-[1223] params(1) in file: lib\support\0.2.805/primitives.sharp:57:8: note:  
		    def operator-(num : byte)   := (value-num.value);
		       ^

0 [0x0]: line: 57 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator-[1224] params(1) in file: lib\support\0.2.805/primitives.sharp:58:8: note:  
		    def operator-(num : bool)   := (value-num.value);
		       ^

0 [0x0]: line: 58 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator-[1225] params(1) in file: lib\support\0.2.805/primitives.sharp:59:8: note:  
		    def operator-(num : var)    := (value-num);
		       ^

0 [0x0]: line: 59 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          sub ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint8>.operator*[1226] params(1) in file: lib\support\0.2.805/primitives.sharp:61:8: note:  
		    def operator*(num : ulong)  := (value*num.value);
		       ^

0 [0x0]: line: 61 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator*[1227] params(1) in file: lib\support\0.2.805/primitives.sharp:62:8: note:  
		    def operator*(num : long)   := (value*num.value);
		       ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator*[1228] params(1) in file: lib\support\0.2.805/primitives.sharp:63:8: note:  
		    def operator*(num : uint)   := (value*num.value);
		       ^

0 [0x0]: line: 63 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator*[1229] params(1) in file: lib\support\0.2.805/primitives.sharp:64:8: note:  
		    def operator*(num : int)    := (value*num.value);
		       ^

0 [0x0]: line: 64 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator*[1230] params(1) in file: lib\support\0.2.805/primitives.sharp:65:8: note:  
		    def operator*(num : ushort) := (value*num.value);
		       ^

0 [0x0]: line: 65 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator*[1231] params(1) in file: lib\support\0.2.805/primitives.sharp:66:8: note:  
		    def operator*(num : short)  := (value*num.value);
		       ^

0 [0x0]: line: 66 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator*[1232] params(1) in file: lib\support\0.2.805/primitives.sharp:67:8: note:  
		    def operator*(num : uchar)  := (value*num.value);
		       ^

0 [0x0]: line: 67 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator*[1233] params(1) in file: lib\support\0.2.805/primitives.sharp:68:8: note:  
		    def operator*(num : char)   := (value*num.value);
		       ^

0 [0x0]: line: 68 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator*[1234] params(1) in file: lib\support\0.2.805/primitives.sharp:69:8: note:  
		    def operator*(num : byte)   := (value*num.value);
		       ^

0 [0x0]: line: 69 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator*[1235] params(1) in file: lib\support\0.2.805/primitives.sharp:70:8: note:  
		    def operator*(num : bool)   := (value*num.value);
		       ^

0 [0x0]: line: 70 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator*[1236] params(1) in file: lib\support\0.2.805/primitives.sharp:71:8: note:  
		    def operator*(num : var)    := (value*num);
		       ^

0 [0x0]: line: 71 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          mul ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint8>.operator/[1237] params(1) in file: lib\support\0.2.805/primitives.sharp:73:8: note:  
		    def operator/(num : ulong)  := (value/num.value);
		       ^

0 [0x0]: line: 73 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator/[1238] params(1) in file: lib\support\0.2.805/primitives.sharp:74:8: note:  
		    def operator/(num : long)   := (value/num.value);
		       ^

0 [0x0]: line: 74 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator/[1239] params(1) in file: lib\support\0.2.805/primitives.sharp:75:8: note:  
		    def operator/(num : uint)   := (value/num.value);
		       ^

0 [0x0]: line: 75 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator/[1240] params(1) in file: lib\support\0.2.805/primitives.sharp:76:8: note:  
		    def operator/(num : int)    := (value/num.value);
		       ^

0 [0x0]: line: 76 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator/[1241] params(1) in file: lib\support\0.2.805/primitives.sharp:77:8: note:  
		    def operator/(num : ushort) := (value/num.value);
		       ^

0 [0x0]: line: 77 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator/[1242] params(1) in file: lib\support\0.2.805/primitives.sharp:78:8: note:  
		    def operator/(num : short)  := (value/num.value);
		       ^

0 [0x0]: line: 78 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator/[1243] params(1) in file: lib\support\0.2.805/primitives.sharp:79:8: note:  
		    def operator/(num : uchar)  := (value/num.value);
		       ^

0 [0x0]: line: 79 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator/[1244] params(1) in file: lib\support\0.2.805/primitives.sharp:80:8: note:  
		    def operator/(num : char)   := (value/num.value);
		       ^

0 [0x0]: line: 80 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator/[1245] params(1) in file: lib\support\0.2.805/primitives.sharp:81:8: note:  
		    def operator/(num : byte)   := (value/num.value);
		       ^

0 [0x0]: line: 81 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator/[1246] params(1) in file: lib\support\0.2.805/primitives.sharp:82:8: note:  
		    def operator/(num : bool)   := (value/num.value);
		       ^

0 [0x0]: line: 82 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator/[1247] params(1) in file: lib\support\0.2.805/primitives.sharp:83:8: note:  
		    def operator/(num : var)    := (value/num);
		       ^

0 [0x0]: line: 83 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          div ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint8>.operator%[1248] params(1) in file: lib\support\0.2.805/primitives.sharp:85:8: note:  
		    def operator%(num : ulong)  := (value%num.value);
		       ^

0 [0x0]: line: 85 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator%[1249] params(1) in file: lib\support\0.2.805/primitives.sharp:86:8: note:  
		    def operator%(num : long)   := (value%num.value);
		       ^

0 [0x0]: line: 86 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator%[1250] params(1) in file: lib\support\0.2.805/primitives.sharp:87:8: note:  
		    def operator%(num : uint)   := (value%num.value);
		       ^

0 [0x0]: line: 87 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator%[1251] params(1) in file: lib\support\0.2.805/primitives.sharp:88:8: note:  
		    def operator%(num : int)    := (value%num.value);
		       ^

0 [0x0]: line: 88 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator%[1252] params(1) in file: lib\support\0.2.805/primitives.sharp:89:8: note:  
		    def operator%(num : ushort) := (value%num.value);
		       ^

0 [0x0]: line: 89 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator%[1253] params(1) in file: lib\support\0.2.805/primitives.sharp:90:8: note:  
		    def operator%(num : short)  := (value%num.value);
		       ^

0 [0x0]: line: 90 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator%[1254] params(1) in file: lib\support\0.2.805/primitives.sharp:91:8: note:  
		    def operator%(num : uchar)  := (value%num.value);
		       ^

0 [0x0]: line: 91 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator%[1255] params(1) in file: lib\support\0.2.805/primitives.sharp:92:8: note:  
		    def operator%(num : char)   := (value%num.value);
		       ^

0 [0x0]: line: 92 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator%[1256] params(1) in file: lib\support\0.2.805/primitives.sharp:93:8: note:  
		    def operator%(num : byte)   := (value%num.value);
		       ^

0 [0x0]: line: 93 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator%[1257] params(1) in file: lib\support\0.2.805/primitives.sharp:94:8: note:  
		    def operator%(num : bool)   := (value%num.value);
		       ^

0 [0x0]: line: 94 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator%[1258] params(1) in file: lib\support\0.2.805/primitives.sharp:95:8: note:  
		    def operator%(num : var)    := (value%num);
		       ^

0 [0x0]: line: 95 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          mod ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint8>.operator<[1259] params(1) in file: lib\support\0.2.805/primitives.sharp:97:8: note:  
		    def operator<(num : ulong)  := (value<num.value);
		       ^

0 [0x0]: line: 97 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator<[1260] params(1) in file: lib\support\0.2.805/primitives.sharp:98:8: note:  
		    def operator<(num : long)   := (value<num.value);
		       ^

0 [0x0]: line: 98 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator<[1261] params(1) in file: lib\support\0.2.805/primitives.sharp:99:8: note:  
		    def operator<(num : uint)   := (value<num.value);
		       ^

0 [0x0]: line: 99 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator<[1262] params(1) in file: lib\support\0.2.805/primitives.sharp:100:8: note:  
		    def operator<(num : int)    := (value<num.value);
		       ^

0 [0x0]: line: 100 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<[1263] params(1) in file: lib\support\0.2.805/primitives.sharp:101:8: note:  
		    def operator<(num : ushort) := (value<num.value);
		       ^

0 [0x0]: line: 101 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<[1264] params(1) in file: lib\support\0.2.805/primitives.sharp:102:8: note:  
		    def operator<(num : short)  := (value<num.value);
		       ^

0 [0x0]: line: 102 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<[1265] params(1) in file: lib\support\0.2.805/primitives.sharp:103:8: note:  
		    def operator<(num : uchar)  := (value<num.value);
		       ^

0 [0x0]: line: 103 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<[1266] params(1) in file: lib\support\0.2.805/primitives.sharp:104:8: note:  
		    def operator<(num : char)   := (value<num.value);
		       ^

0 [0x0]: line: 104 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<[1267] params(1) in file: lib\support\0.2.805/primitives.sharp:105:8: note:  
		    def operator<(num : byte)   := (value<num.value);
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<[1268] params(1) in file: lib\support\0.2.805/primitives.sharp:106:8: note:  
		    def operator<(num : bool)   := (value<num.value);
		       ^

0 [0x0]: line: 106 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<[1269] params(1) in file: lib\support\0.2.805/primitives.sharp:107:8: note:  
		    def operator<(num : var)    := (value<num);
		       ^

0 [0x0]: line: 107 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           lt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint8>.operator>[1270] params(1) in file: lib\support\0.2.805/primitives.sharp:109:8: note:  
		    def operator>(num : ulong)  := (value>num.value);
		       ^

0 [0x0]: line: 109 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>[1271] params(1) in file: lib\support\0.2.805/primitives.sharp:110:8: note:  
		    def operator>(num : long)   := (value>num.value);
		       ^

0 [0x0]: line: 110 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>[1272] params(1) in file: lib\support\0.2.805/primitives.sharp:111:8: note:  
		    def operator>(num : uint)   := (value>num.value);
		       ^

0 [0x0]: line: 111 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>[1273] params(1) in file: lib\support\0.2.805/primitives.sharp:112:8: note:  
		    def operator>(num : int)    := (value>num.value);
		       ^

0 [0x0]: line: 112 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>[1274] params(1) in file: lib\support\0.2.805/primitives.sharp:113:8: note:  
		    def operator>(num : ushort) := (value>num.value);
		       ^

0 [0x0]: line: 113 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>[1275] params(1) in file: lib\support\0.2.805/primitives.sharp:114:8: note:  
		    def operator>(num : short)  := (value>num.value);
		       ^

0 [0x0]: line: 114 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>[1276] params(1) in file: lib\support\0.2.805/primitives.sharp:115:8: note:  
		    def operator>(num : uchar)  := (value>num.value);
		       ^

0 [0x0]: line: 115 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>[1277] params(1) in file: lib\support\0.2.805/primitives.sharp:116:8: note:  
		    def operator>(num : char)   := (value>num.value);
		       ^

0 [0x0]: line: 116 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>[1278] params(1) in file: lib\support\0.2.805/primitives.sharp:117:8: note:  
		    def operator>(num : byte)   := (value>num.value);
		       ^

0 [0x0]: line: 117 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>[1279] params(1) in file: lib\support\0.2.805/primitives.sharp:118:8: note:  
		    def operator>(num : bool)   := (value>num.value);
		       ^

0 [0x0]: line: 118 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>[1280] params(1) in file: lib\support\0.2.805/primitives.sharp:119:8: note:  
		    def operator>(num : var)    := (value>num);
		       ^

0 [0x0]: line: 119 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint8>.operator<=[1281] params(1) in file: lib\support\0.2.805/primitives.sharp:121:8: note:  
		    def operator<=(num : ulong)  := (value>=num.value);
		       ^

0 [0x0]: line: 121 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<=[1282] params(1) in file: lib\support\0.2.805/primitives.sharp:122:8: note:  
		    def operator<=(num : long)   := (value>=num.value);
		       ^

0 [0x0]: line: 122 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<=[1283] params(1) in file: lib\support\0.2.805/primitives.sharp:123:8: note:  
		    def operator<=(num : uint)   := (value>=num.value);
		       ^

0 [0x0]: line: 123 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<=[1284] params(1) in file: lib\support\0.2.805/primitives.sharp:124:8: note:  
		    def operator<=(num : int)    := (value>=num.value);
		       ^

0 [0x0]: line: 124 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<=[1285] params(1) in file: lib\support\0.2.805/primitives.sharp:125:8: note:  
		    def operator<=(num : ushort) := (value>=num.value);
		       ^

0 [0x0]: line: 125 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<=[1286] params(1) in file: lib\support\0.2.805/primitives.sharp:126:8: note:  
		    def operator<=(num : short)  := (value>=num.value);
		       ^

0 [0x0]: line: 126 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<=[1287] params(1) in file: lib\support\0.2.805/primitives.sharp:127:8: note:  
		    def operator<=(num : uchar)  := (value>=num.value);
		       ^

0 [0x0]: line: 127 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<=[1288] params(1) in file: lib\support\0.2.805/primitives.sharp:128:8: note:  
		    def operator<=(num : char)   := (value>=num.value);
		       ^

0 [0x0]: line: 128 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<=[1289] params(1) in file: lib\support\0.2.805/primitives.sharp:129:8: note:  
		    def operator<=(num : byte)   := (value>=num.value);
		       ^

0 [0x0]: line: 129 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<=[1290] params(1) in file: lib\support\0.2.805/primitives.sharp:130:8: note:  
		    def operator<=(num : bool)   := (value>=num.value);
		       ^

0 [0x0]: line: 130 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<=[1291] params(1) in file: lib\support\0.2.805/primitives.sharp:131:8: note:  
		    def operator<=(num : var)    := (value>=num);
		       ^

0 [0x0]: line: 131 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gte ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint8>.operator**[1292] params(1) in file: lib\support\0.2.805/primitives.sharp:133:8: note:  
		    def operator**(num : ulong)  := (value**num.value);
		       ^

0 [0x0]: line: 133 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator**[1293] params(1) in file: lib\support\0.2.805/primitives.sharp:134:8: note:  
		    def operator**(num : long)   := (value**num.value);
		       ^

0 [0x0]: line: 134 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator**[1294] params(1) in file: lib\support\0.2.805/primitives.sharp:135:8: note:  
		    def operator**(num : uint)   := (value**num.value);
		       ^

0 [0x0]: line: 135 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator**[1295] params(1) in file: lib\support\0.2.805/primitives.sharp:136:8: note:  
		    def operator**(num : int)    := (value**num.value);
		       ^

0 [0x0]: line: 136 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator**[1296] params(1) in file: lib\support\0.2.805/primitives.sharp:137:8: note:  
		    def operator**(num : ushort) := (value**num.value);
		       ^

0 [0x0]: line: 137 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator**[1297] params(1) in file: lib\support\0.2.805/primitives.sharp:138:8: note:  
		    def operator**(num : short)  := (value**num.value);
		       ^

0 [0x0]: line: 138 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator**[1298] params(1) in file: lib\support\0.2.805/primitives.sharp:139:8: note:  
		    def operator**(num : uchar)  := (value**num.value);
		       ^

0 [0x0]: line: 139 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator**[1299] params(1) in file: lib\support\0.2.805/primitives.sharp:140:8: note:  
		    def operator**(num : char)   := (value**num.value);
		       ^

0 [0x0]: line: 140 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator**[1300] params(1) in file: lib\support\0.2.805/primitives.sharp:141:8: note:  
		    def operator**(num : byte)   := (value**num.value);
		       ^

0 [0x0]: line: 141 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator**[1301] params(1) in file: lib\support\0.2.805/primitives.sharp:142:8: note:  
		    def operator**(num : bool)   := (value**num.value);
		       ^

0 [0x0]: line: 142 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator**[1302] params(1) in file: lib\support\0.2.805/primitives.sharp:143:8: note:  
		    def operator**(num : var)    := (value**num);
		       ^

0 [0x0]: line: 143 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           exp ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint8>.operator<<[1303] params(1) in file: lib\support\0.2.805/primitives.sharp:145:8: note:  
		    def operator<<(num : ulong)  := (value<<num.value);
		       ^

0 [0x0]: line: 145 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<<[1304] params(1) in file: lib\support\0.2.805/primitives.sharp:146:8: note:  
		    def operator<<(num : long)   := (value<<num.value);
		       ^

0 [0x0]: line: 146 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<<[1305] params(1) in file: lib\support\0.2.805/primitives.sharp:147:8: note:  
		    def operator<<(num : uint)   := (value<<num.value);
		       ^

0 [0x0]: line: 147 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<<[1306] params(1) in file: lib\support\0.2.805/primitives.sharp:148:8: note:  
		    def operator<<(num : int)    := (value<<num.value);
		       ^

0 [0x0]: line: 148 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<<[1307] params(1) in file: lib\support\0.2.805/primitives.sharp:149:8: note:  
		    def operator<<(num : ushort) := (value<<num.value);
		       ^

0 [0x0]: line: 149 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<<[1308] params(1) in file: lib\support\0.2.805/primitives.sharp:150:8: note:  
		    def operator<<(num : short)  := (value<<num.value);
		       ^

0 [0x0]: line: 150 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<<[1309] params(1) in file: lib\support\0.2.805/primitives.sharp:151:8: note:  
		    def operator<<(num : uchar)  := (value<<num.value);
		       ^

0 [0x0]: line: 151 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<<[1310] params(1) in file: lib\support\0.2.805/primitives.sharp:152:8: note:  
		    def operator<<(num : char)   := (value<<num.value);
		       ^

0 [0x0]: line: 152 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<<[1311] params(1) in file: lib\support\0.2.805/primitives.sharp:153:8: note:  
		    def operator<<(num : byte)   := (value<<num.value);
		       ^

0 [0x0]: line: 153 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<<[1312] params(1) in file: lib\support\0.2.805/primitives.sharp:154:8: note:  
		    def operator<<(num : bool)   := (value<<num.value);
		       ^

0 [0x0]: line: 154 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<<[1313] params(1) in file: lib\support\0.2.805/primitives.sharp:155:8: note:  
		    def operator<<(num : var)    := (value<<num);
		       ^

0 [0x0]: line: 155 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shl ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint8>.operator>>[1314] params(1) in file: lib\support\0.2.805/primitives.sharp:157:8: note:  
		    def operator>>(num : ulong)  := (value>>num.value);
		       ^

0 [0x0]: line: 157 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>>[1315] params(1) in file: lib\support\0.2.805/primitives.sharp:158:8: note:  
		    def operator>>(num : long)   := (value>>num.value);
		       ^

0 [0x0]: line: 158 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>>[1316] params(1) in file: lib\support\0.2.805/primitives.sharp:159:8: note:  
		    def operator>>(num : uint)   := (value>>num.value);
		       ^

0 [0x0]: line: 159 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>>[1317] params(1) in file: lib\support\0.2.805/primitives.sharp:160:8: note:  
		    def operator>>(num : int)    := (value>>num.value);
		       ^

0 [0x0]: line: 160 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>>[1318] params(1) in file: lib\support\0.2.805/primitives.sharp:161:8: note:  
		    def operator>>(num : ushort) := (value>>num.value);
		       ^

0 [0x0]: line: 161 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>>[1319] params(1) in file: lib\support\0.2.805/primitives.sharp:162:8: note:  
		    def operator>>(num : short)  := (value>>num.value);
		       ^

0 [0x0]: line: 162 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>>[1320] params(1) in file: lib\support\0.2.805/primitives.sharp:163:8: note:  
		    def operator>>(num : uchar)  := (value>>num.value);
		       ^

0 [0x0]: line: 163 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>>[1321] params(1) in file: lib\support\0.2.805/primitives.sharp:164:8: note:  
		    def operator>>(num : char)   := (value>>num.value);
		       ^

0 [0x0]: line: 164 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>>[1322] params(1) in file: lib\support\0.2.805/primitives.sharp:165:8: note:  
		    def operator>>(num : byte)   := (value>>num.value);
		       ^

0 [0x0]: line: 165 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>>[1323] params(1) in file: lib\support\0.2.805/primitives.sharp:166:8: note:  
		    def operator>>(num : bool)   := (value>>num.value);
		       ^

0 [0x0]: line: 166 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>>[1324] params(1) in file: lib\support\0.2.805/primitives.sharp:167:8: note:  
		    def operator>>(num : var)    := (value>>num);
		       ^

0 [0x0]: line: 167 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shr ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint8>.operator^[1325] params(1) in file: lib\support\0.2.805/primitives.sharp:169:8: note:  
		    def operator^(num : ulong)  := (value^num.value);
		       ^

0 [0x0]: line: 169 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator^[1326] params(1) in file: lib\support\0.2.805/primitives.sharp:170:8: note:  
		    def operator^(num : long)   := (value^num.value);
		       ^

0 [0x0]: line: 170 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator^[1327] params(1) in file: lib\support\0.2.805/primitives.sharp:171:8: note:  
		    def operator^(num : uint)   := (value^num.value);
		       ^

0 [0x0]: line: 171 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator^[1328] params(1) in file: lib\support\0.2.805/primitives.sharp:172:8: note:  
		    def operator^(num : int)    := (value^num.value);
		       ^

0 [0x0]: line: 172 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator^[1329] params(1) in file: lib\support\0.2.805/primitives.sharp:173:8: note:  
		    def operator^(num : ushort) := (value^num.value);
		       ^

0 [0x0]: line: 173 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator^[1330] params(1) in file: lib\support\0.2.805/primitives.sharp:174:8: note:  
		    def operator^(num : short)  := (value^num.value);
		       ^

0 [0x0]: line: 174 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator^[1331] params(1) in file: lib\support\0.2.805/primitives.sharp:175:8: note:  
		    def operator^(num : uchar)  := (value^num.value);
		       ^

0 [0x0]: line: 175 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator^[1332] params(1) in file: lib\support\0.2.805/primitives.sharp:176:8: note:  
		    def operator^(num : char)   := (value^num.value);
		       ^

0 [0x0]: line: 176 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator^[1333] params(1) in file: lib\support\0.2.805/primitives.sharp:177:8: note:  
		    def operator^(num : byte)   := (value^num.value);
		       ^

0 [0x0]: line: 177 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator^[1334] params(1) in file: lib\support\0.2.805/primitives.sharp:178:8: note:  
		    def operator^(num : bool)   := (value^num.value);
		       ^

0 [0x0]: line: 178 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator^[1335] params(1) in file: lib\support\0.2.805/primitives.sharp:179:8: note:  
		    def operator^(num : var)    := (value^num);
		       ^

0 [0x0]: line: 179 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           xor ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint8>.operator&[1336] params(1) in file: lib\support\0.2.805/primitives.sharp:181:8: note:  
		    def operator&(num : ulong)  := (value&num.value);
		       ^

0 [0x0]: line: 181 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator&[1337] params(1) in file: lib\support\0.2.805/primitives.sharp:182:8: note:  
		    def operator&(num : long)   := (value&num.value);
		       ^

0 [0x0]: line: 182 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator&[1338] params(1) in file: lib\support\0.2.805/primitives.sharp:183:8: note:  
		    def operator&(num : uint)   := (value&num.value);
		       ^

0 [0x0]: line: 183 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator&[1339] params(1) in file: lib\support\0.2.805/primitives.sharp:184:8: note:  
		    def operator&(num : int)    := (value&num.value);
		       ^

0 [0x0]: line: 184 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator&[1340] params(1) in file: lib\support\0.2.805/primitives.sharp:185:8: note:  
		    def operator&(num : ushort) := (value&num.value);
		       ^

0 [0x0]: line: 185 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator&[1341] params(1) in file: lib\support\0.2.805/primitives.sharp:186:8: note:  
		    def operator&(num : short)  := (value&num.value);
		       ^

0 [0x0]: line: 186 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator&[1342] params(1) in file: lib\support\0.2.805/primitives.sharp:187:8: note:  
		    def operator&(num : uchar)  := (value&num.value);
		       ^

0 [0x0]: line: 187 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator&[1343] params(1) in file: lib\support\0.2.805/primitives.sharp:188:8: note:  
		    def operator&(num : char)   := (value&num.value);
		       ^

0 [0x0]: line: 188 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator&[1344] params(1) in file: lib\support\0.2.805/primitives.sharp:189:8: note:  
		    def operator&(num : byte)   := (value&num.value);
		       ^

0 [0x0]: line: 189 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator&[1345] params(1) in file: lib\support\0.2.805/primitives.sharp:190:8: note:  
		    def operator&(num : bool)   := (value&num.value);
		       ^

0 [0x0]: line: 190 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator&[1346] params(1) in file: lib\support\0.2.805/primitives.sharp:191:8: note:  
		    def operator&(num : var)    := (value&num);
		       ^

0 [0x0]: line: 191 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           uand ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint8>.operator|[1347] params(1) in file: lib\support\0.2.805/primitives.sharp:193:8: note:  
		    def operator|(num : ulong)  := (value|num.value);
		       ^

0 [0x0]: line: 193 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator|[1348] params(1) in file: lib\support\0.2.805/primitives.sharp:194:8: note:  
		    def operator|(num : long)   := (value|num.value);
		       ^

0 [0x0]: line: 194 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator|[1349] params(1) in file: lib\support\0.2.805/primitives.sharp:195:8: note:  
		    def operator|(num : uint)   := (value|num.value);
		       ^

0 [0x0]: line: 195 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator|[1350] params(1) in file: lib\support\0.2.805/primitives.sharp:196:8: note:  
		    def operator|(num : int)    := (value|num.value);
		       ^

0 [0x0]: line: 196 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator|[1351] params(1) in file: lib\support\0.2.805/primitives.sharp:197:8: note:  
		    def operator|(num : ushort) := (value|num.value);
		       ^

0 [0x0]: line: 197 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator|[1352] params(1) in file: lib\support\0.2.805/primitives.sharp:198:8: note:  
		    def operator|(num : short)  := (value|num.value);
		       ^

0 [0x0]: line: 198 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator|[1353] params(1) in file: lib\support\0.2.805/primitives.sharp:199:8: note:  
		    def operator|(num : uchar)  := (value|num.value);
		       ^

0 [0x0]: line: 199 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator|[1354] params(1) in file: lib\support\0.2.805/primitives.sharp:200:8: note:  
		    def operator|(num : char)   := (value|num.value);
		       ^

0 [0x0]: line: 200 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator|[1355] params(1) in file: lib\support\0.2.805/primitives.sharp:201:8: note:  
		    def operator|(num : byte)   := (value|num.value);
		       ^

0 [0x0]: line: 201 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator|[1356] params(1) in file: lib\support\0.2.805/primitives.sharp:202:8: note:  
		    def operator|(num : bool)   := (value|num.value);
		       ^

0 [0x0]: line: 202 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator|[1357] params(1) in file: lib\support\0.2.805/primitives.sharp:203:8: note:  
		    def operator|(num : var)    := (value|num);
		       ^

0 [0x0]: line: 203 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           or ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint8>.operator!=[1358] params(1) in file: lib\support\0.2.805/primitives.sharp:205:8: note:  
		    def operator!=(num : var) := value!=num;
		       ^

0 [0x0]: line: 205 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           tne ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint8>.operator==[1359] params(1) in file: lib\support\0.2.805/primitives.sharp:206:8: note:  
		    def operator==(num : var) := value==num;
		       ^

0 [0x0]: line: 206 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           test ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint8>.operator=[1360] params(1) in file: lib\support\0.2.805/primitives.sharp:207:8: note:  
		    def operator=(num : var) := value=num;
		       ^

0 [0x0]: line: 207 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           loadval ebx   
5 [0x5]:           movu8 ebx, ebx   
6 [0x6]:           movi #0, adx   
8 [0x8]:           rmov adx, ebx   
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std#integer<_uint8>.to_string[1361] params(0) in file: lib\support\0.2.805/primitives.sharp:209:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 210 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           newstr @22 //    
3 [0x3]:           call @2935 // <std#string.string>   
4 [0x4]:           movl 0   
5 [0x5]:           movn #0   
7 [0x7]:           movi #0, adx   
9 [0x9]:           iaload ebx, adx   
10 [0xa]:           rstore ebx   
11 [0xb]:           call @2972 // <std#string.operator+>   
12 [0xc]:           popobj2    
13 [0xd]:           returnobj   
14 [0xe]:           ret   


function: std#integer<_uint8>.parse[1362] params(1) in file: lib\support\0.2.805/primitives.sharp:214:15: note:  
		    static def parse(s: string) : native_type {
		              ^

0 [0x0]: line: 215 istorel 0, fp+1   
2 [0x2]: line: 216 movi #0, ebx   
4 [0x4]:           movu8 ebx, ebx   
5 [0x5]:           smovr_2 ebx, fp+2   
6 [0x6]: line: 217 istorel 0, fp+3   
8 [0x8]: line: 218 pushl 0   
9 [0x9]:           call @2976 // <std#string.size>   
10 [0xa]:           ipopl 4   
11 [0xb]: line: 220 pushl 0   
12 [0xc]:           istore 0   
14 [0xe]:           call @2957 // <std#string.at>   
15 [0xf]:           loadval ebx   
16 [0x10]:           rstore ebx   
17 [0x11]:           movi #45, ebx   
19 [0x13]:           loadval ecx   
20 [0x14]:           test ecx, ebx   
21 [0x15]:           jne 26   
22 [0x16]: line: 221 istorel 1, fp+3   
24 [0x18]: line: 222 istorel 1, fp+1   
26 [0x1a]:           nop   
27 [0x1b]: line: 225 ipushl #1   
28 [0x1c]:           loadl ebx, fp+4   
29 [0x1d]:           loadval ecx   
30 [0x1e]:           lt ecx, ebx   
31 [0x1f]:           movr ebx, cmt   
32 [0x20]:           movr cmt, ebx   
33 [0x21]:           jne 79   
34 [0x22]: line: 226 pushl 0   
35 [0x23]:           ipushl #1   
36 [0x24]:           call @2957 // <std#string.at>   
37 [0x25]:           call @2724 // <std#char.is_digit>   
38 [0x26]:           loadval ebx   
39 [0x27]:           not ebx, ebx   
40 [0x28]:           movr cmt, ebx   
41 [0x29]:           jne 54   
42 [0x2a]: line: 227 new_class @4 // std#illegal_argument_exception   
43 [0x2b]:           dup    
44 [0x2c]:           new_class @64 // std#string   
45 [0x2d]:           dup    
46 [0x2e]:           newstr @137 // illegal char in string:    
47 [0x2f]:           call @2935 // <std#string.string>   
48 [0x30]:           pushl 0   
49 [0x31]:           ipushl #1   
50 [0x32]:           call @2957 // <std#string.at>   
51 [0x33]:           call @2968 // <std#string.operator+>   
52 [0x34]:           call @1630 // <std#illegal_argument_exception.illegal_argument_exception>   
53 [0x35]:           throw    
54 [0x36]:           nop   
55 [0x37]: line: 231 movi #10, ebx   
57 [0x39]:           loadl ecx, fp+2   
58 [0x3a]:           mul ecx, ebx -> ebx   
59 [0x3b]:           movu8 ebx, ebx   
60 [0x3c]:           smovr_2 ebx, fp+2   
61 [0x3d]: line: 232 pushl 0   
62 [0x3e]:           loadl ebx, fp+1   
63 [0x3f]:           movr egx, ebx   
64 [0x40]:           inc ebx   
65 [0x41]:           smovr_2 ebx, fp+1   
66 [0x42]:           rstore egx   
67 [0x43]:           call @2957 // <std#string.at>   
68 [0x44]:           loadval ebx   
69 [0x45]:           rstore ebx   
70 [0x46]:           movi #48, ebx   
72 [0x48]:           loadval ecx   
73 [0x49]:           sub ecx, ebx -> ebx   
74 [0x4a]:           loadl ecx, fp+2   
75 [0x4b]:           add ecx, ebx -> ebx   
76 [0x4c]:           movu8 ebx, ebx   
77 [0x4d]:           smovr_2 ebx, fp+2   
78 [0x4e]:           jmp @27   
79 [0x4f]: line: 234 loadl ebx, fp+3   
80 [0x50]:           movr cmt, ebx   
81 [0x51]:           jne 86   
82 [0x52]: line: 235 loadl ebx, fp+2   
83 [0x53]:           neg ebx, ebx   
84 [0x54]:           movu8 ebx, ebx   
85 [0x55]:           smovr_2 ebx, fp+2   
86 [0x56]:           nop   
87 [0x57]: line: 236 loadl ebx, fp+2   
88 [0x58]:           return_val ebx   
89 [0x59]:           ret   


function: std#integer<_uint8>.to_ulong[1363] params(0) in file: lib\support\0.2.805/primitives.sharp:239:8: note:  
		    def to_ulong() := new ulong { value };
		       ^

0 [0x0]: line: 239 new_class @44 // std#ulong   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu64 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint8>.to_long[1364] params(0) in file: lib\support\0.2.805/primitives.sharp:240:8: note:  
		    def to_long() := new long { value };
		       ^

0 [0x0]: line: 240 new_class @45 // std#long   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov64 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint8>.to_uint[1365] params(0) in file: lib\support\0.2.805/primitives.sharp:241:8: note:  
		    def to_uint() := new uint { value };
		       ^

0 [0x0]: line: 241 new_class @46 // std#uint   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu32 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint8>.to_int[1366] params(0) in file: lib\support\0.2.805/primitives.sharp:242:8: note:  
		    def to_int() := new int { value };
		       ^

0 [0x0]: line: 242 new_class @47 // std#int   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov32 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint8>.to_ushort[1367] params(0) in file: lib\support\0.2.805/primitives.sharp:243:8: note:  
		    def to_ushort() := new ushort { value };
		       ^

0 [0x0]: line: 243 new_class @48 // std#ushort   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu16 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint8>.to_short[1368] params(0) in file: lib\support\0.2.805/primitives.sharp:244:8: note:  
		    def to_short() := new short { value };
		       ^

0 [0x0]: line: 244 new_class @49 // std#short   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov16 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint8>.to_uchar[1369] params(0) in file: lib\support\0.2.805/primitives.sharp:245:8: note:  
		    def to_uchar() := new uchar { value };
		       ^

0 [0x0]: line: 245 new_class @50 // std#uchar   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint8>.to_char[1370] params(0) in file: lib\support\0.2.805/primitives.sharp:246:8: note:  
		    def to_char() := new char { value };
		       ^

0 [0x0]: line: 246 new_class @51 // std#char   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint8>.to_byte[1371] params(0) in file: lib\support\0.2.805/primitives.sharp:247:8: note:  
		    def to_byte() := new byte { value };
		       ^

0 [0x0]: line: 247 new_class @52 // std#byte   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint8>.to_bool[1372] params(0) in file: lib\support\0.2.805/primitives.sharp:248:8: note:  
		    def to_bool() := new bool { value };
		       ^

0 [0x0]: line: 248 new_class @53 // std#bool   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint8>.get_value[1373] params(0) in file: lib\support\0.2.805/primitives.sharp:250:8: note:  
		    def get_value() := value;
		       ^

0 [0x0]: line: 250 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


constructor: std#integer<_uint8>.integer[1374] params(0) in file: lib\support\0.2.805/primitives.sharp:5:13: note:  
		public class integer<native_type> {
		            ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#integer<_int8>.integer[1375] params(1) in file: lib\support\0.2.805/primitives.sharp:8:12: note:  
		    integer(initial_val : var) {
		           ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 9 ipushl #1   
2 [0x2]:         movl 0   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         mov8 ebx, ebx   
7 [0x7]:         movi #0, adx   
9 [0x9]:         rmov adx, ebx   
10 [0xa]:         ret   


function: std#integer<_int8>.hash[1376] params(0) in file: lib\support\0.2.805/primitives.sharp:12:8: note:  
		    def hash() : long {
		       ^

0 [0x0]: line: 13 new_class @45 // std#long   
1 [0x1]:          dup    
2 [0x2]:          movl 0   
3 [0x3]:          movn #0   
5 [0x5]:          movi #0, adx   
7 [0x7]:          iaload ebx, adx   
8 [0x8]:          rstore ebx   
9 [0x9]:          call @2077 // <std#long.long>   
10 [0xa]:          popobj2    
11 [0xb]:          returnobj   
12 [0xc]:          ret   


overload function: std#integer<_int8>.operator!=[1377] params(1) in file: lib\support\0.2.805/primitives.sharp:16:8: note:  
		    def operator!=(num : ulong) := (value!=num.value);
		       ^

0 [0x0]: line: 16 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator==[1378] params(1) in file: lib\support\0.2.805/primitives.sharp:17:8: note:  
		    def operator==(num : ulong) := (value==num.value);
		       ^

0 [0x0]: line: 17 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator!=[1379] params(1) in file: lib\support\0.2.805/primitives.sharp:18:8: note:  
		    def operator!=(num : long) := (value!=num.value);
		       ^

0 [0x0]: line: 18 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator==[1380] params(1) in file: lib\support\0.2.805/primitives.sharp:19:8: note:  
		    def operator==(num : long) := (value==num.value);
		       ^

0 [0x0]: line: 19 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator!=[1381] params(1) in file: lib\support\0.2.805/primitives.sharp:20:8: note:  
		    def operator!=(num : uint) := (value!=num.value);
		       ^

0 [0x0]: line: 20 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator==[1382] params(1) in file: lib\support\0.2.805/primitives.sharp:21:8: note:  
		    def operator==(num : uint) := (value==num.value);
		       ^

0 [0x0]: line: 21 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator!=[1383] params(1) in file: lib\support\0.2.805/primitives.sharp:22:8: note:  
		    def operator!=(num : int) := (value!=num.value);
		       ^

0 [0x0]: line: 22 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator==[1384] params(1) in file: lib\support\0.2.805/primitives.sharp:23:8: note:  
		    def operator==(num : int) := (value==num.value);
		       ^

0 [0x0]: line: 23 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator!=[1385] params(1) in file: lib\support\0.2.805/primitives.sharp:24:8: note:  
		    def operator!=(num : ushort) := (value!=num.value);
		       ^

0 [0x0]: line: 24 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator==[1386] params(1) in file: lib\support\0.2.805/primitives.sharp:25:8: note:  
		    def operator==(num : ushort) := (value==num.value);
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator!=[1387] params(1) in file: lib\support\0.2.805/primitives.sharp:26:8: note:  
		    def operator!=(num : short) := (value!=num.value);
		       ^

0 [0x0]: line: 26 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator==[1388] params(1) in file: lib\support\0.2.805/primitives.sharp:27:8: note:  
		    def operator==(num : short) := (value==num.value);
		       ^

0 [0x0]: line: 27 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator!=[1389] params(1) in file: lib\support\0.2.805/primitives.sharp:28:8: note:  
		    def operator!=(num : uchar) := (value!=num.value);
		       ^

0 [0x0]: line: 28 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator==[1390] params(1) in file: lib\support\0.2.805/primitives.sharp:29:8: note:  
		    def operator==(num : uchar) := (value==num.value);
		       ^

0 [0x0]: line: 29 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator!=[1391] params(1) in file: lib\support\0.2.805/primitives.sharp:30:8: note:  
		    def operator!=(num : char) := (value!=num.value);
		       ^

0 [0x0]: line: 30 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator==[1392] params(1) in file: lib\support\0.2.805/primitives.sharp:31:8: note:  
		    def operator==(num : char) := (value==num.value);
		       ^

0 [0x0]: line: 31 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator!=[1393] params(1) in file: lib\support\0.2.805/primitives.sharp:32:8: note:  
		    def operator!=(num : byte) := (value!=num.value);
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator==[1394] params(1) in file: lib\support\0.2.805/primitives.sharp:33:8: note:  
		    def operator==(num : byte) := (value==num.value);
		       ^

0 [0x0]: line: 33 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator!=[1395] params(1) in file: lib\support\0.2.805/primitives.sharp:34:8: note:  
		    def operator!=(num : bool) := (value!=num.value);
		       ^

0 [0x0]: line: 34 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator==[1396] params(1) in file: lib\support\0.2.805/primitives.sharp:35:8: note:  
		    def operator==(num : bool) := (value==num.value);
		       ^

0 [0x0]: line: 35 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator+[1397] params(1) in file: lib\support\0.2.805/primitives.sharp:37:8: note:  
		    def operator+(num : ulong)  := (value+num.value);
		       ^

0 [0x0]: line: 37 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator+[1398] params(1) in file: lib\support\0.2.805/primitives.sharp:38:8: note:  
		    def operator+(num : long)   := (value+num.value);
		       ^

0 [0x0]: line: 38 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator+[1399] params(1) in file: lib\support\0.2.805/primitives.sharp:39:8: note:  
		    def operator+(num : uint)   := (value+num.value);
		       ^

0 [0x0]: line: 39 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator+[1400] params(1) in file: lib\support\0.2.805/primitives.sharp:40:8: note:  
		    def operator+(num : int)    := (value+num.value);
		       ^

0 [0x0]: line: 40 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator+[1401] params(1) in file: lib\support\0.2.805/primitives.sharp:41:8: note:  
		    def operator+(num : ushort) := (value+num.value);
		       ^

0 [0x0]: line: 41 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator+[1402] params(1) in file: lib\support\0.2.805/primitives.sharp:42:8: note:  
		    def operator+(num : short)  := (value+num.value);
		       ^

0 [0x0]: line: 42 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator+[1403] params(1) in file: lib\support\0.2.805/primitives.sharp:43:8: note:  
		    def operator+(num : uchar)  := (value+num.value);
		       ^

0 [0x0]: line: 43 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator+[1404] params(1) in file: lib\support\0.2.805/primitives.sharp:44:8: note:  
		    def operator+(num : char)   := (value+num.value);
		       ^

0 [0x0]: line: 44 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator+[1405] params(1) in file: lib\support\0.2.805/primitives.sharp:45:8: note:  
		    def operator+(num : byte)   := (value+num.value);
		       ^

0 [0x0]: line: 45 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator+[1406] params(1) in file: lib\support\0.2.805/primitives.sharp:46:8: note:  
		    def operator+(num : bool)   := (value+num.value);
		       ^

0 [0x0]: line: 46 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator+[1407] params(1) in file: lib\support\0.2.805/primitives.sharp:47:8: note:  
		    def operator+(num : var)    := (value+num);
		       ^

0 [0x0]: line: 47 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          add ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int8>.operator-[1408] params(1) in file: lib\support\0.2.805/primitives.sharp:49:8: note:  
		    def operator-(num : ulong)  := (value-num.value);
		       ^

0 [0x0]: line: 49 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator-[1409] params(1) in file: lib\support\0.2.805/primitives.sharp:50:8: note:  
		    def operator-(num : long)   := (value-num.value);
		       ^

0 [0x0]: line: 50 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator-[1410] params(1) in file: lib\support\0.2.805/primitives.sharp:51:8: note:  
		    def operator-(num : uint)   := (value-num.value);
		       ^

0 [0x0]: line: 51 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator-[1411] params(1) in file: lib\support\0.2.805/primitives.sharp:52:8: note:  
		    def operator-(num : int)    := (value-num.value);
		       ^

0 [0x0]: line: 52 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator-[1412] params(1) in file: lib\support\0.2.805/primitives.sharp:53:8: note:  
		    def operator-(num : ushort) := (value-num.value);
		       ^

0 [0x0]: line: 53 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator-[1413] params(1) in file: lib\support\0.2.805/primitives.sharp:54:8: note:  
		    def operator-(num : short)  := (value-num.value);
		       ^

0 [0x0]: line: 54 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator-[1414] params(1) in file: lib\support\0.2.805/primitives.sharp:55:8: note:  
		    def operator-(num : uchar)  := (value-num.value);
		       ^

0 [0x0]: line: 55 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator-[1415] params(1) in file: lib\support\0.2.805/primitives.sharp:56:8: note:  
		    def operator-(num : char)   := (value-num.value);
		       ^

0 [0x0]: line: 56 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator-[1416] params(1) in file: lib\support\0.2.805/primitives.sharp:57:8: note:  
		    def operator-(num : byte)   := (value-num.value);
		       ^

0 [0x0]: line: 57 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator-[1417] params(1) in file: lib\support\0.2.805/primitives.sharp:58:8: note:  
		    def operator-(num : bool)   := (value-num.value);
		       ^

0 [0x0]: line: 58 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator-[1418] params(1) in file: lib\support\0.2.805/primitives.sharp:59:8: note:  
		    def operator-(num : var)    := (value-num);
		       ^

0 [0x0]: line: 59 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          sub ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int8>.operator*[1419] params(1) in file: lib\support\0.2.805/primitives.sharp:61:8: note:  
		    def operator*(num : ulong)  := (value*num.value);
		       ^

0 [0x0]: line: 61 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator*[1420] params(1) in file: lib\support\0.2.805/primitives.sharp:62:8: note:  
		    def operator*(num : long)   := (value*num.value);
		       ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator*[1421] params(1) in file: lib\support\0.2.805/primitives.sharp:63:8: note:  
		    def operator*(num : uint)   := (value*num.value);
		       ^

0 [0x0]: line: 63 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator*[1422] params(1) in file: lib\support\0.2.805/primitives.sharp:64:8: note:  
		    def operator*(num : int)    := (value*num.value);
		       ^

0 [0x0]: line: 64 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator*[1423] params(1) in file: lib\support\0.2.805/primitives.sharp:65:8: note:  
		    def operator*(num : ushort) := (value*num.value);
		       ^

0 [0x0]: line: 65 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator*[1424] params(1) in file: lib\support\0.2.805/primitives.sharp:66:8: note:  
		    def operator*(num : short)  := (value*num.value);
		       ^

0 [0x0]: line: 66 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator*[1425] params(1) in file: lib\support\0.2.805/primitives.sharp:67:8: note:  
		    def operator*(num : uchar)  := (value*num.value);
		       ^

0 [0x0]: line: 67 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator*[1426] params(1) in file: lib\support\0.2.805/primitives.sharp:68:8: note:  
		    def operator*(num : char)   := (value*num.value);
		       ^

0 [0x0]: line: 68 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator*[1427] params(1) in file: lib\support\0.2.805/primitives.sharp:69:8: note:  
		    def operator*(num : byte)   := (value*num.value);
		       ^

0 [0x0]: line: 69 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator*[1428] params(1) in file: lib\support\0.2.805/primitives.sharp:70:8: note:  
		    def operator*(num : bool)   := (value*num.value);
		       ^

0 [0x0]: line: 70 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator*[1429] params(1) in file: lib\support\0.2.805/primitives.sharp:71:8: note:  
		    def operator*(num : var)    := (value*num);
		       ^

0 [0x0]: line: 71 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          mul ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int8>.operator/[1430] params(1) in file: lib\support\0.2.805/primitives.sharp:73:8: note:  
		    def operator/(num : ulong)  := (value/num.value);
		       ^

0 [0x0]: line: 73 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator/[1431] params(1) in file: lib\support\0.2.805/primitives.sharp:74:8: note:  
		    def operator/(num : long)   := (value/num.value);
		       ^

0 [0x0]: line: 74 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator/[1432] params(1) in file: lib\support\0.2.805/primitives.sharp:75:8: note:  
		    def operator/(num : uint)   := (value/num.value);
		       ^

0 [0x0]: line: 75 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator/[1433] params(1) in file: lib\support\0.2.805/primitives.sharp:76:8: note:  
		    def operator/(num : int)    := (value/num.value);
		       ^

0 [0x0]: line: 76 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator/[1434] params(1) in file: lib\support\0.2.805/primitives.sharp:77:8: note:  
		    def operator/(num : ushort) := (value/num.value);
		       ^

0 [0x0]: line: 77 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator/[1435] params(1) in file: lib\support\0.2.805/primitives.sharp:78:8: note:  
		    def operator/(num : short)  := (value/num.value);
		       ^

0 [0x0]: line: 78 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator/[1436] params(1) in file: lib\support\0.2.805/primitives.sharp:79:8: note:  
		    def operator/(num : uchar)  := (value/num.value);
		       ^

0 [0x0]: line: 79 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator/[1437] params(1) in file: lib\support\0.2.805/primitives.sharp:80:8: note:  
		    def operator/(num : char)   := (value/num.value);
		       ^

0 [0x0]: line: 80 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator/[1438] params(1) in file: lib\support\0.2.805/primitives.sharp:81:8: note:  
		    def operator/(num : byte)   := (value/num.value);
		       ^

0 [0x0]: line: 81 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator/[1439] params(1) in file: lib\support\0.2.805/primitives.sharp:82:8: note:  
		    def operator/(num : bool)   := (value/num.value);
		       ^

0 [0x0]: line: 82 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator/[1440] params(1) in file: lib\support\0.2.805/primitives.sharp:83:8: note:  
		    def operator/(num : var)    := (value/num);
		       ^

0 [0x0]: line: 83 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          div ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int8>.operator%[1441] params(1) in file: lib\support\0.2.805/primitives.sharp:85:8: note:  
		    def operator%(num : ulong)  := (value%num.value);
		       ^

0 [0x0]: line: 85 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator%[1442] params(1) in file: lib\support\0.2.805/primitives.sharp:86:8: note:  
		    def operator%(num : long)   := (value%num.value);
		       ^

0 [0x0]: line: 86 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator%[1443] params(1) in file: lib\support\0.2.805/primitives.sharp:87:8: note:  
		    def operator%(num : uint)   := (value%num.value);
		       ^

0 [0x0]: line: 87 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator%[1444] params(1) in file: lib\support\0.2.805/primitives.sharp:88:8: note:  
		    def operator%(num : int)    := (value%num.value);
		       ^

0 [0x0]: line: 88 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator%[1445] params(1) in file: lib\support\0.2.805/primitives.sharp:89:8: note:  
		    def operator%(num : ushort) := (value%num.value);
		       ^

0 [0x0]: line: 89 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator%[1446] params(1) in file: lib\support\0.2.805/primitives.sharp:90:8: note:  
		    def operator%(num : short)  := (value%num.value);
		       ^

0 [0x0]: line: 90 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator%[1447] params(1) in file: lib\support\0.2.805/primitives.sharp:91:8: note:  
		    def operator%(num : uchar)  := (value%num.value);
		       ^

0 [0x0]: line: 91 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator%[1448] params(1) in file: lib\support\0.2.805/primitives.sharp:92:8: note:  
		    def operator%(num : char)   := (value%num.value);
		       ^

0 [0x0]: line: 92 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator%[1449] params(1) in file: lib\support\0.2.805/primitives.sharp:93:8: note:  
		    def operator%(num : byte)   := (value%num.value);
		       ^

0 [0x0]: line: 93 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator%[1450] params(1) in file: lib\support\0.2.805/primitives.sharp:94:8: note:  
		    def operator%(num : bool)   := (value%num.value);
		       ^

0 [0x0]: line: 94 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator%[1451] params(1) in file: lib\support\0.2.805/primitives.sharp:95:8: note:  
		    def operator%(num : var)    := (value%num);
		       ^

0 [0x0]: line: 95 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          mod ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int8>.operator<[1452] params(1) in file: lib\support\0.2.805/primitives.sharp:97:8: note:  
		    def operator<(num : ulong)  := (value<num.value);
		       ^

0 [0x0]: line: 97 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator<[1453] params(1) in file: lib\support\0.2.805/primitives.sharp:98:8: note:  
		    def operator<(num : long)   := (value<num.value);
		       ^

0 [0x0]: line: 98 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator<[1454] params(1) in file: lib\support\0.2.805/primitives.sharp:99:8: note:  
		    def operator<(num : uint)   := (value<num.value);
		       ^

0 [0x0]: line: 99 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator<[1455] params(1) in file: lib\support\0.2.805/primitives.sharp:100:8: note:  
		    def operator<(num : int)    := (value<num.value);
		       ^

0 [0x0]: line: 100 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<[1456] params(1) in file: lib\support\0.2.805/primitives.sharp:101:8: note:  
		    def operator<(num : ushort) := (value<num.value);
		       ^

0 [0x0]: line: 101 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<[1457] params(1) in file: lib\support\0.2.805/primitives.sharp:102:8: note:  
		    def operator<(num : short)  := (value<num.value);
		       ^

0 [0x0]: line: 102 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<[1458] params(1) in file: lib\support\0.2.805/primitives.sharp:103:8: note:  
		    def operator<(num : uchar)  := (value<num.value);
		       ^

0 [0x0]: line: 103 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<[1459] params(1) in file: lib\support\0.2.805/primitives.sharp:104:8: note:  
		    def operator<(num : char)   := (value<num.value);
		       ^

0 [0x0]: line: 104 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<[1460] params(1) in file: lib\support\0.2.805/primitives.sharp:105:8: note:  
		    def operator<(num : byte)   := (value<num.value);
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<[1461] params(1) in file: lib\support\0.2.805/primitives.sharp:106:8: note:  
		    def operator<(num : bool)   := (value<num.value);
		       ^

0 [0x0]: line: 106 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<[1462] params(1) in file: lib\support\0.2.805/primitives.sharp:107:8: note:  
		    def operator<(num : var)    := (value<num);
		       ^

0 [0x0]: line: 107 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           lt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int8>.operator>[1463] params(1) in file: lib\support\0.2.805/primitives.sharp:109:8: note:  
		    def operator>(num : ulong)  := (value>num.value);
		       ^

0 [0x0]: line: 109 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>[1464] params(1) in file: lib\support\0.2.805/primitives.sharp:110:8: note:  
		    def operator>(num : long)   := (value>num.value);
		       ^

0 [0x0]: line: 110 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>[1465] params(1) in file: lib\support\0.2.805/primitives.sharp:111:8: note:  
		    def operator>(num : uint)   := (value>num.value);
		       ^

0 [0x0]: line: 111 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>[1466] params(1) in file: lib\support\0.2.805/primitives.sharp:112:8: note:  
		    def operator>(num : int)    := (value>num.value);
		       ^

0 [0x0]: line: 112 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>[1467] params(1) in file: lib\support\0.2.805/primitives.sharp:113:8: note:  
		    def operator>(num : ushort) := (value>num.value);
		       ^

0 [0x0]: line: 113 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>[1468] params(1) in file: lib\support\0.2.805/primitives.sharp:114:8: note:  
		    def operator>(num : short)  := (value>num.value);
		       ^

0 [0x0]: line: 114 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>[1469] params(1) in file: lib\support\0.2.805/primitives.sharp:115:8: note:  
		    def operator>(num : uchar)  := (value>num.value);
		       ^

0 [0x0]: line: 115 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>[1470] params(1) in file: lib\support\0.2.805/primitives.sharp:116:8: note:  
		    def operator>(num : char)   := (value>num.value);
		       ^

0 [0x0]: line: 116 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>[1471] params(1) in file: lib\support\0.2.805/primitives.sharp:117:8: note:  
		    def operator>(num : byte)   := (value>num.value);
		       ^

0 [0x0]: line: 117 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>[1472] params(1) in file: lib\support\0.2.805/primitives.sharp:118:8: note:  
		    def operator>(num : bool)   := (value>num.value);
		       ^

0 [0x0]: line: 118 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>[1473] params(1) in file: lib\support\0.2.805/primitives.sharp:119:8: note:  
		    def operator>(num : var)    := (value>num);
		       ^

0 [0x0]: line: 119 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int8>.operator<=[1474] params(1) in file: lib\support\0.2.805/primitives.sharp:121:8: note:  
		    def operator<=(num : ulong)  := (value>=num.value);
		       ^

0 [0x0]: line: 121 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<=[1475] params(1) in file: lib\support\0.2.805/primitives.sharp:122:8: note:  
		    def operator<=(num : long)   := (value>=num.value);
		       ^

0 [0x0]: line: 122 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<=[1476] params(1) in file: lib\support\0.2.805/primitives.sharp:123:8: note:  
		    def operator<=(num : uint)   := (value>=num.value);
		       ^

0 [0x0]: line: 123 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<=[1477] params(1) in file: lib\support\0.2.805/primitives.sharp:124:8: note:  
		    def operator<=(num : int)    := (value>=num.value);
		       ^

0 [0x0]: line: 124 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<=[1478] params(1) in file: lib\support\0.2.805/primitives.sharp:125:8: note:  
		    def operator<=(num : ushort) := (value>=num.value);
		       ^

0 [0x0]: line: 125 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<=[1479] params(1) in file: lib\support\0.2.805/primitives.sharp:126:8: note:  
		    def operator<=(num : short)  := (value>=num.value);
		       ^

0 [0x0]: line: 126 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<=[1480] params(1) in file: lib\support\0.2.805/primitives.sharp:127:8: note:  
		    def operator<=(num : uchar)  := (value>=num.value);
		       ^

0 [0x0]: line: 127 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<=[1481] params(1) in file: lib\support\0.2.805/primitives.sharp:128:8: note:  
		    def operator<=(num : char)   := (value>=num.value);
		       ^

0 [0x0]: line: 128 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<=[1482] params(1) in file: lib\support\0.2.805/primitives.sharp:129:8: note:  
		    def operator<=(num : byte)   := (value>=num.value);
		       ^

0 [0x0]: line: 129 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<=[1483] params(1) in file: lib\support\0.2.805/primitives.sharp:130:8: note:  
		    def operator<=(num : bool)   := (value>=num.value);
		       ^

0 [0x0]: line: 130 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<=[1484] params(1) in file: lib\support\0.2.805/primitives.sharp:131:8: note:  
		    def operator<=(num : var)    := (value>=num);
		       ^

0 [0x0]: line: 131 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gte ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int8>.operator**[1485] params(1) in file: lib\support\0.2.805/primitives.sharp:133:8: note:  
		    def operator**(num : ulong)  := (value**num.value);
		       ^

0 [0x0]: line: 133 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator**[1486] params(1) in file: lib\support\0.2.805/primitives.sharp:134:8: note:  
		    def operator**(num : long)   := (value**num.value);
		       ^

0 [0x0]: line: 134 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator**[1487] params(1) in file: lib\support\0.2.805/primitives.sharp:135:8: note:  
		    def operator**(num : uint)   := (value**num.value);
		       ^

0 [0x0]: line: 135 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator**[1488] params(1) in file: lib\support\0.2.805/primitives.sharp:136:8: note:  
		    def operator**(num : int)    := (value**num.value);
		       ^

0 [0x0]: line: 136 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator**[1489] params(1) in file: lib\support\0.2.805/primitives.sharp:137:8: note:  
		    def operator**(num : ushort) := (value**num.value);
		       ^

0 [0x0]: line: 137 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator**[1490] params(1) in file: lib\support\0.2.805/primitives.sharp:138:8: note:  
		    def operator**(num : short)  := (value**num.value);
		       ^

0 [0x0]: line: 138 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator**[1491] params(1) in file: lib\support\0.2.805/primitives.sharp:139:8: note:  
		    def operator**(num : uchar)  := (value**num.value);
		       ^

0 [0x0]: line: 139 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator**[1492] params(1) in file: lib\support\0.2.805/primitives.sharp:140:8: note:  
		    def operator**(num : char)   := (value**num.value);
		       ^

0 [0x0]: line: 140 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator**[1493] params(1) in file: lib\support\0.2.805/primitives.sharp:141:8: note:  
		    def operator**(num : byte)   := (value**num.value);
		       ^

0 [0x0]: line: 141 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator**[1494] params(1) in file: lib\support\0.2.805/primitives.sharp:142:8: note:  
		    def operator**(num : bool)   := (value**num.value);
		       ^

0 [0x0]: line: 142 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator**[1495] params(1) in file: lib\support\0.2.805/primitives.sharp:143:8: note:  
		    def operator**(num : var)    := (value**num);
		       ^

0 [0x0]: line: 143 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           exp ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int8>.operator<<[1496] params(1) in file: lib\support\0.2.805/primitives.sharp:145:8: note:  
		    def operator<<(num : ulong)  := (value<<num.value);
		       ^

0 [0x0]: line: 145 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<<[1497] params(1) in file: lib\support\0.2.805/primitives.sharp:146:8: note:  
		    def operator<<(num : long)   := (value<<num.value);
		       ^

0 [0x0]: line: 146 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<<[1498] params(1) in file: lib\support\0.2.805/primitives.sharp:147:8: note:  
		    def operator<<(num : uint)   := (value<<num.value);
		       ^

0 [0x0]: line: 147 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<<[1499] params(1) in file: lib\support\0.2.805/primitives.sharp:148:8: note:  
		    def operator<<(num : int)    := (value<<num.value);
		       ^

0 [0x0]: line: 148 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<<[1500] params(1) in file: lib\support\0.2.805/primitives.sharp:149:8: note:  
		    def operator<<(num : ushort) := (value<<num.value);
		       ^

0 [0x0]: line: 149 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<<[1501] params(1) in file: lib\support\0.2.805/primitives.sharp:150:8: note:  
		    def operator<<(num : short)  := (value<<num.value);
		       ^

0 [0x0]: line: 150 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<<[1502] params(1) in file: lib\support\0.2.805/primitives.sharp:151:8: note:  
		    def operator<<(num : uchar)  := (value<<num.value);
		       ^

0 [0x0]: line: 151 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<<[1503] params(1) in file: lib\support\0.2.805/primitives.sharp:152:8: note:  
		    def operator<<(num : char)   := (value<<num.value);
		       ^

0 [0x0]: line: 152 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<<[1504] params(1) in file: lib\support\0.2.805/primitives.sharp:153:8: note:  
		    def operator<<(num : byte)   := (value<<num.value);
		       ^

0 [0x0]: line: 153 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<<[1505] params(1) in file: lib\support\0.2.805/primitives.sharp:154:8: note:  
		    def operator<<(num : bool)   := (value<<num.value);
		       ^

0 [0x0]: line: 154 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<<[1506] params(1) in file: lib\support\0.2.805/primitives.sharp:155:8: note:  
		    def operator<<(num : var)    := (value<<num);
		       ^

0 [0x0]: line: 155 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shl ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int8>.operator>>[1507] params(1) in file: lib\support\0.2.805/primitives.sharp:157:8: note:  
		    def operator>>(num : ulong)  := (value>>num.value);
		       ^

0 [0x0]: line: 157 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>>[1508] params(1) in file: lib\support\0.2.805/primitives.sharp:158:8: note:  
		    def operator>>(num : long)   := (value>>num.value);
		       ^

0 [0x0]: line: 158 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>>[1509] params(1) in file: lib\support\0.2.805/primitives.sharp:159:8: note:  
		    def operator>>(num : uint)   := (value>>num.value);
		       ^

0 [0x0]: line: 159 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>>[1510] params(1) in file: lib\support\0.2.805/primitives.sharp:160:8: note:  
		    def operator>>(num : int)    := (value>>num.value);
		       ^

0 [0x0]: line: 160 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>>[1511] params(1) in file: lib\support\0.2.805/primitives.sharp:161:8: note:  
		    def operator>>(num : ushort) := (value>>num.value);
		       ^

0 [0x0]: line: 161 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>>[1512] params(1) in file: lib\support\0.2.805/primitives.sharp:162:8: note:  
		    def operator>>(num : short)  := (value>>num.value);
		       ^

0 [0x0]: line: 162 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>>[1513] params(1) in file: lib\support\0.2.805/primitives.sharp:163:8: note:  
		    def operator>>(num : uchar)  := (value>>num.value);
		       ^

0 [0x0]: line: 163 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>>[1514] params(1) in file: lib\support\0.2.805/primitives.sharp:164:8: note:  
		    def operator>>(num : char)   := (value>>num.value);
		       ^

0 [0x0]: line: 164 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>>[1515] params(1) in file: lib\support\0.2.805/primitives.sharp:165:8: note:  
		    def operator>>(num : byte)   := (value>>num.value);
		       ^

0 [0x0]: line: 165 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>>[1516] params(1) in file: lib\support\0.2.805/primitives.sharp:166:8: note:  
		    def operator>>(num : bool)   := (value>>num.value);
		       ^

0 [0x0]: line: 166 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>>[1517] params(1) in file: lib\support\0.2.805/primitives.sharp:167:8: note:  
		    def operator>>(num : var)    := (value>>num);
		       ^

0 [0x0]: line: 167 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shr ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int8>.operator^[1518] params(1) in file: lib\support\0.2.805/primitives.sharp:169:8: note:  
		    def operator^(num : ulong)  := (value^num.value);
		       ^

0 [0x0]: line: 169 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator^[1519] params(1) in file: lib\support\0.2.805/primitives.sharp:170:8: note:  
		    def operator^(num : long)   := (value^num.value);
		       ^

0 [0x0]: line: 170 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator^[1520] params(1) in file: lib\support\0.2.805/primitives.sharp:171:8: note:  
		    def operator^(num : uint)   := (value^num.value);
		       ^

0 [0x0]: line: 171 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator^[1521] params(1) in file: lib\support\0.2.805/primitives.sharp:172:8: note:  
		    def operator^(num : int)    := (value^num.value);
		       ^

0 [0x0]: line: 172 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator^[1522] params(1) in file: lib\support\0.2.805/primitives.sharp:173:8: note:  
		    def operator^(num : ushort) := (value^num.value);
		       ^

0 [0x0]: line: 173 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator^[1523] params(1) in file: lib\support\0.2.805/primitives.sharp:174:8: note:  
		    def operator^(num : short)  := (value^num.value);
		       ^

0 [0x0]: line: 174 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator^[1524] params(1) in file: lib\support\0.2.805/primitives.sharp:175:8: note:  
		    def operator^(num : uchar)  := (value^num.value);
		       ^

0 [0x0]: line: 175 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator^[1525] params(1) in file: lib\support\0.2.805/primitives.sharp:176:8: note:  
		    def operator^(num : char)   := (value^num.value);
		       ^

0 [0x0]: line: 176 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator^[1526] params(1) in file: lib\support\0.2.805/primitives.sharp:177:8: note:  
		    def operator^(num : byte)   := (value^num.value);
		       ^

0 [0x0]: line: 177 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator^[1527] params(1) in file: lib\support\0.2.805/primitives.sharp:178:8: note:  
		    def operator^(num : bool)   := (value^num.value);
		       ^

0 [0x0]: line: 178 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator^[1528] params(1) in file: lib\support\0.2.805/primitives.sharp:179:8: note:  
		    def operator^(num : var)    := (value^num);
		       ^

0 [0x0]: line: 179 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           xor ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int8>.operator&[1529] params(1) in file: lib\support\0.2.805/primitives.sharp:181:8: note:  
		    def operator&(num : ulong)  := (value&num.value);
		       ^

0 [0x0]: line: 181 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator&[1530] params(1) in file: lib\support\0.2.805/primitives.sharp:182:8: note:  
		    def operator&(num : long)   := (value&num.value);
		       ^

0 [0x0]: line: 182 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator&[1531] params(1) in file: lib\support\0.2.805/primitives.sharp:183:8: note:  
		    def operator&(num : uint)   := (value&num.value);
		       ^

0 [0x0]: line: 183 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator&[1532] params(1) in file: lib\support\0.2.805/primitives.sharp:184:8: note:  
		    def operator&(num : int)    := (value&num.value);
		       ^

0 [0x0]: line: 184 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator&[1533] params(1) in file: lib\support\0.2.805/primitives.sharp:185:8: note:  
		    def operator&(num : ushort) := (value&num.value);
		       ^

0 [0x0]: line: 185 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator&[1534] params(1) in file: lib\support\0.2.805/primitives.sharp:186:8: note:  
		    def operator&(num : short)  := (value&num.value);
		       ^

0 [0x0]: line: 186 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator&[1535] params(1) in file: lib\support\0.2.805/primitives.sharp:187:8: note:  
		    def operator&(num : uchar)  := (value&num.value);
		       ^

0 [0x0]: line: 187 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator&[1536] params(1) in file: lib\support\0.2.805/primitives.sharp:188:8: note:  
		    def operator&(num : char)   := (value&num.value);
		       ^

0 [0x0]: line: 188 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator&[1537] params(1) in file: lib\support\0.2.805/primitives.sharp:189:8: note:  
		    def operator&(num : byte)   := (value&num.value);
		       ^

0 [0x0]: line: 189 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator&[1538] params(1) in file: lib\support\0.2.805/primitives.sharp:190:8: note:  
		    def operator&(num : bool)   := (value&num.value);
		       ^

0 [0x0]: line: 190 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator&[1539] params(1) in file: lib\support\0.2.805/primitives.sharp:191:8: note:  
		    def operator&(num : var)    := (value&num);
		       ^

0 [0x0]: line: 191 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           uand ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int8>.operator|[1540] params(1) in file: lib\support\0.2.805/primitives.sharp:193:8: note:  
		    def operator|(num : ulong)  := (value|num.value);
		       ^

0 [0x0]: line: 193 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator|[1541] params(1) in file: lib\support\0.2.805/primitives.sharp:194:8: note:  
		    def operator|(num : long)   := (value|num.value);
		       ^

0 [0x0]: line: 194 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator|[1542] params(1) in file: lib\support\0.2.805/primitives.sharp:195:8: note:  
		    def operator|(num : uint)   := (value|num.value);
		       ^

0 [0x0]: line: 195 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator|[1543] params(1) in file: lib\support\0.2.805/primitives.sharp:196:8: note:  
		    def operator|(num : int)    := (value|num.value);
		       ^

0 [0x0]: line: 196 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator|[1544] params(1) in file: lib\support\0.2.805/primitives.sharp:197:8: note:  
		    def operator|(num : ushort) := (value|num.value);
		       ^

0 [0x0]: line: 197 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator|[1545] params(1) in file: lib\support\0.2.805/primitives.sharp:198:8: note:  
		    def operator|(num : short)  := (value|num.value);
		       ^

0 [0x0]: line: 198 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator|[1546] params(1) in file: lib\support\0.2.805/primitives.sharp:199:8: note:  
		    def operator|(num : uchar)  := (value|num.value);
		       ^

0 [0x0]: line: 199 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator|[1547] params(1) in file: lib\support\0.2.805/primitives.sharp:200:8: note:  
		    def operator|(num : char)   := (value|num.value);
		       ^

0 [0x0]: line: 200 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator|[1548] params(1) in file: lib\support\0.2.805/primitives.sharp:201:8: note:  
		    def operator|(num : byte)   := (value|num.value);
		       ^

0 [0x0]: line: 201 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator|[1549] params(1) in file: lib\support\0.2.805/primitives.sharp:202:8: note:  
		    def operator|(num : bool)   := (value|num.value);
		       ^

0 [0x0]: line: 202 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator|[1550] params(1) in file: lib\support\0.2.805/primitives.sharp:203:8: note:  
		    def operator|(num : var)    := (value|num);
		       ^

0 [0x0]: line: 203 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           or ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int8>.operator!=[1551] params(1) in file: lib\support\0.2.805/primitives.sharp:205:8: note:  
		    def operator!=(num : var) := value!=num;
		       ^

0 [0x0]: line: 205 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           tne ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int8>.operator==[1552] params(1) in file: lib\support\0.2.805/primitives.sharp:206:8: note:  
		    def operator==(num : var) := value==num;
		       ^

0 [0x0]: line: 206 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           test ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int8>.operator=[1553] params(1) in file: lib\support\0.2.805/primitives.sharp:207:8: note:  
		    def operator=(num : var) := value=num;
		       ^

0 [0x0]: line: 207 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           loadval ebx   
5 [0x5]:           mov8 ebx, ebx   
6 [0x6]:           movi #0, adx   
8 [0x8]:           rmov adx, ebx   
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std#integer<_int8>.to_string[1554] params(0) in file: lib\support\0.2.805/primitives.sharp:209:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 210 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           newstr @22 //    
3 [0x3]:           call @2935 // <std#string.string>   
4 [0x4]:           movl 0   
5 [0x5]:           movn #0   
7 [0x7]:           movi #0, adx   
9 [0x9]:           iaload ebx, adx   
10 [0xa]:           rstore ebx   
11 [0xb]:           call @2968 // <std#string.operator+>   
12 [0xc]:           popobj2    
13 [0xd]:           returnobj   
14 [0xe]:           ret   


function: std#integer<_int8>.parse[1555] params(1) in file: lib\support\0.2.805/primitives.sharp:214:15: note:  
		    static def parse(s: string) : native_type {
		              ^

0 [0x0]: line: 215 istorel 0, fp+1   
2 [0x2]: line: 216 movi #0, ebx   
4 [0x4]:           mov8 ebx, ebx   
5 [0x5]:           smovr_2 ebx, fp+2   
6 [0x6]: line: 217 istorel 0, fp+3   
8 [0x8]: line: 218 pushl 0   
9 [0x9]:           call @2976 // <std#string.size>   
10 [0xa]:           ipopl 4   
11 [0xb]: line: 220 pushl 0   
12 [0xc]:           istore 0   
14 [0xe]:           call @2957 // <std#string.at>   
15 [0xf]:           loadval ebx   
16 [0x10]:           rstore ebx   
17 [0x11]:           movi #45, ebx   
19 [0x13]:           loadval ecx   
20 [0x14]:           test ecx, ebx   
21 [0x15]:           jne 26   
22 [0x16]: line: 221 istorel 1, fp+3   
24 [0x18]: line: 222 istorel 1, fp+1   
26 [0x1a]:           nop   
27 [0x1b]: line: 225 ipushl #1   
28 [0x1c]:           loadl ebx, fp+4   
29 [0x1d]:           loadval ecx   
30 [0x1e]:           lt ecx, ebx   
31 [0x1f]:           movr ebx, cmt   
32 [0x20]:           movr cmt, ebx   
33 [0x21]:           jne 79   
34 [0x22]: line: 226 pushl 0   
35 [0x23]:           ipushl #1   
36 [0x24]:           call @2957 // <std#string.at>   
37 [0x25]:           call @2724 // <std#char.is_digit>   
38 [0x26]:           loadval ebx   
39 [0x27]:           not ebx, ebx   
40 [0x28]:           movr cmt, ebx   
41 [0x29]:           jne 54   
42 [0x2a]: line: 227 new_class @4 // std#illegal_argument_exception   
43 [0x2b]:           dup    
44 [0x2c]:           new_class @64 // std#string   
45 [0x2d]:           dup    
46 [0x2e]:           newstr @137 // illegal char in string:    
47 [0x2f]:           call @2935 // <std#string.string>   
48 [0x30]:           pushl 0   
49 [0x31]:           ipushl #1   
50 [0x32]:           call @2957 // <std#string.at>   
51 [0x33]:           call @2968 // <std#string.operator+>   
52 [0x34]:           call @1630 // <std#illegal_argument_exception.illegal_argument_exception>   
53 [0x35]:           throw    
54 [0x36]:           nop   
55 [0x37]: line: 231 movi #10, ebx   
57 [0x39]:           loadl ecx, fp+2   
58 [0x3a]:           mul ecx, ebx -> ebx   
59 [0x3b]:           mov8 ebx, ebx   
60 [0x3c]:           smovr_2 ebx, fp+2   
61 [0x3d]: line: 232 pushl 0   
62 [0x3e]:           loadl ebx, fp+1   
63 [0x3f]:           movr egx, ebx   
64 [0x40]:           inc ebx   
65 [0x41]:           smovr_2 ebx, fp+1   
66 [0x42]:           rstore egx   
67 [0x43]:           call @2957 // <std#string.at>   
68 [0x44]:           loadval ebx   
69 [0x45]:           rstore ebx   
70 [0x46]:           movi #48, ebx   
72 [0x48]:           loadval ecx   
73 [0x49]:           sub ecx, ebx -> ebx   
74 [0x4a]:           loadl ecx, fp+2   
75 [0x4b]:           add ecx, ebx -> ebx   
76 [0x4c]:           mov8 ebx, ebx   
77 [0x4d]:           smovr_2 ebx, fp+2   
78 [0x4e]:           jmp @27   
79 [0x4f]: line: 234 loadl ebx, fp+3   
80 [0x50]:           movr cmt, ebx   
81 [0x51]:           jne 86   
82 [0x52]: line: 235 loadl ebx, fp+2   
83 [0x53]:           neg ebx, ebx   
84 [0x54]:           mov8 ebx, ebx   
85 [0x55]:           smovr_2 ebx, fp+2   
86 [0x56]:           nop   
87 [0x57]: line: 236 loadl ebx, fp+2   
88 [0x58]:           return_val ebx   
89 [0x59]:           ret   


function: std#integer<_int8>.to_ulong[1556] params(0) in file: lib\support\0.2.805/primitives.sharp:239:8: note:  
		    def to_ulong() := new ulong { value };
		       ^

0 [0x0]: line: 239 new_class @44 // std#ulong   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu64 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int8>.to_long[1557] params(0) in file: lib\support\0.2.805/primitives.sharp:240:8: note:  
		    def to_long() := new long { value };
		       ^

0 [0x0]: line: 240 new_class @45 // std#long   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov64 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int8>.to_uint[1558] params(0) in file: lib\support\0.2.805/primitives.sharp:241:8: note:  
		    def to_uint() := new uint { value };
		       ^

0 [0x0]: line: 241 new_class @46 // std#uint   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu32 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int8>.to_int[1559] params(0) in file: lib\support\0.2.805/primitives.sharp:242:8: note:  
		    def to_int() := new int { value };
		       ^

0 [0x0]: line: 242 new_class @47 // std#int   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov32 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int8>.to_ushort[1560] params(0) in file: lib\support\0.2.805/primitives.sharp:243:8: note:  
		    def to_ushort() := new ushort { value };
		       ^

0 [0x0]: line: 243 new_class @48 // std#ushort   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu16 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int8>.to_short[1561] params(0) in file: lib\support\0.2.805/primitives.sharp:244:8: note:  
		    def to_short() := new short { value };
		       ^

0 [0x0]: line: 244 new_class @49 // std#short   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov16 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int8>.to_uchar[1562] params(0) in file: lib\support\0.2.805/primitives.sharp:245:8: note:  
		    def to_uchar() := new uchar { value };
		       ^

0 [0x0]: line: 245 new_class @50 // std#uchar   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int8>.to_char[1563] params(0) in file: lib\support\0.2.805/primitives.sharp:246:8: note:  
		    def to_char() := new char { value };
		       ^

0 [0x0]: line: 246 new_class @51 // std#char   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int8>.to_byte[1564] params(0) in file: lib\support\0.2.805/primitives.sharp:247:8: note:  
		    def to_byte() := new byte { value };
		       ^

0 [0x0]: line: 247 new_class @52 // std#byte   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           movu8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int8>.to_bool[1565] params(0) in file: lib\support\0.2.805/primitives.sharp:248:8: note:  
		    def to_bool() := new bool { value };
		       ^

0 [0x0]: line: 248 new_class @53 // std#bool   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           mov8 ebx, ebx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int8>.get_value[1566] params(0) in file: lib\support\0.2.805/primitives.sharp:250:8: note:  
		    def get_value() := value;
		       ^

0 [0x0]: line: 250 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


constructor: std#integer<_int8>.integer[1567] params(0) in file: lib\support\0.2.805/primitives.sharp:5:13: note:  
		public class integer<native_type> {
		            ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


std#loopable<_int8>.get_elements[1568] params(0) in file: lib\support\0.2.805/string.sharp:4:8: note:  
		
		       ^



constructor: std#loopable<_int8>.loopable[1569] params(0) in file: lib\support\0.2.805/string.sharp:3:10: note:  
		import std.io;
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


function: std#__srt_global.snprintf[1570] params(3) in file: lib\support\0.2.805/console.sharp:3:4: note:  
		def snprintf(fmt: var, num: var, precision: var) : var[] {
		   ^

0 [0x0]: line: 4 loadl egx, fp+0   : protected asm start
1 [0x1]:         loadl ebx, fp+1   
2 [0x2]:         loadl ecx, fp+2   
3 [0x3]:         int 0x1   
4 [0x4]:         popobj2    
5 [0x5]:         returnobj   
6 [0x6]:         ret   
7 [0x7]: line: 13 pushnull    : protected asm end
8 [0x8]:          popobj2    
9 [0x9]:          returnobj   
10 [0xa]:          ret   


function: std#__srt_global.print[1571] params(1) in file: lib\support\0.2.805/console.sharp:16:4: note:  
		def print(data: _int8[]) {
		   ^

0 [0x0]: line: 17 pushl 0   
1 [0x1]:          call @1599 // <std#__srt_global.print_chars>   
2 [0x2]:          ret   


function: std#__srt_global.print[1572] params(1) in file: lib\support\0.2.805/console.sharp:20:4: note:  
		def print(str: string) {
		   ^

0 [0x0]: line: 21 pushl 0   
1 [0x1]:          call @2961 // <std#string.get_data>   
2 [0x2]:          call @1599 // <std#__srt_global.print_chars>   
3 [0x3]:          ret   


function: std#__srt_global.println[1573] params(1) in file: lib\support\0.2.805/console.sharp:24:4: note:  
		def println(data: var[]) {
		   ^

0 [0x0]: line: 25 pushl 0   
1 [0x1]:          call @1602 // <std#__srt_global.print_numbers>   
2 [0x2]: line: 26 istore 10   
4 [0x4]:          call @1601 // <std#__srt_global.print_char>   
5 [0x5]:          ret   


function: std#__srt_global.println[1574] params(1) in file: lib\support\0.2.805/console.sharp:29:4: note:  
		def println(data: _int8[]) {
		   ^

0 [0x0]: line: 30 pushl 0   
1 [0x1]:          call @1599 // <std#__srt_global.print_chars>   
2 [0x2]: line: 31 istore 10   
4 [0x4]:          call @1601 // <std#__srt_global.print_char>   
5 [0x5]:          ret   


function: std#__srt_global.println[1575] params(1) in file: lib\support\0.2.805/console.sharp:34:4: note:  
		def println(data: _int16[]) {
		   ^

0 [0x0]: line: 35 pushl 0   
1 [0x1]:          call @1603 // <std#__srt_global.print_numbers>   
2 [0x2]: line: 36 istore 10   
4 [0x4]:          call @1601 // <std#__srt_global.print_char>   
5 [0x5]:          ret   


function: std#__srt_global.println[1576] params(1) in file: lib\support\0.2.805/console.sharp:39:4: note:  
		def println(data: _int32[]) {
		   ^

0 [0x0]: line: 40 pushl 0   
1 [0x1]:          call @1604 // <std#__srt_global.print_numbers>   
2 [0x2]: line: 41 istore 10   
4 [0x4]:          call @1601 // <std#__srt_global.print_char>   
5 [0x5]:          ret   


function: std#__srt_global.println[1577] params(1) in file: lib\support\0.2.805/console.sharp:44:4: note:  
		def println(data: _int64[]) {
		   ^

0 [0x0]: line: 45 pushl 0   
1 [0x1]:          call @1605 // <std#__srt_global.print_numbers>   
2 [0x2]: line: 46 istore 10   
4 [0x4]:          call @1601 // <std#__srt_global.print_char>   
5 [0x5]:          ret   


function: std#__srt_global.println[1578] params(1) in file: lib\support\0.2.805/console.sharp:49:4: note:  
		def println(data: _uint8[]) {
		   ^

0 [0x0]: line: 50 pushl 0   
1 [0x1]:          call @1606 // <std#__srt_global.print_numbers>   
2 [0x2]: line: 51 istore 10   
4 [0x4]:          call @1601 // <std#__srt_global.print_char>   
5 [0x5]:          ret   


function: std#__srt_global.println[1579] params(1) in file: lib\support\0.2.805/console.sharp:54:4: note:  
		def println(data: _uint16[]) {
		   ^

0 [0x0]: line: 55 pushl 0   
1 [0x1]:          call @1607 // <std#__srt_global.print_numbers>   
2 [0x2]: line: 56 istore 10   
4 [0x4]:          call @1601 // <std#__srt_global.print_char>   
5 [0x5]:          ret   


function: std#__srt_global.println[1580] params(1) in file: lib\support\0.2.805/console.sharp:59:4: note:  
		def println(data: _uint32[]) {
		   ^

0 [0x0]: line: 60 pushl 0   
1 [0x1]:          call @1608 // <std#__srt_global.print_numbers>   
2 [0x2]: line: 61 istore 10   
4 [0x4]:          call @1601 // <std#__srt_global.print_char>   
5 [0x5]:          ret   


function: std#__srt_global.println[1581] params(1) in file: lib\support\0.2.805/console.sharp:64:4: note:  
		def println(data: _uint64[]) {
		   ^

0 [0x0]: line: 65 pushl 0   
1 [0x1]:          call @1609 // <std#__srt_global.print_numbers>   
2 [0x2]: line: 66 istore 10   
4 [0x4]:          call @1601 // <std#__srt_global.print_char>   
5 [0x5]:          ret   


function: std#__srt_global.println[1582] params(1) in file: lib\support\0.2.805/console.sharp:69:4: note:  
		def println(data: var) {
		   ^

0 [0x0]: line: 70 ipushl #0   
1 [0x1]:          call @1600 // <std#__srt_global.print_num>   
2 [0x2]: line: 71 istore 10   
4 [0x4]:          call @1601 // <std#__srt_global.print_char>   
5 [0x5]:          ret   


function: std#__srt_global.println[1583] params(0) in file: lib\support\0.2.805/console.sharp:74:4: note:  
		def println() {
		   ^

0 [0x0]: line: 75 istore 10   
2 [0x2]:          call @1601 // <std#__srt_global.print_char>   
3 [0x3]:          ret   


function: std#__srt_global.println[1584] params(1) in file: lib\support\0.2.805/console.sharp:78:4: note:  
		def println(e: _enum_) {
		   ^

0 [0x0]: line: 79 pushl 0   
1 [0x1]:          call @1618 // <std#_enum_.get_name>   
2 [0x2]:          call @1599 // <std#__srt_global.print_chars>   
3 [0x3]: line: 80 istore 10   
5 [0x5]:          call @1601 // <std#__srt_global.print_char>   
6 [0x6]:          ret   


function: std#__srt_global.read_line[1585] params(0) in file: lib\support\0.2.805/console.sharp:83:4: note:  
		def read_line() : string {
		   ^

0 [0x0]: line: 84 istorel 0, fp+0   
2 [0x2]: line: 85 new_class @64 // std#string   
3 [0x3]:          dup    
4 [0x4]:          newstr @22 //    
5 [0x5]:          call @2935 // <std#string.string>   
6 [0x6]:          popobj2    
7 [0x7]:          smovr_3 fp+1   
8 [0x8]: line: 87 call @1587 // <std#__srt_global.read_char>   
9 [0x9]:          loadval ebx   
10 [0xa]:          mov8 ebx, ebx   
11 [0xb]:          smovr_2 ebx, fp+0   
12 [0xc]: line: 88 ipushl #0   
13 [0xd]:          movi #13, ebx   
15 [0xf]:          loadval ecx   
16 [0x10]:          tne ecx, ebx   
17 [0x11]:          movr ebx, cmt   
18 [0x12]:          skne ebx // pc = 23   
19 [0x13]:          ipushl #0   
20 [0x14]:          movi #10, ebx   
22 [0x16]:          loadval ecx   
23 [0x17]:          tne ecx, ebx   
24 [0x18]:          jne 34   
25 [0x19]: line: 89 pushl 1   
26 [0x1a]:          ipushl #0   
27 [0x1b]:          call @2942 // <std#string.append>   
28 [0x1c]:          pop   
29 [0x1d]: line: 90 call @1587 // <std#__srt_global.read_char>   
30 [0x1e]:          loadval ebx   
31 [0x1f]:          mov8 ebx, ebx   
32 [0x20]:          smovr_2 ebx, fp+0   
33 [0x21]:          jmp @12   
34 [0x22]: line: 93 movl 1   
35 [0x23]:          returnobj   
36 [0x24]:          ret   


function: std#__srt_global.read_passwd[1586] params(0) in file: lib\support\0.2.805/console.sharp:96:4: note:  
		def read_passwd() : string {
		   ^

0 [0x0]: line: 97 istorel 0, fp+0   
2 [0x2]: line: 98 new_class @64 // std#string   
3 [0x3]:          dup    
4 [0x4]:          newstr @22 //    
5 [0x5]:          call @2935 // <std#string.string>   
6 [0x6]:          popobj2    
7 [0x7]:          smovr_3 fp+1   
8 [0x8]: line: 100 call @1588 // <std#__srt_global.read_raw_char>   
9 [0x9]:           loadval ebx   
10 [0xa]:           mov8 ebx, ebx   
11 [0xb]:           smovr_2 ebx, fp+0   
12 [0xc]: line: 101 ipushl #0   
13 [0xd]:           movi #13, ebx   
15 [0xf]:           loadval ecx   
16 [0x10]:           tne ecx, ebx   
17 [0x11]:           movr ebx, cmt   
18 [0x12]:           skne ebx // pc = 23   
19 [0x13]:           ipushl #0   
20 [0x14]:           movi #10, ebx   
22 [0x16]:           loadval ecx   
23 [0x17]:           tne ecx, ebx   
24 [0x18]:           jne 34   
25 [0x19]: line: 102 pushl 1   
26 [0x1a]:           ipushl #0   
27 [0x1b]:           call @2942 // <std#string.append>   
28 [0x1c]:           pop   
29 [0x1d]: line: 103 call @1588 // <std#__srt_global.read_raw_char>   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           mov8 ebx, ebx   
32 [0x20]:           smovr_2 ebx, fp+0   
33 [0x21]:           jmp @12   
34 [0x22]: line: 106 movl 1   
35 [0x23]:           returnobj   
36 [0x24]:           ret   


function: std#__srt_global.read_char[1587] params(0) in file: lib\support\0.2.805/console.sharp:109:4: note:  
		def read_char() : var {
		   ^

0 [0x0]: line: 110 istore 0   
2 [0x2]:           call @1611 // <std#__srt_global.read_ch>   
3 [0x3]:           loadval ebx   
4 [0x4]:           return_val ebx   
5 [0x5]:           ret   


function: std#__srt_global.read_raw_char[1588] params(0) in file: lib\support\0.2.805/console.sharp:113:4: note:  
		def read_raw_char() : var {
		   ^

0 [0x0]: line: 114 istore 1   
2 [0x2]:           call @1611 // <std#__srt_global.read_ch>   
3 [0x3]:           loadval ebx   
4 [0x4]:           return_val ebx   
5 [0x5]:           ret   


function: std#__srt_global.println[1589] params(1) in file: lib\support\0.2.805/console.sharp:117:4: note:  
		def println(str: string) {
		   ^

0 [0x0]: line: 118 pushl 0   
1 [0x1]:           call @2961 // <std#string.get_data>   
2 [0x2]:           call @1599 // <std#__srt_global.print_chars>   
3 [0x3]: line: 119 istore 10   
5 [0x5]:           call @1601 // <std#__srt_global.print_char>   
6 [0x6]:           ret   


function: std#__srt_global.println[1590] params(1) in file: lib\support\0.2.805/console.sharp:122:4: note:  
		def println(o: printable) {
		   ^

0 [0x0]: line: 123 pushl 0   
1 [0x1]:           invoke_delegate 2926 { static=0, args=0 }   
3 [0x3]:           call @2961 // <std#string.get_data>   
4 [0x4]:           call @1599 // <std#__srt_global.print_chars>   
5 [0x5]: line: 124 istore 10   
7 [0x7]:           call @1601 // <std#__srt_global.print_char>   
8 [0x8]:           ret   


function: std#__srt_global.print[1591] params(1) in file: lib\support\0.2.805/console.sharp:127:4: note:  
		def print(o: printable) {
		   ^

0 [0x0]: line: 128 pushl 0   
1 [0x1]:           invoke_delegate 2926 { static=0, args=0 }   
3 [0x3]:           popobj2    
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @1599 // <std#__srt_global.print_chars>   
8 [0x8]:           ret   


function: std#__srt_global.print[1592] params(1) in file: lib\support\0.2.805/console.sharp:131:4: note:  
		def print(data: var) {
		   ^

0 [0x0]: line: 132 ipushl #0   
1 [0x1]:           call @1600 // <std#__srt_global.print_num>   
2 [0x2]:           ret   


function: std#__srt_global.flush[1593] params(0) in file: lib\support\0.2.805/console.sharp:135:4: note:  
		def flush() {
		   ^

0 [0x0]: line: 136 int 0x34   : protected asm start
1 [0x1]:           ret   : protected asm end


function: std#__srt_global.utc_mills_time[1594] params(0) in file: lib\support\0.2.805/console.sharp:139:4: note:  
		def utc_mills_time() : var {
		   ^

0 [0x0]: line: 140 call @3044 // <std#time.mills_time>   
1 [0x1]:           loadval ebx   
2 [0x2]:           return_val ebx   
3 [0x3]:           ret   


function: std#__srt_global.nano_time[1595] params(0) in file: lib\support\0.2.805/console.sharp:143:4: note:  
		def nano_time() : var {
		   ^

0 [0x0]: line: 144 call @3039 // <std#time.nano_time>   
1 [0x1]:           loadval ebx   
2 [0x2]:           return_val ebx   
3 [0x3]:           ret   


function: std#__srt_global.exit[1596] params(0) in file: lib\support\0.2.805/console.sharp:147:4: note:  
		def exit() {
		   ^

0 [0x0]: line: 148 int 0x1d   : protected asm start
1 [0x1]:           ret   : protected asm end


function: std#__srt_global.sizeOf[1597] params(1) in file: lib\support\0.2.805/console.sharp:151:4: note:  
		def sizeOf(data: object) : var {
		   ^

0 [0x0]: line: 152 pushl 0   : protected asm start
1 [0x1]:           int 0x33   
2 [0x2]:           return_val ebx   
3 [0x3]:           ret   
4 [0x4]: line: 158 istorel 0, fp+0   : protected asm end
6 [0x6]:           ret   


function: std#__srt_global.sizeOf[1598] params(1) in file: lib\support\0.2.805/console.sharp:161:4: note:  
		def sizeOf(data: object[]) : var {
		   ^

0 [0x0]: line: 162 pushl 0   : protected asm start
1 [0x1]:           int 0x33   
2 [0x2]:           return_val ebx   
3 [0x3]:           ret   
4 [0x4]: line: 168 istorel 0, fp+0   : protected asm end
6 [0x6]:           ret   


function: std#__srt_global.print_chars[1599] params(1) in file: lib\support\0.2.805/console.sharp:171:10: note:  
		local def print_chars(str: _int8[]) {
		         ^

0 [0x0]: line: 172 istorel -1, fp+2   
2 [0x2]:           pushl 0   
3 [0x3]:           popl 3   
4 [0x4]:           iaddl 1, fp@2   
6 [0x6]:           movl 3   
7 [0x7]:           sizeof ecx   
8 [0x8]:           loadl ebx, fp+2   
9 [0x9]:           lt ebx, ecx   
10 [0xa]:           jne 16   
11 [0xb]:           iaload ecx, ebx   
12 [0xc]:           smovr_2 ecx, fp+1   
13 [0xd]: line: 173 loadl ebx, fp+1   : protected asm start
14 [0xe]:           _putc ebx   
15 [0xf]:           jmp @4   : protected asm end
16 [0x10]:           ret   


function: std#__srt_global.print_num[1600] params(1) in file: lib\support\0.2.805/console.sharp:180:10: note:  
		local def print_num(val: var) {
		         ^

0 [0x0]: line: 181 loadl ebx, fp+0   : protected asm start
1 [0x1]:           put ebx   
2 [0x2]:           ret   : protected asm end


function: std#__srt_global.print_char[1601] params(1) in file: lib\support\0.2.805/console.sharp:187:10: note:  
		local def print_char(val: _int8) {
		         ^

0 [0x0]: line: 188 loadl ebx, fp+0   : protected asm start
1 [0x1]:           _putc ebx   
2 [0x2]:           ret   : protected asm end


function: std#__srt_global.print_numbers[1602] params(1) in file: lib\support\0.2.805/console.sharp:194:10: note:  
		local def print_numbers(str: var[]) {
		         ^

0 [0x0]: line: 195 movi #91, ebx   : protected asm start
2 [0x2]:           movi #32, ecx   
4 [0x4]:           _putc ebx   
5 [0x5]:           _putc ecx   
6 [0x6]: line: 201 istorel 0, fp+1   : protected asm end
8 [0x8]:           ipushl #1   
9 [0x9]:           movl 0   
10 [0xa]:           sizeof ebx   
11 [0xb]:           loadval ecx   
12 [0xc]:           lt ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           movr cmt, ebx   
15 [0xf]:           jne 48   
16 [0x10]: line: 202 pushl 0   
17 [0x11]:           loadl ebx, fp+1   
18 [0x12]:           popobj2    
19 [0x13]:           movr adx, ebx   
20 [0x14]:           chklen adx   
21 [0x15]:           iaload ebx, adx   
22 [0x16]:           smovr_2 ebx, fp+2   
23 [0x17]: line: 203 loadl ebx, fp+2   : protected asm start
24 [0x18]:           put ebx   
25 [0x19]: line: 208 ipushl #1   : protected asm end
26 [0x1a]:           movi #1, ebx   
28 [0x1c]:           loadval ecx   
29 [0x1d]:           add ecx, ebx -> ebx   
30 [0x1e]:           rstore ebx   
31 [0x1f]:           movl 0   
32 [0x20]:           sizeof ebx   
33 [0x21]:           loadval ecx   
34 [0x22]:           lt ecx, ebx   
35 [0x23]:           movr ebx, cmt   
36 [0x24]:           movr cmt, ebx   
37 [0x25]:           jne 44   
38 [0x26]: line: 209 movi #44, ebx   : protected asm start
40 [0x28]:           movi #32, ecx   
42 [0x2a]:           _putc ebx   
43 [0x2b]:           _putc ecx   
44 [0x2c]:           nop   : protected asm end
45 [0x2d]:           iaddl 1, fp@1   
47 [0x2f]:           jmp @8   
48 [0x30]: line: 217 movi #32, ebx   : protected asm start
50 [0x32]:           movi #93, ecx   
52 [0x34]:           _putc ebx   
53 [0x35]:           _putc ecx   
54 [0x36]:           ret   : protected asm end


function: std#__srt_global.print_numbers[1603] params(1) in file: lib\support\0.2.805/console.sharp:225:10: note:  
		local def print_numbers(str: _int16[]) {
		         ^

0 [0x0]: line: 226 pushl 0   : protected asm start
1 [0x1]:           call @1602 // <std#__srt_global.print_numbers>   
2 [0x2]:           ret   : protected asm end


function: std#__srt_global.print_numbers[1604] params(1) in file: lib\support\0.2.805/console.sharp:232:10: note:  
		local def print_numbers(str: _int32[]) {
		         ^

0 [0x0]: line: 233 pushl 0   : protected asm start
1 [0x1]:           call @1602 // <std#__srt_global.print_numbers>   
2 [0x2]:           ret   : protected asm end


function: std#__srt_global.print_numbers[1605] params(1) in file: lib\support\0.2.805/console.sharp:239:10: note:  
		local def print_numbers(str: _int64[]) {
		         ^

0 [0x0]: line: 240 pushl 0   : protected asm start
1 [0x1]:           call @1602 // <std#__srt_global.print_numbers>   
2 [0x2]:           ret   : protected asm end


function: std#__srt_global.print_numbers[1606] params(1) in file: lib\support\0.2.805/console.sharp:246:10: note:  
		local def print_numbers(str: _uint8[]) {
		         ^

0 [0x0]: line: 247 pushl 0   : protected asm start
1 [0x1]:           call @1602 // <std#__srt_global.print_numbers>   
2 [0x2]:           ret   : protected asm end


function: std#__srt_global.print_numbers[1607] params(1) in file: lib\support\0.2.805/console.sharp:253:10: note:  
		local def print_numbers(str: _uint16[]) {
		         ^

0 [0x0]: line: 254 pushl 0   : protected asm start
1 [0x1]:           call @1602 // <std#__srt_global.print_numbers>   
2 [0x2]:           ret   : protected asm end


function: std#__srt_global.print_numbers[1608] params(1) in file: lib\support\0.2.805/console.sharp:260:10: note:  
		local def print_numbers(str: _uint32[]) {
		         ^

0 [0x0]: line: 261 pushl 0   : protected asm start
1 [0x1]:           call @1602 // <std#__srt_global.print_numbers>   
2 [0x2]:           ret   : protected asm end


function: std#__srt_global.print_numbers[1609] params(1) in file: lib\support\0.2.805/console.sharp:267:10: note:  
		local def print_numbers(str: _uint64[]) {
		         ^

0 [0x0]: line: 268 pushl 0   : protected asm start
1 [0x1]:           call @1602 // <std#__srt_global.print_numbers>   
2 [0x2]:           ret   : protected asm end


function: std#__srt_global.print_chars[1610] params(1) in file: lib\support\0.2.805/console.sharp:274:10: note:  
		local def print_chars(str: _int16[]) {
		         ^

0 [0x0]: line: 275 pushl 0   : protected asm start
1 [0x1]:           call @1599 // <std#__srt_global.print_chars>   
2 [0x2]:           ret   : protected asm end


function: std#__srt_global.read_ch[1611] params(1) in file: lib\support\0.2.805/console.sharp:281:10: note:  
		local def read_ch(hide: var) : var {
		         ^

0 [0x0]: line: 282 loadl cmt, fp+0   : protected asm start
1 [0x1]:           get ebx   
2 [0x2]:           return_val ebx   
3 [0x3]:           ret   
4 [0x4]: line: 288 istorel 0, fp+0   : protected asm end
6 [0x6]:           ret   


constructor: std#_enum_._enum_[1612] params(1) in file: lib\support\0.2.805/enum.sharp:18:11: note:  
		    _enum_(ord : var) {
		          ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 19 ipushl #1   
2 [0x2]:          movl 0   
3 [0x3]:          movn #1   
5 [0x5]:          loadval ebx   
6 [0x6]:          mov64 ebx, ebx   
7 [0x7]:          movi #0, adx   
9 [0x9]:          rmov adx, ebx   
10 [0xa]:          ret   


constructor: std#_enum_._enum_[1613] params(1) in file: lib\support\0.2.805/enum.sharp:22:11: note:  
		    _enum_(e : _enum_) {
		          ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 23 movl 1   
2 [0x2]:          movn #1   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          movl 0   
8 [0x8]:          movn #1   
10 [0xa]:          mov64 ebx, ebx   
11 [0xb]:          movi #0, adx   
13 [0xd]:          rmov adx, ebx   
14 [0xe]: line: 24 movl 1   
15 [0xf]:          movn #0   
17 [0x11]:          pushobj   
18 [0x12]:          istore 0   
20 [0x14]:          movl 1   
21 [0x15]:          movn #0   
23 [0x17]:          sizeof ebx   
24 [0x18]:          rstore ebx   
25 [0x19]:          call @1757 // <std.io#__srt_global.copy>   
26 [0x1a]:          movl 0   
27 [0x1b]:          movn #0   
29 [0x1d]:          popobj   
30 [0x1e]:          ret   


overload function: std#_enum_.operator!=[1614] params(1) in file: lib\support\0.2.805/enum.sharp:27:8: note:  
		    def operator!=(e : _enum_) : var {
		       ^

0 [0x0]: line: 28 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #1   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#_enum_.operator!=[1615] params(1) in file: lib\support\0.2.805/enum.sharp:31:8: note:  
		    def operator!=(num : var) : var {
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          tne ecx, ebx   
10 [0xa]:          return_val cmt   
11 [0xb]:          ret   


overload function: std#_enum_.operator==[1616] params(1) in file: lib\support\0.2.805/enum.sharp:35:8: note:  
		    def operator==(e : _enum_) : var {
		       ^

0 [0x0]: line: 36 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #1   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#_enum_.operator==[1617] params(1) in file: lib\support\0.2.805/enum.sharp:39:8: note:  
		    def operator==(num : var) : var {
		       ^

0 [0x0]: line: 40 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          test ecx, ebx   
10 [0xa]:          return_val cmt   
11 [0xb]:          ret   


function: std#_enum_.get_name[1618] params(0) in file: lib\support\0.2.805/enum.sharp:43:8: note:  
		    def get_name() : _int8[] {
		       ^

0 [0x0]: line: 44 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          returnobj   
4 [0x4]:          ret   


function: std#_enum_.get_ordinal[1619] params(0) in file: lib\support\0.2.805/enum.sharp:47:8: note:  
		    def get_ordinal() : _int64 {
		       ^

0 [0x0]: line: 48 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          return_val ebx   
7 [0x7]:          ret   


function: std#_enum_.to_string[1620] params(0) in file: lib\support\0.2.805/enum.sharp:51:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 52 new_class @64 // std#string   
1 [0x1]:          dup    
2 [0x2]:          movl 0   
3 [0x3]:          movn #0   
5 [0x5]:          pushobj   
6 [0x6]:          call @2935 // <std#string.string>   
7 [0x7]:          popobj2    
8 [0x8]:          returnobj   
9 [0x9]:          ret   


constructor: std#_enum_._enum_[1621] params(0) in file: lib\support\0.2.805/enum.sharp:14:17: note:  
		stable ext class _enum_ {
		                ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#throwable.throwable[1622] params(1) in file: lib\support\0.2.805/exceptions.sharp:30:21: note:  
		    public throwable(message : _int8[]) {
		                    ^

0 [0x0]: line: 26 call @1956 // <platform.kernel#vm.get_frame_info>   
1 [0x1]:          movl 0   
2 [0x2]:          movn #2   
4 [0x4]:          popobj   
5 [0x5]:          pushl 0   
6 [0x6]: line: 31 pushl 1   
7 [0x7]:          movl 0   
8 [0x8]:          movn #0   
10 [0xa]:          popobj   
11 [0xb]:          ret   


constructor: std#throwable.throwable[1623] params(1) in file: lib\support\0.2.805/exceptions.sharp:34:21: note:  
		    public throwable(message : string) {
		                    ^

0 [0x0]: line: 26 call @1956 // <platform.kernel#vm.get_frame_info>   
1 [0x1]:          movl 0   
2 [0x2]:          movn #2   
4 [0x4]:          popobj   
5 [0x5]:          pushl 0   
6 [0x6]: line: 35 pushl 1   
7 [0x7]:          call @2961 // <std#string.get_data>   
8 [0x8]:          movl 0   
9 [0x9]:          movn #0   
11 [0xb]:          popobj   
12 [0xc]:          ret   


function: std#throwable.get_message[1624] params(0) in file: lib\support\0.2.805/exceptions.sharp:38:8: note:  
		    def get_message() : string {
		       ^

0 [0x0]: line: 39 new_class @64 // std#string   
1 [0x1]:          dup    
2 [0x2]:          movl 0   
3 [0x3]:          movn #0   
5 [0x5]:          pushobj   
6 [0x6]:          call @2935 // <std#string.string>   
7 [0x7]:          popobj2    
8 [0x8]:          returnobj   
9 [0x9]:          ret   


constructor: std#throwable.throwable[1625] params(0) in file: lib\support\0.2.805/exceptions.sharp:10:6: note:  
		class throwable {
		     ^

0 [0x0]: line: 26 call @1956 // <platform.kernel#vm.get_frame_info>   
1 [0x1]:          movl 0   
2 [0x2]:          movn #2   
4 [0x4]:          popobj   
5 [0x5]:          ret   


constructor: std#exception.exception[1626] params(1) in file: lib\support\0.2.805/exceptions.sharp:47:21: note:  
		    public exception(message : _int8[]) -> base(message) {}
		                    ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1622 // <std#throwable.throwable>   
3 [0x3]:         ret   


constructor: std#exception.exception[1627] params(1) in file: lib\support\0.2.805/exceptions.sharp:48:21: note:  
		    public exception(message : string) -> base(message) {}
		                    ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1623 // <std#throwable.throwable>   
3 [0x3]:         ret   


constructor: std#exception.exception[1628] params(0) in file: lib\support\0.2.805/exceptions.sharp:46:6: note:  
		class exception base throwable {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1625 // <std#throwable.throwable>   
2 [0x2]:         ret   


constructor: std#illegal_argument_exception.illegal_argument_exception[1629] params(1) in file: lib\support\0.2.805/exceptions.sharp:52:38: note:  
		    public illegal_argument_exception(message : _int8[]) -> base(message) {}
		                                     ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1626 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#illegal_argument_exception.illegal_argument_exception[1630] params(1) in file: lib\support\0.2.805/exceptions.sharp:53:38: note:  
		    public illegal_argument_exception(message : string) -> base(message) {}
		                                     ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1627 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#illegal_argument_exception.illegal_argument_exception[1631] params(0) in file: lib\support\0.2.805/exceptions.sharp:51:6: note:  
		class illegal_argument_exception base exception {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1628 // <std#exception.exception>   
2 [0x2]:         ret   


constructor: std#illegal_state_exception.illegal_state_exception[1632] params(1) in file: lib\support\0.2.805/exceptions.sharp:56:35: note:  
		    public illegal_state_exception(message : _int8[]) -> base(message) {}
		                                  ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1626 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#illegal_state_exception.illegal_state_exception[1633] params(1) in file: lib\support\0.2.805/exceptions.sharp:57:35: note:  
		    public illegal_state_exception(message : string) -> base(message) {}
		                                  ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1627 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#illegal_state_exception.illegal_state_exception[1634] params(0) in file: lib\support\0.2.805/exceptions.sharp:55:6: note:  
		class illegal_state_exception base exception {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1628 // <std#exception.exception>   
2 [0x2]:         ret   


constructor: std#out_of_bounds_exception.out_of_bounds_exception[1635] params(1) in file: lib\support\0.2.805/exceptions.sharp:60:35: note:  
		    public out_of_bounds_exception(message : _int8[]) -> base(message) {}
		                                  ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1626 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#out_of_bounds_exception.out_of_bounds_exception[1636] params(1) in file: lib\support\0.2.805/exceptions.sharp:61:35: note:  
		    public out_of_bounds_exception(message : string) -> base(message) {}
		                                  ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1627 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#out_of_bounds_exception.out_of_bounds_exception[1637] params(0) in file: lib\support\0.2.805/exceptions.sharp:59:6: note:  
		class out_of_bounds_exception base exception {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1628 // <std#exception.exception>   
2 [0x2]:         ret   


constructor: std#io_exception.io_exception[1638] params(1) in file: lib\support\0.2.805/exceptions.sharp:64:24: note:  
		    public io_exception(message : _int8[]) -> base(message) {}
		                       ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1626 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#io_exception.io_exception[1639] params(1) in file: lib\support\0.2.805/exceptions.sharp:65:24: note:  
		    public io_exception(message : string) -> base(message) {}
		                       ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1627 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#io_exception.io_exception[1640] params(0) in file: lib\support\0.2.805/exceptions.sharp:63:6: note:  
		class io_exception base exception {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1628 // <std#exception.exception>   
2 [0x2]:         ret   


constructor: std#invalid_operation_exception.invalid_operation_exception[1641] params(1) in file: lib\support\0.2.805/exceptions.sharp:68:39: note:  
		    public invalid_operation_exception(message : _int8[]) -> base(message) {}
		                                      ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1626 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#invalid_operation_exception.invalid_operation_exception[1642] params(1) in file: lib\support\0.2.805/exceptions.sharp:69:39: note:  
		    public invalid_operation_exception(message : string) -> base(message) {}
		                                      ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1627 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#invalid_operation_exception.invalid_operation_exception[1643] params(0) in file: lib\support\0.2.805/exceptions.sharp:67:6: note:  
		class invalid_operation_exception base exception {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1628 // <std#exception.exception>   
2 [0x2]:         ret   


constructor: std#nullptr_exception.nullptr_exception[1644] params(1) in file: lib\support\0.2.805/exceptions.sharp:72:29: note:  
		    public nullptr_exception(message : _int8[]) -> base(message) {}
		                            ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1626 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#nullptr_exception.nullptr_exception[1645] params(1) in file: lib\support\0.2.805/exceptions.sharp:73:29: note:  
		    public nullptr_exception(message : string) -> base(message) {}
		                            ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1627 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#nullptr_exception.nullptr_exception[1646] params(0) in file: lib\support\0.2.805/exceptions.sharp:71:6: note:  
		class nullptr_exception base exception {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1628 // <std#exception.exception>   
2 [0x2]:         ret   


constructor: std#runtime_exception.runtime_exception[1647] params(1) in file: lib\support\0.2.805/exceptions.sharp:76:29: note:  
		    public runtime_exception(message : _int8[]) -> base(message) {}
		                            ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1626 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#runtime_exception.runtime_exception[1648] params(1) in file: lib\support\0.2.805/exceptions.sharp:77:29: note:  
		    public runtime_exception(message : string) -> base(message) {}
		                            ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1627 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#runtime_exception.runtime_exception[1649] params(0) in file: lib\support\0.2.805/exceptions.sharp:75:6: note:  
		class runtime_exception base exception {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1628 // <std#exception.exception>   
2 [0x2]:         ret   


constructor: std#stack_overflow_exception.stack_overflow_exception[1650] params(1) in file: lib\support\0.2.805/exceptions.sharp:80:36: note:  
		    public stack_overflow_exception(message : _int8[]) -> base(message) {}
		                                   ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1626 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#stack_overflow_exception.stack_overflow_exception[1651] params(1) in file: lib\support\0.2.805/exceptions.sharp:81:36: note:  
		    public stack_overflow_exception(message : string) -> base(message) {}
		                                   ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1627 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#stack_overflow_exception.stack_overflow_exception[1652] params(0) in file: lib\support\0.2.805/exceptions.sharp:79:6: note:  
		class stack_overflow_exception base exception {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1628 // <std#exception.exception>   
2 [0x2]:         ret   


constructor: std#thread_stack_exception.thread_stack_exception[1653] params(1) in file: lib\support\0.2.805/exceptions.sharp:84:34: note:  
		    public thread_stack_exception(message : _int8[]) -> base(message) {}
		                                 ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1626 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#thread_stack_exception.thread_stack_exception[1654] params(1) in file: lib\support\0.2.805/exceptions.sharp:85:34: note:  
		    public thread_stack_exception(message : string) -> base(message) {}
		                                 ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1627 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#thread_stack_exception.thread_stack_exception[1655] params(0) in file: lib\support\0.2.805/exceptions.sharp:83:6: note:  
		class thread_stack_exception base exception {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1628 // <std#exception.exception>   
2 [0x2]:         ret   


constructor: std#class_cast_exception.class_cast_exception[1656] params(1) in file: lib\support\0.2.805/exceptions.sharp:88:32: note:  
		    public class_cast_exception(message : _int8[]) -> base(message) {}
		                               ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1626 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#class_cast_exception.class_cast_exception[1657] params(1) in file: lib\support\0.2.805/exceptions.sharp:89:32: note:  
		    public class_cast_exception(message : string) -> base(message) {}
		                               ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1627 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#class_cast_exception.class_cast_exception[1658] params(0) in file: lib\support\0.2.805/exceptions.sharp:87:6: note:  
		class class_cast_exception base exception {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1628 // <std#exception.exception>   
2 [0x2]:         ret   


constructor: std#out_of_memory_exception.out_of_memory_exception[1659] params(1) in file: lib\support\0.2.805/exceptions.sharp:92:35: note:  
		    public out_of_memory_exception(message : _int8[]) -> base(message) {}
		                                  ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1626 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#out_of_memory_exception.out_of_memory_exception[1660] params(1) in file: lib\support\0.2.805/exceptions.sharp:93:35: note:  
		    public out_of_memory_exception(message : string) -> base(message) {}
		                                  ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1627 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#out_of_memory_exception.out_of_memory_exception[1661] params(0) in file: lib\support\0.2.805/exceptions.sharp:91:6: note:  
		class out_of_memory_exception base exception {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1628 // <std#exception.exception>   
2 [0x2]:         ret   


constructor: std#not_implemented_error.not_implemented_error[1662] params(1) in file: lib\support\0.2.805/exceptions.sharp:96:33: note:  
		    public not_implemented_error(message : _int8[]) -> base(message) {}
		                                ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1626 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#not_implemented_error.not_implemented_error[1663] params(1) in file: lib\support\0.2.805/exceptions.sharp:97:33: note:  
		    public not_implemented_error(message : string) -> base(message) {}
		                                ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1627 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#not_implemented_error.not_implemented_error[1664] params(0) in file: lib\support\0.2.805/exceptions.sharp:95:6: note:  
		class not_implemented_error base exception {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1628 // <std#exception.exception>   
2 [0x2]:         ret   


constructor: std#unsatisfied_link_error.unsatisfied_link_error[1665] params(1) in file: lib\support\0.2.805/exceptions.sharp:100:34: note:  
		    public unsatisfied_link_error(message : _int8[]) -> base(message) {}
		                                 ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1626 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#unsatisfied_link_error.unsatisfied_link_error[1666] params(1) in file: lib\support\0.2.805/exceptions.sharp:101:34: note:  
		    public unsatisfied_link_error(message : string) -> base(message) {}
		                                 ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1627 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#unsatisfied_link_error.unsatisfied_link_error[1667] params(0) in file: lib\support\0.2.805/exceptions.sharp:99:6: note:  
		class unsatisfied_link_error base exception {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1628 // <std#exception.exception>   
2 [0x2]:         ret   


function: std#__srt_global.runtime_error[1668] params(1) in file: lib\support\0.2.805/exceptions.sharp:118:4: note:  
		def runtime_error(message: string) : runtime_except {
		   ^

0 [0x0]: line: 119 new_class @10 // std#runtime_exception   
1 [0x1]:           dup    
2 [0x2]:           pushl 0   
3 [0x3]:           call @1648 // <std#runtime_exception.runtime_exception>   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   


function: std#__srt_global.runtime_error[1669] params(0) in file: lib\support\0.2.805/exceptions.sharp:122:4: note:  
		def runtime_error() : runtime_except {
		   ^

0 [0x0]: line: 123 new_class @10 // std#runtime_exception   
1 [0x1]:           dup    
2 [0x2]:           call @1649 // <std#runtime_exception.runtime_exception>   
3 [0x3]:           popobj2    
4 [0x4]:           returnobj   
5 [0x5]:           ret   


function: std#__srt_global.todo[1670] params(1) in file: lib\support\0.2.805/exceptions.sharp:126:4: note:  
		def todo(message: string) {
		   ^

0 [0x0]: line: 127 new_class @15 // std#not_implemented_error   
1 [0x1]:           dup    
2 [0x2]:           pushl 0   
3 [0x3]:           call @1663 // <std#not_implemented_error.not_implemented_error>   
4 [0x4]:           throw    
5 [0x5]:           ret   


function: std.io#__srt_global.critical_section[1671] params(1) in file: lib\support\0.2.805/io//critical_section.sharp:4:4: note:  
		def critical_section(block : ()()) {
		   ^

0 [0x0]: line: 5 movg @17 // @std.io#__srt_global   : protected asm start: try start: try block start
1 [0x1]: line: 6 movn #0   
3 [0x3]:         _lck    
4 [0x4]: line: 11 ipushl #0   : protected asm end
5 [0x5]:          loadval ebx   
6 [0x6]:          calld ebx   
7 [0x7]:          jmp @8   : try block end
8 [0x8]:          movl 1   : try end
9 [0x9]:          del   
10 [0xa]: line: 13 movg @17 // @std.io#__srt_global   : protected asm start: finally start
11 [0xb]:          movn #0   
13 [0xd]:          _ulck   
14 [0xe]:          movl 1   : protected asm end
15 [0xf]:          checknull   
16 [0x10]:          je 19   
17 [0x11]:          pushobj   
18 [0x12]:          ret ERR   
19 [0x13]:          nop   : finally end
20 [0x14]:          ret   


function: std.io#__srt_global.critical_section[1672] params(2) in file: lib\support\0.2.805/io//critical_section.sharp:21:4: note:  
		def critical_section(block : ()(), lock_obj : object) {
		   ^

0 [0x0]: line: 22 movl 1   : protected asm start: try start: try block start
1 [0x1]: line: 23 _lck    
2 [0x2]: line: 27 ipushl #0   : protected asm end
3 [0x3]:          loadval ebx   
4 [0x4]:          calld ebx   
5 [0x5]:          jmp @6   : try block end
6 [0x6]:          movl 2   : try end
7 [0x7]:          del   
8 [0x8]: line: 29 movl 1   : protected asm start: finally start
9 [0x9]:          _ulck   
10 [0xa]:          movl 2   : protected asm end
11 [0xb]:          checknull   
12 [0xc]:          je 15   
13 [0xd]:          pushobj   
14 [0xe]:          ret ERR   
15 [0xf]:          nop   : finally end
16 [0x10]:          ret   


constructor: std.io#file.file[1673] params(1) in file: lib\support\0.2.805/io//file.sharp:23:9: note:  
		    file(path: string) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 24 pushl 0   
2 [0x2]:          pushl 1   
3 [0x3]:          call @1677 // <std.io#file.update_path>   
4 [0x4]:          ret   


constructor: std.io#file.file[1674] params(1) in file: lib\support\0.2.805/io//file.sharp:27:9: note:  
		    file(path: _int8[]) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 28 pushl 0   
2 [0x2]:          new_class @64 // std#string   
3 [0x3]:          dup    
4 [0x4]:          newstr @22 //    
5 [0x5]:          call @2935 // <std#string.string>   
6 [0x6]:          pushl 1   
7 [0x7]:          call @2947 // <std#string.operator+>   
8 [0x8]:          call @1677 // <std.io#file.update_path>   
9 [0x9]:          ret   


function: std.io#file.get_name[1675] params(0) in file: lib\support\0.2.805/io//file.sharp:31:8: note:  
		    def get_name() : string {
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          pushnull    
5 [0x5]:          itest ebx   
6 [0x6]:          skpe ebx // pc = 17   
7 [0x7]:          movl 0   
8 [0x8]:          movn #0   
10 [0xa]:          pushobj   
11 [0xb]:          call @2976 // <std#string.size>   
12 [0xc]:          loadval ebx   
13 [0xd]:          rstore ebx   
14 [0xe]:          movi #0, ebx   
16 [0x10]:          loadval ecx   
17 [0x11]:          test ecx, ebx   
18 [0x12]:          jne 23   
19 [0x13]: line: 33 pushnull    
20 [0x14]:          popobj2    
21 [0x15]:          returnobj   
22 [0x16]:          ret   
23 [0x17]:          nop   
24 [0x18]: line: 36 movl 0   
25 [0x19]:          movn #0   
27 [0x1b]:          pushobj   
28 [0x1c]:          call @2976 // <std#string.size>   
29 [0x1d]:          loadval ebx   
30 [0x1e]:          rstore ebx   
31 [0x1f]:          movi #1, ebx   
33 [0x21]:          loadval ecx   
34 [0x22]:          sub ecx, ebx -> ebx   
35 [0x23]:          smovr_2 ebx, fp+1   
36 [0x24]:          ipushl #1   
37 [0x25]:          movi #0, ebx   
39 [0x27]:          loadval ecx   
40 [0x28]:          gt ecx, ebx   
41 [0x29]:          movr ebx, cmt   
42 [0x2a]:          movr cmt, ebx   
43 [0x2b]:          jne 86   
44 [0x2c]: line: 37 movl 0   
45 [0x2d]:          movn #0   
47 [0x2f]:          pushobj   
48 [0x30]:          ipushl #1   
49 [0x31]:          call @2958 // <std#string.operator[>   
50 [0x32]:          loadval ebx   
51 [0x33]:          rstore ebx   
52 [0x34]:          movg @18 // @std.io#file   
53 [0x35]:          movn #1   
55 [0x37]:          movi #0, adx   
57 [0x39]:          iaload ebx, adx   
58 [0x3a]:          loadval ecx   
59 [0x3b]:          test ecx, ebx   
60 [0x3c]:          jne 80   
61 [0x3d]: line: 38 movl 0   
62 [0x3e]:          movn #0   
64 [0x40]:          pushobj   
65 [0x41]:          ipushl #1   
66 [0x42]:          movi #1, ebx   
68 [0x44]:          loadval ecx   
69 [0x45]:          add ecx, ebx -> ebx   
70 [0x46]:          rstore ebx   
71 [0x47]:          movl 0   
72 [0x48]:          movn #0   
74 [0x4a]:          pushobj   
75 [0x4b]:          call @2976 // <std#string.size>   
76 [0x4c]:          call @2990 // <std#string.substring>   
77 [0x4d]:          popobj2    
78 [0x4e]:          returnobj   
79 [0x4f]:          ret   
80 [0x50]:          nop   
81 [0x51]:          loadl ebx, fp+1   
82 [0x52]:          movr egx, ebx   
83 [0x53]:          dec ebx   
84 [0x54]:          smovr_2 ebx, fp+1   
85 [0x55]:          jmp @36   
86 [0x56]: line: 42 movl 0   
87 [0x57]:          movn #0   
89 [0x59]:          returnobj   
90 [0x5a]:          ret   


function: std.io#file.to_string[1676] params(0) in file: lib\support\0.2.805/io//file.sharp:45:8: note:  
		    def to_string() := path;
		       ^

0 [0x0]: line: 45 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          returnobj   
4 [0x4]:          ret   


function: std.io#file.update_path[1677] params(1) in file: lib\support\0.2.805/io//file.sharp:47:5: note:  
			def update_path(path: string) {
		    ^

0 [0x0]: line: 48 movl 1   
1 [0x1]:          checknull   
2 [0x2]:          movr cmt, ebx   
3 [0x3]:          jne 9   
4 [0x4]: line: 49 new_class @9 // std#nullptr_exception   
5 [0x5]:          dup    
6 [0x6]:          newstr @23 // file path cannot be null   
7 [0x7]:          call @1644 // <std#nullptr_exception.nullptr_exception>   
8 [0x8]:          throw    
9 [0x9]:          nop   
10 [0xa]: line: 51 pushl 1   
11 [0xb]:          call @2943 // <std#string.empty>   
12 [0xc]:          loadval ebx   
13 [0xd]:          movr cmt, ebx   
14 [0xe]:          jne 20   
15 [0xf]: line: 52 new_class @9 // std#nullptr_exception   
16 [0x10]:          dup    
17 [0x11]:          newstr @24 // file path cannot be empty   
18 [0x12]:          call @1644 // <std#nullptr_exception.nullptr_exception>   
19 [0x13]:          throw    
20 [0x14]:          nop   
21 [0x15]: line: 53 movg @18 // @std.io#file   
22 [0x16]:          movn #0   
24 [0x18]:          pushobj   
25 [0x19]:          pushl 1   
26 [0x1a]:          invoke_delegate 1716 { static=0, args=1 }   
28 [0x1c]:          movl 0   
29 [0x1d]:          movn #0   
31 [0x1f]:          popobj   
32 [0x20]:          ret   


function: std.io#file.get_parent_file[1678] params(0) in file: lib\support\0.2.805/io//file.sharp:56:8: note:  
		    def get_parent_file() : file {
		       ^

0 [0x0]: line: 57 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          pushnull    
5 [0x5]:          itest ebx   
6 [0x6]:          skpe ebx // pc = 17   
7 [0x7]:          movl 0   
8 [0x8]:          movn #0   
10 [0xa]:          pushobj   
11 [0xb]:          call @2976 // <std#string.size>   
12 [0xc]:          loadval ebx   
13 [0xd]:          rstore ebx   
14 [0xe]:          movi #0, ebx   
16 [0x10]:          loadval ecx   
17 [0x11]:          test ecx, ebx   
18 [0x12]:          jne 23   
19 [0x13]: line: 58 pushnull    
20 [0x14]:          popobj2    
21 [0x15]:          returnobj   
22 [0x16]:          ret   
23 [0x17]:          nop   
24 [0x18]: line: 61 movl 0   
25 [0x19]:          movn #0   
27 [0x1b]:          pushobj   
28 [0x1c]:          call @2976 // <std#string.size>   
29 [0x1d]:          loadval ebx   
30 [0x1e]:          rstore ebx   
31 [0x1f]:          movi #1, ebx   
33 [0x21]:          loadval ecx   
34 [0x22]:          sub ecx, ebx -> ebx   
35 [0x23]:          smovr_2 ebx, fp+1   
36 [0x24]:          ipushl #1   
37 [0x25]:          movi #0, ebx   
39 [0x27]:          loadval ecx   
40 [0x28]:          gt ecx, ebx   
41 [0x29]:          movr ebx, cmt   
42 [0x2a]:          movr cmt, ebx   
43 [0x2b]:          jne 86   
44 [0x2c]: line: 62 movl 0   
45 [0x2d]:          movn #0   
47 [0x2f]:          pushobj   
48 [0x30]:          ipushl #1   
49 [0x31]:          call @2958 // <std#string.operator[>   
50 [0x32]:          loadval ebx   
51 [0x33]:          rstore ebx   
52 [0x34]:          movg @18 // @std.io#file   
53 [0x35]:          movn #1   
55 [0x37]:          movi #0, adx   
57 [0x39]:          iaload ebx, adx   
58 [0x3a]:          loadval ecx   
59 [0x3b]:          test ecx, ebx   
60 [0x3c]:          jne 80   
61 [0x3d]: line: 63 new_class @18 // std.io#file   
62 [0x3e]:          dup    
63 [0x3f]:          movl 0   
64 [0x40]:          movn #0   
66 [0x42]:          pushobj   
67 [0x43]:          istore 0   
69 [0x45]:          ipushl #1   
70 [0x46]:          movi #1, ebx   
72 [0x48]:          loadval ecx   
73 [0x49]:          add ecx, ebx -> ebx   
74 [0x4a]:          rstore ebx   
75 [0x4b]:          call @2990 // <std#string.substring>   
76 [0x4c]:          call @1673 // <std.io#file.file>   
77 [0x4d]:          popobj2    
78 [0x4e]:          returnobj   
79 [0x4f]:          ret   
80 [0x50]:          nop   
81 [0x51]:          loadl ebx, fp+1   
82 [0x52]:          movr egx, ebx   
83 [0x53]:          dec ebx   
84 [0x54]:          smovr_2 ebx, fp+1   
85 [0x55]:          jmp @36   
86 [0x56]: line: 67 pushnull    
87 [0x57]:          popobj2    
88 [0x58]:          returnobj   
89 [0x59]:          ret   


function: std.io#file.get_path[1679] params(0) in file: lib\support\0.2.805/io//file.sharp:70:8: note:  
		    def get_path() : string {
		       ^

0 [0x0]: line: 71 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          returnobj   
4 [0x4]:          ret   


function: std.io#file.get_absolute_path[1680] params(0) in file: lib\support\0.2.805/io//file.sharp:87:8: note:  
		    def get_absolute_path() : string {
		       ^

0 [0x0]: line: 88 movg @18 // @std.io#file   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 0   
5 [0x5]:          call @1717 // <std.io#file_system.resolve>   
6 [0x6]:          popobj2    
7 [0x7]:          returnobj   
8 [0x8]:          ret   


function: std.io#file.is_readable[1681] params(0) in file: lib\support\0.2.805/io//file.sharp:96:8: note:  
		    def is_readable() : var {
		       ^

0 [0x0]: line: 97 movg @18 // @std.io#file   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 0   
5 [0x5]:          istore 4   
7 [0x7]:          invoke_delegate 1719 { static=0, args=2 }   
9 [0x9]:          loadval ebx   
10 [0xa]:          rstore ebx   
11 [0xb]:          movi #0, ebx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


function: std.io#file.is_writeable[1682] params(0) in file: lib\support\0.2.805/io//file.sharp:105:8: note:  
		    def is_writeable() : var {
		       ^

0 [0x0]: line: 106 movg @18 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           istore 2   
7 [0x7]:           invoke_delegate 1719 { static=0, args=2 }   
9 [0x9]:           loadval ebx   
10 [0xa]:           rstore ebx   
11 [0xb]:           movi #0, ebx   
13 [0xd]:           loadval ecx   
14 [0xe]:           test ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


function: std.io#file.exists[1683] params(0) in file: lib\support\0.2.805/io//file.sharp:114:8: note:  
		    def exists() : var {
		       ^

0 [0x0]: line: 115 movg @18 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           ldc ebx // 0   
6 [0x6]:           rstore ebx   
7 [0x7]:           invoke_delegate 1719 { static=0, args=2 }   
9 [0x9]:           loadval ebx   
10 [0xa]:           rstore ebx   
11 [0xb]:           movi #0, ebx   
13 [0xd]:           loadval ecx   
14 [0xe]:           test ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


function: std.io#file.is_directory[1684] params(0) in file: lib\support\0.2.805/io//file.sharp:123:8: note:  
		    def is_directory() : var {
		       ^

0 [0x0]: line: 124 movg @18 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           invoke_delegate 1718 { static=0, args=1 }   
7 [0x7]:           loadval ebx   
8 [0x8]:           rstore ebx   
9 [0x9]:           movi #4, ebx   
11 [0xb]:           loadval ecx   
12 [0xc]:           uand ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           rstore ebx   
15 [0xf]:           movi #0, ebx   
17 [0x11]:           loadval ecx   
18 [0x12]:           tne ecx, ebx   
19 [0x13]:           return_val cmt   
20 [0x14]:           ret   


function: std.io#file.is_file[1685] params(0) in file: lib\support\0.2.805/io//file.sharp:133:8: note:  
		    def is_file() : var {
		       ^

0 [0x0]: line: 134 movg @18 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           invoke_delegate 1718 { static=0, args=1 }   
7 [0x7]:           loadval ebx   
8 [0x8]:           rstore ebx   
9 [0x9]:           movi #2, ebx   
11 [0xb]:           loadval ecx   
12 [0xc]:           uand ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           rstore ebx   
15 [0xf]:           movi #0, ebx   
17 [0x11]:           loadval ecx   
18 [0x12]:           tne ecx, ebx   
19 [0x13]:           return_val cmt   
20 [0x14]:           ret   


function: std.io#file.is_hidden[1686] params(0) in file: lib\support\0.2.805/io//file.sharp:145:8: note:  
		    def is_hidden() : var {
		       ^

0 [0x0]: line: 146 movg @18 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           invoke_delegate 1718 { static=0, args=1 }   
7 [0x7]:           loadval ebx   
8 [0x8]:           rstore ebx   
9 [0x9]:           movi #128, ebx   
11 [0xb]:           loadval ecx   
12 [0xc]:           uand ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           rstore ebx   
15 [0xf]:           movi #0, ebx   
17 [0x11]:           loadval ecx   
18 [0x12]:           tne ecx, ebx   
19 [0x13]:           return_val cmt   
20 [0x14]:           ret   


function: std.io#file.last_modified[1687] params(0) in file: lib\support\0.2.805/io//file.sharp:154:8: note:  
		    def last_modified() : var {
		       ^

0 [0x0]: line: 155 movg @18 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           ldc ebx // 0   
6 [0x6]:           rstore ebx   
7 [0x7]:           call @1721 // <std.io#file_system.last_modified_time>   
8 [0x8]:           loadval ebx   
9 [0x9]:           return_val ebx   
10 [0xa]:           ret   


function: std.io#file.last_status_changed[1688] params(0) in file: lib\support\0.2.805/io//file.sharp:158:8: note:  
		    def last_status_changed() : var {
		       ^

0 [0x0]: line: 159 movg @18 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           ldc ebx // 1   
6 [0x6]:           rstore ebx   
7 [0x7]:           call @1721 // <std.io#file_system.last_modified_time>   
8 [0x8]:           loadval ebx   
9 [0x9]:           return_val ebx   
10 [0xa]:           ret   


function: std.io#file.last_accessed[1689] params(0) in file: lib\support\0.2.805/io//file.sharp:162:8: note:  
		    def last_accessed() : var {
		       ^

0 [0x0]: line: 163 movg @18 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           istore 2   
7 [0x7]:           call @1721 // <std.io#file_system.last_modified_time>   
8 [0x8]:           loadval ebx   
9 [0x9]:           return_val ebx   
10 [0xa]:           ret   


function: std.io#file.length[1690] params(0) in file: lib\support\0.2.805/io//file.sharp:171:8: note:  
		    def length() : var {
		       ^

0 [0x0]: line: 172 movg @18 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           call @1722 // <std.io#file_system.get_length>   
6 [0x6]:           loadval ebx   
7 [0x7]:           return_val ebx   
8 [0x8]:           ret   


function: std.io#file.create[1691] params(0) in file: lib\support\0.2.805/io//file.sharp:186:8: note:  
		    def create() {
		       ^

0 [0x0]: line: 187 movg @18 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           movl 0   
5 [0x5]:           movn #0   
7 [0x7]:           pushobj   
8 [0x8]:           call @1723 // <std.io#file_system.create_file>   
9 [0x9]:           ret   


function: std.io#file.delete[1692] params(0) in file: lib\support\0.2.805/io//file.sharp:196:8: note:  
		    def delete() : var {
		       ^

0 [0x0]: line: 197 movg @18 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           call @1725 // <std.io#file_system.delete>   
6 [0x6]:           loadval ebx   
7 [0x7]:           return_val ebx   
8 [0x8]:           ret   


function: std.io#file.list[1693] params(0) in file: lib\support\0.2.805/io//file.sharp:212:8: note:  
		    def list() : list<string> {
		       ^

0 [0x0]: line: 213 new_class @139 // std#list<std#string>   
1 [0x1]:           dup    
2 [0x2]:           movg @18 // @std.io#file   
3 [0x3]:           movn #0   
5 [0x5]:           pushobj   
6 [0x6]:           pushl 0   
7 [0x7]:           call @1726 // <std.io#file_system.list>   
8 [0x8]:           call @3247 // <std#list<std#string>.list>   
9 [0x9]:           popobj2    
10 [0xa]:           returnobj   
11 [0xb]:           ret   


function: std.io#file.mkdir[1694] params(0) in file: lib\support\0.2.805/io//file.sharp:220:8: note:  
		    def mkdir() : var {
		       ^

0 [0x0]: line: 221 movg @18 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           call @1727 // <std.io#file_system.create_directory>   
6 [0x6]:           loadval ebx   
7 [0x7]:           return_val ebx   
8 [0x8]:           ret   


function: std.io#file.rename[1695] params(1) in file: lib\support\0.2.805/io//file.sharp:239:8: note:  
		    def rename(dest: file) : var {
		       ^

0 [0x0]: line: 240 movl 1   
1 [0x1]:           checknull   
2 [0x2]:           movr cmt, ebx   
3 [0x3]:           jne 8   
4 [0x4]: line: 241 new_class @9 // std#nullptr_exception   
5 [0x5]:           dup    
6 [0x6]:           call @1646 // <std#nullptr_exception.nullptr_exception>   
7 [0x7]:           throw    
8 [0x8]:           nop   
9 [0x9]: line: 244 movg @18 // @std.io#file   
10 [0xa]:           movn #0   
12 [0xc]:           pushobj   
13 [0xd]:           pushl 0   
14 [0xe]:           pushl 1   
15 [0xf]:           call @1728 // <std.io#file_system.rename>   
16 [0x10]:           ipopl 2   
17 [0x11]: line: 245 ipushl #2   
18 [0x12]:           movi #0, ebx   
20 [0x14]:           loadval ecx   
21 [0x15]:           test ecx, ebx   
22 [0x16]:           jne 31   
23 [0x17]: line: 247 movl 1   
24 [0x18]:           movn #0   
26 [0x1a]:           pushobj   
27 [0x1b]:           movl 0   
28 [0x1c]:           movn #0   
30 [0x1e]:           popobj   
31 [0x1f]:           nop   
32 [0x20]: line: 251 loadl ebx, fp+2   
33 [0x21]:           return_val ebx   
34 [0x22]:           ret   


function: std.io#file.set_last_modified[1696] params(1) in file: lib\support\0.2.805/io//file.sharp:266:8: note:  
		    def set_last_modified(time: var) : var {
		       ^

0 [0x0]: line: 267 loadl ebx, fp+1   
1 [0x1]:           mov32 ebx, ebx   
2 [0x2]:           rstore ebx   
3 [0x3]:           movi #0, ebx   
5 [0x5]:           loadval ecx   
6 [0x6]:           lt ecx, ebx   
7 [0x7]:           movr ebx, cmt   
8 [0x8]:           movr cmt, ebx   
9 [0x9]:           jne 15   
10 [0xa]:           new_class @4 // std#illegal_argument_exception   
11 [0xb]:           dup    
12 [0xc]:           newstr @25 // Negative time   
13 [0xd]:           call @1629 // <std#illegal_argument_exception.illegal_argument_exception>   
14 [0xe]:           throw    
15 [0xf]:           nop   
16 [0x10]: line: 268 movg @18 // @std.io#file   
17 [0x11]:           movn #0   
19 [0x13]:           pushobj   
20 [0x14]:           pushl 0   
21 [0x15]:           ipushl #1   
22 [0x16]:           call @1731 // <std.io#file_system.set_last_modified_time>   
23 [0x17]:           loadval ebx   
24 [0x18]:           return_val ebx   
25 [0x19]:           ret   


function: std.io#file.set_read_only[1697] params(0) in file: lib\support\0.2.805/io//file.sharp:279:8: note:  
		    def set_read_only() : var {
		       ^

0 [0x0]: line: 280 movg @18 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           call @1732 // <std.io#file_system.set_read_only>   
6 [0x6]:           loadval ebx   
7 [0x7]:           return_val ebx   
8 [0x8]:           ret   


function: std.io#file.set_writable[1698] params(2) in file: lib\support\0.2.805/io//file.sharp:288:8: note:  
		    def set_writable(writable: var, owner_only: var) : var {
		       ^

0 [0x0]: line: 289 movg @18 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           istore 2   
7 [0x7]:           ipushl #1   
8 [0x8]:           ipushl #2   
9 [0x9]:           call @1720 // <std.io#file_system.set_permission>   
10 [0xa]:           loadval ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


function: std.io#file.set_writable[1699] params(1) in file: lib\support\0.2.805/io//file.sharp:297:8: note:  
		    def set_writable(writable: var) : var {
		       ^

0 [0x0]: line: 298 pushl 0   
1 [0x1]:           ipushl #1   
2 [0x2]:           istore 1   
4 [0x4]:           call @1698 // <std.io#file.set_writable>   
5 [0x5]:           loadval ebx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.io#file.set_readable[1700] params(2) in file: lib\support\0.2.805/io//file.sharp:306:8: note:  
		    def set_readable(readable: var, owner_only: var) : var {
		       ^

0 [0x0]: line: 307 movg @18 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           istore 4   
7 [0x7]:           ipushl #1   
8 [0x8]:           ipushl #2   
9 [0x9]:           call @1720 // <std.io#file_system.set_permission>   
10 [0xa]:           loadval ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


function: std.io#file.set_readable[1701] params(1) in file: lib\support\0.2.805/io//file.sharp:315:8: note:  
		    def set_readable(readable: var) : var {
		       ^

0 [0x0]: line: 316 pushl 0   
1 [0x1]:           ipushl #1   
2 [0x2]:           istore 1   
4 [0x4]:           call @1700 // <std.io#file.set_readable>   
5 [0x5]:           loadval ebx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.io#file.set_executable[1702] params(2) in file: lib\support\0.2.805/io//file.sharp:324:8: note:  
		    def set_executable(executable: var, owner_only: var) : var {
		       ^

0 [0x0]: line: 325 movg @18 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           ldc ebx // 1   
6 [0x6]:           rstore ebx   
7 [0x7]:           ipushl #1   
8 [0x8]:           ipushl #2   
9 [0x9]:           call @1720 // <std.io#file_system.set_permission>   
10 [0xa]:           loadval ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


function: std.io#file.set_executable[1703] params(1) in file: lib\support\0.2.805/io//file.sharp:333:8: note:  
		    def set_executable(executable: var) : var {
		       ^

0 [0x0]: line: 334 pushl 0   
1 [0x1]:           ipushl #1   
2 [0x2]:           istore 1   
4 [0x4]:           call @1702 // <std.io#file.set_executable>   
5 [0x5]:           loadval ebx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.io#file.is_executable[1704] params(0) in file: lib\support\0.2.805/io//file.sharp:342:8: note:  
		    def is_executable() : var {
		       ^

0 [0x0]: line: 343 movg @18 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           ldc ebx // 1   
6 [0x6]:           rstore ebx   
7 [0x7]:           invoke_delegate 1719 { static=0, args=2 }   
9 [0x9]:           loadval ebx   
10 [0xa]:           rstore ebx   
11 [0xb]:           movi #0, ebx   
13 [0xd]:           loadval ecx   
14 [0xe]:           test ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


function: std.io#file.get_total_space[1705] params(0) in file: lib\support\0.2.805/io//file.sharp:354:8: note:  
		    def get_total_space() : var {
		       ^

0 [0x0]: line: 355 ldc ebx // 0   
1 [0x1]:           rstore ebx   
2 [0x2]:           call @1733 // <std.io#file_system.get_space_available>   
3 [0x3]:           loadval ebx   
4 [0x4]:           return_val ebx   
5 [0x5]:           ret   


function: std.io#file.get_free_space[1706] params(0) in file: lib\support\0.2.805/io//file.sharp:363:8: note:  
		    def get_free_space() : var {
		       ^

0 [0x0]: line: 364 ldc ebx // 1   
1 [0x1]:           rstore ebx   
2 [0x2]:           call @1733 // <std.io#file_system.get_space_available>   
3 [0x3]:           loadval ebx   
4 [0x4]:           return_val ebx   
5 [0x5]:           ret   


function: std.io#file.get_usable_space[1707] params(0) in file: lib\support\0.2.805/io//file.sharp:386:8: note:  
		    def get_usable_space() : var {
		       ^

0 [0x0]: line: 387 istore 2   
2 [0x2]:           call @1733 // <std.io#file_system.get_space_available>   
3 [0x3]:           loadval ebx   
4 [0x4]:           return_val ebx   
5 [0x5]:           ret   


function: std.io#file.generate_temp_file[1708] params(3) in file: lib\support\0.2.805/io//file.sharp:393:22: note:  
		    private static def generate_temp_file(prefix: string, suffix: string, dir: file) : file
		                     ^

0 [0x0]: line: 405 pushnull    
1 [0x1]:           popobj2    
2 [0x2]:           returnobj   
3 [0x3]:           ret   


function: std.io#file.create_temp_file[1709] params(3) in file: lib\support\0.2.805/io//file.sharp:414:15: note:  
		    static def create_temp_file(prefix: string, suffix: string,
		              ^

0 [0x0]: line: 437 pushnull    
1 [0x1]:           popobj2    
2 [0x2]:           returnobj   
3 [0x3]:           ret   


function: std.io#file.create_temp_file[1710] params(2) in file: lib\support\0.2.805/io//file.sharp:448:15: note:  
		    static def create_temp_file(prefix: string, suffix: string) : file
		              ^

0 [0x0]: line: 451 pushl 0   
1 [0x1]:           pushl 1   
2 [0x2]:           pushnull    
3 [0x3]:           call @1709 // <std.io#file.create_temp_file>   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   


function: std.io#file.read_all_text[1711] params(0) in file: lib\support\0.2.805/io//file.sharp:454:8: note:  
		    def read_all_text() := fs.read(self);
		       ^

0 [0x0]: line: 454 pushl 0   
1 [0x1]:           call @1729 // <std.io#file_system.read>   
2 [0x2]:           popobj2    
3 [0x3]:           returnobj   
4 [0x4]:           ret   


function: std.io#file.write[1712] params(1) in file: lib\support\0.2.805/io//file.sharp:456:8: note:  
		    def write(data: string) := fs.write(self, data);
		       ^

0 [0x0]: line: 456 pushl 0   
1 [0x1]:           pushl 1   
2 [0x2]:           call @1730 // <std.io#file_system.write>   
3 [0x3]:           loadval ebx   
4 [0x4]:           return_val ebx   
5 [0x5]:           ret   


function: std.io#file.get_file_system[1713] params(0) in file: lib\support\0.2.805/io//file.sharp:458:23: note:  
		    private static def get_file_system() : file_system {
		                      ^

0 [0x0]: line: 459 call @1940 // <platform#build.is_windows>   
1 [0x1]:           loadval ebx   
2 [0x2]:           movr cmt, ebx   
3 [0x3]:           jne 11   
4 [0x4]: line: 460 new_class @34 // std.io#win_fs   
5 [0x5]:           dup    
6 [0x6]:           call @1904 // <std.io#win_fs.win_fs>   
7 [0x7]:           popobj2    
8 [0x8]:           returnobj   
9 [0x9]:           ret   
10 [0xa]:           jmp @17   
11 [0xb]: line: 462 new_class @33 // std.io#unix_fs   
12 [0xc]:           dup    
13 [0xd]:           call @1899 // <std.io#unix_fs.unix_fs>   
14 [0xe]:           popobj2    
15 [0xf]:           returnobj   
16 [0x10]:           ret   
17 [0x11]:           nop   


constructor: std.io#file.file[1714] params(0) in file: lib\support\0.2.805/io//file.sharp:17:13: note:  
		public class file {
		            ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


std.io#file_system.path_separator[1715] params(0) in file: lib\support\0.2.805/io//file_system.sharp:18:8: note:  
		    def path_separator() : var;
		       ^



std.io#file_system.normalize[1716] params(1) in file: lib\support\0.2.805/io//file_system.sharp:24:8: note:  
		    def normalize(path: string) : string;
		       ^



function: std.io#file_system.resolve[1717] params(1) in file: lib\support\0.2.805/io//file_system.sharp:30:9: note:  
		     def resolve(f: file) : string {
		        ^

0 [0x0]: line: 32 movl 1   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          call @2961 // <std#string.get_data>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+2   
7 [0x7]: line: 38 pushl 2   : protected asm start
8 [0x8]:          int 0x20   
9 [0x9]:          popl 2   : protected asm end
10 [0xa]: line: 44 movl 2   
11 [0xb]:          checknull   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 27   
14 [0xe]: line: 45 new_class @7 // std#io_exception   
15 [0xf]:          dup    
16 [0x10]:          new_class @64 // std#string   
17 [0x11]:          dup    
18 [0x12]:          newstr @26 // file could not be resolved:    
19 [0x13]:          call @2935 // <std#string.string>   
20 [0x14]:          movl 1   
21 [0x15]:          movn #0   
23 [0x17]:          pushobj   
24 [0x18]:          call @2950 // <std#string.operator+>   
25 [0x19]:          call @1639 // <std#io_exception.io_exception>   
26 [0x1a]:          throw    
27 [0x1b]:          nop   
28 [0x1c]: line: 48 new_class @64 // std#string   
29 [0x1d]:          dup    
30 [0x1e]:          newstr @22 //    
31 [0x1f]:          call @2935 // <std#string.string>   
32 [0x20]:          pushl 2   
33 [0x21]:          call @2947 // <std#string.operator+>   
34 [0x22]:          popobj2    
35 [0x23]:          returnobj   
36 [0x24]:          ret   


std.io#file_system.get_attributes[1718] params(1) in file: lib\support\0.2.805/io//file_system.sharp:67:9: note:  
		     def get_attributes(f: file) : var;
		        ^



std.io#file_system.check_access[1719] params(2) in file: lib\support\0.2.805/io//file_system.sharp:81:9: note:  
		     def check_access(f: file, access: var) : var;
		        ^



function: std.io#file_system.set_permission[1720] params(4) in file: lib\support\0.2.805/io//file_system.sharp:88:9: note:  
		     def set_permission(f: file, access: var, enable: var, owneronly: var) : var {
		        ^

0 [0x0]: line: 90 pushl 1   
1 [0x1]:          call @1680 // <std.io#file.get_absolute_path>   
2 [0x2]:          call @2961 // <std#string.get_data>   
3 [0x3]:          popobj2    
4 [0x4]:          smovr_3 fp+5   
5 [0x5]: line: 91 istorel 0, fp+6   
7 [0x7]: line: 93 call @1940 // <platform#build.is_windows>   
8 [0x8]:          loadval ebx   
9 [0x9]:          skne ebx // pc = 13   
10 [0xa]:          ipushl #2   
11 [0xb]:          ldc ebx // 1   
12 [0xc]:          loadval ecx   
13 [0xd]:          test ecx, ebx   
14 [0xe]:          jne 18   
15 [0xf]: line: 94 istorel -1, fp+0   
17 [0x11]:          ret   
18 [0x12]:          nop   
19 [0x13]: line: 100 pushl 5   : protected asm start
20 [0x14]:           loadl ebx, fp+2   
21 [0x15]:           loadl egx, fp+3   
22 [0x16]:           loadl ecx, fp+4   
23 [0x17]:           int 0x2e   
24 [0x18]:           smovr_2 ebx, fp+6   
25 [0x19]: line: 109 loadl ebx, fp+6   : protected asm end
26 [0x1a]:           return_val ebx   
27 [0x1b]:           ret   


function: std.io#file_system.last_modified_time[1721] params(2) in file: lib\support\0.2.805/io//file_system.sharp:121:9: note:  
		     def last_modified_time(f: file, stat_id: var) : var {
		        ^

0 [0x0]: line: 123 pushl 1   
1 [0x1]:           call @1680 // <std.io#file.get_absolute_path>   
2 [0x2]:           call @2961 // <std#string.get_data>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+3   
5 [0x5]: line: 124 istorel 0, fp+4   
7 [0x7]: line: 130 pushl 3   : protected asm start
8 [0x8]:           loadl ebx, fp+2   
9 [0x9]:           int 0x26   
10 [0xa]:           smovr_2 ebx, fp+4   
11 [0xb]: line: 137 loadl ebx, fp+4   : protected asm end
12 [0xc]:           return_val ebx   
13 [0xd]:           ret   


function: std.io#file_system.get_length[1722] params(1) in file: lib\support\0.2.805/io//file_system.sharp:145:9: note:  
		     def get_length(f: file) : var {
		        ^

0 [0x0]: line: 147 pushl 1   
1 [0x1]:           call @1680 // <std.io#file.get_absolute_path>   
2 [0x2]:           call @2961 // <std#string.get_data>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+2   
5 [0x5]: line: 148 istorel 0, fp+3   
7 [0x7]: line: 154 pushl 2   : protected asm start
8 [0x8]:           int 0x27   
9 [0x9]:           smovr_2 ebx, fp+3   
10 [0xa]: line: 160 loadl ebx, fp+3   : protected asm end
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


function: std.io#file_system.create_file[1723] params(1) in file: lib\support\0.2.805/io//file_system.sharp:170:8: note:  
		    def create_file(pathname: string) {
		       ^

0 [0x0]: line: 172 pushl 1   
1 [0x1]:           call @2961 // <std#string.get_data>   
2 [0x2]:           popobj2    
3 [0x3]:           smovr_3 fp+2   
4 [0x4]: line: 178 pushl 2   : protected asm start
5 [0x5]:           int 0x28   
6 [0x6]:           ret   : protected asm end


function: std.io#file_system.delete_directory[1724] params(1) in file: lib\support\0.2.805/io//file_system.sharp:188:16: note:  
		    private def delete_directory(f: file) : var {
		               ^

0 [0x0]: line: 190 pushl 1   
1 [0x1]:           call @1680 // <std.io#file.get_absolute_path>   
2 [0x2]:           call @2961 // <std#string.get_data>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+2   
5 [0x5]: line: 191 istorel 0, fp+3   
7 [0x7]: line: 197 pushl 2   : protected asm start
8 [0x8]:           int 0x2c   
9 [0x9]:           smovr_2 ebx, fp+3   
10 [0xa]: line: 203 loadl ebx, fp+3   : protected asm end
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


function: std.io#file_system.delete[1725] params(1) in file: lib\support\0.2.805/io//file_system.sharp:210:8: note:  
		    def delete(f: file) : var {
		       ^

0 [0x0]: line: 212 pushl 1   
1 [0x1]:           call @1680 // <std.io#file.get_absolute_path>   
2 [0x2]:           call @2961 // <std#string.get_data>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+2   
5 [0x5]: line: 213 istorel 0, fp+3   
7 [0x7]: line: 215 pushl 1   
8 [0x8]:           call @1684 // <std.io#file.is_directory>   
9 [0x9]:           loadval ebx   
10 [0xa]:           movr cmt, ebx   
11 [0xb]:           jne 18   
12 [0xc]: line: 216 pushl 0   
13 [0xd]:           pushl 1   
14 [0xe]:           call @1724 // <std.io#file_system.delete_directory>   
15 [0xf]:           loadval ebx   
16 [0x10]:           return_val ebx   
17 [0x11]:           ret   
18 [0x12]:           nop   
19 [0x13]: line: 222 pushl 2   : protected asm start
20 [0x14]:           int 0x29   
21 [0x15]:           smovr_2 ebx, fp+3   
22 [0x16]: line: 228 loadl ebx, fp+3   : protected asm end
23 [0x17]:           return_val ebx   
24 [0x18]:           ret   


function: std.io#file_system.list[1726] params(1) in file: lib\support\0.2.805/io//file_system.sharp:236:8: note:  
		    def list(f: file) : string[] {
		       ^

0 [0x0]: line: 238 pushl 1   
1 [0x1]:           call @1680 // <std.io#file.get_absolute_path>   
2 [0x2]:           call @2961 // <std#string.get_data>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+2   
5 [0x5]: line: 239 movl 3   
6 [0x6]:           del   
7 [0x7]: line: 241 pushl 1   
8 [0x8]:           call @1684 // <std.io#file.is_directory>   
9 [0x9]:           loadval ebx   
10 [0xa]:           not ebx, ebx   
11 [0xb]:           movr cmt, ebx   
12 [0xc]:           jne 17   
13 [0xd]: line: 242 pushnull    
14 [0xe]:           popobj2    
15 [0xf]:           returnobj   
16 [0x10]:           ret   
17 [0x11]:           nop   
18 [0x12]: line: 248 pushl 2   : protected asm start
19 [0x13]:           int 0x2a   
20 [0x14]:           popl 3   
21 [0x15]: line: 254 movl 3   : protected asm end
22 [0x16]:           returnobj   
23 [0x17]:           ret   


function: std.io#file_system.create_directory[1727] params(1) in file: lib\support\0.2.805/io//file_system.sharp:261:8: note:  
		    def create_directory(f: file) : var {
		       ^

0 [0x0]: line: 263 pushl 1   
1 [0x1]:           call @1679 // <std.io#file.get_path>   
2 [0x2]:           call @2961 // <std#string.get_data>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+2   
5 [0x5]: line: 264 istorel 0, fp+3   
7 [0x7]: line: 270 pushl 2   : protected asm start
8 [0x8]:           int 0x2b   
9 [0x9]:           smovr_2 ebx, fp+3   
10 [0xa]: line: 276 loadl ebx, fp+3   : protected asm end
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


function: std.io#file_system.rename[1728] params(2) in file: lib\support\0.2.805/io//file_system.sharp:284:8: note:  
		    def rename(f1: file, f2: file) : var {
		       ^

0 [0x0]: line: 286 pushl 1   
1 [0x1]:           call @1680 // <std.io#file.get_absolute_path>   
2 [0x2]:           call @2961 // <std#string.get_data>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+3   
5 [0x5]: line: 287 pushl 2   
6 [0x6]:           call @1679 // <std.io#file.get_path>   
7 [0x7]:           call @2961 // <std#string.get_data>   
8 [0x8]:           popobj2    
9 [0x9]:           smovr_3 fp+4   
10 [0xa]: line: 288 istorel 0, fp+5   
12 [0xc]: line: 294 pushl 4   : protected asm start
13 [0xd]:           pushl 3   
14 [0xe]:           int 0x30   
15 [0xf]:           smovr_2 ebx, fp+5   
16 [0x10]: line: 301 loadl ebx, fp+5   : protected asm end
17 [0x11]:           return_val ebx   
18 [0x12]:           ret   


function: std.io#file_system.read[1729] params(1) in file: lib\support\0.2.805/io//file_system.sharp:305:15: note:  
		    static def read(f: file) : string {
		              ^

0 [0x0]: line: 306 pushl 0   
1 [0x1]:           call @1680 // <std.io#file.get_absolute_path>   
2 [0x2]:           call @2961 // <std#string.get_data>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+1   
5 [0x5]: line: 307 movl 2   
6 [0x6]:           del   
7 [0x7]: line: 308 istorel 0, fp+3   
9 [0x9]: line: 314 pushl 1   : protected asm start
10 [0xa]:           int 0x2f   
11 [0xb]:           popl 2   
12 [0xc]: line: 320 movl 2   : protected asm end
13 [0xd]:           returnobj   
14 [0xe]:           ret   


function: std.io#file_system.write[1730] params(2) in file: lib\support\0.2.805/io//file_system.sharp:324:15: note:  
		    static def write(f: file, data: string) : var {
		              ^

0 [0x0]: line: 325 pushl 0   
1 [0x1]:           call @1680 // <std.io#file.get_absolute_path>   
2 [0x2]:           call @2961 // <std#string.get_data>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+2   
5 [0x5]: line: 326 pushl 1   
6 [0x6]:           call @2961 // <std#string.get_data>   
7 [0x7]:           popobj2    
8 [0x8]:           smovr_3 fp+3   
9 [0x9]: line: 327 istorel 0, fp+4   
11 [0xb]: line: 333 pushl 3   : protected asm start
12 [0xc]:           pushl 2   
13 [0xd]:           int 0x31   
14 [0xe]:           smovr_2 ebx, fp+4   
15 [0xf]: line: 340 loadl ebx, fp+4   : protected asm end
16 [0x10]:           return_val ebx   
17 [0x11]:           ret   


function: std.io#file_system.set_last_modified_time[1731] params(2) in file: lib\support\0.2.805/io//file_system.sharp:348:15: note:  
		    public def set_last_modified_time(f: file, time: var) : var {
		              ^

0 [0x0]: line: 350 pushl 1   
1 [0x1]:           call @1680 // <std.io#file.get_absolute_path>   
2 [0x2]:           call @2961 // <std#string.get_data>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+3   
5 [0x5]: line: 351 istorel 0, fp+4   
7 [0x7]: line: 357 pushl 3   : protected asm start
8 [0x8]:           loadl ebx, fp+2   
9 [0x9]:           int 0x2d   
10 [0xa]:           smovr_2 ebx, fp+4   
11 [0xb]: line: 364 loadl ebx, fp+4   : protected asm end
12 [0xc]:           return_val ebx   
13 [0xd]:           ret   


function: std.io#file_system.set_read_only[1732] params(1) in file: lib\support\0.2.805/io//file_system.sharp:372:15: note:  
		    public def set_read_only(f: file) : var {
		              ^

0 [0x0]: line: 373 pushl 0   
1 [0x1]:           pushl 1   
2 [0x2]:           istore 2   
4 [0x4]:           movi #0, ebx   
6 [0x6]:           rstore ebx   
7 [0x7]:           istore 1   
9 [0x9]:           call @1720 // <std.io#file_system.set_permission>   
10 [0xa]:           pop   
11 [0xb]: line: 374 pushl 0   
12 [0xc]:           pushl 1   
13 [0xd]:           istore 4   
15 [0xf]:           movi #1, ebx   
17 [0x11]:           rstore ebx   
18 [0x12]:           istore 1   
20 [0x14]:           call @1720 // <std.io#file_system.set_permission>   
21 [0x15]:           loadval ebx   
22 [0x16]:           return_val ebx   
23 [0x17]:           ret   


function: std.io#file_system.get_space_available[1733] params(1) in file: lib\support\0.2.805/io//file_system.sharp:382:15: note:  
		    static def get_space_available(request: var) : var {
		              ^

0 [0x0]: line: 384 istorel 0, fp+1   
2 [0x2]: line: 390 loadl ebx, fp+0   : protected asm start
3 [0x3]:           int 0x32   
4 [0x4]:           smovr_2 ebx, fp+1   
5 [0x5]: line: 396 loadl ebx, fp+1   : protected asm end
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


constructor: std.io#file_system.file_system[1734] params(0) in file: lib\support\0.2.805/io//file_system.sharp:10:16: note:  
		protected class file_system {
		               ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


function: std.io#__srt_global.realloc[1735] params(2) in file: lib\support\0.2.805/io//memory.sharp:4:4: note:  
		def realloc(data: object[], size: var) {
		   ^

0 [0x0]: line: 5 pushl 0   : protected asm start
1 [0x1]:         ipushl #1   
2 [0x2]:         int 0x23   
3 [0x3]:         ret   : protected asm end


function: std.io#__srt_global.realloc[1736] params(2) in file: lib\support\0.2.805/io//memory.sharp:12:4: note:  
		def realloc(data: var[], size: var) {
		   ^

0 [0x0]: line: 13 pushl 0   : protected asm start
1 [0x1]:          ipushl #1   
2 [0x2]:          int 0x23   
3 [0x3]:          ret   : protected asm end


function: std.io#__srt_global.realloc[1737] params(2) in file: lib\support\0.2.805/io//memory.sharp:20:4: note:  
		def realloc(data: _int8[], size: var) {
		   ^

0 [0x0]: line: 21 pushl 0   : protected asm start
1 [0x1]:          ipushl #1   
2 [0x2]:          int 0x23   
3 [0x3]:          ret   : protected asm end


function: std.io#__srt_global.realloc[1738] params(2) in file: lib\support\0.2.805/io//memory.sharp:28:4: note:  
		def realloc(data: _int16[], size: var) {
		   ^

0 [0x0]: line: 29 pushl 0   : protected asm start
1 [0x1]:          ipushl #1   
2 [0x2]:          int 0x23   
3 [0x3]:          ret   : protected asm end


function: std.io#__srt_global.realloc[1739] params(2) in file: lib\support\0.2.805/io//memory.sharp:36:4: note:  
		def realloc(data: _int32[], size: var) {
		   ^

0 [0x0]: line: 37 pushl 0   : protected asm start
1 [0x1]:          ipushl #1   
2 [0x2]:          int 0x23   
3 [0x3]:          ret   : protected asm end


function: std.io#__srt_global.realloc[1740] params(2) in file: lib\support\0.2.805/io//memory.sharp:44:4: note:  
		def realloc(data: _int64[], size: var) {
		   ^

0 [0x0]: line: 45 pushl 0   : protected asm start
1 [0x1]:          ipushl #1   
2 [0x2]:          int 0x23   
3 [0x3]:          ret   : protected asm end


function: std.io#__srt_global.realloc[1741] params(2) in file: lib\support\0.2.805/io//memory.sharp:52:4: note:  
		def realloc(data: _uint8[], size: var) {
		   ^

0 [0x0]: line: 53 pushl 0   : protected asm start
1 [0x1]:          ipushl #1   
2 [0x2]:          int 0x23   
3 [0x3]:          ret   : protected asm end


function: std.io#__srt_global.realloc[1742] params(2) in file: lib\support\0.2.805/io//memory.sharp:60:4: note:  
		def realloc(data: _uint16[], size: var) {
		   ^

0 [0x0]: line: 61 pushl 0   : protected asm start
1 [0x1]:          ipushl #1   
2 [0x2]:          int 0x23   
3 [0x3]:          ret   : protected asm end


function: std.io#__srt_global.realloc[1743] params(2) in file: lib\support\0.2.805/io//memory.sharp:68:4: note:  
		def realloc(data: _uint32[], size: var) {
		   ^

0 [0x0]: line: 69 pushl 0   : protected asm start
1 [0x1]:          ipushl #1   
2 [0x2]:          int 0x23   
3 [0x3]:          ret   : protected asm end


function: std.io#__srt_global.realloc[1744] params(2) in file: lib\support\0.2.805/io//memory.sharp:76:4: note:  
		def realloc(data: _uint64[], size: var) {
		   ^

0 [0x0]: line: 77 pushl 0   : protected asm start
1 [0x1]:          ipushl #1   
2 [0x2]:          int 0x23   
3 [0x3]:          ret   : protected asm end


function: std.io#__srt_global.memcopy[1745] params(5) in file: lib\support\0.2.805/io//memory.sharp:84:4: note:  
		def memcopy(src: object[], dest: object[],  destStart: var, srcStart: var, srcEnd: var) {
		   ^

0 [0x0]: line: 85 pushl 1   : protected asm start
1 [0x1]:          pushl 0   
2 [0x2]:          ipushl #2   
3 [0x3]:          ipushl #3   
4 [0x4]:          ipushl #4   
5 [0x5]:          int 0x21   
6 [0x6]:          ret   : protected asm end


function: std.io#__srt_global.memcopy[1746] params(5) in file: lib\support\0.2.805/io//memory.sharp:95:4: note:  
		def memcopy(src: var[], dest: var[],  destStart: var, srcStart: var, srcEnd: var) {
		   ^

0 [0x0]: line: 96 pushl 1   : protected asm start
1 [0x1]:          pushl 0   
2 [0x2]:          ipushl #2   
3 [0x3]:          ipushl #3   
4 [0x4]:          ipushl #4   
5 [0x5]:          int 0x21   
6 [0x6]:          ret   : protected asm end


function: std.io#__srt_global.memcopy[1747] params(5) in file: lib\support\0.2.805/io//memory.sharp:106:4: note:  
		def memcopy(src: _int8[], dest: _int8[],  destStart: var, srcStart: var, srcEnd: var) {
		   ^

0 [0x0]: line: 107 pushl 1   : protected asm start
1 [0x1]:           pushl 0   
2 [0x2]:           ipushl #2   
3 [0x3]:           ipushl #3   
4 [0x4]:           ipushl #4   
5 [0x5]:           int 0x21   
6 [0x6]:           ret   : protected asm end


function: std.io#__srt_global.memcopy[1748] params(5) in file: lib\support\0.2.805/io//memory.sharp:117:4: note:  
		def memcopy(src: _int16[], dest: _int16[],  destStart: var, srcStart: var, srcEnd: var) {
		   ^

0 [0x0]: line: 118 pushl 1   : protected asm start
1 [0x1]:           pushl 0   
2 [0x2]:           ipushl #2   
3 [0x3]:           ipushl #3   
4 [0x4]:           ipushl #4   
5 [0x5]:           int 0x21   
6 [0x6]:           ret   : protected asm end


function: std.io#__srt_global.memcopy[1749] params(5) in file: lib\support\0.2.805/io//memory.sharp:128:4: note:  
		def memcopy(src: _int32[], dest: _int32[],  destStart: var, srcStart: var, srcEnd: var) {
		   ^

0 [0x0]: line: 129 pushl 1   : protected asm start
1 [0x1]:           pushl 0   
2 [0x2]:           ipushl #2   
3 [0x3]:           ipushl #3   
4 [0x4]:           ipushl #4   
5 [0x5]:           int 0x21   
6 [0x6]:           ret   : protected asm end


function: std.io#__srt_global.memcopy[1750] params(5) in file: lib\support\0.2.805/io//memory.sharp:139:4: note:  
		def memcopy(src: _int64[], dest: _int64[],  destStart: var, srcStart: var, srcEnd: var) {
		   ^

0 [0x0]: line: 140 pushl 1   : protected asm start
1 [0x1]:           pushl 0   
2 [0x2]:           ipushl #2   
3 [0x3]:           ipushl #3   
4 [0x4]:           ipushl #4   
5 [0x5]:           int 0x21   
6 [0x6]:           ret   : protected asm end


function: std.io#__srt_global.memcopy[1751] params(5) in file: lib\support\0.2.805/io//memory.sharp:150:4: note:  
		def memcopy(src: _uint8[], dest: _uint8[],  destStart: var, srcStart: var, srcEnd: var) {
		   ^

0 [0x0]: line: 151 pushl 1   : protected asm start
1 [0x1]:           pushl 0   
2 [0x2]:           ipushl #2   
3 [0x3]:           ipushl #3   
4 [0x4]:           ipushl #4   
5 [0x5]:           int 0x21   
6 [0x6]:           ret   : protected asm end


function: std.io#__srt_global.memcopy[1752] params(5) in file: lib\support\0.2.805/io//memory.sharp:161:4: note:  
		def memcopy(src: _uint16[], dest: _uint16[],  destStart: var, srcStart: var, srcEnd: var) {
		   ^

0 [0x0]: line: 162 pushl 1   : protected asm start
1 [0x1]:           pushl 0   
2 [0x2]:           ipushl #2   
3 [0x3]:           ipushl #3   
4 [0x4]:           ipushl #4   
5 [0x5]:           int 0x21   
6 [0x6]:           ret   : protected asm end


function: std.io#__srt_global.memcopy[1753] params(5) in file: lib\support\0.2.805/io//memory.sharp:172:4: note:  
		def memcopy(src: _uint32[], dest: _uint32[],  destStart: var, srcStart: var, srcEnd: var) {
		   ^

0 [0x0]: line: 173 pushl 1   : protected asm start
1 [0x1]:           pushl 0   
2 [0x2]:           ipushl #2   
3 [0x3]:           ipushl #3   
4 [0x4]:           ipushl #4   
5 [0x5]:           int 0x21   
6 [0x6]:           ret   : protected asm end


function: std.io#__srt_global.memcopy[1754] params(5) in file: lib\support\0.2.805/io//memory.sharp:183:4: note:  
		def memcopy(src: _uint64[], dest: _uint64[],  destStart: var, srcStart: var, srcEnd: var) {
		   ^

0 [0x0]: line: 184 pushl 1   : protected asm start
1 [0x1]:           pushl 0   
2 [0x2]:           ipushl #2   
3 [0x3]:           ipushl #3   
4 [0x4]:           ipushl #4   
5 [0x5]:           int 0x21   
6 [0x6]:           ret   : protected asm end


function: std.io#__srt_global.copy[1755] params(3) in file: lib\support\0.2.805/io//memory.sharp:194:4: note:  
		def copy(src: object[], srcStart: var, srcEnd: var) : object[] {
		   ^

0 [0x0]: line: 195 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x37   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 204 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.copy[1756] params(3) in file: lib\support\0.2.805/io//memory.sharp:207:4: note:  
		def copy(src: var[], srcStart: var, srcEnd: var) : var[] {
		   ^

0 [0x0]: line: 208 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x37   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 217 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.copy[1757] params(3) in file: lib\support\0.2.805/io//memory.sharp:220:4: note:  
		def copy(src: _int8[], srcStart: var, srcEnd: var) : _int8[] {
		   ^

0 [0x0]: line: 221 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x37   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 230 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.copy[1758] params(3) in file: lib\support\0.2.805/io//memory.sharp:233:4: note:  
		def copy(src: _int16[], srcStart: var, srcEnd: var) : _int16[] {
		   ^

0 [0x0]: line: 234 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x37   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 243 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.copy[1759] params(3) in file: lib\support\0.2.805/io//memory.sharp:246:4: note:  
		def copy(src: _int32[], srcStart: var, srcEnd: var) : _int32[] {
		   ^

0 [0x0]: line: 247 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x37   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 256 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.copy[1760] params(3) in file: lib\support\0.2.805/io//memory.sharp:259:4: note:  
		def copy(src: _uint8[], srcStart: var, srcEnd: var) : _uint8[] {
		   ^

0 [0x0]: line: 260 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x37   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 269 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.copy[1761] params(3) in file: lib\support\0.2.805/io//memory.sharp:272:4: note:  
		def copy(src: _uint16[], srcStart: var, srcEnd: var) : _uint16[] {
		   ^

0 [0x0]: line: 273 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x37   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 282 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.copy[1762] params(3) in file: lib\support\0.2.805/io//memory.sharp:285:4: note:  
		def copy(src: _uint32[], srcStart: var, srcEnd: var) : _uint32[] {
		   ^

0 [0x0]: line: 286 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x37   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 295 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.copy[1763] params(3) in file: lib\support\0.2.805/io//memory.sharp:298:4: note:  
		def copy(src: _uint64[], srcStart: var, srcEnd: var) : _uint64[] {
		   ^

0 [0x0]: line: 299 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x37   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 308 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.copy[1764] params(3) in file: lib\support\0.2.805/io//memory.sharp:311:4: note:  
		def copy(src: _int64[], srcStart: var, srcEnd: var) : _int64[] {
		   ^

0 [0x0]: line: 312 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x37   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 321 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.invert[1765] params(3) in file: lib\support\0.2.805/io//memory.sharp:325:4: note:  
		def invert(src: object[], start: var, len: var) : object[] {
		   ^

0 [0x0]: line: 326 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x22   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 335 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.invert[1766] params(3) in file: lib\support\0.2.805/io//memory.sharp:338:4: note:  
		def invert(src: var[], start: var, len: var) : var[] {
		   ^

0 [0x0]: line: 339 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x22   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 348 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.invert[1767] params(3) in file: lib\support\0.2.805/io//memory.sharp:351:4: note:  
		def invert(src: _int8[], start: var, len: var) : _int8[] {
		   ^

0 [0x0]: line: 352 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x22   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 361 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.invert[1768] params(3) in file: lib\support\0.2.805/io//memory.sharp:364:4: note:  
		def invert(src: _int16[], start: var, len: var) : _int16[] {
		   ^

0 [0x0]: line: 365 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x22   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 374 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.invert[1769] params(3) in file: lib\support\0.2.805/io//memory.sharp:377:4: note:  
		def invert(src: _int32[], start: var, len: var) : _int32[] {
		   ^

0 [0x0]: line: 378 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x22   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 387 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.invert[1770] params(3) in file: lib\support\0.2.805/io//memory.sharp:390:4: note:  
		def invert(src: _int64[], start: var, len: var) : _int64[] {
		   ^

0 [0x0]: line: 391 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x22   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 400 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.invert[1771] params(3) in file: lib\support\0.2.805/io//memory.sharp:403:4: note:  
		def invert(src: _uint8[], start: var, len: var) : _uint8[] {
		   ^

0 [0x0]: line: 404 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x22   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 413 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.invert[1772] params(3) in file: lib\support\0.2.805/io//memory.sharp:416:4: note:  
		def invert(src: _uint16[], start: var, len: var) : _uint16[] {
		   ^

0 [0x0]: line: 417 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x22   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 426 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.invert[1773] params(3) in file: lib\support\0.2.805/io//memory.sharp:429:4: note:  
		def invert(src: _uint32[], start: var, len: var) : _uint32[] {
		   ^

0 [0x0]: line: 430 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x22   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 439 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.invert[1774] params(3) in file: lib\support\0.2.805/io//memory.sharp:442:4: note:  
		def invert(src: _uint64[], start: var, len: var) : _uint64[] {
		   ^

0 [0x0]: line: 443 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x22   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 452 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


constructor: std.io.task#cancellation_exception.cancellation_exception[1775] params(1) in file: lib\support\0.2.805/io//task//cancellation_exception.sharp:4:34: note:  
		    public cancellation_exception(message : _int8[]) -> base(message) {}
		                                 ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1647 // <std#runtime_exception.runtime_exception>   
3 [0x3]:         ret   


constructor: std.io.task#cancellation_exception.cancellation_exception[1776] params(1) in file: lib\support\0.2.805/io//task//cancellation_exception.sharp:5:34: note:  
		    public cancellation_exception(message : string) -> base(message) {}
		                                 ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1648 // <std#runtime_exception.runtime_exception>   
3 [0x3]:         ret   


constructor: std.io.task#cancellation_exception.cancellation_exception[1777] params(0) in file: lib\support\0.2.805/io//task//cancellation_exception.sharp:3:6: note:  
		class cancellation_exception base runtime_except {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1649 // <std#runtime_exception.runtime_exception>   
2 [0x2]:         ret   


constructor: std.io.task#job.job[1778] params(0) in file: lib\support\0.2.805/io//task//job.sharp:7:13: note:  
			private job() {}
		            ^

0 [0x0]:         movi #0, ebx   
2 [0x2]:         movl 0   
3 [0x3]:         movn #8   
5 [0x5]:         movi #0, adx   
7 [0x7]:         rmov adx, ebx   
8 [0x8]:         movi #0, ebx   
10 [0xa]:         movl 0   
11 [0xb]:         movn #9   
13 [0xd]:         movi #0, adx   
15 [0xf]:         rmov adx, ebx   
16 [0x10]:         movi #0, ebx   
18 [0x12]:         movl 0   
19 [0x13]:         movn #10   
21 [0x15]:         movi #0, adx   
23 [0x17]:         rmov adx, ebx   
24 [0x18]:         movi #0, ebx   
26 [0x1a]:         movl 0   
27 [0x1b]:         movn #11   
29 [0x1d]:         movi #0, adx   
31 [0x1f]:         rmov adx, ebx   
32 [0x20]:         movi #0, ebx   
34 [0x22]:         movl 0   
35 [0x23]:         movn #12   
37 [0x25]:         movi #0, adx   
39 [0x27]:         rmov adx, ebx   
40 [0x28]:         movi #0, ebx   
42 [0x2a]:         movl 0   
43 [0x2b]:         movn #14   
45 [0x2d]:         movi #0, adx   
47 [0x2f]:         rmov adx, ebx   
48 [0x30]:         movi #0, ebx   
50 [0x32]:         movl 0   
51 [0x33]:         movn #15   
53 [0x35]:         movi #0, adx   
55 [0x37]:         rmov adx, ebx   
56 [0x38]:         movi #0, ebx   
58 [0x3a]:         movl 0   
59 [0x3b]:         movn #16   
61 [0x3d]:         movi #0, adx   
63 [0x3f]:         rmov adx, ebx   
64 [0x40]:         movi #0, ebx   
66 [0x42]:         movl 0   
67 [0x43]:         movn #17   
69 [0x45]:         movi #0, adx   
71 [0x47]:         rmov adx, ebx   
72 [0x48]:         movg @26 // @std.io.task#job_state   
73 [0x49]:         movn #0   
75 [0x4b]:         pushobj   
76 [0x4c]:         movl 0   
77 [0x4d]:         movn #18   
79 [0x4f]:         popobj   
80 [0x50]:         new_class @143 // std#list<std.io#thread>   
81 [0x51]:         dup    
82 [0x52]:         call @3289 // <std#list<std.io#thread>.list>   
83 [0x53]:         movl 0   
84 [0x54]:         movn #20   
86 [0x56]:         popobj   
87 [0x57]:         pushl 0   
88 [0x58]:         ret   


constructor: std.io.task#job.job[1779] params(1) in file: lib\support\0.2.805/io//task//job.sharp:9:5: note:  
			job(name : string) {
		    ^

0 [0x0]:         movi #0, ebx   
2 [0x2]:         movl 0   
3 [0x3]:         movn #8   
5 [0x5]:         movi #0, adx   
7 [0x7]:         rmov adx, ebx   
8 [0x8]:         movi #0, ebx   
10 [0xa]:         movl 0   
11 [0xb]:         movn #9   
13 [0xd]:         movi #0, adx   
15 [0xf]:         rmov adx, ebx   
16 [0x10]:         movi #0, ebx   
18 [0x12]:         movl 0   
19 [0x13]:         movn #10   
21 [0x15]:         movi #0, adx   
23 [0x17]:         rmov adx, ebx   
24 [0x18]:         movi #0, ebx   
26 [0x1a]:         movl 0   
27 [0x1b]:         movn #11   
29 [0x1d]:         movi #0, adx   
31 [0x1f]:         rmov adx, ebx   
32 [0x20]:         movi #0, ebx   
34 [0x22]:         movl 0   
35 [0x23]:         movn #12   
37 [0x25]:         movi #0, adx   
39 [0x27]:         rmov adx, ebx   
40 [0x28]:         movi #0, ebx   
42 [0x2a]:         movl 0   
43 [0x2b]:         movn #14   
45 [0x2d]:         movi #0, adx   
47 [0x2f]:         rmov adx, ebx   
48 [0x30]:         movi #0, ebx   
50 [0x32]:         movl 0   
51 [0x33]:         movn #15   
53 [0x35]:         movi #0, adx   
55 [0x37]:         rmov adx, ebx   
56 [0x38]:         movi #0, ebx   
58 [0x3a]:         movl 0   
59 [0x3b]:         movn #16   
61 [0x3d]:         movi #0, adx   
63 [0x3f]:         rmov adx, ebx   
64 [0x40]:         movi #0, ebx   
66 [0x42]:         movl 0   
67 [0x43]:         movn #17   
69 [0x45]:         movi #0, adx   
71 [0x47]:         rmov adx, ebx   
72 [0x48]:         movg @26 // @std.io.task#job_state   
73 [0x49]:         movn #0   
75 [0x4b]:         pushobj   
76 [0x4c]:         movl 0   
77 [0x4d]:         movn #18   
79 [0x4f]:         popobj   
80 [0x50]:         new_class @143 // std#list<std.io#thread>   
81 [0x51]:         dup    
82 [0x52]:         call @3289 // <std#list<std.io#thread>.list>   
83 [0x53]:         movl 0   
84 [0x54]:         movn #20   
86 [0x56]:         popobj   
87 [0x57]:         pushl 0   
88 [0x58]: line: 10 pushl 1   
89 [0x59]:          movl 0   
90 [0x5a]:          movn #5   
92 [0x5c]:          popobj   
93 [0x5d]: line: 11 movg @20 // @std.io.task#__srt_global   
94 [0x5e]:          movn #5   
96 [0x60]:          _lck    
97 [0x61]: line: 12 movg @22 // @std.io.task#job   
98 [0x62]:          movn #0   
100 [0x64]:          movi #0, adx   
102 [0x66]:          iaload ebx, adx   
103 [0x67]:          movr egx, ebx   
104 [0x68]:          inc ebx   
105 [0x69]:          movi #0, adx   
107 [0x6b]:          rmov adx, ebx   
108 [0x6c]:          rstore egx   
109 [0x6d]:          movl 0   
110 [0x6e]:          movn #15   
112 [0x70]:          loadval ebx   
113 [0x71]:          movi #0, adx   
115 [0x73]:          rmov adx, ebx   
116 [0x74]:          movg @20 // @std.io.task#__srt_global   
117 [0x75]:          movn #5   
119 [0x77]:          _ulck   
120 [0x78]:          ret   


function: std.io.task#job.execute_async[1780] params(0) in file: lib\support\0.2.805/io//task//job.sharp:16:15: note:  
			protected def execute_async() : var {
		              ^

0 [0x0]: line: 17 movl 0   
1 [0x1]:          movn #18   
3 [0x3]:          pushobj   
4 [0x4]:          movg @26 // @std.io.task#job_state   
5 [0x5]:          movn #0   
7 [0x7]:          pushobj   
8 [0x8]:          call @1616 // <std#_enum_.operator==>   
9 [0x9]:          loadval ebx   
10 [0xa]:          movr cmt, ebx   
11 [0xb]:          jne 82   
12 [0xc]: line: 18 pushl 0   
13 [0xd]:          movl 0   
14 [0xe]:          movn #19   
16 [0x10]:          movn #0   
18 [0x12]:          popobj   
19 [0x13]: line: 19 call @3044 // <std#time.mills_time>   
20 [0x14]:          movl 0   
21 [0x15]:          movn #19   
23 [0x17]:          movn #1   
25 [0x19]:          loadval ebx   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          rmov adx, ebx   
29 [0x1d]: line: 21 movl 0   
30 [0x1e]:          movn #4   
32 [0x20]:          pushobj   
33 [0x21]:          call @1874 // <std.io#thread.is_active>   
34 [0x22]:          loadval ebx   
35 [0x23]:          not ebx, ebx   
36 [0x24]:          movr cmt, ebx   
37 [0x25]:          jne 72   
38 [0x26]: line: 22 movl 0   
39 [0x27]:          movn #4   
41 [0x29]:          pushobj   
42 [0x2a]:          movi #1, ebx   
44 [0x2c]:          newobj_arry ebx   
45 [0x2d]:          movl 0   
46 [0x2e]:          movn #19   
48 [0x30]:          pushobj   
49 [0x31]:          movsl #-1   
50 [0x32]:          movn #0   
52 [0x34]:          popobj   
53 [0x35]:          call @1848 // <std.io#thread.start>   
54 [0x36]:          movg @31 // @std.io#thread_result   
55 [0x37]:          movn #0   
57 [0x39]:          pushobj   
58 [0x3a]:          call @1614 // <std#_enum_.operator!=>   
59 [0x3b]:          loadval ebx   
60 [0x3c]:          movr cmt, ebx   
61 [0x3d]:          jne 71   
62 [0x3e]: line: 24 movl 0   
63 [0x3f]:          movn #19   
65 [0x41]:          movn #0   
67 [0x43]:          del   
68 [0x44]: line: 25 istorel 2, fp+0   
70 [0x46]:          ret   
71 [0x47]:          nop   
72 [0x48]:          nop   
73 [0x49]: line: 29 movl 0   
74 [0x4a]:          movn #19   
76 [0x4c]:          pushobj   
77 [0x4d]:          call @1935 // <std#_object_.notify>   
78 [0x4e]: line: 30 istorel 0, fp+0   
80 [0x50]:          ret   
81 [0x51]:          jmp @97   
82 [0x52]:          movl 0   
83 [0x53]:          movn #18   
85 [0x55]:          pushobj   
86 [0x56]:          movg @26 // @std.io.task#job_state   
87 [0x57]:          movn #1   
89 [0x59]:          pushobj   
90 [0x5a]:          call @1616 // <std#_enum_.operator==>   
91 [0x5b]:          loadval ebx   
92 [0x5c]:          movr cmt, ebx   
93 [0x5d]:          jne 97   
94 [0x5e]: line: 32 istorel 1, fp+0   
96 [0x60]:          ret   
97 [0x61]:          nop   
98 [0x62]: line: 35 istorel 2, fp+0   
100 [0x64]:          ret   


function: std.io.task#job.cancel[1781] params(0) in file: lib\support\0.2.805/io//task//job.sharp:38:12: note:  
			public def cancel() {
		           ^

0 [0x0]: line: 39 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 40 movl 0   
3 [0x3]:          movn #18   
5 [0x5]:          pushobj   
6 [0x6]:          movg @26 // @std.io.task#job_state   
7 [0x7]:          movn #1   
9 [0x9]:          pushobj   
10 [0xa]:          call @1616 // <std#_enum_.operator==>   
11 [0xb]:          loadval ebx   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 49   
14 [0xe]: line: 41 movg @26 // @std.io.task#job_state   
15 [0xf]:          movn #3   
17 [0x11]:          pushobj   
18 [0x12]:          movl 0   
19 [0x13]:          movn #18   
21 [0x15]:          popobj   
22 [0x16]: line: 43 call @1855 // <std.io#thread.current>   
23 [0x17]:          movl 0   
24 [0x18]:          movn #4   
26 [0x1a]:          pushobj   
27 [0x1b]:          itest ebx   
28 [0x1c]:          not ebx, ebx   
29 [0x1d]:          movr cmt, ebx   
30 [0x1e]:          jne 44   
31 [0x1f]: line: 44 movl 0   
32 [0x20]:          movn #4   
34 [0x22]:          pushobj   
35 [0x23]:          call @1854 // <std.io#thread.interrupt>   
36 [0x24]:          pop   
37 [0x25]: line: 45 movg @20 // @std.io.task#__srt_global   
38 [0x26]:          movn #5   
40 [0x28]:          pushobj   
41 [0x29]:          pushl 0   
42 [0x2a]:          call @1819 // <std.io.task#job_master.cleanup_job>   
43 [0x2b]:          jmp @48   
44 [0x2c]: line: 48 new_class @21 // std.io.task#cancellation_exception   
45 [0x2d]:          dup    
46 [0x2e]:          call @1777 // <std.io.task#cancellation_exception.cancellation_exception>   
47 [0x2f]:          throw    
48 [0x30]:          nop   
49 [0x31]:          nop   
50 [0x32]:          movl 0   
51 [0x33]:          _ulck   
52 [0x34]:          ret   


function: std.io.task#job.cancel_future[1782] params(0) in file: lib\support\0.2.805/io//task//job.sharp:54:15: note:  
			protected def cancel_future() {
		              ^

0 [0x0]: line: 55 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 56 movl 0   
3 [0x3]:          movn #14   
5 [0x5]:          movi #0, adx   
7 [0x7]:          iaload ebx, adx   
8 [0x8]:          movr cmt, ebx   
9 [0x9]:          jne 32   
10 [0xa]: line: 57 movl 0   
11 [0xb]:          movn #13   
13 [0xd]:          smovr_3 fp+1   
14 [0xe]: line: 58 movl 1   
15 [0xf]:          checknull   
16 [0x10]:          not ebx, ebx   
17 [0x11]:          movr cmt, ebx   
18 [0x12]:          jne 32   
19 [0x13]: line: 59 pushl 1   
20 [0x14]:          call @1781 // <std.io.task#job.cancel>   
21 [0x15]: line: 60 movg @20 // @std.io.task#__srt_global   
22 [0x16]:          movn #5   
24 [0x18]:          pushobj   
25 [0x19]:          pushl 1   
26 [0x1a]:          call @1819 // <std.io.task#job_master.cleanup_job>   
27 [0x1b]: line: 62 movl 1   
28 [0x1c]:          movn #13   
30 [0x1e]:          smovr_3 fp+1   
31 [0x1f]:          jmp @14   
32 [0x20]:          nop   
33 [0x21]:          movl 0   
34 [0x22]:          _ulck   
35 [0x23]:          ret   


function: std.io.task#job.join[1783] params(0) in file: lib\support\0.2.805/io//task//job.sharp:68:12: note:  
			public def join() {
		           ^

0 [0x0]: line: 69 movl 0   
1 [0x1]:          movn #16   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          skpe ebx // pc = 28   
7 [0x7]:          movl 0   
8 [0x8]:          movn #18   
10 [0xa]:          pushobj   
11 [0xb]:          movg @26 // @std.io.task#job_state   
12 [0xc]:          movn #3   
14 [0xe]:          pushobj   
15 [0xf]:          call @1616 // <std#_enum_.operator==>   
16 [0x10]:          loadval ebx   
17 [0x11]:          skpe ebx // pc = 28   
18 [0x12]:          movl 0   
19 [0x13]:          movn #18   
21 [0x15]:          pushobj   
22 [0x16]:          movg @26 // @std.io.task#job_state   
23 [0x17]:          movn #2   
25 [0x19]:          pushobj   
26 [0x1a]:          call @1616 // <std#_enum_.operator==>   
27 [0x1b]:          loadval ebx   
28 [0x1c]:          movr cmt, ebx   
29 [0x1d]:          jne 31   
30 [0x1e]: line: 72 ret   
31 [0x1f]:          nop   
32 [0x20]: line: 74 istorel 0, fp+1   
34 [0x22]: line: 75 movl 0   
35 [0x23]:          _lck    
36 [0x24]: line: 76 pushl 0   
37 [0x25]:          call @1793 // <std.io.task#job.is_finished>   
38 [0x26]:          loadval ebx   
39 [0x27]:          not ebx, ebx   
40 [0x28]:          movr cmt, ebx   
41 [0x29]:          jne 50   
42 [0x2a]: line: 77 istorel 1, fp+1   
44 [0x2c]: line: 78 movl 0   
45 [0x2d]:          movn #20   
47 [0x2f]:          pushobj   
48 [0x30]:          call @1855 // <std.io#thread.current>   
49 [0x31]:          call @3303 // <std#list<std.io#thread>.add>   
50 [0x32]:          nop   
51 [0x33]:          movl 0   
52 [0x34]:          _ulck   
53 [0x35]: line: 82 loadl ebx, fp+1   
54 [0x36]:          movr cmt, ebx   
55 [0x37]:          jne 57   
56 [0x38]: line: 83 call @1857 // <std.io#thread.wait>   
57 [0x39]:          nop   
58 [0x3a]:          ret   


function: std.io.task#job.get_state[1784] params(0) in file: lib\support\0.2.805/io//task//job.sharp:87:12: note:  
			public def get_state() := state;
		           ^

0 [0x0]: line: 87 movl 0   
1 [0x1]:          movn #18   
3 [0x3]:          returnobj   
4 [0x4]:          ret   


function: std.io.task#job.get_name[1785] params(0) in file: lib\support\0.2.805/io//task//job.sharp:88:12: note:  
			public def get_name() := name;
		           ^

0 [0x0]: line: 88 movl 0   
1 [0x1]:          movn #5   
3 [0x3]:          returnobj   
4 [0x4]:          ret   


function: std.io.task#job.get_id[1786] params(0) in file: lib\support\0.2.805/io//task//job.sharp:89:12: note:  
			public def get_id() := id;
		           ^

0 [0x0]: line: 89 movl 0   
1 [0x1]:          movn #15   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          return_val ebx   
7 [0x7]:          ret   


overload function: std.io.task#job.operator=[1787] params(1) in file: lib\support\0.2.805/io//task//job.sharp:91:15: note:  
			protected def operator=(block: ()()) {
		              ^

0 [0x0]: line: 92 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          loadval ebx   
5 [0x5]:          movi #0, adx   
7 [0x7]:          rmov adx, ebx   
8 [0x8]:          ret   


overload function: std.io.task#job.operator=[1788] params(1) in file: lib\support\0.2.805/io//task//job.sharp:95:15: note:  
			protected def operator=(block: (args : object[])()) {
		              ^

0 [0x0]: line: 96 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #1   
4 [0x4]:          loadval ebx   
5 [0x5]:          movi #0, adx   
7 [0x7]:          rmov adx, ebx   
8 [0x8]:          ret   


overload function: std.io.task#job.operator=[1789] params(1) in file: lib\support\0.2.805/io//task//job.sharp:99:15: note:  
			protected def operator=(block: (deferred : object, args : object[])()) {
		              ^

0 [0x0]: line: 100 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #2   
4 [0x4]:           loadval ebx   
5 [0x5]:           movi #0, adx   
7 [0x7]:           rmov adx, ebx   
8 [0x8]:           ret   


overload function: std.io.task#job.operator=[1790] params(1) in file: lib\support\0.2.805/io//task//job.sharp:103:15: note:  
			protected def operator=(block: (deferred : object)()) {
		              ^

0 [0x0]: line: 104 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #3   
4 [0x4]:           loadval ebx   
5 [0x5]:           movi #0, adx   
7 [0x7]:           rmov adx, ebx   
8 [0x8]:           ret   


function: std.io.task#job.job_main[1791] params(1) in file: lib\support\0.2.805/io//task//job.sharp:107:22: note:  
			protected static def job_main(args : object[]) : var {
		                     ^

0 [0x0]: line: 108 pushl 0   
1 [0x1]:           movi #0, ebx   
3 [0x3]:           popobj2    
4 [0x4]:           movr adx, ebx   
5 [0x5]:           chklen adx   
6 [0x6]:           movnd adx   
7 [0x7]:           movi #24, cmt   
9 [0x9]:           cast cmt   
10 [0xa]:           smovr_3 fp+1   
11 [0xb]: line: 110 pushl 1   
12 [0xc]: line: 111 call @1934 // <std#_object_.wait>   
13 [0xd]: line: 113 movl 1   
14 [0xe]:           movn #0   
16 [0x10]:           pushobj   
17 [0x11]:           pushnull    
18 [0x12]:           itest ebx   
19 [0x13]:           not ebx, ebx   
20 [0x14]:           movr cmt, ebx   
21 [0x15]:           jne 79   
22 [0x16]: line: 114 movl 1   : try start: try block start
23 [0x17]: line: 115 movn #0   
25 [0x19]:           pushobj   
26 [0x1a]:           call @1792 // <std.io.task#job.execute>   
27 [0x1b]:           jmp @74   : try block end
28 [0x1c]: line: 117 movg @26 // @std.io.task#job_state   : catch(std.io.task#cancellation_exception)
29 [0x1d]:           movn #3   
31 [0x1f]:           pushobj   
32 [0x20]:           movl 1   
33 [0x21]:           movn #0   
35 [0x23]:           movn #18   
37 [0x25]:           popobj   
38 [0x26]: line: 118 movg @20 // @std.io.task#__srt_global   
39 [0x27]:           movn #5   
41 [0x29]:           pushobj   
42 [0x2a]:           movl 1   
43 [0x2b]:           movn #0   
45 [0x2d]:           pushobj   
46 [0x2e]:           call @1819 // <std.io.task#job_master.cleanup_job>   
47 [0x2f]:           jmp @74   
48 [0x30]: line: 120 movg @26 // @std.io.task#job_state   : catch(std#exception)
49 [0x31]:           movn #3   
51 [0x33]:           pushobj   
52 [0x34]:           movl 1   
53 [0x35]:           movn #0   
55 [0x37]:           movn #18   
57 [0x39]:           popobj   
58 [0x3a]: line: 121 movg @20 // @std.io.task#__srt_global   
59 [0x3b]:           movn #5   
61 [0x3d]:           pushobj   
62 [0x3e]:           movl 1   
63 [0x3f]:           movn #0   
65 [0x41]:           pushobj   
66 [0x42]:           call @1819 // <std.io.task#job_master.cleanup_job>   
67 [0x43]: line: 122 movl 1   
68 [0x44]:           movn #0   
70 [0x46]:           del   
71 [0x47]: line: 123 pushl 2   
72 [0x48]:           throw    
73 [0x49]:           jmp @74   
74 [0x4a]:           nop   : try end
75 [0x4b]: line: 126 movl 1   
76 [0x4c]:           movn #0   
78 [0x4e]:           del   
79 [0x4f]:           nop   
80 [0x50]:           jmp @11   
81 [0x51]: line: 130 istorel 0, fp+0   
83 [0x53]:           ret   


function: std.io.task#job.execute[1792] params(0) in file: lib\support\0.2.805/io//task//job.sharp:133:15: note:  
			protected def execute() {
		              ^

0 [0x0]: line: 134 call @3044 // <std#time.mills_time>   
1 [0x1]:           movl 0   
2 [0x2]:           movn #10   
4 [0x4]:           loadval ebx   
5 [0x5]:           movi #0, adx   
7 [0x7]:           rmov adx, ebx   
8 [0x8]: line: 135 movg @26 // @std.io.task#job_state   
9 [0x9]:           movn #1   
11 [0xb]:           pushobj   
12 [0xc]:           movl 0   
13 [0xd]:           movn #18   
15 [0xf]:           popobj   
16 [0x10]: line: 136 movl 0   
17 [0x11]:           movn #14   
19 [0x13]:           movi #0, adx   
21 [0x15]:           iaload ebx, adx   
22 [0x16]:           movr cmt, ebx   
23 [0x17]:           jne 26   
24 [0x18]: line: 137 pushl 0   
25 [0x19]:           call @1797 // <std.io.task#job.reschedule>   
26 [0x1a]:           nop   
27 [0x1b]: line: 139 movl 0   
28 [0x1c]:           movn #0   
30 [0x1e]:           movi #0, adx   
32 [0x20]:           iaload ebx, adx   
33 [0x21]:           movr cmt, ebx   
34 [0x22]:           jne 45   
35 [0x23]: line: 140 movl 0   
36 [0x24]:           movn #0   
38 [0x26]:           movi #0, adx   
40 [0x28]:           iaload ebx, adx   
41 [0x29]:           rstore ebx   
42 [0x2a]:           loadval ebx   
43 [0x2b]:           calld ebx   
44 [0x2c]:           jmp @114   
45 [0x2d]:           movl 0   
46 [0x2e]:           movn #1   
48 [0x30]:           movi #0, adx   
50 [0x32]:           iaload ebx, adx   
51 [0x33]:           movr cmt, ebx   
52 [0x34]:           jne 67   
53 [0x35]: line: 141 movl 0   
54 [0x36]:           movn #1   
56 [0x38]:           movi #0, adx   
58 [0x3a]:           iaload ebx, adx   
59 [0x3b]:           rstore ebx   
60 [0x3c]:           movl 0   
61 [0x3d]:           movn #6   
63 [0x3f]:           pushobj   
64 [0x40]:           smov ebx, sp+[-1]   
65 [0x41]:           calld ebx   
66 [0x42]:           jmp @114   
67 [0x43]:           movl 0   
68 [0x44]:           movn #2   
70 [0x46]:           movi #0, adx   
72 [0x48]:           iaload ebx, adx   
73 [0x49]:           movr cmt, ebx   
74 [0x4a]:           jne 93   
75 [0x4b]: line: 142 movl 0   
76 [0x4c]:           movn #2   
78 [0x4e]:           movi #0, adx   
80 [0x50]:           iaload ebx, adx   
81 [0x51]:           rstore ebx   
82 [0x52]:           movl 0   
83 [0x53]:           movn #7   
85 [0x55]:           pushobj   
86 [0x56]:           movl 0   
87 [0x57]:           movn #6   
89 [0x59]:           pushobj   
90 [0x5a]:           smov ebx, sp+[-2]   
91 [0x5b]:           calld ebx   
92 [0x5c]:           jmp @114   
93 [0x5d]:           movl 0   
94 [0x5e]:           movn #3   
96 [0x60]:           movi #0, adx   
98 [0x62]:           iaload ebx, adx   
99 [0x63]:           movr cmt, ebx   
100 [0x64]:           jne 114   
101 [0x65]: line: 143 movl 0   
102 [0x66]:           movn #3   
104 [0x68]:           movi #0, adx   
106 [0x6a]:           iaload ebx, adx   
107 [0x6b]:           rstore ebx   
108 [0x6c]:           movl 0   
109 [0x6d]:           movn #7   
111 [0x6f]:           pushobj   
112 [0x70]:           smov ebx, sp+[-1]   
113 [0x71]:           calld ebx   
114 [0x72]:           nop   
115 [0x73]: line: 146 movg @26 // @std.io.task#job_state   
116 [0x74]:           movn #2   
118 [0x76]:           pushobj   
119 [0x77]:           movl 0   
120 [0x78]:           movn #18   
122 [0x7a]:           popobj   
123 [0x7b]: line: 147 movg @20 // @std.io.task#__srt_global   
124 [0x7c]:           movn #5   
126 [0x7e]:           pushobj   
127 [0x7f]:           pushl 0   
128 [0x80]:           call @1819 // <std.io.task#job_master.cleanup_job>   
129 [0x81]:           ret   


function: std.io.task#job.is_finished[1793] params(0) in file: lib\support\0.2.805/io//task//job.sharp:150:8: note:  
		    def is_finished() := state == completed || state == cancelled;
		       ^

0 [0x0]: line: 150 movl 0   
1 [0x1]:           movn #18   
3 [0x3]:           pushobj   
4 [0x4]:           movg @26 // @std.io.task#job_state   
5 [0x5]:           movn #2   
7 [0x7]:           pushobj   
8 [0x8]:           call @1616 // <std#_enum_.operator==>   
9 [0x9]:           loadval ebx   
10 [0xa]:           skpe ebx // pc = 21   
11 [0xb]:           movl 0   
12 [0xc]:           movn #18   
14 [0xe]:           pushobj   
15 [0xf]:           movg @26 // @std.io.task#job_state   
16 [0x10]:           movn #3   
18 [0x12]:           pushobj   
19 [0x13]:           call @1616 // <std#_enum_.operator==>   
20 [0x14]:           loadval ebx   
21 [0x15]:           return_val ebx   
22 [0x16]:           ret   


function: std.io.task#job.is_active[1794] params(0) in file: lib\support\0.2.805/io//task//job.sharp:151:8: note:  
		    def is_active() := state == active;
		       ^

0 [0x0]: line: 151 movl 0   
1 [0x1]:           movn #18   
3 [0x3]:           pushobj   
4 [0x4]:           movg @26 // @std.io.task#job_state   
5 [0x5]:           movn #1   
7 [0x7]:           pushobj   
8 [0x8]:           call @1616 // <std#_enum_.operator==>   
9 [0x9]:           loadval ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


function: std.io.task#job.update_timeout[1795] params(1) in file: lib\support\0.2.805/io//task//job.sharp:153:15: note:  
		    public def update_timeout(tm: var) {
		              ^

0 [0x0]: line: 154 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #9   
4 [0x4]:           loadval ebx   
5 [0x5]:           movi #0, adx   
7 [0x7]:           rmov adx, ebx   
8 [0x8]:           ret   


function: std.io.task#job.update_interval[1796] params(2) in file: lib\support\0.2.805/io//task//job.sharp:157:15: note:  
		    public def update_interval(tm: var, interval: time_unit) {
		              ^

0 [0x0]: line: 158 movl 0   
1 [0x1]:           movn #14   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           not ebx, ebx   
7 [0x7]:           movr cmt, ebx   
8 [0x8]:           jne 14   
9 [0x9]: line: 159 new_class @5 // std#illegal_state_exception   
10 [0xa]:           dup    
11 [0xb]:           newstr @27 // cannot set update restart interval on non-recurring job   
12 [0xc]:           call @1632 // <std#illegal_state_exception.illegal_state_exception>   
13 [0xd]:           throw    
14 [0xe]:           nop   
15 [0xf]: line: 161 movl 0   
16 [0x10]:           movn #18   
18 [0x12]:           pushobj   
19 [0x13]:           movg @26 // @std.io.task#job_state   
20 [0x14]:           movn #1   
22 [0x16]:           pushobj   
23 [0x17]:           call @1616 // <std#_enum_.operator==>   
24 [0x18]:           loadval ebx   
25 [0x19]:           movr cmt, ebx   
26 [0x1a]:           jne 33   
27 [0x1b]: line: 162 pushl 0   
28 [0x1c]:           call @1782 // <std.io.task#job.cancel_future>   
29 [0x1d]: line: 163 movl 0   
30 [0x1e]:           movn #13   
32 [0x20]:           del   
33 [0x21]:           nop   
34 [0x22]: line: 166 pushl 2   
35 [0x23]:           movg @68 // @std#time_unit   
36 [0x24]:           movn #3   
38 [0x26]:           pushobj   
39 [0x27]:           call @1616 // <std#_enum_.operator==>   
40 [0x28]:           loadval ebx   
41 [0x29]:           movr cmt, ebx   
42 [0x2a]:           jne 53   
43 [0x2b]: line: 167 ipushl #1   
44 [0x2c]:           call @3042 // <std#time.nano_to_mills>   
45 [0x2d]:           movl 0   
46 [0x2e]:           movn #11   
48 [0x30]:           loadval ebx   
49 [0x31]:           movi #0, adx   
51 [0x33]:           rmov adx, ebx   
52 [0x34]:           jmp @112   
53 [0x35]:           pushl 2   
54 [0x36]:           movg @68 // @std#time_unit   
55 [0x37]:           movn #2   
57 [0x39]:           pushobj   
58 [0x3a]:           call @1616 // <std#_enum_.operator==>   
59 [0x3b]:           loadval ebx   
60 [0x3c]:           movr cmt, ebx   
61 [0x3d]:           jne 74   
62 [0x3e]: line: 169 ipushl #1   
63 [0x3f]:           movi #1000, ebx   
65 [0x41]:           loadval ecx   
66 [0x42]:           div ecx, ebx -> ebx   
67 [0x43]:           movl 0   
68 [0x44]:           movn #11   
70 [0x46]:           movi #0, adx   
72 [0x48]:           rmov adx, ebx   
73 [0x49]:           jmp @112   
74 [0x4a]:           pushl 2   
75 [0x4b]:           movg @68 // @std#time_unit   
76 [0x4c]:           movn #1   
78 [0x4e]:           pushobj   
79 [0x4f]:           call @1616 // <std#_enum_.operator==>   
80 [0x50]:           loadval ebx   
81 [0x51]:           movr cmt, ebx   
82 [0x52]:           jne 92   
83 [0x53]: line: 171 ipushl #1   
84 [0x54]:           movl 0   
85 [0x55]:           movn #11   
87 [0x57]:           loadval ebx   
88 [0x58]:           movi #0, adx   
90 [0x5a]:           rmov adx, ebx   
91 [0x5b]:           jmp @112   
92 [0x5c]:           pushl 2   
93 [0x5d]:           movg @68 // @std#time_unit   
94 [0x5e]:           movn #0   
96 [0x60]:           pushobj   
97 [0x61]:           call @1616 // <std#_enum_.operator==>   
98 [0x62]:           loadval ebx   
99 [0x63]:           movr cmt, ebx   
100 [0x64]:           jne 112   
101 [0x65]: line: 173 ipushl #1   
102 [0x66]:           movi #1000, ebx   
104 [0x68]:           loadval ecx   
105 [0x69]:           mul ecx, ebx -> ebx   
106 [0x6a]:           movl 0   
107 [0x6b]:           movn #11   
109 [0x6d]:           movi #0, adx   
111 [0x6f]:           rmov adx, ebx   
112 [0x70]:           nop   
113 [0x71]: line: 176 movl 0   
114 [0x72]:           movn #18   
116 [0x74]:           pushobj   
117 [0x75]:           movg @26 // @std.io.task#job_state   
118 [0x76]:           movn #1   
120 [0x78]:           pushobj   
121 [0x79]:           call @1616 // <std#_enum_.operator==>   
122 [0x7a]:           loadval ebx   
123 [0x7b]:           movr cmt, ebx   
124 [0x7c]:           jne 127   
125 [0x7d]: line: 177 pushl 0   
126 [0x7e]:           call @1797 // <std.io.task#job.reschedule>   
127 [0x7f]:           nop   
128 [0x80]:           ret   


function: std.io.task#job.reschedule[1797] params(0) in file: lib\support\0.2.805/io//task//job.sharp:180:18: note:  
		    protected def reschedule() {
		                 ^

0 [0x0]: line: 182 movl 0   
1 [0x1]:           movn #10   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #11   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           rstore ebx   
16 [0x10]:           call @3044 // <std#time.mills_time>   
17 [0x11]:           loadval ebx   
18 [0x12]:           loadval ecx   
19 [0x13]:           sub ecx, ebx -> ebx   
20 [0x14]:           smovr_2 ebx, fp+1   
21 [0x15]: line: 183 call @1837 // <std.io.task#task.builder>   
22 [0x16]:           movl 0   
23 [0x17]:           movn #5   
25 [0x19]:           pushobj   
26 [0x1a]:           call @1803 // <std.io.task#job_builder.with_name>   
27 [0x1b]:           movl 0   
28 [0x1c]:           movn #11   
30 [0x1e]:           movi #0, adx   
32 [0x20]:           iaload ebx, adx   
33 [0x21]:           rstore ebx   
34 [0x22]:           movg @68 // @std#time_unit   
35 [0x23]:           movn #1   
37 [0x25]:           pushobj   
38 [0x26]:           call @1802 // <std.io.task#job_builder.recurring>   
39 [0x27]:           popobj2    
40 [0x28]:           smovr_3 fp+2   
41 [0x29]: line: 187 movl 0   
42 [0x2a]:           movn #6   
44 [0x2c]:           sizeof ebx   
45 [0x2d]:           rstore ebx   
46 [0x2e]:           movi #1, ebx   
48 [0x30]:           loadval ecx   
49 [0x31]:           sub ecx, ebx -> ebx   
50 [0x32]:           newobj_arry ebx   
51 [0x33]:           popobj2    
52 [0x34]:           smovr_3 fp+3   
53 [0x35]: line: 188 istorel 0, fp+4   
55 [0x37]: line: 189 istorel 1, fp+5   
57 [0x39]:           ipushl #5   
58 [0x3a]:           movl 0   
59 [0x3b]:           movn #6   
61 [0x3d]:           sizeof ebx   
62 [0x3e]:           loadval ecx   
63 [0x3f]:           lt ecx, ebx   
64 [0x40]:           movr ebx, cmt   
65 [0x41]:           movr cmt, ebx   
66 [0x42]:           jne 91   
67 [0x43]: line: 190 movl 0   
68 [0x44]:           movn #6   
70 [0x46]:           pushobj   
71 [0x47]:           loadl ebx, fp+5   
72 [0x48]:           popobj2    
73 [0x49]:           movr adx, ebx   
74 [0x4a]:           chklen adx   
75 [0x4b]:           movnd adx   
76 [0x4c]:           pushobj   
77 [0x4d]:           pushl 3   
78 [0x4e]:           loadl ebx, fp+4   
79 [0x4f]:           movr egx, ebx   
80 [0x50]:           inc ebx   
81 [0x51]:           smovr_2 ebx, fp+4   
82 [0x52]:           movr ebx, egx   
83 [0x53]:           popobj2    
84 [0x54]:           movr adx, ebx   
85 [0x55]:           chklen adx   
86 [0x56]:           movnd adx   
87 [0x57]:           popobj   
88 [0x58]:           iaddl 1, fp@5   
90 [0x5a]:           jmp @57   
91 [0x5b]: line: 193 movl 0   
92 [0x5c]:           movn #17   
94 [0x5e]:           movi #0, adx   
96 [0x60]:           iaload ebx, adx   
97 [0x61]:           movr cmt, ebx   
98 [0x62]:           jne 102   
99 [0x63]: line: 194 pushl 2   
100 [0x64]:           call @1806 // <std.io.task#job_builder.long_term>   
101 [0x65]:           pop   
102 [0x66]:           nop   
103 [0x67]: line: 195 pushl 2   
104 [0x68]:           pushl 3   
105 [0x69]:           call @1804 // <std.io.task#job_builder.with_args>   
106 [0x6a]:           pop   
107 [0x6b]: line: 197 movl 0   
108 [0x6c]:           movn #0   
110 [0x6e]:           movi #0, adx   
112 [0x70]:           iaload ebx, adx   
113 [0x71]:           movr cmt, ebx   
114 [0x72]:           jne 132   
115 [0x73]: line: 198 movl 0   
116 [0x74]:           movn #0   
118 [0x76]:           movi #0, adx   
120 [0x78]:           iaload ebx, adx   
121 [0x79]:           rstore ebx   
122 [0x7a]:           movl 2   
123 [0x7b]:           movn #1   
125 [0x7d]:           movn #0   
127 [0x7f]:           loadval ebx   
128 [0x80]:           movi #0, adx   
130 [0x82]:           rmov adx, ebx   
131 [0x83]:           jmp @206   
132 [0x84]:           movl 0   
133 [0x85]:           movn #1   
135 [0x87]:           movi #0, adx   
137 [0x89]:           iaload ebx, adx   
138 [0x8a]:           movr cmt, ebx   
139 [0x8b]:           jne 157   
140 [0x8c]: line: 199 movl 0   
141 [0x8d]:           movn #1   
143 [0x8f]:           movi #0, adx   
145 [0x91]:           iaload ebx, adx   
146 [0x92]:           rstore ebx   
147 [0x93]:           movl 2   
148 [0x94]:           movn #1   
150 [0x96]:           movn #1   
152 [0x98]:           loadval ebx   
153 [0x99]:           movi #0, adx   
155 [0x9b]:           rmov adx, ebx   
156 [0x9c]:           jmp @206   
157 [0x9d]:           movl 0   
158 [0x9e]:           movn #2   
160 [0xa0]:           movi #0, adx   
162 [0xa2]:           iaload ebx, adx   
163 [0xa3]:           movr cmt, ebx   
164 [0xa4]:           jne 182   
165 [0xa5]: line: 200 movl 0   
166 [0xa6]:           movn #2   
168 [0xa8]:           movi #0, adx   
170 [0xaa]:           iaload ebx, adx   
171 [0xab]:           rstore ebx   
172 [0xac]:           movl 2   
173 [0xad]:           movn #1   
175 [0xaf]:           movn #2   
177 [0xb1]:           loadval ebx   
178 [0xb2]:           movi #0, adx   
180 [0xb4]:           rmov adx, ebx   
181 [0xb5]:           jmp @206   
182 [0xb6]:           movl 0   
183 [0xb7]:           movn #3   
185 [0xb9]:           movi #0, adx   
187 [0xbb]:           iaload ebx, adx   
188 [0xbc]:           movr cmt, ebx   
189 [0xbd]:           jne 206   
190 [0xbe]: line: 201 movl 0   
191 [0xbf]:           movn #3   
193 [0xc1]:           movi #0, adx   
195 [0xc3]:           iaload ebx, adx   
196 [0xc4]:           rstore ebx   
197 [0xc5]:           movl 2   
198 [0xc6]:           movn #1   
200 [0xc8]:           movn #3   
202 [0xca]:           loadval ebx   
203 [0xcb]:           movi #0, adx   
205 [0xcd]:           rmov adx, ebx   
206 [0xce]:           nop   
207 [0xcf]: line: 204 ipushl #1   
208 [0xd0]:           movi #0, ebx   
210 [0xd2]:           loadval ecx   
211 [0xd3]:           gt ecx, ebx   
212 [0xd4]:           movr ebx, cmt   
213 [0xd5]:           movr cmt, ebx   
214 [0xd6]:           jne 219   
215 [0xd7]: line: 205 pushl 2   
216 [0xd8]:           ipushl #1   
217 [0xd9]:           call @1801 // <std.io.task#job_builder.schedule>   
218 [0xda]:           pop   
219 [0xdb]:           nop   
220 [0xdc]: line: 206 movl 0   
221 [0xdd]:           movn #8   
223 [0xdf]:           movi #0, adx   
225 [0xe1]:           iaload ebx, adx   
226 [0xe2]:           movr cmt, ebx   
227 [0xe3]:           jne 238   
228 [0xe4]: line: 207 pushl 2   
229 [0xe5]:           movl 0   
230 [0xe6]:           movn #9   
232 [0xe8]:           movi #0, adx   
234 [0xea]:           iaload ebx, adx   
235 [0xeb]:           rstore ebx   
236 [0xec]:           call @1800 // <std.io.task#job_builder.with_timeout>   
237 [0xed]:           pop   
238 [0xee]:           nop   
239 [0xef]: line: 209 movl 2   
240 [0xf0]:           movn #1   
242 [0xf2]:           pushobj   
243 [0xf3]:           movl 0   
244 [0xf4]:           movn #13   
246 [0xf6]:           popobj   
247 [0xf7]: line: 210 movl 2   
248 [0xf8]:           movn #0   
250 [0xfa]:           pushobj   
251 [0xfb]:           movl 2   
252 [0xfc]:           movn #1   
254 [0xfe]:           pushobj   
255 [0xff]:           call @1817 // <std.io.task#job_master.start_job>   
256 [0x100]:           ret   


constructor: std.io.task#job_builder.job_builder[1798] params(0) in file: lib\support\0.2.805/io//task//job_builder.sharp:6:21: note:  
			private job_builder() {}
		                    ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std.io.task#job_builder.job_builder[1799] params(2) in file: lib\support\0.2.805/io//task//job_builder.sharp:8:23: note:  
			protected job_builder(scheduled_job : job, master : job_master) {
		                      ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 9 pushl 1   
2 [0x2]:         movl 0   
3 [0x3]:         movn #1   
5 [0x5]:         popobj   
6 [0x6]: line: 10 pushl 2   
7 [0x7]:          movl 0   
8 [0x8]:          movn #0   
10 [0xa]:          popobj   
11 [0xb]: line: 12 movi #1, ebx   
13 [0xd]:          newobj_arry ebx   
14 [0xe]:          popobj2    
15 [0xf]:          smovr_3 fp+3   
16 [0x10]: line: 13 movl 0   
17 [0x11]:          movn #1   
19 [0x13]:          pushobj   
20 [0x14]:          pushl 3   
21 [0x15]:          movi #0, ebx   
23 [0x17]:          popobj2    
24 [0x18]:          movr adx, ebx   
25 [0x19]:          chklen adx   
26 [0x1a]:          movnd adx   
27 [0x1b]:          popobj   
28 [0x1c]: line: 14 pushl 3   
29 [0x1d]:          movl 0   
30 [0x1e]:          movn #1   
32 [0x20]:          movn #6   
34 [0x22]:          popobj   
35 [0x23]:          ret   


function: std.io.task#job_builder.with_timeout[1800] params(1) in file: lib\support\0.2.805/io//task//job_builder.sharp:17:5: note:  
			def with_timeout(mills_time : var) : job_builder {
		    ^

0 [0x0]: line: 18 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          movn #16   
5 [0x5]:          movi #0, adx   
7 [0x7]:          iaload ebx, adx   
8 [0x8]:          movr cmt, ebx   
9 [0x9]:          jne 15   
10 [0xa]: line: 19 new_class @5 // std#illegal_state_exception   
11 [0xb]:          dup    
12 [0xc]:          newstr @28 // cannot set a timeout on a job that's blocking the calling thread   
13 [0xd]:          call @1632 // <std#illegal_state_exception.illegal_state_exception>   
14 [0xe]:          throw    
15 [0xf]:          nop   
16 [0x10]: line: 22 ipushl #1   
17 [0x11]:          movl 0   
18 [0x12]:          movn #1   
20 [0x14]:          movn #9   
22 [0x16]:          loadval ebx   
23 [0x17]:          movi #0, adx   
25 [0x19]:          rmov adx, ebx   
26 [0x1a]: line: 23 istore 1   
28 [0x1c]:          movl 0   
29 [0x1d]:          movn #1   
31 [0x1f]:          movn #8   
33 [0x21]:          loadval ebx   
34 [0x22]:          movi #0, adx   
36 [0x24]:          rmov adx, ebx   
37 [0x25]: line: 24 movl 0   
38 [0x26]:          returnobj   
39 [0x27]:          ret   


function: std.io.task#job_builder.schedule[1801] params(1) in file: lib\support\0.2.805/io//task//job_builder.sharp:27:5: note:  
			def schedule(future : var) : job_builder {
		    ^

0 [0x0]: line: 28 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #1   
4 [0x4]:          movn #12   
6 [0x6]:          loadval ebx   
7 [0x7]:          movi #0, adx   
9 [0x9]:          rmov adx, ebx   
10 [0xa]: line: 29 movl 0   
11 [0xb]:          returnobj   
12 [0xc]:          ret   


function: std.io.task#job_builder.recurring[1802] params(2) in file: lib\support\0.2.805/io//task//job_builder.sharp:32:5: note:  
			def recurring(tm : var, interval: time_unit) : job_builder {
		    ^

0 [0x0]: line: 33 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          movn #16   
5 [0x5]:          movi #0, adx   
7 [0x7]:          iaload ebx, adx   
8 [0x8]:          movr cmt, ebx   
9 [0x9]:          jne 15   
10 [0xa]: line: 34 new_class @5 // std#illegal_state_exception   
11 [0xb]:          dup    
12 [0xc]:          newstr @29 // cannot set a job recurring that's blocking the calling thread   
13 [0xd]:          call @1632 // <std#illegal_state_exception.illegal_state_exception>   
14 [0xe]:          throw    
15 [0xf]:          nop   
16 [0x10]: line: 37 istore 1   
18 [0x12]:          movl 0   
19 [0x13]:          movn #1   
21 [0x15]:          movn #14   
23 [0x17]:          loadval ebx   
24 [0x18]:          movi #0, adx   
26 [0x1a]:          rmov adx, ebx   
27 [0x1b]: line: 38 movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          pushobj   
31 [0x1f]:          ipushl #1   
32 [0x20]:          pushl 2   
33 [0x21]:          call @1796 // <std.io.task#job.update_interval>   
34 [0x22]: line: 39 movl 0   
35 [0x23]:          returnobj   
36 [0x24]:          ret   


function: std.io.task#job_builder.with_name[1803] params(1) in file: lib\support\0.2.805/io//task//job_builder.sharp:42:5: note:  
			def with_name(job_name : string) : job_builder {
		    ^

0 [0x0]: line: 43 pushl 1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #1   
4 [0x4]:          movn #5   
6 [0x6]:          popobj   
7 [0x7]: line: 44 movl 0   
8 [0x8]:          returnobj   
9 [0x9]:          ret   


function: std.io.task#job_builder.with_args[1804] params(1) in file: lib\support\0.2.805/io//task//job_builder.sharp:47:5: note:  
			def with_args(args : object[]) : job_builder {
		    ^

0 [0x0]: line: 48 istore 1   
2 [0x2]:          movl 1   
3 [0x3]:          sizeof ebx   
4 [0x4]:          loadval ecx   
5 [0x5]:          add ecx, ebx -> ebx   
6 [0x6]:          newobj_arry ebx   
7 [0x7]:          popobj2    
8 [0x8]:          smovr_3 fp+2   
9 [0x9]: line: 49 movl 0   
10 [0xa]:          movn #1   
12 [0xc]:          pushobj   
13 [0xd]:          pushl 2   
14 [0xe]:          movi #0, ebx   
16 [0x10]:          popobj2    
17 [0x11]:          movr adx, ebx   
18 [0x12]:          chklen adx   
19 [0x13]:          movnd adx   
20 [0x14]:          popobj   
21 [0x15]: line: 51 istorel 0, fp+3   
23 [0x17]: line: 52 istorel -1, fp+5   
25 [0x19]:          pushl 1   
26 [0x1a]:          popl 6   
27 [0x1b]:          iaddl 1, fp@5   
29 [0x1d]:          movl 6   
30 [0x1e]:          sizeof ecx   
31 [0x1f]:          loadl ebx, fp+5   
32 [0x20]:          lt ebx, ecx   
33 [0x21]:          jne 48   
34 [0x22]:          movnd ebx   
35 [0x23]:          pushobj   
36 [0x24]:          popl 4   
37 [0x25]: line: 53 pushl 4   
38 [0x26]:          pushl 2   
39 [0x27]:          loadl ebx, fp+3   
40 [0x28]:          inc ebx   
41 [0x29]:          smovr_2 ebx, fp+3   
42 [0x2a]:          popobj2    
43 [0x2b]:          movr adx, ebx   
44 [0x2c]:          chklen adx   
45 [0x2d]:          movnd adx   
46 [0x2e]:          popobj   
47 [0x2f]:          jmp @27   
48 [0x30]: line: 56 pushl 2   
49 [0x31]:          movl 0   
50 [0x32]:          movn #1   
52 [0x34]:          movn #6   
54 [0x36]:          popobj   
55 [0x37]: line: 57 movl 0   
56 [0x38]:          returnobj   
57 [0x39]:          ret   


function: std.io.task#job_builder.block[1805] params(0) in file: lib\support\0.2.805/io//task//job_builder.sharp:60:5: note:  
			def block() : job_builder {
		    ^

0 [0x0]: line: 61 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          movn #8   
5 [0x5]:          movi #0, adx   
7 [0x7]:          iaload ebx, adx   
8 [0x8]:          movr cmt, ebx   
9 [0x9]:          jne 15   
10 [0xa]: line: 62 new_class @5 // std#illegal_state_exception   
11 [0xb]:          dup    
12 [0xc]:          newstr @30 // cannot block calling thread on job that has a timeout   
13 [0xd]:          call @1632 // <std#illegal_state_exception.illegal_state_exception>   
14 [0xe]:          throw    
15 [0xf]:          nop   
16 [0x10]: line: 65 movl 0   
17 [0x11]:          movn #1   
19 [0x13]:          movn #14   
21 [0x15]:          movi #0, adx   
23 [0x17]:          iaload ebx, adx   
24 [0x18]:          movr cmt, ebx   
25 [0x19]:          jne 31   
26 [0x1a]: line: 66 new_class @5 // std#illegal_state_exception   
27 [0x1b]:          dup    
28 [0x1c]:          newstr @31 // cannot block calling thread on a recurring job   
29 [0x1d]:          call @1632 // <std#illegal_state_exception.illegal_state_exception>   
30 [0x1e]:          throw    
31 [0x1f]:          nop   
32 [0x20]: line: 69 istore 1   
34 [0x22]:          movl 0   
35 [0x23]:          movn #1   
37 [0x25]:          movn #16   
39 [0x27]:          loadval ebx   
40 [0x28]:          movi #0, adx   
42 [0x2a]:          rmov adx, ebx   
43 [0x2b]: line: 70 movl 0   
44 [0x2c]:          returnobj   
45 [0x2d]:          ret   


function: std.io.task#job_builder.long_term[1806] params(0) in file: lib\support\0.2.805/io//task//job_builder.sharp:73:5: note:  
			def long_term() : job_builder {
		    ^

0 [0x0]: line: 74 istore 1   
2 [0x2]:          movl 0   
3 [0x3]:          movn #1   
5 [0x5]:          movn #17   
7 [0x7]:          loadval ebx   
8 [0x8]:          movi #0, adx   
10 [0xa]:          rmov adx, ebx   
11 [0xb]: line: 75 movl 0   
12 [0xc]:          returnobj   
13 [0xd]:          ret   


overload function: std.io.task#job_builder.operator=[1807] params(1) in file: lib\support\0.2.805/io//task//job_builder.sharp:78:12: note:  
			public def operator=(main: ()()) : job {
		           ^

0 [0x0]: line: 79 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          pushobj   
4 [0x4]:          ipushl #1   
5 [0x5]:          call @1787 // <std.io.task#job.operator=>   
6 [0x6]: line: 80 movl 0   
7 [0x7]:          movn #0   
9 [0x9]:          pushobj   
10 [0xa]:          movl 0   
11 [0xb]:          movn #1   
13 [0xd]:          pushobj   
14 [0xe]:          call @1817 // <std.io.task#job_master.start_job>   
15 [0xf]: line: 81 movl 0   
16 [0x10]:          movn #1   
18 [0x12]:          returnobj   
19 [0x13]:          ret   


overload function: std.io.task#job_builder.operator=[1808] params(1) in file: lib\support\0.2.805/io//task//job_builder.sharp:84:12: note:  
			public def operator=(main: (args : object[])()) : job {
		           ^

0 [0x0]: line: 85 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          pushobj   
4 [0x4]:          ipushl #1   
5 [0x5]:          call @1788 // <std.io.task#job.operator=>   
6 [0x6]: line: 86 movl 0   
7 [0x7]:          movn #0   
9 [0x9]:          pushobj   
10 [0xa]:          movl 0   
11 [0xb]:          movn #1   
13 [0xd]:          pushobj   
14 [0xe]:          call @1817 // <std.io.task#job_master.start_job>   
15 [0xf]: line: 87 movl 0   
16 [0x10]:          movn #1   
18 [0x12]:          returnobj   
19 [0x13]:          ret   


overload function: std.io.task#job_builder.operator=[1809] params(1) in file: lib\support\0.2.805/io//task//job_builder.sharp:90:18: note:  
		    protected def operator=(main: (deferred : object, args : object[])()) : job {
		                 ^

0 [0x0]: line: 91 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          pushobj   
4 [0x4]:          ipushl #1   
5 [0x5]:          call @1789 // <std.io.task#job.operator=>   
6 [0x6]: line: 92 movl 0   
7 [0x7]:          movn #1   
9 [0x9]:          movn #14   
11 [0xb]:          movi #0, adx   
13 [0xd]:          iaload ebx, adx   
14 [0xe]:          movr cmt, ebx   
15 [0xf]:          jne 21   
16 [0x10]: line: 93 new_class @5 // std#illegal_state_exception   
17 [0x11]:          dup    
18 [0x12]:          newstr @32 // recurring jobs cannot be deferred tasks   
19 [0x13]:          call @1632 // <std#illegal_state_exception.illegal_state_exception>   
20 [0x14]:          throw    
21 [0x15]:          nop   
22 [0x16]: line: 96 movl 0   
23 [0x17]:          movn #0   
25 [0x19]:          pushobj   
26 [0x1a]:          movl 0   
27 [0x1b]:          movn #1   
29 [0x1d]:          pushobj   
30 [0x1e]:          call @1817 // <std.io.task#job_master.start_job>   
31 [0x1f]: line: 97 movl 0   
32 [0x20]:          movn #1   
34 [0x22]:          returnobj   
35 [0x23]:          ret   


overload function: std.io.task#job_builder.operator=[1810] params(1) in file: lib\support\0.2.805/io//task//job_builder.sharp:100:18: note:  
		    protected def operator=(main: (deferred : object)()) : job {
		                 ^

0 [0x0]: line: 101 movl 0   
1 [0x1]:           movn #1   
3 [0x3]:           pushobj   
4 [0x4]:           ipushl #1   
5 [0x5]:           call @1790 // <std.io.task#job.operator=>   
6 [0x6]: line: 102 movl 0   
7 [0x7]:           movn #1   
9 [0x9]:           movn #14   
11 [0xb]:           movi #0, adx   
13 [0xd]:           iaload ebx, adx   
14 [0xe]:           movr cmt, ebx   
15 [0xf]:           jne 21   
16 [0x10]: line: 103 new_class @5 // std#illegal_state_exception   
17 [0x11]:           dup    
18 [0x12]:           newstr @32 // recurring jobs cannot be deferred tasks   
19 [0x13]:           call @1632 // <std#illegal_state_exception.illegal_state_exception>   
20 [0x14]:           throw    
21 [0x15]:           nop   
22 [0x16]: line: 106 movl 0   
23 [0x17]:           movn #0   
25 [0x19]:           pushobj   
26 [0x1a]:           movl 0   
27 [0x1b]:           movn #1   
29 [0x1d]:           pushobj   
30 [0x1e]:           call @1817 // <std.io.task#job_master.start_job>   
31 [0x1f]: line: 107 movl 0   
32 [0x20]:           movn #1   
34 [0x22]:           returnobj   
35 [0x23]:           ret   


function: std.io.task#job_builder.get_job[1811] params(0) in file: lib\support\0.2.805/io//task//job_builder.sharp:110:12: note:  
			public def get_job() := scheduled_job;
		           ^

0 [0x0]: line: 110 movl 0   
1 [0x1]:           movn #1   
3 [0x3]:           returnobj   
4 [0x4]:           ret   


constructor: std.io.task#job_controller.job_controller[1812] params(0) in file: lib\support\0.2.805/io//task//job_controller.sharp:5:6: note:  
		class job_controller {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std.io.task#job_master.job_master[1813] params(0) in file: lib\support\0.2.805/io//task//job_master.sharp:7:12: note:  
			job_master() {
		           ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 8 new_class @29 // std.io#thread_group   
2 [0x2]:         dup    
3 [0x3]:         new_class @64 // std#string   
4 [0x4]:         dup    
5 [0x5]:         newstr @33 // Long term jobs   
6 [0x6]:         call @2935 // <std#string.string>   
7 [0x7]:         movg @30 // @std.io#thread_priority   
8 [0x8]:         movn #0   
10 [0xa]:         pushobj   
11 [0xb]:         call @1879 // <std.io#thread_group.thread_group>   
12 [0xc]:         movl 0   
13 [0xd]:         movn #2   
15 [0xf]:         popobj   
16 [0x10]: line: 9 new_class @29 // std.io#thread_group   
17 [0x11]:         dup    
18 [0x12]:         new_class @64 // std#string   
19 [0x13]:         dup    
20 [0x14]:         newstr @34 // Short term jobs   
21 [0x15]:         call @2935 // <std#string.string>   
22 [0x16]:         movg @30 // @std.io#thread_priority   
23 [0x17]:         movn #2   
25 [0x19]:         pushobj   
26 [0x1a]:         call @1879 // <std.io#thread_group.thread_group>   
27 [0x1b]:         movl 0   
28 [0x1c]:         movn #3   
30 [0x1e]:         popobj   
31 [0x1f]: line: 10 new_class @144 // std#synced_list<std.io.task#job>   
32 [0x20]:          dup    
33 [0x21]:          call @3318 // <std#synced_list<std.io.task#job>.synced_list>   
34 [0x22]:          movl 0   
35 [0x23]:          movn #0   
37 [0x25]:          popobj   
38 [0x26]: line: 11 new_class @141 // std#hashtable<std.io#thread,std.io.task#job_controller>   
39 [0x27]:          dup    
40 [0x28]:          call @3273 // <std#hashtable<std.io#thread,std.io.task#job_controller>.hashtable>   
41 [0x29]:          movl 0   
42 [0x2a]:          movn #1   
44 [0x2c]:          popobj   
45 [0x2d]:          ret   


overload function: std.io.task#job_master.operator=[1814] params(1) in file: lib\support\0.2.805/io//task//job_master.sharp:14:5: note:  
			def operator=(main: ()()) : job {
		    ^

0 [0x0]: line: 15 pushl 0   
1 [0x1]:          call @1815 // <std.io.task#job_master.create_job>   
2 [0x2]:          popobj2    
3 [0x3]:          smovr_3 fp+2   
4 [0x4]: line: 16 pushl 2   
5 [0x5]:          ipushl #1   
6 [0x6]:          call @1787 // <std.io.task#job.operator=>   
7 [0x7]: line: 17 pushl 0   
8 [0x8]:          pushl 2   
9 [0x9]:          call @1817 // <std.io.task#job_master.start_job>   
10 [0xa]: line: 18 movl 2   
11 [0xb]:          returnobj   
12 [0xc]:          ret   


function: std.io.task#job_master.create_job[1815] params(0) in file: lib\support\0.2.805/io//task//job_master.sharp:21:15: note:  
			protected def create_job() := new job("job#${job.guid}");
		              ^

0 [0x0]: line: 21 new_class @22 // std.io.task#job   
1 [0x1]:          dup    
2 [0x2]:          new_class @64 // std#string   
3 [0x3]:          dup    
4 [0x4]:          newstr @0 // job#   
5 [0x5]:          call @2935 // <std#string.string>   
6 [0x6]:          movg @22 // @std.io.task#job   
7 [0x7]:          movn #0   
9 [0x9]:          movi #0, adx   
11 [0xb]:          iaload ebx, adx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @2967 // <std#string.operator+>   
14 [0xe]:          call @1779 // <std.io.task#job.job>   
15 [0xf]:          popobj2    
16 [0x10]:          returnobj   
17 [0x11]:          ret   


function: std.io.task#job_master.create_job[1816] params(1) in file: lib\support\0.2.805/io//task//job_master.sharp:23:15: note:  
			protected def create_job(name : string) := new job(name);
		              ^

0 [0x0]: line: 23 new_class @22 // std.io.task#job   
1 [0x1]:          dup    
2 [0x2]:          pushl 1   
3 [0x3]:          call @1779 // <std.io.task#job.job>   
4 [0x4]:          popobj2    
5 [0x5]:          returnobj   
6 [0x6]:          ret   


function: std.io.task#job_master.start_job[1817] params(1) in file: lib\support\0.2.805/io//task//job_master.sharp:25:15: note:  
			protected def start_job(scheduled_job : job) {
		              ^

0 [0x0]: line: 26 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 27 movl 0   
3 [0x3]:          movn #4   
5 [0x5]:          movi #0, adx   
7 [0x7]:          iaload ebx, adx   
8 [0x8]:          not ebx, ebx   
9 [0x9]:          movr cmt, ebx   
10 [0xa]:          jne 20   
11 [0xb]: line: 28 call @1821 // <std.io.task#__srt_global.start_scheduler>   
12 [0xc]: line: 29 movi #1, ebx   
14 [0xe]:          movl 0   
15 [0xf]:          movn #4   
17 [0x11]:          movi #0, adx   
19 [0x13]:          rmov adx, ebx   
20 [0x14]:          nop   
21 [0x15]:          movl 0   
22 [0x16]:          _ulck   
23 [0x17]: line: 33 movl 1   
24 [0x18]:          movn #12   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          iaload ebx, adx   
29 [0x1d]:          movr cmt, ebx   
30 [0x1e]:          jne 48   
31 [0x1f]: line: 34 movl 1   
32 [0x20]:          movn #12   
34 [0x22]:          movi #0, adx   
36 [0x24]:          iaload ebx, adx   
37 [0x25]:          rstore ebx   
38 [0x26]:          call @3044 // <std#time.mills_time>   
39 [0x27]:          loadval ebx   
40 [0x28]:          loadval ecx   
41 [0x29]:          add ecx, ebx -> ebx   
42 [0x2a]:          movl 1   
43 [0x2b]:          movn #12   
45 [0x2d]:          movi #0, adx   
47 [0x2f]:          rmov adx, ebx   
48 [0x30]:          nop   
49 [0x31]: line: 36 movl 1   
50 [0x32]:          movn #16   
52 [0x34]:          movi #0, adx   
54 [0x36]:          iaload ebx, adx   
55 [0x37]:          movr cmt, ebx   
56 [0x38]:          jne 60   
57 [0x39]: line: 37 pushl 1   
58 [0x3a]:          call @1828 // <std.io.task#__srt_global.execute_synchronous>   
59 [0x3b]:          jmp @66   
60 [0x3c]: line: 40 movl 0   
61 [0x3d]:          movn #0   
63 [0x3f]:          pushobj   
64 [0x40]:          pushl 1   
65 [0x41]:          call @3356 // <std#synced_list<std.io.task#job>.add>   
66 [0x42]:          nop   
67 [0x43]:          ret   


function: std.io.task#job_master.get_host_controller[1818] params(1) in file: lib\support\0.2.805/io//task//job_master.sharp:44:15: note:  
			protected def get_host_controller(host: thread) := controllers.at(host);
		              ^

0 [0x0]: line: 44 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 1   
5 [0x5]:          call @3277 // <std#hashtable<std.io#thread,std.io.task#job_controller>.at>   
6 [0x6]:          popobj2    
7 [0x7]:          returnobj   
8 [0x8]:          ret   


function: std.io.task#job_master.cleanup_job[1819] params(1) in file: lib\support\0.2.805/io//task//job_master.sharp:46:15: note:  
			protected def cleanup_job(scheduled_job : job) {
		              ^

0 [0x0]: line: 47 movl 1   
1 [0x1]:          movn #7   
3 [0x3]:          del   
4 [0x4]: line: 48 movl 1   
5 [0x5]:          movn #4   
7 [0x7]:          del   
8 [0x8]: line: 49 movl 1   
9 [0x9]:          movn #13   
11 [0xb]:          del   
12 [0xc]: line: 50 movl 1   
13 [0xd]:          movn #6   
15 [0xf]:          del   
16 [0x10]: line: 51 movl 1   
17 [0x11]:          movn #5   
19 [0x13]:          del   
20 [0x14]: line: 53 movl 1   
21 [0x15]: line: 54 _lck    
22 [0x16]: line: 55 movl 1   
23 [0x17]:          movn #20   
25 [0x19]:          pushobj   
26 [0x1a]:          call @3292 // <std#list<std.io#thread>.empty>   
27 [0x1b]:          loadval ebx   
28 [0x1c]:          not ebx, ebx   
29 [0x1d]:          movr cmt, ebx   
30 [0x1e]:          jne 53   
31 [0x1f]: line: 56 istorel -1, fp+3   
33 [0x21]:          movl 1   
34 [0x22]:          movn #20   
36 [0x24]:          pushobj   
37 [0x25]:          invoke_delegate 22 { static=0, args=0 }   
39 [0x27]:          popl 4   
40 [0x28]:          iaddl 1, fp@3   
42 [0x2a]:          movl 4   
43 [0x2b]:          sizeof ecx   
44 [0x2c]:          loadl ebx, fp+3   
45 [0x2d]:          lt ebx, ecx   
46 [0x2e]:          jne 53   
47 [0x2f]:          movnd ebx   
48 [0x30]:          pushobj   
49 [0x31]:          popl 2   
50 [0x32]: line: 57 pushl 2   
51 [0x33]:          call @1935 // <std#_object_.notify>   
52 [0x34]:          jmp @40   
53 [0x35]:          nop   
54 [0x36]: line: 61 movl 1   
55 [0x37]:          movn #20   
57 [0x39]:          pushobj   
58 [0x3a]:          call @3300 // <std#list<std.io#thread>.clear>   
59 [0x3b]:          movl 1   
60 [0x3c]:          _ulck   
61 [0x3d]: line: 64 movl 1   
62 [0x3e]:          _lck    
63 [0x3f]: line: 65 movl 1   
64 [0x40]:          movn #20   
66 [0x42]:          pushobj   
67 [0x43]:          call @3292 // <std#list<std.io#thread>.empty>   
68 [0x44]:          loadval ebx   
69 [0x45]:          not ebx, ebx   
70 [0x46]:          movr cmt, ebx   
71 [0x47]:          jne 75   
72 [0x48]: line: 66 movl 1   
73 [0x49]:          _ulck   
74 [0x4a]:          jmp @20   
75 [0x4b]:          nop   
76 [0x4c]:          movl 1   
77 [0x4d]:          _ulck   
78 [0x4e]: line: 70 movl 1   
79 [0x4f]:          movn #20   
81 [0x51]:          del   
82 [0x52]: line: 71 movl 0   
83 [0x53]:          movn #0   
85 [0x55]:          pushobj   
86 [0x56]:          pushl 1   
87 [0x57]:          istore 3529   
89 [0x59]:          call @3363 // <std#synced_list<std.io.task#job>.remove>   
90 [0x5a]:          ret   


function: std.io.task#job_master.cancel_jobs_by_name[1820] params(1) in file: lib\support\0.2.805/io//task//job_master.sharp:74:15: note:  
			protected def cancel_jobs_by_name(name: string) {
		              ^

0 [0x0]: line: 75 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          _lck    
4 [0x4]: line: 76 istorel 0, fp+2   
6 [0x6]:          ipushl #2   
7 [0x7]:          movl 0   
8 [0x8]:          movn #0   
10 [0xa]:          pushobj   
11 [0xb]:          call @3359 // <std#synced_list<std.io.task#job>.size>   
12 [0xc]:          loadval ebx   
13 [0xd]:          loadval ecx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 45   
18 [0x12]: line: 77 movl 0   
19 [0x13]:          movn #0   
21 [0x15]:          pushobj   
22 [0x16]:          ipushl #2   
23 [0x17]:          call @3323 // <std#synced_list<std.io.task#job>.at>   
24 [0x18]:          popobj2    
25 [0x19]:          movn #5   
27 [0x1b]:          pushobj   
28 [0x1c]:          pushl 1   
29 [0x1d]:          call @2953 // <std#string.operator==>   
30 [0x1e]:          loadval ebx   
31 [0x1f]:          movr cmt, ebx   
32 [0x20]:          jne 41   
33 [0x21]: line: 78 movl 0   
34 [0x22]:          movn #0   
36 [0x24]:          pushobj   
37 [0x25]:          ipushl #2   
38 [0x26]:          call @3364 // <std#synced_list<std.io.task#job>.remove_at>   
39 [0x27]: line: 79 istorel 0, fp+2   
41 [0x29]:          nop   
42 [0x2a]:          iaddl 1, fp@2   
44 [0x2c]:          jmp @6   
45 [0x2d]: line: 83 istorel -1, fp+4   
47 [0x2f]:          movl 0   
48 [0x30]:          movn #3   
50 [0x32]:          pushobj   
51 [0x33]:          invoke_delegate 22 { static=0, args=0 }   
53 [0x35]:          popl 5   
54 [0x36]:          iaddl 1, fp@4   
56 [0x38]:          movl 5   
57 [0x39]:          sizeof ecx   
58 [0x3a]:          loadl ebx, fp+4   
59 [0x3b]:          lt ebx, ecx   
60 [0x3c]:          jne 88   
61 [0x3d]:          movnd ebx   
62 [0x3e]:          pushobj   
63 [0x3f]:          popl 3   
64 [0x40]: line: 84 pushl 0   
65 [0x41]:          pushl 3   
66 [0x42]:          call @1818 // <std.io.task#job_master.get_host_controller>   
67 [0x43]:          popobj2    
68 [0x44]:          movn #0   
70 [0x46]:          smovr_3 fp+6   
71 [0x47]: line: 85 movl 6   
72 [0x48]:          checknull   
73 [0x49]:          not ebx, ebx   
74 [0x4a]:          skne ebx // pc = 82   
75 [0x4b]:          movl 6   
76 [0x4c]:          movn #5   
78 [0x4e]:          pushobj   
79 [0x4f]:          pushl 1   
80 [0x50]:          call @2953 // <std#string.operator==>   
81 [0x51]:          loadval ebx   
82 [0x52]:          movr cmt, ebx   
83 [0x53]:          jne 86   
84 [0x54]: line: 86 pushl 6   
85 [0x55]:          call @1781 // <std.io.task#job.cancel>   
86 [0x56]:          nop   
87 [0x57]:          jmp @54   
88 [0x58]: line: 90 istorel -1, fp+8   
90 [0x5a]:          movl 0   
91 [0x5b]:          movn #2   
93 [0x5d]:          pushobj   
94 [0x5e]:          invoke_delegate 22 { static=0, args=0 }   
96 [0x60]:          popl 9   
97 [0x61]:          iaddl 1, fp@8   
99 [0x63]:          movl 9   
100 [0x64]:          sizeof ecx   
101 [0x65]:          loadl ebx, fp+8   
102 [0x66]:          lt ebx, ecx   
103 [0x67]:          jne 142   
104 [0x68]:          movnd ebx   
105 [0x69]:          pushobj   
106 [0x6a]:          popl 7   
107 [0x6b]: line: 91 pushl 7   
108 [0x6c]:          movg @20 // @std.io.task#__srt_global   
109 [0x6d]:          movn #3   
111 [0x6f]:          pushobj   
112 [0x70]:          call @1877 // <std.io#thread.operator==>   
113 [0x71]:          loadval ebx   
114 [0x72]:          movr cmt, ebx   
115 [0x73]:          jne 117   
116 [0x74]:          jmp @97   
117 [0x75]:          nop   
118 [0x76]: line: 93 pushl 0   
119 [0x77]:          pushl 7   
120 [0x78]:          call @1818 // <std.io.task#job_master.get_host_controller>   
121 [0x79]:          popobj2    
122 [0x7a]:          movn #0   
124 [0x7c]:          smovr_3 fp+10   
125 [0x7d]: line: 94 movl 10   
126 [0x7e]:          checknull   
127 [0x7f]:          not ebx, ebx   
128 [0x80]:          skne ebx // pc = 136   
129 [0x81]:          movl 10   
130 [0x82]:          movn #5   
132 [0x84]:          pushobj   
133 [0x85]:          pushl 1   
134 [0x86]:          call @2953 // <std#string.operator==>   
135 [0x87]:          loadval ebx   
136 [0x88]:          movr cmt, ebx   
137 [0x89]:          jne 140   
138 [0x8a]: line: 95 pushl 10   
139 [0x8b]:          call @1781 // <std.io.task#job.cancel>   
140 [0x8c]:          nop   
141 [0x8d]:          jmp @97   
142 [0x8e]:          movl 0   
143 [0x8f]:          movn #0   
145 [0x91]:          _ulck   
146 [0x92]:          ret   


function: std.io.task#__srt_global.start_scheduler[1821] params(0) in file: lib\support\0.2.805/io//task//job_scheduler.sharp:12:14: note:  
		protected def start_scheduler() {
		             ^

0 [0x0]: line: 13 movg @20 // @std.io.task#__srt_global   
1 [0x1]:          movn #5   
3 [0x3]:          _lck    
4 [0x4]: line: 14 movg @20 // @std.io.task#__srt_global   
5 [0x5]:          movn #2   
7 [0x7]:          movi #0, adx   
9 [0x9]:          iaload ebx, adx   
10 [0xa]:          rstore ebx   
11 [0xb]:          movi #0, ebx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          jne 17   
16 [0x10]: line: 15 call @1822 // <std.io.task#__srt_global.calculate_max_threads>   
17 [0x11]:          nop   
18 [0x12]: line: 16 new_class @28 // std.io#thread   
19 [0x13]:          dup    
20 [0x14]:          new_class @64 // std#string   
21 [0x15]:          dup    
22 [0x16]:          newstr @35 // task_scheduler   
23 [0x17]:          call @2935 // <std#string.string>   
24 [0x18]:          istore 1825   
26 [0x1a]:          movg @20 // @std.io.task#__srt_global   
27 [0x1b]:          movn #5   
29 [0x1d]:          movn #2   
31 [0x1f]:          pushobj   
32 [0x20]:          call @1846 // <std.io#thread.thread>   
33 [0x21]:          movg @20 // @std.io.task#__srt_global   
34 [0x22]:          movn #3   
36 [0x24]:          popobj   
37 [0x25]: line: 17 movg @20 // @std.io.task#__srt_global   
38 [0x26]:          movn #3   
40 [0x28]:          pushobj   
41 [0x29]:          pushnull    
42 [0x2a]:          call @1848 // <std.io#thread.start>   
43 [0x2b]:          pop   
44 [0x2c]:          movg @20 // @std.io.task#__srt_global   
45 [0x2d]:          movn #5   
47 [0x2f]:          _ulck   
48 [0x30]:          ret   


function: std.io.task#__srt_global.calculate_max_threads[1822] params(0) in file: lib\support\0.2.805/io//task//job_scheduler.sharp:21:12: note:  
		private def calculate_max_threads() {
		           ^

0 [0x0]: line: 22 call @1971 // <platform.kernel#vm.cores>   
1 [0x1]:          ipopl 0   
2 [0x2]: line: 23 movi #2, ebx   
4 [0x4]:          mull ebx, fp@0   
5 [0x5]: line: 24 movi #4, ebx   
7 [0x7]:          subl ebx, fp@0   
8 [0x8]: line: 26 ipushl #0   
9 [0x9]:          movi #2, ebx   
11 [0xb]:          loadval ecx   
12 [0xc]:          gt ecx, ebx   
13 [0xd]:          movr ebx, cmt   
14 [0xe]:          movr cmt, ebx   
15 [0xf]:          jne 42   
16 [0x10]: line: 27 ipushl #0   
17 [0x11]:          ldc ebx // 0.75   
18 [0x12]:          loadval ecx   
19 [0x13]:          mul ecx, ebx -> ebx   
20 [0x14]:          rstore ebx   
21 [0x15]:          call @1928 // <std.math#__srt_global.round>   
22 [0x16]:          movg @20 // @std.io.task#__srt_global   
23 [0x17]:          movn #0   
25 [0x19]:          loadval ebx   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          rmov adx, ebx   
29 [0x1d]: line: 28 ipushl #0   
30 [0x1e]:          ldc ebx // 0.25   
31 [0x1f]:          loadval ecx   
32 [0x20]:          mul ecx, ebx -> ebx   
33 [0x21]:          rstore ebx   
34 [0x22]:          call @1928 // <std.math#__srt_global.round>   
35 [0x23]:          movg @20 // @std.io.task#__srt_global   
36 [0x24]:          movn #1   
38 [0x26]:          loadval ebx   
39 [0x27]:          movi #0, adx   
41 [0x29]:          rmov adx, ebx   
42 [0x2a]:          nop   
43 [0x2b]: line: 31 movg @20 // @std.io.task#__srt_global   
44 [0x2c]:          movn #0   
46 [0x2e]:          movi #0, adx   
48 [0x30]:          iaload ebx, adx   
49 [0x31]:          rstore ebx   
50 [0x32]:          movi #0, ebx   
52 [0x34]:          loadval ecx   
53 [0x35]:          test ecx, ebx   
54 [0x36]:          jne 64   
55 [0x37]: line: 32 istore 1   
57 [0x39]:          movg @20 // @std.io.task#__srt_global   
58 [0x3a]:          movn #0   
60 [0x3c]:          loadval ebx   
61 [0x3d]:          movi #0, adx   
63 [0x3f]:          rmov adx, ebx   
64 [0x40]:          nop   
65 [0x41]: line: 34 movg @20 // @std.io.task#__srt_global   
66 [0x42]:          movn #1   
68 [0x44]:          movi #0, adx   
70 [0x46]:          iaload ebx, adx   
71 [0x47]:          rstore ebx   
72 [0x48]:          movi #0, ebx   
74 [0x4a]:          loadval ecx   
75 [0x4b]:          test ecx, ebx   
76 [0x4c]:          jne 86   
77 [0x4d]: line: 35 istore 1   
79 [0x4f]:          movg @20 // @std.io.task#__srt_global   
80 [0x50]:          movn #1   
82 [0x52]:          loadval ebx   
83 [0x53]:          movi #0, adx   
85 [0x55]:          rmov adx, ebx   
86 [0x56]:          nop   
87 [0x57]: line: 36 movg @20 // @std.io.task#__srt_global   
88 [0x58]:          movn #0   
90 [0x5a]:          movi #0, adx   
92 [0x5c]:          iaload ebx, adx   
93 [0x5d]:          rstore ebx   
94 [0x5e]:          movg @20 // @std.io.task#__srt_global   
95 [0x5f]:          movn #1   
97 [0x61]:          movi #0, adx   
99 [0x63]:          iaload ebx, adx   
100 [0x64]:          loadval ecx   
101 [0x65]:          add ecx, ebx -> ebx   
102 [0x66]:          rstore ebx   
103 [0x67]:          movg @20 // @std.io.task#__srt_global   
104 [0x68]:          movn #2   
106 [0x6a]:          loadval ebx   
107 [0x6b]:          movi #0, adx   
109 [0x6d]:          rmov adx, ebx   
110 [0x6e]:          ret   


function: std.io.task#__srt_global.set_thread_max[1823] params(1) in file: lib\support\0.2.805/io//task//job_scheduler.sharp:39:4: note:  
		def set_thread_max(max: var) {
		   ^

0 [0x0]: line: 40 movg @20 // @std.io.task#__srt_global   
1 [0x1]:          movn #5   
3 [0x3]:          _lck    
4 [0x4]: line: 41 movg @20 // @std.io.task#__srt_global   
5 [0x5]:          movn #3   
7 [0x7]:          pushobj   
8 [0x8]:          pushnull    
9 [0x9]:          itest ebx   
10 [0xa]:          not ebx, ebx   
11 [0xb]:          movr cmt, ebx   
12 [0xc]:          jne 18   
13 [0xd]: line: 42 new_class @4 // std#illegal_argument_exception   
14 [0xe]:          dup    
15 [0xf]:          newstr @38 // cannot modify max thread count after task library has started, try calling this before your first task   
16 [0x10]:          call @1629 // <std#illegal_argument_exception.illegal_argument_exception>   
17 [0x11]:          throw    
18 [0x12]:          nop   
19 [0x13]: line: 46 ipushl #0   
20 [0x14]:          movi #2, ebx   
22 [0x16]:          loadval ecx   
23 [0x17]:          gte ecx, ebx   
24 [0x18]:          movr ebx, cmt   
25 [0x19]:          movr cmt, ebx   
26 [0x1a]:          jne 115   
27 [0x1b]: line: 47 ipushl #0   
28 [0x1c]:          movi #2, ebx   
30 [0x1e]:          loadval ecx   
31 [0x1f]:          gt ecx, ebx   
32 [0x20]:          movr ebx, cmt   
33 [0x21]:          movr cmt, ebx   
34 [0x22]:          jne 61   
35 [0x23]: line: 48 ipushl #0   
36 [0x24]:          ldc ebx // 0.75   
37 [0x25]:          loadval ecx   
38 [0x26]:          mul ecx, ebx -> ebx   
39 [0x27]:          rstore ebx   
40 [0x28]:          call @1928 // <std.math#__srt_global.round>   
41 [0x29]:          movg @20 // @std.io.task#__srt_global   
42 [0x2a]:          movn #0   
44 [0x2c]:          loadval ebx   
45 [0x2d]:          movi #0, adx   
47 [0x2f]:          rmov adx, ebx   
48 [0x30]: line: 49 ipushl #0   
49 [0x31]:          ldc ebx // 0.25   
50 [0x32]:          loadval ecx   
51 [0x33]:          mul ecx, ebx -> ebx   
52 [0x34]:          rstore ebx   
53 [0x35]:          call @1928 // <std.math#__srt_global.round>   
54 [0x36]:          movg @20 // @std.io.task#__srt_global   
55 [0x37]:          movn #1   
57 [0x39]:          loadval ebx   
58 [0x3a]:          movi #0, adx   
60 [0x3c]:          rmov adx, ebx   
61 [0x3d]:          nop   
62 [0x3e]: line: 52 movg @20 // @std.io.task#__srt_global   
63 [0x3f]:          movn #0   
65 [0x41]:          movi #0, adx   
67 [0x43]:          iaload ebx, adx   
68 [0x44]:          rstore ebx   
69 [0x45]:          movi #0, ebx   
71 [0x47]:          loadval ecx   
72 [0x48]:          test ecx, ebx   
73 [0x49]:          jne 83   
74 [0x4a]: line: 53 istore 1   
76 [0x4c]:          movg @20 // @std.io.task#__srt_global   
77 [0x4d]:          movn #0   
79 [0x4f]:          loadval ebx   
80 [0x50]:          movi #0, adx   
82 [0x52]:          rmov adx, ebx   
83 [0x53]:          nop   
84 [0x54]: line: 55 movg @20 // @std.io.task#__srt_global   
85 [0x55]:          movn #1   
87 [0x57]:          movi #0, adx   
89 [0x59]:          iaload ebx, adx   
90 [0x5a]:          rstore ebx   
91 [0x5b]:          movi #0, ebx   
93 [0x5d]:          loadval ecx   
94 [0x5e]:          test ecx, ebx   
95 [0x5f]:          jne 105   
96 [0x60]: line: 56 istore 1   
98 [0x62]:          movg @20 // @std.io.task#__srt_global   
99 [0x63]:          movn #1   
101 [0x65]:          loadval ebx   
102 [0x66]:          movi #0, adx   
104 [0x68]:          rmov adx, ebx   
105 [0x69]:          nop   
106 [0x6a]: line: 57 ipushl #0   
107 [0x6b]:          movg @20 // @std.io.task#__srt_global   
108 [0x6c]:          movn #2   
110 [0x6e]:          loadval ebx   
111 [0x6f]:          movi #0, adx   
113 [0x71]:          rmov adx, ebx   
114 [0x72]:          jmp @120   
115 [0x73]: line: 59 new_class @4 // std#illegal_argument_exception   
116 [0x74]:          dup    
117 [0x75]:          newstr @39 // cannot have less than 2 max threads   
118 [0x76]:          call @1629 // <std#illegal_argument_exception.illegal_argument_exception>   
119 [0x77]:          throw    
120 [0x78]:          nop   
121 [0x79]:          movg @20 // @std.io.task#__srt_global   
122 [0x7a]:          movn #5   
124 [0x7c]:          _ulck   
125 [0x7d]:          ret   


function: std.io.task#__srt_global.get_thread_max[1824] params(0) in file: lib\support\0.2.805/io//task//job_scheduler.sharp:64:4: note:  
		def get_thread_max() : var {
		   ^

0 [0x0]: line: 65 movg @20 // @std.io.task#__srt_global   
1 [0x1]:          movn #5   
3 [0x3]:          _lck    
4 [0x4]: line: 66 movg @20 // @std.io.task#__srt_global   
5 [0x5]:          movn #2   
7 [0x7]:          movi #0, adx   
9 [0x9]:          iaload ebx, adx   
10 [0xa]:          rstore ebx   
11 [0xb]:          movi #0, ebx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          jne 17   
16 [0x10]: line: 67 call @1822 // <std.io.task#__srt_global.calculate_max_threads>   
17 [0x11]:          nop   
18 [0x12]: line: 68 movg @20 // @std.io.task#__srt_global   
19 [0x13]:          movn #2   
21 [0x15]:          movi #0, adx   
23 [0x17]:          iaload ebx, adx   
24 [0x18]:          return_val ebx   
25 [0x19]:          movg @20 // @std.io.task#__srt_global   
26 [0x1a]:          movn #5   
28 [0x1c]:          _ulck   
29 [0x1d]:          ret   
30 [0x1e]:          movg @20 // @std.io.task#__srt_global   
31 [0x1f]:          movn #5   
33 [0x21]:          _ulck   


function: std.io.task#__srt_global.scheduler_main[1825] params(1) in file: lib\support\0.2.805/io//task//job_scheduler.sharp:72:12: note:  
		private def scheduler_main(args : object[]) : var
		           ^

0 [0x0]: line: 74 istorel 36000, fp+1   
2 [0x2]: line: 75 movg @20 // @std.io.task#__srt_global   
3 [0x3]: line: 76 movn #5   
5 [0x5]:          movn #0   
7 [0x7]:          smovr_3 fp+2   
8 [0x8]: line: 77 movi #1, ebx   
10 [0xa]:          movr cmt, ebx   
11 [0xb]:          jne 194   
12 [0xc]: line: 79 call @1861 // <std.io#thread.yield>   
13 [0xd]: line: 80 istorel 0, fp+3   
15 [0xf]:          ipushl #3   
16 [0x10]:          pushl 2   
17 [0x11]:          call @3359 // <std#synced_list<std.io.task#job>.size>   
18 [0x12]:          loadval ebx   
19 [0x13]:          loadval ecx   
20 [0x14]:          lt ecx, ebx   
21 [0x15]:          movr ebx, cmt   
22 [0x16]:          movr cmt, ebx   
23 [0x17]:          jne 173   
24 [0x18]: line: 81 pushl 2   
25 [0x19]:          ipushl #3   
26 [0x1a]:          call @3323 // <std#synced_list<std.io.task#job>.at>   
27 [0x1b]:          popobj2    
28 [0x1c]:          smovr_3 fp+4   
29 [0x1d]: line: 83 movl 4   
30 [0x1e]:          movn #12   
32 [0x20]:          movi #0, adx   
34 [0x22]:          iaload ebx, adx   
35 [0x23]:          rstore ebx   
36 [0x24]:          movi #0, ebx   
38 [0x26]:          loadval ecx   
39 [0x27]:          tne ecx, ebx   
40 [0x28]:          jne 85   
41 [0x29]: line: 84 call @3044 // <std#time.mills_time>   
42 [0x2a]:          loadval ebx   
43 [0x2b]:          rstore ebx   
44 [0x2c]:          movl 4   
45 [0x2d]:          movn #12   
47 [0x2f]:          movi #0, adx   
49 [0x31]:          iaload ebx, adx   
50 [0x32]:          loadval ecx   
51 [0x33]:          gte ecx, ebx   
52 [0x34]:          movr ebx, cmt   
53 [0x35]:          movr cmt, ebx   
54 [0x36]:          jne 83   
55 [0x37]: line: 85 movi #0, ebx   
57 [0x39]:          movl 4   
58 [0x3a]:          movn #12   
60 [0x3c]:          movi #0, adx   
62 [0x3e]:          rmov adx, ebx   
63 [0x3f]: line: 86 pushl 4   
64 [0x40]:          call @1829 // <std.io.task#__srt_global.execute_job>   
65 [0x41]:          ipopl 5   
66 [0x42]: line: 88 loadl ebx, fp+5   
67 [0x43]:          skne ebx // pc = 75   
68 [0x44]:          movl 4   
69 [0x45]:          movn #8   
71 [0x47]:          movi #0, adx   
73 [0x49]:          iaload ebx, adx   
74 [0x4a]:          not ebx, ebx   
75 [0x4b]:          movr cmt, ebx   
76 [0x4c]:          jne 82   
77 [0x4d]: line: 89 pushl 2   
78 [0x4e]:          pushl 4   
79 [0x4f]:          istore 3530   
81 [0x51]:          call @3363 // <std#synced_list<std.io.task#job>.remove>   
82 [0x52]:          nop   
83 [0x53]:          nop   
84 [0x54]:          jmp @169   
85 [0x55]:          movl 4   
86 [0x56]:          movn #8   
88 [0x58]:          movi #0, adx   
90 [0x5a]:          iaload ebx, adx   
91 [0x5b]:          movr cmt, ebx   
92 [0x5c]:          jne 158   
93 [0x5d]: line: 93 movl 4   
94 [0x5e]:          movn #4   
96 [0x60]:          pushobj   
97 [0x61]:          pushnull    
98 [0x62]:          itest ebx   
99 [0x63]:          movr cmt, ebx   
100 [0x64]:          jne 104   
101 [0x65]: line: 94 pushl 4   
102 [0x66]:          call @1829 // <std.io.task#__srt_global.execute_job>   
103 [0x67]:          pop   
104 [0x68]:          nop   
105 [0x69]: line: 97 movl 4   
106 [0x6a]:          movn #18   
108 [0x6c]:          pushobj   
109 [0x6d]:          movg @26 // @std.io.task#job_state   
110 [0x6e]:          movn #1   
112 [0x70]:          pushobj   
113 [0x71]:          call @1616 // <std#_enum_.operator==>   
114 [0x72]:          loadval ebx   
115 [0x73]:          skne ebx // pc = 137   
116 [0x74]:          call @3044 // <std#time.mills_time>   
117 [0x75]:          loadval ebx   
118 [0x76]:          rstore ebx   
119 [0x77]:          movl 4   
120 [0x78]:          movn #10   
122 [0x7a]:          movi #0, adx   
124 [0x7c]:          iaload ebx, adx   
125 [0x7d]:          rstore ebx   
126 [0x7e]:          movl 4   
127 [0x7f]:          movn #9   
129 [0x81]:          movi #0, adx   
131 [0x83]:          iaload ebx, adx   
132 [0x84]:          loadval ecx   
133 [0x85]:          add ecx, ebx -> ebx   
134 [0x86]:          loadval ecx   
135 [0x87]:          gte ecx, ebx   
136 [0x88]:          movr ebx, cmt   
137 [0x89]:          movr cmt, ebx   
138 [0x8a]:          jne 156   
139 [0x8b]: line: 98 movl 4   
140 [0x8c]:          movn #13   
142 [0x8e]:          pushobj   
143 [0x8f]:          pushnull    
144 [0x90]:          itest ebx   
145 [0x91]:          movr cmt, ebx   
146 [0x92]:          jne 148   
147 [0x93]:          jmp @139   
148 [0x94]: line: 99 pushl 4   
149 [0x95]:          call @1781 // <std.io.task#job.cancel>   
150 [0x96]: line: 100 movg @20 // @std.io.task#__srt_global   
151 [0x97]:           movn #5   
153 [0x99]:           pushobj   
154 [0x9a]:           pushl 4   
155 [0x9b]:           call @1819 // <std.io.task#job_master.cleanup_job>   
156 [0x9c]:           nop   
157 [0x9d]:           jmp @169   
158 [0x9e]: line: 103 pushl 4   
159 [0x9f]:           call @1829 // <std.io.task#__srt_global.execute_job>   
160 [0xa0]:           loadval ebx   
161 [0xa1]:           movr cmt, ebx   
162 [0xa2]:           jne 168   
163 [0xa3]: line: 104 pushl 2   
164 [0xa4]:           pushl 4   
165 [0xa5]:           istore 3531   
167 [0xa7]:           call @3363 // <std#synced_list<std.io.task#job>.remove>   
168 [0xa8]:           nop   
169 [0xa9]:           nop   
170 [0xaa]:           iaddl 1, fp@3   
172 [0xac]:           jmp @15   
173 [0xad]: line: 109 loadl ebx, fp+1   
174 [0xae]:           movr egx, ebx   
175 [0xaf]:           dec ebx   
176 [0xb0]:           smovr_2 ebx, fp+1   
177 [0xb1]:           movr ebx, egx   
178 [0xb2]:           rstore ebx   
179 [0xb3]:           movi #0, ebx   
181 [0xb5]:           loadval ecx   
182 [0xb6]:           lte ecx, ebx   
183 [0xb7]:           movr ebx, cmt   
184 [0xb8]:           movr cmt, ebx   
185 [0xb9]:           jne 189   
186 [0xba]: line: 110 istorel 36000, fp+1   
188 [0xbc]: line: 111 call @1827 // <std.io.task#__srt_global.kill_threads>   
189 [0xbd]:           nop   
190 [0xbe]: line: 114 istore 5   
192 [0xc0]:           call @1856 // <std.io#thread.sleep>   
193 [0xc1]:           jmp @8   
194 [0xc2]: line: 116 istorel 0, fp+0   
196 [0xc4]:           ret   


function: std.io.task#__srt_global.get_host[1826] params(1) in file: lib\support\0.2.805/io//task//job_scheduler.sharp:119:12: note:  
		private def get_host(long_running : var) : thread {
		           ^

0 [0x0]: line: 120 movl 1   
1 [0x1]:           del   
2 [0x2]: line: 121 loadl ebx, fp+0   
3 [0x3]:           movr cmt, ebx   
4 [0x4]:           jne 12   
5 [0x5]: line: 122 movg @20 // @std.io.task#__srt_global   
6 [0x6]:           movn #5   
8 [0x8]:           movn #2   
10 [0xa]:           smovr_3 fp+1   
11 [0xb]:           jmp @18   
12 [0xc]: line: 124 movg @20 // @std.io.task#__srt_global   
13 [0xd]:           movn #5   
15 [0xf]:           movn #3   
17 [0x11]:           smovr_3 fp+1   
18 [0x12]:           nop   
19 [0x13]: line: 127 pushl 1   
20 [0x14]:           istore 3532   
22 [0x16]:           call @1887 // <std.io#thread_group.find>   
23 [0x17]:           popobj2    
24 [0x18]:           smovr_3 fp+2   
25 [0x19]: line: 135 movl 2   
26 [0x1a]:           checknull   
27 [0x1b]:           movr cmt, ebx   
28 [0x1c]:           jne 160   
29 [0x1d]: line: 136 loadl ebx, fp+0   
30 [0x1e]:           movr cmt, ebx   
31 [0x1f]:           jne 96   
32 [0x20]: line: 137 movg @20 // @std.io.task#__srt_global   
33 [0x21]:           movn #1   
35 [0x23]:           movi #0, adx   
37 [0x25]:           iaload ebx, adx   
38 [0x26]:           rstore ebx   
39 [0x27]:           movi #0, ebx   
41 [0x29]:           loadval ecx   
42 [0x2a]:           gt ecx, ebx   
43 [0x2b]:           movr ebx, cmt   
44 [0x2c]:           movr cmt, ebx   
45 [0x2d]:           jne 94   
46 [0x2e]: line: 138 movg @20 // @std.io.task#__srt_global   
47 [0x2f]:           movn #1   
49 [0x31]:           movi #0, adx   
51 [0x33]:           iaload ebx, adx   
52 [0x34]:           movr egx, ebx   
53 [0x35]:           dec ebx   
54 [0x36]:           movi #0, adx   
56 [0x38]:           rmov adx, ebx   
57 [0x39]: line: 139 new_class @24 // std.io.task#job_controller   
58 [0x3a]:           dup    
59 [0x3b]:           call @1812 // <std.io.task#job_controller.job_controller>   
60 [0x3c]:           popobj2    
61 [0x3d]:           smovr_3 fp+3   
62 [0x3e]: line: 140 new_class @28 // std.io#thread   
63 [0x3f]:           dup    
64 [0x40]:           new_class @64 // std#string   
65 [0x41]:           dup    
66 [0x42]:           newstr @40 // long_term_worker_thread#   
67 [0x43]:           call @2935 // <std#string.string>   
68 [0x44]:           pushl 1   
69 [0x45]:           call @1882 // <std.io#thread_group.size>   
70 [0x46]:           loadval ebx   
71 [0x47]:           rstore ebx   
72 [0x48]:           movi #1, ebx   
74 [0x4a]:           loadval ecx   
75 [0x4b]:           add ecx, ebx -> ebx   
76 [0x4c]:           rstore ebx   
77 [0x4d]:           call @2967 // <std#string.operator+>   
78 [0x4e]:           istore 1791   
80 [0x50]:           pushl 1   
81 [0x51]:           call @1846 // <std.io#thread.thread>   
82 [0x52]:           popobj2    
83 [0x53]:           smovr_3 fp+2   
84 [0x54]: line: 141 movg @20 // @std.io.task#__srt_global   
85 [0x55]:           movn #5   
87 [0x57]:           movn #1   
89 [0x59]:           pushobj   
90 [0x5a]:           pushl 2   
91 [0x5b]:           pushl 3   
92 [0x5c]:           call @3278 // <std#hashtable<std.io#thread,std.io.task#job_controller>.put>   
93 [0x5d]:           pop   
94 [0x5e]:           nop   
95 [0x5f]:           jmp @159   
96 [0x60]: line: 144 movg @20 // @std.io.task#__srt_global   
97 [0x61]:           movn #0   
99 [0x63]:           movi #0, adx   
101 [0x65]:           iaload ebx, adx   
102 [0x66]:           rstore ebx   
103 [0x67]:           movi #0, ebx   
105 [0x69]:           loadval ecx   
106 [0x6a]:           gt ecx, ebx   
107 [0x6b]:           movr ebx, cmt   
108 [0x6c]:           movr cmt, ebx   
109 [0x6d]:           jne 158   
110 [0x6e]: line: 145 movg @20 // @std.io.task#__srt_global   
111 [0x6f]:           movn #0   
113 [0x71]:           movi #0, adx   
115 [0x73]:           iaload ebx, adx   
116 [0x74]:           movr egx, ebx   
117 [0x75]:           dec ebx   
118 [0x76]:           movi #0, adx   
120 [0x78]:           rmov adx, ebx   
121 [0x79]: line: 146 new_class @24 // std.io.task#job_controller   
122 [0x7a]:           dup    
123 [0x7b]:           call @1812 // <std.io.task#job_controller.job_controller>   
124 [0x7c]:           popobj2    
125 [0x7d]:           smovr_3 fp+4   
126 [0x7e]: line: 147 new_class @28 // std.io#thread   
127 [0x7f]:           dup    
128 [0x80]:           new_class @64 // std#string   
129 [0x81]:           dup    
130 [0x82]:           newstr @41 // worker_thread#   
131 [0x83]:           call @2935 // <std#string.string>   
132 [0x84]:           pushl 1   
133 [0x85]:           call @1882 // <std.io#thread_group.size>   
134 [0x86]:           loadval ebx   
135 [0x87]:           rstore ebx   
136 [0x88]:           movi #1, ebx   
138 [0x8a]:           loadval ecx   
139 [0x8b]:           add ecx, ebx -> ebx   
140 [0x8c]:           rstore ebx   
141 [0x8d]:           call @2967 // <std#string.operator+>   
142 [0x8e]:           istore 1791   
144 [0x90]:           pushl 1   
145 [0x91]:           call @1846 // <std.io#thread.thread>   
146 [0x92]:           popobj2    
147 [0x93]:           smovr_3 fp+2   
148 [0x94]: line: 148 movg @20 // @std.io.task#__srt_global   
149 [0x95]:           movn #5   
151 [0x97]:           movn #1   
153 [0x99]:           pushobj   
154 [0x9a]:           pushl 2   
155 [0x9b]:           pushl 4   
156 [0x9c]:           call @3278 // <std#hashtable<std.io#thread,std.io.task#job_controller>.put>   
157 [0x9d]:           pop   
158 [0x9e]:           nop   
159 [0x9f]:           nop   
160 [0xa0]:           nop   
161 [0xa1]: line: 153 movl 2   
162 [0xa2]:           returnobj   
163 [0xa3]:           ret   


function: std.io.task#__srt_global.kill_threads[1827] params(0) in file: lib\support\0.2.805/io//task//job_scheduler.sharp:157:12: note:  
		private def kill_threads() {
		           ^

0 [0x0]: line: 158 movg @20 // @std.io.task#__srt_global   
1 [0x1]:           movn #5   
3 [0x3]:           movn #2   
5 [0x5]:           smovr_3 fp+0   
6 [0x6]: line: 160 call @3044 // <std#time.mills_time>   
7 [0x7]:           movg @20 // @std.io.task#__srt_global   
8 [0x8]:           movn #4   
10 [0xa]:           loadval ebx   
11 [0xb]:           movi #0, adx   
13 [0xd]:           rmov adx, ebx   
14 [0xe]: line: 161 pushl 0   
15 [0xf]:           istore 3533   
17 [0x11]:           call @1887 // <std.io#thread_group.find>   
18 [0x12]:           popobj2    
19 [0x13]:           smovr_3 fp+1   
20 [0x14]: line: 170 movl 1   
21 [0x15]:           checknull   
22 [0x16]:           not ebx, ebx   
23 [0x17]:           movr cmt, ebx   
24 [0x18]:           jne 28   
25 [0x19]: line: 171 pushl 1   
26 [0x1a]:           call @1854 // <std.io#thread.interrupt>   
27 [0x1b]:           pop   
28 [0x1c]:           nop   
29 [0x1d]: line: 174 movg @20 // @std.io.task#__srt_global   
30 [0x1e]:           movn #5   
32 [0x20]:           movn #3   
34 [0x22]:           smovr_3 fp+0   
35 [0x23]: line: 176 pushl 0   
36 [0x24]:           istore 3534   
38 [0x26]:           call @1887 // <std.io#thread_group.find>   
39 [0x27]:           popobj2    
40 [0x28]:           smovr_3 fp+1   
41 [0x29]: line: 183 movl 1   
42 [0x2a]:           checknull   
43 [0x2b]:           not ebx, ebx   
44 [0x2c]:           movr cmt, ebx   
45 [0x2d]:           jne 49   
46 [0x2e]: line: 184 pushl 1   
47 [0x2f]:           call @1854 // <std.io#thread.interrupt>   
48 [0x30]:           pop   
49 [0x31]:           nop   
50 [0x32]:           ret   


function: std.io.task#__srt_global.execute_synchronous[1828] params(1) in file: lib\support\0.2.805/io//task//job_scheduler.sharp:188:14: note:  
		protected def execute_synchronous(scheduled_job : job) {
		             ^

0 [0x0]: line: 189 movl 0   
1 [0x1]:           movn #12   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #0, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           tne ecx, ebx   
11 [0xb]:           jne 35   
12 [0xc]: line: 190 movl 0   
13 [0xd]:           movn #12   
15 [0xf]:           movi #0, adx   
17 [0x11]:           iaload ebx, adx   
18 [0x12]:           rstore ebx   
19 [0x13]:           call @3044 // <std#time.mills_time>   
20 [0x14]:           loadval ebx   
21 [0x15]:           loadval ecx   
22 [0x16]:           sub ecx, ebx -> ebx   
23 [0x17]:           smovr_2 ebx, fp+1   
24 [0x18]: line: 191 ipushl #1   
25 [0x19]:           movi #0, ebx   
27 [0x1b]:           loadval ecx   
28 [0x1c]:           gt ecx, ebx   
29 [0x1d]:           movr ebx, cmt   
30 [0x1e]:           movr cmt, ebx   
31 [0x1f]:           jne 34   
32 [0x20]:           ipushl #1   
33 [0x21]:           call @1856 // <std.io#thread.sleep>   
34 [0x22]:           nop   
35 [0x23]:           nop   
36 [0x24]: line: 193 pushl 0   
37 [0x25]:           call @1792 // <std.io.task#job.execute>   
38 [0x26]:           ret   


function: std.io.task#__srt_global.execute_job[1829] params(1) in file: lib\support\0.2.805/io//task//job_scheduler.sharp:196:14: note:  
		protected def execute_job(scheduled_job : job) : var {
		             ^

0 [0x0]: line: 197 movl 0   
1 [0x1]:           movn #17   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           call @1826 // <std.io.task#__srt_global.get_host>   
8 [0x8]:           popobj2    
9 [0x9]:           smovr_3 fp+1   
10 [0xa]: line: 199 movl 1   
11 [0xb]:           checknull   
12 [0xc]:           not ebx, ebx   
13 [0xd]:           movr cmt, ebx   
14 [0xe]:           jne 55   
15 [0xf]: line: 200 pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #4   
19 [0x13]:           popobj   
20 [0x14]: line: 201 movg @20 // @std.io.task#__srt_global   
21 [0x15]:           movn #5   
23 [0x17]:           pushobj   
24 [0x18]:           pushl 1   
25 [0x19]:           call @1818 // <std.io.task#job_master.get_host_controller>   
26 [0x1a]:           movl 0   
27 [0x1b]:           movn #19   
29 [0x1d]:           popobj   
30 [0x1e]: line: 202 pushl 0   
31 [0x1f]:           call @1780 // <std.io.task#job.execute_async>   
32 [0x20]:           loadval ebx   
33 [0x21]:           rstore ebx   
34 [0x22]:           movi #0, ebx   
36 [0x24]:           loadval ecx   
37 [0x25]:           tne ecx, ebx   
38 [0x26]:           jne 50   
39 [0x27]: line: 203 movl 0   
40 [0x28]:           movn #4   
42 [0x2a]:           del   
43 [0x2b]: line: 204 movl 0   
44 [0x2c]:           movn #19   
46 [0x2e]:           del   
47 [0x2f]: line: 205 istorel 0, fp+0   
49 [0x31]:           ret   
50 [0x32]:           nop   
51 [0x33]: line: 208 istorel 1, fp+0   
53 [0x35]:           ret   
54 [0x36]:           jmp @58   
55 [0x37]: line: 209 istorel 0, fp+0   
57 [0x39]:           ret   
58 [0x3a]:           nop   


function: std.io.task#__srt_global.finish[1830] params(0) in file: lib\support\0.2.805/io//task//task.sharp:5:4: note:  
		def finish() {
		   ^

0 [0x0]: line: 6 new_class @21 // std.io.task#cancellation_exception   
1 [0x1]:         dup    
2 [0x2]:         call @1777 // <std.io.task#cancellation_exception.cancellation_exception>   
3 [0x3]:         throw    
4 [0x4]:         ret   


function: std.io.task#task.with_timeout[1831] params(1) in file: lib\support\0.2.805/io//task//task.sharp:10:15: note:  
		    static def with_timeout(mills_time : var) : job_builder {
		              ^

0 [0x0]: line: 11 movg @20 // @std.io.task#__srt_global   
1 [0x1]:          movn #5   
3 [0x3]:          pushobj   
4 [0x4]:          call @1815 // <std.io.task#job_master.create_job>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+1   
7 [0x7]: line: 12 new_class @23 // std.io.task#job_builder   
8 [0x8]:          dup    
9 [0x9]:          pushl 1   
10 [0xa]:          movg @20 // @std.io.task#__srt_global   
11 [0xb]:          movn #5   
13 [0xd]:          pushobj   
14 [0xe]:          call @1799 // <std.io.task#job_builder.job_builder>   
15 [0xf]:          popobj2    
16 [0x10]:          smovr_3 fp+2   
17 [0x11]: line: 13 pushl 2   
18 [0x12]:          ipushl #0   
19 [0x13]:          call @1800 // <std.io.task#job_builder.with_timeout>   
20 [0x14]:          popobj2    
21 [0x15]:          returnobj   
22 [0x16]:          ret   


function: std.io.task#task.schedule[1832] params(1) in file: lib\support\0.2.805/io//task//task.sharp:16:15: note:  
		    static def schedule(future : var) : job_builder {
		              ^

0 [0x0]: line: 17 movg @20 // @std.io.task#__srt_global   
1 [0x1]:          movn #5   
3 [0x3]:          pushobj   
4 [0x4]:          call @1815 // <std.io.task#job_master.create_job>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+1   
7 [0x7]: line: 18 new_class @23 // std.io.task#job_builder   
8 [0x8]:          dup    
9 [0x9]:          pushl 1   
10 [0xa]:          movg @20 // @std.io.task#__srt_global   
11 [0xb]:          movn #5   
13 [0xd]:          pushobj   
14 [0xe]:          call @1799 // <std.io.task#job_builder.job_builder>   
15 [0xf]:          popobj2    
16 [0x10]:          smovr_3 fp+2   
17 [0x11]: line: 19 pushl 2   
18 [0x12]:          ipushl #0   
19 [0x13]:          call @1801 // <std.io.task#job_builder.schedule>   
20 [0x14]:          popobj2    
21 [0x15]:          returnobj   
22 [0x16]:          ret   


function: std.io.task#task.with_name[1833] params(1) in file: lib\support\0.2.805/io//task//task.sharp:22:15: note:  
		    static def with_name(job_name : string) : job_builder {
		              ^

0 [0x0]: line: 23 movg @20 // @std.io.task#__srt_global   
1 [0x1]:          movn #5   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 0   
5 [0x5]:          call @1816 // <std.io.task#job_master.create_job>   
6 [0x6]:          popobj2    
7 [0x7]:          smovr_3 fp+1   
8 [0x8]: line: 24 new_class @23 // std.io.task#job_builder   
9 [0x9]:          dup    
10 [0xa]:          pushl 1   
11 [0xb]:          movg @20 // @std.io.task#__srt_global   
12 [0xc]:          movn #5   
14 [0xe]:          pushobj   
15 [0xf]:          call @1799 // <std.io.task#job_builder.job_builder>   
16 [0x10]:          popobj2    
17 [0x11]:          smovr_3 fp+2   
18 [0x12]: line: 25 pushl 2   
19 [0x13]:          pushl 0   
20 [0x14]:          call @1803 // <std.io.task#job_builder.with_name>   
21 [0x15]:          popobj2    
22 [0x16]:          returnobj   
23 [0x17]:          ret   


function: std.io.task#task.with_args[1834] params(1) in file: lib\support\0.2.805/io//task//task.sharp:28:15: note:  
		    static def with_args(args : object[]) : job_builder {
		              ^

0 [0x0]: line: 29 movg @20 // @std.io.task#__srt_global   
1 [0x1]:          movn #5   
3 [0x3]:          pushobj   
4 [0x4]:          call @1815 // <std.io.task#job_master.create_job>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+1   
7 [0x7]: line: 30 new_class @23 // std.io.task#job_builder   
8 [0x8]:          dup    
9 [0x9]:          pushl 1   
10 [0xa]:          movg @20 // @std.io.task#__srt_global   
11 [0xb]:          movn #5   
13 [0xd]:          pushobj   
14 [0xe]:          call @1799 // <std.io.task#job_builder.job_builder>   
15 [0xf]:          popobj2    
16 [0x10]:          smovr_3 fp+2   
17 [0x11]: line: 31 pushl 2   
18 [0x12]:          pushl 0   
19 [0x13]:          call @1804 // <std.io.task#job_builder.with_args>   
20 [0x14]:          popobj2    
21 [0x15]:          returnobj   
22 [0x16]:          ret   


function: std.io.task#task.block[1835] params(0) in file: lib\support\0.2.805/io//task//task.sharp:34:12: note:  
			static def block() : job_builder {
		           ^

0 [0x0]: line: 35 movg @20 // @std.io.task#__srt_global   
1 [0x1]:          movn #5   
3 [0x3]:          pushobj   
4 [0x4]:          call @1815 // <std.io.task#job_master.create_job>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+0   
7 [0x7]: line: 36 new_class @23 // std.io.task#job_builder   
8 [0x8]:          dup    
9 [0x9]:          pushl 0   
10 [0xa]:          movg @20 // @std.io.task#__srt_global   
11 [0xb]:          movn #5   
13 [0xd]:          pushobj   
14 [0xe]:          call @1799 // <std.io.task#job_builder.job_builder>   
15 [0xf]:          popobj2    
16 [0x10]:          smovr_3 fp+1   
17 [0x11]: line: 37 pushl 1   
18 [0x12]:          call @1805 // <std.io.task#job_builder.block>   
19 [0x13]:          popobj2    
20 [0x14]:          returnobj   
21 [0x15]:          ret   


function: std.io.task#task.long_term[1836] params(0) in file: lib\support\0.2.805/io//task//task.sharp:40:12: note:  
			static def long_term() : job_builder {
		           ^

0 [0x0]: line: 41 movg @20 // @std.io.task#__srt_global   
1 [0x1]:          movn #5   
3 [0x3]:          pushobj   
4 [0x4]:          call @1815 // <std.io.task#job_master.create_job>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+0   
7 [0x7]: line: 42 new_class @23 // std.io.task#job_builder   
8 [0x8]:          dup    
9 [0x9]:          pushl 0   
10 [0xa]:          movg @20 // @std.io.task#__srt_global   
11 [0xb]:          movn #5   
13 [0xd]:          pushobj   
14 [0xe]:          call @1799 // <std.io.task#job_builder.job_builder>   
15 [0xf]:          popobj2    
16 [0x10]:          smovr_3 fp+1   
17 [0x11]: line: 43 pushl 1   
18 [0x12]:          call @1806 // <std.io.task#job_builder.long_term>   
19 [0x13]:          popobj2    
20 [0x14]:          returnobj   
21 [0x15]:          ret   


function: std.io.task#task.builder[1837] params(0) in file: lib\support\0.2.805/io//task//task.sharp:46:15: note:  
		    static def builder() : job_builder {
		              ^

0 [0x0]: line: 47 movg @20 // @std.io.task#__srt_global   
1 [0x1]:          movn #5   
3 [0x3]:          pushobj   
4 [0x4]:          call @1815 // <std.io.task#job_master.create_job>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+0   
7 [0x7]: line: 48 new_class @23 // std.io.task#job_builder   
8 [0x8]:          dup    
9 [0x9]:          pushl 0   
10 [0xa]:          movg @20 // @std.io.task#__srt_global   
11 [0xb]:          movn #5   
13 [0xd]:          pushobj   
14 [0xe]:          call @1799 // <std.io.task#job_builder.job_builder>   
15 [0xf]:          popobj2    
16 [0x10]:          smovr_3 fp+1   
17 [0x11]: line: 49 movl 1   
18 [0x12]:          returnobj   
19 [0x13]:          ret   


function: std.io.task#task.cancel_all_jobs_by_name[1838] params(1) in file: lib\support\0.2.805/io//task//task.sharp:52:19: note:  
			public static def cancel_all_jobs_by_name(name: string) {
		                  ^

0 [0x0]: line: 53 movg @20 // @std.io.task#__srt_global   
1 [0x1]:          movn #5   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 0   
5 [0x5]:          call @1820 // <std.io.task#job_master.cancel_jobs_by_name>   
6 [0x6]:          ret   


constructor: std.io.task#task.task[1839] params(0) in file: lib\support\0.2.805/io//task//task.sharp:9:6: note:  
		class task {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std.io#thread.thread[1840] params(0) in file: lib\support\0.2.805/io//thread.sharp:7:19: note:  
		    private thread() {} // the user must use standardized constructor
		                  ^

0 [0x0]:         new_class @64 // std#string   
1 [0x1]:         dup    
2 [0x2]:         newstr @22 //    
3 [0x3]:         call @2935 // <std#string.string>   
4 [0x4]:         movl 0   
5 [0x5]:         movn #6   
7 [0x7]:         popobj   
8 [0x8]:         pushl 0   
9 [0x9]:         ret   


constructor: std.io#thread.thread[1841] params(2) in file: lib\support\0.2.805/io//thread.sharp:9:15: note:  
			public thread(name : string, main: (object[])(var)) {
		              ^

0 [0x0]:         new_class @64 // std#string   
1 [0x1]:         dup    
2 [0x2]:         newstr @22 //    
3 [0x3]:         call @2935 // <std#string.string>   
4 [0x4]:         movl 0   
5 [0x5]:         movn #6   
7 [0x7]:         popobj   
8 [0x8]:         pushl 0   
9 [0x9]: line: 10 ipushl #2   
10 [0xa]:          movl 0   
11 [0xb]:          movn #11   
13 [0xd]:          loadval ebx   
14 [0xe]:          movi #0, adx   
16 [0x10]:          rmov adx, ebx   
17 [0x11]: line: 11 pushl 1   
18 [0x12]:          movl 0   
19 [0x13]:          movn #6   
21 [0x15]:          popobj   
22 [0x16]: line: 12 movg @29 // @std.io#thread_group   
23 [0x17]:          movn #0   
25 [0x19]:          pushobj   
26 [0x1a]:          movl 0   
27 [0x1b]:          movn #7   
29 [0x1d]:          popobj   
30 [0x1e]: line: 13 movl 0   
31 [0x1f]:          movn #7   
33 [0x21]:          pushobj   
34 [0x22]:          call @1884 // <std.io#thread_group.get_priority>   
35 [0x23]:          movl 0   
36 [0x24]:          movn #3   
38 [0x26]:          popobj   
39 [0x27]: line: 14 movi #-1, ebx   
41 [0x29]:          movl 0   
42 [0x2a]:          movn #1   
44 [0x2c]:          movi #0, adx   
46 [0x2e]:          rmov adx, ebx   
47 [0x2f]: line: 15 movg @28 // @std.io#thread   
48 [0x30]:          movn #0   
50 [0x32]:          movi #0, adx   
52 [0x34]:          iaload ebx, adx   
53 [0x35]:          movr egx, ebx   
54 [0x36]:          inc ebx   
55 [0x37]:          movi #0, adx   
57 [0x39]:          rmov adx, ebx   
58 [0x3a]:          rstore egx   
59 [0x3b]:          movl 0   
60 [0x3c]:          movn #2   
62 [0x3e]:          loadval ebx   
63 [0x3f]:          movi #0, adx   
65 [0x41]:          rmov adx, ebx   
66 [0x42]: line: 17 movl 0   
67 [0x43]:          movn #7   
69 [0x45]:          pushobj   
70 [0x46]:          pushl 0   
71 [0x47]:          call @1881 // <std.io#thread_group.add>   
72 [0x48]:          ret   


constructor: std.io#thread.thread[1842] params(3) in file: lib\support\0.2.805/io//thread.sharp:20:15: note:  
			public thread(name : string, daemon: var, main: (object[])(var)) {
		              ^

0 [0x0]:         new_class @64 // std#string   
1 [0x1]:         dup    
2 [0x2]:         newstr @22 //    
3 [0x3]:         call @2935 // <std#string.string>   
4 [0x4]:         movl 0   
5 [0x5]:         movn #6   
7 [0x7]:         popobj   
8 [0x8]:         pushl 0   
9 [0x9]: line: 21 ipushl #3   
10 [0xa]:          movl 0   
11 [0xb]:          movn #11   
13 [0xd]:          loadval ebx   
14 [0xe]:          movi #0, adx   
16 [0x10]:          rmov adx, ebx   
17 [0x11]: line: 22 pushl 1   
18 [0x12]:          movl 0   
19 [0x13]:          movn #6   
21 [0x15]:          popobj   
22 [0x16]: line: 23 ipushl #2   
23 [0x17]:          movl 0   
24 [0x18]:          movn #4   
26 [0x1a]:          loadval ebx   
27 [0x1b]:          movi #0, adx   
29 [0x1d]:          rmov adx, ebx   
30 [0x1e]: line: 24 movg @29 // @std.io#thread_group   
31 [0x1f]:          movn #0   
33 [0x21]:          pushobj   
34 [0x22]:          movl 0   
35 [0x23]:          movn #7   
37 [0x25]:          popobj   
38 [0x26]: line: 25 movl 0   
39 [0x27]:          movn #7   
41 [0x29]:          pushobj   
42 [0x2a]:          call @1884 // <std.io#thread_group.get_priority>   
43 [0x2b]:          movl 0   
44 [0x2c]:          movn #3   
46 [0x2e]:          popobj   
47 [0x2f]: line: 26 movi #-1, ebx   
49 [0x31]:          movl 0   
50 [0x32]:          movn #1   
52 [0x34]:          movi #0, adx   
54 [0x36]:          rmov adx, ebx   
55 [0x37]: line: 27 movg @28 // @std.io#thread   
56 [0x38]:          movn #0   
58 [0x3a]:          movi #0, adx   
60 [0x3c]:          iaload ebx, adx   
61 [0x3d]:          movr egx, ebx   
62 [0x3e]:          inc ebx   
63 [0x3f]:          movi #0, adx   
65 [0x41]:          rmov adx, ebx   
66 [0x42]:          rstore egx   
67 [0x43]:          movl 0   
68 [0x44]:          movn #2   
70 [0x46]:          loadval ebx   
71 [0x47]:          movi #0, adx   
73 [0x49]:          rmov adx, ebx   
74 [0x4a]: line: 29 movl 0   
75 [0x4b]:          movn #7   
77 [0x4d]:          pushobj   
78 [0x4e]:          pushl 0   
79 [0x4f]:          call @1881 // <std.io#thread_group.add>   
80 [0x50]:          ret   


constructor: std.io#thread.thread[1843] params(3) in file: lib\support\0.2.805/io//thread.sharp:32:18: note:  
		    public thread(name : string, main: (object[])(var), stack_size : var) {
		                 ^

0 [0x0]:         new_class @64 // std#string   
1 [0x1]:         dup    
2 [0x2]:         newstr @22 //    
3 [0x3]:         call @2935 // <std#string.string>   
4 [0x4]:         movl 0   
5 [0x5]:         movn #6   
7 [0x7]:         popobj   
8 [0x8]:         pushl 0   
9 [0x9]: line: 33 ipushl #2   
10 [0xa]:          movl 0   
11 [0xb]:          movn #11   
13 [0xd]:          loadval ebx   
14 [0xe]:          movi #0, adx   
16 [0x10]:          rmov adx, ebx   
17 [0x11]: line: 34 pushl 1   
18 [0x12]:          movl 0   
19 [0x13]:          movn #6   
21 [0x15]:          popobj   
22 [0x16]: line: 35 ipushl #3   
23 [0x17]:          movl 0   
24 [0x18]:          movn #10   
26 [0x1a]:          loadval ebx   
27 [0x1b]:          movi #0, adx   
29 [0x1d]:          rmov adx, ebx   
30 [0x1e]: line: 36 movg @29 // @std.io#thread_group   
31 [0x1f]:          movn #0   
33 [0x21]:          pushobj   
34 [0x22]:          movl 0   
35 [0x23]:          movn #7   
37 [0x25]:          popobj   
38 [0x26]: line: 37 movl 0   
39 [0x27]:          movn #7   
41 [0x29]:          pushobj   
42 [0x2a]:          call @1884 // <std.io#thread_group.get_priority>   
43 [0x2b]:          movl 0   
44 [0x2c]:          movn #3   
46 [0x2e]:          popobj   
47 [0x2f]: line: 38 movi #-1, ebx   
49 [0x31]:          movl 0   
50 [0x32]:          movn #1   
52 [0x34]:          movi #0, adx   
54 [0x36]:          rmov adx, ebx   
55 [0x37]: line: 39 movg @28 // @std.io#thread   
56 [0x38]:          movn #0   
58 [0x3a]:          movi #0, adx   
60 [0x3c]:          iaload ebx, adx   
61 [0x3d]:          movr egx, ebx   
62 [0x3e]:          inc ebx   
63 [0x3f]:          movi #0, adx   
65 [0x41]:          rmov adx, ebx   
66 [0x42]:          rstore egx   
67 [0x43]:          movl 0   
68 [0x44]:          movn #2   
70 [0x46]:          loadval ebx   
71 [0x47]:          movi #0, adx   
73 [0x49]:          rmov adx, ebx   
74 [0x4a]: line: 41 movl 0   
75 [0x4b]:          movn #7   
77 [0x4d]:          pushobj   
78 [0x4e]:          pushl 0   
79 [0x4f]:          call @1881 // <std.io#thread_group.add>   
80 [0x50]:          ret   


constructor: std.io#thread.thread[1844] params(4) in file: lib\support\0.2.805/io//thread.sharp:44:18: note:  
		    public thread(name : string, daemon: var, main: (object[])(var), stack_size : var) {
		                 ^

0 [0x0]:         new_class @64 // std#string   
1 [0x1]:         dup    
2 [0x2]:         newstr @22 //    
3 [0x3]:         call @2935 // <std#string.string>   
4 [0x4]:         movl 0   
5 [0x5]:         movn #6   
7 [0x7]:         popobj   
8 [0x8]:         pushl 0   
9 [0x9]: line: 45 ipushl #3   
10 [0xa]:          movl 0   
11 [0xb]:          movn #11   
13 [0xd]:          loadval ebx   
14 [0xe]:          movi #0, adx   
16 [0x10]:          rmov adx, ebx   
17 [0x11]: line: 46 pushl 1   
18 [0x12]:          movl 0   
19 [0x13]:          movn #6   
21 [0x15]:          popobj   
22 [0x16]: line: 47 ipushl #4   
23 [0x17]:          movl 0   
24 [0x18]:          movn #10   
26 [0x1a]:          loadval ebx   
27 [0x1b]:          movi #0, adx   
29 [0x1d]:          rmov adx, ebx   
30 [0x1e]: line: 48 ipushl #2   
31 [0x1f]:          movl 0   
32 [0x20]:          movn #4   
34 [0x22]:          loadval ebx   
35 [0x23]:          movi #0, adx   
37 [0x25]:          rmov adx, ebx   
38 [0x26]: line: 49 movg @29 // @std.io#thread_group   
39 [0x27]:          movn #0   
41 [0x29]:          pushobj   
42 [0x2a]:          movl 0   
43 [0x2b]:          movn #7   
45 [0x2d]:          popobj   
46 [0x2e]: line: 50 movl 0   
47 [0x2f]:          movn #7   
49 [0x31]:          pushobj   
50 [0x32]:          call @1884 // <std.io#thread_group.get_priority>   
51 [0x33]:          movl 0   
52 [0x34]:          movn #3   
54 [0x36]:          popobj   
55 [0x37]: line: 51 movi #-1, ebx   
57 [0x39]:          movl 0   
58 [0x3a]:          movn #1   
60 [0x3c]:          movi #0, adx   
62 [0x3e]:          rmov adx, ebx   
63 [0x3f]: line: 52 movg @28 // @std.io#thread   
64 [0x40]:          movn #0   
66 [0x42]:          movi #0, adx   
68 [0x44]:          iaload ebx, adx   
69 [0x45]:          movr egx, ebx   
70 [0x46]:          inc ebx   
71 [0x47]:          movi #0, adx   
73 [0x49]:          rmov adx, ebx   
74 [0x4a]:          rstore egx   
75 [0x4b]:          movl 0   
76 [0x4c]:          movn #2   
78 [0x4e]:          loadval ebx   
79 [0x4f]:          movi #0, adx   
81 [0x51]:          rmov adx, ebx   
82 [0x52]: line: 54 movl 0   
83 [0x53]:          movn #7   
85 [0x55]:          pushobj   
86 [0x56]:          pushl 0   
87 [0x57]:          call @1881 // <std.io#thread_group.add>   
88 [0x58]:          ret   


constructor: std.io#thread.thread[1845] params(4) in file: lib\support\0.2.805/io//thread.sharp:57:18: note:  
		    public thread(name : string, main: (object[])(var), stack_size : var, group : thread_group) {
		                 ^

0 [0x0]:         new_class @64 // std#string   
1 [0x1]:         dup    
2 [0x2]:         newstr @22 //    
3 [0x3]:         call @2935 // <std#string.string>   
4 [0x4]:         movl 0   
5 [0x5]:         movn #6   
7 [0x7]:         popobj   
8 [0x8]:         pushl 0   
9 [0x9]: line: 58 ipushl #2   
10 [0xa]:          movl 0   
11 [0xb]:          movn #11   
13 [0xd]:          loadval ebx   
14 [0xe]:          movi #0, adx   
16 [0x10]:          rmov adx, ebx   
17 [0x11]: line: 59 pushl 1   
18 [0x12]:          movl 0   
19 [0x13]:          movn #6   
21 [0x15]:          popobj   
22 [0x16]: line: 60 ipushl #3   
23 [0x17]:          movl 0   
24 [0x18]:          movn #10   
26 [0x1a]:          loadval ebx   
27 [0x1b]:          movi #0, adx   
29 [0x1d]:          rmov adx, ebx   
30 [0x1e]: line: 61 pushl 4   
31 [0x1f]:          movl 0   
32 [0x20]:          movn #7   
34 [0x22]:          popobj   
35 [0x23]: line: 62 pushl 4   
36 [0x24]:          call @1884 // <std.io#thread_group.get_priority>   
37 [0x25]:          movl 0   
38 [0x26]:          movn #3   
40 [0x28]:          popobj   
41 [0x29]: line: 63 movi #-1, ebx   
43 [0x2b]:          movl 0   
44 [0x2c]:          movn #1   
46 [0x2e]:          movi #0, adx   
48 [0x30]:          rmov adx, ebx   
49 [0x31]: line: 64 movg @28 // @std.io#thread   
50 [0x32]:          movn #0   
52 [0x34]:          movi #0, adx   
54 [0x36]:          iaload ebx, adx   
55 [0x37]:          movr egx, ebx   
56 [0x38]:          inc ebx   
57 [0x39]:          movi #0, adx   
59 [0x3b]:          rmov adx, ebx   
60 [0x3c]:          rstore egx   
61 [0x3d]:          movl 0   
62 [0x3e]:          movn #2   
64 [0x40]:          loadval ebx   
65 [0x41]:          movi #0, adx   
67 [0x43]:          rmov adx, ebx   
68 [0x44]: line: 66 movl 0   
69 [0x45]:          movn #7   
71 [0x47]:          pushobj   
72 [0x48]:          pushl 0   
73 [0x49]:          call @1881 // <std.io#thread_group.add>   
74 [0x4a]:          ret   


constructor: std.io#thread.thread[1846] params(3) in file: lib\support\0.2.805/io//thread.sharp:69:18: note:  
		    public thread(name : string, main: (object[])(var), group : thread_group) {
		                 ^

0 [0x0]:         new_class @64 // std#string   
1 [0x1]:         dup    
2 [0x2]:         newstr @22 //    
3 [0x3]:         call @2935 // <std#string.string>   
4 [0x4]:         movl 0   
5 [0x5]:         movn #6   
7 [0x7]:         popobj   
8 [0x8]:         pushl 0   
9 [0x9]: line: 70 ipushl #2   
10 [0xa]:          movl 0   
11 [0xb]:          movn #11   
13 [0xd]:          loadval ebx   
14 [0xe]:          movi #0, adx   
16 [0x10]:          rmov adx, ebx   
17 [0x11]: line: 71 pushl 1   
18 [0x12]:          movl 0   
19 [0x13]:          movn #6   
21 [0x15]:          popobj   
22 [0x16]: line: 72 pushl 3   
23 [0x17]:          movl 0   
24 [0x18]:          movn #7   
26 [0x1a]:          popobj   
27 [0x1b]: line: 73 pushl 3   
28 [0x1c]:          call @1884 // <std.io#thread_group.get_priority>   
29 [0x1d]:          movl 0   
30 [0x1e]:          movn #3   
32 [0x20]:          popobj   
33 [0x21]: line: 74 movi #-1, ebx   
35 [0x23]:          movl 0   
36 [0x24]:          movn #1   
38 [0x26]:          movi #0, adx   
40 [0x28]:          rmov adx, ebx   
41 [0x29]: line: 75 movg @28 // @std.io#thread   
42 [0x2a]:          movn #0   
44 [0x2c]:          movi #0, adx   
46 [0x2e]:          iaload ebx, adx   
47 [0x2f]:          movr egx, ebx   
48 [0x30]:          inc ebx   
49 [0x31]:          movi #0, adx   
51 [0x33]:          rmov adx, ebx   
52 [0x34]:          rstore egx   
53 [0x35]:          movl 0   
54 [0x36]:          movn #2   
56 [0x38]:          loadval ebx   
57 [0x39]:          movi #0, adx   
59 [0x3b]:          rmov adx, ebx   
60 [0x3c]: line: 77 movl 0   
61 [0x3d]:          movn #7   
63 [0x3f]:          pushobj   
64 [0x40]:          pushl 0   
65 [0x41]:          call @1881 // <std.io#thread_group.add>   
66 [0x42]:          ret   


constructor: std.io#thread.thread[1847] params(5) in file: lib\support\0.2.805/io//thread.sharp:80:18: note:  
		    public thread(name : string, daemon: var, main: (object[])(var), stack_size : var, group : thread_group) {
		                 ^

0 [0x0]:         new_class @64 // std#string   
1 [0x1]:         dup    
2 [0x2]:         newstr @22 //    
3 [0x3]:         call @2935 // <std#string.string>   
4 [0x4]:         movl 0   
5 [0x5]:         movn #6   
7 [0x7]:         popobj   
8 [0x8]:         pushl 0   
9 [0x9]: line: 81 ipushl #3   
10 [0xa]:          movl 0   
11 [0xb]:          movn #11   
13 [0xd]:          loadval ebx   
14 [0xe]:          movi #0, adx   
16 [0x10]:          rmov adx, ebx   
17 [0x11]: line: 82 pushl 1   
18 [0x12]:          movl 0   
19 [0x13]:          movn #6   
21 [0x15]:          popobj   
22 [0x16]: line: 83 ipushl #2   
23 [0x17]:          movl 0   
24 [0x18]:          movn #4   
26 [0x1a]:          loadval ebx   
27 [0x1b]:          movi #0, adx   
29 [0x1d]:          rmov adx, ebx   
30 [0x1e]: line: 84 ipushl #4   
31 [0x1f]:          movl 0   
32 [0x20]:          movn #10   
34 [0x22]:          loadval ebx   
35 [0x23]:          movi #0, adx   
37 [0x25]:          rmov adx, ebx   
38 [0x26]: line: 85 pushl 5   
39 [0x27]:          movl 0   
40 [0x28]:          movn #7   
42 [0x2a]:          popobj   
43 [0x2b]: line: 86 pushl 5   
44 [0x2c]:          call @1884 // <std.io#thread_group.get_priority>   
45 [0x2d]:          movl 0   
46 [0x2e]:          movn #3   
48 [0x30]:          popobj   
49 [0x31]: line: 87 movi #-1, ebx   
51 [0x33]:          movl 0   
52 [0x34]:          movn #1   
54 [0x36]:          movi #0, adx   
56 [0x38]:          rmov adx, ebx   
57 [0x39]: line: 88 movg @28 // @std.io#thread   
58 [0x3a]:          movn #0   
60 [0x3c]:          movi #0, adx   
62 [0x3e]:          iaload ebx, adx   
63 [0x3f]:          movr egx, ebx   
64 [0x40]:          inc ebx   
65 [0x41]:          movi #0, adx   
67 [0x43]:          rmov adx, ebx   
68 [0x44]:          rstore egx   
69 [0x45]:          movl 0   
70 [0x46]:          movn #2   
72 [0x48]:          loadval ebx   
73 [0x49]:          movi #0, adx   
75 [0x4b]:          rmov adx, ebx   
76 [0x4c]: line: 90 movl 0   
77 [0x4d]:          movn #7   
79 [0x4f]:          pushobj   
80 [0x50]:          pushl 0   
81 [0x51]:          call @1881 // <std.io#thread_group.add>   
82 [0x52]:          ret   


function: std.io#thread.start[1848] params(1) in file: lib\support\0.2.805/io//thread.sharp:93:15: note:  
		    public def start(args : object[]) : thread_result {
		              ^

0 [0x0]: line: 94 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #-1, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          jne 27   
12 [0xc]: line: 95 movl 0   
13 [0xd]:          movn #4   
15 [0xf]:          movi #0, adx   
17 [0x11]:          iaload ebx, adx   
18 [0x12]:          rstore ebx   
19 [0x13]:          call @1958 // <platform.kernel#vm.thread_create>   
20 [0x14]:          movl 0   
21 [0x15]:          movn #1   
23 [0x17]:          loadval ebx   
24 [0x18]:          movi #0, adx   
26 [0x1a]:          rmov adx, ebx   
27 [0x1b]:          nop   
28 [0x1c]: line: 96 pushl 0   
29 [0x1d]:          pushl 1   
30 [0x1e]:          call @1967 // <platform.kernel#vm.thread_start>   
31 [0x1f]:          popobj2    
32 [0x20]:          returnobj   
33 [0x21]:          ret   


function: std.io#thread.start[1849] params(0) in file: lib\support\0.2.805/io//thread.sharp:99:15: note:  
		    public def start() : thread_result {
		              ^

0 [0x0]: line: 100 pushl 0   
1 [0x1]:           pushnull    
2 [0x2]:           call @1848 // <std.io#thread.start>   
3 [0x3]:           popobj2    
4 [0x4]:           returnobj   
5 [0x5]:           ret   


function: std.io#thread.suspend[1850] params(0) in file: lib\support\0.2.805/io//thread.sharp:103:12: note:  
			public def suspend() : thread_result {
		           ^

0 [0x0]: line: 104 pushl 0   
1 [0x1]:           call @1959 // <platform.kernel#vm.suspend>   
2 [0x2]:           popobj2    
3 [0x3]:           smovr_3 fp+1   
4 [0x4]: line: 105 pushl 1   
5 [0x5]:           movg @31 // @std.io#thread_result   
6 [0x6]:           movn #0   
8 [0x8]:           pushobj   
9 [0x9]:           call @1616 // <std#_enum_.operator==>   
10 [0xa]:           loadval ebx   
11 [0xb]:           movr cmt, ebx   
12 [0xc]:           jne 21   
13 [0xd]: line: 106 movi #1, ebx   
15 [0xf]:           movl 0   
16 [0x10]:           movn #9   
18 [0x12]:           movi #0, adx   
20 [0x14]:           rmov adx, ebx   
21 [0x15]:           nop   
22 [0x16]: line: 107 movl 1   
23 [0x17]:           returnobj   
24 [0x18]:           ret   


function: std.io#thread.unsuspend[1851] params(0) in file: lib\support\0.2.805/io//thread.sharp:110:12: note:  
			public def unsuspend() : thread_result {
		           ^

0 [0x0]: line: 111 pushl 0   
1 [0x1]:           istore 0   
3 [0x3]:           call @1960 // <platform.kernel#vm.unsuspend>   
4 [0x4]:           popobj2    
5 [0x5]:           smovr_3 fp+1   
6 [0x6]: line: 112 pushl 1   
7 [0x7]:           movg @31 // @std.io#thread_result   
8 [0x8]:           movn #0   
10 [0xa]:           pushobj   
11 [0xb]:           call @1616 // <std#_enum_.operator==>   
12 [0xc]:           loadval ebx   
13 [0xd]:           movr cmt, ebx   
14 [0xe]:           jne 23   
15 [0xf]: line: 113 movi #0, ebx   
17 [0x11]:           movl 0   
18 [0x12]:           movn #9   
20 [0x14]:           movi #0, adx   
22 [0x16]:           rmov adx, ebx   
23 [0x17]:           nop   
24 [0x18]: line: 114 movl 1   
25 [0x19]:           returnobj   
26 [0x1a]:           ret   


function: std.io#thread.unsuspend_and_wait[1852] params(0) in file: lib\support\0.2.805/io//thread.sharp:117:12: note:  
			public def unsuspend_and_wait() : thread_result {
		           ^

0 [0x0]: line: 118 pushl 0   
1 [0x1]:           istore 1   
3 [0x3]:           call @1960 // <platform.kernel#vm.unsuspend>   
4 [0x4]:           popobj2    
5 [0x5]:           smovr_3 fp+1   
6 [0x6]: line: 119 pushl 1   
7 [0x7]:           movg @31 // @std.io#thread_result   
8 [0x8]:           movn #0   
10 [0xa]:           pushobj   
11 [0xb]:           call @1616 // <std#_enum_.operator==>   
12 [0xc]:           loadval ebx   
13 [0xd]:           movr cmt, ebx   
14 [0xe]:           jne 23   
15 [0xf]: line: 120 movi #0, ebx   
17 [0x11]:           movl 0   
18 [0x12]:           movn #9   
20 [0x14]:           movi #0, adx   
22 [0x16]:           rmov adx, ebx   
23 [0x17]:           nop   
24 [0x18]: line: 121 movl 1   
25 [0x19]:           returnobj   
26 [0x1a]:           ret   


function: std.io#thread.join[1853] params(0) in file: lib\support\0.2.805/io//thread.sharp:124:15: note:  
		    public def join() := vm.thread_join(self);
		              ^

0 [0x0]: line: 124 pushl 0   
1 [0x1]:           call @1962 // <platform.kernel#vm.thread_join>   
2 [0x2]:           popobj2    
3 [0x3]:           returnobj   
4 [0x4]:           ret   


function: std.io#thread.interrupt[1854] params(0) in file: lib\support\0.2.805/io//thread.sharp:126:15: note:  
		    public def interrupt() := vm.kill(self);
		              ^

0 [0x0]: line: 126 pushl 0   
1 [0x1]:           call @1963 // <platform.kernel#vm.kill>   
2 [0x2]:           popobj2    
3 [0x3]:           returnobj   
4 [0x4]:           ret   


function: std.io#thread.current[1855] params(0) in file: lib\support\0.2.805/io//thread.sharp:128:22: note:  
		    public static def current() := vm.current_thread();
		                     ^

0 [0x0]: line: 128 call @1964 // <platform.kernel#vm.current_thread>   
1 [0x1]:           popobj2    
2 [0x2]:           returnobj   
3 [0x3]:           ret   


function: std.io#thread.sleep[1856] params(1) in file: lib\support\0.2.805/io//thread.sharp:130:22: note:  
		    public static def sleep(mills_time : var) := time.sleep(milliseconds, mills_time);
		                     ^

0 [0x0]: line: 130 movg @68 // @std#time_unit   
1 [0x1]:           movn #1   
3 [0x3]:           pushobj   
4 [0x4]:           ipushl #0   
5 [0x5]:           call @3046 // <std#time.sleep>   
6 [0x6]:           ret   


function: std.io#thread.wait[1857] params(0) in file: lib\support\0.2.805/io//thread.sharp:132:22: note:  
		    public static def wait() {
		                     ^

0 [0x0]: line: 133 movg @66 // @std#time   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           call @1858 // <std.io#thread.wait>   
8 [0x8]:           ret   


function: std.io#thread.wait[1858] params(1) in file: lib\support\0.2.805/io//thread.sharp:136:22: note:  
		    public static def wait(mills_time : var) {
		                     ^

0 [0x0]: line: 137 istore 1   
2 [0x2]:           call @1964 // <platform.kernel#vm.current_thread>   
3 [0x3]:           popobj2    
4 [0x4]:           movn #9   
6 [0x6]:           loadval ebx   
7 [0x7]:           movi #0, adx   
9 [0x9]:           rmov adx, ebx   
10 [0xa]: line: 138 movg @68 // @std#time_unit   
11 [0xb]:           movn #1   
13 [0xd]:           pushobj   
14 [0xe]:           ipushl #0   
15 [0xf]:           call @3047 // <std#time.wait>   
16 [0x10]: line: 139 istore 0   
18 [0x12]:           call @1964 // <platform.kernel#vm.current_thread>   
19 [0x13]:           popobj2    
20 [0x14]:           movn #9   
22 [0x16]:           loadval ebx   
23 [0x17]:           movi #0, adx   
25 [0x19]:           rmov adx, ebx   
26 [0x1a]:           ret   


function: std.io#thread.exit[1859] params(1) in file: lib\support\0.2.805/io//thread.sharp:142:22: note:  
		    public static def exit(code : var) {
		                     ^

0 [0x0]: line: 143 call @1855 // <std.io#thread.current>   
1 [0x1]:           ipushl #0   
2 [0x2]:           call @1965 // <platform.kernel#vm.exit_thread>   
3 [0x3]: line: 144 hlt   : protected asm start
4 [0x4]:           ret   : protected asm end


function: std.io#thread.hash[1860] params(0) in file: lib\support\0.2.805/io//thread.sharp:147:8: note:  
		    def hash() : long {
		       ^

0 [0x0]: line: 148 new_class @45 // std#long   
1 [0x1]:           dup    
2 [0x2]:           movl 0   
3 [0x3]:           movn #2   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           rstore ebx   
9 [0x9]:           call @2077 // <std#long.long>   
10 [0xa]:           popobj2    
11 [0xb]:           returnobj   
12 [0xc]:           ret   


function: std.io#thread.yield[1861] params(0) in file: lib\support\0.2.805/io//thread.sharp:151:22: note:  
		    public static def yield() := vm.thread_yield();
		                     ^

0 [0x0]: line: 151 call @1966 // <platform.kernel#vm.thread_yield>   
1 [0x1]:           ret   


function: std.io#thread.set_exception_handler[1862] params(1) in file: lib\support\0.2.805/io//thread.sharp:153:15: note:  
		    public def set_exception_handler(error_handler: uncaught_exception_handler) {
		              ^

0 [0x0]: line: 154 pushl 1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #12   
4 [0x4]:           popobj   
5 [0x5]:           ret   


function: std.io#thread.set_priority[1863] params(1) in file: lib\support\0.2.805/io//thread.sharp:157:15: note:  
		    public def set_priority(priority : thread_priority) : thread_result {
		              ^

0 [0x0]: line: 158 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 159 pushl 1   
3 [0x3]:           movg @30 // @std.io#thread_priority   
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @1616 // <std#_enum_.operator==>   
8 [0x8]:           loadval ebx   
9 [0x9]:           movr cmt, ebx   
10 [0xa]:           je 29   
11 [0xb]:           pushl 1   
12 [0xc]:           movg @30 // @std.io#thread_priority   
13 [0xd]:           movn #1   
15 [0xf]:           pushobj   
16 [0x10]:           call @1616 // <std#_enum_.operator==>   
17 [0x11]:           loadval ebx   
18 [0x12]:           movr cmt, ebx   
19 [0x13]:           je 29   
20 [0x14]:           pushl 1   
21 [0x15]:           movg @30 // @std.io#thread_priority   
22 [0x16]:           movn #2   
24 [0x18]:           pushobj   
25 [0x19]:           call @1616 // <std#_enum_.operator==>   
26 [0x1a]:           loadval ebx   
27 [0x1b]:           movr cmt, ebx   
28 [0x1c]:           jne 39   
29 [0x1d]: line: 163 pushl 0   
30 [0x1e]:           pushl 1   
31 [0x1f]:           call @1619 // <std#_enum_.get_ordinal>   
32 [0x20]:           call @1968 // <platform.kernel#vm.set_thread_priority>   
33 [0x21]:           popobj2    
34 [0x22]:           returnobj   
35 [0x23]:           movl 0   
36 [0x24]:           _ulck   
37 [0x25]:           ret   
38 [0x26]:           jmp @49   
39 [0x27]: line: 166 new_class @4 // std#illegal_argument_exception   
40 [0x28]:           dup    
41 [0x29]:           new_class @64 // std#string   
42 [0x2a]:           dup    
43 [0x2b]:           newstr @42 // invalid thread priority    
44 [0x2c]:           call @2935 // <std#string.string>   
45 [0x2d]:           pushl 1   
46 [0x2e]:           call @2949 // <std#string.operator+>   
47 [0x2f]:           call @1630 // <std#illegal_argument_exception.illegal_argument_exception>   
48 [0x30]:           throw    
49 [0x31]:           nop   
50 [0x32]:           movl 0   
51 [0x33]:           _ulck   


function: std.io#thread.remove_thread[1864] params(1) in file: lib\support\0.2.805/io//thread.sharp:172:16: note:  
		    private def remove_thread(t : thread) {
		               ^

0 [0x0]: line: 173 movl 0   
1 [0x1]:           movn #7   
3 [0x3]:           pushobj   
4 [0x4]:           movl 1   
5 [0x5]:           movn #1   
7 [0x7]:           movi #0, adx   
9 [0x9]:           iaload ebx, adx   
10 [0xa]:           rstore ebx   
11 [0xb]:           call @1885 // <std.io#thread_group.remove>   
12 [0xc]:           pop   
13 [0xd]:           ret   


function: std.io#thread.get_id[1865] params(0) in file: lib\support\0.2.805/io//thread.sharp:176:15: note:  
		    public def get_id() := id;
		              ^

0 [0x0]: line: 176 movl 0   
1 [0x1]:           movn #2   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.io#thread.get_native_handle[1866] params(0) in file: lib\support\0.2.805/io//thread.sharp:177:15: note:  
		    public def get_native_handle() := native_handle;
		              ^

0 [0x0]: line: 177 movl 0   
1 [0x1]:           movn #1   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.io#thread.get_stack_size[1867] params(0) in file: lib\support\0.2.805/io//thread.sharp:178:15: note:  
		    public def get_stack_size() := stack_size;
		              ^

0 [0x0]: line: 178 movl 0   
1 [0x1]:           movn #10   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.io#thread.get_name[1868] params(0) in file: lib\support\0.2.805/io//thread.sharp:179:15: note:  
		    public def get_name() := name;
		              ^

0 [0x0]: line: 179 movl 0   
1 [0x1]:           movn #6   
3 [0x3]:           returnobj   
4 [0x4]:           ret   


function: std.io#thread.is_exited[1869] params(0) in file: lib\support\0.2.805/io//thread.sharp:180:15: note:  
		    public def is_exited() := exited;
		              ^

0 [0x0]: line: 180 movl 0   
1 [0x1]:           movn #5   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.io#thread.is_daemon[1870] params(0) in file: lib\support\0.2.805/io//thread.sharp:181:15: note:  
		    public def is_daemon() := daemon;
		              ^

0 [0x0]: line: 181 movl 0   
1 [0x1]:           movn #4   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.io#thread.is_started[1871] params(0) in file: lib\support\0.2.805/io//thread.sharp:182:15: note:  
		    public def is_started() := started;
		              ^

0 [0x0]: line: 182 movl 0   
1 [0x1]:           movn #8   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.io#thread.is_suspended[1872] params(0) in file: lib\support\0.2.805/io//thread.sharp:183:15: note:  
		    public def is_suspended() := suspended;
		              ^

0 [0x0]: line: 183 movl 0   
1 [0x1]:           movn #9   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.io#thread.set_main[1873] params(1) in file: lib\support\0.2.805/io//thread.sharp:184:12: note:  
			public def set_main(main: (object[])(var)) := self->main = main;
		           ^

0 [0x0]: line: 184 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #11   
4 [0x4]:           loadval ebx   
5 [0x5]:           movi #0, adx   
7 [0x7]:           rmov adx, ebx   
8 [0x8]:           returnobj   
9 [0x9]:           ret   


function: std.io#thread.is_active[1874] params(0) in file: lib\support\0.2.805/io//thread.sharp:185:12: note:  
			public def is_active() := started && !exited;
		           ^

0 [0x0]: line: 185 movl 0   
1 [0x1]:           movn #8   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           skne ebx // pc = 14   
7 [0x7]:           movl 0   
8 [0x8]:           movn #5   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           not ebx, ebx   
14 [0xe]:           return_val ebx   
15 [0xf]:           ret   


function: std.io#thread.get_exit_code[1875] params(0) in file: lib\support\0.2.805/io//thread.sharp:186:12: note:  
			public def get_exit_code() := exit_code;
		           ^

0 [0x0]: line: 186 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.io#thread.get_exception_handler[1876] params(0) in file: lib\support\0.2.805/io//thread.sharp:187:12: note:  
			public def get_exception_handler() := error_handler;
		           ^

0 [0x0]: line: 187 movl 0   
1 [0x1]:           movn #12   
3 [0x3]:           returnobj   
4 [0x4]:           ret   


overload function: std.io#thread.operator==[1877] params(1) in file: lib\support\0.2.805/io//thread.sharp:189:15: note:  
		    public def operator==(t : thread) : var = native_handle==t.native_handle;
		              ^

0 [0x0]: line: 189 movl 0   
1 [0x1]:           movn #1   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #1   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           test ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


constructor: std.io#thread_group.thread_group[1878] params(1) in file: lib\support\0.2.805/io//thread_group.sharp:5:21: note:  
			public thread_group(name : string) {
		                    ^

0 [0x0]:         new_class @142 // std#hashtable<std#int,std.io#thread>   
1 [0x1]:         dup    
2 [0x2]:         call @3281 // <std#hashtable<std#int,std.io#thread>.hashtable>   
3 [0x3]:         movl 0   
4 [0x4]:         movn #0   
6 [0x6]:         popobj   
7 [0x7]:         new_class @147 // std#list<var>   
8 [0x8]:         dup    
9 [0x9]:         call @3372 // <std#list<var>.list>   
10 [0xa]:         movl 0   
11 [0xb]:         movn #1   
13 [0xd]:         popobj   
14 [0xe]:         movi #0, ebx   
16 [0x10]:         movl 0   
17 [0x11]:         movn #4   
19 [0x13]:         movi #0, adx   
21 [0x15]:         rmov adx, ebx   
22 [0x16]:         pushl 0   
23 [0x17]: line: 6 pushl 1   
24 [0x18]:         movl 0   
25 [0x19]:         movn #2   
27 [0x1b]:         popobj   
28 [0x1c]: line: 7 movg @30 // @std.io#thread_priority   
29 [0x1d]:         movn #1   
31 [0x1f]:         pushobj   
32 [0x20]:         movl 0   
33 [0x21]:         movn #3   
35 [0x23]:         popobj   
36 [0x24]:         ret   


constructor: std.io#thread_group.thread_group[1879] params(2) in file: lib\support\0.2.805/io//thread_group.sharp:10:21: note:  
			public thread_group(name : string, priority : thread_priority) {
		                    ^

0 [0x0]:         new_class @142 // std#hashtable<std#int,std.io#thread>   
1 [0x1]:         dup    
2 [0x2]:         call @3281 // <std#hashtable<std#int,std.io#thread>.hashtable>   
3 [0x3]:         movl 0   
4 [0x4]:         movn #0   
6 [0x6]:         popobj   
7 [0x7]:         new_class @147 // std#list<var>   
8 [0x8]:         dup    
9 [0x9]:         call @3372 // <std#list<var>.list>   
10 [0xa]:         movl 0   
11 [0xb]:         movn #1   
13 [0xd]:         popobj   
14 [0xe]:         movi #0, ebx   
16 [0x10]:         movl 0   
17 [0x11]:         movn #4   
19 [0x13]:         movi #0, adx   
21 [0x15]:         rmov adx, ebx   
22 [0x16]:         pushl 0   
23 [0x17]: line: 11 pushl 1   
24 [0x18]:          movl 0   
25 [0x19]:          movn #2   
27 [0x1b]:          popobj   
28 [0x1c]: line: 12 pushl 2   
29 [0x1d]:          movl 0   
30 [0x1e]:          movn #3   
32 [0x20]:          popobj   
33 [0x21]:          ret   


function: std.io#thread_group.at[1880] params(1) in file: lib\support\0.2.805/io//thread_group.sharp:15:5: note:  
			def at(id : var) := handles.at(id);
		    ^

0 [0x0]: line: 15 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          new_class @47 // std#int   
5 [0x5]:          dup    
6 [0x6]:          ipushl #1   
7 [0x7]:          call @2265 // <std#int.int>   
8 [0x8]:          call @3285 // <std#hashtable<std#int,std.io#thread>.at>   
9 [0x9]:          popobj2    
10 [0xa]:          returnobj   
11 [0xb]:          ret   


function: std.io#thread_group.add[1881] params(1) in file: lib\support\0.2.805/io//thread_group.sharp:17:5: note:  
			def add(t : thread) {
		    ^

0 [0x0]: line: 18 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 19 movl 0   
3 [0x3]:          movn #0   
5 [0x5]:          pushobj   
6 [0x6]:          new_class @47 // std#int   
7 [0x7]:          dup    
8 [0x8]:          pushl 1   
9 [0x9]:          call @1865 // <std.io#thread.get_id>   
10 [0xa]:          call @2265 // <std#int.int>   
11 [0xb]:          pushl 1   
12 [0xc]:          call @3286 // <std#hashtable<std#int,std.io#thread>.put>   
13 [0xd]:          loadval ebx   
14 [0xe]:          movr cmt, ebx   
15 [0xf]:          jne 23   
16 [0x10]: line: 20 movl 0   
17 [0x11]:          movn #1   
19 [0x13]:          pushobj   
20 [0x14]:          pushl 1   
21 [0x15]:          call @1865 // <std.io#thread.get_id>   
22 [0x16]:          call @3386 // <std#list<var>.add>   
23 [0x17]:          nop   
24 [0x18]: line: 22 movl 0   
25 [0x19]:          movn #4   
27 [0x1b]:          movi #0, adx   
29 [0x1d]:          iaload ebx, adx   
30 [0x1e]:          movr egx, ebx   
31 [0x1f]:          dec ebx   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          movl 0   
36 [0x24]:          _ulck   
37 [0x25]:          ret   


function: std.io#thread_group.size[1882] params(0) in file: lib\support\0.2.805/io//thread_group.sharp:26:5: note:  
			def size() := n_threads;
		    ^

0 [0x0]: line: 26 movl 0   
1 [0x1]:          movn #4   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          return_val ebx   
7 [0x7]:          ret   


function: std.io#thread_group.get_name[1883] params(0) in file: lib\support\0.2.805/io//thread_group.sharp:27:5: note:  
			def get_name() := name;
		    ^

0 [0x0]: line: 27 movl 0   
1 [0x1]:          movn #2   
3 [0x3]:          returnobj   
4 [0x4]:          ret   


function: std.io#thread_group.get_priority[1884] params(0) in file: lib\support\0.2.805/io//thread_group.sharp:28:5: note:  
			def get_priority() := default_priority;
		    ^

0 [0x0]: line: 28 movl 0   
1 [0x1]:          movn #3   
3 [0x3]:          returnobj   
4 [0x4]:          ret   


function: std.io#thread_group.remove[1885] params(1) in file: lib\support\0.2.805/io//thread_group.sharp:29:5: note:  
			def remove(id : var) : var {
		    ^

0 [0x0]: line: 30 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 31 movl 0   
3 [0x3]:          movn #0   
5 [0x5]:          pushobj   
6 [0x6]:          new_class @47 // std#int   
7 [0x7]:          dup    
8 [0x8]:          ipushl #1   
9 [0x9]:          call @2265 // <std#int.int>   
10 [0xa]:          call @3287 // <std#hashtable<std#int,std.io#thread>.remove>   
11 [0xb]:          loadval ebx   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 36   
14 [0xe]: line: 32 movl 0   
15 [0xf]:          movn #4   
17 [0x11]:          movi #0, adx   
19 [0x13]:          iaload ebx, adx   
20 [0x14]:          movr egx, ebx   
21 [0x15]:          dec ebx   
22 [0x16]:          movi #0, adx   
24 [0x18]:          rmov adx, ebx   
25 [0x19]: line: 33 movl 0   
26 [0x1a]:          movn #1   
28 [0x1c]:          pushobj   
29 [0x1d]:          ipushl #1   
30 [0x1e]:          call @3392 // <std#list<var>.remove>   
31 [0x1f]: line: 34 istorel 1, fp+0   
33 [0x21]:          movl 0   
34 [0x22]:          _ulck   
35 [0x23]:          ret   
36 [0x24]:          nop   
37 [0x25]: line: 37 istorel 0, fp+0   
39 [0x27]:          movl 0   
40 [0x28]:          _ulck   
41 [0x29]:          ret   
42 [0x2a]:          movl 0   
43 [0x2b]:          _ulck   


function: std.io#thread_group.get_elements[1886] params(0) in file: lib\support\0.2.805/io//thread_group.sharp:41:8: note:  
		    def get_elements() : thread[] {
		       ^

0 [0x0]: line: 42 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          pushobj   
4 [0x4]:          call @3389 // <std#list<var>.size>   
5 [0x5]:          loadval ebx   
6 [0x6]:          new_classarray ebx  // std.io#thread[]   
7 [0x7]:          popobj2    
8 [0x8]:          smovr_3 fp+1   
9 [0x9]: line: 43 istorel 0, fp+2   
11 [0xb]: line: 45 istorel -1, fp+4   
13 [0xd]:          movl 0   
14 [0xe]:          movn #1   
16 [0x10]:          pushobj   
17 [0x11]:          invoke_delegate 3370 { static=0, args=0 }   
19 [0x13]:          popl 5   
20 [0x14]:          iaddl 1, fp@4   
22 [0x16]:          movl 5   
23 [0x17]:          sizeof ecx   
24 [0x18]:          loadl ebx, fp+4   
25 [0x19]:          lt ebx, ecx   
26 [0x1a]:          jne 50   
27 [0x1b]:          iaload ecx, ebx   
28 [0x1c]:          smovr_2 ecx, fp+3   
29 [0x1d]: line: 46 movl 0   
30 [0x1e]:          movn #0   
32 [0x20]:          pushobj   
33 [0x21]:          new_class @47 // std#int   
34 [0x22]:          dup    
35 [0x23]:          ipushl #3   
36 [0x24]:          call @2265 // <std#int.int>   
37 [0x25]:          call @3285 // <std#hashtable<std#int,std.io#thread>.at>   
38 [0x26]:          pushl 1   
39 [0x27]:          loadl ebx, fp+2   
40 [0x28]:          movr egx, ebx   
41 [0x29]:          inc ebx   
42 [0x2a]:          smovr_2 ebx, fp+2   
43 [0x2b]:          movr ebx, egx   
44 [0x2c]:          popobj2    
45 [0x2d]:          movr adx, ebx   
46 [0x2e]:          chklen adx   
47 [0x2f]:          movnd adx   
48 [0x30]:          popobj   
49 [0x31]:          jmp @20   
50 [0x32]: line: 49 movl 1   
51 [0x33]:          returnobj   
52 [0x34]:          ret   


function: std.io#thread_group.find[1887] params(1) in file: lib\support\0.2.805/io//thread_group.sharp:52:8: note:  
		    def find(find_func: (thread)(var)) : thread {
		       ^

0 [0x0]: line: 53 istorel 0, fp+2   
2 [0x2]:          ipushl #2   
3 [0x3]:          movl 0   
4 [0x4]:          movn #1   
6 [0x6]:          pushobj   
7 [0x7]:          call @3389 // <std#list<var>.size>   
8 [0x8]:          loadval ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          lt ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 48   
14 [0xe]: line: 54 movl 0   
15 [0xf]:          movn #0   
17 [0x11]:          pushobj   
18 [0x12]:          new_class @47 // std#int   
19 [0x13]:          dup    
20 [0x14]:          movl 0   
21 [0x15]:          movn #1   
23 [0x17]:          pushobj   
24 [0x18]:          ipushl #2   
25 [0x19]:          call @3379 // <std#list<var>.at>   
26 [0x1a]:          call @2265 // <std#int.int>   
27 [0x1b]:          call @3285 // <std#hashtable<std#int,std.io#thread>.at>   
28 [0x1c]:          popobj2    
29 [0x1d]:          smovr_3 fp+3   
30 [0x1e]: line: 55 movl 3   
31 [0x1f]:          checknull   
32 [0x20]:          not ebx, ebx   
33 [0x21]:          skne ebx // pc = 39   
34 [0x22]:          ipushl #1   
35 [0x23]:          pushl 3   
36 [0x24]:          smov ebx, sp+[-1]   
37 [0x25]:          calld ebx   
38 [0x26]:          loadval ebx   
39 [0x27]:          movr cmt, ebx   
40 [0x28]:          jne 44   
41 [0x29]: line: 56 movl 3   
42 [0x2a]:          returnobj   
43 [0x2b]:          ret   
44 [0x2c]:          nop   
45 [0x2d]:          iaddl 1, fp@2   
47 [0x2f]:          jmp @2   
48 [0x30]: line: 60 pushnull    
49 [0x31]:          popobj2    
50 [0x32]:          returnobj   
51 [0x33]:          ret   


function: std.io#thread_group.kill_all[1888] params(0) in file: lib\support\0.2.805/io//thread_group.sharp:63:5: note:  
			def kill_all() {
		    ^

0 [0x0]: line: 64 istorel -1, fp+2   
2 [0x2]:          movl 0   
3 [0x3]:          movn #1   
5 [0x5]:          pushobj   
6 [0x6]:          invoke_delegate 3370 { static=0, args=0 }   
8 [0x8]:          popl 3   
9 [0x9]:          iaddl 1, fp@2   
11 [0xb]:          movl 3   
12 [0xc]:          sizeof ecx   
13 [0xd]:          loadl ebx, fp+2   
14 [0xe]:          lt ebx, ecx   
15 [0xf]:          jne 30   
16 [0x10]:          iaload ecx, ebx   
17 [0x11]:          smovr_2 ecx, fp+1   
18 [0x12]: line: 65 movl 0   
19 [0x13]:          movn #0   
21 [0x15]:          pushobj   
22 [0x16]:          new_class @47 // std#int   
23 [0x17]:          dup    
24 [0x18]:          ipushl #1   
25 [0x19]:          call @2265 // <std#int.int>   
26 [0x1a]:          call @3285 // <std#hashtable<std#int,std.io#thread>.at>   
27 [0x1b]:          call @1854 // <std.io#thread.interrupt>   
28 [0x1c]:          pop   
29 [0x1d]:          jmp @9   
30 [0x1e]:          ret   


constructor: std.io#thread_group.thread_group[1889] params(0) in file: lib\support\0.2.805/io//thread_group.sharp:3:13: note:  
		public class thread_group : loopable<thread> {
		            ^

0 [0x0]:         new_class @142 // std#hashtable<std#int,std.io#thread>   
1 [0x1]:         dup    
2 [0x2]:         call @3281 // <std#hashtable<std#int,std.io#thread>.hashtable>   
3 [0x3]:         movl 0   
4 [0x4]:         movn #0   
6 [0x6]:         popobj   
7 [0x7]:         new_class @147 // std#list<var>   
8 [0x8]:         dup    
9 [0x9]:         call @3372 // <std#list<var>.list>   
10 [0xa]:         movl 0   
11 [0xb]:         movn #1   
13 [0xd]:         popobj   
14 [0xe]:         movi #0, ebx   
16 [0x10]:         movl 0   
17 [0x11]:         movn #4   
19 [0x13]:         movi #0, adx   
21 [0x15]:         rmov adx, ebx   
22 [0x16]:         ret   


function: std.io#__srt_global._srt_thread_start[1890] params(0) in file: lib\support\0.2.805/io//thread_kernel.sharp:5:4: note:  
		def _srt_thread_start() {
		   ^

0 [0x0]: line: 6 call @1964 // <platform.kernel#vm.current_thread>   
1 [0x1]:         popobj2    
2 [0x2]:         smovr_3 fp+0   
3 [0x3]: line: 8 movi #1, ebx   : protected asm start
5 [0x5]:         movi #0, egx   
7 [0x7]:         movi #0, adx   
9 [0x9]:         movl 0   
10 [0xa]:         movn #5   
12 [0xc]:         rmov adx, egx   
13 [0xd]:         movl 0   
14 [0xe]:         movn #8   
16 [0x10]:         rmov adx, ebx   : protected asm end
17 [0x11]: line: 21 istorel 1, fp+1   
19 [0x13]: line: 22 movl 0   : try start: try block start
20 [0x14]: line: 24 movn #11   
22 [0x16]: line: 25 movi #0, adx   
24 [0x18]:          iaload ebx, adx   
25 [0x19]:          rstore ebx   
26 [0x1a]:          call @1970 // <platform.kernel#vm.thread_args>   
27 [0x1b]:          smov ebx, sp+[-1]   
28 [0x1c]:          calld ebx   
29 [0x1d]:          ipopl 1   
30 [0x1e]:          jmp @51   : try block end
31 [0x1f]: line: 27 pushl 0   : catch(std#exception)
32 [0x20]:          call @1876 // <std.io#thread.get_exception_handler>   
33 [0x21]:          pushnull    
34 [0x22]:          itest ebx   
35 [0x23]:          not ebx, ebx   
36 [0x24]:          movr cmt, ebx   
37 [0x25]:          jne 44   
38 [0x26]: line: 28 pushl 0   
39 [0x27]:          call @1876 // <std.io#thread.get_exception_handler>   
40 [0x28]:          pushl 2   
41 [0x29]:          invoke_delegate 1893 { static=0, args=1 }   
43 [0x2b]:          jmp @49   
44 [0x2c]: line: 30 pushl 0   
45 [0x2d]:          ipushl #1   
46 [0x2e]:          call @1965 // <platform.kernel#vm.exit_thread>   
47 [0x2f]: line: 31 pushl 2   
48 [0x30]:          throw    
49 [0x31]:          nop   
50 [0x32]:          jmp @51   
51 [0x33]:          nop   : try end
52 [0x34]: line: 35 pushl 0   
53 [0x35]:          ipushl #1   
54 [0x36]:          call @1965 // <platform.kernel#vm.exit_thread>   
55 [0x37]:          ret   


function: std.io#thread_result.at[1891] params(1) in file: lib\support\0.2.805/io//thread_kernel.sharp:63:15: note:  
		    static def at(index: var) : thread_result {
		              ^

0 [0x0]: line: 64 ipushl #0   
1 [0x1]:          movg @31 // @std.io#thread_result   
2 [0x2]:          movn #16   
4 [0x4]:          pushobj   
5 [0x5]:          call @1619 // <std#_enum_.get_ordinal>   
6 [0x6]:          loadval ebx   
7 [0x7]:          loadval ecx   
8 [0x8]:          test ecx, ebx   
9 [0x9]:          jne 29   
10 [0xa]: line: 65 movg @31 // @std.io#thread_result   
11 [0xb]:          movn #17   
13 [0xd]:          pushobj   
14 [0xe]:          movg @31 // @std.io#thread_result   
15 [0xf]:          movn #17   
17 [0x11]:          sizeof ebx   
18 [0x12]:          rstore ebx   
19 [0x13]:          movi #1, ebx   
21 [0x15]:          loadval ecx   
22 [0x16]:          sub ecx, ebx -> ebx   
23 [0x17]:          popobj2    
24 [0x18]:          movr adx, ebx   
25 [0x19]:          chklen adx   
26 [0x1a]:          movnd adx   
27 [0x1b]:          returnobj   
28 [0x1c]:          ret   
29 [0x1d]:          nop   
30 [0x1e]: line: 67 movg @31 // @std.io#thread_result   
31 [0x1f]:          movn #17   
33 [0x21]:          pushobj   
34 [0x22]:          loadl ebx, fp+0   
35 [0x23]:          popobj2    
36 [0x24]:          movr adx, ebx   
37 [0x25]:          chklen adx   
38 [0x26]:          movnd adx   
39 [0x27]:          returnobj   
40 [0x28]:          ret   


constructor: std.io#thread_result.thread_result[1892] params(0) in file: lib\support\0.2.805/io//thread_kernel.sharp:38:7: note:  
		mutate thread_result {
		      ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1621 // <std#_enum_._enum_>   
2 [0x2]:         ret   


std.io#uncaught_exception_handler.uncaught_exception[1893] params(1) in file: lib\support\0.2.805/io//uncaught_exception_handler.sharp:4:8: note:  
		    def uncaught_exception(err: throwable);
		       ^



constructor: std.io#uncaught_exception_handler.uncaught_exception_handler[1894] params(0) in file: lib\support\0.2.805/io//uncaught_exception_handler.sharp:3:10: note:  
		interface uncaught_exception_handler {
		         ^

0 [0x0]:         ret   


function: std.io#unix_fs.path_separator[1895] params(0) in file: lib\support\0.2.805/io//unix_fs.sharp:12:8: note:  
		    def path_separator() : var {
		       ^

0 [0x0]: line: 13 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          return_val ebx   
7 [0x7]:          ret   


function: std.io#unix_fs.normalize[1896] params(1) in file: lib\support\0.2.805/io//unix_fs.sharp:20:8: note:  
		    def normalize(pathname: string) : string {
		       ^

0 [0x0]: line: 21 pushl 1   
1 [0x1]:          call @2976 // <std#string.size>   
2 [0x2]:          ipopl 2   
3 [0x3]: line: 22 istorel 0, fp+3   
5 [0x5]: line: 23 istorel 0, fp+4   
7 [0x7]:          ipushl #4   
8 [0x8]:          loadl ebx, fp+2   
9 [0x9]:          loadval ecx   
10 [0xa]:          lt ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 263   
14 [0xe]: line: 25 pushl 1   
15 [0xf]:          ipushl #4   
16 [0x10]:          call @2958 // <std#string.operator[>   
17 [0x11]:          loadval ebx   
18 [0x12]:          rstore ebx   
19 [0x13]:          movi #92, ebx   
21 [0x15]:          loadval ecx   
22 [0x16]:          test ecx, ebx   
23 [0x17]:          jne 111   
24 [0x18]: line: 26 ipushl #3   
25 [0x19]:          movi #0, ebx   
27 [0x1b]:          loadval ecx   
28 [0x1c]:          gt ecx, ebx   
29 [0x1d]:          movr ebx, cmt   
30 [0x1e]:          skne ebx // pc = 48   
31 [0x1f]:          movl 0   
32 [0x20]:          movn #1   
34 [0x22]:          pushobj   
35 [0x23]:          ipushl #3   
36 [0x24]:          movi #1, ebx   
38 [0x26]:          loadval ecx   
39 [0x27]:          sub ecx, ebx -> ebx   
40 [0x28]:          popobj2    
41 [0x29]:          movr adx, ebx   
42 [0x2a]:          chklen adx   
43 [0x2b]:          iaload ebx, adx   
44 [0x2c]:          rstore ebx   
45 [0x2d]:          movi #47, ebx   
47 [0x2f]:          loadval ecx   
48 [0x30]:          tne ecx, ebx   
49 [0x31]:          jne 66   
50 [0x32]: line: 27 istore 47   
52 [0x34]:          movl 0   
53 [0x35]:          movn #1   
55 [0x37]:          pushobj   
56 [0x38]:          loadl ebx, fp+3   
57 [0x39]:          movr egx, ebx   
58 [0x3a]:          inc ebx   
59 [0x3b]:          smovr_2 ebx, fp+3   
60 [0x3c]:          movr ebx, egx   
61 [0x3d]:          popobj2    
62 [0x3e]:          movr adx, ebx   
63 [0x3f]:          chklen adx   
64 [0x40]:          loadval ebx   
65 [0x41]:          rmov adx, ebx   
66 [0x42]:          nop   
67 [0x43]: line: 29 ipushl #4   
68 [0x44]:          movi #1, ebx   
70 [0x46]:          loadval ecx   
71 [0x47]:          add ecx, ebx -> ebx   
72 [0x48]:          rstore ebx   
73 [0x49]:          loadl ebx, fp+2   
74 [0x4a]:          loadval ecx   
75 [0x4b]:          lt ecx, ebx   
76 [0x4c]:          movr ebx, cmt   
77 [0x4d]:          skne ebx // pc = 91   
78 [0x4e]:          pushl 1   
79 [0x4f]:          ipushl #4   
80 [0x50]:          movi #1, ebx   
82 [0x52]:          loadval ecx   
83 [0x53]:          add ecx, ebx -> ebx   
84 [0x54]:          rstore ebx   
85 [0x55]:          call @2958 // <std#string.operator[>   
86 [0x56]:          loadval ebx   
87 [0x57]:          rstore ebx   
88 [0x58]:          movi #92, ebx   
90 [0x5a]:          loadval ecx   
91 [0x5b]:          test ecx, ebx   
92 [0x5c]:          jne 109   
93 [0x5d]: line: 30 iaddl 1, fp@4   
95 [0x5f]: line: 31 pushl 1   
96 [0x60]:          ipushl #4   
97 [0x61]:          call @2958 // <std#string.operator[>   
98 [0x62]:          loadval ebx   
99 [0x63]:          rstore ebx   
100 [0x64]:          movi #92, ebx   
102 [0x66]:          loadval ecx   
103 [0x67]:          test ecx, ebx   
104 [0x68]:          je 93   
105 [0x69]: line: 33 loadl ebx, fp+4   
106 [0x6a]:          movr egx, ebx   
107 [0x6b]:          dec ebx   
108 [0x6c]:          smovr_2 ebx, fp+4   
109 [0x6d]:          nop   
110 [0x6e]:          jmp @259   
111 [0x6f]:          pushl 1   
112 [0x70]:          ipushl #4   
113 [0x71]:          call @2958 // <std#string.operator[>   
114 [0x72]:          loadval ebx   
115 [0x73]:          rstore ebx   
116 [0x74]:          movi #47, ebx   
118 [0x76]:          loadval ecx   
119 [0x77]:          test ecx, ebx   
120 [0x78]:          jne 242   
121 [0x79]: line: 37 ipushl #4   
122 [0x7a]:          movi #1, ebx   
124 [0x7c]:          loadval ecx   
125 [0x7d]:          add ecx, ebx -> ebx   
126 [0x7e]:          rstore ebx   
127 [0x7f]:          loadl ebx, fp+2   
128 [0x80]:          loadval ecx   
129 [0x81]:          lt ecx, ebx   
130 [0x82]:          movr ebx, cmt   
131 [0x83]:          skne ebx // pc = 145   
132 [0x84]:          pushl 1   
133 [0x85]:          ipushl #4   
134 [0x86]:          movi #1, ebx   
136 [0x88]:          loadval ecx   
137 [0x89]:          add ecx, ebx -> ebx   
138 [0x8a]:          rstore ebx   
139 [0x8b]:          call @2958 // <std#string.operator[>   
140 [0x8c]:          loadval ebx   
141 [0x8d]:          rstore ebx   
142 [0x8e]:          movi #47, ebx   
144 [0x90]:          loadval ecx   
145 [0x91]:          test ecx, ebx   
146 [0x92]:          jne 190   
147 [0x93]: line: 38 iaddl 1, fp@4   
149 [0x95]: line: 39 pushl 1   
150 [0x96]:          ipushl #4   
151 [0x97]:          call @2958 // <std#string.operator[>   
152 [0x98]:          loadval ebx   
153 [0x99]:          rstore ebx   
154 [0x9a]:          movi #47, ebx   
156 [0x9c]:          loadval ecx   
157 [0x9d]:          test ecx, ebx   
158 [0x9e]:          je 147   
159 [0x9f]: line: 42 ipushl #3   
160 [0xa0]:          movi #0, ebx   
162 [0xa2]:          loadval ecx   
163 [0xa3]:          gt ecx, ebx   
164 [0xa4]:          movr ebx, cmt   
165 [0xa5]:          skne ebx // pc = 183   
166 [0xa6]:          movl 0   
167 [0xa7]:          movn #1   
169 [0xa9]:          pushobj   
170 [0xaa]:          ipushl #3   
171 [0xab]:          movi #1, ebx   
173 [0xad]:          loadval ecx   
174 [0xae]:          sub ecx, ebx -> ebx   
175 [0xaf]:          popobj2    
176 [0xb0]:          movr adx, ebx   
177 [0xb1]:          chklen adx   
178 [0xb2]:          iaload ebx, adx   
179 [0xb3]:          rstore ebx   
180 [0xb4]:          movi #47, ebx   
182 [0xb6]:          loadval ecx   
183 [0xb7]:          tne ecx, ebx   
184 [0xb8]:          jne 189   
185 [0xb9]: line: 43 loadl ebx, fp+4   
186 [0xba]:          movr egx, ebx   
187 [0xbb]:          dec ebx   
188 [0xbc]:          smovr_2 ebx, fp+4   
189 [0xbd]:          nop   
190 [0xbe]:          nop   
191 [0xbf]: line: 46 ipushl #3   
192 [0xc0]:          movi #0, ebx   
194 [0xc2]:          loadval ecx   
195 [0xc3]:          test ecx, ebx   
196 [0xc4]:          movr ebx, cmt   
197 [0xc5]:          skpe ebx // pc = 222   
198 [0xc6]:          ipushl #3   
199 [0xc7]:          movi #0, ebx   
201 [0xc9]:          loadval ecx   
202 [0xca]:          gt ecx, ebx   
203 [0xcb]:          movr ebx, cmt   
204 [0xcc]:          skne ebx // pc = 222   
205 [0xcd]:          movl 0   
206 [0xce]:          movn #1   
208 [0xd0]:          pushobj   
209 [0xd1]:          ipushl #3   
210 [0xd2]:          movi #1, ebx   
212 [0xd4]:          loadval ecx   
213 [0xd5]:          sub ecx, ebx -> ebx   
214 [0xd6]:          popobj2    
215 [0xd7]:          movr adx, ebx   
216 [0xd8]:          chklen adx   
217 [0xd9]:          iaload ebx, adx   
218 [0xda]:          rstore ebx   
219 [0xdb]:          movi #47, ebx   
221 [0xdd]:          loadval ecx   
222 [0xde]:          tne ecx, ebx   
223 [0xdf]:          jne 240   
224 [0xe0]: line: 47 istore 47   
226 [0xe2]:          movl 0   
227 [0xe3]:          movn #1   
229 [0xe5]:          pushobj   
230 [0xe6]:          loadl ebx, fp+3   
231 [0xe7]:          movr egx, ebx   
232 [0xe8]:          inc ebx   
233 [0xe9]:          smovr_2 ebx, fp+3   
234 [0xea]:          movr ebx, egx   
235 [0xeb]:          popobj2    
236 [0xec]:          movr adx, ebx   
237 [0xed]:          chklen adx   
238 [0xee]:          loadval ebx   
239 [0xef]:          rmov adx, ebx   
240 [0xf0]:          nop   
241 [0xf1]:          jmp @259   
242 [0xf2]: line: 50 pushl 1   
243 [0xf3]:          ipushl #4   
244 [0xf4]:          call @2958 // <std#string.operator[>   
245 [0xf5]:          movl 0   
246 [0xf6]:          movn #1   
248 [0xf8]:          pushobj   
249 [0xf9]:          loadl ebx, fp+3   
250 [0xfa]:          movr egx, ebx   
251 [0xfb]:          inc ebx   
252 [0xfc]:          smovr_2 ebx, fp+3   
253 [0xfd]:          movr ebx, egx   
254 [0xfe]:          popobj2    
255 [0xff]:          movr adx, ebx   
256 [0x100]:          chklen adx   
257 [0x101]:          loadval ebx   
258 [0x102]:          rmov adx, ebx   
259 [0x103]:          nop   
260 [0x104]:          iaddl 1, fp@4   
262 [0x106]:          jmp @7   
263 [0x107]: line: 53 new_class @64 // std#string   
264 [0x108]:          dup    
265 [0x109]:          movl 0   
266 [0x10a]:          movn #1   
268 [0x10c]:          pushobj   
269 [0x10d]:          istore 0   
271 [0x10f]:          ipushl #3   
272 [0x110]:          call @2940 // <std#string.string>   
273 [0x111]:          popobj2    
274 [0x112]:          returnobj   
275 [0x113]:          ret   


function: std.io#unix_fs.get_attributes[1897] params(1) in file: lib\support\0.2.805/io//unix_fs.sharp:61:9: note:  
		     def get_attributes(f: file) : var {
		        ^

0 [0x0]: line: 62 movl 1   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          call @2961 // <std#string.get_data>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+2   
7 [0x7]: line: 63 istorel 0, fp+3   
9 [0x9]: line: 69 pushl 2   : protected asm start
10 [0xa]:          int 0x25   
11 [0xb]:          smovr_2 ebx, fp+3   
12 [0xc]: line: 75 loadl ebx, fp+3   : protected asm end
13 [0xd]:          return_val ebx   
14 [0xe]:          ret   


function: std.io#unix_fs.check_access[1898] params(2) in file: lib\support\0.2.805/io//unix_fs.sharp:85:9: note:  
		     def check_access(f: file, access: var) : var {
		        ^

0 [0x0]: line: 86 movl 1   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          call @2961 // <std#string.get_data>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+3   
7 [0x7]: line: 87 istorel 0, fp+4   
9 [0x9]: line: 93 pushl 3   : protected asm start
10 [0xa]:          loadl ebx, fp+2   
11 [0xb]:          int 0x24   
12 [0xc]:          smovr_2 ebx, fp+4   
13 [0xd]: line: 100 loadl ebx, fp+4   : protected asm end
14 [0xe]:           return_val ebx   
15 [0xf]:           ret   


constructor: std.io#unix_fs.unix_fs[1899] params(0) in file: lib\support\0.2.805/io//unix_fs.sharp:8:16: note:  
		protected class unix_fs base file_system {
		               ^

0 [0x0]:         movi #47, ebx   
2 [0x2]:         movl 0   
3 [0x3]:         movn #0   
5 [0x5]:         mov8 ebx, ebx   
6 [0x6]:         movi #0, adx   
8 [0x8]:         rmov adx, ebx   
9 [0x9]:         movi #512, ebx   
11 [0xb]:         newarry ebx   
12 [0xc]:         movl 0   
13 [0xd]:         movn #1   
15 [0xf]:         popobj   
16 [0x10]:         ret   


function: std.io#win_fs.path_separator[1900] params(0) in file: lib\support\0.2.805/io//win_fs.sharp:15:8: note:  
		    def path_separator() : var {
		       ^

0 [0x0]: line: 16 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          return_val ebx   
7 [0x7]:          ret   


function: std.io#win_fs.normalize[1901] params(1) in file: lib\support\0.2.805/io//win_fs.sharp:23:8: note:  
		    def normalize(pathname: string) : string {
		       ^

0 [0x0]: line: 24 pushl 1   
1 [0x1]:          call @2976 // <std#string.size>   
2 [0x2]:          ipopl 2   
3 [0x3]: line: 25 istorel 0, fp+3   
5 [0x5]: line: 26 istorel 0, fp+4   
7 [0x7]:          ipushl #4   
8 [0x8]:          loadl ebx, fp+2   
9 [0x9]:          loadval ecx   
10 [0xa]:          lt ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 256   
14 [0xe]: line: 28 pushl 1   
15 [0xf]:          ipushl #4   
16 [0x10]:          call @2958 // <std#string.operator[>   
17 [0x11]:          loadval ebx   
18 [0x12]:          rstore ebx   
19 [0x13]:          movi #47, ebx   
21 [0x15]:          loadval ecx   
22 [0x16]:          test ecx, ebx   
23 [0x17]:          jne 111   
24 [0x18]: line: 29 ipushl #3   
25 [0x19]:          movi #0, ebx   
27 [0x1b]:          loadval ecx   
28 [0x1c]:          gt ecx, ebx   
29 [0x1d]:          movr ebx, cmt   
30 [0x1e]:          skne ebx // pc = 48   
31 [0x1f]:          movl 0   
32 [0x20]:          movn #1   
34 [0x22]:          pushobj   
35 [0x23]:          ipushl #3   
36 [0x24]:          movi #1, ebx   
38 [0x26]:          loadval ecx   
39 [0x27]:          sub ecx, ebx -> ebx   
40 [0x28]:          popobj2    
41 [0x29]:          movr adx, ebx   
42 [0x2a]:          chklen adx   
43 [0x2b]:          iaload ebx, adx   
44 [0x2c]:          rstore ebx   
45 [0x2d]:          movi #92, ebx   
47 [0x2f]:          loadval ecx   
48 [0x30]:          tne ecx, ebx   
49 [0x31]:          jne 66   
50 [0x32]: line: 30 istore 92   
52 [0x34]:          movl 0   
53 [0x35]:          movn #1   
55 [0x37]:          pushobj   
56 [0x38]:          loadl ebx, fp+3   
57 [0x39]:          movr egx, ebx   
58 [0x3a]:          inc ebx   
59 [0x3b]:          smovr_2 ebx, fp+3   
60 [0x3c]:          movr ebx, egx   
61 [0x3d]:          popobj2    
62 [0x3e]:          movr adx, ebx   
63 [0x3f]:          chklen adx   
64 [0x40]:          loadval ebx   
65 [0x41]:          rmov adx, ebx   
66 [0x42]:          nop   
67 [0x43]: line: 32 ipushl #4   
68 [0x44]:          movi #1, ebx   
70 [0x46]:          loadval ecx   
71 [0x47]:          add ecx, ebx -> ebx   
72 [0x48]:          rstore ebx   
73 [0x49]:          loadl ebx, fp+2   
74 [0x4a]:          loadval ecx   
75 [0x4b]:          lt ecx, ebx   
76 [0x4c]:          movr ebx, cmt   
77 [0x4d]:          skne ebx // pc = 91   
78 [0x4e]:          pushl 1   
79 [0x4f]:          ipushl #4   
80 [0x50]:          movi #1, ebx   
82 [0x52]:          loadval ecx   
83 [0x53]:          add ecx, ebx -> ebx   
84 [0x54]:          rstore ebx   
85 [0x55]:          call @2958 // <std#string.operator[>   
86 [0x56]:          loadval ebx   
87 [0x57]:          rstore ebx   
88 [0x58]:          movi #47, ebx   
90 [0x5a]:          loadval ecx   
91 [0x5b]:          test ecx, ebx   
92 [0x5c]:          jne 109   
93 [0x5d]: line: 33 iaddl 1, fp@4   
95 [0x5f]: line: 34 pushl 1   
96 [0x60]:          ipushl #4   
97 [0x61]:          call @2958 // <std#string.operator[>   
98 [0x62]:          loadval ebx   
99 [0x63]:          rstore ebx   
100 [0x64]:          movi #47, ebx   
102 [0x66]:          loadval ecx   
103 [0x67]:          test ecx, ebx   
104 [0x68]:          je 93   
105 [0x69]: line: 36 loadl ebx, fp+4   
106 [0x6a]:          movr egx, ebx   
107 [0x6b]:          dec ebx   
108 [0x6c]:          smovr_2 ebx, fp+4   
109 [0x6d]:          nop   
110 [0x6e]:          jmp @252   
111 [0x6f]:          pushl 1   
112 [0x70]:          ipushl #4   
113 [0x71]:          call @2958 // <std#string.operator[>   
114 [0x72]:          loadval ebx   
115 [0x73]:          rstore ebx   
116 [0x74]:          movi #92, ebx   
118 [0x76]:          loadval ecx   
119 [0x77]:          test ecx, ebx   
120 [0x78]:          jne 235   
121 [0x79]: line: 40 ipushl #4   
122 [0x7a]:          movi #1, ebx   
124 [0x7c]:          loadval ecx   
125 [0x7d]:          add ecx, ebx -> ebx   
126 [0x7e]:          rstore ebx   
127 [0x7f]:          loadl ebx, fp+2   
128 [0x80]:          loadval ecx   
129 [0x81]:          lt ecx, ebx   
130 [0x82]:          movr ebx, cmt   
131 [0x83]:          skne ebx // pc = 145   
132 [0x84]:          pushl 1   
133 [0x85]:          ipushl #4   
134 [0x86]:          movi #1, ebx   
136 [0x88]:          loadval ecx   
137 [0x89]:          add ecx, ebx -> ebx   
138 [0x8a]:          rstore ebx   
139 [0x8b]:          call @2958 // <std#string.operator[>   
140 [0x8c]:          loadval ebx   
141 [0x8d]:          rstore ebx   
142 [0x8e]:          movi #92, ebx   
144 [0x90]:          loadval ecx   
145 [0x91]:          test ecx, ebx   
146 [0x92]:          jne 190   
147 [0x93]: line: 41 iaddl 1, fp@4   
149 [0x95]: line: 42 pushl 1   
150 [0x96]:          ipushl #4   
151 [0x97]:          call @2958 // <std#string.operator[>   
152 [0x98]:          loadval ebx   
153 [0x99]:          rstore ebx   
154 [0x9a]:          movi #92, ebx   
156 [0x9c]:          loadval ecx   
157 [0x9d]:          test ecx, ebx   
158 [0x9e]:          je 147   
159 [0x9f]: line: 45 ipushl #3   
160 [0xa0]:          movi #0, ebx   
162 [0xa2]:          loadval ecx   
163 [0xa3]:          gt ecx, ebx   
164 [0xa4]:          movr ebx, cmt   
165 [0xa5]:          skne ebx // pc = 183   
166 [0xa6]:          movl 0   
167 [0xa7]:          movn #1   
169 [0xa9]:          pushobj   
170 [0xaa]:          ipushl #3   
171 [0xab]:          movi #1, ebx   
173 [0xad]:          loadval ecx   
174 [0xae]:          sub ecx, ebx -> ebx   
175 [0xaf]:          popobj2    
176 [0xb0]:          movr adx, ebx   
177 [0xb1]:          chklen adx   
178 [0xb2]:          iaload ebx, adx   
179 [0xb3]:          rstore ebx   
180 [0xb4]:          movi #92, ebx   
182 [0xb6]:          loadval ecx   
183 [0xb7]:          tne ecx, ebx   
184 [0xb8]:          jne 189   
185 [0xb9]: line: 46 loadl ebx, fp+4   
186 [0xba]:          movr egx, ebx   
187 [0xbb]:          dec ebx   
188 [0xbc]:          smovr_2 ebx, fp+4   
189 [0xbd]:          nop   
190 [0xbe]:          nop   
191 [0xbf]: line: 49 ipushl #3   
192 [0xc0]:          movi #0, ebx   
194 [0xc2]:          loadval ecx   
195 [0xc3]:          gt ecx, ebx   
196 [0xc4]:          movr ebx, cmt   
197 [0xc5]:          skne ebx // pc = 215   
198 [0xc6]:          movl 0   
199 [0xc7]:          movn #1   
201 [0xc9]:          pushobj   
202 [0xca]:          ipushl #3   
203 [0xcb]:          movi #1, ebx   
205 [0xcd]:          loadval ecx   
206 [0xce]:          sub ecx, ebx -> ebx   
207 [0xcf]:          popobj2    
208 [0xd0]:          movr adx, ebx   
209 [0xd1]:          chklen adx   
210 [0xd2]:          iaload ebx, adx   
211 [0xd3]:          rstore ebx   
212 [0xd4]:          movi #92, ebx   
214 [0xd6]:          loadval ecx   
215 [0xd7]:          tne ecx, ebx   
216 [0xd8]:          jne 233   
217 [0xd9]: line: 50 istore 92   
219 [0xdb]:          movl 0   
220 [0xdc]:          movn #1   
222 [0xde]:          pushobj   
223 [0xdf]:          loadl ebx, fp+3   
224 [0xe0]:          movr egx, ebx   
225 [0xe1]:          inc ebx   
226 [0xe2]:          smovr_2 ebx, fp+3   
227 [0xe3]:          movr ebx, egx   
228 [0xe4]:          popobj2    
229 [0xe5]:          movr adx, ebx   
230 [0xe6]:          chklen adx   
231 [0xe7]:          loadval ebx   
232 [0xe8]:          rmov adx, ebx   
233 [0xe9]:          nop   
234 [0xea]:          jmp @252   
235 [0xeb]: line: 53 pushl 1   
236 [0xec]:          ipushl #4   
237 [0xed]:          call @2958 // <std#string.operator[>   
238 [0xee]:          movl 0   
239 [0xef]:          movn #1   
241 [0xf1]:          pushobj   
242 [0xf2]:          loadl ebx, fp+3   
243 [0xf3]:          movr egx, ebx   
244 [0xf4]:          inc ebx   
245 [0xf5]:          smovr_2 ebx, fp+3   
246 [0xf6]:          movr ebx, egx   
247 [0xf7]:          popobj2    
248 [0xf8]:          movr adx, ebx   
249 [0xf9]:          chklen adx   
250 [0xfa]:          loadval ebx   
251 [0xfb]:          rmov adx, ebx   
252 [0xfc]:          nop   
253 [0xfd]:          iaddl 1, fp@4   
255 [0xff]:          jmp @7   
256 [0x100]: line: 56 new_class @64 // std#string   
257 [0x101]:          dup    
258 [0x102]:          movl 0   
259 [0x103]:          movn #1   
261 [0x105]:          pushobj   
262 [0x106]:          istore 0   
264 [0x108]:          ipushl #3   
265 [0x109]:          call @2940 // <std#string.string>   
266 [0x10a]:          popobj2    
267 [0x10b]:          returnobj   
268 [0x10c]:          ret   


function: std.io#win_fs.get_attributes[1902] params(1) in file: lib\support\0.2.805/io//win_fs.sharp:64:9: note:  
		     def get_attributes(f: file) : var {
		        ^

0 [0x0]: line: 65 movl 1   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          call @2961 // <std#string.get_data>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+2   
7 [0x7]: line: 66 istorel 0, fp+3   
9 [0x9]: line: 72 pushl 2   : protected asm start
10 [0xa]:          int 0x25   
11 [0xb]:          smovr_2 ebx, fp+3   
12 [0xc]: line: 78 loadl ebx, fp+3   : protected asm end
13 [0xd]:          return_val ebx   
14 [0xe]:          ret   


function: std.io#win_fs.check_access[1903] params(2) in file: lib\support\0.2.805/io//win_fs.sharp:88:9: note:  
		     def check_access(f: file, access: var) : var {
		        ^

0 [0x0]: line: 89 movl 1   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          call @2961 // <std#string.get_data>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+3   
7 [0x7]: line: 90 istorel 0, fp+4   
9 [0x9]: line: 93 ipushl #2   
10 [0xa]:          ldc ebx // 1   
11 [0xb]:          loadval ecx   
12 [0xc]:          test ecx, ebx   
13 [0xd]:          jne 17   
14 [0xe]: line: 94 istorel -1, fp+0   
16 [0x10]:          ret   
17 [0x11]:          nop   
18 [0x12]: line: 100 pushl 3   : protected asm start
19 [0x13]:           loadl ebx, fp+2   
20 [0x14]:           int 0x24   
21 [0x15]:           smovr_2 ebx, fp+4   
22 [0x16]: line: 107 loadl ebx, fp+4   : protected asm end
23 [0x17]:           return_val ebx   
24 [0x18]:           ret   


constructor: std.io#win_fs.win_fs[1904] params(0) in file: lib\support\0.2.805/io//win_fs.sharp:11:16: note:  
		protected class win_fs base file_system {
		               ^

0 [0x0]:         movi #92, ebx   
2 [0x2]:         movl 0   
3 [0x3]:         movn #0   
5 [0x5]:         mov8 ebx, ebx   
6 [0x6]:         movi #0, adx   
8 [0x8]:         rmov adx, ebx   
9 [0x9]:         movi #512, ebx   
11 [0xb]:         newarry ebx   
12 [0xc]:         movl 0   
13 [0xd]:         movn #1   
15 [0xf]:         popobj   
16 [0x10]:         ret   


function: std.math#__srt_global.is_nan[1905] params(1) in file: lib\support\0.2.805/math//math.sharp:44:18: note:  
		public static def is_nan(v: var): var {
		                 ^

0 [0x0]: line: 45 ipushl #0   
1 [0x1]:          loadl ebx, fp+0   
2 [0x2]:          loadval ecx   
3 [0x3]:          tne ecx, ebx   
4 [0x4]:          return_val cmt   
5 [0x5]:          ret   


function: std.math#__srt_global.is_infinite[1906] params(1) in file: lib\support\0.2.805/math//math.sharp:56:18: note:  
		public static def is_infinite(v: var): var {
		                 ^

0 [0x0]: line: 57 ipushl #0   
1 [0x1]:          ldc ebx // inf   
2 [0x2]:          loadval ecx   
3 [0x3]:          test ecx, ebx   
4 [0x4]:          movr ebx, cmt   
5 [0x5]:          skpe ebx // pc = 11   
6 [0x6]:          ipushl #0   
7 [0x7]:          movi #-2147483648, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          return_val cmt   
12 [0xc]:          ret   


function: std.math#__srt_global.sin[1907] params(1) in file: lib\support\0.2.805/math//math.sharp:60:4: note:  
		def sin(num: var) : var {
		   ^

0 [0x0]: line: 61 ipushl #0   
1 [0x1]:          istore 0   
3 [0x3]:          call @1929 // <std.math#__srt_global.math_proc>   
4 [0x4]:          loadval ebx   
5 [0x5]:          return_val ebx   
6 [0x6]:          ret   


function: std.math#__srt_global.cos[1908] params(1) in file: lib\support\0.2.805/math//math.sharp:64:4: note:  
		def cos(num: var) : var {
		   ^

0 [0x0]: line: 65 ipushl #0   
1 [0x1]:          istore 1   
3 [0x3]:          call @1929 // <std.math#__srt_global.math_proc>   
4 [0x4]:          loadval ebx   
5 [0x5]:          return_val ebx   
6 [0x6]:          ret   


function: std.math#__srt_global.tan[1909] params(1) in file: lib\support\0.2.805/math//math.sharp:68:4: note:  
		def tan(num: var) : var {
		   ^

0 [0x0]: line: 69 ipushl #0   
1 [0x1]:          istore 2   
3 [0x3]:          call @1929 // <std.math#__srt_global.math_proc>   
4 [0x4]:          loadval ebx   
5 [0x5]:          return_val ebx   
6 [0x6]:          ret   


function: std.math#__srt_global.sinh[1910] params(1) in file: lib\support\0.2.805/math//math.sharp:72:4: note:  
		def sinh(num: var) : var {
		   ^

0 [0x0]: line: 73 ipushl #0   
1 [0x1]:          istore 3   
3 [0x3]:          call @1929 // <std.math#__srt_global.math_proc>   
4 [0x4]:          loadval ebx   
5 [0x5]:          return_val ebx   
6 [0x6]:          ret   


function: std.math#__srt_global.cosh[1911] params(1) in file: lib\support\0.2.805/math//math.sharp:76:4: note:  
		def cosh(num: var) : var {
		   ^

0 [0x0]: line: 77 ipushl #0   
1 [0x1]:          istore 4   
3 [0x3]:          call @1929 // <std.math#__srt_global.math_proc>   
4 [0x4]:          loadval ebx   
5 [0x5]:          return_val ebx   
6 [0x6]:          ret   


function: std.math#__srt_global.tanh[1912] params(1) in file: lib\support\0.2.805/math//math.sharp:80:4: note:  
		def tanh(num: var) : var {
		   ^

0 [0x0]: line: 81 ipushl #0   
1 [0x1]:          istore 5   
3 [0x3]:          call @1929 // <std.math#__srt_global.math_proc>   
4 [0x4]:          loadval ebx   
5 [0x5]:          return_val ebx   
6 [0x6]:          ret   


function: std.math#__srt_global.asin[1913] params(1) in file: lib\support\0.2.805/math//math.sharp:84:4: note:  
		def asin(num: var) : var {
		   ^

0 [0x0]: line: 85 ipushl #0   
1 [0x1]:          istore 6   
3 [0x3]:          call @1929 // <std.math#__srt_global.math_proc>   
4 [0x4]:          loadval ebx   
5 [0x5]:          return_val ebx   
6 [0x6]:          ret   


function: std.math#__srt_global.acos[1914] params(1) in file: lib\support\0.2.805/math//math.sharp:88:4: note:  
		def acos(num: var) : var {
		   ^

0 [0x0]: line: 89 ipushl #0   
1 [0x1]:          istore 7   
3 [0x3]:          call @1929 // <std.math#__srt_global.math_proc>   
4 [0x4]:          loadval ebx   
5 [0x5]:          return_val ebx   
6 [0x6]:          ret   


function: std.math#__srt_global.atan[1915] params(1) in file: lib\support\0.2.805/math//math.sharp:92:4: note:  
		def atan(num: var) : var {
		   ^

0 [0x0]: line: 93 ipushl #0   
1 [0x1]:          istore 8   
3 [0x3]:          call @1929 // <std.math#__srt_global.math_proc>   
4 [0x4]:          loadval ebx   
5 [0x5]:          return_val ebx   
6 [0x6]:          ret   


function: std.math#__srt_global.atan[1916] params(2) in file: lib\support\0.2.805/math//math.sharp:96:4: note:  
		def atan(num1: var, num2: var) : var {
		   ^

0 [0x0]: line: 97 ipushl #0   
1 [0x1]:          ipushl #1   
2 [0x2]:          istore 9   
4 [0x4]:          call @1930 // <std.math#__srt_global.math_proc>   
5 [0x5]:          loadval ebx   
6 [0x6]:          return_val ebx   
7 [0x7]:          ret   


function: std.math#__srt_global.exp[1917] params(1) in file: lib\support\0.2.805/math//math.sharp:100:4: note:  
		def exp(num: var) : var {
		   ^

0 [0x0]: line: 101 ipushl #0   
1 [0x1]:           istore 10   
3 [0x3]:           call @1929 // <std.math#__srt_global.math_proc>   
4 [0x4]:           loadval ebx   
5 [0x5]:           return_val ebx   
6 [0x6]:           ret   


function: std.math#__srt_global.log[1918] params(1) in file: lib\support\0.2.805/math//math.sharp:104:4: note:  
		def log(num: var) : var {
		   ^

0 [0x0]: line: 105 ipushl #0   
1 [0x1]:           istore 11   
3 [0x3]:           call @1929 // <std.math#__srt_global.math_proc>   
4 [0x4]:           loadval ebx   
5 [0x5]:           return_val ebx   
6 [0x6]:           ret   


function: std.math#__srt_global.log10[1919] params(1) in file: lib\support\0.2.805/math//math.sharp:108:4: note:  
		def log10(num: var) : var {
		   ^

0 [0x0]: line: 109 ipushl #0   
1 [0x1]:           istore 12   
3 [0x3]:           call @1929 // <std.math#__srt_global.math_proc>   
4 [0x4]:           loadval ebx   
5 [0x5]:           return_val ebx   
6 [0x6]:           ret   


function: std.math#__srt_global.pow[1920] params(2) in file: lib\support\0.2.805/math//math.sharp:112:4: note:  
		def pow(num: var, exp: var) : var {
		   ^

0 [0x0]: line: 113 ipushl #0   
1 [0x1]:           ipushl #1   
2 [0x2]:           istore 13   
4 [0x4]:           call @1930 // <std.math#__srt_global.math_proc>   
5 [0x5]:           loadval ebx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.math#__srt_global.sqrt[1921] params(1) in file: lib\support\0.2.805/math//math.sharp:116:4: note:  
		def sqrt(num: var) : var {
		   ^

0 [0x0]: line: 117 ipushl #0   
1 [0x1]:           istore 14   
3 [0x3]:           call @1929 // <std.math#__srt_global.math_proc>   
4 [0x4]:           loadval ebx   
5 [0x5]:           return_val ebx   
6 [0x6]:           ret   


function: std.math#__srt_global.ceil[1922] params(1) in file: lib\support\0.2.805/math//math.sharp:120:4: note:  
		def ceil(num: var) : var {
		   ^

0 [0x0]: line: 121 ipushl #0   
1 [0x1]:           istore 15   
3 [0x3]:           call @1929 // <std.math#__srt_global.math_proc>   
4 [0x4]:           loadval ebx   
5 [0x5]:           return_val ebx   
6 [0x6]:           ret   


function: std.math#__srt_global.floor[1923] params(1) in file: lib\support\0.2.805/math//math.sharp:124:4: note:  
		def floor(num: var) : var {
		   ^

0 [0x0]: line: 125 ipushl #0   
1 [0x1]:           istore 16   
3 [0x3]:           call @1929 // <std.math#__srt_global.math_proc>   
4 [0x4]:           loadval ebx   
5 [0x5]:           return_val ebx   
6 [0x6]:           ret   


function: std.math#__srt_global.abs[1924] params(1) in file: lib\support\0.2.805/math//math.sharp:128:4: note:  
		def abs(num: var) : var {
		   ^

0 [0x0]: line: 129 ipushl #0   
1 [0x1]:           call @1925 // <std.math#__srt_global.fabs>   
2 [0x2]:           loadval ebx   
3 [0x3]:           return_val ebx   
4 [0x4]:           ret   


function: std.math#__srt_global.fabs[1925] params(1) in file: lib\support\0.2.805/math//math.sharp:132:12: note:  
		private def fabs(num: var) : var {
		           ^

0 [0x0]: line: 133 ipushl #0   
1 [0x1]:           istore 17   
3 [0x3]:           call @1929 // <std.math#__srt_global.math_proc>   
4 [0x4]:           loadval ebx   
5 [0x5]:           return_val ebx   
6 [0x6]:           ret   


function: std.math#__srt_global.ldexp[1926] params(2) in file: lib\support\0.2.805/math//math.sharp:136:4: note:  
		def ldexp(num: var, num2: var) : var {
		   ^

0 [0x0]: line: 137 ipushl #0   
1 [0x1]:           ipushl #1   
2 [0x2]:           istore 18   
4 [0x4]:           call @1930 // <std.math#__srt_global.math_proc>   
5 [0x5]:           loadval ebx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.math#__srt_global.fmod[1927] params(2) in file: lib\support\0.2.805/math//math.sharp:140:4: note:  
		def fmod(num: var, num2: var) : var {
		   ^

0 [0x0]: line: 141 ipushl #0   
1 [0x1]:           ipushl #1   
2 [0x2]:           istore 19   
4 [0x4]:           call @1930 // <std.math#__srt_global.math_proc>   
5 [0x5]:           loadval ebx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.math#__srt_global.round[1928] params(1) in file: lib\support\0.2.805/math//math.sharp:144:4: note:  
		def round(num: var) : var {
		   ^

0 [0x0]: line: 145 loadl ebx, fp+0   
1 [0x1]:           mov64 ebx, ebx   
2 [0x2]:           mov64 ebx, ebx   
3 [0x3]:           smovr_2 ebx, fp+1   
4 [0x4]: line: 146 loadl ebx, fp+1   
5 [0x5]:           subl ebx, fp@0   
6 [0x6]: line: 148 ipushl #0   
7 [0x7]:           ldc ebx // 0.5   
8 [0x8]:           loadval ecx   
9 [0x9]:           gte ecx, ebx   
10 [0xa]:           movr ebx, cmt   
11 [0xb]:           movr cmt, ebx   
12 [0xc]:           jne 21   
13 [0xd]:           ipushl #1   
14 [0xe]:           movi #1, ebx   
16 [0x10]:           loadval ecx   
17 [0x11]:           add ecx, ebx -> ebx   
18 [0x12]:           return_val ebx   
19 [0x13]:           ret   
20 [0x14]:           jmp @24   
21 [0x15]: line: 149 loadl ebx, fp+1   
22 [0x16]:           return_val ebx   
23 [0x17]:           ret   
24 [0x18]:           nop   


function: std.math#__srt_global.math_proc[1929] params(2) in file: lib\support\0.2.805/math//math.sharp:152:10: note:  
		local def math_proc(num: var, proc: var) : var {
		         ^

0 [0x0]: line: 153 loadl ebx, fp+0   : protected asm start
1 [0x1]:           loadl ecx, fp+1   
2 [0x2]:           int 0x18   
3 [0x3]:           return_val cmt   
4 [0x4]:           ret   
5 [0x5]: line: 161 istorel 0, fp+0   : protected asm end
7 [0x7]:           ret   


function: std.math#__srt_global.math_proc[1930] params(3) in file: lib\support\0.2.805/math//math.sharp:164:10: note:  
		local def math_proc(num:var, num2: var, proc: var) : var {
		         ^

0 [0x0]: line: 165 loadl ebx, fp+0   : protected asm start
1 [0x1]:           loadl egx, fp+1   
2 [0x2]:           loadl ecx, fp+2   
3 [0x3]:           int 0x18   
4 [0x4]:           return_val cmt   
5 [0x5]:           ret   
6 [0x6]: line: 174 istorel 0, fp+0   : protected asm end
8 [0x8]:           ret   


function: std#_nil_.to_string[1931] params(0) in file: lib\support\0.2.805/nil.sharp:14:15: note:  
		    public def to_string() := new string("nil");
		              ^

0 [0x0]: line: 14 new_class @64 // std#string   
1 [0x1]:          dup    
2 [0x2]:          newstr @1 // nil   
3 [0x3]:          call @2935 // <std#string.string>   
4 [0x4]:          popobj2    
5 [0x5]:          returnobj   
6 [0x6]:          ret   


constructor: std#_nil_._nil_[1932] params(0) in file: lib\support\0.2.805/nil.sharp:10:13: note:  
		stable class _nil_ {
		            ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


function: std#_object_.to_string[1933] params(0) in file: lib\support\0.2.805/object.sharp:13:15: note:  
		    public def to_string() := new string();
		              ^

0 [0x0]: line: 13 new_class @64 // std#string   
1 [0x1]:          dup    
2 [0x2]:          call @2993 // <std#string.string>   
3 [0x3]:          popobj2    
4 [0x4]:          returnobj   
5 [0x5]:          ret   


function: std#_object_.wait[1934] params(0) in file: lib\support\0.2.805/object.sharp:15:8: note:  
		    def wait() {
		       ^

0 [0x0]: line: 16 pushl 0   : protected asm start
1 [0x1]:          int 0x3c   
2 [0x2]:          ret   : protected asm end


function: std#_object_.notify[1935] params(0) in file: lib\support\0.2.805/object.sharp:22:8: note:  
		    def notify() {
		       ^

0 [0x0]: line: 23 pushl 0   : protected asm start
1 [0x1]:          int 0x3d   
2 [0x2]:          ret   : protected asm end


function: std#_object_.notify[1936] params(1) in file: lib\support\0.2.805/object.sharp:29:8: note:  
		    def notify(mills: var) {
		       ^

0 [0x0]: line: 30 pushl 0   : protected asm start
1 [0x1]:          loadl ebx, fp+1   
2 [0x2]:          int 0x3e   
3 [0x3]:          ret   : protected asm end


function: std#_object_.hash[1937] params(0) in file: lib\support\0.2.805/object.sharp:37:8: note:  
		    def hash() : long {
		       ^

0 [0x0]: line: 39 new_class @45 // std#long   
1 [0x1]:          dup    
2 [0x2]:          istore 0   
4 [0x4]:          call @2077 // <std#long.long>   
5 [0x5]:          popobj2    
6 [0x6]:          returnobj   
7 [0x7]:          ret   


function: std#_object_.guid[1938] params(0) in file: lib\support\0.2.805/object.sharp:42:8: note:  
		    def guid() : long {
		       ^

0 [0x0]: line: 44 new_class @45 // std#long   
1 [0x1]:          dup    
2 [0x2]:          movg @0 // @std#__srt_global   
3 [0x3]:          movn #0   
5 [0x5]:          movi #0, adx   
7 [0x7]:          iaload ebx, adx   
8 [0x8]:          movr egx, ebx   
9 [0x9]:          inc ebx   
10 [0xa]:          movi #0, adx   
12 [0xc]:          rmov adx, ebx   
13 [0xd]:          rstore egx   
14 [0xe]:          call @2077 // <std#long.long>   
15 [0xf]:          popobj2    
16 [0x10]:          returnobj   
17 [0x11]:          ret   


constructor: std#_object_._object_[1939] params(0) in file: lib\support\0.2.805/object.sharp:11:13: note:  
		stable class _object_ : printable, unique {
		            ^

0 [0x0]:         ret   


function: platform#build.is_windows[1940] params(0) in file: lib\support\0.2.805/platform//build.sharp:9:15: note:  
		    static def is_windows() : var {
		              ^

0 [0x0]: line: 10 movg @39 // @platform#build   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          newstr @43 // win   
5 [0x5]:          call @2952 // <std#string.operator==>   
6 [0x6]:          loadval ebx   
7 [0x7]:          return_val ebx   
8 [0x8]:          ret   


function: platform#build.is_linux[1941] params(0) in file: lib\support\0.2.805/platform//build.sharp:13:15: note:  
		    static def is_linux() : var {
		              ^

0 [0x0]: line: 14 movg @39 // @platform#build   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          newstr @44 // posix   
5 [0x5]:          call @2952 // <std#string.operator==>   
6 [0x6]:          loadval ebx   
7 [0x7]:          return_val ebx   
8 [0x8]:          ret   


constructor: platform#build.build[1942] params(0) in file: lib\support\0.2.805/platform//build.sharp:3:6: note:  
		class build {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


function: platform#__srt_global.load_library[1943] params(1) in file: lib\support\0.2.805/platform//dl.sharp:5:4: note:  
		def load_library(name: string) {
		   ^

0 [0x0]: line: 6 pushl 0   
1 [0x1]:         call @1950 // <platform.kernel#platform.load_library>   
2 [0x2]:         ret   


function: platform#__srt_global.free_library[1944] params(1) in file: lib\support\0.2.805/platform//dl.sharp:9:4: note:  
		def free_library(name: string): var {
		   ^

0 [0x0]: line: 10 pushl 0   
1 [0x1]:          call @1951 // <platform.kernel#platform.free_library>   
2 [0x2]:          loadval ebx   
3 [0x3]:          return_val ebx   
4 [0x4]:          ret   


function: platform#__srt_global.link[1945] params(2) in file: lib\support\0.2.805/platform//dl.sharp:13:4: note:  
		def link(name: string, library: string): var {
		   ^

0 [0x0]: line: 14 pushl 0   
1 [0x1]:          pushl 1   
2 [0x2]:          call @1952 // <platform.kernel#platform.link_func>   
3 [0x3]:          loadval ebx   
4 [0x4]:          return_val ebx   
5 [0x5]:          ret   


function: platform.kernel#platform.tls_init[1946] params(0) in file: lib\support\0.2.805/platform//kernel//platform.sharp:13:15: note:  
		    static def tls_init() {}
		              ^

0 [0x0]: line: 13 ret   


function: platform.kernel#platform.static_init[1947] params(0) in file: lib\support\0.2.805/platform//kernel//platform.sharp:14:23: note:  
		    private static def static_init() {}
		                      ^

0 [0x0]: line: 14 new_class @26 // std.io.task#job_state   
1 [0x1]:          movg @26 // @std.io.task#job_state   
2 [0x2]:          movn #0   
4 [0x4]:          popobj   
5 [0x5]:          newstr @79 // created   
6 [0x6]:          movg @26 // @std.io.task#job_state   
7 [0x7]:          movn #0   
9 [0x9]:          movn #0   
11 [0xb]:          popobj   
12 [0xc]:          movi #-1, ebx   
14 [0xe]:          movg @26 // @std.io.task#job_state   
15 [0xf]:          movn #0   
17 [0x11]:          movn #1   
19 [0x13]:          movi #0, adx   
21 [0x15]:          rmov adx, ebx   
22 [0x16]:          new_class @26 // std.io.task#job_state   
23 [0x17]:          movg @26 // @std.io.task#job_state   
24 [0x18]:          movn #1   
26 [0x1a]:          popobj   
27 [0x1b]:          newstr @80 // active   
28 [0x1c]:          movg @26 // @std.io.task#job_state   
29 [0x1d]:          movn #1   
31 [0x1f]:          movn #0   
33 [0x21]:          popobj   
34 [0x22]:          movi #0, ebx   
36 [0x24]:          movg @26 // @std.io.task#job_state   
37 [0x25]:          movn #1   
39 [0x27]:          movn #1   
41 [0x29]:          movi #0, adx   
43 [0x2b]:          rmov adx, ebx   
44 [0x2c]:          new_class @26 // std.io.task#job_state   
45 [0x2d]:          movg @26 // @std.io.task#job_state   
46 [0x2e]:          movn #2   
48 [0x30]:          popobj   
49 [0x31]:          newstr @81 // completed   
50 [0x32]:          movg @26 // @std.io.task#job_state   
51 [0x33]:          movn #2   
53 [0x35]:          movn #0   
55 [0x37]:          popobj   
56 [0x38]:          movi #1, ebx   
58 [0x3a]:          movg @26 // @std.io.task#job_state   
59 [0x3b]:          movn #2   
61 [0x3d]:          movn #1   
63 [0x3f]:          movi #0, adx   
65 [0x41]:          rmov adx, ebx   
66 [0x42]:          new_class @26 // std.io.task#job_state   
67 [0x43]:          movg @26 // @std.io.task#job_state   
68 [0x44]:          movn #3   
70 [0x46]:          popobj   
71 [0x47]:          newstr @82 // cancelled   
72 [0x48]:          movg @26 // @std.io.task#job_state   
73 [0x49]:          movn #3   
75 [0x4b]:          movn #0   
77 [0x4d]:          popobj   
78 [0x4e]:          movi #2, ebx   
80 [0x50]:          movg @26 // @std.io.task#job_state   
81 [0x51]:          movn #3   
83 [0x53]:          movn #1   
85 [0x55]:          movi #0, adx   
87 [0x57]:          rmov adx, ebx   
88 [0x58]:          new_class @30 // std.io#thread_priority   
89 [0x59]:          movg @30 // @std.io#thread_priority   
90 [0x5a]:          movn #0   
92 [0x5c]:          popobj   
93 [0x5d]:          newstr @83 // min_priority   
94 [0x5e]:          movg @30 // @std.io#thread_priority   
95 [0x5f]:          movn #0   
97 [0x61]:          movn #0   
99 [0x63]:          popobj   
100 [0x64]:          movi #1, ebx   
102 [0x66]:          movg @30 // @std.io#thread_priority   
103 [0x67]:          movn #0   
105 [0x69]:          movn #1   
107 [0x6b]:          movi #0, adx   
109 [0x6d]:          rmov adx, ebx   
110 [0x6e]:          new_class @30 // std.io#thread_priority   
111 [0x6f]:          movg @30 // @std.io#thread_priority   
112 [0x70]:          movn #1   
114 [0x72]:          popobj   
115 [0x73]:          newstr @84 // norm_priority   
116 [0x74]:          movg @30 // @std.io#thread_priority   
117 [0x75]:          movn #1   
119 [0x77]:          movn #0   
121 [0x79]:          popobj   
122 [0x7a]:          movi #4, ebx   
124 [0x7c]:          movg @30 // @std.io#thread_priority   
125 [0x7d]:          movn #1   
127 [0x7f]:          movn #1   
129 [0x81]:          movi #0, adx   
131 [0x83]:          rmov adx, ebx   
132 [0x84]:          new_class @30 // std.io#thread_priority   
133 [0x85]:          movg @30 // @std.io#thread_priority   
134 [0x86]:          movn #2   
136 [0x88]:          popobj   
137 [0x89]:          newstr @85 // max_priority   
138 [0x8a]:          movg @30 // @std.io#thread_priority   
139 [0x8b]:          movn #2   
141 [0x8d]:          movn #0   
143 [0x8f]:          popobj   
144 [0x90]:          movi #6, ebx   
146 [0x92]:          movg @30 // @std.io#thread_priority   
147 [0x93]:          movn #2   
149 [0x95]:          movn #1   
151 [0x97]:          movi #0, adx   
153 [0x99]:          rmov adx, ebx   
154 [0x9a]:          new_class @31 // std.io#thread_result   
155 [0x9b]:          movg @31 // @std.io#thread_result   
156 [0x9c]:          movn #0   
158 [0x9e]:          popobj   
159 [0x9f]:          newstr @86 // result_ok   
160 [0xa0]:          movg @31 // @std.io#thread_result   
161 [0xa1]:          movn #0   
163 [0xa3]:          movn #0   
165 [0xa5]:          popobj   
166 [0xa6]:          movi #0, ebx   
168 [0xa8]:          movg @31 // @std.io#thread_result   
169 [0xa9]:          movn #0   
171 [0xab]:          movn #1   
173 [0xad]:          movi #0, adx   
175 [0xaf]:          rmov adx, ebx   
176 [0xb0]:          new_class @31 // std.io#thread_result   
177 [0xb1]:          movg @31 // @std.io#thread_result   
178 [0xb2]:          movn #1   
180 [0xb4]:          popobj   
181 [0xb5]:          newstr @87 // result_ill_thread_start   
182 [0xb6]:          movg @31 // @std.io#thread_result   
183 [0xb7]:          movn #1   
185 [0xb9]:          movn #0   
187 [0xbb]:          popobj   
188 [0xbc]:          movi #1, ebx   
190 [0xbe]:          movg @31 // @std.io#thread_result   
191 [0xbf]:          movn #1   
193 [0xc1]:          movn #1   
195 [0xc3]:          movi #0, adx   
197 [0xc5]:          rmov adx, ebx   
198 [0xc6]:          new_class @31 // std.io#thread_result   
199 [0xc7]:          movg @31 // @std.io#thread_result   
200 [0xc8]:          movn #2   
202 [0xca]:          popobj   
203 [0xcb]:          newstr @88 // result_thread_running   
204 [0xcc]:          movg @31 // @std.io#thread_result   
205 [0xcd]:          movn #2   
207 [0xcf]:          movn #0   
209 [0xd1]:          popobj   
210 [0xd2]:          movi #2, ebx   
212 [0xd4]:          movg @31 // @std.io#thread_result   
213 [0xd5]:          movn #2   
215 [0xd7]:          movn #1   
217 [0xd9]:          movi #0, adx   
219 [0xdb]:          rmov adx, ebx   
220 [0xdc]:          new_class @31 // std.io#thread_result   
221 [0xdd]:          movg @31 // @std.io#thread_result   
222 [0xde]:          movn #3   
224 [0xe0]:          popobj   
225 [0xe1]:          newstr @89 // result_thread_terminated   
226 [0xe2]:          movg @31 // @std.io#thread_result   
227 [0xe3]:          movn #3   
229 [0xe5]:          movn #0   
231 [0xe7]:          popobj   
232 [0xe8]:          movi #3, ebx   
234 [0xea]:          movg @31 // @std.io#thread_result   
235 [0xeb]:          movn #3   
237 [0xed]:          movn #1   
239 [0xef]:          movi #0, adx   
241 [0xf1]:          rmov adx, ebx   
242 [0xf2]:          new_class @31 // std.io#thread_result   
243 [0xf3]:          movg @31 // @std.io#thread_result   
244 [0xf4]:          movn #4   
246 [0xf6]:          popobj   
247 [0xf7]:          newstr @90 // result_invalid_stack_size   
248 [0xf8]:          movg @31 // @std.io#thread_result   
249 [0xf9]:          movn #4   
251 [0xfb]:          movn #0   
253 [0xfd]:          popobj   
254 [0xfe]:          movi #4, ebx   
256 [0x100]:          movg @31 // @std.io#thread_result   
257 [0x101]:          movn #4   
259 [0x103]:          movn #1   
261 [0x105]:          movi #0, adx   
263 [0x107]:          rmov adx, ebx   
264 [0x108]:          new_class @31 // std.io#thread_result   
265 [0x109]:          movg @31 // @std.io#thread_result   
266 [0x10a]:          movn #5   
268 [0x10c]:          popobj   
269 [0x10d]:          newstr @91 // result_thread_not_started   
270 [0x10e]:          movg @31 // @std.io#thread_result   
271 [0x10f]:          movn #5   
273 [0x111]:          movn #0   
275 [0x113]:          popobj   
276 [0x114]:          movi #5, ebx   
278 [0x116]:          movg @31 // @std.io#thread_result   
279 [0x117]:          movn #5   
281 [0x119]:          movn #1   
283 [0x11b]:          movi #0, adx   
285 [0x11d]:          rmov adx, ebx   
286 [0x11e]:          new_class @31 // std.io#thread_result   
287 [0x11f]:          movg @31 // @std.io#thread_result   
288 [0x120]:          movn #6   
290 [0x122]:          popobj   
291 [0x123]:          newstr @92 // result_ill_thread_join   
292 [0x124]:          movg @31 // @std.io#thread_result   
293 [0x125]:          movn #6   
295 [0x127]:          movn #0   
297 [0x129]:          popobj   
298 [0x12a]:          movi #6, ebx   
300 [0x12c]:          movg @31 // @std.io#thread_result   
301 [0x12d]:          movn #6   
303 [0x12f]:          movn #1   
305 [0x131]:          movi #0, adx   
307 [0x133]:          rmov adx, ebx   
308 [0x134]:          new_class @31 // std.io#thread_result   
309 [0x135]:          movg @31 // @std.io#thread_result   
310 [0x136]:          movn #7   
312 [0x138]:          popobj   
313 [0x139]:          newstr @93 // result_thread_join_failed   
314 [0x13a]:          movg @31 // @std.io#thread_result   
315 [0x13b]:          movn #7   
317 [0x13d]:          movn #0   
319 [0x13f]:          popobj   
320 [0x140]:          movi #7, ebx   
322 [0x142]:          movg @31 // @std.io#thread_result   
323 [0x143]:          movn #7   
325 [0x145]:          movn #1   
327 [0x147]:          movi #0, adx   
329 [0x149]:          rmov adx, ebx   
330 [0x14a]:          new_class @31 // std.io#thread_result   
331 [0x14b]:          movg @31 // @std.io#thread_result   
332 [0x14c]:          movn #8   
334 [0x14e]:          popobj   
335 [0x14f]:          newstr @94 // result_ill_thread_interrupt   
336 [0x150]:          movg @31 // @std.io#thread_result   
337 [0x151]:          movn #8   
339 [0x153]:          movn #0   
341 [0x155]:          popobj   
342 [0x156]:          movi #8, ebx   
344 [0x158]:          movg @31 // @std.io#thread_result   
345 [0x159]:          movn #8   
347 [0x15b]:          movn #1   
349 [0x15d]:          movi #0, adx   
351 [0x15f]:          rmov adx, ebx   
352 [0x160]:          new_class @31 // std.io#thread_result   
353 [0x161]:          movg @31 // @std.io#thread_result   
354 [0x162]:          movn #9   
356 [0x164]:          popobj   
357 [0x165]:          newstr @95 // result_thread_interrupt_failed   
358 [0x166]:          movg @31 // @std.io#thread_result   
359 [0x167]:          movn #9   
361 [0x169]:          movn #0   
363 [0x16b]:          popobj   
364 [0x16c]:          movi #9, ebx   
366 [0x16e]:          movg @31 // @std.io#thread_result   
367 [0x16f]:          movn #9   
369 [0x171]:          movn #1   
371 [0x173]:          movi #0, adx   
373 [0x175]:          rmov adx, ebx   
374 [0x176]:          new_class @31 // std.io#thread_result   
375 [0x177]:          movg @31 // @std.io#thread_result   
376 [0x178]:          movn #10   
378 [0x17a]:          popobj   
379 [0x17b]:          newstr @96 // result_ill_thread_destroy   
380 [0x17c]:          movg @31 // @std.io#thread_result   
381 [0x17d]:          movn #10   
383 [0x17f]:          movn #0   
385 [0x181]:          popobj   
386 [0x182]:          movi #10, ebx   
388 [0x184]:          movg @31 // @std.io#thread_result   
389 [0x185]:          movn #10   
391 [0x187]:          movn #1   
393 [0x189]:          movi #0, adx   
395 [0x18b]:          rmov adx, ebx   
396 [0x18c]:          new_class @31 // std.io#thread_result   
397 [0x18d]:          movg @31 // @std.io#thread_result   
398 [0x18e]:          movn #11   
400 [0x190]:          popobj   
401 [0x191]:          newstr @97 // result_thread_create_failed   
402 [0x192]:          movg @31 // @std.io#thread_result   
403 [0x193]:          movn #11   
405 [0x195]:          movn #0   
407 [0x197]:          popobj   
408 [0x198]:          movi #11, ebx   
410 [0x19a]:          movg @31 // @std.io#thread_result   
411 [0x19b]:          movn #11   
413 [0x19d]:          movn #1   
415 [0x19f]:          movi #0, adx   
417 [0x1a1]:          rmov adx, ebx   
418 [0x1a2]:          new_class @31 // std.io#thread_result   
419 [0x1a3]:          movg @31 // @std.io#thread_result   
420 [0x1a4]:          movn #12   
422 [0x1a6]:          popobj   
423 [0x1a7]:          newstr @98 // result_no_thread_id   
424 [0x1a8]:          movg @31 // @std.io#thread_result   
425 [0x1a9]:          movn #12   
427 [0x1ab]:          movn #0   
429 [0x1ad]:          popobj   
430 [0x1ae]:          movi #12, ebx   
432 [0x1b0]:          movg @31 // @std.io#thread_result   
433 [0x1b1]:          movn #12   
435 [0x1b3]:          movn #1   
437 [0x1b5]:          movi #0, adx   
439 [0x1b7]:          rmov adx, ebx   
440 [0x1b8]:          new_class @31 // std.io#thread_result   
441 [0x1b9]:          movg @31 // @std.io#thread_result   
442 [0x1ba]:          movn #13   
444 [0x1bc]:          popobj   
445 [0x1bd]:          newstr @99 // result_thread_destroy_failed   
446 [0x1be]:          movg @31 // @std.io#thread_result   
447 [0x1bf]:          movn #13   
449 [0x1c1]:          movn #0   
451 [0x1c3]:          popobj   
452 [0x1c4]:          movi #13, ebx   
454 [0x1c6]:          movg @31 // @std.io#thread_result   
455 [0x1c7]:          movn #13   
457 [0x1c9]:          movn #1   
459 [0x1cb]:          movi #0, adx   
461 [0x1cd]:          rmov adx, ebx   
462 [0x1ce]:          new_class @31 // std.io#thread_result   
463 [0x1cf]:          movg @31 // @std.io#thread_result   
464 [0x1d0]:          movn #14   
466 [0x1d2]:          popobj   
467 [0x1d3]:          newstr @100 // result_ill_priority_set   
468 [0x1d4]:          movg @31 // @std.io#thread_result   
469 [0x1d5]:          movn #14   
471 [0x1d7]:          movn #0   
473 [0x1d9]:          popobj   
474 [0x1da]:          movi #14, ebx   
476 [0x1dc]:          movg @31 // @std.io#thread_result   
477 [0x1dd]:          movn #14   
479 [0x1df]:          movn #1   
481 [0x1e1]:          movi #0, adx   
483 [0x1e3]:          rmov adx, ebx   
484 [0x1e4]:          new_class @31 // std.io#thread_result   
485 [0x1e5]:          movg @31 // @std.io#thread_result   
486 [0x1e6]:          movn #15   
488 [0x1e8]:          popobj   
489 [0x1e9]:          newstr @101 // result_ill_thread_suspend   
490 [0x1ea]:          movg @31 // @std.io#thread_result   
491 [0x1eb]:          movn #15   
493 [0x1ed]:          movn #0   
495 [0x1ef]:          popobj   
496 [0x1f0]:          movi #15, ebx   
498 [0x1f2]:          movg @31 // @std.io#thread_result   
499 [0x1f3]:          movn #15   
501 [0x1f5]:          movn #1   
503 [0x1f7]:          movi #0, adx   
505 [0x1f9]:          rmov adx, ebx   
506 [0x1fa]:          new_class @31 // std.io#thread_result   
507 [0x1fb]:          movg @31 // @std.io#thread_result   
508 [0x1fc]:          movn #16   
510 [0x1fe]:          popobj   
511 [0x1ff]:          newstr @102 // result_max_spin   
512 [0x200]:          movg @31 // @std.io#thread_result   
513 [0x201]:          movn #16   
515 [0x203]:          movn #0   
517 [0x205]:          popobj   
518 [0x206]:          movi #255, ebx   
520 [0x208]:          movg @31 // @std.io#thread_result   
521 [0x209]:          movn #16   
523 [0x20b]:          movn #1   
525 [0x20d]:          movi #0, adx   
527 [0x20f]:          rmov adx, ebx   
528 [0x210]:          new_class @31 // std.io#thread_result   
529 [0x211]:          movg @31 // @std.io#thread_result   
530 [0x212]:          movn #17   
532 [0x214]:          popobj   
533 [0x215]:          newstr @103 // enums   
534 [0x216]:          movg @31 // @std.io#thread_result   
535 [0x217]:          movn #17   
537 [0x219]:          movn #0   
539 [0x21b]:          popobj   
540 [0x21c]:          movi #256, ebx   
542 [0x21e]:          movg @31 // @std.io#thread_result   
543 [0x21f]:          movn #17   
545 [0x221]:          movn #1   
547 [0x223]:          movi #0, adx   
549 [0x225]:          rmov adx, ebx   
550 [0x226]:          new_class @58 // std.reflect#data_type   
551 [0x227]:          movg @58 // @std.reflect#data_type   
552 [0x228]:          movn #0   
554 [0x22a]:          popobj   
555 [0x22b]:          newstr @104 // int8   
556 [0x22c]:          movg @58 // @std.reflect#data_type   
557 [0x22d]:          movn #0   
559 [0x22f]:          movn #0   
561 [0x231]:          popobj   
562 [0x232]:          movi #0, ebx   
564 [0x234]:          movg @58 // @std.reflect#data_type   
565 [0x235]:          movn #0   
567 [0x237]:          movn #1   
569 [0x239]:          movi #0, adx   
571 [0x23b]:          rmov adx, ebx   
572 [0x23c]:          new_class @58 // std.reflect#data_type   
573 [0x23d]:          movg @58 // @std.reflect#data_type   
574 [0x23e]:          movn #1   
576 [0x240]:          popobj   
577 [0x241]:          newstr @105 // int16   
578 [0x242]:          movg @58 // @std.reflect#data_type   
579 [0x243]:          movn #1   
581 [0x245]:          movn #0   
583 [0x247]:          popobj   
584 [0x248]:          movi #1, ebx   
586 [0x24a]:          movg @58 // @std.reflect#data_type   
587 [0x24b]:          movn #1   
589 [0x24d]:          movn #1   
591 [0x24f]:          movi #0, adx   
593 [0x251]:          rmov adx, ebx   
594 [0x252]:          new_class @58 // std.reflect#data_type   
595 [0x253]:          movg @58 // @std.reflect#data_type   
596 [0x254]:          movn #2   
598 [0x256]:          popobj   
599 [0x257]:          newstr @106 // int32   
600 [0x258]:          movg @58 // @std.reflect#data_type   
601 [0x259]:          movn #2   
603 [0x25b]:          movn #0   
605 [0x25d]:          popobj   
606 [0x25e]:          movi #2, ebx   
608 [0x260]:          movg @58 // @std.reflect#data_type   
609 [0x261]:          movn #2   
611 [0x263]:          movn #1   
613 [0x265]:          movi #0, adx   
615 [0x267]:          rmov adx, ebx   
616 [0x268]:          new_class @58 // std.reflect#data_type   
617 [0x269]:          movg @58 // @std.reflect#data_type   
618 [0x26a]:          movn #3   
620 [0x26c]:          popobj   
621 [0x26d]:          newstr @107 // int64   
622 [0x26e]:          movg @58 // @std.reflect#data_type   
623 [0x26f]:          movn #3   
625 [0x271]:          movn #0   
627 [0x273]:          popobj   
628 [0x274]:          movi #3, ebx   
630 [0x276]:          movg @58 // @std.reflect#data_type   
631 [0x277]:          movn #3   
633 [0x279]:          movn #1   
635 [0x27b]:          movi #0, adx   
637 [0x27d]:          rmov adx, ebx   
638 [0x27e]:          new_class @58 // std.reflect#data_type   
639 [0x27f]:          movg @58 // @std.reflect#data_type   
640 [0x280]:          movn #4   
642 [0x282]:          popobj   
643 [0x283]:          newstr @108 // uint8   
644 [0x284]:          movg @58 // @std.reflect#data_type   
645 [0x285]:          movn #4   
647 [0x287]:          movn #0   
649 [0x289]:          popobj   
650 [0x28a]:          movi #4, ebx   
652 [0x28c]:          movg @58 // @std.reflect#data_type   
653 [0x28d]:          movn #4   
655 [0x28f]:          movn #1   
657 [0x291]:          movi #0, adx   
659 [0x293]:          rmov adx, ebx   
660 [0x294]:          new_class @58 // std.reflect#data_type   
661 [0x295]:          movg @58 // @std.reflect#data_type   
662 [0x296]:          movn #5   
664 [0x298]:          popobj   
665 [0x299]:          newstr @109 // uint16   
666 [0x29a]:          movg @58 // @std.reflect#data_type   
667 [0x29b]:          movn #5   
669 [0x29d]:          movn #0   
671 [0x29f]:          popobj   
672 [0x2a0]:          movi #5, ebx   
674 [0x2a2]:          movg @58 // @std.reflect#data_type   
675 [0x2a3]:          movn #5   
677 [0x2a5]:          movn #1   
679 [0x2a7]:          movi #0, adx   
681 [0x2a9]:          rmov adx, ebx   
682 [0x2aa]:          new_class @58 // std.reflect#data_type   
683 [0x2ab]:          movg @58 // @std.reflect#data_type   
684 [0x2ac]:          movn #6   
686 [0x2ae]:          popobj   
687 [0x2af]:          newstr @110 // uint32   
688 [0x2b0]:          movg @58 // @std.reflect#data_type   
689 [0x2b1]:          movn #6   
691 [0x2b3]:          movn #0   
693 [0x2b5]:          popobj   
694 [0x2b6]:          movi #6, ebx   
696 [0x2b8]:          movg @58 // @std.reflect#data_type   
697 [0x2b9]:          movn #6   
699 [0x2bb]:          movn #1   
701 [0x2bd]:          movi #0, adx   
703 [0x2bf]:          rmov adx, ebx   
704 [0x2c0]:          new_class @58 // std.reflect#data_type   
705 [0x2c1]:          movg @58 // @std.reflect#data_type   
706 [0x2c2]:          movn #7   
708 [0x2c4]:          popobj   
709 [0x2c5]:          newstr @111 // uint64   
710 [0x2c6]:          movg @58 // @std.reflect#data_type   
711 [0x2c7]:          movn #7   
713 [0x2c9]:          movn #0   
715 [0x2cb]:          popobj   
716 [0x2cc]:          movi #7, ebx   
718 [0x2ce]:          movg @58 // @std.reflect#data_type   
719 [0x2cf]:          movn #7   
721 [0x2d1]:          movn #1   
723 [0x2d3]:          movi #0, adx   
725 [0x2d5]:          rmov adx, ebx   
726 [0x2d6]:          new_class @58 // std.reflect#data_type   
727 [0x2d7]:          movg @58 // @std.reflect#data_type   
728 [0x2d8]:          movn #8   
730 [0x2da]:          popobj   
731 [0x2db]:          newstr @112 // fnptr   
732 [0x2dc]:          movg @58 // @std.reflect#data_type   
733 [0x2dd]:          movn #8   
735 [0x2df]:          movn #0   
737 [0x2e1]:          popobj   
738 [0x2e2]:          movi #8, ebx   
740 [0x2e4]:          movg @58 // @std.reflect#data_type   
741 [0x2e5]:          movn #8   
743 [0x2e7]:          movn #1   
745 [0x2e9]:          movi #0, adx   
747 [0x2eb]:          rmov adx, ebx   
748 [0x2ec]:          new_class @58 // std.reflect#data_type   
749 [0x2ed]:          movg @58 // @std.reflect#data_type   
750 [0x2ee]:          movn #9   
752 [0x2f0]:          popobj   
753 [0x2f1]:          newstr @113 // _var   
754 [0x2f2]:          movg @58 // @std.reflect#data_type   
755 [0x2f3]:          movn #9   
757 [0x2f5]:          movn #0   
759 [0x2f7]:          popobj   
760 [0x2f8]:          movi #9, ebx   
762 [0x2fa]:          movg @58 // @std.reflect#data_type   
763 [0x2fb]:          movn #9   
765 [0x2fd]:          movn #1   
767 [0x2ff]:          movi #0, adx   
769 [0x301]:          rmov adx, ebx   
770 [0x302]:          new_class @58 // std.reflect#data_type   
771 [0x303]:          movg @58 // @std.reflect#data_type   
772 [0x304]:          movn #10   
774 [0x306]:          popobj   
775 [0x307]:          newstr @114 // _object   
776 [0x308]:          movg @58 // @std.reflect#data_type   
777 [0x309]:          movn #10   
779 [0x30b]:          movn #0   
781 [0x30d]:          popobj   
782 [0x30e]:          movi #10, ebx   
784 [0x310]:          movg @58 // @std.reflect#data_type   
785 [0x311]:          movn #10   
787 [0x313]:          movn #1   
789 [0x315]:          movi #0, adx   
791 [0x317]:          rmov adx, ebx   
792 [0x318]:          new_class @58 // std.reflect#data_type   
793 [0x319]:          movg @58 // @std.reflect#data_type   
794 [0x31a]:          movn #11   
796 [0x31c]:          popobj   
797 [0x31d]:          newstr @115 // _class   
798 [0x31e]:          movg @58 // @std.reflect#data_type   
799 [0x31f]:          movn #11   
801 [0x321]:          movn #0   
803 [0x323]:          popobj   
804 [0x324]:          movi #11, ebx   
806 [0x326]:          movg @58 // @std.reflect#data_type   
807 [0x327]:          movn #11   
809 [0x329]:          movn #1   
811 [0x32b]:          movi #0, adx   
813 [0x32d]:          rmov adx, ebx   
814 [0x32e]:          new_class @58 // std.reflect#data_type   
815 [0x32f]:          movg @58 // @std.reflect#data_type   
816 [0x330]:          movn #12   
818 [0x332]:          popobj   
819 [0x333]:          newstr @116 // method   
820 [0x334]:          movg @58 // @std.reflect#data_type   
821 [0x335]:          movn #12   
823 [0x337]:          movn #0   
825 [0x339]:          popobj   
826 [0x33a]:          movi #12, ebx   
828 [0x33c]:          movg @58 // @std.reflect#data_type   
829 [0x33d]:          movn #12   
831 [0x33f]:          movn #1   
833 [0x341]:          movi #0, adx   
835 [0x343]:          rmov adx, ebx   
836 [0x344]:          new_class @58 // std.reflect#data_type   
837 [0x345]:          movg @58 // @std.reflect#data_type   
838 [0x346]:          movn #13   
840 [0x348]:          popobj   
841 [0x349]:          newstr @117 // _nil   
842 [0x34a]:          movg @58 // @std.reflect#data_type   
843 [0x34b]:          movn #13   
845 [0x34d]:          movn #0   
847 [0x34f]:          popobj   
848 [0x350]:          movi #13, ebx   
850 [0x352]:          movg @58 // @std.reflect#data_type   
851 [0x353]:          movn #13   
853 [0x355]:          movn #1   
855 [0x357]:          movi #0, adx   
857 [0x359]:          rmov adx, ebx   
858 [0x35a]:          new_class @58 // std.reflect#data_type   
859 [0x35b]:          movg @58 // @std.reflect#data_type   
860 [0x35c]:          movn #14   
862 [0x35e]:          popobj   
863 [0x35f]:          newstr @118 // any   
864 [0x360]:          movg @58 // @std.reflect#data_type   
865 [0x361]:          movn #14   
867 [0x363]:          movn #0   
869 [0x365]:          popobj   
870 [0x366]:          movi #14, ebx   
872 [0x368]:          movg @58 // @std.reflect#data_type   
873 [0x369]:          movn #14   
875 [0x36b]:          movn #1   
877 [0x36d]:          movi #0, adx   
879 [0x36f]:          rmov adx, ebx   
880 [0x370]:          new_class @58 // std.reflect#data_type   
881 [0x371]:          movg @58 // @std.reflect#data_type   
882 [0x372]:          movn #15   
884 [0x374]:          popobj   
885 [0x375]:          newstr @119 // untyped   
886 [0x376]:          movg @58 // @std.reflect#data_type   
887 [0x377]:          movn #15   
889 [0x379]:          movn #0   
891 [0x37b]:          popobj   
892 [0x37c]:          movi #15, ebx   
894 [0x37e]:          movg @58 // @std.reflect#data_type   
895 [0x37f]:          movn #15   
897 [0x381]:          movn #1   
899 [0x383]:          movi #0, adx   
901 [0x385]:          rmov adx, ebx   
902 [0x386]:          new_class @58 // std.reflect#data_type   
903 [0x387]:          movg @58 // @std.reflect#data_type   
904 [0x388]:          movn #16   
906 [0x38a]:          popobj   
907 [0x38b]:          newstr @120 // undefined   
908 [0x38c]:          movg @58 // @std.reflect#data_type   
909 [0x38d]:          movn #16   
911 [0x38f]:          movn #0   
913 [0x391]:          popobj   
914 [0x392]:          movi #16, ebx   
916 [0x394]:          movg @58 // @std.reflect#data_type   
917 [0x395]:          movn #16   
919 [0x397]:          movn #1   
921 [0x399]:          movi #0, adx   
923 [0x39b]:          rmov adx, ebx   
924 [0x39c]:          new_class @59 // std.reflect#property_type   
925 [0x39d]:          movg @59 // @std.reflect#property_type   
926 [0x39e]:          movn #0   
928 [0x3a0]:          popobj   
929 [0x3a1]:          newstr @121 // class_property   
930 [0x3a2]:          movg @59 // @std.reflect#property_type   
931 [0x3a3]:          movn #0   
933 [0x3a5]:          movn #0   
935 [0x3a7]:          popobj   
936 [0x3a8]:          movi #85939, ebx   
938 [0x3aa]:          movg @59 // @std.reflect#property_type   
939 [0x3ab]:          movn #0   
941 [0x3ad]:          movn #1   
943 [0x3af]:          movi #0, adx   
945 [0x3b1]:          rmov adx, ebx   
946 [0x3b2]:          new_class @59 // std.reflect#property_type   
947 [0x3b3]:          movg @59 // @std.reflect#property_type   
948 [0x3b4]:          movn #1   
950 [0x3b6]:          popobj   
951 [0x3b7]:          newstr @122 // field_property   
952 [0x3b8]:          movg @59 // @std.reflect#property_type   
953 [0x3b9]:          movn #1   
955 [0x3bb]:          movn #0   
957 [0x3bd]:          popobj   
958 [0x3be]:          movi #85940, ebx   
960 [0x3c0]:          movg @59 // @std.reflect#property_type   
961 [0x3c1]:          movn #1   
963 [0x3c3]:          movn #1   
965 [0x3c5]:          movi #0, adx   
967 [0x3c7]:          rmov adx, ebx   
968 [0x3c8]:          new_class @59 // std.reflect#property_type   
969 [0x3c9]:          movg @59 // @std.reflect#property_type   
970 [0x3ca]:          movn #2   
972 [0x3cc]:          popobj   
973 [0x3cd]:          newstr @123 // function_property   
974 [0x3ce]:          movg @59 // @std.reflect#property_type   
975 [0x3cf]:          movn #2   
977 [0x3d1]:          movn #0   
979 [0x3d3]:          popobj   
980 [0x3d4]:          movi #85941, ebx   
982 [0x3d6]:          movg @59 // @std.reflect#property_type   
983 [0x3d7]:          movn #2   
985 [0x3d9]:          movn #1   
987 [0x3db]:          movi #0, adx   
989 [0x3dd]:          rmov adx, ebx   
990 [0x3de]:          new_class @67 // std#time_request   
991 [0x3df]:          movg @67 // @std#time_request   
992 [0x3e0]:          movn #0   
994 [0x3e2]:          popobj   
995 [0x3e3]:          newstr @124 // tm_seconds   
996 [0x3e4]:          movg @67 // @std#time_request   
997 [0x3e5]:          movn #0   
999 [0x3e7]:          movn #0   
1001 [0x3e9]:          popobj   
1002 [0x3ea]:          movi #0, ebx   
1004 [0x3ec]:          movg @67 // @std#time_request   
1005 [0x3ed]:          movn #0   
1007 [0x3ef]:          movn #1   
1009 [0x3f1]:          movi #0, adx   
1011 [0x3f3]:          rmov adx, ebx   
1012 [0x3f4]:          new_class @67 // std#time_request   
1013 [0x3f5]:          movg @67 // @std#time_request   
1014 [0x3f6]:          movn #1   
1016 [0x3f8]:          popobj   
1017 [0x3f9]:          newstr @125 // tm_minutes   
1018 [0x3fa]:          movg @67 // @std#time_request   
1019 [0x3fb]:          movn #1   
1021 [0x3fd]:          movn #0   
1023 [0x3ff]:          popobj   
1024 [0x400]:          movi #1, ebx   
1026 [0x402]:          movg @67 // @std#time_request   
1027 [0x403]:          movn #1   
1029 [0x405]:          movn #1   
1031 [0x407]:          movi #0, adx   
1033 [0x409]:          rmov adx, ebx   
1034 [0x40a]:          new_class @67 // std#time_request   
1035 [0x40b]:          movg @67 // @std#time_request   
1036 [0x40c]:          movn #2   
1038 [0x40e]:          popobj   
1039 [0x40f]:          newstr @126 // tm_hour   
1040 [0x410]:          movg @67 // @std#time_request   
1041 [0x411]:          movn #2   
1043 [0x413]:          movn #0   
1045 [0x415]:          popobj   
1046 [0x416]:          movi #2, ebx   
1048 [0x418]:          movg @67 // @std#time_request   
1049 [0x419]:          movn #2   
1051 [0x41b]:          movn #1   
1053 [0x41d]:          movi #0, adx   
1055 [0x41f]:          rmov adx, ebx   
1056 [0x420]:          new_class @67 // std#time_request   
1057 [0x421]:          movg @67 // @std#time_request   
1058 [0x422]:          movn #3   
1060 [0x424]:          popobj   
1061 [0x425]:          newstr @127 // tm_mday   
1062 [0x426]:          movg @67 // @std#time_request   
1063 [0x427]:          movn #3   
1065 [0x429]:          movn #0   
1067 [0x42b]:          popobj   
1068 [0x42c]:          movi #3, ebx   
1070 [0x42e]:          movg @67 // @std#time_request   
1071 [0x42f]:          movn #3   
1073 [0x431]:          movn #1   
1075 [0x433]:          movi #0, adx   
1077 [0x435]:          rmov adx, ebx   
1078 [0x436]:          new_class @67 // std#time_request   
1079 [0x437]:          movg @67 // @std#time_request   
1080 [0x438]:          movn #4   
1082 [0x43a]:          popobj   
1083 [0x43b]:          newstr @128 // tm_mon   
1084 [0x43c]:          movg @67 // @std#time_request   
1085 [0x43d]:          movn #4   
1087 [0x43f]:          movn #0   
1089 [0x441]:          popobj   
1090 [0x442]:          movi #4, ebx   
1092 [0x444]:          movg @67 // @std#time_request   
1093 [0x445]:          movn #4   
1095 [0x447]:          movn #1   
1097 [0x449]:          movi #0, adx   
1099 [0x44b]:          rmov adx, ebx   
1100 [0x44c]:          new_class @67 // std#time_request   
1101 [0x44d]:          movg @67 // @std#time_request   
1102 [0x44e]:          movn #5   
1104 [0x450]:          popobj   
1105 [0x451]:          newstr @129 // tm_year   
1106 [0x452]:          movg @67 // @std#time_request   
1107 [0x453]:          movn #5   
1109 [0x455]:          movn #0   
1111 [0x457]:          popobj   
1112 [0x458]:          movi #5, ebx   
1114 [0x45a]:          movg @67 // @std#time_request   
1115 [0x45b]:          movn #5   
1117 [0x45d]:          movn #1   
1119 [0x45f]:          movi #0, adx   
1121 [0x461]:          rmov adx, ebx   
1122 [0x462]:          new_class @67 // std#time_request   
1123 [0x463]:          movg @67 // @std#time_request   
1124 [0x464]:          movn #6   
1126 [0x466]:          popobj   
1127 [0x467]:          newstr @130 // tm_wday   
1128 [0x468]:          movg @67 // @std#time_request   
1129 [0x469]:          movn #6   
1131 [0x46b]:          movn #0   
1133 [0x46d]:          popobj   
1134 [0x46e]:          movi #6, ebx   
1136 [0x470]:          movg @67 // @std#time_request   
1137 [0x471]:          movn #6   
1139 [0x473]:          movn #1   
1141 [0x475]:          movi #0, adx   
1143 [0x477]:          rmov adx, ebx   
1144 [0x478]:          new_class @67 // std#time_request   
1145 [0x479]:          movg @67 // @std#time_request   
1146 [0x47a]:          movn #7   
1148 [0x47c]:          popobj   
1149 [0x47d]:          newstr @131 // tm_yday   
1150 [0x47e]:          movg @67 // @std#time_request   
1151 [0x47f]:          movn #7   
1153 [0x481]:          movn #0   
1155 [0x483]:          popobj   
1156 [0x484]:          movi #7, ebx   
1158 [0x486]:          movg @67 // @std#time_request   
1159 [0x487]:          movn #7   
1161 [0x489]:          movn #1   
1163 [0x48b]:          movi #0, adx   
1165 [0x48d]:          rmov adx, ebx   
1166 [0x48e]:          new_class @67 // std#time_request   
1167 [0x48f]:          movg @67 // @std#time_request   
1168 [0x490]:          movn #8   
1170 [0x492]:          popobj   
1171 [0x493]:          newstr @132 // tm_isdst   
1172 [0x494]:          movg @67 // @std#time_request   
1173 [0x495]:          movn #8   
1175 [0x497]:          movn #0   
1177 [0x499]:          popobj   
1178 [0x49a]:          movi #8, ebx   
1180 [0x49c]:          movg @67 // @std#time_request   
1181 [0x49d]:          movn #8   
1183 [0x49f]:          movn #1   
1185 [0x4a1]:          movi #0, adx   
1187 [0x4a3]:          rmov adx, ebx   
1188 [0x4a4]:          new_class @68 // std#time_unit   
1189 [0x4a5]:          movg @68 // @std#time_unit   
1190 [0x4a6]:          movn #0   
1192 [0x4a8]:          popobj   
1193 [0x4a9]:          newstr @133 // seconds   
1194 [0x4aa]:          movg @68 // @std#time_unit   
1195 [0x4ab]:          movn #0   
1197 [0x4ad]:          movn #0   
1199 [0x4af]:          popobj   
1200 [0x4b0]:          movi #0, ebx   
1202 [0x4b2]:          movg @68 // @std#time_unit   
1203 [0x4b3]:          movn #0   
1205 [0x4b5]:          movn #1   
1207 [0x4b7]:          movi #0, adx   
1209 [0x4b9]:          rmov adx, ebx   
1210 [0x4ba]:          new_class @68 // std#time_unit   
1211 [0x4bb]:          movg @68 // @std#time_unit   
1212 [0x4bc]:          movn #1   
1214 [0x4be]:          popobj   
1215 [0x4bf]:          newstr @134 // milliseconds   
1216 [0x4c0]:          movg @68 // @std#time_unit   
1217 [0x4c1]:          movn #1   
1219 [0x4c3]:          movn #0   
1221 [0x4c5]:          popobj   
1222 [0x4c6]:          movi #1, ebx   
1224 [0x4c8]:          movg @68 // @std#time_unit   
1225 [0x4c9]:          movn #1   
1227 [0x4cb]:          movn #1   
1229 [0x4cd]:          movi #0, adx   
1231 [0x4cf]:          rmov adx, ebx   
1232 [0x4d0]:          new_class @68 // std#time_unit   
1233 [0x4d1]:          movg @68 // @std#time_unit   
1234 [0x4d2]:          movn #2   
1236 [0x4d4]:          popobj   
1237 [0x4d5]:          newstr @135 // microseconds   
1238 [0x4d6]:          movg @68 // @std#time_unit   
1239 [0x4d7]:          movn #2   
1241 [0x4d9]:          movn #0   
1243 [0x4db]:          popobj   
1244 [0x4dc]:          movi #2, ebx   
1246 [0x4de]:          movg @68 // @std#time_unit   
1247 [0x4df]:          movn #2   
1249 [0x4e1]:          movn #1   
1251 [0x4e3]:          movi #0, adx   
1253 [0x4e5]:          rmov adx, ebx   
1254 [0x4e6]:          new_class @68 // std#time_unit   
1255 [0x4e7]:          movg @68 // @std#time_unit   
1256 [0x4e8]:          movn #3   
1258 [0x4ea]:          popobj   
1259 [0x4eb]:          newstr @136 // nanoseconds   
1260 [0x4ec]:          movg @68 // @std#time_unit   
1261 [0x4ed]:          movn #3   
1263 [0x4ef]:          movn #0   
1265 [0x4f1]:          popobj   
1266 [0x4f2]:          movi #3, ebx   
1268 [0x4f4]:          movg @68 // @std#time_unit   
1269 [0x4f5]:          movn #3   
1271 [0x4f7]:          movn #1   
1273 [0x4f9]:          movi #0, adx   
1275 [0x4fb]:          rmov adx, ebx   
1276 [0x4fc]:          movg @41 // @platform.kernel#platform   
1277 [0x4fd]:          movn #1   
1279 [0x4ff]:          movi #0, adx   
1281 [0x501]:          movi #3146, ebx   
1283 [0x503]:          rmov adx, ebx   
1284 [0x504]:          call @3511 // <std.io#__srt_global.$03internal_static_init>   
1285 [0x505]:          call @3512 // <std.io#file.$03internal_static_init>   
1286 [0x506]:          call @3513 // <std.io.task#job.$03internal_static_init>   
1287 [0x507]:          call @3514 // <std.io.task#__srt_global.$03internal_static_init>   
1288 [0x508]:          call @3515 // <std.io#thread_group.$03internal_static_init>   
1289 [0x509]:          call @3516 // <std#_nil_.$03internal_static_init>   
1290 [0x50a]:          call @3517 // <std#__srt_global.$03internal_static_init>   
1291 [0x50b]:          call @3518 // <std#string.$03internal_static_init>   
1292 [0x50c]:          call @3519 // <std#string_builder.$03internal_static_init>   
1293 [0x50d]:          call @3520 // <std#time.$03internal_static_init>   
1294 [0x50e]:          call @3521 // <common#constants.$03internal_static_init>   
1295 [0x50f]:          call @3522 // <common#constants.strings.$03internal_static_init>   
1296 [0x510]:          call @3524 // <main#__srt_global.$03internal_static_init>   
1297 [0x511]:          call @3525 // <ui.layout#__srt_global.$03internal_static_init>   
1298 [0x512]:          call @3526 // <ui.layout#home_screen.$03internal_static_init>   
1299 [0x513]:          call @3527 // <ui.res.drawable#__srt_global.$03internal_static_init>   
1300 [0x514]:          call @3528 // <std.io#thread_result.$03internal_static_init>   
1301 [0x515]:          ret   


function: platform.kernel#platform.exit[1948] params(1) in file: lib\support\0.2.805/platform//kernel//platform.sharp:16:15: note:  
		    static def exit(value: var) {
		              ^

0 [0x0]: line: 17 ipushl #0   : protected asm start
1 [0x1]:          int 0x1d   
2 [0x2]:          ret   : protected asm end


function: platform.kernel#platform.get_lib_path[1949] params(1) in file: lib\support\0.2.805/platform//kernel//platform.sharp:23:23: note:  
		    private static def get_lib_path(name: string) : _int8[] {
		                      ^

0 [0x0]: line: 24 call @1940 // <platform#build.is_windows>   
1 [0x1]:          loadval ebx   
2 [0x2]:          movr cmt, ebx   
3 [0x3]:          jne 9   
4 [0x4]: line: 25 pushl 0   
5 [0x5]:          newstr @45 // .dll   
6 [0x6]:          call @2989 // <std#string.operator+=>   
7 [0x7]:          pop   
8 [0x8]:          jmp @13   
9 [0x9]: line: 27 pushl 0   
10 [0xa]:          newstr @46 // .so   
11 [0xb]:          call @2989 // <std#string.operator+=>   
12 [0xc]:          pop   
13 [0xd]:          nop   
14 [0xe]: line: 30 new_class @18 // std.io#file   
15 [0xf]:          dup    
16 [0x10]:          pushl 0   
17 [0x11]:          call @1673 // <std.io#file.file>   
18 [0x12]:          call @1680 // <std.io#file.get_absolute_path>   
19 [0x13]:          call @2961 // <std#string.get_data>   
20 [0x14]:          popobj2    
21 [0x15]:          returnobj   
22 [0x16]:          ret   


function: platform.kernel#platform.load_library[1950] params(1) in file: lib\support\0.2.805/platform//kernel//platform.sharp:33:15: note:  
		    static def load_library(name: string) {
		              ^

0 [0x0]: line: 34 pushl 0   
1 [0x1]:          call @1949 // <platform.kernel#platform.get_lib_path>   
2 [0x2]:          popobj2    
3 [0x3]:          smovr_3 fp+1   
4 [0x4]: line: 35 pushl 1   : protected asm start
5 [0x5]:          int 0x39   
6 [0x6]:          ret   : protected asm end


function: platform.kernel#platform.free_library[1951] params(1) in file: lib\support\0.2.805/platform//kernel//platform.sharp:41:15: note:  
		    static def free_library(name: string): var {
		              ^

0 [0x0]: line: 42 pushl 0   
1 [0x1]:          call @1949 // <platform.kernel#platform.get_lib_path>   
2 [0x2]:          popobj2    
3 [0x3]:          smovr_3 fp+1   
4 [0x4]: line: 43 istorel 0, fp+2   
6 [0x6]: line: 44 pushl 1   : protected asm start
7 [0x7]:          int 0x3a   
8 [0x8]:          smovr_2 ebx, fp+2   
9 [0x9]: line: 50 loadl ebx, fp+2   : protected asm end
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


function: platform.kernel#platform.link_func[1952] params(2) in file: lib\support\0.2.805/platform//kernel//platform.sharp:53:15: note:  
		    static def link_func(name: string, library: string): var {
		              ^

0 [0x0]: line: 54 pushl 0   
1 [0x1]:          call @1949 // <platform.kernel#platform.get_lib_path>   
2 [0x2]:          popobj2    
3 [0x3]:          smovr_3 fp+2   
4 [0x4]: line: 55 pushl 0   
5 [0x5]:          call @2961 // <std#string.get_data>   
6 [0x6]:          popobj2    
7 [0x7]:          smovr_3 fp+3   
8 [0x8]: line: 56 istorel 0, fp+4   
10 [0xa]: line: 57 pushl 3   : protected asm start
11 [0xb]:          pushl 2   
12 [0xc]:          int 0x3b   
13 [0xd]:          smovr_2 ebx, fp+4   
14 [0xe]: line: 64 loadl ebx, fp+4   : protected asm end
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


function: platform.kernel#platform.srt_init[1953] params(1) in file: lib\support\0.2.805/platform//kernel//platform.sharp:67:23: note:  
		    private static def srt_init(args: object[]) : var {
		                      ^

0 [0x0]: line: 68 new_class @64 // std#string   
1 [0x1]:          dup    
2 [0x2]:          newstr @22 //    
3 [0x3]:          call @2935 // <std#string.string>   
4 [0x4]:          pushl 0   
5 [0x5]:          movi #0, ebx   
7 [0x7]:          popobj2    
8 [0x8]:          movr adx, ebx   
9 [0x9]:          chklen adx   
10 [0xa]:          movnd adx   
11 [0xb]:          vcast 0 -> []   
12 [0xc]:          pushobj   
13 [0xd]:          call @2947 // <std#string.operator+>   
14 [0xe]:          movg @39 // @platform#build   
15 [0xf]:          movn #1   
17 [0x11]:          popobj   
18 [0x12]: line: 69 new_class @64 // std#string   
19 [0x13]:          dup    
20 [0x14]:          newstr @22 //    
21 [0x15]:          call @2935 // <std#string.string>   
22 [0x16]:          pushl 0   
23 [0x17]:          movi #1, ebx   
25 [0x19]:          popobj2    
26 [0x1a]:          movr adx, ebx   
27 [0x1b]:          chklen adx   
28 [0x1c]:          movnd adx   
29 [0x1d]:          vcast 0 -> []   
30 [0x1e]:          pushobj   
31 [0x1f]:          call @2947 // <std#string.operator+>   
32 [0x20]:          movg @39 // @platform#build   
33 [0x21]:          movn #3   
35 [0x23]:          popobj   
36 [0x24]: line: 70 new_class @64 // std#string   
37 [0x25]:          dup    
38 [0x26]:          newstr @22 //    
39 [0x27]:          call @2935 // <std#string.string>   
40 [0x28]:          pushl 0   
41 [0x29]:          movi #2, ebx   
43 [0x2b]:          popobj2    
44 [0x2c]:          movr adx, ebx   
45 [0x2d]:          chklen adx   
46 [0x2e]:          movnd adx   
47 [0x2f]:          vcast 0 -> []   
48 [0x30]:          pushobj   
49 [0x31]:          call @2947 // <std#string.operator+>   
50 [0x32]:          movg @39 // @platform#build   
51 [0x33]:          movn #2   
53 [0x35]:          popobj   
54 [0x36]: line: 71 new_class @64 // std#string   
55 [0x37]:          dup    
56 [0x38]:          newstr @22 //    
57 [0x39]:          call @2935 // <std#string.string>   
58 [0x3a]:          pushl 0   
59 [0x3b]:          movi #3, ebx   
61 [0x3d]:          popobj2    
62 [0x3e]:          movr adx, ebx   
63 [0x3f]:          chklen adx   
64 [0x40]:          movnd adx   
65 [0x41]:          vcast 0 -> []   
66 [0x42]:          pushobj   
67 [0x43]:          call @2947 // <std#string.operator+>   
68 [0x44]:          movg @39 // @platform#build   
69 [0x45]:          movn #0   
71 [0x47]:          popobj   
72 [0x48]: line: 73 call @1947 // <platform.kernel#platform.static_init>   
73 [0x49]: line: 74 pushl 0   
74 [0x4a]: line: 76 movi #4, ebx   
76 [0x4c]:          popobj2    
77 [0x4d]:          movr adx, ebx   
78 [0x4e]:          chklen adx   
79 [0x4f]:          movnd adx   
80 [0x50]:          movi #28, cmt   
82 [0x52]:          cast cmt   
83 [0x53]:          smovr_3 fp+1   
84 [0x54]: line: 77 pushl 1   
85 [0x55]:          call @1969 // <platform.kernel#vm.set_thread>   
86 [0x56]: line: 79 movg @30 // @std.io#thread_priority   
87 [0x57]:          movn #2   
89 [0x59]:          smovr_3 fp+2   
90 [0x5a]: line: 80 movg @29 // @std.io#thread_group   
91 [0x5b]:          movn #0   
93 [0x5d]:          pushobj   
94 [0x5e]:          pushl 1   
95 [0x5f]:          call @1881 // <std.io#thread_group.add>   
96 [0x60]: line: 82 movg @29 // @std.io#thread_group   : protected asm start
97 [0x61]:          movn #0   
99 [0x63]:          pushobj   
100 [0x64]:          movl 1   
101 [0x65]:          movn #7   
103 [0x67]:          popobj   
104 [0x68]:          movl 2   
105 [0x69]:          pushobj   
106 [0x6a]:          movl 1   
107 [0x6b]:          movn #3   
109 [0x6d]:          popobj   
110 [0x6e]: line: 99 movl 0   : protected asm end
111 [0x6f]: line: 100 sizeof ebx   
112 [0x70]:           rstore ebx   
113 [0x71]:           movi #5, ebx   
115 [0x73]:           loadval ecx   
116 [0x74]:           sub ecx, ebx -> ebx   
117 [0x75]:           new_classarray ebx  // std#string[]   
118 [0x76]:           popobj2    
119 [0x77]:           smovr_3 fp+3   
120 [0x78]: line: 101 istorel 0, fp+4   
122 [0x7a]: line: 103 istorel 5, fp+5   
124 [0x7c]:           ipushl #5   
125 [0x7d]:           movl 0   
126 [0x7e]:           sizeof ebx   
127 [0x7f]:           loadval ecx   
128 [0x80]:           lt ecx, ebx   
129 [0x81]:           movr ebx, cmt   
130 [0x82]:           movr cmt, ebx   
131 [0x83]:           jne 157   
132 [0x84]: line: 104 new_class @64 // std#string   
133 [0x85]:           dup    
134 [0x86]:           pushl 0   
135 [0x87]:           loadl ebx, fp+5   
136 [0x88]:           popobj2    
137 [0x89]:           movr adx, ebx   
138 [0x8a]:           chklen adx   
139 [0x8b]:           movnd adx   
140 [0x8c]:           vcast 0 -> []   
141 [0x8d]:           pushobj   
142 [0x8e]:           call @2935 // <std#string.string>   
143 [0x8f]:           pushl 3   
144 [0x90]:           loadl ebx, fp+4   
145 [0x91]:           movr egx, ebx   
146 [0x92]:           inc ebx   
147 [0x93]:           smovr_2 ebx, fp+4   
148 [0x94]:           movr ebx, egx   
149 [0x95]:           popobj2    
150 [0x96]:           movr adx, ebx   
151 [0x97]:           chklen adx   
152 [0x98]:           movnd adx   
153 [0x99]:           popobj   
154 [0x9a]:           iaddl 1, fp@5   
156 [0x9c]:           jmp @124   
157 [0x9d]: line: 107 istorel 0, fp+6   
159 [0x9f]: line: 108 movg @41 // @platform.kernel#platform   
160 [0xa0]:           movn #0   
162 [0xa2]:           movi #0, adx   
164 [0xa4]:           iaload ebx, adx   
165 [0xa5]:           rstore ebx   
166 [0xa6]:           movi #0, ebx   
168 [0xa8]:           loadval ecx   
169 [0xa9]:           tne ecx, ebx   
170 [0xaa]:           jne 183   
171 [0xab]: line: 109 movg @41 // @platform.kernel#platform   
172 [0xac]:           movn #0   
174 [0xae]:           movi #0, adx   
176 [0xb0]:           iaload ebx, adx   
177 [0xb1]:           rstore ebx   
178 [0xb2]:           pushl 3   
179 [0xb3]:           smov ebx, sp+[-1]   
180 [0xb4]:           calld ebx   
181 [0xb5]:           ipopl 6   
182 [0xb6]:           jmp @250   
183 [0xb7]:           movg @41 // @platform.kernel#platform   
184 [0xb8]:           movn #1   
186 [0xba]:           movi #0, adx   
188 [0xbc]:           iaload ebx, adx   
189 [0xbd]:           rstore ebx   
190 [0xbe]:           movi #0, ebx   
192 [0xc0]:           loadval ecx   
193 [0xc1]:           tne ecx, ebx   
194 [0xc2]:           jne 206   
195 [0xc3]: line: 110 movg @41 // @platform.kernel#platform   
196 [0xc4]:           movn #1   
198 [0xc6]:           movi #0, adx   
200 [0xc8]:           iaload ebx, adx   
201 [0xc9]:           rstore ebx   
202 [0xca]:           pushl 3   
203 [0xcb]:           smov ebx, sp+[-1]   
204 [0xcc]:           calld ebx   
205 [0xcd]:           jmp @250   
206 [0xce]:           movg @41 // @platform.kernel#platform   
207 [0xcf]:           movn #2   
209 [0xd1]:           movi #0, adx   
211 [0xd3]:           iaload ebx, adx   
212 [0xd4]:           rstore ebx   
213 [0xd5]:           movi #0, ebx   
215 [0xd7]:           loadval ecx   
216 [0xd8]:           tne ecx, ebx   
217 [0xd9]:           jne 228   
218 [0xda]: line: 111 movg @41 // @platform.kernel#platform   
219 [0xdb]:           movn #2   
221 [0xdd]:           movi #0, adx   
223 [0xdf]:           iaload ebx, adx   
224 [0xe0]:           rstore ebx   
225 [0xe1]:           loadval ebx   
226 [0xe2]:           calld ebx   
227 [0xe3]:           jmp @250   
228 [0xe4]:           movg @41 // @platform.kernel#platform   
229 [0xe5]:           movn #3   
231 [0xe7]:           movi #0, adx   
233 [0xe9]:           iaload ebx, adx   
234 [0xea]:           rstore ebx   
235 [0xeb]:           movi #0, ebx   
237 [0xed]:           loadval ecx   
238 [0xee]:           tne ecx, ebx   
239 [0xef]:           jne 250   
240 [0xf0]: line: 112 movg @41 // @platform.kernel#platform   
241 [0xf1]:           movn #3   
243 [0xf3]:           movi #0, adx   
245 [0xf5]:           iaload ebx, adx   
246 [0xf6]:           rstore ebx   
247 [0xf7]:           loadval ebx   
248 [0xf8]:           calld ebx   
249 [0xf9]:           ipopl 6   
250 [0xfa]:           nop   
251 [0xfb]: line: 115 loadl ebx, fp+6   
252 [0xfc]:           return_val ebx   
253 [0xfd]:           ret   


constructor: platform.kernel#platform.platform[1954] params(0) in file: lib\support\0.2.805/platform//kernel//platform.sharp:6:6: note:  
		class platform
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: platform.kernel#stack_state.stack_state[1955] params(0) in file: lib\support\0.2.805/platform//kernel//stack_state.sharp:3:6: note:  
		class stack_state {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


function: platform.kernel#vm.get_frame_info[1956] params(0) in file: lib\support\0.2.805/platform//kernel//vm.sharp:6:15: note:  
		    static def get_frame_info() : stack_state {
		              ^

0 [0x0]: line: 7 int 0x35   : protected asm start
1 [0x1]:         popobj2    
2 [0x2]:         returnobj   
3 [0x3]:         ret   
4 [0x4]: line: 13 pushnull    : protected asm end
5 [0x5]:          popobj2    
6 [0x6]:          returnobj   
7 [0x7]:          ret   


function: platform.kernel#vm.get_stack_trace[1957] params(1) in file: lib\support\0.2.805/platform//kernel//vm.sharp:16:15: note:  
		    static def get_stack_trace(info : stack_state) : string {
		              ^

0 [0x0]: line: 17 pushl 0   : protected asm start
1 [0x1]:          int 0x36   
2 [0x2]:          popobj2    
3 [0x3]:          returnobj   
4 [0x4]:          ret   
5 [0x5]: line: 24 pushnull    : protected asm end
6 [0x6]:          popobj2    
7 [0x7]:          returnobj   
8 [0x8]:          ret   


function: platform.kernel#vm.thread_create[1958] params(1) in file: lib\support\0.2.805/platform//kernel//vm.sharp:27:15: note:  
		    static def thread_create(daemon: var) : var {
		              ^

0 [0x0]: line: 28 istorel 0, fp+1   
2 [0x2]: line: 29 movi #1890, adx   : protected asm start
4 [0x4]:          loadl ebx, fp+0   
5 [0x5]:          int 0x10   
6 [0x6]:          smovr_2 ebx, fp+1   
7 [0x7]: line: 36 loadl ebx, fp+1   : protected asm end
8 [0x8]:          return_val ebx   
9 [0x9]:          ret   


function: platform.kernel#vm.suspend[1959] params(1) in file: lib\support\0.2.805/platform//kernel//vm.sharp:39:15: note:  
		    static def suspend(t: thread) : thread_result {
		              ^

0 [0x0]: line: 40 pushl 0   
1 [0x1]:          call @1866 // <std.io#thread.get_native_handle>   
2 [0x2]:          ipopl 1   
3 [0x3]: line: 41 istorel 0, fp+2   
5 [0x5]: line: 43 loadl adx, fp+1   : protected asm start
6 [0x6]:          int 0x12   
7 [0x7]:          smovr_2 cmt, fp+2   
8 [0x8]: line: 49 ipushl #2   : protected asm end
9 [0x9]:          call @1891 // <std.io#thread_result.at>   
10 [0xa]:          popobj2    
11 [0xb]:          returnobj   
12 [0xc]:          ret   


function: platform.kernel#vm.unsuspend[1960] params(2) in file: lib\support\0.2.805/platform//kernel//vm.sharp:52:15: note:  
		    static def unsuspend(t: thread, wait: var) : thread_result {
		              ^

0 [0x0]: line: 53 pushl 0   
1 [0x1]:          call @1866 // <std.io#thread.get_native_handle>   
2 [0x2]:          ipopl 2   
3 [0x3]: line: 54 istorel 0, fp+3   
5 [0x5]: line: 56 loadl adx, fp+2   : protected asm start
6 [0x6]:          loadl ebx, fp+1   
7 [0x7]:          int 0x13   
8 [0x8]:          smovr_2 cmt, fp+3   
9 [0x9]: line: 63 ipushl #3   : protected asm end
10 [0xa]:          call @1891 // <std.io#thread_result.at>   
11 [0xb]:          popobj2    
12 [0xc]:          returnobj   
13 [0xd]:          ret   


function: platform.kernel#vm.get_os_time[1961] params(1) in file: lib\support\0.2.805/platform//kernel//vm.sharp:66:15: note:  
		    static def get_os_time(tr : var) : var {
		              ^

0 [0x0]: line: 67 istorel 0, fp+1   
2 [0x2]: line: 68 loadl ebx, fp+0   : protected asm start
3 [0x3]:          int 0x2   
4 [0x4]:          smovr_2 bmr, fp+1   
5 [0x5]: line: 74 loadl ebx, fp+1   : protected asm end
6 [0x6]:          return_val ebx   
7 [0x7]:          ret   


function: platform.kernel#vm.thread_join[1962] params(1) in file: lib\support\0.2.805/platform//kernel//vm.sharp:77:15: note:  
		    static def thread_join(t: thread) : thread_result {
		              ^

0 [0x0]: line: 78 pushl 0   
1 [0x1]:          call @1866 // <std.io#thread.get_native_handle>   
2 [0x2]:          ipopl 1   
3 [0x3]: line: 79 istorel 0, fp+2   
5 [0x5]: line: 81 loadl adx, fp+1   : protected asm start
6 [0x6]:          int 0xd   
7 [0x7]:          smovr_2 cmt, fp+2   
8 [0x8]: line: 87 ipushl #2   : protected asm end
9 [0x9]:          call @1891 // <std.io#thread_result.at>   
10 [0xa]:          popobj2    
11 [0xb]:          returnobj   
12 [0xc]:          ret   


function: platform.kernel#vm.kill[1963] params(1) in file: lib\support\0.2.805/platform//kernel//vm.sharp:90:15: note:  
		    static def kill(t: thread) : thread_result {
		              ^

0 [0x0]: line: 91 pushl 0   
1 [0x1]:          call @1866 // <std.io#thread.get_native_handle>   
2 [0x2]:          ipopl 1   
3 [0x3]: line: 92 istorel 0, fp+2   
5 [0x5]: line: 94 loadl adx, fp+1   : protected asm start
6 [0x6]:          int 0xe   
7 [0x7]:          smovr_2 cmt, fp+2   : protected asm end
8 [0x8]: line: 100 pushl 0   
9 [0x9]:           istore 1   
11 [0xb]:           call @1965 // <platform.kernel#vm.exit_thread>   
12 [0xc]: line: 101 ipushl #2   
13 [0xd]:           call @1891 // <std.io#thread_result.at>   
14 [0xe]:           popobj2    
15 [0xf]:           returnobj   
16 [0x10]:           ret   


function: platform.kernel#vm.current_thread[1964] params(0) in file: lib\support\0.2.805/platform//kernel//vm.sharp:104:15: note:  
		    static def current_thread() : thread {
		              ^

0 [0x0]: line: 105 int 0x15   : protected asm start
1 [0x1]:           popobj2    
2 [0x2]:           returnobj   
3 [0x3]:           ret   
4 [0x4]: line: 112 pushnull    : protected asm end
5 [0x5]:           popobj2    
6 [0x6]:           returnobj   
7 [0x7]:           ret   


function: platform.kernel#vm.exit_thread[1965] params(2) in file: lib\support\0.2.805/platform//kernel//vm.sharp:115:15: note:  
		    static def exit_thread(t: thread, code: var) {
		              ^

0 [0x0]: line: 116 movi #1, ebx   : protected asm start
2 [0x2]:           movi #0, egx   
4 [0x4]:           movi #-1, ecx   
6 [0x6]:           movi #0, adx   
8 [0x8]:           movl 0   
9 [0x9]:           movn #5   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movl 0   
13 [0xd]:           movn #8   
15 [0xf]:           rmov adx, egx   
16 [0x10]:           loadl egx, fp+1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #0   
20 [0x14]:           rmov adx, egx   
21 [0x15]:           movl 0   
22 [0x16]:           movn #1   
24 [0x18]:           rmov adx, ecx   
25 [0x19]:           ret   : protected asm end


function: platform.kernel#vm.thread_yield[1966] params(0) in file: lib\support\0.2.805/platform//kernel//vm.sharp:140:15: note:  
		    static def thread_yield() {
		              ^

0 [0x0]: line: 141 int 0x1c   : protected asm start
1 [0x1]:           ret   : protected asm end


function: platform.kernel#vm.thread_start[1967] params(2) in file: lib\support\0.2.805/platform//kernel//vm.sharp:146:15: note:  
		    static def thread_start(t: thread, args: object[]) : thread_result {
		              ^

0 [0x0]: line: 147 pushl 0   
1 [0x1]:           call @1866 // <std.io#thread.get_native_handle>   
2 [0x2]:           ipopl 2   
3 [0x3]: line: 148 pushl 0   
4 [0x4]:           call @1867 // <std.io#thread.get_stack_size>   
5 [0x5]:           ipopl 3   
6 [0x6]: line: 149 istorel 0, fp+4   
8 [0x8]: line: 151 loadl ebx, fp+3   : protected asm start
9 [0x9]:           loadl adx, fp+2   
10 [0xa]:           pushl 1   
11 [0xb]:           pushl 0   
12 [0xc]:           int 0xc   
13 [0xd]:           smovr_2 cmt, fp+4   
14 [0xe]: line: 160 ipushl #4   : protected asm end
15 [0xf]:           movi #0, ebx   
17 [0x11]:           loadval ecx   
18 [0x12]:           test ecx, ebx   
19 [0x13]:           jne 31   
20 [0x14]: line: 161 pushl 0   
21 [0x15]:           call @1871 // <std.io#thread.is_started>   
22 [0x16]:           loadval ebx   
23 [0x17]:           not ebx, ebx   
24 [0x18]:           movr cmt, ebx   
25 [0x19]:           jne 31   
26 [0x1a]: line: 162 call @1861 // <std.io#thread.yield>   
27 [0x1b]: line: 163 istore 1   
29 [0x1d]:           call @1856 // <std.io#thread.sleep>   
30 [0x1e]:           jmp @20   
31 [0x1f]:           nop   
32 [0x20]: line: 167 ipushl #4   
33 [0x21]:           call @1891 // <std.io#thread_result.at>   
34 [0x22]:           popobj2    
35 [0x23]:           returnobj   
36 [0x24]:           ret   


function: platform.kernel#vm.set_thread_priority[1968] params(2) in file: lib\support\0.2.805/platform//kernel//vm.sharp:170:15: note:  
		    static def set_thread_priority(t: thread, priority: var) : thread_result {
		              ^

0 [0x0]: line: 171 pushl 0   
1 [0x1]:           call @1866 // <std.io#thread.get_native_handle>   
2 [0x2]:           ipopl 2   
3 [0x3]: line: 172 istorel 0, fp+3   
5 [0x5]: line: 174 loadl adx, fp+2   : protected asm start
6 [0x6]:           loadl egx, fp+1   
7 [0x7]:           int 0x11   
8 [0x8]:           smovr_2 cmt, fp+3   
9 [0x9]: line: 181 ipushl #3   : protected asm end
10 [0xa]:           call @1891 // <std.io#thread_result.at>   
11 [0xb]:           popobj2    
12 [0xc]:           returnobj   
13 [0xd]:           ret   


function: platform.kernel#vm.set_thread[1969] params(1) in file: lib\support\0.2.805/platform//kernel//vm.sharp:184:15: note:  
		    static def set_thread(t: thread) {
		              ^

0 [0x0]: line: 185 pushl 0   : protected asm start
1 [0x1]:           int 0x17   
2 [0x2]:           ret   : protected asm end


function: platform.kernel#vm.thread_args[1970] params(0) in file: lib\support\0.2.805/platform//kernel//vm.sharp:191:15: note:  
		    static def thread_args() : object[] {
		              ^

0 [0x0]: line: 192 int 0x16   : protected asm start
1 [0x1]:           popobj2    
2 [0x2]:           returnobj   
3 [0x3]:           ret   
4 [0x4]: line: 199 pushnull    : protected asm end
5 [0x5]:           popobj2    
6 [0x6]:           returnobj   
7 [0x7]:           ret   


function: platform.kernel#vm.cores[1971] params(0) in file: lib\support\0.2.805/platform//kernel//vm.sharp:202:15: note:  
		    static def cores() : var {
		              ^

0 [0x0]: line: 203 istorel 0, fp+0   
2 [0x2]: line: 205 int 0x38   : protected asm start
3 [0x3]:           smovr_2 ebx, fp+0   
4 [0x4]: line: 210 loadl ebx, fp+0   : protected asm end
5 [0x5]:           return_val ebx   
6 [0x6]:           ret   


constructor: platform.kernel#vm.vm[1972] params(0) in file: lib\support\0.2.805/platform//kernel//vm.sharp:5:6: note:  
		class vm {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#ulong.ulong[1973] params(1) in file: lib\support\0.2.805/primitives.sharp:254:10: note:  
		    ulong(i : long) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @24 // <std#integer<_uint64>.integer>   
9 [0x9]:         ret   


constructor: std#ulong.ulong[1974] params(1) in file: lib\support\0.2.805/primitives.sharp:255:10: note:  
		    ulong(i : int) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @24 // <std#integer<_uint64>.integer>   
9 [0x9]:         ret   


constructor: std#ulong.ulong[1975] params(1) in file: lib\support\0.2.805/primitives.sharp:256:10: note:  
		    ulong(i : short) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @24 // <std#integer<_uint64>.integer>   
9 [0x9]:         ret   


constructor: std#ulong.ulong[1976] params(1) in file: lib\support\0.2.805/primitives.sharp:257:10: note:  
		    ulong(i : char) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @24 // <std#integer<_uint64>.integer>   
9 [0x9]:         ret   


constructor: std#ulong.ulong[1977] params(1) in file: lib\support\0.2.805/primitives.sharp:258:10: note:  
		    ulong(i : byte) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @24 // <std#integer<_uint64>.integer>   
9 [0x9]:         ret   


constructor: std#ulong.ulong[1978] params(1) in file: lib\support\0.2.805/primitives.sharp:259:10: note:  
		    ulong(i : bool) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @24 // <std#integer<_uint64>.integer>   
9 [0x9]:         ret   


constructor: std#ulong.ulong[1979] params(1) in file: lib\support\0.2.805/primitives.sharp:260:10: note:  
		    ulong(i : ulong) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @24 // <std#integer<_uint64>.integer>   
9 [0x9]:         ret   


constructor: std#ulong.ulong[1980] params(1) in file: lib\support\0.2.805/primitives.sharp:261:10: note:  
		    ulong(i : uint) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @24 // <std#integer<_uint64>.integer>   
9 [0x9]:         ret   


constructor: std#ulong.ulong[1981] params(1) in file: lib\support\0.2.805/primitives.sharp:262:10: note:  
		    ulong(i : ushort) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @24 // <std#integer<_uint64>.integer>   
9 [0x9]:         ret   


constructor: std#ulong.ulong[1982] params(1) in file: lib\support\0.2.805/primitives.sharp:263:10: note:  
		    ulong(i : uchar) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @24 // <std#integer<_uint64>.integer>   
9 [0x9]:         ret   


constructor: std#ulong.ulong[1983] params(1) in file: lib\support\0.2.805/primitives.sharp:264:10: note:  
		    ulong(i : var) -> base(i) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ipushl #1   
2 [0x2]:         call @24 // <std#integer<_uint64>.integer>   
3 [0x3]:         ret   


overload function: std#ulong.operator![1984] params(0) in file: lib\support\0.2.805/primitives.sharp:266:8: note:  
		    def operator!() := (!value);
		       ^

0 [0x0]: line: 266 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           not ebx, ebx   
7 [0x7]:           return_val ebx   
8 [0x8]:           ret   


overload function: std#ulong.operator++[1985] params(0) in file: lib\support\0.2.805/primitives.sharp:267:8: note:  
		    def operator++() := (++value);
		       ^

0 [0x0]: line: 267 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           inc ebx   
7 [0x7]:           movu64 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#ulong.operator++[1986] params(1) in file: lib\support\0.2.805/primitives.sharp:268:8: note:  
		    def operator++(num : var) := (value++);
		       ^

0 [0x0]: line: 268 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           inc ebx   
8 [0x8]:           movu64 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#ulong.operator--[1987] params(0) in file: lib\support\0.2.805/primitives.sharp:269:8: note:  
		    def operator--() := (--value);
		       ^

0 [0x0]: line: 269 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           dec ebx   
7 [0x7]:           movu64 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#ulong.operator--[1988] params(1) in file: lib\support\0.2.805/primitives.sharp:270:8: note:  
		    def operator--(num : var) := (value--);
		       ^

0 [0x0]: line: 270 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           dec ebx   
8 [0x8]:           movu64 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#ulong.operator+=[1989] params(1) in file: lib\support\0.2.805/primitives.sharp:272:8: note:  
		    def operator+=(num : ulong)  := (value+=num.value);
		       ^

0 [0x0]: line: 272 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator+=[1990] params(1) in file: lib\support\0.2.805/primitives.sharp:273:8: note:  
		    def operator+=(num : long)   := (value+=num.value);
		       ^

0 [0x0]: line: 273 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator+=[1991] params(1) in file: lib\support\0.2.805/primitives.sharp:274:8: note:  
		    def operator+=(num : uint)   := (value+=num.value);
		       ^

0 [0x0]: line: 274 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator+=[1992] params(1) in file: lib\support\0.2.805/primitives.sharp:275:8: note:  
		    def operator+=(num : int)    := (value+=num.value);
		       ^

0 [0x0]: line: 275 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator+=[1993] params(1) in file: lib\support\0.2.805/primitives.sharp:276:8: note:  
		    def operator+=(num : ushort) := (value+=num.value);
		       ^

0 [0x0]: line: 276 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator+=[1994] params(1) in file: lib\support\0.2.805/primitives.sharp:277:8: note:  
		    def operator+=(num : short)  := (value+=num.value);
		       ^

0 [0x0]: line: 277 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator+=[1995] params(1) in file: lib\support\0.2.805/primitives.sharp:278:8: note:  
		    def operator+=(num : uchar)  := (value+=num.value);
		       ^

0 [0x0]: line: 278 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator+=[1996] params(1) in file: lib\support\0.2.805/primitives.sharp:279:8: note:  
		    def operator+=(num : char)   := (value+=num.value);
		       ^

0 [0x0]: line: 279 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator+=[1997] params(1) in file: lib\support\0.2.805/primitives.sharp:280:8: note:  
		    def operator+=(num : byte)   := (value+=num.value);
		       ^

0 [0x0]: line: 280 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator+=[1998] params(1) in file: lib\support\0.2.805/primitives.sharp:281:8: note:  
		    def operator+=(num : bool)   := (value+=num.value);
		       ^

0 [0x0]: line: 281 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator+=[1999] params(1) in file: lib\support\0.2.805/primitives.sharp:282:8: note:  
		    def operator+=(num : var)    := (value+=num);
		       ^

0 [0x0]: line: 282 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           add ecx, ebx -> ebx   
9 [0x9]:           movu64 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#ulong.operator-=[2000] params(1) in file: lib\support\0.2.805/primitives.sharp:284:8: note:  
		    def operator-=(num : ulong)  := (value-=num.value);
		       ^

0 [0x0]: line: 284 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator-=[2001] params(1) in file: lib\support\0.2.805/primitives.sharp:285:8: note:  
		    def operator-=(num : long)   := (value-=num.value);
		       ^

0 [0x0]: line: 285 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator-=[2002] params(1) in file: lib\support\0.2.805/primitives.sharp:286:8: note:  
		    def operator-=(num : uint)   := (value-=num.value);
		       ^

0 [0x0]: line: 286 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator-=[2003] params(1) in file: lib\support\0.2.805/primitives.sharp:287:8: note:  
		    def operator-=(num : int)    := (value-=num.value);
		       ^

0 [0x0]: line: 287 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator-=[2004] params(1) in file: lib\support\0.2.805/primitives.sharp:288:8: note:  
		    def operator-=(num : ushort) := (value-=num.value);
		       ^

0 [0x0]: line: 288 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator-=[2005] params(1) in file: lib\support\0.2.805/primitives.sharp:289:8: note:  
		    def operator-=(num : short)  := (value-=num.value);
		       ^

0 [0x0]: line: 289 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator-=[2006] params(1) in file: lib\support\0.2.805/primitives.sharp:290:8: note:  
		    def operator-=(num : uchar)  := (value-=num.value);
		       ^

0 [0x0]: line: 290 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator-=[2007] params(1) in file: lib\support\0.2.805/primitives.sharp:291:8: note:  
		    def operator-=(num : char)   := (value-=num.value);
		       ^

0 [0x0]: line: 291 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator-=[2008] params(1) in file: lib\support\0.2.805/primitives.sharp:292:8: note:  
		    def operator-=(num : byte)   := (value-=num.value);
		       ^

0 [0x0]: line: 292 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator-=[2009] params(1) in file: lib\support\0.2.805/primitives.sharp:293:8: note:  
		    def operator-=(num : bool)   := (value-=num.value);
		       ^

0 [0x0]: line: 293 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator-=[2010] params(1) in file: lib\support\0.2.805/primitives.sharp:294:8: note:  
		    def operator-=(num : var)    := (value-=num);
		       ^

0 [0x0]: line: 294 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           sub ecx, ebx -> ebx   
9 [0x9]:           movu64 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#ulong.operator*=[2011] params(1) in file: lib\support\0.2.805/primitives.sharp:296:8: note:  
		    def operator*=(num : ulong)  := (value*=num.value);
		       ^

0 [0x0]: line: 296 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator*=[2012] params(1) in file: lib\support\0.2.805/primitives.sharp:297:8: note:  
		    def operator*=(num : long)   := (value*=num.value);
		       ^

0 [0x0]: line: 297 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator*=[2013] params(1) in file: lib\support\0.2.805/primitives.sharp:298:8: note:  
		    def operator*=(num : uint)   := (value*=num.value);
		       ^

0 [0x0]: line: 298 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator*=[2014] params(1) in file: lib\support\0.2.805/primitives.sharp:299:8: note:  
		    def operator*=(num : int)    := (value*=num.value);
		       ^

0 [0x0]: line: 299 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator*=[2015] params(1) in file: lib\support\0.2.805/primitives.sharp:300:8: note:  
		    def operator*=(num : ushort) := (value*=num.value);
		       ^

0 [0x0]: line: 300 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator*=[2016] params(1) in file: lib\support\0.2.805/primitives.sharp:301:8: note:  
		    def operator*=(num : short)  := (value*=num.value);
		       ^

0 [0x0]: line: 301 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator*=[2017] params(1) in file: lib\support\0.2.805/primitives.sharp:302:8: note:  
		    def operator*=(num : uchar)  := (value*=num.value);
		       ^

0 [0x0]: line: 302 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator*=[2018] params(1) in file: lib\support\0.2.805/primitives.sharp:303:8: note:  
		    def operator*=(num : char)   := (value*=num.value);
		       ^

0 [0x0]: line: 303 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator*=[2019] params(1) in file: lib\support\0.2.805/primitives.sharp:304:8: note:  
		    def operator*=(num : byte)   := (value*=num.value);
		       ^

0 [0x0]: line: 304 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator*=[2020] params(1) in file: lib\support\0.2.805/primitives.sharp:305:8: note:  
		    def operator*=(num : bool)   := (value*=num.value);
		       ^

0 [0x0]: line: 305 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator*=[2021] params(1) in file: lib\support\0.2.805/primitives.sharp:306:8: note:  
		    def operator*=(num : var)    := (value*=num);
		       ^

0 [0x0]: line: 306 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           mul ecx, ebx -> ebx   
9 [0x9]:           movu64 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#ulong.operator/=[2022] params(1) in file: lib\support\0.2.805/primitives.sharp:308:8: note:  
		    def operator/=(num : ulong)  := (value/=num.value);
		       ^

0 [0x0]: line: 308 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator/=[2023] params(1) in file: lib\support\0.2.805/primitives.sharp:309:8: note:  
		    def operator/=(num : long)   := (value/=num.value);
		       ^

0 [0x0]: line: 309 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator/=[2024] params(1) in file: lib\support\0.2.805/primitives.sharp:310:8: note:  
		    def operator/=(num : uint)   := (value/=num.value);
		       ^

0 [0x0]: line: 310 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator/=[2025] params(1) in file: lib\support\0.2.805/primitives.sharp:311:8: note:  
		    def operator/=(num : int)    := (value/=num.value);
		       ^

0 [0x0]: line: 311 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator/=[2026] params(1) in file: lib\support\0.2.805/primitives.sharp:312:8: note:  
		    def operator/=(num : ushort) := (value/=num.value);
		       ^

0 [0x0]: line: 312 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator/=[2027] params(1) in file: lib\support\0.2.805/primitives.sharp:313:8: note:  
		    def operator/=(num : short)  := (value/=num.value);
		       ^

0 [0x0]: line: 313 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator/=[2028] params(1) in file: lib\support\0.2.805/primitives.sharp:314:8: note:  
		    def operator/=(num : uchar)  := (value/=num.value);
		       ^

0 [0x0]: line: 314 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator/=[2029] params(1) in file: lib\support\0.2.805/primitives.sharp:315:8: note:  
		    def operator/=(num : char)   := (value/=num.value);
		       ^

0 [0x0]: line: 315 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator/=[2030] params(1) in file: lib\support\0.2.805/primitives.sharp:316:8: note:  
		    def operator/=(num : byte)   := (value/=num.value);
		       ^

0 [0x0]: line: 316 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator/=[2031] params(1) in file: lib\support\0.2.805/primitives.sharp:317:8: note:  
		    def operator/=(num : bool)   := (value/=num.value);
		       ^

0 [0x0]: line: 317 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator/=[2032] params(1) in file: lib\support\0.2.805/primitives.sharp:318:8: note:  
		    def operator/=(num : var)    := (value/=num);
		       ^

0 [0x0]: line: 318 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           div ecx, ebx -> ebx   
9 [0x9]:           movu64 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#ulong.operator%=[2033] params(1) in file: lib\support\0.2.805/primitives.sharp:320:8: note:  
		    def operator%=(num : ulong)  := (value%=num.value);
		       ^

0 [0x0]: line: 320 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator%=[2034] params(1) in file: lib\support\0.2.805/primitives.sharp:321:8: note:  
		    def operator%=(num : long)   := (value%=num.value);
		       ^

0 [0x0]: line: 321 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator%=[2035] params(1) in file: lib\support\0.2.805/primitives.sharp:322:8: note:  
		    def operator%=(num : uint)   := (value%=num.value);
		       ^

0 [0x0]: line: 322 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator%=[2036] params(1) in file: lib\support\0.2.805/primitives.sharp:323:8: note:  
		    def operator%=(num : int)    := (value%=num.value);
		       ^

0 [0x0]: line: 323 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator%=[2037] params(1) in file: lib\support\0.2.805/primitives.sharp:324:8: note:  
		    def operator%=(num : ushort) := (value%=num.value);
		       ^

0 [0x0]: line: 324 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator%=[2038] params(1) in file: lib\support\0.2.805/primitives.sharp:325:8: note:  
		    def operator%=(num : short)  := (value%=num.value);
		       ^

0 [0x0]: line: 325 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator%=[2039] params(1) in file: lib\support\0.2.805/primitives.sharp:326:8: note:  
		    def operator%=(num : uchar)  := (value%=num.value);
		       ^

0 [0x0]: line: 326 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator%=[2040] params(1) in file: lib\support\0.2.805/primitives.sharp:327:8: note:  
		    def operator%=(num : char)   := (value%=num.value);
		       ^

0 [0x0]: line: 327 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator%=[2041] params(1) in file: lib\support\0.2.805/primitives.sharp:328:8: note:  
		    def operator%=(num : byte)   := (value%=num.value);
		       ^

0 [0x0]: line: 328 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator%=[2042] params(1) in file: lib\support\0.2.805/primitives.sharp:329:8: note:  
		    def operator%=(num : bool)   := (value%=num.value);
		       ^

0 [0x0]: line: 329 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator%=[2043] params(1) in file: lib\support\0.2.805/primitives.sharp:330:8: note:  
		    def operator%=(num : var)    := (value%=num);
		       ^

0 [0x0]: line: 330 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           mod ecx, ebx -> ebx   
9 [0x9]:           movu64 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#ulong.operator&=[2044] params(1) in file: lib\support\0.2.805/primitives.sharp:332:8: note:  
		    def operator&=(num : ulong)  := (value&=num.value);
		       ^

0 [0x0]: line: 332 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ulong.operator&=[2045] params(1) in file: lib\support\0.2.805/primitives.sharp:333:8: note:  
		    def operator&=(num : long)   := (value&=num.value);
		       ^

0 [0x0]: line: 333 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ulong.operator&=[2046] params(1) in file: lib\support\0.2.805/primitives.sharp:334:8: note:  
		    def operator&=(num : uint)   := (value&=num.value);
		       ^

0 [0x0]: line: 334 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ulong.operator&=[2047] params(1) in file: lib\support\0.2.805/primitives.sharp:335:8: note:  
		    def operator&=(num : int)    := (value&=num.value);
		       ^

0 [0x0]: line: 335 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ulong.operator&=[2048] params(1) in file: lib\support\0.2.805/primitives.sharp:336:8: note:  
		    def operator&=(num : ushort) := (value&=num.value);
		       ^

0 [0x0]: line: 336 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ulong.operator&=[2049] params(1) in file: lib\support\0.2.805/primitives.sharp:337:8: note:  
		    def operator&=(num : short)  := (value&=num.value);
		       ^

0 [0x0]: line: 337 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ulong.operator&=[2050] params(1) in file: lib\support\0.2.805/primitives.sharp:338:8: note:  
		    def operator&=(num : uchar)  := (value&=num.value);
		       ^

0 [0x0]: line: 338 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ulong.operator&=[2051] params(1) in file: lib\support\0.2.805/primitives.sharp:339:8: note:  
		    def operator&=(num : char)   := (value&=num.value);
		       ^

0 [0x0]: line: 339 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ulong.operator&=[2052] params(1) in file: lib\support\0.2.805/primitives.sharp:340:8: note:  
		    def operator&=(num : byte)   := (value&=num.value);
		       ^

0 [0x0]: line: 340 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ulong.operator&=[2053] params(1) in file: lib\support\0.2.805/primitives.sharp:341:8: note:  
		    def operator&=(num : bool)   := (value&=num.value);
		       ^

0 [0x0]: line: 341 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ulong.operator&=[2054] params(1) in file: lib\support\0.2.805/primitives.sharp:342:8: note:  
		    def operator&=(num : var)    := (value&=num);
		       ^

0 [0x0]: line: 342 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           and ecx, ebx   
9 [0x9]:           rmov adx, cmt   
10 [0xa]:           returnobj   
11 [0xb]:           ret   


overload function: std#ulong.operator|=[2055] params(1) in file: lib\support\0.2.805/primitives.sharp:344:8: note:  
		    def operator|=(num : ulong)  := (value|=num.value);
		       ^

0 [0x0]: line: 344 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator|=[2056] params(1) in file: lib\support\0.2.805/primitives.sharp:345:8: note:  
		    def operator|=(num : long)   := (value|=num.value);
		       ^

0 [0x0]: line: 345 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator|=[2057] params(1) in file: lib\support\0.2.805/primitives.sharp:346:8: note:  
		    def operator|=(num : uint)   := (value|=num.value);
		       ^

0 [0x0]: line: 346 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator|=[2058] params(1) in file: lib\support\0.2.805/primitives.sharp:347:8: note:  
		    def operator|=(num : int)    := (value|=num.value);
		       ^

0 [0x0]: line: 347 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator|=[2059] params(1) in file: lib\support\0.2.805/primitives.sharp:348:8: note:  
		    def operator|=(num : ushort) := (value|=num.value);
		       ^

0 [0x0]: line: 348 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator|=[2060] params(1) in file: lib\support\0.2.805/primitives.sharp:349:8: note:  
		    def operator|=(num : short)  := (value|=num.value);
		       ^

0 [0x0]: line: 349 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator|=[2061] params(1) in file: lib\support\0.2.805/primitives.sharp:350:8: note:  
		    def operator|=(num : uchar)  := (value|=num.value);
		       ^

0 [0x0]: line: 350 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator|=[2062] params(1) in file: lib\support\0.2.805/primitives.sharp:351:8: note:  
		    def operator|=(num : char)   := (value|=num.value);
		       ^

0 [0x0]: line: 351 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator|=[2063] params(1) in file: lib\support\0.2.805/primitives.sharp:352:8: note:  
		    def operator|=(num : byte)   := (value|=num.value);
		       ^

0 [0x0]: line: 352 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator|=[2064] params(1) in file: lib\support\0.2.805/primitives.sharp:353:8: note:  
		    def operator|=(num : bool)   := (value|=num.value);
		       ^

0 [0x0]: line: 353 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator|=[2065] params(1) in file: lib\support\0.2.805/primitives.sharp:354:8: note:  
		    def operator|=(num : var)    := (value|=num);
		       ^

0 [0x0]: line: 354 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           or ecx, ebx   
9 [0x9]:           movu64 cmt, cmt   
10 [0xa]:           rmov adx, cmt   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


constructor: std#ulong.ulong[2066] params(0) in file: lib\support\0.2.805/primitives.sharp:253:6: note:  
		class ulong base integer<_uint64> {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @216 // <std#integer<_uint64>.integer>   
2 [0x2]:         ret   


constructor: std#long.long[2067] params(1) in file: lib\support\0.2.805/primitives.sharp:357:9: note:  
		    long(i : long) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @217 // <std#integer<_int64>.integer>   
9 [0x9]:         ret   


constructor: std#long.long[2068] params(1) in file: lib\support\0.2.805/primitives.sharp:358:9: note:  
		    long(i : int) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @217 // <std#integer<_int64>.integer>   
9 [0x9]:         ret   


constructor: std#long.long[2069] params(1) in file: lib\support\0.2.805/primitives.sharp:359:9: note:  
		    long(i : short) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @217 // <std#integer<_int64>.integer>   
9 [0x9]:         ret   


constructor: std#long.long[2070] params(1) in file: lib\support\0.2.805/primitives.sharp:360:9: note:  
		    long(i : char) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @217 // <std#integer<_int64>.integer>   
9 [0x9]:         ret   


constructor: std#long.long[2071] params(1) in file: lib\support\0.2.805/primitives.sharp:361:9: note:  
		    long(i : byte) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @217 // <std#integer<_int64>.integer>   
9 [0x9]:         ret   


constructor: std#long.long[2072] params(1) in file: lib\support\0.2.805/primitives.sharp:362:9: note:  
		    long(i : bool) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @217 // <std#integer<_int64>.integer>   
9 [0x9]:         ret   


constructor: std#long.long[2073] params(1) in file: lib\support\0.2.805/primitives.sharp:363:9: note:  
		    long(i : ulong) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @217 // <std#integer<_int64>.integer>   
9 [0x9]:         ret   


constructor: std#long.long[2074] params(1) in file: lib\support\0.2.805/primitives.sharp:364:9: note:  
		    long(i : uint) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @217 // <std#integer<_int64>.integer>   
9 [0x9]:         ret   


constructor: std#long.long[2075] params(1) in file: lib\support\0.2.805/primitives.sharp:365:9: note:  
		    long(i : ushort) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @217 // <std#integer<_int64>.integer>   
9 [0x9]:         ret   


constructor: std#long.long[2076] params(1) in file: lib\support\0.2.805/primitives.sharp:366:9: note:  
		    long(i : uchar) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @217 // <std#integer<_int64>.integer>   
9 [0x9]:         ret   


constructor: std#long.long[2077] params(1) in file: lib\support\0.2.805/primitives.sharp:367:9: note:  
		    long(i : var) -> base(i) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         ipushl #1   
2 [0x2]:         call @217 // <std#integer<_int64>.integer>   
3 [0x3]:         ret   


overload function: std#long.operator![2078] params(0) in file: lib\support\0.2.805/primitives.sharp:369:8: note:  
		    def operator!() := (!value);
		       ^

0 [0x0]: line: 369 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           not ebx, ebx   
7 [0x7]:           return_val ebx   
8 [0x8]:           ret   


overload function: std#long.operator++[2079] params(0) in file: lib\support\0.2.805/primitives.sharp:370:8: note:  
		    def operator++() := (++value);
		       ^

0 [0x0]: line: 370 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           inc ebx   
7 [0x7]:           mov64 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#long.operator++[2080] params(1) in file: lib\support\0.2.805/primitives.sharp:371:8: note:  
		    def operator++(num : var) := (value++);
		       ^

0 [0x0]: line: 371 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           inc ebx   
8 [0x8]:           mov64 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#long.operator--[2081] params(0) in file: lib\support\0.2.805/primitives.sharp:372:8: note:  
		    def operator--() := (--value);
		       ^

0 [0x0]: line: 372 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           dec ebx   
7 [0x7]:           mov64 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#long.operator--[2082] params(1) in file: lib\support\0.2.805/primitives.sharp:373:8: note:  
		    def operator--(num : var) := (value--);
		       ^

0 [0x0]: line: 373 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           dec ebx   
8 [0x8]:           mov64 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#long.operator+=[2083] params(1) in file: lib\support\0.2.805/primitives.sharp:375:8: note:  
		    def operator+=(num : ulong)  := (value+=num.value);
		       ^

0 [0x0]: line: 375 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator+=[2084] params(1) in file: lib\support\0.2.805/primitives.sharp:376:8: note:  
		    def operator+=(num : long)   := (value+=num.value);
		       ^

0 [0x0]: line: 376 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator+=[2085] params(1) in file: lib\support\0.2.805/primitives.sharp:377:8: note:  
		    def operator+=(num : uint)   := (value+=num.value);
		       ^

0 [0x0]: line: 377 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator+=[2086] params(1) in file: lib\support\0.2.805/primitives.sharp:378:8: note:  
		    def operator+=(num : int)    := (value+=num.value);
		       ^

0 [0x0]: line: 378 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator+=[2087] params(1) in file: lib\support\0.2.805/primitives.sharp:379:8: note:  
		    def operator+=(num : ushort) := (value+=num.value);
		       ^

0 [0x0]: line: 379 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator+=[2088] params(1) in file: lib\support\0.2.805/primitives.sharp:380:8: note:  
		    def operator+=(num : short)  := (value+=num.value);
		       ^

0 [0x0]: line: 380 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator+=[2089] params(1) in file: lib\support\0.2.805/primitives.sharp:381:8: note:  
		    def operator+=(num : uchar)  := (value+=num.value);
		       ^

0 [0x0]: line: 381 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator+=[2090] params(1) in file: lib\support\0.2.805/primitives.sharp:382:8: note:  
		    def operator+=(num : char)   := (value+=num.value);
		       ^

0 [0x0]: line: 382 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator+=[2091] params(1) in file: lib\support\0.2.805/primitives.sharp:383:8: note:  
		    def operator+=(num : byte)   := (value+=num.value);
		       ^

0 [0x0]: line: 383 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator+=[2092] params(1) in file: lib\support\0.2.805/primitives.sharp:384:8: note:  
		    def operator+=(num : bool)   := (value+=num.value);
		       ^

0 [0x0]: line: 384 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator+=[2093] params(1) in file: lib\support\0.2.805/primitives.sharp:385:8: note:  
		    def operator+=(num : var)    := (value+=num);
		       ^

0 [0x0]: line: 385 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           add ecx, ebx -> ebx   
9 [0x9]:           mov64 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#long.operator-=[2094] params(1) in file: lib\support\0.2.805/primitives.sharp:387:8: note:  
		    def operator-=(num : ulong)  := (value-=num.value);
		       ^

0 [0x0]: line: 387 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator-=[2095] params(1) in file: lib\support\0.2.805/primitives.sharp:388:8: note:  
		    def operator-=(num : long)   := (value-=num.value);
		       ^

0 [0x0]: line: 388 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator-=[2096] params(1) in file: lib\support\0.2.805/primitives.sharp:389:8: note:  
		    def operator-=(num : uint)   := (value-=num.value);
		       ^

0 [0x0]: line: 389 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator-=[2097] params(1) in file: lib\support\0.2.805/primitives.sharp:390:8: note:  
		    def operator-=(num : int)    := (value-=num.value);
		       ^

0 [0x0]: line: 390 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator-=[2098] params(1) in file: lib\support\0.2.805/primitives.sharp:391:8: note:  
		    def operator-=(num : ushort) := (value-=num.value);
		       ^

0 [0x0]: line: 391 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator-=[2099] params(1) in file: lib\support\0.2.805/primitives.sharp:392:8: note:  
		    def operator-=(num : short)  := (value-=num.value);
		       ^

0 [0x0]: line: 392 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator-=[2100] params(1) in file: lib\support\0.2.805/primitives.sharp:393:8: note:  
		    def operator-=(num : uchar)  := (value-=num.value);
		       ^

0 [0x0]: line: 393 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator-=[2101] params(1) in file: lib\support\0.2.805/primitives.sharp:394:8: note:  
		    def operator-=(num : char)   := (value-=num.value);
		       ^

0 [0x0]: line: 394 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator-=[2102] params(1) in file: lib\support\0.2.805/primitives.sharp:395:8: note:  
		    def operator-=(num : byte)   := (value-=num.value);
		       ^

0 [0x0]: line: 395 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator-=[2103] params(1) in file: lib\support\0.2.805/primitives.sharp:396:8: note:  
		    def operator-=(num : bool)   := (value-=num.value);
		       ^

0 [0x0]: line: 396 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator-=[2104] params(1) in file: lib\support\0.2.805/primitives.sharp:397:8: note:  
		    def operator-=(num : var)    := (value-=num);
		       ^

0 [0x0]: line: 397 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           sub ecx, ebx -> ebx   
9 [0x9]:           mov64 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#long.operator*=[2105] params(1) in file: lib\support\0.2.805/primitives.sharp:399:8: note:  
		    def operator*=(num : ulong)  := (value*=num.value);
		       ^

0 [0x0]: line: 399 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator*=[2106] params(1) in file: lib\support\0.2.805/primitives.sharp:400:8: note:  
		    def operator*=(num : long)   := (value*=num.value);
		       ^

0 [0x0]: line: 400 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator*=[2107] params(1) in file: lib\support\0.2.805/primitives.sharp:401:8: note:  
		    def operator*=(num : uint)   := (value*=num.value);
		       ^

0 [0x0]: line: 401 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator*=[2108] params(1) in file: lib\support\0.2.805/primitives.sharp:402:8: note:  
		    def operator*=(num : int)    := (value*=num.value);
		       ^

0 [0x0]: line: 402 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator*=[2109] params(1) in file: lib\support\0.2.805/primitives.sharp:403:8: note:  
		    def operator*=(num : ushort) := (value*=num.value);
		       ^

0 [0x0]: line: 403 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator*=[2110] params(1) in file: lib\support\0.2.805/primitives.sharp:404:8: note:  
		    def operator*=(num : short)  := (value*=num.value);
		       ^

0 [0x0]: line: 404 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator*=[2111] params(1) in file: lib\support\0.2.805/primitives.sharp:405:8: note:  
		    def operator*=(num : uchar)  := (value*=num.value);
		       ^

0 [0x0]: line: 405 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator*=[2112] params(1) in file: lib\support\0.2.805/primitives.sharp:406:8: note:  
		    def operator*=(num : char)   := (value*=num.value);
		       ^

0 [0x0]: line: 406 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator*=[2113] params(1) in file: lib\support\0.2.805/primitives.sharp:407:8: note:  
		    def operator*=(num : byte)   := (value*=num.value);
		       ^

0 [0x0]: line: 407 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator*=[2114] params(1) in file: lib\support\0.2.805/primitives.sharp:408:8: note:  
		    def operator*=(num : bool)   := (value*=num.value);
		       ^

0 [0x0]: line: 408 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator*=[2115] params(1) in file: lib\support\0.2.805/primitives.sharp:409:8: note:  
		    def operator*=(num : var)    := (value*=num);
		       ^

0 [0x0]: line: 409 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           mul ecx, ebx -> ebx   
9 [0x9]:           mov64 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#long.operator/=[2116] params(1) in file: lib\support\0.2.805/primitives.sharp:411:8: note:  
		    def operator/=(num : ulong)  := (value/=num.value);
		       ^

0 [0x0]: line: 411 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator/=[2117] params(1) in file: lib\support\0.2.805/primitives.sharp:412:8: note:  
		    def operator/=(num : long)   := (value/=num.value);
		       ^

0 [0x0]: line: 412 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator/=[2118] params(1) in file: lib\support\0.2.805/primitives.sharp:413:8: note:  
		    def operator/=(num : uint)   := (value/=num.value);
		       ^

0 [0x0]: line: 413 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator/=[2119] params(1) in file: lib\support\0.2.805/primitives.sharp:414:8: note:  
		    def operator/=(num : int)    := (value/=num.value);
		       ^

0 [0x0]: line: 414 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator/=[2120] params(1) in file: lib\support\0.2.805/primitives.sharp:415:8: note:  
		    def operator/=(num : ushort) := (value/=num.value);
		       ^

0 [0x0]: line: 415 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator/=[2121] params(1) in file: lib\support\0.2.805/primitives.sharp:416:8: note:  
		    def operator/=(num : short)  := (value/=num.value);
		       ^

0 [0x0]: line: 416 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator/=[2122] params(1) in file: lib\support\0.2.805/primitives.sharp:417:8: note:  
		    def operator/=(num : uchar)  := (value/=num.value);
		       ^

0 [0x0]: line: 417 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator/=[2123] params(1) in file: lib\support\0.2.805/primitives.sharp:418:8: note:  
		    def operator/=(num : char)   := (value/=num.value);
		       ^

0 [0x0]: line: 418 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator/=[2124] params(1) in file: lib\support\0.2.805/primitives.sharp:419:8: note:  
		    def operator/=(num : byte)   := (value/=num.value);
		       ^

0 [0x0]: line: 419 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator/=[2125] params(1) in file: lib\support\0.2.805/primitives.sharp:420:8: note:  
		    def operator/=(num : bool)   := (value/=num.value);
		       ^

0 [0x0]: line: 420 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator/=[2126] params(1) in file: lib\support\0.2.805/primitives.sharp:421:8: note:  
		    def operator/=(num : var)    := (value/=num);
		       ^

0 [0x0]: line: 421 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           div ecx, ebx -> ebx   
9 [0x9]:           mov64 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#long.operator%=[2127] params(1) in file: lib\support\0.2.805/primitives.sharp:423:8: note:  
		    def operator%=(num : ulong)  := (value%=num.value);
		       ^

0 [0x0]: line: 423 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator%=[2128] params(1) in file: lib\support\0.2.805/primitives.sharp:424:8: note:  
		    def operator%=(num : long)   := (value%=num.value);
		       ^

0 [0x0]: line: 424 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator%=[2129] params(1) in file: lib\support\0.2.805/primitives.sharp:425:8: note:  
		    def operator%=(num : uint)   := (value%=num.value);
		       ^

0 [0x0]: line: 425 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator%=[2130] params(1) in file: lib\support\0.2.805/primitives.sharp:426:8: note:  
		    def operator%=(num : int)    := (value%=num.value);
		       ^

0 [0x0]: line: 426 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator%=[2131] params(1) in file: lib\support\0.2.805/primitives.sharp:427:8: note:  
		    def operator%=(num : ushort) := (value%=num.value);
		       ^

0 [0x0]: line: 427 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator%=[2132] params(1) in file: lib\support\0.2.805/primitives.sharp:428:8: note:  
		    def operator%=(num : short)  := (value%=num.value);
		       ^

0 [0x0]: line: 428 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator%=[2133] params(1) in file: lib\support\0.2.805/primitives.sharp:429:8: note:  
		    def operator%=(num : uchar)  := (value%=num.value);
		       ^

0 [0x0]: line: 429 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator%=[2134] params(1) in file: lib\support\0.2.805/primitives.sharp:430:8: note:  
		    def operator%=(num : char)   := (value%=num.value);
		       ^

0 [0x0]: line: 430 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator%=[2135] params(1) in file: lib\support\0.2.805/primitives.sharp:431:8: note:  
		    def operator%=(num : byte)   := (value%=num.value);
		       ^

0 [0x0]: line: 431 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator%=[2136] params(1) in file: lib\support\0.2.805/primitives.sharp:432:8: note:  
		    def operator%=(num : bool)   := (value%=num.value);
		       ^

0 [0x0]: line: 432 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator%=[2137] params(1) in file: lib\support\0.2.805/primitives.sharp:433:8: note:  
		    def operator%=(num : var)    := (value%=num);
		       ^

0 [0x0]: line: 433 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           mod ecx, ebx -> ebx   
9 [0x9]:           mov64 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#long.operator&=[2138] params(1) in file: lib\support\0.2.805/primitives.sharp:435:8: note:  
		    def operator&=(num : ulong)  := (value&=num.value);
		       ^

0 [0x0]: line: 435 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#long.operator&=[2139] params(1) in file: lib\support\0.2.805/primitives.sharp:436:8: note:  
		    def operator&=(num : long)   := (value&=num.value);
		       ^

0 [0x0]: line: 436 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#long.operator&=[2140] params(1) in file: lib\support\0.2.805/primitives.sharp:437:8: note:  
		    def operator&=(num : uint)   := (value&=num.value);
		       ^

0 [0x0]: line: 437 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#long.operator&=[2141] params(1) in file: lib\support\0.2.805/primitives.sharp:438:8: note:  
		    def operator&=(num : int)    := (value&=num.value);
		       ^

0 [0x0]: line: 438 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#long.operator&=[2142] params(1) in file: lib\support\0.2.805/primitives.sharp:439:8: note:  
		    def operator&=(num : ushort) := (value&=num.value);
		       ^

0 [0x0]: line: 439 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#long.operator&=[2143] params(1) in file: lib\support\0.2.805/primitives.sharp:440:8: note:  
		    def operator&=(num : short)  := (value&=num.value);
		       ^

0 [0x0]: line: 440 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#long.operator&=[2144] params(1) in file: lib\support\0.2.805/primitives.sharp:441:8: note:  
		    def operator&=(num : uchar)  := (value&=num.value);
		       ^

0 [0x0]: line: 441 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#long.operator&=[2145] params(1) in file: lib\support\0.2.805/primitives.sharp:442:8: note:  
		    def operator&=(num : char)   := (value&=num.value);
		       ^

0 [0x0]: line: 442 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#long.operator&=[2146] params(1) in file: lib\support\0.2.805/primitives.sharp:443:8: note:  
		    def operator&=(num : byte)   := (value&=num.value);
		       ^

0 [0x0]: line: 443 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#long.operator&=[2147] params(1) in file: lib\support\0.2.805/primitives.sharp:444:8: note:  
		    def operator&=(num : bool)   := (value&=num.value);
		       ^

0 [0x0]: line: 444 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#long.operator&=[2148] params(1) in file: lib\support\0.2.805/primitives.sharp:445:8: note:  
		    def operator&=(num : var)    := (value&=num);
		       ^

0 [0x0]: line: 445 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           and ecx, ebx   
9 [0x9]:           rmov adx, cmt   
10 [0xa]:           returnobj   
11 [0xb]:           ret   


overload function: std#long.operator|=[2149] params(1) in file: lib\support\0.2.805/primitives.sharp:447:8: note:  
		    def operator|=(num : ulong)  := (value|=num.value);
		       ^

0 [0x0]: line: 447 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator|=[2150] params(1) in file: lib\support\0.2.805/primitives.sharp:448:8: note:  
		    def operator|=(num : long)   := (value|=num.value);
		       ^

0 [0x0]: line: 448 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator|=[2151] params(1) in file: lib\support\0.2.805/primitives.sharp:449:8: note:  
		    def operator|=(num : uint)   := (value|=num.value);
		       ^

0 [0x0]: line: 449 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator|=[2152] params(1) in file: lib\support\0.2.805/primitives.sharp:450:8: note:  
		    def operator|=(num : int)    := (value|=num.value);
		       ^

0 [0x0]: line: 450 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator|=[2153] params(1) in file: lib\support\0.2.805/primitives.sharp:451:8: note:  
		    def operator|=(num : ushort) := (value|=num.value);
		       ^

0 [0x0]: line: 451 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator|=[2154] params(1) in file: lib\support\0.2.805/primitives.sharp:452:8: note:  
		    def operator|=(num : short)  := (value|=num.value);
		       ^

0 [0x0]: line: 452 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator|=[2155] params(1) in file: lib\support\0.2.805/primitives.sharp:453:8: note:  
		    def operator|=(num : uchar)  := (value|=num.value);
		       ^

0 [0x0]: line: 453 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator|=[2156] params(1) in file: lib\support\0.2.805/primitives.sharp:454:8: note:  
		    def operator|=(num : char)   := (value|=num.value);
		       ^

0 [0x0]: line: 454 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator|=[2157] params(1) in file: lib\support\0.2.805/primitives.sharp:455:8: note:  
		    def operator|=(num : byte)   := (value|=num.value);
		       ^

0 [0x0]: line: 455 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator|=[2158] params(1) in file: lib\support\0.2.805/primitives.sharp:456:8: note:  
		    def operator|=(num : bool)   := (value|=num.value);
		       ^

0 [0x0]: line: 456 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator|=[2159] params(1) in file: lib\support\0.2.805/primitives.sharp:457:8: note:  
		    def operator|=(num : var)    := (value|=num);
		       ^

0 [0x0]: line: 457 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           or ecx, ebx   
9 [0x9]:           mov64 cmt, cmt   
10 [0xa]:           rmov adx, cmt   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


constructor: std#long.long[2160] params(0) in file: lib\support\0.2.805/primitives.sharp:356:6: note:  
		class long base integer<_int64> {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @409 // <std#integer<_int64>.integer>   
2 [0x2]:         ret   


constructor: std#uint.uint[2161] params(1) in file: lib\support\0.2.805/primitives.sharp:460:9: note:  
		    uint(i : long) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @410 // <std#integer<_uint32>.integer>   
9 [0x9]:         ret   


constructor: std#uint.uint[2162] params(1) in file: lib\support\0.2.805/primitives.sharp:461:9: note:  
		    uint(i : int) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @410 // <std#integer<_uint32>.integer>   
9 [0x9]:         ret   


constructor: std#uint.uint[2163] params(1) in file: lib\support\0.2.805/primitives.sharp:462:9: note:  
		    uint(i : short) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @410 // <std#integer<_uint32>.integer>   
9 [0x9]:         ret   


constructor: std#uint.uint[2164] params(1) in file: lib\support\0.2.805/primitives.sharp:463:9: note:  
		    uint(i : char) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @410 // <std#integer<_uint32>.integer>   
9 [0x9]:         ret   


constructor: std#uint.uint[2165] params(1) in file: lib\support\0.2.805/primitives.sharp:464:9: note:  
		    uint(i : byte) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @410 // <std#integer<_uint32>.integer>   
9 [0x9]:         ret   


constructor: std#uint.uint[2166] params(1) in file: lib\support\0.2.805/primitives.sharp:465:9: note:  
		    uint(i : bool) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @410 // <std#integer<_uint32>.integer>   
9 [0x9]:         ret   


constructor: std#uint.uint[2167] params(1) in file: lib\support\0.2.805/primitives.sharp:466:9: note:  
		    uint(i : ulong) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @410 // <std#integer<_uint32>.integer>   
9 [0x9]:         ret   


constructor: std#uint.uint[2168] params(1) in file: lib\support\0.2.805/primitives.sharp:467:9: note:  
		    uint(i : uint) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @410 // <std#integer<_uint32>.integer>   
9 [0x9]:         ret   


constructor: std#uint.uint[2169] params(1) in file: lib\support\0.2.805/primitives.sharp:468:9: note:  
		    uint(i : ushort) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @410 // <std#integer<_uint32>.integer>   
9 [0x9]:         ret   


constructor: std#uint.uint[2170] params(1) in file: lib\support\0.2.805/primitives.sharp:469:9: note:  
		    uint(i : uchar) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @410 // <std#integer<_uint32>.integer>   
9 [0x9]:         ret   


constructor: std#uint.uint[2171] params(1) in file: lib\support\0.2.805/primitives.sharp:470:9: note:  
		    uint(i : var) -> base(i) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         ipushl #1   
2 [0x2]:         call @410 // <std#integer<_uint32>.integer>   
3 [0x3]:         ret   


overload function: std#uint.operator![2172] params(0) in file: lib\support\0.2.805/primitives.sharp:472:8: note:  
		    def operator!() := (!value);
		       ^

0 [0x0]: line: 472 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           not ebx, ebx   
7 [0x7]:           return_val ebx   
8 [0x8]:           ret   


overload function: std#uint.operator++[2173] params(0) in file: lib\support\0.2.805/primitives.sharp:473:8: note:  
		    def operator++() := (++value);
		       ^

0 [0x0]: line: 473 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           inc ebx   
7 [0x7]:           movu32 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#uint.operator++[2174] params(1) in file: lib\support\0.2.805/primitives.sharp:474:8: note:  
		    def operator++(num : var) := (value++);
		       ^

0 [0x0]: line: 474 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           inc ebx   
8 [0x8]:           movu32 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#uint.operator--[2175] params(0) in file: lib\support\0.2.805/primitives.sharp:475:8: note:  
		    def operator--() := (--value);
		       ^

0 [0x0]: line: 475 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           dec ebx   
7 [0x7]:           movu32 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#uint.operator--[2176] params(1) in file: lib\support\0.2.805/primitives.sharp:476:8: note:  
		    def operator--(num : var) := (value--);
		       ^

0 [0x0]: line: 476 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           dec ebx   
8 [0x8]:           movu32 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#uint.operator+=[2177] params(1) in file: lib\support\0.2.805/primitives.sharp:478:8: note:  
		    def operator+=(num : ulong)  := (value+=num.value);
		       ^

0 [0x0]: line: 478 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator+=[2178] params(1) in file: lib\support\0.2.805/primitives.sharp:479:8: note:  
		    def operator+=(num : long)   := (value+=num.value);
		       ^

0 [0x0]: line: 479 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator+=[2179] params(1) in file: lib\support\0.2.805/primitives.sharp:480:8: note:  
		    def operator+=(num : uint)   := (value+=num.value);
		       ^

0 [0x0]: line: 480 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator+=[2180] params(1) in file: lib\support\0.2.805/primitives.sharp:481:8: note:  
		    def operator+=(num : int)    := (value+=num.value);
		       ^

0 [0x0]: line: 481 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator+=[2181] params(1) in file: lib\support\0.2.805/primitives.sharp:482:8: note:  
		    def operator+=(num : ushort) := (value+=num.value);
		       ^

0 [0x0]: line: 482 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator+=[2182] params(1) in file: lib\support\0.2.805/primitives.sharp:483:8: note:  
		    def operator+=(num : short)  := (value+=num.value);
		       ^

0 [0x0]: line: 483 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator+=[2183] params(1) in file: lib\support\0.2.805/primitives.sharp:484:8: note:  
		    def operator+=(num : uchar)  := (value+=num.value);
		       ^

0 [0x0]: line: 484 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator+=[2184] params(1) in file: lib\support\0.2.805/primitives.sharp:485:8: note:  
		    def operator+=(num : char)   := (value+=num.value);
		       ^

0 [0x0]: line: 485 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator+=[2185] params(1) in file: lib\support\0.2.805/primitives.sharp:486:8: note:  
		    def operator+=(num : byte)   := (value+=num.value);
		       ^

0 [0x0]: line: 486 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator+=[2186] params(1) in file: lib\support\0.2.805/primitives.sharp:487:8: note:  
		    def operator+=(num : bool)   := (value+=num.value);
		       ^

0 [0x0]: line: 487 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator+=[2187] params(1) in file: lib\support\0.2.805/primitives.sharp:488:8: note:  
		    def operator+=(num : var)    := (value+=num);
		       ^

0 [0x0]: line: 488 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           add ecx, ebx -> ebx   
9 [0x9]:           movu32 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#uint.operator-=[2188] params(1) in file: lib\support\0.2.805/primitives.sharp:490:8: note:  
		    def operator-=(num : ulong)  := (value-=num.value);
		       ^

0 [0x0]: line: 490 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator-=[2189] params(1) in file: lib\support\0.2.805/primitives.sharp:491:8: note:  
		    def operator-=(num : long)   := (value-=num.value);
		       ^

0 [0x0]: line: 491 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator-=[2190] params(1) in file: lib\support\0.2.805/primitives.sharp:492:8: note:  
		    def operator-=(num : uint)   := (value-=num.value);
		       ^

0 [0x0]: line: 492 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator-=[2191] params(1) in file: lib\support\0.2.805/primitives.sharp:493:8: note:  
		    def operator-=(num : int)    := (value-=num.value);
		       ^

0 [0x0]: line: 493 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator-=[2192] params(1) in file: lib\support\0.2.805/primitives.sharp:494:8: note:  
		    def operator-=(num : ushort) := (value-=num.value);
		       ^

0 [0x0]: line: 494 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator-=[2193] params(1) in file: lib\support\0.2.805/primitives.sharp:495:8: note:  
		    def operator-=(num : short)  := (value-=num.value);
		       ^

0 [0x0]: line: 495 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator-=[2194] params(1) in file: lib\support\0.2.805/primitives.sharp:496:8: note:  
		    def operator-=(num : uchar)  := (value-=num.value);
		       ^

0 [0x0]: line: 496 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator-=[2195] params(1) in file: lib\support\0.2.805/primitives.sharp:497:8: note:  
		    def operator-=(num : char)   := (value-=num.value);
		       ^

0 [0x0]: line: 497 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator-=[2196] params(1) in file: lib\support\0.2.805/primitives.sharp:498:8: note:  
		    def operator-=(num : byte)   := (value-=num.value);
		       ^

0 [0x0]: line: 498 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator-=[2197] params(1) in file: lib\support\0.2.805/primitives.sharp:499:8: note:  
		    def operator-=(num : bool)   := (value-=num.value);
		       ^

0 [0x0]: line: 499 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator-=[2198] params(1) in file: lib\support\0.2.805/primitives.sharp:500:8: note:  
		    def operator-=(num : var)    := (value-=num);
		       ^

0 [0x0]: line: 500 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           sub ecx, ebx -> ebx   
9 [0x9]:           movu32 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#uint.operator*=[2199] params(1) in file: lib\support\0.2.805/primitives.sharp:502:8: note:  
		    def operator*=(num : ulong)  := (value*=num.value);
		       ^

0 [0x0]: line: 502 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator*=[2200] params(1) in file: lib\support\0.2.805/primitives.sharp:503:8: note:  
		    def operator*=(num : long)   := (value*=num.value);
		       ^

0 [0x0]: line: 503 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator*=[2201] params(1) in file: lib\support\0.2.805/primitives.sharp:504:8: note:  
		    def operator*=(num : uint)   := (value*=num.value);
		       ^

0 [0x0]: line: 504 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator*=[2202] params(1) in file: lib\support\0.2.805/primitives.sharp:505:8: note:  
		    def operator*=(num : int)    := (value*=num.value);
		       ^

0 [0x0]: line: 505 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator*=[2203] params(1) in file: lib\support\0.2.805/primitives.sharp:506:8: note:  
		    def operator*=(num : ushort) := (value*=num.value);
		       ^

0 [0x0]: line: 506 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator*=[2204] params(1) in file: lib\support\0.2.805/primitives.sharp:507:8: note:  
		    def operator*=(num : short)  := (value*=num.value);
		       ^

0 [0x0]: line: 507 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator*=[2205] params(1) in file: lib\support\0.2.805/primitives.sharp:508:8: note:  
		    def operator*=(num : uchar)  := (value*=num.value);
		       ^

0 [0x0]: line: 508 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator*=[2206] params(1) in file: lib\support\0.2.805/primitives.sharp:509:8: note:  
		    def operator*=(num : char)   := (value*=num.value);
		       ^

0 [0x0]: line: 509 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator*=[2207] params(1) in file: lib\support\0.2.805/primitives.sharp:510:8: note:  
		    def operator*=(num : byte)   := (value*=num.value);
		       ^

0 [0x0]: line: 510 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator*=[2208] params(1) in file: lib\support\0.2.805/primitives.sharp:511:8: note:  
		    def operator*=(num : bool)   := (value*=num.value);
		       ^

0 [0x0]: line: 511 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator*=[2209] params(1) in file: lib\support\0.2.805/primitives.sharp:512:8: note:  
		    def operator*=(num : var)    := (value*=num);
		       ^

0 [0x0]: line: 512 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           mul ecx, ebx -> ebx   
9 [0x9]:           movu32 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#uint.operator/=[2210] params(1) in file: lib\support\0.2.805/primitives.sharp:514:8: note:  
		    def operator/=(num : ulong)  := (value/=num.value);
		       ^

0 [0x0]: line: 514 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator/=[2211] params(1) in file: lib\support\0.2.805/primitives.sharp:515:8: note:  
		    def operator/=(num : long)   := (value/=num.value);
		       ^

0 [0x0]: line: 515 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator/=[2212] params(1) in file: lib\support\0.2.805/primitives.sharp:516:8: note:  
		    def operator/=(num : uint)   := (value/=num.value);
		       ^

0 [0x0]: line: 516 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator/=[2213] params(1) in file: lib\support\0.2.805/primitives.sharp:517:8: note:  
		    def operator/=(num : int)    := (value/=num.value);
		       ^

0 [0x0]: line: 517 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator/=[2214] params(1) in file: lib\support\0.2.805/primitives.sharp:518:8: note:  
		    def operator/=(num : ushort) := (value/=num.value);
		       ^

0 [0x0]: line: 518 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator/=[2215] params(1) in file: lib\support\0.2.805/primitives.sharp:519:8: note:  
		    def operator/=(num : short)  := (value/=num.value);
		       ^

0 [0x0]: line: 519 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator/=[2216] params(1) in file: lib\support\0.2.805/primitives.sharp:520:8: note:  
		    def operator/=(num : uchar)  := (value/=num.value);
		       ^

0 [0x0]: line: 520 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator/=[2217] params(1) in file: lib\support\0.2.805/primitives.sharp:521:8: note:  
		    def operator/=(num : char)   := (value/=num.value);
		       ^

0 [0x0]: line: 521 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator/=[2218] params(1) in file: lib\support\0.2.805/primitives.sharp:522:8: note:  
		    def operator/=(num : byte)   := (value/=num.value);
		       ^

0 [0x0]: line: 522 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator/=[2219] params(1) in file: lib\support\0.2.805/primitives.sharp:523:8: note:  
		    def operator/=(num : bool)   := (value/=num.value);
		       ^

0 [0x0]: line: 523 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator/=[2220] params(1) in file: lib\support\0.2.805/primitives.sharp:524:8: note:  
		    def operator/=(num : var)    := (value/=num);
		       ^

0 [0x0]: line: 524 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           div ecx, ebx -> ebx   
9 [0x9]:           movu32 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#uint.operator%=[2221] params(1) in file: lib\support\0.2.805/primitives.sharp:526:8: note:  
		    def operator%=(num : ulong)  := (value%=num.value);
		       ^

0 [0x0]: line: 526 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator%=[2222] params(1) in file: lib\support\0.2.805/primitives.sharp:527:8: note:  
		    def operator%=(num : long)   := (value%=num.value);
		       ^

0 [0x0]: line: 527 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator%=[2223] params(1) in file: lib\support\0.2.805/primitives.sharp:528:8: note:  
		    def operator%=(num : uint)   := (value%=num.value);
		       ^

0 [0x0]: line: 528 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator%=[2224] params(1) in file: lib\support\0.2.805/primitives.sharp:529:8: note:  
		    def operator%=(num : int)    := (value%=num.value);
		       ^

0 [0x0]: line: 529 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator%=[2225] params(1) in file: lib\support\0.2.805/primitives.sharp:530:8: note:  
		    def operator%=(num : ushort) := (value%=num.value);
		       ^

0 [0x0]: line: 530 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator%=[2226] params(1) in file: lib\support\0.2.805/primitives.sharp:531:8: note:  
		    def operator%=(num : short)  := (value%=num.value);
		       ^

0 [0x0]: line: 531 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator%=[2227] params(1) in file: lib\support\0.2.805/primitives.sharp:532:8: note:  
		    def operator%=(num : uchar)  := (value%=num.value);
		       ^

0 [0x0]: line: 532 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator%=[2228] params(1) in file: lib\support\0.2.805/primitives.sharp:533:8: note:  
		    def operator%=(num : char)   := (value%=num.value);
		       ^

0 [0x0]: line: 533 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator%=[2229] params(1) in file: lib\support\0.2.805/primitives.sharp:534:8: note:  
		    def operator%=(num : byte)   := (value%=num.value);
		       ^

0 [0x0]: line: 534 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator%=[2230] params(1) in file: lib\support\0.2.805/primitives.sharp:535:8: note:  
		    def operator%=(num : bool)   := (value%=num.value);
		       ^

0 [0x0]: line: 535 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator%=[2231] params(1) in file: lib\support\0.2.805/primitives.sharp:536:8: note:  
		    def operator%=(num : var)    := (value%=num);
		       ^

0 [0x0]: line: 536 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           mod ecx, ebx -> ebx   
9 [0x9]:           movu32 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#uint.operator&=[2232] params(1) in file: lib\support\0.2.805/primitives.sharp:538:8: note:  
		    def operator&=(num : ulong)  := (value&=num.value);
		       ^

0 [0x0]: line: 538 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uint.operator&=[2233] params(1) in file: lib\support\0.2.805/primitives.sharp:539:8: note:  
		    def operator&=(num : long)   := (value&=num.value);
		       ^

0 [0x0]: line: 539 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uint.operator&=[2234] params(1) in file: lib\support\0.2.805/primitives.sharp:540:8: note:  
		    def operator&=(num : uint)   := (value&=num.value);
		       ^

0 [0x0]: line: 540 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uint.operator&=[2235] params(1) in file: lib\support\0.2.805/primitives.sharp:541:8: note:  
		    def operator&=(num : int)    := (value&=num.value);
		       ^

0 [0x0]: line: 541 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uint.operator&=[2236] params(1) in file: lib\support\0.2.805/primitives.sharp:542:8: note:  
		    def operator&=(num : ushort) := (value&=num.value);
		       ^

0 [0x0]: line: 542 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uint.operator&=[2237] params(1) in file: lib\support\0.2.805/primitives.sharp:543:8: note:  
		    def operator&=(num : short)  := (value&=num.value);
		       ^

0 [0x0]: line: 543 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uint.operator&=[2238] params(1) in file: lib\support\0.2.805/primitives.sharp:544:8: note:  
		    def operator&=(num : uchar)  := (value&=num.value);
		       ^

0 [0x0]: line: 544 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uint.operator&=[2239] params(1) in file: lib\support\0.2.805/primitives.sharp:545:8: note:  
		    def operator&=(num : char)   := (value&=num.value);
		       ^

0 [0x0]: line: 545 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uint.operator&=[2240] params(1) in file: lib\support\0.2.805/primitives.sharp:546:8: note:  
		    def operator&=(num : byte)   := (value&=num.value);
		       ^

0 [0x0]: line: 546 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uint.operator&=[2241] params(1) in file: lib\support\0.2.805/primitives.sharp:547:8: note:  
		    def operator&=(num : bool)   := (value&=num.value);
		       ^

0 [0x0]: line: 547 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uint.operator&=[2242] params(1) in file: lib\support\0.2.805/primitives.sharp:548:8: note:  
		    def operator&=(num : var)    := (value&=num);
		       ^

0 [0x0]: line: 548 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           and ecx, ebx   
9 [0x9]:           rmov adx, cmt   
10 [0xa]:           returnobj   
11 [0xb]:           ret   


overload function: std#uint.operator|=[2243] params(1) in file: lib\support\0.2.805/primitives.sharp:550:8: note:  
		    def operator|=(num : ulong)  := (value|=num.value);
		       ^

0 [0x0]: line: 550 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator|=[2244] params(1) in file: lib\support\0.2.805/primitives.sharp:551:8: note:  
		    def operator|=(num : long)   := (value|=num.value);
		       ^

0 [0x0]: line: 551 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator|=[2245] params(1) in file: lib\support\0.2.805/primitives.sharp:552:8: note:  
		    def operator|=(num : uint)   := (value|=num.value);
		       ^

0 [0x0]: line: 552 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator|=[2246] params(1) in file: lib\support\0.2.805/primitives.sharp:553:8: note:  
		    def operator|=(num : int)    := (value|=num.value);
		       ^

0 [0x0]: line: 553 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator|=[2247] params(1) in file: lib\support\0.2.805/primitives.sharp:554:8: note:  
		    def operator|=(num : ushort) := (value|=num.value);
		       ^

0 [0x0]: line: 554 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator|=[2248] params(1) in file: lib\support\0.2.805/primitives.sharp:555:8: note:  
		    def operator|=(num : short)  := (value|=num.value);
		       ^

0 [0x0]: line: 555 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator|=[2249] params(1) in file: lib\support\0.2.805/primitives.sharp:556:8: note:  
		    def operator|=(num : uchar)  := (value|=num.value);
		       ^

0 [0x0]: line: 556 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator|=[2250] params(1) in file: lib\support\0.2.805/primitives.sharp:557:8: note:  
		    def operator|=(num : char)   := (value|=num.value);
		       ^

0 [0x0]: line: 557 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator|=[2251] params(1) in file: lib\support\0.2.805/primitives.sharp:558:8: note:  
		    def operator|=(num : byte)   := (value|=num.value);
		       ^

0 [0x0]: line: 558 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator|=[2252] params(1) in file: lib\support\0.2.805/primitives.sharp:559:8: note:  
		    def operator|=(num : bool)   := (value|=num.value);
		       ^

0 [0x0]: line: 559 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator|=[2253] params(1) in file: lib\support\0.2.805/primitives.sharp:560:8: note:  
		    def operator|=(num : var)    := (value|=num);
		       ^

0 [0x0]: line: 560 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           or ecx, ebx   
9 [0x9]:           movu32 cmt, cmt   
10 [0xa]:           rmov adx, cmt   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


constructor: std#uint.uint[2254] params(0) in file: lib\support\0.2.805/primitives.sharp:459:6: note:  
		class uint base integer<_uint32> {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @602 // <std#integer<_uint32>.integer>   
2 [0x2]:         ret   


constructor: std#int.int[2255] params(1) in file: lib\support\0.2.805/primitives.sharp:563:8: note:  
		    int(i : long) -> base(i.value) {}
		       ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @603 // <std#integer<_int32>.integer>   
9 [0x9]:         ret   


constructor: std#int.int[2256] params(1) in file: lib\support\0.2.805/primitives.sharp:564:8: note:  
		    int(i : int) -> base(i.value) {}
		       ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @603 // <std#integer<_int32>.integer>   
9 [0x9]:         ret   


constructor: std#int.int[2257] params(1) in file: lib\support\0.2.805/primitives.sharp:565:8: note:  
		    int(i : short) -> base(i.value) {}
		       ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @603 // <std#integer<_int32>.integer>   
9 [0x9]:         ret   


constructor: std#int.int[2258] params(1) in file: lib\support\0.2.805/primitives.sharp:566:8: note:  
		    int(i : char) -> base(i.value) {}
		       ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @603 // <std#integer<_int32>.integer>   
9 [0x9]:         ret   


constructor: std#int.int[2259] params(1) in file: lib\support\0.2.805/primitives.sharp:567:8: note:  
		    int(i : byte) -> base(i.value) {}
		       ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @603 // <std#integer<_int32>.integer>   
9 [0x9]:         ret   


constructor: std#int.int[2260] params(1) in file: lib\support\0.2.805/primitives.sharp:568:8: note:  
		    int(i : bool) -> base(i.value) {}
		       ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @603 // <std#integer<_int32>.integer>   
9 [0x9]:         ret   


constructor: std#int.int[2261] params(1) in file: lib\support\0.2.805/primitives.sharp:569:8: note:  
		    int(i : ulong) -> base(i.value) {}
		       ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @603 // <std#integer<_int32>.integer>   
9 [0x9]:         ret   


constructor: std#int.int[2262] params(1) in file: lib\support\0.2.805/primitives.sharp:570:8: note:  
		    int(i : uint) -> base(i.value) {}
		       ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @603 // <std#integer<_int32>.integer>   
9 [0x9]:         ret   


constructor: std#int.int[2263] params(1) in file: lib\support\0.2.805/primitives.sharp:571:8: note:  
		    int(i : ushort) -> base(i.value) {}
		       ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @603 // <std#integer<_int32>.integer>   
9 [0x9]:         ret   


constructor: std#int.int[2264] params(1) in file: lib\support\0.2.805/primitives.sharp:572:8: note:  
		    int(i : uchar) -> base(i.value) {}
		       ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @603 // <std#integer<_int32>.integer>   
9 [0x9]:         ret   


constructor: std#int.int[2265] params(1) in file: lib\support\0.2.805/primitives.sharp:573:8: note:  
		    int(i : var) -> base(i) {}
		       ^

0 [0x0]:         pushl 0   
1 [0x1]:         ipushl #1   
2 [0x2]:         call @603 // <std#integer<_int32>.integer>   
3 [0x3]:         ret   


overload function: std#int.operator![2266] params(0) in file: lib\support\0.2.805/primitives.sharp:575:8: note:  
		    def operator!() := (!value);
		       ^

0 [0x0]: line: 575 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           not ebx, ebx   
7 [0x7]:           return_val ebx   
8 [0x8]:           ret   


overload function: std#int.operator++[2267] params(0) in file: lib\support\0.2.805/primitives.sharp:576:8: note:  
		    def operator++() := (++value);
		       ^

0 [0x0]: line: 576 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           inc ebx   
7 [0x7]:           mov32 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#int.operator++[2268] params(1) in file: lib\support\0.2.805/primitives.sharp:577:8: note:  
		    def operator++(num : var) := (value++);
		       ^

0 [0x0]: line: 577 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           inc ebx   
8 [0x8]:           mov32 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#int.operator--[2269] params(0) in file: lib\support\0.2.805/primitives.sharp:578:8: note:  
		    def operator--() := (--value);
		       ^

0 [0x0]: line: 578 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           dec ebx   
7 [0x7]:           mov32 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#int.operator--[2270] params(1) in file: lib\support\0.2.805/primitives.sharp:579:8: note:  
		    def operator--(num : var) := (value--);
		       ^

0 [0x0]: line: 579 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           dec ebx   
8 [0x8]:           mov32 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#int.operator+=[2271] params(1) in file: lib\support\0.2.805/primitives.sharp:581:8: note:  
		    def operator+=(num : ulong)  := (value+=num.value);
		       ^

0 [0x0]: line: 581 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator+=[2272] params(1) in file: lib\support\0.2.805/primitives.sharp:582:8: note:  
		    def operator+=(num : long)   := (value+=num.value);
		       ^

0 [0x0]: line: 582 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator+=[2273] params(1) in file: lib\support\0.2.805/primitives.sharp:583:8: note:  
		    def operator+=(num : uint)   := (value+=num.value);
		       ^

0 [0x0]: line: 583 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator+=[2274] params(1) in file: lib\support\0.2.805/primitives.sharp:584:8: note:  
		    def operator+=(num : int)    := (value+=num.value);
		       ^

0 [0x0]: line: 584 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator+=[2275] params(1) in file: lib\support\0.2.805/primitives.sharp:585:8: note:  
		    def operator+=(num : ushort) := (value+=num.value);
		       ^

0 [0x0]: line: 585 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator+=[2276] params(1) in file: lib\support\0.2.805/primitives.sharp:586:8: note:  
		    def operator+=(num : short)  := (value+=num.value);
		       ^

0 [0x0]: line: 586 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator+=[2277] params(1) in file: lib\support\0.2.805/primitives.sharp:587:8: note:  
		    def operator+=(num : uchar)  := (value+=num.value);
		       ^

0 [0x0]: line: 587 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator+=[2278] params(1) in file: lib\support\0.2.805/primitives.sharp:588:8: note:  
		    def operator+=(num : char)   := (value+=num.value);
		       ^

0 [0x0]: line: 588 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator+=[2279] params(1) in file: lib\support\0.2.805/primitives.sharp:589:8: note:  
		    def operator+=(num : byte)   := (value+=num.value);
		       ^

0 [0x0]: line: 589 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator+=[2280] params(1) in file: lib\support\0.2.805/primitives.sharp:590:8: note:  
		    def operator+=(num : bool)   := (value+=num.value);
		       ^

0 [0x0]: line: 590 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator+=[2281] params(1) in file: lib\support\0.2.805/primitives.sharp:591:8: note:  
		    def operator+=(num : var)    := (value+=num);
		       ^

0 [0x0]: line: 591 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           add ecx, ebx -> ebx   
9 [0x9]:           mov32 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#int.operator-=[2282] params(1) in file: lib\support\0.2.805/primitives.sharp:593:8: note:  
		    def operator-=(num : ulong)  := (value-=num.value);
		       ^

0 [0x0]: line: 593 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator-=[2283] params(1) in file: lib\support\0.2.805/primitives.sharp:594:8: note:  
		    def operator-=(num : long)   := (value-=num.value);
		       ^

0 [0x0]: line: 594 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator-=[2284] params(1) in file: lib\support\0.2.805/primitives.sharp:595:8: note:  
		    def operator-=(num : uint)   := (value-=num.value);
		       ^

0 [0x0]: line: 595 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator-=[2285] params(1) in file: lib\support\0.2.805/primitives.sharp:596:8: note:  
		    def operator-=(num : int)    := (value-=num.value);
		       ^

0 [0x0]: line: 596 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator-=[2286] params(1) in file: lib\support\0.2.805/primitives.sharp:597:8: note:  
		    def operator-=(num : ushort) := (value-=num.value);
		       ^

0 [0x0]: line: 597 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator-=[2287] params(1) in file: lib\support\0.2.805/primitives.sharp:598:8: note:  
		    def operator-=(num : short)  := (value-=num.value);
		       ^

0 [0x0]: line: 598 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator-=[2288] params(1) in file: lib\support\0.2.805/primitives.sharp:599:8: note:  
		    def operator-=(num : uchar)  := (value-=num.value);
		       ^

0 [0x0]: line: 599 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator-=[2289] params(1) in file: lib\support\0.2.805/primitives.sharp:600:8: note:  
		    def operator-=(num : char)   := (value-=num.value);
		       ^

0 [0x0]: line: 600 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator-=[2290] params(1) in file: lib\support\0.2.805/primitives.sharp:601:8: note:  
		    def operator-=(num : byte)   := (value-=num.value);
		       ^

0 [0x0]: line: 601 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator-=[2291] params(1) in file: lib\support\0.2.805/primitives.sharp:602:8: note:  
		    def operator-=(num : bool)   := (value-=num.value);
		       ^

0 [0x0]: line: 602 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator-=[2292] params(1) in file: lib\support\0.2.805/primitives.sharp:603:8: note:  
		    def operator-=(num : var)    := (value-=num);
		       ^

0 [0x0]: line: 603 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           sub ecx, ebx -> ebx   
9 [0x9]:           mov32 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#int.operator*=[2293] params(1) in file: lib\support\0.2.805/primitives.sharp:605:8: note:  
		    def operator*=(num : ulong)  := (value*=num.value);
		       ^

0 [0x0]: line: 605 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator*=[2294] params(1) in file: lib\support\0.2.805/primitives.sharp:606:8: note:  
		    def operator*=(num : long)   := (value*=num.value);
		       ^

0 [0x0]: line: 606 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator*=[2295] params(1) in file: lib\support\0.2.805/primitives.sharp:607:8: note:  
		    def operator*=(num : uint)   := (value*=num.value);
		       ^

0 [0x0]: line: 607 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator*=[2296] params(1) in file: lib\support\0.2.805/primitives.sharp:608:8: note:  
		    def operator*=(num : int)    := (value*=num.value);
		       ^

0 [0x0]: line: 608 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator*=[2297] params(1) in file: lib\support\0.2.805/primitives.sharp:609:8: note:  
		    def operator*=(num : ushort) := (value*=num.value);
		       ^

0 [0x0]: line: 609 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator*=[2298] params(1) in file: lib\support\0.2.805/primitives.sharp:610:8: note:  
		    def operator*=(num : short)  := (value*=num.value);
		       ^

0 [0x0]: line: 610 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator*=[2299] params(1) in file: lib\support\0.2.805/primitives.sharp:611:8: note:  
		    def operator*=(num : uchar)  := (value*=num.value);
		       ^

0 [0x0]: line: 611 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator*=[2300] params(1) in file: lib\support\0.2.805/primitives.sharp:612:8: note:  
		    def operator*=(num : char)   := (value*=num.value);
		       ^

0 [0x0]: line: 612 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator*=[2301] params(1) in file: lib\support\0.2.805/primitives.sharp:613:8: note:  
		    def operator*=(num : byte)   := (value*=num.value);
		       ^

0 [0x0]: line: 613 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator*=[2302] params(1) in file: lib\support\0.2.805/primitives.sharp:614:8: note:  
		    def operator*=(num : bool)   := (value*=num.value);
		       ^

0 [0x0]: line: 614 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator*=[2303] params(1) in file: lib\support\0.2.805/primitives.sharp:615:8: note:  
		    def operator*=(num : var)    := (value*=num);
		       ^

0 [0x0]: line: 615 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           mul ecx, ebx -> ebx   
9 [0x9]:           mov32 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#int.operator/=[2304] params(1) in file: lib\support\0.2.805/primitives.sharp:617:8: note:  
		    def operator/=(num : ulong)  := (value/=num.value);
		       ^

0 [0x0]: line: 617 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator/=[2305] params(1) in file: lib\support\0.2.805/primitives.sharp:618:8: note:  
		    def operator/=(num : long)   := (value/=num.value);
		       ^

0 [0x0]: line: 618 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator/=[2306] params(1) in file: lib\support\0.2.805/primitives.sharp:619:8: note:  
		    def operator/=(num : uint)   := (value/=num.value);
		       ^

0 [0x0]: line: 619 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator/=[2307] params(1) in file: lib\support\0.2.805/primitives.sharp:620:8: note:  
		    def operator/=(num : int)    := (value/=num.value);
		       ^

0 [0x0]: line: 620 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator/=[2308] params(1) in file: lib\support\0.2.805/primitives.sharp:621:8: note:  
		    def operator/=(num : ushort) := (value/=num.value);
		       ^

0 [0x0]: line: 621 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator/=[2309] params(1) in file: lib\support\0.2.805/primitives.sharp:622:8: note:  
		    def operator/=(num : short)  := (value/=num.value);
		       ^

0 [0x0]: line: 622 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator/=[2310] params(1) in file: lib\support\0.2.805/primitives.sharp:623:8: note:  
		    def operator/=(num : uchar)  := (value/=num.value);
		       ^

0 [0x0]: line: 623 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator/=[2311] params(1) in file: lib\support\0.2.805/primitives.sharp:624:8: note:  
		    def operator/=(num : char)   := (value/=num.value);
		       ^

0 [0x0]: line: 624 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator/=[2312] params(1) in file: lib\support\0.2.805/primitives.sharp:625:8: note:  
		    def operator/=(num : byte)   := (value/=num.value);
		       ^

0 [0x0]: line: 625 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator/=[2313] params(1) in file: lib\support\0.2.805/primitives.sharp:626:8: note:  
		    def operator/=(num : bool)   := (value/=num.value);
		       ^

0 [0x0]: line: 626 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator/=[2314] params(1) in file: lib\support\0.2.805/primitives.sharp:627:8: note:  
		    def operator/=(num : var)    := (value/=num);
		       ^

0 [0x0]: line: 627 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           div ecx, ebx -> ebx   
9 [0x9]:           mov32 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#int.operator%=[2315] params(1) in file: lib\support\0.2.805/primitives.sharp:629:8: note:  
		    def operator%=(num : ulong)  := (value%=num.value);
		       ^

0 [0x0]: line: 629 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator%=[2316] params(1) in file: lib\support\0.2.805/primitives.sharp:630:8: note:  
		    def operator%=(num : long)   := (value%=num.value);
		       ^

0 [0x0]: line: 630 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator%=[2317] params(1) in file: lib\support\0.2.805/primitives.sharp:631:8: note:  
		    def operator%=(num : uint)   := (value%=num.value);
		       ^

0 [0x0]: line: 631 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator%=[2318] params(1) in file: lib\support\0.2.805/primitives.sharp:632:8: note:  
		    def operator%=(num : int)    := (value%=num.value);
		       ^

0 [0x0]: line: 632 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator%=[2319] params(1) in file: lib\support\0.2.805/primitives.sharp:633:8: note:  
		    def operator%=(num : ushort) := (value%=num.value);
		       ^

0 [0x0]: line: 633 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator%=[2320] params(1) in file: lib\support\0.2.805/primitives.sharp:634:8: note:  
		    def operator%=(num : short)  := (value%=num.value);
		       ^

0 [0x0]: line: 634 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator%=[2321] params(1) in file: lib\support\0.2.805/primitives.sharp:635:8: note:  
		    def operator%=(num : uchar)  := (value%=num.value);
		       ^

0 [0x0]: line: 635 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator%=[2322] params(1) in file: lib\support\0.2.805/primitives.sharp:636:8: note:  
		    def operator%=(num : char)   := (value%=num.value);
		       ^

0 [0x0]: line: 636 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator%=[2323] params(1) in file: lib\support\0.2.805/primitives.sharp:637:8: note:  
		    def operator%=(num : byte)   := (value%=num.value);
		       ^

0 [0x0]: line: 637 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator%=[2324] params(1) in file: lib\support\0.2.805/primitives.sharp:638:8: note:  
		    def operator%=(num : bool)   := (value%=num.value);
		       ^

0 [0x0]: line: 638 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator%=[2325] params(1) in file: lib\support\0.2.805/primitives.sharp:639:8: note:  
		    def operator%=(num : var)    := (value%=num);
		       ^

0 [0x0]: line: 639 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           mod ecx, ebx -> ebx   
9 [0x9]:           mov32 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#int.operator&=[2326] params(1) in file: lib\support\0.2.805/primitives.sharp:641:8: note:  
		    def operator&=(num : ulong)  := (value&=num.value);
		       ^

0 [0x0]: line: 641 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#int.operator&=[2327] params(1) in file: lib\support\0.2.805/primitives.sharp:642:8: note:  
		    def operator&=(num : long)   := (value&=num.value);
		       ^

0 [0x0]: line: 642 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#int.operator&=[2328] params(1) in file: lib\support\0.2.805/primitives.sharp:643:8: note:  
		    def operator&=(num : uint)   := (value&=num.value);
		       ^

0 [0x0]: line: 643 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#int.operator&=[2329] params(1) in file: lib\support\0.2.805/primitives.sharp:644:8: note:  
		    def operator&=(num : int)    := (value&=num.value);
		       ^

0 [0x0]: line: 644 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#int.operator&=[2330] params(1) in file: lib\support\0.2.805/primitives.sharp:645:8: note:  
		    def operator&=(num : ushort) := (value&=num.value);
		       ^

0 [0x0]: line: 645 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#int.operator&=[2331] params(1) in file: lib\support\0.2.805/primitives.sharp:646:8: note:  
		    def operator&=(num : short)  := (value&=num.value);
		       ^

0 [0x0]: line: 646 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#int.operator&=[2332] params(1) in file: lib\support\0.2.805/primitives.sharp:647:8: note:  
		    def operator&=(num : uchar)  := (value&=num.value);
		       ^

0 [0x0]: line: 647 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#int.operator&=[2333] params(1) in file: lib\support\0.2.805/primitives.sharp:648:8: note:  
		    def operator&=(num : char)   := (value&=num.value);
		       ^

0 [0x0]: line: 648 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#int.operator&=[2334] params(1) in file: lib\support\0.2.805/primitives.sharp:649:8: note:  
		    def operator&=(num : byte)   := (value&=num.value);
		       ^

0 [0x0]: line: 649 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#int.operator&=[2335] params(1) in file: lib\support\0.2.805/primitives.sharp:650:8: note:  
		    def operator&=(num : bool)   := (value&=num.value);
		       ^

0 [0x0]: line: 650 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#int.operator&=[2336] params(1) in file: lib\support\0.2.805/primitives.sharp:651:8: note:  
		    def operator&=(num : var)    := (value&=num);
		       ^

0 [0x0]: line: 651 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           and ecx, ebx   
9 [0x9]:           rmov adx, cmt   
10 [0xa]:           returnobj   
11 [0xb]:           ret   


overload function: std#int.operator|=[2337] params(1) in file: lib\support\0.2.805/primitives.sharp:653:8: note:  
		    def operator|=(num : ulong)  := (value|=num.value);
		       ^

0 [0x0]: line: 653 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator|=[2338] params(1) in file: lib\support\0.2.805/primitives.sharp:654:8: note:  
		    def operator|=(num : long)   := (value|=num.value);
		       ^

0 [0x0]: line: 654 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator|=[2339] params(1) in file: lib\support\0.2.805/primitives.sharp:655:8: note:  
		    def operator|=(num : uint)   := (value|=num.value);
		       ^

0 [0x0]: line: 655 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator|=[2340] params(1) in file: lib\support\0.2.805/primitives.sharp:656:8: note:  
		    def operator|=(num : int)    := (value|=num.value);
		       ^

0 [0x0]: line: 656 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator|=[2341] params(1) in file: lib\support\0.2.805/primitives.sharp:657:8: note:  
		    def operator|=(num : ushort) := (value|=num.value);
		       ^

0 [0x0]: line: 657 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator|=[2342] params(1) in file: lib\support\0.2.805/primitives.sharp:658:8: note:  
		    def operator|=(num : short)  := (value|=num.value);
		       ^

0 [0x0]: line: 658 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator|=[2343] params(1) in file: lib\support\0.2.805/primitives.sharp:659:8: note:  
		    def operator|=(num : uchar)  := (value|=num.value);
		       ^

0 [0x0]: line: 659 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator|=[2344] params(1) in file: lib\support\0.2.805/primitives.sharp:660:8: note:  
		    def operator|=(num : char)   := (value|=num.value);
		       ^

0 [0x0]: line: 660 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator|=[2345] params(1) in file: lib\support\0.2.805/primitives.sharp:661:8: note:  
		    def operator|=(num : byte)   := (value|=num.value);
		       ^

0 [0x0]: line: 661 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator|=[2346] params(1) in file: lib\support\0.2.805/primitives.sharp:662:8: note:  
		    def operator|=(num : bool)   := (value|=num.value);
		       ^

0 [0x0]: line: 662 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator|=[2347] params(1) in file: lib\support\0.2.805/primitives.sharp:663:8: note:  
		    def operator|=(num : var)    := (value|=num);
		       ^

0 [0x0]: line: 663 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           or ecx, ebx   
9 [0x9]:           mov32 cmt, cmt   
10 [0xa]:           rmov adx, cmt   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


constructor: std#int.int[2348] params(0) in file: lib\support\0.2.805/primitives.sharp:562:6: note:  
		class int base integer<_int32> {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @795 // <std#integer<_int32>.integer>   
2 [0x2]:         ret   


constructor: std#ushort.ushort[2349] params(1) in file: lib\support\0.2.805/primitives.sharp:666:11: note:  
		    ushort(i : long) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @796 // <std#integer<_uint16>.integer>   
9 [0x9]:         ret   


constructor: std#ushort.ushort[2350] params(1) in file: lib\support\0.2.805/primitives.sharp:667:11: note:  
		    ushort(i : int) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @796 // <std#integer<_uint16>.integer>   
9 [0x9]:         ret   


constructor: std#ushort.ushort[2351] params(1) in file: lib\support\0.2.805/primitives.sharp:668:11: note:  
		    ushort(i : short) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @796 // <std#integer<_uint16>.integer>   
9 [0x9]:         ret   


constructor: std#ushort.ushort[2352] params(1) in file: lib\support\0.2.805/primitives.sharp:669:11: note:  
		    ushort(i : char) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @796 // <std#integer<_uint16>.integer>   
9 [0x9]:         ret   


constructor: std#ushort.ushort[2353] params(1) in file: lib\support\0.2.805/primitives.sharp:670:11: note:  
		    ushort(i : byte) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @796 // <std#integer<_uint16>.integer>   
9 [0x9]:         ret   


constructor: std#ushort.ushort[2354] params(1) in file: lib\support\0.2.805/primitives.sharp:671:11: note:  
		    ushort(i : bool) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @796 // <std#integer<_uint16>.integer>   
9 [0x9]:         ret   


constructor: std#ushort.ushort[2355] params(1) in file: lib\support\0.2.805/primitives.sharp:672:11: note:  
		    ushort(i : ulong) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @796 // <std#integer<_uint16>.integer>   
9 [0x9]:         ret   


constructor: std#ushort.ushort[2356] params(1) in file: lib\support\0.2.805/primitives.sharp:673:11: note:  
		    ushort(i : uint) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @796 // <std#integer<_uint16>.integer>   
9 [0x9]:         ret   


constructor: std#ushort.ushort[2357] params(1) in file: lib\support\0.2.805/primitives.sharp:674:11: note:  
		    ushort(i : ushort) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @796 // <std#integer<_uint16>.integer>   
9 [0x9]:         ret   


constructor: std#ushort.ushort[2358] params(1) in file: lib\support\0.2.805/primitives.sharp:675:11: note:  
		    ushort(i : uchar) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @796 // <std#integer<_uint16>.integer>   
9 [0x9]:         ret   


constructor: std#ushort.ushort[2359] params(1) in file: lib\support\0.2.805/primitives.sharp:676:11: note:  
		    ushort(i : var) -> base(i) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         ipushl #1   
2 [0x2]:         call @796 // <std#integer<_uint16>.integer>   
3 [0x3]:         ret   


overload function: std#ushort.operator![2360] params(0) in file: lib\support\0.2.805/primitives.sharp:678:8: note:  
		    def operator!() := (!value);
		       ^

0 [0x0]: line: 678 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           not ebx, ebx   
7 [0x7]:           return_val ebx   
8 [0x8]:           ret   


overload function: std#ushort.operator++[2361] params(0) in file: lib\support\0.2.805/primitives.sharp:679:8: note:  
		    def operator++() := (++value);
		       ^

0 [0x0]: line: 679 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           inc ebx   
7 [0x7]:           movu16 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#ushort.operator++[2362] params(1) in file: lib\support\0.2.805/primitives.sharp:680:8: note:  
		    def operator++(num : var) := (value++);
		       ^

0 [0x0]: line: 680 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           inc ebx   
8 [0x8]:           movu16 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#ushort.operator--[2363] params(0) in file: lib\support\0.2.805/primitives.sharp:681:8: note:  
		    def operator--() := (--value);
		       ^

0 [0x0]: line: 681 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           dec ebx   
7 [0x7]:           movu16 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#ushort.operator--[2364] params(1) in file: lib\support\0.2.805/primitives.sharp:682:8: note:  
		    def operator--(num : var) := (value--);
		       ^

0 [0x0]: line: 682 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           dec ebx   
8 [0x8]:           movu16 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#ushort.operator+=[2365] params(1) in file: lib\support\0.2.805/primitives.sharp:684:8: note:  
		    def operator+=(num : ulong)  := (value+=num.value);
		       ^

0 [0x0]: line: 684 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator+=[2366] params(1) in file: lib\support\0.2.805/primitives.sharp:685:8: note:  
		    def operator+=(num : long)   := (value+=num.value);
		       ^

0 [0x0]: line: 685 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator+=[2367] params(1) in file: lib\support\0.2.805/primitives.sharp:686:8: note:  
		    def operator+=(num : uint)   := (value+=num.value);
		       ^

0 [0x0]: line: 686 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator+=[2368] params(1) in file: lib\support\0.2.805/primitives.sharp:687:8: note:  
		    def operator+=(num : int)    := (value+=num.value);
		       ^

0 [0x0]: line: 687 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator+=[2369] params(1) in file: lib\support\0.2.805/primitives.sharp:688:8: note:  
		    def operator+=(num : ushort) := (value+=num.value);
		       ^

0 [0x0]: line: 688 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator+=[2370] params(1) in file: lib\support\0.2.805/primitives.sharp:689:8: note:  
		    def operator+=(num : short)  := (value+=num.value);
		       ^

0 [0x0]: line: 689 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator+=[2371] params(1) in file: lib\support\0.2.805/primitives.sharp:690:8: note:  
		    def operator+=(num : uchar)  := (value+=num.value);
		       ^

0 [0x0]: line: 690 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator+=[2372] params(1) in file: lib\support\0.2.805/primitives.sharp:691:8: note:  
		    def operator+=(num : char)   := (value+=num.value);
		       ^

0 [0x0]: line: 691 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator+=[2373] params(1) in file: lib\support\0.2.805/primitives.sharp:692:8: note:  
		    def operator+=(num : byte)   := (value+=num.value);
		       ^

0 [0x0]: line: 692 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator+=[2374] params(1) in file: lib\support\0.2.805/primitives.sharp:693:8: note:  
		    def operator+=(num : bool)   := (value+=num.value);
		       ^

0 [0x0]: line: 693 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator+=[2375] params(1) in file: lib\support\0.2.805/primitives.sharp:694:8: note:  
		    def operator+=(num : var)    := (value+=num);
		       ^

0 [0x0]: line: 694 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           add ecx, ebx -> ebx   
9 [0x9]:           movu16 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#ushort.operator-=[2376] params(1) in file: lib\support\0.2.805/primitives.sharp:696:8: note:  
		    def operator-=(num : ulong)  := (value-=num.value);
		       ^

0 [0x0]: line: 696 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator-=[2377] params(1) in file: lib\support\0.2.805/primitives.sharp:697:8: note:  
		    def operator-=(num : long)   := (value-=num.value);
		       ^

0 [0x0]: line: 697 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator-=[2378] params(1) in file: lib\support\0.2.805/primitives.sharp:698:8: note:  
		    def operator-=(num : uint)   := (value-=num.value);
		       ^

0 [0x0]: line: 698 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator-=[2379] params(1) in file: lib\support\0.2.805/primitives.sharp:699:8: note:  
		    def operator-=(num : int)    := (value-=num.value);
		       ^

0 [0x0]: line: 699 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator-=[2380] params(1) in file: lib\support\0.2.805/primitives.sharp:700:8: note:  
		    def operator-=(num : ushort) := (value-=num.value);
		       ^

0 [0x0]: line: 700 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator-=[2381] params(1) in file: lib\support\0.2.805/primitives.sharp:701:8: note:  
		    def operator-=(num : short)  := (value-=num.value);
		       ^

0 [0x0]: line: 701 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator-=[2382] params(1) in file: lib\support\0.2.805/primitives.sharp:702:8: note:  
		    def operator-=(num : uchar)  := (value-=num.value);
		       ^

0 [0x0]: line: 702 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator-=[2383] params(1) in file: lib\support\0.2.805/primitives.sharp:703:8: note:  
		    def operator-=(num : char)   := (value-=num.value);
		       ^

0 [0x0]: line: 703 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator-=[2384] params(1) in file: lib\support\0.2.805/primitives.sharp:704:8: note:  
		    def operator-=(num : byte)   := (value-=num.value);
		       ^

0 [0x0]: line: 704 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator-=[2385] params(1) in file: lib\support\0.2.805/primitives.sharp:705:8: note:  
		    def operator-=(num : bool)   := (value-=num.value);
		       ^

0 [0x0]: line: 705 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator-=[2386] params(1) in file: lib\support\0.2.805/primitives.sharp:706:8: note:  
		    def operator-=(num : var)    := (value-=num);
		       ^

0 [0x0]: line: 706 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           sub ecx, ebx -> ebx   
9 [0x9]:           movu16 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#ushort.operator*=[2387] params(1) in file: lib\support\0.2.805/primitives.sharp:708:8: note:  
		    def operator*=(num : ulong)  := (value*=num.value);
		       ^

0 [0x0]: line: 708 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator*=[2388] params(1) in file: lib\support\0.2.805/primitives.sharp:709:8: note:  
		    def operator*=(num : long)   := (value*=num.value);
		       ^

0 [0x0]: line: 709 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator*=[2389] params(1) in file: lib\support\0.2.805/primitives.sharp:710:8: note:  
		    def operator*=(num : uint)   := (value*=num.value);
		       ^

0 [0x0]: line: 710 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator*=[2390] params(1) in file: lib\support\0.2.805/primitives.sharp:711:8: note:  
		    def operator*=(num : int)    := (value*=num.value);
		       ^

0 [0x0]: line: 711 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator*=[2391] params(1) in file: lib\support\0.2.805/primitives.sharp:712:8: note:  
		    def operator*=(num : ushort) := (value*=num.value);
		       ^

0 [0x0]: line: 712 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator*=[2392] params(1) in file: lib\support\0.2.805/primitives.sharp:713:8: note:  
		    def operator*=(num : short)  := (value*=num.value);
		       ^

0 [0x0]: line: 713 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator*=[2393] params(1) in file: lib\support\0.2.805/primitives.sharp:714:8: note:  
		    def operator*=(num : uchar)  := (value*=num.value);
		       ^

0 [0x0]: line: 714 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator*=[2394] params(1) in file: lib\support\0.2.805/primitives.sharp:715:8: note:  
		    def operator*=(num : char)   := (value*=num.value);
		       ^

0 [0x0]: line: 715 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator*=[2395] params(1) in file: lib\support\0.2.805/primitives.sharp:716:8: note:  
		    def operator*=(num : byte)   := (value*=num.value);
		       ^

0 [0x0]: line: 716 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator*=[2396] params(1) in file: lib\support\0.2.805/primitives.sharp:717:8: note:  
		    def operator*=(num : bool)   := (value*=num.value);
		       ^

0 [0x0]: line: 717 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator*=[2397] params(1) in file: lib\support\0.2.805/primitives.sharp:718:8: note:  
		    def operator*=(num : var)    := (value*=num);
		       ^

0 [0x0]: line: 718 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           mul ecx, ebx -> ebx   
9 [0x9]:           movu16 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#ushort.operator/=[2398] params(1) in file: lib\support\0.2.805/primitives.sharp:720:8: note:  
		    def operator/=(num : ulong)  := (value/=num.value);
		       ^

0 [0x0]: line: 720 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator/=[2399] params(1) in file: lib\support\0.2.805/primitives.sharp:721:8: note:  
		    def operator/=(num : long)   := (value/=num.value);
		       ^

0 [0x0]: line: 721 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator/=[2400] params(1) in file: lib\support\0.2.805/primitives.sharp:722:8: note:  
		    def operator/=(num : uint)   := (value/=num.value);
		       ^

0 [0x0]: line: 722 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator/=[2401] params(1) in file: lib\support\0.2.805/primitives.sharp:723:8: note:  
		    def operator/=(num : int)    := (value/=num.value);
		       ^

0 [0x0]: line: 723 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator/=[2402] params(1) in file: lib\support\0.2.805/primitives.sharp:724:8: note:  
		    def operator/=(num : ushort) := (value/=num.value);
		       ^

0 [0x0]: line: 724 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator/=[2403] params(1) in file: lib\support\0.2.805/primitives.sharp:725:8: note:  
		    def operator/=(num : short)  := (value/=num.value);
		       ^

0 [0x0]: line: 725 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator/=[2404] params(1) in file: lib\support\0.2.805/primitives.sharp:726:8: note:  
		    def operator/=(num : uchar)  := (value/=num.value);
		       ^

0 [0x0]: line: 726 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator/=[2405] params(1) in file: lib\support\0.2.805/primitives.sharp:727:8: note:  
		    def operator/=(num : char)   := (value/=num.value);
		       ^

0 [0x0]: line: 727 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator/=[2406] params(1) in file: lib\support\0.2.805/primitives.sharp:728:8: note:  
		    def operator/=(num : byte)   := (value/=num.value);
		       ^

0 [0x0]: line: 728 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator/=[2407] params(1) in file: lib\support\0.2.805/primitives.sharp:729:8: note:  
		    def operator/=(num : bool)   := (value/=num.value);
		       ^

0 [0x0]: line: 729 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator/=[2408] params(1) in file: lib\support\0.2.805/primitives.sharp:730:8: note:  
		    def operator/=(num : var)    := (value/=num);
		       ^

0 [0x0]: line: 730 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           div ecx, ebx -> ebx   
9 [0x9]:           movu16 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#ushort.operator%=[2409] params(1) in file: lib\support\0.2.805/primitives.sharp:732:8: note:  
		    def operator%=(num : ulong)  := (value%=num.value);
		       ^

0 [0x0]: line: 732 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator%=[2410] params(1) in file: lib\support\0.2.805/primitives.sharp:733:8: note:  
		    def operator%=(num : long)   := (value%=num.value);
		       ^

0 [0x0]: line: 733 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator%=[2411] params(1) in file: lib\support\0.2.805/primitives.sharp:734:8: note:  
		    def operator%=(num : uint)   := (value%=num.value);
		       ^

0 [0x0]: line: 734 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator%=[2412] params(1) in file: lib\support\0.2.805/primitives.sharp:735:8: note:  
		    def operator%=(num : int)    := (value%=num.value);
		       ^

0 [0x0]: line: 735 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator%=[2413] params(1) in file: lib\support\0.2.805/primitives.sharp:736:8: note:  
		    def operator%=(num : ushort) := (value%=num.value);
		       ^

0 [0x0]: line: 736 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator%=[2414] params(1) in file: lib\support\0.2.805/primitives.sharp:737:8: note:  
		    def operator%=(num : short)  := (value%=num.value);
		       ^

0 [0x0]: line: 737 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator%=[2415] params(1) in file: lib\support\0.2.805/primitives.sharp:738:8: note:  
		    def operator%=(num : uchar)  := (value%=num.value);
		       ^

0 [0x0]: line: 738 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator%=[2416] params(1) in file: lib\support\0.2.805/primitives.sharp:739:8: note:  
		    def operator%=(num : char)   := (value%=num.value);
		       ^

0 [0x0]: line: 739 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator%=[2417] params(1) in file: lib\support\0.2.805/primitives.sharp:740:8: note:  
		    def operator%=(num : byte)   := (value%=num.value);
		       ^

0 [0x0]: line: 740 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator%=[2418] params(1) in file: lib\support\0.2.805/primitives.sharp:741:8: note:  
		    def operator%=(num : bool)   := (value%=num.value);
		       ^

0 [0x0]: line: 741 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator%=[2419] params(1) in file: lib\support\0.2.805/primitives.sharp:742:8: note:  
		    def operator%=(num : var)    := (value%=num);
		       ^

0 [0x0]: line: 742 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           mod ecx, ebx -> ebx   
9 [0x9]:           movu16 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#ushort.operator&=[2420] params(1) in file: lib\support\0.2.805/primitives.sharp:744:8: note:  
		    def operator&=(num : ulong)  := (value&=num.value);
		       ^

0 [0x0]: line: 744 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ushort.operator&=[2421] params(1) in file: lib\support\0.2.805/primitives.sharp:745:8: note:  
		    def operator&=(num : long)   := (value&=num.value);
		       ^

0 [0x0]: line: 745 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ushort.operator&=[2422] params(1) in file: lib\support\0.2.805/primitives.sharp:746:8: note:  
		    def operator&=(num : uint)   := (value&=num.value);
		       ^

0 [0x0]: line: 746 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ushort.operator&=[2423] params(1) in file: lib\support\0.2.805/primitives.sharp:747:8: note:  
		    def operator&=(num : int)    := (value&=num.value);
		       ^

0 [0x0]: line: 747 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ushort.operator&=[2424] params(1) in file: lib\support\0.2.805/primitives.sharp:748:8: note:  
		    def operator&=(num : ushort) := (value&=num.value);
		       ^

0 [0x0]: line: 748 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ushort.operator&=[2425] params(1) in file: lib\support\0.2.805/primitives.sharp:749:8: note:  
		    def operator&=(num : short)  := (value&=num.value);
		       ^

0 [0x0]: line: 749 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ushort.operator&=[2426] params(1) in file: lib\support\0.2.805/primitives.sharp:750:8: note:  
		    def operator&=(num : uchar)  := (value&=num.value);
		       ^

0 [0x0]: line: 750 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ushort.operator&=[2427] params(1) in file: lib\support\0.2.805/primitives.sharp:751:8: note:  
		    def operator&=(num : char)   := (value&=num.value);
		       ^

0 [0x0]: line: 751 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ushort.operator&=[2428] params(1) in file: lib\support\0.2.805/primitives.sharp:752:8: note:  
		    def operator&=(num : byte)   := (value&=num.value);
		       ^

0 [0x0]: line: 752 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ushort.operator&=[2429] params(1) in file: lib\support\0.2.805/primitives.sharp:753:8: note:  
		    def operator&=(num : bool)   := (value&=num.value);
		       ^

0 [0x0]: line: 753 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ushort.operator&=[2430] params(1) in file: lib\support\0.2.805/primitives.sharp:754:8: note:  
		    def operator&=(num : var)    := (value&=num);
		       ^

0 [0x0]: line: 754 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           and ecx, ebx   
9 [0x9]:           rmov adx, cmt   
10 [0xa]:           returnobj   
11 [0xb]:           ret   


overload function: std#ushort.operator|=[2431] params(1) in file: lib\support\0.2.805/primitives.sharp:756:8: note:  
		    def operator|=(num : ulong)  := (value|=num.value);
		       ^

0 [0x0]: line: 756 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator|=[2432] params(1) in file: lib\support\0.2.805/primitives.sharp:757:8: note:  
		    def operator|=(num : long)   := (value|=num.value);
		       ^

0 [0x0]: line: 757 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator|=[2433] params(1) in file: lib\support\0.2.805/primitives.sharp:758:8: note:  
		    def operator|=(num : uint)   := (value|=num.value);
		       ^

0 [0x0]: line: 758 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator|=[2434] params(1) in file: lib\support\0.2.805/primitives.sharp:759:8: note:  
		    def operator|=(num : int)    := (value|=num.value);
		       ^

0 [0x0]: line: 759 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator|=[2435] params(1) in file: lib\support\0.2.805/primitives.sharp:760:8: note:  
		    def operator|=(num : ushort) := (value|=num.value);
		       ^

0 [0x0]: line: 760 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator|=[2436] params(1) in file: lib\support\0.2.805/primitives.sharp:761:8: note:  
		    def operator|=(num : short)  := (value|=num.value);
		       ^

0 [0x0]: line: 761 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator|=[2437] params(1) in file: lib\support\0.2.805/primitives.sharp:762:8: note:  
		    def operator|=(num : uchar)  := (value|=num.value);
		       ^

0 [0x0]: line: 762 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator|=[2438] params(1) in file: lib\support\0.2.805/primitives.sharp:763:8: note:  
		    def operator|=(num : char)   := (value|=num.value);
		       ^

0 [0x0]: line: 763 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator|=[2439] params(1) in file: lib\support\0.2.805/primitives.sharp:764:8: note:  
		    def operator|=(num : byte)   := (value|=num.value);
		       ^

0 [0x0]: line: 764 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator|=[2440] params(1) in file: lib\support\0.2.805/primitives.sharp:765:8: note:  
		    def operator|=(num : bool)   := (value|=num.value);
		       ^

0 [0x0]: line: 765 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator|=[2441] params(1) in file: lib\support\0.2.805/primitives.sharp:766:8: note:  
		    def operator|=(num : var)    := (value|=num);
		       ^

0 [0x0]: line: 766 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           or ecx, ebx   
9 [0x9]:           movu16 cmt, cmt   
10 [0xa]:           rmov adx, cmt   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


constructor: std#ushort.ushort[2442] params(0) in file: lib\support\0.2.805/primitives.sharp:665:6: note:  
		class ushort base integer<_uint16> {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @988 // <std#integer<_uint16>.integer>   
2 [0x2]:         ret   


constructor: std#short.short[2443] params(1) in file: lib\support\0.2.805/primitives.sharp:769:10: note:  
		    short(i : long) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @989 // <std#integer<_int16>.integer>   
9 [0x9]:         ret   


constructor: std#short.short[2444] params(1) in file: lib\support\0.2.805/primitives.sharp:770:10: note:  
		    short(i : int) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @989 // <std#integer<_int16>.integer>   
9 [0x9]:         ret   


constructor: std#short.short[2445] params(1) in file: lib\support\0.2.805/primitives.sharp:771:10: note:  
		    short(i : short) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @989 // <std#integer<_int16>.integer>   
9 [0x9]:         ret   


constructor: std#short.short[2446] params(1) in file: lib\support\0.2.805/primitives.sharp:772:10: note:  
		    short(i : char) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @989 // <std#integer<_int16>.integer>   
9 [0x9]:         ret   


constructor: std#short.short[2447] params(1) in file: lib\support\0.2.805/primitives.sharp:773:10: note:  
		    short(i : byte) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @989 // <std#integer<_int16>.integer>   
9 [0x9]:         ret   


constructor: std#short.short[2448] params(1) in file: lib\support\0.2.805/primitives.sharp:774:10: note:  
		    short(i : bool) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @989 // <std#integer<_int16>.integer>   
9 [0x9]:         ret   


constructor: std#short.short[2449] params(1) in file: lib\support\0.2.805/primitives.sharp:775:10: note:  
		    short(i : ulong) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @989 // <std#integer<_int16>.integer>   
9 [0x9]:         ret   


constructor: std#short.short[2450] params(1) in file: lib\support\0.2.805/primitives.sharp:776:10: note:  
		    short(i : uint) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @989 // <std#integer<_int16>.integer>   
9 [0x9]:         ret   


constructor: std#short.short[2451] params(1) in file: lib\support\0.2.805/primitives.sharp:777:10: note:  
		    short(i : ushort) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @989 // <std#integer<_int16>.integer>   
9 [0x9]:         ret   


constructor: std#short.short[2452] params(1) in file: lib\support\0.2.805/primitives.sharp:778:10: note:  
		    short(i : uchar) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @989 // <std#integer<_int16>.integer>   
9 [0x9]:         ret   


constructor: std#short.short[2453] params(1) in file: lib\support\0.2.805/primitives.sharp:779:10: note:  
		    short(i : var) -> base(i) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ipushl #1   
2 [0x2]:         call @989 // <std#integer<_int16>.integer>   
3 [0x3]:         ret   


overload function: std#short.operator![2454] params(0) in file: lib\support\0.2.805/primitives.sharp:781:8: note:  
		    def operator!() := (!value);
		       ^

0 [0x0]: line: 781 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           not ebx, ebx   
7 [0x7]:           return_val ebx   
8 [0x8]:           ret   


overload function: std#short.operator++[2455] params(0) in file: lib\support\0.2.805/primitives.sharp:782:8: note:  
		    def operator++() := (++value);
		       ^

0 [0x0]: line: 782 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           inc ebx   
7 [0x7]:           mov16 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#short.operator++[2456] params(1) in file: lib\support\0.2.805/primitives.sharp:783:8: note:  
		    def operator++(num : var) := (value++);
		       ^

0 [0x0]: line: 783 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           inc ebx   
8 [0x8]:           mov16 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#short.operator--[2457] params(0) in file: lib\support\0.2.805/primitives.sharp:784:8: note:  
		    def operator--() := (--value);
		       ^

0 [0x0]: line: 784 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           dec ebx   
7 [0x7]:           mov16 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#short.operator--[2458] params(1) in file: lib\support\0.2.805/primitives.sharp:785:8: note:  
		    def operator--(num : var) := (value--);
		       ^

0 [0x0]: line: 785 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           dec ebx   
8 [0x8]:           mov16 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#short.operator+=[2459] params(1) in file: lib\support\0.2.805/primitives.sharp:787:8: note:  
		    def operator+=(num : ulong)  := (value+=num.value);
		       ^

0 [0x0]: line: 787 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator+=[2460] params(1) in file: lib\support\0.2.805/primitives.sharp:788:8: note:  
		    def operator+=(num : long)   := (value+=num.value);
		       ^

0 [0x0]: line: 788 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator+=[2461] params(1) in file: lib\support\0.2.805/primitives.sharp:789:8: note:  
		    def operator+=(num : uint)   := (value+=num.value);
		       ^

0 [0x0]: line: 789 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator+=[2462] params(1) in file: lib\support\0.2.805/primitives.sharp:790:8: note:  
		    def operator+=(num : int)    := (value+=num.value);
		       ^

0 [0x0]: line: 790 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator+=[2463] params(1) in file: lib\support\0.2.805/primitives.sharp:791:8: note:  
		    def operator+=(num : ushort) := (value+=num.value);
		       ^

0 [0x0]: line: 791 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator+=[2464] params(1) in file: lib\support\0.2.805/primitives.sharp:792:8: note:  
		    def operator+=(num : short)  := (value+=num.value);
		       ^

0 [0x0]: line: 792 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator+=[2465] params(1) in file: lib\support\0.2.805/primitives.sharp:793:8: note:  
		    def operator+=(num : uchar)  := (value+=num.value);
		       ^

0 [0x0]: line: 793 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator+=[2466] params(1) in file: lib\support\0.2.805/primitives.sharp:794:8: note:  
		    def operator+=(num : char)   := (value+=num.value);
		       ^

0 [0x0]: line: 794 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator+=[2467] params(1) in file: lib\support\0.2.805/primitives.sharp:795:8: note:  
		    def operator+=(num : byte)   := (value+=num.value);
		       ^

0 [0x0]: line: 795 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator+=[2468] params(1) in file: lib\support\0.2.805/primitives.sharp:796:8: note:  
		    def operator+=(num : bool)   := (value+=num.value);
		       ^

0 [0x0]: line: 796 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator+=[2469] params(1) in file: lib\support\0.2.805/primitives.sharp:797:8: note:  
		    def operator+=(num : var)    := (value+=num);
		       ^

0 [0x0]: line: 797 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           add ecx, ebx -> ebx   
9 [0x9]:           mov16 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#short.operator-=[2470] params(1) in file: lib\support\0.2.805/primitives.sharp:799:8: note:  
		    def operator-=(num : ulong)  := (value-=num.value);
		       ^

0 [0x0]: line: 799 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator-=[2471] params(1) in file: lib\support\0.2.805/primitives.sharp:800:8: note:  
		    def operator-=(num : long)   := (value-=num.value);
		       ^

0 [0x0]: line: 800 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator-=[2472] params(1) in file: lib\support\0.2.805/primitives.sharp:801:8: note:  
		    def operator-=(num : uint)   := (value-=num.value);
		       ^

0 [0x0]: line: 801 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator-=[2473] params(1) in file: lib\support\0.2.805/primitives.sharp:802:8: note:  
		    def operator-=(num : int)    := (value-=num.value);
		       ^

0 [0x0]: line: 802 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator-=[2474] params(1) in file: lib\support\0.2.805/primitives.sharp:803:8: note:  
		    def operator-=(num : ushort) := (value-=num.value);
		       ^

0 [0x0]: line: 803 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator-=[2475] params(1) in file: lib\support\0.2.805/primitives.sharp:804:8: note:  
		    def operator-=(num : short)  := (value-=num.value);
		       ^

0 [0x0]: line: 804 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator-=[2476] params(1) in file: lib\support\0.2.805/primitives.sharp:805:8: note:  
		    def operator-=(num : uchar)  := (value-=num.value);
		       ^

0 [0x0]: line: 805 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator-=[2477] params(1) in file: lib\support\0.2.805/primitives.sharp:806:8: note:  
		    def operator-=(num : char)   := (value-=num.value);
		       ^

0 [0x0]: line: 806 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator-=[2478] params(1) in file: lib\support\0.2.805/primitives.sharp:807:8: note:  
		    def operator-=(num : byte)   := (value-=num.value);
		       ^

0 [0x0]: line: 807 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator-=[2479] params(1) in file: lib\support\0.2.805/primitives.sharp:808:8: note:  
		    def operator-=(num : bool)   := (value-=num.value);
		       ^

0 [0x0]: line: 808 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator-=[2480] params(1) in file: lib\support\0.2.805/primitives.sharp:809:8: note:  
		    def operator-=(num : var)    := (value-=num);
		       ^

0 [0x0]: line: 809 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           sub ecx, ebx -> ebx   
9 [0x9]:           mov16 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#short.operator*=[2481] params(1) in file: lib\support\0.2.805/primitives.sharp:811:8: note:  
		    def operator*=(num : ulong)  := (value*=num.value);
		       ^

0 [0x0]: line: 811 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator*=[2482] params(1) in file: lib\support\0.2.805/primitives.sharp:812:8: note:  
		    def operator*=(num : long)   := (value*=num.value);
		       ^

0 [0x0]: line: 812 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator*=[2483] params(1) in file: lib\support\0.2.805/primitives.sharp:813:8: note:  
		    def operator*=(num : uint)   := (value*=num.value);
		       ^

0 [0x0]: line: 813 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator*=[2484] params(1) in file: lib\support\0.2.805/primitives.sharp:814:8: note:  
		    def operator*=(num : int)    := (value*=num.value);
		       ^

0 [0x0]: line: 814 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator*=[2485] params(1) in file: lib\support\0.2.805/primitives.sharp:815:8: note:  
		    def operator*=(num : ushort) := (value*=num.value);
		       ^

0 [0x0]: line: 815 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator*=[2486] params(1) in file: lib\support\0.2.805/primitives.sharp:816:8: note:  
		    def operator*=(num : short)  := (value*=num.value);
		       ^

0 [0x0]: line: 816 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator*=[2487] params(1) in file: lib\support\0.2.805/primitives.sharp:817:8: note:  
		    def operator*=(num : uchar)  := (value*=num.value);
		       ^

0 [0x0]: line: 817 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator*=[2488] params(1) in file: lib\support\0.2.805/primitives.sharp:818:8: note:  
		    def operator*=(num : char)   := (value*=num.value);
		       ^

0 [0x0]: line: 818 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator*=[2489] params(1) in file: lib\support\0.2.805/primitives.sharp:819:8: note:  
		    def operator*=(num : byte)   := (value*=num.value);
		       ^

0 [0x0]: line: 819 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator*=[2490] params(1) in file: lib\support\0.2.805/primitives.sharp:820:8: note:  
		    def operator*=(num : bool)   := (value*=num.value);
		       ^

0 [0x0]: line: 820 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator*=[2491] params(1) in file: lib\support\0.2.805/primitives.sharp:821:8: note:  
		    def operator*=(num : var)    := (value*=num);
		       ^

0 [0x0]: line: 821 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           mul ecx, ebx -> ebx   
9 [0x9]:           mov16 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#short.operator/=[2492] params(1) in file: lib\support\0.2.805/primitives.sharp:823:8: note:  
		    def operator/=(num : ulong)  := (value/=num.value);
		       ^

0 [0x0]: line: 823 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator/=[2493] params(1) in file: lib\support\0.2.805/primitives.sharp:824:8: note:  
		    def operator/=(num : long)   := (value/=num.value);
		       ^

0 [0x0]: line: 824 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator/=[2494] params(1) in file: lib\support\0.2.805/primitives.sharp:825:8: note:  
		    def operator/=(num : uint)   := (value/=num.value);
		       ^

0 [0x0]: line: 825 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator/=[2495] params(1) in file: lib\support\0.2.805/primitives.sharp:826:8: note:  
		    def operator/=(num : int)    := (value/=num.value);
		       ^

0 [0x0]: line: 826 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator/=[2496] params(1) in file: lib\support\0.2.805/primitives.sharp:827:8: note:  
		    def operator/=(num : ushort) := (value/=num.value);
		       ^

0 [0x0]: line: 827 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator/=[2497] params(1) in file: lib\support\0.2.805/primitives.sharp:828:8: note:  
		    def operator/=(num : short)  := (value/=num.value);
		       ^

0 [0x0]: line: 828 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator/=[2498] params(1) in file: lib\support\0.2.805/primitives.sharp:829:8: note:  
		    def operator/=(num : uchar)  := (value/=num.value);
		       ^

0 [0x0]: line: 829 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator/=[2499] params(1) in file: lib\support\0.2.805/primitives.sharp:830:8: note:  
		    def operator/=(num : char)   := (value/=num.value);
		       ^

0 [0x0]: line: 830 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator/=[2500] params(1) in file: lib\support\0.2.805/primitives.sharp:831:8: note:  
		    def operator/=(num : byte)   := (value/=num.value);
		       ^

0 [0x0]: line: 831 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator/=[2501] params(1) in file: lib\support\0.2.805/primitives.sharp:832:8: note:  
		    def operator/=(num : bool)   := (value/=num.value);
		       ^

0 [0x0]: line: 832 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator/=[2502] params(1) in file: lib\support\0.2.805/primitives.sharp:833:8: note:  
		    def operator/=(num : var)    := (value/=num);
		       ^

0 [0x0]: line: 833 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           div ecx, ebx -> ebx   
9 [0x9]:           mov16 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#short.operator%=[2503] params(1) in file: lib\support\0.2.805/primitives.sharp:835:8: note:  
		    def operator%=(num : ulong)  := (value%=num.value);
		       ^

0 [0x0]: line: 835 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator%=[2504] params(1) in file: lib\support\0.2.805/primitives.sharp:836:8: note:  
		    def operator%=(num : long)   := (value%=num.value);
		       ^

0 [0x0]: line: 836 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator%=[2505] params(1) in file: lib\support\0.2.805/primitives.sharp:837:8: note:  
		    def operator%=(num : uint)   := (value%=num.value);
		       ^

0 [0x0]: line: 837 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator%=[2506] params(1) in file: lib\support\0.2.805/primitives.sharp:838:8: note:  
		    def operator%=(num : int)    := (value%=num.value);
		       ^

0 [0x0]: line: 838 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator%=[2507] params(1) in file: lib\support\0.2.805/primitives.sharp:839:8: note:  
		    def operator%=(num : ushort) := (value%=num.value);
		       ^

0 [0x0]: line: 839 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator%=[2508] params(1) in file: lib\support\0.2.805/primitives.sharp:840:8: note:  
		    def operator%=(num : short)  := (value%=num.value);
		       ^

0 [0x0]: line: 840 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator%=[2509] params(1) in file: lib\support\0.2.805/primitives.sharp:841:8: note:  
		    def operator%=(num : uchar)  := (value%=num.value);
		       ^

0 [0x0]: line: 841 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator%=[2510] params(1) in file: lib\support\0.2.805/primitives.sharp:842:8: note:  
		    def operator%=(num : char)   := (value%=num.value);
		       ^

0 [0x0]: line: 842 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator%=[2511] params(1) in file: lib\support\0.2.805/primitives.sharp:843:8: note:  
		    def operator%=(num : byte)   := (value%=num.value);
		       ^

0 [0x0]: line: 843 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator%=[2512] params(1) in file: lib\support\0.2.805/primitives.sharp:844:8: note:  
		    def operator%=(num : bool)   := (value%=num.value);
		       ^

0 [0x0]: line: 844 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator%=[2513] params(1) in file: lib\support\0.2.805/primitives.sharp:845:8: note:  
		    def operator%=(num : var)    := (value%=num);
		       ^

0 [0x0]: line: 845 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           mod ecx, ebx -> ebx   
9 [0x9]:           mov16 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#short.operator&=[2514] params(1) in file: lib\support\0.2.805/primitives.sharp:847:8: note:  
		    def operator&=(num : ulong)  := (value&=num.value);
		       ^

0 [0x0]: line: 847 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#short.operator&=[2515] params(1) in file: lib\support\0.2.805/primitives.sharp:848:8: note:  
		    def operator&=(num : long)   := (value&=num.value);
		       ^

0 [0x0]: line: 848 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#short.operator&=[2516] params(1) in file: lib\support\0.2.805/primitives.sharp:849:8: note:  
		    def operator&=(num : uint)   := (value&=num.value);
		       ^

0 [0x0]: line: 849 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#short.operator&=[2517] params(1) in file: lib\support\0.2.805/primitives.sharp:850:8: note:  
		    def operator&=(num : int)    := (value&=num.value);
		       ^

0 [0x0]: line: 850 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#short.operator&=[2518] params(1) in file: lib\support\0.2.805/primitives.sharp:851:8: note:  
		    def operator&=(num : ushort) := (value&=num.value);
		       ^

0 [0x0]: line: 851 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#short.operator&=[2519] params(1) in file: lib\support\0.2.805/primitives.sharp:852:8: note:  
		    def operator&=(num : short)  := (value&=num.value);
		       ^

0 [0x0]: line: 852 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#short.operator&=[2520] params(1) in file: lib\support\0.2.805/primitives.sharp:853:8: note:  
		    def operator&=(num : uchar)  := (value&=num.value);
		       ^

0 [0x0]: line: 853 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#short.operator&=[2521] params(1) in file: lib\support\0.2.805/primitives.sharp:854:8: note:  
		    def operator&=(num : char)   := (value&=num.value);
		       ^

0 [0x0]: line: 854 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#short.operator&=[2522] params(1) in file: lib\support\0.2.805/primitives.sharp:855:8: note:  
		    def operator&=(num : byte)   := (value&=num.value);
		       ^

0 [0x0]: line: 855 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#short.operator&=[2523] params(1) in file: lib\support\0.2.805/primitives.sharp:856:8: note:  
		    def operator&=(num : bool)   := (value&=num.value);
		       ^

0 [0x0]: line: 856 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#short.operator&=[2524] params(1) in file: lib\support\0.2.805/primitives.sharp:857:8: note:  
		    def operator&=(num : var)    := (value&=num);
		       ^

0 [0x0]: line: 857 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           and ecx, ebx   
9 [0x9]:           rmov adx, cmt   
10 [0xa]:           returnobj   
11 [0xb]:           ret   


overload function: std#short.operator|=[2525] params(1) in file: lib\support\0.2.805/primitives.sharp:859:8: note:  
		    def operator|=(num : ulong)  := (value|=num.value);
		       ^

0 [0x0]: line: 859 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator|=[2526] params(1) in file: lib\support\0.2.805/primitives.sharp:860:8: note:  
		    def operator|=(num : long)   := (value|=num.value);
		       ^

0 [0x0]: line: 860 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator|=[2527] params(1) in file: lib\support\0.2.805/primitives.sharp:861:8: note:  
		    def operator|=(num : uint)   := (value|=num.value);
		       ^

0 [0x0]: line: 861 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator|=[2528] params(1) in file: lib\support\0.2.805/primitives.sharp:862:8: note:  
		    def operator|=(num : int)    := (value|=num.value);
		       ^

0 [0x0]: line: 862 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator|=[2529] params(1) in file: lib\support\0.2.805/primitives.sharp:863:8: note:  
		    def operator|=(num : ushort) := (value|=num.value);
		       ^

0 [0x0]: line: 863 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator|=[2530] params(1) in file: lib\support\0.2.805/primitives.sharp:864:8: note:  
		    def operator|=(num : short)  := (value|=num.value);
		       ^

0 [0x0]: line: 864 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator|=[2531] params(1) in file: lib\support\0.2.805/primitives.sharp:865:8: note:  
		    def operator|=(num : uchar)  := (value|=num.value);
		       ^

0 [0x0]: line: 865 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator|=[2532] params(1) in file: lib\support\0.2.805/primitives.sharp:866:8: note:  
		    def operator|=(num : char)   := (value|=num.value);
		       ^

0 [0x0]: line: 866 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator|=[2533] params(1) in file: lib\support\0.2.805/primitives.sharp:867:8: note:  
		    def operator|=(num : byte)   := (value|=num.value);
		       ^

0 [0x0]: line: 867 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator|=[2534] params(1) in file: lib\support\0.2.805/primitives.sharp:868:8: note:  
		    def operator|=(num : bool)   := (value|=num.value);
		       ^

0 [0x0]: line: 868 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator|=[2535] params(1) in file: lib\support\0.2.805/primitives.sharp:869:8: note:  
		    def operator|=(num : var)    := (value|=num);
		       ^

0 [0x0]: line: 869 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           or ecx, ebx   
9 [0x9]:           mov16 cmt, cmt   
10 [0xa]:           rmov adx, cmt   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


constructor: std#short.short[2536] params(0) in file: lib\support\0.2.805/primitives.sharp:768:6: note:  
		class short base integer<_int16> {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1181 // <std#integer<_int16>.integer>   
2 [0x2]:         ret   


constructor: std#uchar.uchar[2537] params(1) in file: lib\support\0.2.805/primitives.sharp:872:10: note:  
		    uchar(i : long) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1182 // <std#integer<_uint8>.integer>   
9 [0x9]:         ret   


constructor: std#uchar.uchar[2538] params(1) in file: lib\support\0.2.805/primitives.sharp:873:10: note:  
		    uchar(i : int) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1182 // <std#integer<_uint8>.integer>   
9 [0x9]:         ret   


constructor: std#uchar.uchar[2539] params(1) in file: lib\support\0.2.805/primitives.sharp:874:10: note:  
		    uchar(i : short) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1182 // <std#integer<_uint8>.integer>   
9 [0x9]:         ret   


constructor: std#uchar.uchar[2540] params(1) in file: lib\support\0.2.805/primitives.sharp:875:10: note:  
		    uchar(i : char) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1182 // <std#integer<_uint8>.integer>   
9 [0x9]:         ret   


constructor: std#uchar.uchar[2541] params(1) in file: lib\support\0.2.805/primitives.sharp:876:10: note:  
		    uchar(i : byte) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1182 // <std#integer<_uint8>.integer>   
9 [0x9]:         ret   


constructor: std#uchar.uchar[2542] params(1) in file: lib\support\0.2.805/primitives.sharp:877:10: note:  
		    uchar(i : bool) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1182 // <std#integer<_uint8>.integer>   
9 [0x9]:         ret   


constructor: std#uchar.uchar[2543] params(1) in file: lib\support\0.2.805/primitives.sharp:878:10: note:  
		    uchar(i : ulong) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1182 // <std#integer<_uint8>.integer>   
9 [0x9]:         ret   


constructor: std#uchar.uchar[2544] params(1) in file: lib\support\0.2.805/primitives.sharp:879:10: note:  
		    uchar(i : uint) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1182 // <std#integer<_uint8>.integer>   
9 [0x9]:         ret   


constructor: std#uchar.uchar[2545] params(1) in file: lib\support\0.2.805/primitives.sharp:880:10: note:  
		    uchar(i : ushort) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1182 // <std#integer<_uint8>.integer>   
9 [0x9]:         ret   


constructor: std#uchar.uchar[2546] params(1) in file: lib\support\0.2.805/primitives.sharp:881:10: note:  
		    uchar(i : uchar) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1182 // <std#integer<_uint8>.integer>   
9 [0x9]:         ret   


constructor: std#uchar.uchar[2547] params(1) in file: lib\support\0.2.805/primitives.sharp:882:10: note:  
		    uchar(i : var) -> base(i) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ipushl #1   
2 [0x2]:         call @1182 // <std#integer<_uint8>.integer>   
3 [0x3]:         ret   


overload function: std#uchar.operator![2548] params(0) in file: lib\support\0.2.805/primitives.sharp:884:8: note:  
		    def operator!() := (!value);
		       ^

0 [0x0]: line: 884 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           not ebx, ebx   
7 [0x7]:           return_val ebx   
8 [0x8]:           ret   


overload function: std#uchar.operator++[2549] params(0) in file: lib\support\0.2.805/primitives.sharp:885:8: note:  
		    def operator++() := (++value);
		       ^

0 [0x0]: line: 885 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           inc ebx   
7 [0x7]:           movu8 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#uchar.operator++[2550] params(1) in file: lib\support\0.2.805/primitives.sharp:886:8: note:  
		    def operator++(num : var) := (value++);
		       ^

0 [0x0]: line: 886 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           inc ebx   
8 [0x8]:           movu8 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#uchar.operator--[2551] params(0) in file: lib\support\0.2.805/primitives.sharp:887:8: note:  
		    def operator--() := (--value);
		       ^

0 [0x0]: line: 887 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           dec ebx   
7 [0x7]:           movu8 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#uchar.operator--[2552] params(1) in file: lib\support\0.2.805/primitives.sharp:888:8: note:  
		    def operator--(num : var) := (value--);
		       ^

0 [0x0]: line: 888 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           dec ebx   
8 [0x8]:           movu8 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#uchar.operator+=[2553] params(1) in file: lib\support\0.2.805/primitives.sharp:890:8: note:  
		    def operator+=(num : ulong)  := (value+=num.value);
		       ^

0 [0x0]: line: 890 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator+=[2554] params(1) in file: lib\support\0.2.805/primitives.sharp:891:8: note:  
		    def operator+=(num : long)   := (value+=num.value);
		       ^

0 [0x0]: line: 891 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator+=[2555] params(1) in file: lib\support\0.2.805/primitives.sharp:892:8: note:  
		    def operator+=(num : uint)   := (value+=num.value);
		       ^

0 [0x0]: line: 892 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator+=[2556] params(1) in file: lib\support\0.2.805/primitives.sharp:893:8: note:  
		    def operator+=(num : int)    := (value+=num.value);
		       ^

0 [0x0]: line: 893 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator+=[2557] params(1) in file: lib\support\0.2.805/primitives.sharp:894:8: note:  
		    def operator+=(num : ushort) := (value+=num.value);
		       ^

0 [0x0]: line: 894 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator+=[2558] params(1) in file: lib\support\0.2.805/primitives.sharp:895:8: note:  
		    def operator+=(num : short)  := (value+=num.value);
		       ^

0 [0x0]: line: 895 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator+=[2559] params(1) in file: lib\support\0.2.805/primitives.sharp:896:8: note:  
		    def operator+=(num : uchar)  := (value+=num.value);
		       ^

0 [0x0]: line: 896 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator+=[2560] params(1) in file: lib\support\0.2.805/primitives.sharp:897:8: note:  
		    def operator+=(num : char)   := (value+=num.value);
		       ^

0 [0x0]: line: 897 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator+=[2561] params(1) in file: lib\support\0.2.805/primitives.sharp:898:8: note:  
		    def operator+=(num : byte)   := (value+=num.value);
		       ^

0 [0x0]: line: 898 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator+=[2562] params(1) in file: lib\support\0.2.805/primitives.sharp:899:8: note:  
		    def operator+=(num : bool)   := (value+=num.value);
		       ^

0 [0x0]: line: 899 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator+=[2563] params(1) in file: lib\support\0.2.805/primitives.sharp:900:8: note:  
		    def operator+=(num : var)    := (value+=num);
		       ^

0 [0x0]: line: 900 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           add ecx, ebx -> ebx   
9 [0x9]:           movu8 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#uchar.operator-=[2564] params(1) in file: lib\support\0.2.805/primitives.sharp:902:8: note:  
		    def operator-=(num : ulong)  := (value-=num.value);
		       ^

0 [0x0]: line: 902 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator-=[2565] params(1) in file: lib\support\0.2.805/primitives.sharp:903:8: note:  
		    def operator-=(num : long)   := (value-=num.value);
		       ^

0 [0x0]: line: 903 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator-=[2566] params(1) in file: lib\support\0.2.805/primitives.sharp:904:8: note:  
		    def operator-=(num : uint)   := (value-=num.value);
		       ^

0 [0x0]: line: 904 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator-=[2567] params(1) in file: lib\support\0.2.805/primitives.sharp:905:8: note:  
		    def operator-=(num : int)    := (value-=num.value);
		       ^

0 [0x0]: line: 905 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator-=[2568] params(1) in file: lib\support\0.2.805/primitives.sharp:906:8: note:  
		    def operator-=(num : ushort) := (value-=num.value);
		       ^

0 [0x0]: line: 906 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator-=[2569] params(1) in file: lib\support\0.2.805/primitives.sharp:907:8: note:  
		    def operator-=(num : short)  := (value-=num.value);
		       ^

0 [0x0]: line: 907 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator-=[2570] params(1) in file: lib\support\0.2.805/primitives.sharp:908:8: note:  
		    def operator-=(num : uchar)  := (value-=num.value);
		       ^

0 [0x0]: line: 908 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator-=[2571] params(1) in file: lib\support\0.2.805/primitives.sharp:909:8: note:  
		    def operator-=(num : char)   := (value-=num.value);
		       ^

0 [0x0]: line: 909 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator-=[2572] params(1) in file: lib\support\0.2.805/primitives.sharp:910:8: note:  
		    def operator-=(num : byte)   := (value-=num.value);
		       ^

0 [0x0]: line: 910 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator-=[2573] params(1) in file: lib\support\0.2.805/primitives.sharp:911:8: note:  
		    def operator-=(num : bool)   := (value-=num.value);
		       ^

0 [0x0]: line: 911 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator-=[2574] params(1) in file: lib\support\0.2.805/primitives.sharp:912:8: note:  
		    def operator-=(num : var)    := (value-=num);
		       ^

0 [0x0]: line: 912 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           sub ecx, ebx -> ebx   
9 [0x9]:           movu8 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#uchar.operator*=[2575] params(1) in file: lib\support\0.2.805/primitives.sharp:914:8: note:  
		    def operator*=(num : ulong)  := (value*=num.value);
		       ^

0 [0x0]: line: 914 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator*=[2576] params(1) in file: lib\support\0.2.805/primitives.sharp:915:8: note:  
		    def operator*=(num : long)   := (value*=num.value);
		       ^

0 [0x0]: line: 915 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator*=[2577] params(1) in file: lib\support\0.2.805/primitives.sharp:916:8: note:  
		    def operator*=(num : uint)   := (value*=num.value);
		       ^

0 [0x0]: line: 916 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator*=[2578] params(1) in file: lib\support\0.2.805/primitives.sharp:917:8: note:  
		    def operator*=(num : int)    := (value*=num.value);
		       ^

0 [0x0]: line: 917 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator*=[2579] params(1) in file: lib\support\0.2.805/primitives.sharp:918:8: note:  
		    def operator*=(num : ushort) := (value*=num.value);
		       ^

0 [0x0]: line: 918 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator*=[2580] params(1) in file: lib\support\0.2.805/primitives.sharp:919:8: note:  
		    def operator*=(num : short)  := (value*=num.value);
		       ^

0 [0x0]: line: 919 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator*=[2581] params(1) in file: lib\support\0.2.805/primitives.sharp:920:8: note:  
		    def operator*=(num : uchar)  := (value*=num.value);
		       ^

0 [0x0]: line: 920 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator*=[2582] params(1) in file: lib\support\0.2.805/primitives.sharp:921:8: note:  
		    def operator*=(num : char)   := (value*=num.value);
		       ^

0 [0x0]: line: 921 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator*=[2583] params(1) in file: lib\support\0.2.805/primitives.sharp:922:8: note:  
		    def operator*=(num : byte)   := (value*=num.value);
		       ^

0 [0x0]: line: 922 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator*=[2584] params(1) in file: lib\support\0.2.805/primitives.sharp:923:8: note:  
		    def operator*=(num : bool)   := (value*=num.value);
		       ^

0 [0x0]: line: 923 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator*=[2585] params(1) in file: lib\support\0.2.805/primitives.sharp:924:8: note:  
		    def operator*=(num : var)    := (value*=num);
		       ^

0 [0x0]: line: 924 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           mul ecx, ebx -> ebx   
9 [0x9]:           movu8 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#uchar.operator/=[2586] params(1) in file: lib\support\0.2.805/primitives.sharp:926:8: note:  
		    def operator/=(num : ulong)  := (value/=num.value);
		       ^

0 [0x0]: line: 926 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator/=[2587] params(1) in file: lib\support\0.2.805/primitives.sharp:927:8: note:  
		    def operator/=(num : long)   := (value/=num.value);
		       ^

0 [0x0]: line: 927 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator/=[2588] params(1) in file: lib\support\0.2.805/primitives.sharp:928:8: note:  
		    def operator/=(num : uint)   := (value/=num.value);
		       ^

0 [0x0]: line: 928 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator/=[2589] params(1) in file: lib\support\0.2.805/primitives.sharp:929:8: note:  
		    def operator/=(num : int)    := (value/=num.value);
		       ^

0 [0x0]: line: 929 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator/=[2590] params(1) in file: lib\support\0.2.805/primitives.sharp:930:8: note:  
		    def operator/=(num : ushort) := (value/=num.value);
		       ^

0 [0x0]: line: 930 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator/=[2591] params(1) in file: lib\support\0.2.805/primitives.sharp:931:8: note:  
		    def operator/=(num : short)  := (value/=num.value);
		       ^

0 [0x0]: line: 931 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator/=[2592] params(1) in file: lib\support\0.2.805/primitives.sharp:932:8: note:  
		    def operator/=(num : uchar)  := (value/=num.value);
		       ^

0 [0x0]: line: 932 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator/=[2593] params(1) in file: lib\support\0.2.805/primitives.sharp:933:8: note:  
		    def operator/=(num : char)   := (value/=num.value);
		       ^

0 [0x0]: line: 933 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator/=[2594] params(1) in file: lib\support\0.2.805/primitives.sharp:934:8: note:  
		    def operator/=(num : byte)   := (value/=num.value);
		       ^

0 [0x0]: line: 934 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator/=[2595] params(1) in file: lib\support\0.2.805/primitives.sharp:935:8: note:  
		    def operator/=(num : bool)   := (value/=num.value);
		       ^

0 [0x0]: line: 935 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator/=[2596] params(1) in file: lib\support\0.2.805/primitives.sharp:936:8: note:  
		    def operator/=(num : var)    := (value/=num);
		       ^

0 [0x0]: line: 936 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           div ecx, ebx -> ebx   
9 [0x9]:           movu8 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#uchar.operator%=[2597] params(1) in file: lib\support\0.2.805/primitives.sharp:938:8: note:  
		    def operator%=(num : ulong)  := (value%=num.value);
		       ^

0 [0x0]: line: 938 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator%=[2598] params(1) in file: lib\support\0.2.805/primitives.sharp:939:8: note:  
		    def operator%=(num : long)   := (value%=num.value);
		       ^

0 [0x0]: line: 939 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator%=[2599] params(1) in file: lib\support\0.2.805/primitives.sharp:940:8: note:  
		    def operator%=(num : uint)   := (value%=num.value);
		       ^

0 [0x0]: line: 940 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator%=[2600] params(1) in file: lib\support\0.2.805/primitives.sharp:941:8: note:  
		    def operator%=(num : int)    := (value%=num.value);
		       ^

0 [0x0]: line: 941 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator%=[2601] params(1) in file: lib\support\0.2.805/primitives.sharp:942:8: note:  
		    def operator%=(num : ushort) := (value%=num.value);
		       ^

0 [0x0]: line: 942 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator%=[2602] params(1) in file: lib\support\0.2.805/primitives.sharp:943:8: note:  
		    def operator%=(num : short)  := (value%=num.value);
		       ^

0 [0x0]: line: 943 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator%=[2603] params(1) in file: lib\support\0.2.805/primitives.sharp:944:8: note:  
		    def operator%=(num : uchar)  := (value%=num.value);
		       ^

0 [0x0]: line: 944 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator%=[2604] params(1) in file: lib\support\0.2.805/primitives.sharp:945:8: note:  
		    def operator%=(num : char)   := (value%=num.value);
		       ^

0 [0x0]: line: 945 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator%=[2605] params(1) in file: lib\support\0.2.805/primitives.sharp:946:8: note:  
		    def operator%=(num : byte)   := (value%=num.value);
		       ^

0 [0x0]: line: 946 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator%=[2606] params(1) in file: lib\support\0.2.805/primitives.sharp:947:8: note:  
		    def operator%=(num : bool)   := (value%=num.value);
		       ^

0 [0x0]: line: 947 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator%=[2607] params(1) in file: lib\support\0.2.805/primitives.sharp:948:8: note:  
		    def operator%=(num : var)    := (value%=num);
		       ^

0 [0x0]: line: 948 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           mod ecx, ebx -> ebx   
9 [0x9]:           movu8 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#uchar.operator&=[2608] params(1) in file: lib\support\0.2.805/primitives.sharp:950:8: note:  
		    def operator&=(num : ulong)  := (value&=num.value);
		       ^

0 [0x0]: line: 950 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uchar.operator&=[2609] params(1) in file: lib\support\0.2.805/primitives.sharp:951:8: note:  
		    def operator&=(num : long)   := (value&=num.value);
		       ^

0 [0x0]: line: 951 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uchar.operator&=[2610] params(1) in file: lib\support\0.2.805/primitives.sharp:952:8: note:  
		    def operator&=(num : uint)   := (value&=num.value);
		       ^

0 [0x0]: line: 952 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uchar.operator&=[2611] params(1) in file: lib\support\0.2.805/primitives.sharp:953:8: note:  
		    def operator&=(num : int)    := (value&=num.value);
		       ^

0 [0x0]: line: 953 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uchar.operator&=[2612] params(1) in file: lib\support\0.2.805/primitives.sharp:954:8: note:  
		    def operator&=(num : ushort) := (value&=num.value);
		       ^

0 [0x0]: line: 954 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uchar.operator&=[2613] params(1) in file: lib\support\0.2.805/primitives.sharp:955:8: note:  
		    def operator&=(num : short)  := (value&=num.value);
		       ^

0 [0x0]: line: 955 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uchar.operator&=[2614] params(1) in file: lib\support\0.2.805/primitives.sharp:956:8: note:  
		    def operator&=(num : uchar)  := (value&=num.value);
		       ^

0 [0x0]: line: 956 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uchar.operator&=[2615] params(1) in file: lib\support\0.2.805/primitives.sharp:957:8: note:  
		    def operator&=(num : char)   := (value&=num.value);
		       ^

0 [0x0]: line: 957 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uchar.operator&=[2616] params(1) in file: lib\support\0.2.805/primitives.sharp:958:8: note:  
		    def operator&=(num : byte)   := (value&=num.value);
		       ^

0 [0x0]: line: 958 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uchar.operator&=[2617] params(1) in file: lib\support\0.2.805/primitives.sharp:959:8: note:  
		    def operator&=(num : bool)   := (value&=num.value);
		       ^

0 [0x0]: line: 959 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uchar.operator&=[2618] params(1) in file: lib\support\0.2.805/primitives.sharp:960:8: note:  
		    def operator&=(num : var)    := (value&=num);
		       ^

0 [0x0]: line: 960 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           and ecx, ebx   
9 [0x9]:           rmov adx, cmt   
10 [0xa]:           returnobj   
11 [0xb]:           ret   


overload function: std#uchar.operator|=[2619] params(1) in file: lib\support\0.2.805/primitives.sharp:962:8: note:  
		    def operator|=(num : ulong)  := (value|=num.value);
		       ^

0 [0x0]: line: 962 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu8 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator|=[2620] params(1) in file: lib\support\0.2.805/primitives.sharp:963:8: note:  
		    def operator|=(num : long)   := (value|=num.value);
		       ^

0 [0x0]: line: 963 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu8 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator|=[2621] params(1) in file: lib\support\0.2.805/primitives.sharp:964:8: note:  
		    def operator|=(num : uint)   := (value|=num.value);
		       ^

0 [0x0]: line: 964 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu8 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator|=[2622] params(1) in file: lib\support\0.2.805/primitives.sharp:965:8: note:  
		    def operator|=(num : int)    := (value|=num.value);
		       ^

0 [0x0]: line: 965 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu8 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator|=[2623] params(1) in file: lib\support\0.2.805/primitives.sharp:966:8: note:  
		    def operator|=(num : ushort) := (value|=num.value);
		       ^

0 [0x0]: line: 966 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu8 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator|=[2624] params(1) in file: lib\support\0.2.805/primitives.sharp:967:8: note:  
		    def operator|=(num : short)  := (value|=num.value);
		       ^

0 [0x0]: line: 967 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu8 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator|=[2625] params(1) in file: lib\support\0.2.805/primitives.sharp:968:8: note:  
		    def operator|=(num : uchar)  := (value|=num.value);
		       ^

0 [0x0]: line: 968 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu8 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator|=[2626] params(1) in file: lib\support\0.2.805/primitives.sharp:969:8: note:  
		    def operator|=(num : char)   := (value|=num.value);
		       ^

0 [0x0]: line: 969 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu8 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator|=[2627] params(1) in file: lib\support\0.2.805/primitives.sharp:970:8: note:  
		    def operator|=(num : byte)   := (value|=num.value);
		       ^

0 [0x0]: line: 970 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu8 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator|=[2628] params(1) in file: lib\support\0.2.805/primitives.sharp:971:8: note:  
		    def operator|=(num : bool)   := (value|=num.value);
		       ^

0 [0x0]: line: 971 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu8 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator|=[2629] params(1) in file: lib\support\0.2.805/primitives.sharp:972:8: note:  
		    def operator|=(num : var)    := (value|=num);
		       ^

0 [0x0]: line: 972 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           or ecx, ebx   
9 [0x9]:           movu8 cmt, cmt   
10 [0xa]:           rmov adx, cmt   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


constructor: std#uchar.uchar[2630] params(0) in file: lib\support\0.2.805/primitives.sharp:871:6: note:  
		class uchar base integer<_uint8> {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1374 // <std#integer<_uint8>.integer>   
2 [0x2]:         ret   


constructor: std#char.char[2631] params(1) in file: lib\support\0.2.805/primitives.sharp:975:9: note:  
		    char(i : long) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1375 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#char.char[2632] params(1) in file: lib\support\0.2.805/primitives.sharp:976:9: note:  
		    char(i : int) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1375 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#char.char[2633] params(1) in file: lib\support\0.2.805/primitives.sharp:977:9: note:  
		    char(i : short) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1375 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#char.char[2634] params(1) in file: lib\support\0.2.805/primitives.sharp:978:9: note:  
		    char(i : char) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1375 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#char.char[2635] params(1) in file: lib\support\0.2.805/primitives.sharp:979:9: note:  
		    char(i : byte) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1375 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#char.char[2636] params(1) in file: lib\support\0.2.805/primitives.sharp:980:9: note:  
		    char(i : bool) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1375 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#char.char[2637] params(1) in file: lib\support\0.2.805/primitives.sharp:981:9: note:  
		    char(i : ulong) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1375 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#char.char[2638] params(1) in file: lib\support\0.2.805/primitives.sharp:982:9: note:  
		    char(i : uint) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1375 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#char.char[2639] params(1) in file: lib\support\0.2.805/primitives.sharp:983:9: note:  
		    char(i : ushort) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1375 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#char.char[2640] params(1) in file: lib\support\0.2.805/primitives.sharp:984:9: note:  
		    char(i : uchar) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1375 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#char.char[2641] params(1) in file: lib\support\0.2.805/primitives.sharp:985:9: note:  
		    char(i : var) -> base(i) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         ipushl #1   
2 [0x2]:         call @1375 // <std#integer<_int8>.integer>   
3 [0x3]:         ret   


overload function: std#char.operator![2642] params(0) in file: lib\support\0.2.805/primitives.sharp:987:8: note:  
		    def operator!() := (!value);
		       ^

0 [0x0]: line: 987 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           not ebx, ebx   
7 [0x7]:           return_val ebx   
8 [0x8]:           ret   


overload function: std#char.operator++[2643] params(0) in file: lib\support\0.2.805/primitives.sharp:988:8: note:  
		    def operator++() := (++value);
		       ^

0 [0x0]: line: 988 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           inc ebx   
7 [0x7]:           mov8 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#char.operator++[2644] params(1) in file: lib\support\0.2.805/primitives.sharp:989:8: note:  
		    def operator++(num : var) := (value++);
		       ^

0 [0x0]: line: 989 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           inc ebx   
8 [0x8]:           mov8 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#char.operator--[2645] params(0) in file: lib\support\0.2.805/primitives.sharp:990:8: note:  
		    def operator--() := (--value);
		       ^

0 [0x0]: line: 990 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           dec ebx   
7 [0x7]:           mov8 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#char.operator--[2646] params(1) in file: lib\support\0.2.805/primitives.sharp:991:8: note:  
		    def operator--(num : var) := (value--);
		       ^

0 [0x0]: line: 991 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           dec ebx   
8 [0x8]:           mov8 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#char.operator+=[2647] params(1) in file: lib\support\0.2.805/primitives.sharp:993:8: note:  
		    def operator+=(num : ulong)  := (value+=num.value);
		       ^

0 [0x0]: line: 993 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#char.operator+=[2648] params(1) in file: lib\support\0.2.805/primitives.sharp:994:8: note:  
		    def operator+=(num : long)   := (value+=num.value);
		       ^

0 [0x0]: line: 994 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#char.operator+=[2649] params(1) in file: lib\support\0.2.805/primitives.sharp:995:8: note:  
		    def operator+=(num : uint)   := (value+=num.value);
		       ^

0 [0x0]: line: 995 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#char.operator+=[2650] params(1) in file: lib\support\0.2.805/primitives.sharp:996:8: note:  
		    def operator+=(num : int)    := (value+=num.value);
		       ^

0 [0x0]: line: 996 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#char.operator+=[2651] params(1) in file: lib\support\0.2.805/primitives.sharp:997:8: note:  
		    def operator+=(num : ushort) := (value+=num.value);
		       ^

0 [0x0]: line: 997 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#char.operator+=[2652] params(1) in file: lib\support\0.2.805/primitives.sharp:998:8: note:  
		    def operator+=(num : short)  := (value+=num.value);
		       ^

0 [0x0]: line: 998 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#char.operator+=[2653] params(1) in file: lib\support\0.2.805/primitives.sharp:999:8: note:  
		    def operator+=(num : uchar)  := (value+=num.value);
		       ^

0 [0x0]: line: 999 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#char.operator+=[2654] params(1) in file: lib\support\0.2.805/primitives.sharp:1000:8: note:  
		    def operator+=(num : char)   := (value+=num.value);
		       ^

0 [0x0]: line: 1000 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator+=[2655] params(1) in file: lib\support\0.2.805/primitives.sharp:1001:8: note:  
		    def operator+=(num : byte)   := (value+=num.value);
		       ^

0 [0x0]: line: 1001 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator+=[2656] params(1) in file: lib\support\0.2.805/primitives.sharp:1002:8: note:  
		    def operator+=(num : bool)   := (value+=num.value);
		       ^

0 [0x0]: line: 1002 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator+=[2657] params(1) in file: lib\support\0.2.805/primitives.sharp:1003:8: note:  
		    def operator+=(num : var)    := (value+=num);
		       ^

0 [0x0]: line: 1003 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            add ecx, ebx -> ebx   
9 [0x9]:            mov8 ebx, ebx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            returnobj   
12 [0xc]:            ret   


overload function: std#char.operator-=[2658] params(1) in file: lib\support\0.2.805/primitives.sharp:1005:8: note:  
		    def operator-=(num : ulong)  := (value-=num.value);
		       ^

0 [0x0]: line: 1005 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator-=[2659] params(1) in file: lib\support\0.2.805/primitives.sharp:1006:8: note:  
		    def operator-=(num : long)   := (value-=num.value);
		       ^

0 [0x0]: line: 1006 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator-=[2660] params(1) in file: lib\support\0.2.805/primitives.sharp:1007:8: note:  
		    def operator-=(num : uint)   := (value-=num.value);
		       ^

0 [0x0]: line: 1007 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator-=[2661] params(1) in file: lib\support\0.2.805/primitives.sharp:1008:8: note:  
		    def operator-=(num : int)    := (value-=num.value);
		       ^

0 [0x0]: line: 1008 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator-=[2662] params(1) in file: lib\support\0.2.805/primitives.sharp:1009:8: note:  
		    def operator-=(num : ushort) := (value-=num.value);
		       ^

0 [0x0]: line: 1009 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator-=[2663] params(1) in file: lib\support\0.2.805/primitives.sharp:1010:8: note:  
		    def operator-=(num : short)  := (value-=num.value);
		       ^

0 [0x0]: line: 1010 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator-=[2664] params(1) in file: lib\support\0.2.805/primitives.sharp:1011:8: note:  
		    def operator-=(num : uchar)  := (value-=num.value);
		       ^

0 [0x0]: line: 1011 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator-=[2665] params(1) in file: lib\support\0.2.805/primitives.sharp:1012:8: note:  
		    def operator-=(num : char)   := (value-=num.value);
		       ^

0 [0x0]: line: 1012 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator-=[2666] params(1) in file: lib\support\0.2.805/primitives.sharp:1013:8: note:  
		    def operator-=(num : byte)   := (value-=num.value);
		       ^

0 [0x0]: line: 1013 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator-=[2667] params(1) in file: lib\support\0.2.805/primitives.sharp:1014:8: note:  
		    def operator-=(num : bool)   := (value-=num.value);
		       ^

0 [0x0]: line: 1014 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator-=[2668] params(1) in file: lib\support\0.2.805/primitives.sharp:1015:8: note:  
		    def operator-=(num : var)    := (value-=num);
		       ^

0 [0x0]: line: 1015 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            sub ecx, ebx -> ebx   
9 [0x9]:            mov8 ebx, ebx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            returnobj   
12 [0xc]:            ret   


overload function: std#char.operator*=[2669] params(1) in file: lib\support\0.2.805/primitives.sharp:1017:8: note:  
		    def operator*=(num : ulong)  := (value*=num.value);
		       ^

0 [0x0]: line: 1017 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator*=[2670] params(1) in file: lib\support\0.2.805/primitives.sharp:1018:8: note:  
		    def operator*=(num : long)   := (value*=num.value);
		       ^

0 [0x0]: line: 1018 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator*=[2671] params(1) in file: lib\support\0.2.805/primitives.sharp:1019:8: note:  
		    def operator*=(num : uint)   := (value*=num.value);
		       ^

0 [0x0]: line: 1019 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator*=[2672] params(1) in file: lib\support\0.2.805/primitives.sharp:1020:8: note:  
		    def operator*=(num : int)    := (value*=num.value);
		       ^

0 [0x0]: line: 1020 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator*=[2673] params(1) in file: lib\support\0.2.805/primitives.sharp:1021:8: note:  
		    def operator*=(num : ushort) := (value*=num.value);
		       ^

0 [0x0]: line: 1021 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator*=[2674] params(1) in file: lib\support\0.2.805/primitives.sharp:1022:8: note:  
		    def operator*=(num : short)  := (value*=num.value);
		       ^

0 [0x0]: line: 1022 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator*=[2675] params(1) in file: lib\support\0.2.805/primitives.sharp:1023:8: note:  
		    def operator*=(num : uchar)  := (value*=num.value);
		       ^

0 [0x0]: line: 1023 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator*=[2676] params(1) in file: lib\support\0.2.805/primitives.sharp:1024:8: note:  
		    def operator*=(num : char)   := (value*=num.value);
		       ^

0 [0x0]: line: 1024 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator*=[2677] params(1) in file: lib\support\0.2.805/primitives.sharp:1025:8: note:  
		    def operator*=(num : byte)   := (value*=num.value);
		       ^

0 [0x0]: line: 1025 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator*=[2678] params(1) in file: lib\support\0.2.805/primitives.sharp:1026:8: note:  
		    def operator*=(num : bool)   := (value*=num.value);
		       ^

0 [0x0]: line: 1026 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator*=[2679] params(1) in file: lib\support\0.2.805/primitives.sharp:1027:8: note:  
		    def operator*=(num : var)    := (value*=num);
		       ^

0 [0x0]: line: 1027 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            mul ecx, ebx -> ebx   
9 [0x9]:            mov8 ebx, ebx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            returnobj   
12 [0xc]:            ret   


overload function: std#char.operator/=[2680] params(1) in file: lib\support\0.2.805/primitives.sharp:1029:8: note:  
		    def operator/=(num : ulong)  := (value/=num.value);
		       ^

0 [0x0]: line: 1029 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator/=[2681] params(1) in file: lib\support\0.2.805/primitives.sharp:1030:8: note:  
		    def operator/=(num : long)   := (value/=num.value);
		       ^

0 [0x0]: line: 1030 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator/=[2682] params(1) in file: lib\support\0.2.805/primitives.sharp:1031:8: note:  
		    def operator/=(num : uint)   := (value/=num.value);
		       ^

0 [0x0]: line: 1031 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator/=[2683] params(1) in file: lib\support\0.2.805/primitives.sharp:1032:8: note:  
		    def operator/=(num : int)    := (value/=num.value);
		       ^

0 [0x0]: line: 1032 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator/=[2684] params(1) in file: lib\support\0.2.805/primitives.sharp:1033:8: note:  
		    def operator/=(num : ushort) := (value/=num.value);
		       ^

0 [0x0]: line: 1033 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator/=[2685] params(1) in file: lib\support\0.2.805/primitives.sharp:1034:8: note:  
		    def operator/=(num : short)  := (value/=num.value);
		       ^

0 [0x0]: line: 1034 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator/=[2686] params(1) in file: lib\support\0.2.805/primitives.sharp:1035:8: note:  
		    def operator/=(num : uchar)  := (value/=num.value);
		       ^

0 [0x0]: line: 1035 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator/=[2687] params(1) in file: lib\support\0.2.805/primitives.sharp:1036:8: note:  
		    def operator/=(num : char)   := (value/=num.value);
		       ^

0 [0x0]: line: 1036 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator/=[2688] params(1) in file: lib\support\0.2.805/primitives.sharp:1037:8: note:  
		    def operator/=(num : byte)   := (value/=num.value);
		       ^

0 [0x0]: line: 1037 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator/=[2689] params(1) in file: lib\support\0.2.805/primitives.sharp:1038:8: note:  
		    def operator/=(num : bool)   := (value/=num.value);
		       ^

0 [0x0]: line: 1038 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator/=[2690] params(1) in file: lib\support\0.2.805/primitives.sharp:1039:8: note:  
		    def operator/=(num : var)    := (value/=num);
		       ^

0 [0x0]: line: 1039 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            div ecx, ebx -> ebx   
9 [0x9]:            mov8 ebx, ebx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            returnobj   
12 [0xc]:            ret   


overload function: std#char.operator%=[2691] params(1) in file: lib\support\0.2.805/primitives.sharp:1041:8: note:  
		    def operator%=(num : ulong)  := (value%=num.value);
		       ^

0 [0x0]: line: 1041 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator%=[2692] params(1) in file: lib\support\0.2.805/primitives.sharp:1042:8: note:  
		    def operator%=(num : long)   := (value%=num.value);
		       ^

0 [0x0]: line: 1042 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator%=[2693] params(1) in file: lib\support\0.2.805/primitives.sharp:1043:8: note:  
		    def operator%=(num : uint)   := (value%=num.value);
		       ^

0 [0x0]: line: 1043 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator%=[2694] params(1) in file: lib\support\0.2.805/primitives.sharp:1044:8: note:  
		    def operator%=(num : int)    := (value%=num.value);
		       ^

0 [0x0]: line: 1044 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator%=[2695] params(1) in file: lib\support\0.2.805/primitives.sharp:1045:8: note:  
		    def operator%=(num : ushort) := (value%=num.value);
		       ^

0 [0x0]: line: 1045 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator%=[2696] params(1) in file: lib\support\0.2.805/primitives.sharp:1046:8: note:  
		    def operator%=(num : short)  := (value%=num.value);
		       ^

0 [0x0]: line: 1046 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator%=[2697] params(1) in file: lib\support\0.2.805/primitives.sharp:1047:8: note:  
		    def operator%=(num : uchar)  := (value%=num.value);
		       ^

0 [0x0]: line: 1047 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator%=[2698] params(1) in file: lib\support\0.2.805/primitives.sharp:1048:8: note:  
		    def operator%=(num : char)   := (value%=num.value);
		       ^

0 [0x0]: line: 1048 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator%=[2699] params(1) in file: lib\support\0.2.805/primitives.sharp:1049:8: note:  
		    def operator%=(num : byte)   := (value%=num.value);
		       ^

0 [0x0]: line: 1049 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator%=[2700] params(1) in file: lib\support\0.2.805/primitives.sharp:1050:8: note:  
		    def operator%=(num : bool)   := (value%=num.value);
		       ^

0 [0x0]: line: 1050 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator%=[2701] params(1) in file: lib\support\0.2.805/primitives.sharp:1051:8: note:  
		    def operator%=(num : var)    := (value%=num);
		       ^

0 [0x0]: line: 1051 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            mod ecx, ebx -> ebx   
9 [0x9]:            mov8 ebx, ebx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            returnobj   
12 [0xc]:            ret   


overload function: std#char.operator&=[2702] params(1) in file: lib\support\0.2.805/primitives.sharp:1053:8: note:  
		    def operator&=(num : ulong)  := (value&=num.value);
		       ^

0 [0x0]: line: 1053 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#char.operator&=[2703] params(1) in file: lib\support\0.2.805/primitives.sharp:1054:8: note:  
		    def operator&=(num : long)   := (value&=num.value);
		       ^

0 [0x0]: line: 1054 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#char.operator&=[2704] params(1) in file: lib\support\0.2.805/primitives.sharp:1055:8: note:  
		    def operator&=(num : uint)   := (value&=num.value);
		       ^

0 [0x0]: line: 1055 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#char.operator&=[2705] params(1) in file: lib\support\0.2.805/primitives.sharp:1056:8: note:  
		    def operator&=(num : int)    := (value&=num.value);
		       ^

0 [0x0]: line: 1056 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#char.operator&=[2706] params(1) in file: lib\support\0.2.805/primitives.sharp:1057:8: note:  
		    def operator&=(num : ushort) := (value&=num.value);
		       ^

0 [0x0]: line: 1057 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#char.operator&=[2707] params(1) in file: lib\support\0.2.805/primitives.sharp:1058:8: note:  
		    def operator&=(num : short)  := (value&=num.value);
		       ^

0 [0x0]: line: 1058 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#char.operator&=[2708] params(1) in file: lib\support\0.2.805/primitives.sharp:1059:8: note:  
		    def operator&=(num : uchar)  := (value&=num.value);
		       ^

0 [0x0]: line: 1059 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#char.operator&=[2709] params(1) in file: lib\support\0.2.805/primitives.sharp:1060:8: note:  
		    def operator&=(num : char)   := (value&=num.value);
		       ^

0 [0x0]: line: 1060 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#char.operator&=[2710] params(1) in file: lib\support\0.2.805/primitives.sharp:1061:8: note:  
		    def operator&=(num : byte)   := (value&=num.value);
		       ^

0 [0x0]: line: 1061 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#char.operator&=[2711] params(1) in file: lib\support\0.2.805/primitives.sharp:1062:8: note:  
		    def operator&=(num : bool)   := (value&=num.value);
		       ^

0 [0x0]: line: 1062 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#char.operator&=[2712] params(1) in file: lib\support\0.2.805/primitives.sharp:1063:8: note:  
		    def operator&=(num : var)    := (value&=num);
		       ^

0 [0x0]: line: 1063 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            and ecx, ebx   
9 [0x9]:            rmov adx, cmt   
10 [0xa]:            returnobj   
11 [0xb]:            ret   


overload function: std#char.operator|=[2713] params(1) in file: lib\support\0.2.805/primitives.sharp:1065:8: note:  
		    def operator|=(num : ulong)  := (value|=num.value);
		       ^

0 [0x0]: line: 1065 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            mov8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator|=[2714] params(1) in file: lib\support\0.2.805/primitives.sharp:1066:8: note:  
		    def operator|=(num : long)   := (value|=num.value);
		       ^

0 [0x0]: line: 1066 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            mov8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator|=[2715] params(1) in file: lib\support\0.2.805/primitives.sharp:1067:8: note:  
		    def operator|=(num : uint)   := (value|=num.value);
		       ^

0 [0x0]: line: 1067 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            mov8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator|=[2716] params(1) in file: lib\support\0.2.805/primitives.sharp:1068:8: note:  
		    def operator|=(num : int)    := (value|=num.value);
		       ^

0 [0x0]: line: 1068 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            mov8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator|=[2717] params(1) in file: lib\support\0.2.805/primitives.sharp:1069:8: note:  
		    def operator|=(num : ushort) := (value|=num.value);
		       ^

0 [0x0]: line: 1069 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            mov8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator|=[2718] params(1) in file: lib\support\0.2.805/primitives.sharp:1070:8: note:  
		    def operator|=(num : short)  := (value|=num.value);
		       ^

0 [0x0]: line: 1070 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            mov8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator|=[2719] params(1) in file: lib\support\0.2.805/primitives.sharp:1071:8: note:  
		    def operator|=(num : uchar)  := (value|=num.value);
		       ^

0 [0x0]: line: 1071 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            mov8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator|=[2720] params(1) in file: lib\support\0.2.805/primitives.sharp:1072:8: note:  
		    def operator|=(num : char)   := (value|=num.value);
		       ^

0 [0x0]: line: 1072 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            mov8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator|=[2721] params(1) in file: lib\support\0.2.805/primitives.sharp:1073:8: note:  
		    def operator|=(num : byte)   := (value|=num.value);
		       ^

0 [0x0]: line: 1073 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            mov8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator|=[2722] params(1) in file: lib\support\0.2.805/primitives.sharp:1074:8: note:  
		    def operator|=(num : bool)   := (value|=num.value);
		       ^

0 [0x0]: line: 1074 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            mov8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator|=[2723] params(1) in file: lib\support\0.2.805/primitives.sharp:1075:8: note:  
		    def operator|=(num : var)    := (value|=num);
		       ^

0 [0x0]: line: 1075 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            or ecx, ebx   
9 [0x9]:            mov8 cmt, cmt   
10 [0xa]:            rmov adx, cmt   
11 [0xb]:            returnobj   
12 [0xc]:            ret   


function: std#char.is_digit[2724] params(1) in file: lib\support\0.2.805/primitives.sharp:1077:15: note:  
		    static def is_digit(ch: var) : var {
		              ^

0 [0x0]: line: 1078 ipushl #0   
1 [0x1]:            movi #48, ebx   
3 [0x3]:            loadval ecx   
4 [0x4]:            gte ecx, ebx   
5 [0x5]:            movr ebx, cmt   
6 [0x6]:            skne ebx // pc = 12   
7 [0x7]:            ipushl #0   
8 [0x8]:            movi #57, ebx   
10 [0xa]:            loadval ecx   
11 [0xb]:            lte ecx, ebx   
12 [0xc]:            return_val cmt   
13 [0xd]:            ret   


function: std#char.is_newline[2725] params(1) in file: lib\support\0.2.805/primitives.sharp:1081:15: note:  
		    static def is_newline(ch: var) : var {
		              ^

0 [0x0]: line: 1082 call @1940 // <platform#build.is_windows>   
1 [0x1]:            loadval ebx   
2 [0x2]:            movr cmt, ebx   
3 [0x3]:            jne 19   
4 [0x4]:            ipushl #0   
5 [0x5]:            movi #10, ebx   
7 [0x7]:            loadval ecx   
8 [0x8]:            test ecx, ebx   
9 [0x9]:            movr ebx, cmt   
10 [0xa]:            skpe ebx // pc = 16   
11 [0xb]:            ipushl #0   
12 [0xc]:            movi #13, ebx   
14 [0xe]:            loadval ecx   
15 [0xf]:            test ecx, ebx   
16 [0x10]:            return_val cmt   
17 [0x11]:            ret   
18 [0x12]:            jmp @26   
19 [0x13]: line: 1083 ipushl #0   
20 [0x14]:            movi #10, ebx   
22 [0x16]:            loadval ecx   
23 [0x17]:            test ecx, ebx   
24 [0x18]:            return_val cmt   
25 [0x19]:            ret   
26 [0x1a]:            nop   


function: std#char.is_alpha[2726] params(1) in file: lib\support\0.2.805/primitives.sharp:1086:15: note:  
		    static def is_alpha(ch: var) : var {
		              ^

0 [0x0]: line: 1087 ipushl #0   
1 [0x1]:            movi #65, ebx   
3 [0x3]:            loadval ecx   
4 [0x4]:            gte ecx, ebx   
5 [0x5]:            movr ebx, cmt   
6 [0x6]:            skne ebx // pc = 13   
7 [0x7]:            ipushl #0   
8 [0x8]:            movi #90, ebx   
10 [0xa]:            loadval ecx   
11 [0xb]:            lte ecx, ebx   
12 [0xc]:            movr ebx, cmt   
13 [0xd]:            skpe ebx // pc = 26   
14 [0xe]:            ipushl #0   
15 [0xf]:            movi #97, ebx   
17 [0x11]:            loadval ecx   
18 [0x12]:            gte ecx, ebx   
19 [0x13]:            movr ebx, cmt   
20 [0x14]:            skne ebx // pc = 26   
21 [0x15]:            ipushl #0   
22 [0x16]:            movi #122, ebx   
24 [0x18]:            loadval ecx   
25 [0x19]:            lte ecx, ebx   
26 [0x1a]:            return_val cmt   
27 [0x1b]:            ret   


function: std#char.is_alpha_num[2727] params(1) in file: lib\support\0.2.805/primitives.sharp:1091:15: note:  
		    static def is_alpha_num(ch: var) : var {
		              ^

0 [0x0]: line: 1092 ipushl #0   
1 [0x1]:            call @2726 // <std#char.is_alpha>   
2 [0x2]:            loadval ebx   
3 [0x3]:            skpe ebx // pc = 7   
4 [0x4]:            ipushl #0   
5 [0x5]:            call @2724 // <std#char.is_digit>   
6 [0x6]:            loadval ebx   
7 [0x7]:            return_val ebx   
8 [0x8]:            ret   


function: std#char.to_lower[2728] params(1) in file: lib\support\0.2.805/primitives.sharp:1095:15: note:  
		    static def to_lower(ch: var) : var {
		              ^

0 [0x0]: line: 1096 istore 65   
2 [0x2]:            loadl ebx, fp+0   
3 [0x3]:            loadval ecx   
4 [0x4]:            lte ecx, ebx   
5 [0x5]:            movr ebx, cmt   
6 [0x6]:            skne ebx // pc = 13   
7 [0x7]:            ipushl #0   
8 [0x8]:            movi #90, ebx   
10 [0xa]:            loadval ecx   
11 [0xb]:            lte ecx, ebx   
12 [0xc]:            movr ebx, cmt   
13 [0xd]:            movr cmt, ebx   
14 [0xe]:            jne 27   
15 [0xf]: line: 1097 istore 97   
17 [0x11]:            ipushl #0   
18 [0x12]:            movi #65, ebx   
20 [0x14]:            loadval ecx   
21 [0x15]:            sub ecx, ebx -> ebx   
22 [0x16]:            loadval ecx   
23 [0x17]:            add ecx, ebx -> ebx   
24 [0x18]:            return_val ebx   
25 [0x19]:            ret   
26 [0x1a]:            jmp @30   
27 [0x1b]: line: 1099 loadl ebx, fp+0   
28 [0x1c]:            return_val ebx   
29 [0x1d]:            ret   
30 [0x1e]:            nop   


function: std#char.to_upper[2729] params(1) in file: lib\support\0.2.805/primitives.sharp:1102:15: note:  
		    static def to_upper(ch: var) : var {
		              ^

0 [0x0]: line: 1103 istore 97   
2 [0x2]:            loadl ebx, fp+0   
3 [0x3]:            loadval ecx   
4 [0x4]:            lte ecx, ebx   
5 [0x5]:            movr ebx, cmt   
6 [0x6]:            skne ebx // pc = 13   
7 [0x7]:            ipushl #0   
8 [0x8]:            movi #122, ebx   
10 [0xa]:            loadval ecx   
11 [0xb]:            lte ecx, ebx   
12 [0xc]:            movr ebx, cmt   
13 [0xd]:            movr cmt, ebx   
14 [0xe]:            jne 27   
15 [0xf]: line: 1104 istore 65   
17 [0x11]:            ipushl #0   
18 [0x12]:            movi #97, ebx   
20 [0x14]:            loadval ecx   
21 [0x15]:            sub ecx, ebx -> ebx   
22 [0x16]:            loadval ecx   
23 [0x17]:            add ecx, ebx -> ebx   
24 [0x18]:            return_val ebx   
25 [0x19]:            ret   
26 [0x1a]:            jmp @30   
27 [0x1b]: line: 1106 loadl ebx, fp+0   
28 [0x1c]:            return_val ebx   
29 [0x1d]:            ret   
30 [0x1e]:            nop   


constructor: std#char.char[2730] params(0) in file: lib\support\0.2.805/primitives.sharp:974:6: note:  
		class char base integer<_int8> {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1567 // <std#integer<_int8>.integer>   
2 [0x2]:         ret   


constructor: std#byte.byte[2731] params(1) in file: lib\support\0.2.805/primitives.sharp:1110:9: note:  
		    byte(i : long) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @2547 // <std#uchar.uchar>   
9 [0x9]:         ret   


constructor: std#byte.byte[2732] params(1) in file: lib\support\0.2.805/primitives.sharp:1111:9: note:  
		    byte(i : int) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @2547 // <std#uchar.uchar>   
9 [0x9]:         ret   


constructor: std#byte.byte[2733] params(1) in file: lib\support\0.2.805/primitives.sharp:1112:9: note:  
		    byte(i : short) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @2547 // <std#uchar.uchar>   
9 [0x9]:         ret   


constructor: std#byte.byte[2734] params(1) in file: lib\support\0.2.805/primitives.sharp:1113:9: note:  
		    byte(i : char) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @2547 // <std#uchar.uchar>   
9 [0x9]:         ret   


constructor: std#byte.byte[2735] params(1) in file: lib\support\0.2.805/primitives.sharp:1114:9: note:  
		    byte(i : byte) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @2547 // <std#uchar.uchar>   
9 [0x9]:         ret   


constructor: std#byte.byte[2736] params(1) in file: lib\support\0.2.805/primitives.sharp:1115:9: note:  
		    byte(i : bool) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @2547 // <std#uchar.uchar>   
9 [0x9]:         ret   


constructor: std#byte.byte[2737] params(1) in file: lib\support\0.2.805/primitives.sharp:1116:9: note:  
		    byte(i : ulong) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @2547 // <std#uchar.uchar>   
9 [0x9]:         ret   


constructor: std#byte.byte[2738] params(1) in file: lib\support\0.2.805/primitives.sharp:1117:9: note:  
		    byte(i : uint) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @2547 // <std#uchar.uchar>   
9 [0x9]:         ret   


constructor: std#byte.byte[2739] params(1) in file: lib\support\0.2.805/primitives.sharp:1118:9: note:  
		    byte(i : ushort) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @2547 // <std#uchar.uchar>   
9 [0x9]:         ret   


constructor: std#byte.byte[2740] params(1) in file: lib\support\0.2.805/primitives.sharp:1119:9: note:  
		    byte(i : uchar) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @2547 // <std#uchar.uchar>   
9 [0x9]:         ret   


constructor: std#byte.byte[2741] params(1) in file: lib\support\0.2.805/primitives.sharp:1120:9: note:  
		    byte(i : var) -> base(i) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         ipushl #1   
2 [0x2]:         call @2547 // <std#uchar.uchar>   
3 [0x3]:         ret   


overload function: std#byte.operator![2742] params(0) in file: lib\support\0.2.805/primitives.sharp:1122:8: note:  
		    def operator!() := (!value);
		       ^

0 [0x0]: line: 1122 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            not ebx, ebx   
7 [0x7]:            return_val ebx   
8 [0x8]:            ret   


overload function: std#byte.operator++[2743] params(0) in file: lib\support\0.2.805/primitives.sharp:1123:8: note:  
		    def operator++() := (++value);
		       ^

0 [0x0]: line: 1123 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            inc ebx   
7 [0x7]:            movu8 ebx, ebx   
8 [0x8]:            movi #0, adx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            return_val ebx   
12 [0xc]:            ret   


overload function: std#byte.operator++[2744] params(1) in file: lib\support\0.2.805/primitives.sharp:1124:8: note:  
		    def operator++(num : var) := (value++);
		       ^

0 [0x0]: line: 1124 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            movr egx, ebx   
7 [0x7]:            inc ebx   
8 [0x8]:            movu8 ebx, ebx   
9 [0x9]:            movi #0, adx   
11 [0xb]:            rmov adx, ebx   
12 [0xc]:            movr ebx, egx   
13 [0xd]:            return_val ebx   
14 [0xe]:            ret   


overload function: std#byte.operator--[2745] params(0) in file: lib\support\0.2.805/primitives.sharp:1125:8: note:  
		    def operator--() := (--value);
		       ^

0 [0x0]: line: 1125 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            dec ebx   
7 [0x7]:            movu8 ebx, ebx   
8 [0x8]:            movi #0, adx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            return_val ebx   
12 [0xc]:            ret   


overload function: std#byte.operator--[2746] params(1) in file: lib\support\0.2.805/primitives.sharp:1126:8: note:  
		    def operator--(num : var) := (value--);
		       ^

0 [0x0]: line: 1126 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            movr egx, ebx   
7 [0x7]:            dec ebx   
8 [0x8]:            movu8 ebx, ebx   
9 [0x9]:            movi #0, adx   
11 [0xb]:            rmov adx, ebx   
12 [0xc]:            movr ebx, egx   
13 [0xd]:            return_val ebx   
14 [0xe]:            ret   


overload function: std#byte.operator+=[2747] params(1) in file: lib\support\0.2.805/primitives.sharp:1128:8: note:  
		    def operator+=(num : ulong)  := (value+=num.value);
		       ^

0 [0x0]: line: 1128 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator+=[2748] params(1) in file: lib\support\0.2.805/primitives.sharp:1129:8: note:  
		    def operator+=(num : long)   := (value+=num.value);
		       ^

0 [0x0]: line: 1129 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator+=[2749] params(1) in file: lib\support\0.2.805/primitives.sharp:1130:8: note:  
		    def operator+=(num : uint)   := (value+=num.value);
		       ^

0 [0x0]: line: 1130 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator+=[2750] params(1) in file: lib\support\0.2.805/primitives.sharp:1131:8: note:  
		    def operator+=(num : int)    := (value+=num.value);
		       ^

0 [0x0]: line: 1131 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator+=[2751] params(1) in file: lib\support\0.2.805/primitives.sharp:1132:8: note:  
		    def operator+=(num : ushort) := (value+=num.value);
		       ^

0 [0x0]: line: 1132 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator+=[2752] params(1) in file: lib\support\0.2.805/primitives.sharp:1133:8: note:  
		    def operator+=(num : short)  := (value+=num.value);
		       ^

0 [0x0]: line: 1133 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator+=[2753] params(1) in file: lib\support\0.2.805/primitives.sharp:1134:8: note:  
		    def operator+=(num : uchar)  := (value+=num.value);
		       ^

0 [0x0]: line: 1134 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator+=[2754] params(1) in file: lib\support\0.2.805/primitives.sharp:1135:8: note:  
		    def operator+=(num : char)   := (value+=num.value);
		       ^

0 [0x0]: line: 1135 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator+=[2755] params(1) in file: lib\support\0.2.805/primitives.sharp:1136:8: note:  
		    def operator+=(num : byte)   := (value+=num.value);
		       ^

0 [0x0]: line: 1136 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator+=[2756] params(1) in file: lib\support\0.2.805/primitives.sharp:1137:8: note:  
		    def operator+=(num : bool)   := (value+=num.value);
		       ^

0 [0x0]: line: 1137 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator+=[2757] params(1) in file: lib\support\0.2.805/primitives.sharp:1138:8: note:  
		    def operator+=(num : var)    := (value+=num);
		       ^

0 [0x0]: line: 1138 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            add ecx, ebx -> ebx   
9 [0x9]:            movu8 ebx, ebx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            returnobj   
12 [0xc]:            ret   


overload function: std#byte.operator-=[2758] params(1) in file: lib\support\0.2.805/primitives.sharp:1140:8: note:  
		    def operator-=(num : ulong)  := (value-=num.value);
		       ^

0 [0x0]: line: 1140 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator-=[2759] params(1) in file: lib\support\0.2.805/primitives.sharp:1141:8: note:  
		    def operator-=(num : long)   := (value-=num.value);
		       ^

0 [0x0]: line: 1141 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator-=[2760] params(1) in file: lib\support\0.2.805/primitives.sharp:1142:8: note:  
		    def operator-=(num : uint)   := (value-=num.value);
		       ^

0 [0x0]: line: 1142 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator-=[2761] params(1) in file: lib\support\0.2.805/primitives.sharp:1143:8: note:  
		    def operator-=(num : int)    := (value-=num.value);
		       ^

0 [0x0]: line: 1143 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator-=[2762] params(1) in file: lib\support\0.2.805/primitives.sharp:1144:8: note:  
		    def operator-=(num : ushort) := (value-=num.value);
		       ^

0 [0x0]: line: 1144 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator-=[2763] params(1) in file: lib\support\0.2.805/primitives.sharp:1145:8: note:  
		    def operator-=(num : short)  := (value-=num.value);
		       ^

0 [0x0]: line: 1145 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator-=[2764] params(1) in file: lib\support\0.2.805/primitives.sharp:1146:8: note:  
		    def operator-=(num : uchar)  := (value-=num.value);
		       ^

0 [0x0]: line: 1146 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator-=[2765] params(1) in file: lib\support\0.2.805/primitives.sharp:1147:8: note:  
		    def operator-=(num : char)   := (value-=num.value);
		       ^

0 [0x0]: line: 1147 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator-=[2766] params(1) in file: lib\support\0.2.805/primitives.sharp:1148:8: note:  
		    def operator-=(num : byte)   := (value-=num.value);
		       ^

0 [0x0]: line: 1148 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator-=[2767] params(1) in file: lib\support\0.2.805/primitives.sharp:1149:8: note:  
		    def operator-=(num : bool)   := (value-=num.value);
		       ^

0 [0x0]: line: 1149 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator-=[2768] params(1) in file: lib\support\0.2.805/primitives.sharp:1150:8: note:  
		    def operator-=(num : var)    := (value-=num);
		       ^

0 [0x0]: line: 1150 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            sub ecx, ebx -> ebx   
9 [0x9]:            movu8 ebx, ebx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            returnobj   
12 [0xc]:            ret   


overload function: std#byte.operator*=[2769] params(1) in file: lib\support\0.2.805/primitives.sharp:1152:8: note:  
		    def operator*=(num : ulong)  := (value*=num.value);
		       ^

0 [0x0]: line: 1152 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator*=[2770] params(1) in file: lib\support\0.2.805/primitives.sharp:1153:8: note:  
		    def operator*=(num : long)   := (value*=num.value);
		       ^

0 [0x0]: line: 1153 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator*=[2771] params(1) in file: lib\support\0.2.805/primitives.sharp:1154:8: note:  
		    def operator*=(num : uint)   := (value*=num.value);
		       ^

0 [0x0]: line: 1154 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator*=[2772] params(1) in file: lib\support\0.2.805/primitives.sharp:1155:8: note:  
		    def operator*=(num : int)    := (value*=num.value);
		       ^

0 [0x0]: line: 1155 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator*=[2773] params(1) in file: lib\support\0.2.805/primitives.sharp:1156:8: note:  
		    def operator*=(num : ushort) := (value*=num.value);
		       ^

0 [0x0]: line: 1156 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator*=[2774] params(1) in file: lib\support\0.2.805/primitives.sharp:1157:8: note:  
		    def operator*=(num : short)  := (value*=num.value);
		       ^

0 [0x0]: line: 1157 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator*=[2775] params(1) in file: lib\support\0.2.805/primitives.sharp:1158:8: note:  
		    def operator*=(num : uchar)  := (value*=num.value);
		       ^

0 [0x0]: line: 1158 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator*=[2776] params(1) in file: lib\support\0.2.805/primitives.sharp:1159:8: note:  
		    def operator*=(num : char)   := (value*=num.value);
		       ^

0 [0x0]: line: 1159 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator*=[2777] params(1) in file: lib\support\0.2.805/primitives.sharp:1160:8: note:  
		    def operator*=(num : byte)   := (value*=num.value);
		       ^

0 [0x0]: line: 1160 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator*=[2778] params(1) in file: lib\support\0.2.805/primitives.sharp:1161:8: note:  
		    def operator*=(num : bool)   := (value*=num.value);
		       ^

0 [0x0]: line: 1161 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator*=[2779] params(1) in file: lib\support\0.2.805/primitives.sharp:1162:8: note:  
		    def operator*=(num : var)    := (value*=num);
		       ^

0 [0x0]: line: 1162 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            mul ecx, ebx -> ebx   
9 [0x9]:            movu8 ebx, ebx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            returnobj   
12 [0xc]:            ret   


overload function: std#byte.operator/=[2780] params(1) in file: lib\support\0.2.805/primitives.sharp:1164:8: note:  
		    def operator/=(num : ulong)  := (value/=num.value);
		       ^

0 [0x0]: line: 1164 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator/=[2781] params(1) in file: lib\support\0.2.805/primitives.sharp:1165:8: note:  
		    def operator/=(num : long)   := (value/=num.value);
		       ^

0 [0x0]: line: 1165 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator/=[2782] params(1) in file: lib\support\0.2.805/primitives.sharp:1166:8: note:  
		    def operator/=(num : uint)   := (value/=num.value);
		       ^

0 [0x0]: line: 1166 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator/=[2783] params(1) in file: lib\support\0.2.805/primitives.sharp:1167:8: note:  
		    def operator/=(num : int)    := (value/=num.value);
		       ^

0 [0x0]: line: 1167 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator/=[2784] params(1) in file: lib\support\0.2.805/primitives.sharp:1168:8: note:  
		    def operator/=(num : ushort) := (value/=num.value);
		       ^

0 [0x0]: line: 1168 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator/=[2785] params(1) in file: lib\support\0.2.805/primitives.sharp:1169:8: note:  
		    def operator/=(num : short)  := (value/=num.value);
		       ^

0 [0x0]: line: 1169 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator/=[2786] params(1) in file: lib\support\0.2.805/primitives.sharp:1170:8: note:  
		    def operator/=(num : uchar)  := (value/=num.value);
		       ^

0 [0x0]: line: 1170 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator/=[2787] params(1) in file: lib\support\0.2.805/primitives.sharp:1171:8: note:  
		    def operator/=(num : char)   := (value/=num.value);
		       ^

0 [0x0]: line: 1171 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator/=[2788] params(1) in file: lib\support\0.2.805/primitives.sharp:1172:8: note:  
		    def operator/=(num : byte)   := (value/=num.value);
		       ^

0 [0x0]: line: 1172 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator/=[2789] params(1) in file: lib\support\0.2.805/primitives.sharp:1173:8: note:  
		    def operator/=(num : bool)   := (value/=num.value);
		       ^

0 [0x0]: line: 1173 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator/=[2790] params(1) in file: lib\support\0.2.805/primitives.sharp:1174:8: note:  
		    def operator/=(num : var)    := (value/=num);
		       ^

0 [0x0]: line: 1174 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            div ecx, ebx -> ebx   
9 [0x9]:            movu8 ebx, ebx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            returnobj   
12 [0xc]:            ret   


overload function: std#byte.operator%=[2791] params(1) in file: lib\support\0.2.805/primitives.sharp:1176:8: note:  
		    def operator%=(num : ulong)  := (value%=num.value);
		       ^

0 [0x0]: line: 1176 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator%=[2792] params(1) in file: lib\support\0.2.805/primitives.sharp:1177:8: note:  
		    def operator%=(num : long)   := (value%=num.value);
		       ^

0 [0x0]: line: 1177 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator%=[2793] params(1) in file: lib\support\0.2.805/primitives.sharp:1178:8: note:  
		    def operator%=(num : uint)   := (value%=num.value);
		       ^

0 [0x0]: line: 1178 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator%=[2794] params(1) in file: lib\support\0.2.805/primitives.sharp:1179:8: note:  
		    def operator%=(num : int)    := (value%=num.value);
		       ^

0 [0x0]: line: 1179 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator%=[2795] params(1) in file: lib\support\0.2.805/primitives.sharp:1180:8: note:  
		    def operator%=(num : ushort) := (value%=num.value);
		       ^

0 [0x0]: line: 1180 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator%=[2796] params(1) in file: lib\support\0.2.805/primitives.sharp:1181:8: note:  
		    def operator%=(num : short)  := (value%=num.value);
		       ^

0 [0x0]: line: 1181 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator%=[2797] params(1) in file: lib\support\0.2.805/primitives.sharp:1182:8: note:  
		    def operator%=(num : uchar)  := (value%=num.value);
		       ^

0 [0x0]: line: 1182 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator%=[2798] params(1) in file: lib\support\0.2.805/primitives.sharp:1183:8: note:  
		    def operator%=(num : char)   := (value%=num.value);
		       ^

0 [0x0]: line: 1183 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator%=[2799] params(1) in file: lib\support\0.2.805/primitives.sharp:1184:8: note:  
		    def operator%=(num : byte)   := (value%=num.value);
		       ^

0 [0x0]: line: 1184 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator%=[2800] params(1) in file: lib\support\0.2.805/primitives.sharp:1185:8: note:  
		    def operator%=(num : bool)   := (value%=num.value);
		       ^

0 [0x0]: line: 1185 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator%=[2801] params(1) in file: lib\support\0.2.805/primitives.sharp:1186:8: note:  
		    def operator%=(num : var)    := (value%=num);
		       ^

0 [0x0]: line: 1186 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            mod ecx, ebx -> ebx   
9 [0x9]:            movu8 ebx, ebx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            returnobj   
12 [0xc]:            ret   


overload function: std#byte.operator&=[2802] params(1) in file: lib\support\0.2.805/primitives.sharp:1188:8: note:  
		    def operator&=(num : ulong)  := (value&=num.value);
		       ^

0 [0x0]: line: 1188 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#byte.operator&=[2803] params(1) in file: lib\support\0.2.805/primitives.sharp:1189:8: note:  
		    def operator&=(num : long)   := (value&=num.value);
		       ^

0 [0x0]: line: 1189 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#byte.operator&=[2804] params(1) in file: lib\support\0.2.805/primitives.sharp:1190:8: note:  
		    def operator&=(num : uint)   := (value&=num.value);
		       ^

0 [0x0]: line: 1190 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#byte.operator&=[2805] params(1) in file: lib\support\0.2.805/primitives.sharp:1191:8: note:  
		    def operator&=(num : int)    := (value&=num.value);
		       ^

0 [0x0]: line: 1191 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#byte.operator&=[2806] params(1) in file: lib\support\0.2.805/primitives.sharp:1192:8: note:  
		    def operator&=(num : ushort) := (value&=num.value);
		       ^

0 [0x0]: line: 1192 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#byte.operator&=[2807] params(1) in file: lib\support\0.2.805/primitives.sharp:1193:8: note:  
		    def operator&=(num : short)  := (value&=num.value);
		       ^

0 [0x0]: line: 1193 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#byte.operator&=[2808] params(1) in file: lib\support\0.2.805/primitives.sharp:1194:8: note:  
		    def operator&=(num : uchar)  := (value&=num.value);
		       ^

0 [0x0]: line: 1194 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#byte.operator&=[2809] params(1) in file: lib\support\0.2.805/primitives.sharp:1195:8: note:  
		    def operator&=(num : char)   := (value&=num.value);
		       ^

0 [0x0]: line: 1195 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#byte.operator&=[2810] params(1) in file: lib\support\0.2.805/primitives.sharp:1196:8: note:  
		    def operator&=(num : byte)   := (value&=num.value);
		       ^

0 [0x0]: line: 1196 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#byte.operator&=[2811] params(1) in file: lib\support\0.2.805/primitives.sharp:1197:8: note:  
		    def operator&=(num : bool)   := (value&=num.value);
		       ^

0 [0x0]: line: 1197 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#byte.operator&=[2812] params(1) in file: lib\support\0.2.805/primitives.sharp:1198:8: note:  
		    def operator&=(num : var)    := (value&=num);
		       ^

0 [0x0]: line: 1198 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            and ecx, ebx   
9 [0x9]:            rmov adx, cmt   
10 [0xa]:            returnobj   
11 [0xb]:            ret   


overload function: std#byte.operator|=[2813] params(1) in file: lib\support\0.2.805/primitives.sharp:1200:8: note:  
		    def operator|=(num : ulong)  := (value|=num.value);
		       ^

0 [0x0]: line: 1200 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator|=[2814] params(1) in file: lib\support\0.2.805/primitives.sharp:1201:8: note:  
		    def operator|=(num : long)   := (value|=num.value);
		       ^

0 [0x0]: line: 1201 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator|=[2815] params(1) in file: lib\support\0.2.805/primitives.sharp:1202:8: note:  
		    def operator|=(num : uint)   := (value|=num.value);
		       ^

0 [0x0]: line: 1202 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator|=[2816] params(1) in file: lib\support\0.2.805/primitives.sharp:1203:8: note:  
		    def operator|=(num : int)    := (value|=num.value);
		       ^

0 [0x0]: line: 1203 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator|=[2817] params(1) in file: lib\support\0.2.805/primitives.sharp:1204:8: note:  
		    def operator|=(num : ushort) := (value|=num.value);
		       ^

0 [0x0]: line: 1204 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator|=[2818] params(1) in file: lib\support\0.2.805/primitives.sharp:1205:8: note:  
		    def operator|=(num : short)  := (value|=num.value);
		       ^

0 [0x0]: line: 1205 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator|=[2819] params(1) in file: lib\support\0.2.805/primitives.sharp:1206:8: note:  
		    def operator|=(num : uchar)  := (value|=num.value);
		       ^

0 [0x0]: line: 1206 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator|=[2820] params(1) in file: lib\support\0.2.805/primitives.sharp:1207:8: note:  
		    def operator|=(num : char)   := (value|=num.value);
		       ^

0 [0x0]: line: 1207 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator|=[2821] params(1) in file: lib\support\0.2.805/primitives.sharp:1208:8: note:  
		    def operator|=(num : byte)   := (value|=num.value);
		       ^

0 [0x0]: line: 1208 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator|=[2822] params(1) in file: lib\support\0.2.805/primitives.sharp:1209:8: note:  
		    def operator|=(num : bool)   := (value|=num.value);
		       ^

0 [0x0]: line: 1209 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator|=[2823] params(1) in file: lib\support\0.2.805/primitives.sharp:1210:8: note:  
		    def operator|=(num : var)    := (value|=num);
		       ^

0 [0x0]: line: 1210 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            or ecx, ebx   
9 [0x9]:            movu8 cmt, cmt   
10 [0xa]:            rmov adx, cmt   
11 [0xb]:            returnobj   
12 [0xc]:            ret   


function: std#byte.is_digit[2824] params(1) in file: lib\support\0.2.805/primitives.sharp:1212:15: note:  
		    static def is_digit(ch: var) : var {
		              ^

0 [0x0]: line: 1213 ipushl #0   
1 [0x1]:            movi #48, ebx   
3 [0x3]:            loadval ecx   
4 [0x4]:            gte ecx, ebx   
5 [0x5]:            movr ebx, cmt   
6 [0x6]:            skne ebx // pc = 12   
7 [0x7]:            ipushl #0   
8 [0x8]:            movi #57, ebx   
10 [0xa]:            loadval ecx   
11 [0xb]:            lte ecx, ebx   
12 [0xc]:            return_val cmt   
13 [0xd]:            ret   


function: std#byte.is_newline[2825] params(1) in file: lib\support\0.2.805/primitives.sharp:1216:15: note:  
		    static def is_newline(ch: var) : var {
		              ^

0 [0x0]: line: 1217 call @1940 // <platform#build.is_windows>   
1 [0x1]:            loadval ebx   
2 [0x2]:            movr cmt, ebx   
3 [0x3]:            jne 19   
4 [0x4]:            ipushl #0   
5 [0x5]:            movi #10, ebx   
7 [0x7]:            loadval ecx   
8 [0x8]:            test ecx, ebx   
9 [0x9]:            movr ebx, cmt   
10 [0xa]:            skpe ebx // pc = 16   
11 [0xb]:            ipushl #0   
12 [0xc]:            movi #13, ebx   
14 [0xe]:            loadval ecx   
15 [0xf]:            test ecx, ebx   
16 [0x10]:            return_val cmt   
17 [0x11]:            ret   
18 [0x12]:            jmp @26   
19 [0x13]: line: 1218 ipushl #0   
20 [0x14]:            movi #10, ebx   
22 [0x16]:            loadval ecx   
23 [0x17]:            test ecx, ebx   
24 [0x18]:            return_val cmt   
25 [0x19]:            ret   
26 [0x1a]:            nop   


function: std#byte.is_alpha[2826] params(1) in file: lib\support\0.2.805/primitives.sharp:1221:15: note:  
		    static def is_alpha(ch: var) : var {
		              ^

0 [0x0]: line: 1222 ipushl #0   
1 [0x1]:            movi #65, ebx   
3 [0x3]:            loadval ecx   
4 [0x4]:            gte ecx, ebx   
5 [0x5]:            movr ebx, cmt   
6 [0x6]:            skne ebx // pc = 13   
7 [0x7]:            ipushl #0   
8 [0x8]:            movi #90, ebx   
10 [0xa]:            loadval ecx   
11 [0xb]:            lte ecx, ebx   
12 [0xc]:            movr ebx, cmt   
13 [0xd]:            skpe ebx // pc = 26   
14 [0xe]:            ipushl #0   
15 [0xf]:            movi #97, ebx   
17 [0x11]:            loadval ecx   
18 [0x12]:            gte ecx, ebx   
19 [0x13]:            movr ebx, cmt   
20 [0x14]:            skne ebx // pc = 26   
21 [0x15]:            ipushl #0   
22 [0x16]:            movi #122, ebx   
24 [0x18]:            loadval ecx   
25 [0x19]:            lte ecx, ebx   
26 [0x1a]:            return_val cmt   
27 [0x1b]:            ret   


function: std#byte.is_alpha_num[2827] params(1) in file: lib\support\0.2.805/primitives.sharp:1226:15: note:  
		    static def is_alpha_num(ch: var) : var {
		              ^

0 [0x0]: line: 1227 ipushl #0   
1 [0x1]:            call @2826 // <std#byte.is_alpha>   
2 [0x2]:            loadval ebx   
3 [0x3]:            skpe ebx // pc = 7   
4 [0x4]:            ipushl #0   
5 [0x5]:            call @2824 // <std#byte.is_digit>   
6 [0x6]:            loadval ebx   
7 [0x7]:            return_val ebx   
8 [0x8]:            ret   


function: std#byte.to_lower[2828] params(1) in file: lib\support\0.2.805/primitives.sharp:1230:15: note:  
		    static def to_lower(ch: var) : var {
		              ^

0 [0x0]: line: 1231 istore 65   
2 [0x2]:            loadl ebx, fp+0   
3 [0x3]:            loadval ecx   
4 [0x4]:            lte ecx, ebx   
5 [0x5]:            movr ebx, cmt   
6 [0x6]:            skne ebx // pc = 13   
7 [0x7]:            ipushl #0   
8 [0x8]:            movi #90, ebx   
10 [0xa]:            loadval ecx   
11 [0xb]:            lte ecx, ebx   
12 [0xc]:            movr ebx, cmt   
13 [0xd]:            movr cmt, ebx   
14 [0xe]:            jne 27   
15 [0xf]: line: 1232 istore 97   
17 [0x11]:            ipushl #0   
18 [0x12]:            movi #65, ebx   
20 [0x14]:            loadval ecx   
21 [0x15]:            sub ecx, ebx -> ebx   
22 [0x16]:            loadval ecx   
23 [0x17]:            add ecx, ebx -> ebx   
24 [0x18]:            return_val ebx   
25 [0x19]:            ret   
26 [0x1a]:            jmp @30   
27 [0x1b]: line: 1234 loadl ebx, fp+0   
28 [0x1c]:            return_val ebx   
29 [0x1d]:            ret   
30 [0x1e]:            nop   


function: std#byte.to_upper[2829] params(1) in file: lib\support\0.2.805/primitives.sharp:1237:15: note:  
		    static def to_upper(ch: var) : var {
		              ^

0 [0x0]: line: 1238 istore 97   
2 [0x2]:            loadl ebx, fp+0   
3 [0x3]:            loadval ecx   
4 [0x4]:            lte ecx, ebx   
5 [0x5]:            movr ebx, cmt   
6 [0x6]:            skne ebx // pc = 13   
7 [0x7]:            ipushl #0   
8 [0x8]:            movi #122, ebx   
10 [0xa]:            loadval ecx   
11 [0xb]:            lte ecx, ebx   
12 [0xc]:            movr ebx, cmt   
13 [0xd]:            movr cmt, ebx   
14 [0xe]:            jne 27   
15 [0xf]: line: 1239 istore 65   
17 [0x11]:            ipushl #0   
18 [0x12]:            movi #97, ebx   
20 [0x14]:            loadval ecx   
21 [0x15]:            sub ecx, ebx -> ebx   
22 [0x16]:            loadval ecx   
23 [0x17]:            add ecx, ebx -> ebx   
24 [0x18]:            return_val ebx   
25 [0x19]:            ret   
26 [0x1a]:            jmp @30   
27 [0x1b]: line: 1241 loadl ebx, fp+0   
28 [0x1c]:            return_val ebx   
29 [0x1d]:            ret   
30 [0x1e]:            nop   


constructor: std#byte.byte[2830] params(0) in file: lib\support\0.2.805/primitives.sharp:1109:6: note:  
		class byte base uchar {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @2630 // <std#uchar.uchar>   
2 [0x2]:         ret   


constructor: std#bool.bool[2831] params(1) in file: lib\support\0.2.805/primitives.sharp:1245:9: note:  
		    bool(i : long) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1375 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#bool.bool[2832] params(1) in file: lib\support\0.2.805/primitives.sharp:1246:9: note:  
		    bool(i : int) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1375 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#bool.bool[2833] params(1) in file: lib\support\0.2.805/primitives.sharp:1247:9: note:  
		    bool(i : short) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1375 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#bool.bool[2834] params(1) in file: lib\support\0.2.805/primitives.sharp:1248:9: note:  
		    bool(i : char) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1375 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#bool.bool[2835] params(1) in file: lib\support\0.2.805/primitives.sharp:1249:9: note:  
		    bool(i : byte) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1375 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#bool.bool[2836] params(1) in file: lib\support\0.2.805/primitives.sharp:1250:9: note:  
		    bool(i : bool) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1375 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#bool.bool[2837] params(1) in file: lib\support\0.2.805/primitives.sharp:1251:9: note:  
		    bool(i : ulong) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1375 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#bool.bool[2838] params(1) in file: lib\support\0.2.805/primitives.sharp:1252:9: note:  
		    bool(i : uint) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1375 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#bool.bool[2839] params(1) in file: lib\support\0.2.805/primitives.sharp:1253:9: note:  
		    bool(i : ushort) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1375 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#bool.bool[2840] params(1) in file: lib\support\0.2.805/primitives.sharp:1254:9: note:  
		    bool(i : uchar) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1375 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#bool.bool[2841] params(1) in file: lib\support\0.2.805/primitives.sharp:1255:9: note:  
		    bool(i : var) -> base(i) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         ipushl #1   
2 [0x2]:         call @1375 // <std#integer<_int8>.integer>   
3 [0x3]:         ret   


overload function: std#bool.operator![2842] params(0) in file: lib\support\0.2.805/primitives.sharp:1257:8: note:  
		    def operator!() := (!value);
		       ^

0 [0x0]: line: 1257 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            not ebx, ebx   
7 [0x7]:            return_val ebx   
8 [0x8]:            ret   


overload function: std#bool.operator++[2843] params(0) in file: lib\support\0.2.805/primitives.sharp:1258:8: note:  
		    def operator++() := (value = !value);
		       ^

0 [0x0]: line: 1258 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            not ebx, ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            mov8 ebx, ebx   
11 [0xb]:            movi #0, adx   
13 [0xd]:            rmov adx, ebx   
14 [0xe]:            returnobj   
15 [0xf]:            ret   


overload function: std#bool.operator++[2844] params(1) in file: lib\support\0.2.805/primitives.sharp:1259:8: note:  
		    def operator++(num : var) := (!value);
		       ^

0 [0x0]: line: 1259 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            not ebx, ebx   
7 [0x7]:            return_val ebx   
8 [0x8]:            ret   


overload function: std#bool.operator--[2845] params(0) in file: lib\support\0.2.805/primitives.sharp:1260:8: note:  
		    def operator--() := (value = !value);
		       ^

0 [0x0]: line: 1260 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            not ebx, ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            mov8 ebx, ebx   
11 [0xb]:            movi #0, adx   
13 [0xd]:            rmov adx, ebx   
14 [0xe]:            returnobj   
15 [0xf]:            ret   


overload function: std#bool.operator--[2846] params(1) in file: lib\support\0.2.805/primitives.sharp:1261:8: note:  
		    def operator--(num : var) := (value = !value);
		       ^

0 [0x0]: line: 1261 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            not ebx, ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            mov8 ebx, ebx   
11 [0xb]:            movi #0, adx   
13 [0xd]:            rmov adx, ebx   
14 [0xe]:            returnobj   
15 [0xf]:            ret   


overload function: std#bool.operator+=[2847] params(1) in file: lib\support\0.2.805/primitives.sharp:1263:8: note:  
		    def operator+=(num : ulong)  := check_value(value+=num.value);
		       ^

0 [0x0]: line: 1263 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            add ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator+=[2848] params(1) in file: lib\support\0.2.805/primitives.sharp:1264:8: note:  
		    def operator+=(num : long)   := check_value(value+=num.value);
		       ^

0 [0x0]: line: 1264 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            add ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator+=[2849] params(1) in file: lib\support\0.2.805/primitives.sharp:1265:8: note:  
		    def operator+=(num : uint)   := check_value(value+=num.value);
		       ^

0 [0x0]: line: 1265 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            add ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator+=[2850] params(1) in file: lib\support\0.2.805/primitives.sharp:1266:8: note:  
		    def operator+=(num : int)    := check_value(value+=num.value);
		       ^

0 [0x0]: line: 1266 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            add ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator+=[2851] params(1) in file: lib\support\0.2.805/primitives.sharp:1267:8: note:  
		    def operator+=(num : ushort) := check_value(value+=num.value);
		       ^

0 [0x0]: line: 1267 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            add ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator+=[2852] params(1) in file: lib\support\0.2.805/primitives.sharp:1268:8: note:  
		    def operator+=(num : short)  := check_value(value+=num.value);
		       ^

0 [0x0]: line: 1268 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            add ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator+=[2853] params(1) in file: lib\support\0.2.805/primitives.sharp:1269:8: note:  
		    def operator+=(num : uchar)  := check_value(value+=num.value);
		       ^

0 [0x0]: line: 1269 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            add ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator+=[2854] params(1) in file: lib\support\0.2.805/primitives.sharp:1270:8: note:  
		    def operator+=(num : char)   := check_value(value+=num.value);
		       ^

0 [0x0]: line: 1270 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            add ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator+=[2855] params(1) in file: lib\support\0.2.805/primitives.sharp:1271:8: note:  
		    def operator+=(num : byte)   := check_value(value+=num.value);
		       ^

0 [0x0]: line: 1271 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            add ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator+=[2856] params(1) in file: lib\support\0.2.805/primitives.sharp:1272:8: note:  
		    def operator+=(num : bool)   := check_value(value+=num.value);
		       ^

0 [0x0]: line: 1272 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            add ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator+=[2857] params(1) in file: lib\support\0.2.805/primitives.sharp:1273:8: note:  
		    def operator+=(num : var)    := check_value(value+=num);
		       ^

0 [0x0]: line: 1273 pushl 0   
1 [0x1]:            ipushl #1   
2 [0x2]:            movl 0   
3 [0x3]:            movn #0   
5 [0x5]:            movi #0, adx   
7 [0x7]:            iaload ecx, adx   
8 [0x8]:            loadval ebx   
9 [0x9]:            add ecx, ebx -> ebx   
10 [0xa]:            mov8 ebx, ebx   
11 [0xb]:            rmov adx, ebx   
12 [0xc]:            rstore ebx   
13 [0xd]:            call @2924 // <std#bool.check_value>   
14 [0xe]:            loadval ebx   
15 [0xf]:            return_val ebx   
16 [0x10]:            ret   


overload function: std#bool.operator-=[2858] params(1) in file: lib\support\0.2.805/primitives.sharp:1275:8: note:  
		    def operator-=(num : ulong)  := check_value(value-=num.value);
		       ^

0 [0x0]: line: 1275 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            sub ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator-=[2859] params(1) in file: lib\support\0.2.805/primitives.sharp:1276:8: note:  
		    def operator-=(num : long)   := check_value(value-=num.value);
		       ^

0 [0x0]: line: 1276 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            sub ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator-=[2860] params(1) in file: lib\support\0.2.805/primitives.sharp:1277:8: note:  
		    def operator-=(num : uint)   := check_value(value-=num.value);
		       ^

0 [0x0]: line: 1277 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            sub ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator-=[2861] params(1) in file: lib\support\0.2.805/primitives.sharp:1278:8: note:  
		    def operator-=(num : int)    := check_value(value-=num.value);
		       ^

0 [0x0]: line: 1278 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            sub ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator-=[2862] params(1) in file: lib\support\0.2.805/primitives.sharp:1279:8: note:  
		    def operator-=(num : ushort) := check_value(value-=num.value);
		       ^

0 [0x0]: line: 1279 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            sub ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator-=[2863] params(1) in file: lib\support\0.2.805/primitives.sharp:1280:8: note:  
		    def operator-=(num : short)  := check_value(value-=num.value);
		       ^

0 [0x0]: line: 1280 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            sub ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator-=[2864] params(1) in file: lib\support\0.2.805/primitives.sharp:1281:8: note:  
		    def operator-=(num : uchar)  := check_value(value-=num.value);
		       ^

0 [0x0]: line: 1281 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            sub ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator-=[2865] params(1) in file: lib\support\0.2.805/primitives.sharp:1282:8: note:  
		    def operator-=(num : char)   := check_value(value-=num.value);
		       ^

0 [0x0]: line: 1282 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            sub ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator-=[2866] params(1) in file: lib\support\0.2.805/primitives.sharp:1283:8: note:  
		    def operator-=(num : byte)   := check_value(value-=num.value);
		       ^

0 [0x0]: line: 1283 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            sub ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator-=[2867] params(1) in file: lib\support\0.2.805/primitives.sharp:1284:8: note:  
		    def operator-=(num : bool)   := check_value(value-=num.value);
		       ^

0 [0x0]: line: 1284 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            sub ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator-=[2868] params(1) in file: lib\support\0.2.805/primitives.sharp:1285:8: note:  
		    def operator-=(num : var)    := check_value(value-=num);
		       ^

0 [0x0]: line: 1285 pushl 0   
1 [0x1]:            ipushl #1   
2 [0x2]:            movl 0   
3 [0x3]:            movn #0   
5 [0x5]:            movi #0, adx   
7 [0x7]:            iaload ecx, adx   
8 [0x8]:            loadval ebx   
9 [0x9]:            sub ecx, ebx -> ebx   
10 [0xa]:            mov8 ebx, ebx   
11 [0xb]:            rmov adx, ebx   
12 [0xc]:            rstore ebx   
13 [0xd]:            call @2924 // <std#bool.check_value>   
14 [0xe]:            loadval ebx   
15 [0xf]:            return_val ebx   
16 [0x10]:            ret   


overload function: std#bool.operator*=[2869] params(1) in file: lib\support\0.2.805/primitives.sharp:1287:8: note:  
		    def operator*=(num : ulong)  := check_value(value*=num.value);
		       ^

0 [0x0]: line: 1287 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mul ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator*=[2870] params(1) in file: lib\support\0.2.805/primitives.sharp:1288:8: note:  
		    def operator*=(num : long)   := check_value(value*=num.value);
		       ^

0 [0x0]: line: 1288 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mul ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator*=[2871] params(1) in file: lib\support\0.2.805/primitives.sharp:1289:8: note:  
		    def operator*=(num : uint)   := check_value(value*=num.value);
		       ^

0 [0x0]: line: 1289 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mul ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator*=[2872] params(1) in file: lib\support\0.2.805/primitives.sharp:1290:8: note:  
		    def operator*=(num : int)    := check_value(value*=num.value);
		       ^

0 [0x0]: line: 1290 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mul ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator*=[2873] params(1) in file: lib\support\0.2.805/primitives.sharp:1291:8: note:  
		    def operator*=(num : ushort) := check_value(value*=num.value);
		       ^

0 [0x0]: line: 1291 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mul ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator*=[2874] params(1) in file: lib\support\0.2.805/primitives.sharp:1292:8: note:  
		    def operator*=(num : short)  := check_value(value*=num.value);
		       ^

0 [0x0]: line: 1292 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mul ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator*=[2875] params(1) in file: lib\support\0.2.805/primitives.sharp:1293:8: note:  
		    def operator*=(num : uchar)  := check_value(value*=num.value);
		       ^

0 [0x0]: line: 1293 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mul ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator*=[2876] params(1) in file: lib\support\0.2.805/primitives.sharp:1294:8: note:  
		    def operator*=(num : char)   := check_value(value*=num.value);
		       ^

0 [0x0]: line: 1294 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mul ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator*=[2877] params(1) in file: lib\support\0.2.805/primitives.sharp:1295:8: note:  
		    def operator*=(num : byte)   := check_value(value*=num.value);
		       ^

0 [0x0]: line: 1295 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mul ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator*=[2878] params(1) in file: lib\support\0.2.805/primitives.sharp:1296:8: note:  
		    def operator*=(num : bool)   := check_value(value*=num.value);
		       ^

0 [0x0]: line: 1296 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mul ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator*=[2879] params(1) in file: lib\support\0.2.805/primitives.sharp:1297:8: note:  
		    def operator*=(num : var)    := check_value(value*=num);
		       ^

0 [0x0]: line: 1297 pushl 0   
1 [0x1]:            ipushl #1   
2 [0x2]:            movl 0   
3 [0x3]:            movn #0   
5 [0x5]:            movi #0, adx   
7 [0x7]:            iaload ecx, adx   
8 [0x8]:            loadval ebx   
9 [0x9]:            mul ecx, ebx -> ebx   
10 [0xa]:            mov8 ebx, ebx   
11 [0xb]:            rmov adx, ebx   
12 [0xc]:            rstore ebx   
13 [0xd]:            call @2924 // <std#bool.check_value>   
14 [0xe]:            loadval ebx   
15 [0xf]:            return_val ebx   
16 [0x10]:            ret   


overload function: std#bool.operator/=[2880] params(1) in file: lib\support\0.2.805/primitives.sharp:1299:8: note:  
		    def operator/=(num : ulong)  := check_value(value/=num.value);
		       ^

0 [0x0]: line: 1299 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            div ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator/=[2881] params(1) in file: lib\support\0.2.805/primitives.sharp:1300:8: note:  
		    def operator/=(num : long)   := check_value(value/=num.value);
		       ^

0 [0x0]: line: 1300 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            div ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator/=[2882] params(1) in file: lib\support\0.2.805/primitives.sharp:1301:8: note:  
		    def operator/=(num : uint)   := check_value(value/=num.value);
		       ^

0 [0x0]: line: 1301 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            div ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator/=[2883] params(1) in file: lib\support\0.2.805/primitives.sharp:1302:8: note:  
		    def operator/=(num : int)    := check_value(value/=num.value);
		       ^

0 [0x0]: line: 1302 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            div ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator/=[2884] params(1) in file: lib\support\0.2.805/primitives.sharp:1303:8: note:  
		    def operator/=(num : ushort) := check_value(value/=num.value);
		       ^

0 [0x0]: line: 1303 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            div ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator/=[2885] params(1) in file: lib\support\0.2.805/primitives.sharp:1304:8: note:  
		    def operator/=(num : short)  := check_value(value/=num.value);
		       ^

0 [0x0]: line: 1304 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            div ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator/=[2886] params(1) in file: lib\support\0.2.805/primitives.sharp:1305:8: note:  
		    def operator/=(num : uchar)  := check_value(value/=num.value);
		       ^

0 [0x0]: line: 1305 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            div ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator/=[2887] params(1) in file: lib\support\0.2.805/primitives.sharp:1306:8: note:  
		    def operator/=(num : char)   := check_value(value/=num.value);
		       ^

0 [0x0]: line: 1306 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            div ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator/=[2888] params(1) in file: lib\support\0.2.805/primitives.sharp:1307:8: note:  
		    def operator/=(num : byte)   := check_value(value/=num.value);
		       ^

0 [0x0]: line: 1307 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            div ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator/=[2889] params(1) in file: lib\support\0.2.805/primitives.sharp:1308:8: note:  
		    def operator/=(num : bool)   := check_value(value/=num.value);
		       ^

0 [0x0]: line: 1308 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            div ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator/=[2890] params(1) in file: lib\support\0.2.805/primitives.sharp:1309:8: note:  
		    def operator/=(num : var)    := check_value(value/=num);
		       ^

0 [0x0]: line: 1309 pushl 0   
1 [0x1]:            ipushl #1   
2 [0x2]:            movl 0   
3 [0x3]:            movn #0   
5 [0x5]:            movi #0, adx   
7 [0x7]:            iaload ecx, adx   
8 [0x8]:            loadval ebx   
9 [0x9]:            div ecx, ebx -> ebx   
10 [0xa]:            mov8 ebx, ebx   
11 [0xb]:            rmov adx, ebx   
12 [0xc]:            rstore ebx   
13 [0xd]:            call @2924 // <std#bool.check_value>   
14 [0xe]:            loadval ebx   
15 [0xf]:            return_val ebx   
16 [0x10]:            ret   


overload function: std#bool.operator%=[2891] params(1) in file: lib\support\0.2.805/primitives.sharp:1311:8: note:  
		    def operator%=(num : ulong)  := check_value(value%=num.value);
		       ^

0 [0x0]: line: 1311 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mod ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator%=[2892] params(1) in file: lib\support\0.2.805/primitives.sharp:1312:8: note:  
		    def operator%=(num : long)   := check_value(value%=num.value);
		       ^

0 [0x0]: line: 1312 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mod ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator%=[2893] params(1) in file: lib\support\0.2.805/primitives.sharp:1313:8: note:  
		    def operator%=(num : uint)   := check_value(value%=num.value);
		       ^

0 [0x0]: line: 1313 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mod ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator%=[2894] params(1) in file: lib\support\0.2.805/primitives.sharp:1314:8: note:  
		    def operator%=(num : int)    := check_value(value%=num.value);
		       ^

0 [0x0]: line: 1314 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mod ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator%=[2895] params(1) in file: lib\support\0.2.805/primitives.sharp:1315:8: note:  
		    def operator%=(num : ushort) := check_value(value%=num.value);
		       ^

0 [0x0]: line: 1315 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mod ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator%=[2896] params(1) in file: lib\support\0.2.805/primitives.sharp:1316:8: note:  
		    def operator%=(num : short)  := check_value(value%=num.value);
		       ^

0 [0x0]: line: 1316 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mod ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator%=[2897] params(1) in file: lib\support\0.2.805/primitives.sharp:1317:8: note:  
		    def operator%=(num : uchar)  := check_value(value%=num.value);
		       ^

0 [0x0]: line: 1317 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mod ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator%=[2898] params(1) in file: lib\support\0.2.805/primitives.sharp:1318:8: note:  
		    def operator%=(num : char)   := check_value(value%=num.value);
		       ^

0 [0x0]: line: 1318 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mod ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator%=[2899] params(1) in file: lib\support\0.2.805/primitives.sharp:1319:8: note:  
		    def operator%=(num : byte)   := check_value(value%=num.value);
		       ^

0 [0x0]: line: 1319 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mod ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator%=[2900] params(1) in file: lib\support\0.2.805/primitives.sharp:1320:8: note:  
		    def operator%=(num : bool)   := check_value(value%=num.value);
		       ^

0 [0x0]: line: 1320 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mod ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator%=[2901] params(1) in file: lib\support\0.2.805/primitives.sharp:1321:8: note:  
		    def operator%=(num : var)    := check_value(value%=num);
		       ^

0 [0x0]: line: 1321 pushl 0   
1 [0x1]:            ipushl #1   
2 [0x2]:            movl 0   
3 [0x3]:            movn #0   
5 [0x5]:            movi #0, adx   
7 [0x7]:            iaload ecx, adx   
8 [0x8]:            loadval ebx   
9 [0x9]:            mod ecx, ebx -> ebx   
10 [0xa]:            mov8 ebx, ebx   
11 [0xb]:            rmov adx, ebx   
12 [0xc]:            rstore ebx   
13 [0xd]:            call @2924 // <std#bool.check_value>   
14 [0xe]:            loadval ebx   
15 [0xf]:            return_val ebx   
16 [0x10]:            ret   


overload function: std#bool.operator&=[2902] params(1) in file: lib\support\0.2.805/primitives.sharp:1323:8: note:  
		    def operator&=(num : ulong)  := check_value(value&=num.value);
		       ^

0 [0x0]: line: 1323 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            and ecx, ebx   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            rstore cmt   
18 [0x12]:            call @2924 // <std#bool.check_value>   
19 [0x13]:            loadval ebx   
20 [0x14]:            return_val ebx   
21 [0x15]:            ret   


overload function: std#bool.operator&=[2903] params(1) in file: lib\support\0.2.805/primitives.sharp:1324:8: note:  
		    def operator&=(num : long)   := check_value(value&=num.value);
		       ^

0 [0x0]: line: 1324 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            and ecx, ebx   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            rstore cmt   
18 [0x12]:            call @2924 // <std#bool.check_value>   
19 [0x13]:            loadval ebx   
20 [0x14]:            return_val ebx   
21 [0x15]:            ret   


overload function: std#bool.operator&=[2904] params(1) in file: lib\support\0.2.805/primitives.sharp:1325:8: note:  
		    def operator&=(num : uint)   := check_value(value&=num.value);
		       ^

0 [0x0]: line: 1325 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            and ecx, ebx   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            rstore cmt   
18 [0x12]:            call @2924 // <std#bool.check_value>   
19 [0x13]:            loadval ebx   
20 [0x14]:            return_val ebx   
21 [0x15]:            ret   


overload function: std#bool.operator&=[2905] params(1) in file: lib\support\0.2.805/primitives.sharp:1326:8: note:  
		    def operator&=(num : int)    := check_value(value&=num.value);
		       ^

0 [0x0]: line: 1326 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            and ecx, ebx   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            rstore cmt   
18 [0x12]:            call @2924 // <std#bool.check_value>   
19 [0x13]:            loadval ebx   
20 [0x14]:            return_val ebx   
21 [0x15]:            ret   


overload function: std#bool.operator&=[2906] params(1) in file: lib\support\0.2.805/primitives.sharp:1327:8: note:  
		    def operator&=(num : ushort) := check_value(value&=num.value);
		       ^

0 [0x0]: line: 1327 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            and ecx, ebx   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            rstore cmt   
18 [0x12]:            call @2924 // <std#bool.check_value>   
19 [0x13]:            loadval ebx   
20 [0x14]:            return_val ebx   
21 [0x15]:            ret   


overload function: std#bool.operator&=[2907] params(1) in file: lib\support\0.2.805/primitives.sharp:1328:8: note:  
		    def operator&=(num : short)  := check_value(value&=num.value);
		       ^

0 [0x0]: line: 1328 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            and ecx, ebx   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            rstore cmt   
18 [0x12]:            call @2924 // <std#bool.check_value>   
19 [0x13]:            loadval ebx   
20 [0x14]:            return_val ebx   
21 [0x15]:            ret   


overload function: std#bool.operator&=[2908] params(1) in file: lib\support\0.2.805/primitives.sharp:1329:8: note:  
		    def operator&=(num : uchar)  := check_value(value&=num.value);
		       ^

0 [0x0]: line: 1329 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            and ecx, ebx   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            rstore cmt   
18 [0x12]:            call @2924 // <std#bool.check_value>   
19 [0x13]:            loadval ebx   
20 [0x14]:            return_val ebx   
21 [0x15]:            ret   


overload function: std#bool.operator&=[2909] params(1) in file: lib\support\0.2.805/primitives.sharp:1330:8: note:  
		    def operator&=(num : char)   := check_value(value&=num.value);
		       ^

0 [0x0]: line: 1330 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            and ecx, ebx   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            rstore cmt   
18 [0x12]:            call @2924 // <std#bool.check_value>   
19 [0x13]:            loadval ebx   
20 [0x14]:            return_val ebx   
21 [0x15]:            ret   


overload function: std#bool.operator&=[2910] params(1) in file: lib\support\0.2.805/primitives.sharp:1331:8: note:  
		    def operator&=(num : byte)   := check_value(value&=num.value);
		       ^

0 [0x0]: line: 1331 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            and ecx, ebx   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            rstore cmt   
18 [0x12]:            call @2924 // <std#bool.check_value>   
19 [0x13]:            loadval ebx   
20 [0x14]:            return_val ebx   
21 [0x15]:            ret   


overload function: std#bool.operator&=[2911] params(1) in file: lib\support\0.2.805/primitives.sharp:1332:8: note:  
		    def operator&=(num : bool)   := check_value(value&=num.value);
		       ^

0 [0x0]: line: 1332 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            and ecx, ebx   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            rstore cmt   
18 [0x12]:            call @2924 // <std#bool.check_value>   
19 [0x13]:            loadval ebx   
20 [0x14]:            return_val ebx   
21 [0x15]:            ret   


overload function: std#bool.operator&=[2912] params(1) in file: lib\support\0.2.805/primitives.sharp:1333:8: note:  
		    def operator&=(num : var)    := check_value(value&=num);
		       ^

0 [0x0]: line: 1333 pushl 0   
1 [0x1]:            ipushl #1   
2 [0x2]:            movl 0   
3 [0x3]:            movn #0   
5 [0x5]:            movi #0, adx   
7 [0x7]:            iaload ecx, adx   
8 [0x8]:            loadval ebx   
9 [0x9]:            and ecx, ebx   
10 [0xa]:            rmov adx, cmt   
11 [0xb]:            rstore cmt   
12 [0xc]:            call @2924 // <std#bool.check_value>   
13 [0xd]:            loadval ebx   
14 [0xe]:            return_val ebx   
15 [0xf]:            ret   


overload function: std#bool.operator|=[2913] params(1) in file: lib\support\0.2.805/primitives.sharp:1335:8: note:  
		    def operator|=(num : ulong)  := check_value(value|=num.value);
		       ^

0 [0x0]: line: 1335 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            or ecx, ebx   
16 [0x10]:            mov8 cmt, cmt   
17 [0x11]:            rmov adx, cmt   
18 [0x12]:            rstore cmt   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator|=[2914] params(1) in file: lib\support\0.2.805/primitives.sharp:1336:8: note:  
		    def operator|=(num : long)   := check_value(value|=num.value);
		       ^

0 [0x0]: line: 1336 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            or ecx, ebx   
16 [0x10]:            mov8 cmt, cmt   
17 [0x11]:            rmov adx, cmt   
18 [0x12]:            rstore cmt   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator|=[2915] params(1) in file: lib\support\0.2.805/primitives.sharp:1337:8: note:  
		    def operator|=(num : uint)   := check_value(value|=num.value);
		       ^

0 [0x0]: line: 1337 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            or ecx, ebx   
16 [0x10]:            mov8 cmt, cmt   
17 [0x11]:            rmov adx, cmt   
18 [0x12]:            rstore cmt   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator|=[2916] params(1) in file: lib\support\0.2.805/primitives.sharp:1338:8: note:  
		    def operator|=(num : int)    := check_value(value|=num.value);
		       ^

0 [0x0]: line: 1338 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            or ecx, ebx   
16 [0x10]:            mov8 cmt, cmt   
17 [0x11]:            rmov adx, cmt   
18 [0x12]:            rstore cmt   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator|=[2917] params(1) in file: lib\support\0.2.805/primitives.sharp:1339:8: note:  
		    def operator|=(num : ushort) := check_value(value|=num.value);
		       ^

0 [0x0]: line: 1339 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            or ecx, ebx   
16 [0x10]:            mov8 cmt, cmt   
17 [0x11]:            rmov adx, cmt   
18 [0x12]:            rstore cmt   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator|=[2918] params(1) in file: lib\support\0.2.805/primitives.sharp:1340:8: note:  
		    def operator|=(num : short)  := check_value(value|=num.value);
		       ^

0 [0x0]: line: 1340 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            or ecx, ebx   
16 [0x10]:            mov8 cmt, cmt   
17 [0x11]:            rmov adx, cmt   
18 [0x12]:            rstore cmt   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator|=[2919] params(1) in file: lib\support\0.2.805/primitives.sharp:1341:8: note:  
		    def operator|=(num : uchar)  := check_value(value|=num.value);
		       ^

0 [0x0]: line: 1341 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            or ecx, ebx   
16 [0x10]:            mov8 cmt, cmt   
17 [0x11]:            rmov adx, cmt   
18 [0x12]:            rstore cmt   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator|=[2920] params(1) in file: lib\support\0.2.805/primitives.sharp:1342:8: note:  
		    def operator|=(num : char)   := check_value(value|=num.value);
		       ^

0 [0x0]: line: 1342 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            or ecx, ebx   
16 [0x10]:            mov8 cmt, cmt   
17 [0x11]:            rmov adx, cmt   
18 [0x12]:            rstore cmt   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator|=[2921] params(1) in file: lib\support\0.2.805/primitives.sharp:1343:8: note:  
		    def operator|=(num : byte)   := check_value(value|=num.value);
		       ^

0 [0x0]: line: 1343 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            or ecx, ebx   
16 [0x10]:            mov8 cmt, cmt   
17 [0x11]:            rmov adx, cmt   
18 [0x12]:            rstore cmt   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator|=[2922] params(1) in file: lib\support\0.2.805/primitives.sharp:1344:8: note:  
		    def operator|=(num : bool)   := check_value(value|=num.value);
		       ^

0 [0x0]: line: 1344 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            or ecx, ebx   
16 [0x10]:            mov8 cmt, cmt   
17 [0x11]:            rmov adx, cmt   
18 [0x12]:            rstore cmt   
19 [0x13]:            call @2924 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator|=[2923] params(1) in file: lib\support\0.2.805/primitives.sharp:1345:8: note:  
		    def operator|=(num : var)    := check_value(value|=num);
		       ^

0 [0x0]: line: 1345 pushl 0   
1 [0x1]:            ipushl #1   
2 [0x2]:            movl 0   
3 [0x3]:            movn #0   
5 [0x5]:            movi #0, adx   
7 [0x7]:            iaload ecx, adx   
8 [0x8]:            loadval ebx   
9 [0x9]:            or ecx, ebx   
10 [0xa]:            mov8 cmt, cmt   
11 [0xb]:            rmov adx, cmt   
12 [0xc]:            rstore cmt   
13 [0xd]:            call @2924 // <std#bool.check_value>   
14 [0xe]:            loadval ebx   
15 [0xf]:            return_val ebx   
16 [0x10]:            ret   


function: std#bool.check_value[2924] params(1) in file: lib\support\0.2.805/primitives.sharp:1347:8: note:  
		    def check_value(new_val: var) : var {
		       ^

0 [0x0]: line: 1348 loadl ebx, fp+1   
1 [0x1]:            skne ebx // pc = 5   
2 [0x2]:            movi #1, ebx   
4 [0x4]:            skip @2 // pc = 6   
5 [0x5]:            movi #0, ebx   
7 [0x7]:            return_val ebx   
8 [0x8]:            ret   


constructor: std#bool.bool[2925] params(0) in file: lib\support\0.2.805/primitives.sharp:1244:6: note:  
		class bool base integer<_int8> {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1567 // <std#integer<_int8>.integer>   
2 [0x2]:         ret   


std#printable.to_string[2926] params(0) in file: lib\support\0.2.805/printable.sharp:11:8: note:  
		    def to_string() : string;
		       ^



constructor: std#printable.printable[2927] params(0) in file: lib\support\0.2.805/printable.sharp:10:10: note:  
		interface printable {
		         ^

0 [0x0]:         ret   


constructor: std.reflect#_class_._class_[2928] params(0) in file: lib\support\0.2.805/reflect//class.sharp:4:6: note:  
		class _class_ base data_entity {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @2929 // <std.reflect#data_entity.data_entity>   
2 [0x2]:         ret   


constructor: std.reflect#data_entity.data_entity[2929] params(0) in file: lib\support\0.2.805/reflect//data_entity.sharp:4:6: note:  
		class data_entity {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std.reflect#data_property.data_property[2930] params(0) in file: lib\support\0.2.805/reflect//data_property.sharp:11:6: note:  
		class data_property base data_entity {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @2929 // <std.reflect#data_entity.data_entity>   
2 [0x2]:         ret   


constructor: std.reflect#field.field[2931] params(0) in file: lib\support\0.2.805/reflect//field.sharp:4:6: note:  
		class field {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std.reflect#function.function[2932] params(0) in file: lib\support\0.2.805/reflect//function.sharp:4:6: note:  
		class function base data_entity {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @2929 // <std.reflect#data_entity.data_entity>   
2 [0x2]:         ret   


constructor: std.reflect#reflect.reflect[2933] params(1) in file: lib\support\0.2.805/reflect//reflection.sharp:16:12: note:  
		    reflect(ref_obj : object) {
		           ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 17 pushl 0   
2 [0x2]:          pushl 1   
3 [0x3]:          ret   


constructor: std.reflect#reflect.reflect[2934] params(0) in file: lib\support\0.2.805/reflect//reflection.sharp:3:6: note:  
		class reflect {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#string.string[2935] params(1) in file: lib\support\0.2.805/string.sharp:10:11: note:  
		    string(str : _int8[]) {
		          ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 11 movl 1   
2 [0x2]:          checknull   
3 [0x3]:          not ebx, ebx   
4 [0x4]:          movr cmt, ebx   
5 [0x5]:          jne 10   
6 [0x6]: line: 12 pushl 0   
7 [0x7]:          pushl 1   
8 [0x8]:          call @2945 // <std#string.append>   
9 [0x9]:          pop   
10 [0xa]:          nop   
11 [0xb]:          ret   


constructor: std#string.string[2936] params(1) in file: lib\support\0.2.805/string.sharp:16:11: note:  
		    string(ch: var) {
		          ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 17 pushl 0   
2 [0x2]:          ipushl #1   
3 [0x3]:          call @2942 // <std#string.append>   
4 [0x4]:          pop   
5 [0x5]:          ret   


constructor: std#string.string[2937] params(1) in file: lib\support\0.2.805/string.sharp:20:11: note:  
		    string(str : char[]) {
		          ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 21 movl 1   
2 [0x2]:          checknull   
3 [0x3]:          not ebx, ebx   
4 [0x4]:          movr cmt, ebx   
5 [0x5]:          jne 46   
6 [0x6]: line: 22 movl 1   
7 [0x7]:          sizeof ebx   
8 [0x8]:          newarry ebx   
9 [0x9]:          movl 0   
10 [0xa]:          movn #0   
12 [0xc]:          popobj   
13 [0xd]: line: 23 istorel 0, fp+2   
15 [0xf]: line: 24 istorel -1, fp+4   
17 [0x11]:          pushl 1   
18 [0x12]:          popl 5   
19 [0x13]:          iaddl 1, fp@4   
21 [0x15]:          movl 5   
22 [0x16]:          sizeof ecx   
23 [0x17]:          loadl ebx, fp+4   
24 [0x18]:          lt ebx, ecx   
25 [0x19]:          jne 46   
26 [0x1a]:          movnd ebx   
27 [0x1b]:          pushobj   
28 [0x1c]:          popl 3   
29 [0x1d]: line: 25 pushl 3   
30 [0x1e]:          call @1566 // <std#integer<_int8>.get_value>   
31 [0x1f]:          movl 0   
32 [0x20]:          movn #0   
34 [0x22]:          pushobj   
35 [0x23]:          loadl ebx, fp+2   
36 [0x24]:          movr egx, ebx   
37 [0x25]:          inc ebx   
38 [0x26]:          smovr_2 ebx, fp+2   
39 [0x27]:          movr ebx, egx   
40 [0x28]:          popobj2    
41 [0x29]:          movr adx, ebx   
42 [0x2a]:          chklen adx   
43 [0x2b]:          loadval ebx   
44 [0x2c]:          rmov adx, ebx   
45 [0x2d]:          jmp @19   
46 [0x2e]:          nop   
47 [0x2f]:          ret   


constructor: std#string.string[2938] params(1) in file: lib\support\0.2.805/string.sharp:30:11: note:  
		    string(str: string) {
		          ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 31 movl 1   
2 [0x2]:          checknull   
3 [0x3]:          not ebx, ebx   
4 [0x4]:          movr cmt, ebx   
5 [0x5]:          jne 13   
6 [0x6]: line: 32 pushl 0   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          pushobj   
11 [0xb]:          call @2945 // <std#string.append>   
12 [0xc]:          pop   
13 [0xd]:          nop   
14 [0xe]:          ret   


constructor: std#string.string[2939] params(2) in file: lib\support\0.2.805/string.sharp:36:11: note:  
		    string(str : _int8[], offset: var) {
		          ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 37 movl 1   
2 [0x2]:          checknull   
3 [0x3]:          not ebx, ebx   
4 [0x4]:          movr cmt, ebx   
5 [0x5]:          jne 16   
6 [0x6]: line: 38 pushl 1   
7 [0x7]:          ipushl #2   
8 [0x8]:          movl 1   
9 [0x9]:          sizeof ebx   
10 [0xa]:          rstore ebx   
11 [0xb]:          call @1757 // <std.io#__srt_global.copy>   
12 [0xc]:          movl 0   
13 [0xd]:          movn #0   
15 [0xf]:          popobj   
16 [0x10]:          nop   
17 [0x11]:          ret   


constructor: std#string.string[2940] params(3) in file: lib\support\0.2.805/string.sharp:42:11: note:  
		    string(str : _int8[], start: var, end: var) {
		          ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 43 movl 1   
2 [0x2]:          checknull   
3 [0x3]:          not ebx, ebx   
4 [0x4]:          skne ebx // pc = 15   
5 [0x5]:          ipushl #3   
6 [0x6]:          loadl ebx, fp+2   
7 [0x7]:          loadval ecx   
8 [0x8]:          sub ecx, ebx -> ebx   
9 [0x9]:          rstore ebx   
10 [0xa]:          movi #0, ebx   
12 [0xc]:          loadval ecx   
13 [0xd]:          gt ecx, ebx   
14 [0xe]:          movr ebx, cmt   
15 [0xf]:          movr cmt, ebx   
16 [0x10]:          jne 36   
17 [0x11]: line: 44 ipushl #3   
18 [0x12]:          loadl ebx, fp+2   
19 [0x13]:          loadval ecx   
20 [0x14]:          sub ecx, ebx -> ebx   
21 [0x15]:          newarry ebx   
22 [0x16]:          movl 0   
23 [0x17]:          movn #0   
25 [0x19]:          popobj   
26 [0x1a]: line: 45 pushl 1   
27 [0x1b]:          movl 0   
28 [0x1c]:          movn #0   
30 [0x1e]:          pushobj   
31 [0x1f]:          istore 0   
33 [0x21]:          ipushl #2   
34 [0x22]:          ipushl #3   
35 [0x23]:          call @1747 // <std.io#__srt_global.memcopy>   
36 [0x24]:          nop   
37 [0x25]:          ret   


function: std#string.replace[2941] params(2) in file: lib\support\0.2.805/string.sharp:49:8: note:  
		    def replace(pos : var, ch: _int8) : string {
		       ^

0 [0x0]: line: 50 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          sizeof ebx   
5 [0x5]:          loadval ecx   
6 [0x6]:          gte ecx, ebx   
7 [0x7]:          movr ebx, cmt   
8 [0x8]:          movr cmt, ebx   
9 [0x9]:          jne 14   
10 [0xa]: line: 51 pushl 0   
11 [0xb]:          ipushl #1   
12 [0xc]:          call @2991 // <std#string.bounds_error>   
13 [0xd]:          throw    
14 [0xe]:          nop   
15 [0xf]: line: 54 ipushl #2   
16 [0x10]:          movl 0   
17 [0x11]:          movn #0   
19 [0x13]:          pushobj   
20 [0x14]:          loadl ebx, fp+1   
21 [0x15]:          popobj2    
22 [0x16]:          movr adx, ebx   
23 [0x17]:          chklen adx   
24 [0x18]:          loadval ebx   
25 [0x19]:          rmov adx, ebx   
26 [0x1a]: line: 55 movl 0   
27 [0x1b]:          returnobj   
28 [0x1c]:          ret   


function: std#string.append[2942] params(1) in file: lib\support\0.2.805/string.sharp:58:8: note:  
		    def append(ch: var) : string
		       ^

0 [0x0]: line: 60 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          pushnull    
5 [0x5]:          itest ebx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 16   
8 [0x8]: line: 61 movi #1, ebx   
10 [0xa]:          newarry ebx   
11 [0xb]:          movl 0   
12 [0xc]:          movn #0   
14 [0xe]:          popobj   
15 [0xf]:          jmp @31   
16 [0x10]: line: 63 movl 0   
17 [0x11]:          movn #0   
19 [0x13]:          pushobj   
20 [0x14]:          movl 0   
21 [0x15]:          movn #0   
23 [0x17]:          sizeof ebx   
24 [0x18]:          rstore ebx   
25 [0x19]:          movi #1, ebx   
27 [0x1b]:          loadval ecx   
28 [0x1c]:          add ecx, ebx -> ebx   
29 [0x1d]:          rstore ebx   
30 [0x1e]:          call @1737 // <std.io#__srt_global.realloc>   
31 [0x1f]:          nop   
32 [0x20]: line: 65 ipushl #1   
33 [0x21]:          movl 0   
34 [0x22]:          movn #0   
36 [0x24]:          pushobj   
37 [0x25]:          movl 0   
38 [0x26]:          movn #0   
40 [0x28]:          sizeof ebx   
41 [0x29]:          rstore ebx   
42 [0x2a]:          movi #1, ebx   
44 [0x2c]:          loadval ecx   
45 [0x2d]:          sub ecx, ebx -> ebx   
46 [0x2e]:          popobj2    
47 [0x2f]:          movr adx, ebx   
48 [0x30]:          chklen adx   
49 [0x31]:          loadval ebx   
50 [0x32]:          rmov adx, ebx   
51 [0x33]: line: 66 movl 0   
52 [0x34]:          returnobj   
53 [0x35]:          ret   


function: std#string.empty[2943] params(0) in file: lib\support\0.2.805/string.sharp:69:8: note:  
		    def empty() := sizeof(data)==0;
		       ^

0 [0x0]: line: 69 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          sizeof ebx   
4 [0x4]:          rstore ebx   
5 [0x5]:          movi #0, ebx   
7 [0x7]:          loadval ecx   
8 [0x8]:          test ecx, ebx   
9 [0x9]:          return_val cmt   
10 [0xa]:          ret   


function: std#string.append[2944] params(1) in file: lib\support\0.2.805/string.sharp:71:8: note:  
		    def append(c: char) := append(c.get_value());
		       ^

0 [0x0]: line: 71 pushl 0   
1 [0x1]:          pushl 1   
2 [0x2]:          call @1566 // <std#integer<_int8>.get_value>   
3 [0x3]:          call @2942 // <std#string.append>   
4 [0x4]:          popobj2    
5 [0x5]:          returnobj   
6 [0x6]:          ret   


function: std#string.append[2945] params(1) in file: lib\support\0.2.805/string.sharp:73:8: note:  
		    def append(immstr: _int8[]) : string
		       ^

0 [0x0]: line: 75 movl 1   
1 [0x1]:          checknull   
2 [0x2]:          movr cmt, ebx   
3 [0x3]:          jne 7   
4 [0x4]:          movl 0   
5 [0x5]:          returnobj   
6 [0x6]:          ret   
7 [0x7]:          nop   
8 [0x8]: line: 77 movl 0   
9 [0x9]:          movn #0   
11 [0xb]:          sizeof ebx   
12 [0xc]:          smovr_2 ebx, fp+2   
13 [0xd]: line: 79 movl 0   
14 [0xe]:          movn #0   
16 [0x10]:          pushobj   
17 [0x11]:          pushnull    
18 [0x12]:          itest ebx   
19 [0x13]:          movr cmt, ebx   
20 [0x14]:          jne 29   
21 [0x15]: line: 80 movl 1   
22 [0x16]:          sizeof ebx   
23 [0x17]:          newarry ebx   
24 [0x18]:          movl 0   
25 [0x19]:          movn #0   
27 [0x1b]:          popobj   
28 [0x1c]:          jmp @44   
29 [0x1d]: line: 82 movl 0   
30 [0x1e]:          movn #0   
32 [0x20]:          pushobj   
33 [0x21]:          movl 0   
34 [0x22]:          movn #0   
36 [0x24]:          sizeof ebx   
37 [0x25]:          rstore ebx   
38 [0x26]:          movl 1   
39 [0x27]:          sizeof ebx   
40 [0x28]:          loadval ecx   
41 [0x29]:          add ecx, ebx -> ebx   
42 [0x2a]:          rstore ebx   
43 [0x2b]:          call @1737 // <std.io#__srt_global.realloc>   
44 [0x2c]:          nop   
45 [0x2d]: line: 84 pushl 1   
46 [0x2e]:          movl 0   
47 [0x2f]:          movn #0   
49 [0x31]:          pushobj   
50 [0x32]:          ipushl #2   
51 [0x33]:          istore 0   
53 [0x35]:          movl 1   
54 [0x36]:          sizeof ebx   
55 [0x37]:          rstore ebx   
56 [0x38]:          call @1747 // <std.io#__srt_global.memcopy>   
57 [0x39]: line: 85 movl 0   
58 [0x3a]:          returnobj   
59 [0x3b]:          ret   


function: std#string.append[2946] params(2) in file: lib\support\0.2.805/string.sharp:88:8: note:  
		    def append(immstr: _int8[], len: var) : string
		       ^

0 [0x0]: line: 90 movl 1   
1 [0x1]:          checknull   
2 [0x2]:          movr cmt, ebx   
3 [0x3]:          jne 7   
4 [0x4]:          movl 0   
5 [0x5]:          returnobj   
6 [0x6]:          ret   
7 [0x7]:          nop   
8 [0x8]: line: 91 loadl ecx, fp+2   
9 [0x9]:          movi #0, ebx   
11 [0xb]:          lt ecx, ebx   
12 [0xc]:          movr ebx, cmt   
13 [0xd]:          movr cmt, ebx   
14 [0xe]:          jne 20   
15 [0xf]: line: 92 new_class @3 // std#exception   
16 [0x10]:          dup    
17 [0x11]:          newstr @47 // length cannot be less than zero   
18 [0x12]:          call @1626 // <std#exception.exception>   
19 [0x13]:          throw    
20 [0x14]:          nop   
21 [0x15]: line: 94 ipushl #2   
22 [0x16]:          movl 1   
23 [0x17]:          sizeof ebx   
24 [0x18]:          loadval ecx   
25 [0x19]:          gt ecx, ebx   
26 [0x1a]:          movr ebx, cmt   
27 [0x1b]:          movr cmt, ebx   
28 [0x1c]:          jne 45   
29 [0x1d]: line: 95 new_class @3 // std#exception   
30 [0x1e]:          dup    
31 [0x1f]:          new_class @64 // std#string   
32 [0x20]:          dup    
33 [0x21]:          newstr @48 // length of:    
34 [0x22]:          call @2935 // <std#string.string>   
35 [0x23]:          ipushl #2   
36 [0x24]:          call @2967 // <std#string.operator+>   
37 [0x25]:          newstr @49 //  is greater than the string:    
38 [0x26]:          call @2947 // <std#string.operator+>   
39 [0x27]:          movl 1   
40 [0x28]:          sizeof ebx   
41 [0x29]:          rstore ebx   
42 [0x2a]:          call @2967 // <std#string.operator+>   
43 [0x2b]:          call @1627 // <std#exception.exception>   
44 [0x2c]:          throw    
45 [0x2d]:          nop   
46 [0x2e]: line: 97 movl 0   
47 [0x2f]:          movn #0   
49 [0x31]:          sizeof ebx   
50 [0x32]:          smovr_2 ebx, fp+3   
51 [0x33]: line: 99 movl 0   
52 [0x34]:          movn #0   
54 [0x36]:          pushobj   
55 [0x37]:          pushnull    
56 [0x38]:          itest ebx   
57 [0x39]:          movr cmt, ebx   
58 [0x3a]:          jne 66   
59 [0x3b]: line: 100 loadl ebx, fp+2   
60 [0x3c]:           newarry ebx   
61 [0x3d]:           movl 0   
62 [0x3e]:           movn #0   
64 [0x40]:           popobj   
65 [0x41]:           jmp @80   
66 [0x42]: line: 102 movl 0   
67 [0x43]:           movn #0   
69 [0x45]:           pushobj   
70 [0x46]:           movl 0   
71 [0x47]:           movn #0   
73 [0x49]:           sizeof ebx   
74 [0x4a]:           rstore ebx   
75 [0x4b]:           loadl ebx, fp+2   
76 [0x4c]:           loadval ecx   
77 [0x4d]:           add ecx, ebx -> ebx   
78 [0x4e]:           rstore ebx   
79 [0x4f]:           call @1737 // <std.io#__srt_global.realloc>   
80 [0x50]:           nop   
81 [0x51]: line: 104 pushl 1   
82 [0x52]:           movl 0   
83 [0x53]:           movn #0   
85 [0x55]:           pushobj   
86 [0x56]:           ipushl #3   
87 [0x57]:           istore 0   
89 [0x59]:           ipushl #2   
90 [0x5a]:           call @1747 // <std.io#__srt_global.memcopy>   
91 [0x5b]: line: 105 movl 0   
92 [0x5c]:           returnobj   
93 [0x5d]:           ret   


overload function: std#string.operator+[2947] params(1) in file: lib\support\0.2.805/string.sharp:108:8: note:  
		    def operator+(immstr : _int8[]) : string {
		       ^

0 [0x0]: line: 109 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           pushobj   
6 [0x6]:           call @2935 // <std#string.string>   
7 [0x7]:           popobj2    
8 [0x8]:           smovr_3 fp+2   
9 [0x9]: line: 110 movl 1   
10 [0xa]:           checknull   
11 [0xb]:           not ebx, ebx   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 21   
14 [0xe]: line: 111 pushl 2   
15 [0xf]:           pushl 1   
16 [0x10]:           call @2945 // <std#string.append>   
17 [0x11]:           popobj2    
18 [0x12]:           returnobj   
19 [0x13]:           ret   
20 [0x14]:           jmp @24   
21 [0x15]: line: 113 movl 2   
22 [0x16]:           returnobj   
23 [0x17]:           ret   
24 [0x18]:           nop   


function: std#string.to_lower[2948] params(0) in file: lib\support\0.2.805/string.sharp:116:8: note:  
		    def to_lower() : string {
		       ^

0 [0x0]: line: 117 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           call @2993 // <std#string.string>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+1   
5 [0x5]: line: 118 movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           pushobj   
9 [0x9]:           pushnull    
10 [0xa]:           itest ebx   
11 [0xb]:           not ebx, ebx   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 87   
14 [0xe]: line: 119 movl 0   
15 [0xf]:           movn #0   
17 [0x11]:           pushobj   
18 [0x12]:           istore 0   
20 [0x14]:           movl 0   
21 [0x15]:           movn #0   
23 [0x17]:           sizeof ebx   
24 [0x18]:           rstore ebx   
25 [0x19]:           call @1757 // <std.io#__srt_global.copy>   
26 [0x1a]:           movl 1   
27 [0x1b]:           movn #0   
29 [0x1d]:           popobj   
30 [0x1e]: line: 121 istorel 0, fp+2   
32 [0x20]: line: 122 istorel -1, fp+4   
34 [0x22]:           movl 0   
35 [0x23]:           movn #0   
37 [0x25]:           pushobj   
38 [0x26]:           popl 5   
39 [0x27]:           iaddl 1, fp@4   
41 [0x29]:           movl 5   
42 [0x2a]:           sizeof ecx   
43 [0x2b]:           loadl ebx, fp+4   
44 [0x2c]:           lt ebx, ecx   
45 [0x2d]:           jne 87   
46 [0x2e]:           iaload ecx, ebx   
47 [0x2f]:           smovr_2 ecx, fp+3   
48 [0x30]: line: 123 istore 65   
50 [0x32]:           loadl ebx, fp+3   
51 [0x33]:           loadval ecx   
52 [0x34]:           lte ecx, ebx   
53 [0x35]:           movr ebx, cmt   
54 [0x36]:           skne ebx // pc = 61   
55 [0x37]:           ipushl #3   
56 [0x38]:           movi #90, ebx   
58 [0x3a]:           loadval ecx   
59 [0x3b]:           lte ecx, ebx   
60 [0x3c]:           movr ebx, cmt   
61 [0x3d]:           movr cmt, ebx   
62 [0x3e]:           jne 83   
63 [0x3f]: line: 124 istore 97   
65 [0x41]:           ipushl #3   
66 [0x42]:           movi #65, ebx   
68 [0x44]:           loadval ecx   
69 [0x45]:           sub ecx, ebx -> ebx   
70 [0x46]:           loadval ecx   
71 [0x47]:           add ecx, ebx -> ebx   
72 [0x48]:           rstore ebx   
73 [0x49]:           movl 1   
74 [0x4a]:           movn #0   
76 [0x4c]:           pushobj   
77 [0x4d]:           loadl ebx, fp+2   
78 [0x4e]:           popobj2    
79 [0x4f]:           movr adx, ebx   
80 [0x50]:           chklen adx   
81 [0x51]:           loadval ebx   
82 [0x52]:           rmov adx, ebx   
83 [0x53]:           nop   
84 [0x54]: line: 125 iaddl 1, fp@2   
86 [0x56]:           jmp @39   
87 [0x57]:           nop   
88 [0x58]: line: 129 movl 1   
89 [0x59]:           returnobj   
90 [0x5a]:           ret   


overload function: std#string.operator+[2949] params(1) in file: lib\support\0.2.805/string.sharp:132:8: note:  
		    def operator+(obj : printable) : string {
		       ^

0 [0x0]: line: 133 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           pushobj   
6 [0x6]:           call @2935 // <std#string.string>   
7 [0x7]:           popobj2    
8 [0x8]:           smovr_3 fp+2   
9 [0x9]: line: 134 movl 1   
10 [0xa]:           checknull   
11 [0xb]:           not ebx, ebx   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 42   
14 [0xe]: line: 135 pushl 1   
15 [0xf]:           invoke_delegate 2926 { static=0, args=0 }   
17 [0x11]:           popobj2    
18 [0x12]:           smovr_3 fp+3   
19 [0x13]: line: 136 movl 3   
20 [0x14]:           checknull   
21 [0x15]:           not ebx, ebx   
22 [0x16]:           movr cmt, ebx   
23 [0x17]:           jne 34   
24 [0x18]: line: 137 pushl 2   
25 [0x19]:           movl 3   
26 [0x1a]:           movn #0   
28 [0x1c]:           pushobj   
29 [0x1d]:           call @2945 // <std#string.append>   
30 [0x1e]:           popobj2    
31 [0x1f]:           returnobj   
32 [0x20]:           ret   
33 [0x21]:           jmp @40   
34 [0x22]: line: 139 pushl 2   
35 [0x23]:           newstr @50 // null   
36 [0x24]:           call @2945 // <std#string.append>   
37 [0x25]:           popobj2    
38 [0x26]:           returnobj   
39 [0x27]:           ret   
40 [0x28]:           nop   
41 [0x29]:           jmp @48   
42 [0x2a]: line: 142 pushl 2   
43 [0x2b]:           newstr @50 // null   
44 [0x2c]:           call @2945 // <std#string.append>   
45 [0x2d]:           popobj2    
46 [0x2e]:           returnobj   
47 [0x2f]:           ret   
48 [0x30]:           nop   


overload function: std#string.operator+[2950] params(1) in file: lib\support\0.2.805/string.sharp:145:7: note:  
		   def operator+(str : string) : string {
		      ^

0 [0x0]: line: 146 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           pushobj   
6 [0x6]:           call @2935 // <std#string.string>   
7 [0x7]:           popobj2    
8 [0x8]:           smovr_3 fp+2   
9 [0x9]: line: 147 movl 1   
10 [0xa]:           checknull   
11 [0xb]:           not ebx, ebx   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 24   
14 [0xe]: line: 148 pushl 2   
15 [0xf]:           movl 1   
16 [0x10]:           movn #0   
18 [0x12]:           pushobj   
19 [0x13]:           call @2945 // <std#string.append>   
20 [0x14]:           popobj2    
21 [0x15]:           returnobj   
22 [0x16]:           ret   
23 [0x17]:           jmp @30   
24 [0x18]: line: 150 pushl 2   
25 [0x19]:           newstr @50 // null   
26 [0x1a]:           call @2945 // <std#string.append>   
27 [0x1b]:           popobj2    
28 [0x1c]:           returnobj   
29 [0x1d]:           ret   
30 [0x1e]:           nop   


function: std#string.to_string[2951] params(0) in file: lib\support\0.2.805/string.sharp:153:8: note:  
		    def to_string() := new string(data);
		       ^

0 [0x0]: line: 153 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           pushobj   
6 [0x6]:           call @2935 // <std#string.string>   
7 [0x7]:           popobj2    
8 [0x8]:           returnobj   
9 [0x9]:           ret   


overload function: std#string.operator==[2952] params(1) in file: lib\support\0.2.805/string.sharp:155:8: note:  
		    def operator==(str : _int8[]) : var {
		       ^

0 [0x0]: line: 156 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           sizeof ebx   
4 [0x4]:           rstore ebx   
5 [0x5]:           movl 1   
6 [0x6]:           sizeof ebx   
7 [0x7]:           loadval ecx   
8 [0x8]:           tne ecx, ebx   
9 [0x9]:           jne 13   
10 [0xa]: line: 157 istorel 0, fp+0   
12 [0xc]:           ret   
13 [0xd]:           nop   
14 [0xe]: line: 159 istorel 0, fp+2   
16 [0x10]: line: 160 istorel -1, fp+4   
18 [0x12]:           pushl 1   
19 [0x13]:           popl 5   
20 [0x14]:           iaddl 1, fp@4   
22 [0x16]:           movl 5   
23 [0x17]:           sizeof ecx   
24 [0x18]:           loadl ebx, fp+4   
25 [0x19]:           lt ebx, ecx   
26 [0x1a]:           jne 51   
27 [0x1b]:           iaload ecx, ebx   
28 [0x1c]:           smovr_2 ecx, fp+3   
29 [0x1d]: line: 161 ipushl #3   
30 [0x1e]:           movl 0   
31 [0x1f]:           movn #0   
33 [0x21]:           pushobj   
34 [0x22]:           loadl ebx, fp+2   
35 [0x23]:           movr egx, ebx   
36 [0x24]:           inc ebx   
37 [0x25]:           smovr_2 ebx, fp+2   
38 [0x26]:           movr ebx, egx   
39 [0x27]:           popobj2    
40 [0x28]:           movr adx, ebx   
41 [0x29]:           chklen adx   
42 [0x2a]:           iaload ebx, adx   
43 [0x2b]:           loadval ecx   
44 [0x2c]:           tne ecx, ebx   
45 [0x2d]:           jne 49   
46 [0x2e]: line: 162 istorel 0, fp+0   
48 [0x30]:           ret   
49 [0x31]:           nop   
50 [0x32]:           jmp @20   
51 [0x33]: line: 165 istorel 1, fp+0   
53 [0x35]:           ret   


overload function: std#string.operator==[2953] params(1) in file: lib\support\0.2.805/string.sharp:168:8: note:  
		    def operator==(str : string) : var {
		       ^

0 [0x0]: line: 169 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           sizeof ebx   
4 [0x4]:           rstore ebx   
5 [0x5]:           movl 1   
6 [0x6]:           movn #0   
8 [0x8]:           sizeof ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           tne ecx, ebx   
11 [0xb]:           jne 15   
12 [0xc]: line: 170 istorel 0, fp+0   
14 [0xe]:           ret   
15 [0xf]:           nop   
16 [0x10]: line: 172 istorel 0, fp+2   
18 [0x12]: line: 173 istorel -1, fp+4   
20 [0x14]:           movl 1   
21 [0x15]:           movn #0   
23 [0x17]:           pushobj   
24 [0x18]:           popl 5   
25 [0x19]:           iaddl 1, fp@4   
27 [0x1b]:           movl 5   
28 [0x1c]:           sizeof ecx   
29 [0x1d]:           loadl ebx, fp+4   
30 [0x1e]:           lt ebx, ecx   
31 [0x1f]:           jne 56   
32 [0x20]:           iaload ecx, ebx   
33 [0x21]:           smovr_2 ecx, fp+3   
34 [0x22]: line: 174 ipushl #3   
35 [0x23]:           movl 0   
36 [0x24]:           movn #0   
38 [0x26]:           pushobj   
39 [0x27]:           loadl ebx, fp+2   
40 [0x28]:           movr egx, ebx   
41 [0x29]:           inc ebx   
42 [0x2a]:           smovr_2 ebx, fp+2   
43 [0x2b]:           movr ebx, egx   
44 [0x2c]:           popobj2    
45 [0x2d]:           movr adx, ebx   
46 [0x2e]:           chklen adx   
47 [0x2f]:           iaload ebx, adx   
48 [0x30]:           loadval ecx   
49 [0x31]:           tne ecx, ebx   
50 [0x32]:           jne 54   
51 [0x33]: line: 175 istorel 0, fp+0   
53 [0x35]:           ret   
54 [0x36]:           nop   
55 [0x37]:           jmp @25   
56 [0x38]: line: 178 istorel 1, fp+0   
58 [0x3a]:           ret   


overload function: std#string.operator!=[2954] params(1) in file: lib\support\0.2.805/string.sharp:182:8: note:  
		    def operator!=(str : _int8[]) := !operator==(str);
		       ^

0 [0x0]: line: 182 pushl 0   
1 [0x1]:           pushl 1   
2 [0x2]:           call @2952 // <std#string.operator==>   
3 [0x3]:           loadval ebx   
4 [0x4]:           not ebx, ebx   
5 [0x5]:           return_val ebx   
6 [0x6]:           ret   


overload function: std#string.operator!=[2955] params(1) in file: lib\support\0.2.805/string.sharp:183:8: note:  
		    def operator!=(str : string) := !operator==(str);
		       ^

0 [0x0]: line: 183 pushl 0   
1 [0x1]:           pushl 1   
2 [0x2]:           call @2953 // <std#string.operator==>   
3 [0x3]:           loadval ebx   
4 [0x4]:           not ebx, ebx   
5 [0x5]:           return_val ebx   
6 [0x6]:           ret   


overload function: std#string.operator=[2956] params(1) in file: lib\support\0.2.805/string.sharp:185:8: note:  
		    def operator=( immstr: _int8[] )
		       ^

0 [0x0]: line: 187 movl 1   
1 [0x1]:           checknull   
2 [0x2]:           movr cmt, ebx   
3 [0x3]:           jne 9   
4 [0x4]:           movl 0   
5 [0x5]:           movn #0   
7 [0x7]:           del   
8 [0x8]:           jmp @20   
9 [0x9]: line: 189 pushl 1   
10 [0xa]:           istore 0   
12 [0xc]:           movl 1   
13 [0xd]:           sizeof ebx   
14 [0xe]:           rstore ebx   
15 [0xf]:           call @1757 // <std.io#__srt_global.copy>   
16 [0x10]:           movl 0   
17 [0x11]:           movn #0   
19 [0x13]:           popobj   
20 [0x14]:           nop   
21 [0x15]:           ret   


function: std#string.at[2957] params(1) in file: lib\support\0.2.805/string.sharp:192:8: note:  
		    def at(pos : var) : _int8 {
		       ^

0 [0x0]: line: 193 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           sizeof ebx   
5 [0x5]:           loadval ecx   
6 [0x6]:           gte ecx, ebx   
7 [0x7]:           movr ebx, cmt   
8 [0x8]:           movr cmt, ebx   
9 [0x9]:           jne 14   
10 [0xa]: line: 194 pushl 0   
11 [0xb]:           ipushl #1   
12 [0xc]:           call @2991 // <std#string.bounds_error>   
13 [0xd]:           throw    
14 [0xe]:           nop   
15 [0xf]: line: 195 movl 0   
16 [0x10]:           movn #0   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+1   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           iaload ebx, adx   
24 [0x18]:           return_val ebx   
25 [0x19]:           ret   


overload function: std#string.operator[[2958] params(1) in file: lib\support\0.2.805/string.sharp:198:8: note:  
		    def operator[](pos: var) := at(pos);
		       ^

0 [0x0]: line: 198 pushl 0   
1 [0x1]:           ipushl #1   
2 [0x2]:           call @2957 // <std#string.at>   
3 [0x3]:           loadval ebx   
4 [0x4]:           return_val ebx   
5 [0x5]:           ret   


function: std#string.fmt[2959] params(1) in file: lib\support\0.2.805/string.sharp:200:15: note:  
		    static def fmt( _fmt: var ) {
		              ^

0 [0x0]: line: 201 ipushl #0   
1 [0x1]:           movg @64 // @std#string   
2 [0x2]:           movn #0   
4 [0x4]:           loadval ebx   
5 [0x5]:           mov8 ebx, ebx   
6 [0x6]:           movi #0, adx   
8 [0x8]:           rmov adx, ebx   
9 [0x9]:           ret   


function: std#string.set_precision[2960] params(1) in file: lib\support\0.2.805/string.sharp:204:15: note:  
		    static def set_precision( prec: var ) {
		              ^

0 [0x0]: line: 205 loadl ecx, fp+0   
1 [0x1]:           movi #0, ebx   
3 [0x3]:           lt ecx, ebx   
4 [0x4]:           movr ebx, cmt   
5 [0x5]:           skpe ebx // pc = 12   
6 [0x6]:           ipushl #0   
7 [0x7]:           movi #16, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 24   
14 [0xe]: line: 206 new_class @4 // std#illegal_argument_exception   
15 [0xf]:           dup    
16 [0x10]:           new_class @64 // std#string   
17 [0x11]:           dup    
18 [0x12]:           newstr @51 // invalid precision:    
19 [0x13]:           call @2935 // <std#string.string>   
20 [0x14]:           ipushl #0   
21 [0x15]:           call @2967 // <std#string.operator+>   
22 [0x16]:           call @1630 // <std#illegal_argument_exception.illegal_argument_exception>   
23 [0x17]:           throw    
24 [0x18]:           nop   
25 [0x19]: line: 207 ipushl #0   
26 [0x1a]:           movg @64 // @std#string   
27 [0x1b]:           movn #1   
29 [0x1d]:           loadval ebx   
30 [0x1e]:           movi #0, adx   
32 [0x20]:           rmov adx, ebx   
33 [0x21]:           ret   


function: std#string.get_data[2961] params(0) in file: lib\support\0.2.805/string.sharp:210:8: note:  
		    def get_data() := data;
		       ^

0 [0x0]: line: 210 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           returnobj   
4 [0x4]:           ret   


function: std#string.get_elements[2962] params(0) in file: lib\support\0.2.805/string.sharp:212:8: note:  
		    def get_elements() := data;
		       ^

0 [0x0]: line: 212 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           returnobj   
4 [0x4]:           ret   


function: std#string.to_array[2963] params(0) in file: lib\support\0.2.805/string.sharp:214:8: note:  
		    def to_array() : _int8[]
		       ^

0 [0x0]: line: 216 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushnull    
5 [0x5]:           itest ebx   
6 [0x6]:           movr cmt, ebx   
7 [0x7]:           jne 12   
8 [0x8]:           pushnull    
9 [0x9]:           popobj2    
10 [0xa]:           returnobj   
11 [0xb]:           ret   
12 [0xc]:           nop   
13 [0xd]: line: 217 movl 0   
14 [0xe]:           movn #0   
16 [0x10]:           pushobj   
17 [0x11]:           istore 0   
19 [0x13]:           movl 0   
20 [0x14]:           movn #0   
22 [0x16]:           sizeof ebx   
23 [0x17]:           rstore ebx   
24 [0x18]:           call @1757 // <std.io#__srt_global.copy>   
25 [0x19]:           popobj2    
26 [0x1a]:           returnobj   
27 [0x1b]:           ret   


function: std#string.starts_with[2964] params(1) in file: lib\support\0.2.805/string.sharp:221:8: note:  
		    def starts_with(prefix: string) : var {
		       ^

0 [0x0]: line: 222 movl 1   
1 [0x1]:           checknull   
2 [0x2]:           skpe ebx // pc = 15   
3 [0x3]:           movl 1   
4 [0x4]:           movn #0   
6 [0x6]:           sizeof ebx   
7 [0x7]:           rstore ebx   
8 [0x8]:           movl 0   
9 [0x9]:           movn #0   
11 [0xb]:           sizeof ebx   
12 [0xc]:           loadval ecx   
13 [0xd]:           gt ecx, ebx   
14 [0xe]:           movr ebx, cmt   
15 [0xf]:           movr cmt, ebx   
16 [0x10]:           jne 20   
17 [0x11]: line: 223 istorel 0, fp+0   
19 [0x13]:           ret   
20 [0x14]:           nop   
21 [0x15]: line: 226 istorel 0, fp+2   
23 [0x17]:           ipushl #2   
24 [0x18]:           movl 1   
25 [0x19]:           movn #0   
27 [0x1b]:           sizeof ebx   
28 [0x1c]:           loadval ecx   
29 [0x1d]:           lt ecx, ebx   
30 [0x1e]:           movr ebx, cmt   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 62   
33 [0x21]: line: 228 movl 0   
34 [0x22]:           movn #0   
36 [0x24]:           pushobj   
37 [0x25]:           loadl ebx, fp+2   
38 [0x26]:           popobj2    
39 [0x27]:           movr adx, ebx   
40 [0x28]:           chklen adx   
41 [0x29]:           iaload ebx, adx   
42 [0x2a]:           rstore ebx   
43 [0x2b]:           movl 1   
44 [0x2c]:           movn #0   
46 [0x2e]:           pushobj   
47 [0x2f]:           loadl ebx, fp+2   
48 [0x30]:           popobj2    
49 [0x31]:           movr adx, ebx   
50 [0x32]:           chklen adx   
51 [0x33]:           iaload ebx, adx   
52 [0x34]:           loadval ecx   
53 [0x35]:           tne ecx, ebx   
54 [0x36]:           jne 58   
55 [0x37]: line: 229 istorel 0, fp+0   
57 [0x39]:           ret   
58 [0x3a]:           nop   
59 [0x3b]:           iaddl 1, fp@2   
61 [0x3d]:           jmp @23   
62 [0x3e]: line: 231 istorel 1, fp+0   
64 [0x40]:           ret   


function: std#string.find[2965] params(1) in file: lib\support\0.2.805/string.sharp:235:8: note:  
		    def find(str: string) : var {
		       ^

0 [0x0]: line: 236 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           sizeof ebx   
4 [0x4]:           rstore ebx   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           sizeof ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 17   
14 [0xe]: line: 237 istorel 0, fp+0   
16 [0x10]:           ret   
17 [0x11]:           nop   
18 [0x12]: line: 240 istorel 0, fp+2   
20 [0x14]: line: 241 istorel 0, fp+3   
22 [0x16]:           ipushl #3   
23 [0x17]:           movl 0   
24 [0x18]:           movn #0   
26 [0x1a]:           sizeof ebx   
27 [0x1b]:           loadval ecx   
28 [0x1c]:           lt ecx, ebx   
29 [0x1d]:           movr ebx, cmt   
30 [0x1e]:           movr cmt, ebx   
31 [0x1f]:           jne 99   
32 [0x20]: line: 242 ipushl #3   
33 [0x21]:           movl 1   
34 [0x22]:           movn #0   
36 [0x24]:           sizeof ebx   
37 [0x25]:           loadval ecx   
38 [0x26]:           add ecx, ebx -> ebx   
39 [0x27]:           rstore ebx   
40 [0x28]:           movl 0   
41 [0x29]:           movn #0   
43 [0x2b]:           sizeof ebx   
44 [0x2c]:           loadval ecx   
45 [0x2d]:           lt ecx, ebx   
46 [0x2e]:           movr ebx, cmt   
47 [0x2f]:           movr cmt, ebx   
48 [0x30]:           jne 92   
49 [0x31]: line: 243 istorel 0, fp+4   
51 [0x33]:           ipushl #4   
52 [0x34]:           movl 1   
53 [0x35]:           movn #0   
55 [0x37]:           sizeof ebx   
56 [0x38]:           loadval ecx   
57 [0x39]:           lt ecx, ebx   
58 [0x3a]:           movr ebx, cmt   
59 [0x3b]:           movr cmt, ebx   
60 [0x3c]:           jne 88   
61 [0x3d]: line: 244 movl 1   
62 [0x3e]:           movn #0   
64 [0x40]:           pushobj   
65 [0x41]:           loadl ebx, fp+4   
66 [0x42]:           popobj2    
67 [0x43]:           movr adx, ebx   
68 [0x44]:           chklen adx   
69 [0x45]:           iaload ebx, adx   
70 [0x46]:           rstore ebx   
71 [0x47]:           movl 0   
72 [0x48]:           movn #0   
74 [0x4a]:           pushobj   
75 [0x4b]:           loadl ebx, fp+4   
76 [0x4c]:           popobj2    
77 [0x4d]:           movr adx, ebx   
78 [0x4e]:           chklen adx   
79 [0x4f]:           iaload ebx, adx   
80 [0x50]:           loadval ecx   
81 [0x51]:           tne ecx, ebx   
82 [0x52]:           jne 84   
83 [0x53]: line: 245 jmp @88   
84 [0x54]:           nop   
85 [0x55]:           iaddl 1, fp@4   
87 [0x57]:           jmp @51   
88 [0x58]: line: 248 istorel 1, fp+0   
90 [0x5a]:           ret   
91 [0x5b]:           jmp @95   
92 [0x5c]: line: 249 istorel 0, fp+0   
94 [0x5e]:           ret   
95 [0x5f]:           nop   
96 [0x60]:           iaddl 1, fp@3   
98 [0x62]:           jmp @22   
99 [0x63]: line: 252 istorel 0, fp+0   
101 [0x65]:           ret   


function: std#string.ends_with[2966] params(1) in file: lib\support\0.2.805/string.sharp:255:8: note:  
		    def ends_with(postfix: string) : var {
		       ^

0 [0x0]: line: 256 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           sizeof ebx   
4 [0x4]:           rstore ebx   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           sizeof ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gte ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 17   
14 [0xe]: line: 257 istorel 0, fp+0   
16 [0x10]:           ret   
17 [0x11]:           nop   
18 [0x12]: line: 259 istorel 0, fp+2   
20 [0x14]: line: 260 movl 0   
21 [0x15]:           movn #0   
23 [0x17]:           sizeof ebx   
24 [0x18]:           rstore ebx   
25 [0x19]:           movl 1   
26 [0x1a]:           movn #0   
28 [0x1c]:           sizeof ebx   
29 [0x1d]:           loadval ecx   
30 [0x1e]:           sub ecx, ebx -> ebx   
31 [0x1f]:           smovr_2 ebx, fp+3   
32 [0x20]:           ipushl #3   
33 [0x21]:           movl 0   
34 [0x22]:           movn #0   
36 [0x24]:           sizeof ebx   
37 [0x25]:           loadval ecx   
38 [0x26]:           lt ecx, ebx   
39 [0x27]:           movr ebx, cmt   
40 [0x28]:           movr cmt, ebx   
41 [0x29]:           jne 75   
42 [0x2a]: line: 261 movl 0   
43 [0x2b]:           movn #0   
45 [0x2d]:           pushobj   
46 [0x2e]:           loadl ebx, fp+3   
47 [0x2f]:           popobj2    
48 [0x30]:           movr adx, ebx   
49 [0x31]:           chklen adx   
50 [0x32]:           iaload ebx, adx   
51 [0x33]:           rstore ebx   
52 [0x34]:           movl 1   
53 [0x35]:           movn #0   
55 [0x37]:           pushobj   
56 [0x38]:           loadl ebx, fp+2   
57 [0x39]:           movr egx, ebx   
58 [0x3a]:           inc ebx   
59 [0x3b]:           smovr_2 ebx, fp+2   
60 [0x3c]:           movr ebx, egx   
61 [0x3d]:           popobj2    
62 [0x3e]:           movr adx, ebx   
63 [0x3f]:           chklen adx   
64 [0x40]:           iaload ebx, adx   
65 [0x41]:           loadval ecx   
66 [0x42]:           tne ecx, ebx   
67 [0x43]:           jne 71   
68 [0x44]: line: 262 istorel 0, fp+0   
70 [0x46]:           ret   
71 [0x47]:           nop   
72 [0x48]:           iaddl 1, fp@3   
74 [0x4a]:           jmp @32   
75 [0x4b]: line: 265 istorel 1, fp+0   
77 [0x4d]:           ret   


overload function: std#string.operator+[2967] params(1) in file: lib\support\0.2.805/string.sharp:268:8: note:  
		    def operator+(num : var) : string {
		       ^

0 [0x0]: line: 269 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           pushobj   
6 [0x6]:           call @2935 // <std#string.string>   
7 [0x7]:           popobj2    
8 [0x8]:           smovr_3 fp+2   
9 [0x9]: line: 270 pushl 2   
10 [0xa]:           ipushl #1   
11 [0xb]:           call @2977 // <std#string.parse>   
12 [0xc]:           popobj2    
13 [0xd]:           movn #0   
15 [0xf]:           pushobj   
16 [0x10]:           call @2945 // <std#string.append>   
17 [0x11]:           pop   
18 [0x12]: line: 271 movl 2   
19 [0x13]:           returnobj   
20 [0x14]:           ret   


overload function: std#string.operator+[2968] params(1) in file: lib\support\0.2.805/string.sharp:274:8: note:  
		    def operator+(num : _int8) : string {
		       ^

0 [0x0]: line: 275 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           pushobj   
6 [0x6]:           call @2935 // <std#string.string>   
7 [0x7]:           popobj2    
8 [0x8]:           smovr_3 fp+2   
9 [0x9]: line: 276 pushl 2   
10 [0xa]:           ipushl #1   
11 [0xb]:           call @2942 // <std#string.append>   
12 [0xc]:           pop   
13 [0xd]: line: 277 movl 2   
14 [0xe]:           returnobj   
15 [0xf]:           ret   


overload function: std#string.operator+[2969] params(1) in file: lib\support\0.2.805/string.sharp:280:8: note:  
		    def operator+(num : _int16) : string {
		       ^

0 [0x0]: line: 281 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           pushobj   
6 [0x6]:           call @2935 // <std#string.string>   
7 [0x7]:           popobj2    
8 [0x8]:           smovr_3 fp+2   
9 [0x9]: line: 282 pushl 2   
10 [0xa]:           ipushl #1   
11 [0xb]:           call @2942 // <std#string.append>   
12 [0xc]:           pop   
13 [0xd]: line: 283 movl 2   
14 [0xe]:           returnobj   
15 [0xf]:           ret   


overload function: std#string.operator+[2970] params(1) in file: lib\support\0.2.805/string.sharp:286:8: note:  
		    def operator+(num : _int32) : string {
		       ^

0 [0x0]: line: 287 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           pushobj   
6 [0x6]:           call @2935 // <std#string.string>   
7 [0x7]:           popobj2    
8 [0x8]:           smovr_3 fp+2   
9 [0x9]: line: 288 pushl 2   
10 [0xa]:           ipushl #1   
11 [0xb]:           call @2942 // <std#string.append>   
12 [0xc]:           pop   
13 [0xd]: line: 289 movl 2   
14 [0xe]:           returnobj   
15 [0xf]:           ret   


overload function: std#string.operator+[2971] params(1) in file: lib\support\0.2.805/string.sharp:292:8: note:  
		    def operator+(num : _int64) : string {
		       ^

0 [0x0]: line: 293 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           pushobj   
6 [0x6]:           call @2935 // <std#string.string>   
7 [0x7]:           popobj2    
8 [0x8]:           smovr_3 fp+2   
9 [0x9]: line: 294 pushl 2   
10 [0xa]:           ipushl #1   
11 [0xb]:           call @2942 // <std#string.append>   
12 [0xc]:           pop   
13 [0xd]: line: 295 movl 2   
14 [0xe]:           returnobj   
15 [0xf]:           ret   


overload function: std#string.operator+[2972] params(1) in file: lib\support\0.2.805/string.sharp:298:8: note:  
		    def operator+(num : _uint8) : string {
		       ^

0 [0x0]: line: 299 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           pushobj   
6 [0x6]:           call @2935 // <std#string.string>   
7 [0x7]:           popobj2    
8 [0x8]:           smovr_3 fp+2   
9 [0x9]: line: 300 pushl 2   
10 [0xa]:           ipushl #1   
11 [0xb]:           call @2942 // <std#string.append>   
12 [0xc]:           pop   
13 [0xd]: line: 301 movl 2   
14 [0xe]:           returnobj   
15 [0xf]:           ret   


overload function: std#string.operator+[2973] params(1) in file: lib\support\0.2.805/string.sharp:304:8: note:  
		    def operator+(num : _uint16) : string {
		       ^

0 [0x0]: line: 305 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           pushobj   
6 [0x6]:           call @2935 // <std#string.string>   
7 [0x7]:           popobj2    
8 [0x8]:           smovr_3 fp+2   
9 [0x9]: line: 306 pushl 2   
10 [0xa]:           ipushl #1   
11 [0xb]:           call @2942 // <std#string.append>   
12 [0xc]:           pop   
13 [0xd]: line: 307 movl 2   
14 [0xe]:           returnobj   
15 [0xf]:           ret   


overload function: std#string.operator+[2974] params(1) in file: lib\support\0.2.805/string.sharp:310:8: note:  
		    def operator+(num : _uint32) : string {
		       ^

0 [0x0]: line: 311 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           pushobj   
6 [0x6]:           call @2935 // <std#string.string>   
7 [0x7]:           popobj2    
8 [0x8]:           smovr_3 fp+2   
9 [0x9]: line: 312 pushl 2   
10 [0xa]:           ipushl #1   
11 [0xb]:           call @2942 // <std#string.append>   
12 [0xc]:           pop   
13 [0xd]: line: 313 movl 2   
14 [0xe]:           returnobj   
15 [0xf]:           ret   


overload function: std#string.operator+[2975] params(1) in file: lib\support\0.2.805/string.sharp:316:8: note:  
		    def operator+(num : _uint64) : string {
		       ^

0 [0x0]: line: 317 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           pushobj   
6 [0x6]:           call @2935 // <std#string.string>   
7 [0x7]:           popobj2    
8 [0x8]:           smovr_3 fp+2   
9 [0x9]: line: 318 pushl 2   
10 [0xa]:           ipushl #1   
11 [0xb]:           call @2942 // <std#string.append>   
12 [0xc]:           pop   
13 [0xd]: line: 319 movl 2   
14 [0xe]:           returnobj   
15 [0xf]:           ret   


function: std#string.size[2976] params(0) in file: lib\support\0.2.805/string.sharp:322:8: note:  
		    def size() := sizeof(data);
		       ^

0 [0x0]: line: 322 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           sizeof ebx   
4 [0x4]:           return_val ebx   
5 [0x5]:           ret   


function: std#string.parse[2977] params(1) in file: lib\support\0.2.805/string.sharp:324:15: note:  
		    static def parse( number : var ) := new string(snprintf(currentFormat, number, precision));
		              ^

0 [0x0]: line: 324 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           movg @64 // @std#string   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           rstore ebx   
9 [0x9]:           ipushl #0   
10 [0xa]:           movg @64 // @std#string   
11 [0xb]:           movn #1   
13 [0xd]:           movi #0, adx   
15 [0xf]:           iaload ebx, adx   
16 [0x10]:           rstore ebx   
17 [0x11]:           call @1570 // <std#__srt_global.snprintf>   
18 [0x12]:           call @2935 // <std#string.string>   
19 [0x13]:           popobj2    
20 [0x14]:           returnobj   
21 [0x15]:           ret   


overload function: std#string.operator+=[2978] params(1) in file: lib\support\0.2.805/string.sharp:326:8: note:  
		    def operator+=( num: var ) := append(parse(num).data);
		       ^

0 [0x0]: line: 326 pushl 0   
1 [0x1]:           ipushl #1   
2 [0x2]:           call @2977 // <std#string.parse>   
3 [0x3]:           popobj2    
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @2945 // <std#string.append>   
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


overload function: std#string.operator+=[2979] params(1) in file: lib\support\0.2.805/string.sharp:327:8: note:  
		    def operator+=( num: _int8 ) := append(num);
		       ^

0 [0x0]: line: 327 pushl 0   
1 [0x1]:           ipushl #1   
2 [0x2]:           call @2942 // <std#string.append>   
3 [0x3]:           popobj2    
4 [0x4]:           returnobj   
5 [0x5]:           ret   


overload function: std#string.operator+=[2980] params(1) in file: lib\support\0.2.805/string.sharp:328:8: note:  
		    def operator+=( num: _uint8 ) := append(num);
		       ^

0 [0x0]: line: 328 pushl 0   
1 [0x1]:           ipushl #1   
2 [0x2]:           call @2942 // <std#string.append>   
3 [0x3]:           popobj2    
4 [0x4]:           returnobj   
5 [0x5]:           ret   


overload function: std#string.operator+=[2981] params(1) in file: lib\support\0.2.805/string.sharp:329:8: note:  
		    def operator+=( num: _int16 ) := append(parse(num).data);
		       ^

0 [0x0]: line: 329 pushl 0   
1 [0x1]:           ipushl #1   
2 [0x2]:           call @2977 // <std#string.parse>   
3 [0x3]:           popobj2    
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @2945 // <std#string.append>   
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


overload function: std#string.operator+=[2982] params(1) in file: lib\support\0.2.805/string.sharp:330:8: note:  
		    def operator+=( num: _uint16 ) := append(parse(num).data);
		       ^

0 [0x0]: line: 330 pushl 0   
1 [0x1]:           ipushl #1   
2 [0x2]:           call @2977 // <std#string.parse>   
3 [0x3]:           popobj2    
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @2945 // <std#string.append>   
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


overload function: std#string.operator+=[2983] params(1) in file: lib\support\0.2.805/string.sharp:331:8: note:  
		    def operator+=( num: _int32 ) := append(parse(num).data);
		       ^

0 [0x0]: line: 331 pushl 0   
1 [0x1]:           ipushl #1   
2 [0x2]:           call @2977 // <std#string.parse>   
3 [0x3]:           popobj2    
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @2945 // <std#string.append>   
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


overload function: std#string.operator+=[2984] params(1) in file: lib\support\0.2.805/string.sharp:332:8: note:  
		    def operator+=( num: _uint32 ) := append(parse(num).data);
		       ^

0 [0x0]: line: 332 pushl 0   
1 [0x1]:           ipushl #1   
2 [0x2]:           call @2977 // <std#string.parse>   
3 [0x3]:           popobj2    
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @2945 // <std#string.append>   
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


overload function: std#string.operator+=[2985] params(1) in file: lib\support\0.2.805/string.sharp:333:8: note:  
		    def operator+=( num: _int64 ) := append(parse(num).data);
		       ^

0 [0x0]: line: 333 pushl 0   
1 [0x1]:           ipushl #1   
2 [0x2]:           call @2977 // <std#string.parse>   
3 [0x3]:           popobj2    
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @2945 // <std#string.append>   
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


overload function: std#string.operator+=[2986] params(1) in file: lib\support\0.2.805/string.sharp:334:8: note:  
		    def operator+=( num: _uint64 ) := append(parse(num).data);
		       ^

0 [0x0]: line: 334 pushl 0   
1 [0x1]:           ipushl #1   
2 [0x2]:           call @2977 // <std#string.parse>   
3 [0x3]:           popobj2    
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @2945 // <std#string.append>   
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


overload function: std#string.operator+=[2987] params(1) in file: lib\support\0.2.805/string.sharp:336:8: note:  
		    def operator+=( obj: printable ) : string
		       ^

0 [0x0]: line: 338 pushl 1   
1 [0x1]:           invoke_delegate 2926 { static=0, args=0 }   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+2   
5 [0x5]: line: 339 movl 2   
6 [0x6]:           checknull   
7 [0x7]:           not ebx, ebx   
8 [0x8]:           skne ebx // pc = 16   
9 [0x9]:           movl 2   
10 [0xa]:           movn #0   
12 [0xc]:           pushobj   
13 [0xd]:           pushnull    
14 [0xe]:           itest ebx   
15 [0xf]:           not ebx, ebx   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 28   
18 [0x12]: line: 340 pushl 0   
19 [0x13]:           movl 2   
20 [0x14]:           movn #0   
22 [0x16]:           pushobj   
23 [0x17]:           call @2945 // <std#string.append>   
24 [0x18]:           popobj2    
25 [0x19]:           returnobj   
26 [0x1a]:           ret   
27 [0x1b]:           jmp @34   
28 [0x1c]: line: 342 pushl 0   
29 [0x1d]:           newstr @50 // null   
30 [0x1e]:           call @2945 // <std#string.append>   
31 [0x1f]:           popobj2    
32 [0x20]:           returnobj   
33 [0x21]:           ret   
34 [0x22]:           nop   


overload function: std#string.operator+=[2988] params(1) in file: lib\support\0.2.805/string.sharp:345:8: note:  
		    def operator+=( str: string ) := append(str.data);
		       ^

0 [0x0]: line: 345 pushl 0   
1 [0x1]:           movl 1   
2 [0x2]:           movn #0   
4 [0x4]:           pushobj   
5 [0x5]:           call @2945 // <std#string.append>   
6 [0x6]:           popobj2    
7 [0x7]:           returnobj   
8 [0x8]:           ret   


overload function: std#string.operator+=[2989] params(1) in file: lib\support\0.2.805/string.sharp:347:8: note:  
		    def operator+=( str: _int8[] ) := append(str);
		       ^

0 [0x0]: line: 347 pushl 0   
1 [0x1]:           pushl 1   
2 [0x2]:           call @2945 // <std#string.append>   
3 [0x3]:           popobj2    
4 [0x4]:           returnobj   
5 [0x5]:           ret   


function: std#string.substring[2990] params(2) in file: lib\support\0.2.805/string.sharp:349:8: note:  
		    def substring(start_pos: var, end_pos: var) : string {
		       ^

0 [0x0]: line: 350 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           sizeof ebx   
5 [0x5]:           loadval ecx   
6 [0x6]:           gte ecx, ebx   
7 [0x7]:           movr ebx, cmt   
8 [0x8]:           skpe ebx // pc = 14   
9 [0x9]:           loadl ecx, fp+1   
10 [0xa]:           movi #0, ebx   
12 [0xc]:           lt ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           movr cmt, ebx   
15 [0xf]:           jne 20   
16 [0x10]: line: 351 pushl 0   
17 [0x11]:           ipushl #1   
18 [0x12]:           call @2991 // <std#string.bounds_error>   
19 [0x13]:           throw    
20 [0x14]:           nop   
21 [0x15]: line: 352 ipushl #2   
22 [0x16]:           loadl ebx, fp+1   
23 [0x17]:           loadval ecx   
24 [0x18]:           lt ecx, ebx   
25 [0x19]:           movr ebx, cmt   
26 [0x1a]:           movr cmt, ebx   
27 [0x1b]:           jne 42   
28 [0x1c]: line: 353 new_class @4 // std#illegal_argument_exception   
29 [0x1d]:           dup    
30 [0x1e]:           new_class @64 // std#string   
31 [0x1f]:           dup    
32 [0x20]:           newstr @52 // end_pos:    
33 [0x21]:           call @2935 // <std#string.string>   
34 [0x22]:           ipushl #2   
35 [0x23]:           call @2967 // <std#string.operator+>   
36 [0x24]:           newstr @53 //  cannot be less than the start_pos:    
37 [0x25]:           call @2947 // <std#string.operator+>   
38 [0x26]:           ipushl #1   
39 [0x27]:           call @2967 // <std#string.operator+>   
40 [0x28]:           call @1630 // <std#illegal_argument_exception.illegal_argument_exception>   
41 [0x29]:           throw    
42 [0x2a]:           nop   
43 [0x2b]: line: 357 new_class @64 // std#string   
44 [0x2c]:           dup    
45 [0x2d]:           call @2993 // <std#string.string>   
46 [0x2e]:           popobj2    
47 [0x2f]:           smovr_3 fp+3   
48 [0x30]: line: 358 movl 0   
49 [0x31]:           movn #0   
51 [0x33]:           pushobj   
52 [0x34]:           ipushl #1   
53 [0x35]:           ipushl #2   
54 [0x36]:           call @1757 // <std.io#__srt_global.copy>   
55 [0x37]:           movl 3   
56 [0x38]:           movn #0   
58 [0x3a]:           popobj   
59 [0x3b]: line: 359 movl 3   
60 [0x3c]:           returnobj   
61 [0x3d]:           ret   


function: std#string.bounds_error[2991] params(1) in file: lib\support\0.2.805/string.sharp:362:16: note:  
		    private def bounds_error(pos : var) : error {
		               ^

0 [0x0]: line: 363 new_class @6 // std#out_of_bounds_exception   
1 [0x1]:           dup    
2 [0x2]:           new_class @64 // std#string   
3 [0x3]:           dup    
4 [0x4]:           newstr @54 // Index out of bounds exception at:    
5 [0x5]:           call @2935 // <std#string.string>   
6 [0x6]:           ipushl #1   
7 [0x7]:           call @2967 // <std#string.operator+>   
8 [0x8]:           newstr @55 //  with size of:    
9 [0x9]:           call @2947 // <std#string.operator+>   
10 [0xa]:           movl 0   
11 [0xb]:           movn #0   
13 [0xd]:           sizeof ebx   
14 [0xe]:           rstore ebx   
15 [0xf]:           call @2967 // <std#string.operator+>   
16 [0x10]:           call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
17 [0x11]:           popobj2    
18 [0x12]:           returnobj   
19 [0x13]:           ret   


function: std#string.hash[2992] params(0) in file: lib\support\0.2.805/string.sharp:366:8: note:  
		    def hash() : long {
		       ^

0 [0x0]: line: 367 istorel 0, fp+1   
2 [0x2]: line: 368 istorel 1, fp+2   
4 [0x4]: line: 369 istorel -1, fp+4   
6 [0x6]: line: 370 movl 0   
7 [0x7]: line: 371 movn #0   
9 [0x9]:           pushobj   
10 [0xa]:           popl 5   
11 [0xb]:           iaddl 1, fp@4   
13 [0xd]:           movl 5   
14 [0xe]:           sizeof ecx   
15 [0xf]:           loadl ebx, fp+4   
16 [0x10]:           lt ebx, ecx   
17 [0x11]:           jne 55   
18 [0x12]:           iaload ecx, ebx   
19 [0x13]:           smovr_2 ecx, fp+3   
20 [0x14]: line: 372 ipushl #1   
21 [0x15]:           ipushl #3   
22 [0x16]:           movi #97, ebx   
24 [0x18]:           loadval ecx   
25 [0x19]:           sub ecx, ebx -> ebx   
26 [0x1a]:           rstore ebx   
27 [0x1b]:           movi #1, ebx   
29 [0x1d]:           loadval ecx   
30 [0x1e]:           add ecx, ebx -> ebx   
31 [0x1f]:           rstore ebx   
32 [0x20]:           loadl ebx, fp+2   
33 [0x21]:           loadval ecx   
34 [0x22]:           mul ecx, ebx -> ebx   
35 [0x23]:           loadval ecx   
36 [0x24]:           add ecx, ebx -> ebx   
37 [0x25]:           rstore ebx   
38 [0x26]:           movi #1000000009, ebx   
40 [0x28]:           loadval ecx   
41 [0x29]:           mod ecx, ebx -> ebx   
42 [0x2a]:           smovr_2 ebx, fp+1   
43 [0x2b]: line: 373 ipushl #2   
44 [0x2c]:           movi #31, ebx   
46 [0x2e]:           loadval ecx   
47 [0x2f]:           mul ecx, ebx -> ebx   
48 [0x30]:           rstore ebx   
49 [0x31]:           movi #1000000009, ebx   
51 [0x33]:           loadval ecx   
52 [0x34]:           mod ecx, ebx -> ebx   
53 [0x35]:           smovr_2 ebx, fp+2   
54 [0x36]:           jmp @11   
55 [0x37]: line: 375 new_class @45 // std#long   
56 [0x38]:           dup    
57 [0x39]:           ipushl #1   
58 [0x3a]:           call @2077 // <std#long.long>   
59 [0x3b]:           popobj2    
60 [0x3c]:           returnobj   
61 [0x3d]:           ret   


constructor: std#string.string[2993] params(0) in file: lib\support\0.2.805/string.sharp:5:6: note:  
		class string : loopable<_int8> {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


function: std#string_builder.set_resize_capacity[2994] params(1) in file: lib\support\0.2.805/string_builder.sharp:20:8: note:  
		    def set_resize_capacity(new_capacity: var) {
		       ^

0 [0x0]: line: 21 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #1   
4 [0x4]:          loadval ebx   
5 [0x5]:          movi #0, adx   
7 [0x7]:          rmov adx, ebx   
8 [0x8]:          ret   


constructor: std#string_builder.string_builder[2995] params(1) in file: lib\support\0.2.805/string_builder.sharp:24:19: note:  
		    string_builder(str : _int8[]) {
		                  ^

0 [0x0]:         movi #128, ebx   
2 [0x2]:         movl 0   
3 [0x3]:         movn #1   
5 [0x5]:         movi #0, adx   
7 [0x7]:         rmov adx, ebx   
8 [0x8]:         movi #0, ebx   
10 [0xa]:         movl 0   
11 [0xb]:         movn #2   
13 [0xd]:         movi #0, adx   
15 [0xf]:         rmov adx, ebx   
16 [0x10]:         movi #0, ebx   
18 [0x12]:         movl 0   
19 [0x13]:         movn #3   
21 [0x15]:         movi #0, adx   
23 [0x17]:         rmov adx, ebx   
24 [0x18]: line: 15 movi #255, ebx   
26 [0x1a]:          newarry ebx   
27 [0x1b]:          movl 0   
28 [0x1c]:          movn #0   
30 [0x1e]:          popobj   
31 [0x1f]: line: 16 movi #255, ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #2   
36 [0x24]:          movi #0, adx   
38 [0x26]:          rmov adx, ebx   
39 [0x27]: line: 17 movi #-1, ebx   
41 [0x29]:          movl 0   
42 [0x2a]:          movn #3   
44 [0x2c]:          movi #0, adx   
46 [0x2e]:          rmov adx, ebx   
47 [0x2f]:          pushl 0   
48 [0x30]: line: 25 movl 1   
49 [0x31]:          checknull   
50 [0x32]:          not ebx, ebx   
51 [0x33]:          movr cmt, ebx   
52 [0x34]:          jne 57   
53 [0x35]: line: 26 pushl 0   
54 [0x36]:          pushl 1   
55 [0x37]:          call @3007 // <std#string_builder.append>   
56 [0x38]:          pop   
57 [0x39]:          nop   
58 [0x3a]:          ret   


constructor: std#string_builder.string_builder[2996] params(1) in file: lib\support\0.2.805/string_builder.sharp:30:19: note:  
		    string_builder(ch: var) {
		                  ^

0 [0x0]:         movi #128, ebx   
2 [0x2]:         movl 0   
3 [0x3]:         movn #1   
5 [0x5]:         movi #0, adx   
7 [0x7]:         rmov adx, ebx   
8 [0x8]:         movi #0, ebx   
10 [0xa]:         movl 0   
11 [0xb]:         movn #2   
13 [0xd]:         movi #0, adx   
15 [0xf]:         rmov adx, ebx   
16 [0x10]:         movi #0, ebx   
18 [0x12]:         movl 0   
19 [0x13]:         movn #3   
21 [0x15]:         movi #0, adx   
23 [0x17]:         rmov adx, ebx   
24 [0x18]: line: 15 movi #255, ebx   
26 [0x1a]:          newarry ebx   
27 [0x1b]:          movl 0   
28 [0x1c]:          movn #0   
30 [0x1e]:          popobj   
31 [0x1f]: line: 16 movi #255, ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #2   
36 [0x24]:          movi #0, adx   
38 [0x26]:          rmov adx, ebx   
39 [0x27]: line: 17 movi #-1, ebx   
41 [0x29]:          movl 0   
42 [0x2a]:          movn #3   
44 [0x2c]:          movi #0, adx   
46 [0x2e]:          rmov adx, ebx   
47 [0x2f]:          pushl 0   
48 [0x30]: line: 31 pushl 0   
49 [0x31]:          ipushl #1   
50 [0x32]:          call @3004 // <std#string_builder.append>   
51 [0x33]:          pop   
52 [0x34]:          ret   


constructor: std#string_builder.string_builder[2997] params(1) in file: lib\support\0.2.805/string_builder.sharp:34:19: note:  
		    string_builder(str : char[]) {
		                  ^

0 [0x0]:         movi #128, ebx   
2 [0x2]:         movl 0   
3 [0x3]:         movn #1   
5 [0x5]:         movi #0, adx   
7 [0x7]:         rmov adx, ebx   
8 [0x8]:         movi #0, ebx   
10 [0xa]:         movl 0   
11 [0xb]:         movn #2   
13 [0xd]:         movi #0, adx   
15 [0xf]:         rmov adx, ebx   
16 [0x10]:         movi #0, ebx   
18 [0x12]:         movl 0   
19 [0x13]:         movn #3   
21 [0x15]:         movi #0, adx   
23 [0x17]:         rmov adx, ebx   
24 [0x18]: line: 15 movi #255, ebx   
26 [0x1a]:          newarry ebx   
27 [0x1b]:          movl 0   
28 [0x1c]:          movn #0   
30 [0x1e]:          popobj   
31 [0x1f]: line: 16 movi #255, ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #2   
36 [0x24]:          movi #0, adx   
38 [0x26]:          rmov adx, ebx   
39 [0x27]: line: 17 movi #-1, ebx   
41 [0x29]:          movl 0   
42 [0x2a]:          movn #3   
44 [0x2c]:          movi #0, adx   
46 [0x2e]:          rmov adx, ebx   
47 [0x2f]:          pushl 0   
48 [0x30]: line: 35 movl 1   
49 [0x31]:          checknull   
50 [0x32]:          not ebx, ebx   
51 [0x33]:          movr cmt, ebx   
52 [0x34]:          jne 111   
53 [0x35]: line: 36 pushl 0   
54 [0x36]:          movl 1   
55 [0x37]:          sizeof ebx   
56 [0x38]:          rstore ebx   
57 [0x39]:          call @3001 // <std#string_builder.space_available>   
58 [0x3a]:          loadval ebx   
59 [0x3b]:          not ebx, ebx   
60 [0x3c]:          movr cmt, ebx   
61 [0x3d]:          jne 67   
62 [0x3e]: line: 37 pushl 0   
63 [0x3f]:          movl 1   
64 [0x40]:          sizeof ebx   
65 [0x41]:          rstore ebx   
66 [0x42]:          call @3002 // <std#string_builder.expand>   
67 [0x43]:          nop   
68 [0x44]: line: 40 movl 1   
69 [0x45]:          sizeof ebx   
70 [0x46]:          newarry ebx   
71 [0x47]:          movl 0   
72 [0x48]:          movn #0   
74 [0x4a]:          popobj   
75 [0x4b]: line: 41 istorel -1, fp+3   
77 [0x4d]:          pushl 1   
78 [0x4e]:          popl 4   
79 [0x4f]:          iaddl 1, fp@3   
81 [0x51]:          movl 4   
82 [0x52]:          sizeof ecx   
83 [0x53]:          loadl ebx, fp+3   
84 [0x54]:          lt ebx, ecx   
85 [0x55]:          jne 111   
86 [0x56]:          movnd ebx   
87 [0x57]:          pushobj   
88 [0x58]:          popl 2   
89 [0x59]: line: 42 pushl 2   
90 [0x5a]:          call @1566 // <std#integer<_int8>.get_value>   
91 [0x5b]:          movl 0   
92 [0x5c]:          movn #0   
94 [0x5e]:          pushobj   
95 [0x5f]:          movl 0   
96 [0x60]:          movn #3   
98 [0x62]:          movi #0, adx   
100 [0x64]:          iaload ebx, adx   
101 [0x65]:          inc ebx   
102 [0x66]:          movi #0, adx   
104 [0x68]:          rmov adx, ebx   
105 [0x69]:          popobj2    
106 [0x6a]:          movr adx, ebx   
107 [0x6b]:          chklen adx   
108 [0x6c]:          loadval ebx   
109 [0x6d]:          rmov adx, ebx   
110 [0x6e]:          jmp @79   
111 [0x6f]:          nop   
112 [0x70]:          ret   


constructor: std#string_builder.string_builder[2998] params(1) in file: lib\support\0.2.805/string_builder.sharp:47:19: note:  
		    string_builder(str: string) {
		                  ^

0 [0x0]:         movi #128, ebx   
2 [0x2]:         movl 0   
3 [0x3]:         movn #1   
5 [0x5]:         movi #0, adx   
7 [0x7]:         rmov adx, ebx   
8 [0x8]:         movi #0, ebx   
10 [0xa]:         movl 0   
11 [0xb]:         movn #2   
13 [0xd]:         movi #0, adx   
15 [0xf]:         rmov adx, ebx   
16 [0x10]:         movi #0, ebx   
18 [0x12]:         movl 0   
19 [0x13]:         movn #3   
21 [0x15]:         movi #0, adx   
23 [0x17]:         rmov adx, ebx   
24 [0x18]: line: 15 movi #255, ebx   
26 [0x1a]:          newarry ebx   
27 [0x1b]:          movl 0   
28 [0x1c]:          movn #0   
30 [0x1e]:          popobj   
31 [0x1f]: line: 16 movi #255, ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #2   
36 [0x24]:          movi #0, adx   
38 [0x26]:          rmov adx, ebx   
39 [0x27]: line: 17 movi #-1, ebx   
41 [0x29]:          movl 0   
42 [0x2a]:          movn #3   
44 [0x2c]:          movi #0, adx   
46 [0x2e]:          rmov adx, ebx   
47 [0x2f]:          pushl 0   
48 [0x30]: line: 48 movl 1   
49 [0x31]:          checknull   
50 [0x32]:          not ebx, ebx   
51 [0x33]:          movr cmt, ebx   
52 [0x34]:          jne 58   
53 [0x35]: line: 49 pushl 0   
54 [0x36]:          pushl 1   
55 [0x37]:          call @2961 // <std#string.get_data>   
56 [0x38]:          call @3007 // <std#string_builder.append>   
57 [0x39]:          pop   
58 [0x3a]:          nop   
59 [0x3b]:          ret   


constructor: std#string_builder.string_builder[2999] params(1) in file: lib\support\0.2.805/string_builder.sharp:53:19: note:  
		    string_builder(str: string_builder) {
		                  ^

0 [0x0]:         movi #128, ebx   
2 [0x2]:         movl 0   
3 [0x3]:         movn #1   
5 [0x5]:         movi #0, adx   
7 [0x7]:         rmov adx, ebx   
8 [0x8]:         movi #0, ebx   
10 [0xa]:         movl 0   
11 [0xb]:         movn #2   
13 [0xd]:         movi #0, adx   
15 [0xf]:         rmov adx, ebx   
16 [0x10]:         movi #0, ebx   
18 [0x12]:         movl 0   
19 [0x13]:         movn #3   
21 [0x15]:         movi #0, adx   
23 [0x17]:         rmov adx, ebx   
24 [0x18]: line: 15 movi #255, ebx   
26 [0x1a]:          newarry ebx   
27 [0x1b]:          movl 0   
28 [0x1c]:          movn #0   
30 [0x1e]:          popobj   
31 [0x1f]: line: 16 movi #255, ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #2   
36 [0x24]:          movi #0, adx   
38 [0x26]:          rmov adx, ebx   
39 [0x27]: line: 17 movi #-1, ebx   
41 [0x29]:          movl 0   
42 [0x2a]:          movn #3   
44 [0x2c]:          movi #0, adx   
46 [0x2e]:          rmov adx, ebx   
47 [0x2f]:          pushl 0   
48 [0x30]: line: 54 movl 1   
49 [0x31]:          checknull   
50 [0x32]:          not ebx, ebx   
51 [0x33]:          movr cmt, ebx   
52 [0x34]:          jne 60   
53 [0x35]: line: 55 pushl 0   
54 [0x36]:          movl 1   
55 [0x37]:          movn #0   
57 [0x39]:          pushobj   
58 [0x3a]:          call @3007 // <std#string_builder.append>   
59 [0x3b]:          pop   
60 [0x3c]:          nop   
61 [0x3d]:          ret   


constructor: std#string_builder.string_builder[3000] params(2) in file: lib\support\0.2.805/string_builder.sharp:59:19: note:  
		    string_builder(str : _int8[], offset: var) {
		                  ^

0 [0x0]:         movi #128, ebx   
2 [0x2]:         movl 0   
3 [0x3]:         movn #1   
5 [0x5]:         movi #0, adx   
7 [0x7]:         rmov adx, ebx   
8 [0x8]:         movi #0, ebx   
10 [0xa]:         movl 0   
11 [0xb]:         movn #2   
13 [0xd]:         movi #0, adx   
15 [0xf]:         rmov adx, ebx   
16 [0x10]:         movi #0, ebx   
18 [0x12]:         movl 0   
19 [0x13]:         movn #3   
21 [0x15]:         movi #0, adx   
23 [0x17]:         rmov adx, ebx   
24 [0x18]: line: 15 movi #255, ebx   
26 [0x1a]:          newarry ebx   
27 [0x1b]:          movl 0   
28 [0x1c]:          movn #0   
30 [0x1e]:          popobj   
31 [0x1f]: line: 16 movi #255, ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #2   
36 [0x24]:          movi #0, adx   
38 [0x26]:          rmov adx, ebx   
39 [0x27]: line: 17 movi #-1, ebx   
41 [0x29]:          movl 0   
42 [0x2a]:          movn #3   
44 [0x2c]:          movi #0, adx   
46 [0x2e]:          rmov adx, ebx   
47 [0x2f]:          pushl 0   
48 [0x30]: line: 60 movl 1   
49 [0x31]:          checknull   
50 [0x32]:          not ebx, ebx   
51 [0x33]:          movr cmt, ebx   
52 [0x34]:          jne 114   
53 [0x35]: line: 61 pushl 0   
54 [0x36]:          movl 1   
55 [0x37]:          sizeof ebx   
56 [0x38]:          rstore ebx   
57 [0x39]:          loadl ebx, fp+2   
58 [0x3a]:          loadval ecx   
59 [0x3b]:          sub ecx, ebx -> ebx   
60 [0x3c]:          rstore ebx   
61 [0x3d]:          call @3001 // <std#string_builder.space_available>   
62 [0x3e]:          loadval ebx   
63 [0x3f]:          not ebx, ebx   
64 [0x40]:          movr cmt, ebx   
65 [0x41]:          jne 71   
66 [0x42]: line: 62 pushl 0   
67 [0x43]:          movl 1   
68 [0x44]:          sizeof ebx   
69 [0x45]:          rstore ebx   
70 [0x46]:          call @3002 // <std#string_builder.expand>   
71 [0x47]:          nop   
72 [0x48]: line: 65 pushl 1   
73 [0x49]:          movl 0   
74 [0x4a]:          movn #0   
76 [0x4c]:          pushobj   
77 [0x4d]:          movl 0   
78 [0x4e]:          movn #3   
80 [0x50]:          movi #0, adx   
82 [0x52]:          iaload ebx, adx   
83 [0x53]:          inc ebx   
84 [0x54]:          movi #0, adx   
86 [0x56]:          rmov adx, ebx   
87 [0x57]:          rstore ebx   
88 [0x58]:          ipushl #2   
89 [0x59]:          movl 1   
90 [0x5a]:          sizeof ebx   
91 [0x5b]:          rstore ebx   
92 [0x5c]:          call @1747 // <std.io#__srt_global.memcopy>   
93 [0x5d]: line: 66 movl 1   
94 [0x5e]:          sizeof ebx   
95 [0x5f]:          rstore ebx   
96 [0x60]:          loadl ebx, fp+2   
97 [0x61]:          loadval ecx   
98 [0x62]:          sub ecx, ebx -> ebx   
99 [0x63]:          rstore ebx   
100 [0x64]:          movi #1, ebx   
102 [0x66]:          loadval ecx   
103 [0x67]:          sub ecx, ebx -> ebx   
104 [0x68]:          rstore ebx   
105 [0x69]:          movl 0   
106 [0x6a]:          movn #3   
108 [0x6c]:          movi #0, adx   
110 [0x6e]:          iaload ecx, adx   
111 [0x6f]:          loadval ebx   
112 [0x70]:          add ecx, ebx -> ebx   
113 [0x71]:          rmov adx, ebx   
114 [0x72]:          nop   
115 [0x73]:          ret   


function: std#string_builder.space_available[3001] params(1) in file: lib\support\0.2.805/string_builder.sharp:70:8: note:  
		    def space_available(space_required : var) : var {
		       ^

0 [0x0]: line: 71 movl 0   
1 [0x1]:          movn #3   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #1, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          add ecx, ebx -> ebx   
11 [0xb]:          rstore ebx   
12 [0xc]:          loadl ebx, fp+1   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          rstore ebx   
16 [0x10]:          movl 0   
17 [0x11]:          movn #0   
19 [0x13]:          sizeof ebx   
20 [0x14]:          loadval ecx   
21 [0x15]:          lt ecx, ebx   
22 [0x16]:          return_val cmt   
23 [0x17]:          ret   


function: std#string_builder.expand[3002] params(1) in file: lib\support\0.2.805/string_builder.sharp:74:8: note:  
		    def expand(space_required : var) {
		       ^

0 [0x0]: line: 75 movl 0   
1 [0x1]:          movn #3   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #1, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          add ecx, ebx -> ebx   
11 [0xb]:          rstore ebx   
12 [0xc]:          loadl ebx, fp+1   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          rstore ebx   
16 [0x10]:          movl 0   
17 [0x11]:          movn #1   
19 [0x13]:          movi #0, adx   
21 [0x15]:          iaload ebx, adx   
22 [0x16]:          loadval ecx   
23 [0x17]:          add ecx, ebx -> ebx   
24 [0x18]:          smovr_2 ebx, fp+2   
25 [0x19]: line: 76 movl 0   
26 [0x1a]:          movn #0   
28 [0x1c]:          pushobj   
29 [0x1d]:          ipushl #2   
30 [0x1e]:          call @1737 // <std.io#__srt_global.realloc>   
31 [0x1f]:          ret   


function: std#string_builder.replace[3003] params(2) in file: lib\support\0.2.805/string_builder.sharp:79:8: note:  
		    def replace(pos : var, ch: _int8) : string_builder {
		       ^

0 [0x0]: line: 80 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          sizeof ebx   
5 [0x5]:          loadval ecx   
6 [0x6]:          gte ecx, ebx   
7 [0x7]:          movr ebx, cmt   
8 [0x8]:          movr cmt, ebx   
9 [0x9]:          jne 14   
10 [0xa]: line: 81 pushl 0   
11 [0xb]:          ipushl #1   
12 [0xc]:          call @3036 // <std#string_builder.bounds_error>   
13 [0xd]:          throw    
14 [0xe]:          nop   
15 [0xf]: line: 84 ipushl #2   
16 [0x10]:          movl 0   
17 [0x11]:          movn #0   
19 [0x13]:          pushobj   
20 [0x14]:          loadl ebx, fp+1   
21 [0x15]:          popobj2    
22 [0x16]:          movr adx, ebx   
23 [0x17]:          chklen adx   
24 [0x18]:          loadval ebx   
25 [0x19]:          rmov adx, ebx   
26 [0x1a]: line: 85 movl 0   
27 [0x1b]:          returnobj   
28 [0x1c]:          ret   


function: std#string_builder.append[3004] params(1) in file: lib\support\0.2.805/string_builder.sharp:88:8: note:  
		    def append(ch: var) : string_builder
		       ^

0 [0x0]: line: 90 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          pushnull    
5 [0x5]:          itest ebx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 16   
8 [0x8]: line: 91 movi #255, ebx   
10 [0xa]:          newarry ebx   
11 [0xb]:          movl 0   
12 [0xc]:          movn #0   
14 [0xe]:          popobj   
15 [0xf]:          jmp @41   
16 [0x10]:          movl 0   
17 [0x11]:          movn #3   
19 [0x13]:          movi #0, adx   
21 [0x15]:          iaload ebx, adx   
22 [0x16]:          rstore ebx   
23 [0x17]:          movi #1, ebx   
25 [0x19]:          loadval ecx   
26 [0x1a]:          add ecx, ebx -> ebx   
27 [0x1b]:          rstore ebx   
28 [0x1c]:          movl 0   
29 [0x1d]:          movn #0   
31 [0x1f]:          sizeof ebx   
32 [0x20]:          loadval ecx   
33 [0x21]:          gte ecx, ebx   
34 [0x22]:          movr ebx, cmt   
35 [0x23]:          movr cmt, ebx   
36 [0x24]:          jne 41   
37 [0x25]: line: 93 pushl 0   
38 [0x26]:          istore 0   
40 [0x28]:          call @3002 // <std#string_builder.expand>   
41 [0x29]:          nop   
42 [0x2a]: line: 95 ipushl #1   
43 [0x2b]:          movl 0   
44 [0x2c]:          movn #0   
46 [0x2e]:          pushobj   
47 [0x2f]:          movl 0   
48 [0x30]:          movn #0   
50 [0x32]:          sizeof ebx   
51 [0x33]:          rstore ebx   
52 [0x34]:          movi #1, ebx   
54 [0x36]:          loadval ecx   
55 [0x37]:          sub ecx, ebx -> ebx   
56 [0x38]:          popobj2    
57 [0x39]:          movr adx, ebx   
58 [0x3a]:          chklen adx   
59 [0x3b]:          loadval ebx   
60 [0x3c]:          rmov adx, ebx   
61 [0x3d]: line: 96 movl 0   
62 [0x3e]:          returnobj   
63 [0x3f]:          ret   


function: std#string_builder.get_elements[3005] params(0) in file: lib\support\0.2.805/string_builder.sharp:99:8: note:  
		    def get_elements() := to_string().get_elements();
		       ^

0 [0x0]: line: 99 pushl 0   
1 [0x1]:          call @3011 // <std#string_builder.to_string>   
2 [0x2]:          call @2962 // <std#string.get_elements>   
3 [0x3]:          popobj2    
4 [0x4]:          returnobj   
5 [0x5]:          ret   


function: std#string_builder.append[3006] params(1) in file: lib\support\0.2.805/string_builder.sharp:101:8: note:  
		    def append(c: char) := append(c.get_value());
		       ^

0 [0x0]: line: 101 pushl 0   
1 [0x1]:           pushl 1   
2 [0x2]:           call @1566 // <std#integer<_int8>.get_value>   
3 [0x3]:           call @3004 // <std#string_builder.append>   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   


function: std#string_builder.append[3007] params(1) in file: lib\support\0.2.805/string_builder.sharp:103:8: note:  
		    def append(immstr: _int8[]) : string_builder
		       ^

0 [0x0]: line: 105 movl 1   
1 [0x1]:           checknull   
2 [0x2]:           movr cmt, ebx   
3 [0x3]:           jne 7   
4 [0x4]:           movl 0   
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]:           nop   
8 [0x8]: line: 107 movl 0   
9 [0x9]:           movn #0   
11 [0xb]:           pushobj   
12 [0xc]:           pushnull    
13 [0xd]:           itest ebx   
14 [0xe]:           movr cmt, ebx   
15 [0xf]:           jne 29   
16 [0x10]: line: 108 movl 1   
17 [0x11]:           sizeof ebx   
18 [0x12]:           rstore ebx   
19 [0x13]:           movi #255, ebx   
21 [0x15]:           loadval ecx   
22 [0x16]:           add ecx, ebx -> ebx   
23 [0x17]:           newarry ebx   
24 [0x18]:           movl 0   
25 [0x19]:           movn #0   
27 [0x1b]:           popobj   
28 [0x1c]:           jmp @43   
29 [0x1d]:           pushl 0   
30 [0x1e]:           movl 1   
31 [0x1f]:           sizeof ebx   
32 [0x20]:           rstore ebx   
33 [0x21]:           call @3001 // <std#string_builder.space_available>   
34 [0x22]:           loadval ebx   
35 [0x23]:           not ebx, ebx   
36 [0x24]:           movr cmt, ebx   
37 [0x25]:           jne 43   
38 [0x26]: line: 110 pushl 0   
39 [0x27]:           movl 1   
40 [0x28]:           sizeof ebx   
41 [0x29]:           rstore ebx   
42 [0x2a]:           call @3002 // <std#string_builder.expand>   
43 [0x2b]:           nop   
44 [0x2c]: line: 112 pushl 1   
45 [0x2d]:           movl 0   
46 [0x2e]:           movn #0   
48 [0x30]:           pushobj   
49 [0x31]:           movl 0   
50 [0x32]:           movn #3   
52 [0x34]:           movi #0, adx   
54 [0x36]:           iaload ebx, adx   
55 [0x37]:           inc ebx   
56 [0x38]:           movi #0, adx   
58 [0x3a]:           rmov adx, ebx   
59 [0x3b]:           rstore ebx   
60 [0x3c]:           istore 0   
62 [0x3e]:           movl 1   
63 [0x3f]:           sizeof ebx   
64 [0x40]:           rstore ebx   
65 [0x41]:           call @1747 // <std.io#__srt_global.memcopy>   
66 [0x42]: line: 113 movl 1   
67 [0x43]:           sizeof ebx   
68 [0x44]:           rstore ebx   
69 [0x45]:           movi #1, ebx   
71 [0x47]:           loadval ecx   
72 [0x48]:           sub ecx, ebx -> ebx   
73 [0x49]:           rstore ebx   
74 [0x4a]:           movl 0   
75 [0x4b]:           movn #3   
77 [0x4d]:           movi #0, adx   
79 [0x4f]:           iaload ecx, adx   
80 [0x50]:           loadval ebx   
81 [0x51]:           add ecx, ebx -> ebx   
82 [0x52]:           rmov adx, ebx   
83 [0x53]: line: 114 movl 0   
84 [0x54]:           returnobj   
85 [0x55]:           ret   


function: std#string_builder.append[3008] params(2) in file: lib\support\0.2.805/string_builder.sharp:117:8: note:  
		    def append(immstr: _int8[], len: var) : string_builder
		       ^

0 [0x0]: line: 119 movl 1   
1 [0x1]:           checknull   
2 [0x2]:           movr cmt, ebx   
3 [0x3]:           jne 7   
4 [0x4]:           movl 0   
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]:           nop   
8 [0x8]: line: 120 loadl ecx, fp+2   
9 [0x9]:           movi #0, ebx   
11 [0xb]:           lt ecx, ebx   
12 [0xc]:           movr ebx, cmt   
13 [0xd]:           movr cmt, ebx   
14 [0xe]:           jne 20   
15 [0xf]: line: 121 new_class @3 // std#exception   
16 [0x10]:           dup    
17 [0x11]:           newstr @47 // length cannot be less than zero   
18 [0x12]:           call @1626 // <std#exception.exception>   
19 [0x13]:           throw    
20 [0x14]:           nop   
21 [0x15]: line: 123 ipushl #2   
22 [0x16]:           movl 1   
23 [0x17]:           sizeof ebx   
24 [0x18]:           loadval ecx   
25 [0x19]:           gt ecx, ebx   
26 [0x1a]:           movr ebx, cmt   
27 [0x1b]:           movr cmt, ebx   
28 [0x1c]:           jne 45   
29 [0x1d]: line: 124 new_class @3 // std#exception   
30 [0x1e]:           dup    
31 [0x1f]:           new_class @64 // std#string   
32 [0x20]:           dup    
33 [0x21]:           newstr @48 // length of:    
34 [0x22]:           call @2935 // <std#string.string>   
35 [0x23]:           ipushl #2   
36 [0x24]:           call @2967 // <std#string.operator+>   
37 [0x25]:           newstr @49 //  is greater than the string:    
38 [0x26]:           call @2947 // <std#string.operator+>   
39 [0x27]:           movl 1   
40 [0x28]:           sizeof ebx   
41 [0x29]:           rstore ebx   
42 [0x2a]:           call @2967 // <std#string.operator+>   
43 [0x2b]:           call @1627 // <std#exception.exception>   
44 [0x2c]:           throw    
45 [0x2d]:           nop   
46 [0x2e]: line: 126 movl 0   
47 [0x2f]:           movn #0   
49 [0x31]:           pushobj   
50 [0x32]:           pushnull    
51 [0x33]:           itest ebx   
52 [0x34]:           movr cmt, ebx   
53 [0x35]:           jne 65   
54 [0x36]: line: 127 ipushl #2   
55 [0x37]:           movi #255, ebx   
57 [0x39]:           loadval ecx   
58 [0x3a]:           add ecx, ebx -> ebx   
59 [0x3b]:           newarry ebx   
60 [0x3c]:           movl 0   
61 [0x3d]:           movn #0   
63 [0x3f]:           popobj   
64 [0x40]:           jmp @79   
65 [0x41]:           pushl 0   
66 [0x42]:           movl 1   
67 [0x43]:           sizeof ebx   
68 [0x44]:           rstore ebx   
69 [0x45]:           call @3001 // <std#string_builder.space_available>   
70 [0x46]:           loadval ebx   
71 [0x47]:           not ebx, ebx   
72 [0x48]:           movr cmt, ebx   
73 [0x49]:           jne 79   
74 [0x4a]: line: 129 pushl 0   
75 [0x4b]:           movl 1   
76 [0x4c]:           sizeof ebx   
77 [0x4d]:           rstore ebx   
78 [0x4e]:           call @3002 // <std#string_builder.expand>   
79 [0x4f]:           nop   
80 [0x50]: line: 131 pushl 1   
81 [0x51]:           movl 0   
82 [0x52]:           movn #0   
84 [0x54]:           pushobj   
85 [0x55]:           movl 0   
86 [0x56]:           movn #3   
88 [0x58]:           movi #0, adx   
90 [0x5a]:           iaload ebx, adx   
91 [0x5b]:           inc ebx   
92 [0x5c]:           movi #0, adx   
94 [0x5e]:           rmov adx, ebx   
95 [0x5f]:           rstore ebx   
96 [0x60]:           istore 0   
98 [0x62]:           ipushl #2   
99 [0x63]:           call @1747 // <std.io#__srt_global.memcopy>   
100 [0x64]: line: 132 movl 1   
101 [0x65]:           sizeof ebx   
102 [0x66]:           rstore ebx   
103 [0x67]:           loadl ebx, fp+2   
104 [0x68]:           loadval ecx   
105 [0x69]:           sub ecx, ebx -> ebx   
106 [0x6a]:           rstore ebx   
107 [0x6b]:           movi #1, ebx   
109 [0x6d]:           loadval ecx   
110 [0x6e]:           sub ecx, ebx -> ebx   
111 [0x6f]:           rstore ebx   
112 [0x70]:           movl 0   
113 [0x71]:           movn #3   
115 [0x73]:           movi #0, adx   
117 [0x75]:           iaload ecx, adx   
118 [0x76]:           loadval ebx   
119 [0x77]:           add ecx, ebx -> ebx   
120 [0x78]:           rmov adx, ebx   
121 [0x79]: line: 133 movl 0   
122 [0x7a]:           returnobj   
123 [0x7b]:           ret   


overload function: std#string_builder.operator+[3009] params(1) in file: lib\support\0.2.805/string_builder.sharp:136:8: note:  
		    def operator+(immstr : _int8[]) : string_builder {
		       ^

0 [0x0]: line: 137 new_class @65 // std#string_builder   
1 [0x1]:           dup    
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           pushobj   
6 [0x6]:           call @2995 // <std#string_builder.string_builder>   
7 [0x7]:           popobj2    
8 [0x8]:           smovr_3 fp+2   
9 [0x9]: line: 138 movl 1   
10 [0xa]:           checknull   
11 [0xb]:           not ebx, ebx   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 21   
14 [0xe]: line: 139 pushl 2   
15 [0xf]:           pushl 1   
16 [0x10]:           call @3007 // <std#string_builder.append>   
17 [0x11]:           popobj2    
18 [0x12]:           returnobj   
19 [0x13]:           ret   
20 [0x14]:           jmp @27   
21 [0x15]: line: 141 pushl 2   
22 [0x16]:           newstr @50 // null   
23 [0x17]:           call @3007 // <std#string_builder.append>   
24 [0x18]:           popobj2    
25 [0x19]:           returnobj   
26 [0x1a]:           ret   
27 [0x1b]:           nop   


overload function: std#string_builder.operator+[3010] params(1) in file: lib\support\0.2.805/string_builder.sharp:145:8: note:  
		    def operator+(obj : printable) : string_builder {
		       ^

0 [0x0]: line: 146 new_class @65 // std#string_builder   
1 [0x1]:           dup    
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           pushobj   
6 [0x6]:           call @2995 // <std#string_builder.string_builder>   
7 [0x7]:           popobj2    
8 [0x8]:           smovr_3 fp+2   
9 [0x9]: line: 147 movl 1   
10 [0xa]:           checknull   
11 [0xb]:           not ebx, ebx   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 24   
14 [0xe]: line: 148 pushl 2   
15 [0xf]:           pushl 1   
16 [0x10]:           invoke_delegate 2926 { static=0, args=0 }   
18 [0x12]:           call @2961 // <std#string.get_data>   
19 [0x13]:           call @3007 // <std#string_builder.append>   
20 [0x14]:           popobj2    
21 [0x15]:           returnobj   
22 [0x16]:           ret   
23 [0x17]:           jmp @30   
24 [0x18]: line: 150 pushl 2   
25 [0x19]:           newstr @50 // null   
26 [0x1a]:           call @3007 // <std#string_builder.append>   
27 [0x1b]:           popobj2    
28 [0x1c]:           returnobj   
29 [0x1d]:           ret   
30 [0x1e]:           nop   


function: std#string_builder.to_string[3011] params(0) in file: lib\support\0.2.805/string_builder.sharp:153:8: note:  
		    def to_string() := new string(data, 0, cursor + 1);
		       ^

0 [0x0]: line: 153 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           pushobj   
6 [0x6]:           istore 0   
8 [0x8]:           movl 0   
9 [0x9]:           movn #3   
11 [0xb]:           movi #0, adx   
13 [0xd]:           iaload ebx, adx   
14 [0xe]:           rstore ebx   
15 [0xf]:           movi #1, ebx   
17 [0x11]:           loadval ecx   
18 [0x12]:           add ecx, ebx -> ebx   
19 [0x13]:           rstore ebx   
20 [0x14]:           call @2940 // <std#string.string>   
21 [0x15]:           popobj2    
22 [0x16]:           returnobj   
23 [0x17]:           ret   


overload function: std#string_builder.operator==[3012] params(1) in file: lib\support\0.2.805/string_builder.sharp:155:8: note:  
		    def operator==(str : _int8[]) : var {
		       ^

0 [0x0]: line: 156 movl 0   
1 [0x1]:           movn #3   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #1, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           add ecx, ebx -> ebx   
11 [0xb]:           rstore ebx   
12 [0xc]:           movl 1   
13 [0xd]:           sizeof ebx   
14 [0xe]:           loadval ecx   
15 [0xf]:           tne ecx, ebx   
16 [0x10]:           jne 20   
17 [0x11]: line: 157 istorel 0, fp+0   
19 [0x13]:           ret   
20 [0x14]:           nop   
21 [0x15]: line: 159 istorel 0, fp+2   
23 [0x17]: line: 160 istorel -1, fp+4   
25 [0x19]:           pushl 1   
26 [0x1a]:           popl 5   
27 [0x1b]:           iaddl 1, fp@4   
29 [0x1d]:           movl 5   
30 [0x1e]:           sizeof ecx   
31 [0x1f]:           loadl ebx, fp+4   
32 [0x20]:           lt ebx, ecx   
33 [0x21]:           jne 58   
34 [0x22]:           iaload ecx, ebx   
35 [0x23]:           smovr_2 ecx, fp+3   
36 [0x24]: line: 161 ipushl #3   
37 [0x25]:           movl 0   
38 [0x26]:           movn #0   
40 [0x28]:           pushobj   
41 [0x29]:           loadl ebx, fp+2   
42 [0x2a]:           movr egx, ebx   
43 [0x2b]:           inc ebx   
44 [0x2c]:           smovr_2 ebx, fp+2   
45 [0x2d]:           movr ebx, egx   
46 [0x2e]:           popobj2    
47 [0x2f]:           movr adx, ebx   
48 [0x30]:           chklen adx   
49 [0x31]:           iaload ebx, adx   
50 [0x32]:           loadval ecx   
51 [0x33]:           tne ecx, ebx   
52 [0x34]:           jne 56   
53 [0x35]: line: 162 istorel 0, fp+0   
55 [0x37]:           ret   
56 [0x38]:           nop   
57 [0x39]:           jmp @27   
58 [0x3a]: line: 165 istorel 1, fp+0   
60 [0x3c]:           ret   


overload function: std#string_builder.operator==[3013] params(1) in file: lib\support\0.2.805/string_builder.sharp:168:8: note:  
		    def operator==(str : string) : var {
		       ^

0 [0x0]: line: 169 movl 0   
1 [0x1]:           movn #3   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #1, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           add ecx, ebx -> ebx   
11 [0xb]:           rstore ebx   
12 [0xc]:           pushl 1   
13 [0xd]:           call @2961 // <std#string.get_data>   
14 [0xe]:           popobj2    
15 [0xf]:           sizeof ebx   
16 [0x10]:           loadval ecx   
17 [0x11]:           tne ecx, ebx   
18 [0x12]:           jne 22   
19 [0x13]: line: 170 istorel 0, fp+0   
21 [0x15]:           ret   
22 [0x16]:           nop   
23 [0x17]: line: 172 istorel 0, fp+2   
25 [0x19]: line: 173 istorel -1, fp+4   
27 [0x1b]:           pushl 1   
28 [0x1c]:           call @2961 // <std#string.get_data>   
29 [0x1d]:           popl 5   
30 [0x1e]:           iaddl 1, fp@4   
32 [0x20]:           movl 5   
33 [0x21]:           sizeof ecx   
34 [0x22]:           loadl ebx, fp+4   
35 [0x23]:           lt ebx, ecx   
36 [0x24]:           jne 61   
37 [0x25]:           iaload ecx, ebx   
38 [0x26]:           smovr_2 ecx, fp+3   
39 [0x27]: line: 174 ipushl #3   
40 [0x28]:           movl 0   
41 [0x29]:           movn #0   
43 [0x2b]:           pushobj   
44 [0x2c]:           loadl ebx, fp+2   
45 [0x2d]:           movr egx, ebx   
46 [0x2e]:           inc ebx   
47 [0x2f]:           smovr_2 ebx, fp+2   
48 [0x30]:           movr ebx, egx   
49 [0x31]:           popobj2    
50 [0x32]:           movr adx, ebx   
51 [0x33]:           chklen adx   
52 [0x34]:           iaload ebx, adx   
53 [0x35]:           loadval ecx   
54 [0x36]:           tne ecx, ebx   
55 [0x37]:           jne 59   
56 [0x38]: line: 175 istorel 0, fp+0   
58 [0x3a]:           ret   
59 [0x3b]:           nop   
60 [0x3c]:           jmp @30   
61 [0x3d]: line: 178 istorel 1, fp+0   
63 [0x3f]:           ret   


overload function: std#string_builder.operator!=[3014] params(1) in file: lib\support\0.2.805/string_builder.sharp:182:8: note:  
		    def operator!=(str : _int8[]) := !operator==(str);
		       ^

0 [0x0]: line: 182 pushl 0   
1 [0x1]:           pushl 1   
2 [0x2]:           call @3012 // <std#string_builder.operator==>   
3 [0x3]:           loadval ebx   
4 [0x4]:           not ebx, ebx   
5 [0x5]:           return_val ebx   
6 [0x6]:           ret   


overload function: std#string_builder.operator!=[3015] params(1) in file: lib\support\0.2.805/string_builder.sharp:184:8: note:  
		    def operator!=(str : string) := !operator==(str);
		       ^

0 [0x0]: line: 184 pushl 0   
1 [0x1]:           pushl 1   
2 [0x2]:           call @3013 // <std#string_builder.operator==>   
3 [0x3]:           loadval ebx   
4 [0x4]:           not ebx, ebx   
5 [0x5]:           return_val ebx   
6 [0x6]:           ret   


overload function: std#string_builder.operator=[3016] params(1) in file: lib\support\0.2.805/string_builder.sharp:186:8: note:  
		    def operator=( immstr: _int8[] )
		       ^

0 [0x0]: line: 188 movl 1   
1 [0x1]:           checknull   
2 [0x2]:           movr cmt, ebx   
3 [0x3]:           jne 20   
4 [0x4]: line: 189 movi #255, ebx   
6 [0x6]:           newarry ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           popobj   
11 [0xb]: line: 190 movi #-1, ebx   
13 [0xd]:           movl 0   
14 [0xe]:           movn #3   
16 [0x10]:           movi #0, adx   
18 [0x12]:           rmov adx, ebx   
19 [0x13]:           jmp @54   
20 [0x14]: line: 193 movl 1   
21 [0x15]:           sizeof ebx   
22 [0x16]:           rstore ebx   
23 [0x17]:           movi #255, ebx   
25 [0x19]:           loadval ecx   
26 [0x1a]:           add ecx, ebx -> ebx   
27 [0x1b]:           newarry ebx   
28 [0x1c]:           movl 0   
29 [0x1d]:           movn #0   
31 [0x1f]:           popobj   
32 [0x20]: line: 194 movl 1   
33 [0x21]:           sizeof ebx   
34 [0x22]:           movl 0   
35 [0x23]:           movn #3   
37 [0x25]:           movi #0, adx   
39 [0x27]:           rmov adx, ebx   
40 [0x28]: line: 195 pushl 1   
41 [0x29]:           movl 0   
42 [0x2a]:           movn #0   
44 [0x2c]:           pushobj   
45 [0x2d]:           istore 0   
47 [0x2f]:           movi #0, ebx   
49 [0x31]:           rstore ebx   
50 [0x32]:           movl 1   
51 [0x33]:           sizeof ebx   
52 [0x34]:           rstore ebx   
53 [0x35]:           call @1747 // <std.io#__srt_global.memcopy>   
54 [0x36]:           nop   
55 [0x37]:           ret   


function: std#string_builder.at[3017] params(1) in file: lib\support\0.2.805/string_builder.sharp:199:8: note:  
		    def at(pos : var) : _int8 {
		       ^

0 [0x0]: line: 200 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #3   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gt ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           movr cmt, ebx   
11 [0xb]:           jne 16   
12 [0xc]: line: 201 pushl 0   
13 [0xd]:           ipushl #1   
14 [0xe]:           call @3036 // <std#string_builder.bounds_error>   
15 [0xf]:           throw    
16 [0x10]:           nop   
17 [0x11]: line: 202 movl 0   
18 [0x12]:           movn #0   
20 [0x14]:           pushobj   
21 [0x15]:           loadl ebx, fp+1   
22 [0x16]:           popobj2    
23 [0x17]:           movr adx, ebx   
24 [0x18]:           chklen adx   
25 [0x19]:           iaload ebx, adx   
26 [0x1a]:           return_val ebx   
27 [0x1b]:           ret   


overload function: std#string_builder.operator[[3018] params(1) in file: lib\support\0.2.805/string_builder.sharp:205:8: note:  
		    def operator[](pos: var) : var {
		       ^

0 [0x0]: line: 206 pushl 0   
1 [0x1]:           ipushl #1   
2 [0x2]:           call @3017 // <std#string_builder.at>   
3 [0x3]:           loadval ebx   
4 [0x4]:           return_val ebx   
5 [0x5]:           ret   


function: std#string_builder.fmt[3019] params(1) in file: lib\support\0.2.805/string_builder.sharp:209:15: note:  
		    static def fmt( _fmt: var ) {
		              ^

0 [0x0]: line: 210 ipushl #0   
1 [0x1]:           movg @65 // @std#string_builder   
2 [0x2]:           movn #0   
4 [0x4]:           loadval ebx   
5 [0x5]:           mov8 ebx, ebx   
6 [0x6]:           movi #0, adx   
8 [0x8]:           rmov adx, ebx   
9 [0x9]: line: 211 ipushl #0   
10 [0xa]:           movi #102, ebx   
12 [0xc]:           loadval ecx   
13 [0xd]:           tne ecx, ebx   
14 [0xe]:           movr ebx, cmt   
15 [0xf]:           skne ebx // pc = 20   
16 [0x10]:           ipushl #0   
17 [0x11]:           movi #70, ebx   
19 [0x13]:           loadval ecx   
20 [0x14]:           tne ecx, ebx   
21 [0x15]:           jne 31   
22 [0x16]:           istore 0   
24 [0x18]:           movg @65 // @std#string_builder   
25 [0x19]:           movn #1   
27 [0x1b]:           loadval ebx   
28 [0x1c]:           movi #0, adx   
30 [0x1e]:           rmov adx, ebx   
31 [0x1f]:           nop   
32 [0x20]:           ret   


function: std#string_builder.set_precision[3020] params(1) in file: lib\support\0.2.805/string_builder.sharp:214:15: note:  
		    static def set_precision( prec: var ) {
		              ^

0 [0x0]: line: 215 loadl ecx, fp+0   
1 [0x1]:           movi #0, ebx   
3 [0x3]:           lt ecx, ebx   
4 [0x4]:           movr ebx, cmt   
5 [0x5]:           skpe ebx // pc = 12   
6 [0x6]:           ipushl #0   
7 [0x7]:           movi #16, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 24   
14 [0xe]: line: 216 new_class @4 // std#illegal_argument_exception   
15 [0xf]:           dup    
16 [0x10]:           new_class @64 // std#string   
17 [0x11]:           dup    
18 [0x12]:           newstr @51 // invalid precision:    
19 [0x13]:           call @2935 // <std#string.string>   
20 [0x14]:           ipushl #0   
21 [0x15]:           call @2967 // <std#string.operator+>   
22 [0x16]:           call @1630 // <std#illegal_argument_exception.illegal_argument_exception>   
23 [0x17]:           throw    
24 [0x18]:           nop   
25 [0x19]: line: 217 ipushl #0   
26 [0x1a]:           movg @65 // @std#string_builder   
27 [0x1b]:           movn #1   
29 [0x1d]:           loadval ebx   
30 [0x1e]:           movi #0, adx   
32 [0x20]:           rmov adx, ebx   
33 [0x21]:           ret   


function: std#string_builder.to_array[3021] params(0) in file: lib\support\0.2.805/string_builder.sharp:220:8: note:  
		    def to_array() : _int8[]
		       ^

0 [0x0]: line: 222 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushnull    
5 [0x5]:           itest ebx   
6 [0x6]:           skpe ebx // pc = 17   
7 [0x7]:           movl 0   
8 [0x8]:           movn #3   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           rstore ebx   
14 [0xe]:           movi #-1, ebx   
16 [0x10]:           loadval ecx   
17 [0x11]:           test ecx, ebx   
18 [0x12]:           jne 23   
19 [0x13]:           pushnull    
20 [0x14]:           popobj2    
21 [0x15]:           returnobj   
22 [0x16]:           ret   
23 [0x17]:           nop   
24 [0x18]: line: 223 movl 0   
25 [0x19]:           movn #0   
27 [0x1b]:           pushobj   
28 [0x1c]:           istore 0   
30 [0x1e]:           movl 0   
31 [0x1f]:           movn #3   
33 [0x21]:           movi #0, adx   
35 [0x23]:           iaload ebx, adx   
36 [0x24]:           rstore ebx   
37 [0x25]:           movi #1, ebx   
39 [0x27]:           loadval ecx   
40 [0x28]:           add ecx, ebx -> ebx   
41 [0x29]:           rstore ebx   
42 [0x2a]:           call @1757 // <std.io#__srt_global.copy>   
43 [0x2b]:           popobj2    
44 [0x2c]:           returnobj   
45 [0x2d]:           ret   


function: std#string_builder.starts_with[3022] params(1) in file: lib\support\0.2.805/string_builder.sharp:227:8: note:  
		    def starts_with(prefix: string) : var {
		       ^

0 [0x0]: line: 228 movl 1   
1 [0x1]:           checknull   
2 [0x2]:           skpe ebx // pc = 21   
3 [0x3]:           pushl 1   
4 [0x4]:           call @2976 // <std#string.size>   
5 [0x5]:           loadval ebx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #3   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           rstore ebx   
14 [0xe]:           movi #1, ebx   
16 [0x10]:           loadval ecx   
17 [0x11]:           add ecx, ebx -> ebx   
18 [0x12]:           loadval ecx   
19 [0x13]:           gt ecx, ebx   
20 [0x14]:           movr ebx, cmt   
21 [0x15]:           movr cmt, ebx   
22 [0x16]:           jne 26   
23 [0x17]: line: 229 istorel 0, fp+0   
25 [0x19]:           ret   
26 [0x1a]:           nop   
27 [0x1b]: line: 232 istorel 0, fp+2   
29 [0x1d]:           ipushl #2   
30 [0x1e]:           pushl 1   
31 [0x1f]:           call @2976 // <std#string.size>   
32 [0x20]:           loadval ebx   
33 [0x21]:           loadval ecx   
34 [0x22]:           lt ecx, ebx   
35 [0x23]:           movr ebx, cmt   
36 [0x24]:           movr cmt, ebx   
37 [0x25]:           jne 67   
38 [0x26]: line: 234 movl 0   
39 [0x27]:           movn #0   
41 [0x29]:           pushobj   
42 [0x2a]:           loadl ebx, fp+2   
43 [0x2b]:           popobj2    
44 [0x2c]:           movr adx, ebx   
45 [0x2d]:           chklen adx   
46 [0x2e]:           iaload ebx, adx   
47 [0x2f]:           rstore ebx   
48 [0x30]:           movl 1   
49 [0x31]:           movn #0   
51 [0x33]:           pushobj   
52 [0x34]:           loadl ebx, fp+2   
53 [0x35]:           popobj2    
54 [0x36]:           movr adx, ebx   
55 [0x37]:           chklen adx   
56 [0x38]:           iaload ebx, adx   
57 [0x39]:           loadval ecx   
58 [0x3a]:           tne ecx, ebx   
59 [0x3b]:           jne 63   
60 [0x3c]: line: 235 istorel 0, fp+0   
62 [0x3e]:           ret   
63 [0x3f]:           nop   
64 [0x40]:           iaddl 1, fp@2   
66 [0x42]:           jmp @29   
67 [0x43]: line: 237 istorel 1, fp+0   
69 [0x45]:           ret   


function: std#string_builder.find[3023] params(1) in file: lib\support\0.2.805/string_builder.sharp:240:8: note:  
		    def find(str: string) : var {
		       ^

0 [0x0]: line: 241 pushl 1   
1 [0x1]:           call @2976 // <std#string.size>   
2 [0x2]:           loadval ebx   
3 [0x3]:           rstore ebx   
4 [0x4]:           movl 0   
5 [0x5]:           movn #3   
7 [0x7]:           movi #0, adx   
9 [0x9]:           iaload ebx, adx   
10 [0xa]:           rstore ebx   
11 [0xb]:           movi #1, ebx   
13 [0xd]:           loadval ecx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           loadval ecx   
16 [0x10]:           gt ecx, ebx   
17 [0x11]:           movr ebx, cmt   
18 [0x12]:           movr cmt, ebx   
19 [0x13]:           jne 23   
20 [0x14]: line: 242 istorel 0, fp+0   
22 [0x16]:           ret   
23 [0x17]:           nop   
24 [0x18]: line: 245 istorel 0, fp+2   
26 [0x1a]: line: 246 istorel 0, fp+3   
28 [0x1c]:           ipushl #3   
29 [0x1d]:           movl 0   
30 [0x1e]:           movn #3   
32 [0x20]:           movi #0, adx   
34 [0x22]:           iaload ebx, adx   
35 [0x23]:           rstore ebx   
36 [0x24]:           movi #1, ebx   
38 [0x26]:           loadval ecx   
39 [0x27]:           add ecx, ebx -> ebx   
40 [0x28]:           loadval ecx   
41 [0x29]:           lt ecx, ebx   
42 [0x2a]:           movr ebx, cmt   
43 [0x2b]:           movr cmt, ebx   
44 [0x2c]:           jne 112   
45 [0x2d]: line: 247 ipushl #3   
46 [0x2e]:           pushl 1   
47 [0x2f]:           call @2976 // <std#string.size>   
48 [0x30]:           loadval ebx   
49 [0x31]:           loadval ecx   
50 [0x32]:           add ecx, ebx -> ebx   
51 [0x33]:           rstore ebx   
52 [0x34]:           movl 0   
53 [0x35]:           movn #3   
55 [0x37]:           movi #0, adx   
57 [0x39]:           iaload ebx, adx   
58 [0x3a]:           rstore ebx   
59 [0x3b]:           movi #1, ebx   
61 [0x3d]:           loadval ecx   
62 [0x3e]:           add ecx, ebx -> ebx   
63 [0x3f]:           loadval ecx   
64 [0x40]:           lt ecx, ebx   
65 [0x41]:           movr ebx, cmt   
66 [0x42]:           movr cmt, ebx   
67 [0x43]:           jne 105   
68 [0x44]: line: 248 istorel 0, fp+4   
70 [0x46]:           ipushl #4   
71 [0x47]:           pushl 1   
72 [0x48]:           call @2976 // <std#string.size>   
73 [0x49]:           loadval ebx   
74 [0x4a]:           loadval ecx   
75 [0x4b]:           lt ecx, ebx   
76 [0x4c]:           movr ebx, cmt   
77 [0x4d]:           movr cmt, ebx   
78 [0x4e]:           jne 101   
79 [0x4f]: line: 249 pushl 1   
80 [0x50]:           ipushl #4   
81 [0x51]:           call @2958 // <std#string.operator[>   
82 [0x52]:           loadval ebx   
83 [0x53]:           rstore ebx   
84 [0x54]:           movl 0   
85 [0x55]:           movn #0   
87 [0x57]:           pushobj   
88 [0x58]:           loadl ebx, fp+4   
89 [0x59]:           popobj2    
90 [0x5a]:           movr adx, ebx   
91 [0x5b]:           chklen adx   
92 [0x5c]:           iaload ebx, adx   
93 [0x5d]:           loadval ecx   
94 [0x5e]:           tne ecx, ebx   
95 [0x5f]:           jne 97   
96 [0x60]: line: 250 jmp @101   
97 [0x61]:           nop   
98 [0x62]:           iaddl 1, fp@4   
100 [0x64]:           jmp @70   
101 [0x65]: line: 253 istorel 1, fp+0   
103 [0x67]:           ret   
104 [0x68]:           jmp @108   
105 [0x69]: line: 254 istorel 0, fp+0   
107 [0x6b]:           ret   
108 [0x6c]:           nop   
109 [0x6d]:           iaddl 1, fp@3   
111 [0x6f]:           jmp @28   
112 [0x70]: line: 257 istorel 0, fp+0   
114 [0x72]:           ret   


function: std#string_builder.find[3024] params(1) in file: lib\support\0.2.805/string_builder.sharp:260:8: note:  
		    def find(str: string_builder) : var {
		       ^

0 [0x0]: line: 261 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           sizeof ebx   
4 [0x4]:           rstore ebx   
5 [0x5]:           movl 0   
6 [0x6]:           movn #3   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           rstore ebx   
12 [0xc]:           movi #1, ebx   
14 [0xe]:           loadval ecx   
15 [0xf]:           add ecx, ebx -> ebx   
16 [0x10]:           loadval ecx   
17 [0x11]:           gt ecx, ebx   
18 [0x12]:           movr ebx, cmt   
19 [0x13]:           movr cmt, ebx   
20 [0x14]:           jne 24   
21 [0x15]: line: 262 istorel 0, fp+0   
23 [0x17]:           ret   
24 [0x18]:           nop   
25 [0x19]: line: 265 istorel 0, fp+2   
27 [0x1b]: line: 266 istorel 0, fp+3   
29 [0x1d]:           ipushl #3   
30 [0x1e]:           movl 0   
31 [0x1f]:           movn #3   
33 [0x21]:           movi #0, adx   
35 [0x23]:           iaload ebx, adx   
36 [0x24]:           rstore ebx   
37 [0x25]:           movi #1, ebx   
39 [0x27]:           loadval ecx   
40 [0x28]:           add ecx, ebx -> ebx   
41 [0x29]:           loadval ecx   
42 [0x2a]:           lt ecx, ebx   
43 [0x2b]:           movr ebx, cmt   
44 [0x2c]:           movr cmt, ebx   
45 [0x2d]:           jne 115   
46 [0x2e]: line: 267 ipushl #3   
47 [0x2f]:           movl 1   
48 [0x30]:           movn #0   
50 [0x32]:           sizeof ebx   
51 [0x33]:           loadval ecx   
52 [0x34]:           add ecx, ebx -> ebx   
53 [0x35]:           rstore ebx   
54 [0x36]:           movl 0   
55 [0x37]:           movn #3   
57 [0x39]:           movi #0, adx   
59 [0x3b]:           iaload ebx, adx   
60 [0x3c]:           rstore ebx   
61 [0x3d]:           movi #1, ebx   
63 [0x3f]:           loadval ecx   
64 [0x40]:           add ecx, ebx -> ebx   
65 [0x41]:           loadval ecx   
66 [0x42]:           lt ecx, ebx   
67 [0x43]:           movr ebx, cmt   
68 [0x44]:           movr cmt, ebx   
69 [0x45]:           jne 108   
70 [0x46]: line: 268 istorel 0, fp+4   
72 [0x48]:           ipushl #4   
73 [0x49]:           movl 1   
74 [0x4a]:           movn #0   
76 [0x4c]:           sizeof ebx   
77 [0x4d]:           loadval ecx   
78 [0x4e]:           lt ecx, ebx   
79 [0x4f]:           movr ebx, cmt   
80 [0x50]:           movr cmt, ebx   
81 [0x51]:           jne 104   
82 [0x52]: line: 269 pushl 1   
83 [0x53]:           ipushl #4   
84 [0x54]:           call @3018 // <std#string_builder.operator[>   
85 [0x55]:           loadval ebx   
86 [0x56]:           rstore ebx   
87 [0x57]:           movl 0   
88 [0x58]:           movn #0   
90 [0x5a]:           pushobj   
91 [0x5b]:           loadl ebx, fp+4   
92 [0x5c]:           popobj2    
93 [0x5d]:           movr adx, ebx   
94 [0x5e]:           chklen adx   
95 [0x5f]:           iaload ebx, adx   
96 [0x60]:           loadval ecx   
97 [0x61]:           tne ecx, ebx   
98 [0x62]:           jne 100   
99 [0x63]: line: 270 jmp @104   
100 [0x64]:           nop   
101 [0x65]:           iaddl 1, fp@4   
103 [0x67]:           jmp @72   
104 [0x68]: line: 273 istorel 1, fp+0   
106 [0x6a]:           ret   
107 [0x6b]:           jmp @111   
108 [0x6c]: line: 274 istorel 0, fp+0   
110 [0x6e]:           ret   
111 [0x6f]:           nop   
112 [0x70]:           iaddl 1, fp@3   
114 [0x72]:           jmp @29   
115 [0x73]: line: 277 istorel 0, fp+0   
117 [0x75]:           ret   


function: std#string_builder.ends_with[3025] params(1) in file: lib\support\0.2.805/string_builder.sharp:280:8: note:  
		    def ends_with(postfix: string) : var {
		       ^

0 [0x0]: line: 281 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           sizeof ebx   
4 [0x4]:           rstore ebx   
5 [0x5]:           movl 0   
6 [0x6]:           movn #3   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           rstore ebx   
12 [0xc]:           movi #1, ebx   
14 [0xe]:           loadval ecx   
15 [0xf]:           add ecx, ebx -> ebx   
16 [0x10]:           loadval ecx   
17 [0x11]:           gte ecx, ebx   
18 [0x12]:           movr ebx, cmt   
19 [0x13]:           movr cmt, ebx   
20 [0x14]:           jne 24   
21 [0x15]: line: 282 istorel 0, fp+0   
23 [0x17]:           ret   
24 [0x18]:           nop   
25 [0x19]: line: 284 movl 0   
26 [0x1a]:           movn #3   
28 [0x1c]:           movi #0, adx   
30 [0x1e]:           iaload ebx, adx   
31 [0x1f]:           rstore ebx   
32 [0x20]:           movi #1, ebx   
34 [0x22]:           loadval ecx   
35 [0x23]:           add ecx, ebx -> ebx   
36 [0x24]:           rstore ebx   
37 [0x25]:           movl 1   
38 [0x26]:           movn #0   
40 [0x28]:           sizeof ebx   
41 [0x29]:           loadval ecx   
42 [0x2a]:           sub ecx, ebx -> ebx   
43 [0x2b]:           smovr_2 ebx, fp+2   
44 [0x2c]:           ipushl #2   
45 [0x2d]:           movl 0   
46 [0x2e]:           movn #3   
48 [0x30]:           movi #0, adx   
50 [0x32]:           iaload ebx, adx   
51 [0x33]:           rstore ebx   
52 [0x34]:           movi #1, ebx   
54 [0x36]:           loadval ecx   
55 [0x37]:           add ecx, ebx -> ebx   
56 [0x38]:           loadval ecx   
57 [0x39]:           lt ecx, ebx   
58 [0x3a]:           movr ebx, cmt   
59 [0x3b]:           movr cmt, ebx   
60 [0x3c]:           jne 90   
61 [0x3d]: line: 285 movl 0   
62 [0x3e]:           movn #0   
64 [0x40]:           pushobj   
65 [0x41]:           loadl ebx, fp+2   
66 [0x42]:           popobj2    
67 [0x43]:           movr adx, ebx   
68 [0x44]:           chklen adx   
69 [0x45]:           iaload ebx, adx   
70 [0x46]:           rstore ebx   
71 [0x47]:           movl 1   
72 [0x48]:           movn #0   
74 [0x4a]:           pushobj   
75 [0x4b]:           loadl ebx, fp+2   
76 [0x4c]:           popobj2    
77 [0x4d]:           movr adx, ebx   
78 [0x4e]:           chklen adx   
79 [0x4f]:           iaload ebx, adx   
80 [0x50]:           loadval ecx   
81 [0x51]:           tne ecx, ebx   
82 [0x52]:           jne 86   
83 [0x53]: line: 286 istorel 0, fp+0   
85 [0x55]:           ret   
86 [0x56]:           nop   
87 [0x57]:           iaddl 1, fp@2   
89 [0x59]:           jmp @44   
90 [0x5a]: line: 289 istorel 1, fp+0   
92 [0x5c]:           ret   


overload function: std#string_builder.operator+[3026] params(1) in file: lib\support\0.2.805/string_builder.sharp:292:8: note:  
		    def operator+(num : var) : string_builder {
		       ^

0 [0x0]: line: 293 new_class @65 // std#string_builder   
1 [0x1]:           dup    
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           pushobj   
6 [0x6]:           call @2995 // <std#string_builder.string_builder>   
7 [0x7]:           popobj2    
8 [0x8]:           smovr_3 fp+2   
9 [0x9]: line: 294 pushl 2   
10 [0xa]:           pushl 0   
11 [0xb]:           ipushl #1   
12 [0xc]:           call @3028 // <std#string_builder.parse>   
13 [0xd]:           call @3032 // <std#string_builder.get_data>   
14 [0xe]:           call @3007 // <std#string_builder.append>   
15 [0xf]:           pop   
16 [0x10]: line: 295 movl 2   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#string_builder.size[3027] params(0) in file: lib\support\0.2.805/string_builder.sharp:298:8: note:  
		    def size() : var {
		       ^

0 [0x0]: line: 299 movl 0   
1 [0x1]:           movn #3   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #1, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           add ecx, ebx -> ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


function: std#string_builder.parse[3028] params(1) in file: lib\support\0.2.805/string_builder.sharp:302:8: note:  
		    def parse( number : var ) : string_builder
		       ^

0 [0x0]: line: 304 new_class @65 // std#string_builder   
1 [0x1]:           dup    
2 [0x2]:           movg @65 // @std#string_builder   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           rstore ebx   
9 [0x9]:           ipushl #1   
10 [0xa]:           movg @65 // @std#string_builder   
11 [0xb]:           movn #1   
13 [0xd]:           movi #0, adx   
15 [0xf]:           iaload ebx, adx   
16 [0x10]:           rstore ebx   
17 [0x11]:           call @1570 // <std#__srt_global.snprintf>   
18 [0x12]:           call @2995 // <std#string_builder.string_builder>   
19 [0x13]:           popobj2    
20 [0x14]:           returnobj   
21 [0x15]:           ret   


overload function: std#string_builder.operator+=[3029] params(1) in file: lib\support\0.2.805/string_builder.sharp:307:8: note:  
		    def operator+=( num: var ) : string_builder
		       ^

0 [0x0]: line: 309 pushl 0   
1 [0x1]:           pushl 0   
2 [0x2]:           ipushl #1   
3 [0x3]:           call @3028 // <std#string_builder.parse>   
4 [0x4]:           call @3032 // <std#string_builder.get_data>   
5 [0x5]:           call @3007 // <std#string_builder.append>   
6 [0x6]:           popobj2    
7 [0x7]:           returnobj   
8 [0x8]:           ret   


overload function: std#string_builder.operator+=[3030] params(1) in file: lib\support\0.2.805/string_builder.sharp:312:15: note:  
		    public def operator+=( obj: printable ) : string_builder
		              ^

0 [0x0]: line: 314 pushl 1   
1 [0x1]:           invoke_delegate 2926 { static=0, args=0 }   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+2   
5 [0x5]: line: 315 movl 2   
6 [0x6]:           checknull   
7 [0x7]:           not ebx, ebx   
8 [0x8]:           skne ebx // pc = 14   
9 [0x9]:           pushl 2   
10 [0xa]:           call @2961 // <std#string.get_data>   
11 [0xb]:           pushnull    
12 [0xc]:           itest ebx   
13 [0xd]:           not ebx, ebx   
14 [0xe]:           movr cmt, ebx   
15 [0xf]:           jne 24   
16 [0x10]: line: 316 pushl 0   
17 [0x11]:           pushl 2   
18 [0x12]:           call @2961 // <std#string.get_data>   
19 [0x13]:           call @3007 // <std#string_builder.append>   
20 [0x14]:           popobj2    
21 [0x15]:           returnobj   
22 [0x16]:           ret   
23 [0x17]:           jmp @30   
24 [0x18]: line: 318 pushl 0   
25 [0x19]:           newstr @50 // null   
26 [0x1a]:           call @3007 // <std#string_builder.append>   
27 [0x1b]:           popobj2    
28 [0x1c]:           returnobj   
29 [0x1d]:           ret   
30 [0x1e]:           nop   


overload function: std#string_builder.operator+=[3031] params(1) in file: lib\support\0.2.805/string_builder.sharp:321:8: note:  
		    def operator+=( str: string ) : string_builder
		       ^

0 [0x0]: line: 323 pushl 0   
1 [0x1]:           pushl 1   
2 [0x2]:           call @2961 // <std#string.get_data>   
3 [0x3]:           call @3007 // <std#string_builder.append>   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   


function: std#string_builder.get_data[3032] params(0) in file: lib\support\0.2.805/string_builder.sharp:326:8: note:  
		    def get_data() : _int8[]{
		       ^

0 [0x0]: line: 327 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           returnobj   
4 [0x4]:           ret   


overload function: std#string_builder.operator+=[3033] params(1) in file: lib\support\0.2.805/string_builder.sharp:330:8: note:  
		    def operator+=( str: string_builder ) : string_builder
		       ^

0 [0x0]: line: 332 pushl 0   
1 [0x1]:           movl 1   
2 [0x2]:           movn #0   
4 [0x4]:           pushobj   
5 [0x5]:           call @3007 // <std#string_builder.append>   
6 [0x6]:           popobj2    
7 [0x7]:           returnobj   
8 [0x8]:           ret   


overload function: std#string_builder.operator+=[3034] params(1) in file: lib\support\0.2.805/string_builder.sharp:335:8: note:  
		    def operator+=( str: _int8[] ) : string_builder
		       ^

0 [0x0]: line: 337 pushl 0   
1 [0x1]:           pushl 1   
2 [0x2]:           call @3007 // <std#string_builder.append>   
3 [0x3]:           popobj2    
4 [0x4]:           returnobj   
5 [0x5]:           ret   


function: std#string_builder.substring[3035] params(2) in file: lib\support\0.2.805/string_builder.sharp:340:15: note:  
		    public def substring(startPos: var, endPos: var) : string_builder {
		              ^

0 [0x0]: line: 341 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #3   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           rstore ebx   
8 [0x8]:           movi #1, ebx   
10 [0xa]:           loadval ecx   
11 [0xb]:           add ecx, ebx -> ebx   
12 [0xc]:           loadval ecx   
13 [0xd]:           gte ecx, ebx   
14 [0xe]:           movr ebx, cmt   
15 [0xf]:           skpe ebx // pc = 21   
16 [0x10]:           loadl ecx, fp+1   
17 [0x11]:           movi #0, ebx   
19 [0x13]:           lt ecx, ebx   
20 [0x14]:           movr ebx, cmt   
21 [0x15]:           movr cmt, ebx   
22 [0x16]:           jne 27   
23 [0x17]: line: 342 pushl 0   
24 [0x18]:           ipushl #1   
25 [0x19]:           call @3036 // <std#string_builder.bounds_error>   
26 [0x1a]:           throw    
27 [0x1b]:           nop   
28 [0x1c]: line: 343 ipushl #2   
29 [0x1d]:           loadl ebx, fp+1   
30 [0x1e]:           loadval ecx   
31 [0x1f]:           lt ecx, ebx   
32 [0x20]:           movr ebx, cmt   
33 [0x21]:           movr cmt, ebx   
34 [0x22]:           jne 49   
35 [0x23]: line: 344 new_class @4 // std#illegal_argument_exception   
36 [0x24]:           dup    
37 [0x25]:           new_class @64 // std#string   
38 [0x26]:           dup    
39 [0x27]:           newstr @56 // endPos:    
40 [0x28]:           call @2935 // <std#string.string>   
41 [0x29]:           ipushl #2   
42 [0x2a]:           call @2967 // <std#string.operator+>   
43 [0x2b]:           newstr @57 //  cannot be less than the startPos:    
44 [0x2c]:           call @2947 // <std#string.operator+>   
45 [0x2d]:           ipushl #1   
46 [0x2e]:           call @2967 // <std#string.operator+>   
47 [0x2f]:           call @1630 // <std#illegal_argument_exception.illegal_argument_exception>   
48 [0x30]:           throw    
49 [0x31]:           nop   
50 [0x32]: line: 348 new_class @65 // std#string_builder   
51 [0x33]:           dup    
52 [0x34]:           call @3038 // <std#string_builder.string_builder>   
53 [0x35]:           popobj2    
54 [0x36]:           smovr_3 fp+3   
55 [0x37]: line: 349 movl 0   
56 [0x38]:           movn #0   
58 [0x3a]:           pushobj   
59 [0x3b]:           ipushl #1   
60 [0x3c]:           ipushl #2   
61 [0x3d]:           call @1757 // <std.io#__srt_global.copy>   
62 [0x3e]:           movl 3   
63 [0x3f]:           movn #0   
65 [0x41]:           popobj   
66 [0x42]: line: 350 movl 3   
67 [0x43]:           returnobj   
68 [0x44]:           ret   


function: std#string_builder.bounds_error[3036] params(1) in file: lib\support\0.2.805/string_builder.sharp:353:16: note:  
		    private def bounds_error(pos : var) : error {
		               ^

0 [0x0]: line: 354 new_class @6 // std#out_of_bounds_exception   
1 [0x1]:           dup    
2 [0x2]:           new_class @64 // std#string   
3 [0x3]:           dup    
4 [0x4]:           newstr @54 // Index out of bounds exception at:    
5 [0x5]:           call @2935 // <std#string.string>   
6 [0x6]:           ipushl #1   
7 [0x7]:           call @2967 // <std#string.operator+>   
8 [0x8]:           newstr @55 //  with size of:    
9 [0x9]:           call @2947 // <std#string.operator+>   
10 [0xa]:           movl 0   
11 [0xb]:           movn #3   
13 [0xd]:           movi #0, adx   
15 [0xf]:           iaload ebx, adx   
16 [0x10]:           rstore ebx   
17 [0x11]:           movi #1, ebx   
19 [0x13]:           loadval ecx   
20 [0x14]:           add ecx, ebx -> ebx   
21 [0x15]:           rstore ebx   
22 [0x16]:           call @2967 // <std#string.operator+>   
23 [0x17]:           call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:           popobj2    
25 [0x19]:           returnobj   
26 [0x1a]:           ret   


function: std#string_builder.hash[3037] params(0) in file: lib\support\0.2.805/string_builder.sharp:357:8: note:  
		    def hash() : long {
		       ^

0 [0x0]: line: 358 istorel 0, fp+1   
2 [0x2]: line: 359 istorel 1, fp+2   
4 [0x4]: line: 360 istorel -1, fp+4   
6 [0x6]: line: 361 movl 0   
7 [0x7]: line: 362 movn #0   
9 [0x9]:           pushobj   
10 [0xa]:           popl 5   
11 [0xb]:           iaddl 1, fp@4   
13 [0xd]:           movl 5   
14 [0xe]:           sizeof ecx   
15 [0xf]:           loadl ebx, fp+4   
16 [0x10]:           lt ebx, ecx   
17 [0x11]:           jne 55   
18 [0x12]:           iaload ecx, ebx   
19 [0x13]:           smovr_2 ecx, fp+3   
20 [0x14]: line: 363 ipushl #1   
21 [0x15]:           ipushl #3   
22 [0x16]:           movi #97, ebx   
24 [0x18]:           loadval ecx   
25 [0x19]:           sub ecx, ebx -> ebx   
26 [0x1a]:           rstore ebx   
27 [0x1b]:           movi #1, ebx   
29 [0x1d]:           loadval ecx   
30 [0x1e]:           add ecx, ebx -> ebx   
31 [0x1f]:           rstore ebx   
32 [0x20]:           loadl ebx, fp+2   
33 [0x21]:           loadval ecx   
34 [0x22]:           mul ecx, ebx -> ebx   
35 [0x23]:           loadval ecx   
36 [0x24]:           add ecx, ebx -> ebx   
37 [0x25]:           rstore ebx   
38 [0x26]:           movi #1000000009, ebx   
40 [0x28]:           loadval ecx   
41 [0x29]:           mod ecx, ebx -> ebx   
42 [0x2a]:           smovr_2 ebx, fp+1   
43 [0x2b]: line: 364 ipushl #2   
44 [0x2c]:           movi #31, ebx   
46 [0x2e]:           loadval ecx   
47 [0x2f]:           mul ecx, ebx -> ebx   
48 [0x30]:           rstore ebx   
49 [0x31]:           movi #1000000009, ebx   
51 [0x33]:           loadval ecx   
52 [0x34]:           mod ecx, ebx -> ebx   
53 [0x35]:           smovr_2 ebx, fp+2   
54 [0x36]:           jmp @11   
55 [0x37]: line: 366 new_class @45 // std#long   
56 [0x38]:           dup    
57 [0x39]:           ipushl #1   
58 [0x3a]:           call @2077 // <std#long.long>   
59 [0x3b]:           popobj2    
60 [0x3c]:           returnobj   
61 [0x3d]:           ret   


constructor: std#string_builder.string_builder[3038] params(0) in file: lib\support\0.2.805/string_builder.sharp:5:6: note:  
		class string_builder : loopable<_int8> {
		     ^

0 [0x0]:         movi #128, ebx   
2 [0x2]:         movl 0   
3 [0x3]:         movn #1   
5 [0x5]:         movi #0, adx   
7 [0x7]:         rmov adx, ebx   
8 [0x8]:         movi #0, ebx   
10 [0xa]:         movl 0   
11 [0xb]:         movn #2   
13 [0xd]:         movi #0, adx   
15 [0xf]:         rmov adx, ebx   
16 [0x10]:         movi #0, ebx   
18 [0x12]:         movl 0   
19 [0x13]:         movn #3   
21 [0x15]:         movi #0, adx   
23 [0x17]:         rmov adx, ebx   
24 [0x18]: line: 15 movi #255, ebx   
26 [0x1a]:          newarry ebx   
27 [0x1b]:          movl 0   
28 [0x1c]:          movn #0   
30 [0x1e]:          popobj   
31 [0x1f]: line: 16 movi #255, ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #2   
36 [0x24]:          movi #0, adx   
38 [0x26]:          rmov adx, ebx   
39 [0x27]: line: 17 movi #-1, ebx   
41 [0x29]:          movl 0   
42 [0x2a]:          movn #3   
44 [0x2c]:          movi #0, adx   
46 [0x2e]:          rmov adx, ebx   
47 [0x2f]:          ret   


function: std#time.nano_time[3039] params(0) in file: lib\support\0.2.805/time.sharp:9:15: note:  
		    static def nano_time() : var {
		              ^

0 [0x0]: line: 10 istorel 0, fp+0   
2 [0x2]: line: 12 int 0xb   : protected asm start
3 [0x3]:          smovr_2 bmr, fp+0   
4 [0x4]: line: 17 loadl ebx, fp+0   : protected asm end
5 [0x5]:          return_val ebx   
6 [0x6]:          ret   


function: std#time.get_os_time[3040] params(1) in file: lib\support\0.2.805/time.sharp:20:15: note:  
		    static def get_os_time(tr: time_request)
		              ^

0 [0x0]: line: 21 pushl 0   
1 [0x1]:          call @1619 // <std#_enum_.get_ordinal>   
2 [0x2]:          call @1961 // <platform.kernel#vm.get_os_time>   
3 [0x3]:          loadval ebx   
4 [0x4]:          return_val ebx   
5 [0x5]:          ret   


function: std#time.nano_to_micro[3041] params(1) in file: lib\support\0.2.805/time.sharp:23:15: note:  
		    static def nano_to_micro(nano: var) : var {
		              ^

0 [0x0]: line: 24 ipushl #0   
1 [0x1]:          movi #1000, ebx   
3 [0x3]:          loadval ecx   
4 [0x4]:          div ecx, ebx -> ebx   
5 [0x5]:          return_val ebx   
6 [0x6]:          ret   


function: std#time.nano_to_mills[3042] params(1) in file: lib\support\0.2.805/time.sharp:27:15: note:  
		    static def nano_to_mills(nano: var) : var {
		              ^

0 [0x0]: line: 28 ipushl #0   
1 [0x1]:          call @3041 // <std#time.nano_to_micro>   
2 [0x2]:          loadval ebx   
3 [0x3]:          rstore ebx   
4 [0x4]:          movi #1000, ebx   
6 [0x6]:          loadval ecx   
7 [0x7]:          div ecx, ebx -> ebx   
8 [0x8]:          return_val ebx   
9 [0x9]:          ret   


function: std#time.nano_to_secs[3043] params(1) in file: lib\support\0.2.805/time.sharp:31:22: note:  
		    public static def nano_to_secs(nano: var) : var {
		                     ^

0 [0x0]: line: 32 ipushl #0   
1 [0x1]:          call @3042 // <std#time.nano_to_mills>   
2 [0x2]:          loadval ebx   
3 [0x3]:          rstore ebx   
4 [0x4]:          movi #1000, ebx   
6 [0x6]:          loadval ecx   
7 [0x7]:          div ecx, ebx -> ebx   
8 [0x8]:          return_val ebx   
9 [0x9]:          ret   


function: std#time.mills_time[3044] params(0) in file: lib\support\0.2.805/time.sharp:35:15: note:  
		    static def mills_time() : var {
		              ^

0 [0x0]: line: 36 call @3039 // <std#time.nano_time>   
1 [0x1]:          call @3042 // <std#time.nano_to_mills>   
2 [0x2]:          loadval ebx   
3 [0x3]:          return_val ebx   
4 [0x4]:          ret   


function: std#time.sleep[3045] params(1) in file: lib\support\0.2.805/time.sharp:39:15: note:  
		    static def sleep(time: var) {
		              ^

0 [0x0]: line: 40 movg @68 // @std#time_unit   
1 [0x1]:          movn #1   
3 [0x3]:          pushobj   
4 [0x4]:          ipushl #0   
5 [0x5]:          call @3046 // <std#time.sleep>   
6 [0x6]:          ret   


function: std#time.sleep[3046] params(2) in file: lib\support\0.2.805/time.sharp:43:15: note:  
		    static def sleep(tm_unit: time_unit, time: var) {
		              ^

0 [0x0]: line: 44 loadl ecx, fp+1   
1 [0x1]:          movi #0, ebx   
3 [0x3]:          lt ecx, ebx   
4 [0x4]:          movr ebx, cmt   
5 [0x5]:          movr cmt, ebx   
6 [0x6]:          jne 17   
7 [0x7]: line: 45 new_class @3 // std#exception   
8 [0x8]:          dup    
9 [0x9]:          new_class @64 // std#string   
10 [0xa]:          dup    
11 [0xb]:          newstr @58 // cannot sleep for negative time:    
12 [0xc]:          call @2935 // <std#string.string>   
13 [0xd]:          ipushl #1   
14 [0xe]:          call @2967 // <std#string.operator+>   
15 [0xf]:          call @1627 // <std#exception.exception>   
16 [0x10]:          throw    
17 [0x11]:          nop   
18 [0x12]: line: 47 pushl 0   
19 [0x13]:          movg @68 // @std#time_unit   
20 [0x14]:          movn #0   
22 [0x16]:          pushobj   
23 [0x17]:          call @1616 // <std#_enum_.operator==>   
24 [0x18]:          loadval ebx   
25 [0x19]:          movr cmt, ebx   
26 [0x1a]:          jne 36   
27 [0x1b]: line: 48 ipushl #1   
28 [0x1c]:          movi #1000000, ebx   
30 [0x1e]:          loadval ecx   
31 [0x1f]:          mul ecx, ebx -> ebx   
32 [0x20]:          rstore ebx   
33 [0x21]:          call @3048 // <std#time.adjust_time>   
34 [0x22]:          ipopl 1   
35 [0x23]:          jmp @66   
36 [0x24]:          pushl 0   
37 [0x25]:          movg @68 // @std#time_unit   
38 [0x26]:          movn #1   
40 [0x28]:          pushobj   
41 [0x29]:          call @1616 // <std#_enum_.operator==>   
42 [0x2a]:          loadval ebx   
43 [0x2b]:          movr cmt, ebx   
44 [0x2c]:          jne 54   
45 [0x2d]: line: 50 ipushl #1   
46 [0x2e]:          movi #1000, ebx   
48 [0x30]:          loadval ecx   
49 [0x31]:          mul ecx, ebx -> ebx   
50 [0x32]:          rstore ebx   
51 [0x33]:          call @3048 // <std#time.adjust_time>   
52 [0x34]:          ipopl 1   
53 [0x35]:          jmp @66   
54 [0x36]:          pushl 0   
55 [0x37]:          movg @68 // @std#time_unit   
56 [0x38]:          movn #2   
58 [0x3a]:          pushobj   
59 [0x3b]:          call @1616 // <std#_enum_.operator==>   
60 [0x3c]:          loadval ebx   
61 [0x3d]:          movr cmt, ebx   
62 [0x3e]:          jne 66   
63 [0x3f]: line: 52 ipushl #1   
64 [0x40]:          call @3048 // <std#time.adjust_time>   
65 [0x41]:          ipopl 1   
66 [0x42]:          nop   
67 [0x43]: line: 55 loadl ebx, fp+1   : protected asm start
68 [0x44]:          sleep ebx   
69 [0x45]:          ret   : protected asm end


function: std#time.wait[3047] params(2) in file: lib\support\0.2.805/time.sharp:61:15: note:  
		    static def wait(tm_unit: time_unit, time: var) {
		              ^

0 [0x0]: line: 62 ipushl #1   
1 [0x1]:          movg @66 // @std#time   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          tne ecx, ebx   
9 [0x9]:          jne 67   
10 [0xa]: line: 63 loadl ecx, fp+1   
11 [0xb]:          movi #0, ebx   
13 [0xd]:          lt ecx, ebx   
14 [0xe]:          movr ebx, cmt   
15 [0xf]:          movr cmt, ebx   
16 [0x10]:          jne 27   
17 [0x11]: line: 64 new_class @3 // std#exception   
18 [0x12]:          dup    
19 [0x13]:          new_class @64 // std#string   
20 [0x14]:          dup    
21 [0x15]:          newstr @58 // cannot sleep for negative time:    
22 [0x16]:          call @2935 // <std#string.string>   
23 [0x17]:          ipushl #1   
24 [0x18]:          call @2967 // <std#string.operator+>   
25 [0x19]:          call @1627 // <std#exception.exception>   
26 [0x1a]:          throw    
27 [0x1b]:          nop   
28 [0x1c]: line: 66 pushl 0   
29 [0x1d]:          movg @68 // @std#time_unit   
30 [0x1e]:          movn #0   
32 [0x20]:          pushobj   
33 [0x21]:          call @1616 // <std#_enum_.operator==>   
34 [0x22]:          loadval ebx   
35 [0x23]:          movr cmt, ebx   
36 [0x24]:          jne 41   
37 [0x25]: line: 67 movi #1000, ebx   
39 [0x27]:          mull ebx, fp@1   
40 [0x28]:          jmp @66   
41 [0x29]:          pushl 0   
42 [0x2a]:          movg @68 // @std#time_unit   
43 [0x2b]:          movn #2   
45 [0x2d]:          pushobj   
46 [0x2e]:          call @1616 // <std#_enum_.operator==>   
47 [0x2f]:          loadval ebx   
48 [0x30]:          movr cmt, ebx   
49 [0x31]:          jne 54   
50 [0x32]: line: 69 movi #1000, ebx   
52 [0x34]:          divl ebx, fp@1   
53 [0x35]:          jmp @66   
54 [0x36]:          pushl 0   
55 [0x37]:          movg @68 // @std#time_unit   
56 [0x38]:          movn #3   
58 [0x3a]:          pushobj   
59 [0x3b]:          call @1616 // <std#_enum_.operator==>   
60 [0x3c]:          loadval ebx   
61 [0x3d]:          movr cmt, ebx   
62 [0x3e]:          jne 66   
63 [0x3f]: line: 71 movi #1000000, ebx   
65 [0x41]:          divl ebx, fp@1   
66 [0x42]:          nop   
67 [0x43]:          nop   
68 [0x44]: line: 75 loadl adx, fp+1   : protected asm start
69 [0x45]:          int 0x14   
70 [0x46]:          ret   : protected asm end


function: std#time.adjust_time[3048] params(1) in file: lib\support\0.2.805/time.sharp:87:23: note:  
		    private static def adjust_time(usec: var) : var {
		                      ^

0 [0x0]: line: 89 call @1940 // <platform#build.is_windows>   
1 [0x1]:          loadval ebx   
2 [0x2]:          movr cmt, ebx   
3 [0x3]:          jne 11   
4 [0x4]: line: 90 ipushl #0   
5 [0x5]:          movi #1000, ebx   
7 [0x7]:          loadval ecx   
8 [0x8]:          div ecx, ebx -> ebx   
9 [0x9]:          return_val ebx   
10 [0xa]:          ret   
11 [0xb]:          nop   
12 [0xc]: line: 93 loadl ebx, fp+0   
13 [0xd]:          return_val ebx   
14 [0xe]:          ret   


function: std#time.measure[3049] params(2) in file: lib\support\0.2.805/time.sharp:96:15: note:  
		    static def measure(tm_unit: time_unit, block: ()()) : var {
		              ^

0 [0x0]: line: 97 call @3039 // <std#time.nano_time>   
1 [0x1]:          ipopl 2   
2 [0x2]:          istorel 0, fp+3   
4 [0x4]: line: 98 ipushl #1   
5 [0x5]:          loadval ebx   
6 [0x6]:          calld ebx   
7 [0x7]: line: 99 call @3039 // <std#time.nano_time>   
8 [0x8]:          ipopl 3   
9 [0x9]: line: 101 pushl 0   
10 [0xa]:           movg @68 // @std#time_unit   
11 [0xb]:           movn #0   
13 [0xd]:           pushobj   
14 [0xe]:           call @1616 // <std#_enum_.operator==>   
15 [0xf]:           loadval ebx   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 25   
18 [0x12]: line: 103 ipushl #2   
19 [0x13]:           call @3043 // <std#time.nano_to_secs>   
20 [0x14]:           ipopl 2   
21 [0x15]: line: 104 ipushl #3   
22 [0x16]:           call @3043 // <std#time.nano_to_secs>   
23 [0x17]:           ipopl 3   
24 [0x18]:           jmp @56   
25 [0x19]:           pushl 0   
26 [0x1a]:           movg @68 // @std#time_unit   
27 [0x1b]:           movn #1   
29 [0x1d]:           pushobj   
30 [0x1e]:           call @1616 // <std#_enum_.operator==>   
31 [0x1f]:           loadval ebx   
32 [0x20]:           movr cmt, ebx   
33 [0x21]:           jne 41   
34 [0x22]: line: 107 ipushl #2   
35 [0x23]:           call @3042 // <std#time.nano_to_mills>   
36 [0x24]:           ipopl 2   
37 [0x25]: line: 108 ipushl #3   
38 [0x26]:           call @3042 // <std#time.nano_to_mills>   
39 [0x27]:           ipopl 3   
40 [0x28]:           jmp @56   
41 [0x29]:           pushl 0   
42 [0x2a]:           movg @68 // @std#time_unit   
43 [0x2b]:           movn #2   
45 [0x2d]:           pushobj   
46 [0x2e]:           call @1616 // <std#_enum_.operator==>   
47 [0x2f]:           loadval ebx   
48 [0x30]:           movr cmt, ebx   
49 [0x31]:           jne 56   
50 [0x32]: line: 111 ipushl #2   
51 [0x33]:           call @3041 // <std#time.nano_to_micro>   
52 [0x34]:           ipopl 2   
53 [0x35]: line: 112 ipushl #3   
54 [0x36]:           call @3041 // <std#time.nano_to_micro>   
55 [0x37]:           ipopl 3   
56 [0x38]:           nop   
57 [0x39]: line: 116 ipushl #3   
58 [0x3a]:           loadl ebx, fp+2   
59 [0x3b]:           loadval ecx   
60 [0x3c]:           sub ecx, ebx -> ebx   
61 [0x3d]:           return_val ebx   
62 [0x3e]:           ret   


constructor: std#time.time[3050] params(0) in file: lib\support\0.2.805/time.sharp:6:6: note:  
		class time {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


std#unique.hash[3051] params(0) in file: lib\support\0.2.805/unique.sharp:11:8: note:  
		    def hash() : long;
		       ^



std#unique.guid[3052] params(0) in file: lib\support\0.2.805/unique.sharp:12:8: note:  
		    def guid() : long;
		       ^



constructor: std#unique.unique[3053] params(0) in file: lib\support\0.2.805/unique.sharp:10:10: note:  
		interface unique {
		         ^

0 [0x0]:         ret   


constructor: common#constants.strings.strings[3054] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/constants.sharp:39:10: note:  
		    class strings {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: common#constants.constants[3055] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/constants.sharp:3:6: note:  
		class constants {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


common.gpio#__srt_global.setup[3056] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/gpio//gpio.sharp:3:11: note:  
		native def setup();
		          ^



common.gpio#__srt_global.pin_mode[3057] params(2) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/gpio//gpio.sharp:4:11: note:  
		native def pin_mode(pin: var, mode: var);
		          ^



common.gpio#__srt_global.write_pin[3058] params(2) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/gpio//gpio.sharp:5:11: note:  
		native def write_pin(pin: var, value: var);
		          ^



common.gpio#__srt_global.read_pin[3059] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/gpio//gpio.sharp:6:11: note:  
		native def read_pin(pin: var): var;
		          ^



function: common.network.core#request.get_network_quality[3060] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//core//request.sharp:20:15: note:  
		    static def get_network_quality()
		              ^

0 [0x0]: line: 21 movg @75 // @common.network.core#request   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          call @3113 // <common.network.driver#nrf24.get_network_quality>   
5 [0x5]:          popobj2    
6 [0x6]:          returnobj   
7 [0x7]:          ret   


function: common.network.core#request.get_signal_strength[3061] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//core//request.sharp:23:15: note:  
		    static def get_signal_strength()
		              ^

0 [0x0]: line: 24 movg @75 // @common.network.core#request   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          call @3114 // <common.network.driver#nrf24.get_signal_strength>   
5 [0x5]:          loadval ebx   
6 [0x6]:          return_val ebx   
7 [0x7]:          ret   


function: common.network.core#request.write[3062] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//core//request.sharp:26:23: note:  
		    private static def write(rdata: request_data): var {
		                      ^

0 [0x0]: line: 27 movg @75 // @common.network.core#request   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 0   
5 [0x5]:          call @3069 // <common.network.core#request_data.to_string>   
6 [0x6]:          call @3117 // <common.network.driver#nrf24.send>   
7 [0x7]:          loadval ebx   
8 [0x8]:          return_val ebx   
9 [0x9]:          ret   


function: common.network.core#request.process_result[3063] params(2) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//core//request.sharp:30:23: note:  
		    private static def process_result(raw: string, rdata: request_data) {
		                      ^

0 [0x0]: line: 31 istorel 0, fp+2   
2 [0x2]: line: 32 new_class @64 // std#string   
3 [0x3]: line: 33 dup    
4 [0x4]:          call @2993 // <std#string.string>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+3   
7 [0x7]: line: 34 new_class @64 // std#string   
8 [0x8]:          dup    
9 [0x9]:          call @2993 // <std#string.string>   
10 [0xa]:          popobj2    
11 [0xb]:          smovr_3 fp+4   
12 [0xc]: line: 36 loadl ebx, fp+2   
13 [0xd]:          smovr_2 ebx, fp+5   
14 [0xe]: line: 37 pushl 0   
15 [0xf]:          ipushl #2   
16 [0x10]:          call @2958 // <std#string.operator[>   
17 [0x11]:          loadval ebx   
18 [0x12]:          rstore ebx   
19 [0x13]:          movi #61, ebx   
21 [0x15]:          loadval ecx   
22 [0x16]:          tne ecx, ebx   
23 [0x17]:          jne 27   
24 [0x18]:          iaddl 1, fp@2   
26 [0x1a]:          jmp @14   
27 [0x1b]: line: 38 pushl 0   
28 [0x1c]:          ipushl #5   
29 [0x1d]:          ipushl #2   
30 [0x1e]:          call @2990 // <std#string.substring>   
31 [0x1f]:          popobj2    
32 [0x20]:          smovr_3 fp+3   
33 [0x21]: line: 40 loadl ebx, fp+2   
34 [0x22]:          inc ebx   
35 [0x23]:          smovr_2 ebx, fp+2   
36 [0x24]:          smovr_2 ebx, fp+5   
37 [0x25]: line: 41 pushl 0   
38 [0x26]:          ipushl #2   
39 [0x27]:          call @2958 // <std#string.operator[>   
40 [0x28]:          loadval ebx   
41 [0x29]:          rstore ebx   
42 [0x2a]:          movi #44, ebx   
44 [0x2c]:          loadval ecx   
45 [0x2d]:          tne ecx, ebx   
46 [0x2e]:          jne 62   
47 [0x2f]: line: 42 iaddl 1, fp@2   
49 [0x31]: line: 43 ipushl #2   
50 [0x32]:          pushl 0   
51 [0x33]:          call @2976 // <std#string.size>   
52 [0x34]:          loadval ebx   
53 [0x35]:          loadval ecx   
54 [0x36]:          lt ecx, ebx   
55 [0x37]:          movr ebx, cmt   
56 [0x38]:          not ebx, ebx   
57 [0x39]:          movr cmt, ebx   
58 [0x3a]:          jne 60   
59 [0x3b]: line: 44 jmp @62   
60 [0x3c]:          nop   
61 [0x3d]:          jmp @37   
62 [0x3e]: line: 47 pushl 0   
63 [0x3f]:          ipushl #5   
64 [0x40]:          ipushl #2   
65 [0x41]:          call @2990 // <std#string.substring>   
66 [0x42]:          popobj2    
67 [0x43]:          smovr_3 fp+4   
68 [0x44]: line: 49 pushl 1   
69 [0x45]:          pushl 3   
70 [0x46]:          pushl 4   
71 [0x47]:          call @3068 // <common.network.core#request_data.add_item>   
72 [0x48]:          pop   
73 [0x49]: line: 50 iaddl 1, fp@2   
75 [0x4b]: line: 52 ipushl #2   
76 [0x4c]:          movi #1, ebx   
78 [0x4e]:          loadval ecx   
79 [0x4f]:          add ecx, ebx -> ebx   
80 [0x50]:          rstore ebx   
81 [0x51]:          pushl 0   
82 [0x52]:          call @2976 // <std#string.size>   
83 [0x53]:          loadval ebx   
84 [0x54]:          loadval ecx   
85 [0x55]:          gte ecx, ebx   
86 [0x56]:          movr ebx, cmt   
87 [0x57]:          movr cmt, ebx   
88 [0x58]:          jne 90   
89 [0x59]: line: 53 jmp @92   
90 [0x5a]:          nop   
91 [0x5b]:          jmp @2   
92 [0x5c]:          ret   


function: common.network.core#request.read[3064] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//core//request.sharp:58:23: note:  
		    private static def read(rdata: request_data): var {
		                      ^

0 [0x0]: line: 59 new_class @64 // std#string   
1 [0x1]:          dup    
2 [0x2]:          call @2993 // <std#string.string>   
3 [0x3]:          popobj2    
4 [0x4]:          smovr_3 fp+1   
5 [0x5]: line: 60 movg @75 // @common.network.core#request   
6 [0x6]:          movn #0   
8 [0x8]:          pushobj   
9 [0x9]:          pushl 1   
10 [0xa]:          call @3115 // <common.network.driver#nrf24.read>   
11 [0xb]:          ipopl 2   
12 [0xc]: line: 63 ipushl #2   
13 [0xd]:          movi #0, ebx   
15 [0xf]:          loadval ecx   
16 [0x10]:          test ecx, ebx   
17 [0x11]:          jne 25   
18 [0x12]: line: 65 pushl 1   
19 [0x13]:          pushl 0   
20 [0x14]:          call @3063 // <common.network.core#request.process_result>   
21 [0x15]: line: 66 istorel 0, fp+0   
23 [0x17]:          ret   
24 [0x18]:          jmp @28   
25 [0x19]: line: 67 loadl ebx, fp+2   
26 [0x1a]:          return_val ebx   
27 [0x1b]:          ret   
28 [0x1c]:          nop   


function: common.network.core#request.listen[3065] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//core//request.sharp:71:15: note:  
		    static def listen(rdata: request_data) {
		              ^

0 [0x0]: line: 72 new_class @64 // std#string   
1 [0x1]:          dup    
2 [0x2]:          call @2993 // <std#string.string>   
3 [0x3]:          popobj2    
4 [0x4]:          smovr_3 fp+1   
5 [0x5]: line: 73 movg @75 // @common.network.core#request   
6 [0x6]:          movn #0   
8 [0x8]:          pushobj   
9 [0x9]:          pushl 1   
10 [0xa]:          call @3116 // <common.network.driver#nrf24.listen>   
11 [0xb]: line: 75 pushl 1   
12 [0xc]:          pushl 0   
13 [0xd]:          call @3063 // <common.network.core#request.process_result>   
14 [0xe]:          ret   


function: common.network.core#request.rw_inf[3066] params(3) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//core//request.sharp:78:15: note:  
		    static def rw_inf(rdata: request_data, rw: var, count: var) : var {
		              ^

0 [0x0]: line: 79 movg @75 // @common.network.core#request   
1 [0x1]:          movn #0   
3 [0x3]:          _lck    
4 [0x4]: line: 80 ipushl #1   
5 [0x5]:          ldc ebx // 0   
6 [0x6]:          loadval ecx   
7 [0x7]:          test ecx, ebx   
8 [0x8]:          jne 55   
9 [0x9]: line: 81 pushl 0   
10 [0xa]: line: 82 call @3064 // <common.network.core#request.read>   
11 [0xb]:          loadval ebx   
12 [0xc]:          rstore ebx   
13 [0xd]:          movi #0, ebx   
15 [0xf]:          loadval ecx   
16 [0x10]:          tne ecx, ebx   
17 [0x11]:          jne 51   
18 [0x12]: line: 83 call @1861 // <std.io#thread.yield>   
19 [0x13]: line: 84 istore 1   
21 [0x15]:          call @1856 // <std.io#thread.sleep>   
22 [0x16]: line: 85 ipushl #2   
23 [0x17]:          movi #-100, ebx   
25 [0x19]:          loadval ecx   
26 [0x1a]:          tne ecx, ebx   
27 [0x1b]:          movr ebx, cmt   
28 [0x1c]:          skne ebx // pc = 40   
29 [0x1d]:          loadl ebx, fp+2   
30 [0x1e]:          movr egx, ebx   
31 [0x1f]:          dec ebx   
32 [0x20]:          smovr_2 ebx, fp+2   
33 [0x21]:          movr ebx, egx   
34 [0x22]:          rstore ebx   
35 [0x23]:          movi #0, ebx   
37 [0x25]:          loadval ecx   
38 [0x26]:          lt ecx, ebx   
39 [0x27]:          movr ebx, cmt   
40 [0x28]:          movr cmt, ebx   
41 [0x29]:          jne 49   
42 [0x2a]: line: 86 istorel 1, fp+0   
44 [0x2c]:          movg @75 // @common.network.core#request   
45 [0x2d]:          movn #0   
47 [0x2f]:          _ulck   
48 [0x30]:          ret   
49 [0x31]:          nop   
50 [0x32]: line: 88 jmp @9   
51 [0x33]:          nop   
52 [0x34]: line: 91 jmp @54   
53 [0x35]:          jmp @9   
54 [0x36]:          jmp @100   
55 [0x37]: line: 94 pushl 0   
56 [0x38]: line: 95 call @3062 // <common.network.core#request.write>   
57 [0x39]:          loadval ebx   
58 [0x3a]:          rstore ebx   
59 [0x3b]:          movi #0, ebx   
61 [0x3d]:          loadval ecx   
62 [0x3e]:          tne ecx, ebx   
63 [0x3f]:          jne 97   
64 [0x40]: line: 96 call @1861 // <std.io#thread.yield>   
65 [0x41]: line: 97 istore 1   
67 [0x43]:          call @1856 // <std.io#thread.sleep>   
68 [0x44]: line: 98 ipushl #2   
69 [0x45]:          movi #-100, ebx   
71 [0x47]:          loadval ecx   
72 [0x48]:          tne ecx, ebx   
73 [0x49]:          movr ebx, cmt   
74 [0x4a]:          skne ebx // pc = 86   
75 [0x4b]:          loadl ebx, fp+2   
76 [0x4c]:          movr egx, ebx   
77 [0x4d]:          dec ebx   
78 [0x4e]:          smovr_2 ebx, fp+2   
79 [0x4f]:          movr ebx, egx   
80 [0x50]:          rstore ebx   
81 [0x51]:          movi #0, ebx   
83 [0x53]:          loadval ecx   
84 [0x54]:          lt ecx, ebx   
85 [0x55]:          movr ebx, cmt   
86 [0x56]:          movr cmt, ebx   
87 [0x57]:          jne 95   
88 [0x58]: line: 99 istorel 1, fp+0   
90 [0x5a]:          movg @75 // @common.network.core#request   
91 [0x5b]:          movn #0   
93 [0x5d]:          _ulck   
94 [0x5e]:          ret   
95 [0x5f]:          nop   
96 [0x60]: line: 101 jmp @55   
97 [0x61]:           nop   
98 [0x62]: line: 104 jmp @100   
99 [0x63]:           jmp @55   
100 [0x64]:           nop   
101 [0x65]: line: 108 istorel 0, fp+0   
103 [0x67]:           movg @75 // @common.network.core#request   
104 [0x68]:           movn #0   
106 [0x6a]:           _ulck   
107 [0x6b]:           ret   
108 [0x6c]:           movg @75 // @common.network.core#request   
109 [0x6d]:           movn #0   
111 [0x6f]:           _ulck   


constructor: common.network.core#request.request[3067] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//core//request.sharp:7:6: note:  
		class request
		     ^

0 [0x0]: line: 14 movg @75 // @common.network.core#request   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          pushnull    
5 [0x5]:          itest ebx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 20   
8 [0x8]: line: 15 new_class @90 // common.network.driver#nrf24   
9 [0x9]:          dup    
10 [0xa]:          call @3107 // <common.network.driver#nrf24.nrf24>   
11 [0xb]:          movg @75 // @common.network.core#request   
12 [0xc]:          movn #0   
14 [0xe]:          popobj   
15 [0xf]: line: 16 movg @75 // @common.network.core#request   
16 [0x10]:          movn #0   
18 [0x12]:          pushobj   
19 [0x13]:          call @3110 // <common.network.driver#nrf24.dump>   
20 [0x14]:          nop   
21 [0x15]:          ret   


function: common.network.core#request_data.add_item[3068] params(2) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//core//request_data.sharp:28:8: note:  
		    def add_item(key: string, value: string) : request_data {
		       ^

0 [0x0]: line: 29 new_class @77 // common.network.core#request_data.request_item   
1 [0x1]:          dup    
2 [0x2]:          pushl 1   
3 [0x3]:          pushl 2   
4 [0x4]:          call @3072 // <common.network.core#request_data.request_item.request_item>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+3   
7 [0x7]: line: 30 movl 0   
8 [0x8]:          movn #0   
10 [0xa]:          pushobj   
11 [0xb]:          pushl 3   
12 [0xc]:          movl 0   
13 [0xd]:          movn #1   
15 [0xf]:          movi #0, adx   
17 [0x11]:          iaload ebx, adx   
18 [0x12]:          rstore ebx   
19 [0x13]:          call @3428 // <std#list<common.network.core#request_data.request_item>.indexof>   
20 [0x14]:          ipopl 4   
21 [0x15]: line: 32 ipushl #4   
22 [0x16]:          movi #-1, ebx   
24 [0x18]:          loadval ecx   
25 [0x19]:          test ecx, ebx   
26 [0x1a]:          jne 34   
27 [0x1b]: line: 33 movl 0   
28 [0x1c]:          movn #0   
30 [0x1e]:          pushobj   
31 [0x1f]:          pushl 3   
32 [0x20]:          call @3418 // <std#list<common.network.core#request_data.request_item>.add>   
33 [0x21]:          jmp @45   
34 [0x22]: line: 35 pushl 2   
35 [0x23]:          movl 0   
36 [0x24]:          movn #0   
38 [0x26]:          pushobj   
39 [0x27]:          ipushl #4   
40 [0x28]:          call @3411 // <std#list<common.network.core#request_data.request_item>.at>   
41 [0x29]:          popobj2    
42 [0x2a]:          movn #1   
44 [0x2c]:          popobj   
45 [0x2d]:          nop   
46 [0x2e]: line: 37 movl 0   
47 [0x2f]:          movn #2   
49 [0x31]:          del   
50 [0x32]: line: 38 movl 0   
51 [0x33]:          returnobj   
52 [0x34]:          ret   


function: common.network.core#request_data.to_string[3069] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//core//request_data.sharp:41:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 42 pushl 0   
1 [0x1]:          call @3431 // <common.network.core#request_data.get_request_string>   
2 [0x2]:          popobj2    
3 [0x3]:          returnobj   
4 [0x4]:          ret   


function: common.network.core#request_data.at[3070] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//core//request_data.sharp:45:8: note:  
		    def at(key: string): string {
		       ^

0 [0x0]: line: 46 new_class @77 // common.network.core#request_data.request_item   
1 [0x1]:          dup    
2 [0x2]:          pushl 1   
3 [0x3]:          pushnull    
4 [0x4]:          call @3072 // <common.network.core#request_data.request_item.request_item>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+2   
7 [0x7]: line: 47 movl 0   
8 [0x8]:          movn #0   
10 [0xa]:          pushobj   
11 [0xb]:          pushl 2   
12 [0xc]:          movl 0   
13 [0xd]:          movn #1   
15 [0xf]:          movi #0, adx   
17 [0x11]:          iaload ebx, adx   
18 [0x12]:          rstore ebx   
19 [0x13]:          call @3428 // <std#list<common.network.core#request_data.request_item>.indexof>   
20 [0x14]:          ipopl 3   
21 [0x15]: line: 49 ipushl #3   
22 [0x16]:          movi #-1, ebx   
24 [0x18]:          loadval ecx   
25 [0x19]:          test ecx, ebx   
26 [0x1a]:          jne 32   
27 [0x1b]: line: 50 pushnull    
28 [0x1c]:          popobj2    
29 [0x1d]:          returnobj   
30 [0x1e]:          ret   
31 [0x1f]:          jmp @43   
32 [0x20]: line: 52 movl 0   
33 [0x21]:          movn #0   
35 [0x23]:          pushobj   
36 [0x24]:          ipushl #3   
37 [0x25]:          call @3411 // <std#list<common.network.core#request_data.request_item>.at>   
38 [0x26]:          popobj2    
39 [0x27]:          movn #1   
41 [0x29]:          returnobj   
42 [0x2a]:          ret   
43 [0x2b]:          nop   


function: common.network.core#request_data.clear[3071] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//core//request_data.sharp:55:8: note:  
		    def clear() {
		       ^

0 [0x0]: line: 56 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          call @3415 // <std#list<common.network.core#request_data.request_item>.clear>   
5 [0x5]: line: 57 movl 0   
6 [0x6]:          movn #2   
8 [0x8]:          del   
9 [0x9]:          ret   


constructor: common.network.core#request_data.request_item.request_item[3072] params(2) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//core//request_data.sharp:65:21: note:  
		        request_item(k: string, v: string)
		                    ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 67 pushl 1   
2 [0x2]:          movl 0   
3 [0x3]:          movn #0   
5 [0x5]:          popobj   
6 [0x6]: line: 68 pushl 2   
7 [0x7]:          movl 0   
8 [0x8]:          movn #1   
10 [0xa]:          popobj   
11 [0xb]:          ret   


constructor: common.network.core#request_data.request_item.request_item[3073] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//core//request_data.sharp:60:10: note:  
		    class request_item
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: common.network.core#request_data.request_data[3074] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//core//request_data.sharp:3:6: note:  
		class request_data {
		     ^

0 [0x0]:         new_class @149 // std#list<common.network.core#request_data.request_item>   
1 [0x1]:         dup    
2 [0x2]:         call @3404 // <std#list<common.network.core#request_data.request_item>.list>   
3 [0x3]:         movl 0   
4 [0x4]:         movn #0   
6 [0x6]:         popobj   
7 [0x7]:         movi #3523, ebx   
9 [0x9]:         movl 0   
10 [0xa]:         movn #1   
12 [0xc]:         movi #0, adx   
14 [0xe]:         rmov adx, ebx   
15 [0xf]:         ret   


common.network.data.request#acknowledge_request.send[3075] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//data//request//ackowledge_request.sharp:7:8: note:  
		    def send();
		       ^



constructor: common.network.data.request#acknowledge_request.acknowledge_request[3076] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//data//request//ackowledge_request.sharp:5:10: note:  
		interface acknowledge_request
		         ^

0 [0x0]:         ret   


common.network.data.request#command_request.listen[3077] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//data//request//command_request.sharp:7:8: note:  
		    def listen(): command_response;
		       ^



common.network.data.request#command_request.send_command[3078] params(3) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//data//request//command_request.sharp:8:8: note:  
		    def send_command(req: request_data, ack: var, timeout: var): var;
		       ^



constructor: common.network.data.request#command_request.command_request[3079] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//data//request//command_request.sharp:5:10: note:  
		interface command_request
		         ^

0 [0x0]:         ret   


common.network.data.request#flight_data_request._get[3080] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//data//request//fight_data_request.sharp:7:8: note:  
		    def _get(): flight_data_response;
		       ^



common.network.data.request#flight_data_request.post[3081] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//data//request//fight_data_request.sharp:8:8: note:  
		    def post(data: flight_data_response);
		       ^



constructor: common.network.data.request#flight_data_request.flight_data_request[3082] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//data//request//fight_data_request.sharp:5:10: note:  
		interface flight_data_request
		         ^

0 [0x0]:         ret   


common.network.data.request#flight_mode_change_request.change_mode[3083] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//data//request//fight_mode_change_request.sharp:5:8: note:  
		    def change_mode(mode: string): var;
		       ^



constructor: common.network.data.request#flight_mode_change_request.flight_mode_change_request[3084] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//data//request//fight_mode_change_request.sharp:3:10: note:  
		interface flight_mode_change_request
		         ^

0 [0x0]:         ret   


common.network.data.request#handshake_request.handshake[3085] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//data//request//handshake_request.sharp:5:8: note:  
		    def handshake();
		       ^



constructor: common.network.data.request#handshake_request.handshake_request[3086] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//data//request//handshake_request.sharp:3:10: note:  
		interface handshake_request
		         ^

0 [0x0]:         ret   


common.network.data.request#network_scan_request.scan_network[3087] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//data//request//network_scan_request.sharp:5:8: note:  
		    def scan_network(): var[];
		       ^



constructor: common.network.data.request#network_scan_request.network_scan_request[3088] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//data//request//network_scan_request.sharp:3:10: note:  
		interface network_scan_request
		         ^

0 [0x0]:         ret   


common.network.data.request#signal_strength_request.get_strength[3089] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//data//request//signal_strength_request.sharp:5:8: note:  
		    def get_strength(): var;
		       ^



constructor: common.network.data.request#signal_strength_request.signal_strength_request[3090] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//data//request//signal_strength_request.sharp:3:10: note:  
		interface signal_strength_request
		         ^

0 [0x0]:         ret   


constructor: common.network.data.response#command_response.command_response[3091] params(2) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//data//response//command_response.sharp:7:21: note:  
		    command_response(cmd: string, req: request_data)
		                    ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 9 pushl 1   
2 [0x2]:         movl 0   
3 [0x3]:         movn #0   
5 [0x5]:         popobj   
6 [0x6]: line: 10 pushl 2   
7 [0x7]:          movl 0   
8 [0x8]:          movn #1   
10 [0xa]:          popobj   
11 [0xb]:          ret   


constructor: common.network.data.response#command_response.command_response[3092] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//data//response//command_response.sharp:5:6: note:  
		class command_response
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: common.network.data.response#flight_data_response.flight_data_response[3093] params(3) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//data//response//flight_data_response.sharp:7:25: note:  
		    flight_data_response(bat_lvl: var, altitude: var, speed: var)
		                        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 9 ipushl #1   
2 [0x2]:         movl 0   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         movi #0, adx   
8 [0x8]:         rmov adx, ebx   
9 [0x9]: line: 10 ipushl #2   
10 [0xa]:          movl 0   
11 [0xb]:          movn #1   
13 [0xd]:          loadval ebx   
14 [0xe]:          movi #0, adx   
16 [0x10]:          rmov adx, ebx   
17 [0x11]: line: 11 ipushl #3   
18 [0x12]:          movl 0   
19 [0x13]:          movn #2   
21 [0x15]:          loadval ebx   
22 [0x16]:          movi #0, adx   
24 [0x18]:          rmov adx, ebx   
25 [0x19]:          ret   


constructor: common.network.data.response#flight_data_response.flight_data_response[3094] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//data//response//flight_data_response.sharp:5:6: note:  
		class flight_data_response
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


common.network.driver#__srt_global.setup[3095] params(5) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//driver//dev_interface.sharp:6:11: note:  
		native def setup(trnsLvl: var, rate: var, delay: var,
		          ^



common.network.driver#__srt_global.set_transmission_lvl[3096] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//driver//dev_interface.sharp:9:11: note:  
		native def set_transmission_lvl(level: var);
		          ^



common.network.driver#__srt_global.set_transmission_rate[3097] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//driver//dev_interface.sharp:11:11: note:  
		native def set_transmission_rate(level: var);
		          ^



common.network.driver#__srt_global.dump_details[3098] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//driver//dev_interface.sharp:13:11: note:  
		native def dump_details();
		          ^



common.network.driver#__srt_global.set_retry_count[3099] params(2) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//driver//dev_interface.sharp:15:11: note:  
		native def set_retry_count(delay: var, count: var);
		          ^



common.network.driver#__srt_global.power_down[3100] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//driver//dev_interface.sharp:17:11: note:  
		native def power_down();
		          ^



common.network.driver#__srt_global.get_signal_strength[3101] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//driver//dev_interface.sharp:19:11: note:  
		native def get_signal_strength(): var;
		          ^



common.network.driver#__srt_global.get_network_quality[3102] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//driver//dev_interface.sharp:21:11: note:  
		native def get_network_quality(): var[];
		          ^



common.network.driver#__srt_global.read[3103] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//driver//dev_interface.sharp:23:11: note:  
		native def read() : _int8[];
		          ^



common.network.driver#__srt_global.listen[3104] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//driver//dev_interface.sharp:25:11: note:  
		native def listen() : _int8[];
		          ^



common.network.driver#__srt_global.send[3105] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//driver//dev_interface.sharp:27:11: note:  
		native def send(data: _int8[]);
		          ^



common.network.driver#__srt_global.get_last_error[3106] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//driver//dev_interface.sharp:29:11: note:  
		native def get_last_error() : var;
		          ^



constructor: common.network.driver#nrf24.nrf24[3107] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//driver//nrf.sharp:12:10: note:  
		    nrf24()
		         ^

0 [0x0]:         movi #0, ebx   
2 [0x2]:         movl 0   
3 [0x3]:         movn #0   
5 [0x5]:         movi #0, adx   
7 [0x7]:         rmov adx, ebx   
8 [0x8]:         movi #0, ebx   
10 [0xa]:         movl 0   
11 [0xb]:         movn #1   
13 [0xd]:         movi #0, adx   
15 [0xf]:         rmov adx, ebx   
16 [0x10]:         ldc ebx // 0   
17 [0x11]:         movl 0   
18 [0x12]:         movn #2   
20 [0x14]:         movi #0, adx   
22 [0x16]:         rmov adx, ebx   
23 [0x17]:         ldc ebx // 1   
24 [0x18]:         movl 0   
25 [0x19]:         movn #3   
27 [0x1b]:         movi #0, adx   
29 [0x1d]:         rmov adx, ebx   
30 [0x1e]:         pushl 0   
31 [0x1f]: line: 14 movi #1, ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #0   
36 [0x24]:          movi #0, adx   
38 [0x26]:          rmov adx, ebx   
39 [0x27]: line: 15 movi #1, ebx   
41 [0x29]:          movl 0   
42 [0x2a]:          movn #1   
44 [0x2c]:          movi #0, adx   
46 [0x2e]:          rmov adx, ebx   
47 [0x2f]: line: 16 movl 0   
48 [0x30]:          movn #2   
50 [0x32]:          movi #0, adx   
52 [0x34]:          iaload ebx, adx   
53 [0x35]:          rstore ebx   
54 [0x36]:          movl 0   
55 [0x37]:          movn #3   
57 [0x39]:          movi #0, adx   
59 [0x3b]:          iaload ebx, adx   
60 [0x3c]:          rstore ebx   
61 [0x3d]:          istore 2   
63 [0x3f]:          movi #5, ebx   
65 [0x41]:          rstore ebx   
66 [0x42]:          movg @71 // @common#constants   
67 [0x43]:          movn #20   
69 [0x45]:          movi #0, adx   
71 [0x47]:          iaload ebx, adx   
72 [0x48]:          rstore ebx   
73 [0x49]:          invoke_delegate 3095 { static=1, args=5 }   
75 [0x4b]:          ret   


function: common.network.driver#nrf24.set_rf_lvl[3108] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//driver//nrf.sharp:20:5: note:  
			def set_rf_lvl(level: var) {
		    ^

0 [0x0]: line: 21 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 22 pushl 0   
3 [0x3]:          call @3118 // <common.network.driver#nrf24.check_state>   
4 [0x4]: line: 23 ipushl #1   
5 [0x5]:          movl 0   
6 [0x6]:          movn #2   
8 [0x8]:          loadval ebx   
9 [0x9]:          movi #0, adx   
11 [0xb]:          rmov adx, ebx   
12 [0xc]: line: 24 ipushl #1   
13 [0xd]:          invoke_delegate 3096 { static=1, args=1 }   
15 [0xf]:          movl 0   
16 [0x10]:          _ulck   
17 [0x11]:          ret   


function: common.network.driver#nrf24.set_data_rate[3109] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//driver//nrf.sharp:28:5: note:  
			def set_data_rate(level: var) {
		    ^

0 [0x0]: line: 29 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 30 pushl 0   
3 [0x3]:          call @3118 // <common.network.driver#nrf24.check_state>   
4 [0x4]: line: 31 ipushl #1   
5 [0x5]:          movl 0   
6 [0x6]:          movn #3   
8 [0x8]:          loadval ebx   
9 [0x9]:          movi #0, adx   
11 [0xb]:          rmov adx, ebx   
12 [0xc]: line: 32 ipushl #1   
13 [0xd]:          invoke_delegate 3097 { static=1, args=1 }   
15 [0xf]:          movl 0   
16 [0x10]:          _ulck   
17 [0x11]:          ret   


function: common.network.driver#nrf24.dump[3110] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//driver//nrf.sharp:36:5: note:  
			def dump() {
		    ^

0 [0x0]: line: 37 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 38 pushl 0   
3 [0x3]:          call @3118 // <common.network.driver#nrf24.check_state>   
4 [0x4]: line: 39 invoke_delegate 3098 { static=1, args=0 }   
6 [0x6]:          movl 0   
7 [0x7]:          _ulck   
8 [0x8]:          ret   


function: common.network.driver#nrf24.update_retry_count[3111] params(2) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//driver//nrf.sharp:43:5: note:  
			def update_retry_count(delay: var, count: var) {
		    ^

0 [0x0]: line: 44 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 45 pushl 0   
3 [0x3]:          call @3118 // <common.network.driver#nrf24.check_state>   
4 [0x4]: line: 46 ipushl #1   
5 [0x5]:          ipushl #2   
6 [0x6]:          invoke_delegate 3099 { static=1, args=2 }   
8 [0x8]:          movl 0   
9 [0x9]:          _ulck   
10 [0xa]:          ret   


function: common.network.driver#nrf24.shut_down[3112] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//driver//nrf.sharp:50:5: note:  
			def shut_down() {
		    ^

0 [0x0]: line: 51 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 52 movi #0, ebx   
4 [0x4]:          movl 0   
5 [0x5]:          movn #1   
7 [0x7]:          movi #0, adx   
9 [0x9]:          rmov adx, ebx   
10 [0xa]: line: 53 invoke_delegate 3100 { static=1, args=0 }   
12 [0xc]:          movl 0   
13 [0xd]:          _ulck   
14 [0xe]:          ret   


function: common.network.driver#nrf24.get_network_quality[3113] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//driver//nrf.sharp:57:8: note:  
		    def get_network_quality() : var[] {
		       ^

0 [0x0]: line: 58 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 59 pushl 0   
3 [0x3]:          call @3118 // <common.network.driver#nrf24.check_state>   
4 [0x4]: line: 60 invoke_delegate 3102 { static=1, args=0 }   
6 [0x6]:          popobj2    
7 [0x7]:          returnobj   
8 [0x8]:          movl 0   
9 [0x9]:          _ulck   
10 [0xa]:          ret   
11 [0xb]:          movl 0   
12 [0xc]:          _ulck   


function: common.network.driver#nrf24.get_signal_strength[3114] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//driver//nrf.sharp:64:5: note:  
			def get_signal_strength(): var {
		    ^

0 [0x0]: line: 65 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 66 pushl 0   
3 [0x3]:          call @3118 // <common.network.driver#nrf24.check_state>   
4 [0x4]: line: 67 invoke_delegate 3101 { static=1, args=0 }   
6 [0x6]:          loadval ebx   
7 [0x7]:          return_val ebx   
8 [0x8]:          movl 0   
9 [0x9]:          _ulck   
10 [0xa]:          ret   
11 [0xb]:          movl 0   
12 [0xc]:          _ulck   


function: common.network.driver#nrf24.read[3115] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//driver//nrf.sharp:71:5: note:  
			def read(response: string): var {
		    ^

0 [0x0]: line: 72 pushl 0   
1 [0x1]:          call @3118 // <common.network.driver#nrf24.check_state>   
2 [0x2]: line: 74 pushl 1   
3 [0x3]:          invoke_delegate 3103 { static=1, args=0 }   
5 [0x5]:          call @2956 // <std#string.operator=>   
6 [0x6]: line: 75 invoke_delegate 3106 { static=1, args=0 }   
8 [0x8]:          loadval ebx   
9 [0x9]:          return_val ebx   
10 [0xa]:          ret   


function: common.network.driver#nrf24.listen[3116] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//driver//nrf.sharp:78:5: note:  
			def listen(response: string) {
		    ^

0 [0x0]: line: 79 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 80 pushl 0   
3 [0x3]:          call @3118 // <common.network.driver#nrf24.check_state>   
4 [0x4]: line: 81 pushl 1   
5 [0x5]:          invoke_delegate 3104 { static=1, args=0 }   
7 [0x7]:          call @2956 // <std#string.operator=>   
8 [0x8]:          movl 0   
9 [0x9]:          _ulck   
10 [0xa]:          ret   


function: common.network.driver#nrf24.send[3117] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//driver//nrf.sharp:85:5: note:  
			def send(response: string): var {
		    ^

0 [0x0]: line: 86 pushl 0   
1 [0x1]:          call @3118 // <common.network.driver#nrf24.check_state>   
2 [0x2]: line: 88 pushl 1   
3 [0x3]:          call @2961 // <std#string.get_data>   
4 [0x4]:          invoke_delegate 3105 { static=1, args=1 }   
6 [0x6]: line: 89 invoke_delegate 3106 { static=1, args=0 }   
8 [0x8]:          loadval ebx   
9 [0x9]:          return_val ebx   
10 [0xa]:          ret   


function: common.network.driver#nrf24.check_state[3118] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//driver//nrf.sharp:92:5: note:  
			def check_state() {
		    ^

0 [0x0]: line: 93 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          not ebx, ebx   
7 [0x7]:          movr cmt, ebx   
8 [0x8]:          jne 14   
9 [0x9]: line: 94 new_class @5 // std#illegal_state_exception   
10 [0xa]:          dup    
11 [0xb]:          newstr @59 // device is not setup   
12 [0xc]:          call @1632 // <std#illegal_state_exception.illegal_state_exception>   
13 [0xd]:          throw    
14 [0xe]:          nop   
15 [0xf]: line: 95 movl 0   
16 [0x10]:          movn #1   
18 [0x12]:          movi #0, adx   
20 [0x14]:          iaload ebx, adx   
21 [0x15]:          not ebx, ebx   
22 [0x16]:          movr cmt, ebx   
23 [0x17]:          jne 29   
24 [0x18]: line: 96 new_class @5 // std#illegal_state_exception   
25 [0x19]:          dup    
26 [0x1a]:          newstr @60 // device is shutown   
27 [0x1b]:          call @1632 // <std#illegal_state_exception.illegal_state_exception>   
28 [0x1c]:          throw    
29 [0x1d]:          nop   
30 [0x1e]:          ret   


function: common.network#network.handshake[3119] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//network.sharp:24:15: note:  
		    static def handshake() {
		              ^

0 [0x0]: line: 25 call @3432 // <common.network#network.get_INSTANCE>   
1 [0x1]:          popobj2    
2 [0x2]:          movn #0   
4 [0x4]:          pushobj   
5 [0x5]:          invoke_delegate 3085 { static=0, args=0 }   
7 [0x7]:          ret   


function: common.network#network.listen[3120] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//network.sharp:28:15: note:  
		    static def listen(): command_response {
		              ^

0 [0x0]: line: 29 call @3432 // <common.network#network.get_INSTANCE>   
1 [0x1]:          popobj2    
2 [0x2]:          movn #1   
4 [0x4]:          pushobj   
5 [0x5]:          invoke_delegate 3077 { static=0, args=0 }   
7 [0x7]:          popobj2    
8 [0x8]:          returnobj   
9 [0x9]:          ret   


function: common.network#network.change_mode[3121] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//network.sharp:32:15: note:  
		    static def change_mode(mode: string): var {
		              ^

0 [0x0]: line: 33 call @3432 // <common.network#network.get_INSTANCE>   
1 [0x1]:          popobj2    
2 [0x2]:          _lck    
3 [0x3]: line: 34 call @3432 // <common.network#network.get_INSTANCE>   
4 [0x4]:          popobj2    
5 [0x5]:          movn #2   
7 [0x7]:          pushobj   
8 [0x8]:          pushl 0   
9 [0x9]:          invoke_delegate 3083 { static=0, args=1 }   
11 [0xb]:          loadval ebx   
12 [0xc]:          return_val ebx   
13 [0xd]:          call @3432 // <common.network#network.get_INSTANCE>   
14 [0xe]:          popobj2    
15 [0xf]:          _ulck   
16 [0x10]:          ret   
17 [0x11]:          call @3432 // <common.network#network.get_INSTANCE>   
18 [0x12]:          popobj2    
19 [0x13]:          _ulck   


function: common.network#network.get_signal_strength[3122] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//network.sharp:38:15: note:  
		    static def get_signal_strength() : var {
		              ^

0 [0x0]: line: 39 call @3432 // <common.network#network.get_INSTANCE>   
1 [0x1]:          popobj2    
2 [0x2]:          movn #4   
4 [0x4]:          pushobj   
5 [0x5]:          invoke_delegate 3089 { static=0, args=0 }   
7 [0x7]:          loadval ebx   
8 [0x8]:          return_val ebx   
9 [0x9]:          ret   


function: common.network#network.scan_network[3123] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//network.sharp:42:15: note:  
		    static def scan_network() : var[] {
		              ^

0 [0x0]: line: 43 call @3432 // <common.network#network.get_INSTANCE>   
1 [0x1]:          popobj2    
2 [0x2]:          _lck    
3 [0x3]: line: 44 call @3432 // <common.network#network.get_INSTANCE>   
4 [0x4]:          popobj2    
5 [0x5]:          movn #5   
7 [0x7]:          pushobj   
8 [0x8]:          invoke_delegate 3087 { static=0, args=0 }   
10 [0xa]:          popobj2    
11 [0xb]:          returnobj   
12 [0xc]:          call @3432 // <common.network#network.get_INSTANCE>   
13 [0xd]:          popobj2    
14 [0xe]:          _ulck   
15 [0xf]:          ret   
16 [0x10]:          call @3432 // <common.network#network.get_INSTANCE>   
17 [0x11]:          popobj2    
18 [0x12]:          _ulck   


function: common.network#network.get_flight_data[3124] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//network.sharp:48:15: note:  
		    static def get_flight_data() : flight_data_response {
		              ^

0 [0x0]: line: 49 call @3432 // <common.network#network.get_INSTANCE>   
1 [0x1]:          popobj2    
2 [0x2]:          _lck    
3 [0x3]: line: 50 call @3432 // <common.network#network.get_INSTANCE>   
4 [0x4]:          popobj2    
5 [0x5]:          movn #6   
7 [0x7]:          pushobj   
8 [0x8]:          invoke_delegate 3080 { static=0, args=0 }   
10 [0xa]:          popobj2    
11 [0xb]:          returnobj   
12 [0xc]:          call @3432 // <common.network#network.get_INSTANCE>   
13 [0xd]:          popobj2    
14 [0xe]:          _ulck   
15 [0xf]:          ret   
16 [0x10]:          call @3432 // <common.network#network.get_INSTANCE>   
17 [0x11]:          popobj2    
18 [0x12]:          _ulck   


function: common.network#network.post_flight_data[3125] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//network.sharp:54:15: note:  
		    static def post_flight_data(data: flight_data_response) {
		              ^

0 [0x0]: line: 55 call @3432 // <common.network#network.get_INSTANCE>   
1 [0x1]:          popobj2    
2 [0x2]:          _lck    
3 [0x3]: line: 56 call @3432 // <common.network#network.get_INSTANCE>   
4 [0x4]:          popobj2    
5 [0x5]:          movn #6   
7 [0x7]:          pushobj   
8 [0x8]:          pushl 0   
9 [0x9]:          invoke_delegate 3081 { static=0, args=1 }   
11 [0xb]:          call @3432 // <common.network#network.get_INSTANCE>   
12 [0xc]:          popobj2    
13 [0xd]:          _ulck   
14 [0xe]:          ret   


function: common.network#network.send_acknowledge[3126] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//network.sharp:60:15: note:  
		    static def send_acknowledge() {
		              ^

0 [0x0]: line: 61 call @3432 // <common.network#network.get_INSTANCE>   
1 [0x1]:          popobj2    
2 [0x2]:          _lck    
3 [0x3]: line: 62 call @3432 // <common.network#network.get_INSTANCE>   
4 [0x4]:          popobj2    
5 [0x5]:          movn #3   
7 [0x7]:          pushobj   
8 [0x8]:          invoke_delegate 3075 { static=0, args=0 }   
10 [0xa]:          call @3432 // <common.network#network.get_INSTANCE>   
11 [0xb]:          popobj2    
12 [0xc]:          _ulck   
13 [0xd]:          ret   


constructor: common.network#network.network[3127] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//network.sharp:5:6: note:  
		class network {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: common.network.remote#acknowledge_request_impl.acknowledge_request_impl[3128] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//remote//acknowledge_request_impl.sharp:10:29: note:  
		    acknowledge_request_impl()
		                            ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @3132 // <common.network.remote#command_request_impl.command_request_impl>   
2 [0x2]: line: 12 new_class @76 // common.network.core#request_data   
3 [0x3]:          dup    
4 [0x4]:          call @3074 // <common.network.core#request_data.request_data>   
5 [0x5]:          movl 0   
6 [0x6]:          movn #0   
8 [0x8]:          popobj   
9 [0x9]: line: 13 movl 0   
10 [0xa]:          movn #0   
12 [0xc]:          pushobj   
13 [0xd]:          movg @72 // @common#constants.strings   
14 [0xe]:          movn #1   
16 [0x10]:          pushobj   
17 [0x11]:          movg @72 // @common#constants.strings   
18 [0x12]:          movn #2   
20 [0x14]:          pushobj   
21 [0x15]:          call @3068 // <common.network.core#request_data.add_item>   
22 [0x16]:          pop   
23 [0x17]:          ret   


function: common.network.remote#acknowledge_request_impl.send[3129] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//remote//acknowledge_request_impl.sharp:18:8: note:  
		    def send() {
		       ^

0 [0x0]: line: 19 pushl 0   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          pushobj   
5 [0x5]:          istore 0   
7 [0x7]:          movi #1, ebx   
9 [0x9]:          rstore ebx   
10 [0xa]:          call @3131 // <common.network.remote#command_request_impl.send_command>   
11 [0xb]:          pop   
12 [0xc]:          ret   


function: common.network.remote#command_request_impl.listen[3130] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//remote//command_request_impl.sharp:11:8: note:  
		    def listen(): command_response {
		       ^

0 [0x0]: line: 12 new_class @76 // common.network.core#request_data   
1 [0x1]:          dup    
2 [0x2]:          call @3074 // <common.network.core#request_data.request_data>   
3 [0x3]:          popobj2    
4 [0x4]:          smovr_3 fp+1   
5 [0x5]: line: 14 pushl 1   
6 [0x6]: line: 15 call @3065 // <common.network.core#request.listen>   
7 [0x7]: line: 17 pushl 1   
8 [0x8]:          movg @72 // @common#constants.strings   
9 [0x9]:          movn #0   
11 [0xb]:          pushobj   
12 [0xc]:          call @3070 // <common.network.core#request_data.at>   
13 [0xd]:          popobj2    
14 [0xe]:          smovr_3 fp+2   
15 [0xf]: line: 18 movl 2   
16 [0x10]:          checknull   
17 [0x11]:          not ebx, ebx   
18 [0x12]:          movr cmt, ebx   
19 [0x13]:          jne 29   
20 [0x14]: line: 19 new_class @87 // common.network.data.response#command_response   
21 [0x15]:          dup    
22 [0x16]:          pushl 2   
23 [0x17]:          pushl 1   
24 [0x18]:          call @3091 // <common.network.data.response#command_response.command_response>   
25 [0x19]:          popobj2    
26 [0x1a]:          returnobj   
27 [0x1b]:          ret   
28 [0x1c]:          jmp @32   
29 [0x1d]: line: 21 pushl 1   
30 [0x1e]:          call @3071 // <common.network.core#request_data.clear>   
31 [0x1f]: line: 22 jmp @5   
32 [0x20]:          nop   
33 [0x21]: line: 25 pushnull    
34 [0x22]:          popobj2    
35 [0x23]:          returnobj   
36 [0x24]:          ret   


function: common.network.remote#command_request_impl.send_command[3131] params(3) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//remote//command_request_impl.sharp:28:8: note:  
		    def send_command(req: request_data, ack: var, timeout: var): var {
		       ^

0 [0x0]: line: 29 new_class @76 // common.network.core#request_data   
1 [0x1]:          dup    
2 [0x2]:          call @3074 // <common.network.core#request_data.request_data>   
3 [0x3]:          popobj2    
4 [0x4]:          smovr_3 fp+4   
5 [0x5]: line: 31 loadl ebx, fp+3   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 65   
8 [0x8]: line: 33 pushl 1   
9 [0x9]:          ldc ebx // 1   
10 [0xa]:          rstore ebx   
11 [0xb]:          istore 3   
13 [0xd]:          call @3066 // <common.network.core#request.rw_inf>   
14 [0xe]:          loadval ebx   
15 [0xf]:          movr cmt, ebx   
16 [0x10]:          jne 20   
17 [0x11]: line: 34 istorel 1, fp+0   
19 [0x13]:          ret   
20 [0x14]:          nop   
21 [0x15]: line: 37 loadl ebx, fp+2   
22 [0x16]:          movr cmt, ebx   
23 [0x17]:          jne 63   
24 [0x18]: line: 38 pushl 4   
25 [0x19]:          ldc ebx // 0   
26 [0x1a]:          rstore ebx   
27 [0x1b]:          istore 3   
29 [0x1d]:          call @3066 // <common.network.core#request.rw_inf>   
30 [0x1e]:          loadval ebx   
31 [0x1f]:          movr cmt, ebx   
32 [0x20]:          jne 36   
33 [0x21]: line: 39 istorel 1, fp+0   
35 [0x23]:          ret   
36 [0x24]:          nop   
37 [0x25]: line: 42 pushl 4   
38 [0x26]:          movg @72 // @common#constants.strings   
39 [0x27]:          movn #1   
41 [0x29]:          pushobj   
42 [0x2a]:          call @3070 // <common.network.core#request_data.at>   
43 [0x2b]:          popobj2    
44 [0x2c]:          smovr_3 fp+5   
45 [0x2d]: line: 43 movl 5   
46 [0x2e]:          checknull   
47 [0x2f]:          not ebx, ebx   
48 [0x30]:          skne ebx // pc = 56   
49 [0x31]:          pushl 5   
50 [0x32]:          movg @72 // @common#constants.strings   
51 [0x33]:          movn #2   
53 [0x35]:          pushobj   
54 [0x36]:          call @2953 // <std#string.operator==>   
55 [0x37]:          loadval ebx   
56 [0x38]:          not ebx, ebx   
57 [0x39]:          movr cmt, ebx   
58 [0x3a]:          jne 62   
59 [0x3b]: line: 44 istorel 1, fp+0   
61 [0x3d]:          ret   
62 [0x3e]:          nop   
63 [0x3f]:          nop   
64 [0x40]:          jmp @113   
65 [0x41]: line: 48 pushl 1   
66 [0x42]: line: 49 ldc ebx // 1   
67 [0x43]:          rstore ebx   
68 [0x44]:          istore 3   
70 [0x46]:          call @3066 // <common.network.core#request.rw_inf>   
71 [0x47]:          pop   
72 [0x48]: line: 51 loadl ebx, fp+2   
73 [0x49]:          movr cmt, ebx   
74 [0x4a]:          jne 112   
75 [0x4b]: line: 52 pushl 4   
76 [0x4c]:          ldc ebx // 0   
77 [0x4d]:          rstore ebx   
78 [0x4e]:          istore 3   
80 [0x50]:          call @3066 // <common.network.core#request.rw_inf>   
81 [0x51]:          loadval ebx   
82 [0x52]:          movr cmt, ebx   
83 [0x53]:          jne 85   
84 [0x54]: line: 53 jmp @65   
85 [0x55]:          nop   
86 [0x56]: line: 56 pushl 4   
87 [0x57]:          movg @72 // @common#constants.strings   
88 [0x58]:          movn #1   
90 [0x5a]:          pushobj   
91 [0x5b]:          call @3070 // <common.network.core#request_data.at>   
92 [0x5c]:          popobj2    
93 [0x5d]:          smovr_3 fp+6   
94 [0x5e]: line: 57 movl 6   
95 [0x5f]:          checknull   
96 [0x60]:          not ebx, ebx   
97 [0x61]:          skne ebx // pc = 105   
98 [0x62]:          pushl 6   
99 [0x63]:          movg @72 // @common#constants.strings   
100 [0x64]:          movn #2   
102 [0x66]:          pushobj   
103 [0x67]:          call @2953 // <std#string.operator==>   
104 [0x68]:          loadval ebx   
105 [0x69]:          not ebx, ebx   
106 [0x6a]:          movr cmt, ebx   
107 [0x6b]:          jne 111   
108 [0x6c]: line: 58 pushl 4   
109 [0x6d]:          call @3071 // <common.network.core#request_data.clear>   
110 [0x6e]: line: 59 jmp @65   
111 [0x6f]:          nop   
112 [0x70]:          nop   
113 [0x71]:          nop   
114 [0x72]: line: 64 istorel 0, fp+0   
116 [0x74]:          ret   


constructor: common.network.remote#command_request_impl.command_request_impl[3132] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//remote//command_request_impl.sharp:8:6: note:  
		class command_request_impl base request : command_request
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @3067 // <common.network.core#request.request>   
2 [0x2]:         ret   


function: common.network.remote#flight_data_request_impl._get[3133] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//remote//flight_data_request_impl.sharp:11:8: note:  
		    def _get() : flight_data_response {
		       ^

0 [0x0]: line: 12 new_class @76 // common.network.core#request_data   
1 [0x1]:          dup    
2 [0x2]:          call @3074 // <common.network.core#request_data.request_data>   
3 [0x3]:          popobj2    
4 [0x4]:          smovr_3 fp+1   
5 [0x5]: line: 13 new_class @76 // common.network.core#request_data   
6 [0x6]:          dup    
7 [0x7]:          call @3074 // <common.network.core#request_data.request_data>   
8 [0x8]:          popobj2    
9 [0x9]:          smovr_3 fp+2   
10 [0xa]: line: 14 pushl 2   
11 [0xb]:          movg @72 // @common#constants.strings   
12 [0xc]:          movn #0   
14 [0xe]:          pushobj   
15 [0xf]:          movg @72 // @common#constants.strings   
16 [0x10]:          movn #15   
18 [0x12]:          pushobj   
19 [0x13]:          call @3068 // <common.network.core#request_data.add_item>   
20 [0x14]:          pop   
21 [0x15]: line: 17 pushl 2   
22 [0x16]:          ldc ebx // 1   
23 [0x17]:          rstore ebx   
24 [0x18]:          istore 3   
26 [0x1a]:          call @3066 // <common.network.core#request.rw_inf>   
27 [0x1b]:          loadval ebx   
28 [0x1c]:          movr cmt, ebx   
29 [0x1d]:          jne 34   
30 [0x1e]: line: 18 pushnull    
31 [0x1f]:          popobj2    
32 [0x20]:          returnobj   
33 [0x21]:          ret   
34 [0x22]:          nop   
35 [0x23]: line: 21 pushl 1   
36 [0x24]:          ldc ebx // 0   
37 [0x25]:          rstore ebx   
38 [0x26]:          istore 3   
40 [0x28]:          call @3066 // <common.network.core#request.rw_inf>   
41 [0x29]:          loadval ebx   
42 [0x2a]:          movr cmt, ebx   
43 [0x2b]:          jne 48   
44 [0x2c]: line: 22 pushnull    
45 [0x2d]:          popobj2    
46 [0x2e]:          returnobj   
47 [0x2f]:          ret   
48 [0x30]:          nop   
49 [0x31]: line: 25 pushl 1   
50 [0x32]:          movg @72 // @common#constants.strings   
51 [0x33]:          movn #1   
53 [0x35]:          pushobj   
54 [0x36]:          call @3070 // <common.network.core#request_data.at>   
55 [0x37]:          popobj2    
56 [0x38]:          smovr_3 fp+3   
57 [0x39]: line: 26 movl 3   
58 [0x3a]:          checknull   
59 [0x3b]:          not ebx, ebx   
60 [0x3c]:          skne ebx // pc = 95   
61 [0x3d]:          pushl 3   
62 [0x3e]:          newstr @61 // data   
63 [0x3f]:          call @2952 // <std#string.operator==>   
64 [0x40]:          loadval ebx   
65 [0x41]:          skne ebx // pc = 95   
66 [0x42]:          pushl 1   
67 [0x43]:          movg @72 // @common#constants.strings   
68 [0x44]:          movn #5   
70 [0x46]:          pushobj   
71 [0x47]:          call @3070 // <common.network.core#request_data.at>   
72 [0x48]:          pushnull    
73 [0x49]:          itest ebx   
74 [0x4a]:          not ebx, ebx   
75 [0x4b]:          skne ebx // pc = 95   
76 [0x4c]:          pushl 1   
77 [0x4d]:          movg @72 // @common#constants.strings   
78 [0x4e]:          movn #4   
80 [0x50]:          pushobj   
81 [0x51]:          call @3070 // <common.network.core#request_data.at>   
82 [0x52]:          pushnull    
83 [0x53]:          itest ebx   
84 [0x54]:          not ebx, ebx   
85 [0x55]:          skne ebx // pc = 95   
86 [0x56]:          pushl 1   
87 [0x57]:          movg @72 // @common#constants.strings   
88 [0x58]:          movn #6   
90 [0x5a]:          pushobj   
91 [0x5b]:          call @3070 // <common.network.core#request_data.at>   
92 [0x5c]:          pushnull    
93 [0x5d]:          itest ebx   
94 [0x5e]:          not ebx, ebx   
95 [0x5f]:          movr cmt, ebx   
96 [0x60]:          jne 150   
97 [0x61]: line: 28 pushl 1   
98 [0x62]:          movg @72 // @common#constants.strings   
99 [0x63]:          movn #5   
101 [0x65]:          pushobj   
102 [0x66]:          call @3070 // <common.network.core#request_data.at>   
103 [0x67]:          call @783 // <std#integer<_int32>.parse>   
104 [0x68]:          movl 0   
105 [0x69]:          movn #0   
107 [0x6b]:          movn #0   
109 [0x6d]:          loadval ebx   
110 [0x6e]:          movi #0, adx   
112 [0x70]:          rmov adx, ebx   
113 [0x71]: line: 29 pushl 1   
114 [0x72]:          movg @72 // @common#constants.strings   
115 [0x73]:          movn #4   
117 [0x75]:          pushobj   
118 [0x76]:          call @3070 // <common.network.core#request_data.at>   
119 [0x77]:          call @783 // <std#integer<_int32>.parse>   
120 [0x78]:          movl 0   
121 [0x79]:          movn #0   
123 [0x7b]:          movn #1   
125 [0x7d]:          loadval ebx   
126 [0x7e]:          movi #0, adx   
128 [0x80]:          rmov adx, ebx   
129 [0x81]: line: 30 pushl 1   
130 [0x82]:          movg @72 // @common#constants.strings   
131 [0x83]:          movn #6   
133 [0x85]:          pushobj   
134 [0x86]:          call @3070 // <common.network.core#request_data.at>   
135 [0x87]:          call @783 // <std#integer<_int32>.parse>   
136 [0x88]:          movl 0   
137 [0x89]:          movn #0   
139 [0x8b]:          movn #2   
141 [0x8d]:          loadval ebx   
142 [0x8e]:          movi #0, adx   
144 [0x90]:          rmov adx, ebx   
145 [0x91]: line: 31 movl 0   
146 [0x92]:          movn #0   
148 [0x94]:          returnobj   
149 [0x95]:          ret   
150 [0x96]:          nop   
151 [0x97]: line: 34 pushnull    
152 [0x98]:          popobj2    
153 [0x99]:          returnobj   
154 [0x9a]:          ret   


function: common.network.remote#flight_data_request_impl.post[3134] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//remote//flight_data_request_impl.sharp:37:8: note:  
		    def post(data: flight_data_response) {
		       ^

0 [0x0]: line: 38 new_class @76 // common.network.core#request_data   
1 [0x1]:          dup    
2 [0x2]:          call @3074 // <common.network.core#request_data.request_data>   
3 [0x3]:          popobj2    
4 [0x4]:          smovr_3 fp+2   
5 [0x5]: line: 39 pushl 2   
6 [0x6]:          movg @72 // @common#constants.strings   
7 [0x7]:          movn #1   
9 [0x9]:          pushobj   
10 [0xa]:          new_class @64 // std#string   
11 [0xb]:          dup    
12 [0xc]:          newstr @61 // data   
13 [0xd]:          call @2935 // <std#string.string>   
14 [0xe]:          call @3068 // <common.network.core#request_data.add_item>   
15 [0xf]:          pop   
16 [0x10]: line: 40 pushl 2   
17 [0x11]:          movg @72 // @common#constants.strings   
18 [0x12]:          movn #4   
20 [0x14]:          pushobj   
21 [0x15]:          new_class @64 // std#string   
22 [0x16]:          dup    
23 [0x17]:          newstr @22 //    
24 [0x18]:          call @2935 // <std#string.string>   
25 [0x19]:          movl 1   
26 [0x1a]:          movn #1   
28 [0x1c]:          movi #0, adx   
30 [0x1e]:          iaload ebx, adx   
31 [0x1f]:          rstore ebx   
32 [0x20]:          call @2967 // <std#string.operator+>   
33 [0x21]:          call @3068 // <common.network.core#request_data.add_item>   
34 [0x22]:          pop   
35 [0x23]: line: 41 pushl 2   
36 [0x24]:          movg @72 // @common#constants.strings   
37 [0x25]:          movn #6   
39 [0x27]:          pushobj   
40 [0x28]:          new_class @64 // std#string   
41 [0x29]:          dup    
42 [0x2a]:          newstr @22 //    
43 [0x2b]:          call @2935 // <std#string.string>   
44 [0x2c]:          movl 1   
45 [0x2d]:          movn #2   
47 [0x2f]:          movi #0, adx   
49 [0x31]:          iaload ebx, adx   
50 [0x32]:          rstore ebx   
51 [0x33]:          call @2967 // <std#string.operator+>   
52 [0x34]:          call @3068 // <common.network.core#request_data.add_item>   
53 [0x35]:          pop   
54 [0x36]: line: 42 pushl 2   
55 [0x37]:          movg @72 // @common#constants.strings   
56 [0x38]:          movn #5   
58 [0x3a]:          pushobj   
59 [0x3b]:          new_class @64 // std#string   
60 [0x3c]:          dup    
61 [0x3d]:          newstr @22 //    
62 [0x3e]:          call @2935 // <std#string.string>   
63 [0x3f]:          movl 1   
64 [0x40]:          movn #0   
66 [0x42]:          movi #0, adx   
68 [0x44]:          iaload ebx, adx   
69 [0x45]:          rstore ebx   
70 [0x46]:          call @2967 // <std#string.operator+>   
71 [0x47]:          call @3068 // <common.network.core#request_data.add_item>   
72 [0x48]:          pop   
73 [0x49]: line: 43 pushl 0   
74 [0x4a]:          pushl 2   
75 [0x4b]:          istore 0   
77 [0x4d]:          movi #1, ebx   
79 [0x4f]:          rstore ebx   
80 [0x50]:          call @3131 // <common.network.remote#command_request_impl.send_command>   
81 [0x51]:          pop   
82 [0x52]:          ret   


constructor: common.network.remote#flight_data_request_impl.flight_data_request_impl[3135] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//remote//flight_data_request_impl.sharp:7:6: note:  
		class flight_data_request_impl base command_request_impl : flight_data_request
		     ^

0 [0x0]:         new_class @88 // common.network.data.response#flight_data_response   
1 [0x1]:         dup    
2 [0x2]:         istore 0   
4 [0x4]:         movi #0, ebx   
6 [0x6]:         rstore ebx   
7 [0x7]:         istore 0   
9 [0x9]:         call @3093 // <common.network.data.response#flight_data_response.flight_data_response>   
10 [0xa]:         movl 0   
11 [0xb]:         movn #0   
13 [0xd]:         popobj   
14 [0xe]:         ret   


constructor: common.network.remote#flight_mode_change_request_impl.flight_mode_change_request_impl[3136] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//remote//flight_mode_request_impl.sharp:9:36: note:  
		    flight_mode_change_request_impl()
		                                   ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @3132 // <common.network.remote#command_request_impl.command_request_impl>   
2 [0x2]: line: 11 new_class @76 // common.network.core#request_data   
3 [0x3]:          dup    
4 [0x4]:          call @3074 // <common.network.core#request_data.request_data>   
5 [0x5]:          movl 0   
6 [0x6]:          movn #0   
8 [0x8]:          popobj   
9 [0x9]: line: 12 movl 0   
10 [0xa]:          movn #0   
12 [0xc]:          pushobj   
13 [0xd]:          movg @72 // @common#constants.strings   
14 [0xe]:          movn #0   
16 [0x10]:          pushobj   
17 [0x11]:          movg @72 // @common#constants.strings   
18 [0x12]:          movn #14   
20 [0x14]:          pushobj   
21 [0x15]:          call @3068 // <common.network.core#request_data.add_item>   
22 [0x16]:          pop   
23 [0x17]:          ret   


function: common.network.remote#flight_mode_change_request_impl.change_mode[3137] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//remote//flight_mode_request_impl.sharp:17:8: note:  
		    def change_mode(mode: string): var {
		       ^

0 [0x0]: line: 18 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          movg @72 // @common#constants.strings   
5 [0x5]:          movn #3   
7 [0x7]:          pushobj   
8 [0x8]:          pushl 1   
9 [0x9]:          call @3068 // <common.network.core#request_data.add_item>   
10 [0xa]:          pop   
11 [0xb]: line: 19 pushl 0   
12 [0xc]:          movl 0   
13 [0xd]:          movn #0   
15 [0xf]:          pushobj   
16 [0x10]:          istore 1   
18 [0x12]:          movi #1, ebx   
20 [0x14]:          rstore ebx   
21 [0x15]:          call @3131 // <common.network.remote#command_request_impl.send_command>   
22 [0x16]:          loadval ebx   
23 [0x17]:          return_val ebx   
24 [0x18]:          ret   


constructor: common.network.remote#handshake_request_impl.handshake_request_impl[3138] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//remote//handshake_request_impl.sharp:10:27: note:  
		    handshake_request_impl()
		                          ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @3132 // <common.network.remote#command_request_impl.command_request_impl>   
2 [0x2]: line: 12 new_class @76 // common.network.core#request_data   
3 [0x3]:          dup    
4 [0x4]:          call @3074 // <common.network.core#request_data.request_data>   
5 [0x5]:          movl 0   
6 [0x6]:          movn #0   
8 [0x8]:          popobj   
9 [0x9]: line: 13 movl 0   
10 [0xa]:          movn #0   
12 [0xc]:          pushobj   
13 [0xd]:          movg @72 // @common#constants.strings   
14 [0xe]:          movn #0   
16 [0x10]:          pushobj   
17 [0x11]:          movg @72 // @common#constants.strings   
18 [0x12]:          movn #9   
20 [0x14]:          pushobj   
21 [0x15]:          call @3068 // <common.network.core#request_data.add_item>   
22 [0x16]:          pop   
23 [0x17]:          ret   


function: common.network.remote#handshake_request_impl.handshake[3139] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//remote//handshake_request_impl.sharp:18:8: note:  
		    def handshake() {
		       ^

0 [0x0]: line: 19 pushl 0   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          pushobj   
5 [0x5]:          istore 1   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          rstore ebx   
10 [0xa]:          call @3131 // <common.network.remote#command_request_impl.send_command>   
11 [0xb]:          pop   
12 [0xc]:          ret   


function: common.network.remote#network_scan_request_impl.scan_network[3140] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//remote//network_scan_request_impl.sharp:10:8: note:  
		    def scan_network(): var[] {
		       ^

0 [0x0]: line: 11 call @3060 // <common.network.core#request.get_network_quality>   
1 [0x1]:          popobj2    
2 [0x2]:          returnobj   
3 [0x3]:          ret   


constructor: common.network.remote#network_scan_request_impl.network_scan_request_impl[3141] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//remote//network_scan_request_impl.sharp:8:6: note:  
		class network_scan_request_impl base request : network_scan_request
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @3067 // <common.network.core#request.request>   
2 [0x2]:         ret   


function: common.network.remote#__srt_global.initialize[3142] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//remote//remote.sharp:6:4: note:  
		def initialize(net: network) {
		   ^

0 [0x0]: line: 7 new_class @98 // common.network.remote#handshake_request_impl   
1 [0x1]:         dup    
2 [0x2]:         call @3138 // <common.network.remote#handshake_request_impl.handshake_request_impl>   
3 [0x3]:         movl 0   
4 [0x4]:         movn #0   
6 [0x6]:         popobj   
7 [0x7]: line: 8 new_class @95 // common.network.remote#command_request_impl   
8 [0x8]:         dup    
9 [0x9]:         call @3132 // <common.network.remote#command_request_impl.command_request_impl>   
10 [0xa]:         movl 0   
11 [0xb]:         movn #1   
13 [0xd]:         popobj   
14 [0xe]: line: 9 new_class @97 // common.network.remote#flight_mode_change_request_impl   
15 [0xf]:         dup    
16 [0x10]:         call @3136 // <common.network.remote#flight_mode_change_request_impl.flight_mode_change_request_impl>   
17 [0x11]:         movl 0   
18 [0x12]:         movn #2   
20 [0x14]:         popobj   
21 [0x15]: line: 10 new_class @94 // common.network.remote#acknowledge_request_impl   
22 [0x16]:          dup    
23 [0x17]:          call @3128 // <common.network.remote#acknowledge_request_impl.acknowledge_request_impl>   
24 [0x18]:          movl 0   
25 [0x19]:          movn #3   
27 [0x1b]:          popobj   
28 [0x1c]: line: 11 new_class @100 // common.network.remote#signal_strength_request_impl   
29 [0x1d]:          dup    
30 [0x1e]:          call @3144 // <common.network.remote#signal_strength_request_impl.signal_strength_request_impl>   
31 [0x1f]:          movl 0   
32 [0x20]:          movn #4   
34 [0x22]:          popobj   
35 [0x23]: line: 12 new_class @99 // common.network.remote#network_scan_request_impl   
36 [0x24]:          dup    
37 [0x25]:          call @3141 // <common.network.remote#network_scan_request_impl.network_scan_request_impl>   
38 [0x26]:          movl 0   
39 [0x27]:          movn #5   
41 [0x29]:          popobj   
42 [0x2a]: line: 13 new_class @96 // common.network.remote#flight_data_request_impl   
43 [0x2b]:          dup    
44 [0x2c]:          call @3135 // <common.network.remote#flight_data_request_impl.flight_data_request_impl>   
45 [0x2d]:          movl 0   
46 [0x2e]:          movn #6   
48 [0x30]:          popobj   
49 [0x31]:          ret   


function: common.network.remote#signal_strength_request_impl.get_strength[3143] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//remote//signal_strength_request_impl.sharp:10:8: note:  
		    def get_strength(): var {
		       ^

0 [0x0]: line: 11 call @3061 // <common.network.core#request.get_signal_strength>   
1 [0x1]:          loadval ebx   
2 [0x2]:          return_val ebx   
3 [0x3]:          ret   


constructor: common.network.remote#signal_strength_request_impl.signal_strength_request_impl[3144] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//remote//signal_strength_request_impl.sharp:8:6: note:  
		class signal_strength_request_impl base request : signal_strength_request
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @3067 // <common.network.core#request.request>   
2 [0x2]:         ret   


function: main#__srt_global.setup_conn_tracker[3145] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/connection_tracker.sharp:14:4: note:  
		def setup_conn_tracker() {
		   ^

0 [0x0]: line: 15 istore 26   
2 [0x2]:          ldc ebx // 1   
3 [0x3]:          rstore ebx   
4 [0x4]:          invoke_delegate 3057 { static=1, args=2 }   
6 [0x6]: line: 16 istore 26   
8 [0x8]:          ldc ebx // 0   
9 [0x9]:          rstore ebx   
10 [0xa]:          invoke_delegate 3058 { static=1, args=2 }   
12 [0xc]: line: 18 call @1837 // <std.io.task#task.builder>   
13 [0xd]:          istore 1000   
15 [0xf]:          movg @68 // @std#time_unit   
16 [0x10]:          movn #1   
18 [0x12]:          pushobj   
19 [0x13]:          call @1802 // <std.io.task#job_builder.recurring>   
20 [0x14]:          istore 3535   
22 [0x16]:          call @1807 // <std.io.task#job_builder.operator=>   
23 [0x17]:          pop   
24 [0x18]: line: 30 call @1837 // <std.io.task#task.builder>   
25 [0x19]:          call @1806 // <std.io.task#job_builder.long_term>   
26 [0x1a]:          istore 3000   
28 [0x1c]:          call @1801 // <std.io.task#job_builder.schedule>   
29 [0x1d]:          istore 250   
31 [0x1f]:          movg @68 // @std#time_unit   
32 [0x20]:          movn #1   
34 [0x22]:          pushobj   
35 [0x23]:          call @1802 // <std.io.task#job_builder.recurring>   
36 [0x24]:          istore 3536   
38 [0x26]:          call @1807 // <std.io.task#job_builder.operator=>   
39 [0x27]:          pop   
40 [0x28]:          ret   


function: main#__srt_global.main[3146] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/main.sharp:12:4: note:  
		def main(args: string[])
		   ^

0 [0x0]: line: 14 new_class @64 // std#string   
1 [0x1]:          dup    
2 [0x2]:          newstr @62 // bin/dragonfly   
3 [0x3]:          call @2935 // <std#string.string>   
4 [0x4]:          call @1943 // <platform#__srt_global.load_library>   
5 [0x5]: line: 15 ldc ebx // 0   
6 [0x6]:          rstore ebx   
7 [0x7]:          movg @71 // @common#constants   
8 [0x8]:          movn #20   
10 [0xa]:          loadval ebx   
11 [0xb]:          movi #0, adx   
13 [0xd]:          rmov adx, ebx   
14 [0xe]: line: 17 invoke_delegate 3056 { static=1, args=0 }   
16 [0x10]: line: 18 call @3145 // <main#__srt_global.setup_conn_tracker>   
17 [0x11]: line: 20 call @1837 // <std.io.task#task.builder>   
18 [0x12]:          call @1806 // <std.io.task#job_builder.long_term>   
19 [0x13]:          istore 3000   
21 [0x15]:          call @1801 // <std.io.task#job_builder.schedule>   
22 [0x16]:          istore 3537   
24 [0x18]:          call @1807 // <std.io.task#job_builder.operator=>   
25 [0x19]:          pop   
26 [0x1a]: line: 28 call @1837 // <std.io.task#task.builder>   
27 [0x1b]:          istore 3000   
29 [0x1d]:          call @1801 // <std.io.task#job_builder.schedule>   
30 [0x1e]:          istore 50   
32 [0x20]:          movg @68 // @std#time_unit   
33 [0x21]:          movn #1   
35 [0x23]:          pushobj   
36 [0x24]:          call @1802 // <std.io.task#job_builder.recurring>   
37 [0x25]:          istore 3538   
39 [0x27]:          call @1807 // <std.io.task#job_builder.operator=>   
40 [0x28]:          pop   
41 [0x29]: line: 38 call @3234 // <ui.support#window.start_ui>   
42 [0x2a]:          ret   


ui.driver#__srt_global.setup[3147] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//driver//dev_interface.sharp:3:11: note:  
		native def setup();
		          ^



ui.driver#__srt_global.clear_display[3148] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//driver//dev_interface.sharp:4:11: note:  
		native def clear_display();
		          ^



ui.driver#__srt_global.display[3149] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//driver//dev_interface.sharp:5:11: note:  
		native def display();
		          ^



ui.driver#__srt_global.dim[3150] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//driver//dev_interface.sharp:6:11: note:  
		native def dim(yes: var);
		          ^



ui.driver#__srt_global.move_cursor[3151] params(2) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//driver//dev_interface.sharp:7:11: note:  
		native def move_cursor(x: var, y: var);
		          ^



ui.driver#__srt_global.draw_word[3152] params(3) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//driver//dev_interface.sharp:8:11: note:  
		native def draw_word(str: _int8[], len: var, text_size: var);
		          ^



ui.driver#__srt_global.draw_img[3153] params(6) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//driver//dev_interface.sharp:9:11: note:  
		native def draw_img(bytes: var[], width: var, height: var, x: var, y: var, skip_count: var);
		          ^



constructor: ui.driver#ssd1306.ssd1306[3154] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//driver//ssd1306.sharp:9:12: note:  
		    ssd1306() {
		           ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 10 istore 25   
3 [0x3]:          ldc ebx // 1   
4 [0x4]:          rstore ebx   
5 [0x5]:          invoke_delegate 3057 { static=1, args=2 }   
7 [0x7]: line: 11 istore 25   
9 [0x9]:          ldc ebx // 1   
10 [0xa]:          rstore ebx   
11 [0xb]:          invoke_delegate 3058 { static=1, args=2 }   
13 [0xd]: line: 12 invoke_delegate 3147 { static=1, args=0 }   
15 [0xf]:          ret   


function: ui.driver#ssd1306.clear[3155] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//driver//ssd1306.sharp:15:8: note:  
		    def clear() {
		       ^

0 [0x0]: line: 16 invoke_delegate 3148 { static=1, args=0 }   
2 [0x2]:          ret   


function: ui.driver#ssd1306.dim_display[3156] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//driver//ssd1306.sharp:19:8: note:  
		    def dim_display(yes: var) {
		       ^

0 [0x0]: line: 20 ipushl #1   
1 [0x1]:          invoke_delegate 3150 { static=1, args=1 }   
3 [0x3]:          ret   


function: ui.driver#ssd1306.update_display[3157] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//driver//ssd1306.sharp:23:8: note:  
		    def update_display() {
		       ^

0 [0x0]: line: 24 invoke_delegate 3149 { static=1, args=0 }   
2 [0x2]:          ret   


function: ui.driver#ssd1306.draw_img[3158] params(7) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//driver//ssd1306.sharp:27:8: note:  
		    def draw_img(x: var, y: var, width: var, height: var, img_width: var, img_height: var, bytes: var[]) {
		       ^

0 [0x0]: line: 28 istorel 0, fp+8   
2 [0x2]: line: 30 ipushl #5   
3 [0x3]:          loadl ebx, fp+6   
4 [0x4]:          loadval ecx   
5 [0x5]:          mul ecx, ebx -> ebx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 7   
8 [0x8]:          sizeof ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          tne ecx, ebx   
11 [0xb]:          jne 32   
12 [0xc]: line: 31 new_class @5 // std#illegal_state_exception   
13 [0xd]:          dup    
14 [0xe]:          new_class @64 // std#string   
15 [0xf]:          dup    
16 [0x10]:          newstr @63 // image has invalid size:    
17 [0x11]:          call @2935 // <std#string.string>   
18 [0x12]:          ipushl #5   
19 [0x13]:          call @2967 // <std#string.operator+>   
20 [0x14]:          newstr @64 //  x    
21 [0x15]:          call @2947 // <std#string.operator+>   
22 [0x16]:          ipushl #6   
23 [0x17]:          call @2967 // <std#string.operator+>   
24 [0x18]:          newstr @65 //  img size is:    
25 [0x19]:          call @2947 // <std#string.operator+>   
26 [0x1a]:          movl 7   
27 [0x1b]:          sizeof ebx   
28 [0x1c]:          rstore ebx   
29 [0x1d]:          call @2967 // <std#string.operator+>   
30 [0x1e]:          call @1633 // <std#illegal_state_exception.illegal_state_exception>   
31 [0x1f]:          throw    
32 [0x20]:          nop   
33 [0x21]: line: 34 ipushl #3   
34 [0x22]:          movi #-2, ebx   
36 [0x24]:          loadval ecx   
37 [0x25]:          test ecx, ebx   
38 [0x26]:          jne 42   
39 [0x27]: line: 35 loadl ebx, fp+5   
40 [0x28]:          smovr_2 ebx, fp+3   
41 [0x29]:          jmp @92   
42 [0x2a]:          ipushl #3   
43 [0x2b]:          movi #-1, ebx   
45 [0x2d]:          loadval ecx   
46 [0x2e]:          test ecx, ebx   
47 [0x2f]:          jne 76   
48 [0x30]: line: 37 ipushl #1   
49 [0x31]:          loadl ebx, fp+5   
50 [0x32]:          loadval ecx   
51 [0x33]:          add ecx, ebx -> ebx   
52 [0x34]:          rstore ebx   
53 [0x35]:          movi #128, ebx   
55 [0x37]:          loadval ecx   
56 [0x38]:          lte ecx, ebx   
57 [0x39]:          movr ebx, cmt   
58 [0x3a]:          movr cmt, ebx   
59 [0x3b]:          jne 63   
60 [0x3c]: line: 38 loadl ebx, fp+5   
61 [0x3d]:          smovr_2 ebx, fp+3   
62 [0x3e]:          jmp @74   
63 [0x3f]: line: 40 istore 128   
65 [0x41]:          loadl ebx, fp+1   
66 [0x42]:          loadval ecx   
67 [0x43]:          sub ecx, ebx -> ebx   
68 [0x44]:          smovr_2 ebx, fp+3   
69 [0x45]: line: 41 ipushl #5   
70 [0x46]:          loadl ebx, fp+1   
71 [0x47]:          loadval ecx   
72 [0x48]:          sub ecx, ebx -> ebx   
73 [0x49]:          smovr_2 ebx, fp+8   
74 [0x4a]:          nop   
75 [0x4b]:          jmp @92   
76 [0x4c]: line: 44 ipushl #5   
77 [0x4d]:          loadl ebx, fp+3   
78 [0x4e]:          loadval ecx   
79 [0x4f]:          lt ecx, ebx   
80 [0x50]:          movr ebx, cmt   
81 [0x51]:          movr cmt, ebx   
82 [0x52]:          jne 86   
83 [0x53]: line: 45 loadl ebx, fp+5   
84 [0x54]:          smovr_2 ebx, fp+3   
85 [0x55]:          jmp @91   
86 [0x56]: line: 47 ipushl #5   
87 [0x57]:          loadl ebx, fp+3   
88 [0x58]:          loadval ecx   
89 [0x59]:          sub ecx, ebx -> ebx   
90 [0x5a]:          smovr_2 ebx, fp+8   
91 [0x5b]:          nop   
92 [0x5c]:          nop   
93 [0x5d]: line: 51 ipushl #4   
94 [0x5e]:          movi #-2, ebx   
96 [0x60]:          loadval ecx   
97 [0x61]:          test ecx, ebx   
98 [0x62]:          jne 102   
99 [0x63]: line: 52 loadl ebx, fp+6   
100 [0x64]:          smovr_2 ebx, fp+4   
101 [0x65]:          jmp @141   
102 [0x66]:          ipushl #4   
103 [0x67]:          movi #-1, ebx   
105 [0x69]:          loadval ecx   
106 [0x6a]:          test ecx, ebx   
107 [0x6b]:          jne 131   
108 [0x6c]: line: 54 ipushl #2   
109 [0x6d]:          loadl ebx, fp+6   
110 [0x6e]:          loadval ecx   
111 [0x6f]:          add ecx, ebx -> ebx   
112 [0x70]:          rstore ebx   
113 [0x71]:          movi #64, ebx   
115 [0x73]:          loadval ecx   
116 [0x74]:          lte ecx, ebx   
117 [0x75]:          movr ebx, cmt   
118 [0x76]:          movr cmt, ebx   
119 [0x77]:          jne 123   
120 [0x78]: line: 55 loadl ebx, fp+6   
121 [0x79]:          smovr_2 ebx, fp+4   
122 [0x7a]:          jmp @129   
123 [0x7b]: line: 57 istore 64   
125 [0x7d]:          loadl ebx, fp+2   
126 [0x7e]:          loadval ecx   
127 [0x7f]:          sub ecx, ebx -> ebx   
128 [0x80]:          smovr_2 ebx, fp+4   
129 [0x81]:          nop   
130 [0x82]:          jmp @141   
131 [0x83]: line: 60 ipushl #6   
132 [0x84]:          loadl ebx, fp+4   
133 [0x85]:          loadval ecx   
134 [0x86]:          lt ecx, ebx   
135 [0x87]:          movr ebx, cmt   
136 [0x88]:          movr cmt, ebx   
137 [0x89]:          jne 140   
138 [0x8a]: line: 61 loadl ebx, fp+6   
139 [0x8b]:          smovr_2 ebx, fp+4   
140 [0x8c]:          nop   
141 [0x8d]:          nop   
142 [0x8e]: line: 64 loadl ecx, fp+8   
143 [0x8f]:          movi #0, ebx   
145 [0x91]:          lt ecx, ebx   
146 [0x92]:          movr ebx, cmt   
147 [0x93]:          movr cmt, ebx   
148 [0x94]:          jne 159   
149 [0x95]: line: 65 new_class @5 // std#illegal_state_exception   
150 [0x96]:          dup    
151 [0x97]:          new_class @64 // std#string   
152 [0x98]:          dup    
153 [0x99]:          newstr @66 // skip count < 0:    
154 [0x9a]:          call @2935 // <std#string.string>   
155 [0x9b]:          ipushl #8   
156 [0x9c]:          call @2967 // <std#string.operator+>   
157 [0x9d]:          call @1633 // <std#illegal_state_exception.illegal_state_exception>   
158 [0x9e]:          throw    
159 [0x9f]:          nop   
160 [0xa0]: line: 68 pushl 7   
161 [0xa1]:          ipushl #3   
162 [0xa2]:          ipushl #4   
163 [0xa3]:          ipushl #1   
164 [0xa4]:          ipushl #2   
165 [0xa5]:          ipushl #8   
166 [0xa6]:          invoke_delegate 3153 { static=1, args=6 }   
168 [0xa8]:          ret   
169 [0xa9]:          ret   


function: ui.driver#ssd1306.draw_word[3159] params(6) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//driver//ssd1306.sharp:71:8: note:  
		    def draw_word(x: var, y: var, text_size: var, width: var, transx : var, text: _int8[]) {
		       ^

0 [0x0]: line: 72 ipushl #1   
1 [0x1]:          ipushl #2   
2 [0x2]:          invoke_delegate 3151 { static=1, args=2 }   
4 [0x4]: line: 74 ipushl #1   
5 [0x5]:          loadl ebx, fp+5   
6 [0x6]:          loadval ecx   
7 [0x7]:          add ecx, ebx -> ebx   
8 [0x8]:          rstore ebx   
9 [0x9]:          movi #128, ebx   
11 [0xb]:          loadval ecx   
12 [0xc]:          gt ecx, ebx   
13 [0xd]:          movr ebx, cmt   
14 [0xe]:          movr cmt, ebx   
15 [0xf]:          jne 73   
16 [0x10]: line: 75 ipushl #1   
17 [0x11]:          loadl ebx, fp+5   
18 [0x12]:          loadval ecx   
19 [0x13]:          add ecx, ebx -> ebx   
20 [0x14]:          rstore ebx   
21 [0x15]:          movi #128, ebx   
23 [0x17]:          loadval ecx   
24 [0x18]:          sub ecx, ebx -> ebx   
25 [0x19]:          smovr_2 ebx, fp+7   
26 [0x1a]: line: 76 ipushl #5   
27 [0x1b]:          loadl ebx, fp+7   
28 [0x1c]:          loadval ecx   
29 [0x1d]:          sub ecx, ebx -> ebx   
30 [0x1e]:          rstore ebx   
31 [0x1f]:          movi #6, ebx   
33 [0x21]:          loadval ecx   
34 [0x22]:          div ecx, ebx -> ebx   
35 [0x23]:          rstore ebx   
36 [0x24]:          movi #1, ebx   
38 [0x26]:          loadval ecx   
39 [0x27]:          sub ecx, ebx -> ebx   
40 [0x28]:          smovr_2 ebx, fp+8   
41 [0x29]: line: 77 ipushl #8   
42 [0x2a]:          movi #0, ebx   
44 [0x2c]:          loadval ecx   
45 [0x2d]:          gt ecx, ebx   
46 [0x2e]:          movr ebx, cmt   
47 [0x2f]:          movr cmt, ebx   
48 [0x30]:          jne 71   
49 [0x31]: line: 78 ipushl #8   
50 [0x32]:          movl 6   
51 [0x33]:          sizeof ebx   
52 [0x34]:          loadval ecx   
53 [0x35]:          gt ecx, ebx   
54 [0x36]:          movr ebx, cmt   
55 [0x37]:          movr cmt, ebx   
56 [0x38]:          jne 65   
57 [0x39]: line: 79 movl 6   
58 [0x3a]:          sizeof ebx   
59 [0x3b]:          rstore ebx   
60 [0x3c]:          movi #1, ebx   
62 [0x3e]:          loadval ecx   
63 [0x3f]:          sub ecx, ebx -> ebx   
64 [0x40]:          smovr_2 ebx, fp+8   
65 [0x41]:          nop   
66 [0x42]: line: 81 pushl 6   
67 [0x43]:          ipushl #8   
68 [0x44]:          ipushl #3   
69 [0x45]:          invoke_delegate 3152 { static=1, args=3 }   
71 [0x47]:          nop   
72 [0x48]:          jmp @149   
73 [0x49]: line: 84 ipushl #4   
74 [0x4a]:          movi #0, ebx   
76 [0x4c]:          loadval ecx   
77 [0x4d]:          gte ecx, ebx   
78 [0x4e]:          movr ebx, cmt   
79 [0x4f]:          movr cmt, ebx   
80 [0x50]:          jne 141   
81 [0x51]: line: 85 ipushl #5   
82 [0x52]:          loadl ebx, fp+4   
83 [0x53]:          loadval ecx   
84 [0x54]:          gt ecx, ebx   
85 [0x55]:          movr ebx, cmt   
86 [0x56]:          movr cmt, ebx   
87 [0x57]:          jne 140   
88 [0x58]: line: 86 ipushl #5   
89 [0x59]:          loadl ebx, fp+4   
90 [0x5a]:          loadval ecx   
91 [0x5b]:          sub ecx, ebx -> ebx   
92 [0x5c]:          smovr_2 ebx, fp+9   
93 [0x5d]: line: 87 ipushl #5   
94 [0x5e]:          loadl ebx, fp+9   
95 [0x5f]:          loadval ecx   
96 [0x60]:          sub ecx, ebx -> ebx   
97 [0x61]:          rstore ebx   
98 [0x62]:          movi #6, ebx   
100 [0x64]:          loadval ecx   
101 [0x65]:          div ecx, ebx -> ebx   
102 [0x66]:          rstore ebx   
103 [0x67]:          movi #1, ebx   
105 [0x69]:          loadval ecx   
106 [0x6a]:          sub ecx, ebx -> ebx   
107 [0x6b]:          smovr_2 ebx, fp+10   
108 [0x6c]: line: 88 ipushl #10   
109 [0x6d]:          movi #0, ebx   
111 [0x6f]:          loadval ecx   
112 [0x70]:          gt ecx, ebx   
113 [0x71]:          movr ebx, cmt   
114 [0x72]:          movr cmt, ebx   
115 [0x73]:          jne 139   
116 [0x74]: line: 89 ipushl #10   
117 [0x75]:          movl 6   
118 [0x76]:          sizeof ebx   
119 [0x77]:          loadval ecx   
120 [0x78]:          gt ecx, ebx   
121 [0x79]:          movr ebx, cmt   
122 [0x7a]:          movr cmt, ebx   
123 [0x7b]:          jne 132   
124 [0x7c]: line: 90 movl 6   
125 [0x7d]:          sizeof ebx   
126 [0x7e]:          rstore ebx   
127 [0x7f]:          movi #1, ebx   
129 [0x81]:          loadval ecx   
130 [0x82]:          sub ecx, ebx -> ebx   
131 [0x83]:          smovr_2 ebx, fp+10   
132 [0x84]:          nop   
133 [0x85]: line: 92 pushl 6   
134 [0x86]:          ipushl #10   
135 [0x87]:          ipushl #3   
136 [0x88]:          invoke_delegate 3152 { static=1, args=3 }   
138 [0x8a]:          ret   
139 [0x8b]:          nop   
140 [0x8c]:          nop   
141 [0x8d]:          nop   
142 [0x8e]: line: 97 pushl 6   
143 [0x8f]:          movl 6   
144 [0x90]:          sizeof ebx   
145 [0x91]:          rstore ebx   
146 [0x92]:          ipushl #3   
147 [0x93]:          invoke_delegate 3152 { static=1, args=3 }   
149 [0x95]:          nop   
150 [0x96]:          ret   


function: ui.driver#ssd1306.shutdown[3160] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//driver//ssd1306.sharp:101:8: note:  
		    def shutdown() {
		       ^

0 [0x0]: line: 102 pushl 0   
1 [0x1]:           call @3155 // <ui.driver#ssd1306.clear>   
2 [0x2]: line: 103 istore 25   
4 [0x4]:           ldc ebx // 0   
5 [0x5]:           rstore ebx   
6 [0x6]:           invoke_delegate 3058 { static=1, args=2 }   
8 [0x8]:           ret   


function: ui.layout.config#__srt_global.configure_layout[3161] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//layout//config//layout_config.sharp:8:4: note:  
		def configure_layout() {
		   ^

0 [0x0]: line: 9 movg @104 // @ui.layout.config#__srt_global   
1 [0x1]:         movn #0   
3 [0x3]:         pushobj   
4 [0x4]:         pushnull    
5 [0x5]:         itest ebx   
6 [0x6]:         movr cmt, ebx   
7 [0x7]:         jne 16   
8 [0x8]: line: 10 new_class @128 // ui.support#window   
9 [0x9]:          dup    
10 [0xa]:          newstr @67 // main-container   
11 [0xb]:          call @3233 // <ui.support#window.window>   
12 [0xc]:          movg @104 // @ui.layout.config#__srt_global   
13 [0xd]:          movn #0   
15 [0xf]:          popobj   
16 [0x10]:          nop   
17 [0x11]: line: 14 movg @104 // @ui.layout.config#__srt_global   
18 [0x12]:          movn #0   
20 [0x14]:          pushobj   
21 [0x15]:          new_class @106 // ui.layout#home_screen   
22 [0x16]:          dup    
23 [0x17]:          movg @104 // @ui.layout.config#__srt_global   
24 [0x18]:          movn #0   
26 [0x1a]:          pushobj   
27 [0x1b]:          ldc ebx // 0   
28 [0x1c]:          rstore ebx   
29 [0x1d]:          call @3163 // <ui.layout#home_screen.home_screen>   
30 [0x1e]:          call @3240 // <ui.support#window.add_fragment>   
31 [0x1f]: line: 17 movg @104 // @ui.layout.config#__srt_global   
32 [0x20]:          movn #0   
34 [0x22]:          pushobj   
35 [0x23]:          ldc ebx // 0   
36 [0x24]:          rstore ebx   
37 [0x25]:          call @3236 // <ui.support#window.starter_fragment>   
38 [0x26]:          ret   


function: ui.layout.config#__srt_global.start[3162] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//layout//config//layout_config.sharp:20:4: note:  
		def start() {
		   ^

0 [0x0]: line: 21 movg @104 // @ui.layout.config#__srt_global   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          call @3239 // <ui.support#window.show>   
5 [0x5]:          ret   


constructor: ui.layout#home_screen.home_screen[3163] params(2) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//layout//home_screen.sharp:14:16: note:  
		    home_screen(container : window, id: var) -> base(container, id) { }
		               ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         ipushl #2   
3 [0x3]:         call @3183 // <ui.support#fragment.fragment>   
4 [0x4]:         ret   


function: ui.layout#home_screen.configure[3164] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//layout//home_screen.sharp:20:8: note:  
		    def configure() {
		       ^

0 [0x0]: line: 21 pushl 0   
1 [0x1]:          new_class @123 // ui.support#image_view   
2 [0x2]:          dup    
3 [0x3]:          istore 3   
5 [0x5]:          call @3193 // <ui.support#image_view.image_view>   
6 [0x6]:          istore 10   
8 [0x8]:          call @3196 // <ui.support#image_view.set_drawable>   
9 [0x9]:          istore 4294967294   
11 [0xb]:          call @3213 // <ui.support#view.set_width>   
12 [0xc]:          istore 4294967294   
14 [0xe]:          call @3219 // <ui.support#view.set_height>   
15 [0xf]:          ldc ebx // 1   
16 [0x10]:          rstore ebx   
17 [0x11]:          call @3222 // <ui.support#view.to_start_of>   
18 [0x12]:          ldc ebx // 1   
19 [0x13]:          rstore ebx   
20 [0x14]:          call @3223 // <ui.support#view.to_right_of>   
21 [0x15]:          istore 4   
23 [0x17]:          call @3230 // <ui.support#view.set_margin_right>   
24 [0x18]:          istore 2   
26 [0x1a]:          call @3231 // <ui.support#view.set_margin_top>   
27 [0x1b]:          call @3184 // <ui.support#fragment.add_view>   
28 [0x1c]: line: 30 pushl 0   
29 [0x1d]:          new_class @123 // ui.support#image_view   
30 [0x1e]:          dup    
31 [0x1f]:          istore 4   
33 [0x21]:          call @3193 // <ui.support#image_view.image_view>   
34 [0x22]:          istore 4294967294   
36 [0x24]:          call @3213 // <ui.support#view.set_width>   
37 [0x25]:          istore 4294967294   
39 [0x27]:          call @3219 // <ui.support#view.set_height>   
40 [0x28]:          istore 3   
42 [0x2a]:          call @3221 // <ui.support#view.to_left_of>   
43 [0x2b]:          ldc ebx // 1   
44 [0x2c]:          rstore ebx   
45 [0x2d]:          call @3224 // <ui.support#view.to_top_of>   
46 [0x2e]:          istore 4   
48 [0x30]:          call @3230 // <ui.support#view.set_margin_right>   
49 [0x31]:          istore 1   
51 [0x33]:          call @3231 // <ui.support#view.set_margin_top>   
52 [0x34]:          call @3184 // <ui.support#fragment.add_view>   
53 [0x35]: line: 38 pushl 0   
54 [0x36]:          new_class @126 // ui.support#text_view   
55 [0x37]:          dup    
56 [0x38]:          istore 2   
58 [0x3a]:          call @3204 // <ui.support#text_view.text_view>   
59 [0x3b]:          istore 4294967295   
61 [0x3d]:          call @3213 // <ui.support#view.set_width>   
62 [0x3e]:          istore 4294967294   
64 [0x40]:          call @3219 // <ui.support#view.set_height>   
65 [0x41]:          ldc ebx // 1   
66 [0x42]:          rstore ebx   
67 [0x43]:          call @3222 // <ui.support#view.to_start_of>   
68 [0x44]:          istore 2   
70 [0x46]:          call @3226 // <ui.support#view.set_gravity>   
71 [0x47]:          istore 5   
73 [0x49]:          call @3231 // <ui.support#view.set_margin_top>   
74 [0x4a]:          call @3184 // <ui.support#fragment.add_view>   
75 [0x4b]: line: 45 pushl 0   
76 [0x4c]:          new_class @123 // ui.support#image_view   
77 [0x4d]:          dup    
78 [0x4e]:          istore 12   
80 [0x50]:          call @3193 // <ui.support#image_view.image_view>   
81 [0x51]:          istore 17   
83 [0x53]:          call @3196 // <ui.support#image_view.set_drawable>   
84 [0x54]:          istore 4294967294   
86 [0x56]:          call @3213 // <ui.support#view.set_width>   
87 [0x57]:          istore 4294967294   
89 [0x59]:          call @3219 // <ui.support#view.set_height>   
90 [0x5a]:          ldc ebx // 1   
91 [0x5b]:          rstore ebx   
92 [0x5c]:          call @3222 // <ui.support#view.to_start_of>   
93 [0x5d]:          istore 2   
95 [0x5f]:          call @3231 // <ui.support#view.set_margin_top>   
96 [0x60]:          istore 4   
98 [0x62]:          call @3229 // <ui.support#view.set_margin_left>   
99 [0x63]:          call @3184 // <ui.support#fragment.add_view>   
100 [0x64]: line: 53 pushl 0   
101 [0x65]:          new_class @126 // ui.support#text_view   
102 [0x66]:          dup    
103 [0x67]:          istore 18   
105 [0x69]:          call @3204 // <ui.support#text_view.text_view>   
106 [0x6a]:          istore 30   
108 [0x6c]:          call @3213 // <ui.support#view.set_width>   
109 [0x6d]:          istore 4294967294   
111 [0x6f]:          call @3219 // <ui.support#view.set_height>   
112 [0x70]:          istore 2   
114 [0x72]:          call @3226 // <ui.support#view.set_gravity>   
115 [0x73]:          istore 12   
117 [0x75]:          call @3222 // <ui.support#view.to_start_of>   
118 [0x76]:          istore 12   
120 [0x78]:          call @3228 // <ui.support#view.below>   
121 [0x79]:          istore 20   
123 [0x7b]:          call @3231 // <ui.support#view.set_margin_top>   
124 [0x7c]:          call @3184 // <ui.support#fragment.add_view>   
125 [0x7d]: line: 61 pushl 0   
126 [0x7e]:          new_class @126 // ui.support#text_view   
127 [0x7f]:          dup    
128 [0x80]:          istore 19   
130 [0x82]:          call @3204 // <ui.support#text_view.text_view>   
131 [0x83]:          istore 30   
133 [0x85]:          call @3213 // <ui.support#view.set_width>   
134 [0x86]:          istore 4294967294   
136 [0x88]:          call @3219 // <ui.support#view.set_height>   
137 [0x89]:          istore 2   
139 [0x8b]:          call @3226 // <ui.support#view.set_gravity>   
140 [0x8c]:          istore 12   
142 [0x8e]:          call @3222 // <ui.support#view.to_start_of>   
143 [0x8f]:          istore 18   
145 [0x91]:          call @3228 // <ui.support#view.below>   
146 [0x92]:          istore 2   
148 [0x94]:          call @3231 // <ui.support#view.set_margin_top>   
149 [0x95]:          call @3184 // <ui.support#fragment.add_view>   
150 [0x96]: line: 69 pushl 0   
151 [0x97]:          new_class @126 // ui.support#text_view   
152 [0x98]:          dup    
153 [0x99]:          istore 20   
155 [0x9b]:          call @3204 // <ui.support#text_view.text_view>   
156 [0x9c]:          istore 55   
158 [0x9e]:          call @3213 // <ui.support#view.set_width>   
159 [0x9f]:          istore 4294967294   
161 [0xa1]:          call @3219 // <ui.support#view.set_height>   
162 [0xa2]:          ldc ebx // 1   
163 [0xa3]:          rstore ebx   
164 [0xa4]:          call @3226 // <ui.support#view.set_gravity>   
165 [0xa5]:          ldc ebx // 1   
166 [0xa6]:          rstore ebx   
167 [0xa7]:          call @3222 // <ui.support#view.to_start_of>   
168 [0xa8]:          istore 12   
170 [0xaa]:          call @3228 // <ui.support#view.below>   
171 [0xab]:          istore 18   
173 [0xad]:          call @3231 // <ui.support#view.set_margin_top>   
174 [0xae]:          istore 40   
176 [0xb0]:          call @3229 // <ui.support#view.set_margin_left>   
177 [0xb1]:          call @3184 // <ui.support#fragment.add_view>   
178 [0xb2]: line: 78 pushl 0   
179 [0xb3]:          new_class @126 // ui.support#text_view   
180 [0xb4]:          dup    
181 [0xb5]:          istore 21   
183 [0xb7]:          call @3204 // <ui.support#text_view.text_view>   
184 [0xb8]:          istore 4294967294   
186 [0xba]:          call @3213 // <ui.support#view.set_width>   
187 [0xbb]:          istore 4294967294   
189 [0xbd]:          call @3219 // <ui.support#view.set_height>   
190 [0xbe]:          istore 20   
192 [0xc0]:          call @3223 // <ui.support#view.to_right_of>   
193 [0xc1]:          istore 20   
195 [0xc3]:          call @3225 // <ui.support#view.to_bottom_of>   
196 [0xc4]:          istore 2   
198 [0xc6]:          call @3229 // <ui.support#view.set_margin_left>   
199 [0xc7]:          call @3184 // <ui.support#fragment.add_view>   
200 [0xc8]:          ret   


function: ui.layout#home_screen.on_create[3165] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//layout//home_screen.sharp:87:8: note:  
		    def on_create() {
		       ^

0 [0x0]: line: 88 pushl 0   
1 [0x1]:          call @3186 // <ui.support#fragment.on_create>   
2 [0x2]: line: 90 pushl 0   
3 [0x3]:          istore 2   
5 [0x5]:          call @3185 // <ui.support#fragment.find_view_by_id>   
6 [0x6]:          popobj2    
7 [0x7]:          movi #126, cmt   
9 [0x9]:          cast cmt   
10 [0xa]:          smovr_3 fp+1   
11 [0xb]: line: 91 pushl 0   
12 [0xc]:          istore 20   
14 [0xe]:          call @3185 // <ui.support#fragment.find_view_by_id>   
15 [0xf]:          popobj2    
16 [0x10]:          movi #126, cmt   
18 [0x12]:          cast cmt   
19 [0x13]:          smovr_3 fp+2   
20 [0x14]: line: 92 pushl 0   
21 [0x15]:          istore 21   
23 [0x17]:          call @3185 // <ui.support#fragment.find_view_by_id>   
24 [0x18]:          popobj2    
25 [0x19]:          movi #126, cmt   
27 [0x1b]:          cast cmt   
28 [0x1c]:          smovr_3 fp+3   
29 [0x1d]: line: 93 pushl 0   
30 [0x1e]:          istore 18   
32 [0x20]:          call @3185 // <ui.support#fragment.find_view_by_id>   
33 [0x21]:          popobj2    
34 [0x22]:          movi #126, cmt   
36 [0x24]:          cast cmt   
37 [0x25]:          smovr_3 fp+4   
38 [0x26]: line: 94 pushl 0   
39 [0x27]:          istore 19   
41 [0x29]:          call @3185 // <ui.support#fragment.find_view_by_id>   
42 [0x2a]:          popobj2    
43 [0x2b]:          movi #126, cmt   
45 [0x2d]:          cast cmt   
46 [0x2e]:          smovr_3 fp+5   
47 [0x2f]: line: 95 pushl 0   
48 [0x30]:          istore 4   
50 [0x32]:          call @3185 // <ui.support#fragment.find_view_by_id>   
51 [0x33]:          popobj2    
52 [0x34]:          movi #123, cmt   
54 [0x36]:          cast cmt   
55 [0x37]:          smovr_3 fp+6   
56 [0x38]: line: 96 pushl 0   
57 [0x39]:          istore 12   
59 [0x3b]:          call @3185 // <ui.support#fragment.find_view_by_id>   
60 [0x3c]:          popobj2    
61 [0x3d]:          movi #123, cmt   
63 [0x3f]:          cast cmt   
64 [0x40]:          smovr_3 fp+7   
65 [0x41]: line: 98 pushl 4   
66 [0x42]:          new_class @64 // std#string   
67 [0x43]:          dup    
68 [0x44]:          newstr @68 // ALT   
69 [0x45]:          call @2935 // <std#string.string>   
70 [0x46]:          call @3471 // <ui.support#text_view.set_text>   
71 [0x47]: line: 99 pushl 5   
72 [0x48]:          new_class @64 // std#string   
73 [0x49]:          dup    
74 [0x4a]:          newstr @69 // 999M   
75 [0x4b]:          call @2935 // <std#string.string>   
76 [0x4c]:          call @3471 // <ui.support#text_view.set_text>   
77 [0x4d]: line: 100 pushl 2   
78 [0x4e]:           new_class @64 // std#string   
79 [0x4f]:           dup    
80 [0x50]:           newstr @70 // 9   
81 [0x51]:           call @2935 // <std#string.string>   
82 [0x52]:           call @3471 // <ui.support#text_view.set_text>   
83 [0x53]: line: 101 pushl 3   
84 [0x54]:           new_class @64 // std#string   
85 [0x55]:           dup    
86 [0x56]:           newstr @71 // Kph   
87 [0x57]:           call @2935 // <std#string.string>   
88 [0x58]:           call @3471 // <ui.support#text_view.set_text>   
89 [0x59]: line: 102 pushl 2   
90 [0x5a]:           istore 3   
92 [0x5c]:           call @3472 // <ui.support#text_view.set_text_size>   
93 [0x5d]: line: 104 call @1837 // <std.io.task#task.builder>   
94 [0x5e]:           movg @106 // @ui.layout#home_screen   
95 [0x5f]:           movn #2   
97 [0x61]:           pushobj   
98 [0x62]:           call @1803 // <std.io.task#job_builder.with_name>   
99 [0x63]:           istore 250   
101 [0x65]:           movg @68 // @std#time_unit   
102 [0x66]:           movn #1   
104 [0x68]:           pushobj   
105 [0x69]:           call @1802 // <std.io.task#job_builder.recurring>   
106 [0x6a]:           movi #3, ebx   
108 [0x6c]:           newobj_arry ebx   
109 [0x6d]:           pushl 2   
110 [0x6e]:           movsl #-1   
111 [0x6f]:           movn #0   
113 [0x71]:           popobj   
114 [0x72]:           pushl 5   
115 [0x73]:           movsl #-1   
116 [0x74]:           movn #1   
118 [0x76]:           popobj   
119 [0x77]:           pushl 7   
120 [0x78]:           movsl #-1   
121 [0x79]:           movn #2   
123 [0x7b]:           popobj   
124 [0x7c]:           call @1804 // <std.io.task#job_builder.with_args>   
125 [0x7d]:           istore 3539   
127 [0x7f]:           call @1808 // <std.io.task#job_builder.operator=>   
128 [0x80]:           pop   
129 [0x81]: line: 144 call @1837 // <std.io.task#task.builder>   
130 [0x82]:           movg @106 // @ui.layout#home_screen   
131 [0x83]:           movn #0   
133 [0x85]:           pushobj   
134 [0x86]:           call @1803 // <std.io.task#job_builder.with_name>   
135 [0x87]:           istore 1000   
137 [0x89]:           movg @68 // @std#time_unit   
138 [0x8a]:           movn #1   
140 [0x8c]:           pushobj   
141 [0x8d]:           call @1802 // <std.io.task#job_builder.recurring>   
142 [0x8e]:           movi #1, ebx   
144 [0x90]:           newobj_arry ebx   
145 [0x91]:           pushl 6   
146 [0x92]:           movsl #-1   
147 [0x93]:           movn #0   
149 [0x95]:           popobj   
150 [0x96]:           call @1804 // <std.io.task#job_builder.with_args>   
151 [0x97]:           istore 3540   
153 [0x99]:           call @1808 // <std.io.task#job_builder.operator=>   
154 [0x9a]:           pop   
155 [0x9b]: line: 173 call @1837 // <std.io.task#task.builder>   
156 [0x9c]:           movg @106 // @ui.layout#home_screen   
157 [0x9d]:           movn #1   
159 [0x9f]:           pushobj   
160 [0xa0]:           call @1803 // <std.io.task#job_builder.with_name>   
161 [0xa1]:           istore 1000   
163 [0xa3]:           movg @68 // @std#time_unit   
164 [0xa4]:           movn #1   
166 [0xa6]:           pushobj   
167 [0xa7]:           call @1802 // <std.io.task#job_builder.recurring>   
168 [0xa8]:           movi #1, ebx   
170 [0xaa]:           newobj_arry ebx   
171 [0xab]:           pushl 1   
172 [0xac]:           movsl #-1   
173 [0xad]:           movn #0   
175 [0xaf]:           popobj   
176 [0xb0]:           call @1804 // <std.io.task#job_builder.with_args>   
177 [0xb1]:           istore 3541   
179 [0xb3]:           call @1808 // <std.io.task#job_builder.operator=>   
180 [0xb4]:           pop   
181 [0xb5]:           ret   


function: ui.layout#home_screen.on_destroy[3166] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//layout//home_screen.sharp:202:8: note:  
		    def on_destroy() {
		       ^

0 [0x0]: line: 203 movg @106 // @ui.layout#home_screen   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           call @1838 // <std.io.task#task.cancel_all_jobs_by_name>   
5 [0x5]: line: 204 movg @106 // @ui.layout#home_screen   
6 [0x6]:           movn #1   
8 [0x8]:           pushobj   
9 [0x9]:           call @1838 // <std.io.task#task.cancel_all_jobs_by_name>   
10 [0xa]: line: 205 movg @106 // @ui.layout#home_screen   
11 [0xb]:           movn #2   
13 [0xd]:           pushobj   
14 [0xe]:           call @1838 // <std.io.task#task.cancel_all_jobs_by_name>   
15 [0xf]: line: 206 pushl 0   
16 [0x10]:           call @3188 // <ui.support#fragment.on_destroy>   
17 [0x11]:           ret   


constructor: ui.layout#home_screen.home_screen[3167] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//layout//home_screen.sharp:12:6: note:  
		class home_screen base fragment {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @3192 // <ui.support#fragment.fragment>   
2 [0x2]:         ret   


function: ui.res#resources.setup[3168] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//res//resource.sharp:18:12: note:  
			static def setup() {
		           ^

0 [0x0]: line: 19 call @3433 // <ui.res#resources.get_res>   
1 [0x1]:          popobj2    
2 [0x2]:          movn #0   
4 [0x4]:          pushobj   
5 [0x5]:          new_class @47 // std#int   
6 [0x6]:          dup    
7 [0x7]:          istore 5   
9 [0x9]:          call @2265 // <std#int.int>   
10 [0xa]:          movg @108 // @ui.res.drawable#__srt_global   
11 [0xb]:          movn #13   
13 [0xd]:          pushobj   
14 [0xe]:          call @3440 // <std#hashmap<std#int,ui.support#drawable>.put>   
15 [0xf]:          pop   
16 [0x10]: line: 20 call @3433 // <ui.res#resources.get_res>   
17 [0x11]:          popobj2    
18 [0x12]:          movn #0   
20 [0x14]:          pushobj   
21 [0x15]:          new_class @47 // std#int   
22 [0x16]:          dup    
23 [0x17]:          istore 6   
25 [0x19]:          call @2265 // <std#int.int>   
26 [0x1a]:          movg @108 // @ui.res.drawable#__srt_global   
27 [0x1b]:          movn #15   
29 [0x1d]:          pushobj   
30 [0x1e]:          call @3440 // <std#hashmap<std#int,ui.support#drawable>.put>   
31 [0x1f]:          pop   
32 [0x20]: line: 21 call @3433 // <ui.res#resources.get_res>   
33 [0x21]:          popobj2    
34 [0x22]:          movn #0   
36 [0x24]:          pushobj   
37 [0x25]:          new_class @47 // std#int   
38 [0x26]:          dup    
39 [0x27]:          istore 7   
41 [0x29]:          call @2265 // <std#int.int>   
42 [0x2a]:          movg @108 // @ui.res.drawable#__srt_global   
43 [0x2b]:          movn #17   
45 [0x2d]:          pushobj   
46 [0x2e]:          call @3440 // <std#hashmap<std#int,ui.support#drawable>.put>   
47 [0x2f]:          pop   
48 [0x30]: line: 22 call @3433 // <ui.res#resources.get_res>   
49 [0x31]:          popobj2    
50 [0x32]:          movn #0   
52 [0x34]:          pushobj   
53 [0x35]:          new_class @47 // std#int   
54 [0x36]:          dup    
55 [0x37]:          istore 8   
57 [0x39]:          call @2265 // <std#int.int>   
58 [0x3a]:          movg @108 // @ui.res.drawable#__srt_global   
59 [0x3b]:          movn #19   
61 [0x3d]:          pushobj   
62 [0x3e]:          call @3440 // <std#hashmap<std#int,ui.support#drawable>.put>   
63 [0x3f]:          pop   
64 [0x40]: line: 23 call @3433 // <ui.res#resources.get_res>   
65 [0x41]:          popobj2    
66 [0x42]:          movn #0   
68 [0x44]:          pushobj   
69 [0x45]:          new_class @47 // std#int   
70 [0x46]:          dup    
71 [0x47]:          istore 9   
73 [0x49]:          call @2265 // <std#int.int>   
74 [0x4a]:          movg @108 // @ui.res.drawable#__srt_global   
75 [0x4b]:          movn #21   
77 [0x4d]:          pushobj   
78 [0x4e]:          call @3440 // <std#hashmap<std#int,ui.support#drawable>.put>   
79 [0x4f]:          pop   
80 [0x50]: line: 24 call @3433 // <ui.res#resources.get_res>   
81 [0x51]:          popobj2    
82 [0x52]:          movn #0   
84 [0x54]:          pushobj   
85 [0x55]:          new_class @47 // std#int   
86 [0x56]:          dup    
87 [0x57]:          istore 10   
89 [0x59]:          call @2265 // <std#int.int>   
90 [0x5a]:          movg @108 // @ui.res.drawable#__srt_global   
91 [0x5b]:          movn #11   
93 [0x5d]:          pushobj   
94 [0x5e]:          call @3440 // <std#hashmap<std#int,ui.support#drawable>.put>   
95 [0x5f]:          pop   
96 [0x60]: line: 25 call @3433 // <ui.res#resources.get_res>   
97 [0x61]:          popobj2    
98 [0x62]:          movn #0   
100 [0x64]:          pushobj   
101 [0x65]:          new_class @47 // std#int   
102 [0x66]:          dup    
103 [0x67]:          istore 11   
105 [0x69]:          call @2265 // <std#int.int>   
106 [0x6a]:          movg @108 // @ui.res.drawable#__srt_global   
107 [0x6b]:          movn #23   
109 [0x6d]:          pushobj   
110 [0x6e]:          call @3440 // <std#hashmap<std#int,ui.support#drawable>.put>   
111 [0x6f]:          pop   
112 [0x70]: line: 26 call @3433 // <ui.res#resources.get_res>   
113 [0x71]:          popobj2    
114 [0x72]:          movn #0   
116 [0x74]:          pushobj   
117 [0x75]:          new_class @47 // std#int   
118 [0x76]:          dup    
119 [0x77]:          istore 13   
121 [0x79]:          call @2265 // <std#int.int>   
122 [0x7a]:          movg @108 // @ui.res.drawable#__srt_global   
123 [0x7b]:          movn #1   
125 [0x7d]:          pushobj   
126 [0x7e]:          call @3440 // <std#hashmap<std#int,ui.support#drawable>.put>   
127 [0x7f]:          pop   
128 [0x80]: line: 27 call @3433 // <ui.res#resources.get_res>   
129 [0x81]:          popobj2    
130 [0x82]:          movn #0   
132 [0x84]:          pushobj   
133 [0x85]:          new_class @47 // std#int   
134 [0x86]:          dup    
135 [0x87]:          istore 14   
137 [0x89]:          call @2265 // <std#int.int>   
138 [0x8a]:          movg @108 // @ui.res.drawable#__srt_global   
139 [0x8b]:          movn #3   
141 [0x8d]:          pushobj   
142 [0x8e]:          call @3440 // <std#hashmap<std#int,ui.support#drawable>.put>   
143 [0x8f]:          pop   
144 [0x90]: line: 28 call @3433 // <ui.res#resources.get_res>   
145 [0x91]:          popobj2    
146 [0x92]:          movn #0   
148 [0x94]:          pushobj   
149 [0x95]:          new_class @47 // std#int   
150 [0x96]:          dup    
151 [0x97]:          istore 15   
153 [0x99]:          call @2265 // <std#int.int>   
154 [0x9a]:          movg @108 // @ui.res.drawable#__srt_global   
155 [0x9b]:          movn #5   
157 [0x9d]:          pushobj   
158 [0x9e]:          call @3440 // <std#hashmap<std#int,ui.support#drawable>.put>   
159 [0x9f]:          pop   
160 [0xa0]: line: 29 call @3433 // <ui.res#resources.get_res>   
161 [0xa1]:          popobj2    
162 [0xa2]:          movn #0   
164 [0xa4]:          pushobj   
165 [0xa5]:          new_class @47 // std#int   
166 [0xa6]:          dup    
167 [0xa7]:          istore 16   
169 [0xa9]:          call @2265 // <std#int.int>   
170 [0xaa]:          movg @108 // @ui.res.drawable#__srt_global   
171 [0xab]:          movn #7   
173 [0xad]:          pushobj   
174 [0xae]:          call @3440 // <std#hashmap<std#int,ui.support#drawable>.put>   
175 [0xaf]:          pop   
176 [0xb0]: line: 30 call @3433 // <ui.res#resources.get_res>   
177 [0xb1]:          popobj2    
178 [0xb2]:          movn #0   
180 [0xb4]:          pushobj   
181 [0xb5]:          new_class @47 // std#int   
182 [0xb6]:          dup    
183 [0xb7]:          istore 17   
185 [0xb9]:          call @2265 // <std#int.int>   
186 [0xba]:          movg @108 // @ui.res.drawable#__srt_global   
187 [0xbb]:          movn #9   
189 [0xbd]:          pushobj   
190 [0xbe]:          call @3440 // <std#hashmap<std#int,ui.support#drawable>.put>   
191 [0xbf]:          pop   
192 [0xc0]:          ret   


function: ui.res#resources.get_drawable[3169] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//res//resource.sharp:33:12: note:  
			static def get_drawable(res_id: var) : drawable {
		           ^

0 [0x0]: line: 34 call @3433 // <ui.res#resources.get_res>   
1 [0x1]:          popobj2    
2 [0x2]:          movn #0   
4 [0x4]:          pushobj   
5 [0x5]:          new_class @47 // std#int   
6 [0x6]:          dup    
7 [0x7]:          ipushl #0   
8 [0x8]:          call @2265 // <std#int.int>   
9 [0x9]:          call @3439 // <std#hashmap<std#int,ui.support#drawable>.at>   
10 [0xa]:          popobj2    
11 [0xb]:          returnobj   
12 [0xc]:          ret   


constructor: ui.res#resources.resources[3170] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//res//resource.sharp:6:6: note:  
		class resources {
		     ^

0 [0x0]:         new_class @151 // std#hashmap<std#int,ui.support#drawable>   
1 [0x1]:         dup    
2 [0x2]:         call @3435 // <std#hashmap<std#int,ui.support#drawable>.hashmap>   
3 [0x3]:         movl 0   
4 [0x4]:         movn #0   
6 [0x6]:         popobj   
7 [0x7]:         ret   


constructor: ui.support#constants.view.view[3171] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//constants.sharp:5:10: note:  
		    class view {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: ui.support#constants.window.window[3172] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//constants.sharp:15:10: note:  
		    class window {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: ui.support#constants.lifecycle.lifecycle[3173] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//constants.sharp:21:10: note:  
		    class lifecycle {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: ui.support#constants.time.time[3174] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//constants.sharp:26:10: note:  
		    class time {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: ui.support#constants.layout.layout[3175] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//constants.sharp:31:10: note:  
		    class layout {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: ui.support#constants.margins.margins[3176] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//constants.sharp:35:10: note:  
		    class margins {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: ui.support#constants.resource.id.id[3177] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//constants.sharp:41:15: note:  
		         class id {
		              ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: ui.support#constants.resource.resource[3178] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//constants.sharp:39:10: note:  
		    class resource {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: ui.support#constants.standard.standard[3179] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//constants.sharp:68:10: note:  
		    class standard {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: ui.support#constants.constants[3180] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//constants.sharp:3:6: note:  
		class constants {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: ui.support#drawable.drawable[3181] params(4) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//drawable.sharp:5:10: note:  
			drawable(id : var, bytes: var[], w: var, h: var) {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 6 ipushl #1   
2 [0x2]:         movl 0   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         movi #0, adx   
8 [0x8]:         rmov adx, ebx   
9 [0x9]: line: 7 pushl 2   
10 [0xa]:         movl 0   
11 [0xb]:         movn #1   
13 [0xd]:         popobj   
14 [0xe]: line: 8 ipushl #3   
15 [0xf]:         movl 0   
16 [0x10]:         movn #2   
18 [0x12]:         loadval ebx   
19 [0x13]:         movi #0, adx   
21 [0x15]:         rmov adx, ebx   
22 [0x16]: line: 9 ipushl #4   
23 [0x17]:         movl 0   
24 [0x18]:         movn #3   
26 [0x1a]:         loadval ebx   
27 [0x1b]:         movi #0, adx   
29 [0x1d]:         rmov adx, ebx   
30 [0x1e]:         ret   


constructor: ui.support#drawable.drawable[3182] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//drawable.sharp:3:6: note:  
		class drawable {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: ui.support#fragment.fragment[3183] params(2) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//fragment.sharp:9:13: note:  
		    fragment(container : window, id: var) {
		            ^

0 [0x0]:         new_class @152 // std#list<ui.support#view>   
1 [0x1]:         dup    
2 [0x2]:         call @3444 // <std#list<ui.support#view>.list>   
3 [0x3]:         movl 0   
4 [0x4]:         movn #0   
6 [0x6]:         popobj   
7 [0x7]:         pushl 0   
8 [0x8]: line: 10 pushl 1   
9 [0x9]:          movl 0   
10 [0xa]:          movn #1   
12 [0xc]:          popobj   
13 [0xd]: line: 11 ipushl #2   
14 [0xe]:          movl 0   
15 [0xf]:          movn #2   
17 [0x11]:          loadval ebx   
18 [0x12]:          movi #0, adx   
20 [0x14]:          rmov adx, ebx   
21 [0x15]:          ret   


function: ui.support#fragment.add_view[3184] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//fragment.sharp:14:8: note:  
		    def add_view(v : view) {
		       ^

0 [0x0]: line: 15 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          pushobj   
4 [0x4]:          movl 1   
5 [0x5]:          movn #16   
7 [0x7]:          popobj   
8 [0x8]: line: 16 pushl 0   
9 [0x9]:          movl 1   
10 [0xa]:          movn #17   
12 [0xc]:          popobj   
13 [0xd]: line: 17 movl 0   
14 [0xe]:          movn #0   
16 [0x10]:          pushobj   
17 [0x11]:          pushl 1   
18 [0x12]:          call @3458 // <std#list<ui.support#view>.add>   
19 [0x13]:          ret   


function: ui.support#fragment.find_view_by_id[3185] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//fragment.sharp:20:8: note:  
		    def find_view_by_id(id: var) : view {
		       ^

0 [0x0]: line: 21 istorel 0, fp+2   
2 [0x2]:          ipushl #2   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          pushobj   
7 [0x7]:          call @3461 // <std#list<ui.support#view>.size>   
8 [0x8]:          loadval ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          lt ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 44   
14 [0xe]: line: 23 movl 0   
15 [0xf]:          movn #0   
17 [0x11]:          pushobj   
18 [0x12]:          ipushl #2   
19 [0x13]:          call @3451 // <std#list<ui.support#view>.at>   
20 [0x14]:          popobj2    
21 [0x15]:          movn #6   
23 [0x17]:          movi #0, adx   
25 [0x19]:          iaload ebx, adx   
26 [0x1a]:          rstore ebx   
27 [0x1b]:          loadl ebx, fp+1   
28 [0x1c]:          loadval ecx   
29 [0x1d]:          test ecx, ebx   
30 [0x1e]:          jne 40   
31 [0x1f]: line: 24 movl 0   
32 [0x20]:          movn #0   
34 [0x22]:          pushobj   
35 [0x23]:          ipushl #2   
36 [0x24]:          call @3451 // <std#list<ui.support#view>.at>   
37 [0x25]:          popobj2    
38 [0x26]:          returnobj   
39 [0x27]:          ret   
40 [0x28]:          nop   
41 [0x29]:          iaddl 1, fp@2   
43 [0x2b]:          jmp @2   
44 [0x2c]: line: 27 pushnull    
45 [0x2d]:          popobj2    
46 [0x2e]:          returnobj   
47 [0x2f]:          ret   


function: ui.support#fragment.on_create[3186] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//fragment.sharp:30:8: note:  
		    def on_create() {
		       ^

0 [0x0]: line: 31 ldc ebx // 1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #3   
4 [0x4]:          movi #0, adx   
6 [0x6]:          rmov adx, ebx   
7 [0x7]: line: 32 istorel 0, fp+1   
9 [0x9]:          ipushl #1   
10 [0xa]:          movl 0   
11 [0xb]:          movn #0   
13 [0xd]:          pushobj   
14 [0xe]:          call @3461 // <std#list<ui.support#view>.size>   
15 [0xf]:          loadval ebx   
16 [0x10]:          loadval ecx   
17 [0x11]:          lt ecx, ebx   
18 [0x12]:          movr ebx, cmt   
19 [0x13]:          movr cmt, ebx   
20 [0x14]:          jne 34   
21 [0x15]: line: 33 movl 0   
22 [0x16]:          movn #0   
24 [0x18]:          pushobj   
25 [0x19]:          ipushl #1   
26 [0x1a]:          call @3451 // <std#list<ui.support#view>.at>   
27 [0x1b]:          popobj2    
28 [0x1c]:          smovr_3 fp+2   
29 [0x1d]: line: 34 pushl 2   
30 [0x1e]:          call @3217 // <ui.support#view.invalidate>   
31 [0x1f]:          iaddl 1, fp@1   
33 [0x21]:          jmp @9   
34 [0x22]:          ret   


function: ui.support#fragment.invalidate_refrences[3187] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//fragment.sharp:38:8: note:  
		    def invalidate_refrences(id : var) {
		       ^

0 [0x0]: line: 39 istorel 0, fp+2   
2 [0x2]:          ipushl #2   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          pushobj   
7 [0x7]:          call @3461 // <std#list<ui.support#view>.size>   
8 [0x8]:          loadval ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          lt ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 42   
14 [0xe]: line: 40 movl 0   
15 [0xf]:          movn #0   
17 [0x11]:          pushobj   
18 [0x12]:          ipushl #2   
19 [0x13]:          call @3451 // <std#list<ui.support#view>.at>   
20 [0x14]:          popobj2    
21 [0x15]:          smovr_3 fp+3   
22 [0x16]: line: 41 pushl 3   
23 [0x17]:          ipushl #1   
24 [0x18]:          call @3216 // <ui.support#view.has_ref>   
25 [0x19]:          loadval ebx   
26 [0x1a]:          movr cmt, ebx   
27 [0x1b]:          jne 38   
28 [0x1c]: line: 42 movi #0, ebx   
30 [0x1e]:          movl 3   
31 [0x1f]:          movn #15   
33 [0x21]:          movi #0, adx   
35 [0x23]:          rmov adx, ebx   
36 [0x24]: line: 43 pushl 3   
37 [0x25]:          call @3217 // <ui.support#view.invalidate>   
38 [0x26]:          nop   
39 [0x27]:          iaddl 1, fp@2   
41 [0x29]:          jmp @2   
42 [0x2a]:          ret   


function: ui.support#fragment.on_destroy[3188] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//fragment.sharp:48:8: note:  
		    def on_destroy() {
		       ^

0 [0x0]: line: 49 ldc ebx // 0   
1 [0x1]:          movl 0   
2 [0x2]:          movn #3   
4 [0x4]:          movi #0, adx   
6 [0x6]:          rmov adx, ebx   
7 [0x7]: line: 50 istorel 0, fp+1   
9 [0x9]:          ipushl #1   
10 [0xa]:          movl 0   
11 [0xb]:          movn #0   
13 [0xd]:          pushobj   
14 [0xe]:          call @3461 // <std#list<ui.support#view>.size>   
15 [0xf]:          loadval ebx   
16 [0x10]:          loadval ecx   
17 [0x11]:          lt ecx, ebx   
18 [0x12]:          movr ebx, cmt   
19 [0x13]:          movr cmt, ebx   
20 [0x14]:          jne 32   
21 [0x15]: line: 51 movl 0   
22 [0x16]:          movn #0   
24 [0x18]:          pushobj   
25 [0x19]:          ipushl #1   
26 [0x1a]:          call @3451 // <std#list<ui.support#view>.at>   
27 [0x1b]:          invoke_delegate 3212 { static=0, args=0 }   
29 [0x1d]:          iaddl 1, fp@1   
31 [0x1f]:          jmp @9   
32 [0x20]:          ret   


function: ui.support#fragment.navigate[3189] params(2) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//fragment.sharp:55:8: note:  
		    def navigate(screen: var, finish: var) {
		       ^

0 [0x0]: line: 56 loadl ebx, fp+2   
1 [0x1]:          movr cmt, ebx   
2 [0x2]:          jne 5   
3 [0x3]: line: 57 pushl 0   
4 [0x4]:          call @3188 // <ui.support#fragment.on_destroy>   
5 [0x5]:          nop   
6 [0x6]: line: 58 movl 0   
7 [0x7]:          movn #1   
9 [0x9]:          pushobj   
10 [0xa]:          ipushl #1   
11 [0xb]:          call @3235 // <ui.support#window.navigate>   
12 [0xc]:          ret   


function: ui.support#fragment.draw[3190] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//fragment.sharp:61:8: note:  
		    def draw() {
		       ^

0 [0x0]: line: 62 istorel 0, fp+1   
2 [0x2]:          ipushl #1   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          pushobj   
7 [0x7]:          call @3461 // <std#list<ui.support#view>.size>   
8 [0x8]:          loadval ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          lt ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 25   
14 [0xe]: line: 63 movl 0   
15 [0xf]:          movn #0   
17 [0x11]:          pushobj   
18 [0x12]:          ipushl #1   
19 [0x13]:          call @3451 // <std#list<ui.support#view>.at>   
20 [0x14]:          invoke_delegate 3218 { static=0, args=0 }   
22 [0x16]:          iaddl 1, fp@1   
24 [0x18]:          jmp @2   
25 [0x19]:          ret   


ui.support#fragment.configure[3191] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//fragment.sharp:67:8: note:  
		    def configure();
		       ^



constructor: ui.support#fragment.fragment[3192] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//fragment.sharp:3:6: note:  
		class fragment : lifecycle {
		     ^

0 [0x0]:         new_class @152 // std#list<ui.support#view>   
1 [0x1]:         dup    
2 [0x2]:         call @3444 // <std#list<ui.support#view>.list>   
3 [0x3]:         movl 0   
4 [0x4]:         movn #0   
6 [0x6]:         popobj   
7 [0x7]:         ret   


constructor: ui.support#image_view.image_view[3193] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//image_view.sharp:8:15: note:  
		    image_view(id: var) -> base(id) {}
		              ^

0 [0x0]:         pushl 0   
1 [0x1]:         ipushl #1   
2 [0x2]:         call @3211 // <ui.support#view.view>   
3 [0x3]:         ret   


function: ui.support#image_view.transform_height[3194] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//image_view.sharp:10:8: note:  
		    def transform_height() : var {
		       ^

0 [0x0]: line: 11 movl 0   
1 [0x1]:          movn #18   
3 [0x3]:          pushobj   
4 [0x4]:          pushnull    
5 [0x5]:          itest ebx   
6 [0x6]:          not ebx, ebx   
7 [0x7]:          skne ebx // pc = 17   
8 [0x8]:          movl 0   
9 [0x9]:          movn #18   
11 [0xb]:          movn #3   
13 [0xd]:          movi #0, adx   
15 [0xf]:          iaload ebx, adx   
16 [0x10]:          skip @2 // pc = 18   
17 [0x11]:          movi #0, ebx   
19 [0x13]:          return_val ebx   
20 [0x14]:          ret   


function: ui.support#image_view.transform_width[3195] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//image_view.sharp:14:8: note:  
		    def transform_width() : var {
		       ^

0 [0x0]: line: 15 movl 0   
1 [0x1]:          movn #18   
3 [0x3]:          pushobj   
4 [0x4]:          pushnull    
5 [0x5]:          itest ebx   
6 [0x6]:          not ebx, ebx   
7 [0x7]:          skne ebx // pc = 17   
8 [0x8]:          movl 0   
9 [0x9]:          movn #18   
11 [0xb]:          movn #2   
13 [0xd]:          movi #0, adx   
15 [0xf]:          iaload ebx, adx   
16 [0x10]:          skip @2 // pc = 18   
17 [0x11]:          movi #0, ebx   
19 [0x13]:          return_val ebx   
20 [0x14]:          ret   


function: ui.support#image_view.set_drawable[3196] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//image_view.sharp:18:8: note:  
		    def set_drawable(res_id: var) : image_view {
		       ^

0 [0x0]: line: 19 ipushl #1   
1 [0x1]:          call @3169 // <ui.res#resources.get_drawable>   
2 [0x2]:          movl 0   
3 [0x3]:          movn #18   
5 [0x5]:          popobj   
6 [0x6]: line: 20 movi #0, ebx   
8 [0x8]:          movl 0   
9 [0x9]:          movn #15   
11 [0xb]:          movi #0, adx   
13 [0xd]:          rmov adx, ebx   
14 [0xe]: line: 21 movl 0   
15 [0xf]:          returnobj   
16 [0x10]:          ret   


function: ui.support#image_view.draw[3197] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//image_view.sharp:24:8: note:  
		    def draw() {
		       ^

0 [0x0]: line: 25 pushl 0   
1 [0x1]:          call @3217 // <ui.support#view.invalidate>   
2 [0x2]: line: 27 movl 0   
3 [0x3]:          movn #5   
5 [0x5]:          movi #0, adx   
7 [0x7]:          iaload ebx, adx   
8 [0x8]:          rstore ebx   
9 [0x9]:          ldc ebx // 0   
10 [0xa]:          loadval ecx   
11 [0xb]:          test ecx, ebx   
12 [0xc]:          movr ebx, cmt   
13 [0xd]:          skne ebx // pc = 21   
14 [0xe]:          movl 0   
15 [0xf]:          movn #18   
17 [0x11]:          pushobj   
18 [0x12]:          pushnull    
19 [0x13]:          itest ebx   
20 [0x14]:          not ebx, ebx   
21 [0x15]:          movr cmt, ebx   
22 [0x16]:          jne 29   
23 [0x17]: line: 28 movl 0   
24 [0x18]:          movn #16   
26 [0x1a]:          pushobj   
27 [0x1b]:          pushl 0   
28 [0x1c]:          call @3238 // <ui.support#window.draw_img>   
29 [0x1d]:          nop   
30 [0x1e]:          ret   


function: ui.support#image_view.on_destroy[3198] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//image_view.sharp:31:8: note:  
		    def on_destroy() {
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #18   
3 [0x3]:          del   
4 [0x4]: line: 33 movi #0, ebx   
6 [0x6]:          movl 0   
7 [0x7]:          movn #15   
9 [0x9]:          movi #0, adx   
11 [0xb]:          rmov adx, ebx   
12 [0xc]:          ret   


constructor: ui.support#image_view.image_view[3199] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//image_view.sharp:5:6: note:  
		class image_view base view {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @3210 // <ui.support#view.view>   
2 [0x2]:         ret   


ui.support#lifecycle.on_create[3200] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//lifecycle.sharp:4:8: note:  
		    def on_create();
		       ^



ui.support#lifecycle.on_destroy[3201] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//lifecycle.sharp:5:8: note:  
		    def on_destroy();
		       ^



constructor: ui.support#lifecycle.lifecycle[3202] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//lifecycle.sharp:3:10: note:  
		interface lifecycle {
		         ^

0 [0x0]:         ret   


constructor: ui.support#margin.margin[3203] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//margin.sharp:3:6: note:  
		class margin {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: ui.support#text_view.text_view[3204] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//text_view.sharp:20:14: note:  
		    text_view(id: var) -> base(id) {}
		             ^

0 [0x0]:         new_class @64 // std#string   
1 [0x1]:         dup    
2 [0x2]:         newstr @22 //    
3 [0x3]:         call @2935 // <std#string.string>   
4 [0x4]:         movl 0   
5 [0x5]:         movn #18   
7 [0x7]:         popobj   
8 [0x8]:         movi #1, ebx   
10 [0xa]:         movl 0   
11 [0xb]:         movn #19   
13 [0xd]:         movi #0, adx   
15 [0xf]:         rmov adx, ebx   
16 [0x10]:         pushl 0   
17 [0x11]:         ipushl #1   
18 [0x12]:         call @3211 // <ui.support#view.view>   
19 [0x13]:         ret   


function: ui.support#text_view.transform_height[3205] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//text_view.sharp:22:8: note:  
		    def transform_height() : var {
		       ^

0 [0x0]: line: 23 istore 8   
2 [0x2]:          movl 0   
3 [0x3]:          movn #19   
5 [0x5]:          movi #0, adx   
7 [0x7]:          iaload ebx, adx   
8 [0x8]:          loadval ecx   
9 [0x9]:          mul ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


function: ui.support#text_view.transform_width[3206] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//text_view.sharp:26:8: note:  
		    def transform_width() : var {
		       ^

0 [0x0]: line: 27 movl 0   
1 [0x1]:          movn #18   
3 [0x3]:          pushobj   
4 [0x4]:          call @2976 // <std#string.size>   
5 [0x5]:          loadval ebx   
6 [0x6]:          rstore ebx   
7 [0x7]:          istore 6   
9 [0x9]:          movl 0   
10 [0xa]:          movn #19   
12 [0xc]:          movi #0, adx   
14 [0xe]:          iaload ebx, adx   
15 [0xf]:          loadval ecx   
16 [0x10]:          mul ecx, ebx -> ebx   
17 [0x11]:          loadval ecx   
18 [0x12]:          mul ecx, ebx -> ebx   
19 [0x13]:          return_val ebx   
20 [0x14]:          ret   


function: ui.support#text_view.draw[3207] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//text_view.sharp:30:8: note:  
		    def draw() {
		       ^

0 [0x0]: line: 31 pushl 0   
1 [0x1]:          call @3217 // <ui.support#view.invalidate>   
2 [0x2]: line: 33 movl 0   
3 [0x3]:          movn #5   
5 [0x5]:          movi #0, adx   
7 [0x7]:          iaload ebx, adx   
8 [0x8]:          rstore ebx   
9 [0x9]:          ldc ebx // 0   
10 [0xa]:          loadval ecx   
11 [0xb]:          test ecx, ebx   
12 [0xc]:          movr ebx, cmt   
13 [0xd]:          skne ebx // pc = 30   
14 [0xe]:          movl 0   
15 [0xf]:          movn #18   
17 [0x11]:          pushobj   
18 [0x12]:          pushnull    
19 [0x13]:          itest ebx   
20 [0x14]:          not ebx, ebx   
21 [0x15]:          skne ebx // pc = 30   
22 [0x16]:          movl 0   
23 [0x17]:          movn #18   
25 [0x19]:          pushobj   
26 [0x1a]:          call @2961 // <std#string.get_data>   
27 [0x1b]:          pushnull    
28 [0x1c]:          itest ebx   
29 [0x1d]:          not ebx, ebx   
30 [0x1e]:          movr cmt, ebx   
31 [0x1f]:          jne 38   
32 [0x20]: line: 34 movl 0   
33 [0x21]:          movn #16   
35 [0x23]:          pushobj   
36 [0x24]:          pushl 0   
37 [0x25]:          call @3237 // <ui.support#window.draw_text>   
38 [0x26]:          nop   
39 [0x27]:          ret   


function: ui.support#text_view.on_destroy[3208] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//text_view.sharp:37:8: note:  
		    def on_destroy() {
		       ^

0 [0x0]: line: 38 pushl 0   
1 [0x1]:          new_class @64 // std#string   
2 [0x2]:          dup    
3 [0x3]:          newstr @22 //    
4 [0x4]:          call @2935 // <std#string.string>   
5 [0x5]:          call @3471 // <ui.support#text_view.set_text>   
6 [0x6]: line: 39 movi #0, ebx   
8 [0x8]:          movl 0   
9 [0x9]:          movn #15   
11 [0xb]:          movi #0, adx   
13 [0xd]:          rmov adx, ebx   
14 [0xe]:          ret   


constructor: ui.support#text_view.text_view[3209] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//text_view.sharp:3:6: note:  
		class text_view base view {
		     ^

0 [0x0]:         new_class @64 // std#string   
1 [0x1]:         dup    
2 [0x2]:         newstr @22 //    
3 [0x3]:         call @2935 // <std#string.string>   
4 [0x4]:         movl 0   
5 [0x5]:         movn #18   
7 [0x7]:         popobj   
8 [0x8]:         movi #1, ebx   
10 [0xa]:         movl 0   
11 [0xb]:         movn #19   
13 [0xd]:         movi #0, adx   
15 [0xf]:         rmov adx, ebx   
16 [0x10]:         ret   


constructor: ui.support#view.view[3210] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//view.sharp:4:17: note:  
		    private view() {}
		                ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: ui.support#view.view[3211] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//view.sharp:6:16: note:  
		    public view(id : var) {
		               ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 7 ipushl #1   
2 [0x2]:         movl 0   
3 [0x3]:         movn #6   
5 [0x5]:         loadval ebx   
6 [0x6]:         movi #0, adx   
8 [0x8]:         rmov adx, ebx   
9 [0x9]:         ret   


ui.support#view.on_destroy[3212] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//view.sharp:30:8: note:  
		    def on_destroy();
		       ^



function: ui.support#view.set_width[3213] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//view.sharp:32:8: note:  
		    def set_width(size: var) : view {
		       ^

0 [0x0]: line: 33 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #2   
4 [0x4]:          loadval ebx   
5 [0x5]:          movi #0, adx   
7 [0x7]:          rmov adx, ebx   
8 [0x8]: line: 34 movi #0, ebx   
10 [0xa]:          movl 0   
11 [0xb]:          movn #15   
13 [0xd]:          movi #0, adx   
15 [0xf]:          rmov adx, ebx   
16 [0x10]: line: 35 movl 0   
17 [0x11]:          returnobj   
18 [0x12]:          ret   


ui.support#view.transform_height[3214] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//view.sharp:38:8: note:  
		    def transform_height(): var;
		       ^



ui.support#view.transform_width[3215] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//view.sharp:39:8: note:  
		    def transform_width(): var;
		       ^



function: ui.support#view.has_ref[3216] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//view.sharp:41:8: note:  
		    def has_ref(id: var) : var {
		       ^

0 [0x0]: line: 42 movl 0   
1 [0x1]:          movn #7   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          test ecx, ebx   
10 [0xa]:          movr ebx, cmt   
11 [0xb]:          skpe ebx // pc = 58   
12 [0xc]:          movl 0   
13 [0xd]:          movn #8   
15 [0xf]:          movi #0, adx   
17 [0x11]:          iaload ebx, adx   
18 [0x12]:          rstore ebx   
19 [0x13]:          loadl ebx, fp+1   
20 [0x14]:          loadval ecx   
21 [0x15]:          test ecx, ebx   
22 [0x16]:          movr ebx, cmt   
23 [0x17]:          skpe ebx // pc = 58   
24 [0x18]:          movl 0   
25 [0x19]:          movn #9   
27 [0x1b]:          movi #0, adx   
29 [0x1d]:          iaload ebx, adx   
30 [0x1e]:          rstore ebx   
31 [0x1f]:          loadl ebx, fp+1   
32 [0x20]:          loadval ecx   
33 [0x21]:          test ecx, ebx   
34 [0x22]:          movr ebx, cmt   
35 [0x23]:          skpe ebx // pc = 58   
36 [0x24]:          movl 0   
37 [0x25]:          movn #10   
39 [0x27]:          movi #0, adx   
41 [0x29]:          iaload ebx, adx   
42 [0x2a]:          rstore ebx   
43 [0x2b]:          loadl ebx, fp+1   
44 [0x2c]:          loadval ecx   
45 [0x2d]:          test ecx, ebx   
46 [0x2e]:          movr ebx, cmt   
47 [0x2f]:          skpe ebx // pc = 58   
48 [0x30]:          movl 0   
49 [0x31]:          movn #11   
51 [0x33]:          movi #0, adx   
53 [0x35]:          iaload ebx, adx   
54 [0x36]:          rstore ebx   
55 [0x37]:          loadl ebx, fp+1   
56 [0x38]:          loadval ecx   
57 [0x39]:          test ecx, ebx   
58 [0x3a]:          return_val cmt   
59 [0x3b]:          ret   


function: ui.support#view.invalidate[3217] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//view.sharp:47:18: note:  
		    protected def invalidate() {
		                 ^

0 [0x0]: line: 48 movl 0   
1 [0x1]:          movn #15   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          not ebx, ebx   
7 [0x7]:          movr cmt, ebx   
8 [0x8]:          jne 1581   
9 [0x9]: line: 49 movi #1, ebx   
11 [0xb]:          movl 0   
12 [0xc]:          movn #15   
14 [0xe]:          movi #0, adx   
16 [0x10]:          rmov adx, ebx   
17 [0x11]: line: 50 movi #0, ebx   
19 [0x13]:          movl 0   
20 [0x14]:          movn #0   
22 [0x16]:          movi #0, adx   
24 [0x18]:          rmov adx, ebx   
25 [0x19]: line: 51 movi #0, ebx   
27 [0x1b]:          movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          movi #0, adx   
32 [0x20]:          rmov adx, ebx   
33 [0x21]: line: 53 movl 1   
34 [0x22]:          del   
35 [0x23]: line: 54 movl 0   
36 [0x24]:          movn #7   
38 [0x26]:          movi #0, adx   
40 [0x28]:          iaload ebx, adx   
41 [0x29]:          rstore ebx   
42 [0x2a]:          ldc ebx // 1   
43 [0x2b]:          loadval ecx   
44 [0x2c]:          gt ecx, ebx   
45 [0x2d]:          movr ebx, cmt   
46 [0x2e]:          movr cmt, ebx   
47 [0x2f]:          jne 89   
48 [0x30]: line: 55 movl 0   
49 [0x31]:          movn #17   
51 [0x33]:          pushobj   
52 [0x34]:          movl 0   
53 [0x35]:          movn #7   
55 [0x37]:          movi #0, adx   
57 [0x39]:          iaload ebx, adx   
58 [0x3a]:          rstore ebx   
59 [0x3b]:          call @3185 // <ui.support#fragment.find_view_by_id>   
60 [0x3c]:          popobj2    
61 [0x3d]:          smovr_3 fp+1   
62 [0x3e]: line: 56 pushl 1   
63 [0x3f]:          call @3217 // <ui.support#view.invalidate>   
64 [0x40]: line: 57 movl 1   
65 [0x41]:          movn #0   
67 [0x43]:          movi #0, adx   
69 [0x45]:          iaload ebx, adx   
70 [0x46]:          movl 0   
71 [0x47]:          movn #0   
73 [0x49]:          movi #0, adx   
75 [0x4b]:          rmov adx, ebx   
76 [0x4c]: line: 58 pushl 0   
77 [0x4d]:          invoke_delegate 3215 { static=0, args=0 }   
79 [0x4f]:          movl 0   
80 [0x50]:          movn #0   
82 [0x52]:          movi #0, adx   
84 [0x54]:          iaload ecx, adx   
85 [0x55]:          loadval ebx   
86 [0x56]:          sub ecx, ebx -> ebx   
87 [0x57]:          rmov adx, ebx   
88 [0x58]:          jmp @105   
89 [0x59]:          movl 0   
90 [0x5a]:          movn #7   
92 [0x5c]:          movi #0, adx   
94 [0x5e]:          iaload ebx, adx   
95 [0x5f]:          rstore ebx   
96 [0x60]:          ldc ebx // 1   
97 [0x61]:          loadval ecx   
98 [0x62]:          test ecx, ebx   
99 [0x63]:          jne 105   
100 [0x64]: line: 60 new_class @5 // std#illegal_state_exception   
101 [0x65]:          dup    
102 [0x66]:          newstr @72 // cannot align view to left of parent use 'to_start_of(parent)' instead   
103 [0x67]:          call @1632 // <std#illegal_state_exception.illegal_state_exception>   
104 [0x68]:          throw    
105 [0x69]:          nop   
106 [0x6a]: line: 63 movl 0   
107 [0x6b]:          movn #8   
109 [0x6d]:          movi #0, adx   
111 [0x6f]:          iaload ebx, adx   
112 [0x70]:          rstore ebx   
113 [0x71]:          ldc ebx // 1   
114 [0x72]:          loadval ecx   
115 [0x73]:          gt ecx, ebx   
116 [0x74]:          movr ebx, cmt   
117 [0x75]:          movr cmt, ebx   
118 [0x76]:          jne 147   
119 [0x77]: line: 64 movl 0   
120 [0x78]:          movn #17   
122 [0x7a]:          pushobj   
123 [0x7b]:          movl 0   
124 [0x7c]:          movn #8   
126 [0x7e]:          movi #0, adx   
128 [0x80]:          iaload ebx, adx   
129 [0x81]:          rstore ebx   
130 [0x82]:          call @3185 // <ui.support#fragment.find_view_by_id>   
131 [0x83]:          popobj2    
132 [0x84]:          smovr_3 fp+1   
133 [0x85]: line: 65 pushl 1   
134 [0x86]:          call @3217 // <ui.support#view.invalidate>   
135 [0x87]: line: 66 movl 1   
136 [0x88]:          movn #0   
138 [0x8a]:          movi #0, adx   
140 [0x8c]:          iaload ebx, adx   
141 [0x8d]:          movl 0   
142 [0x8e]:          movn #0   
144 [0x90]:          movi #0, adx   
146 [0x92]:          rmov adx, ebx   
147 [0x93]:          nop   
148 [0x94]: line: 69 movl 0   
149 [0x95]:          movn #9   
151 [0x97]:          movi #0, adx   
153 [0x99]:          iaload ebx, adx   
154 [0x9a]:          rstore ebx   
155 [0x9b]:          ldc ebx // 1   
156 [0x9c]:          loadval ecx   
157 [0x9d]:          gt ecx, ebx   
158 [0x9e]:          movr ebx, cmt   
159 [0x9f]:          movr cmt, ebx   
160 [0xa0]:          jne 228   
161 [0xa1]: line: 70 movl 0   
162 [0xa2]:          movn #7   
164 [0xa4]:          movi #0, adx   
166 [0xa6]:          iaload ebx, adx   
167 [0xa7]:          rstore ebx   
168 [0xa8]:          ldc ebx // 1   
169 [0xa9]:          loadval ecx   
170 [0xaa]:          gt ecx, ebx   
171 [0xab]:          movr ebx, cmt   
172 [0xac]:          skne ebx // pc = 187   
173 [0xad]:          movl 0   
174 [0xae]:          movn #9   
176 [0xb0]:          movi #0, adx   
178 [0xb2]:          iaload ebx, adx   
179 [0xb3]:          rstore ebx   
180 [0xb4]:          movl 0   
181 [0xb5]:          movn #7   
183 [0xb7]:          movi #0, adx   
185 [0xb9]:          iaload ebx, adx   
186 [0xba]:          loadval ecx   
187 [0xbb]:          tne ecx, ebx   
188 [0xbc]:          jne 194   
189 [0xbd]: line: 71 new_class @5 // std#illegal_state_exception   
190 [0xbe]:          dup    
191 [0xbf]:          newstr @73 // cannot align view to top of another view to whom we are not left aligned to   
192 [0xc0]:          call @1632 // <std#illegal_state_exception.illegal_state_exception>   
193 [0xc1]:          throw    
194 [0xc2]:          nop   
195 [0xc3]: line: 74 movl 1   
196 [0xc4]:          checknull   
197 [0xc5]:          movr cmt, ebx   
198 [0xc6]:          jne 213   
199 [0xc7]: line: 75 movl 0   
200 [0xc8]:          movn #17   
202 [0xca]:          pushobj   
203 [0xcb]:          movl 0   
204 [0xcc]:          movn #9   
206 [0xce]:          movi #0, adx   
208 [0xd0]:          iaload ebx, adx   
209 [0xd1]:          rstore ebx   
210 [0xd2]:          call @3185 // <ui.support#fragment.find_view_by_id>   
211 [0xd3]:          popobj2    
212 [0xd4]:          smovr_3 fp+1   
213 [0xd5]:          nop   
214 [0xd6]: line: 76 pushl 1   
215 [0xd7]:          call @3217 // <ui.support#view.invalidate>   
216 [0xd8]: line: 77 movl 1   
217 [0xd9]:          movn #1   
219 [0xdb]:          movi #0, adx   
221 [0xdd]:          iaload ebx, adx   
222 [0xde]:          movl 0   
223 [0xdf]:          movn #1   
225 [0xe1]:          movi #0, adx   
227 [0xe3]:          rmov adx, ebx   
228 [0xe4]:          nop   
229 [0xe5]: line: 80 movl 0   
230 [0xe6]:          movn #12   
232 [0xe8]:          movi #0, adx   
234 [0xea]:          iaload ebx, adx   
235 [0xeb]:          rstore ebx   
236 [0xec]:          ldc ebx // 1   
237 [0xed]:          loadval ecx   
238 [0xee]:          gt ecx, ebx   
239 [0xef]:          movr ebx, cmt   
240 [0xf0]:          movr cmt, ebx   
241 [0xf1]:          jne 354   
242 [0xf2]: line: 81 movl 0   
243 [0xf3]:          movn #9   
245 [0xf5]:          movi #0, adx   
247 [0xf7]:          iaload ebx, adx   
248 [0xf8]:          rstore ebx   
249 [0xf9]:          ldc ebx // 1   
250 [0xfa]:          loadval ecx   
251 [0xfb]:          gte ecx, ebx   
252 [0xfc]:          movr ebx, cmt   
253 [0xfd]:          skpe ebx // pc = 277   
254 [0xfe]:          movl 0   
255 [0xff]:          movn #10   
257 [0x101]:          movi #0, adx   
259 [0x103]:          iaload ebx, adx   
260 [0x104]:          rstore ebx   
261 [0x105]:          ldc ebx // 1   
262 [0x106]:          loadval ecx   
263 [0x107]:          gte ecx, ebx   
264 [0x108]:          movr ebx, cmt   
265 [0x109]:          skpe ebx // pc = 277   
266 [0x10a]:          movl 0   
267 [0x10b]:          movn #13   
269 [0x10d]:          movi #0, adx   
271 [0x10f]:          iaload ebx, adx   
272 [0x110]:          rstore ebx   
273 [0x111]:          ldc ebx // 1   
274 [0x112]:          loadval ecx   
275 [0x113]:          gte ecx, ebx   
276 [0x114]:          movr ebx, cmt   
277 [0x115]:          movr cmt, ebx   
278 [0x116]:          jne 284   
279 [0x117]: line: 83 new_class @5 // std#illegal_state_exception   
280 [0x118]:          dup    
281 [0x119]:          newstr @74 // cannot align view to top of another view with top or bottom alignment   
282 [0x11a]:          call @1632 // <std#illegal_state_exception.illegal_state_exception>   
283 [0x11b]:          throw    
284 [0x11c]:          nop   
285 [0x11d]: line: 86 movl 1   
286 [0x11e]:          checknull   
287 [0x11f]:          movr cmt, ebx   
288 [0x120]:          jne 303   
289 [0x121]: line: 87 movl 0   
290 [0x122]:          movn #17   
292 [0x124]:          pushobj   
293 [0x125]:          movl 0   
294 [0x126]:          movn #9   
296 [0x128]:          movi #0, adx   
298 [0x12a]:          iaload ebx, adx   
299 [0x12b]:          rstore ebx   
300 [0x12c]:          call @3185 // <ui.support#fragment.find_view_by_id>   
301 [0x12d]:          popobj2    
302 [0x12e]:          smovr_3 fp+1   
303 [0x12f]:          nop   
304 [0x130]: line: 88 pushl 1   
305 [0x131]:          call @3217 // <ui.support#view.invalidate>   
306 [0x132]: line: 89 movl 1   
307 [0x133]:          movn #1   
309 [0x135]:          movi #0, adx   
311 [0x137]:          iaload ebx, adx   
312 [0x138]:          rstore ebx   
313 [0x139]:          pushl 0   
314 [0x13a]:          invoke_delegate 3214 { static=0, args=0 }   
316 [0x13c]:          loadval ebx   
317 [0x13d]:          loadval ecx   
318 [0x13e]:          sub ecx, ebx -> ebx   
319 [0x13f]:          movl 0   
320 [0x140]:          movn #1   
322 [0x142]:          movi #0, adx   
324 [0x144]:          rmov adx, ebx   
325 [0x145]: line: 91 movl 1   
326 [0x146]:          movn #4   
328 [0x148]:          pushobj   
329 [0x149]:          pushnull    
330 [0x14a]:          itest ebx   
331 [0x14b]:          not ebx, ebx   
332 [0x14c]:          movr cmt, ebx   
333 [0x14d]:          jne 352   
334 [0x14e]: line: 92 movl 1   
335 [0x14f]:          movn #4   
337 [0x151]:          movn #2   
339 [0x153]:          movi #0, adx   
341 [0x155]:          iaload ebx, adx   
342 [0x156]:          rstore ebx   
343 [0x157]:          movl 0   
344 [0x158]:          movn #1   
346 [0x15a]:          movi #0, adx   
348 [0x15c]:          iaload ecx, adx   
349 [0x15d]:          loadval ebx   
350 [0x15e]:          sub ecx, ebx -> ebx   
351 [0x15f]:          rmov adx, ebx   
352 [0x160]:          nop   
353 [0x161]:          jmp @370   
354 [0x162]:          movl 0   
355 [0x163]:          movn #12   
357 [0x165]:          movi #0, adx   
359 [0x167]:          iaload ebx, adx   
360 [0x168]:          rstore ebx   
361 [0x169]:          ldc ebx // 1   
362 [0x16a]:          loadval ecx   
363 [0x16b]:          test ecx, ebx   
364 [0x16c]:          jne 370   
365 [0x16d]: line: 95 new_class @5 // std#illegal_state_exception   
366 [0x16e]:          dup    
367 [0x16f]:          newstr @75 // cannot align view above parent view, use 'to_top_of(parent)' instead   
368 [0x170]:          call @1632 // <std#illegal_state_exception.illegal_state_exception>   
369 [0x171]:          throw    
370 [0x172]:          nop   
371 [0x173]: line: 98 movl 0   
372 [0x174]:          movn #13   
374 [0x176]:          movi #0, adx   
376 [0x178]:          iaload ebx, adx   
377 [0x179]:          rstore ebx   
378 [0x17a]:          ldc ebx // 1   
379 [0x17b]:          loadval ecx   
380 [0x17c]:          gt ecx, ebx   
381 [0x17d]:          movr ebx, cmt   
382 [0x17e]:          movr cmt, ebx   
383 [0x17f]:          jne 559   
384 [0x180]: line: 99 movl 0   
385 [0x181]:          movn #9   
387 [0x183]:          movi #0, adx   
389 [0x185]:          iaload ebx, adx   
390 [0x186]:          rstore ebx   
391 [0x187]:          ldc ebx // 1   
392 [0x188]:          loadval ecx   
393 [0x189]:          gte ecx, ebx   
394 [0x18a]:          movr ebx, cmt   
395 [0x18b]:          skpe ebx // pc = 407   
396 [0x18c]:          movl 0   
397 [0x18d]:          movn #12   
399 [0x18f]:          movi #0, adx   
401 [0x191]:          iaload ebx, adx   
402 [0x192]:          rstore ebx   
403 [0x193]:          ldc ebx // 1   
404 [0x194]:          loadval ecx   
405 [0x195]:          gte ecx, ebx   
406 [0x196]:          movr ebx, cmt   
407 [0x197]:          movr cmt, ebx   
408 [0x198]:          jne 414   
409 [0x199]: line: 100 new_class @5 // std#illegal_state_exception   
410 [0x19a]:           dup    
411 [0x19b]:           newstr @76 // cannot align view to bottom while also having top alignment   
412 [0x19c]:           call @1632 // <std#illegal_state_exception.illegal_state_exception>   
413 [0x19d]:           throw    
414 [0x19e]:           nop   
415 [0x19f]: line: 102 movl 1   
416 [0x1a0]:           checknull   
417 [0x1a1]:           skpe ebx // pc = 436   
418 [0x1a2]:           movl 1   
419 [0x1a3]:           checknull   
420 [0x1a4]:           not ebx, ebx   
421 [0x1a5]:           skne ebx // pc = 436   
422 [0x1a6]:           movl 1   
423 [0x1a7]:           movn #6   
425 [0x1a9]:           movi #0, adx   
427 [0x1ab]:           iaload ebx, adx   
428 [0x1ac]:           rstore ebx   
429 [0x1ad]:           movl 0   
430 [0x1ae]:           movn #10   
432 [0x1b0]:           movi #0, adx   
434 [0x1b2]:           iaload ebx, adx   
435 [0x1b3]:           loadval ecx   
436 [0x1b4]:           tne ecx, ebx   
437 [0x1b5]:           jne 452   
438 [0x1b6]: line: 103 movl 0   
439 [0x1b7]:           movn #17   
441 [0x1b9]:           pushobj   
442 [0x1ba]:           movl 0   
443 [0x1bb]:           movn #13   
445 [0x1bd]:           movi #0, adx   
447 [0x1bf]:           iaload ebx, adx   
448 [0x1c0]:           rstore ebx   
449 [0x1c1]:           call @3185 // <ui.support#fragment.find_view_by_id>   
450 [0x1c2]:           popobj2    
451 [0x1c3]:           smovr_3 fp+1   
452 [0x1c4]:           nop   
453 [0x1c5]: line: 104 pushl 1   
454 [0x1c6]:           call @3217 // <ui.support#view.invalidate>   
455 [0x1c7]: line: 105 movl 1   
456 [0x1c8]:           movn #3   
458 [0x1ca]:           movi #0, adx   
460 [0x1cc]:           iaload ebx, adx   
461 [0x1cd]:           rstore ebx   
462 [0x1ce]:           movi #-1, ebx   
464 [0x1d0]:           loadval ecx   
465 [0x1d1]:           test ecx, ebx   
466 [0x1d2]:           jne 476   
467 [0x1d3]: line: 106 movi #65, ebx   
469 [0x1d5]:           movl 0   
470 [0x1d6]:           movn #1   
472 [0x1d8]:           movi #0, adx   
474 [0x1da]:           rmov adx, ebx   
475 [0x1db]:           jmp @529   
476 [0x1dc]:           movl 1   
477 [0x1dd]:           movn #3   
479 [0x1df]:           movi #0, adx   
481 [0x1e1]:           iaload ebx, adx   
482 [0x1e2]:           rstore ebx   
483 [0x1e3]:           movi #-2, ebx   
485 [0x1e5]:           loadval ecx   
486 [0x1e6]:           tne ecx, ebx   
487 [0x1e7]:           jne 510   
488 [0x1e8]: line: 108 movl 1   
489 [0x1e9]:           movn #1   
491 [0x1eb]:           movi #0, adx   
493 [0x1ed]:           iaload ebx, adx   
494 [0x1ee]:           rstore ebx   
495 [0x1ef]:           movl 1   
496 [0x1f0]:           movn #3   
498 [0x1f2]:           movi #0, adx   
500 [0x1f4]:           iaload ebx, adx   
501 [0x1f5]:           loadval ecx   
502 [0x1f6]:           add ecx, ebx -> ebx   
503 [0x1f7]:           movl 0   
504 [0x1f8]:           movn #1   
506 [0x1fa]:           movi #0, adx   
508 [0x1fc]:           rmov adx, ebx   
509 [0x1fd]:           jmp @529   
510 [0x1fe]: line: 110 movl 1   
511 [0x1ff]:           movn #1   
513 [0x201]:           movi #0, adx   
515 [0x203]:           iaload ebx, adx   
516 [0x204]:           rstore ebx   
517 [0x205]:           pushl 1   
518 [0x206]:           invoke_delegate 3214 { static=0, args=0 }   
520 [0x208]:           loadval ebx   
521 [0x209]:           loadval ecx   
522 [0x20a]:           add ecx, ebx -> ebx   
523 [0x20b]:           movl 0   
524 [0x20c]:           movn #1   
526 [0x20e]:           movi #0, adx   
528 [0x210]:           rmov adx, ebx   
529 [0x211]:           nop   
530 [0x212]: line: 112 movl 1   
531 [0x213]:           movn #4   
533 [0x215]:           pushobj   
534 [0x216]:           pushnull    
535 [0x217]:           itest ebx   
536 [0x218]:           not ebx, ebx   
537 [0x219]:           movr cmt, ebx   
538 [0x21a]:           jne 557   
539 [0x21b]: line: 113 movl 1   
540 [0x21c]:           movn #4   
542 [0x21e]:           movn #3   
544 [0x220]:           movi #0, adx   
546 [0x222]:           iaload ebx, adx   
547 [0x223]:           rstore ebx   
548 [0x224]:           movl 0   
549 [0x225]:           movn #1   
551 [0x227]:           movi #0, adx   
553 [0x229]:           iaload ecx, adx   
554 [0x22a]:           loadval ebx   
555 [0x22b]:           add ecx, ebx -> ebx   
556 [0x22c]:           rmov adx, ebx   
557 [0x22d]:           nop   
558 [0x22e]:           jmp @575   
559 [0x22f]:           movl 0   
560 [0x230]:           movn #13   
562 [0x232]:           movi #0, adx   
564 [0x234]:           iaload ebx, adx   
565 [0x235]:           rstore ebx   
566 [0x236]:           ldc ebx // 1   
567 [0x237]:           loadval ecx   
568 [0x238]:           test ecx, ebx   
569 [0x239]:           jne 575   
570 [0x23a]: line: 116 new_class @5 // std#illegal_state_exception   
571 [0x23b]:           dup    
572 [0x23c]:           newstr @77 // cannot align view below the parent, use 'to_bottom_of(parent)' instead   
573 [0x23d]:           call @1632 // <std#illegal_state_exception.illegal_state_exception>   
574 [0x23e]:           throw    
575 [0x23f]:           nop   
576 [0x240]: line: 119 movl 0   
577 [0x241]:           movn #10   
579 [0x243]:           movi #0, adx   
581 [0x245]:           iaload ebx, adx   
582 [0x246]:           rstore ebx   
583 [0x247]:           ldc ebx // 1   
584 [0x248]:           loadval ecx   
585 [0x249]:           gt ecx, ebx   
586 [0x24a]:           movr ebx, cmt   
587 [0x24b]:           movr cmt, ebx   
588 [0x24c]:           jne 772   
589 [0x24d]: line: 120 movl 0   
590 [0x24e]:           movn #9   
592 [0x250]:           movi #0, adx   
594 [0x252]:           iaload ebx, adx   
595 [0x253]:           rstore ebx   
596 [0x254]:           ldc ebx // 1   
597 [0x255]:           loadval ecx   
598 [0x256]:           gte ecx, ebx   
599 [0x257]:           movr ebx, cmt   
600 [0x258]:           movr cmt, ebx   
601 [0x259]:           jne 607   
602 [0x25a]: line: 121 new_class @5 // std#illegal_state_exception   
603 [0x25b]:           dup    
604 [0x25c]:           newstr @76 // cannot align view to bottom while also having top alignment   
605 [0x25d]:           call @1632 // <std#illegal_state_exception.illegal_state_exception>   
606 [0x25e]:           throw    
607 [0x25f]:           nop   
608 [0x260]: line: 123 movl 1   
609 [0x261]:           checknull   
610 [0x262]:           skpe ebx // pc = 629   
611 [0x263]:           movl 1   
612 [0x264]:           checknull   
613 [0x265]:           not ebx, ebx   
614 [0x266]:           skne ebx // pc = 629   
615 [0x267]:           movl 1   
616 [0x268]:           movn #6   
618 [0x26a]:           movi #0, adx   
620 [0x26c]:           iaload ebx, adx   
621 [0x26d]:           rstore ebx   
622 [0x26e]:           movl 0   
623 [0x26f]:           movn #10   
625 [0x271]:           movi #0, adx   
627 [0x273]:           iaload ebx, adx   
628 [0x274]:           loadval ecx   
629 [0x275]:           tne ecx, ebx   
630 [0x276]:           jne 645   
631 [0x277]: line: 124 movl 0   
632 [0x278]:           movn #17   
634 [0x27a]:           pushobj   
635 [0x27b]:           movl 0   
636 [0x27c]:           movn #10   
638 [0x27e]:           movi #0, adx   
640 [0x280]:           iaload ebx, adx   
641 [0x281]:           rstore ebx   
642 [0x282]:           call @3185 // <ui.support#fragment.find_view_by_id>   
643 [0x283]:           popobj2    
644 [0x284]:           smovr_3 fp+1   
645 [0x285]:           nop   
646 [0x286]: line: 125 pushl 1   
647 [0x287]:           call @3217 // <ui.support#view.invalidate>   
648 [0x288]: line: 126 movl 1   
649 [0x289]:           movn #3   
651 [0x28b]:           movi #0, adx   
653 [0x28d]:           iaload ebx, adx   
654 [0x28e]:           rstore ebx   
655 [0x28f]:           movi #-1, ebx   
657 [0x291]:           loadval ecx   
658 [0x292]:           test ecx, ebx   
659 [0x293]:           jne 675   
660 [0x294]: line: 127 istore 64   
662 [0x296]:           pushl 0   
663 [0x297]:           invoke_delegate 3214 { static=0, args=0 }   
665 [0x299]:           loadval ebx   
666 [0x29a]:           loadval ecx   
667 [0x29b]:           sub ecx, ebx -> ebx   
668 [0x29c]:           movl 0   
669 [0x29d]:           movn #1   
671 [0x29f]:           movi #0, adx   
673 [0x2a1]:           rmov adx, ebx   
674 [0x2a2]:           jmp @742   
675 [0x2a3]:           movl 1   
676 [0x2a4]:           movn #3   
678 [0x2a6]:           movi #0, adx   
680 [0x2a8]:           iaload ebx, adx   
681 [0x2a9]:           rstore ebx   
682 [0x2aa]:           movi #-2, ebx   
684 [0x2ac]:           loadval ecx   
685 [0x2ad]:           tne ecx, ebx   
686 [0x2ae]:           jne 716   
687 [0x2af]: line: 129 movl 1   
688 [0x2b0]:           movn #1   
690 [0x2b2]:           movi #0, adx   
692 [0x2b4]:           iaload ebx, adx   
693 [0x2b5]:           rstore ebx   
694 [0x2b6]:           movl 1   
695 [0x2b7]:           movn #3   
697 [0x2b9]:           movi #0, adx   
699 [0x2bb]:           iaload ebx, adx   
700 [0x2bc]:           loadval ecx   
701 [0x2bd]:           add ecx, ebx -> ebx   
702 [0x2be]:           rstore ebx   
703 [0x2bf]:           pushl 0   
704 [0x2c0]:           invoke_delegate 3214 { static=0, args=0 }   
706 [0x2c2]:           loadval ebx   
707 [0x2c3]:           loadval ecx   
708 [0x2c4]:           sub ecx, ebx -> ebx   
709 [0x2c5]:           movl 0   
710 [0x2c6]:           movn #1   
712 [0x2c8]:           movi #0, adx   
714 [0x2ca]:           rmov adx, ebx   
715 [0x2cb]:           jmp @742   
716 [0x2cc]: line: 131 movl 1   
717 [0x2cd]:           movn #1   
719 [0x2cf]:           movi #0, adx   
721 [0x2d1]:           iaload ebx, adx   
722 [0x2d2]:           rstore ebx   
723 [0x2d3]:           pushl 1   
724 [0x2d4]:           invoke_delegate 3214 { static=0, args=0 }   
726 [0x2d6]:           loadval ebx   
727 [0x2d7]:           loadval ecx   
728 [0x2d8]:           add ecx, ebx -> ebx   
729 [0x2d9]:           rstore ebx   
730 [0x2da]:           pushl 0   
731 [0x2db]:           invoke_delegate 3214 { static=0, args=0 }   
733 [0x2dd]:           loadval ebx   
734 [0x2de]:           loadval ecx   
735 [0x2df]:           sub ecx, ebx -> ebx   
736 [0x2e0]:           movl 0   
737 [0x2e1]:           movn #1   
739 [0x2e3]:           movi #0, adx   
741 [0x2e5]:           rmov adx, ebx   
742 [0x2e6]:           nop   
743 [0x2e7]: line: 133 movl 1   
744 [0x2e8]:           movn #4   
746 [0x2ea]:           pushobj   
747 [0x2eb]:           pushnull    
748 [0x2ec]:           itest ebx   
749 [0x2ed]:           not ebx, ebx   
750 [0x2ee]:           movr cmt, ebx   
751 [0x2ef]:           jne 770   
752 [0x2f0]: line: 134 movl 1   
753 [0x2f1]:           movn #4   
755 [0x2f3]:           movn #3   
757 [0x2f5]:           movi #0, adx   
759 [0x2f7]:           iaload ebx, adx   
760 [0x2f8]:           rstore ebx   
761 [0x2f9]:           movl 0   
762 [0x2fa]:           movn #1   
764 [0x2fc]:           movi #0, adx   
766 [0x2fe]:           iaload ecx, adx   
767 [0x2ff]:           loadval ebx   
768 [0x300]:           add ecx, ebx -> ebx   
769 [0x301]:           rmov adx, ebx   
770 [0x302]:           nop   
771 [0x303]:           jmp @844   
772 [0x304]:           movl 0   
773 [0x305]:           movn #10   
775 [0x307]:           movi #0, adx   
777 [0x309]:           iaload ebx, adx   
778 [0x30a]:           rstore ebx   
779 [0x30b]:           ldc ebx // 1   
780 [0x30c]:           loadval ecx   
781 [0x30d]:           test ecx, ebx   
782 [0x30e]:           jne 844   
783 [0x30f]: line: 137 movl 0   
784 [0x310]:           movn #9   
786 [0x312]:           movi #0, adx   
788 [0x314]:           iaload ebx, adx   
789 [0x315]:           rstore ebx   
790 [0x316]:           ldc ebx // 0   
791 [0x317]:           loadval ecx   
792 [0x318]:           gt ecx, ebx   
793 [0x319]:           movr ebx, cmt   
794 [0x31a]:           movr cmt, ebx   
795 [0x31b]:           jne 801   
796 [0x31c]: line: 138 new_class @5 // std#illegal_state_exception   
797 [0x31d]:           dup    
798 [0x31e]:           newstr @76 // cannot align view to bottom while also having top alignment   
799 [0x31f]:           call @1632 // <std#illegal_state_exception.illegal_state_exception>   
800 [0x320]:           throw    
801 [0x321]:           nop   
802 [0x322]: line: 139 istore 64   
804 [0x324]:           pushl 0   
805 [0x325]:           invoke_delegate 3214 { static=0, args=0 }   
807 [0x327]:           loadval ebx   
808 [0x328]:           loadval ecx   
809 [0x329]:           sub ecx, ebx -> ebx   
810 [0x32a]:           movl 0   
811 [0x32b]:           movn #1   
813 [0x32d]:           movi #0, adx   
815 [0x32f]:           rmov adx, ebx   
816 [0x330]: line: 141 movl 0   
817 [0x331]:           movn #4   
819 [0x333]:           pushobj   
820 [0x334]:           pushnull    
821 [0x335]:           itest ebx   
822 [0x336]:           not ebx, ebx   
823 [0x337]:           movr cmt, ebx   
824 [0x338]:           jne 843   
825 [0x339]: line: 142 movl 0   
826 [0x33a]:           movn #4   
828 [0x33c]:           movn #3   
830 [0x33e]:           movi #0, adx   
832 [0x340]:           iaload ebx, adx   
833 [0x341]:           rstore ebx   
834 [0x342]:           movl 0   
835 [0x343]:           movn #1   
837 [0x345]:           movi #0, adx   
839 [0x347]:           iaload ecx, adx   
840 [0x348]:           loadval ebx   
841 [0x349]:           sub ecx, ebx -> ebx   
842 [0x34a]:           rmov adx, ebx   
843 [0x34b]:           nop   
844 [0x34c]:           nop   
845 [0x34d]: line: 146 movl 0   
846 [0x34e]:           movn #11   
848 [0x350]:           movi #0, adx   
850 [0x352]:           iaload ebx, adx   
851 [0x353]:           rstore ebx   
852 [0x354]:           ldc ebx // 1   
853 [0x355]:           loadval ecx   
854 [0x356]:           gt ecx, ebx   
855 [0x357]:           movr ebx, cmt   
856 [0x358]:           movr cmt, ebx   
857 [0x359]:           jne 1156   
858 [0x35a]: line: 147 movl 0   
859 [0x35b]:           movn #7   
861 [0x35d]:           movi #0, adx   
863 [0x35f]:           iaload ebx, adx   
864 [0x360]:           rstore ebx   
865 [0x361]:           ldc ebx // 1   
866 [0x362]:           loadval ecx   
867 [0x363]:           gte ecx, ebx   
868 [0x364]:           movr ebx, cmt   
869 [0x365]:           movr cmt, ebx   
870 [0x366]:           jne 876   
871 [0x367]: line: 148 new_class @5 // std#illegal_state_exception   
872 [0x368]:           dup    
873 [0x369]:           newstr @78 // cannot align view to right while also having left alignment   
874 [0x36a]:           call @1632 // <std#illegal_state_exception.illegal_state_exception>   
875 [0x36b]:           throw    
876 [0x36c]:           nop   
877 [0x36d]: line: 150 movl 1   
878 [0x36e]:           checknull   
879 [0x36f]:           skpe ebx // pc = 898   
880 [0x370]:           movl 1   
881 [0x371]:           checknull   
882 [0x372]:           not ebx, ebx   
883 [0x373]:           skne ebx // pc = 898   
884 [0x374]:           movl 1   
885 [0x375]:           movn #6   
887 [0x377]:           movi #0, adx   
889 [0x379]:           iaload ebx, adx   
890 [0x37a]:           rstore ebx   
891 [0x37b]:           movl 0   
892 [0x37c]:           movn #11   
894 [0x37e]:           movi #0, adx   
896 [0x380]:           iaload ebx, adx   
897 [0x381]:           loadval ecx   
898 [0x382]:           tne ecx, ebx   
899 [0x383]:           jne 914   
900 [0x384]: line: 151 movl 0   
901 [0x385]:           movn #17   
903 [0x387]:           pushobj   
904 [0x388]:           movl 0   
905 [0x389]:           movn #11   
907 [0x38b]:           movi #0, adx   
909 [0x38d]:           iaload ebx, adx   
910 [0x38e]:           rstore ebx   
911 [0x38f]:           call @3185 // <ui.support#fragment.find_view_by_id>   
912 [0x390]:           popobj2    
913 [0x391]:           smovr_3 fp+1   
914 [0x392]:           nop   
915 [0x393]: line: 152 pushl 1   
916 [0x394]:           call @3217 // <ui.support#view.invalidate>   
917 [0x395]: line: 153 movl 1   
918 [0x396]:           movn #2   
920 [0x398]:           movi #0, adx   
922 [0x39a]:           iaload ebx, adx   
923 [0x39b]:           rstore ebx   
924 [0x39c]:           movi #-1, ebx   
926 [0x39e]:           loadval ecx   
927 [0x39f]:           test ecx, ebx   
928 [0x3a0]:           jne 938   
929 [0x3a1]: line: 154 movi #129, ebx   
931 [0x3a3]:           movl 0   
932 [0x3a4]:           movn #0   
934 [0x3a6]:           movi #0, adx   
936 [0x3a8]:           rmov adx, ebx   
937 [0x3a9]:           jmp @1126   
938 [0x3aa]:           movl 1   
939 [0x3ab]:           movn #2   
941 [0x3ad]:           movi #0, adx   
943 [0x3af]:           iaload ebx, adx   
944 [0x3b0]:           rstore ebx   
945 [0x3b1]:           movi #-2, ebx   
947 [0x3b3]:           loadval ecx   
948 [0x3b4]:           tne ecx, ebx   
949 [0x3b5]:           jne 1107   
950 [0x3b6]: line: 156 movl 1   
951 [0x3b7]:           movn #14   
953 [0x3b9]:           movi #0, adx   
955 [0x3bb]:           iaload ebx, adx   
956 [0x3bc]:           rstore ebx   
957 [0x3bd]:           ldc ebx // 1   
958 [0x3be]:           loadval ecx   
959 [0x3bf]:           test ecx, ebx   
960 [0x3c0]:           jne 981   
961 [0x3c1]: line: 157 movl 1   
962 [0x3c2]:           movn #0   
964 [0x3c4]:           movi #0, adx   
966 [0x3c6]:           iaload ebx, adx   
967 [0x3c7]:           rstore ebx   
968 [0x3c8]:           pushl 1   
969 [0x3c9]:           invoke_delegate 3215 { static=0, args=0 }   
971 [0x3cb]:           loadval ebx   
972 [0x3cc]:           loadval ecx   
973 [0x3cd]:           add ecx, ebx -> ebx   
974 [0x3ce]:           movl 0   
975 [0x3cf]:           movn #0   
977 [0x3d1]:           movi #0, adx   
979 [0x3d3]:           rmov adx, ebx   
980 [0x3d4]:           jmp @1105   
981 [0x3d5]:           movl 1   
982 [0x3d6]:           movn #14   
984 [0x3d8]:           movi #0, adx   
986 [0x3da]:           iaload ebx, adx   
987 [0x3db]:           rstore ebx   
988 [0x3dc]:           movi #2, ebx   
990 [0x3de]:           loadval ecx   
991 [0x3df]:           test ecx, ebx   
992 [0x3e0]:           jne 1084   
993 [0x3e1]: line: 159 movl 1   
994 [0x3e2]:           movn #2   
996 [0x3e4]:           movi #0, adx   
998 [0x3e6]:           iaload ebx, adx   
999 [0x3e7]:           rstore ebx   
1000 [0x3e8]:           movl 1   
1001 [0x3e9]:           movn #0   
1003 [0x3eb]:           movi #0, adx   
1005 [0x3ed]:           iaload ebx, adx   
1006 [0x3ee]:           rstore ebx   
1007 [0x3ef]:           pushl 1   
1008 [0x3f0]:           invoke_delegate 3215 { static=0, args=0 }   
1010 [0x3f2]:           loadval ebx   
1011 [0x3f3]:           loadval ecx   
1012 [0x3f4]:           add ecx, ebx -> ebx   
1013 [0x3f5]:           loadval ecx   
1014 [0x3f6]:           sub ecx, ebx -> ebx   
1015 [0x3f7]:           rstore ebx   
1016 [0x3f8]:           pushl 1   
1017 [0x3f9]:           invoke_delegate 3215 { static=0, args=0 }   
1019 [0x3fb]:           loadval ebx   
1020 [0x3fc]:           loadval ecx   
1021 [0x3fd]:           add ecx, ebx -> ebx   
1022 [0x3fe]:           smovr_2 ebx, fp+2   
1023 [0x3ff]: line: 160 ipushl #2   
1024 [0x400]:           movi #0, ebx   
1026 [0x402]:           loadval ecx   
1027 [0x403]:           gt ecx, ebx   
1028 [0x404]:           movr ebx, cmt   
1029 [0x405]:           skne ebx // pc = 1040   
1030 [0x406]:           ipushl #2   
1031 [0x407]:           movl 1   
1032 [0x408]:           movn #2   
1034 [0x40a]:           movi #0, adx   
1036 [0x40c]:           iaload ebx, adx   
1037 [0x40d]:           loadval ecx   
1038 [0x40e]:           lt ecx, ebx   
1039 [0x40f]:           movr ebx, cmt   
1040 [0x410]:           movr cmt, ebx   
1041 [0x411]:           jne 1063   
1042 [0x412]: line: 161 movl 1   
1043 [0x413]:           movn #0   
1045 [0x415]:           movi #0, adx   
1047 [0x417]:           iaload ebx, adx   
1048 [0x418]:           rstore ebx   
1049 [0x419]:           loadl ebx, fp+2   
1050 [0x41a]:           loadval ecx   
1051 [0x41b]:           add ecx, ebx -> ebx   
1052 [0x41c]:           rstore ebx   
1053 [0x41d]:           movl 0   
1054 [0x41e]:           movn #0   
1056 [0x420]:           movi #0, adx   
1058 [0x422]:           iaload ecx, adx   
1059 [0x423]:           loadval ebx   
1060 [0x424]:           add ecx, ebx -> ebx   
1061 [0x425]:           rmov adx, ebx   
1062 [0x426]:           jmp @1082   
1063 [0x427]: line: 163 movl 1   
1064 [0x428]:           movn #0   
1066 [0x42a]:           movi #0, adx   
1068 [0x42c]:           iaload ebx, adx   
1069 [0x42d]:           rstore ebx   
1070 [0x42e]:           pushl 1   
1071 [0x42f]:           invoke_delegate 3215 { static=0, args=0 }   
1073 [0x431]:           loadval ebx   
1074 [0x432]:           loadval ecx   
1075 [0x433]:           add ecx, ebx -> ebx   
1076 [0x434]:           movl 0   
1077 [0x435]:           movn #0   
1079 [0x437]:           movi #0, adx   
1081 [0x439]:           rmov adx, ebx   
1082 [0x43a]:           nop   
1083 [0x43b]:           jmp @1105   
1084 [0x43c]: line: 166 movl 1   
1085 [0x43d]:           movn #0   
1087 [0x43f]:           movi #0, adx   
1089 [0x441]:           iaload ebx, adx   
1090 [0x442]:           rstore ebx   
1091 [0x443]:           movl 1   
1092 [0x444]:           movn #2   
1094 [0x446]:           movi #0, adx   
1096 [0x448]:           iaload ebx, adx   
1097 [0x449]:           loadval ecx   
1098 [0x44a]:           add ecx, ebx -> ebx   
1099 [0x44b]:           movl 0   
1100 [0x44c]:           movn #0   
1102 [0x44e]:           movi #0, adx   
1104 [0x450]:           rmov adx, ebx   
1105 [0x451]:           nop   
1106 [0x452]:           jmp @1126   
1107 [0x453]: line: 169 movl 1   
1108 [0x454]:           movn #0   
1110 [0x456]:           movi #0, adx   
1112 [0x458]:           iaload ebx, adx   
1113 [0x459]:           rstore ebx   
1114 [0x45a]:           pushl 1   
1115 [0x45b]:           invoke_delegate 3215 { static=0, args=0 }   
1117 [0x45d]:           loadval ebx   
1118 [0x45e]:           loadval ecx   
1119 [0x45f]:           add ecx, ebx -> ebx   
1120 [0x460]:           movl 0   
1121 [0x461]:           movn #0   
1123 [0x463]:           movi #0, adx   
1125 [0x465]:           rmov adx, ebx   
1126 [0x466]:           nop   
1127 [0x467]: line: 171 movl 1   
1128 [0x468]:           movn #4   
1130 [0x46a]:           pushobj   
1131 [0x46b]:           pushnull    
1132 [0x46c]:           itest ebx   
1133 [0x46d]:           not ebx, ebx   
1134 [0x46e]:           movr cmt, ebx   
1135 [0x46f]:           jne 1154   
1136 [0x470]: line: 172 movl 1   
1137 [0x471]:           movn #4   
1139 [0x473]:           movn #1   
1141 [0x475]:           movi #0, adx   
1143 [0x477]:           iaload ebx, adx   
1144 [0x478]:           rstore ebx   
1145 [0x479]:           movl 0   
1146 [0x47a]:           movn #0   
1148 [0x47c]:           movi #0, adx   
1150 [0x47e]:           iaload ecx, adx   
1151 [0x47f]:           loadval ebx   
1152 [0x480]:           sub ecx, ebx -> ebx   
1153 [0x481]:           rmov adx, ebx   
1154 [0x482]:           nop   
1155 [0x483]:           jmp @1200   
1156 [0x484]:           movl 0   
1157 [0x485]:           movn #11   
1159 [0x487]:           movi #0, adx   
1161 [0x489]:           iaload ebx, adx   
1162 [0x48a]:           rstore ebx   
1163 [0x48b]:           ldc ebx // 1   
1164 [0x48c]:           loadval ecx   
1165 [0x48d]:           test ecx, ebx   
1166 [0x48e]:           jne 1200   
1167 [0x48f]: line: 175 movl 0   
1168 [0x490]:           movn #7   
1170 [0x492]:           movi #0, adx   
1172 [0x494]:           iaload ebx, adx   
1173 [0x495]:           rstore ebx   
1174 [0x496]:           ldc ebx // 1   
1175 [0x497]:           loadval ecx   
1176 [0x498]:           gte ecx, ebx   
1177 [0x499]:           movr ebx, cmt   
1178 [0x49a]:           movr cmt, ebx   
1179 [0x49b]:           jne 1185   
1180 [0x49c]: line: 176 new_class @5 // std#illegal_state_exception   
1181 [0x49d]:           dup    
1182 [0x49e]:           newstr @78 // cannot align view to right while also having left alignment   
1183 [0x49f]:           call @1632 // <std#illegal_state_exception.illegal_state_exception>   
1184 [0x4a0]:           throw    
1185 [0x4a1]:           nop   
1186 [0x4a2]: line: 177 istore 128   
1188 [0x4a4]:           pushl 0   
1189 [0x4a5]:           invoke_delegate 3215 { static=0, args=0 }   
1191 [0x4a7]:           loadval ebx   
1192 [0x4a8]:           loadval ecx   
1193 [0x4a9]:           sub ecx, ebx -> ebx   
1194 [0x4aa]:           movl 0   
1195 [0x4ab]:           movn #0   
1197 [0x4ad]:           movi #0, adx   
1199 [0x4af]:           rmov adx, ebx   
1200 [0x4b0]:           nop   
1201 [0x4b1]: line: 180 movl 0   
1202 [0x4b2]:           movn #14   
1204 [0x4b4]:           movi #0, adx   
1206 [0x4b6]:           iaload ebx, adx   
1207 [0x4b7]:           rstore ebx   
1208 [0x4b8]:           ldc ebx // 1   
1209 [0x4b9]:           loadval ecx   
1210 [0x4ba]:           test ecx, ebx   
1211 [0x4bb]:           jne 1293   
1212 [0x4bc]: line: 181 movl 0   
1213 [0x4bd]:           movn #2   
1215 [0x4bf]:           movi #0, adx   
1217 [0x4c1]:           iaload ebx, adx   
1218 [0x4c2]:           rstore ebx   
1219 [0x4c3]:           movi #-1, ebx   
1221 [0x4c5]:           loadval ecx   
1222 [0x4c6]:           test ecx, ebx   
1223 [0x4c7]:           jne 1239   
1224 [0x4c8]: line: 182 istore 128   
1226 [0x4ca]:           pushl 0   
1227 [0x4cb]:           invoke_delegate 3215 { static=0, args=0 }   
1229 [0x4cd]:           loadval ebx   
1230 [0x4ce]:           loadval ecx   
1231 [0x4cf]:           sub ecx, ebx -> ebx   
1232 [0x4d0]:           movl 0   
1233 [0x4d1]:           movn #0   
1235 [0x4d3]:           movi #0, adx   
1237 [0x4d5]:           rmov adx, ebx   
1238 [0x4d6]:           jmp @1291   
1239 [0x4d7]:           movl 0   
1240 [0x4d8]:           movn #2   
1242 [0x4da]:           movi #0, adx   
1244 [0x4dc]:           iaload ebx, adx   
1245 [0x4dd]:           rstore ebx   
1246 [0x4de]:           movi #0, ebx   
1248 [0x4e0]:           loadval ecx   
1249 [0x4e1]:           gte ecx, ebx   
1250 [0x4e2]:           movr ebx, cmt   
1251 [0x4e3]:           movr cmt, ebx   
1252 [0x4e4]:           jne 1291   
1253 [0x4e5]: line: 184 movl 0   
1254 [0x4e6]:           movn #0   
1256 [0x4e8]:           movi #0, adx   
1258 [0x4ea]:           iaload ebx, adx   
1259 [0x4eb]:           rstore ebx   
1260 [0x4ec]:           movl 0   
1261 [0x4ed]:           movn #2   
1263 [0x4ef]:           movi #0, adx   
1265 [0x4f1]:           iaload ebx, adx   
1266 [0x4f2]:           loadval ecx   
1267 [0x4f3]:           add ecx, ebx -> ebx   
1268 [0x4f4]:           smovr_2 ebx, fp+3   
1269 [0x4f5]: line: 185 pushl 0   
1270 [0x4f6]:           invoke_delegate 3215 { static=0, args=0 }   
1272 [0x4f8]:           ipopl 4   
1273 [0x4f9]: line: 186 ipushl #4   
1274 [0x4fa]:           loadl ebx, fp+3   
1275 [0x4fb]:           loadval ecx   
1276 [0x4fc]:           lt ecx, ebx   
1277 [0x4fd]:           movr ebx, cmt   
1278 [0x4fe]:           movr cmt, ebx   
1279 [0x4ff]:           jne 1290   
1280 [0x500]: line: 187 ipushl #3   
1281 [0x501]:           loadl ebx, fp+4   
1282 [0x502]:           loadval ecx   
1283 [0x503]:           sub ecx, ebx -> ebx   
1284 [0x504]:           movl 0   
1285 [0x505]:           movn #0   
1287 [0x507]:           movi #0, adx   
1289 [0x509]:           rmov adx, ebx   
1290 [0x50a]:           nop   
1291 [0x50b]:           nop   
1292 [0x50c]:           jmp @1435   
1293 [0x50d]:           movl 0   
1294 [0x50e]:           movn #14   
1296 [0x510]:           movi #0, adx   
1298 [0x512]:           iaload ebx, adx   
1299 [0x513]:           rstore ebx   
1300 [0x514]:           movi #2, ebx   
1302 [0x516]:           loadval ecx   
1303 [0x517]:           test ecx, ebx   
1304 [0x518]:           jne 1435   
1305 [0x519]: line: 193 movl 0   
1306 [0x51a]:           movn #2   
1308 [0x51c]:           movi #0, adx   
1310 [0x51e]:           iaload ebx, adx   
1311 [0x51f]:           rstore ebx   
1312 [0x520]:           movi #-1, ebx   
1314 [0x522]:           loadval ecx   
1315 [0x523]:           test ecx, ebx   
1316 [0x524]:           jne 1362   
1317 [0x525]: line: 194 istore 128   
1319 [0x527]:           movl 0   
1320 [0x528]:           movn #0   
1322 [0x52a]:           movi #0, adx   
1324 [0x52c]:           iaload ebx, adx   
1325 [0x52d]:           loadval ecx   
1326 [0x52e]:           sub ecx, ebx -> ebx   
1327 [0x52f]:           smovr_2 ebx, fp+5   
1328 [0x530]: line: 195 ipushl #5   
1329 [0x531]:           pushl 0   
1330 [0x532]:           invoke_delegate 3215 { static=0, args=0 }   
1332 [0x534]:           loadval ebx   
1333 [0x535]:           loadval ecx   
1334 [0x536]:           sub ecx, ebx -> ebx   
1335 [0x537]:           smovr_2 ebx, fp+6   
1336 [0x538]: line: 197 ipushl #6   
1337 [0x539]:           movi #0, ebx   
1339 [0x53b]:           loadval ecx   
1340 [0x53c]:           gt ecx, ebx   
1341 [0x53d]:           movr ebx, cmt   
1342 [0x53e]:           movr cmt, ebx   
1343 [0x53f]:           jne 1360   
1344 [0x540]: line: 198 ipushl #6   
1345 [0x541]:           movi #2, ebx   
1347 [0x543]:           loadval ecx   
1348 [0x544]:           div ecx, ebx -> ebx   
1349 [0x545]:           mov8 ebx, ebx   
1350 [0x546]:           rstore ebx   
1351 [0x547]:           movl 0   
1352 [0x548]:           movn #0   
1354 [0x54a]:           movi #0, adx   
1356 [0x54c]:           iaload ecx, adx   
1357 [0x54d]:           loadval ebx   
1358 [0x54e]:           add ecx, ebx -> ebx   
1359 [0x54f]:           rmov adx, ebx   
1360 [0x550]:           nop   
1361 [0x551]:           jmp @1434   
1362 [0x552]:           movl 0   
1363 [0x553]:           movn #2   
1365 [0x555]:           movi #0, adx   
1367 [0x557]:           iaload ebx, adx   
1368 [0x558]:           rstore ebx   
1369 [0x559]:           movi #0, ebx   
1371 [0x55b]:           loadval ecx   
1372 [0x55c]:           gte ecx, ebx   
1373 [0x55d]:           movr ebx, cmt   
1374 [0x55e]:           movr cmt, ebx   
1375 [0x55f]:           jne 1434   
1376 [0x560]: line: 201 movl 0   
1377 [0x561]:           movn #0   
1379 [0x563]:           movi #0, adx   
1381 [0x565]:           iaload ebx, adx   
1382 [0x566]:           rstore ebx   
1383 [0x567]:           movl 0   
1384 [0x568]:           movn #2   
1386 [0x56a]:           movi #0, adx   
1388 [0x56c]:           iaload ebx, adx   
1389 [0x56d]:           loadval ecx   
1390 [0x56e]:           add ecx, ebx -> ebx   
1391 [0x56f]:           rstore ebx   
1392 [0x570]:           movl 0   
1393 [0x571]:           movn #0   
1395 [0x573]:           movi #0, adx   
1397 [0x575]:           iaload ebx, adx   
1398 [0x576]:           loadval ecx   
1399 [0x577]:           sub ecx, ebx -> ebx   
1400 [0x578]:           smovr_2 ebx, fp+7   
1401 [0x579]: line: 202 ipushl #7   
1402 [0x57a]:           pushl 0   
1403 [0x57b]:           invoke_delegate 3215 { static=0, args=0 }   
1405 [0x57d]:           loadval ebx   
1406 [0x57e]:           loadval ecx   
1407 [0x57f]:           sub ecx, ebx -> ebx   
1408 [0x580]:           smovr_2 ebx, fp+8   
1409 [0x581]: line: 204 ipushl #8   
1410 [0x582]:           movi #0, ebx   
1412 [0x584]:           loadval ecx   
1413 [0x585]:           gt ecx, ebx   
1414 [0x586]:           movr ebx, cmt   
1415 [0x587]:           movr cmt, ebx   
1416 [0x588]:           jne 1433   
1417 [0x589]: line: 205 ipushl #8   
1418 [0x58a]:           movi #2, ebx   
1420 [0x58c]:           loadval ecx   
1421 [0x58d]:           div ecx, ebx -> ebx   
1422 [0x58e]:           mov8 ebx, ebx   
1423 [0x58f]:           rstore ebx   
1424 [0x590]:           movl 0   
1425 [0x591]:           movn #0   
1427 [0x593]:           movi #0, adx   
1429 [0x595]:           iaload ecx, adx   
1430 [0x596]:           loadval ebx   
1431 [0x597]:           add ecx, ebx -> ebx   
1432 [0x598]:           rmov adx, ebx   
1433 [0x599]:           nop   
1434 [0x59a]:           nop   
1435 [0x59b]:           nop   
1436 [0x59c]: line: 210 movl 0   
1437 [0x59d]:           movn #4   
1439 [0x59f]:           pushobj   
1440 [0x5a0]:           pushnull    
1441 [0x5a1]:           itest ebx   
1442 [0x5a2]:           not ebx, ebx   
1443 [0x5a3]:           movr cmt, ebx   
1444 [0x5a4]:           jne 1499   
1445 [0x5a5]: line: 211 movl 0   
1446 [0x5a6]:           movn #4   
1448 [0x5a8]:           movn #0   
1450 [0x5aa]:           movi #0, adx   
1452 [0x5ac]:           iaload ebx, adx   
1453 [0x5ad]:           rstore ebx   
1454 [0x5ae]:           movl 0   
1455 [0x5af]:           movn #0   
1457 [0x5b1]:           movi #0, adx   
1459 [0x5b3]:           iaload ecx, adx   
1460 [0x5b4]:           loadval ebx   
1461 [0x5b5]:           add ecx, ebx -> ebx   
1462 [0x5b6]:           rmov adx, ebx   
1463 [0x5b7]: line: 212 movl 0   
1464 [0x5b8]:           movn #4   
1466 [0x5ba]:           movn #2   
1468 [0x5bc]:           movi #0, adx   
1470 [0x5be]:           iaload ebx, adx   
1471 [0x5bf]:           rstore ebx   
1472 [0x5c0]:           movl 0   
1473 [0x5c1]:           movn #1   
1475 [0x5c3]:           movi #0, adx   
1477 [0x5c5]:           iaload ecx, adx   
1478 [0x5c6]:           loadval ebx   
1479 [0x5c7]:           add ecx, ebx -> ebx   
1480 [0x5c8]:           rmov adx, ebx   
1481 [0x5c9]: line: 213 movl 0   
1482 [0x5ca]:           movn #4   
1484 [0x5cc]:           movn #1   
1486 [0x5ce]:           movi #0, adx   
1488 [0x5d0]:           iaload ebx, adx   
1489 [0x5d1]:           rstore ebx   
1490 [0x5d2]:           movl 0   
1491 [0x5d3]:           movn #0   
1493 [0x5d5]:           movi #0, adx   
1495 [0x5d7]:           iaload ecx, adx   
1496 [0x5d8]:           loadval ebx   
1497 [0x5d9]:           sub ecx, ebx -> ebx   
1498 [0x5da]:           rmov adx, ebx   
1499 [0x5db]:           nop   
1500 [0x5dc]: line: 216 movl 0   
1501 [0x5dd]:           movn #1   
1503 [0x5df]:           movi #0, adx   
1505 [0x5e1]:           iaload ebx, adx   
1506 [0x5e2]:           rstore ebx   
1507 [0x5e3]:           movi #0, ebx   
1509 [0x5e5]:           loadval ecx   
1510 [0x5e6]:           lt ecx, ebx   
1511 [0x5e7]:           movr ebx, cmt   
1512 [0x5e8]:           skpe ebx // pc = 1551   
1513 [0x5e9]:           movl 0   
1514 [0x5ea]:           movn #0   
1516 [0x5ec]:           movi #0, adx   
1518 [0x5ee]:           iaload ebx, adx   
1519 [0x5ef]:           rstore ebx   
1520 [0x5f0]:           movi #0, ebx   
1522 [0x5f2]:           loadval ecx   
1523 [0x5f3]:           lt ecx, ebx   
1524 [0x5f4]:           movr ebx, cmt   
1525 [0x5f5]:           skpe ebx // pc = 1551   
1526 [0x5f6]:           movl 0   
1527 [0x5f7]:           movn #1   
1529 [0x5f9]:           movi #0, adx   
1531 [0x5fb]:           iaload ebx, adx   
1532 [0x5fc]:           rstore ebx   
1533 [0x5fd]:           movi #64, ebx   
1535 [0x5ff]:           loadval ecx   
1536 [0x600]:           gt ecx, ebx   
1537 [0x601]:           movr ebx, cmt   
1538 [0x602]:           skpe ebx // pc = 1551   
1539 [0x603]:           movl 0   
1540 [0x604]:           movn #0   
1542 [0x606]:           movi #0, adx   
1544 [0x608]:           iaload ebx, adx   
1545 [0x609]:           rstore ebx   
1546 [0x60a]:           movi #128, ebx   
1548 [0x60c]:           loadval ecx   
1549 [0x60d]:           gt ecx, ebx   
1550 [0x60e]:           movr ebx, cmt   
1551 [0x60f]:           movr cmt, ebx   
1552 [0x610]:           jne 1561   
1553 [0x611]: line: 217 ldc ebx // 1   
1554 [0x612]:           movl 0   
1555 [0x613]:           movn #5   
1557 [0x615]:           movi #0, adx   
1559 [0x617]:           rmov adx, ebx   
1560 [0x618]:           jmp @1568   
1561 [0x619]: line: 219 ldc ebx // 0   
1562 [0x61a]:           movl 0   
1563 [0x61b]:           movn #5   
1565 [0x61d]:           movi #0, adx   
1567 [0x61f]:           rmov adx, ebx   
1568 [0x620]:           nop   
1569 [0x621]: line: 220 movl 0   
1570 [0x622]:           movn #17   
1572 [0x624]:           pushobj   
1573 [0x625]:           movl 0   
1574 [0x626]:           movn #6   
1576 [0x628]:           movi #0, adx   
1578 [0x62a]:           iaload ebx, adx   
1579 [0x62b]:           rstore ebx   
1580 [0x62c]:           call @3187 // <ui.support#fragment.invalidate_refrences>   
1581 [0x62d]:           nop   
1582 [0x62e]:           ret   


ui.support#view.draw[3218] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//view.sharp:224:8: note:  
		    def draw();
		       ^



function: ui.support#view.set_height[3219] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//view.sharp:226:8: note:  
		    def set_height(size: var) : view {
		       ^

0 [0x0]: line: 227 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #3   
4 [0x4]:           loadval ebx   
5 [0x5]:           movi #0, adx   
7 [0x7]:           rmov adx, ebx   
8 [0x8]: line: 228 movi #0, ebx   
10 [0xa]:           movl 0   
11 [0xb]:           movn #15   
13 [0xd]:           movi #0, adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]: line: 229 movl 0   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: ui.support#view.set_visibility[3220] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//view.sharp:232:8: note:  
		    def set_visibility(visible: var) : view {
		       ^

0 [0x0]: line: 233 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #5   
4 [0x4]:           loadval ebx   
5 [0x5]:           movi #0, adx   
7 [0x7]:           rmov adx, ebx   
8 [0x8]: line: 234 movi #0, ebx   
10 [0xa]:           movl 0   
11 [0xb]:           movn #15   
13 [0xd]:           movi #0, adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]: line: 235 movl 0   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: ui.support#view.to_left_of[3221] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//view.sharp:238:8: note:  
		    def to_left_of(id: var) : view {
		       ^

0 [0x0]: line: 239 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #7   
4 [0x4]:           loadval ebx   
5 [0x5]:           movi #0, adx   
7 [0x7]:           rmov adx, ebx   
8 [0x8]: line: 240 movi #0, ebx   
10 [0xa]:           movl 0   
11 [0xb]:           movn #15   
13 [0xd]:           movi #0, adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]: line: 241 movl 0   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: ui.support#view.to_start_of[3222] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//view.sharp:244:8: note:  
		    def to_start_of(id: var) : view {
		       ^

0 [0x0]: line: 245 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #8   
4 [0x4]:           loadval ebx   
5 [0x5]:           movi #0, adx   
7 [0x7]:           rmov adx, ebx   
8 [0x8]: line: 246 movi #0, ebx   
10 [0xa]:           movl 0   
11 [0xb]:           movn #15   
13 [0xd]:           movi #0, adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]: line: 247 movl 0   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: ui.support#view.to_right_of[3223] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//view.sharp:250:8: note:  
		    def to_right_of(id: var) : view {
		       ^

0 [0x0]: line: 251 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #11   
4 [0x4]:           loadval ebx   
5 [0x5]:           movi #0, adx   
7 [0x7]:           rmov adx, ebx   
8 [0x8]: line: 252 movi #0, ebx   
10 [0xa]:           movl 0   
11 [0xb]:           movn #15   
13 [0xd]:           movi #0, adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]: line: 253 movl 0   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: ui.support#view.to_top_of[3224] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//view.sharp:256:8: note:  
		    def to_top_of(id: var) : view {
		       ^

0 [0x0]: line: 257 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #9   
4 [0x4]:           loadval ebx   
5 [0x5]:           movi #0, adx   
7 [0x7]:           rmov adx, ebx   
8 [0x8]: line: 258 movi #0, ebx   
10 [0xa]:           movl 0   
11 [0xb]:           movn #15   
13 [0xd]:           movi #0, adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]: line: 259 movl 0   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: ui.support#view.to_bottom_of[3225] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//view.sharp:262:8: note:  
		    def to_bottom_of(id: var) : view {
		       ^

0 [0x0]: line: 263 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #10   
4 [0x4]:           loadval ebx   
5 [0x5]:           movi #0, adx   
7 [0x7]:           rmov adx, ebx   
8 [0x8]: line: 264 movi #0, ebx   
10 [0xa]:           movl 0   
11 [0xb]:           movn #15   
13 [0xd]:           movi #0, adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]: line: 265 movl 0   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: ui.support#view.set_gravity[3226] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//view.sharp:268:8: note:  
		    def set_gravity(grav: var) : view {
		       ^

0 [0x0]: line: 269 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #14   
4 [0x4]:           loadval ebx   
5 [0x5]:           movi #0, adx   
7 [0x7]:           rmov adx, ebx   
8 [0x8]: line: 270 movi #0, ebx   
10 [0xa]:           movl 0   
11 [0xb]:           movn #15   
13 [0xd]:           movi #0, adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]: line: 271 movl 0   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: ui.support#view.above[3227] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//view.sharp:274:8: note:  
		    def above(id: var) : view {
		       ^

0 [0x0]: line: 275 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #12   
4 [0x4]:           loadval ebx   
5 [0x5]:           movi #0, adx   
7 [0x7]:           rmov adx, ebx   
8 [0x8]: line: 276 movi #0, ebx   
10 [0xa]:           movl 0   
11 [0xb]:           movn #15   
13 [0xd]:           movi #0, adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]: line: 277 movl 0   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: ui.support#view.below[3228] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//view.sharp:280:8: note:  
		    def below(id: var) : view {
		       ^

0 [0x0]: line: 281 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #13   
4 [0x4]:           loadval ebx   
5 [0x5]:           movi #0, adx   
7 [0x7]:           rmov adx, ebx   
8 [0x8]: line: 282 movi #0, ebx   
10 [0xa]:           movl 0   
11 [0xb]:           movn #15   
13 [0xd]:           movi #0, adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]: line: 283 movl 0   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: ui.support#view.set_margin_left[3229] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//view.sharp:286:8: note:  
		    def set_margin_left(size: var) : view {
		       ^

0 [0x0]: line: 287 movl 0   
1 [0x1]:           movn #4   
3 [0x3]:           pushobj   
4 [0x4]:           pushnull    
5 [0x5]:           itest ebx   
6 [0x6]:           movr cmt, ebx   
7 [0x7]:           jne 15   
8 [0x8]: line: 288 new_class @125 // ui.support#margin   
9 [0x9]:           dup    
10 [0xa]:           call @3203 // <ui.support#margin.margin>   
11 [0xb]:           movl 0   
12 [0xc]:           movn #4   
14 [0xe]:           popobj   
15 [0xf]:           nop   
16 [0x10]: line: 289 ipushl #1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #4   
20 [0x14]:           movn #0   
22 [0x16]:           loadval ebx   
23 [0x17]:           movi #0, adx   
25 [0x19]:           rmov adx, ebx   
26 [0x1a]: line: 290 movi #0, ebx   
28 [0x1c]:           movl 0   
29 [0x1d]:           movn #15   
31 [0x1f]:           movi #0, adx   
33 [0x21]:           rmov adx, ebx   
34 [0x22]: line: 291 movl 0   
35 [0x23]:           returnobj   
36 [0x24]:           ret   


function: ui.support#view.set_margin_right[3230] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//view.sharp:294:8: note:  
		    def set_margin_right(size: var) : view {
		       ^

0 [0x0]: line: 295 movl 0   
1 [0x1]:           movn #4   
3 [0x3]:           pushobj   
4 [0x4]:           pushnull    
5 [0x5]:           itest ebx   
6 [0x6]:           movr cmt, ebx   
7 [0x7]:           jne 15   
8 [0x8]: line: 296 new_class @125 // ui.support#margin   
9 [0x9]:           dup    
10 [0xa]:           call @3203 // <ui.support#margin.margin>   
11 [0xb]:           movl 0   
12 [0xc]:           movn #4   
14 [0xe]:           popobj   
15 [0xf]:           nop   
16 [0x10]: line: 297 ipushl #1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #4   
20 [0x14]:           movn #1   
22 [0x16]:           loadval ebx   
23 [0x17]:           movi #0, adx   
25 [0x19]:           rmov adx, ebx   
26 [0x1a]: line: 298 movi #0, ebx   
28 [0x1c]:           movl 0   
29 [0x1d]:           movn #15   
31 [0x1f]:           movi #0, adx   
33 [0x21]:           rmov adx, ebx   
34 [0x22]: line: 299 movl 0   
35 [0x23]:           returnobj   
36 [0x24]:           ret   


function: ui.support#view.set_margin_top[3231] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//view.sharp:302:8: note:  
		    def set_margin_top(size: var) : view {
		       ^

0 [0x0]: line: 303 movl 0   
1 [0x1]:           movn #4   
3 [0x3]:           pushobj   
4 [0x4]:           pushnull    
5 [0x5]:           itest ebx   
6 [0x6]:           movr cmt, ebx   
7 [0x7]:           jne 15   
8 [0x8]: line: 304 new_class @125 // ui.support#margin   
9 [0x9]:           dup    
10 [0xa]:           call @3203 // <ui.support#margin.margin>   
11 [0xb]:           movl 0   
12 [0xc]:           movn #4   
14 [0xe]:           popobj   
15 [0xf]:           nop   
16 [0x10]: line: 305 ipushl #1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #4   
20 [0x14]:           movn #2   
22 [0x16]:           loadval ebx   
23 [0x17]:           movi #0, adx   
25 [0x19]:           rmov adx, ebx   
26 [0x1a]: line: 306 movi #0, ebx   
28 [0x1c]:           movl 0   
29 [0x1d]:           movn #15   
31 [0x1f]:           movi #0, adx   
33 [0x21]:           rmov adx, ebx   
34 [0x22]: line: 307 movl 0   
35 [0x23]:           returnobj   
36 [0x24]:           ret   


function: ui.support#view.set_margin_bottom[3232] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//view.sharp:310:8: note:  
		    def set_margin_bottom(size: var) : view {
		       ^

0 [0x0]: line: 311 movl 0   
1 [0x1]:           movn #4   
3 [0x3]:           pushobj   
4 [0x4]:           pushnull    
5 [0x5]:           itest ebx   
6 [0x6]:           movr cmt, ebx   
7 [0x7]:           jne 15   
8 [0x8]: line: 312 new_class @125 // ui.support#margin   
9 [0x9]:           dup    
10 [0xa]:           call @3203 // <ui.support#margin.margin>   
11 [0xb]:           movl 0   
12 [0xc]:           movn #4   
14 [0xe]:           popobj   
15 [0xf]:           nop   
16 [0x10]: line: 313 ipushl #1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #4   
20 [0x14]:           movn #3   
22 [0x16]:           loadval ebx   
23 [0x17]:           movi #0, adx   
25 [0x19]:           rmov adx, ebx   
26 [0x1a]: line: 314 movi #0, ebx   
28 [0x1c]:           movl 0   
29 [0x1d]:           movn #15   
31 [0x1f]:           movi #0, adx   
33 [0x21]:           rmov adx, ebx   
34 [0x22]: line: 315 movl 0   
35 [0x23]:           returnobj   
36 [0x24]:           ret   


constructor: ui.support#window.window[3233] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//window.sharp:17:11: note:  
		    window(name : _int8[]) {
		          ^

0 [0x0]:         new_class @154 // std#list<ui.support#fragment>   
1 [0x1]:         dup    
2 [0x2]:         call @3475 // <std#list<ui.support#fragment>.list>   
3 [0x3]:         movl 0   
4 [0x4]:         movn #0   
6 [0x6]:         popobj   
7 [0x7]:         new_class @154 // std#list<ui.support#fragment>   
8 [0x8]:         dup    
9 [0x9]:         call @3475 // <std#list<ui.support#fragment>.list>   
10 [0xa]:         movl 0   
11 [0xb]:         movn #1   
13 [0xd]:         popobj   
14 [0xe]:         pushl 0   
15 [0xf]: line: 18 pushl 1   
16 [0x10]:          movl 0   
17 [0x11]:          movn #2   
19 [0x13]:          popobj   
20 [0x14]: line: 19 movl 0   
21 [0x15]:          movn #5   
23 [0x17]:          pushobj   
24 [0x18]:          pushnull    
25 [0x19]:          itest ebx   
26 [0x1a]:          movr cmt, ebx   
27 [0x1b]:          jne 35   
28 [0x1c]: line: 20 new_class @103 // ui.driver#ssd1306   
29 [0x1d]:          dup    
30 [0x1e]:          call @3154 // <ui.driver#ssd1306.ssd1306>   
31 [0x1f]:          movl 0   
32 [0x20]:          movn #5   
34 [0x22]:          popobj   
35 [0x23]:          nop   
36 [0x24]:          ret   


function: ui.support#window.start_ui[3234] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//window.sharp:23:22: note:  
		    public static def start_ui() {
		                     ^

0 [0x0]: line: 24 call @3168 // <ui.res#resources.setup>   
1 [0x1]: line: 25 call @3161 // <ui.layout.config#__srt_global.configure_layout>   
2 [0x2]: line: 26 call @3162 // <ui.layout.config#__srt_global.start>   
3 [0x3]:          ret   


function: ui.support#window.navigate[3235] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//window.sharp:29:8: note:  
		    def navigate(screen: var) {
		       ^

0 [0x0]: line: 30 movl 2   
1 [0x1]:          del   
2 [0x2]: line: 31 istorel 0, fp+3   
4 [0x4]:          ipushl #3   
5 [0x5]:          movl 0   
6 [0x6]:          movn #0   
8 [0x8]:          pushobj   
9 [0x9]:          call @3492 // <std#list<ui.support#fragment>.size>   
10 [0xa]:          loadval ebx   
11 [0xb]:          loadval ecx   
12 [0xc]:          lt ecx, ebx   
13 [0xd]:          movr ebx, cmt   
14 [0xe]:          movr cmt, ebx   
15 [0xf]:          jne 45   
16 [0x10]: line: 32 movl 0   
17 [0x11]:          movn #0   
19 [0x13]:          pushobj   
20 [0x14]:          ipushl #3   
21 [0x15]:          call @3482 // <std#list<ui.support#fragment>.at>   
22 [0x16]:          popobj2    
23 [0x17]:          movn #2   
25 [0x19]:          movi #0, adx   
27 [0x1b]:          iaload ebx, adx   
28 [0x1c]:          rstore ebx   
29 [0x1d]:          loadl ebx, fp+1   
30 [0x1e]:          loadval ecx   
31 [0x1f]:          test ecx, ebx   
32 [0x20]:          jne 41   
33 [0x21]: line: 33 movl 0   
34 [0x22]:          movn #0   
36 [0x24]:          pushobj   
37 [0x25]:          ipushl #3   
38 [0x26]:          call @3482 // <std#list<ui.support#fragment>.at>   
39 [0x27]:          popobj2    
40 [0x28]:          smovr_3 fp+2   
41 [0x29]:          nop   
42 [0x2a]:          iaddl 1, fp@3   
44 [0x2c]:          jmp @4   
45 [0x2d]: line: 36 movl 2   
46 [0x2e]:          checknull   
47 [0x2f]:          not ebx, ebx   
48 [0x30]:          movr cmt, ebx   
49 [0x31]:          jne 58   
50 [0x32]: line: 37 pushl 2   
51 [0x33]:          invoke_delegate 3200 { static=0, args=0 }   
53 [0x35]: line: 38 pushl 2   
54 [0x36]:          movl 0   
55 [0x37]:          movn #4   
57 [0x39]:          popobj   
58 [0x3a]:          nop   
59 [0x3b]:          ret   


function: ui.support#window.starter_fragment[3236] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//window.sharp:42:8: note:  
		    def starter_fragment(frag: var) {
		       ^

0 [0x0]: line: 43 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #3   
4 [0x4]:          loadval ebx   
5 [0x5]:          movi #0, adx   
7 [0x7]:          rmov adx, ebx   
8 [0x8]:          ret   


function: ui.support#window.draw_text[3237] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//window.sharp:46:18: note:  
		    protected def draw_text(tv: text_view) {
		                 ^

0 [0x0]: line: 47 movl 0   
1 [0x1]:          movn #5   
3 [0x3]:          pushobj   
4 [0x4]:          movl 1   
5 [0x5]:          movn #0   
7 [0x7]:          movi #0, adx   
9 [0x9]:          iaload ebx, adx   
10 [0xa]:          rstore ebx   
11 [0xb]:          movl 1   
12 [0xc]:          movn #1   
14 [0xe]:          movi #0, adx   
16 [0x10]:          iaload ebx, adx   
17 [0x11]:          rstore ebx   
18 [0x12]:          movl 1   
19 [0x13]:          movn #19   
21 [0x15]:          movi #0, adx   
23 [0x17]:          iaload ebx, adx   
24 [0x18]:          rstore ebx   
25 [0x19]:          movl 1   
26 [0x1a]:          movn #2   
28 [0x1c]:          movi #0, adx   
30 [0x1e]:          iaload ebx, adx   
31 [0x1f]:          rstore ebx   
32 [0x20]:          pushl 1   
33 [0x21]:          call @3206 // <ui.support#text_view.transform_width>   
34 [0x22]:          movl 1   
35 [0x23]:          movn #18   
37 [0x25]:          pushobj   
38 [0x26]:          call @2961 // <std#string.get_data>   
39 [0x27]:          call @3159 // <ui.driver#ssd1306.draw_word>   
40 [0x28]:          ret   


function: ui.support#window.draw_img[3238] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//window.sharp:50:18: note:  
		    protected def draw_img(iv: image_view) {
		                 ^

0 [0x0]: line: 51 movl 1   
1 [0x1]:          movn #18   
3 [0x3]:          smovr_3 fp+2   
4 [0x4]: line: 52 movl 0   
5 [0x5]:          movn #5   
7 [0x7]:          pushobj   
8 [0x8]:          movl 1   
9 [0x9]:          movn #0   
11 [0xb]:          movi #0, adx   
13 [0xd]:          iaload ebx, adx   
14 [0xe]:          rstore ebx   
15 [0xf]:          movl 1   
16 [0x10]:          movn #1   
18 [0x12]:          movi #0, adx   
20 [0x14]:          iaload ebx, adx   
21 [0x15]:          rstore ebx   
22 [0x16]:          movl 1   
23 [0x17]:          movn #2   
25 [0x19]:          movi #0, adx   
27 [0x1b]:          iaload ebx, adx   
28 [0x1c]:          rstore ebx   
29 [0x1d]:          movl 1   
30 [0x1e]:          movn #3   
32 [0x20]:          movi #0, adx   
34 [0x22]:          iaload ebx, adx   
35 [0x23]:          rstore ebx   
36 [0x24]:          movl 2   
37 [0x25]:          movn #2   
39 [0x27]:          movi #0, adx   
41 [0x29]:          iaload ebx, adx   
42 [0x2a]:          rstore ebx   
43 [0x2b]:          movl 2   
44 [0x2c]:          movn #3   
46 [0x2e]:          movi #0, adx   
48 [0x30]:          iaload ebx, adx   
49 [0x31]:          rstore ebx   
50 [0x32]:          movl 1   
51 [0x33]:          movn #18   
53 [0x35]:          movn #1   
55 [0x37]:          pushobj   
56 [0x38]:          call @3158 // <ui.driver#ssd1306.draw_img>   
57 [0x39]:          ret   


function: ui.support#window.show[3239] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//window.sharp:55:8: note:  
		    def show() {
		       ^

0 [0x0]: line: 56 pushl 0   
1 [0x1]:          movl 0   
2 [0x2]:          movn #3   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          rstore ebx   
8 [0x8]:          call @3235 // <ui.support#window.navigate>   
9 [0x9]: line: 57 pushl 0   
10 [0xa]:          call @3241 // <ui.support#window.start_updater>   
11 [0xb]:          ret   


function: ui.support#window.add_fragment[3240] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//window.sharp:60:8: note:  
		    def add_fragment(frag : fragment) {
		       ^

0 [0x0]: line: 61 pushl 1   
1 [0x1]:          invoke_delegate 3191 { static=0, args=0 }   
3 [0x3]: line: 62 movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          pushobj   
7 [0x7]:          pushl 1   
8 [0x8]:          call @3489 // <std#list<ui.support#fragment>.add>   
9 [0x9]:          ret   


function: ui.support#window.start_updater[3241] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//window.sharp:65:8: note:  
		    def start_updater() {
		       ^

0 [0x0]: line: 66 call @1861 // <std.io#thread.yield>   
1 [0x1]: line: 67 movl 0   
2 [0x2]: line: 68 movn #5   
4 [0x4]:          pushobj   
5 [0x5]:          call @3155 // <ui.driver#ssd1306.clear>   
6 [0x6]: line: 70 movl 0   
7 [0x7]:          movn #4   
9 [0x9]:          pushobj   
10 [0xa]:          pushnull    
11 [0xb]:          itest ebx   
12 [0xc]:          not ebx, ebx   
13 [0xd]:          movr cmt, ebx   
14 [0xe]:          jne 20   
15 [0xf]: line: 71 movl 0   
16 [0x10]:          movn #4   
18 [0x12]:          pushobj   
19 [0x13]:          call @3190 // <ui.support#fragment.draw>   
20 [0x14]:          nop   
21 [0x15]: line: 74 movl 0   
22 [0x16]:          movn #5   
24 [0x18]:          pushobj   
25 [0x19]:          call @3157 // <ui.driver#ssd1306.update_display>   
26 [0x1a]: line: 75 istore 30   
28 [0x1c]:          call @1856 // <std.io#thread.sleep>   
29 [0x1d]:          jmp @0   
30 [0x1e]:          ret   


constructor: ui.support#window.window[3242] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//window.sharp:9:6: note:  
		class window {
		     ^

0 [0x0]:         new_class @154 // std#list<ui.support#fragment>   
1 [0x1]:         dup    
2 [0x2]:         call @3475 // <std#list<ui.support#fragment>.list>   
3 [0x3]:         movl 0   
4 [0x4]:         movn #0   
6 [0x6]:         popobj   
7 [0x7]:         new_class @154 // std#list<ui.support#fragment>   
8 [0x8]:         dup    
9 [0x9]:         call @3475 // <std#list<ui.support#fragment>.list>   
10 [0xa]:         movl 0   
11 [0xb]:         movn #1   
13 [0xd]:         popobj   
14 [0xe]:         ret   


std#loopable<std#string>.get_elements[3243] params(0) in file: lib\support\0.2.805/loopable.sharp:4:8: note:  
		    def get_elements() : t[];
		       ^



constructor: std#loopable<std#string>.loopable[3244] params(0) in file: lib\support\0.2.805/loopable.sharp:3:10: note:  
		interface loopable<t> {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#list<std#string>.list[3245] params(0) in file: lib\support\0.2.805/list.sharp:13:9: note:  
		    list() {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 14 movi #10, ebx   
3 [0x3]:          new_classarray ebx  // std#string[]   
4 [0x4]:          movl 0   
5 [0x5]:          movn #1   
7 [0x7]:          popobj   
8 [0x8]:          ret   


constructor: std#list<std#string>.list[3246] params(1) in file: lib\support\0.2.805/list.sharp:17:9: note:  
		    list(starting_capacity: var) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 18 loadl ebx, fp+1   
2 [0x2]:          new_classarray ebx  // std#string[]   
3 [0x3]:          movl 0   
4 [0x4]:          movn #1   
6 [0x6]:          popobj   
7 [0x7]:          ret   


constructor: std#list<std#string>.list[3247] params(1) in file: lib\support\0.2.805/list.sharp:21:9: note:  
		    list(initial_data: t[]) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 22 pushl 0   
2 [0x2]:          pushl 1   
3 [0x3]:          call @3258 // <std#list<std#string>.add_all>   
4 [0x4]:          ret   


function: std#list<std#string>.empty[3248] params(0) in file: lib\support\0.2.805/list.sharp:25:8: note:  
		    def empty() := n_elements == 0;
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          return_val cmt   
12 [0xc]:          ret   


function: std#list<std#string>.set_compact[3249] params(1) in file: lib\support\0.2.805/list.sharp:27:8: note:  
		    def set_compact(compact_array: var) {
		       ^

0 [0x0]: line: 28 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #2   
4 [0x4]:          loadval ebx   
5 [0x5]:          movi #0, adx   
7 [0x7]:          rmov adx, ebx   
8 [0x8]:          ret   


function: std#list<std#string>.get_elements[3250] params(0) in file: lib\support\0.2.805/list.sharp:31:8: note:  
		    def get_elements() : t[] {
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          jne 17   
12 [0xc]:          pushnull    
13 [0xd]:          popobj2    
14 [0xe]:          returnobj   
15 [0xf]:          ret   
16 [0x10]:          jmp @34   
17 [0x11]: line: 33 movl 0   
18 [0x12]:          movn #1   
20 [0x14]:          pushobj   
21 [0x15]:          istore 0   
23 [0x17]:          movl 0   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          iaload ebx, adx   
29 [0x1d]:          rstore ebx   
30 [0x1e]:          call @1755 // <std.io#__srt_global.copy>   
31 [0x1f]:          popobj2    
32 [0x20]:          returnobj   
33 [0x21]:          ret   
34 [0x22]:          nop   


overload function: std#list<std#string>.operator[[3251] params(1) in file: lib\support\0.2.805/list.sharp:36:8: note:  
		    def operator[](index: var): t {
		       ^

0 [0x0]: line: 37 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 25   
18 [0x12]: line: 38 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:          dup    
20 [0x14]:          pushl 0   
21 [0x15]:          ipushl #1   
22 [0x16]:          call @3271 // <std#list<std#string>.out_of_bounds_msg>   
23 [0x17]:          call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:          throw    
25 [0x19]:          nop   
26 [0x1a]: line: 39 movl 0   
27 [0x1b]:          movn #1   
29 [0x1d]:          pushobj   
30 [0x1e]:          loadl ebx, fp+1   
31 [0x1f]:          popobj2    
32 [0x20]:          movr adx, ebx   
33 [0x21]:          chklen adx   
34 [0x22]:          movnd adx   
35 [0x23]:          returnobj   
36 [0x24]:          ret   


function: std#list<std#string>.at[3252] params(1) in file: lib\support\0.2.805/list.sharp:42:8: note:  
		    def at(index: var): t {
		       ^

0 [0x0]: line: 43 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 25   
18 [0x12]: line: 44 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:          dup    
20 [0x14]:          pushl 0   
21 [0x15]:          ipushl #1   
22 [0x16]:          call @3271 // <std#list<std#string>.out_of_bounds_msg>   
23 [0x17]:          call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:          throw    
25 [0x19]:          nop   
26 [0x1a]: line: 45 movl 0   
27 [0x1b]:          movn #1   
29 [0x1d]:          pushobj   
30 [0x1e]:          loadl ebx, fp+1   
31 [0x1f]:          popobj2    
32 [0x20]:          movr adx, ebx   
33 [0x21]:          chklen adx   
34 [0x22]:          movnd adx   
35 [0x23]:          returnobj   
36 [0x24]:          ret   


function: std#list<std#string>.last[3253] params(0) in file: lib\support\0.2.805/list.sharp:48:8: note:  
		    def last(): t {
		       ^

0 [0x0]: line: 49 pushl 0   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          rstore ebx   
8 [0x8]:          movi #1, ebx   
10 [0xa]:          loadval ecx   
11 [0xb]:          sub ecx, ebx -> ebx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @3252 // <std#list<std#string>.at>   
14 [0xe]:          popobj2    
15 [0xf]:          returnobj   
16 [0x10]:          ret   


function: std#list<std#string>.put[3254] params(2) in file: lib\support\0.2.805/list.sharp:52:8: note:  
		    def put(index: var, element: t) : t {
		       ^

0 [0x0]: line: 53 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 25   
18 [0x12]: line: 54 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:          dup    
20 [0x14]:          pushl 0   
21 [0x15]:          ipushl #1   
22 [0x16]:          call @3271 // <std#list<std#string>.out_of_bounds_msg>   
23 [0x17]:          call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:          throw    
25 [0x19]:          nop   
26 [0x1a]: line: 56 movl 0   
27 [0x1b]:          movn #1   
29 [0x1d]:          pushobj   
30 [0x1e]:          loadl ebx, fp+1   
31 [0x1f]:          popobj2    
32 [0x20]:          movr adx, ebx   
33 [0x21]:          chklen adx   
34 [0x22]:          movnd adx   
35 [0x23]:          smovr_3 fp+3   
36 [0x24]: line: 57 pushl 2   
37 [0x25]:          movl 0   
38 [0x26]:          movn #1   
40 [0x28]:          pushobj   
41 [0x29]:          loadl ebx, fp+1   
42 [0x2a]:          popobj2    
43 [0x2b]:          movr adx, ebx   
44 [0x2c]:          chklen adx   
45 [0x2d]:          movnd adx   
46 [0x2e]:          popobj   
47 [0x2f]: line: 58 movl 3   
48 [0x30]:          returnobj   
49 [0x31]:          ret   


function: std#list<std#string>.expand[3255] params(0) in file: lib\support\0.2.805/list.sharp:61:16: note:  
		    private def expand() {
		               ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #2   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 24   
8 [0x8]: line: 63 movl 0   
9 [0x9]:          movn #1   
11 [0xb]:          pushobj   
12 [0xc]:          movl 0   
13 [0xd]:          movn #1   
15 [0xf]:          sizeof ebx   
16 [0x10]:          rstore ebx   
17 [0x11]:          movi #128, ebx   
19 [0x13]:          loadval ecx   
20 [0x14]:          add ecx, ebx -> ebx   
21 [0x15]:          rstore ebx   
22 [0x16]:          call @1735 // <std.io#__srt_global.realloc>   
23 [0x17]:          jmp @51   
24 [0x18]: line: 65 movl 0   
25 [0x19]:          movn #1   
27 [0x1b]:          pushobj   
28 [0x1c]:          movl 0   
29 [0x1d]:          movn #1   
31 [0x1f]:          sizeof ebx   
32 [0x20]:          rstore ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #1   
36 [0x24]:          sizeof ebx   
37 [0x25]:          rstore ebx   
38 [0x26]:          movi #4, ebx   
40 [0x28]:          loadval ecx   
41 [0x29]:          shr ecx, ebx -> ebx   
42 [0x2a]:          loadval ecx   
43 [0x2b]:          add ecx, ebx -> ebx   
44 [0x2c]:          rstore ebx   
45 [0x2d]:          movi #128, ebx   
47 [0x2f]:          loadval ecx   
48 [0x30]:          add ecx, ebx -> ebx   
49 [0x31]:          rstore ebx   
50 [0x32]:          call @1735 // <std.io#__srt_global.realloc>   
51 [0x33]:          nop   
52 [0x34]:          ret   


function: std#list<std#string>.clear[3256] params(0) in file: lib\support\0.2.805/list.sharp:68:8: note:  
		    def clear() {
		       ^

0 [0x0]: line: 69 movi #10, ebx   
2 [0x2]:          new_classarray ebx  // std#string[]   
3 [0x3]:          movl 0   
4 [0x4]:          movn #1   
6 [0x6]:          popobj   
7 [0x7]: line: 70 movi #0, ebx   
9 [0x9]:          movl 0   
10 [0xa]:          movn #0   
12 [0xc]:          movi #0, adx   
14 [0xe]:          rmov adx, ebx   
15 [0xf]:          ret   


function: std#list<std#string>.add_all[3257] params(1) in file: lib\support\0.2.805/list.sharp:73:8: note:  
		    def add_all(lst: list<t>) {
		       ^

0 [0x0]: line: 74 movl 1   
1 [0x1]:          movn #1   
3 [0x3]:          pushobj   
4 [0x4]:          istore 0   
6 [0x6]:          movl 1   
7 [0x7]:          movn #0   
9 [0x9]:          movi #0, adx   
11 [0xb]:          iaload ebx, adx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @1755 // <std.io#__srt_global.copy>   
14 [0xe]:          popobj2    
15 [0xf]:          movi #64, cmt   
17 [0x11]:          cast cmt   
18 [0x12]:          pushobj   
19 [0x13]:          movl 0   
20 [0x14]:          movn #1   
22 [0x16]:          popobj   
23 [0x17]: line: 75 movl 1   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          iaload ebx, adx   
29 [0x1d]:          movl 0   
30 [0x1e]:          movn #0   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          ret   


function: std#list<std#string>.add_all[3258] params(1) in file: lib\support\0.2.805/list.sharp:78:8: note:  
		    def add_all(lst: t[]) {
		       ^

0 [0x0]: line: 79 movl 1   
1 [0x1]:          checknull   
2 [0x2]:          not ebx, ebx   
3 [0x3]:          movr cmt, ebx   
4 [0x4]:          jne 30   
5 [0x5]: line: 80 pushl 1   
6 [0x6]:          istore 0   
8 [0x8]:          movl 1   
9 [0x9]:          sizeof ebx   
10 [0xa]:          rstore ebx   
11 [0xb]:          call @1755 // <std.io#__srt_global.copy>   
12 [0xc]:          popobj2    
13 [0xd]:          movi #64, cmt   
15 [0xf]:          cast cmt   
16 [0x10]:          pushobj   
17 [0x11]:          movl 0   
18 [0x12]:          movn #1   
20 [0x14]:          popobj   
21 [0x15]: line: 81 movl 1   
22 [0x16]:          sizeof ebx   
23 [0x17]:          movl 0   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          rmov adx, ebx   
29 [0x1d]:          jmp @45   
30 [0x1e]: line: 83 movi #0, ebx   
32 [0x20]:          movl 0   
33 [0x21]:          movn #0   
35 [0x23]:          movi #0, adx   
37 [0x25]:          rmov adx, ebx   
38 [0x26]: line: 84 movi #10, ebx   
40 [0x28]:          new_classarray ebx  // std#string[]   
41 [0x29]:          movl 0   
42 [0x2a]:          movn #1   
44 [0x2c]:          popobj   
45 [0x2d]:          nop   
46 [0x2e]:          ret   


function: std#list<std#string>.add[3259] params(1) in file: lib\support\0.2.805/list.sharp:88:8: note:  
		    def add(element: t) {
		       ^

0 [0x0]: line: 89 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 0   
8 [0x8]:          movn #1   
10 [0xa]:          sizeof ebx   
11 [0xb]:          loadval ecx   
12 [0xc]:          gte ecx, ebx   
13 [0xd]:          movr ebx, cmt   
14 [0xe]:          movr cmt, ebx   
15 [0xf]:          jne 18   
16 [0x10]: line: 90 pushl 0   
17 [0x11]:          call @3255 // <std#list<std#string>.expand>   
18 [0x12]:          nop   
19 [0x13]: line: 91 pushl 1   
20 [0x14]:          movl 0   
21 [0x15]:          movn #1   
23 [0x17]:          pushobj   
24 [0x18]:          movl 0   
25 [0x19]:          movn #0   
27 [0x1b]:          movi #0, adx   
29 [0x1d]:          iaload ebx, adx   
30 [0x1e]:          movr egx, ebx   
31 [0x1f]:          inc ebx   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          movr ebx, egx   
36 [0x24]:          popobj2    
37 [0x25]:          movr adx, ebx   
38 [0x26]:          chklen adx   
39 [0x27]:          movnd adx   
40 [0x28]:          popobj   
41 [0x29]:          ret   


function: std#list<std#string>.indexof[3260] params(1) in file: lib\support\0.2.805/list.sharp:94:8: note:  
		    def indexof(element: t) : var {
		       ^

0 [0x0]: line: 95 istorel 0, fp+2   
2 [0x2]:          ipushl #2   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          movi #0, adx   
8 [0x8]:          iaload ebx, adx   
9 [0x9]:          loadval ecx   
10 [0xa]:          lt ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 36   
14 [0xe]: line: 96 pushl 1   
15 [0xf]:          movl 0   
16 [0x10]:          movn #1   
18 [0x12]:          pushobj   
19 [0x13]:          loadl ebx, fp+2   
20 [0x14]:          popobj2    
21 [0x15]:          movr adx, ebx   
22 [0x16]:          chklen adx   
23 [0x17]:          movnd adx   
24 [0x18]:          pushobj   
25 [0x19]:          call @2953 // <std#string.operator==>   
26 [0x1a]:          loadval ebx   
27 [0x1b]:          movr cmt, ebx   
28 [0x1c]:          jne 32   
29 [0x1d]: line: 97 loadl ebx, fp+2   
30 [0x1e]:          return_val ebx   
31 [0x1f]:          ret   
32 [0x20]:          nop   
33 [0x21]:          iaddl 1, fp@2   
35 [0x23]:          jmp @2   
36 [0x24]: line: 101 istorel -1, fp+0   
38 [0x26]:           ret   


function: std#list<std#string>.pop_back[3261] params(0) in file: lib\support\0.2.805/list.sharp:104:8: note:  
		    def pop_back() {
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #0, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 38   
14 [0xe]: line: 106 movl 1   
15 [0xf]:           del   
16 [0x10]: line: 107 pushl 1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           movl 0   
22 [0x16]:           movn #0   
24 [0x18]:           movi #0, adx   
26 [0x1a]:           iaload ebx, adx   
27 [0x1b]:           movr egx, ebx   
28 [0x1c]:           dec ebx   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           rmov adx, ebx   
32 [0x20]:           movr ebx, egx   
33 [0x21]:           popobj2    
34 [0x22]:           movr adx, ebx   
35 [0x23]:           chklen adx   
36 [0x24]:           movnd adx   
37 [0x25]:           popobj   
38 [0x26]:           nop   
39 [0x27]:           ret   


function: std#list<std#string>.size[3262] params(0) in file: lib\support\0.2.805/list.sharp:111:8: note:  
		    def size() := n_elements;
		       ^

0 [0x0]: line: 111 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std#list<std#string>.insert[3263] params(2) in file: lib\support\0.2.805/list.sharp:113:8: note:  
		    def insert(index: var, element: t) {
		       ^

0 [0x0]: line: 114 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gt ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 25   
18 [0x12]: line: 115 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:           dup    
20 [0x14]:           pushl 0   
21 [0x15]:           ipushl #1   
22 [0x16]:           call @3271 // <std#list<std#string>.out_of_bounds_msg>   
23 [0x17]:           call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:           throw    
25 [0x19]:           nop   
26 [0x1a]: line: 117 movl 0   
27 [0x1b]:           movn #0   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           iaload ebx, adx   
32 [0x20]:           rstore ebx   
33 [0x21]:           movi #0, ebx   
35 [0x23]:           loadval ecx   
36 [0x24]:           test ecx, ebx   
37 [0x25]:           jne 42   
38 [0x26]: line: 118 pushl 0   
39 [0x27]:           pushl 2   
40 [0x28]:           call @3259 // <std#list<std#string>.add>   
41 [0x29]:           jmp @131   
42 [0x2a]: line: 120 movl 0   
43 [0x2b]:           movn #0   
45 [0x2d]:           movi #0, adx   
47 [0x2f]:           iaload ebx, adx   
48 [0x30]:           rstore ebx   
49 [0x31]:           movl 0   
50 [0x32]:           movn #1   
52 [0x34]:           sizeof ebx   
53 [0x35]:           loadval ecx   
54 [0x36]:           gte ecx, ebx   
55 [0x37]:           movr ebx, cmt   
56 [0x38]:           movr cmt, ebx   
57 [0x39]:           jne 60   
58 [0x3a]: line: 121 pushl 0   
59 [0x3b]:           call @3255 // <std#list<std#string>.expand>   
60 [0x3c]:           nop   
61 [0x3d]: line: 122 movl 0   
62 [0x3e]:           movn #0   
64 [0x40]:           movi #0, adx   
66 [0x42]:           iaload ebx, adx   
67 [0x43]:           movr egx, ebx   
68 [0x44]:           inc ebx   
69 [0x45]:           movi #0, adx   
71 [0x47]:           rmov adx, ebx   
72 [0x48]: line: 123 movl 0   
73 [0x49]:           movn #0   
75 [0x4b]:           movi #0, adx   
77 [0x4d]:           iaload ebx, adx   
78 [0x4e]:           rstore ebx   
79 [0x4f]:           movi #1, ebx   
81 [0x51]:           loadval ecx   
82 [0x52]:           sub ecx, ebx -> ebx   
83 [0x53]:           smovr_2 ebx, fp+3   
84 [0x54]:           ipushl #3   
85 [0x55]:           loadl ebx, fp+1   
86 [0x56]:           loadval ecx   
87 [0x57]:           gt ecx, ebx   
88 [0x58]:           movr ebx, cmt   
89 [0x59]:           movr cmt, ebx   
90 [0x5a]:           jne 120   
91 [0x5b]: line: 124 movl 0   
92 [0x5c]:           movn #1   
94 [0x5e]:           pushobj   
95 [0x5f]:           ipushl #3   
96 [0x60]:           movi #1, ebx   
98 [0x62]:           loadval ecx   
99 [0x63]:           sub ecx, ebx -> ebx   
100 [0x64]:           popobj2    
101 [0x65]:           movr adx, ebx   
102 [0x66]:           chklen adx   
103 [0x67]:           movnd adx   
104 [0x68]:           pushobj   
105 [0x69]:           movl 0   
106 [0x6a]:           movn #1   
108 [0x6c]:           pushobj   
109 [0x6d]:           loadl ebx, fp+3   
110 [0x6e]:           popobj2    
111 [0x6f]:           movr adx, ebx   
112 [0x70]:           chklen adx   
113 [0x71]:           movnd adx   
114 [0x72]:           popobj   
115 [0x73]:           loadl ebx, fp+3   
116 [0x74]:           movr egx, ebx   
117 [0x75]:           dec ebx   
118 [0x76]:           smovr_2 ebx, fp+3   
119 [0x77]:           jmp @84   
120 [0x78]: line: 125 pushl 2   
121 [0x79]:           movl 0   
122 [0x7a]:           movn #1   
124 [0x7c]:           pushobj   
125 [0x7d]:           loadl ebx, fp+1   
126 [0x7e]:           popobj2    
127 [0x7f]:           movr adx, ebx   
128 [0x80]:           chklen adx   
129 [0x81]:           movnd adx   
130 [0x82]:           popobj   
131 [0x83]:           nop   
132 [0x84]:           ret   


function: std#list<std#string>.find[3264] params(2) in file: lib\support\0.2.805/list.sharp:129:8: note:  
		    def find(comparer : t, find_func: (t, t)(var)) : t {
		       ^

0 [0x0]: line: 130 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 46   
14 [0xe]: line: 131 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 42   
31 [0x1f]: line: 132 movl 0   
32 [0x20]:           movn #1   
34 [0x22]:           pushobj   
35 [0x23]:           loadl ebx, fp+3   
36 [0x24]:           popobj2    
37 [0x25]:           movr adx, ebx   
38 [0x26]:           chklen adx   
39 [0x27]:           movnd adx   
40 [0x28]:           returnobj   
41 [0x29]:           ret   
42 [0x2a]:           nop   
43 [0x2b]:           iaddl 1, fp@3   
45 [0x2d]:           jmp @2   
46 [0x2e]: line: 136 movl 4   
47 [0x2f]:           del   
48 [0x30]: line: 137 movl 4   
49 [0x31]:           returnobj   
50 [0x32]:           ret   


function: std#list<std#string>.remove[3265] params(1) in file: lib\support\0.2.805/list.sharp:140:8: note:  
		    def remove(val: t) {
		       ^

0 [0x0]: line: 141 istorel 0, fp+2   
2 [0x2]:           ipushl #2   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 37   
14 [0xe]: line: 142 pushl 1   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+2   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           call @2953 // <std#string.operator==>   
26 [0x1a]:           loadval ebx   
27 [0x1b]:           movr cmt, ebx   
28 [0x1c]:           jne 33   
29 [0x1d]: line: 143 pushl 0   
30 [0x1e]:           ipushl #2   
31 [0x1f]:           call @3268 // <std#list<std#string>.remove_at>   
32 [0x20]: line: 144 ret   
33 [0x21]:           nop   
34 [0x22]:           iaddl 1, fp@2   
36 [0x24]:           jmp @2   
37 [0x25]:           ret   


function: std#list<std#string>.remove[3266] params(2) in file: lib\support\0.2.805/list.sharp:149:8: note:  
		    def remove(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 150 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 39   
14 [0xe]: line: 151 ipushl #2   
15 [0xf]:           pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           movnd adx   
25 [0x19]:           pushobj   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 35   
31 [0x1f]: line: 152 pushl 0   
32 [0x20]:           ipushl #3   
33 [0x21]:           call @3268 // <std#list<std#string>.remove_at>   
34 [0x22]: line: 153 ret   
35 [0x23]:           nop   
36 [0x24]:           iaddl 1, fp@3   
38 [0x26]:           jmp @2   
39 [0x27]:           ret   


function: std#list<std#string>.replace[3267] params(2) in file: lib\support\0.2.805/list.sharp:158:8: note:  
		    def replace(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 159 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 47   
14 [0xe]: line: 160 ipushl #2   
15 [0xf]:           pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           movnd adx   
25 [0x19]:           pushobj   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 43   
31 [0x1f]: line: 161 pushl 1   
32 [0x20]:           movl 0   
33 [0x21]:           movn #1   
35 [0x23]:           pushobj   
36 [0x24]:           loadl ebx, fp+3   
37 [0x25]:           popobj2    
38 [0x26]:           movr adx, ebx   
39 [0x27]:           chklen adx   
40 [0x28]:           movnd adx   
41 [0x29]:           popobj   
42 [0x2a]: line: 162 ret   
43 [0x2b]:           nop   
44 [0x2c]:           iaddl 1, fp@3   
46 [0x2e]:           jmp @2   
47 [0x2f]:           ret   


function: std#list<std#string>.remove_at[3268] params(1) in file: lib\support\0.2.805/list.sharp:167:8: note:  
		    def remove_at(index: var) {
		       ^

0 [0x0]: line: 168 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gte ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 25   
18 [0x12]: line: 169 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:           dup    
20 [0x14]:           pushl 0   
21 [0x15]:           ipushl #1   
22 [0x16]:           call @3271 // <std#list<std#string>.out_of_bounds_msg>   
23 [0x17]:           call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:           throw    
25 [0x19]:           nop   
26 [0x1a]: line: 171 movl 0   
27 [0x1b]:           movn #0   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           iaload ebx, adx   
32 [0x20]:           rstore ebx   
33 [0x21]:           loadl ebx, fp+1   
34 [0x22]:           loadval ecx   
35 [0x23]:           sub ecx, ebx -> ebx   
36 [0x24]:           rstore ebx   
37 [0x25]:           movi #1, ebx   
39 [0x27]:           loadval ecx   
40 [0x28]:           sub ecx, ebx -> ebx   
41 [0x29]:           smovr_2 ebx, fp+2   
42 [0x2a]: line: 172 ipushl #2   
43 [0x2b]:           movi #0, ebx   
45 [0x2d]:           loadval ecx   
46 [0x2e]:           gt ecx, ebx   
47 [0x2f]:           movr ebx, cmt   
48 [0x30]:           movr cmt, ebx   
49 [0x31]:           jne 73   
50 [0x32]: line: 173 movl 0   
51 [0x33]:           movn #1   
53 [0x35]:           pushobj   
54 [0x36]:           movl 0   
55 [0x37]:           movn #1   
57 [0x39]:           pushobj   
58 [0x3a]:           ipushl #1   
59 [0x3b]:           ipushl #1   
60 [0x3c]:           movi #1, ebx   
62 [0x3e]:           loadval ecx   
63 [0x3f]:           add ecx, ebx -> ebx   
64 [0x40]:           rstore ebx   
65 [0x41]:           movl 0   
66 [0x42]:           movn #0   
68 [0x44]:           movi #0, adx   
70 [0x46]:           iaload ebx, adx   
71 [0x47]:           rstore ebx   
72 [0x48]:           call @1745 // <std.io#__srt_global.memcopy>   
73 [0x49]:           nop   
74 [0x4a]: line: 175 pushl 0   
75 [0x4b]:           call @3261 // <std#list<std#string>.pop_back>   
76 [0x4c]:           ret   


function: std#list<std#string>.indexof[3269] params(2) in file: lib\support\0.2.805/list.sharp:178:8: note:  
		    def indexof(comparer: t, find_func: (t, t)(var)) : var {
		       ^

0 [0x0]: line: 179 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 38   
14 [0xe]: line: 180 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 34   
31 [0x1f]: line: 181 loadl ebx, fp+3   
32 [0x20]:           return_val ebx   
33 [0x21]:           ret   
34 [0x22]:           nop   
35 [0x23]:           iaddl 1, fp@3   
37 [0x25]:           jmp @2   
38 [0x26]: line: 185 istorel -1, fp+0   
40 [0x28]:           ret   


function: std#list<std#string>.to_string[3270] params(0) in file: lib\support\0.2.805/list.sharp:188:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 189 new_class @65 // std#string_builder   
1 [0x1]:           dup    
2 [0x2]:           call @3038 // <std#string_builder.string_builder>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+1   
5 [0x5]: line: 191 pushl 1   
6 [0x6]:           newstr @138 // [    
7 [0x7]:           call @3034 // <std#string_builder.operator+=>   
8 [0x8]:           pop   
9 [0x9]: line: 192 istorel 0, fp+2   
11 [0xb]:           ipushl #2   
12 [0xc]:           movl 0   
13 [0xd]:           movn #0   
15 [0xf]:           movi #0, adx   
17 [0x11]:           iaload ebx, adx   
18 [0x12]:           loadval ecx   
19 [0x13]:           lt ecx, ebx   
20 [0x14]:           movr ebx, cmt   
21 [0x15]:           movr cmt, ebx   
22 [0x16]:           jne 61   
23 [0x17]: line: 193 pushl 1   
24 [0x18]:           movl 0   
25 [0x19]:           movn #1   
27 [0x1b]:           pushobj   
28 [0x1c]:           loadl ebx, fp+2   
29 [0x1d]:           popobj2    
30 [0x1e]:           movr adx, ebx   
31 [0x1f]:           chklen adx   
32 [0x20]:           movnd adx   
33 [0x21]:           pushobj   
34 [0x22]:           call @3031 // <std#string_builder.operator+=>   
35 [0x23]:           pop   
36 [0x24]: line: 195 ipushl #2   
37 [0x25]:           movi #1, ebx   
39 [0x27]:           loadval ecx   
40 [0x28]:           add ecx, ebx -> ebx   
41 [0x29]:           rstore ebx   
42 [0x2a]:           movl 0   
43 [0x2b]:           movn #0   
45 [0x2d]:           movi #0, adx   
47 [0x2f]:           iaload ebx, adx   
48 [0x30]:           loadval ecx   
49 [0x31]:           lt ecx, ebx   
50 [0x32]:           movr ebx, cmt   
51 [0x33]:           movr cmt, ebx   
52 [0x34]:           jne 57   
53 [0x35]: line: 196 pushl 1   
54 [0x36]:           newstr @139 // ,    
55 [0x37]:           call @3034 // <std#string_builder.operator+=>   
56 [0x38]:           pop   
57 [0x39]:           nop   
58 [0x3a]:           iaddl 1, fp@2   
60 [0x3c]:           jmp @11   
61 [0x3d]: line: 200 pushl 1   
62 [0x3e]:           newstr @140 //  ]   
63 [0x3f]:           call @3034 // <std#string_builder.operator+=>   
64 [0x40]:           pop   
65 [0x41]: line: 201 pushl 1   
66 [0x42]:           call @3011 // <std#string_builder.to_string>   
67 [0x43]:           popobj2    
68 [0x44]:           returnobj   
69 [0x45]:           ret   


function: std#list<std#string>.out_of_bounds_msg[3271] params(1) in file: lib\support\0.2.805/list.sharp:204:16: note:  
		    private def out_of_bounds_msg(index: var) : string {
		               ^

0 [0x0]: line: 205 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           newstr @141 // Index:    
3 [0x3]:           call @2935 // <std#string.string>   
4 [0x4]:           ipushl #1   
5 [0x5]:           call @2967 // <std#string.operator+>   
6 [0x6]:           newstr @142 // , size:    
7 [0x7]:           call @2947 // <std#string.operator+>   
8 [0x8]:           movl 0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           iaload ebx, adx   
14 [0xe]:           rstore ebx   
15 [0xf]:           call @2967 // <std#string.operator+>   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


constructor: std#hashtable<std.io#thread,std.io.task#job_controller>.hashtable[3272] params(1) in file: lib\support\0.2.805/hashtable.sharp:10:21: note:  
		    public hashtable(initialCapacity: var) {
		                    ^

0 [0x0]:         ldc ebx // 0.75   
1 [0x1]:         movl 0   
2 [0x2]:         movn #1   
4 [0x4]:         movi #0, adx   
6 [0x6]:         rmov adx, ebx   
7 [0x7]:         movi #96, ebx   
9 [0x9]:         movl 0   
10 [0xa]:         movn #2   
12 [0xc]:         movi #0, adx   
14 [0xe]:         rmov adx, ebx   
15 [0xf]:         pushl 0   
16 [0x10]: line: 11 loadl ebx, fp+1   
17 [0x11]:          new_classarray ebx  // std.io.task#entry<std.io#thread,std.io.task#job_controller>[]   
18 [0x12]:          movl 0   
19 [0x13]:          movn #0   
21 [0x15]:          popobj   
22 [0x16]: line: 12 movl 0   
23 [0x17]:          movn #0   
25 [0x19]:          sizeof ebx   
26 [0x1a]:          rstore ebx   
27 [0x1b]:          movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          movi #0, adx   
32 [0x20]:          iaload ebx, adx   
33 [0x21]:          loadval ecx   
34 [0x22]:          mul ecx, ebx -> ebx   
35 [0x23]:          movl 0   
36 [0x24]:          movn #2   
38 [0x26]:          movi #0, adx   
40 [0x28]:          rmov adx, ebx   
41 [0x29]:          ret   


constructor: std#hashtable<std.io#thread,std.io.task#job_controller>.hashtable[3273] params(0) in file: lib\support\0.2.805/hashtable.sharp:15:21: note:  
		    public hashtable() {
		                    ^

0 [0x0]:         ldc ebx // 0.75   
1 [0x1]:         movl 0   
2 [0x2]:         movn #1   
4 [0x4]:         movi #0, adx   
6 [0x6]:         rmov adx, ebx   
7 [0x7]:         movi #96, ebx   
9 [0x9]:         movl 0   
10 [0xa]:         movn #2   
12 [0xc]:         movi #0, adx   
14 [0xe]:         rmov adx, ebx   
15 [0xf]:         pushl 0   
16 [0x10]: line: 16 movi #128, ebx   
18 [0x12]:          new_classarray ebx  // std.io.task#entry<std.io#thread,std.io.task#job_controller>[]   
19 [0x13]:          movl 0   
20 [0x14]:          movn #0   
22 [0x16]:          popobj   
23 [0x17]:          ret   


function: std#hashtable<std.io#thread,std.io.task#job_controller>.set_threshold[3274] params(1) in file: lib\support\0.2.805/hashtable.sharp:19:8: note:  
		    def set_threshold(threshold: var) {
		       ^

0 [0x0]: line: 20 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 21 ipushl #1   
3 [0x3]:          movl 0   
4 [0x4]:          movn #1   
6 [0x6]:          loadval ebx   
7 [0x7]:          movi #0, adx   
9 [0x9]:          rmov adx, ebx   
10 [0xa]: line: 22 movl 0   
11 [0xb]:          movn #0   
13 [0xd]:          sizeof ebx   
14 [0xe]:          rstore ebx   
15 [0xf]:          loadl ebx, fp+1   
16 [0x10]:          loadval ecx   
17 [0x11]:          mul ecx, ebx -> ebx   
18 [0x12]:          movl 0   
19 [0x13]:          movn #2   
21 [0x15]:          movi #0, adx   
23 [0x17]:          rmov adx, ebx   
24 [0x18]:          movl 0   
25 [0x19]:          _ulck   
26 [0x1a]:          ret   


function: std#hashtable<std.io#thread,std.io.task#job_controller>.hash[3275] params(1) in file: lib\support\0.2.805/hashtable.sharp:26:16: note:  
		    private def hash(key: k) : var {
		               ^

0 [0x0]: line: 27 pushl 1   
1 [0x1]:          call @1860 // <std.io#thread.hash>   
2 [0x2]:          movl 0   
3 [0x3]:          movn #0   
5 [0x5]:          sizeof ebx   
6 [0x6]:          rstore ebx   
7 [0x7]:          call @293 // <std#integer<_int64>.operator%>   
8 [0x8]:          loadval ebx   
9 [0x9]:          return_val ebx   
10 [0xa]:          ret   


function: std#hashtable<std.io#thread,std.io.task#job_controller>.resize[3276] params(0) in file: lib\support\0.2.805/hashtable.sharp:30:16: note:  
		    private def resize() {
		               ^

0 [0x0]: line: 31 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          smovr_3 fp+1   
4 [0x4]: line: 32 movl 1   
5 [0x5]:          sizeof ebx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          sizeof ebx   
9 [0x9]:          rstore ebx   
10 [0xa]:          movi #1, ebx   
12 [0xc]:          loadval ecx   
13 [0xd]:          shr ecx, ebx -> ebx   
14 [0xe]:          loadval ecx   
15 [0xf]:          add ecx, ebx -> ebx   
16 [0x10]:          new_classarray ebx  // std.io.task#entry<std.io#thread,std.io.task#job_controller>[]   
17 [0x11]:          movl 0   
18 [0x12]:          movn #0   
20 [0x14]:          popobj   
21 [0x15]: line: 33 movl 0   
22 [0x16]:          movn #0   
24 [0x18]:          sizeof ebx   
25 [0x19]:          rstore ebx   
26 [0x1a]:          movl 0   
27 [0x1b]:          movn #1   
29 [0x1d]:          movi #0, adx   
31 [0x1f]:          iaload ebx, adx   
32 [0x20]:          loadval ecx   
33 [0x21]:          mul ecx, ebx -> ebx   
34 [0x22]:          movl 0   
35 [0x23]:          movn #2   
37 [0x25]:          movi #0, adx   
39 [0x27]:          rmov adx, ebx   
40 [0x28]: line: 34 istorel -1, fp+3   
42 [0x2a]:          pushl 1   
43 [0x2b]:          popl 4   
44 [0x2c]:          iaddl 1, fp@3   
46 [0x2e]:          movl 4   
47 [0x2f]:          sizeof ecx   
48 [0x30]:          loadl ebx, fp+3   
49 [0x31]:          lt ebx, ecx   
50 [0x32]:          jne 99   
51 [0x33]:          movnd ebx   
52 [0x34]:          pushobj   
53 [0x35]:          popl 2   
54 [0x36]: line: 36 movl 2   
55 [0x37]:          checknull   
56 [0x38]:          not ebx, ebx   
57 [0x39]:          movr cmt, ebx   
58 [0x3a]:          jne 98   
59 [0x3b]: line: 38 movl 2   
60 [0x3c]:          movn #2   
62 [0x3e]:          smovr_3 fp+5   
63 [0x3f]: line: 39 pushl 0   
64 [0x40]:          movl 2   
65 [0x41]:          movn #0   
67 [0x43]:          pushobj   
68 [0x44]:          call @3275 // <std#hashtable<std.io#thread,std.io.task#job_controller>.hash>   
69 [0x45]:          ipopl 6   
70 [0x46]: line: 40 movl 0   
71 [0x47]:          movn #0   
73 [0x49]:          pushobj   
74 [0x4a]:          loadl ebx, fp+6   
75 [0x4b]:          popobj2    
76 [0x4c]:          movr adx, ebx   
77 [0x4d]:          chklen adx   
78 [0x4e]:          movnd adx   
79 [0x4f]:          pushobj   
80 [0x50]:          movl 2   
81 [0x51]:          movn #2   
83 [0x53]:          popobj   
84 [0x54]: line: 41 pushl 2   
85 [0x55]:          movl 0   
86 [0x56]:          movn #0   
88 [0x58]:          pushobj   
89 [0x59]:          loadl ebx, fp+6   
90 [0x5a]:          popobj2    
91 [0x5b]:          movr adx, ebx   
92 [0x5c]:          chklen adx   
93 [0x5d]:          movnd adx   
94 [0x5e]:          popobj   
95 [0x5f]: line: 42 movl 5   
96 [0x60]:          smovr_3 fp+2   
97 [0x61]:          jmp @54   
98 [0x62]:          jmp @44   
99 [0x63]: line: 46 pushnull    
100 [0x64]:          popobj2    
101 [0x65]:          smovr_3 fp+1   
102 [0x66]:          ret   


function: std#hashtable<std.io#thread,std.io.task#job_controller>.at[3277] params(1) in file: lib\support\0.2.805/hashtable.sharp:49:15: note:  
		    public def at(key: k) : v {
		              ^

0 [0x0]: line: 50 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 51 pushl 0   
3 [0x3]:          pushl 1   
4 [0x4]:          call @3275 // <std#hashtable<std.io#thread,std.io.task#job_controller>.hash>   
5 [0x5]:          ipopl 2   
6 [0x6]: line: 52 istorel -1, fp+3   
8 [0x8]: line: 53 movl 4   
9 [0x9]:          del   
10 [0xa]: line: 55 movl 0   
11 [0xb]:          movn #0   
13 [0xd]:          pushobj   
14 [0xe]:          loadl ebx, fp+2   
15 [0xf]:          popobj2    
16 [0x10]:          movr adx, ebx   
17 [0x11]:          chklen adx   
18 [0x12]:          movnd adx   
19 [0x13]:          pushobj   
20 [0x14]:          pushnull    
21 [0x15]:          itest ebx   
22 [0x16]:          movr cmt, ebx   
23 [0x17]:          jne 30   
24 [0x18]: line: 56 movl 4   
25 [0x19]:          returnobj   
26 [0x1a]:          movl 0   
27 [0x1b]:          _ulck   
28 [0x1c]:          ret   
29 [0x1d]:          jmp @84   
30 [0x1e]: line: 58 movl 0   
31 [0x1f]:          movn #0   
33 [0x21]:          pushobj   
34 [0x22]:          loadl ebx, fp+2   
35 [0x23]:          popobj2    
36 [0x24]:          movr adx, ebx   
37 [0x25]:          chklen adx   
38 [0x26]:          movnd adx   
39 [0x27]:          smovr_3 fp+5   
40 [0x28]: line: 59 movl 5   
41 [0x29]:          checknull   
42 [0x2a]:          not ebx, ebx   
43 [0x2b]:          skne ebx // pc = 59   
44 [0x2c]:          movl 5   
45 [0x2d]:          movn #0   
47 [0x2f]:          pushobj   
48 [0x30]:          pushl 1   
49 [0x31]:          itest ebx   
50 [0x32]:          not ebx, ebx   
51 [0x33]:          skne ebx // pc = 59   
52 [0x34]:          movl 5   
53 [0x35]:          movn #2   
55 [0x37]:          pushobj   
56 [0x38]:          pushnull    
57 [0x39]:          itest ebx   
58 [0x3a]:          not ebx, ebx   
59 [0x3b]:          movr cmt, ebx   
60 [0x3c]:          jne 66   
61 [0x3d]: line: 61 movl 5   
62 [0x3e]:          movn #2   
64 [0x40]:          smovr_3 fp+5   
65 [0x41]:          jmp @40   
66 [0x42]: line: 63 movl 5   
67 [0x43]:          checknull   
68 [0x44]:          movr cmt, ebx   
69 [0x45]:          jne 76   
70 [0x46]: line: 64 movl 4   
71 [0x47]:          returnobj   
72 [0x48]:          movl 0   
73 [0x49]:          _ulck   
74 [0x4a]:          ret   
75 [0x4b]:          jmp @83   
76 [0x4c]: line: 66 movl 5   
77 [0x4d]:          movn #1   
79 [0x4f]:          returnobj   
80 [0x50]:          movl 0   
81 [0x51]:          _ulck   
82 [0x52]:          ret   
83 [0x53]:          nop   
84 [0x54]:          nop   
85 [0x55]:          movl 0   
86 [0x56]:          _ulck   


function: std#hashtable<std.io#thread,std.io.task#job_controller>.put[3278] params(2) in file: lib\support\0.2.805/hashtable.sharp:72:15: note:  
		    public def put(key: k, value: v) : var {
		              ^

0 [0x0]: line: 73 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 74 pushl 0   
3 [0x3]:          pushl 1   
4 [0x4]:          call @3275 // <std#hashtable<std.io#thread,std.io.task#job_controller>.hash>   
5 [0x5]:          ipopl 3   
6 [0x6]: line: 75 movl 4   
7 [0x7]:          del   
8 [0x8]: line: 76 movl 0   
9 [0x9]:          movn #0   
11 [0xb]:          pushobj   
12 [0xc]:          loadl ebx, fp+3   
13 [0xd]:          popobj2    
14 [0xe]:          movr adx, ebx   
15 [0xf]:          chklen adx   
16 [0x10]:          movnd adx   
17 [0x11]:          smovr_3 fp+5   
18 [0x12]: line: 78 movl 5   
19 [0x13]:          checknull   
20 [0x14]:          not ebx, ebx   
21 [0x15]:          skne ebx // pc = 29   
22 [0x16]:          movl 5   
23 [0x17]:          movn #0   
25 [0x19]:          pushobj   
26 [0x1a]:          pushl 1   
27 [0x1b]:          itest ebx   
28 [0x1c]:          not ebx, ebx   
29 [0x1d]:          movr cmt, ebx   
30 [0x1e]:          jne 38   
31 [0x1f]: line: 79 movl 5   
32 [0x20]:          smovr_3 fp+4   
33 [0x21]: line: 80 movl 5   
34 [0x22]:          movn #2   
36 [0x24]:          smovr_3 fp+5   
37 [0x25]:          jmp @18   
38 [0x26]: line: 83 movl 5   
39 [0x27]:          checknull   
40 [0x28]:          movr cmt, ebx   
41 [0x29]:          jne 88   
42 [0x2a]: line: 84 movl 0   
43 [0x2b]:          movn #3   
45 [0x2d]:          movi #0, adx   
47 [0x2f]:          iaload ebx, adx   
48 [0x30]:          movr egx, ebx   
49 [0x31]:          inc ebx   
50 [0x32]:          movi #0, adx   
52 [0x34]:          rmov adx, ebx   
53 [0x35]: line: 85 new_class @156 // std.io.task#entry<std.io#thread,std.io.task#job_controller>   
54 [0x36]:          dup    
55 [0x37]:          pushl 1   
56 [0x38]:          pushl 2   
57 [0x39]:          call @3502 // <std.io.task#entry<std.io#thread,std.io.task#job_controller>.entry>   
58 [0x3a]:          popobj2    
59 [0x3b]:          smovr_3 fp+5   
60 [0x3c]: line: 86 movl 4   
61 [0x3d]:          checknull   
62 [0x3e]:          movr cmt, ebx   
63 [0x3f]:          jne 76   
64 [0x40]: line: 87 pushl 5   
65 [0x41]:          movl 0   
66 [0x42]:          movn #0   
68 [0x44]:          pushobj   
69 [0x45]:          loadl ebx, fp+3   
70 [0x46]:          popobj2    
71 [0x47]:          movr adx, ebx   
72 [0x48]:          chklen adx   
73 [0x49]:          movnd adx   
74 [0x4a]:          popobj   
75 [0x4b]:          jmp @81   
76 [0x4c]: line: 89 pushl 5   
77 [0x4d]:          movl 4   
78 [0x4e]:          movn #2   
80 [0x50]:          popobj   
81 [0x51]:          nop   
82 [0x52]: line: 92 istorel 1, fp+0   
84 [0x54]:          movl 0   
85 [0x55]:          _ulck   
86 [0x56]:          ret   
87 [0x57]:          jmp @98   
88 [0x58]: line: 94 pushl 2   
89 [0x59]:          movl 5   
90 [0x5a]:          movn #1   
92 [0x5c]:          popobj   
93 [0x5d]: line: 95 istorel 0, fp+0   
95 [0x5f]:          movl 0   
96 [0x60]:          _ulck   
97 [0x61]:          ret   
98 [0x62]:          nop   
99 [0x63]:          movl 0   
100 [0x64]:          _ulck   


function: std#hashtable<std.io#thread,std.io.task#job_controller>.remove[3279] params(1) in file: lib\support\0.2.805/hashtable.sharp:100:15: note:  
		    public def remove(key: k) : var {
		              ^

0 [0x0]: line: 101 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 102 pushl 0   
3 [0x3]:           pushl 1   
4 [0x4]:           call @3275 // <std#hashtable<std.io#thread,std.io.task#job_controller>.hash>   
5 [0x5]:           ipopl 2   
6 [0x6]: line: 103 movl 0   
7 [0x7]:           movn #0   
9 [0x9]:           pushobj   
10 [0xa]:           loadl ebx, fp+2   
11 [0xb]:           popobj2    
12 [0xc]:           movr adx, ebx   
13 [0xd]:           chklen adx   
14 [0xe]:           movnd adx   
15 [0xf]:           pushobj   
16 [0x10]:           pushnull    
17 [0x11]:           itest ebx   
18 [0x12]:           movr cmt, ebx   
19 [0x13]:           jne 100   
20 [0x14]: line: 104 movl 3   
21 [0x15]:           del   
22 [0x16]: line: 105 movl 0   
23 [0x17]:           movn #0   
25 [0x19]:           pushobj   
26 [0x1a]:           loadl ebx, fp+2   
27 [0x1b]:           popobj2    
28 [0x1c]:           movr adx, ebx   
29 [0x1d]:           chklen adx   
30 [0x1e]:           movnd adx   
31 [0x1f]:           smovr_3 fp+4   
32 [0x20]: line: 106 movl 4   
33 [0x21]:           checknull   
34 [0x22]:           not ebx, ebx   
35 [0x23]:           skne ebx // pc = 43   
36 [0x24]:           movl 4   
37 [0x25]:           movn #0   
39 [0x27]:           pushobj   
40 [0x28]:           pushl 1   
41 [0x29]:           itest ebx   
42 [0x2a]:           not ebx, ebx   
43 [0x2b]:           movr cmt, ebx   
44 [0x2c]:           jne 52   
45 [0x2d]: line: 107 movl 4   
46 [0x2e]:           smovr_3 fp+3   
47 [0x2f]: line: 108 movl 4   
48 [0x30]:           movn #2   
50 [0x32]:           smovr_3 fp+4   
51 [0x33]:           jmp @32   
52 [0x34]: line: 111 movl 4   
53 [0x35]:           movn #0   
55 [0x37]:           pushobj   
56 [0x38]:           pushl 1   
57 [0x39]:           call @1877 // <std.io#thread.operator==>   
58 [0x3a]:           loadval ebx   
59 [0x3b]:           movr cmt, ebx   
60 [0x3c]:           jne 99   
61 [0x3d]: line: 112 movl 3   
62 [0x3e]:           checknull   
63 [0x3f]:           movr cmt, ebx   
64 [0x40]:           jne 81   
65 [0x41]: line: 113 movl 4   
66 [0x42]:           movn #2   
68 [0x44]:           smovr_3 fp+5   
69 [0x45]: line: 114 pushl 5   
70 [0x46]:           movl 0   
71 [0x47]:           movn #0   
73 [0x49]:           pushobj   
74 [0x4a]:           loadl ebx, fp+2   
75 [0x4b]:           popobj2    
76 [0x4c]:           movr adx, ebx   
77 [0x4d]:           chklen adx   
78 [0x4e]:           movnd adx   
79 [0x4f]:           popobj   
80 [0x50]:           jmp @93   
81 [0x51]: line: 116 movl 4   
82 [0x52]:           movn #2   
84 [0x54]:           smovr_3 fp+6   
85 [0x55]: line: 117 pushl 6   
86 [0x56]:           movl 3   
87 [0x57]:           movn #2   
89 [0x59]:           popobj   
90 [0x5a]: line: 118 pushnull    
91 [0x5b]:           popobj2    
92 [0x5c]:           smovr_3 fp+4   
93 [0x5d]:           nop   
94 [0x5e]: line: 121 istorel 1, fp+0   
96 [0x60]:           movl 0   
97 [0x61]:           _ulck   
98 [0x62]:           ret   
99 [0x63]:           nop   
100 [0x64]:           nop   
101 [0x65]: line: 125 istorel 0, fp+0   
103 [0x67]:           movl 0   
104 [0x68]:           _ulck   
105 [0x69]:           ret   
106 [0x6a]:           movl 0   
107 [0x6b]:           _ulck   


constructor: std#hashtable<std#int,std.io#thread>.hashtable[3280] params(1) in file: lib\support\0.2.805/hashtable.sharp:10:21: note:  
		    public hashtable(initialCapacity: var) {
		                    ^

0 [0x0]:         ldc ebx // 0.75   
1 [0x1]:         movl 0   
2 [0x2]:         movn #1   
4 [0x4]:         movi #0, adx   
6 [0x6]:         rmov adx, ebx   
7 [0x7]:         movi #96, ebx   
9 [0x9]:         movl 0   
10 [0xa]:         movn #2   
12 [0xc]:         movi #0, adx   
14 [0xe]:         rmov adx, ebx   
15 [0xf]:         pushl 0   
16 [0x10]: line: 11 loadl ebx, fp+1   
17 [0x11]:          new_classarray ebx  // std.io#entry<std#int,std.io#thread>[]   
18 [0x12]:          movl 0   
19 [0x13]:          movn #0   
21 [0x15]:          popobj   
22 [0x16]: line: 12 movl 0   
23 [0x17]:          movn #0   
25 [0x19]:          sizeof ebx   
26 [0x1a]:          rstore ebx   
27 [0x1b]:          movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          movi #0, adx   
32 [0x20]:          iaload ebx, adx   
33 [0x21]:          loadval ecx   
34 [0x22]:          mul ecx, ebx -> ebx   
35 [0x23]:          movl 0   
36 [0x24]:          movn #2   
38 [0x26]:          movi #0, adx   
40 [0x28]:          rmov adx, ebx   
41 [0x29]:          ret   


constructor: std#hashtable<std#int,std.io#thread>.hashtable[3281] params(0) in file: lib\support\0.2.805/hashtable.sharp:15:21: note:  
		    public hashtable() {
		                    ^

0 [0x0]:         ldc ebx // 0.75   
1 [0x1]:         movl 0   
2 [0x2]:         movn #1   
4 [0x4]:         movi #0, adx   
6 [0x6]:         rmov adx, ebx   
7 [0x7]:         movi #96, ebx   
9 [0x9]:         movl 0   
10 [0xa]:         movn #2   
12 [0xc]:         movi #0, adx   
14 [0xe]:         rmov adx, ebx   
15 [0xf]:         pushl 0   
16 [0x10]: line: 16 movi #128, ebx   
18 [0x12]:          new_classarray ebx  // std.io#entry<std#int,std.io#thread>[]   
19 [0x13]:          movl 0   
20 [0x14]:          movn #0   
22 [0x16]:          popobj   
23 [0x17]:          ret   


function: std#hashtable<std#int,std.io#thread>.set_threshold[3282] params(1) in file: lib\support\0.2.805/hashtable.sharp:19:8: note:  
		    def set_threshold(threshold: var) {
		       ^

0 [0x0]: line: 20 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 21 ipushl #1   
3 [0x3]:          movl 0   
4 [0x4]:          movn #1   
6 [0x6]:          loadval ebx   
7 [0x7]:          movi #0, adx   
9 [0x9]:          rmov adx, ebx   
10 [0xa]: line: 22 movl 0   
11 [0xb]:          movn #0   
13 [0xd]:          sizeof ebx   
14 [0xe]:          rstore ebx   
15 [0xf]:          loadl ebx, fp+1   
16 [0x10]:          loadval ecx   
17 [0x11]:          mul ecx, ebx -> ebx   
18 [0x12]:          movl 0   
19 [0x13]:          movn #2   
21 [0x15]:          movi #0, adx   
23 [0x17]:          rmov adx, ebx   
24 [0x18]:          movl 0   
25 [0x19]:          _ulck   
26 [0x1a]:          ret   


function: std#hashtable<std#int,std.io#thread>.hash[3283] params(1) in file: lib\support\0.2.805/hashtable.sharp:26:16: note:  
		    private def hash(key: k) : var {
		               ^

0 [0x0]: line: 27 pushl 1   
1 [0x1]:          call @604 // <std#integer<_int32>.hash>   
2 [0x2]:          movl 0   
3 [0x3]:          movn #0   
5 [0x5]:          sizeof ebx   
6 [0x6]:          rstore ebx   
7 [0x7]:          call @293 // <std#integer<_int64>.operator%>   
8 [0x8]:          loadval ebx   
9 [0x9]:          return_val ebx   
10 [0xa]:          ret   


function: std#hashtable<std#int,std.io#thread>.resize[3284] params(0) in file: lib\support\0.2.805/hashtable.sharp:30:16: note:  
		    private def resize() {
		               ^

0 [0x0]: line: 31 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          smovr_3 fp+1   
4 [0x4]: line: 32 movl 1   
5 [0x5]:          sizeof ebx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          sizeof ebx   
9 [0x9]:          rstore ebx   
10 [0xa]:          movi #1, ebx   
12 [0xc]:          loadval ecx   
13 [0xd]:          shr ecx, ebx -> ebx   
14 [0xe]:          loadval ecx   
15 [0xf]:          add ecx, ebx -> ebx   
16 [0x10]:          new_classarray ebx  // std.io#entry<std#int,std.io#thread>[]   
17 [0x11]:          movl 0   
18 [0x12]:          movn #0   
20 [0x14]:          popobj   
21 [0x15]: line: 33 movl 0   
22 [0x16]:          movn #0   
24 [0x18]:          sizeof ebx   
25 [0x19]:          rstore ebx   
26 [0x1a]:          movl 0   
27 [0x1b]:          movn #1   
29 [0x1d]:          movi #0, adx   
31 [0x1f]:          iaload ebx, adx   
32 [0x20]:          loadval ecx   
33 [0x21]:          mul ecx, ebx -> ebx   
34 [0x22]:          movl 0   
35 [0x23]:          movn #2   
37 [0x25]:          movi #0, adx   
39 [0x27]:          rmov adx, ebx   
40 [0x28]: line: 34 istorel -1, fp+3   
42 [0x2a]:          pushl 1   
43 [0x2b]:          popl 4   
44 [0x2c]:          iaddl 1, fp@3   
46 [0x2e]:          movl 4   
47 [0x2f]:          sizeof ecx   
48 [0x30]:          loadl ebx, fp+3   
49 [0x31]:          lt ebx, ecx   
50 [0x32]:          jne 99   
51 [0x33]:          movnd ebx   
52 [0x34]:          pushobj   
53 [0x35]:          popl 2   
54 [0x36]: line: 36 movl 2   
55 [0x37]:          checknull   
56 [0x38]:          not ebx, ebx   
57 [0x39]:          movr cmt, ebx   
58 [0x3a]:          jne 98   
59 [0x3b]: line: 38 movl 2   
60 [0x3c]:          movn #2   
62 [0x3e]:          smovr_3 fp+5   
63 [0x3f]: line: 39 pushl 0   
64 [0x40]:          movl 2   
65 [0x41]:          movn #0   
67 [0x43]:          pushobj   
68 [0x44]:          call @3283 // <std#hashtable<std#int,std.io#thread>.hash>   
69 [0x45]:          ipopl 6   
70 [0x46]: line: 40 movl 0   
71 [0x47]:          movn #0   
73 [0x49]:          pushobj   
74 [0x4a]:          loadl ebx, fp+6   
75 [0x4b]:          popobj2    
76 [0x4c]:          movr adx, ebx   
77 [0x4d]:          chklen adx   
78 [0x4e]:          movnd adx   
79 [0x4f]:          pushobj   
80 [0x50]:          movl 2   
81 [0x51]:          movn #2   
83 [0x53]:          popobj   
84 [0x54]: line: 41 pushl 2   
85 [0x55]:          movl 0   
86 [0x56]:          movn #0   
88 [0x58]:          pushobj   
89 [0x59]:          loadl ebx, fp+6   
90 [0x5a]:          popobj2    
91 [0x5b]:          movr adx, ebx   
92 [0x5c]:          chklen adx   
93 [0x5d]:          movnd adx   
94 [0x5e]:          popobj   
95 [0x5f]: line: 42 movl 5   
96 [0x60]:          smovr_3 fp+2   
97 [0x61]:          jmp @54   
98 [0x62]:          jmp @44   
99 [0x63]: line: 46 pushnull    
100 [0x64]:          popobj2    
101 [0x65]:          smovr_3 fp+1   
102 [0x66]:          ret   


function: std#hashtable<std#int,std.io#thread>.at[3285] params(1) in file: lib\support\0.2.805/hashtable.sharp:49:15: note:  
		    public def at(key: k) : v {
		              ^

0 [0x0]: line: 50 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 51 pushl 0   
3 [0x3]:          pushl 1   
4 [0x4]:          call @3283 // <std#hashtable<std#int,std.io#thread>.hash>   
5 [0x5]:          ipopl 2   
6 [0x6]: line: 52 istorel -1, fp+3   
8 [0x8]: line: 53 movl 4   
9 [0x9]:          del   
10 [0xa]: line: 55 movl 0   
11 [0xb]:          movn #0   
13 [0xd]:          pushobj   
14 [0xe]:          loadl ebx, fp+2   
15 [0xf]:          popobj2    
16 [0x10]:          movr adx, ebx   
17 [0x11]:          chklen adx   
18 [0x12]:          movnd adx   
19 [0x13]:          pushobj   
20 [0x14]:          pushnull    
21 [0x15]:          itest ebx   
22 [0x16]:          movr cmt, ebx   
23 [0x17]:          jne 30   
24 [0x18]: line: 56 movl 4   
25 [0x19]:          returnobj   
26 [0x1a]:          movl 0   
27 [0x1b]:          _ulck   
28 [0x1c]:          ret   
29 [0x1d]:          jmp @84   
30 [0x1e]: line: 58 movl 0   
31 [0x1f]:          movn #0   
33 [0x21]:          pushobj   
34 [0x22]:          loadl ebx, fp+2   
35 [0x23]:          popobj2    
36 [0x24]:          movr adx, ebx   
37 [0x25]:          chklen adx   
38 [0x26]:          movnd adx   
39 [0x27]:          smovr_3 fp+5   
40 [0x28]: line: 59 movl 5   
41 [0x29]:          checknull   
42 [0x2a]:          not ebx, ebx   
43 [0x2b]:          skne ebx // pc = 59   
44 [0x2c]:          movl 5   
45 [0x2d]:          movn #0   
47 [0x2f]:          pushobj   
48 [0x30]:          pushl 1   
49 [0x31]:          call @611 // <std#integer<_int32>.operator!=>   
50 [0x32]:          loadval ebx   
51 [0x33]:          skne ebx // pc = 59   
52 [0x34]:          movl 5   
53 [0x35]:          movn #2   
55 [0x37]:          pushobj   
56 [0x38]:          pushnull    
57 [0x39]:          itest ebx   
58 [0x3a]:          not ebx, ebx   
59 [0x3b]:          movr cmt, ebx   
60 [0x3c]:          jne 66   
61 [0x3d]: line: 61 movl 5   
62 [0x3e]:          movn #2   
64 [0x40]:          smovr_3 fp+5   
65 [0x41]:          jmp @40   
66 [0x42]: line: 63 movl 5   
67 [0x43]:          checknull   
68 [0x44]:          movr cmt, ebx   
69 [0x45]:          jne 76   
70 [0x46]: line: 64 movl 4   
71 [0x47]:          returnobj   
72 [0x48]:          movl 0   
73 [0x49]:          _ulck   
74 [0x4a]:          ret   
75 [0x4b]:          jmp @83   
76 [0x4c]: line: 66 movl 5   
77 [0x4d]:          movn #1   
79 [0x4f]:          returnobj   
80 [0x50]:          movl 0   
81 [0x51]:          _ulck   
82 [0x52]:          ret   
83 [0x53]:          nop   
84 [0x54]:          nop   
85 [0x55]:          movl 0   
86 [0x56]:          _ulck   


function: std#hashtable<std#int,std.io#thread>.put[3286] params(2) in file: lib\support\0.2.805/hashtable.sharp:72:15: note:  
		    public def put(key: k, value: v) : var {
		              ^

0 [0x0]: line: 73 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 74 pushl 0   
3 [0x3]:          pushl 1   
4 [0x4]:          call @3283 // <std#hashtable<std#int,std.io#thread>.hash>   
5 [0x5]:          ipopl 3   
6 [0x6]: line: 75 movl 4   
7 [0x7]:          del   
8 [0x8]: line: 76 movl 0   
9 [0x9]:          movn #0   
11 [0xb]:          pushobj   
12 [0xc]:          loadl ebx, fp+3   
13 [0xd]:          popobj2    
14 [0xe]:          movr adx, ebx   
15 [0xf]:          chklen adx   
16 [0x10]:          movnd adx   
17 [0x11]:          smovr_3 fp+5   
18 [0x12]: line: 78 movl 5   
19 [0x13]:          checknull   
20 [0x14]:          not ebx, ebx   
21 [0x15]:          skne ebx // pc = 29   
22 [0x16]:          movl 5   
23 [0x17]:          movn #0   
25 [0x19]:          pushobj   
26 [0x1a]:          pushl 1   
27 [0x1b]:          call @611 // <std#integer<_int32>.operator!=>   
28 [0x1c]:          loadval ebx   
29 [0x1d]:          movr cmt, ebx   
30 [0x1e]:          jne 38   
31 [0x1f]: line: 79 movl 5   
32 [0x20]:          smovr_3 fp+4   
33 [0x21]: line: 80 movl 5   
34 [0x22]:          movn #2   
36 [0x24]:          smovr_3 fp+5   
37 [0x25]:          jmp @18   
38 [0x26]: line: 83 movl 5   
39 [0x27]:          checknull   
40 [0x28]:          movr cmt, ebx   
41 [0x29]:          jne 88   
42 [0x2a]: line: 84 movl 0   
43 [0x2b]:          movn #3   
45 [0x2d]:          movi #0, adx   
47 [0x2f]:          iaload ebx, adx   
48 [0x30]:          movr egx, ebx   
49 [0x31]:          inc ebx   
50 [0x32]:          movi #0, adx   
52 [0x34]:          rmov adx, ebx   
53 [0x35]: line: 85 new_class @157 // std.io#entry<std#int,std.io#thread>   
54 [0x36]:          dup    
55 [0x37]:          pushl 1   
56 [0x38]:          pushl 2   
57 [0x39]:          call @3505 // <std.io#entry<std#int,std.io#thread>.entry>   
58 [0x3a]:          popobj2    
59 [0x3b]:          smovr_3 fp+5   
60 [0x3c]: line: 86 movl 4   
61 [0x3d]:          checknull   
62 [0x3e]:          movr cmt, ebx   
63 [0x3f]:          jne 76   
64 [0x40]: line: 87 pushl 5   
65 [0x41]:          movl 0   
66 [0x42]:          movn #0   
68 [0x44]:          pushobj   
69 [0x45]:          loadl ebx, fp+3   
70 [0x46]:          popobj2    
71 [0x47]:          movr adx, ebx   
72 [0x48]:          chklen adx   
73 [0x49]:          movnd adx   
74 [0x4a]:          popobj   
75 [0x4b]:          jmp @81   
76 [0x4c]: line: 89 pushl 5   
77 [0x4d]:          movl 4   
78 [0x4e]:          movn #2   
80 [0x50]:          popobj   
81 [0x51]:          nop   
82 [0x52]: line: 92 istorel 1, fp+0   
84 [0x54]:          movl 0   
85 [0x55]:          _ulck   
86 [0x56]:          ret   
87 [0x57]:          jmp @98   
88 [0x58]: line: 94 pushl 2   
89 [0x59]:          movl 5   
90 [0x5a]:          movn #1   
92 [0x5c]:          popobj   
93 [0x5d]: line: 95 istorel 0, fp+0   
95 [0x5f]:          movl 0   
96 [0x60]:          _ulck   
97 [0x61]:          ret   
98 [0x62]:          nop   
99 [0x63]:          movl 0   
100 [0x64]:          _ulck   


function: std#hashtable<std#int,std.io#thread>.remove[3287] params(1) in file: lib\support\0.2.805/hashtable.sharp:100:15: note:  
		    public def remove(key: k) : var {
		              ^

0 [0x0]: line: 101 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 102 pushl 0   
3 [0x3]:           pushl 1   
4 [0x4]:           call @3283 // <std#hashtable<std#int,std.io#thread>.hash>   
5 [0x5]:           ipopl 2   
6 [0x6]: line: 103 movl 0   
7 [0x7]:           movn #0   
9 [0x9]:           pushobj   
10 [0xa]:           loadl ebx, fp+2   
11 [0xb]:           popobj2    
12 [0xc]:           movr adx, ebx   
13 [0xd]:           chklen adx   
14 [0xe]:           movnd adx   
15 [0xf]:           pushobj   
16 [0x10]:           pushnull    
17 [0x11]:           itest ebx   
18 [0x12]:           movr cmt, ebx   
19 [0x13]:           jne 100   
20 [0x14]: line: 104 movl 3   
21 [0x15]:           del   
22 [0x16]: line: 105 movl 0   
23 [0x17]:           movn #0   
25 [0x19]:           pushobj   
26 [0x1a]:           loadl ebx, fp+2   
27 [0x1b]:           popobj2    
28 [0x1c]:           movr adx, ebx   
29 [0x1d]:           chklen adx   
30 [0x1e]:           movnd adx   
31 [0x1f]:           smovr_3 fp+4   
32 [0x20]: line: 106 movl 4   
33 [0x21]:           checknull   
34 [0x22]:           not ebx, ebx   
35 [0x23]:           skne ebx // pc = 43   
36 [0x24]:           movl 4   
37 [0x25]:           movn #0   
39 [0x27]:           pushobj   
40 [0x28]:           pushl 1   
41 [0x29]:           call @611 // <std#integer<_int32>.operator!=>   
42 [0x2a]:           loadval ebx   
43 [0x2b]:           movr cmt, ebx   
44 [0x2c]:           jne 52   
45 [0x2d]: line: 107 movl 4   
46 [0x2e]:           smovr_3 fp+3   
47 [0x2f]: line: 108 movl 4   
48 [0x30]:           movn #2   
50 [0x32]:           smovr_3 fp+4   
51 [0x33]:           jmp @32   
52 [0x34]: line: 111 movl 4   
53 [0x35]:           movn #0   
55 [0x37]:           pushobj   
56 [0x38]:           pushl 1   
57 [0x39]:           call @612 // <std#integer<_int32>.operator==>   
58 [0x3a]:           loadval ebx   
59 [0x3b]:           movr cmt, ebx   
60 [0x3c]:           jne 99   
61 [0x3d]: line: 112 movl 3   
62 [0x3e]:           checknull   
63 [0x3f]:           movr cmt, ebx   
64 [0x40]:           jne 81   
65 [0x41]: line: 113 movl 4   
66 [0x42]:           movn #2   
68 [0x44]:           smovr_3 fp+5   
69 [0x45]: line: 114 pushl 5   
70 [0x46]:           movl 0   
71 [0x47]:           movn #0   
73 [0x49]:           pushobj   
74 [0x4a]:           loadl ebx, fp+2   
75 [0x4b]:           popobj2    
76 [0x4c]:           movr adx, ebx   
77 [0x4d]:           chklen adx   
78 [0x4e]:           movnd adx   
79 [0x4f]:           popobj   
80 [0x50]:           jmp @93   
81 [0x51]: line: 116 movl 4   
82 [0x52]:           movn #2   
84 [0x54]:           smovr_3 fp+6   
85 [0x55]: line: 117 pushl 6   
86 [0x56]:           movl 3   
87 [0x57]:           movn #2   
89 [0x59]:           popobj   
90 [0x5a]: line: 118 pushnull    
91 [0x5b]:           popobj2    
92 [0x5c]:           smovr_3 fp+4   
93 [0x5d]:           nop   
94 [0x5e]: line: 121 istorel 1, fp+0   
96 [0x60]:           movl 0   
97 [0x61]:           _ulck   
98 [0x62]:           ret   
99 [0x63]:           nop   
100 [0x64]:           nop   
101 [0x65]: line: 125 istorel 0, fp+0   
103 [0x67]:           movl 0   
104 [0x68]:           _ulck   
105 [0x69]:           ret   
106 [0x6a]:           movl 0   
107 [0x6b]:           _ulck   


function: std#throwable.get_stack_trace[3288] params(0) in file: lib\support\0.2.805/exceptions.sharp:13:25: note:  
		    stack_trace : string;
		                        ^

0 [0x0]: line: 15 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          pushobj   
4 [0x4]:          pushnull    
5 [0x5]:          itest ebx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 17   
8 [0x8]: line: 16 movl 0   
9 [0x9]:          movn #2   
11 [0xb]:          pushobj   
12 [0xc]:          call @1957 // <platform.kernel#vm.get_stack_trace>   
13 [0xd]:          movl 0   
14 [0xe]:          movn #1   
16 [0x10]:          popobj   
17 [0x11]:          nop   
18 [0x12]: line: 20 movl 0   
19 [0x13]:          movn #1   
21 [0x15]:          returnobj   
22 [0x16]:          ret   


constructor: std#list<std.io#thread>.list[3289] params(0) in file: lib\support\0.2.805/list.sharp:13:9: note:  
		    list() {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 14 movi #10, ebx   
3 [0x3]:          new_classarray ebx  // std.io#thread[]   
4 [0x4]:          movl 0   
5 [0x5]:          movn #1   
7 [0x7]:          popobj   
8 [0x8]:          ret   


constructor: std#list<std.io#thread>.list[3290] params(1) in file: lib\support\0.2.805/list.sharp:17:9: note:  
		    list(starting_capacity: var) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 18 loadl ebx, fp+1   
2 [0x2]:          new_classarray ebx  // std.io#thread[]   
3 [0x3]:          movl 0   
4 [0x4]:          movn #1   
6 [0x6]:          popobj   
7 [0x7]:          ret   


constructor: std#list<std.io#thread>.list[3291] params(1) in file: lib\support\0.2.805/list.sharp:21:9: note:  
		    list(initial_data: t[]) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 22 pushl 0   
2 [0x2]:          pushl 1   
3 [0x3]:          call @3302 // <std#list<std.io#thread>.add_all>   
4 [0x4]:          ret   


function: std#list<std.io#thread>.empty[3292] params(0) in file: lib\support\0.2.805/list.sharp:25:8: note:  
		    def empty() := n_elements == 0;
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          return_val cmt   
12 [0xc]:          ret   


function: std#list<std.io#thread>.set_compact[3293] params(1) in file: lib\support\0.2.805/list.sharp:27:8: note:  
		    def set_compact(compact_array: var) {
		       ^

0 [0x0]: line: 28 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #2   
4 [0x4]:          loadval ebx   
5 [0x5]:          movi #0, adx   
7 [0x7]:          rmov adx, ebx   
8 [0x8]:          ret   


function: std#list<std.io#thread>.get_elements[3294] params(0) in file: lib\support\0.2.805/list.sharp:31:8: note:  
		    def get_elements() : t[] {
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          jne 17   
12 [0xc]:          pushnull    
13 [0xd]:          popobj2    
14 [0xe]:          returnobj   
15 [0xf]:          ret   
16 [0x10]:          jmp @34   
17 [0x11]: line: 33 movl 0   
18 [0x12]:          movn #1   
20 [0x14]:          pushobj   
21 [0x15]:          istore 0   
23 [0x17]:          movl 0   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          iaload ebx, adx   
29 [0x1d]:          rstore ebx   
30 [0x1e]:          call @1755 // <std.io#__srt_global.copy>   
31 [0x1f]:          popobj2    
32 [0x20]:          returnobj   
33 [0x21]:          ret   
34 [0x22]:          nop   


overload function: std#list<std.io#thread>.operator[[3295] params(1) in file: lib\support\0.2.805/list.sharp:36:8: note:  
		    def operator[](index: var): t {
		       ^

0 [0x0]: line: 37 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 25   
18 [0x12]: line: 38 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:          dup    
20 [0x14]:          pushl 0   
21 [0x15]:          ipushl #1   
22 [0x16]:          call @3315 // <std#list<std.io#thread>.out_of_bounds_msg>   
23 [0x17]:          call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:          throw    
25 [0x19]:          nop   
26 [0x1a]: line: 39 movl 0   
27 [0x1b]:          movn #1   
29 [0x1d]:          pushobj   
30 [0x1e]:          loadl ebx, fp+1   
31 [0x1f]:          popobj2    
32 [0x20]:          movr adx, ebx   
33 [0x21]:          chklen adx   
34 [0x22]:          movnd adx   
35 [0x23]:          returnobj   
36 [0x24]:          ret   


function: std#list<std.io#thread>.at[3296] params(1) in file: lib\support\0.2.805/list.sharp:42:8: note:  
		    def at(index: var): t {
		       ^

0 [0x0]: line: 43 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 25   
18 [0x12]: line: 44 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:          dup    
20 [0x14]:          pushl 0   
21 [0x15]:          ipushl #1   
22 [0x16]:          call @3315 // <std#list<std.io#thread>.out_of_bounds_msg>   
23 [0x17]:          call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:          throw    
25 [0x19]:          nop   
26 [0x1a]: line: 45 movl 0   
27 [0x1b]:          movn #1   
29 [0x1d]:          pushobj   
30 [0x1e]:          loadl ebx, fp+1   
31 [0x1f]:          popobj2    
32 [0x20]:          movr adx, ebx   
33 [0x21]:          chklen adx   
34 [0x22]:          movnd adx   
35 [0x23]:          returnobj   
36 [0x24]:          ret   


function: std#list<std.io#thread>.last[3297] params(0) in file: lib\support\0.2.805/list.sharp:48:8: note:  
		    def last(): t {
		       ^

0 [0x0]: line: 49 pushl 0   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          rstore ebx   
8 [0x8]:          movi #1, ebx   
10 [0xa]:          loadval ecx   
11 [0xb]:          sub ecx, ebx -> ebx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @3296 // <std#list<std.io#thread>.at>   
14 [0xe]:          popobj2    
15 [0xf]:          returnobj   
16 [0x10]:          ret   


function: std#list<std.io#thread>.put[3298] params(2) in file: lib\support\0.2.805/list.sharp:52:8: note:  
		    def put(index: var, element: t) : t {
		       ^

0 [0x0]: line: 53 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 25   
18 [0x12]: line: 54 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:          dup    
20 [0x14]:          pushl 0   
21 [0x15]:          ipushl #1   
22 [0x16]:          call @3315 // <std#list<std.io#thread>.out_of_bounds_msg>   
23 [0x17]:          call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:          throw    
25 [0x19]:          nop   
26 [0x1a]: line: 56 movl 0   
27 [0x1b]:          movn #1   
29 [0x1d]:          pushobj   
30 [0x1e]:          loadl ebx, fp+1   
31 [0x1f]:          popobj2    
32 [0x20]:          movr adx, ebx   
33 [0x21]:          chklen adx   
34 [0x22]:          movnd adx   
35 [0x23]:          smovr_3 fp+3   
36 [0x24]: line: 57 pushl 2   
37 [0x25]:          movl 0   
38 [0x26]:          movn #1   
40 [0x28]:          pushobj   
41 [0x29]:          loadl ebx, fp+1   
42 [0x2a]:          popobj2    
43 [0x2b]:          movr adx, ebx   
44 [0x2c]:          chklen adx   
45 [0x2d]:          movnd adx   
46 [0x2e]:          popobj   
47 [0x2f]: line: 58 movl 3   
48 [0x30]:          returnobj   
49 [0x31]:          ret   


function: std#list<std.io#thread>.expand[3299] params(0) in file: lib\support\0.2.805/list.sharp:61:16: note:  
		    private def expand() {
		               ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #2   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 24   
8 [0x8]: line: 63 movl 0   
9 [0x9]:          movn #1   
11 [0xb]:          pushobj   
12 [0xc]:          movl 0   
13 [0xd]:          movn #1   
15 [0xf]:          sizeof ebx   
16 [0x10]:          rstore ebx   
17 [0x11]:          movi #128, ebx   
19 [0x13]:          loadval ecx   
20 [0x14]:          add ecx, ebx -> ebx   
21 [0x15]:          rstore ebx   
22 [0x16]:          call @1735 // <std.io#__srt_global.realloc>   
23 [0x17]:          jmp @51   
24 [0x18]: line: 65 movl 0   
25 [0x19]:          movn #1   
27 [0x1b]:          pushobj   
28 [0x1c]:          movl 0   
29 [0x1d]:          movn #1   
31 [0x1f]:          sizeof ebx   
32 [0x20]:          rstore ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #1   
36 [0x24]:          sizeof ebx   
37 [0x25]:          rstore ebx   
38 [0x26]:          movi #4, ebx   
40 [0x28]:          loadval ecx   
41 [0x29]:          shr ecx, ebx -> ebx   
42 [0x2a]:          loadval ecx   
43 [0x2b]:          add ecx, ebx -> ebx   
44 [0x2c]:          rstore ebx   
45 [0x2d]:          movi #128, ebx   
47 [0x2f]:          loadval ecx   
48 [0x30]:          add ecx, ebx -> ebx   
49 [0x31]:          rstore ebx   
50 [0x32]:          call @1735 // <std.io#__srt_global.realloc>   
51 [0x33]:          nop   
52 [0x34]:          ret   


function: std#list<std.io#thread>.clear[3300] params(0) in file: lib\support\0.2.805/list.sharp:68:8: note:  
		    def clear() {
		       ^

0 [0x0]: line: 69 movi #10, ebx   
2 [0x2]:          new_classarray ebx  // std.io#thread[]   
3 [0x3]:          movl 0   
4 [0x4]:          movn #1   
6 [0x6]:          popobj   
7 [0x7]: line: 70 movi #0, ebx   
9 [0x9]:          movl 0   
10 [0xa]:          movn #0   
12 [0xc]:          movi #0, adx   
14 [0xe]:          rmov adx, ebx   
15 [0xf]:          ret   


function: std#list<std.io#thread>.add_all[3301] params(1) in file: lib\support\0.2.805/list.sharp:73:8: note:  
		    def add_all(lst: list<t>) {
		       ^

0 [0x0]: line: 74 movl 1   
1 [0x1]:          movn #1   
3 [0x3]:          pushobj   
4 [0x4]:          istore 0   
6 [0x6]:          movl 1   
7 [0x7]:          movn #0   
9 [0x9]:          movi #0, adx   
11 [0xb]:          iaload ebx, adx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @1755 // <std.io#__srt_global.copy>   
14 [0xe]:          popobj2    
15 [0xf]:          movi #28, cmt   
17 [0x11]:          cast cmt   
18 [0x12]:          pushobj   
19 [0x13]:          movl 0   
20 [0x14]:          movn #1   
22 [0x16]:          popobj   
23 [0x17]: line: 75 movl 1   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          iaload ebx, adx   
29 [0x1d]:          movl 0   
30 [0x1e]:          movn #0   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          ret   


function: std#list<std.io#thread>.add_all[3302] params(1) in file: lib\support\0.2.805/list.sharp:78:8: note:  
		    def add_all(lst: t[]) {
		       ^

0 [0x0]: line: 79 movl 1   
1 [0x1]:          checknull   
2 [0x2]:          not ebx, ebx   
3 [0x3]:          movr cmt, ebx   
4 [0x4]:          jne 30   
5 [0x5]: line: 80 pushl 1   
6 [0x6]:          istore 0   
8 [0x8]:          movl 1   
9 [0x9]:          sizeof ebx   
10 [0xa]:          rstore ebx   
11 [0xb]:          call @1755 // <std.io#__srt_global.copy>   
12 [0xc]:          popobj2    
13 [0xd]:          movi #28, cmt   
15 [0xf]:          cast cmt   
16 [0x10]:          pushobj   
17 [0x11]:          movl 0   
18 [0x12]:          movn #1   
20 [0x14]:          popobj   
21 [0x15]: line: 81 movl 1   
22 [0x16]:          sizeof ebx   
23 [0x17]:          movl 0   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          rmov adx, ebx   
29 [0x1d]:          jmp @45   
30 [0x1e]: line: 83 movi #0, ebx   
32 [0x20]:          movl 0   
33 [0x21]:          movn #0   
35 [0x23]:          movi #0, adx   
37 [0x25]:          rmov adx, ebx   
38 [0x26]: line: 84 movi #10, ebx   
40 [0x28]:          new_classarray ebx  // std.io#thread[]   
41 [0x29]:          movl 0   
42 [0x2a]:          movn #1   
44 [0x2c]:          popobj   
45 [0x2d]:          nop   
46 [0x2e]:          ret   


function: std#list<std.io#thread>.add[3303] params(1) in file: lib\support\0.2.805/list.sharp:88:8: note:  
		    def add(element: t) {
		       ^

0 [0x0]: line: 89 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 0   
8 [0x8]:          movn #1   
10 [0xa]:          sizeof ebx   
11 [0xb]:          loadval ecx   
12 [0xc]:          gte ecx, ebx   
13 [0xd]:          movr ebx, cmt   
14 [0xe]:          movr cmt, ebx   
15 [0xf]:          jne 18   
16 [0x10]: line: 90 pushl 0   
17 [0x11]:          call @3299 // <std#list<std.io#thread>.expand>   
18 [0x12]:          nop   
19 [0x13]: line: 91 pushl 1   
20 [0x14]:          movl 0   
21 [0x15]:          movn #1   
23 [0x17]:          pushobj   
24 [0x18]:          movl 0   
25 [0x19]:          movn #0   
27 [0x1b]:          movi #0, adx   
29 [0x1d]:          iaload ebx, adx   
30 [0x1e]:          movr egx, ebx   
31 [0x1f]:          inc ebx   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          movr ebx, egx   
36 [0x24]:          popobj2    
37 [0x25]:          movr adx, ebx   
38 [0x26]:          chklen adx   
39 [0x27]:          movnd adx   
40 [0x28]:          popobj   
41 [0x29]:          ret   


function: std#list<std.io#thread>.indexof[3304] params(1) in file: lib\support\0.2.805/list.sharp:94:8: note:  
		    def indexof(element: t) : var {
		       ^

0 [0x0]: line: 95 istorel 0, fp+2   
2 [0x2]:          ipushl #2   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          movi #0, adx   
8 [0x8]:          iaload ebx, adx   
9 [0x9]:          loadval ecx   
10 [0xa]:          lt ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 36   
14 [0xe]: line: 96 pushl 1   
15 [0xf]:          movl 0   
16 [0x10]:          movn #1   
18 [0x12]:          pushobj   
19 [0x13]:          loadl ebx, fp+2   
20 [0x14]:          popobj2    
21 [0x15]:          movr adx, ebx   
22 [0x16]:          chklen adx   
23 [0x17]:          movnd adx   
24 [0x18]:          pushobj   
25 [0x19]:          call @1877 // <std.io#thread.operator==>   
26 [0x1a]:          loadval ebx   
27 [0x1b]:          movr cmt, ebx   
28 [0x1c]:          jne 32   
29 [0x1d]: line: 97 loadl ebx, fp+2   
30 [0x1e]:          return_val ebx   
31 [0x1f]:          ret   
32 [0x20]:          nop   
33 [0x21]:          iaddl 1, fp@2   
35 [0x23]:          jmp @2   
36 [0x24]: line: 101 istorel -1, fp+0   
38 [0x26]:           ret   


function: std#list<std.io#thread>.pop_back[3305] params(0) in file: lib\support\0.2.805/list.sharp:104:8: note:  
		    def pop_back() {
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #0, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 38   
14 [0xe]: line: 106 movl 1   
15 [0xf]:           del   
16 [0x10]: line: 107 pushl 1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           movl 0   
22 [0x16]:           movn #0   
24 [0x18]:           movi #0, adx   
26 [0x1a]:           iaload ebx, adx   
27 [0x1b]:           movr egx, ebx   
28 [0x1c]:           dec ebx   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           rmov adx, ebx   
32 [0x20]:           movr ebx, egx   
33 [0x21]:           popobj2    
34 [0x22]:           movr adx, ebx   
35 [0x23]:           chklen adx   
36 [0x24]:           movnd adx   
37 [0x25]:           popobj   
38 [0x26]:           nop   
39 [0x27]:           ret   


function: std#list<std.io#thread>.size[3306] params(0) in file: lib\support\0.2.805/list.sharp:111:8: note:  
		    def size() := n_elements;
		       ^

0 [0x0]: line: 111 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std#list<std.io#thread>.insert[3307] params(2) in file: lib\support\0.2.805/list.sharp:113:8: note:  
		    def insert(index: var, element: t) {
		       ^

0 [0x0]: line: 114 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gt ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 25   
18 [0x12]: line: 115 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:           dup    
20 [0x14]:           pushl 0   
21 [0x15]:           ipushl #1   
22 [0x16]:           call @3315 // <std#list<std.io#thread>.out_of_bounds_msg>   
23 [0x17]:           call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:           throw    
25 [0x19]:           nop   
26 [0x1a]: line: 117 movl 0   
27 [0x1b]:           movn #0   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           iaload ebx, adx   
32 [0x20]:           rstore ebx   
33 [0x21]:           movi #0, ebx   
35 [0x23]:           loadval ecx   
36 [0x24]:           test ecx, ebx   
37 [0x25]:           jne 42   
38 [0x26]: line: 118 pushl 0   
39 [0x27]:           pushl 2   
40 [0x28]:           call @3303 // <std#list<std.io#thread>.add>   
41 [0x29]:           jmp @131   
42 [0x2a]: line: 120 movl 0   
43 [0x2b]:           movn #0   
45 [0x2d]:           movi #0, adx   
47 [0x2f]:           iaload ebx, adx   
48 [0x30]:           rstore ebx   
49 [0x31]:           movl 0   
50 [0x32]:           movn #1   
52 [0x34]:           sizeof ebx   
53 [0x35]:           loadval ecx   
54 [0x36]:           gte ecx, ebx   
55 [0x37]:           movr ebx, cmt   
56 [0x38]:           movr cmt, ebx   
57 [0x39]:           jne 60   
58 [0x3a]: line: 121 pushl 0   
59 [0x3b]:           call @3299 // <std#list<std.io#thread>.expand>   
60 [0x3c]:           nop   
61 [0x3d]: line: 122 movl 0   
62 [0x3e]:           movn #0   
64 [0x40]:           movi #0, adx   
66 [0x42]:           iaload ebx, adx   
67 [0x43]:           movr egx, ebx   
68 [0x44]:           inc ebx   
69 [0x45]:           movi #0, adx   
71 [0x47]:           rmov adx, ebx   
72 [0x48]: line: 123 movl 0   
73 [0x49]:           movn #0   
75 [0x4b]:           movi #0, adx   
77 [0x4d]:           iaload ebx, adx   
78 [0x4e]:           rstore ebx   
79 [0x4f]:           movi #1, ebx   
81 [0x51]:           loadval ecx   
82 [0x52]:           sub ecx, ebx -> ebx   
83 [0x53]:           smovr_2 ebx, fp+3   
84 [0x54]:           ipushl #3   
85 [0x55]:           loadl ebx, fp+1   
86 [0x56]:           loadval ecx   
87 [0x57]:           gt ecx, ebx   
88 [0x58]:           movr ebx, cmt   
89 [0x59]:           movr cmt, ebx   
90 [0x5a]:           jne 120   
91 [0x5b]: line: 124 movl 0   
92 [0x5c]:           movn #1   
94 [0x5e]:           pushobj   
95 [0x5f]:           ipushl #3   
96 [0x60]:           movi #1, ebx   
98 [0x62]:           loadval ecx   
99 [0x63]:           sub ecx, ebx -> ebx   
100 [0x64]:           popobj2    
101 [0x65]:           movr adx, ebx   
102 [0x66]:           chklen adx   
103 [0x67]:           movnd adx   
104 [0x68]:           pushobj   
105 [0x69]:           movl 0   
106 [0x6a]:           movn #1   
108 [0x6c]:           pushobj   
109 [0x6d]:           loadl ebx, fp+3   
110 [0x6e]:           popobj2    
111 [0x6f]:           movr adx, ebx   
112 [0x70]:           chklen adx   
113 [0x71]:           movnd adx   
114 [0x72]:           popobj   
115 [0x73]:           loadl ebx, fp+3   
116 [0x74]:           movr egx, ebx   
117 [0x75]:           dec ebx   
118 [0x76]:           smovr_2 ebx, fp+3   
119 [0x77]:           jmp @84   
120 [0x78]: line: 125 pushl 2   
121 [0x79]:           movl 0   
122 [0x7a]:           movn #1   
124 [0x7c]:           pushobj   
125 [0x7d]:           loadl ebx, fp+1   
126 [0x7e]:           popobj2    
127 [0x7f]:           movr adx, ebx   
128 [0x80]:           chklen adx   
129 [0x81]:           movnd adx   
130 [0x82]:           popobj   
131 [0x83]:           nop   
132 [0x84]:           ret   


function: std#list<std.io#thread>.find[3308] params(2) in file: lib\support\0.2.805/list.sharp:129:8: note:  
		    def find(comparer : t, find_func: (t, t)(var)) : t {
		       ^

0 [0x0]: line: 130 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 46   
14 [0xe]: line: 131 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 42   
31 [0x1f]: line: 132 movl 0   
32 [0x20]:           movn #1   
34 [0x22]:           pushobj   
35 [0x23]:           loadl ebx, fp+3   
36 [0x24]:           popobj2    
37 [0x25]:           movr adx, ebx   
38 [0x26]:           chklen adx   
39 [0x27]:           movnd adx   
40 [0x28]:           returnobj   
41 [0x29]:           ret   
42 [0x2a]:           nop   
43 [0x2b]:           iaddl 1, fp@3   
45 [0x2d]:           jmp @2   
46 [0x2e]: line: 136 movl 4   
47 [0x2f]:           del   
48 [0x30]: line: 137 movl 4   
49 [0x31]:           returnobj   
50 [0x32]:           ret   


function: std#list<std.io#thread>.remove[3309] params(1) in file: lib\support\0.2.805/list.sharp:140:8: note:  
		    def remove(val: t) {
		       ^

0 [0x0]: line: 141 istorel 0, fp+2   
2 [0x2]:           ipushl #2   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 37   
14 [0xe]: line: 142 pushl 1   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+2   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           call @1877 // <std.io#thread.operator==>   
26 [0x1a]:           loadval ebx   
27 [0x1b]:           movr cmt, ebx   
28 [0x1c]:           jne 33   
29 [0x1d]: line: 143 pushl 0   
30 [0x1e]:           ipushl #2   
31 [0x1f]:           call @3312 // <std#list<std.io#thread>.remove_at>   
32 [0x20]: line: 144 ret   
33 [0x21]:           nop   
34 [0x22]:           iaddl 1, fp@2   
36 [0x24]:           jmp @2   
37 [0x25]:           ret   


function: std#list<std.io#thread>.remove[3310] params(2) in file: lib\support\0.2.805/list.sharp:149:8: note:  
		    def remove(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 150 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 39   
14 [0xe]: line: 151 ipushl #2   
15 [0xf]:           pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           movnd adx   
25 [0x19]:           pushobj   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 35   
31 [0x1f]: line: 152 pushl 0   
32 [0x20]:           ipushl #3   
33 [0x21]:           call @3312 // <std#list<std.io#thread>.remove_at>   
34 [0x22]: line: 153 ret   
35 [0x23]:           nop   
36 [0x24]:           iaddl 1, fp@3   
38 [0x26]:           jmp @2   
39 [0x27]:           ret   


function: std#list<std.io#thread>.replace[3311] params(2) in file: lib\support\0.2.805/list.sharp:158:8: note:  
		    def replace(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 159 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 47   
14 [0xe]: line: 160 ipushl #2   
15 [0xf]:           pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           movnd adx   
25 [0x19]:           pushobj   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 43   
31 [0x1f]: line: 161 pushl 1   
32 [0x20]:           movl 0   
33 [0x21]:           movn #1   
35 [0x23]:           pushobj   
36 [0x24]:           loadl ebx, fp+3   
37 [0x25]:           popobj2    
38 [0x26]:           movr adx, ebx   
39 [0x27]:           chklen adx   
40 [0x28]:           movnd adx   
41 [0x29]:           popobj   
42 [0x2a]: line: 162 ret   
43 [0x2b]:           nop   
44 [0x2c]:           iaddl 1, fp@3   
46 [0x2e]:           jmp @2   
47 [0x2f]:           ret   


function: std#list<std.io#thread>.remove_at[3312] params(1) in file: lib\support\0.2.805/list.sharp:167:8: note:  
		    def remove_at(index: var) {
		       ^

0 [0x0]: line: 168 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gte ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 25   
18 [0x12]: line: 169 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:           dup    
20 [0x14]:           pushl 0   
21 [0x15]:           ipushl #1   
22 [0x16]:           call @3315 // <std#list<std.io#thread>.out_of_bounds_msg>   
23 [0x17]:           call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:           throw    
25 [0x19]:           nop   
26 [0x1a]: line: 171 movl 0   
27 [0x1b]:           movn #0   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           iaload ebx, adx   
32 [0x20]:           rstore ebx   
33 [0x21]:           loadl ebx, fp+1   
34 [0x22]:           loadval ecx   
35 [0x23]:           sub ecx, ebx -> ebx   
36 [0x24]:           rstore ebx   
37 [0x25]:           movi #1, ebx   
39 [0x27]:           loadval ecx   
40 [0x28]:           sub ecx, ebx -> ebx   
41 [0x29]:           smovr_2 ebx, fp+2   
42 [0x2a]: line: 172 ipushl #2   
43 [0x2b]:           movi #0, ebx   
45 [0x2d]:           loadval ecx   
46 [0x2e]:           gt ecx, ebx   
47 [0x2f]:           movr ebx, cmt   
48 [0x30]:           movr cmt, ebx   
49 [0x31]:           jne 73   
50 [0x32]: line: 173 movl 0   
51 [0x33]:           movn #1   
53 [0x35]:           pushobj   
54 [0x36]:           movl 0   
55 [0x37]:           movn #1   
57 [0x39]:           pushobj   
58 [0x3a]:           ipushl #1   
59 [0x3b]:           ipushl #1   
60 [0x3c]:           movi #1, ebx   
62 [0x3e]:           loadval ecx   
63 [0x3f]:           add ecx, ebx -> ebx   
64 [0x40]:           rstore ebx   
65 [0x41]:           movl 0   
66 [0x42]:           movn #0   
68 [0x44]:           movi #0, adx   
70 [0x46]:           iaload ebx, adx   
71 [0x47]:           rstore ebx   
72 [0x48]:           call @1745 // <std.io#__srt_global.memcopy>   
73 [0x49]:           nop   
74 [0x4a]: line: 175 pushl 0   
75 [0x4b]:           call @3305 // <std#list<std.io#thread>.pop_back>   
76 [0x4c]:           ret   


function: std#list<std.io#thread>.indexof[3313] params(2) in file: lib\support\0.2.805/list.sharp:178:8: note:  
		    def indexof(comparer: t, find_func: (t, t)(var)) : var {
		       ^

0 [0x0]: line: 179 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 38   
14 [0xe]: line: 180 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 34   
31 [0x1f]: line: 181 loadl ebx, fp+3   
32 [0x20]:           return_val ebx   
33 [0x21]:           ret   
34 [0x22]:           nop   
35 [0x23]:           iaddl 1, fp@3   
37 [0x25]:           jmp @2   
38 [0x26]: line: 185 istorel -1, fp+0   
40 [0x28]:           ret   


function: std#list<std.io#thread>.to_string[3314] params(0) in file: lib\support\0.2.805/list.sharp:188:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 189 new_class @65 // std#string_builder   
1 [0x1]:           dup    
2 [0x2]:           call @3038 // <std#string_builder.string_builder>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+1   
5 [0x5]: line: 191 pushl 1   
6 [0x6]:           newstr @138 // [    
7 [0x7]:           call @3034 // <std#string_builder.operator+=>   
8 [0x8]:           pop   
9 [0x9]: line: 192 istorel 0, fp+2   
11 [0xb]:           ipushl #2   
12 [0xc]:           movl 0   
13 [0xd]:           movn #0   
15 [0xf]:           movi #0, adx   
17 [0x11]:           iaload ebx, adx   
18 [0x12]:           loadval ecx   
19 [0x13]:           lt ecx, ebx   
20 [0x14]:           movr ebx, cmt   
21 [0x15]:           movr cmt, ebx   
22 [0x16]:           jne 61   
23 [0x17]: line: 193 pushl 1   
24 [0x18]:           movl 0   
25 [0x19]:           movn #1   
27 [0x1b]:           pushobj   
28 [0x1c]:           loadl ebx, fp+2   
29 [0x1d]:           popobj2    
30 [0x1e]:           movr adx, ebx   
31 [0x1f]:           chklen adx   
32 [0x20]:           movnd adx   
33 [0x21]:           pushobj   
34 [0x22]:           call @3030 // <std#string_builder.operator+=>   
35 [0x23]:           pop   
36 [0x24]: line: 195 ipushl #2   
37 [0x25]:           movi #1, ebx   
39 [0x27]:           loadval ecx   
40 [0x28]:           add ecx, ebx -> ebx   
41 [0x29]:           rstore ebx   
42 [0x2a]:           movl 0   
43 [0x2b]:           movn #0   
45 [0x2d]:           movi #0, adx   
47 [0x2f]:           iaload ebx, adx   
48 [0x30]:           loadval ecx   
49 [0x31]:           lt ecx, ebx   
50 [0x32]:           movr ebx, cmt   
51 [0x33]:           movr cmt, ebx   
52 [0x34]:           jne 57   
53 [0x35]: line: 196 pushl 1   
54 [0x36]:           newstr @139 // ,    
55 [0x37]:           call @3034 // <std#string_builder.operator+=>   
56 [0x38]:           pop   
57 [0x39]:           nop   
58 [0x3a]:           iaddl 1, fp@2   
60 [0x3c]:           jmp @11   
61 [0x3d]: line: 200 pushl 1   
62 [0x3e]:           newstr @140 //  ]   
63 [0x3f]:           call @3034 // <std#string_builder.operator+=>   
64 [0x40]:           pop   
65 [0x41]: line: 201 pushl 1   
66 [0x42]:           call @3011 // <std#string_builder.to_string>   
67 [0x43]:           popobj2    
68 [0x44]:           returnobj   
69 [0x45]:           ret   


function: std#list<std.io#thread>.out_of_bounds_msg[3315] params(1) in file: lib\support\0.2.805/list.sharp:204:16: note:  
		    private def out_of_bounds_msg(index: var) : string {
		               ^

0 [0x0]: line: 205 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           newstr @141 // Index:    
3 [0x3]:           call @2935 // <std#string.string>   
4 [0x4]:           ipushl #1   
5 [0x5]:           call @2967 // <std#string.operator+>   
6 [0x6]:           newstr @142 // , size:    
7 [0x7]:           call @2947 // <std#string.operator+>   
8 [0x8]:           movl 0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           iaload ebx, adx   
14 [0xe]:           rstore ebx   
15 [0xf]:           call @2967 // <std#string.operator+>   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


std#loopable<std.io.task#job>.get_elements[3316] params(0) in file: lib\support\0.2.805/loopable.sharp:4:8: note:  
		    def get_elements() : t[];
		       ^



constructor: std#loopable<std.io.task#job>.loopable[3317] params(0) in file: lib\support\0.2.805/loopable.sharp:3:10: note:  
		interface loopable<t> {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#synced_list<std.io.task#job>.synced_list[3318] params(0) in file: lib\support\0.2.805/synced_list.sharp:13:16: note:  
		    synced_list() {
		               ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 14 movi #10, ebx   
3 [0x3]:          new_classarray ebx  // std.io.task#job[]   
4 [0x4]:          movl 0   
5 [0x5]:          movn #1   
7 [0x7]:          popobj   
8 [0x8]:          ret   


constructor: std#synced_list<std.io.task#job>.synced_list[3319] params(1) in file: lib\support\0.2.805/synced_list.sharp:17:16: note:  
		    synced_list(starting_capacity: var) {
		               ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 18 loadl ebx, fp+1   
2 [0x2]:          new_classarray ebx  // std.io.task#job[]   
3 [0x3]:          movl 0   
4 [0x4]:          movn #1   
6 [0x6]:          popobj   
7 [0x7]:          ret   


function: std#synced_list<std.io.task#job>.set_compact[3320] params(1) in file: lib\support\0.2.805/synced_list.sharp:21:8: note:  
		    def set_compact(compact_array: var) {
		       ^

0 [0x0]: line: 22 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 23 ipushl #1   
3 [0x3]:          movl 0   
4 [0x4]:          movn #2   
6 [0x6]:          loadval ebx   
7 [0x7]:          movi #0, adx   
9 [0x9]:          rmov adx, ebx   
10 [0xa]:          movl 0   
11 [0xb]:          _ulck   
12 [0xc]:          ret   


function: std#synced_list<std.io.task#job>.get_elements[3321] params(0) in file: lib\support\0.2.805/synced_list.sharp:27:8: note:  
		    def get_elements() : t[] {
		       ^

0 [0x0]: line: 28 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 29 movl 0   
3 [0x3]:          movn #0   
5 [0x5]:          movi #0, adx   
7 [0x7]:          iaload ebx, adx   
8 [0x8]:          rstore ebx   
9 [0x9]:          movi #0, ebx   
11 [0xb]:          loadval ecx   
12 [0xc]:          test ecx, ebx   
13 [0xd]:          jne 21   
14 [0xe]:          pushnull    
15 [0xf]:          popobj2    
16 [0x10]:          returnobj   
17 [0x11]:          movl 0   
18 [0x12]:          _ulck   
19 [0x13]:          ret   
20 [0x14]:          jmp @40   
21 [0x15]: line: 30 movl 0   
22 [0x16]:          movn #1   
24 [0x18]:          pushobj   
25 [0x19]:          istore 0   
27 [0x1b]:          movl 0   
28 [0x1c]:          movn #0   
30 [0x1e]:          movi #0, adx   
32 [0x20]:          iaload ebx, adx   
33 [0x21]:          rstore ebx   
34 [0x22]:          call @1755 // <std.io#__srt_global.copy>   
35 [0x23]:          popobj2    
36 [0x24]:          returnobj   
37 [0x25]:          movl 0   
38 [0x26]:          _ulck   
39 [0x27]:          ret   
40 [0x28]:          nop   
41 [0x29]:          movl 0   
42 [0x2a]:          _ulck   


overload function: std#synced_list<std.io.task#job>.operator[[3322] params(1) in file: lib\support\0.2.805/synced_list.sharp:34:8: note:  
		    def operator[](index: var): t {
		       ^

0 [0x0]: line: 35 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 36 ipushl #1   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          movi #0, adx   
8 [0x8]:          iaload ebx, adx   
9 [0x9]:          loadval ecx   
10 [0xa]:          gte ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          skpe ebx // pc = 18   
13 [0xd]:          loadl ecx, fp+1   
14 [0xe]:          movi #0, ebx   
16 [0x10]:          lt ecx, ebx   
17 [0x11]:          movr ebx, cmt   
18 [0x12]:          movr cmt, ebx   
19 [0x13]:          jne 27   
20 [0x14]: line: 37 new_class @6 // std#out_of_bounds_exception   
21 [0x15]:          dup    
22 [0x16]:          pushl 0   
23 [0x17]:          ipushl #1   
24 [0x18]:          call @3369 // <std#synced_list<std.io.task#job>.out_of_bounds_msg>   
25 [0x19]:          call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
26 [0x1a]:          throw    
27 [0x1b]:          nop   
28 [0x1c]: line: 38 movl 0   
29 [0x1d]:          movn #1   
31 [0x1f]:          pushobj   
32 [0x20]:          loadl ebx, fp+1   
33 [0x21]:          popobj2    
34 [0x22]:          movr adx, ebx   
35 [0x23]:          chklen adx   
36 [0x24]:          movnd adx   
37 [0x25]:          returnobj   
38 [0x26]:          movl 0   
39 [0x27]:          _ulck   
40 [0x28]:          ret   
41 [0x29]:          movl 0   
42 [0x2a]:          _ulck   


function: std#synced_list<std.io.task#job>.at[3323] params(1) in file: lib\support\0.2.805/synced_list.sharp:42:8: note:  
		    def at(index: var): t {
		       ^

0 [0x0]: line: 43 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 44 ipushl #1   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          movi #0, adx   
8 [0x8]:          iaload ebx, adx   
9 [0x9]:          loadval ecx   
10 [0xa]:          gte ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          skpe ebx // pc = 18   
13 [0xd]:          loadl ecx, fp+1   
14 [0xe]:          movi #0, ebx   
16 [0x10]:          lt ecx, ebx   
17 [0x11]:          movr ebx, cmt   
18 [0x12]:          movr cmt, ebx   
19 [0x13]:          jne 27   
20 [0x14]: line: 45 new_class @6 // std#out_of_bounds_exception   
21 [0x15]:          dup    
22 [0x16]:          pushl 0   
23 [0x17]:          ipushl #1   
24 [0x18]:          call @3369 // <std#synced_list<std.io.task#job>.out_of_bounds_msg>   
25 [0x19]:          call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
26 [0x1a]:          throw    
27 [0x1b]:          nop   
28 [0x1c]: line: 46 movl 0   
29 [0x1d]:          movn #1   
31 [0x1f]:          pushobj   
32 [0x20]:          loadl ebx, fp+1   
33 [0x21]:          popobj2    
34 [0x22]:          movr adx, ebx   
35 [0x23]:          chklen adx   
36 [0x24]:          movnd adx   
37 [0x25]:          returnobj   
38 [0x26]:          movl 0   
39 [0x27]:          _ulck   
40 [0x28]:          ret   
41 [0x29]:          movl 0   
42 [0x2a]:          _ulck   


function: std#synced_list<std.io.task#job>.last[3324] params(0) in file: lib\support\0.2.805/synced_list.sharp:50:8: note:  
		    def last(): t {
		       ^

0 [0x0]: line: 51 pushl 0   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          rstore ebx   
8 [0x8]:          movi #1, ebx   
10 [0xa]:          loadval ecx   
11 [0xb]:          sub ecx, ebx -> ebx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @3323 // <std#synced_list<std.io.task#job>.at>   
14 [0xe]:          popobj2    
15 [0xf]:          returnobj   
16 [0x10]:          ret   


function: std#synced_list<std.io.task#job>.put[3325] params(2) in file: lib\support\0.2.805/synced_list.sharp:54:8: note:  
		    def put(index: var, element: t) : t {
		       ^

0 [0x0]: line: 55 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 56 ipushl #1   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          movi #0, adx   
8 [0x8]:          iaload ebx, adx   
9 [0x9]:          loadval ecx   
10 [0xa]:          gte ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          skpe ebx // pc = 18   
13 [0xd]:          loadl ecx, fp+1   
14 [0xe]:          movi #0, ebx   
16 [0x10]:          lt ecx, ebx   
17 [0x11]:          movr ebx, cmt   
18 [0x12]:          movr cmt, ebx   
19 [0x13]:          jne 27   
20 [0x14]: line: 57 new_class @6 // std#out_of_bounds_exception   
21 [0x15]:          dup    
22 [0x16]:          pushl 0   
23 [0x17]:          ipushl #1   
24 [0x18]:          call @3369 // <std#synced_list<std.io.task#job>.out_of_bounds_msg>   
25 [0x19]:          call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
26 [0x1a]:          throw    
27 [0x1b]:          nop   
28 [0x1c]: line: 59 movl 0   
29 [0x1d]:          movn #1   
31 [0x1f]:          pushobj   
32 [0x20]:          loadl ebx, fp+1   
33 [0x21]:          popobj2    
34 [0x22]:          movr adx, ebx   
35 [0x23]:          chklen adx   
36 [0x24]:          movnd adx   
37 [0x25]:          smovr_3 fp+3   
38 [0x26]: line: 60 pushl 2   
39 [0x27]:          movl 0   
40 [0x28]:          movn #1   
42 [0x2a]:          pushobj   
43 [0x2b]:          loadl ebx, fp+1   
44 [0x2c]:          popobj2    
45 [0x2d]:          movr adx, ebx   
46 [0x2e]:          chklen adx   
47 [0x2f]:          movnd adx   
48 [0x30]:          popobj   
49 [0x31]: line: 61 movl 3   
50 [0x32]:          returnobj   
51 [0x33]:          movl 0   
52 [0x34]:          _ulck   
53 [0x35]:          ret   
54 [0x36]:          movl 0   
55 [0x37]:          _ulck   


function: std#synced_list<std.io.task#job>.expand[3326] params(0) in file: lib\support\0.2.805/synced_list.sharp:65:16: note:  
		    private def expand() {
		               ^

0 [0x0]: line: 66 movl 0   
1 [0x1]:          movn #2   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 24   
8 [0x8]: line: 67 movl 0   
9 [0x9]:          movn #1   
11 [0xb]:          pushobj   
12 [0xc]:          movl 0   
13 [0xd]:          movn #1   
15 [0xf]:          sizeof ebx   
16 [0x10]:          rstore ebx   
17 [0x11]:          movi #128, ebx   
19 [0x13]:          loadval ecx   
20 [0x14]:          add ecx, ebx -> ebx   
21 [0x15]:          rstore ebx   
22 [0x16]:          call @1735 // <std.io#__srt_global.realloc>   
23 [0x17]:          jmp @51   
24 [0x18]: line: 69 movl 0   
25 [0x19]:          movn #1   
27 [0x1b]:          pushobj   
28 [0x1c]:          movl 0   
29 [0x1d]:          movn #1   
31 [0x1f]:          sizeof ebx   
32 [0x20]:          rstore ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #1   
36 [0x24]:          sizeof ebx   
37 [0x25]:          rstore ebx   
38 [0x26]:          movi #4, ebx   
40 [0x28]:          loadval ecx   
41 [0x29]:          shr ecx, ebx -> ebx   
42 [0x2a]:          loadval ecx   
43 [0x2b]:          add ecx, ebx -> ebx   
44 [0x2c]:          rstore ebx   
45 [0x2d]:          movi #128, ebx   
47 [0x2f]:          loadval ecx   
48 [0x30]:          add ecx, ebx -> ebx   
49 [0x31]:          rstore ebx   
50 [0x32]:          call @1735 // <std.io#__srt_global.realloc>   
51 [0x33]:          nop   
52 [0x34]:          ret   


function: std#synced_list<std.io.task#job>.clear[3327] params(0) in file: lib\support\0.2.805/synced_list.sharp:72:8: note:  
		    def clear() {
		       ^

0 [0x0]: line: 73 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 74 movi #10, ebx   
4 [0x4]:          new_classarray ebx  // std.io.task#job[]   
5 [0x5]:          movl 0   
6 [0x6]:          movn #1   
8 [0x8]:          popobj   
9 [0x9]: line: 75 movi #0, ebx   
11 [0xb]:          movl 0   
12 [0xc]:          movn #0   
14 [0xe]:          movi #0, adx   
16 [0x10]:          rmov adx, ebx   
17 [0x11]:          movl 0   
18 [0x12]:          _ulck   
19 [0x13]:          ret   


constructor: std#list<std.io.task#job>.list[3328] params(0) in file: lib\support\0.2.805/list.sharp:13:9: note:  
		    list() {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 14 movi #10, ebx   
3 [0x3]:          new_classarray ebx  // std.io.task#job[]   
4 [0x4]:          movl 0   
5 [0x5]:          movn #1   
7 [0x7]:          popobj   
8 [0x8]:          ret   


constructor: std#list<std.io.task#job>.list[3329] params(1) in file: lib\support\0.2.805/list.sharp:17:9: note:  
		    list(starting_capacity: var) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 18 loadl ebx, fp+1   
2 [0x2]:          new_classarray ebx  // std.io.task#job[]   
3 [0x3]:          movl 0   
4 [0x4]:          movn #1   
6 [0x6]:          popobj   
7 [0x7]:          ret   


constructor: std#list<std.io.task#job>.list[3330] params(1) in file: lib\support\0.2.805/list.sharp:21:9: note:  
		    list(initial_data: t[]) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 22 pushl 0   
2 [0x2]:          pushl 1   
3 [0x3]:          call @3341 // <std#list<std.io.task#job>.add_all>   
4 [0x4]:          ret   


function: std#list<std.io.task#job>.empty[3331] params(0) in file: lib\support\0.2.805/list.sharp:25:8: note:  
		    def empty() := n_elements == 0;
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          return_val cmt   
12 [0xc]:          ret   


function: std#list<std.io.task#job>.set_compact[3332] params(1) in file: lib\support\0.2.805/list.sharp:27:8: note:  
		    def set_compact(compact_array: var) {
		       ^

0 [0x0]: line: 28 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #2   
4 [0x4]:          loadval ebx   
5 [0x5]:          movi #0, adx   
7 [0x7]:          rmov adx, ebx   
8 [0x8]:          ret   


function: std#list<std.io.task#job>.get_elements[3333] params(0) in file: lib\support\0.2.805/list.sharp:31:8: note:  
		    def get_elements() : t[] {
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          jne 17   
12 [0xc]:          pushnull    
13 [0xd]:          popobj2    
14 [0xe]:          returnobj   
15 [0xf]:          ret   
16 [0x10]:          jmp @34   
17 [0x11]: line: 33 movl 0   
18 [0x12]:          movn #1   
20 [0x14]:          pushobj   
21 [0x15]:          istore 0   
23 [0x17]:          movl 0   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          iaload ebx, adx   
29 [0x1d]:          rstore ebx   
30 [0x1e]:          call @1755 // <std.io#__srt_global.copy>   
31 [0x1f]:          popobj2    
32 [0x20]:          returnobj   
33 [0x21]:          ret   
34 [0x22]:          nop   


overload function: std#list<std.io.task#job>.operator[[3334] params(1) in file: lib\support\0.2.805/list.sharp:36:8: note:  
		    def operator[](index: var): t {
		       ^

0 [0x0]: line: 37 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 25   
18 [0x12]: line: 38 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:          dup    
20 [0x14]:          pushl 0   
21 [0x15]:          ipushl #1   
22 [0x16]:          call @3354 // <std#list<std.io.task#job>.out_of_bounds_msg>   
23 [0x17]:          call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:          throw    
25 [0x19]:          nop   
26 [0x1a]: line: 39 movl 0   
27 [0x1b]:          movn #1   
29 [0x1d]:          pushobj   
30 [0x1e]:          loadl ebx, fp+1   
31 [0x1f]:          popobj2    
32 [0x20]:          movr adx, ebx   
33 [0x21]:          chklen adx   
34 [0x22]:          movnd adx   
35 [0x23]:          returnobj   
36 [0x24]:          ret   


function: std#list<std.io.task#job>.at[3335] params(1) in file: lib\support\0.2.805/list.sharp:42:8: note:  
		    def at(index: var): t {
		       ^

0 [0x0]: line: 43 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 25   
18 [0x12]: line: 44 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:          dup    
20 [0x14]:          pushl 0   
21 [0x15]:          ipushl #1   
22 [0x16]:          call @3354 // <std#list<std.io.task#job>.out_of_bounds_msg>   
23 [0x17]:          call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:          throw    
25 [0x19]:          nop   
26 [0x1a]: line: 45 movl 0   
27 [0x1b]:          movn #1   
29 [0x1d]:          pushobj   
30 [0x1e]:          loadl ebx, fp+1   
31 [0x1f]:          popobj2    
32 [0x20]:          movr adx, ebx   
33 [0x21]:          chklen adx   
34 [0x22]:          movnd adx   
35 [0x23]:          returnobj   
36 [0x24]:          ret   


function: std#list<std.io.task#job>.last[3336] params(0) in file: lib\support\0.2.805/list.sharp:48:8: note:  
		    def last(): t {
		       ^

0 [0x0]: line: 49 pushl 0   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          rstore ebx   
8 [0x8]:          movi #1, ebx   
10 [0xa]:          loadval ecx   
11 [0xb]:          sub ecx, ebx -> ebx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @3335 // <std#list<std.io.task#job>.at>   
14 [0xe]:          popobj2    
15 [0xf]:          returnobj   
16 [0x10]:          ret   


function: std#list<std.io.task#job>.put[3337] params(2) in file: lib\support\0.2.805/list.sharp:52:8: note:  
		    def put(index: var, element: t) : t {
		       ^

0 [0x0]: line: 53 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 25   
18 [0x12]: line: 54 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:          dup    
20 [0x14]:          pushl 0   
21 [0x15]:          ipushl #1   
22 [0x16]:          call @3354 // <std#list<std.io.task#job>.out_of_bounds_msg>   
23 [0x17]:          call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:          throw    
25 [0x19]:          nop   
26 [0x1a]: line: 56 movl 0   
27 [0x1b]:          movn #1   
29 [0x1d]:          pushobj   
30 [0x1e]:          loadl ebx, fp+1   
31 [0x1f]:          popobj2    
32 [0x20]:          movr adx, ebx   
33 [0x21]:          chklen adx   
34 [0x22]:          movnd adx   
35 [0x23]:          smovr_3 fp+3   
36 [0x24]: line: 57 pushl 2   
37 [0x25]:          movl 0   
38 [0x26]:          movn #1   
40 [0x28]:          pushobj   
41 [0x29]:          loadl ebx, fp+1   
42 [0x2a]:          popobj2    
43 [0x2b]:          movr adx, ebx   
44 [0x2c]:          chklen adx   
45 [0x2d]:          movnd adx   
46 [0x2e]:          popobj   
47 [0x2f]: line: 58 movl 3   
48 [0x30]:          returnobj   
49 [0x31]:          ret   


function: std#list<std.io.task#job>.expand[3338] params(0) in file: lib\support\0.2.805/list.sharp:61:16: note:  
		    private def expand() {
		               ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #2   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 24   
8 [0x8]: line: 63 movl 0   
9 [0x9]:          movn #1   
11 [0xb]:          pushobj   
12 [0xc]:          movl 0   
13 [0xd]:          movn #1   
15 [0xf]:          sizeof ebx   
16 [0x10]:          rstore ebx   
17 [0x11]:          movi #128, ebx   
19 [0x13]:          loadval ecx   
20 [0x14]:          add ecx, ebx -> ebx   
21 [0x15]:          rstore ebx   
22 [0x16]:          call @1735 // <std.io#__srt_global.realloc>   
23 [0x17]:          jmp @51   
24 [0x18]: line: 65 movl 0   
25 [0x19]:          movn #1   
27 [0x1b]:          pushobj   
28 [0x1c]:          movl 0   
29 [0x1d]:          movn #1   
31 [0x1f]:          sizeof ebx   
32 [0x20]:          rstore ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #1   
36 [0x24]:          sizeof ebx   
37 [0x25]:          rstore ebx   
38 [0x26]:          movi #4, ebx   
40 [0x28]:          loadval ecx   
41 [0x29]:          shr ecx, ebx -> ebx   
42 [0x2a]:          loadval ecx   
43 [0x2b]:          add ecx, ebx -> ebx   
44 [0x2c]:          rstore ebx   
45 [0x2d]:          movi #128, ebx   
47 [0x2f]:          loadval ecx   
48 [0x30]:          add ecx, ebx -> ebx   
49 [0x31]:          rstore ebx   
50 [0x32]:          call @1735 // <std.io#__srt_global.realloc>   
51 [0x33]:          nop   
52 [0x34]:          ret   


function: std#list<std.io.task#job>.clear[3339] params(0) in file: lib\support\0.2.805/list.sharp:68:8: note:  
		    def clear() {
		       ^

0 [0x0]: line: 69 movi #10, ebx   
2 [0x2]:          new_classarray ebx  // std.io.task#job[]   
3 [0x3]:          movl 0   
4 [0x4]:          movn #1   
6 [0x6]:          popobj   
7 [0x7]: line: 70 movi #0, ebx   
9 [0x9]:          movl 0   
10 [0xa]:          movn #0   
12 [0xc]:          movi #0, adx   
14 [0xe]:          rmov adx, ebx   
15 [0xf]:          ret   


function: std#list<std.io.task#job>.add_all[3340] params(1) in file: lib\support\0.2.805/list.sharp:73:8: note:  
		    def add_all(lst: list<t>) {
		       ^

0 [0x0]: line: 74 movl 1   
1 [0x1]:          movn #1   
3 [0x3]:          pushobj   
4 [0x4]:          istore 0   
6 [0x6]:          movl 1   
7 [0x7]:          movn #0   
9 [0x9]:          movi #0, adx   
11 [0xb]:          iaload ebx, adx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @1755 // <std.io#__srt_global.copy>   
14 [0xe]:          popobj2    
15 [0xf]:          movi #22, cmt   
17 [0x11]:          cast cmt   
18 [0x12]:          pushobj   
19 [0x13]:          movl 0   
20 [0x14]:          movn #1   
22 [0x16]:          popobj   
23 [0x17]: line: 75 movl 1   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          iaload ebx, adx   
29 [0x1d]:          movl 0   
30 [0x1e]:          movn #0   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          ret   


function: std#list<std.io.task#job>.add_all[3341] params(1) in file: lib\support\0.2.805/list.sharp:78:8: note:  
		    def add_all(lst: t[]) {
		       ^

0 [0x0]: line: 79 movl 1   
1 [0x1]:          checknull   
2 [0x2]:          not ebx, ebx   
3 [0x3]:          movr cmt, ebx   
4 [0x4]:          jne 30   
5 [0x5]: line: 80 pushl 1   
6 [0x6]:          istore 0   
8 [0x8]:          movl 1   
9 [0x9]:          sizeof ebx   
10 [0xa]:          rstore ebx   
11 [0xb]:          call @1755 // <std.io#__srt_global.copy>   
12 [0xc]:          popobj2    
13 [0xd]:          movi #22, cmt   
15 [0xf]:          cast cmt   
16 [0x10]:          pushobj   
17 [0x11]:          movl 0   
18 [0x12]:          movn #1   
20 [0x14]:          popobj   
21 [0x15]: line: 81 movl 1   
22 [0x16]:          sizeof ebx   
23 [0x17]:          movl 0   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          rmov adx, ebx   
29 [0x1d]:          jmp @45   
30 [0x1e]: line: 83 movi #0, ebx   
32 [0x20]:          movl 0   
33 [0x21]:          movn #0   
35 [0x23]:          movi #0, adx   
37 [0x25]:          rmov adx, ebx   
38 [0x26]: line: 84 movi #10, ebx   
40 [0x28]:          new_classarray ebx  // std.io.task#job[]   
41 [0x29]:          movl 0   
42 [0x2a]:          movn #1   
44 [0x2c]:          popobj   
45 [0x2d]:          nop   
46 [0x2e]:          ret   


function: std#list<std.io.task#job>.add[3342] params(1) in file: lib\support\0.2.805/list.sharp:88:8: note:  
		    def add(element: t) {
		       ^

0 [0x0]: line: 89 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 0   
8 [0x8]:          movn #1   
10 [0xa]:          sizeof ebx   
11 [0xb]:          loadval ecx   
12 [0xc]:          gte ecx, ebx   
13 [0xd]:          movr ebx, cmt   
14 [0xe]:          movr cmt, ebx   
15 [0xf]:          jne 18   
16 [0x10]: line: 90 pushl 0   
17 [0x11]:          call @3338 // <std#list<std.io.task#job>.expand>   
18 [0x12]:          nop   
19 [0x13]: line: 91 pushl 1   
20 [0x14]:          movl 0   
21 [0x15]:          movn #1   
23 [0x17]:          pushobj   
24 [0x18]:          movl 0   
25 [0x19]:          movn #0   
27 [0x1b]:          movi #0, adx   
29 [0x1d]:          iaload ebx, adx   
30 [0x1e]:          movr egx, ebx   
31 [0x1f]:          inc ebx   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          movr ebx, egx   
36 [0x24]:          popobj2    
37 [0x25]:          movr adx, ebx   
38 [0x26]:          chklen adx   
39 [0x27]:          movnd adx   
40 [0x28]:          popobj   
41 [0x29]:          ret   


function: std#list<std.io.task#job>.indexof[3343] params(1) in file: lib\support\0.2.805/list.sharp:94:8: note:  
		    def indexof(element: t) : var {
		       ^

0 [0x0]: line: 95 istorel 0, fp+2   
2 [0x2]:          ipushl #2   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          movi #0, adx   
8 [0x8]:          iaload ebx, adx   
9 [0x9]:          loadval ecx   
10 [0xa]:          lt ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 35   
14 [0xe]: line: 96 pushl 1   
15 [0xf]:          movl 0   
16 [0x10]:          movn #1   
18 [0x12]:          pushobj   
19 [0x13]:          loadl ebx, fp+2   
20 [0x14]:          popobj2    
21 [0x15]:          movr adx, ebx   
22 [0x16]:          chklen adx   
23 [0x17]:          movnd adx   
24 [0x18]:          pushobj   
25 [0x19]:          itest ebx   
26 [0x1a]:          movr cmt, ebx   
27 [0x1b]:          jne 31   
28 [0x1c]: line: 97 loadl ebx, fp+2   
29 [0x1d]:          return_val ebx   
30 [0x1e]:          ret   
31 [0x1f]:          nop   
32 [0x20]:          iaddl 1, fp@2   
34 [0x22]:          jmp @2   
35 [0x23]: line: 101 istorel -1, fp+0   
37 [0x25]:           ret   


function: std#list<std.io.task#job>.pop_back[3344] params(0) in file: lib\support\0.2.805/list.sharp:104:8: note:  
		    def pop_back() {
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #0, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 38   
14 [0xe]: line: 106 movl 1   
15 [0xf]:           del   
16 [0x10]: line: 107 pushl 1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           movl 0   
22 [0x16]:           movn #0   
24 [0x18]:           movi #0, adx   
26 [0x1a]:           iaload ebx, adx   
27 [0x1b]:           movr egx, ebx   
28 [0x1c]:           dec ebx   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           rmov adx, ebx   
32 [0x20]:           movr ebx, egx   
33 [0x21]:           popobj2    
34 [0x22]:           movr adx, ebx   
35 [0x23]:           chklen adx   
36 [0x24]:           movnd adx   
37 [0x25]:           popobj   
38 [0x26]:           nop   
39 [0x27]:           ret   


function: std#list<std.io.task#job>.size[3345] params(0) in file: lib\support\0.2.805/list.sharp:111:8: note:  
		    def size() := n_elements;
		       ^

0 [0x0]: line: 111 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std#list<std.io.task#job>.insert[3346] params(2) in file: lib\support\0.2.805/list.sharp:113:8: note:  
		    def insert(index: var, element: t) {
		       ^

0 [0x0]: line: 114 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gt ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 25   
18 [0x12]: line: 115 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:           dup    
20 [0x14]:           pushl 0   
21 [0x15]:           ipushl #1   
22 [0x16]:           call @3354 // <std#list<std.io.task#job>.out_of_bounds_msg>   
23 [0x17]:           call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:           throw    
25 [0x19]:           nop   
26 [0x1a]: line: 117 movl 0   
27 [0x1b]:           movn #0   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           iaload ebx, adx   
32 [0x20]:           rstore ebx   
33 [0x21]:           movi #0, ebx   
35 [0x23]:           loadval ecx   
36 [0x24]:           test ecx, ebx   
37 [0x25]:           jne 42   
38 [0x26]: line: 118 pushl 0   
39 [0x27]:           pushl 2   
40 [0x28]:           call @3342 // <std#list<std.io.task#job>.add>   
41 [0x29]:           jmp @131   
42 [0x2a]: line: 120 movl 0   
43 [0x2b]:           movn #0   
45 [0x2d]:           movi #0, adx   
47 [0x2f]:           iaload ebx, adx   
48 [0x30]:           rstore ebx   
49 [0x31]:           movl 0   
50 [0x32]:           movn #1   
52 [0x34]:           sizeof ebx   
53 [0x35]:           loadval ecx   
54 [0x36]:           gte ecx, ebx   
55 [0x37]:           movr ebx, cmt   
56 [0x38]:           movr cmt, ebx   
57 [0x39]:           jne 60   
58 [0x3a]: line: 121 pushl 0   
59 [0x3b]:           call @3338 // <std#list<std.io.task#job>.expand>   
60 [0x3c]:           nop   
61 [0x3d]: line: 122 movl 0   
62 [0x3e]:           movn #0   
64 [0x40]:           movi #0, adx   
66 [0x42]:           iaload ebx, adx   
67 [0x43]:           movr egx, ebx   
68 [0x44]:           inc ebx   
69 [0x45]:           movi #0, adx   
71 [0x47]:           rmov adx, ebx   
72 [0x48]: line: 123 movl 0   
73 [0x49]:           movn #0   
75 [0x4b]:           movi #0, adx   
77 [0x4d]:           iaload ebx, adx   
78 [0x4e]:           rstore ebx   
79 [0x4f]:           movi #1, ebx   
81 [0x51]:           loadval ecx   
82 [0x52]:           sub ecx, ebx -> ebx   
83 [0x53]:           smovr_2 ebx, fp+3   
84 [0x54]:           ipushl #3   
85 [0x55]:           loadl ebx, fp+1   
86 [0x56]:           loadval ecx   
87 [0x57]:           gt ecx, ebx   
88 [0x58]:           movr ebx, cmt   
89 [0x59]:           movr cmt, ebx   
90 [0x5a]:           jne 120   
91 [0x5b]: line: 124 movl 0   
92 [0x5c]:           movn #1   
94 [0x5e]:           pushobj   
95 [0x5f]:           ipushl #3   
96 [0x60]:           movi #1, ebx   
98 [0x62]:           loadval ecx   
99 [0x63]:           sub ecx, ebx -> ebx   
100 [0x64]:           popobj2    
101 [0x65]:           movr adx, ebx   
102 [0x66]:           chklen adx   
103 [0x67]:           movnd adx   
104 [0x68]:           pushobj   
105 [0x69]:           movl 0   
106 [0x6a]:           movn #1   
108 [0x6c]:           pushobj   
109 [0x6d]:           loadl ebx, fp+3   
110 [0x6e]:           popobj2    
111 [0x6f]:           movr adx, ebx   
112 [0x70]:           chklen adx   
113 [0x71]:           movnd adx   
114 [0x72]:           popobj   
115 [0x73]:           loadl ebx, fp+3   
116 [0x74]:           movr egx, ebx   
117 [0x75]:           dec ebx   
118 [0x76]:           smovr_2 ebx, fp+3   
119 [0x77]:           jmp @84   
120 [0x78]: line: 125 pushl 2   
121 [0x79]:           movl 0   
122 [0x7a]:           movn #1   
124 [0x7c]:           pushobj   
125 [0x7d]:           loadl ebx, fp+1   
126 [0x7e]:           popobj2    
127 [0x7f]:           movr adx, ebx   
128 [0x80]:           chklen adx   
129 [0x81]:           movnd adx   
130 [0x82]:           popobj   
131 [0x83]:           nop   
132 [0x84]:           ret   


function: std#list<std.io.task#job>.find[3347] params(2) in file: lib\support\0.2.805/list.sharp:129:8: note:  
		    def find(comparer : t, find_func: (t, t)(var)) : t {
		       ^

0 [0x0]: line: 130 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 46   
14 [0xe]: line: 131 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 42   
31 [0x1f]: line: 132 movl 0   
32 [0x20]:           movn #1   
34 [0x22]:           pushobj   
35 [0x23]:           loadl ebx, fp+3   
36 [0x24]:           popobj2    
37 [0x25]:           movr adx, ebx   
38 [0x26]:           chklen adx   
39 [0x27]:           movnd adx   
40 [0x28]:           returnobj   
41 [0x29]:           ret   
42 [0x2a]:           nop   
43 [0x2b]:           iaddl 1, fp@3   
45 [0x2d]:           jmp @2   
46 [0x2e]: line: 136 movl 4   
47 [0x2f]:           del   
48 [0x30]: line: 137 movl 4   
49 [0x31]:           returnobj   
50 [0x32]:           ret   


function: std#list<std.io.task#job>.remove[3348] params(1) in file: lib\support\0.2.805/list.sharp:140:8: note:  
		    def remove(val: t) {
		       ^

0 [0x0]: line: 141 istorel 0, fp+2   
2 [0x2]:           ipushl #2   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 36   
14 [0xe]: line: 142 pushl 1   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+2   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           itest ebx   
26 [0x1a]:           movr cmt, ebx   
27 [0x1b]:           jne 32   
28 [0x1c]: line: 143 pushl 0   
29 [0x1d]:           ipushl #2   
30 [0x1e]:           call @3351 // <std#list<std.io.task#job>.remove_at>   
31 [0x1f]: line: 144 ret   
32 [0x20]:           nop   
33 [0x21]:           iaddl 1, fp@2   
35 [0x23]:           jmp @2   
36 [0x24]:           ret   


function: std#list<std.io.task#job>.remove[3349] params(2) in file: lib\support\0.2.805/list.sharp:149:8: note:  
		    def remove(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 150 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 39   
14 [0xe]: line: 151 ipushl #2   
15 [0xf]:           pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           movnd adx   
25 [0x19]:           pushobj   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 35   
31 [0x1f]: line: 152 pushl 0   
32 [0x20]:           ipushl #3   
33 [0x21]:           call @3351 // <std#list<std.io.task#job>.remove_at>   
34 [0x22]: line: 153 ret   
35 [0x23]:           nop   
36 [0x24]:           iaddl 1, fp@3   
38 [0x26]:           jmp @2   
39 [0x27]:           ret   


function: std#list<std.io.task#job>.replace[3350] params(2) in file: lib\support\0.2.805/list.sharp:158:8: note:  
		    def replace(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 159 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 47   
14 [0xe]: line: 160 ipushl #2   
15 [0xf]:           pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           movnd adx   
25 [0x19]:           pushobj   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 43   
31 [0x1f]: line: 161 pushl 1   
32 [0x20]:           movl 0   
33 [0x21]:           movn #1   
35 [0x23]:           pushobj   
36 [0x24]:           loadl ebx, fp+3   
37 [0x25]:           popobj2    
38 [0x26]:           movr adx, ebx   
39 [0x27]:           chklen adx   
40 [0x28]:           movnd adx   
41 [0x29]:           popobj   
42 [0x2a]: line: 162 ret   
43 [0x2b]:           nop   
44 [0x2c]:           iaddl 1, fp@3   
46 [0x2e]:           jmp @2   
47 [0x2f]:           ret   


function: std#list<std.io.task#job>.remove_at[3351] params(1) in file: lib\support\0.2.805/list.sharp:167:8: note:  
		    def remove_at(index: var) {
		       ^

0 [0x0]: line: 168 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gte ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 25   
18 [0x12]: line: 169 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:           dup    
20 [0x14]:           pushl 0   
21 [0x15]:           ipushl #1   
22 [0x16]:           call @3354 // <std#list<std.io.task#job>.out_of_bounds_msg>   
23 [0x17]:           call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:           throw    
25 [0x19]:           nop   
26 [0x1a]: line: 171 movl 0   
27 [0x1b]:           movn #0   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           iaload ebx, adx   
32 [0x20]:           rstore ebx   
33 [0x21]:           loadl ebx, fp+1   
34 [0x22]:           loadval ecx   
35 [0x23]:           sub ecx, ebx -> ebx   
36 [0x24]:           rstore ebx   
37 [0x25]:           movi #1, ebx   
39 [0x27]:           loadval ecx   
40 [0x28]:           sub ecx, ebx -> ebx   
41 [0x29]:           smovr_2 ebx, fp+2   
42 [0x2a]: line: 172 ipushl #2   
43 [0x2b]:           movi #0, ebx   
45 [0x2d]:           loadval ecx   
46 [0x2e]:           gt ecx, ebx   
47 [0x2f]:           movr ebx, cmt   
48 [0x30]:           movr cmt, ebx   
49 [0x31]:           jne 73   
50 [0x32]: line: 173 movl 0   
51 [0x33]:           movn #1   
53 [0x35]:           pushobj   
54 [0x36]:           movl 0   
55 [0x37]:           movn #1   
57 [0x39]:           pushobj   
58 [0x3a]:           ipushl #1   
59 [0x3b]:           ipushl #1   
60 [0x3c]:           movi #1, ebx   
62 [0x3e]:           loadval ecx   
63 [0x3f]:           add ecx, ebx -> ebx   
64 [0x40]:           rstore ebx   
65 [0x41]:           movl 0   
66 [0x42]:           movn #0   
68 [0x44]:           movi #0, adx   
70 [0x46]:           iaload ebx, adx   
71 [0x47]:           rstore ebx   
72 [0x48]:           call @1745 // <std.io#__srt_global.memcopy>   
73 [0x49]:           nop   
74 [0x4a]: line: 175 pushl 0   
75 [0x4b]:           call @3344 // <std#list<std.io.task#job>.pop_back>   
76 [0x4c]:           ret   


function: std#list<std.io.task#job>.indexof[3352] params(2) in file: lib\support\0.2.805/list.sharp:178:8: note:  
		    def indexof(comparer: t, find_func: (t, t)(var)) : var {
		       ^

0 [0x0]: line: 179 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 38   
14 [0xe]: line: 180 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 34   
31 [0x1f]: line: 181 loadl ebx, fp+3   
32 [0x20]:           return_val ebx   
33 [0x21]:           ret   
34 [0x22]:           nop   
35 [0x23]:           iaddl 1, fp@3   
37 [0x25]:           jmp @2   
38 [0x26]: line: 185 istorel -1, fp+0   
40 [0x28]:           ret   


function: std#list<std.io.task#job>.to_string[3353] params(0) in file: lib\support\0.2.805/list.sharp:188:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 189 new_class @65 // std#string_builder   
1 [0x1]:           dup    
2 [0x2]:           call @3038 // <std#string_builder.string_builder>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+1   
5 [0x5]: line: 191 pushl 1   
6 [0x6]:           newstr @138 // [    
7 [0x7]:           call @3034 // <std#string_builder.operator+=>   
8 [0x8]:           pop   
9 [0x9]: line: 192 istorel 0, fp+2   
11 [0xb]:           ipushl #2   
12 [0xc]:           movl 0   
13 [0xd]:           movn #0   
15 [0xf]:           movi #0, adx   
17 [0x11]:           iaload ebx, adx   
18 [0x12]:           loadval ecx   
19 [0x13]:           lt ecx, ebx   
20 [0x14]:           movr ebx, cmt   
21 [0x15]:           movr cmt, ebx   
22 [0x16]:           jne 61   
23 [0x17]: line: 193 pushl 1   
24 [0x18]:           movl 0   
25 [0x19]:           movn #1   
27 [0x1b]:           pushobj   
28 [0x1c]:           loadl ebx, fp+2   
29 [0x1d]:           popobj2    
30 [0x1e]:           movr adx, ebx   
31 [0x1f]:           chklen adx   
32 [0x20]:           movnd adx   
33 [0x21]:           pushobj   
34 [0x22]:           call @3030 // <std#string_builder.operator+=>   
35 [0x23]:           pop   
36 [0x24]: line: 195 ipushl #2   
37 [0x25]:           movi #1, ebx   
39 [0x27]:           loadval ecx   
40 [0x28]:           add ecx, ebx -> ebx   
41 [0x29]:           rstore ebx   
42 [0x2a]:           movl 0   
43 [0x2b]:           movn #0   
45 [0x2d]:           movi #0, adx   
47 [0x2f]:           iaload ebx, adx   
48 [0x30]:           loadval ecx   
49 [0x31]:           lt ecx, ebx   
50 [0x32]:           movr ebx, cmt   
51 [0x33]:           movr cmt, ebx   
52 [0x34]:           jne 57   
53 [0x35]: line: 196 pushl 1   
54 [0x36]:           newstr @139 // ,    
55 [0x37]:           call @3034 // <std#string_builder.operator+=>   
56 [0x38]:           pop   
57 [0x39]:           nop   
58 [0x3a]:           iaddl 1, fp@2   
60 [0x3c]:           jmp @11   
61 [0x3d]: line: 200 pushl 1   
62 [0x3e]:           newstr @140 //  ]   
63 [0x3f]:           call @3034 // <std#string_builder.operator+=>   
64 [0x40]:           pop   
65 [0x41]: line: 201 pushl 1   
66 [0x42]:           call @3011 // <std#string_builder.to_string>   
67 [0x43]:           popobj2    
68 [0x44]:           returnobj   
69 [0x45]:           ret   


function: std#list<std.io.task#job>.out_of_bounds_msg[3354] params(1) in file: lib\support\0.2.805/list.sharp:204:16: note:  
		    private def out_of_bounds_msg(index: var) : string {
		               ^

0 [0x0]: line: 205 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           newstr @141 // Index:    
3 [0x3]:           call @2935 // <std#string.string>   
4 [0x4]:           ipushl #1   
5 [0x5]:           call @2967 // <std#string.operator+>   
6 [0x6]:           newstr @142 // , size:    
7 [0x7]:           call @2947 // <std#string.operator+>   
8 [0x8]:           movl 0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           iaload ebx, adx   
14 [0xe]:           rstore ebx   
15 [0xf]:           call @2967 // <std#string.operator+>   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#synced_list<std.io.task#job>.add_all[3355] params(1) in file: lib\support\0.2.805/synced_list.sharp:79:8: note:  
		    def add_all(lst: list<t>) {
		       ^

0 [0x0]: line: 80 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 81 movl 1   
3 [0x3]:          movn #1   
5 [0x5]:          pushobj   
6 [0x6]:          istore 0   
8 [0x8]:          movl 1   
9 [0x9]:          movn #0   
11 [0xb]:          movi #0, adx   
13 [0xd]:          iaload ebx, adx   
14 [0xe]:          rstore ebx   
15 [0xf]:          call @1755 // <std.io#__srt_global.copy>   
16 [0x10]:          popobj2    
17 [0x11]:          movi #22, cmt   
19 [0x13]:          cast cmt   
20 [0x14]:          pushobj   
21 [0x15]:          movl 0   
22 [0x16]:          movn #1   
24 [0x18]:          popobj   
25 [0x19]: line: 82 movl 1   
26 [0x1a]:          movn #0   
28 [0x1c]:          movi #0, adx   
30 [0x1e]:          iaload ebx, adx   
31 [0x1f]:          movl 0   
32 [0x20]:          movn #0   
34 [0x22]:          movi #0, adx   
36 [0x24]:          rmov adx, ebx   
37 [0x25]:          movl 0   
38 [0x26]:          _ulck   
39 [0x27]:          ret   


function: std#synced_list<std.io.task#job>.add[3356] params(1) in file: lib\support\0.2.805/synced_list.sharp:86:8: note:  
		    def add(element: t) {
		       ^

0 [0x0]: line: 87 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 88 movl 0   
3 [0x3]:          movn #0   
5 [0x5]:          movi #0, adx   
7 [0x7]:          iaload ebx, adx   
8 [0x8]:          rstore ebx   
9 [0x9]:          movl 0   
10 [0xa]:          movn #1   
12 [0xc]:          sizeof ebx   
13 [0xd]:          loadval ecx   
14 [0xe]:          gte ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 20   
18 [0x12]: line: 89 pushl 0   
19 [0x13]:          call @3326 // <std#synced_list<std.io.task#job>.expand>   
20 [0x14]:          nop   
21 [0x15]: line: 90 pushl 1   
22 [0x16]:          movl 0   
23 [0x17]:          movn #1   
25 [0x19]:          pushobj   
26 [0x1a]:          movl 0   
27 [0x1b]:          movn #0   
29 [0x1d]:          movi #0, adx   
31 [0x1f]:          iaload ebx, adx   
32 [0x20]:          movr egx, ebx   
33 [0x21]:          inc ebx   
34 [0x22]:          movi #0, adx   
36 [0x24]:          rmov adx, ebx   
37 [0x25]:          movr ebx, egx   
38 [0x26]:          popobj2    
39 [0x27]:          movr adx, ebx   
40 [0x28]:          chklen adx   
41 [0x29]:          movnd adx   
42 [0x2a]:          popobj   
43 [0x2b]:          movl 0   
44 [0x2c]:          _ulck   
45 [0x2d]:          ret   


function: std#synced_list<std.io.task#job>.indexof[3357] params(1) in file: lib\support\0.2.805/synced_list.sharp:94:8: note:  
		    def indexof(element: t) : var {
		       ^

0 [0x0]: line: 95 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 96 istorel 0, fp+2   
4 [0x4]:          ipushl #2   
5 [0x5]:          movl 0   
6 [0x6]:          movn #0   
8 [0x8]:          movi #0, adx   
10 [0xa]:          iaload ebx, adx   
11 [0xb]:          loadval ecx   
12 [0xc]:          lt ecx, ebx   
13 [0xd]:          movr ebx, cmt   
14 [0xe]:          movr cmt, ebx   
15 [0xf]:          jne 39   
16 [0x10]: line: 97 pushl 1   
17 [0x11]:          movl 0   
18 [0x12]:          movn #1   
20 [0x14]:          pushobj   
21 [0x15]:          loadl ebx, fp+2   
22 [0x16]:          popobj2    
23 [0x17]:          movr adx, ebx   
24 [0x18]:          chklen adx   
25 [0x19]:          movnd adx   
26 [0x1a]:          pushobj   
27 [0x1b]:          itest ebx   
28 [0x1c]:          movr cmt, ebx   
29 [0x1d]:          jne 35   
30 [0x1e]: line: 98 loadl ebx, fp+2   
31 [0x1f]:          return_val ebx   
32 [0x20]:          movl 0   
33 [0x21]:          _ulck   
34 [0x22]:          ret   
35 [0x23]:          nop   
36 [0x24]:          iaddl 1, fp@2   
38 [0x26]:          jmp @4   
39 [0x27]: line: 102 istorel -1, fp+0   
41 [0x29]:           movl 0   
42 [0x2a]:           _ulck   
43 [0x2b]:           ret   
44 [0x2c]:           movl 0   
45 [0x2d]:           _ulck   


function: std#synced_list<std.io.task#job>.pop_back[3358] params(0) in file: lib\support\0.2.805/synced_list.sharp:106:8: note:  
		    def pop_back() {
		       ^

0 [0x0]: line: 107 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #0, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 38   
14 [0xe]: line: 108 movl 1   
15 [0xf]:           del   
16 [0x10]: line: 109 pushl 1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           movl 0   
22 [0x16]:           movn #0   
24 [0x18]:           movi #0, adx   
26 [0x1a]:           iaload ebx, adx   
27 [0x1b]:           movr egx, ebx   
28 [0x1c]:           dec ebx   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           rmov adx, ebx   
32 [0x20]:           movr ebx, egx   
33 [0x21]:           popobj2    
34 [0x22]:           movr adx, ebx   
35 [0x23]:           chklen adx   
36 [0x24]:           movnd adx   
37 [0x25]:           popobj   
38 [0x26]:           nop   
39 [0x27]:           ret   


function: std#synced_list<std.io.task#job>.size[3359] params(0) in file: lib\support\0.2.805/synced_list.sharp:113:8: note:  
		    def size() : var {
		       ^

0 [0x0]: line: 114 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 115 movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           return_val ebx   
9 [0x9]:           movl 0   
10 [0xa]:           _ulck   
11 [0xb]:           ret   
12 [0xc]:           movl 0   
13 [0xd]:           _ulck   


function: std#synced_list<std.io.task#job>.empty[3360] params(0) in file: lib\support\0.2.805/synced_list.sharp:119:8: note:  
		    def empty() : var {
		       ^

0 [0x0]: line: 120 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 121 movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           rstore ebx   
9 [0x9]:           movi #0, ebx   
11 [0xb]:           loadval ecx   
12 [0xc]:           test ecx, ebx   
13 [0xd]:           return_val cmt   
14 [0xe]:           movl 0   
15 [0xf]:           _ulck   
16 [0x10]:           ret   
17 [0x11]:           movl 0   
18 [0x12]:           _ulck   


function: std#synced_list<std.io.task#job>.insert[3361] params(2) in file: lib\support\0.2.805/synced_list.sharp:125:8: note:  
		    def insert(index: var, element: t) {
		       ^

0 [0x0]: line: 126 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 127 ipushl #1   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           skpe ebx // pc = 18   
13 [0xd]:           loadl ecx, fp+1   
14 [0xe]:           movi #0, ebx   
16 [0x10]:           lt ecx, ebx   
17 [0x11]:           movr ebx, cmt   
18 [0x12]:           movr cmt, ebx   
19 [0x13]:           jne 27   
20 [0x14]: line: 128 new_class @6 // std#out_of_bounds_exception   
21 [0x15]:           dup    
22 [0x16]:           pushl 0   
23 [0x17]:           ipushl #1   
24 [0x18]:           call @3369 // <std#synced_list<std.io.task#job>.out_of_bounds_msg>   
25 [0x19]:           call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
26 [0x1a]:           throw    
27 [0x1b]:           nop   
28 [0x1c]: line: 130 movl 0   
29 [0x1d]:           movn #0   
31 [0x1f]:           movi #0, adx   
33 [0x21]:           iaload ebx, adx   
34 [0x22]:           rstore ebx   
35 [0x23]:           movi #0, ebx   
37 [0x25]:           loadval ecx   
38 [0x26]:           test ecx, ebx   
39 [0x27]:           jne 44   
40 [0x28]: line: 131 pushl 0   
41 [0x29]:           pushl 2   
42 [0x2a]:           call @3356 // <std#synced_list<std.io.task#job>.add>   
43 [0x2b]:           jmp @133   
44 [0x2c]: line: 133 movl 0   
45 [0x2d]:           movn #0   
47 [0x2f]:           movi #0, adx   
49 [0x31]:           iaload ebx, adx   
50 [0x32]:           rstore ebx   
51 [0x33]:           movl 0   
52 [0x34]:           movn #1   
54 [0x36]:           sizeof ebx   
55 [0x37]:           loadval ecx   
56 [0x38]:           gte ecx, ebx   
57 [0x39]:           movr ebx, cmt   
58 [0x3a]:           movr cmt, ebx   
59 [0x3b]:           jne 62   
60 [0x3c]: line: 134 pushl 0   
61 [0x3d]:           call @3326 // <std#synced_list<std.io.task#job>.expand>   
62 [0x3e]:           nop   
63 [0x3f]: line: 135 movl 0   
64 [0x40]:           movn #0   
66 [0x42]:           movi #0, adx   
68 [0x44]:           iaload ebx, adx   
69 [0x45]:           movr egx, ebx   
70 [0x46]:           inc ebx   
71 [0x47]:           movi #0, adx   
73 [0x49]:           rmov adx, ebx   
74 [0x4a]: line: 136 movl 0   
75 [0x4b]:           movn #0   
77 [0x4d]:           movi #0, adx   
79 [0x4f]:           iaload ebx, adx   
80 [0x50]:           rstore ebx   
81 [0x51]:           movi #1, ebx   
83 [0x53]:           loadval ecx   
84 [0x54]:           sub ecx, ebx -> ebx   
85 [0x55]:           smovr_2 ebx, fp+3   
86 [0x56]:           ipushl #3   
87 [0x57]:           loadl ebx, fp+1   
88 [0x58]:           loadval ecx   
89 [0x59]:           gt ecx, ebx   
90 [0x5a]:           movr ebx, cmt   
91 [0x5b]:           movr cmt, ebx   
92 [0x5c]:           jne 122   
93 [0x5d]: line: 137 movl 0   
94 [0x5e]:           movn #1   
96 [0x60]:           pushobj   
97 [0x61]:           ipushl #3   
98 [0x62]:           movi #1, ebx   
100 [0x64]:           loadval ecx   
101 [0x65]:           sub ecx, ebx -> ebx   
102 [0x66]:           popobj2    
103 [0x67]:           movr adx, ebx   
104 [0x68]:           chklen adx   
105 [0x69]:           movnd adx   
106 [0x6a]:           pushobj   
107 [0x6b]:           movl 0   
108 [0x6c]:           movn #1   
110 [0x6e]:           pushobj   
111 [0x6f]:           loadl ebx, fp+3   
112 [0x70]:           popobj2    
113 [0x71]:           movr adx, ebx   
114 [0x72]:           chklen adx   
115 [0x73]:           movnd adx   
116 [0x74]:           popobj   
117 [0x75]:           loadl ebx, fp+3   
118 [0x76]:           movr egx, ebx   
119 [0x77]:           dec ebx   
120 [0x78]:           smovr_2 ebx, fp+3   
121 [0x79]:           jmp @86   
122 [0x7a]: line: 138 pushl 2   
123 [0x7b]:           movl 0   
124 [0x7c]:           movn #1   
126 [0x7e]:           pushobj   
127 [0x7f]:           loadl ebx, fp+1   
128 [0x80]:           popobj2    
129 [0x81]:           movr adx, ebx   
130 [0x82]:           chklen adx   
131 [0x83]:           movnd adx   
132 [0x84]:           popobj   
133 [0x85]:           nop   
134 [0x86]:           movl 0   
135 [0x87]:           _ulck   
136 [0x88]:           ret   


function: std#synced_list<std.io.task#job>.remove[3362] params(1) in file: lib\support\0.2.805/synced_list.sharp:144:8: note:  
		    def remove(val: t) {
		       ^

0 [0x0]: line: 145 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 146 istorel 0, fp+2   
4 [0x4]:           ipushl #2   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           loadval ecx   
12 [0xc]:           lt ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           movr cmt, ebx   
15 [0xf]:           jne 40   
16 [0x10]: line: 147 pushl 1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           loadl ebx, fp+2   
22 [0x16]:           popobj2    
23 [0x17]:           movr adx, ebx   
24 [0x18]:           chklen adx   
25 [0x19]:           movnd adx   
26 [0x1a]:           pushobj   
27 [0x1b]:           itest ebx   
28 [0x1c]:           movr cmt, ebx   
29 [0x1d]:           jne 36   
30 [0x1e]: line: 148 pushl 0   
31 [0x1f]:           ipushl #2   
32 [0x20]:           call @3364 // <std#synced_list<std.io.task#job>.remove_at>   
33 [0x21]: line: 149 movl 0   
34 [0x22]:           _ulck   
35 [0x23]:           ret   
36 [0x24]:           nop   
37 [0x25]:           iaddl 1, fp@2   
39 [0x27]:           jmp @4   
40 [0x28]:           movl 0   
41 [0x29]:           _ulck   
42 [0x2a]:           ret   


function: std#synced_list<std.io.task#job>.remove[3363] params(2) in file: lib\support\0.2.805/synced_list.sharp:155:8: note:  
		    def remove(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 156 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 157 istorel 0, fp+3   
4 [0x4]:           ipushl #3   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           loadval ecx   
12 [0xc]:           lt ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           movr cmt, ebx   
15 [0xf]:           jne 43   
16 [0x10]: line: 158 ipushl #2   
17 [0x11]:           pushl 1   
18 [0x12]:           movl 0   
19 [0x13]:           movn #1   
21 [0x15]:           pushobj   
22 [0x16]:           loadl ebx, fp+3   
23 [0x17]:           popobj2    
24 [0x18]:           movr adx, ebx   
25 [0x19]:           chklen adx   
26 [0x1a]:           movnd adx   
27 [0x1b]:           pushobj   
28 [0x1c]:           smov ebx, sp+[-2]   
29 [0x1d]:           calld ebx   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 39   
33 [0x21]: line: 159 pushl 0   
34 [0x22]:           ipushl #3   
35 [0x23]:           call @3364 // <std#synced_list<std.io.task#job>.remove_at>   
36 [0x24]: line: 160 movl 0   
37 [0x25]:           _ulck   
38 [0x26]:           ret   
39 [0x27]:           nop   
40 [0x28]:           iaddl 1, fp@3   
42 [0x2a]:           jmp @4   
43 [0x2b]:           movl 0   
44 [0x2c]:           _ulck   
45 [0x2d]:           ret   


function: std#synced_list<std.io.task#job>.remove_at[3364] params(1) in file: lib\support\0.2.805/synced_list.sharp:166:8: note:  
		    def remove_at(index: var) {
		       ^

0 [0x0]: line: 167 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 168 ipushl #1   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gte ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           skpe ebx // pc = 18   
13 [0xd]:           loadl ecx, fp+1   
14 [0xe]:           movi #0, ebx   
16 [0x10]:           lt ecx, ebx   
17 [0x11]:           movr ebx, cmt   
18 [0x12]:           movr cmt, ebx   
19 [0x13]:           jne 27   
20 [0x14]: line: 169 new_class @6 // std#out_of_bounds_exception   
21 [0x15]:           dup    
22 [0x16]:           pushl 0   
23 [0x17]:           ipushl #1   
24 [0x18]:           call @3369 // <std#synced_list<std.io.task#job>.out_of_bounds_msg>   
25 [0x19]:           call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
26 [0x1a]:           throw    
27 [0x1b]:           nop   
28 [0x1c]: line: 171 movl 0   
29 [0x1d]:           movn #0   
31 [0x1f]:           movi #0, adx   
33 [0x21]:           iaload ebx, adx   
34 [0x22]:           rstore ebx   
35 [0x23]:           loadl ebx, fp+1   
36 [0x24]:           loadval ecx   
37 [0x25]:           sub ecx, ebx -> ebx   
38 [0x26]:           rstore ebx   
39 [0x27]:           movi #1, ebx   
41 [0x29]:           loadval ecx   
42 [0x2a]:           sub ecx, ebx -> ebx   
43 [0x2b]:           smovr_2 ebx, fp+2   
44 [0x2c]: line: 172 ipushl #2   
45 [0x2d]:           movi #0, ebx   
47 [0x2f]:           loadval ecx   
48 [0x30]:           gt ecx, ebx   
49 [0x31]:           movr ebx, cmt   
50 [0x32]:           movr cmt, ebx   
51 [0x33]:           jne 75   
52 [0x34]: line: 173 movl 0   
53 [0x35]:           movn #1   
55 [0x37]:           pushobj   
56 [0x38]:           movl 0   
57 [0x39]:           movn #1   
59 [0x3b]:           pushobj   
60 [0x3c]:           ipushl #1   
61 [0x3d]:           ipushl #1   
62 [0x3e]:           movi #1, ebx   
64 [0x40]:           loadval ecx   
65 [0x41]:           add ecx, ebx -> ebx   
66 [0x42]:           rstore ebx   
67 [0x43]:           movl 0   
68 [0x44]:           movn #0   
70 [0x46]:           movi #0, adx   
72 [0x48]:           iaload ebx, adx   
73 [0x49]:           rstore ebx   
74 [0x4a]:           call @1745 // <std.io#__srt_global.memcopy>   
75 [0x4b]:           nop   
76 [0x4c]: line: 175 pushl 0   
77 [0x4d]:           call @3358 // <std#synced_list<std.io.task#job>.pop_back>   
78 [0x4e]:           movl 0   
79 [0x4f]:           _ulck   
80 [0x50]:           ret   


function: std#synced_list<std.io.task#job>.indexof[3365] params(2) in file: lib\support\0.2.805/synced_list.sharp:179:8: note:  
		    def indexof(comparer: t, find_func: (t, t)(var)) : var {
		       ^

0 [0x0]: line: 180 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 38   
14 [0xe]: line: 181 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 34   
31 [0x1f]: line: 182 loadl ebx, fp+3   
32 [0x20]:           return_val ebx   
33 [0x21]:           ret   
34 [0x22]:           nop   
35 [0x23]:           iaddl 1, fp@3   
37 [0x25]:           jmp @2   
38 [0x26]: line: 186 istorel -1, fp+0   
40 [0x28]:           ret   


function: std#synced_list<std.io.task#job>.find[3366] params(2) in file: lib\support\0.2.805/synced_list.sharp:189:8: note:  
		    def find(comparer : t, find_func: (t, t)(var)) : t {
		       ^

0 [0x0]: line: 190 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 191 istorel 0, fp+3   
4 [0x4]:           ipushl #3   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           loadval ecx   
12 [0xc]:           lt ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           movr cmt, ebx   
15 [0xf]:           jne 50   
16 [0x10]: line: 192 ipushl #2   
17 [0x11]:           movl 0   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           loadl ebx, fp+3   
22 [0x16]:           popobj2    
23 [0x17]:           movr adx, ebx   
24 [0x18]:           chklen adx   
25 [0x19]:           movnd adx   
26 [0x1a]:           pushobj   
27 [0x1b]:           pushl 1   
28 [0x1c]:           smov ebx, sp+[-2]   
29 [0x1d]:           calld ebx   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 46   
33 [0x21]: line: 193 movl 0   
34 [0x22]:           movn #1   
36 [0x24]:           pushobj   
37 [0x25]:           loadl ebx, fp+3   
38 [0x26]:           popobj2    
39 [0x27]:           movr adx, ebx   
40 [0x28]:           chklen adx   
41 [0x29]:           movnd adx   
42 [0x2a]:           returnobj   
43 [0x2b]:           movl 0   
44 [0x2c]:           _ulck   
45 [0x2d]:           ret   
46 [0x2e]:           nop   
47 [0x2f]:           iaddl 1, fp@3   
49 [0x31]:           jmp @4   
50 [0x32]: line: 197 movl 4   
51 [0x33]:           del   
52 [0x34]: line: 198 movl 4   
53 [0x35]:           returnobj   
54 [0x36]:           movl 0   
55 [0x37]:           _ulck   
56 [0x38]:           ret   
57 [0x39]:           movl 0   
58 [0x3a]:           _ulck   


function: std#synced_list<std.io.task#job>.replace[3367] params(2) in file: lib\support\0.2.805/synced_list.sharp:202:8: note:  
		    def replace(val: t, compare_fun: (t, t)(var)) : var {
		       ^

0 [0x0]: line: 203 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 204 istorel 0, fp+3   
4 [0x4]:           ipushl #3   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           loadval ecx   
12 [0xc]:           lt ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           movr cmt, ebx   
15 [0xf]:           jne 53   
16 [0x10]: line: 205 ipushl #2   
17 [0x11]:           pushl 1   
18 [0x12]:           movl 0   
19 [0x13]:           movn #1   
21 [0x15]:           pushobj   
22 [0x16]:           loadl ebx, fp+3   
23 [0x17]:           popobj2    
24 [0x18]:           movr adx, ebx   
25 [0x19]:           chklen adx   
26 [0x1a]:           movnd adx   
27 [0x1b]:           pushobj   
28 [0x1c]:           smov ebx, sp+[-2]   
29 [0x1d]:           calld ebx   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 49   
33 [0x21]: line: 206 pushl 1   
34 [0x22]:           movl 0   
35 [0x23]:           movn #1   
37 [0x25]:           pushobj   
38 [0x26]:           loadl ebx, fp+3   
39 [0x27]:           popobj2    
40 [0x28]:           movr adx, ebx   
41 [0x29]:           chklen adx   
42 [0x2a]:           movnd adx   
43 [0x2b]:           popobj   
44 [0x2c]: line: 207 istorel 1, fp+0   
46 [0x2e]:           movl 0   
47 [0x2f]:           _ulck   
48 [0x30]:           ret   
49 [0x31]:           nop   
50 [0x32]:           iaddl 1, fp@3   
52 [0x34]:           jmp @4   
53 [0x35]: line: 211 istorel 0, fp+0   
55 [0x37]:           movl 0   
56 [0x38]:           _ulck   
57 [0x39]:           ret   
58 [0x3a]:           movl 0   
59 [0x3b]:           _ulck   


function: std#synced_list<std.io.task#job>.to_string[3368] params(0) in file: lib\support\0.2.805/synced_list.sharp:215:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 216 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 217 new_class @65 // std#string_builder   
3 [0x3]:           dup    
4 [0x4]:           call @3038 // <std#string_builder.string_builder>   
5 [0x5]:           popobj2    
6 [0x6]:           smovr_3 fp+1   
7 [0x7]: line: 219 pushl 1   
8 [0x8]:           newstr @138 // [    
9 [0x9]:           call @3034 // <std#string_builder.operator+=>   
10 [0xa]:           pop   
11 [0xb]: line: 220 istorel 0, fp+2   
13 [0xd]:           ipushl #2   
14 [0xe]:           movl 0   
15 [0xf]:           movn #0   
17 [0x11]:           movi #0, adx   
19 [0x13]:           iaload ebx, adx   
20 [0x14]:           loadval ecx   
21 [0x15]:           lt ecx, ebx   
22 [0x16]:           movr ebx, cmt   
23 [0x17]:           movr cmt, ebx   
24 [0x18]:           jne 63   
25 [0x19]: line: 221 pushl 1   
26 [0x1a]:           movl 0   
27 [0x1b]:           movn #1   
29 [0x1d]:           pushobj   
30 [0x1e]:           loadl ebx, fp+2   
31 [0x1f]:           popobj2    
32 [0x20]:           movr adx, ebx   
33 [0x21]:           chklen adx   
34 [0x22]:           movnd adx   
35 [0x23]:           pushobj   
36 [0x24]:           call @3030 // <std#string_builder.operator+=>   
37 [0x25]:           pop   
38 [0x26]: line: 223 ipushl #2   
39 [0x27]:           movi #1, ebx   
41 [0x29]:           loadval ecx   
42 [0x2a]:           add ecx, ebx -> ebx   
43 [0x2b]:           rstore ebx   
44 [0x2c]:           movl 0   
45 [0x2d]:           movn #0   
47 [0x2f]:           movi #0, adx   
49 [0x31]:           iaload ebx, adx   
50 [0x32]:           loadval ecx   
51 [0x33]:           lt ecx, ebx   
52 [0x34]:           movr ebx, cmt   
53 [0x35]:           movr cmt, ebx   
54 [0x36]:           jne 59   
55 [0x37]: line: 224 pushl 1   
56 [0x38]:           newstr @139 // ,    
57 [0x39]:           call @3034 // <std#string_builder.operator+=>   
58 [0x3a]:           pop   
59 [0x3b]:           nop   
60 [0x3c]:           iaddl 1, fp@2   
62 [0x3e]:           jmp @13   
63 [0x3f]: line: 228 pushl 1   
64 [0x40]:           newstr @140 //  ]   
65 [0x41]:           call @3034 // <std#string_builder.operator+=>   
66 [0x42]:           pop   
67 [0x43]: line: 229 pushl 1   
68 [0x44]:           call @3011 // <std#string_builder.to_string>   
69 [0x45]:           popobj2    
70 [0x46]:           returnobj   
71 [0x47]:           movl 0   
72 [0x48]:           _ulck   
73 [0x49]:           ret   
74 [0x4a]:           movl 0   
75 [0x4b]:           _ulck   


function: std#synced_list<std.io.task#job>.out_of_bounds_msg[3369] params(1) in file: lib\support\0.2.805/synced_list.sharp:233:16: note:  
		    private def out_of_bounds_msg(index: var) : string {
		               ^

0 [0x0]: line: 234 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           newstr @141 // Index:    
3 [0x3]:           call @2935 // <std#string.string>   
4 [0x4]:           ipushl #1   
5 [0x5]:           call @2967 // <std#string.operator+>   
6 [0x6]:           newstr @142 // , size:    
7 [0x7]:           call @2947 // <std#string.operator+>   
8 [0x8]:           movl 0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           iaload ebx, adx   
14 [0xe]:           rstore ebx   
15 [0xf]:           call @2967 // <std#string.operator+>   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


std#loopable<var>.get_elements[3370] params(0) in file: lib\support\0.2.805/loopable.sharp:4:8: note:  
		    def get_elements() : t[];
		       ^



constructor: std#loopable<var>.loopable[3371] params(0) in file: lib\support\0.2.805/loopable.sharp:3:10: note:  
		interface loopable<t> {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#list<var>.list[3372] params(0) in file: lib\support\0.2.805/list.sharp:13:9: note:  
		    list() {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 14 movi #10, ebx   
3 [0x3]:          newarry ebx   
4 [0x4]:          movl 0   
5 [0x5]:          movn #1   
7 [0x7]:          popobj   
8 [0x8]:          ret   


constructor: std#list<var>.list[3373] params(1) in file: lib\support\0.2.805/list.sharp:17:9: note:  
		    list(starting_capacity: var) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 18 loadl ebx, fp+1   
2 [0x2]:          newarry ebx   
3 [0x3]:          movl 0   
4 [0x4]:          movn #1   
6 [0x6]:          popobj   
7 [0x7]:          ret   


constructor: std#list<var>.list[3374] params(1) in file: lib\support\0.2.805/list.sharp:21:9: note:  
		    list(initial_data: t[]) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 22 pushl 0   
2 [0x2]:          pushl 1   
3 [0x3]:          call @3385 // <std#list<var>.add_all>   
4 [0x4]:          ret   


function: std#list<var>.empty[3375] params(0) in file: lib\support\0.2.805/list.sharp:25:8: note:  
		    def empty() := n_elements == 0;
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          return_val cmt   
12 [0xc]:          ret   


function: std#list<var>.set_compact[3376] params(1) in file: lib\support\0.2.805/list.sharp:27:8: note:  
		    def set_compact(compact_array: var) {
		       ^

0 [0x0]: line: 28 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #2   
4 [0x4]:          loadval ebx   
5 [0x5]:          movi #0, adx   
7 [0x7]:          rmov adx, ebx   
8 [0x8]:          ret   


function: std#list<var>.get_elements[3377] params(0) in file: lib\support\0.2.805/list.sharp:31:8: note:  
		    def get_elements() : t[] {
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          jne 17   
12 [0xc]:          pushnull    
13 [0xd]:          popobj2    
14 [0xe]:          returnobj   
15 [0xf]:          ret   
16 [0x10]:          jmp @34   
17 [0x11]: line: 33 movl 0   
18 [0x12]:          movn #1   
20 [0x14]:          pushobj   
21 [0x15]:          istore 0   
23 [0x17]:          movl 0   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          iaload ebx, adx   
29 [0x1d]:          rstore ebx   
30 [0x1e]:          call @1756 // <std.io#__srt_global.copy>   
31 [0x1f]:          popobj2    
32 [0x20]:          returnobj   
33 [0x21]:          ret   
34 [0x22]:          nop   


overload function: std#list<var>.operator[[3378] params(1) in file: lib\support\0.2.805/list.sharp:36:8: note:  
		    def operator[](index: var): t {
		       ^

0 [0x0]: line: 37 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 25   
18 [0x12]: line: 38 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:          dup    
20 [0x14]:          pushl 0   
21 [0x15]:          ipushl #1   
22 [0x16]:          call @3398 // <std#list<var>.out_of_bounds_msg>   
23 [0x17]:          call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:          throw    
25 [0x19]:          nop   
26 [0x1a]: line: 39 movl 0   
27 [0x1b]:          movn #1   
29 [0x1d]:          pushobj   
30 [0x1e]:          loadl ebx, fp+1   
31 [0x1f]:          popobj2    
32 [0x20]:          movr adx, ebx   
33 [0x21]:          chklen adx   
34 [0x22]:          iaload ebx, adx   
35 [0x23]:          return_val ebx   
36 [0x24]:          ret   


function: std#list<var>.at[3379] params(1) in file: lib\support\0.2.805/list.sharp:42:8: note:  
		    def at(index: var): t {
		       ^

0 [0x0]: line: 43 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 25   
18 [0x12]: line: 44 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:          dup    
20 [0x14]:          pushl 0   
21 [0x15]:          ipushl #1   
22 [0x16]:          call @3398 // <std#list<var>.out_of_bounds_msg>   
23 [0x17]:          call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:          throw    
25 [0x19]:          nop   
26 [0x1a]: line: 45 movl 0   
27 [0x1b]:          movn #1   
29 [0x1d]:          pushobj   
30 [0x1e]:          loadl ebx, fp+1   
31 [0x1f]:          popobj2    
32 [0x20]:          movr adx, ebx   
33 [0x21]:          chklen adx   
34 [0x22]:          iaload ebx, adx   
35 [0x23]:          return_val ebx   
36 [0x24]:          ret   


function: std#list<var>.last[3380] params(0) in file: lib\support\0.2.805/list.sharp:48:8: note:  
		    def last(): t {
		       ^

0 [0x0]: line: 49 pushl 0   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          rstore ebx   
8 [0x8]:          movi #1, ebx   
10 [0xa]:          loadval ecx   
11 [0xb]:          sub ecx, ebx -> ebx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @3379 // <std#list<var>.at>   
14 [0xe]:          loadval ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


function: std#list<var>.put[3381] params(2) in file: lib\support\0.2.805/list.sharp:52:8: note:  
		    def put(index: var, element: t) : t {
		       ^

0 [0x0]: line: 53 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 25   
18 [0x12]: line: 54 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:          dup    
20 [0x14]:          pushl 0   
21 [0x15]:          ipushl #1   
22 [0x16]:          call @3398 // <std#list<var>.out_of_bounds_msg>   
23 [0x17]:          call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:          throw    
25 [0x19]:          nop   
26 [0x1a]: line: 56 movl 0   
27 [0x1b]:          movn #1   
29 [0x1d]:          pushobj   
30 [0x1e]:          loadl ebx, fp+1   
31 [0x1f]:          popobj2    
32 [0x20]:          movr adx, ebx   
33 [0x21]:          chklen adx   
34 [0x22]:          iaload ebx, adx   
35 [0x23]:          smovr_2 ebx, fp+3   
36 [0x24]: line: 57 ipushl #2   
37 [0x25]:          movl 0   
38 [0x26]:          movn #1   
40 [0x28]:          pushobj   
41 [0x29]:          loadl ebx, fp+1   
42 [0x2a]:          popobj2    
43 [0x2b]:          movr adx, ebx   
44 [0x2c]:          chklen adx   
45 [0x2d]:          loadval ebx   
46 [0x2e]:          rmov adx, ebx   
47 [0x2f]: line: 58 loadl ebx, fp+3   
48 [0x30]:          return_val ebx   
49 [0x31]:          ret   


function: std#list<var>.expand[3382] params(0) in file: lib\support\0.2.805/list.sharp:61:16: note:  
		    private def expand() {
		               ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #2   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 24   
8 [0x8]: line: 63 movl 0   
9 [0x9]:          movn #1   
11 [0xb]:          pushobj   
12 [0xc]:          movl 0   
13 [0xd]:          movn #1   
15 [0xf]:          sizeof ebx   
16 [0x10]:          rstore ebx   
17 [0x11]:          movi #128, ebx   
19 [0x13]:          loadval ecx   
20 [0x14]:          add ecx, ebx -> ebx   
21 [0x15]:          rstore ebx   
22 [0x16]:          call @1736 // <std.io#__srt_global.realloc>   
23 [0x17]:          jmp @51   
24 [0x18]: line: 65 movl 0   
25 [0x19]:          movn #1   
27 [0x1b]:          pushobj   
28 [0x1c]:          movl 0   
29 [0x1d]:          movn #1   
31 [0x1f]:          sizeof ebx   
32 [0x20]:          rstore ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #1   
36 [0x24]:          sizeof ebx   
37 [0x25]:          rstore ebx   
38 [0x26]:          movi #4, ebx   
40 [0x28]:          loadval ecx   
41 [0x29]:          shr ecx, ebx -> ebx   
42 [0x2a]:          loadval ecx   
43 [0x2b]:          add ecx, ebx -> ebx   
44 [0x2c]:          rstore ebx   
45 [0x2d]:          movi #128, ebx   
47 [0x2f]:          loadval ecx   
48 [0x30]:          add ecx, ebx -> ebx   
49 [0x31]:          rstore ebx   
50 [0x32]:          call @1736 // <std.io#__srt_global.realloc>   
51 [0x33]:          nop   
52 [0x34]:          ret   


function: std#list<var>.clear[3383] params(0) in file: lib\support\0.2.805/list.sharp:68:8: note:  
		    def clear() {
		       ^

0 [0x0]: line: 69 movi #10, ebx   
2 [0x2]:          newarry ebx   
3 [0x3]:          movl 0   
4 [0x4]:          movn #1   
6 [0x6]:          popobj   
7 [0x7]: line: 70 movi #0, ebx   
9 [0x9]:          movl 0   
10 [0xa]:          movn #0   
12 [0xc]:          movi #0, adx   
14 [0xe]:          rmov adx, ebx   
15 [0xf]:          ret   


function: std#list<var>.add_all[3384] params(1) in file: lib\support\0.2.805/list.sharp:73:8: note:  
		    def add_all(lst: list<t>) {
		       ^

0 [0x0]: line: 74 movl 1   
1 [0x1]:          movn #1   
3 [0x3]:          pushobj   
4 [0x4]:          istore 0   
6 [0x6]:          movl 1   
7 [0x7]:          movn #0   
9 [0x9]:          movi #0, adx   
11 [0xb]:          iaload ebx, adx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @1756 // <std.io#__srt_global.copy>   
14 [0xe]:          movl 0   
15 [0xf]:          movn #1   
17 [0x11]:          popobj   
18 [0x12]: line: 75 movl 1   
19 [0x13]:          movn #0   
21 [0x15]:          movi #0, adx   
23 [0x17]:          iaload ebx, adx   
24 [0x18]:          movl 0   
25 [0x19]:          movn #0   
27 [0x1b]:          movi #0, adx   
29 [0x1d]:          rmov adx, ebx   
30 [0x1e]:          ret   


function: std#list<var>.add_all[3385] params(1) in file: lib\support\0.2.805/list.sharp:78:8: note:  
		    def add_all(lst: t[]) {
		       ^

0 [0x0]: line: 79 movl 1   
1 [0x1]:          checknull   
2 [0x2]:          not ebx, ebx   
3 [0x3]:          movr cmt, ebx   
4 [0x4]:          jne 25   
5 [0x5]: line: 80 pushl 1   
6 [0x6]:          istore 0   
8 [0x8]:          movl 1   
9 [0x9]:          sizeof ebx   
10 [0xa]:          rstore ebx   
11 [0xb]:          call @1756 // <std.io#__srt_global.copy>   
12 [0xc]:          movl 0   
13 [0xd]:          movn #1   
15 [0xf]:          popobj   
16 [0x10]: line: 81 movl 1   
17 [0x11]:          sizeof ebx   
18 [0x12]:          movl 0   
19 [0x13]:          movn #0   
21 [0x15]:          movi #0, adx   
23 [0x17]:          rmov adx, ebx   
24 [0x18]:          jmp @40   
25 [0x19]: line: 83 movi #0, ebx   
27 [0x1b]:          movl 0   
28 [0x1c]:          movn #0   
30 [0x1e]:          movi #0, adx   
32 [0x20]:          rmov adx, ebx   
33 [0x21]: line: 84 movi #10, ebx   
35 [0x23]:          newarry ebx   
36 [0x24]:          movl 0   
37 [0x25]:          movn #1   
39 [0x27]:          popobj   
40 [0x28]:          nop   
41 [0x29]:          ret   


function: std#list<var>.add[3386] params(1) in file: lib\support\0.2.805/list.sharp:88:8: note:  
		    def add(element: t) {
		       ^

0 [0x0]: line: 89 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 0   
8 [0x8]:          movn #1   
10 [0xa]:          sizeof ebx   
11 [0xb]:          loadval ecx   
12 [0xc]:          gte ecx, ebx   
13 [0xd]:          movr ebx, cmt   
14 [0xe]:          movr cmt, ebx   
15 [0xf]:          jne 18   
16 [0x10]: line: 90 pushl 0   
17 [0x11]:          call @3382 // <std#list<var>.expand>   
18 [0x12]:          nop   
19 [0x13]: line: 91 ipushl #1   
20 [0x14]:          movl 0   
21 [0x15]:          movn #1   
23 [0x17]:          pushobj   
24 [0x18]:          movl 0   
25 [0x19]:          movn #0   
27 [0x1b]:          movi #0, adx   
29 [0x1d]:          iaload ebx, adx   
30 [0x1e]:          movr egx, ebx   
31 [0x1f]:          inc ebx   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          movr ebx, egx   
36 [0x24]:          popobj2    
37 [0x25]:          movr adx, ebx   
38 [0x26]:          chklen adx   
39 [0x27]:          loadval ebx   
40 [0x28]:          rmov adx, ebx   
41 [0x29]:          ret   


function: std#list<var>.indexof[3387] params(1) in file: lib\support\0.2.805/list.sharp:94:8: note:  
		    def indexof(element: t) : var {
		       ^

0 [0x0]: line: 95 istorel 0, fp+2   
2 [0x2]:          ipushl #2   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          movi #0, adx   
8 [0x8]:          iaload ebx, adx   
9 [0x9]:          loadval ecx   
10 [0xa]:          lt ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 34   
14 [0xe]: line: 96 ipushl #1   
15 [0xf]:          movl 0   
16 [0x10]:          movn #1   
18 [0x12]:          pushobj   
19 [0x13]:          loadl ebx, fp+2   
20 [0x14]:          popobj2    
21 [0x15]:          movr adx, ebx   
22 [0x16]:          chklen adx   
23 [0x17]:          iaload ebx, adx   
24 [0x18]:          loadval ecx   
25 [0x19]:          test ecx, ebx   
26 [0x1a]:          jne 30   
27 [0x1b]: line: 97 loadl ebx, fp+2   
28 [0x1c]:          return_val ebx   
29 [0x1d]:          ret   
30 [0x1e]:          nop   
31 [0x1f]:          iaddl 1, fp@2   
33 [0x21]:          jmp @2   
34 [0x22]: line: 101 istorel -1, fp+0   
36 [0x24]:           ret   


function: std#list<var>.pop_back[3388] params(0) in file: lib\support\0.2.805/list.sharp:104:8: note:  
		    def pop_back() {
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #0, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 38   
14 [0xe]: line: 106 istorel 0, fp+1   
16 [0x10]: line: 107 ipushl #1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           movl 0   
22 [0x16]:           movn #0   
24 [0x18]:           movi #0, adx   
26 [0x1a]:           iaload ebx, adx   
27 [0x1b]:           movr egx, ebx   
28 [0x1c]:           dec ebx   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           rmov adx, ebx   
32 [0x20]:           movr ebx, egx   
33 [0x21]:           popobj2    
34 [0x22]:           movr adx, ebx   
35 [0x23]:           chklen adx   
36 [0x24]:           loadval ebx   
37 [0x25]:           rmov adx, ebx   
38 [0x26]:           nop   
39 [0x27]:           ret   


function: std#list<var>.size[3389] params(0) in file: lib\support\0.2.805/list.sharp:111:8: note:  
		    def size() := n_elements;
		       ^

0 [0x0]: line: 111 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std#list<var>.insert[3390] params(2) in file: lib\support\0.2.805/list.sharp:113:8: note:  
		    def insert(index: var, element: t) {
		       ^

0 [0x0]: line: 114 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gt ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 25   
18 [0x12]: line: 115 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:           dup    
20 [0x14]:           pushl 0   
21 [0x15]:           ipushl #1   
22 [0x16]:           call @3398 // <std#list<var>.out_of_bounds_msg>   
23 [0x17]:           call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:           throw    
25 [0x19]:           nop   
26 [0x1a]: line: 117 movl 0   
27 [0x1b]:           movn #0   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           iaload ebx, adx   
32 [0x20]:           rstore ebx   
33 [0x21]:           movi #0, ebx   
35 [0x23]:           loadval ecx   
36 [0x24]:           test ecx, ebx   
37 [0x25]:           jne 42   
38 [0x26]: line: 118 pushl 0   
39 [0x27]:           ipushl #2   
40 [0x28]:           call @3386 // <std#list<var>.add>   
41 [0x29]:           jmp @131   
42 [0x2a]: line: 120 movl 0   
43 [0x2b]:           movn #0   
45 [0x2d]:           movi #0, adx   
47 [0x2f]:           iaload ebx, adx   
48 [0x30]:           rstore ebx   
49 [0x31]:           movl 0   
50 [0x32]:           movn #1   
52 [0x34]:           sizeof ebx   
53 [0x35]:           loadval ecx   
54 [0x36]:           gte ecx, ebx   
55 [0x37]:           movr ebx, cmt   
56 [0x38]:           movr cmt, ebx   
57 [0x39]:           jne 60   
58 [0x3a]: line: 121 pushl 0   
59 [0x3b]:           call @3382 // <std#list<var>.expand>   
60 [0x3c]:           nop   
61 [0x3d]: line: 122 movl 0   
62 [0x3e]:           movn #0   
64 [0x40]:           movi #0, adx   
66 [0x42]:           iaload ebx, adx   
67 [0x43]:           movr egx, ebx   
68 [0x44]:           inc ebx   
69 [0x45]:           movi #0, adx   
71 [0x47]:           rmov adx, ebx   
72 [0x48]: line: 123 movl 0   
73 [0x49]:           movn #0   
75 [0x4b]:           movi #0, adx   
77 [0x4d]:           iaload ebx, adx   
78 [0x4e]:           rstore ebx   
79 [0x4f]:           movi #1, ebx   
81 [0x51]:           loadval ecx   
82 [0x52]:           sub ecx, ebx -> ebx   
83 [0x53]:           smovr_2 ebx, fp+3   
84 [0x54]:           ipushl #3   
85 [0x55]:           loadl ebx, fp+1   
86 [0x56]:           loadval ecx   
87 [0x57]:           gt ecx, ebx   
88 [0x58]:           movr ebx, cmt   
89 [0x59]:           movr cmt, ebx   
90 [0x5a]:           jne 120   
91 [0x5b]: line: 124 movl 0   
92 [0x5c]:           movn #1   
94 [0x5e]:           pushobj   
95 [0x5f]:           ipushl #3   
96 [0x60]:           movi #1, ebx   
98 [0x62]:           loadval ecx   
99 [0x63]:           sub ecx, ebx -> ebx   
100 [0x64]:           popobj2    
101 [0x65]:           movr adx, ebx   
102 [0x66]:           chklen adx   
103 [0x67]:           iaload ebx, adx   
104 [0x68]:           rstore ebx   
105 [0x69]:           movl 0   
106 [0x6a]:           movn #1   
108 [0x6c]:           pushobj   
109 [0x6d]:           loadl ebx, fp+3   
110 [0x6e]:           popobj2    
111 [0x6f]:           movr adx, ebx   
112 [0x70]:           chklen adx   
113 [0x71]:           loadval ebx   
114 [0x72]:           rmov adx, ebx   
115 [0x73]:           loadl ebx, fp+3   
116 [0x74]:           movr egx, ebx   
117 [0x75]:           dec ebx   
118 [0x76]:           smovr_2 ebx, fp+3   
119 [0x77]:           jmp @84   
120 [0x78]: line: 125 ipushl #2   
121 [0x79]:           movl 0   
122 [0x7a]:           movn #1   
124 [0x7c]:           pushobj   
125 [0x7d]:           loadl ebx, fp+1   
126 [0x7e]:           popobj2    
127 [0x7f]:           movr adx, ebx   
128 [0x80]:           chklen adx   
129 [0x81]:           loadval ebx   
130 [0x82]:           rmov adx, ebx   
131 [0x83]:           nop   
132 [0x84]:           ret   


function: std#list<var>.find[3391] params(2) in file: lib\support\0.2.805/list.sharp:129:8: note:  
		    def find(comparer : t, find_func: (t, t)(var)) : t {
		       ^

0 [0x0]: line: 130 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 46   
14 [0xe]: line: 131 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           iaload ebx, adx   
24 [0x18]:           rstore ebx   
25 [0x19]:           ipushl #1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 42   
31 [0x1f]: line: 132 movl 0   
32 [0x20]:           movn #1   
34 [0x22]:           pushobj   
35 [0x23]:           loadl ebx, fp+3   
36 [0x24]:           popobj2    
37 [0x25]:           movr adx, ebx   
38 [0x26]:           chklen adx   
39 [0x27]:           iaload ebx, adx   
40 [0x28]:           return_val ebx   
41 [0x29]:           ret   
42 [0x2a]:           nop   
43 [0x2b]:           iaddl 1, fp@3   
45 [0x2d]:           jmp @2   
46 [0x2e]: line: 136 istorel 0, fp+4   
48 [0x30]: line: 137 loadl ebx, fp+4   
49 [0x31]:           return_val ebx   
50 [0x32]:           ret   


function: std#list<var>.remove[3392] params(1) in file: lib\support\0.2.805/list.sharp:140:8: note:  
		    def remove(val: t) {
		       ^

0 [0x0]: line: 141 istorel 0, fp+2   
2 [0x2]:           ipushl #2   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 35   
14 [0xe]: line: 142 ipushl #1   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+2   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           iaload ebx, adx   
24 [0x18]:           loadval ecx   
25 [0x19]:           test ecx, ebx   
26 [0x1a]:           jne 31   
27 [0x1b]: line: 143 pushl 0   
28 [0x1c]:           ipushl #2   
29 [0x1d]:           call @3395 // <std#list<var>.remove_at>   
30 [0x1e]: line: 144 ret   
31 [0x1f]:           nop   
32 [0x20]:           iaddl 1, fp@2   
34 [0x22]:           jmp @2   
35 [0x23]:           ret   


function: std#list<var>.remove[3393] params(2) in file: lib\support\0.2.805/list.sharp:149:8: note:  
		    def remove(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 150 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 39   
14 [0xe]: line: 151 ipushl #2   
15 [0xf]:           ipushl #1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           iaload ebx, adx   
25 [0x19]:           rstore ebx   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 35   
31 [0x1f]: line: 152 pushl 0   
32 [0x20]:           ipushl #3   
33 [0x21]:           call @3395 // <std#list<var>.remove_at>   
34 [0x22]: line: 153 ret   
35 [0x23]:           nop   
36 [0x24]:           iaddl 1, fp@3   
38 [0x26]:           jmp @2   
39 [0x27]:           ret   


function: std#list<var>.replace[3394] params(2) in file: lib\support\0.2.805/list.sharp:158:8: note:  
		    def replace(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 159 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 47   
14 [0xe]: line: 160 ipushl #2   
15 [0xf]:           ipushl #1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           iaload ebx, adx   
25 [0x19]:           rstore ebx   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 43   
31 [0x1f]: line: 161 ipushl #1   
32 [0x20]:           movl 0   
33 [0x21]:           movn #1   
35 [0x23]:           pushobj   
36 [0x24]:           loadl ebx, fp+3   
37 [0x25]:           popobj2    
38 [0x26]:           movr adx, ebx   
39 [0x27]:           chklen adx   
40 [0x28]:           loadval ebx   
41 [0x29]:           rmov adx, ebx   
42 [0x2a]: line: 162 ret   
43 [0x2b]:           nop   
44 [0x2c]:           iaddl 1, fp@3   
46 [0x2e]:           jmp @2   
47 [0x2f]:           ret   


function: std#list<var>.remove_at[3395] params(1) in file: lib\support\0.2.805/list.sharp:167:8: note:  
		    def remove_at(index: var) {
		       ^

0 [0x0]: line: 168 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gte ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 25   
18 [0x12]: line: 169 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:           dup    
20 [0x14]:           pushl 0   
21 [0x15]:           ipushl #1   
22 [0x16]:           call @3398 // <std#list<var>.out_of_bounds_msg>   
23 [0x17]:           call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:           throw    
25 [0x19]:           nop   
26 [0x1a]: line: 171 movl 0   
27 [0x1b]:           movn #0   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           iaload ebx, adx   
32 [0x20]:           rstore ebx   
33 [0x21]:           loadl ebx, fp+1   
34 [0x22]:           loadval ecx   
35 [0x23]:           sub ecx, ebx -> ebx   
36 [0x24]:           rstore ebx   
37 [0x25]:           movi #1, ebx   
39 [0x27]:           loadval ecx   
40 [0x28]:           sub ecx, ebx -> ebx   
41 [0x29]:           smovr_2 ebx, fp+2   
42 [0x2a]: line: 172 ipushl #2   
43 [0x2b]:           movi #0, ebx   
45 [0x2d]:           loadval ecx   
46 [0x2e]:           gt ecx, ebx   
47 [0x2f]:           movr ebx, cmt   
48 [0x30]:           movr cmt, ebx   
49 [0x31]:           jne 73   
50 [0x32]: line: 173 movl 0   
51 [0x33]:           movn #1   
53 [0x35]:           pushobj   
54 [0x36]:           movl 0   
55 [0x37]:           movn #1   
57 [0x39]:           pushobj   
58 [0x3a]:           ipushl #1   
59 [0x3b]:           ipushl #1   
60 [0x3c]:           movi #1, ebx   
62 [0x3e]:           loadval ecx   
63 [0x3f]:           add ecx, ebx -> ebx   
64 [0x40]:           rstore ebx   
65 [0x41]:           movl 0   
66 [0x42]:           movn #0   
68 [0x44]:           movi #0, adx   
70 [0x46]:           iaload ebx, adx   
71 [0x47]:           rstore ebx   
72 [0x48]:           call @1746 // <std.io#__srt_global.memcopy>   
73 [0x49]:           nop   
74 [0x4a]: line: 175 pushl 0   
75 [0x4b]:           call @3388 // <std#list<var>.pop_back>   
76 [0x4c]:           ret   


function: std#list<var>.indexof[3396] params(2) in file: lib\support\0.2.805/list.sharp:178:8: note:  
		    def indexof(comparer: t, find_func: (t, t)(var)) : var {
		       ^

0 [0x0]: line: 179 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 38   
14 [0xe]: line: 180 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           iaload ebx, adx   
24 [0x18]:           rstore ebx   
25 [0x19]:           ipushl #1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 34   
31 [0x1f]: line: 181 loadl ebx, fp+3   
32 [0x20]:           return_val ebx   
33 [0x21]:           ret   
34 [0x22]:           nop   
35 [0x23]:           iaddl 1, fp@3   
37 [0x25]:           jmp @2   
38 [0x26]: line: 185 istorel -1, fp+0   
40 [0x28]:           ret   


function: std#list<var>.to_string[3397] params(0) in file: lib\support\0.2.805/list.sharp:188:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 189 new_class @65 // std#string_builder   
1 [0x1]:           dup    
2 [0x2]:           call @3038 // <std#string_builder.string_builder>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+1   
5 [0x5]: line: 191 pushl 1   
6 [0x6]:           newstr @138 // [    
7 [0x7]:           call @3034 // <std#string_builder.operator+=>   
8 [0x8]:           pop   
9 [0x9]: line: 192 istorel 0, fp+2   
11 [0xb]:           ipushl #2   
12 [0xc]:           movl 0   
13 [0xd]:           movn #0   
15 [0xf]:           movi #0, adx   
17 [0x11]:           iaload ebx, adx   
18 [0x12]:           loadval ecx   
19 [0x13]:           lt ecx, ebx   
20 [0x14]:           movr ebx, cmt   
21 [0x15]:           movr cmt, ebx   
22 [0x16]:           jne 61   
23 [0x17]: line: 193 pushl 1   
24 [0x18]:           movl 0   
25 [0x19]:           movn #1   
27 [0x1b]:           pushobj   
28 [0x1c]:           loadl ebx, fp+2   
29 [0x1d]:           popobj2    
30 [0x1e]:           movr adx, ebx   
31 [0x1f]:           chklen adx   
32 [0x20]:           iaload ebx, adx   
33 [0x21]:           rstore ebx   
34 [0x22]:           call @3029 // <std#string_builder.operator+=>   
35 [0x23]:           pop   
36 [0x24]: line: 195 ipushl #2   
37 [0x25]:           movi #1, ebx   
39 [0x27]:           loadval ecx   
40 [0x28]:           add ecx, ebx -> ebx   
41 [0x29]:           rstore ebx   
42 [0x2a]:           movl 0   
43 [0x2b]:           movn #0   
45 [0x2d]:           movi #0, adx   
47 [0x2f]:           iaload ebx, adx   
48 [0x30]:           loadval ecx   
49 [0x31]:           lt ecx, ebx   
50 [0x32]:           movr ebx, cmt   
51 [0x33]:           movr cmt, ebx   
52 [0x34]:           jne 57   
53 [0x35]: line: 196 pushl 1   
54 [0x36]:           newstr @139 // ,    
55 [0x37]:           call @3034 // <std#string_builder.operator+=>   
56 [0x38]:           pop   
57 [0x39]:           nop   
58 [0x3a]:           iaddl 1, fp@2   
60 [0x3c]:           jmp @11   
61 [0x3d]: line: 200 pushl 1   
62 [0x3e]:           newstr @140 //  ]   
63 [0x3f]:           call @3034 // <std#string_builder.operator+=>   
64 [0x40]:           pop   
65 [0x41]: line: 201 pushl 1   
66 [0x42]:           call @3011 // <std#string_builder.to_string>   
67 [0x43]:           popobj2    
68 [0x44]:           returnobj   
69 [0x45]:           ret   


function: std#list<var>.out_of_bounds_msg[3398] params(1) in file: lib\support\0.2.805/list.sharp:204:16: note:  
		    private def out_of_bounds_msg(index: var) : string {
		               ^

0 [0x0]: line: 205 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           newstr @141 // Index:    
3 [0x3]:           call @2935 // <std#string.string>   
4 [0x4]:           ipushl #1   
5 [0x5]:           call @2967 // <std#string.operator+>   
6 [0x6]:           newstr @142 // , size:    
7 [0x7]:           call @2947 // <std#string.operator+>   
8 [0x8]:           movl 0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           iaload ebx, adx   
14 [0xe]:           rstore ebx   
15 [0xf]:           call @2967 // <std#string.operator+>   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#_nil_.set_instance[3399] params(1) in file: lib\support\0.2.805/nil.sharp:11:44: note:  
		    static instance : _nil_ = new _nil_ { };
		                                           ^

0 [0x0]:         ret   


function: std.reflect#reflect.set_reflect_obj[3400] params(1) in file: lib\support\0.2.805/reflect//reflection.sharp:5:35: note:  
		        get { return reflect_obj; }
		                                  ^

0 [0x0]:         ret   


function: std.reflect#reflect.get_reflect_obj[3401] params(0) in file: lib\support\0.2.805/reflect//reflection.sharp:4:25: note:  
		    reflect_obj : object;
		                        ^

0 [0x0]: line: 5 movl 0   
1 [0x1]:         movn #0   
3 [0x3]:         returnobj   
4 [0x4]:         ret   


std#loopable<common.network.core#request_data.request_item>.get_elements[3402] params(0) in file: lib\support\0.2.805/loopable.sharp:4:8: note:  
		    def get_elements() : t[];
		       ^



constructor: std#loopable<common.network.core#request_data.request_item>.loopable[3403] params(0) in file: lib\support\0.2.805/loopable.sharp:3:10: note:  
		interface loopable<t> {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#list<common.network.core#request_data.request_item>.list[3404] params(0) in file: lib\support\0.2.805/list.sharp:13:9: note:  
		    list() {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 14 movi #10, ebx   
3 [0x3]:          new_classarray ebx  // common.network.core#request_data.request_item[]   
4 [0x4]:          movl 0   
5 [0x5]:          movn #1   
7 [0x7]:          popobj   
8 [0x8]:          ret   


constructor: std#list<common.network.core#request_data.request_item>.list[3405] params(1) in file: lib\support\0.2.805/list.sharp:17:9: note:  
		    list(starting_capacity: var) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 18 loadl ebx, fp+1   
2 [0x2]:          new_classarray ebx  // common.network.core#request_data.request_item[]   
3 [0x3]:          movl 0   
4 [0x4]:          movn #1   
6 [0x6]:          popobj   
7 [0x7]:          ret   


constructor: std#list<common.network.core#request_data.request_item>.list[3406] params(1) in file: lib\support\0.2.805/list.sharp:21:9: note:  
		    list(initial_data: t[]) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 22 pushl 0   
2 [0x2]:          pushl 1   
3 [0x3]:          call @3417 // <std#list<common.network.core#request_data.request_item>.add_all>   
4 [0x4]:          ret   


function: std#list<common.network.core#request_data.request_item>.empty[3407] params(0) in file: lib\support\0.2.805/list.sharp:25:8: note:  
		    def empty() := n_elements == 0;
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          return_val cmt   
12 [0xc]:          ret   


function: std#list<common.network.core#request_data.request_item>.set_compact[3408] params(1) in file: lib\support\0.2.805/list.sharp:27:8: note:  
		    def set_compact(compact_array: var) {
		       ^

0 [0x0]: line: 28 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #2   
4 [0x4]:          loadval ebx   
5 [0x5]:          movi #0, adx   
7 [0x7]:          rmov adx, ebx   
8 [0x8]:          ret   


function: std#list<common.network.core#request_data.request_item>.get_elements[3409] params(0) in file: lib\support\0.2.805/list.sharp:31:8: note:  
		    def get_elements() : t[] {
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          jne 17   
12 [0xc]:          pushnull    
13 [0xd]:          popobj2    
14 [0xe]:          returnobj   
15 [0xf]:          ret   
16 [0x10]:          jmp @34   
17 [0x11]: line: 33 movl 0   
18 [0x12]:          movn #1   
20 [0x14]:          pushobj   
21 [0x15]:          istore 0   
23 [0x17]:          movl 0   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          iaload ebx, adx   
29 [0x1d]:          rstore ebx   
30 [0x1e]:          call @1755 // <std.io#__srt_global.copy>   
31 [0x1f]:          popobj2    
32 [0x20]:          returnobj   
33 [0x21]:          ret   
34 [0x22]:          nop   


overload function: std#list<common.network.core#request_data.request_item>.operator[[3410] params(1) in file: lib\support\0.2.805/list.sharp:36:8: note:  
		    def operator[](index: var): t {
		       ^

0 [0x0]: line: 37 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 25   
18 [0x12]: line: 38 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:          dup    
20 [0x14]:          pushl 0   
21 [0x15]:          ipushl #1   
22 [0x16]:          call @3430 // <std#list<common.network.core#request_data.request_item>.out_of_bounds_msg>   
23 [0x17]:          call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:          throw    
25 [0x19]:          nop   
26 [0x1a]: line: 39 movl 0   
27 [0x1b]:          movn #1   
29 [0x1d]:          pushobj   
30 [0x1e]:          loadl ebx, fp+1   
31 [0x1f]:          popobj2    
32 [0x20]:          movr adx, ebx   
33 [0x21]:          chklen adx   
34 [0x22]:          movnd adx   
35 [0x23]:          returnobj   
36 [0x24]:          ret   


function: std#list<common.network.core#request_data.request_item>.at[3411] params(1) in file: lib\support\0.2.805/list.sharp:42:8: note:  
		    def at(index: var): t {
		       ^

0 [0x0]: line: 43 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 25   
18 [0x12]: line: 44 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:          dup    
20 [0x14]:          pushl 0   
21 [0x15]:          ipushl #1   
22 [0x16]:          call @3430 // <std#list<common.network.core#request_data.request_item>.out_of_bounds_msg>   
23 [0x17]:          call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:          throw    
25 [0x19]:          nop   
26 [0x1a]: line: 45 movl 0   
27 [0x1b]:          movn #1   
29 [0x1d]:          pushobj   
30 [0x1e]:          loadl ebx, fp+1   
31 [0x1f]:          popobj2    
32 [0x20]:          movr adx, ebx   
33 [0x21]:          chklen adx   
34 [0x22]:          movnd adx   
35 [0x23]:          returnobj   
36 [0x24]:          ret   


function: std#list<common.network.core#request_data.request_item>.last[3412] params(0) in file: lib\support\0.2.805/list.sharp:48:8: note:  
		    def last(): t {
		       ^

0 [0x0]: line: 49 pushl 0   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          rstore ebx   
8 [0x8]:          movi #1, ebx   
10 [0xa]:          loadval ecx   
11 [0xb]:          sub ecx, ebx -> ebx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @3411 // <std#list<common.network.core#request_data.request_item>.at>   
14 [0xe]:          popobj2    
15 [0xf]:          returnobj   
16 [0x10]:          ret   


function: std#list<common.network.core#request_data.request_item>.put[3413] params(2) in file: lib\support\0.2.805/list.sharp:52:8: note:  
		    def put(index: var, element: t) : t {
		       ^

0 [0x0]: line: 53 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 25   
18 [0x12]: line: 54 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:          dup    
20 [0x14]:          pushl 0   
21 [0x15]:          ipushl #1   
22 [0x16]:          call @3430 // <std#list<common.network.core#request_data.request_item>.out_of_bounds_msg>   
23 [0x17]:          call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:          throw    
25 [0x19]:          nop   
26 [0x1a]: line: 56 movl 0   
27 [0x1b]:          movn #1   
29 [0x1d]:          pushobj   
30 [0x1e]:          loadl ebx, fp+1   
31 [0x1f]:          popobj2    
32 [0x20]:          movr adx, ebx   
33 [0x21]:          chklen adx   
34 [0x22]:          movnd adx   
35 [0x23]:          smovr_3 fp+3   
36 [0x24]: line: 57 pushl 2   
37 [0x25]:          movl 0   
38 [0x26]:          movn #1   
40 [0x28]:          pushobj   
41 [0x29]:          loadl ebx, fp+1   
42 [0x2a]:          popobj2    
43 [0x2b]:          movr adx, ebx   
44 [0x2c]:          chklen adx   
45 [0x2d]:          movnd adx   
46 [0x2e]:          popobj   
47 [0x2f]: line: 58 movl 3   
48 [0x30]:          returnobj   
49 [0x31]:          ret   


function: std#list<common.network.core#request_data.request_item>.expand[3414] params(0) in file: lib\support\0.2.805/list.sharp:61:16: note:  
		    private def expand() {
		               ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #2   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 24   
8 [0x8]: line: 63 movl 0   
9 [0x9]:          movn #1   
11 [0xb]:          pushobj   
12 [0xc]:          movl 0   
13 [0xd]:          movn #1   
15 [0xf]:          sizeof ebx   
16 [0x10]:          rstore ebx   
17 [0x11]:          movi #128, ebx   
19 [0x13]:          loadval ecx   
20 [0x14]:          add ecx, ebx -> ebx   
21 [0x15]:          rstore ebx   
22 [0x16]:          call @1735 // <std.io#__srt_global.realloc>   
23 [0x17]:          jmp @51   
24 [0x18]: line: 65 movl 0   
25 [0x19]:          movn #1   
27 [0x1b]:          pushobj   
28 [0x1c]:          movl 0   
29 [0x1d]:          movn #1   
31 [0x1f]:          sizeof ebx   
32 [0x20]:          rstore ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #1   
36 [0x24]:          sizeof ebx   
37 [0x25]:          rstore ebx   
38 [0x26]:          movi #4, ebx   
40 [0x28]:          loadval ecx   
41 [0x29]:          shr ecx, ebx -> ebx   
42 [0x2a]:          loadval ecx   
43 [0x2b]:          add ecx, ebx -> ebx   
44 [0x2c]:          rstore ebx   
45 [0x2d]:          movi #128, ebx   
47 [0x2f]:          loadval ecx   
48 [0x30]:          add ecx, ebx -> ebx   
49 [0x31]:          rstore ebx   
50 [0x32]:          call @1735 // <std.io#__srt_global.realloc>   
51 [0x33]:          nop   
52 [0x34]:          ret   


function: std#list<common.network.core#request_data.request_item>.clear[3415] params(0) in file: lib\support\0.2.805/list.sharp:68:8: note:  
		    def clear() {
		       ^

0 [0x0]: line: 69 movi #10, ebx   
2 [0x2]:          new_classarray ebx  // common.network.core#request_data.request_item[]   
3 [0x3]:          movl 0   
4 [0x4]:          movn #1   
6 [0x6]:          popobj   
7 [0x7]: line: 70 movi #0, ebx   
9 [0x9]:          movl 0   
10 [0xa]:          movn #0   
12 [0xc]:          movi #0, adx   
14 [0xe]:          rmov adx, ebx   
15 [0xf]:          ret   


function: std#list<common.network.core#request_data.request_item>.add_all[3416] params(1) in file: lib\support\0.2.805/list.sharp:73:8: note:  
		    def add_all(lst: list<t>) {
		       ^

0 [0x0]: line: 74 movl 1   
1 [0x1]:          movn #1   
3 [0x3]:          pushobj   
4 [0x4]:          istore 0   
6 [0x6]:          movl 1   
7 [0x7]:          movn #0   
9 [0x9]:          movi #0, adx   
11 [0xb]:          iaload ebx, adx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @1755 // <std.io#__srt_global.copy>   
14 [0xe]:          popobj2    
15 [0xf]:          movi #77, cmt   
17 [0x11]:          cast cmt   
18 [0x12]:          pushobj   
19 [0x13]:          movl 0   
20 [0x14]:          movn #1   
22 [0x16]:          popobj   
23 [0x17]: line: 75 movl 1   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          iaload ebx, adx   
29 [0x1d]:          movl 0   
30 [0x1e]:          movn #0   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          ret   


function: std#list<common.network.core#request_data.request_item>.add_all[3417] params(1) in file: lib\support\0.2.805/list.sharp:78:8: note:  
		    def add_all(lst: t[]) {
		       ^

0 [0x0]: line: 79 movl 1   
1 [0x1]:          checknull   
2 [0x2]:          not ebx, ebx   
3 [0x3]:          movr cmt, ebx   
4 [0x4]:          jne 30   
5 [0x5]: line: 80 pushl 1   
6 [0x6]:          istore 0   
8 [0x8]:          movl 1   
9 [0x9]:          sizeof ebx   
10 [0xa]:          rstore ebx   
11 [0xb]:          call @1755 // <std.io#__srt_global.copy>   
12 [0xc]:          popobj2    
13 [0xd]:          movi #77, cmt   
15 [0xf]:          cast cmt   
16 [0x10]:          pushobj   
17 [0x11]:          movl 0   
18 [0x12]:          movn #1   
20 [0x14]:          popobj   
21 [0x15]: line: 81 movl 1   
22 [0x16]:          sizeof ebx   
23 [0x17]:          movl 0   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          rmov adx, ebx   
29 [0x1d]:          jmp @45   
30 [0x1e]: line: 83 movi #0, ebx   
32 [0x20]:          movl 0   
33 [0x21]:          movn #0   
35 [0x23]:          movi #0, adx   
37 [0x25]:          rmov adx, ebx   
38 [0x26]: line: 84 movi #10, ebx   
40 [0x28]:          new_classarray ebx  // common.network.core#request_data.request_item[]   
41 [0x29]:          movl 0   
42 [0x2a]:          movn #1   
44 [0x2c]:          popobj   
45 [0x2d]:          nop   
46 [0x2e]:          ret   


function: std#list<common.network.core#request_data.request_item>.add[3418] params(1) in file: lib\support\0.2.805/list.sharp:88:8: note:  
		    def add(element: t) {
		       ^

0 [0x0]: line: 89 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 0   
8 [0x8]:          movn #1   
10 [0xa]:          sizeof ebx   
11 [0xb]:          loadval ecx   
12 [0xc]:          gte ecx, ebx   
13 [0xd]:          movr ebx, cmt   
14 [0xe]:          movr cmt, ebx   
15 [0xf]:          jne 18   
16 [0x10]: line: 90 pushl 0   
17 [0x11]:          call @3414 // <std#list<common.network.core#request_data.request_item>.expand>   
18 [0x12]:          nop   
19 [0x13]: line: 91 pushl 1   
20 [0x14]:          movl 0   
21 [0x15]:          movn #1   
23 [0x17]:          pushobj   
24 [0x18]:          movl 0   
25 [0x19]:          movn #0   
27 [0x1b]:          movi #0, adx   
29 [0x1d]:          iaload ebx, adx   
30 [0x1e]:          movr egx, ebx   
31 [0x1f]:          inc ebx   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          movr ebx, egx   
36 [0x24]:          popobj2    
37 [0x25]:          movr adx, ebx   
38 [0x26]:          chklen adx   
39 [0x27]:          movnd adx   
40 [0x28]:          popobj   
41 [0x29]:          ret   


function: std#list<common.network.core#request_data.request_item>.indexof[3419] params(1) in file: lib\support\0.2.805/list.sharp:94:8: note:  
		    def indexof(element: t) : var {
		       ^

0 [0x0]: line: 95 istorel 0, fp+2   
2 [0x2]:          ipushl #2   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          movi #0, adx   
8 [0x8]:          iaload ebx, adx   
9 [0x9]:          loadval ecx   
10 [0xa]:          lt ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 35   
14 [0xe]: line: 96 pushl 1   
15 [0xf]:          movl 0   
16 [0x10]:          movn #1   
18 [0x12]:          pushobj   
19 [0x13]:          loadl ebx, fp+2   
20 [0x14]:          popobj2    
21 [0x15]:          movr adx, ebx   
22 [0x16]:          chklen adx   
23 [0x17]:          movnd adx   
24 [0x18]:          pushobj   
25 [0x19]:          itest ebx   
26 [0x1a]:          movr cmt, ebx   
27 [0x1b]:          jne 31   
28 [0x1c]: line: 97 loadl ebx, fp+2   
29 [0x1d]:          return_val ebx   
30 [0x1e]:          ret   
31 [0x1f]:          nop   
32 [0x20]:          iaddl 1, fp@2   
34 [0x22]:          jmp @2   
35 [0x23]: line: 101 istorel -1, fp+0   
37 [0x25]:           ret   


function: std#list<common.network.core#request_data.request_item>.pop_back[3420] params(0) in file: lib\support\0.2.805/list.sharp:104:8: note:  
		    def pop_back() {
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #0, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 38   
14 [0xe]: line: 106 movl 1   
15 [0xf]:           del   
16 [0x10]: line: 107 pushl 1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           movl 0   
22 [0x16]:           movn #0   
24 [0x18]:           movi #0, adx   
26 [0x1a]:           iaload ebx, adx   
27 [0x1b]:           movr egx, ebx   
28 [0x1c]:           dec ebx   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           rmov adx, ebx   
32 [0x20]:           movr ebx, egx   
33 [0x21]:           popobj2    
34 [0x22]:           movr adx, ebx   
35 [0x23]:           chklen adx   
36 [0x24]:           movnd adx   
37 [0x25]:           popobj   
38 [0x26]:           nop   
39 [0x27]:           ret   


function: std#list<common.network.core#request_data.request_item>.size[3421] params(0) in file: lib\support\0.2.805/list.sharp:111:8: note:  
		    def size() := n_elements;
		       ^

0 [0x0]: line: 111 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std#list<common.network.core#request_data.request_item>.insert[3422] params(2) in file: lib\support\0.2.805/list.sharp:113:8: note:  
		    def insert(index: var, element: t) {
		       ^

0 [0x0]: line: 114 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gt ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 25   
18 [0x12]: line: 115 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:           dup    
20 [0x14]:           pushl 0   
21 [0x15]:           ipushl #1   
22 [0x16]:           call @3430 // <std#list<common.network.core#request_data.request_item>.out_of_bounds_msg>   
23 [0x17]:           call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:           throw    
25 [0x19]:           nop   
26 [0x1a]: line: 117 movl 0   
27 [0x1b]:           movn #0   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           iaload ebx, adx   
32 [0x20]:           rstore ebx   
33 [0x21]:           movi #0, ebx   
35 [0x23]:           loadval ecx   
36 [0x24]:           test ecx, ebx   
37 [0x25]:           jne 42   
38 [0x26]: line: 118 pushl 0   
39 [0x27]:           pushl 2   
40 [0x28]:           call @3418 // <std#list<common.network.core#request_data.request_item>.add>   
41 [0x29]:           jmp @131   
42 [0x2a]: line: 120 movl 0   
43 [0x2b]:           movn #0   
45 [0x2d]:           movi #0, adx   
47 [0x2f]:           iaload ebx, adx   
48 [0x30]:           rstore ebx   
49 [0x31]:           movl 0   
50 [0x32]:           movn #1   
52 [0x34]:           sizeof ebx   
53 [0x35]:           loadval ecx   
54 [0x36]:           gte ecx, ebx   
55 [0x37]:           movr ebx, cmt   
56 [0x38]:           movr cmt, ebx   
57 [0x39]:           jne 60   
58 [0x3a]: line: 121 pushl 0   
59 [0x3b]:           call @3414 // <std#list<common.network.core#request_data.request_item>.expand>   
60 [0x3c]:           nop   
61 [0x3d]: line: 122 movl 0   
62 [0x3e]:           movn #0   
64 [0x40]:           movi #0, adx   
66 [0x42]:           iaload ebx, adx   
67 [0x43]:           movr egx, ebx   
68 [0x44]:           inc ebx   
69 [0x45]:           movi #0, adx   
71 [0x47]:           rmov adx, ebx   
72 [0x48]: line: 123 movl 0   
73 [0x49]:           movn #0   
75 [0x4b]:           movi #0, adx   
77 [0x4d]:           iaload ebx, adx   
78 [0x4e]:           rstore ebx   
79 [0x4f]:           movi #1, ebx   
81 [0x51]:           loadval ecx   
82 [0x52]:           sub ecx, ebx -> ebx   
83 [0x53]:           smovr_2 ebx, fp+3   
84 [0x54]:           ipushl #3   
85 [0x55]:           loadl ebx, fp+1   
86 [0x56]:           loadval ecx   
87 [0x57]:           gt ecx, ebx   
88 [0x58]:           movr ebx, cmt   
89 [0x59]:           movr cmt, ebx   
90 [0x5a]:           jne 120   
91 [0x5b]: line: 124 movl 0   
92 [0x5c]:           movn #1   
94 [0x5e]:           pushobj   
95 [0x5f]:           ipushl #3   
96 [0x60]:           movi #1, ebx   
98 [0x62]:           loadval ecx   
99 [0x63]:           sub ecx, ebx -> ebx   
100 [0x64]:           popobj2    
101 [0x65]:           movr adx, ebx   
102 [0x66]:           chklen adx   
103 [0x67]:           movnd adx   
104 [0x68]:           pushobj   
105 [0x69]:           movl 0   
106 [0x6a]:           movn #1   
108 [0x6c]:           pushobj   
109 [0x6d]:           loadl ebx, fp+3   
110 [0x6e]:           popobj2    
111 [0x6f]:           movr adx, ebx   
112 [0x70]:           chklen adx   
113 [0x71]:           movnd adx   
114 [0x72]:           popobj   
115 [0x73]:           loadl ebx, fp+3   
116 [0x74]:           movr egx, ebx   
117 [0x75]:           dec ebx   
118 [0x76]:           smovr_2 ebx, fp+3   
119 [0x77]:           jmp @84   
120 [0x78]: line: 125 pushl 2   
121 [0x79]:           movl 0   
122 [0x7a]:           movn #1   
124 [0x7c]:           pushobj   
125 [0x7d]:           loadl ebx, fp+1   
126 [0x7e]:           popobj2    
127 [0x7f]:           movr adx, ebx   
128 [0x80]:           chklen adx   
129 [0x81]:           movnd adx   
130 [0x82]:           popobj   
131 [0x83]:           nop   
132 [0x84]:           ret   


function: std#list<common.network.core#request_data.request_item>.find[3423] params(2) in file: lib\support\0.2.805/list.sharp:129:8: note:  
		    def find(comparer : t, find_func: (t, t)(var)) : t {
		       ^

0 [0x0]: line: 130 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 46   
14 [0xe]: line: 131 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 42   
31 [0x1f]: line: 132 movl 0   
32 [0x20]:           movn #1   
34 [0x22]:           pushobj   
35 [0x23]:           loadl ebx, fp+3   
36 [0x24]:           popobj2    
37 [0x25]:           movr adx, ebx   
38 [0x26]:           chklen adx   
39 [0x27]:           movnd adx   
40 [0x28]:           returnobj   
41 [0x29]:           ret   
42 [0x2a]:           nop   
43 [0x2b]:           iaddl 1, fp@3   
45 [0x2d]:           jmp @2   
46 [0x2e]: line: 136 movl 4   
47 [0x2f]:           del   
48 [0x30]: line: 137 movl 4   
49 [0x31]:           returnobj   
50 [0x32]:           ret   


function: std#list<common.network.core#request_data.request_item>.remove[3424] params(1) in file: lib\support\0.2.805/list.sharp:140:8: note:  
		    def remove(val: t) {
		       ^

0 [0x0]: line: 141 istorel 0, fp+2   
2 [0x2]:           ipushl #2   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 36   
14 [0xe]: line: 142 pushl 1   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+2   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           itest ebx   
26 [0x1a]:           movr cmt, ebx   
27 [0x1b]:           jne 32   
28 [0x1c]: line: 143 pushl 0   
29 [0x1d]:           ipushl #2   
30 [0x1e]:           call @3427 // <std#list<common.network.core#request_data.request_item>.remove_at>   
31 [0x1f]: line: 144 ret   
32 [0x20]:           nop   
33 [0x21]:           iaddl 1, fp@2   
35 [0x23]:           jmp @2   
36 [0x24]:           ret   


function: std#list<common.network.core#request_data.request_item>.remove[3425] params(2) in file: lib\support\0.2.805/list.sharp:149:8: note:  
		    def remove(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 150 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 39   
14 [0xe]: line: 151 ipushl #2   
15 [0xf]:           pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           movnd adx   
25 [0x19]:           pushobj   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 35   
31 [0x1f]: line: 152 pushl 0   
32 [0x20]:           ipushl #3   
33 [0x21]:           call @3427 // <std#list<common.network.core#request_data.request_item>.remove_at>   
34 [0x22]: line: 153 ret   
35 [0x23]:           nop   
36 [0x24]:           iaddl 1, fp@3   
38 [0x26]:           jmp @2   
39 [0x27]:           ret   


function: std#list<common.network.core#request_data.request_item>.replace[3426] params(2) in file: lib\support\0.2.805/list.sharp:158:8: note:  
		    def replace(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 159 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 47   
14 [0xe]: line: 160 ipushl #2   
15 [0xf]:           pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           movnd adx   
25 [0x19]:           pushobj   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 43   
31 [0x1f]: line: 161 pushl 1   
32 [0x20]:           movl 0   
33 [0x21]:           movn #1   
35 [0x23]:           pushobj   
36 [0x24]:           loadl ebx, fp+3   
37 [0x25]:           popobj2    
38 [0x26]:           movr adx, ebx   
39 [0x27]:           chklen adx   
40 [0x28]:           movnd adx   
41 [0x29]:           popobj   
42 [0x2a]: line: 162 ret   
43 [0x2b]:           nop   
44 [0x2c]:           iaddl 1, fp@3   
46 [0x2e]:           jmp @2   
47 [0x2f]:           ret   


function: std#list<common.network.core#request_data.request_item>.remove_at[3427] params(1) in file: lib\support\0.2.805/list.sharp:167:8: note:  
		    def remove_at(index: var) {
		       ^

0 [0x0]: line: 168 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gte ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 25   
18 [0x12]: line: 169 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:           dup    
20 [0x14]:           pushl 0   
21 [0x15]:           ipushl #1   
22 [0x16]:           call @3430 // <std#list<common.network.core#request_data.request_item>.out_of_bounds_msg>   
23 [0x17]:           call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:           throw    
25 [0x19]:           nop   
26 [0x1a]: line: 171 movl 0   
27 [0x1b]:           movn #0   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           iaload ebx, adx   
32 [0x20]:           rstore ebx   
33 [0x21]:           loadl ebx, fp+1   
34 [0x22]:           loadval ecx   
35 [0x23]:           sub ecx, ebx -> ebx   
36 [0x24]:           rstore ebx   
37 [0x25]:           movi #1, ebx   
39 [0x27]:           loadval ecx   
40 [0x28]:           sub ecx, ebx -> ebx   
41 [0x29]:           smovr_2 ebx, fp+2   
42 [0x2a]: line: 172 ipushl #2   
43 [0x2b]:           movi #0, ebx   
45 [0x2d]:           loadval ecx   
46 [0x2e]:           gt ecx, ebx   
47 [0x2f]:           movr ebx, cmt   
48 [0x30]:           movr cmt, ebx   
49 [0x31]:           jne 73   
50 [0x32]: line: 173 movl 0   
51 [0x33]:           movn #1   
53 [0x35]:           pushobj   
54 [0x36]:           movl 0   
55 [0x37]:           movn #1   
57 [0x39]:           pushobj   
58 [0x3a]:           ipushl #1   
59 [0x3b]:           ipushl #1   
60 [0x3c]:           movi #1, ebx   
62 [0x3e]:           loadval ecx   
63 [0x3f]:           add ecx, ebx -> ebx   
64 [0x40]:           rstore ebx   
65 [0x41]:           movl 0   
66 [0x42]:           movn #0   
68 [0x44]:           movi #0, adx   
70 [0x46]:           iaload ebx, adx   
71 [0x47]:           rstore ebx   
72 [0x48]:           call @1745 // <std.io#__srt_global.memcopy>   
73 [0x49]:           nop   
74 [0x4a]: line: 175 pushl 0   
75 [0x4b]:           call @3420 // <std#list<common.network.core#request_data.request_item>.pop_back>   
76 [0x4c]:           ret   


function: std#list<common.network.core#request_data.request_item>.indexof[3428] params(2) in file: lib\support\0.2.805/list.sharp:178:8: note:  
		    def indexof(comparer: t, find_func: (t, t)(var)) : var {
		       ^

0 [0x0]: line: 179 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 38   
14 [0xe]: line: 180 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 34   
31 [0x1f]: line: 181 loadl ebx, fp+3   
32 [0x20]:           return_val ebx   
33 [0x21]:           ret   
34 [0x22]:           nop   
35 [0x23]:           iaddl 1, fp@3   
37 [0x25]:           jmp @2   
38 [0x26]: line: 185 istorel -1, fp+0   
40 [0x28]:           ret   


function: std#list<common.network.core#request_data.request_item>.to_string[3429] params(0) in file: lib\support\0.2.805/list.sharp:188:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 189 new_class @65 // std#string_builder   
1 [0x1]:           dup    
2 [0x2]:           call @3038 // <std#string_builder.string_builder>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+1   
5 [0x5]: line: 191 pushl 1   
6 [0x6]:           newstr @138 // [    
7 [0x7]:           call @3034 // <std#string_builder.operator+=>   
8 [0x8]:           pop   
9 [0x9]: line: 192 istorel 0, fp+2   
11 [0xb]:           ipushl #2   
12 [0xc]:           movl 0   
13 [0xd]:           movn #0   
15 [0xf]:           movi #0, adx   
17 [0x11]:           iaload ebx, adx   
18 [0x12]:           loadval ecx   
19 [0x13]:           lt ecx, ebx   
20 [0x14]:           movr ebx, cmt   
21 [0x15]:           movr cmt, ebx   
22 [0x16]:           jne 61   
23 [0x17]: line: 193 pushl 1   
24 [0x18]:           movl 0   
25 [0x19]:           movn #1   
27 [0x1b]:           pushobj   
28 [0x1c]:           loadl ebx, fp+2   
29 [0x1d]:           popobj2    
30 [0x1e]:           movr adx, ebx   
31 [0x1f]:           chklen adx   
32 [0x20]:           movnd adx   
33 [0x21]:           pushobj   
34 [0x22]:           call @3030 // <std#string_builder.operator+=>   
35 [0x23]:           pop   
36 [0x24]: line: 195 ipushl #2   
37 [0x25]:           movi #1, ebx   
39 [0x27]:           loadval ecx   
40 [0x28]:           add ecx, ebx -> ebx   
41 [0x29]:           rstore ebx   
42 [0x2a]:           movl 0   
43 [0x2b]:           movn #0   
45 [0x2d]:           movi #0, adx   
47 [0x2f]:           iaload ebx, adx   
48 [0x30]:           loadval ecx   
49 [0x31]:           lt ecx, ebx   
50 [0x32]:           movr ebx, cmt   
51 [0x33]:           movr cmt, ebx   
52 [0x34]:           jne 57   
53 [0x35]: line: 196 pushl 1   
54 [0x36]:           newstr @139 // ,    
55 [0x37]:           call @3034 // <std#string_builder.operator+=>   
56 [0x38]:           pop   
57 [0x39]:           nop   
58 [0x3a]:           iaddl 1, fp@2   
60 [0x3c]:           jmp @11   
61 [0x3d]: line: 200 pushl 1   
62 [0x3e]:           newstr @140 //  ]   
63 [0x3f]:           call @3034 // <std#string_builder.operator+=>   
64 [0x40]:           pop   
65 [0x41]: line: 201 pushl 1   
66 [0x42]:           call @3011 // <std#string_builder.to_string>   
67 [0x43]:           popobj2    
68 [0x44]:           returnobj   
69 [0x45]:           ret   


function: std#list<common.network.core#request_data.request_item>.out_of_bounds_msg[3430] params(1) in file: lib\support\0.2.805/list.sharp:204:16: note:  
		    private def out_of_bounds_msg(index: var) : string {
		               ^

0 [0x0]: line: 205 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           newstr @141 // Index:    
3 [0x3]:           call @2935 // <std#string.string>   
4 [0x4]:           ipushl #1   
5 [0x5]:           call @2967 // <std#string.operator+>   
6 [0x6]:           newstr @142 // , size:    
7 [0x7]:           call @2947 // <std#string.operator+>   
8 [0x8]:           movl 0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           iaload ebx, adx   
14 [0xe]:           rstore ebx   
15 [0xf]:           call @2967 // <std#string.operator+>   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: common.network.core#request_data.get_request_string[3431] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//core//request_data.sharp:9:28: note:  
		    request_string : string;
		                           ^

0 [0x0]: line: 11 movl 0   
1 [0x1]:          movn #2   
3 [0x3]:          pushobj   
4 [0x4]:          pushnull    
5 [0x5]:          itest ebx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 89   
8 [0x8]: line: 12 new_class @65 // std#string_builder   
9 [0x9]:          dup    
10 [0xa]:          call @3038 // <std#string_builder.string_builder>   
11 [0xb]:          popobj2    
12 [0xc]:          smovr_3 fp+1   
13 [0xd]: line: 13 istorel 0, fp+2   
15 [0xf]:          ipushl #2   
16 [0x10]:          movl 0   
17 [0x11]:          movn #0   
19 [0x13]:          pushobj   
20 [0x14]:          call @3421 // <std#list<common.network.core#request_data.request_item>.size>   
21 [0x15]:          loadval ebx   
22 [0x16]:          loadval ecx   
23 [0x17]:          lt ecx, ebx   
24 [0x18]:          movr ebx, cmt   
25 [0x19]:          movr cmt, ebx   
26 [0x1a]:          jne 83   
27 [0x1b]: line: 14 pushl 1   
28 [0x1c]:          movl 0   
29 [0x1d]:          movn #0   
31 [0x1f]:          pushobj   
32 [0x20]:          ipushl #2   
33 [0x21]:          call @3410 // <std#list<common.network.core#request_data.request_item>.operator[>   
34 [0x22]:          popobj2    
35 [0x23]:          movn #0   
37 [0x25]:          pushobj   
38 [0x26]:          call @3031 // <std#string_builder.operator+=>   
39 [0x27]:          pop   
40 [0x28]: line: 15 pushl 1   
41 [0x29]:          new_class @64 // std#string   
42 [0x2a]:          dup    
43 [0x2b]:          newstr @145 // =   
44 [0x2c]:          call @2935 // <std#string.string>   
45 [0x2d]:          movl 0   
46 [0x2e]:          movn #0   
48 [0x30]:          pushobj   
49 [0x31]:          ipushl #2   
50 [0x32]:          call @3410 // <std#list<common.network.core#request_data.request_item>.operator[>   
51 [0x33]:          popobj2    
52 [0x34]:          movn #1   
54 [0x36]:          pushobj   
55 [0x37]:          call @2950 // <std#string.operator+>   
56 [0x38]:          call @3031 // <std#string_builder.operator+=>   
57 [0x39]:          pop   
58 [0x3a]: line: 17 ipushl #2   
59 [0x3b]:          movi #1, ebx   
61 [0x3d]:          loadval ecx   
62 [0x3e]:          add ecx, ebx -> ebx   
63 [0x3f]:          rstore ebx   
64 [0x40]:          movl 0   
65 [0x41]:          movn #0   
67 [0x43]:          pushobj   
68 [0x44]:          call @3421 // <std#list<common.network.core#request_data.request_item>.size>   
69 [0x45]:          loadval ebx   
70 [0x46]:          loadval ecx   
71 [0x47]:          lt ecx, ebx   
72 [0x48]:          movr ebx, cmt   
73 [0x49]:          movr cmt, ebx   
74 [0x4a]:          jne 79   
75 [0x4b]: line: 18 pushl 1   
76 [0x4c]:          newstr @146 // ,   
77 [0x4d]:          call @3034 // <std#string_builder.operator+=>   
78 [0x4e]:          pop   
79 [0x4f]:          nop   
80 [0x50]:          iaddl 1, fp@2   
82 [0x52]:          jmp @15   
83 [0x53]: line: 22 pushl 1   
84 [0x54]:          call @3011 // <std#string_builder.to_string>   
85 [0x55]:          movl 0   
86 [0x56]:          movn #2   
88 [0x58]:          popobj   
89 [0x59]:          nop   
90 [0x5a]: line: 25 movl 0   
91 [0x5b]:          movn #2   
93 [0x5d]:          returnobj   
94 [0x5e]:          ret   


function: common.network#network.get_INSTANCE[3432] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//network.sharp:6:38: note:  
		    private static INSTANCE : network;
		                                     ^

0 [0x0]: line: 8 movg @92 // @common.network#network   
1 [0x1]:         movn #0   
3 [0x3]:         pushobj   
4 [0x4]:         pushnull    
5 [0x5]:         itest ebx   
6 [0x6]:         movr cmt, ebx   
7 [0x7]:         jne 20   
8 [0x8]: line: 9 new_class @92 // common.network#network   
9 [0x9]:         dup    
10 [0xa]:         call @3127 // <common.network#network.network>   
11 [0xb]:         movg @92 // @common.network#network   
12 [0xc]:         movn #0   
14 [0xe]:         popobj   
15 [0xf]: line: 10 movg @92 // @common.network#network   
16 [0x10]:          movn #0   
18 [0x12]:          pushobj   
19 [0x13]:          call @3142 // <common.network.remote#__srt_global.initialize>   
20 [0x14]:          nop   
21 [0x15]: line: 13 movg @92 // @common.network#network   
22 [0x16]:          movn #0   
24 [0x18]:          returnobj   
25 [0x19]:          ret   


function: ui.res#resources.get_res[3433] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//res//resource.sharp:7:27: note:  
		    static res : resources;
		                          ^

0 [0x0]: line: 9 movg @109 // @ui.res#resources   
1 [0x1]:         movn #0   
3 [0x3]:         pushobj   
4 [0x4]:         pushnull    
5 [0x5]:         itest ebx   
6 [0x6]:         movr cmt, ebx   
7 [0x7]:         jne 15   
8 [0x8]: line: 10 new_class @109 // ui.res#resources   
9 [0x9]:          dup    
10 [0xa]:          call @3170 // <ui.res#resources.resources>   
11 [0xb]:          movg @109 // @ui.res#resources   
12 [0xc]:          movn #0   
14 [0xe]:          popobj   
15 [0xf]:          nop   
16 [0x10]: line: 13 movg @109 // @ui.res#resources   
17 [0x11]:          movn #0   
19 [0x13]:          returnobj   
20 [0x14]:          ret   


constructor: std#hashmap<std#int,ui.support#drawable>.hashmap[3434] params(1) in file: lib\support\0.2.805/hashmap.sharp:10:19: note:  
		    public hashmap(initialCapacity: var) {
		                  ^

0 [0x0]:         ldc ebx // 0.75   
1 [0x1]:         movl 0   
2 [0x2]:         movn #1   
4 [0x4]:         movi #0, adx   
6 [0x6]:         rmov adx, ebx   
7 [0x7]:         pushl 0   
8 [0x8]: line: 11 loadl ebx, fp+1   
9 [0x9]:          new_classarray ebx  // ui.res#entry<std#int,ui.support#drawable>[]   
10 [0xa]:          movl 0   
11 [0xb]:          movn #0   
13 [0xd]:          popobj   
14 [0xe]: line: 12 movl 0   
15 [0xf]:          movn #0   
17 [0x11]:          sizeof ebx   
18 [0x12]:          rstore ebx   
19 [0x13]:          movl 0   
20 [0x14]:          movn #1   
22 [0x16]:          movi #0, adx   
24 [0x18]:          iaload ebx, adx   
25 [0x19]:          loadval ecx   
26 [0x1a]:          mul ecx, ebx -> ebx   
27 [0x1b]:          movl 0   
28 [0x1c]:          movn #2   
30 [0x1e]:          movi #0, adx   
32 [0x20]:          rmov adx, ebx   
33 [0x21]:          ret   


constructor: std#hashmap<std#int,ui.support#drawable>.hashmap[3435] params(0) in file: lib\support\0.2.805/hashmap.sharp:15:19: note:  
		    public hashmap() {
		                  ^

0 [0x0]:         ldc ebx // 0.75   
1 [0x1]:         movl 0   
2 [0x2]:         movn #1   
4 [0x4]:         movi #0, adx   
6 [0x6]:         rmov adx, ebx   
7 [0x7]:         pushl 0   
8 [0x8]: line: 16 movi #128, ebx   
10 [0xa]:          new_classarray ebx  // ui.res#entry<std#int,ui.support#drawable>[]   
11 [0xb]:          movl 0   
12 [0xc]:          movn #0   
14 [0xe]:          popobj   
15 [0xf]: line: 17 movi #96, ebx   
17 [0x11]:          movl 0   
18 [0x12]:          movn #2   
20 [0x14]:          movi #0, adx   
22 [0x16]:          rmov adx, ebx   
23 [0x17]:          ret   


function: std#hashmap<std#int,ui.support#drawable>.set_threshold[3436] params(1) in file: lib\support\0.2.805/hashmap.sharp:20:8: note:  
		    def set_threshold(threshold: var) {
		       ^

0 [0x0]: line: 21 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #1   
4 [0x4]:          loadval ebx   
5 [0x5]:          movi #0, adx   
7 [0x7]:          rmov adx, ebx   
8 [0x8]: line: 22 movl 0   
9 [0x9]:          movn #0   
11 [0xb]:          sizeof ebx   
12 [0xc]:          rstore ebx   
13 [0xd]:          loadl ebx, fp+1   
14 [0xe]:          loadval ecx   
15 [0xf]:          mul ecx, ebx -> ebx   
16 [0x10]:          movl 0   
17 [0x11]:          movn #2   
19 [0x13]:          movi #0, adx   
21 [0x15]:          rmov adx, ebx   
22 [0x16]:          ret   


function: std#hashmap<std#int,ui.support#drawable>.hash[3437] params(1) in file: lib\support\0.2.805/hashmap.sharp:25:8: note:  
		    def hash(key: k) : var {
		       ^

0 [0x0]: line: 26 pushl 1   
1 [0x1]:          call @604 // <std#integer<_int32>.hash>   
2 [0x2]:          movl 0   
3 [0x3]:          movn #0   
5 [0x5]:          sizeof ebx   
6 [0x6]:          rstore ebx   
7 [0x7]:          call @293 // <std#integer<_int64>.operator%>   
8 [0x8]:          loadval ebx   
9 [0x9]:          return_val ebx   
10 [0xa]:          ret   


function: std#hashmap<std#int,ui.support#drawable>.resize[3438] params(0) in file: lib\support\0.2.805/hashmap.sharp:29:8: note:  
		    def resize() {
		       ^

0 [0x0]: line: 30 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          smovr_3 fp+1   
4 [0x4]: line: 31 movl 1   
5 [0x5]:          sizeof ebx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          sizeof ebx   
9 [0x9]:          rstore ebx   
10 [0xa]:          movi #1, ebx   
12 [0xc]:          loadval ecx   
13 [0xd]:          shr ecx, ebx -> ebx   
14 [0xe]:          loadval ecx   
15 [0xf]:          add ecx, ebx -> ebx   
16 [0x10]:          new_classarray ebx  // ui.res#entry<std#int,ui.support#drawable>[]   
17 [0x11]:          movl 0   
18 [0x12]:          movn #0   
20 [0x14]:          popobj   
21 [0x15]: line: 32 movl 0   
22 [0x16]:          movn #0   
24 [0x18]:          sizeof ebx   
25 [0x19]:          rstore ebx   
26 [0x1a]:          movl 0   
27 [0x1b]:          movn #1   
29 [0x1d]:          movi #0, adx   
31 [0x1f]:          iaload ebx, adx   
32 [0x20]:          loadval ecx   
33 [0x21]:          mul ecx, ebx -> ebx   
34 [0x22]:          movl 0   
35 [0x23]:          movn #2   
37 [0x25]:          movi #0, adx   
39 [0x27]:          rmov adx, ebx   
40 [0x28]: line: 33 istorel -1, fp+3   
42 [0x2a]:          pushl 1   
43 [0x2b]:          popl 4   
44 [0x2c]:          iaddl 1, fp@3   
46 [0x2e]:          movl 4   
47 [0x2f]:          sizeof ecx   
48 [0x30]:          loadl ebx, fp+3   
49 [0x31]:          lt ebx, ecx   
50 [0x32]:          jne 99   
51 [0x33]:          movnd ebx   
52 [0x34]:          pushobj   
53 [0x35]:          popl 2   
54 [0x36]: line: 35 movl 2   
55 [0x37]:          checknull   
56 [0x38]:          not ebx, ebx   
57 [0x39]:          movr cmt, ebx   
58 [0x3a]:          jne 98   
59 [0x3b]: line: 37 movl 2   
60 [0x3c]:          movn #2   
62 [0x3e]:          smovr_3 fp+5   
63 [0x3f]: line: 38 pushl 0   
64 [0x40]:          movl 2   
65 [0x41]:          movn #0   
67 [0x43]:          pushobj   
68 [0x44]:          call @3437 // <std#hashmap<std#int,ui.support#drawable>.hash>   
69 [0x45]:          ipopl 6   
70 [0x46]: line: 39 movl 0   
71 [0x47]:          movn #0   
73 [0x49]:          pushobj   
74 [0x4a]:          loadl ebx, fp+6   
75 [0x4b]:          popobj2    
76 [0x4c]:          movr adx, ebx   
77 [0x4d]:          chklen adx   
78 [0x4e]:          movnd adx   
79 [0x4f]:          pushobj   
80 [0x50]:          movl 2   
81 [0x51]:          movn #2   
83 [0x53]:          popobj   
84 [0x54]: line: 40 pushl 2   
85 [0x55]:          movl 0   
86 [0x56]:          movn #0   
88 [0x58]:          pushobj   
89 [0x59]:          loadl ebx, fp+6   
90 [0x5a]:          popobj2    
91 [0x5b]:          movr adx, ebx   
92 [0x5c]:          chklen adx   
93 [0x5d]:          movnd adx   
94 [0x5e]:          popobj   
95 [0x5f]: line: 41 movl 5   
96 [0x60]:          smovr_3 fp+2   
97 [0x61]:          jmp @54   
98 [0x62]:          jmp @44   
99 [0x63]: line: 45 pushnull    
100 [0x64]:          popobj2    
101 [0x65]:          smovr_3 fp+1   
102 [0x66]:          ret   


function: std#hashmap<std#int,ui.support#drawable>.at[3439] params(1) in file: lib\support\0.2.805/hashmap.sharp:48:15: note:  
		    public def at(key: k) : v {
		              ^

0 [0x0]: line: 49 pushl 0   
1 [0x1]:          pushl 1   
2 [0x2]:          call @3437 // <std#hashmap<std#int,ui.support#drawable>.hash>   
3 [0x3]:          ipopl 2   
4 [0x4]: line: 50 istorel -1, fp+3   
6 [0x6]: line: 51 movl 4   
7 [0x7]:          del   
8 [0x8]: line: 53 movl 0   
9 [0x9]:          movn #0   
11 [0xb]:          pushobj   
12 [0xc]:          loadl ebx, fp+2   
13 [0xd]:          popobj2    
14 [0xe]:          movr adx, ebx   
15 [0xf]:          chklen adx   
16 [0x10]:          movnd adx   
17 [0x11]:          pushobj   
18 [0x12]:          pushnull    
19 [0x13]:          itest ebx   
20 [0x14]:          movr cmt, ebx   
21 [0x15]:          jne 26   
22 [0x16]: line: 54 movl 4   
23 [0x17]:          returnobj   
24 [0x18]:          ret   
25 [0x19]:          jmp @64   
26 [0x1a]: line: 56 movl 0   
27 [0x1b]:          movn #0   
29 [0x1d]:          pushobj   
30 [0x1e]:          loadl ebx, fp+2   
31 [0x1f]:          popobj2    
32 [0x20]:          movr adx, ebx   
33 [0x21]:          chklen adx   
34 [0x22]:          movnd adx   
35 [0x23]:          smovr_3 fp+5   
36 [0x24]: line: 57 movl 5   
37 [0x25]:          checknull   
38 [0x26]:          not ebx, ebx   
39 [0x27]:          movr cmt, ebx   
40 [0x28]:          jne 61   
41 [0x29]: line: 58 movl 5   
42 [0x2a]:          movn #0   
44 [0x2c]:          pushobj   
45 [0x2d]:          pushl 1   
46 [0x2e]:          call @612 // <std#integer<_int32>.operator==>   
47 [0x2f]:          loadval ebx   
48 [0x30]:          movr cmt, ebx   
49 [0x31]:          jne 55   
50 [0x32]: line: 59 movl 5   
51 [0x33]:          movn #1   
53 [0x35]:          returnobj   
54 [0x36]:          ret   
55 [0x37]:          nop   
56 [0x38]: line: 61 movl 5   
57 [0x39]:          movn #2   
59 [0x3b]:          smovr_3 fp+5   
60 [0x3c]:          jmp @36   
61 [0x3d]: line: 64 movl 4   
62 [0x3e]:          returnobj   
63 [0x3f]:          ret   
64 [0x40]:          nop   


function: std#hashmap<std#int,ui.support#drawable>.put[3440] params(2) in file: lib\support\0.2.805/hashmap.sharp:68:15: note:  
		    public def put(key: k, value: v) : var {
		              ^

0 [0x0]: line: 69 pushl 0   
1 [0x1]:          pushl 1   
2 [0x2]:          call @3437 // <std#hashmap<std#int,ui.support#drawable>.hash>   
3 [0x3]:          ipopl 3   
4 [0x4]: line: 70 movl 4   
5 [0x5]:          del   
6 [0x6]: line: 71 movl 0   
7 [0x7]:          movn #0   
9 [0x9]:          pushobj   
10 [0xa]:          loadl ebx, fp+3   
11 [0xb]:          popobj2    
12 [0xc]:          movr adx, ebx   
13 [0xd]:          chklen adx   
14 [0xe]:          movnd adx   
15 [0xf]:          smovr_3 fp+5   
16 [0x10]: line: 73 movl 5   
17 [0x11]:          checknull   
18 [0x12]:          not ebx, ebx   
19 [0x13]:          skne ebx // pc = 27   
20 [0x14]:          movl 5   
21 [0x15]:          movn #0   
23 [0x17]:          pushobj   
24 [0x18]:          pushl 1   
25 [0x19]:          call @611 // <std#integer<_int32>.operator!=>   
26 [0x1a]:          loadval ebx   
27 [0x1b]:          movr cmt, ebx   
28 [0x1c]:          jne 36   
29 [0x1d]: line: 74 movl 5   
30 [0x1e]:          smovr_3 fp+4   
31 [0x1f]: line: 75 movl 5   
32 [0x20]:          movn #2   
34 [0x22]:          smovr_3 fp+5   
35 [0x23]:          jmp @16   
36 [0x24]: line: 78 movl 5   
37 [0x25]:          checknull   
38 [0x26]:          movr cmt, ebx   
39 [0x27]:          jne 84   
40 [0x28]: line: 79 movl 0   
41 [0x29]:          movn #3   
43 [0x2b]:          movi #0, adx   
45 [0x2d]:          iaload ebx, adx   
46 [0x2e]:          movr egx, ebx   
47 [0x2f]:          inc ebx   
48 [0x30]:          movi #0, adx   
50 [0x32]:          rmov adx, ebx   
51 [0x33]: line: 80 new_class @158 // ui.res#entry<std#int,ui.support#drawable>   
52 [0x34]:          dup    
53 [0x35]:          pushl 1   
54 [0x36]:          pushl 2   
55 [0x37]:          call @3508 // <ui.res#entry<std#int,ui.support#drawable>.entry>   
56 [0x38]:          popobj2    
57 [0x39]:          smovr_3 fp+5   
58 [0x3a]: line: 81 movl 4   
59 [0x3b]:          checknull   
60 [0x3c]:          movr cmt, ebx   
61 [0x3d]:          jne 74   
62 [0x3e]: line: 82 pushl 5   
63 [0x3f]:          movl 0   
64 [0x40]:          movn #0   
66 [0x42]:          pushobj   
67 [0x43]:          loadl ebx, fp+3   
68 [0x44]:          popobj2    
69 [0x45]:          movr adx, ebx   
70 [0x46]:          chklen adx   
71 [0x47]:          movnd adx   
72 [0x48]:          popobj   
73 [0x49]:          jmp @79   
74 [0x4a]: line: 84 pushl 5   
75 [0x4b]:          movl 4   
76 [0x4c]:          movn #2   
78 [0x4e]:          popobj   
79 [0x4f]:          nop   
80 [0x50]: line: 87 istorel 1, fp+0   
82 [0x52]:          ret   
83 [0x53]:          jmp @92   
84 [0x54]: line: 89 pushl 2   
85 [0x55]:          movl 5   
86 [0x56]:          movn #1   
88 [0x58]:          popobj   
89 [0x59]: line: 90 istorel 0, fp+0   
91 [0x5b]:          ret   
92 [0x5c]:          nop   


function: std#hashmap<std#int,ui.support#drawable>.remove[3441] params(1) in file: lib\support\0.2.805/hashmap.sharp:94:15: note:  
		    public def remove(key: k) : var {
		              ^

0 [0x0]: line: 95 pushl 0   
1 [0x1]:          pushl 1   
2 [0x2]:          call @3437 // <std#hashmap<std#int,ui.support#drawable>.hash>   
3 [0x3]:          ipopl 2   
4 [0x4]: line: 96 movl 0   
5 [0x5]:          movn #0   
7 [0x7]:          pushobj   
8 [0x8]:          loadl ebx, fp+2   
9 [0x9]:          popobj2    
10 [0xa]:          movr adx, ebx   
11 [0xb]:          chklen adx   
12 [0xc]:          movnd adx   
13 [0xd]:          pushobj   
14 [0xe]:          pushnull    
15 [0xf]:          itest ebx   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 96   
18 [0x12]: line: 97 movl 3   
19 [0x13]:          del   
20 [0x14]: line: 98 movl 0   
21 [0x15]:          movn #0   
23 [0x17]:          pushobj   
24 [0x18]:          loadl ebx, fp+2   
25 [0x19]:          popobj2    
26 [0x1a]:          movr adx, ebx   
27 [0x1b]:          chklen adx   
28 [0x1c]:          movnd adx   
29 [0x1d]:          smovr_3 fp+4   
30 [0x1e]: line: 99 movl 4   
31 [0x1f]:          checknull   
32 [0x20]:          not ebx, ebx   
33 [0x21]:          skne ebx // pc = 41   
34 [0x22]:          movl 4   
35 [0x23]:          movn #0   
37 [0x25]:          pushobj   
38 [0x26]:          pushl 1   
39 [0x27]:          call @611 // <std#integer<_int32>.operator!=>   
40 [0x28]:          loadval ebx   
41 [0x29]:          movr cmt, ebx   
42 [0x2a]:          jne 50   
43 [0x2b]: line: 100 movl 4   
44 [0x2c]:           smovr_3 fp+3   
45 [0x2d]: line: 101 movl 4   
46 [0x2e]:           movn #2   
48 [0x30]:           smovr_3 fp+4   
49 [0x31]:           jmp @30   
50 [0x32]: line: 104 movl 4   
51 [0x33]:           movn #0   
53 [0x35]:           pushobj   
54 [0x36]:           pushl 1   
55 [0x37]:           call @612 // <std#integer<_int32>.operator==>   
56 [0x38]:           loadval ebx   
57 [0x39]:           movr cmt, ebx   
58 [0x3a]:           jne 95   
59 [0x3b]: line: 105 movl 3   
60 [0x3c]:           checknull   
61 [0x3d]:           movr cmt, ebx   
62 [0x3e]:           jne 79   
63 [0x3f]: line: 106 movl 4   
64 [0x40]:           movn #2   
66 [0x42]:           smovr_3 fp+5   
67 [0x43]: line: 107 pushl 5   
68 [0x44]:           movl 0   
69 [0x45]:           movn #0   
71 [0x47]:           pushobj   
72 [0x48]:           loadl ebx, fp+2   
73 [0x49]:           popobj2    
74 [0x4a]:           movr adx, ebx   
75 [0x4b]:           chklen adx   
76 [0x4c]:           movnd adx   
77 [0x4d]:           popobj   
78 [0x4e]:           jmp @91   
79 [0x4f]: line: 109 movl 4   
80 [0x50]:           movn #2   
82 [0x52]:           smovr_3 fp+6   
83 [0x53]: line: 110 pushl 6   
84 [0x54]:           movl 3   
85 [0x55]:           movn #2   
87 [0x57]:           popobj   
88 [0x58]: line: 111 pushnull    
89 [0x59]:           popobj2    
90 [0x5a]:           smovr_3 fp+4   
91 [0x5b]:           nop   
92 [0x5c]: line: 114 istorel 1, fp+0   
94 [0x5e]:           ret   
95 [0x5f]:           nop   
96 [0x60]:           nop   
97 [0x61]: line: 118 istorel 0, fp+0   
99 [0x63]:           ret   


std#loopable<ui.support#view>.get_elements[3442] params(0) in file: lib\support\0.2.805/loopable.sharp:4:8: note:  
		    def get_elements() : t[];
		       ^



constructor: std#loopable<ui.support#view>.loopable[3443] params(0) in file: lib\support\0.2.805/loopable.sharp:3:10: note:  
		interface loopable<t> {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#list<ui.support#view>.list[3444] params(0) in file: lib\support\0.2.805/list.sharp:13:9: note:  
		    list() {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 14 movi #10, ebx   
3 [0x3]:          new_classarray ebx  // ui.support#view[]   
4 [0x4]:          movl 0   
5 [0x5]:          movn #1   
7 [0x7]:          popobj   
8 [0x8]:          ret   


constructor: std#list<ui.support#view>.list[3445] params(1) in file: lib\support\0.2.805/list.sharp:17:9: note:  
		    list(starting_capacity: var) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 18 loadl ebx, fp+1   
2 [0x2]:          new_classarray ebx  // ui.support#view[]   
3 [0x3]:          movl 0   
4 [0x4]:          movn #1   
6 [0x6]:          popobj   
7 [0x7]:          ret   


constructor: std#list<ui.support#view>.list[3446] params(1) in file: lib\support\0.2.805/list.sharp:21:9: note:  
		    list(initial_data: t[]) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 22 pushl 0   
2 [0x2]:          pushl 1   
3 [0x3]:          call @3457 // <std#list<ui.support#view>.add_all>   
4 [0x4]:          ret   


function: std#list<ui.support#view>.empty[3447] params(0) in file: lib\support\0.2.805/list.sharp:25:8: note:  
		    def empty() := n_elements == 0;
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          return_val cmt   
12 [0xc]:          ret   


function: std#list<ui.support#view>.set_compact[3448] params(1) in file: lib\support\0.2.805/list.sharp:27:8: note:  
		    def set_compact(compact_array: var) {
		       ^

0 [0x0]: line: 28 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #2   
4 [0x4]:          loadval ebx   
5 [0x5]:          movi #0, adx   
7 [0x7]:          rmov adx, ebx   
8 [0x8]:          ret   


function: std#list<ui.support#view>.get_elements[3449] params(0) in file: lib\support\0.2.805/list.sharp:31:8: note:  
		    def get_elements() : t[] {
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          jne 17   
12 [0xc]:          pushnull    
13 [0xd]:          popobj2    
14 [0xe]:          returnobj   
15 [0xf]:          ret   
16 [0x10]:          jmp @34   
17 [0x11]: line: 33 movl 0   
18 [0x12]:          movn #1   
20 [0x14]:          pushobj   
21 [0x15]:          istore 0   
23 [0x17]:          movl 0   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          iaload ebx, adx   
29 [0x1d]:          rstore ebx   
30 [0x1e]:          call @1755 // <std.io#__srt_global.copy>   
31 [0x1f]:          popobj2    
32 [0x20]:          returnobj   
33 [0x21]:          ret   
34 [0x22]:          nop   


overload function: std#list<ui.support#view>.operator[[3450] params(1) in file: lib\support\0.2.805/list.sharp:36:8: note:  
		    def operator[](index: var): t {
		       ^

0 [0x0]: line: 37 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 25   
18 [0x12]: line: 38 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:          dup    
20 [0x14]:          pushl 0   
21 [0x15]:          ipushl #1   
22 [0x16]:          call @3470 // <std#list<ui.support#view>.out_of_bounds_msg>   
23 [0x17]:          call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:          throw    
25 [0x19]:          nop   
26 [0x1a]: line: 39 movl 0   
27 [0x1b]:          movn #1   
29 [0x1d]:          pushobj   
30 [0x1e]:          loadl ebx, fp+1   
31 [0x1f]:          popobj2    
32 [0x20]:          movr adx, ebx   
33 [0x21]:          chklen adx   
34 [0x22]:          movnd adx   
35 [0x23]:          returnobj   
36 [0x24]:          ret   


function: std#list<ui.support#view>.at[3451] params(1) in file: lib\support\0.2.805/list.sharp:42:8: note:  
		    def at(index: var): t {
		       ^

0 [0x0]: line: 43 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 25   
18 [0x12]: line: 44 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:          dup    
20 [0x14]:          pushl 0   
21 [0x15]:          ipushl #1   
22 [0x16]:          call @3470 // <std#list<ui.support#view>.out_of_bounds_msg>   
23 [0x17]:          call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:          throw    
25 [0x19]:          nop   
26 [0x1a]: line: 45 movl 0   
27 [0x1b]:          movn #1   
29 [0x1d]:          pushobj   
30 [0x1e]:          loadl ebx, fp+1   
31 [0x1f]:          popobj2    
32 [0x20]:          movr adx, ebx   
33 [0x21]:          chklen adx   
34 [0x22]:          movnd adx   
35 [0x23]:          returnobj   
36 [0x24]:          ret   


function: std#list<ui.support#view>.last[3452] params(0) in file: lib\support\0.2.805/list.sharp:48:8: note:  
		    def last(): t {
		       ^

0 [0x0]: line: 49 pushl 0   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          rstore ebx   
8 [0x8]:          movi #1, ebx   
10 [0xa]:          loadval ecx   
11 [0xb]:          sub ecx, ebx -> ebx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @3451 // <std#list<ui.support#view>.at>   
14 [0xe]:          popobj2    
15 [0xf]:          returnobj   
16 [0x10]:          ret   


function: std#list<ui.support#view>.put[3453] params(2) in file: lib\support\0.2.805/list.sharp:52:8: note:  
		    def put(index: var, element: t) : t {
		       ^

0 [0x0]: line: 53 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 25   
18 [0x12]: line: 54 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:          dup    
20 [0x14]:          pushl 0   
21 [0x15]:          ipushl #1   
22 [0x16]:          call @3470 // <std#list<ui.support#view>.out_of_bounds_msg>   
23 [0x17]:          call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:          throw    
25 [0x19]:          nop   
26 [0x1a]: line: 56 movl 0   
27 [0x1b]:          movn #1   
29 [0x1d]:          pushobj   
30 [0x1e]:          loadl ebx, fp+1   
31 [0x1f]:          popobj2    
32 [0x20]:          movr adx, ebx   
33 [0x21]:          chklen adx   
34 [0x22]:          movnd adx   
35 [0x23]:          smovr_3 fp+3   
36 [0x24]: line: 57 pushl 2   
37 [0x25]:          movl 0   
38 [0x26]:          movn #1   
40 [0x28]:          pushobj   
41 [0x29]:          loadl ebx, fp+1   
42 [0x2a]:          popobj2    
43 [0x2b]:          movr adx, ebx   
44 [0x2c]:          chklen adx   
45 [0x2d]:          movnd adx   
46 [0x2e]:          popobj   
47 [0x2f]: line: 58 movl 3   
48 [0x30]:          returnobj   
49 [0x31]:          ret   


function: std#list<ui.support#view>.expand[3454] params(0) in file: lib\support\0.2.805/list.sharp:61:16: note:  
		    private def expand() {
		               ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #2   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 24   
8 [0x8]: line: 63 movl 0   
9 [0x9]:          movn #1   
11 [0xb]:          pushobj   
12 [0xc]:          movl 0   
13 [0xd]:          movn #1   
15 [0xf]:          sizeof ebx   
16 [0x10]:          rstore ebx   
17 [0x11]:          movi #128, ebx   
19 [0x13]:          loadval ecx   
20 [0x14]:          add ecx, ebx -> ebx   
21 [0x15]:          rstore ebx   
22 [0x16]:          call @1735 // <std.io#__srt_global.realloc>   
23 [0x17]:          jmp @51   
24 [0x18]: line: 65 movl 0   
25 [0x19]:          movn #1   
27 [0x1b]:          pushobj   
28 [0x1c]:          movl 0   
29 [0x1d]:          movn #1   
31 [0x1f]:          sizeof ebx   
32 [0x20]:          rstore ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #1   
36 [0x24]:          sizeof ebx   
37 [0x25]:          rstore ebx   
38 [0x26]:          movi #4, ebx   
40 [0x28]:          loadval ecx   
41 [0x29]:          shr ecx, ebx -> ebx   
42 [0x2a]:          loadval ecx   
43 [0x2b]:          add ecx, ebx -> ebx   
44 [0x2c]:          rstore ebx   
45 [0x2d]:          movi #128, ebx   
47 [0x2f]:          loadval ecx   
48 [0x30]:          add ecx, ebx -> ebx   
49 [0x31]:          rstore ebx   
50 [0x32]:          call @1735 // <std.io#__srt_global.realloc>   
51 [0x33]:          nop   
52 [0x34]:          ret   


function: std#list<ui.support#view>.clear[3455] params(0) in file: lib\support\0.2.805/list.sharp:68:8: note:  
		    def clear() {
		       ^

0 [0x0]: line: 69 movi #10, ebx   
2 [0x2]:          new_classarray ebx  // ui.support#view[]   
3 [0x3]:          movl 0   
4 [0x4]:          movn #1   
6 [0x6]:          popobj   
7 [0x7]: line: 70 movi #0, ebx   
9 [0x9]:          movl 0   
10 [0xa]:          movn #0   
12 [0xc]:          movi #0, adx   
14 [0xe]:          rmov adx, ebx   
15 [0xf]:          ret   


function: std#list<ui.support#view>.add_all[3456] params(1) in file: lib\support\0.2.805/list.sharp:73:8: note:  
		    def add_all(lst: list<t>) {
		       ^

0 [0x0]: line: 74 movl 1   
1 [0x1]:          movn #1   
3 [0x3]:          pushobj   
4 [0x4]:          istore 0   
6 [0x6]:          movl 1   
7 [0x7]:          movn #0   
9 [0x9]:          movi #0, adx   
11 [0xb]:          iaload ebx, adx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @1755 // <std.io#__srt_global.copy>   
14 [0xe]:          popobj2    
15 [0xf]:          movi #127, cmt   
17 [0x11]:          cast cmt   
18 [0x12]:          pushobj   
19 [0x13]:          movl 0   
20 [0x14]:          movn #1   
22 [0x16]:          popobj   
23 [0x17]: line: 75 movl 1   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          iaload ebx, adx   
29 [0x1d]:          movl 0   
30 [0x1e]:          movn #0   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          ret   


function: std#list<ui.support#view>.add_all[3457] params(1) in file: lib\support\0.2.805/list.sharp:78:8: note:  
		    def add_all(lst: t[]) {
		       ^

0 [0x0]: line: 79 movl 1   
1 [0x1]:          checknull   
2 [0x2]:          not ebx, ebx   
3 [0x3]:          movr cmt, ebx   
4 [0x4]:          jne 30   
5 [0x5]: line: 80 pushl 1   
6 [0x6]:          istore 0   
8 [0x8]:          movl 1   
9 [0x9]:          sizeof ebx   
10 [0xa]:          rstore ebx   
11 [0xb]:          call @1755 // <std.io#__srt_global.copy>   
12 [0xc]:          popobj2    
13 [0xd]:          movi #127, cmt   
15 [0xf]:          cast cmt   
16 [0x10]:          pushobj   
17 [0x11]:          movl 0   
18 [0x12]:          movn #1   
20 [0x14]:          popobj   
21 [0x15]: line: 81 movl 1   
22 [0x16]:          sizeof ebx   
23 [0x17]:          movl 0   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          rmov adx, ebx   
29 [0x1d]:          jmp @45   
30 [0x1e]: line: 83 movi #0, ebx   
32 [0x20]:          movl 0   
33 [0x21]:          movn #0   
35 [0x23]:          movi #0, adx   
37 [0x25]:          rmov adx, ebx   
38 [0x26]: line: 84 movi #10, ebx   
40 [0x28]:          new_classarray ebx  // ui.support#view[]   
41 [0x29]:          movl 0   
42 [0x2a]:          movn #1   
44 [0x2c]:          popobj   
45 [0x2d]:          nop   
46 [0x2e]:          ret   


function: std#list<ui.support#view>.add[3458] params(1) in file: lib\support\0.2.805/list.sharp:88:8: note:  
		    def add(element: t) {
		       ^

0 [0x0]: line: 89 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 0   
8 [0x8]:          movn #1   
10 [0xa]:          sizeof ebx   
11 [0xb]:          loadval ecx   
12 [0xc]:          gte ecx, ebx   
13 [0xd]:          movr ebx, cmt   
14 [0xe]:          movr cmt, ebx   
15 [0xf]:          jne 18   
16 [0x10]: line: 90 pushl 0   
17 [0x11]:          call @3454 // <std#list<ui.support#view>.expand>   
18 [0x12]:          nop   
19 [0x13]: line: 91 pushl 1   
20 [0x14]:          movl 0   
21 [0x15]:          movn #1   
23 [0x17]:          pushobj   
24 [0x18]:          movl 0   
25 [0x19]:          movn #0   
27 [0x1b]:          movi #0, adx   
29 [0x1d]:          iaload ebx, adx   
30 [0x1e]:          movr egx, ebx   
31 [0x1f]:          inc ebx   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          movr ebx, egx   
36 [0x24]:          popobj2    
37 [0x25]:          movr adx, ebx   
38 [0x26]:          chklen adx   
39 [0x27]:          movnd adx   
40 [0x28]:          popobj   
41 [0x29]:          ret   


function: std#list<ui.support#view>.indexof[3459] params(1) in file: lib\support\0.2.805/list.sharp:94:8: note:  
		    def indexof(element: t) : var {
		       ^

0 [0x0]: line: 95 istorel 0, fp+2   
2 [0x2]:          ipushl #2   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          movi #0, adx   
8 [0x8]:          iaload ebx, adx   
9 [0x9]:          loadval ecx   
10 [0xa]:          lt ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 35   
14 [0xe]: line: 96 pushl 1   
15 [0xf]:          movl 0   
16 [0x10]:          movn #1   
18 [0x12]:          pushobj   
19 [0x13]:          loadl ebx, fp+2   
20 [0x14]:          popobj2    
21 [0x15]:          movr adx, ebx   
22 [0x16]:          chklen adx   
23 [0x17]:          movnd adx   
24 [0x18]:          pushobj   
25 [0x19]:          itest ebx   
26 [0x1a]:          movr cmt, ebx   
27 [0x1b]:          jne 31   
28 [0x1c]: line: 97 loadl ebx, fp+2   
29 [0x1d]:          return_val ebx   
30 [0x1e]:          ret   
31 [0x1f]:          nop   
32 [0x20]:          iaddl 1, fp@2   
34 [0x22]:          jmp @2   
35 [0x23]: line: 101 istorel -1, fp+0   
37 [0x25]:           ret   


function: std#list<ui.support#view>.pop_back[3460] params(0) in file: lib\support\0.2.805/list.sharp:104:8: note:  
		    def pop_back() {
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #0, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 38   
14 [0xe]: line: 106 movl 1   
15 [0xf]:           del   
16 [0x10]: line: 107 pushl 1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           movl 0   
22 [0x16]:           movn #0   
24 [0x18]:           movi #0, adx   
26 [0x1a]:           iaload ebx, adx   
27 [0x1b]:           movr egx, ebx   
28 [0x1c]:           dec ebx   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           rmov adx, ebx   
32 [0x20]:           movr ebx, egx   
33 [0x21]:           popobj2    
34 [0x22]:           movr adx, ebx   
35 [0x23]:           chklen adx   
36 [0x24]:           movnd adx   
37 [0x25]:           popobj   
38 [0x26]:           nop   
39 [0x27]:           ret   


function: std#list<ui.support#view>.size[3461] params(0) in file: lib\support\0.2.805/list.sharp:111:8: note:  
		    def size() := n_elements;
		       ^

0 [0x0]: line: 111 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std#list<ui.support#view>.insert[3462] params(2) in file: lib\support\0.2.805/list.sharp:113:8: note:  
		    def insert(index: var, element: t) {
		       ^

0 [0x0]: line: 114 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gt ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 25   
18 [0x12]: line: 115 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:           dup    
20 [0x14]:           pushl 0   
21 [0x15]:           ipushl #1   
22 [0x16]:           call @3470 // <std#list<ui.support#view>.out_of_bounds_msg>   
23 [0x17]:           call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:           throw    
25 [0x19]:           nop   
26 [0x1a]: line: 117 movl 0   
27 [0x1b]:           movn #0   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           iaload ebx, adx   
32 [0x20]:           rstore ebx   
33 [0x21]:           movi #0, ebx   
35 [0x23]:           loadval ecx   
36 [0x24]:           test ecx, ebx   
37 [0x25]:           jne 42   
38 [0x26]: line: 118 pushl 0   
39 [0x27]:           pushl 2   
40 [0x28]:           call @3458 // <std#list<ui.support#view>.add>   
41 [0x29]:           jmp @131   
42 [0x2a]: line: 120 movl 0   
43 [0x2b]:           movn #0   
45 [0x2d]:           movi #0, adx   
47 [0x2f]:           iaload ebx, adx   
48 [0x30]:           rstore ebx   
49 [0x31]:           movl 0   
50 [0x32]:           movn #1   
52 [0x34]:           sizeof ebx   
53 [0x35]:           loadval ecx   
54 [0x36]:           gte ecx, ebx   
55 [0x37]:           movr ebx, cmt   
56 [0x38]:           movr cmt, ebx   
57 [0x39]:           jne 60   
58 [0x3a]: line: 121 pushl 0   
59 [0x3b]:           call @3454 // <std#list<ui.support#view>.expand>   
60 [0x3c]:           nop   
61 [0x3d]: line: 122 movl 0   
62 [0x3e]:           movn #0   
64 [0x40]:           movi #0, adx   
66 [0x42]:           iaload ebx, adx   
67 [0x43]:           movr egx, ebx   
68 [0x44]:           inc ebx   
69 [0x45]:           movi #0, adx   
71 [0x47]:           rmov adx, ebx   
72 [0x48]: line: 123 movl 0   
73 [0x49]:           movn #0   
75 [0x4b]:           movi #0, adx   
77 [0x4d]:           iaload ebx, adx   
78 [0x4e]:           rstore ebx   
79 [0x4f]:           movi #1, ebx   
81 [0x51]:           loadval ecx   
82 [0x52]:           sub ecx, ebx -> ebx   
83 [0x53]:           smovr_2 ebx, fp+3   
84 [0x54]:           ipushl #3   
85 [0x55]:           loadl ebx, fp+1   
86 [0x56]:           loadval ecx   
87 [0x57]:           gt ecx, ebx   
88 [0x58]:           movr ebx, cmt   
89 [0x59]:           movr cmt, ebx   
90 [0x5a]:           jne 120   
91 [0x5b]: line: 124 movl 0   
92 [0x5c]:           movn #1   
94 [0x5e]:           pushobj   
95 [0x5f]:           ipushl #3   
96 [0x60]:           movi #1, ebx   
98 [0x62]:           loadval ecx   
99 [0x63]:           sub ecx, ebx -> ebx   
100 [0x64]:           popobj2    
101 [0x65]:           movr adx, ebx   
102 [0x66]:           chklen adx   
103 [0x67]:           movnd adx   
104 [0x68]:           pushobj   
105 [0x69]:           movl 0   
106 [0x6a]:           movn #1   
108 [0x6c]:           pushobj   
109 [0x6d]:           loadl ebx, fp+3   
110 [0x6e]:           popobj2    
111 [0x6f]:           movr adx, ebx   
112 [0x70]:           chklen adx   
113 [0x71]:           movnd adx   
114 [0x72]:           popobj   
115 [0x73]:           loadl ebx, fp+3   
116 [0x74]:           movr egx, ebx   
117 [0x75]:           dec ebx   
118 [0x76]:           smovr_2 ebx, fp+3   
119 [0x77]:           jmp @84   
120 [0x78]: line: 125 pushl 2   
121 [0x79]:           movl 0   
122 [0x7a]:           movn #1   
124 [0x7c]:           pushobj   
125 [0x7d]:           loadl ebx, fp+1   
126 [0x7e]:           popobj2    
127 [0x7f]:           movr adx, ebx   
128 [0x80]:           chklen adx   
129 [0x81]:           movnd adx   
130 [0x82]:           popobj   
131 [0x83]:           nop   
132 [0x84]:           ret   


function: std#list<ui.support#view>.find[3463] params(2) in file: lib\support\0.2.805/list.sharp:129:8: note:  
		    def find(comparer : t, find_func: (t, t)(var)) : t {
		       ^

0 [0x0]: line: 130 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 46   
14 [0xe]: line: 131 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 42   
31 [0x1f]: line: 132 movl 0   
32 [0x20]:           movn #1   
34 [0x22]:           pushobj   
35 [0x23]:           loadl ebx, fp+3   
36 [0x24]:           popobj2    
37 [0x25]:           movr adx, ebx   
38 [0x26]:           chklen adx   
39 [0x27]:           movnd adx   
40 [0x28]:           returnobj   
41 [0x29]:           ret   
42 [0x2a]:           nop   
43 [0x2b]:           iaddl 1, fp@3   
45 [0x2d]:           jmp @2   
46 [0x2e]: line: 136 movl 4   
47 [0x2f]:           del   
48 [0x30]: line: 137 movl 4   
49 [0x31]:           returnobj   
50 [0x32]:           ret   


function: std#list<ui.support#view>.remove[3464] params(1) in file: lib\support\0.2.805/list.sharp:140:8: note:  
		    def remove(val: t) {
		       ^

0 [0x0]: line: 141 istorel 0, fp+2   
2 [0x2]:           ipushl #2   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 36   
14 [0xe]: line: 142 pushl 1   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+2   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           itest ebx   
26 [0x1a]:           movr cmt, ebx   
27 [0x1b]:           jne 32   
28 [0x1c]: line: 143 pushl 0   
29 [0x1d]:           ipushl #2   
30 [0x1e]:           call @3467 // <std#list<ui.support#view>.remove_at>   
31 [0x1f]: line: 144 ret   
32 [0x20]:           nop   
33 [0x21]:           iaddl 1, fp@2   
35 [0x23]:           jmp @2   
36 [0x24]:           ret   


function: std#list<ui.support#view>.remove[3465] params(2) in file: lib\support\0.2.805/list.sharp:149:8: note:  
		    def remove(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 150 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 39   
14 [0xe]: line: 151 ipushl #2   
15 [0xf]:           pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           movnd adx   
25 [0x19]:           pushobj   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 35   
31 [0x1f]: line: 152 pushl 0   
32 [0x20]:           ipushl #3   
33 [0x21]:           call @3467 // <std#list<ui.support#view>.remove_at>   
34 [0x22]: line: 153 ret   
35 [0x23]:           nop   
36 [0x24]:           iaddl 1, fp@3   
38 [0x26]:           jmp @2   
39 [0x27]:           ret   


function: std#list<ui.support#view>.replace[3466] params(2) in file: lib\support\0.2.805/list.sharp:158:8: note:  
		    def replace(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 159 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 47   
14 [0xe]: line: 160 ipushl #2   
15 [0xf]:           pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           movnd adx   
25 [0x19]:           pushobj   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 43   
31 [0x1f]: line: 161 pushl 1   
32 [0x20]:           movl 0   
33 [0x21]:           movn #1   
35 [0x23]:           pushobj   
36 [0x24]:           loadl ebx, fp+3   
37 [0x25]:           popobj2    
38 [0x26]:           movr adx, ebx   
39 [0x27]:           chklen adx   
40 [0x28]:           movnd adx   
41 [0x29]:           popobj   
42 [0x2a]: line: 162 ret   
43 [0x2b]:           nop   
44 [0x2c]:           iaddl 1, fp@3   
46 [0x2e]:           jmp @2   
47 [0x2f]:           ret   


function: std#list<ui.support#view>.remove_at[3467] params(1) in file: lib\support\0.2.805/list.sharp:167:8: note:  
		    def remove_at(index: var) {
		       ^

0 [0x0]: line: 168 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gte ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 25   
18 [0x12]: line: 169 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:           dup    
20 [0x14]:           pushl 0   
21 [0x15]:           ipushl #1   
22 [0x16]:           call @3470 // <std#list<ui.support#view>.out_of_bounds_msg>   
23 [0x17]:           call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:           throw    
25 [0x19]:           nop   
26 [0x1a]: line: 171 movl 0   
27 [0x1b]:           movn #0   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           iaload ebx, adx   
32 [0x20]:           rstore ebx   
33 [0x21]:           loadl ebx, fp+1   
34 [0x22]:           loadval ecx   
35 [0x23]:           sub ecx, ebx -> ebx   
36 [0x24]:           rstore ebx   
37 [0x25]:           movi #1, ebx   
39 [0x27]:           loadval ecx   
40 [0x28]:           sub ecx, ebx -> ebx   
41 [0x29]:           smovr_2 ebx, fp+2   
42 [0x2a]: line: 172 ipushl #2   
43 [0x2b]:           movi #0, ebx   
45 [0x2d]:           loadval ecx   
46 [0x2e]:           gt ecx, ebx   
47 [0x2f]:           movr ebx, cmt   
48 [0x30]:           movr cmt, ebx   
49 [0x31]:           jne 73   
50 [0x32]: line: 173 movl 0   
51 [0x33]:           movn #1   
53 [0x35]:           pushobj   
54 [0x36]:           movl 0   
55 [0x37]:           movn #1   
57 [0x39]:           pushobj   
58 [0x3a]:           ipushl #1   
59 [0x3b]:           ipushl #1   
60 [0x3c]:           movi #1, ebx   
62 [0x3e]:           loadval ecx   
63 [0x3f]:           add ecx, ebx -> ebx   
64 [0x40]:           rstore ebx   
65 [0x41]:           movl 0   
66 [0x42]:           movn #0   
68 [0x44]:           movi #0, adx   
70 [0x46]:           iaload ebx, adx   
71 [0x47]:           rstore ebx   
72 [0x48]:           call @1745 // <std.io#__srt_global.memcopy>   
73 [0x49]:           nop   
74 [0x4a]: line: 175 pushl 0   
75 [0x4b]:           call @3460 // <std#list<ui.support#view>.pop_back>   
76 [0x4c]:           ret   


function: std#list<ui.support#view>.indexof[3468] params(2) in file: lib\support\0.2.805/list.sharp:178:8: note:  
		    def indexof(comparer: t, find_func: (t, t)(var)) : var {
		       ^

0 [0x0]: line: 179 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 38   
14 [0xe]: line: 180 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 34   
31 [0x1f]: line: 181 loadl ebx, fp+3   
32 [0x20]:           return_val ebx   
33 [0x21]:           ret   
34 [0x22]:           nop   
35 [0x23]:           iaddl 1, fp@3   
37 [0x25]:           jmp @2   
38 [0x26]: line: 185 istorel -1, fp+0   
40 [0x28]:           ret   


function: std#list<ui.support#view>.to_string[3469] params(0) in file: lib\support\0.2.805/list.sharp:188:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 189 new_class @65 // std#string_builder   
1 [0x1]:           dup    
2 [0x2]:           call @3038 // <std#string_builder.string_builder>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+1   
5 [0x5]: line: 191 pushl 1   
6 [0x6]:           newstr @138 // [    
7 [0x7]:           call @3034 // <std#string_builder.operator+=>   
8 [0x8]:           pop   
9 [0x9]: line: 192 istorel 0, fp+2   
11 [0xb]:           ipushl #2   
12 [0xc]:           movl 0   
13 [0xd]:           movn #0   
15 [0xf]:           movi #0, adx   
17 [0x11]:           iaload ebx, adx   
18 [0x12]:           loadval ecx   
19 [0x13]:           lt ecx, ebx   
20 [0x14]:           movr ebx, cmt   
21 [0x15]:           movr cmt, ebx   
22 [0x16]:           jne 61   
23 [0x17]: line: 193 pushl 1   
24 [0x18]:           movl 0   
25 [0x19]:           movn #1   
27 [0x1b]:           pushobj   
28 [0x1c]:           loadl ebx, fp+2   
29 [0x1d]:           popobj2    
30 [0x1e]:           movr adx, ebx   
31 [0x1f]:           chklen adx   
32 [0x20]:           movnd adx   
33 [0x21]:           pushobj   
34 [0x22]:           call @3030 // <std#string_builder.operator+=>   
35 [0x23]:           pop   
36 [0x24]: line: 195 ipushl #2   
37 [0x25]:           movi #1, ebx   
39 [0x27]:           loadval ecx   
40 [0x28]:           add ecx, ebx -> ebx   
41 [0x29]:           rstore ebx   
42 [0x2a]:           movl 0   
43 [0x2b]:           movn #0   
45 [0x2d]:           movi #0, adx   
47 [0x2f]:           iaload ebx, adx   
48 [0x30]:           loadval ecx   
49 [0x31]:           lt ecx, ebx   
50 [0x32]:           movr ebx, cmt   
51 [0x33]:           movr cmt, ebx   
52 [0x34]:           jne 57   
53 [0x35]: line: 196 pushl 1   
54 [0x36]:           newstr @139 // ,    
55 [0x37]:           call @3034 // <std#string_builder.operator+=>   
56 [0x38]:           pop   
57 [0x39]:           nop   
58 [0x3a]:           iaddl 1, fp@2   
60 [0x3c]:           jmp @11   
61 [0x3d]: line: 200 pushl 1   
62 [0x3e]:           newstr @140 //  ]   
63 [0x3f]:           call @3034 // <std#string_builder.operator+=>   
64 [0x40]:           pop   
65 [0x41]: line: 201 pushl 1   
66 [0x42]:           call @3011 // <std#string_builder.to_string>   
67 [0x43]:           popobj2    
68 [0x44]:           returnobj   
69 [0x45]:           ret   


function: std#list<ui.support#view>.out_of_bounds_msg[3470] params(1) in file: lib\support\0.2.805/list.sharp:204:16: note:  
		    private def out_of_bounds_msg(index: var) : string {
		               ^

0 [0x0]: line: 205 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           newstr @141 // Index:    
3 [0x3]:           call @2935 // <std#string.string>   
4 [0x4]:           ipushl #1   
5 [0x5]:           call @2967 // <std#string.operator+>   
6 [0x6]:           newstr @142 // , size:    
7 [0x7]:           call @2947 // <std#string.operator+>   
8 [0x8]:           movl 0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           iaload ebx, adx   
14 [0xe]:           rstore ebx   
15 [0xf]:           call @2967 // <std#string.operator+>   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: ui.support#text_view.set_text[3471] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//text_view.sharp:4:23: note:  
		    text : string = "";
		                      ^

0 [0x0]: line: 6 pushl 1   
1 [0x1]:         movl 0   
2 [0x2]:         movn #18   
4 [0x4]:         popobj   
5 [0x5]: line: 7 movi #0, ebx   
7 [0x7]:         movl 0   
8 [0x8]:         movn #15   
10 [0xa]:         movi #0, adx   
12 [0xc]:         rmov adx, ebx   
13 [0xd]:         ret   


function: ui.support#text_view.set_text_size[3472] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//support//text_view.sharp:10:24: note:  
		    text_size : var = 1;
		                       ^

0 [0x0]: line: 12 ipushl #1   
1 [0x1]:          movi #0, ebx   
3 [0x3]:          loadval ecx   
4 [0x4]:          gt ecx, ebx   
5 [0x5]:          movr ebx, cmt   
6 [0x6]:          skne ebx // pc = 9   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          skip @2 // pc = 10   
9 [0x9]:          movi #1, ebx   
11 [0xb]:          movl 0   
12 [0xc]:          movn #19   
14 [0xe]:          movi #0, adx   
16 [0x10]:          rmov adx, ebx   
17 [0x11]: line: 13 movi #0, ebx   
19 [0x13]:          movl 0   
20 [0x14]:          movn #15   
22 [0x16]:          movi #0, adx   
24 [0x18]:          rmov adx, ebx   
25 [0x19]: line: 15 movl 0   
26 [0x1a]:          movn #3   
28 [0x1c]:          movi #0, adx   
30 [0x1e]:          iaload ebx, adx   
31 [0x1f]:          rstore ebx   
32 [0x20]:          movi #0, ebx   
34 [0x22]:          loadval ecx   
35 [0x23]:          gte ecx, ebx   
36 [0x24]:          movr ebx, cmt   
37 [0x25]:          skne ebx // pc = 51   
38 [0x26]:          pushl 0   
39 [0x27]:          call @3205 // <ui.support#text_view.transform_height>   
40 [0x28]:          loadval ebx   
41 [0x29]:          rstore ebx   
42 [0x2a]:          movl 0   
43 [0x2b]:          movn #3   
45 [0x2d]:          movi #0, adx   
47 [0x2f]:          iaload ebx, adx   
48 [0x30]:          loadval ecx   
49 [0x31]:          gt ecx, ebx   
50 [0x32]:          movr ebx, cmt   
51 [0x33]:          movr cmt, ebx   
52 [0x34]:          jne 84   
53 [0x35]: line: 16 new_class @5 // std#illegal_state_exception   
54 [0x36]:          dup    
55 [0x37]:          new_class @64 // std#string   
56 [0x38]:          dup    
57 [0x39]:          newstr @147 // text size too large for view height:    
58 [0x3a]:          call @2935 // <std#string.string>   
59 [0x3b]:          movl 0   
60 [0x3c]:          movn #3   
62 [0x3e]:          movi #0, adx   
64 [0x40]:          iaload ebx, adx   
65 [0x41]:          rstore ebx   
66 [0x42]:          call @2967 // <std#string.operator+>   
67 [0x43]:          newstr @148 //  txt size:    
68 [0x44]:          call @2947 // <std#string.operator+>   
69 [0x45]:          movl 0   
70 [0x46]:          movn #19   
72 [0x48]:          movi #0, adx   
74 [0x4a]:          iaload ebx, adx   
75 [0x4b]:          rstore ebx   
76 [0x4c]:          call @2967 // <std#string.operator+>   
77 [0x4d]:          newstr @149 //  calc height:    
78 [0x4e]:          call @2947 // <std#string.operator+>   
79 [0x4f]:          pushl 0   
80 [0x50]:          call @3205 // <ui.support#text_view.transform_height>   
81 [0x51]:          call @2967 // <std#string.operator+>   
82 [0x52]:          call @1633 // <std#illegal_state_exception.illegal_state_exception>   
83 [0x53]:          throw    
84 [0x54]:          nop   
85 [0x55]:          ret   


std#loopable<ui.support#fragment>.get_elements[3473] params(0) in file: lib\support\0.2.805/loopable.sharp:4:8: note:  
		    def get_elements() : t[];
		       ^



constructor: std#loopable<ui.support#fragment>.loopable[3474] params(0) in file: lib\support\0.2.805/loopable.sharp:3:10: note:  
		interface loopable<t> {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#list<ui.support#fragment>.list[3475] params(0) in file: lib\support\0.2.805/list.sharp:13:9: note:  
		    list() {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 14 movi #10, ebx   
3 [0x3]:          new_classarray ebx  // ui.support#fragment[]   
4 [0x4]:          movl 0   
5 [0x5]:          movn #1   
7 [0x7]:          popobj   
8 [0x8]:          ret   


constructor: std#list<ui.support#fragment>.list[3476] params(1) in file: lib\support\0.2.805/list.sharp:17:9: note:  
		    list(starting_capacity: var) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 18 loadl ebx, fp+1   
2 [0x2]:          new_classarray ebx  // ui.support#fragment[]   
3 [0x3]:          movl 0   
4 [0x4]:          movn #1   
6 [0x6]:          popobj   
7 [0x7]:          ret   


constructor: std#list<ui.support#fragment>.list[3477] params(1) in file: lib\support\0.2.805/list.sharp:21:9: note:  
		    list(initial_data: t[]) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 22 pushl 0   
2 [0x2]:          pushl 1   
3 [0x3]:          call @3488 // <std#list<ui.support#fragment>.add_all>   
4 [0x4]:          ret   


function: std#list<ui.support#fragment>.empty[3478] params(0) in file: lib\support\0.2.805/list.sharp:25:8: note:  
		    def empty() := n_elements == 0;
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          return_val cmt   
12 [0xc]:          ret   


function: std#list<ui.support#fragment>.set_compact[3479] params(1) in file: lib\support\0.2.805/list.sharp:27:8: note:  
		    def set_compact(compact_array: var) {
		       ^

0 [0x0]: line: 28 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #2   
4 [0x4]:          loadval ebx   
5 [0x5]:          movi #0, adx   
7 [0x7]:          rmov adx, ebx   
8 [0x8]:          ret   


function: std#list<ui.support#fragment>.get_elements[3480] params(0) in file: lib\support\0.2.805/list.sharp:31:8: note:  
		    def get_elements() : t[] {
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          jne 17   
12 [0xc]:          pushnull    
13 [0xd]:          popobj2    
14 [0xe]:          returnobj   
15 [0xf]:          ret   
16 [0x10]:          jmp @34   
17 [0x11]: line: 33 movl 0   
18 [0x12]:          movn #1   
20 [0x14]:          pushobj   
21 [0x15]:          istore 0   
23 [0x17]:          movl 0   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          iaload ebx, adx   
29 [0x1d]:          rstore ebx   
30 [0x1e]:          call @1755 // <std.io#__srt_global.copy>   
31 [0x1f]:          popobj2    
32 [0x20]:          returnobj   
33 [0x21]:          ret   
34 [0x22]:          nop   


overload function: std#list<ui.support#fragment>.operator[[3481] params(1) in file: lib\support\0.2.805/list.sharp:36:8: note:  
		    def operator[](index: var): t {
		       ^

0 [0x0]: line: 37 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 25   
18 [0x12]: line: 38 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:          dup    
20 [0x14]:          pushl 0   
21 [0x15]:          ipushl #1   
22 [0x16]:          call @3501 // <std#list<ui.support#fragment>.out_of_bounds_msg>   
23 [0x17]:          call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:          throw    
25 [0x19]:          nop   
26 [0x1a]: line: 39 movl 0   
27 [0x1b]:          movn #1   
29 [0x1d]:          pushobj   
30 [0x1e]:          loadl ebx, fp+1   
31 [0x1f]:          popobj2    
32 [0x20]:          movr adx, ebx   
33 [0x21]:          chklen adx   
34 [0x22]:          movnd adx   
35 [0x23]:          returnobj   
36 [0x24]:          ret   


function: std#list<ui.support#fragment>.at[3482] params(1) in file: lib\support\0.2.805/list.sharp:42:8: note:  
		    def at(index: var): t {
		       ^

0 [0x0]: line: 43 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 25   
18 [0x12]: line: 44 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:          dup    
20 [0x14]:          pushl 0   
21 [0x15]:          ipushl #1   
22 [0x16]:          call @3501 // <std#list<ui.support#fragment>.out_of_bounds_msg>   
23 [0x17]:          call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:          throw    
25 [0x19]:          nop   
26 [0x1a]: line: 45 movl 0   
27 [0x1b]:          movn #1   
29 [0x1d]:          pushobj   
30 [0x1e]:          loadl ebx, fp+1   
31 [0x1f]:          popobj2    
32 [0x20]:          movr adx, ebx   
33 [0x21]:          chklen adx   
34 [0x22]:          movnd adx   
35 [0x23]:          returnobj   
36 [0x24]:          ret   


function: std#list<ui.support#fragment>.last[3483] params(0) in file: lib\support\0.2.805/list.sharp:48:8: note:  
		    def last(): t {
		       ^

0 [0x0]: line: 49 pushl 0   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          rstore ebx   
8 [0x8]:          movi #1, ebx   
10 [0xa]:          loadval ecx   
11 [0xb]:          sub ecx, ebx -> ebx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @3482 // <std#list<ui.support#fragment>.at>   
14 [0xe]:          popobj2    
15 [0xf]:          returnobj   
16 [0x10]:          ret   


function: std#list<ui.support#fragment>.put[3484] params(2) in file: lib\support\0.2.805/list.sharp:52:8: note:  
		    def put(index: var, element: t) : t {
		       ^

0 [0x0]: line: 53 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 25   
18 [0x12]: line: 54 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:          dup    
20 [0x14]:          pushl 0   
21 [0x15]:          ipushl #1   
22 [0x16]:          call @3501 // <std#list<ui.support#fragment>.out_of_bounds_msg>   
23 [0x17]:          call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:          throw    
25 [0x19]:          nop   
26 [0x1a]: line: 56 movl 0   
27 [0x1b]:          movn #1   
29 [0x1d]:          pushobj   
30 [0x1e]:          loadl ebx, fp+1   
31 [0x1f]:          popobj2    
32 [0x20]:          movr adx, ebx   
33 [0x21]:          chklen adx   
34 [0x22]:          movnd adx   
35 [0x23]:          smovr_3 fp+3   
36 [0x24]: line: 57 pushl 2   
37 [0x25]:          movl 0   
38 [0x26]:          movn #1   
40 [0x28]:          pushobj   
41 [0x29]:          loadl ebx, fp+1   
42 [0x2a]:          popobj2    
43 [0x2b]:          movr adx, ebx   
44 [0x2c]:          chklen adx   
45 [0x2d]:          movnd adx   
46 [0x2e]:          popobj   
47 [0x2f]: line: 58 movl 3   
48 [0x30]:          returnobj   
49 [0x31]:          ret   


function: std#list<ui.support#fragment>.expand[3485] params(0) in file: lib\support\0.2.805/list.sharp:61:16: note:  
		    private def expand() {
		               ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #2   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 24   
8 [0x8]: line: 63 movl 0   
9 [0x9]:          movn #1   
11 [0xb]:          pushobj   
12 [0xc]:          movl 0   
13 [0xd]:          movn #1   
15 [0xf]:          sizeof ebx   
16 [0x10]:          rstore ebx   
17 [0x11]:          movi #128, ebx   
19 [0x13]:          loadval ecx   
20 [0x14]:          add ecx, ebx -> ebx   
21 [0x15]:          rstore ebx   
22 [0x16]:          call @1735 // <std.io#__srt_global.realloc>   
23 [0x17]:          jmp @51   
24 [0x18]: line: 65 movl 0   
25 [0x19]:          movn #1   
27 [0x1b]:          pushobj   
28 [0x1c]:          movl 0   
29 [0x1d]:          movn #1   
31 [0x1f]:          sizeof ebx   
32 [0x20]:          rstore ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #1   
36 [0x24]:          sizeof ebx   
37 [0x25]:          rstore ebx   
38 [0x26]:          movi #4, ebx   
40 [0x28]:          loadval ecx   
41 [0x29]:          shr ecx, ebx -> ebx   
42 [0x2a]:          loadval ecx   
43 [0x2b]:          add ecx, ebx -> ebx   
44 [0x2c]:          rstore ebx   
45 [0x2d]:          movi #128, ebx   
47 [0x2f]:          loadval ecx   
48 [0x30]:          add ecx, ebx -> ebx   
49 [0x31]:          rstore ebx   
50 [0x32]:          call @1735 // <std.io#__srt_global.realloc>   
51 [0x33]:          nop   
52 [0x34]:          ret   


function: std#list<ui.support#fragment>.clear[3486] params(0) in file: lib\support\0.2.805/list.sharp:68:8: note:  
		    def clear() {
		       ^

0 [0x0]: line: 69 movi #10, ebx   
2 [0x2]:          new_classarray ebx  // ui.support#fragment[]   
3 [0x3]:          movl 0   
4 [0x4]:          movn #1   
6 [0x6]:          popobj   
7 [0x7]: line: 70 movi #0, ebx   
9 [0x9]:          movl 0   
10 [0xa]:          movn #0   
12 [0xc]:          movi #0, adx   
14 [0xe]:          rmov adx, ebx   
15 [0xf]:          ret   


function: std#list<ui.support#fragment>.add_all[3487] params(1) in file: lib\support\0.2.805/list.sharp:73:8: note:  
		    def add_all(lst: list<t>) {
		       ^

0 [0x0]: line: 74 movl 1   
1 [0x1]:          movn #1   
3 [0x3]:          pushobj   
4 [0x4]:          istore 0   
6 [0x6]:          movl 1   
7 [0x7]:          movn #0   
9 [0x9]:          movi #0, adx   
11 [0xb]:          iaload ebx, adx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @1755 // <std.io#__srt_global.copy>   
14 [0xe]:          popobj2    
15 [0xf]:          movi #122, cmt   
17 [0x11]:          cast cmt   
18 [0x12]:          pushobj   
19 [0x13]:          movl 0   
20 [0x14]:          movn #1   
22 [0x16]:          popobj   
23 [0x17]: line: 75 movl 1   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          iaload ebx, adx   
29 [0x1d]:          movl 0   
30 [0x1e]:          movn #0   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          ret   


function: std#list<ui.support#fragment>.add_all[3488] params(1) in file: lib\support\0.2.805/list.sharp:78:8: note:  
		    def add_all(lst: t[]) {
		       ^

0 [0x0]: line: 79 movl 1   
1 [0x1]:          checknull   
2 [0x2]:          not ebx, ebx   
3 [0x3]:          movr cmt, ebx   
4 [0x4]:          jne 30   
5 [0x5]: line: 80 pushl 1   
6 [0x6]:          istore 0   
8 [0x8]:          movl 1   
9 [0x9]:          sizeof ebx   
10 [0xa]:          rstore ebx   
11 [0xb]:          call @1755 // <std.io#__srt_global.copy>   
12 [0xc]:          popobj2    
13 [0xd]:          movi #122, cmt   
15 [0xf]:          cast cmt   
16 [0x10]:          pushobj   
17 [0x11]:          movl 0   
18 [0x12]:          movn #1   
20 [0x14]:          popobj   
21 [0x15]: line: 81 movl 1   
22 [0x16]:          sizeof ebx   
23 [0x17]:          movl 0   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          rmov adx, ebx   
29 [0x1d]:          jmp @45   
30 [0x1e]: line: 83 movi #0, ebx   
32 [0x20]:          movl 0   
33 [0x21]:          movn #0   
35 [0x23]:          movi #0, adx   
37 [0x25]:          rmov adx, ebx   
38 [0x26]: line: 84 movi #10, ebx   
40 [0x28]:          new_classarray ebx  // ui.support#fragment[]   
41 [0x29]:          movl 0   
42 [0x2a]:          movn #1   
44 [0x2c]:          popobj   
45 [0x2d]:          nop   
46 [0x2e]:          ret   


function: std#list<ui.support#fragment>.add[3489] params(1) in file: lib\support\0.2.805/list.sharp:88:8: note:  
		    def add(element: t) {
		       ^

0 [0x0]: line: 89 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 0   
8 [0x8]:          movn #1   
10 [0xa]:          sizeof ebx   
11 [0xb]:          loadval ecx   
12 [0xc]:          gte ecx, ebx   
13 [0xd]:          movr ebx, cmt   
14 [0xe]:          movr cmt, ebx   
15 [0xf]:          jne 18   
16 [0x10]: line: 90 pushl 0   
17 [0x11]:          call @3485 // <std#list<ui.support#fragment>.expand>   
18 [0x12]:          nop   
19 [0x13]: line: 91 pushl 1   
20 [0x14]:          movl 0   
21 [0x15]:          movn #1   
23 [0x17]:          pushobj   
24 [0x18]:          movl 0   
25 [0x19]:          movn #0   
27 [0x1b]:          movi #0, adx   
29 [0x1d]:          iaload ebx, adx   
30 [0x1e]:          movr egx, ebx   
31 [0x1f]:          inc ebx   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          movr ebx, egx   
36 [0x24]:          popobj2    
37 [0x25]:          movr adx, ebx   
38 [0x26]:          chklen adx   
39 [0x27]:          movnd adx   
40 [0x28]:          popobj   
41 [0x29]:          ret   


function: std#list<ui.support#fragment>.indexof[3490] params(1) in file: lib\support\0.2.805/list.sharp:94:8: note:  
		    def indexof(element: t) : var {
		       ^

0 [0x0]: line: 95 istorel 0, fp+2   
2 [0x2]:          ipushl #2   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          movi #0, adx   
8 [0x8]:          iaload ebx, adx   
9 [0x9]:          loadval ecx   
10 [0xa]:          lt ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 35   
14 [0xe]: line: 96 pushl 1   
15 [0xf]:          movl 0   
16 [0x10]:          movn #1   
18 [0x12]:          pushobj   
19 [0x13]:          loadl ebx, fp+2   
20 [0x14]:          popobj2    
21 [0x15]:          movr adx, ebx   
22 [0x16]:          chklen adx   
23 [0x17]:          movnd adx   
24 [0x18]:          pushobj   
25 [0x19]:          itest ebx   
26 [0x1a]:          movr cmt, ebx   
27 [0x1b]:          jne 31   
28 [0x1c]: line: 97 loadl ebx, fp+2   
29 [0x1d]:          return_val ebx   
30 [0x1e]:          ret   
31 [0x1f]:          nop   
32 [0x20]:          iaddl 1, fp@2   
34 [0x22]:          jmp @2   
35 [0x23]: line: 101 istorel -1, fp+0   
37 [0x25]:           ret   


function: std#list<ui.support#fragment>.pop_back[3491] params(0) in file: lib\support\0.2.805/list.sharp:104:8: note:  
		    def pop_back() {
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #0, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 38   
14 [0xe]: line: 106 movl 1   
15 [0xf]:           del   
16 [0x10]: line: 107 pushl 1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           movl 0   
22 [0x16]:           movn #0   
24 [0x18]:           movi #0, adx   
26 [0x1a]:           iaload ebx, adx   
27 [0x1b]:           movr egx, ebx   
28 [0x1c]:           dec ebx   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           rmov adx, ebx   
32 [0x20]:           movr ebx, egx   
33 [0x21]:           popobj2    
34 [0x22]:           movr adx, ebx   
35 [0x23]:           chklen adx   
36 [0x24]:           movnd adx   
37 [0x25]:           popobj   
38 [0x26]:           nop   
39 [0x27]:           ret   


function: std#list<ui.support#fragment>.size[3492] params(0) in file: lib\support\0.2.805/list.sharp:111:8: note:  
		    def size() := n_elements;
		       ^

0 [0x0]: line: 111 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std#list<ui.support#fragment>.insert[3493] params(2) in file: lib\support\0.2.805/list.sharp:113:8: note:  
		    def insert(index: var, element: t) {
		       ^

0 [0x0]: line: 114 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gt ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 25   
18 [0x12]: line: 115 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:           dup    
20 [0x14]:           pushl 0   
21 [0x15]:           ipushl #1   
22 [0x16]:           call @3501 // <std#list<ui.support#fragment>.out_of_bounds_msg>   
23 [0x17]:           call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:           throw    
25 [0x19]:           nop   
26 [0x1a]: line: 117 movl 0   
27 [0x1b]:           movn #0   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           iaload ebx, adx   
32 [0x20]:           rstore ebx   
33 [0x21]:           movi #0, ebx   
35 [0x23]:           loadval ecx   
36 [0x24]:           test ecx, ebx   
37 [0x25]:           jne 42   
38 [0x26]: line: 118 pushl 0   
39 [0x27]:           pushl 2   
40 [0x28]:           call @3489 // <std#list<ui.support#fragment>.add>   
41 [0x29]:           jmp @131   
42 [0x2a]: line: 120 movl 0   
43 [0x2b]:           movn #0   
45 [0x2d]:           movi #0, adx   
47 [0x2f]:           iaload ebx, adx   
48 [0x30]:           rstore ebx   
49 [0x31]:           movl 0   
50 [0x32]:           movn #1   
52 [0x34]:           sizeof ebx   
53 [0x35]:           loadval ecx   
54 [0x36]:           gte ecx, ebx   
55 [0x37]:           movr ebx, cmt   
56 [0x38]:           movr cmt, ebx   
57 [0x39]:           jne 60   
58 [0x3a]: line: 121 pushl 0   
59 [0x3b]:           call @3485 // <std#list<ui.support#fragment>.expand>   
60 [0x3c]:           nop   
61 [0x3d]: line: 122 movl 0   
62 [0x3e]:           movn #0   
64 [0x40]:           movi #0, adx   
66 [0x42]:           iaload ebx, adx   
67 [0x43]:           movr egx, ebx   
68 [0x44]:           inc ebx   
69 [0x45]:           movi #0, adx   
71 [0x47]:           rmov adx, ebx   
72 [0x48]: line: 123 movl 0   
73 [0x49]:           movn #0   
75 [0x4b]:           movi #0, adx   
77 [0x4d]:           iaload ebx, adx   
78 [0x4e]:           rstore ebx   
79 [0x4f]:           movi #1, ebx   
81 [0x51]:           loadval ecx   
82 [0x52]:           sub ecx, ebx -> ebx   
83 [0x53]:           smovr_2 ebx, fp+3   
84 [0x54]:           ipushl #3   
85 [0x55]:           loadl ebx, fp+1   
86 [0x56]:           loadval ecx   
87 [0x57]:           gt ecx, ebx   
88 [0x58]:           movr ebx, cmt   
89 [0x59]:           movr cmt, ebx   
90 [0x5a]:           jne 120   
91 [0x5b]: line: 124 movl 0   
92 [0x5c]:           movn #1   
94 [0x5e]:           pushobj   
95 [0x5f]:           ipushl #3   
96 [0x60]:           movi #1, ebx   
98 [0x62]:           loadval ecx   
99 [0x63]:           sub ecx, ebx -> ebx   
100 [0x64]:           popobj2    
101 [0x65]:           movr adx, ebx   
102 [0x66]:           chklen adx   
103 [0x67]:           movnd adx   
104 [0x68]:           pushobj   
105 [0x69]:           movl 0   
106 [0x6a]:           movn #1   
108 [0x6c]:           pushobj   
109 [0x6d]:           loadl ebx, fp+3   
110 [0x6e]:           popobj2    
111 [0x6f]:           movr adx, ebx   
112 [0x70]:           chklen adx   
113 [0x71]:           movnd adx   
114 [0x72]:           popobj   
115 [0x73]:           loadl ebx, fp+3   
116 [0x74]:           movr egx, ebx   
117 [0x75]:           dec ebx   
118 [0x76]:           smovr_2 ebx, fp+3   
119 [0x77]:           jmp @84   
120 [0x78]: line: 125 pushl 2   
121 [0x79]:           movl 0   
122 [0x7a]:           movn #1   
124 [0x7c]:           pushobj   
125 [0x7d]:           loadl ebx, fp+1   
126 [0x7e]:           popobj2    
127 [0x7f]:           movr adx, ebx   
128 [0x80]:           chklen adx   
129 [0x81]:           movnd adx   
130 [0x82]:           popobj   
131 [0x83]:           nop   
132 [0x84]:           ret   


function: std#list<ui.support#fragment>.find[3494] params(2) in file: lib\support\0.2.805/list.sharp:129:8: note:  
		    def find(comparer : t, find_func: (t, t)(var)) : t {
		       ^

0 [0x0]: line: 130 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 46   
14 [0xe]: line: 131 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 42   
31 [0x1f]: line: 132 movl 0   
32 [0x20]:           movn #1   
34 [0x22]:           pushobj   
35 [0x23]:           loadl ebx, fp+3   
36 [0x24]:           popobj2    
37 [0x25]:           movr adx, ebx   
38 [0x26]:           chklen adx   
39 [0x27]:           movnd adx   
40 [0x28]:           returnobj   
41 [0x29]:           ret   
42 [0x2a]:           nop   
43 [0x2b]:           iaddl 1, fp@3   
45 [0x2d]:           jmp @2   
46 [0x2e]: line: 136 movl 4   
47 [0x2f]:           del   
48 [0x30]: line: 137 movl 4   
49 [0x31]:           returnobj   
50 [0x32]:           ret   


function: std#list<ui.support#fragment>.remove[3495] params(1) in file: lib\support\0.2.805/list.sharp:140:8: note:  
		    def remove(val: t) {
		       ^

0 [0x0]: line: 141 istorel 0, fp+2   
2 [0x2]:           ipushl #2   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 36   
14 [0xe]: line: 142 pushl 1   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+2   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           itest ebx   
26 [0x1a]:           movr cmt, ebx   
27 [0x1b]:           jne 32   
28 [0x1c]: line: 143 pushl 0   
29 [0x1d]:           ipushl #2   
30 [0x1e]:           call @3498 // <std#list<ui.support#fragment>.remove_at>   
31 [0x1f]: line: 144 ret   
32 [0x20]:           nop   
33 [0x21]:           iaddl 1, fp@2   
35 [0x23]:           jmp @2   
36 [0x24]:           ret   


function: std#list<ui.support#fragment>.remove[3496] params(2) in file: lib\support\0.2.805/list.sharp:149:8: note:  
		    def remove(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 150 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 39   
14 [0xe]: line: 151 ipushl #2   
15 [0xf]:           pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           movnd adx   
25 [0x19]:           pushobj   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 35   
31 [0x1f]: line: 152 pushl 0   
32 [0x20]:           ipushl #3   
33 [0x21]:           call @3498 // <std#list<ui.support#fragment>.remove_at>   
34 [0x22]: line: 153 ret   
35 [0x23]:           nop   
36 [0x24]:           iaddl 1, fp@3   
38 [0x26]:           jmp @2   
39 [0x27]:           ret   


function: std#list<ui.support#fragment>.replace[3497] params(2) in file: lib\support\0.2.805/list.sharp:158:8: note:  
		    def replace(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 159 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 47   
14 [0xe]: line: 160 ipushl #2   
15 [0xf]:           pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           movnd adx   
25 [0x19]:           pushobj   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 43   
31 [0x1f]: line: 161 pushl 1   
32 [0x20]:           movl 0   
33 [0x21]:           movn #1   
35 [0x23]:           pushobj   
36 [0x24]:           loadl ebx, fp+3   
37 [0x25]:           popobj2    
38 [0x26]:           movr adx, ebx   
39 [0x27]:           chklen adx   
40 [0x28]:           movnd adx   
41 [0x29]:           popobj   
42 [0x2a]: line: 162 ret   
43 [0x2b]:           nop   
44 [0x2c]:           iaddl 1, fp@3   
46 [0x2e]:           jmp @2   
47 [0x2f]:           ret   


function: std#list<ui.support#fragment>.remove_at[3498] params(1) in file: lib\support\0.2.805/list.sharp:167:8: note:  
		    def remove_at(index: var) {
		       ^

0 [0x0]: line: 168 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gte ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 25   
18 [0x12]: line: 169 new_class @6 // std#out_of_bounds_exception   
19 [0x13]:           dup    
20 [0x14]:           pushl 0   
21 [0x15]:           ipushl #1   
22 [0x16]:           call @3501 // <std#list<ui.support#fragment>.out_of_bounds_msg>   
23 [0x17]:           call @1636 // <std#out_of_bounds_exception.out_of_bounds_exception>   
24 [0x18]:           throw    
25 [0x19]:           nop   
26 [0x1a]: line: 171 movl 0   
27 [0x1b]:           movn #0   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           iaload ebx, adx   
32 [0x20]:           rstore ebx   
33 [0x21]:           loadl ebx, fp+1   
34 [0x22]:           loadval ecx   
35 [0x23]:           sub ecx, ebx -> ebx   
36 [0x24]:           rstore ebx   
37 [0x25]:           movi #1, ebx   
39 [0x27]:           loadval ecx   
40 [0x28]:           sub ecx, ebx -> ebx   
41 [0x29]:           smovr_2 ebx, fp+2   
42 [0x2a]: line: 172 ipushl #2   
43 [0x2b]:           movi #0, ebx   
45 [0x2d]:           loadval ecx   
46 [0x2e]:           gt ecx, ebx   
47 [0x2f]:           movr ebx, cmt   
48 [0x30]:           movr cmt, ebx   
49 [0x31]:           jne 73   
50 [0x32]: line: 173 movl 0   
51 [0x33]:           movn #1   
53 [0x35]:           pushobj   
54 [0x36]:           movl 0   
55 [0x37]:           movn #1   
57 [0x39]:           pushobj   
58 [0x3a]:           ipushl #1   
59 [0x3b]:           ipushl #1   
60 [0x3c]:           movi #1, ebx   
62 [0x3e]:           loadval ecx   
63 [0x3f]:           add ecx, ebx -> ebx   
64 [0x40]:           rstore ebx   
65 [0x41]:           movl 0   
66 [0x42]:           movn #0   
68 [0x44]:           movi #0, adx   
70 [0x46]:           iaload ebx, adx   
71 [0x47]:           rstore ebx   
72 [0x48]:           call @1745 // <std.io#__srt_global.memcopy>   
73 [0x49]:           nop   
74 [0x4a]: line: 175 pushl 0   
75 [0x4b]:           call @3491 // <std#list<ui.support#fragment>.pop_back>   
76 [0x4c]:           ret   


function: std#list<ui.support#fragment>.indexof[3499] params(2) in file: lib\support\0.2.805/list.sharp:178:8: note:  
		    def indexof(comparer: t, find_func: (t, t)(var)) : var {
		       ^

0 [0x0]: line: 179 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 38   
14 [0xe]: line: 180 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 34   
31 [0x1f]: line: 181 loadl ebx, fp+3   
32 [0x20]:           return_val ebx   
33 [0x21]:           ret   
34 [0x22]:           nop   
35 [0x23]:           iaddl 1, fp@3   
37 [0x25]:           jmp @2   
38 [0x26]: line: 185 istorel -1, fp+0   
40 [0x28]:           ret   


function: std#list<ui.support#fragment>.to_string[3500] params(0) in file: lib\support\0.2.805/list.sharp:188:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 189 new_class @65 // std#string_builder   
1 [0x1]:           dup    
2 [0x2]:           call @3038 // <std#string_builder.string_builder>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+1   
5 [0x5]: line: 191 pushl 1   
6 [0x6]:           newstr @138 // [    
7 [0x7]:           call @3034 // <std#string_builder.operator+=>   
8 [0x8]:           pop   
9 [0x9]: line: 192 istorel 0, fp+2   
11 [0xb]:           ipushl #2   
12 [0xc]:           movl 0   
13 [0xd]:           movn #0   
15 [0xf]:           movi #0, adx   
17 [0x11]:           iaload ebx, adx   
18 [0x12]:           loadval ecx   
19 [0x13]:           lt ecx, ebx   
20 [0x14]:           movr ebx, cmt   
21 [0x15]:           movr cmt, ebx   
22 [0x16]:           jne 61   
23 [0x17]: line: 193 pushl 1   
24 [0x18]:           movl 0   
25 [0x19]:           movn #1   
27 [0x1b]:           pushobj   
28 [0x1c]:           loadl ebx, fp+2   
29 [0x1d]:           popobj2    
30 [0x1e]:           movr adx, ebx   
31 [0x1f]:           chklen adx   
32 [0x20]:           movnd adx   
33 [0x21]:           pushobj   
34 [0x22]:           call @3030 // <std#string_builder.operator+=>   
35 [0x23]:           pop   
36 [0x24]: line: 195 ipushl #2   
37 [0x25]:           movi #1, ebx   
39 [0x27]:           loadval ecx   
40 [0x28]:           add ecx, ebx -> ebx   
41 [0x29]:           rstore ebx   
42 [0x2a]:           movl 0   
43 [0x2b]:           movn #0   
45 [0x2d]:           movi #0, adx   
47 [0x2f]:           iaload ebx, adx   
48 [0x30]:           loadval ecx   
49 [0x31]:           lt ecx, ebx   
50 [0x32]:           movr ebx, cmt   
51 [0x33]:           movr cmt, ebx   
52 [0x34]:           jne 57   
53 [0x35]: line: 196 pushl 1   
54 [0x36]:           newstr @139 // ,    
55 [0x37]:           call @3034 // <std#string_builder.operator+=>   
56 [0x38]:           pop   
57 [0x39]:           nop   
58 [0x3a]:           iaddl 1, fp@2   
60 [0x3c]:           jmp @11   
61 [0x3d]: line: 200 pushl 1   
62 [0x3e]:           newstr @140 //  ]   
63 [0x3f]:           call @3034 // <std#string_builder.operator+=>   
64 [0x40]:           pop   
65 [0x41]: line: 201 pushl 1   
66 [0x42]:           call @3011 // <std#string_builder.to_string>   
67 [0x43]:           popobj2    
68 [0x44]:           returnobj   
69 [0x45]:           ret   


function: std#list<ui.support#fragment>.out_of_bounds_msg[3501] params(1) in file: lib\support\0.2.805/list.sharp:204:16: note:  
		    private def out_of_bounds_msg(index: var) : string {
		               ^

0 [0x0]: line: 205 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           newstr @141 // Index:    
3 [0x3]:           call @2935 // <std#string.string>   
4 [0x4]:           ipushl #1   
5 [0x5]:           call @2967 // <std#string.operator+>   
6 [0x6]:           newstr @142 // , size:    
7 [0x7]:           call @2947 // <std#string.operator+>   
8 [0x8]:           movl 0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           iaload ebx, adx   
14 [0xe]:           rstore ebx   
15 [0xf]:           call @2967 // <std#string.operator+>   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


constructor: std.io.task#entry<std.io#thread,std.io.task#job_controller>.entry[3502] params(2) in file: lib\support\0.2.805/hashtable.sharp:134:21: note:  
		        public entry(key: k, value: v) {
		                    ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 135 pushl 1   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           popobj   
6 [0x6]: line: 136 pushl 2   
7 [0x7]:           movl 0   
8 [0x8]:           movn #1   
10 [0xa]:           popobj   
11 [0xb]:           ret   


function: std.io.task#entry<std.io#thread,std.io.task#job_controller>.to_string[3503] params(0) in file: lib\support\0.2.805/hashtable.sharp:139:19: note:  
		        public def to_string() : string {
		                  ^

0 [0x0]: line: 140 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           newstr @143 // key    
3 [0x3]:           call @2935 // <std#string.string>   
4 [0x4]:           movl 0   
5 [0x5]:           movn #0   
7 [0x7]:           pushobj   
8 [0x8]:           call @2949 // <std#string.operator+>   
9 [0x9]:           newstr @144 //  value    
10 [0xa]:           call @2947 // <std#string.operator+>   
11 [0xb]:           movl 0   
12 [0xc]:           movn #1   
14 [0xe]:           pushobj   
15 [0xf]:           call @2949 // <std#string.operator+>   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


constructor: std.io.task#entry<std.io#thread,std.io.task#job_controller>.entry[3504] params(0) in file: lib\support\0.2.805/hashtable.sharp:129:10: note:  
		    class entry<k, v> {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std.io#entry<std#int,std.io#thread>.entry[3505] params(2) in file: lib\support\0.2.805/hashtable.sharp:134:21: note:  
		        public entry(key: k, value: v) {
		                    ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 135 pushl 1   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           popobj   
6 [0x6]: line: 136 pushl 2   
7 [0x7]:           movl 0   
8 [0x8]:           movn #1   
10 [0xa]:           popobj   
11 [0xb]:           ret   


function: std.io#entry<std#int,std.io#thread>.to_string[3506] params(0) in file: lib\support\0.2.805/hashtable.sharp:139:19: note:  
		        public def to_string() : string {
		                  ^

0 [0x0]: line: 140 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           newstr @143 // key    
3 [0x3]:           call @2935 // <std#string.string>   
4 [0x4]:           movl 0   
5 [0x5]:           movn #0   
7 [0x7]:           pushobj   
8 [0x8]:           call @2949 // <std#string.operator+>   
9 [0x9]:           newstr @144 //  value    
10 [0xa]:           call @2947 // <std#string.operator+>   
11 [0xb]:           movl 0   
12 [0xc]:           movn #1   
14 [0xe]:           pushobj   
15 [0xf]:           call @2949 // <std#string.operator+>   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


constructor: std.io#entry<std#int,std.io#thread>.entry[3507] params(0) in file: lib\support\0.2.805/hashtable.sharp:129:10: note:  
		    class entry<k, v> {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: ui.res#entry<std#int,ui.support#drawable>.entry[3508] params(2) in file: lib\support\0.2.805/hashmap.sharp:126:21: note:  
		        public entry(key: k, value: v) {
		                    ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 127 pushl 1   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           popobj   
6 [0x6]: line: 128 pushl 2   
7 [0x7]:           movl 0   
8 [0x8]:           movn #1   
10 [0xa]:           popobj   
11 [0xb]:           ret   


function: ui.res#entry<std#int,ui.support#drawable>.to_string[3509] params(0) in file: lib\support\0.2.805/hashmap.sharp:131:19: note:  
		        public def to_string() : string {
		                  ^

0 [0x0]: line: 132 new_class @64 // std#string   
1 [0x1]:           dup    
2 [0x2]:           newstr @143 // key    
3 [0x3]:           call @2935 // <std#string.string>   
4 [0x4]:           movl 0   
5 [0x5]:           movn #0   
7 [0x7]:           pushobj   
8 [0x8]:           call @2949 // <std#string.operator+>   
9 [0x9]:           newstr @144 //  value    
10 [0xa]:           call @2947 // <std#string.operator+>   
11 [0xb]:           movl 0   
12 [0xc]:           movn #1   
14 [0xe]:           pushobj   
15 [0xf]:           call @2949 // <std#string.operator+>   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


constructor: ui.res#entry<std#int,ui.support#drawable>.entry[3510] params(0) in file: lib\support\0.2.805/hashmap.sharp:121:10: note:  
		    class entry<k, v> {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


function: std.io#__srt_global.$03internal_static_init[3511] params(0) in file: lib\support\0.2.805/io//critical_section.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         new_class @37 // std#_object_   
1 [0x1]:         dup    
2 [0x2]:         movg @17 // @std.io#__srt_global   
3 [0x3]:         movn #0   
5 [0x5]:         popobj   
6 [0x6]:         ret   


function: std.io#file.$03internal_static_init[3512] params(0) in file: lib\support\0.2.805/io//file.sharp:17:13: note:  
		public class file {
		            ^

0 [0x0]:         call @1713 // <std.io#file.get_file_system>   
1 [0x1]:         movg @18 // @std.io#file   
2 [0x2]:         movn #0   
4 [0x4]:         popobj   
5 [0x5]:         movg @18 // @std.io#file   
6 [0x6]:         movn #0   
8 [0x8]:         pushobj   
9 [0x9]:         invoke_delegate 1715 { static=0, args=0 }   
11 [0xb]:         movg @18 // @std.io#file   
12 [0xc]:         movn #1   
14 [0xe]:         loadval ebx   
15 [0xf]:         movi #0, adx   
17 [0x11]:         rmov adx, ebx   
18 [0x12]:         ret   
19 [0x13]:         ret   


function: std.io.task#job.$03internal_static_init[3513] params(0) in file: lib\support\0.2.805/io//task//job.sharp:5:13: note:  
		public class job {
		            ^

0 [0x0]:         istore 0   
2 [0x2]:         movg @22 // @std.io.task#job   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         movi #0, adx   
8 [0x8]:         rmov adx, ebx   
9 [0x9]:         ret   
10 [0xa]:         ret   


function: std.io.task#__srt_global.$03internal_static_init[3514] params(0) in file: lib\support\0.2.805/io//task//task.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         new_class @25 // std.io.task#job_master   
1 [0x1]:         dup    
2 [0x2]:         call @1813 // <std.io.task#job_master.job_master>   
3 [0x3]:         movg @20 // @std.io.task#__srt_global   
4 [0x4]:         movn #5   
6 [0x6]:         popobj   
7 [0x7]:         ret   


function: std.io#thread_group.$03internal_static_init[3515] params(0) in file: lib\support\0.2.805/io//thread_group.sharp:3:13: note:  
		public class thread_group : loopable<thread> {
		            ^

0 [0x0]:         new_class @29 // std.io#thread_group   
1 [0x1]:         dup    
2 [0x2]:         new_class @64 // std#string   
3 [0x3]:         dup    
4 [0x4]:         newstr @2 // main   
5 [0x5]:         call @2935 // <std#string.string>   
6 [0x6]:         call @1878 // <std.io#thread_group.thread_group>   
7 [0x7]:         movg @29 // @std.io#thread_group   
8 [0x8]:         movn #0   
10 [0xa]:         popobj   
11 [0xb]:         ret   
12 [0xc]:         ret   


function: std#_nil_.$03internal_static_init[3516] params(0) in file: lib\support\0.2.805/nil.sharp:10:13: note:  
		stable class _nil_ {
		            ^

0 [0x0]:         new_class @36 // std#_nil_   
1 [0x1]:         movg @36 // @std#_nil_   
2 [0x2]:         movn #0   
4 [0x4]:         popobj   
5 [0x5]:         ret   
6 [0x6]:         ret   


function: std#__srt_global.$03internal_static_init[3517] params(0) in file: lib\support\0.2.805/object.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         istore 0   
2 [0x2]:         movg @0 // @std#__srt_global   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         movi #0, adx   
8 [0x8]:         rmov adx, ebx   
9 [0x9]:         ret   


function: std#string.$03internal_static_init[3518] params(0) in file: lib\support\0.2.805/string.sharp:5:6: note:  
		class string : loopable<_int8> {
		     ^

0 [0x0]:         istore 103   
2 [0x2]:         movg @64 // @std#string   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         mov8 ebx, ebx   
7 [0x7]:         movi #0, adx   
9 [0x9]:         rmov adx, ebx   
10 [0xa]:         istore 0   
12 [0xc]:         movg @64 // @std#string   
13 [0xd]:         movn #1   
15 [0xf]:         loadval ebx   
16 [0x10]:         movi #0, adx   
18 [0x12]:         rmov adx, ebx   
19 [0x13]:         ret   
20 [0x14]:         ret   


function: std#string_builder.$03internal_static_init[3519] params(0) in file: lib\support\0.2.805/string_builder.sharp:5:6: note:  
		class string_builder : loopable<_int8> {
		     ^

0 [0x0]:         istore 103   
2 [0x2]:         movg @65 // @std#string_builder   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         mov8 ebx, ebx   
7 [0x7]:         movi #0, adx   
9 [0x9]:         rmov adx, ebx   
10 [0xa]:         istore 0   
12 [0xc]:         movg @65 // @std#string_builder   
13 [0xd]:         movn #1   
15 [0xf]:         loadval ebx   
16 [0x10]:         movi #0, adx   
18 [0x12]:         rmov adx, ebx   
19 [0x13]:         ret   
20 [0x14]:         ret   


function: std#time.$03internal_static_init[3520] params(0) in file: lib\support\0.2.805/time.sharp:6:6: note:  
		class time {
		     ^

0 [0x0]:         istore 4294967295   
2 [0x2]:         movg @66 // @std#time   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         movi #0, adx   
8 [0x8]:         rmov adx, ebx   
9 [0x9]:         ret   
10 [0xa]:         ret   


function: common#constants.$03internal_static_init[3521] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/constants.sharp:3:6: note:  
		class constants {
		     ^

0 [0x0]:         ldc ebx // 1   
1 [0x1]:         rstore ebx   
2 [0x2]:         movg @71 // @common#constants   
3 [0x3]:         movn #20   
5 [0x5]:         loadval ebx   
6 [0x6]:         movi #0, adx   
8 [0x8]:         rmov adx, ebx   
9 [0x9]:         ret   
10 [0xa]:         ret   


function: common#constants.strings.$03internal_static_init[3522] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/constants.sharp:39:10: note:  
		    class strings {
		         ^

0 [0x0]:         new_class @64 // std#string   
1 [0x1]:         dup    
2 [0x2]:         newstr @5 // cmd   
3 [0x3]:         call @2935 // <std#string.string>   
4 [0x4]:         movg @72 // @common#constants.strings   
5 [0x5]:         movn #0   
7 [0x7]:         popobj   
8 [0x8]:         new_class @64 // std#string   
9 [0x9]:         dup    
10 [0xa]:         newstr @6 // response   
11 [0xb]:         call @2935 // <std#string.string>   
12 [0xc]:         movg @72 // @common#constants.strings   
13 [0xd]:         movn #1   
15 [0xf]:         popobj   
16 [0x10]:         new_class @64 // std#string   
17 [0x11]:         dup    
18 [0x12]:         newstr @7 // yes   
19 [0x13]:         call @2935 // <std#string.string>   
20 [0x14]:         movg @72 // @common#constants.strings   
21 [0x15]:         movn #2   
23 [0x17]:         popobj   
24 [0x18]:         new_class @64 // std#string   
25 [0x19]:         dup    
26 [0x1a]:         newstr @8 // mode   
27 [0x1b]:         call @2935 // <std#string.string>   
28 [0x1c]:         movg @72 // @common#constants.strings   
29 [0x1d]:         movn #3   
31 [0x1f]:         popobj   
32 [0x20]:         new_class @64 // std#string   
33 [0x21]:         dup    
34 [0x22]:         newstr @9 // altitude   
35 [0x23]:         call @2935 // <std#string.string>   
36 [0x24]:         movg @72 // @common#constants.strings   
37 [0x25]:         movn #4   
39 [0x27]:         popobj   
40 [0x28]:         new_class @64 // std#string   
41 [0x29]:         dup    
42 [0x2a]:         newstr @10 // bat_lvl   
43 [0x2b]:         call @2935 // <std#string.string>   
44 [0x2c]:         movg @72 // @common#constants.strings   
45 [0x2d]:         movn #5   
47 [0x2f]:         popobj   
48 [0x30]:         new_class @64 // std#string   
49 [0x31]:         dup    
50 [0x32]:         newstr @11 // speed   
51 [0x33]:         call @2935 // <std#string.string>   
52 [0x34]:         movg @72 // @common#constants.strings   
53 [0x35]:         movn #6   
55 [0x37]:         popobj   
56 [0x38]:         newstr @3 // 100   
57 [0x39]:         movg @72 // @common#constants.strings   
58 [0x3a]:         movn #7   
60 [0x3c]:         popobj   
61 [0x3d]:         newstr @4 // 200   
62 [0x3e]:         movg @72 // @common#constants.strings   
63 [0x3f]:         movn #8   
65 [0x41]:         popobj   
66 [0x42]:         new_class @64 // std#string   
67 [0x43]:         dup    
68 [0x44]:         newstr @12 // 0   
69 [0x45]:         call @2935 // <std#string.string>   
70 [0x46]:         movg @72 // @common#constants.strings   
71 [0x47]:         movn #9   
73 [0x49]:         popobj   
74 [0x4a]:         new_class @64 // std#string   
75 [0x4b]:         dup    
76 [0x4c]:         newstr @13 // 1   
77 [0x4d]:         call @2935 // <std#string.string>   
78 [0x4e]:         movg @72 // @common#constants.strings   
79 [0x4f]:         movn #10   
81 [0x51]:         popobj   
82 [0x52]:         new_class @64 // std#string   
83 [0x53]:         dup    
84 [0x54]:         newstr @14 // 2   
85 [0x55]:         call @2935 // <std#string.string>   
86 [0x56]:         movg @72 // @common#constants.strings   
87 [0x57]:         movn #11   
89 [0x59]:         popobj   
90 [0x5a]:         new_class @64 // std#string   
91 [0x5b]:         dup    
92 [0x5c]:         newstr @15 // 3   
93 [0x5d]:         call @2935 // <std#string.string>   
94 [0x5e]:         movg @72 // @common#constants.strings   
95 [0x5f]:         movn #12   
97 [0x61]:         popobj   
98 [0x62]:         new_class @64 // std#string   
99 [0x63]:         dup    
100 [0x64]:         newstr @16 // 4   
101 [0x65]:         call @2935 // <std#string.string>   
102 [0x66]:         movg @72 // @common#constants.strings   
103 [0x67]:         movn #13   
105 [0x69]:         popobj   
106 [0x6a]:         new_class @64 // std#string   
107 [0x6b]:         dup    
108 [0x6c]:         newstr @17 // 5   
109 [0x6d]:         call @2935 // <std#string.string>   
110 [0x6e]:         movg @72 // @common#constants.strings   
111 [0x6f]:         movn #14   
113 [0x71]:         popobj   
114 [0x72]:         new_class @64 // std#string   
115 [0x73]:         dup    
116 [0x74]:         newstr @18 // 6   
117 [0x75]:         call @2935 // <std#string.string>   
118 [0x76]:         movg @72 // @common#constants.strings   
119 [0x77]:         movn #15   
121 [0x79]:         popobj   
122 [0x7a]:         ret   
123 [0x7b]:         ret   


lambda: common.network.core#__srt_global.anon_func$3523[3523] params(2) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\common/network//core//request_data.sharp:6:9: note:  
		        { t1, t2 ->
		        ^

0 [0x0]: line: 7 movl 0   
1 [0x1]:         movn #0   
3 [0x3]:         pushobj   
4 [0x4]:         movl 1   
5 [0x5]:         movn #0   
7 [0x7]:         pushobj   
8 [0x8]:         call @2953 // <std#string.operator==>   
9 [0x9]:         loadval ebx   
10 [0xa]:         return_val ebx   
11 [0xb]:         ret   


function: main#__srt_global.$03internal_static_init[3524] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/connection_tracker.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         new_class @37 // std#_object_   
1 [0x1]:         dup    
2 [0x2]:         movg @101 // @main#__srt_global   
3 [0x3]:         movn #0   
5 [0x5]:         popobj   
6 [0x6]:         ldc ebx // 0   
7 [0x7]:         rstore ebx   
8 [0x8]:         movg @101 // @main#__srt_global   
9 [0x9]:         movn #1   
11 [0xb]:         loadval ebx   
12 [0xc]:         movi #0, adx   
14 [0xe]:         rmov adx, ebx   
15 [0xf]:         istore 1   
17 [0x11]:         movg @101 // @main#__srt_global   
18 [0x12]:         movn #2   
20 [0x14]:         loadval ebx   
21 [0x15]:         movi #0, adx   
23 [0x17]:         rmov adx, ebx   
24 [0x18]:         istore 0   
26 [0x1a]:         movg @101 // @main#__srt_global   
27 [0x1b]:         movn #3   
29 [0x1d]:         loadval ebx   
30 [0x1e]:         movi #0, adx   
32 [0x20]:         rmov adx, ebx   
33 [0x21]:         ret   


function: ui.layout#__srt_global.$03internal_static_init[3525] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//layout//home_screen.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         istore 0   
2 [0x2]:         movg @105 // @ui.layout#__srt_global   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         movi #0, adx   
8 [0x8]:         rmov adx, ebx   
9 [0x9]:         ret   


function: ui.layout#home_screen.$03internal_static_init[3526] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//layout//home_screen.sharp:12:6: note:  
		class home_screen base fragment {
		     ^

0 [0x0]:         new_class @64 // std#string   
1 [0x1]:         dup    
2 [0x2]:         newstr @19 // signal-updater   
3 [0x3]:         call @2935 // <std#string.string>   
4 [0x4]:         movg @106 // @ui.layout#home_screen   
5 [0x5]:         movn #0   
7 [0x7]:         popobj   
8 [0x8]:         new_class @64 // std#string   
9 [0x9]:         dup    
10 [0xa]:         newstr @20 // clock-updater   
11 [0xb]:         call @2935 // <std#string.string>   
12 [0xc]:         movg @106 // @ui.layout#home_screen   
13 [0xd]:         movn #1   
15 [0xf]:         popobj   
16 [0x10]:         new_class @64 // std#string   
17 [0x11]:         dup    
18 [0x12]:         newstr @21 // flight-data-updater   
19 [0x13]:         call @2935 // <std#string.string>   
20 [0x14]:         movg @106 // @ui.layout#home_screen   
21 [0x15]:         movn #2   
23 [0x17]:         popobj   
24 [0x18]:         ret   
25 [0x19]:         ret   


function: ui.res.drawable#__srt_global.$03internal_static_init[3527] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//res//drawable//ico_battery_0.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         movi #144, ebx   
2 [0x2]:         newarry ebx   
3 [0x3]:         movi #0, ebx   
5 [0x5]:         movsl #0   
6 [0x6]:         movi #0, adx   
8 [0x8]:         rmov adx, ebx   
9 [0x9]:         movi #2, ebx   
11 [0xb]:         movsl #0   
12 [0xc]:         movi #1, adx   
14 [0xe]:         rmov adx, ebx   
15 [0xf]:         movi #2, ebx   
17 [0x11]:         movsl #0   
18 [0x12]:         movi #2, adx   
20 [0x14]:         rmov adx, ebx   
21 [0x15]:         movi #2, ebx   
23 [0x17]:         movsl #0   
24 [0x18]:         movi #3, adx   
26 [0x1a]:         rmov adx, ebx   
27 [0x1b]:         movi #2, ebx   
29 [0x1d]:         movsl #0   
30 [0x1e]:         movi #4, adx   
32 [0x20]:         rmov adx, ebx   
33 [0x21]:         movi #2, ebx   
35 [0x23]:         movsl #0   
36 [0x24]:         movi #5, adx   
38 [0x26]:         rmov adx, ebx   
39 [0x27]:         movi #2, ebx   
41 [0x29]:         movsl #0   
42 [0x2a]:         movi #6, adx   
44 [0x2c]:         rmov adx, ebx   
45 [0x2d]:         movi #2, ebx   
47 [0x2f]:         movsl #0   
48 [0x30]:         movi #7, adx   
50 [0x32]:         rmov adx, ebx   
51 [0x33]:         movi #2, ebx   
53 [0x35]:         movsl #0   
54 [0x36]:         movi #8, adx   
56 [0x38]:         rmov adx, ebx   
57 [0x39]:         movi #2, ebx   
59 [0x3b]:         movsl #0   
60 [0x3c]:         movi #9, adx   
62 [0x3e]:         rmov adx, ebx   
63 [0x3f]:         movi #2, ebx   
65 [0x41]:         movsl #0   
66 [0x42]:         movi #10, adx   
68 [0x44]:         rmov adx, ebx   
69 [0x45]:         movi #2, ebx   
71 [0x47]:         movsl #0   
72 [0x48]:         movi #11, adx   
74 [0x4a]:         rmov adx, ebx   
75 [0x4b]:         movi #2, ebx   
77 [0x4d]:         movsl #0   
78 [0x4e]:         movi #12, adx   
80 [0x50]:         rmov adx, ebx   
81 [0x51]:         movi #2, ebx   
83 [0x53]:         movsl #0   
84 [0x54]:         movi #13, adx   
86 [0x56]:         rmov adx, ebx   
87 [0x57]:         movi #2, ebx   
89 [0x59]:         movsl #0   
90 [0x5a]:         movi #14, adx   
92 [0x5c]:         rmov adx, ebx   
93 [0x5d]:         movi #2, ebx   
95 [0x5f]:         movsl #0   
96 [0x60]:         movi #15, adx   
98 [0x62]:         rmov adx, ebx   
99 [0x63]:         movi #0, ebx   
101 [0x65]:         movsl #0   
102 [0x66]:         movi #16, adx   
104 [0x68]:         rmov adx, ebx   
105 [0x69]:         movi #2, ebx   
107 [0x6b]:         movsl #0   
108 [0x6c]:         movi #17, adx   
110 [0x6e]:         rmov adx, ebx   
111 [0x6f]:         movi #0, ebx   
113 [0x71]:         movsl #0   
114 [0x72]:         movi #18, adx   
116 [0x74]:         rmov adx, ebx   
117 [0x75]:         movi #0, ebx   
119 [0x77]:         movsl #0   
120 [0x78]:         movi #19, adx   
122 [0x7a]:         rmov adx, ebx   
123 [0x7b]:         movi #0, ebx   
125 [0x7d]:         movsl #0   
126 [0x7e]:         movi #20, adx   
128 [0x80]:         rmov adx, ebx   
129 [0x81]:         movi #0, ebx   
131 [0x83]:         movsl #0   
132 [0x84]:         movi #21, adx   
134 [0x86]:         rmov adx, ebx   
135 [0x87]:         movi #0, ebx   
137 [0x89]:         movsl #0   
138 [0x8a]:         movi #22, adx   
140 [0x8c]:         rmov adx, ebx   
141 [0x8d]:         movi #0, ebx   
143 [0x8f]:         movsl #0   
144 [0x90]:         movi #23, adx   
146 [0x92]:         rmov adx, ebx   
147 [0x93]:         movi #0, ebx   
149 [0x95]:         movsl #0   
150 [0x96]:         movi #24, adx   
152 [0x98]:         rmov adx, ebx   
153 [0x99]:         movi #0, ebx   
155 [0x9b]:         movsl #0   
156 [0x9c]:         movi #25, adx   
158 [0x9e]:         rmov adx, ebx   
159 [0x9f]:         movi #0, ebx   
161 [0xa1]:         movsl #0   
162 [0xa2]:         movi #26, adx   
164 [0xa4]:         rmov adx, ebx   
165 [0xa5]:         movi #0, ebx   
167 [0xa7]:         movsl #0   
168 [0xa8]:         movi #27, adx   
170 [0xaa]:         rmov adx, ebx   
171 [0xab]:         movi #0, ebx   
173 [0xad]:         movsl #0   
174 [0xae]:         movi #28, adx   
176 [0xb0]:         rmov adx, ebx   
177 [0xb1]:         movi #0, ebx   
179 [0xb3]:         movsl #0   
180 [0xb4]:         movi #29, adx   
182 [0xb6]:         rmov adx, ebx   
183 [0xb7]:         movi #0, ebx   
185 [0xb9]:         movsl #0   
186 [0xba]:         movi #30, adx   
188 [0xbc]:         rmov adx, ebx   
189 [0xbd]:         movi #2, ebx   
191 [0xbf]:         movsl #0   
192 [0xc0]:         movi #31, adx   
194 [0xc2]:         rmov adx, ebx   
195 [0xc3]:         movi #2, ebx   
197 [0xc5]:         movsl #0   
198 [0xc6]:         movi #32, adx   
200 [0xc8]:         rmov adx, ebx   
201 [0xc9]:         movi #2, ebx   
203 [0xcb]:         movsl #0   
204 [0xcc]:         movi #33, adx   
206 [0xce]:         rmov adx, ebx   
207 [0xcf]:         movi #0, ebx   
209 [0xd1]:         movsl #0   
210 [0xd2]:         movi #34, adx   
212 [0xd4]:         rmov adx, ebx   
213 [0xd5]:         movi #0, ebx   
215 [0xd7]:         movsl #0   
216 [0xd8]:         movi #35, adx   
218 [0xda]:         rmov adx, ebx   
219 [0xdb]:         movi #0, ebx   
221 [0xdd]:         movsl #0   
222 [0xde]:         movi #36, adx   
224 [0xe0]:         rmov adx, ebx   
225 [0xe1]:         movi #0, ebx   
227 [0xe3]:         movsl #0   
228 [0xe4]:         movi #37, adx   
230 [0xe6]:         rmov adx, ebx   
231 [0xe7]:         movi #0, ebx   
233 [0xe9]:         movsl #0   
234 [0xea]:         movi #38, adx   
236 [0xec]:         rmov adx, ebx   
237 [0xed]:         movi #0, ebx   
239 [0xef]:         movsl #0   
240 [0xf0]:         movi #39, adx   
242 [0xf2]:         rmov adx, ebx   
243 [0xf3]:         movi #0, ebx   
245 [0xf5]:         movsl #0   
246 [0xf6]:         movi #40, adx   
248 [0xf8]:         rmov adx, ebx   
249 [0xf9]:         movi #0, ebx   
251 [0xfb]:         movsl #0   
252 [0xfc]:         movi #41, adx   
254 [0xfe]:         rmov adx, ebx   
255 [0xff]:         movi #0, ebx   
257 [0x101]:         movsl #0   
258 [0x102]:         movi #42, adx   
260 [0x104]:         rmov adx, ebx   
261 [0x105]:         movi #0, ebx   
263 [0x107]:         movsl #0   
264 [0x108]:         movi #43, adx   
266 [0x10a]:         rmov adx, ebx   
267 [0x10b]:         movi #0, ebx   
269 [0x10d]:         movsl #0   
270 [0x10e]:         movi #44, adx   
272 [0x110]:         rmov adx, ebx   
273 [0x111]:         movi #0, ebx   
275 [0x113]:         movsl #0   
276 [0x114]:         movi #45, adx   
278 [0x116]:         rmov adx, ebx   
279 [0x117]:         movi #0, ebx   
281 [0x119]:         movsl #0   
282 [0x11a]:         movi #46, adx   
284 [0x11c]:         rmov adx, ebx   
285 [0x11d]:         movi #2, ebx   
287 [0x11f]:         movsl #0   
288 [0x120]:         movi #47, adx   
290 [0x122]:         rmov adx, ebx   
291 [0x123]:         movi #2, ebx   
293 [0x125]:         movsl #0   
294 [0x126]:         movi #48, adx   
296 [0x128]:         rmov adx, ebx   
297 [0x129]:         movi #2, ebx   
299 [0x12b]:         movsl #0   
300 [0x12c]:         movi #49, adx   
302 [0x12e]:         rmov adx, ebx   
303 [0x12f]:         movi #0, ebx   
305 [0x131]:         movsl #0   
306 [0x132]:         movi #50, adx   
308 [0x134]:         rmov adx, ebx   
309 [0x135]:         movi #0, ebx   
311 [0x137]:         movsl #0   
312 [0x138]:         movi #51, adx   
314 [0x13a]:         rmov adx, ebx   
315 [0x13b]:         movi #0, ebx   
317 [0x13d]:         movsl #0   
318 [0x13e]:         movi #52, adx   
320 [0x140]:         rmov adx, ebx   
321 [0x141]:         movi #0, ebx   
323 [0x143]:         movsl #0   
324 [0x144]:         movi #53, adx   
326 [0x146]:         rmov adx, ebx   
327 [0x147]:         movi #0, ebx   
329 [0x149]:         movsl #0   
330 [0x14a]:         movi #54, adx   
332 [0x14c]:         rmov adx, ebx   
333 [0x14d]:         movi #0, ebx   
335 [0x14f]:         movsl #0   
336 [0x150]:         movi #55, adx   
338 [0x152]:         rmov adx, ebx   
339 [0x153]:         movi #0, ebx   
341 [0x155]:         movsl #0   
342 [0x156]:         movi #56, adx   
344 [0x158]:         rmov adx, ebx   
345 [0x159]:         movi #0, ebx   
347 [0x15b]:         movsl #0   
348 [0x15c]:         movi #57, adx   
350 [0x15e]:         rmov adx, ebx   
351 [0x15f]:         movi #0, ebx   
353 [0x161]:         movsl #0   
354 [0x162]:         movi #58, adx   
356 [0x164]:         rmov adx, ebx   
357 [0x165]:         movi #0, ebx   
359 [0x167]:         movsl #0   
360 [0x168]:         movi #59, adx   
362 [0x16a]:         rmov adx, ebx   
363 [0x16b]:         movi #0, ebx   
365 [0x16d]:         movsl #0   
366 [0x16e]:         movi #60, adx   
368 [0x170]:         rmov adx, ebx   
369 [0x171]:         movi #0, ebx   
371 [0x173]:         movsl #0   
372 [0x174]:         movi #61, adx   
374 [0x176]:         rmov adx, ebx   
375 [0x177]:         movi #0, ebx   
377 [0x179]:         movsl #0   
378 [0x17a]:         movi #62, adx   
380 [0x17c]:         rmov adx, ebx   
381 [0x17d]:         movi #2, ebx   
383 [0x17f]:         movsl #0   
384 [0x180]:         movi #63, adx   
386 [0x182]:         rmov adx, ebx   
387 [0x183]:         movi #2, ebx   
389 [0x185]:         movsl #0   
390 [0x186]:         movi #64, adx   
392 [0x188]:         rmov adx, ebx   
393 [0x189]:         movi #2, ebx   
395 [0x18b]:         movsl #0   
396 [0x18c]:         movi #65, adx   
398 [0x18e]:         rmov adx, ebx   
399 [0x18f]:         movi #0, ebx   
401 [0x191]:         movsl #0   
402 [0x192]:         movi #66, adx   
404 [0x194]:         rmov adx, ebx   
405 [0x195]:         movi #0, ebx   
407 [0x197]:         movsl #0   
408 [0x198]:         movi #67, adx   
410 [0x19a]:         rmov adx, ebx   
411 [0x19b]:         movi #0, ebx   
413 [0x19d]:         movsl #0   
414 [0x19e]:         movi #68, adx   
416 [0x1a0]:         rmov adx, ebx   
417 [0x1a1]:         movi #0, ebx   
419 [0x1a3]:         movsl #0   
420 [0x1a4]:         movi #69, adx   
422 [0x1a6]:         rmov adx, ebx   
423 [0x1a7]:         movi #0, ebx   
425 [0x1a9]:         movsl #0   
426 [0x1aa]:         movi #70, adx   
428 [0x1ac]:         rmov adx, ebx   
429 [0x1ad]:         movi #0, ebx   
431 [0x1af]:         movsl #0   
432 [0x1b0]:         movi #71, adx   
434 [0x1b2]:         rmov adx, ebx   
435 [0x1b3]:         movi #0, ebx   
437 [0x1b5]:         movsl #0   
438 [0x1b6]:         movi #72, adx   
440 [0x1b8]:         rmov adx, ebx   
441 [0x1b9]:         movi #0, ebx   
443 [0x1bb]:         movsl #0   
444 [0x1bc]:         movi #73, adx   
446 [0x1be]:         rmov adx, ebx   
447 [0x1bf]:         movi #0, ebx   
449 [0x1c1]:         movsl #0   
450 [0x1c2]:         movi #74, adx   
452 [0x1c4]:         rmov adx, ebx   
453 [0x1c5]:         movi #0, ebx   
455 [0x1c7]:         movsl #0   
456 [0x1c8]:         movi #75, adx   
458 [0x1ca]:         rmov adx, ebx   
459 [0x1cb]:         movi #0, ebx   
461 [0x1cd]:         movsl #0   
462 [0x1ce]:         movi #76, adx   
464 [0x1d0]:         rmov adx, ebx   
465 [0x1d1]:         movi #0, ebx   
467 [0x1d3]:         movsl #0   
468 [0x1d4]:         movi #77, adx   
470 [0x1d6]:         rmov adx, ebx   
471 [0x1d7]:         movi #0, ebx   
473 [0x1d9]:         movsl #0   
474 [0x1da]:         movi #78, adx   
476 [0x1dc]:         rmov adx, ebx   
477 [0x1dd]:         movi #2, ebx   
479 [0x1df]:         movsl #0   
480 [0x1e0]:         movi #79, adx   
482 [0x1e2]:         rmov adx, ebx   
483 [0x1e3]:         movi #2, ebx   
485 [0x1e5]:         movsl #0   
486 [0x1e6]:         movi #80, adx   
488 [0x1e8]:         rmov adx, ebx   
489 [0x1e9]:         movi #2, ebx   
491 [0x1eb]:         movsl #0   
492 [0x1ec]:         movi #81, adx   
494 [0x1ee]:         rmov adx, ebx   
495 [0x1ef]:         movi #0, ebx   
497 [0x1f1]:         movsl #0   
498 [0x1f2]:         movi #82, adx   
500 [0x1f4]:         rmov adx, ebx   
501 [0x1f5]:         movi #0, ebx   
503 [0x1f7]:         movsl #0   
504 [0x1f8]:         movi #83, adx   
506 [0x1fa]:         rmov adx, ebx   
507 [0x1fb]:         movi #0, ebx   
509 [0x1fd]:         movsl #0   
510 [0x1fe]:         movi #84, adx   
512 [0x200]:         rmov adx, ebx   
513 [0x201]:         movi #0, ebx   
515 [0x203]:         movsl #0   
516 [0x204]:         movi #85, adx   
518 [0x206]:         rmov adx, ebx   
519 [0x207]:         movi #0, ebx   
521 [0x209]:         movsl #0   
522 [0x20a]:         movi #86, adx   
524 [0x20c]:         rmov adx, ebx   
525 [0x20d]:         movi #0, ebx   
527 [0x20f]:         movsl #0   
528 [0x210]:         movi #87, adx   
530 [0x212]:         rmov adx, ebx   
531 [0x213]:         movi #0, ebx   
533 [0x215]:         movsl #0   
534 [0x216]:         movi #88, adx   
536 [0x218]:         rmov adx, ebx   
537 [0x219]:         movi #0, ebx   
539 [0x21b]:         movsl #0   
540 [0x21c]:         movi #89, adx   
542 [0x21e]:         rmov adx, ebx   
543 [0x21f]:         movi #0, ebx   
545 [0x221]:         movsl #0   
546 [0x222]:         movi #90, adx   
548 [0x224]:         rmov adx, ebx   
549 [0x225]:         movi #0, ebx   
551 [0x227]:         movsl #0   
552 [0x228]:         movi #91, adx   
554 [0x22a]:         rmov adx, ebx   
555 [0x22b]:         movi #0, ebx   
557 [0x22d]:         movsl #0   
558 [0x22e]:         movi #92, adx   
560 [0x230]:         rmov adx, ebx   
561 [0x231]:         movi #0, ebx   
563 [0x233]:         movsl #0   
564 [0x234]:         movi #93, adx   
566 [0x236]:         rmov adx, ebx   
567 [0x237]:         movi #0, ebx   
569 [0x239]:         movsl #0   
570 [0x23a]:         movi #94, adx   
572 [0x23c]:         rmov adx, ebx   
573 [0x23d]:         movi #2, ebx   
575 [0x23f]:         movsl #0   
576 [0x240]:         movi #95, adx   
578 [0x242]:         rmov adx, ebx   
579 [0x243]:         movi #0, ebx   
581 [0x245]:         movsl #0   
582 [0x246]:         movi #96, adx   
584 [0x248]:         rmov adx, ebx   
585 [0x249]:         movi #2, ebx   
587 [0x24b]:         movsl #0   
588 [0x24c]:         movi #97, adx   
590 [0x24e]:         rmov adx, ebx   
591 [0x24f]:         movi #0, ebx   
593 [0x251]:         movsl #0   
594 [0x252]:         movi #98, adx   
596 [0x254]:         rmov adx, ebx   
597 [0x255]:         movi #0, ebx   
599 [0x257]:         movsl #0   
600 [0x258]:         movi #99, adx   
602 [0x25a]:         rmov adx, ebx   
603 [0x25b]:         movi #0, ebx   
605 [0x25d]:         movsl #0   
606 [0x25e]:         movi #100, adx   
608 [0x260]:         rmov adx, ebx   
609 [0x261]:         movi #0, ebx   
611 [0x263]:         movsl #0   
612 [0x264]:         movi #101, adx   
614 [0x266]:         rmov adx, ebx   
615 [0x267]:         movi #0, ebx   
617 [0x269]:         movsl #0   
618 [0x26a]:         movi #102, adx   
620 [0x26c]:         rmov adx, ebx   
621 [0x26d]:         movi #0, ebx   
623 [0x26f]:         movsl #0   
624 [0x270]:         movi #103, adx   
626 [0x272]:         rmov adx, ebx   
627 [0x273]:         movi #0, ebx   
629 [0x275]:         movsl #0   
630 [0x276]:         movi #104, adx   
632 [0x278]:         rmov adx, ebx   
633 [0x279]:         movi #0, ebx   
635 [0x27b]:         movsl #0   
636 [0x27c]:         movi #105, adx   
638 [0x27e]:         rmov adx, ebx   
639 [0x27f]:         movi #0, ebx   
641 [0x281]:         movsl #0   
642 [0x282]:         movi #106, adx   
644 [0x284]:         rmov adx, ebx   
645 [0x285]:         movi #0, ebx   
647 [0x287]:         movsl #0   
648 [0x288]:         movi #107, adx   
650 [0x28a]:         rmov adx, ebx   
651 [0x28b]:         movi #0, ebx   
653 [0x28d]:         movsl #0   
654 [0x28e]:         movi #108, adx   
656 [0x290]:         rmov adx, ebx   
657 [0x291]:         movi #0, ebx   
659 [0x293]:         movsl #0   
660 [0x294]:         movi #109, adx   
662 [0x296]:         rmov adx, ebx   
663 [0x297]:         movi #0, ebx   
665 [0x299]:         movsl #0   
666 [0x29a]:         movi #110, adx   
668 [0x29c]:         rmov adx, ebx   
669 [0x29d]:         movi #2, ebx   
671 [0x29f]:         movsl #0   
672 [0x2a0]:         movi #111, adx   
674 [0x2a2]:         rmov adx, ebx   
675 [0x2a3]:         movi #0, ebx   
677 [0x2a5]:         movsl #0   
678 [0x2a6]:         movi #112, adx   
680 [0x2a8]:         rmov adx, ebx   
681 [0x2a9]:         movi #2, ebx   
683 [0x2ab]:         movsl #0   
684 [0x2ac]:         movi #113, adx   
686 [0x2ae]:         rmov adx, ebx   
687 [0x2af]:         movi #2, ebx   
689 [0x2b1]:         movsl #0   
690 [0x2b2]:         movi #114, adx   
692 [0x2b4]:         rmov adx, ebx   
693 [0x2b5]:         movi #2, ebx   
695 [0x2b7]:         movsl #0   
696 [0x2b8]:         movi #115, adx   
698 [0x2ba]:         rmov adx, ebx   
699 [0x2bb]:         movi #2, ebx   
701 [0x2bd]:         movsl #0   
702 [0x2be]:         movi #116, adx   
704 [0x2c0]:         rmov adx, ebx   
705 [0x2c1]:         movi #2, ebx   
707 [0x2c3]:         movsl #0   
708 [0x2c4]:         movi #117, adx   
710 [0x2c6]:         rmov adx, ebx   
711 [0x2c7]:         movi #2, ebx   
713 [0x2c9]:         movsl #0   
714 [0x2ca]:         movi #118, adx   
716 [0x2cc]:         rmov adx, ebx   
717 [0x2cd]:         movi #2, ebx   
719 [0x2cf]:         movsl #0   
720 [0x2d0]:         movi #119, adx   
722 [0x2d2]:         rmov adx, ebx   
723 [0x2d3]:         movi #2, ebx   
725 [0x2d5]:         movsl #0   
726 [0x2d6]:         movi #120, adx   
728 [0x2d8]:         rmov adx, ebx   
729 [0x2d9]:         movi #2, ebx   
731 [0x2db]:         movsl #0   
732 [0x2dc]:         movi #121, adx   
734 [0x2de]:         rmov adx, ebx   
735 [0x2df]:         movi #2, ebx   
737 [0x2e1]:         movsl #0   
738 [0x2e2]:         movi #122, adx   
740 [0x2e4]:         rmov adx, ebx   
741 [0x2e5]:         movi #2, ebx   
743 [0x2e7]:         movsl #0   
744 [0x2e8]:         movi #123, adx   
746 [0x2ea]:         rmov adx, ebx   
747 [0x2eb]:         movi #2, ebx   
749 [0x2ed]:         movsl #0   
750 [0x2ee]:         movi #124, adx   
752 [0x2f0]:         rmov adx, ebx   
753 [0x2f1]:         movi #2, ebx   
755 [0x2f3]:         movsl #0   
756 [0x2f4]:         movi #125, adx   
758 [0x2f6]:         rmov adx, ebx   
759 [0x2f7]:         movi #2, ebx   
761 [0x2f9]:         movsl #0   
762 [0x2fa]:         movi #126, adx   
764 [0x2fc]:         rmov adx, ebx   
765 [0x2fd]:         movi #2, ebx   
767 [0x2ff]:         movsl #0   
768 [0x300]:         movi #127, adx   
770 [0x302]:         rmov adx, ebx   
771 [0x303]:         movi #0, ebx   
773 [0x305]:         movsl #0   
774 [0x306]:         movi #128, adx   
776 [0x308]:         rmov adx, ebx   
777 [0x309]:         movi #0, ebx   
779 [0x30b]:         movsl #0   
780 [0x30c]:         movi #129, adx   
782 [0x30e]:         rmov adx, ebx   
783 [0x30f]:         movi #0, ebx   
785 [0x311]:         movsl #0   
786 [0x312]:         movi #130, adx   
788 [0x314]:         rmov adx, ebx   
789 [0x315]:         movi #0, ebx   
791 [0x317]:         movsl #0   
792 [0x318]:         movi #131, adx   
794 [0x31a]:         rmov adx, ebx   
795 [0x31b]:         movi #0, ebx   
797 [0x31d]:         movsl #0   
798 [0x31e]:         movi #132, adx   
800 [0x320]:         rmov adx, ebx   
801 [0x321]:         movi #0, ebx   
803 [0x323]:         movsl #0   
804 [0x324]:         movi #133, adx   
806 [0x326]:         rmov adx, ebx   
807 [0x327]:         movi #0, ebx   
809 [0x329]:         movsl #0   
810 [0x32a]:         movi #134, adx   
812 [0x32c]:         rmov adx, ebx   
813 [0x32d]:         movi #0, ebx   
815 [0x32f]:         movsl #0   
816 [0x330]:         movi #135, adx   
818 [0x332]:         rmov adx, ebx   
819 [0x333]:         movi #0, ebx   
821 [0x335]:         movsl #0   
822 [0x336]:         movi #136, adx   
824 [0x338]:         rmov adx, ebx   
825 [0x339]:         movi #0, ebx   
827 [0x33b]:         movsl #0   
828 [0x33c]:         movi #137, adx   
830 [0x33e]:         rmov adx, ebx   
831 [0x33f]:         movi #0, ebx   
833 [0x341]:         movsl #0   
834 [0x342]:         movi #138, adx   
836 [0x344]:         rmov adx, ebx   
837 [0x345]:         movi #0, ebx   
839 [0x347]:         movsl #0   
840 [0x348]:         movi #139, adx   
842 [0x34a]:         rmov adx, ebx   
843 [0x34b]:         movi #0, ebx   
845 [0x34d]:         movsl #0   
846 [0x34e]:         movi #140, adx   
848 [0x350]:         rmov adx, ebx   
849 [0x351]:         movi #0, ebx   
851 [0x353]:         movsl #0   
852 [0x354]:         movi #141, adx   
854 [0x356]:         rmov adx, ebx   
855 [0x357]:         movi #0, ebx   
857 [0x359]:         movsl #0   
858 [0x35a]:         movi #142, adx   
860 [0x35c]:         rmov adx, ebx   
861 [0x35d]:         movi #0, ebx   
863 [0x35f]:         movsl #0   
864 [0x360]:         movi #143, adx   
866 [0x362]:         rmov adx, ebx   
867 [0x363]:         movg @108 // @ui.res.drawable#__srt_global   
868 [0x364]:         movn #0   
870 [0x366]:         popobj   
871 [0x367]:         new_class @121 // ui.support#drawable   
872 [0x368]:         dup    
873 [0x369]:         istore 13   
875 [0x36b]:         movg @108 // @ui.res.drawable#__srt_global   
876 [0x36c]:         movn #0   
878 [0x36e]:         pushobj   
879 [0x36f]:         istore 16   
881 [0x371]:         movi #9, ebx   
883 [0x373]:         rstore ebx   
884 [0x374]:         call @3181 // <ui.support#drawable.drawable>   
885 [0x375]:         movg @108 // @ui.res.drawable#__srt_global   
886 [0x376]:         movn #1   
888 [0x378]:         popobj   
889 [0x379]:         movi #144, ebx   
891 [0x37b]:         newarry ebx   
892 [0x37c]:         movi #0, ebx   
894 [0x37e]:         movsl #0   
895 [0x37f]:         movi #0, adx   
897 [0x381]:         rmov adx, ebx   
898 [0x382]:         movi #2, ebx   
900 [0x384]:         movsl #0   
901 [0x385]:         movi #1, adx   
903 [0x387]:         rmov adx, ebx   
904 [0x388]:         movi #2, ebx   
906 [0x38a]:         movsl #0   
907 [0x38b]:         movi #2, adx   
909 [0x38d]:         rmov adx, ebx   
910 [0x38e]:         movi #2, ebx   
912 [0x390]:         movsl #0   
913 [0x391]:         movi #3, adx   
915 [0x393]:         rmov adx, ebx   
916 [0x394]:         movi #2, ebx   
918 [0x396]:         movsl #0   
919 [0x397]:         movi #4, adx   
921 [0x399]:         rmov adx, ebx   
922 [0x39a]:         movi #2, ebx   
924 [0x39c]:         movsl #0   
925 [0x39d]:         movi #5, adx   
927 [0x39f]:         rmov adx, ebx   
928 [0x3a0]:         movi #2, ebx   
930 [0x3a2]:         movsl #0   
931 [0x3a3]:         movi #6, adx   
933 [0x3a5]:         rmov adx, ebx   
934 [0x3a6]:         movi #2, ebx   
936 [0x3a8]:         movsl #0   
937 [0x3a9]:         movi #7, adx   
939 [0x3ab]:         rmov adx, ebx   
940 [0x3ac]:         movi #2, ebx   
942 [0x3ae]:         movsl #0   
943 [0x3af]:         movi #8, adx   
945 [0x3b1]:         rmov adx, ebx   
946 [0x3b2]:         movi #2, ebx   
948 [0x3b4]:         movsl #0   
949 [0x3b5]:         movi #9, adx   
951 [0x3b7]:         rmov adx, ebx   
952 [0x3b8]:         movi #2, ebx   
954 [0x3ba]:         movsl #0   
955 [0x3bb]:         movi #10, adx   
957 [0x3bd]:         rmov adx, ebx   
958 [0x3be]:         movi #2, ebx   
960 [0x3c0]:         movsl #0   
961 [0x3c1]:         movi #11, adx   
963 [0x3c3]:         rmov adx, ebx   
964 [0x3c4]:         movi #2, ebx   
966 [0x3c6]:         movsl #0   
967 [0x3c7]:         movi #12, adx   
969 [0x3c9]:         rmov adx, ebx   
970 [0x3ca]:         movi #2, ebx   
972 [0x3cc]:         movsl #0   
973 [0x3cd]:         movi #13, adx   
975 [0x3cf]:         rmov adx, ebx   
976 [0x3d0]:         movi #2, ebx   
978 [0x3d2]:         movsl #0   
979 [0x3d3]:         movi #14, adx   
981 [0x3d5]:         rmov adx, ebx   
982 [0x3d6]:         movi #2, ebx   
984 [0x3d8]:         movsl #0   
985 [0x3d9]:         movi #15, adx   
987 [0x3db]:         rmov adx, ebx   
988 [0x3dc]:         movi #0, ebx   
990 [0x3de]:         movsl #0   
991 [0x3df]:         movi #16, adx   
993 [0x3e1]:         rmov adx, ebx   
994 [0x3e2]:         movi #2, ebx   
996 [0x3e4]:         movsl #0   
997 [0x3e5]:         movi #17, adx   
999 [0x3e7]:         rmov adx, ebx   
1000 [0x3e8]:         movi #0, ebx   
1002 [0x3ea]:         movsl #0   
1003 [0x3eb]:         movi #18, adx   
1005 [0x3ed]:         rmov adx, ebx   
1006 [0x3ee]:         movi #0, ebx   
1008 [0x3f0]:         movsl #0   
1009 [0x3f1]:         movi #19, adx   
1011 [0x3f3]:         rmov adx, ebx   
1012 [0x3f4]:         movi #0, ebx   
1014 [0x3f6]:         movsl #0   
1015 [0x3f7]:         movi #20, adx   
1017 [0x3f9]:         rmov adx, ebx   
1018 [0x3fa]:         movi #0, ebx   
1020 [0x3fc]:         movsl #0   
1021 [0x3fd]:         movi #21, adx   
1023 [0x3ff]:         rmov adx, ebx   
1024 [0x400]:         movi #0, ebx   
1026 [0x402]:         movsl #0   
1027 [0x403]:         movi #22, adx   
1029 [0x405]:         rmov adx, ebx   
1030 [0x406]:         movi #0, ebx   
1032 [0x408]:         movsl #0   
1033 [0x409]:         movi #23, adx   
1035 [0x40b]:         rmov adx, ebx   
1036 [0x40c]:         movi #0, ebx   
1038 [0x40e]:         movsl #0   
1039 [0x40f]:         movi #24, adx   
1041 [0x411]:         rmov adx, ebx   
1042 [0x412]:         movi #0, ebx   
1044 [0x414]:         movsl #0   
1045 [0x415]:         movi #25, adx   
1047 [0x417]:         rmov adx, ebx   
1048 [0x418]:         movi #0, ebx   
1050 [0x41a]:         movsl #0   
1051 [0x41b]:         movi #26, adx   
1053 [0x41d]:         rmov adx, ebx   
1054 [0x41e]:         movi #0, ebx   
1056 [0x420]:         movsl #0   
1057 [0x421]:         movi #27, adx   
1059 [0x423]:         rmov adx, ebx   
1060 [0x424]:         movi #0, ebx   
1062 [0x426]:         movsl #0   
1063 [0x427]:         movi #28, adx   
1065 [0x429]:         rmov adx, ebx   
1066 [0x42a]:         movi #0, ebx   
1068 [0x42c]:         movsl #0   
1069 [0x42d]:         movi #29, adx   
1071 [0x42f]:         rmov adx, ebx   
1072 [0x430]:         movi #0, ebx   
1074 [0x432]:         movsl #0   
1075 [0x433]:         movi #30, adx   
1077 [0x435]:         rmov adx, ebx   
1078 [0x436]:         movi #2, ebx   
1080 [0x438]:         movsl #0   
1081 [0x439]:         movi #31, adx   
1083 [0x43b]:         rmov adx, ebx   
1084 [0x43c]:         movi #2, ebx   
1086 [0x43e]:         movsl #0   
1087 [0x43f]:         movi #32, adx   
1089 [0x441]:         rmov adx, ebx   
1090 [0x442]:         movi #2, ebx   
1092 [0x444]:         movsl #0   
1093 [0x445]:         movi #33, adx   
1095 [0x447]:         rmov adx, ebx   
1096 [0x448]:         movi #0, ebx   
1098 [0x44a]:         movsl #0   
1099 [0x44b]:         movi #34, adx   
1101 [0x44d]:         rmov adx, ebx   
1102 [0x44e]:         movi #0, ebx   
1104 [0x450]:         movsl #0   
1105 [0x451]:         movi #35, adx   
1107 [0x453]:         rmov adx, ebx   
1108 [0x454]:         movi #0, ebx   
1110 [0x456]:         movsl #0   
1111 [0x457]:         movi #36, adx   
1113 [0x459]:         rmov adx, ebx   
1114 [0x45a]:         movi #0, ebx   
1116 [0x45c]:         movsl #0   
1117 [0x45d]:         movi #37, adx   
1119 [0x45f]:         rmov adx, ebx   
1120 [0x460]:         movi #0, ebx   
1122 [0x462]:         movsl #0   
1123 [0x463]:         movi #38, adx   
1125 [0x465]:         rmov adx, ebx   
1126 [0x466]:         movi #0, ebx   
1128 [0x468]:         movsl #0   
1129 [0x469]:         movi #39, adx   
1131 [0x46b]:         rmov adx, ebx   
1132 [0x46c]:         movi #0, ebx   
1134 [0x46e]:         movsl #0   
1135 [0x46f]:         movi #40, adx   
1137 [0x471]:         rmov adx, ebx   
1138 [0x472]:         movi #0, ebx   
1140 [0x474]:         movsl #0   
1141 [0x475]:         movi #41, adx   
1143 [0x477]:         rmov adx, ebx   
1144 [0x478]:         movi #0, ebx   
1146 [0x47a]:         movsl #0   
1147 [0x47b]:         movi #42, adx   
1149 [0x47d]:         rmov adx, ebx   
1150 [0x47e]:         movi #0, ebx   
1152 [0x480]:         movsl #0   
1153 [0x481]:         movi #43, adx   
1155 [0x483]:         rmov adx, ebx   
1156 [0x484]:         movi #2, ebx   
1158 [0x486]:         movsl #0   
1159 [0x487]:         movi #44, adx   
1161 [0x489]:         rmov adx, ebx   
1162 [0x48a]:         movi #2, ebx   
1164 [0x48c]:         movsl #0   
1165 [0x48d]:         movi #45, adx   
1167 [0x48f]:         rmov adx, ebx   
1168 [0x490]:         movi #0, ebx   
1170 [0x492]:         movsl #0   
1171 [0x493]:         movi #46, adx   
1173 [0x495]:         rmov adx, ebx   
1174 [0x496]:         movi #2, ebx   
1176 [0x498]:         movsl #0   
1177 [0x499]:         movi #47, adx   
1179 [0x49b]:         rmov adx, ebx   
1180 [0x49c]:         movi #2, ebx   
1182 [0x49e]:         movsl #0   
1183 [0x49f]:         movi #48, adx   
1185 [0x4a1]:         rmov adx, ebx   
1186 [0x4a2]:         movi #2, ebx   
1188 [0x4a4]:         movsl #0   
1189 [0x4a5]:         movi #49, adx   
1191 [0x4a7]:         rmov adx, ebx   
1192 [0x4a8]:         movi #0, ebx   
1194 [0x4aa]:         movsl #0   
1195 [0x4ab]:         movi #50, adx   
1197 [0x4ad]:         rmov adx, ebx   
1198 [0x4ae]:         movi #0, ebx   
1200 [0x4b0]:         movsl #0   
1201 [0x4b1]:         movi #51, adx   
1203 [0x4b3]:         rmov adx, ebx   
1204 [0x4b4]:         movi #0, ebx   
1206 [0x4b6]:         movsl #0   
1207 [0x4b7]:         movi #52, adx   
1209 [0x4b9]:         rmov adx, ebx   
1210 [0x4ba]:         movi #0, ebx   
1212 [0x4bc]:         movsl #0   
1213 [0x4bd]:         movi #53, adx   
1215 [0x4bf]:         rmov adx, ebx   
1216 [0x4c0]:         movi #0, ebx   
1218 [0x4c2]:         movsl #0   
1219 [0x4c3]:         movi #54, adx   
1221 [0x4c5]:         rmov adx, ebx   
1222 [0x4c6]:         movi #0, ebx   
1224 [0x4c8]:         movsl #0   
1225 [0x4c9]:         movi #55, adx   
1227 [0x4cb]:         rmov adx, ebx   
1228 [0x4cc]:         movi #0, ebx   
1230 [0x4ce]:         movsl #0   
1231 [0x4cf]:         movi #56, adx   
1233 [0x4d1]:         rmov adx, ebx   
1234 [0x4d2]:         movi #0, ebx   
1236 [0x4d4]:         movsl #0   
1237 [0x4d5]:         movi #57, adx   
1239 [0x4d7]:         rmov adx, ebx   
1240 [0x4d8]:         movi #0, ebx   
1242 [0x4da]:         movsl #0   
1243 [0x4db]:         movi #58, adx   
1245 [0x4dd]:         rmov adx, ebx   
1246 [0x4de]:         movi #0, ebx   
1248 [0x4e0]:         movsl #0   
1249 [0x4e1]:         movi #59, adx   
1251 [0x4e3]:         rmov adx, ebx   
1252 [0x4e4]:         movi #2, ebx   
1254 [0x4e6]:         movsl #0   
1255 [0x4e7]:         movi #60, adx   
1257 [0x4e9]:         rmov adx, ebx   
1258 [0x4ea]:         movi #2, ebx   
1260 [0x4ec]:         movsl #0   
1261 [0x4ed]:         movi #61, adx   
1263 [0x4ef]:         rmov adx, ebx   
1264 [0x4f0]:         movi #0, ebx   
1266 [0x4f2]:         movsl #0   
1267 [0x4f3]:         movi #62, adx   
1269 [0x4f5]:         rmov adx, ebx   
1270 [0x4f6]:         movi #2, ebx   
1272 [0x4f8]:         movsl #0   
1273 [0x4f9]:         movi #63, adx   
1275 [0x4fb]:         rmov adx, ebx   
1276 [0x4fc]:         movi #2, ebx   
1278 [0x4fe]:         movsl #0   
1279 [0x4ff]:         movi #64, adx   
1281 [0x501]:         rmov adx, ebx   
1282 [0x502]:         movi #2, ebx   
1284 [0x504]:         movsl #0   
1285 [0x505]:         movi #65, adx   
1287 [0x507]:         rmov adx, ebx   
1288 [0x508]:         movi #0, ebx   
1290 [0x50a]:         movsl #0   
1291 [0x50b]:         movi #66, adx   
1293 [0x50d]:         rmov adx, ebx   
1294 [0x50e]:         movi #0, ebx   
1296 [0x510]:         movsl #0   
1297 [0x511]:         movi #67, adx   
1299 [0x513]:         rmov adx, ebx   
1300 [0x514]:         movi #0, ebx   
1302 [0x516]:         movsl #0   
1303 [0x517]:         movi #68, adx   
1305 [0x519]:         rmov adx, ebx   
1306 [0x51a]:         movi #0, ebx   
1308 [0x51c]:         movsl #0   
1309 [0x51d]:         movi #69, adx   
1311 [0x51f]:         rmov adx, ebx   
1312 [0x520]:         movi #0, ebx   
1314 [0x522]:         movsl #0   
1315 [0x523]:         movi #70, adx   
1317 [0x525]:         rmov adx, ebx   
1318 [0x526]:         movi #0, ebx   
1320 [0x528]:         movsl #0   
1321 [0x529]:         movi #71, adx   
1323 [0x52b]:         rmov adx, ebx   
1324 [0x52c]:         movi #0, ebx   
1326 [0x52e]:         movsl #0   
1327 [0x52f]:         movi #72, adx   
1329 [0x531]:         rmov adx, ebx   
1330 [0x532]:         movi #0, ebx   
1332 [0x534]:         movsl #0   
1333 [0x535]:         movi #73, adx   
1335 [0x537]:         rmov adx, ebx   
1336 [0x538]:         movi #0, ebx   
1338 [0x53a]:         movsl #0   
1339 [0x53b]:         movi #74, adx   
1341 [0x53d]:         rmov adx, ebx   
1342 [0x53e]:         movi #0, ebx   
1344 [0x540]:         movsl #0   
1345 [0x541]:         movi #75, adx   
1347 [0x543]:         rmov adx, ebx   
1348 [0x544]:         movi #2, ebx   
1350 [0x546]:         movsl #0   
1351 [0x547]:         movi #76, adx   
1353 [0x549]:         rmov adx, ebx   
1354 [0x54a]:         movi #2, ebx   
1356 [0x54c]:         movsl #0   
1357 [0x54d]:         movi #77, adx   
1359 [0x54f]:         rmov adx, ebx   
1360 [0x550]:         movi #0, ebx   
1362 [0x552]:         movsl #0   
1363 [0x553]:         movi #78, adx   
1365 [0x555]:         rmov adx, ebx   
1366 [0x556]:         movi #2, ebx   
1368 [0x558]:         movsl #0   
1369 [0x559]:         movi #79, adx   
1371 [0x55b]:         rmov adx, ebx   
1372 [0x55c]:         movi #2, ebx   
1374 [0x55e]:         movsl #0   
1375 [0x55f]:         movi #80, adx   
1377 [0x561]:         rmov adx, ebx   
1378 [0x562]:         movi #2, ebx   
1380 [0x564]:         movsl #0   
1381 [0x565]:         movi #81, adx   
1383 [0x567]:         rmov adx, ebx   
1384 [0x568]:         movi #0, ebx   
1386 [0x56a]:         movsl #0   
1387 [0x56b]:         movi #82, adx   
1389 [0x56d]:         rmov adx, ebx   
1390 [0x56e]:         movi #0, ebx   
1392 [0x570]:         movsl #0   
1393 [0x571]:         movi #83, adx   
1395 [0x573]:         rmov adx, ebx   
1396 [0x574]:         movi #0, ebx   
1398 [0x576]:         movsl #0   
1399 [0x577]:         movi #84, adx   
1401 [0x579]:         rmov adx, ebx   
1402 [0x57a]:         movi #0, ebx   
1404 [0x57c]:         movsl #0   
1405 [0x57d]:         movi #85, adx   
1407 [0x57f]:         rmov adx, ebx   
1408 [0x580]:         movi #0, ebx   
1410 [0x582]:         movsl #0   
1411 [0x583]:         movi #86, adx   
1413 [0x585]:         rmov adx, ebx   
1414 [0x586]:         movi #0, ebx   
1416 [0x588]:         movsl #0   
1417 [0x589]:         movi #87, adx   
1419 [0x58b]:         rmov adx, ebx   
1420 [0x58c]:         movi #0, ebx   
1422 [0x58e]:         movsl #0   
1423 [0x58f]:         movi #88, adx   
1425 [0x591]:         rmov adx, ebx   
1426 [0x592]:         movi #0, ebx   
1428 [0x594]:         movsl #0   
1429 [0x595]:         movi #89, adx   
1431 [0x597]:         rmov adx, ebx   
1432 [0x598]:         movi #0, ebx   
1434 [0x59a]:         movsl #0   
1435 [0x59b]:         movi #90, adx   
1437 [0x59d]:         rmov adx, ebx   
1438 [0x59e]:         movi #0, ebx   
1440 [0x5a0]:         movsl #0   
1441 [0x5a1]:         movi #91, adx   
1443 [0x5a3]:         rmov adx, ebx   
1444 [0x5a4]:         movi #2, ebx   
1446 [0x5a6]:         movsl #0   
1447 [0x5a7]:         movi #92, adx   
1449 [0x5a9]:         rmov adx, ebx   
1450 [0x5aa]:         movi #2, ebx   
1452 [0x5ac]:         movsl #0   
1453 [0x5ad]:         movi #93, adx   
1455 [0x5af]:         rmov adx, ebx   
1456 [0x5b0]:         movi #0, ebx   
1458 [0x5b2]:         movsl #0   
1459 [0x5b3]:         movi #94, adx   
1461 [0x5b5]:         rmov adx, ebx   
1462 [0x5b6]:         movi #2, ebx   
1464 [0x5b8]:         movsl #0   
1465 [0x5b9]:         movi #95, adx   
1467 [0x5bb]:         rmov adx, ebx   
1468 [0x5bc]:         movi #0, ebx   
1470 [0x5be]:         movsl #0   
1471 [0x5bf]:         movi #96, adx   
1473 [0x5c1]:         rmov adx, ebx   
1474 [0x5c2]:         movi #2, ebx   
1476 [0x5c4]:         movsl #0   
1477 [0x5c5]:         movi #97, adx   
1479 [0x5c7]:         rmov adx, ebx   
1480 [0x5c8]:         movi #0, ebx   
1482 [0x5ca]:         movsl #0   
1483 [0x5cb]:         movi #98, adx   
1485 [0x5cd]:         rmov adx, ebx   
1486 [0x5ce]:         movi #0, ebx   
1488 [0x5d0]:         movsl #0   
1489 [0x5d1]:         movi #99, adx   
1491 [0x5d3]:         rmov adx, ebx   
1492 [0x5d4]:         movi #0, ebx   
1494 [0x5d6]:         movsl #0   
1495 [0x5d7]:         movi #100, adx   
1497 [0x5d9]:         rmov adx, ebx   
1498 [0x5da]:         movi #0, ebx   
1500 [0x5dc]:         movsl #0   
1501 [0x5dd]:         movi #101, adx   
1503 [0x5df]:         rmov adx, ebx   
1504 [0x5e0]:         movi #0, ebx   
1506 [0x5e2]:         movsl #0   
1507 [0x5e3]:         movi #102, adx   
1509 [0x5e5]:         rmov adx, ebx   
1510 [0x5e6]:         movi #0, ebx   
1512 [0x5e8]:         movsl #0   
1513 [0x5e9]:         movi #103, adx   
1515 [0x5eb]:         rmov adx, ebx   
1516 [0x5ec]:         movi #0, ebx   
1518 [0x5ee]:         movsl #0   
1519 [0x5ef]:         movi #104, adx   
1521 [0x5f1]:         rmov adx, ebx   
1522 [0x5f2]:         movi #0, ebx   
1524 [0x5f4]:         movsl #0   
1525 [0x5f5]:         movi #105, adx   
1527 [0x5f7]:         rmov adx, ebx   
1528 [0x5f8]:         movi #0, ebx   
1530 [0x5fa]:         movsl #0   
1531 [0x5fb]:         movi #106, adx   
1533 [0x5fd]:         rmov adx, ebx   
1534 [0x5fe]:         movi #0, ebx   
1536 [0x600]:         movsl #0   
1537 [0x601]:         movi #107, adx   
1539 [0x603]:         rmov adx, ebx   
1540 [0x604]:         movi #0, ebx   
1542 [0x606]:         movsl #0   
1543 [0x607]:         movi #108, adx   
1545 [0x609]:         rmov adx, ebx   
1546 [0x60a]:         movi #0, ebx   
1548 [0x60c]:         movsl #0   
1549 [0x60d]:         movi #109, adx   
1551 [0x60f]:         rmov adx, ebx   
1552 [0x610]:         movi #0, ebx   
1554 [0x612]:         movsl #0   
1555 [0x613]:         movi #110, adx   
1557 [0x615]:         rmov adx, ebx   
1558 [0x616]:         movi #2, ebx   
1560 [0x618]:         movsl #0   
1561 [0x619]:         movi #111, adx   
1563 [0x61b]:         rmov adx, ebx   
1564 [0x61c]:         movi #0, ebx   
1566 [0x61e]:         movsl #0   
1567 [0x61f]:         movi #112, adx   
1569 [0x621]:         rmov adx, ebx   
1570 [0x622]:         movi #2, ebx   
1572 [0x624]:         movsl #0   
1573 [0x625]:         movi #113, adx   
1575 [0x627]:         rmov adx, ebx   
1576 [0x628]:         movi #2, ebx   
1578 [0x62a]:         movsl #0   
1579 [0x62b]:         movi #114, adx   
1581 [0x62d]:         rmov adx, ebx   
1582 [0x62e]:         movi #2, ebx   
1584 [0x630]:         movsl #0   
1585 [0x631]:         movi #115, adx   
1587 [0x633]:         rmov adx, ebx   
1588 [0x634]:         movi #2, ebx   
1590 [0x636]:         movsl #0   
1591 [0x637]:         movi #116, adx   
1593 [0x639]:         rmov adx, ebx   
1594 [0x63a]:         movi #2, ebx   
1596 [0x63c]:         movsl #0   
1597 [0x63d]:         movi #117, adx   
1599 [0x63f]:         rmov adx, ebx   
1600 [0x640]:         movi #2, ebx   
1602 [0x642]:         movsl #0   
1603 [0x643]:         movi #118, adx   
1605 [0x645]:         rmov adx, ebx   
1606 [0x646]:         movi #2, ebx   
1608 [0x648]:         movsl #0   
1609 [0x649]:         movi #119, adx   
1611 [0x64b]:         rmov adx, ebx   
1612 [0x64c]:         movi #2, ebx   
1614 [0x64e]:         movsl #0   
1615 [0x64f]:         movi #120, adx   
1617 [0x651]:         rmov adx, ebx   
1618 [0x652]:         movi #2, ebx   
1620 [0x654]:         movsl #0   
1621 [0x655]:         movi #121, adx   
1623 [0x657]:         rmov adx, ebx   
1624 [0x658]:         movi #2, ebx   
1626 [0x65a]:         movsl #0   
1627 [0x65b]:         movi #122, adx   
1629 [0x65d]:         rmov adx, ebx   
1630 [0x65e]:         movi #2, ebx   
1632 [0x660]:         movsl #0   
1633 [0x661]:         movi #123, adx   
1635 [0x663]:         rmov adx, ebx   
1636 [0x664]:         movi #2, ebx   
1638 [0x666]:         movsl #0   
1639 [0x667]:         movi #124, adx   
1641 [0x669]:         rmov adx, ebx   
1642 [0x66a]:         movi #2, ebx   
1644 [0x66c]:         movsl #0   
1645 [0x66d]:         movi #125, adx   
1647 [0x66f]:         rmov adx, ebx   
1648 [0x670]:         movi #2, ebx   
1650 [0x672]:         movsl #0   
1651 [0x673]:         movi #126, adx   
1653 [0x675]:         rmov adx, ebx   
1654 [0x676]:         movi #2, ebx   
1656 [0x678]:         movsl #0   
1657 [0x679]:         movi #127, adx   
1659 [0x67b]:         rmov adx, ebx   
1660 [0x67c]:         movi #0, ebx   
1662 [0x67e]:         movsl #0   
1663 [0x67f]:         movi #128, adx   
1665 [0x681]:         rmov adx, ebx   
1666 [0x682]:         movi #0, ebx   
1668 [0x684]:         movsl #0   
1669 [0x685]:         movi #129, adx   
1671 [0x687]:         rmov adx, ebx   
1672 [0x688]:         movi #0, ebx   
1674 [0x68a]:         movsl #0   
1675 [0x68b]:         movi #130, adx   
1677 [0x68d]:         rmov adx, ebx   
1678 [0x68e]:         movi #0, ebx   
1680 [0x690]:         movsl #0   
1681 [0x691]:         movi #131, adx   
1683 [0x693]:         rmov adx, ebx   
1684 [0x694]:         movi #0, ebx   
1686 [0x696]:         movsl #0   
1687 [0x697]:         movi #132, adx   
1689 [0x699]:         rmov adx, ebx   
1690 [0x69a]:         movi #0, ebx   
1692 [0x69c]:         movsl #0   
1693 [0x69d]:         movi #133, adx   
1695 [0x69f]:         rmov adx, ebx   
1696 [0x6a0]:         movi #0, ebx   
1698 [0x6a2]:         movsl #0   
1699 [0x6a3]:         movi #134, adx   
1701 [0x6a5]:         rmov adx, ebx   
1702 [0x6a6]:         movi #0, ebx   
1704 [0x6a8]:         movsl #0   
1705 [0x6a9]:         movi #135, adx   
1707 [0x6ab]:         rmov adx, ebx   
1708 [0x6ac]:         movi #0, ebx   
1710 [0x6ae]:         movsl #0   
1711 [0x6af]:         movi #136, adx   
1713 [0x6b1]:         rmov adx, ebx   
1714 [0x6b2]:         movi #0, ebx   
1716 [0x6b4]:         movsl #0   
1717 [0x6b5]:         movi #137, adx   
1719 [0x6b7]:         rmov adx, ebx   
1720 [0x6b8]:         movi #0, ebx   
1722 [0x6ba]:         movsl #0   
1723 [0x6bb]:         movi #138, adx   
1725 [0x6bd]:         rmov adx, ebx   
1726 [0x6be]:         movi #0, ebx   
1728 [0x6c0]:         movsl #0   
1729 [0x6c1]:         movi #139, adx   
1731 [0x6c3]:         rmov adx, ebx   
1732 [0x6c4]:         movi #0, ebx   
1734 [0x6c6]:         movsl #0   
1735 [0x6c7]:         movi #140, adx   
1737 [0x6c9]:         rmov adx, ebx   
1738 [0x6ca]:         movi #0, ebx   
1740 [0x6cc]:         movsl #0   
1741 [0x6cd]:         movi #141, adx   
1743 [0x6cf]:         rmov adx, ebx   
1744 [0x6d0]:         movi #0, ebx   
1746 [0x6d2]:         movsl #0   
1747 [0x6d3]:         movi #142, adx   
1749 [0x6d5]:         rmov adx, ebx   
1750 [0x6d6]:         movi #0, ebx   
1752 [0x6d8]:         movsl #0   
1753 [0x6d9]:         movi #143, adx   
1755 [0x6db]:         rmov adx, ebx   
1756 [0x6dc]:         movg @108 // @ui.res.drawable#__srt_global   
1757 [0x6dd]:         movn #2   
1759 [0x6df]:         popobj   
1760 [0x6e0]:         new_class @121 // ui.support#drawable   
1761 [0x6e1]:         dup    
1762 [0x6e2]:         istore 14   
1764 [0x6e4]:         movg @108 // @ui.res.drawable#__srt_global   
1765 [0x6e5]:         movn #2   
1767 [0x6e7]:         pushobj   
1768 [0x6e8]:         istore 16   
1770 [0x6ea]:         movi #9, ebx   
1772 [0x6ec]:         rstore ebx   
1773 [0x6ed]:         call @3181 // <ui.support#drawable.drawable>   
1774 [0x6ee]:         movg @108 // @ui.res.drawable#__srt_global   
1775 [0x6ef]:         movn #3   
1777 [0x6f1]:         popobj   
1778 [0x6f2]:         movi #144, ebx   
1780 [0x6f4]:         newarry ebx   
1781 [0x6f5]:         movi #0, ebx   
1783 [0x6f7]:         movsl #0   
1784 [0x6f8]:         movi #0, adx   
1786 [0x6fa]:         rmov adx, ebx   
1787 [0x6fb]:         movi #2, ebx   
1789 [0x6fd]:         movsl #0   
1790 [0x6fe]:         movi #1, adx   
1792 [0x700]:         rmov adx, ebx   
1793 [0x701]:         movi #2, ebx   
1795 [0x703]:         movsl #0   
1796 [0x704]:         movi #2, adx   
1798 [0x706]:         rmov adx, ebx   
1799 [0x707]:         movi #2, ebx   
1801 [0x709]:         movsl #0   
1802 [0x70a]:         movi #3, adx   
1804 [0x70c]:         rmov adx, ebx   
1805 [0x70d]:         movi #2, ebx   
1807 [0x70f]:         movsl #0   
1808 [0x710]:         movi #4, adx   
1810 [0x712]:         rmov adx, ebx   
1811 [0x713]:         movi #2, ebx   
1813 [0x715]:         movsl #0   
1814 [0x716]:         movi #5, adx   
1816 [0x718]:         rmov adx, ebx   
1817 [0x719]:         movi #2, ebx   
1819 [0x71b]:         movsl #0   
1820 [0x71c]:         movi #6, adx   
1822 [0x71e]:         rmov adx, ebx   
1823 [0x71f]:         movi #2, ebx   
1825 [0x721]:         movsl #0   
1826 [0x722]:         movi #7, adx   
1828 [0x724]:         rmov adx, ebx   
1829 [0x725]:         movi #2, ebx   
1831 [0x727]:         movsl #0   
1832 [0x728]:         movi #8, adx   
1834 [0x72a]:         rmov adx, ebx   
1835 [0x72b]:         movi #2, ebx   
1837 [0x72d]:         movsl #0   
1838 [0x72e]:         movi #9, adx   
1840 [0x730]:         rmov adx, ebx   
1841 [0x731]:         movi #2, ebx   
1843 [0x733]:         movsl #0   
1844 [0x734]:         movi #10, adx   
1846 [0x736]:         rmov adx, ebx   
1847 [0x737]:         movi #2, ebx   
1849 [0x739]:         movsl #0   
1850 [0x73a]:         movi #11, adx   
1852 [0x73c]:         rmov adx, ebx   
1853 [0x73d]:         movi #2, ebx   
1855 [0x73f]:         movsl #0   
1856 [0x740]:         movi #12, adx   
1858 [0x742]:         rmov adx, ebx   
1859 [0x743]:         movi #2, ebx   
1861 [0x745]:         movsl #0   
1862 [0x746]:         movi #13, adx   
1864 [0x748]:         rmov adx, ebx   
1865 [0x749]:         movi #2, ebx   
1867 [0x74b]:         movsl #0   
1868 [0x74c]:         movi #14, adx   
1870 [0x74e]:         rmov adx, ebx   
1871 [0x74f]:         movi #2, ebx   
1873 [0x751]:         movsl #0   
1874 [0x752]:         movi #15, adx   
1876 [0x754]:         rmov adx, ebx   
1877 [0x755]:         movi #0, ebx   
1879 [0x757]:         movsl #0   
1880 [0x758]:         movi #16, adx   
1882 [0x75a]:         rmov adx, ebx   
1883 [0x75b]:         movi #2, ebx   
1885 [0x75d]:         movsl #0   
1886 [0x75e]:         movi #17, adx   
1888 [0x760]:         rmov adx, ebx   
1889 [0x761]:         movi #0, ebx   
1891 [0x763]:         movsl #0   
1892 [0x764]:         movi #18, adx   
1894 [0x766]:         rmov adx, ebx   
1895 [0x767]:         movi #0, ebx   
1897 [0x769]:         movsl #0   
1898 [0x76a]:         movi #19, adx   
1900 [0x76c]:         rmov adx, ebx   
1901 [0x76d]:         movi #0, ebx   
1903 [0x76f]:         movsl #0   
1904 [0x770]:         movi #20, adx   
1906 [0x772]:         rmov adx, ebx   
1907 [0x773]:         movi #0, ebx   
1909 [0x775]:         movsl #0   
1910 [0x776]:         movi #21, adx   
1912 [0x778]:         rmov adx, ebx   
1913 [0x779]:         movi #0, ebx   
1915 [0x77b]:         movsl #0   
1916 [0x77c]:         movi #22, adx   
1918 [0x77e]:         rmov adx, ebx   
1919 [0x77f]:         movi #0, ebx   
1921 [0x781]:         movsl #0   
1922 [0x782]:         movi #23, adx   
1924 [0x784]:         rmov adx, ebx   
1925 [0x785]:         movi #0, ebx   
1927 [0x787]:         movsl #0   
1928 [0x788]:         movi #24, adx   
1930 [0x78a]:         rmov adx, ebx   
1931 [0x78b]:         movi #0, ebx   
1933 [0x78d]:         movsl #0   
1934 [0x78e]:         movi #25, adx   
1936 [0x790]:         rmov adx, ebx   
1937 [0x791]:         movi #0, ebx   
1939 [0x793]:         movsl #0   
1940 [0x794]:         movi #26, adx   
1942 [0x796]:         rmov adx, ebx   
1943 [0x797]:         movi #0, ebx   
1945 [0x799]:         movsl #0   
1946 [0x79a]:         movi #27, adx   
1948 [0x79c]:         rmov adx, ebx   
1949 [0x79d]:         movi #0, ebx   
1951 [0x79f]:         movsl #0   
1952 [0x7a0]:         movi #28, adx   
1954 [0x7a2]:         rmov adx, ebx   
1955 [0x7a3]:         movi #0, ebx   
1957 [0x7a5]:         movsl #0   
1958 [0x7a6]:         movi #29, adx   
1960 [0x7a8]:         rmov adx, ebx   
1961 [0x7a9]:         movi #0, ebx   
1963 [0x7ab]:         movsl #0   
1964 [0x7ac]:         movi #30, adx   
1966 [0x7ae]:         rmov adx, ebx   
1967 [0x7af]:         movi #2, ebx   
1969 [0x7b1]:         movsl #0   
1970 [0x7b2]:         movi #31, adx   
1972 [0x7b4]:         rmov adx, ebx   
1973 [0x7b5]:         movi #2, ebx   
1975 [0x7b7]:         movsl #0   
1976 [0x7b8]:         movi #32, adx   
1978 [0x7ba]:         rmov adx, ebx   
1979 [0x7bb]:         movi #2, ebx   
1981 [0x7bd]:         movsl #0   
1982 [0x7be]:         movi #33, adx   
1984 [0x7c0]:         rmov adx, ebx   
1985 [0x7c1]:         movi #0, ebx   
1987 [0x7c3]:         movsl #0   
1988 [0x7c4]:         movi #34, adx   
1990 [0x7c6]:         rmov adx, ebx   
1991 [0x7c7]:         movi #0, ebx   
1993 [0x7c9]:         movsl #0   
1994 [0x7ca]:         movi #35, adx   
1996 [0x7cc]:         rmov adx, ebx   
1997 [0x7cd]:         movi #0, ebx   
1999 [0x7cf]:         movsl #0   
2000 [0x7d0]:         movi #36, adx   
2002 [0x7d2]:         rmov adx, ebx   
2003 [0x7d3]:         movi #0, ebx   
2005 [0x7d5]:         movsl #0   
2006 [0x7d6]:         movi #37, adx   
2008 [0x7d8]:         rmov adx, ebx   
2009 [0x7d9]:         movi #0, ebx   
2011 [0x7db]:         movsl #0   
2012 [0x7dc]:         movi #38, adx   
2014 [0x7de]:         rmov adx, ebx   
2015 [0x7df]:         movi #0, ebx   
2017 [0x7e1]:         movsl #0   
2018 [0x7e2]:         movi #39, adx   
2020 [0x7e4]:         rmov adx, ebx   
2021 [0x7e5]:         movi #0, ebx   
2023 [0x7e7]:         movsl #0   
2024 [0x7e8]:         movi #40, adx   
2026 [0x7ea]:         rmov adx, ebx   
2027 [0x7eb]:         movi #2, ebx   
2029 [0x7ed]:         movsl #0   
2030 [0x7ee]:         movi #41, adx   
2032 [0x7f0]:         rmov adx, ebx   
2033 [0x7f1]:         movi #2, ebx   
2035 [0x7f3]:         movsl #0   
2036 [0x7f4]:         movi #42, adx   
2038 [0x7f6]:         rmov adx, ebx   
2039 [0x7f7]:         movi #0, ebx   
2041 [0x7f9]:         movsl #0   
2042 [0x7fa]:         movi #43, adx   
2044 [0x7fc]:         rmov adx, ebx   
2045 [0x7fd]:         movi #2, ebx   
2047 [0x7ff]:         movsl #0   
2048 [0x800]:         movi #44, adx   
2050 [0x802]:         rmov adx, ebx   
2051 [0x803]:         movi #2, ebx   
2053 [0x805]:         movsl #0   
2054 [0x806]:         movi #45, adx   
2056 [0x808]:         rmov adx, ebx   
2057 [0x809]:         movi #0, ebx   
2059 [0x80b]:         movsl #0   
2060 [0x80c]:         movi #46, adx   
2062 [0x80e]:         rmov adx, ebx   
2063 [0x80f]:         movi #2, ebx   
2065 [0x811]:         movsl #0   
2066 [0x812]:         movi #47, adx   
2068 [0x814]:         rmov adx, ebx   
2069 [0x815]:         movi #2, ebx   
2071 [0x817]:         movsl #0   
2072 [0x818]:         movi #48, adx   
2074 [0x81a]:         rmov adx, ebx   
2075 [0x81b]:         movi #2, ebx   
2077 [0x81d]:         movsl #0   
2078 [0x81e]:         movi #49, adx   
2080 [0x820]:         rmov adx, ebx   
2081 [0x821]:         movi #0, ebx   
2083 [0x823]:         movsl #0   
2084 [0x824]:         movi #50, adx   
2086 [0x826]:         rmov adx, ebx   
2087 [0x827]:         movi #0, ebx   
2089 [0x829]:         movsl #0   
2090 [0x82a]:         movi #51, adx   
2092 [0x82c]:         rmov adx, ebx   
2093 [0x82d]:         movi #0, ebx   
2095 [0x82f]:         movsl #0   
2096 [0x830]:         movi #52, adx   
2098 [0x832]:         rmov adx, ebx   
2099 [0x833]:         movi #0, ebx   
2101 [0x835]:         movsl #0   
2102 [0x836]:         movi #53, adx   
2104 [0x838]:         rmov adx, ebx   
2105 [0x839]:         movi #0, ebx   
2107 [0x83b]:         movsl #0   
2108 [0x83c]:         movi #54, adx   
2110 [0x83e]:         rmov adx, ebx   
2111 [0x83f]:         movi #0, ebx   
2113 [0x841]:         movsl #0   
2114 [0x842]:         movi #55, adx   
2116 [0x844]:         rmov adx, ebx   
2117 [0x845]:         movi #0, ebx   
2119 [0x847]:         movsl #0   
2120 [0x848]:         movi #56, adx   
2122 [0x84a]:         rmov adx, ebx   
2123 [0x84b]:         movi #2, ebx   
2125 [0x84d]:         movsl #0   
2126 [0x84e]:         movi #57, adx   
2128 [0x850]:         rmov adx, ebx   
2129 [0x851]:         movi #2, ebx   
2131 [0x853]:         movsl #0   
2132 [0x854]:         movi #58, adx   
2134 [0x856]:         rmov adx, ebx   
2135 [0x857]:         movi #0, ebx   
2137 [0x859]:         movsl #0   
2138 [0x85a]:         movi #59, adx   
2140 [0x85c]:         rmov adx, ebx   
2141 [0x85d]:         movi #2, ebx   
2143 [0x85f]:         movsl #0   
2144 [0x860]:         movi #60, adx   
2146 [0x862]:         rmov adx, ebx   
2147 [0x863]:         movi #2, ebx   
2149 [0x865]:         movsl #0   
2150 [0x866]:         movi #61, adx   
2152 [0x868]:         rmov adx, ebx   
2153 [0x869]:         movi #0, ebx   
2155 [0x86b]:         movsl #0   
2156 [0x86c]:         movi #62, adx   
2158 [0x86e]:         rmov adx, ebx   
2159 [0x86f]:         movi #2, ebx   
2161 [0x871]:         movsl #0   
2162 [0x872]:         movi #63, adx   
2164 [0x874]:         rmov adx, ebx   
2165 [0x875]:         movi #2, ebx   
2167 [0x877]:         movsl #0   
2168 [0x878]:         movi #64, adx   
2170 [0x87a]:         rmov adx, ebx   
2171 [0x87b]:         movi #2, ebx   
2173 [0x87d]:         movsl #0   
2174 [0x87e]:         movi #65, adx   
2176 [0x880]:         rmov adx, ebx   
2177 [0x881]:         movi #0, ebx   
2179 [0x883]:         movsl #0   
2180 [0x884]:         movi #66, adx   
2182 [0x886]:         rmov adx, ebx   
2183 [0x887]:         movi #0, ebx   
2185 [0x889]:         movsl #0   
2186 [0x88a]:         movi #67, adx   
2188 [0x88c]:         rmov adx, ebx   
2189 [0x88d]:         movi #0, ebx   
2191 [0x88f]:         movsl #0   
2192 [0x890]:         movi #68, adx   
2194 [0x892]:         rmov adx, ebx   
2195 [0x893]:         movi #0, ebx   
2197 [0x895]:         movsl #0   
2198 [0x896]:         movi #69, adx   
2200 [0x898]:         rmov adx, ebx   
2201 [0x899]:         movi #0, ebx   
2203 [0x89b]:         movsl #0   
2204 [0x89c]:         movi #70, adx   
2206 [0x89e]:         rmov adx, ebx   
2207 [0x89f]:         movi #0, ebx   
2209 [0x8a1]:         movsl #0   
2210 [0x8a2]:         movi #71, adx   
2212 [0x8a4]:         rmov adx, ebx   
2213 [0x8a5]:         movi #0, ebx   
2215 [0x8a7]:         movsl #0   
2216 [0x8a8]:         movi #72, adx   
2218 [0x8aa]:         rmov adx, ebx   
2219 [0x8ab]:         movi #2, ebx   
2221 [0x8ad]:         movsl #0   
2222 [0x8ae]:         movi #73, adx   
2224 [0x8b0]:         rmov adx, ebx   
2225 [0x8b1]:         movi #2, ebx   
2227 [0x8b3]:         movsl #0   
2228 [0x8b4]:         movi #74, adx   
2230 [0x8b6]:         rmov adx, ebx   
2231 [0x8b7]:         movi #0, ebx   
2233 [0x8b9]:         movsl #0   
2234 [0x8ba]:         movi #75, adx   
2236 [0x8bc]:         rmov adx, ebx   
2237 [0x8bd]:         movi #2, ebx   
2239 [0x8bf]:         movsl #0   
2240 [0x8c0]:         movi #76, adx   
2242 [0x8c2]:         rmov adx, ebx   
2243 [0x8c3]:         movi #2, ebx   
2245 [0x8c5]:         movsl #0   
2246 [0x8c6]:         movi #77, adx   
2248 [0x8c8]:         rmov adx, ebx   
2249 [0x8c9]:         movi #0, ebx   
2251 [0x8cb]:         movsl #0   
2252 [0x8cc]:         movi #78, adx   
2254 [0x8ce]:         rmov adx, ebx   
2255 [0x8cf]:         movi #2, ebx   
2257 [0x8d1]:         movsl #0   
2258 [0x8d2]:         movi #79, adx   
2260 [0x8d4]:         rmov adx, ebx   
2261 [0x8d5]:         movi #2, ebx   
2263 [0x8d7]:         movsl #0   
2264 [0x8d8]:         movi #80, adx   
2266 [0x8da]:         rmov adx, ebx   
2267 [0x8db]:         movi #2, ebx   
2269 [0x8dd]:         movsl #0   
2270 [0x8de]:         movi #81, adx   
2272 [0x8e0]:         rmov adx, ebx   
2273 [0x8e1]:         movi #0, ebx   
2275 [0x8e3]:         movsl #0   
2276 [0x8e4]:         movi #82, adx   
2278 [0x8e6]:         rmov adx, ebx   
2279 [0x8e7]:         movi #0, ebx   
2281 [0x8e9]:         movsl #0   
2282 [0x8ea]:         movi #83, adx   
2284 [0x8ec]:         rmov adx, ebx   
2285 [0x8ed]:         movi #0, ebx   
2287 [0x8ef]:         movsl #0   
2288 [0x8f0]:         movi #84, adx   
2290 [0x8f2]:         rmov adx, ebx   
2291 [0x8f3]:         movi #0, ebx   
2293 [0x8f5]:         movsl #0   
2294 [0x8f6]:         movi #85, adx   
2296 [0x8f8]:         rmov adx, ebx   
2297 [0x8f9]:         movi #0, ebx   
2299 [0x8fb]:         movsl #0   
2300 [0x8fc]:         movi #86, adx   
2302 [0x8fe]:         rmov adx, ebx   
2303 [0x8ff]:         movi #0, ebx   
2305 [0x901]:         movsl #0   
2306 [0x902]:         movi #87, adx   
2308 [0x904]:         rmov adx, ebx   
2309 [0x905]:         movi #0, ebx   
2311 [0x907]:         movsl #0   
2312 [0x908]:         movi #88, adx   
2314 [0x90a]:         rmov adx, ebx   
2315 [0x90b]:         movi #2, ebx   
2317 [0x90d]:         movsl #0   
2318 [0x90e]:         movi #89, adx   
2320 [0x910]:         rmov adx, ebx   
2321 [0x911]:         movi #2, ebx   
2323 [0x913]:         movsl #0   
2324 [0x914]:         movi #90, adx   
2326 [0x916]:         rmov adx, ebx   
2327 [0x917]:         movi #0, ebx   
2329 [0x919]:         movsl #0   
2330 [0x91a]:         movi #91, adx   
2332 [0x91c]:         rmov adx, ebx   
2333 [0x91d]:         movi #2, ebx   
2335 [0x91f]:         movsl #0   
2336 [0x920]:         movi #92, adx   
2338 [0x922]:         rmov adx, ebx   
2339 [0x923]:         movi #2, ebx   
2341 [0x925]:         movsl #0   
2342 [0x926]:         movi #93, adx   
2344 [0x928]:         rmov adx, ebx   
2345 [0x929]:         movi #0, ebx   
2347 [0x92b]:         movsl #0   
2348 [0x92c]:         movi #94, adx   
2350 [0x92e]:         rmov adx, ebx   
2351 [0x92f]:         movi #2, ebx   
2353 [0x931]:         movsl #0   
2354 [0x932]:         movi #95, adx   
2356 [0x934]:         rmov adx, ebx   
2357 [0x935]:         movi #0, ebx   
2359 [0x937]:         movsl #0   
2360 [0x938]:         movi #96, adx   
2362 [0x93a]:         rmov adx, ebx   
2363 [0x93b]:         movi #2, ebx   
2365 [0x93d]:         movsl #0   
2366 [0x93e]:         movi #97, adx   
2368 [0x940]:         rmov adx, ebx   
2369 [0x941]:         movi #0, ebx   
2371 [0x943]:         movsl #0   
2372 [0x944]:         movi #98, adx   
2374 [0x946]:         rmov adx, ebx   
2375 [0x947]:         movi #0, ebx   
2377 [0x949]:         movsl #0   
2378 [0x94a]:         movi #99, adx   
2380 [0x94c]:         rmov adx, ebx   
2381 [0x94d]:         movi #0, ebx   
2383 [0x94f]:         movsl #0   
2384 [0x950]:         movi #100, adx   
2386 [0x952]:         rmov adx, ebx   
2387 [0x953]:         movi #0, ebx   
2389 [0x955]:         movsl #0   
2390 [0x956]:         movi #101, adx   
2392 [0x958]:         rmov adx, ebx   
2393 [0x959]:         movi #0, ebx   
2395 [0x95b]:         movsl #0   
2396 [0x95c]:         movi #102, adx   
2398 [0x95e]:         rmov adx, ebx   
2399 [0x95f]:         movi #0, ebx   
2401 [0x961]:         movsl #0   
2402 [0x962]:         movi #103, adx   
2404 [0x964]:         rmov adx, ebx   
2405 [0x965]:         movi #0, ebx   
2407 [0x967]:         movsl #0   
2408 [0x968]:         movi #104, adx   
2410 [0x96a]:         rmov adx, ebx   
2411 [0x96b]:         movi #0, ebx   
2413 [0x96d]:         movsl #0   
2414 [0x96e]:         movi #105, adx   
2416 [0x970]:         rmov adx, ebx   
2417 [0x971]:         movi #0, ebx   
2419 [0x973]:         movsl #0   
2420 [0x974]:         movi #106, adx   
2422 [0x976]:         rmov adx, ebx   
2423 [0x977]:         movi #0, ebx   
2425 [0x979]:         movsl #0   
2426 [0x97a]:         movi #107, adx   
2428 [0x97c]:         rmov adx, ebx   
2429 [0x97d]:         movi #0, ebx   
2431 [0x97f]:         movsl #0   
2432 [0x980]:         movi #108, adx   
2434 [0x982]:         rmov adx, ebx   
2435 [0x983]:         movi #0, ebx   
2437 [0x985]:         movsl #0   
2438 [0x986]:         movi #109, adx   
2440 [0x988]:         rmov adx, ebx   
2441 [0x989]:         movi #0, ebx   
2443 [0x98b]:         movsl #0   
2444 [0x98c]:         movi #110, adx   
2446 [0x98e]:         rmov adx, ebx   
2447 [0x98f]:         movi #2, ebx   
2449 [0x991]:         movsl #0   
2450 [0x992]:         movi #111, adx   
2452 [0x994]:         rmov adx, ebx   
2453 [0x995]:         movi #0, ebx   
2455 [0x997]:         movsl #0   
2456 [0x998]:         movi #112, adx   
2458 [0x99a]:         rmov adx, ebx   
2459 [0x99b]:         movi #2, ebx   
2461 [0x99d]:         movsl #0   
2462 [0x99e]:         movi #113, adx   
2464 [0x9a0]:         rmov adx, ebx   
2465 [0x9a1]:         movi #2, ebx   
2467 [0x9a3]:         movsl #0   
2468 [0x9a4]:         movi #114, adx   
2470 [0x9a6]:         rmov adx, ebx   
2471 [0x9a7]:         movi #2, ebx   
2473 [0x9a9]:         movsl #0   
2474 [0x9aa]:         movi #115, adx   
2476 [0x9ac]:         rmov adx, ebx   
2477 [0x9ad]:         movi #2, ebx   
2479 [0x9af]:         movsl #0   
2480 [0x9b0]:         movi #116, adx   
2482 [0x9b2]:         rmov adx, ebx   
2483 [0x9b3]:         movi #2, ebx   
2485 [0x9b5]:         movsl #0   
2486 [0x9b6]:         movi #117, adx   
2488 [0x9b8]:         rmov adx, ebx   
2489 [0x9b9]:         movi #2, ebx   
2491 [0x9bb]:         movsl #0   
2492 [0x9bc]:         movi #118, adx   
2494 [0x9be]:         rmov adx, ebx   
2495 [0x9bf]:         movi #2, ebx   
2497 [0x9c1]:         movsl #0   
2498 [0x9c2]:         movi #119, adx   
2500 [0x9c4]:         rmov adx, ebx   
2501 [0x9c5]:         movi #2, ebx   
2503 [0x9c7]:         movsl #0   
2504 [0x9c8]:         movi #120, adx   
2506 [0x9ca]:         rmov adx, ebx   
2507 [0x9cb]:         movi #2, ebx   
2509 [0x9cd]:         movsl #0   
2510 [0x9ce]:         movi #121, adx   
2512 [0x9d0]:         rmov adx, ebx   
2513 [0x9d1]:         movi #2, ebx   
2515 [0x9d3]:         movsl #0   
2516 [0x9d4]:         movi #122, adx   
2518 [0x9d6]:         rmov adx, ebx   
2519 [0x9d7]:         movi #2, ebx   
2521 [0x9d9]:         movsl #0   
2522 [0x9da]:         movi #123, adx   
2524 [0x9dc]:         rmov adx, ebx   
2525 [0x9dd]:         movi #2, ebx   
2527 [0x9df]:         movsl #0   
2528 [0x9e0]:         movi #124, adx   
2530 [0x9e2]:         rmov adx, ebx   
2531 [0x9e3]:         movi #2, ebx   
2533 [0x9e5]:         movsl #0   
2534 [0x9e6]:         movi #125, adx   
2536 [0x9e8]:         rmov adx, ebx   
2537 [0x9e9]:         movi #2, ebx   
2539 [0x9eb]:         movsl #0   
2540 [0x9ec]:         movi #126, adx   
2542 [0x9ee]:         rmov adx, ebx   
2543 [0x9ef]:         movi #2, ebx   
2545 [0x9f1]:         movsl #0   
2546 [0x9f2]:         movi #127, adx   
2548 [0x9f4]:         rmov adx, ebx   
2549 [0x9f5]:         movi #0, ebx   
2551 [0x9f7]:         movsl #0   
2552 [0x9f8]:         movi #128, adx   
2554 [0x9fa]:         rmov adx, ebx   
2555 [0x9fb]:         movi #0, ebx   
2557 [0x9fd]:         movsl #0   
2558 [0x9fe]:         movi #129, adx   
2560 [0xa00]:         rmov adx, ebx   
2561 [0xa01]:         movi #0, ebx   
2563 [0xa03]:         movsl #0   
2564 [0xa04]:         movi #130, adx   
2566 [0xa06]:         rmov adx, ebx   
2567 [0xa07]:         movi #0, ebx   
2569 [0xa09]:         movsl #0   
2570 [0xa0a]:         movi #131, adx   
2572 [0xa0c]:         rmov adx, ebx   
2573 [0xa0d]:         movi #0, ebx   
2575 [0xa0f]:         movsl #0   
2576 [0xa10]:         movi #132, adx   
2578 [0xa12]:         rmov adx, ebx   
2579 [0xa13]:         movi #0, ebx   
2581 [0xa15]:         movsl #0   
2582 [0xa16]:         movi #133, adx   
2584 [0xa18]:         rmov adx, ebx   
2585 [0xa19]:         movi #0, ebx   
2587 [0xa1b]:         movsl #0   
2588 [0xa1c]:         movi #134, adx   
2590 [0xa1e]:         rmov adx, ebx   
2591 [0xa1f]:         movi #0, ebx   
2593 [0xa21]:         movsl #0   
2594 [0xa22]:         movi #135, adx   
2596 [0xa24]:         rmov adx, ebx   
2597 [0xa25]:         movi #0, ebx   
2599 [0xa27]:         movsl #0   
2600 [0xa28]:         movi #136, adx   
2602 [0xa2a]:         rmov adx, ebx   
2603 [0xa2b]:         movi #0, ebx   
2605 [0xa2d]:         movsl #0   
2606 [0xa2e]:         movi #137, adx   
2608 [0xa30]:         rmov adx, ebx   
2609 [0xa31]:         movi #0, ebx   
2611 [0xa33]:         movsl #0   
2612 [0xa34]:         movi #138, adx   
2614 [0xa36]:         rmov adx, ebx   
2615 [0xa37]:         movi #0, ebx   
2617 [0xa39]:         movsl #0   
2618 [0xa3a]:         movi #139, adx   
2620 [0xa3c]:         rmov adx, ebx   
2621 [0xa3d]:         movi #0, ebx   
2623 [0xa3f]:         movsl #0   
2624 [0xa40]:         movi #140, adx   
2626 [0xa42]:         rmov adx, ebx   
2627 [0xa43]:         movi #0, ebx   
2629 [0xa45]:         movsl #0   
2630 [0xa46]:         movi #141, adx   
2632 [0xa48]:         rmov adx, ebx   
2633 [0xa49]:         movi #0, ebx   
2635 [0xa4b]:         movsl #0   
2636 [0xa4c]:         movi #142, adx   
2638 [0xa4e]:         rmov adx, ebx   
2639 [0xa4f]:         movi #0, ebx   
2641 [0xa51]:         movsl #0   
2642 [0xa52]:         movi #143, adx   
2644 [0xa54]:         rmov adx, ebx   
2645 [0xa55]:         movg @108 // @ui.res.drawable#__srt_global   
2646 [0xa56]:         movn #4   
2648 [0xa58]:         popobj   
2649 [0xa59]:         new_class @121 // ui.support#drawable   
2650 [0xa5a]:         dup    
2651 [0xa5b]:         istore 15   
2653 [0xa5d]:         movg @108 // @ui.res.drawable#__srt_global   
2654 [0xa5e]:         movn #4   
2656 [0xa60]:         pushobj   
2657 [0xa61]:         istore 16   
2659 [0xa63]:         movi #9, ebx   
2661 [0xa65]:         rstore ebx   
2662 [0xa66]:         call @3181 // <ui.support#drawable.drawable>   
2663 [0xa67]:         movg @108 // @ui.res.drawable#__srt_global   
2664 [0xa68]:         movn #5   
2666 [0xa6a]:         popobj   
2667 [0xa6b]:         movi #144, ebx   
2669 [0xa6d]:         newarry ebx   
2670 [0xa6e]:         movi #0, ebx   
2672 [0xa70]:         movsl #0   
2673 [0xa71]:         movi #0, adx   
2675 [0xa73]:         rmov adx, ebx   
2676 [0xa74]:         movi #2, ebx   
2678 [0xa76]:         movsl #0   
2679 [0xa77]:         movi #1, adx   
2681 [0xa79]:         rmov adx, ebx   
2682 [0xa7a]:         movi #2, ebx   
2684 [0xa7c]:         movsl #0   
2685 [0xa7d]:         movi #2, adx   
2687 [0xa7f]:         rmov adx, ebx   
2688 [0xa80]:         movi #2, ebx   
2690 [0xa82]:         movsl #0   
2691 [0xa83]:         movi #3, adx   
2693 [0xa85]:         rmov adx, ebx   
2694 [0xa86]:         movi #2, ebx   
2696 [0xa88]:         movsl #0   
2697 [0xa89]:         movi #4, adx   
2699 [0xa8b]:         rmov adx, ebx   
2700 [0xa8c]:         movi #2, ebx   
2702 [0xa8e]:         movsl #0   
2703 [0xa8f]:         movi #5, adx   
2705 [0xa91]:         rmov adx, ebx   
2706 [0xa92]:         movi #2, ebx   
2708 [0xa94]:         movsl #0   
2709 [0xa95]:         movi #6, adx   
2711 [0xa97]:         rmov adx, ebx   
2712 [0xa98]:         movi #2, ebx   
2714 [0xa9a]:         movsl #0   
2715 [0xa9b]:         movi #7, adx   
2717 [0xa9d]:         rmov adx, ebx   
2718 [0xa9e]:         movi #2, ebx   
2720 [0xaa0]:         movsl #0   
2721 [0xaa1]:         movi #8, adx   
2723 [0xaa3]:         rmov adx, ebx   
2724 [0xaa4]:         movi #2, ebx   
2726 [0xaa6]:         movsl #0   
2727 [0xaa7]:         movi #9, adx   
2729 [0xaa9]:         rmov adx, ebx   
2730 [0xaaa]:         movi #2, ebx   
2732 [0xaac]:         movsl #0   
2733 [0xaad]:         movi #10, adx   
2735 [0xaaf]:         rmov adx, ebx   
2736 [0xab0]:         movi #2, ebx   
2738 [0xab2]:         movsl #0   
2739 [0xab3]:         movi #11, adx   
2741 [0xab5]:         rmov adx, ebx   
2742 [0xab6]:         movi #2, ebx   
2744 [0xab8]:         movsl #0   
2745 [0xab9]:         movi #12, adx   
2747 [0xabb]:         rmov adx, ebx   
2748 [0xabc]:         movi #2, ebx   
2750 [0xabe]:         movsl #0   
2751 [0xabf]:         movi #13, adx   
2753 [0xac1]:         rmov adx, ebx   
2754 [0xac2]:         movi #2, ebx   
2756 [0xac4]:         movsl #0   
2757 [0xac5]:         movi #14, adx   
2759 [0xac7]:         rmov adx, ebx   
2760 [0xac8]:         movi #2, ebx   
2762 [0xaca]:         movsl #0   
2763 [0xacb]:         movi #15, adx   
2765 [0xacd]:         rmov adx, ebx   
2766 [0xace]:         movi #0, ebx   
2768 [0xad0]:         movsl #0   
2769 [0xad1]:         movi #16, adx   
2771 [0xad3]:         rmov adx, ebx   
2772 [0xad4]:         movi #2, ebx   
2774 [0xad6]:         movsl #0   
2775 [0xad7]:         movi #17, adx   
2777 [0xad9]:         rmov adx, ebx   
2778 [0xada]:         movi #0, ebx   
2780 [0xadc]:         movsl #0   
2781 [0xadd]:         movi #18, adx   
2783 [0xadf]:         rmov adx, ebx   
2784 [0xae0]:         movi #0, ebx   
2786 [0xae2]:         movsl #0   
2787 [0xae3]:         movi #19, adx   
2789 [0xae5]:         rmov adx, ebx   
2790 [0xae6]:         movi #0, ebx   
2792 [0xae8]:         movsl #0   
2793 [0xae9]:         movi #20, adx   
2795 [0xaeb]:         rmov adx, ebx   
2796 [0xaec]:         movi #0, ebx   
2798 [0xaee]:         movsl #0   
2799 [0xaef]:         movi #21, adx   
2801 [0xaf1]:         rmov adx, ebx   
2802 [0xaf2]:         movi #0, ebx   
2804 [0xaf4]:         movsl #0   
2805 [0xaf5]:         movi #22, adx   
2807 [0xaf7]:         rmov adx, ebx   
2808 [0xaf8]:         movi #0, ebx   
2810 [0xafa]:         movsl #0   
2811 [0xafb]:         movi #23, adx   
2813 [0xafd]:         rmov adx, ebx   
2814 [0xafe]:         movi #0, ebx   
2816 [0xb00]:         movsl #0   
2817 [0xb01]:         movi #24, adx   
2819 [0xb03]:         rmov adx, ebx   
2820 [0xb04]:         movi #0, ebx   
2822 [0xb06]:         movsl #0   
2823 [0xb07]:         movi #25, adx   
2825 [0xb09]:         rmov adx, ebx   
2826 [0xb0a]:         movi #0, ebx   
2828 [0xb0c]:         movsl #0   
2829 [0xb0d]:         movi #26, adx   
2831 [0xb0f]:         rmov adx, ebx   
2832 [0xb10]:         movi #0, ebx   
2834 [0xb12]:         movsl #0   
2835 [0xb13]:         movi #27, adx   
2837 [0xb15]:         rmov adx, ebx   
2838 [0xb16]:         movi #0, ebx   
2840 [0xb18]:         movsl #0   
2841 [0xb19]:         movi #28, adx   
2843 [0xb1b]:         rmov adx, ebx   
2844 [0xb1c]:         movi #0, ebx   
2846 [0xb1e]:         movsl #0   
2847 [0xb1f]:         movi #29, adx   
2849 [0xb21]:         rmov adx, ebx   
2850 [0xb22]:         movi #0, ebx   
2852 [0xb24]:         movsl #0   
2853 [0xb25]:         movi #30, adx   
2855 [0xb27]:         rmov adx, ebx   
2856 [0xb28]:         movi #2, ebx   
2858 [0xb2a]:         movsl #0   
2859 [0xb2b]:         movi #31, adx   
2861 [0xb2d]:         rmov adx, ebx   
2862 [0xb2e]:         movi #2, ebx   
2864 [0xb30]:         movsl #0   
2865 [0xb31]:         movi #32, adx   
2867 [0xb33]:         rmov adx, ebx   
2868 [0xb34]:         movi #2, ebx   
2870 [0xb36]:         movsl #0   
2871 [0xb37]:         movi #33, adx   
2873 [0xb39]:         rmov adx, ebx   
2874 [0xb3a]:         movi #0, ebx   
2876 [0xb3c]:         movsl #0   
2877 [0xb3d]:         movi #34, adx   
2879 [0xb3f]:         rmov adx, ebx   
2880 [0xb40]:         movi #0, ebx   
2882 [0xb42]:         movsl #0   
2883 [0xb43]:         movi #35, adx   
2885 [0xb45]:         rmov adx, ebx   
2886 [0xb46]:         movi #0, ebx   
2888 [0xb48]:         movsl #0   
2889 [0xb49]:         movi #36, adx   
2891 [0xb4b]:         rmov adx, ebx   
2892 [0xb4c]:         movi #0, ebx   
2894 [0xb4e]:         movsl #0   
2895 [0xb4f]:         movi #37, adx   
2897 [0xb51]:         rmov adx, ebx   
2898 [0xb52]:         movi #2, ebx   
2900 [0xb54]:         movsl #0   
2901 [0xb55]:         movi #38, adx   
2903 [0xb57]:         rmov adx, ebx   
2904 [0xb58]:         movi #2, ebx   
2906 [0xb5a]:         movsl #0   
2907 [0xb5b]:         movi #39, adx   
2909 [0xb5d]:         rmov adx, ebx   
2910 [0xb5e]:         movi #0, ebx   
2912 [0xb60]:         movsl #0   
2913 [0xb61]:         movi #40, adx   
2915 [0xb63]:         rmov adx, ebx   
2916 [0xb64]:         movi #2, ebx   
2918 [0xb66]:         movsl #0   
2919 [0xb67]:         movi #41, adx   
2921 [0xb69]:         rmov adx, ebx   
2922 [0xb6a]:         movi #2, ebx   
2924 [0xb6c]:         movsl #0   
2925 [0xb6d]:         movi #42, adx   
2927 [0xb6f]:         rmov adx, ebx   
2928 [0xb70]:         movi #0, ebx   
2930 [0xb72]:         movsl #0   
2931 [0xb73]:         movi #43, adx   
2933 [0xb75]:         rmov adx, ebx   
2934 [0xb76]:         movi #2, ebx   
2936 [0xb78]:         movsl #0   
2937 [0xb79]:         movi #44, adx   
2939 [0xb7b]:         rmov adx, ebx   
2940 [0xb7c]:         movi #2, ebx   
2942 [0xb7e]:         movsl #0   
2943 [0xb7f]:         movi #45, adx   
2945 [0xb81]:         rmov adx, ebx   
2946 [0xb82]:         movi #0, ebx   
2948 [0xb84]:         movsl #0   
2949 [0xb85]:         movi #46, adx   
2951 [0xb87]:         rmov adx, ebx   
2952 [0xb88]:         movi #2, ebx   
2954 [0xb8a]:         movsl #0   
2955 [0xb8b]:         movi #47, adx   
2957 [0xb8d]:         rmov adx, ebx   
2958 [0xb8e]:         movi #2, ebx   
2960 [0xb90]:         movsl #0   
2961 [0xb91]:         movi #48, adx   
2963 [0xb93]:         rmov adx, ebx   
2964 [0xb94]:         movi #2, ebx   
2966 [0xb96]:         movsl #0   
2967 [0xb97]:         movi #49, adx   
2969 [0xb99]:         rmov adx, ebx   
2970 [0xb9a]:         movi #0, ebx   
2972 [0xb9c]:         movsl #0   
2973 [0xb9d]:         movi #50, adx   
2975 [0xb9f]:         rmov adx, ebx   
2976 [0xba0]:         movi #0, ebx   
2978 [0xba2]:         movsl #0   
2979 [0xba3]:         movi #51, adx   
2981 [0xba5]:         rmov adx, ebx   
2982 [0xba6]:         movi #0, ebx   
2984 [0xba8]:         movsl #0   
2985 [0xba9]:         movi #52, adx   
2987 [0xbab]:         rmov adx, ebx   
2988 [0xbac]:         movi #0, ebx   
2990 [0xbae]:         movsl #0   
2991 [0xbaf]:         movi #53, adx   
2993 [0xbb1]:         rmov adx, ebx   
2994 [0xbb2]:         movi #2, ebx   
2996 [0xbb4]:         movsl #0   
2997 [0xbb5]:         movi #54, adx   
2999 [0xbb7]:         rmov adx, ebx   
3000 [0xbb8]:         movi #2, ebx   
3002 [0xbba]:         movsl #0   
3003 [0xbbb]:         movi #55, adx   
3005 [0xbbd]:         rmov adx, ebx   
3006 [0xbbe]:         movi #0, ebx   
3008 [0xbc0]:         movsl #0   
3009 [0xbc1]:         movi #56, adx   
3011 [0xbc3]:         rmov adx, ebx   
3012 [0xbc4]:         movi #2, ebx   
3014 [0xbc6]:         movsl #0   
3015 [0xbc7]:         movi #57, adx   
3017 [0xbc9]:         rmov adx, ebx   
3018 [0xbca]:         movi #2, ebx   
3020 [0xbcc]:         movsl #0   
3021 [0xbcd]:         movi #58, adx   
3023 [0xbcf]:         rmov adx, ebx   
3024 [0xbd0]:         movi #0, ebx   
3026 [0xbd2]:         movsl #0   
3027 [0xbd3]:         movi #59, adx   
3029 [0xbd5]:         rmov adx, ebx   
3030 [0xbd6]:         movi #2, ebx   
3032 [0xbd8]:         movsl #0   
3033 [0xbd9]:         movi #60, adx   
3035 [0xbdb]:         rmov adx, ebx   
3036 [0xbdc]:         movi #2, ebx   
3038 [0xbde]:         movsl #0   
3039 [0xbdf]:         movi #61, adx   
3041 [0xbe1]:         rmov adx, ebx   
3042 [0xbe2]:         movi #0, ebx   
3044 [0xbe4]:         movsl #0   
3045 [0xbe5]:         movi #62, adx   
3047 [0xbe7]:         rmov adx, ebx   
3048 [0xbe8]:         movi #2, ebx   
3050 [0xbea]:         movsl #0   
3051 [0xbeb]:         movi #63, adx   
3053 [0xbed]:         rmov adx, ebx   
3054 [0xbee]:         movi #2, ebx   
3056 [0xbf0]:         movsl #0   
3057 [0xbf1]:         movi #64, adx   
3059 [0xbf3]:         rmov adx, ebx   
3060 [0xbf4]:         movi #2, ebx   
3062 [0xbf6]:         movsl #0   
3063 [0xbf7]:         movi #65, adx   
3065 [0xbf9]:         rmov adx, ebx   
3066 [0xbfa]:         movi #0, ebx   
3068 [0xbfc]:         movsl #0   
3069 [0xbfd]:         movi #66, adx   
3071 [0xbff]:         rmov adx, ebx   
3072 [0xc00]:         movi #0, ebx   
3074 [0xc02]:         movsl #0   
3075 [0xc03]:         movi #67, adx   
3077 [0xc05]:         rmov adx, ebx   
3078 [0xc06]:         movi #0, ebx   
3080 [0xc08]:         movsl #0   
3081 [0xc09]:         movi #68, adx   
3083 [0xc0b]:         rmov adx, ebx   
3084 [0xc0c]:         movi #0, ebx   
3086 [0xc0e]:         movsl #0   
3087 [0xc0f]:         movi #69, adx   
3089 [0xc11]:         rmov adx, ebx   
3090 [0xc12]:         movi #2, ebx   
3092 [0xc14]:         movsl #0   
3093 [0xc15]:         movi #70, adx   
3095 [0xc17]:         rmov adx, ebx   
3096 [0xc18]:         movi #2, ebx   
3098 [0xc1a]:         movsl #0   
3099 [0xc1b]:         movi #71, adx   
3101 [0xc1d]:         rmov adx, ebx   
3102 [0xc1e]:         movi #0, ebx   
3104 [0xc20]:         movsl #0   
3105 [0xc21]:         movi #72, adx   
3107 [0xc23]:         rmov adx, ebx   
3108 [0xc24]:         movi #2, ebx   
3110 [0xc26]:         movsl #0   
3111 [0xc27]:         movi #73, adx   
3113 [0xc29]:         rmov adx, ebx   
3114 [0xc2a]:         movi #2, ebx   
3116 [0xc2c]:         movsl #0   
3117 [0xc2d]:         movi #74, adx   
3119 [0xc2f]:         rmov adx, ebx   
3120 [0xc30]:         movi #0, ebx   
3122 [0xc32]:         movsl #0   
3123 [0xc33]:         movi #75, adx   
3125 [0xc35]:         rmov adx, ebx   
3126 [0xc36]:         movi #2, ebx   
3128 [0xc38]:         movsl #0   
3129 [0xc39]:         movi #76, adx   
3131 [0xc3b]:         rmov adx, ebx   
3132 [0xc3c]:         movi #2, ebx   
3134 [0xc3e]:         movsl #0   
3135 [0xc3f]:         movi #77, adx   
3137 [0xc41]:         rmov adx, ebx   
3138 [0xc42]:         movi #0, ebx   
3140 [0xc44]:         movsl #0   
3141 [0xc45]:         movi #78, adx   
3143 [0xc47]:         rmov adx, ebx   
3144 [0xc48]:         movi #2, ebx   
3146 [0xc4a]:         movsl #0   
3147 [0xc4b]:         movi #79, adx   
3149 [0xc4d]:         rmov adx, ebx   
3150 [0xc4e]:         movi #2, ebx   
3152 [0xc50]:         movsl #0   
3153 [0xc51]:         movi #80, adx   
3155 [0xc53]:         rmov adx, ebx   
3156 [0xc54]:         movi #2, ebx   
3158 [0xc56]:         movsl #0   
3159 [0xc57]:         movi #81, adx   
3161 [0xc59]:         rmov adx, ebx   
3162 [0xc5a]:         movi #0, ebx   
3164 [0xc5c]:         movsl #0   
3165 [0xc5d]:         movi #82, adx   
3167 [0xc5f]:         rmov adx, ebx   
3168 [0xc60]:         movi #0, ebx   
3170 [0xc62]:         movsl #0   
3171 [0xc63]:         movi #83, adx   
3173 [0xc65]:         rmov adx, ebx   
3174 [0xc66]:         movi #0, ebx   
3176 [0xc68]:         movsl #0   
3177 [0xc69]:         movi #84, adx   
3179 [0xc6b]:         rmov adx, ebx   
3180 [0xc6c]:         movi #0, ebx   
3182 [0xc6e]:         movsl #0   
3183 [0xc6f]:         movi #85, adx   
3185 [0xc71]:         rmov adx, ebx   
3186 [0xc72]:         movi #2, ebx   
3188 [0xc74]:         movsl #0   
3189 [0xc75]:         movi #86, adx   
3191 [0xc77]:         rmov adx, ebx   
3192 [0xc78]:         movi #2, ebx   
3194 [0xc7a]:         movsl #0   
3195 [0xc7b]:         movi #87, adx   
3197 [0xc7d]:         rmov adx, ebx   
3198 [0xc7e]:         movi #0, ebx   
3200 [0xc80]:         movsl #0   
3201 [0xc81]:         movi #88, adx   
3203 [0xc83]:         rmov adx, ebx   
3204 [0xc84]:         movi #2, ebx   
3206 [0xc86]:         movsl #0   
3207 [0xc87]:         movi #89, adx   
3209 [0xc89]:         rmov adx, ebx   
3210 [0xc8a]:         movi #2, ebx   
3212 [0xc8c]:         movsl #0   
3213 [0xc8d]:         movi #90, adx   
3215 [0xc8f]:         rmov adx, ebx   
3216 [0xc90]:         movi #0, ebx   
3218 [0xc92]:         movsl #0   
3219 [0xc93]:         movi #91, adx   
3221 [0xc95]:         rmov adx, ebx   
3222 [0xc96]:         movi #2, ebx   
3224 [0xc98]:         movsl #0   
3225 [0xc99]:         movi #92, adx   
3227 [0xc9b]:         rmov adx, ebx   
3228 [0xc9c]:         movi #2, ebx   
3230 [0xc9e]:         movsl #0   
3231 [0xc9f]:         movi #93, adx   
3233 [0xca1]:         rmov adx, ebx   
3234 [0xca2]:         movi #0, ebx   
3236 [0xca4]:         movsl #0   
3237 [0xca5]:         movi #94, adx   
3239 [0xca7]:         rmov adx, ebx   
3240 [0xca8]:         movi #2, ebx   
3242 [0xcaa]:         movsl #0   
3243 [0xcab]:         movi #95, adx   
3245 [0xcad]:         rmov adx, ebx   
3246 [0xcae]:         movi #0, ebx   
3248 [0xcb0]:         movsl #0   
3249 [0xcb1]:         movi #96, adx   
3251 [0xcb3]:         rmov adx, ebx   
3252 [0xcb4]:         movi #2, ebx   
3254 [0xcb6]:         movsl #0   
3255 [0xcb7]:         movi #97, adx   
3257 [0xcb9]:         rmov adx, ebx   
3258 [0xcba]:         movi #0, ebx   
3260 [0xcbc]:         movsl #0   
3261 [0xcbd]:         movi #98, adx   
3263 [0xcbf]:         rmov adx, ebx   
3264 [0xcc0]:         movi #0, ebx   
3266 [0xcc2]:         movsl #0   
3267 [0xcc3]:         movi #99, adx   
3269 [0xcc5]:         rmov adx, ebx   
3270 [0xcc6]:         movi #0, ebx   
3272 [0xcc8]:         movsl #0   
3273 [0xcc9]:         movi #100, adx   
3275 [0xccb]:         rmov adx, ebx   
3276 [0xccc]:         movi #0, ebx   
3278 [0xcce]:         movsl #0   
3279 [0xccf]:         movi #101, adx   
3281 [0xcd1]:         rmov adx, ebx   
3282 [0xcd2]:         movi #0, ebx   
3284 [0xcd4]:         movsl #0   
3285 [0xcd5]:         movi #102, adx   
3287 [0xcd7]:         rmov adx, ebx   
3288 [0xcd8]:         movi #0, ebx   
3290 [0xcda]:         movsl #0   
3291 [0xcdb]:         movi #103, adx   
3293 [0xcdd]:         rmov adx, ebx   
3294 [0xcde]:         movi #0, ebx   
3296 [0xce0]:         movsl #0   
3297 [0xce1]:         movi #104, adx   
3299 [0xce3]:         rmov adx, ebx   
3300 [0xce4]:         movi #0, ebx   
3302 [0xce6]:         movsl #0   
3303 [0xce7]:         movi #105, adx   
3305 [0xce9]:         rmov adx, ebx   
3306 [0xcea]:         movi #0, ebx   
3308 [0xcec]:         movsl #0   
3309 [0xced]:         movi #106, adx   
3311 [0xcef]:         rmov adx, ebx   
3312 [0xcf0]:         movi #0, ebx   
3314 [0xcf2]:         movsl #0   
3315 [0xcf3]:         movi #107, adx   
3317 [0xcf5]:         rmov adx, ebx   
3318 [0xcf6]:         movi #0, ebx   
3320 [0xcf8]:         movsl #0   
3321 [0xcf9]:         movi #108, adx   
3323 [0xcfb]:         rmov adx, ebx   
3324 [0xcfc]:         movi #0, ebx   
3326 [0xcfe]:         movsl #0   
3327 [0xcff]:         movi #109, adx   
3329 [0xd01]:         rmov adx, ebx   
3330 [0xd02]:         movi #0, ebx   
3332 [0xd04]:         movsl #0   
3333 [0xd05]:         movi #110, adx   
3335 [0xd07]:         rmov adx, ebx   
3336 [0xd08]:         movi #2, ebx   
3338 [0xd0a]:         movsl #0   
3339 [0xd0b]:         movi #111, adx   
3341 [0xd0d]:         rmov adx, ebx   
3342 [0xd0e]:         movi #0, ebx   
3344 [0xd10]:         movsl #0   
3345 [0xd11]:         movi #112, adx   
3347 [0xd13]:         rmov adx, ebx   
3348 [0xd14]:         movi #2, ebx   
3350 [0xd16]:         movsl #0   
3351 [0xd17]:         movi #113, adx   
3353 [0xd19]:         rmov adx, ebx   
3354 [0xd1a]:         movi #2, ebx   
3356 [0xd1c]:         movsl #0   
3357 [0xd1d]:         movi #114, adx   
3359 [0xd1f]:         rmov adx, ebx   
3360 [0xd20]:         movi #2, ebx   
3362 [0xd22]:         movsl #0   
3363 [0xd23]:         movi #115, adx   
3365 [0xd25]:         rmov adx, ebx   
3366 [0xd26]:         movi #2, ebx   
3368 [0xd28]:         movsl #0   
3369 [0xd29]:         movi #116, adx   
3371 [0xd2b]:         rmov adx, ebx   
3372 [0xd2c]:         movi #2, ebx   
3374 [0xd2e]:         movsl #0   
3375 [0xd2f]:         movi #117, adx   
3377 [0xd31]:         rmov adx, ebx   
3378 [0xd32]:         movi #2, ebx   
3380 [0xd34]:         movsl #0   
3381 [0xd35]:         movi #118, adx   
3383 [0xd37]:         rmov adx, ebx   
3384 [0xd38]:         movi #2, ebx   
3386 [0xd3a]:         movsl #0   
3387 [0xd3b]:         movi #119, adx   
3389 [0xd3d]:         rmov adx, ebx   
3390 [0xd3e]:         movi #2, ebx   
3392 [0xd40]:         movsl #0   
3393 [0xd41]:         movi #120, adx   
3395 [0xd43]:         rmov adx, ebx   
3396 [0xd44]:         movi #2, ebx   
3398 [0xd46]:         movsl #0   
3399 [0xd47]:         movi #121, adx   
3401 [0xd49]:         rmov adx, ebx   
3402 [0xd4a]:         movi #2, ebx   
3404 [0xd4c]:         movsl #0   
3405 [0xd4d]:         movi #122, adx   
3407 [0xd4f]:         rmov adx, ebx   
3408 [0xd50]:         movi #2, ebx   
3410 [0xd52]:         movsl #0   
3411 [0xd53]:         movi #123, adx   
3413 [0xd55]:         rmov adx, ebx   
3414 [0xd56]:         movi #2, ebx   
3416 [0xd58]:         movsl #0   
3417 [0xd59]:         movi #124, adx   
3419 [0xd5b]:         rmov adx, ebx   
3420 [0xd5c]:         movi #2, ebx   
3422 [0xd5e]:         movsl #0   
3423 [0xd5f]:         movi #125, adx   
3425 [0xd61]:         rmov adx, ebx   
3426 [0xd62]:         movi #2, ebx   
3428 [0xd64]:         movsl #0   
3429 [0xd65]:         movi #126, adx   
3431 [0xd67]:         rmov adx, ebx   
3432 [0xd68]:         movi #2, ebx   
3434 [0xd6a]:         movsl #0   
3435 [0xd6b]:         movi #127, adx   
3437 [0xd6d]:         rmov adx, ebx   
3438 [0xd6e]:         movi #0, ebx   
3440 [0xd70]:         movsl #0   
3441 [0xd71]:         movi #128, adx   
3443 [0xd73]:         rmov adx, ebx   
3444 [0xd74]:         movi #0, ebx   
3446 [0xd76]:         movsl #0   
3447 [0xd77]:         movi #129, adx   
3449 [0xd79]:         rmov adx, ebx   
3450 [0xd7a]:         movi #0, ebx   
3452 [0xd7c]:         movsl #0   
3453 [0xd7d]:         movi #130, adx   
3455 [0xd7f]:         rmov adx, ebx   
3456 [0xd80]:         movi #0, ebx   
3458 [0xd82]:         movsl #0   
3459 [0xd83]:         movi #131, adx   
3461 [0xd85]:         rmov adx, ebx   
3462 [0xd86]:         movi #0, ebx   
3464 [0xd88]:         movsl #0   
3465 [0xd89]:         movi #132, adx   
3467 [0xd8b]:         rmov adx, ebx   
3468 [0xd8c]:         movi #0, ebx   
3470 [0xd8e]:         movsl #0   
3471 [0xd8f]:         movi #133, adx   
3473 [0xd91]:         rmov adx, ebx   
3474 [0xd92]:         movi #0, ebx   
3476 [0xd94]:         movsl #0   
3477 [0xd95]:         movi #134, adx   
3479 [0xd97]:         rmov adx, ebx   
3480 [0xd98]:         movi #0, ebx   
3482 [0xd9a]:         movsl #0   
3483 [0xd9b]:         movi #135, adx   
3485 [0xd9d]:         rmov adx, ebx   
3486 [0xd9e]:         movi #0, ebx   
3488 [0xda0]:         movsl #0   
3489 [0xda1]:         movi #136, adx   
3491 [0xda3]:         rmov adx, ebx   
3492 [0xda4]:         movi #0, ebx   
3494 [0xda6]:         movsl #0   
3495 [0xda7]:         movi #137, adx   
3497 [0xda9]:         rmov adx, ebx   
3498 [0xdaa]:         movi #0, ebx   
3500 [0xdac]:         movsl #0   
3501 [0xdad]:         movi #138, adx   
3503 [0xdaf]:         rmov adx, ebx   
3504 [0xdb0]:         movi #0, ebx   
3506 [0xdb2]:         movsl #0   
3507 [0xdb3]:         movi #139, adx   
3509 [0xdb5]:         rmov adx, ebx   
3510 [0xdb6]:         movi #0, ebx   
3512 [0xdb8]:         movsl #0   
3513 [0xdb9]:         movi #140, adx   
3515 [0xdbb]:         rmov adx, ebx   
3516 [0xdbc]:         movi #0, ebx   
3518 [0xdbe]:         movsl #0   
3519 [0xdbf]:         movi #141, adx   
3521 [0xdc1]:         rmov adx, ebx   
3522 [0xdc2]:         movi #0, ebx   
3524 [0xdc4]:         movsl #0   
3525 [0xdc5]:         movi #142, adx   
3527 [0xdc7]:         rmov adx, ebx   
3528 [0xdc8]:         movi #0, ebx   
3530 [0xdca]:         movsl #0   
3531 [0xdcb]:         movi #143, adx   
3533 [0xdcd]:         rmov adx, ebx   
3534 [0xdce]:         movg @108 // @ui.res.drawable#__srt_global   
3535 [0xdcf]:         movn #6   
3537 [0xdd1]:         popobj   
3538 [0xdd2]:         new_class @121 // ui.support#drawable   
3539 [0xdd3]:         dup    
3540 [0xdd4]:         istore 16   
3542 [0xdd6]:         movg @108 // @ui.res.drawable#__srt_global   
3543 [0xdd7]:         movn #6   
3545 [0xdd9]:         pushobj   
3546 [0xdda]:         istore 16   
3548 [0xddc]:         movi #9, ebx   
3550 [0xdde]:         rstore ebx   
3551 [0xddf]:         call @3181 // <ui.support#drawable.drawable>   
3552 [0xde0]:         movg @108 // @ui.res.drawable#__srt_global   
3553 [0xde1]:         movn #7   
3555 [0xde3]:         popobj   
3556 [0xde4]:         movi #144, ebx   
3558 [0xde6]:         newarry ebx   
3559 [0xde7]:         movi #0, ebx   
3561 [0xde9]:         movsl #0   
3562 [0xdea]:         movi #0, adx   
3564 [0xdec]:         rmov adx, ebx   
3565 [0xded]:         movi #2, ebx   
3567 [0xdef]:         movsl #0   
3568 [0xdf0]:         movi #1, adx   
3570 [0xdf2]:         rmov adx, ebx   
3571 [0xdf3]:         movi #2, ebx   
3573 [0xdf5]:         movsl #0   
3574 [0xdf6]:         movi #2, adx   
3576 [0xdf8]:         rmov adx, ebx   
3577 [0xdf9]:         movi #2, ebx   
3579 [0xdfb]:         movsl #0   
3580 [0xdfc]:         movi #3, adx   
3582 [0xdfe]:         rmov adx, ebx   
3583 [0xdff]:         movi #2, ebx   
3585 [0xe01]:         movsl #0   
3586 [0xe02]:         movi #4, adx   
3588 [0xe04]:         rmov adx, ebx   
3589 [0xe05]:         movi #2, ebx   
3591 [0xe07]:         movsl #0   
3592 [0xe08]:         movi #5, adx   
3594 [0xe0a]:         rmov adx, ebx   
3595 [0xe0b]:         movi #2, ebx   
3597 [0xe0d]:         movsl #0   
3598 [0xe0e]:         movi #6, adx   
3600 [0xe10]:         rmov adx, ebx   
3601 [0xe11]:         movi #2, ebx   
3603 [0xe13]:         movsl #0   
3604 [0xe14]:         movi #7, adx   
3606 [0xe16]:         rmov adx, ebx   
3607 [0xe17]:         movi #2, ebx   
3609 [0xe19]:         movsl #0   
3610 [0xe1a]:         movi #8, adx   
3612 [0xe1c]:         rmov adx, ebx   
3613 [0xe1d]:         movi #2, ebx   
3615 [0xe1f]:         movsl #0   
3616 [0xe20]:         movi #9, adx   
3618 [0xe22]:         rmov adx, ebx   
3619 [0xe23]:         movi #2, ebx   
3621 [0xe25]:         movsl #0   
3622 [0xe26]:         movi #10, adx   
3624 [0xe28]:         rmov adx, ebx   
3625 [0xe29]:         movi #2, ebx   
3627 [0xe2b]:         movsl #0   
3628 [0xe2c]:         movi #11, adx   
3630 [0xe2e]:         rmov adx, ebx   
3631 [0xe2f]:         movi #2, ebx   
3633 [0xe31]:         movsl #0   
3634 [0xe32]:         movi #12, adx   
3636 [0xe34]:         rmov adx, ebx   
3637 [0xe35]:         movi #2, ebx   
3639 [0xe37]:         movsl #0   
3640 [0xe38]:         movi #13, adx   
3642 [0xe3a]:         rmov adx, ebx   
3643 [0xe3b]:         movi #2, ebx   
3645 [0xe3d]:         movsl #0   
3646 [0xe3e]:         movi #14, adx   
3648 [0xe40]:         rmov adx, ebx   
3649 [0xe41]:         movi #2, ebx   
3651 [0xe43]:         movsl #0   
3652 [0xe44]:         movi #15, adx   
3654 [0xe46]:         rmov adx, ebx   
3655 [0xe47]:         movi #0, ebx   
3657 [0xe49]:         movsl #0   
3658 [0xe4a]:         movi #16, adx   
3660 [0xe4c]:         rmov adx, ebx   
3661 [0xe4d]:         movi #2, ebx   
3663 [0xe4f]:         movsl #0   
3664 [0xe50]:         movi #17, adx   
3666 [0xe52]:         rmov adx, ebx   
3667 [0xe53]:         movi #0, ebx   
3669 [0xe55]:         movsl #0   
3670 [0xe56]:         movi #18, adx   
3672 [0xe58]:         rmov adx, ebx   
3673 [0xe59]:         movi #0, ebx   
3675 [0xe5b]:         movsl #0   
3676 [0xe5c]:         movi #19, adx   
3678 [0xe5e]:         rmov adx, ebx   
3679 [0xe5f]:         movi #0, ebx   
3681 [0xe61]:         movsl #0   
3682 [0xe62]:         movi #20, adx   
3684 [0xe64]:         rmov adx, ebx   
3685 [0xe65]:         movi #0, ebx   
3687 [0xe67]:         movsl #0   
3688 [0xe68]:         movi #21, adx   
3690 [0xe6a]:         rmov adx, ebx   
3691 [0xe6b]:         movi #0, ebx   
3693 [0xe6d]:         movsl #0   
3694 [0xe6e]:         movi #22, adx   
3696 [0xe70]:         rmov adx, ebx   
3697 [0xe71]:         movi #0, ebx   
3699 [0xe73]:         movsl #0   
3700 [0xe74]:         movi #23, adx   
3702 [0xe76]:         rmov adx, ebx   
3703 [0xe77]:         movi #0, ebx   
3705 [0xe79]:         movsl #0   
3706 [0xe7a]:         movi #24, adx   
3708 [0xe7c]:         rmov adx, ebx   
3709 [0xe7d]:         movi #0, ebx   
3711 [0xe7f]:         movsl #0   
3712 [0xe80]:         movi #25, adx   
3714 [0xe82]:         rmov adx, ebx   
3715 [0xe83]:         movi #0, ebx   
3717 [0xe85]:         movsl #0   
3718 [0xe86]:         movi #26, adx   
3720 [0xe88]:         rmov adx, ebx   
3721 [0xe89]:         movi #0, ebx   
3723 [0xe8b]:         movsl #0   
3724 [0xe8c]:         movi #27, adx   
3726 [0xe8e]:         rmov adx, ebx   
3727 [0xe8f]:         movi #0, ebx   
3729 [0xe91]:         movsl #0   
3730 [0xe92]:         movi #28, adx   
3732 [0xe94]:         rmov adx, ebx   
3733 [0xe95]:         movi #0, ebx   
3735 [0xe97]:         movsl #0   
3736 [0xe98]:         movi #29, adx   
3738 [0xe9a]:         rmov adx, ebx   
3739 [0xe9b]:         movi #0, ebx   
3741 [0xe9d]:         movsl #0   
3742 [0xe9e]:         movi #30, adx   
3744 [0xea0]:         rmov adx, ebx   
3745 [0xea1]:         movi #2, ebx   
3747 [0xea3]:         movsl #0   
3748 [0xea4]:         movi #31, adx   
3750 [0xea6]:         rmov adx, ebx   
3751 [0xea7]:         movi #2, ebx   
3753 [0xea9]:         movsl #0   
3754 [0xeaa]:         movi #32, adx   
3756 [0xeac]:         rmov adx, ebx   
3757 [0xead]:         movi #2, ebx   
3759 [0xeaf]:         movsl #0   
3760 [0xeb0]:         movi #33, adx   
3762 [0xeb2]:         rmov adx, ebx   
3763 [0xeb3]:         movi #0, ebx   
3765 [0xeb5]:         movsl #0   
3766 [0xeb6]:         movi #34, adx   
3768 [0xeb8]:         rmov adx, ebx   
3769 [0xeb9]:         movi #2, ebx   
3771 [0xebb]:         movsl #0   
3772 [0xebc]:         movi #35, adx   
3774 [0xebe]:         rmov adx, ebx   
3775 [0xebf]:         movi #2, ebx   
3777 [0xec1]:         movsl #0   
3778 [0xec2]:         movi #36, adx   
3780 [0xec4]:         rmov adx, ebx   
3781 [0xec5]:         movi #0, ebx   
3783 [0xec7]:         movsl #0   
3784 [0xec8]:         movi #37, adx   
3786 [0xeca]:         rmov adx, ebx   
3787 [0xecb]:         movi #2, ebx   
3789 [0xecd]:         movsl #0   
3790 [0xece]:         movi #38, adx   
3792 [0xed0]:         rmov adx, ebx   
3793 [0xed1]:         movi #2, ebx   
3795 [0xed3]:         movsl #0   
3796 [0xed4]:         movi #39, adx   
3798 [0xed6]:         rmov adx, ebx   
3799 [0xed7]:         movi #0, ebx   
3801 [0xed9]:         movsl #0   
3802 [0xeda]:         movi #40, adx   
3804 [0xedc]:         rmov adx, ebx   
3805 [0xedd]:         movi #2, ebx   
3807 [0xedf]:         movsl #0   
3808 [0xee0]:         movi #41, adx   
3810 [0xee2]:         rmov adx, ebx   
3811 [0xee3]:         movi #2, ebx   
3813 [0xee5]:         movsl #0   
3814 [0xee6]:         movi #42, adx   
3816 [0xee8]:         rmov adx, ebx   
3817 [0xee9]:         movi #0, ebx   
3819 [0xeeb]:         movsl #0   
3820 [0xeec]:         movi #43, adx   
3822 [0xeee]:         rmov adx, ebx   
3823 [0xeef]:         movi #2, ebx   
3825 [0xef1]:         movsl #0   
3826 [0xef2]:         movi #44, adx   
3828 [0xef4]:         rmov adx, ebx   
3829 [0xef5]:         movi #2, ebx   
3831 [0xef7]:         movsl #0   
3832 [0xef8]:         movi #45, adx   
3834 [0xefa]:         rmov adx, ebx   
3835 [0xefb]:         movi #0, ebx   
3837 [0xefd]:         movsl #0   
3838 [0xefe]:         movi #46, adx   
3840 [0xf00]:         rmov adx, ebx   
3841 [0xf01]:         movi #2, ebx   
3843 [0xf03]:         movsl #0   
3844 [0xf04]:         movi #47, adx   
3846 [0xf06]:         rmov adx, ebx   
3847 [0xf07]:         movi #2, ebx   
3849 [0xf09]:         movsl #0   
3850 [0xf0a]:         movi #48, adx   
3852 [0xf0c]:         rmov adx, ebx   
3853 [0xf0d]:         movi #2, ebx   
3855 [0xf0f]:         movsl #0   
3856 [0xf10]:         movi #49, adx   
3858 [0xf12]:         rmov adx, ebx   
3859 [0xf13]:         movi #0, ebx   
3861 [0xf15]:         movsl #0   
3862 [0xf16]:         movi #50, adx   
3864 [0xf18]:         rmov adx, ebx   
3865 [0xf19]:         movi #2, ebx   
3867 [0xf1b]:         movsl #0   
3868 [0xf1c]:         movi #51, adx   
3870 [0xf1e]:         rmov adx, ebx   
3871 [0xf1f]:         movi #2, ebx   
3873 [0xf21]:         movsl #0   
3874 [0xf22]:         movi #52, adx   
3876 [0xf24]:         rmov adx, ebx   
3877 [0xf25]:         movi #0, ebx   
3879 [0xf27]:         movsl #0   
3880 [0xf28]:         movi #53, adx   
3882 [0xf2a]:         rmov adx, ebx   
3883 [0xf2b]:         movi #2, ebx   
3885 [0xf2d]:         movsl #0   
3886 [0xf2e]:         movi #54, adx   
3888 [0xf30]:         rmov adx, ebx   
3889 [0xf31]:         movi #2, ebx   
3891 [0xf33]:         movsl #0   
3892 [0xf34]:         movi #55, adx   
3894 [0xf36]:         rmov adx, ebx   
3895 [0xf37]:         movi #0, ebx   
3897 [0xf39]:         movsl #0   
3898 [0xf3a]:         movi #56, adx   
3900 [0xf3c]:         rmov adx, ebx   
3901 [0xf3d]:         movi #2, ebx   
3903 [0xf3f]:         movsl #0   
3904 [0xf40]:         movi #57, adx   
3906 [0xf42]:         rmov adx, ebx   
3907 [0xf43]:         movi #2, ebx   
3909 [0xf45]:         movsl #0   
3910 [0xf46]:         movi #58, adx   
3912 [0xf48]:         rmov adx, ebx   
3913 [0xf49]:         movi #0, ebx   
3915 [0xf4b]:         movsl #0   
3916 [0xf4c]:         movi #59, adx   
3918 [0xf4e]:         rmov adx, ebx   
3919 [0xf4f]:         movi #2, ebx   
3921 [0xf51]:         movsl #0   
3922 [0xf52]:         movi #60, adx   
3924 [0xf54]:         rmov adx, ebx   
3925 [0xf55]:         movi #2, ebx   
3927 [0xf57]:         movsl #0   
3928 [0xf58]:         movi #61, adx   
3930 [0xf5a]:         rmov adx, ebx   
3931 [0xf5b]:         movi #0, ebx   
3933 [0xf5d]:         movsl #0   
3934 [0xf5e]:         movi #62, adx   
3936 [0xf60]:         rmov adx, ebx   
3937 [0xf61]:         movi #2, ebx   
3939 [0xf63]:         movsl #0   
3940 [0xf64]:         movi #63, adx   
3942 [0xf66]:         rmov adx, ebx   
3943 [0xf67]:         movi #2, ebx   
3945 [0xf69]:         movsl #0   
3946 [0xf6a]:         movi #64, adx   
3948 [0xf6c]:         rmov adx, ebx   
3949 [0xf6d]:         movi #2, ebx   
3951 [0xf6f]:         movsl #0   
3952 [0xf70]:         movi #65, adx   
3954 [0xf72]:         rmov adx, ebx   
3955 [0xf73]:         movi #0, ebx   
3957 [0xf75]:         movsl #0   
3958 [0xf76]:         movi #66, adx   
3960 [0xf78]:         rmov adx, ebx   
3961 [0xf79]:         movi #2, ebx   
3963 [0xf7b]:         movsl #0   
3964 [0xf7c]:         movi #67, adx   
3966 [0xf7e]:         rmov adx, ebx   
3967 [0xf7f]:         movi #2, ebx   
3969 [0xf81]:         movsl #0   
3970 [0xf82]:         movi #68, adx   
3972 [0xf84]:         rmov adx, ebx   
3973 [0xf85]:         movi #0, ebx   
3975 [0xf87]:         movsl #0   
3976 [0xf88]:         movi #69, adx   
3978 [0xf8a]:         rmov adx, ebx   
3979 [0xf8b]:         movi #2, ebx   
3981 [0xf8d]:         movsl #0   
3982 [0xf8e]:         movi #70, adx   
3984 [0xf90]:         rmov adx, ebx   
3985 [0xf91]:         movi #2, ebx   
3987 [0xf93]:         movsl #0   
3988 [0xf94]:         movi #71, adx   
3990 [0xf96]:         rmov adx, ebx   
3991 [0xf97]:         movi #0, ebx   
3993 [0xf99]:         movsl #0   
3994 [0xf9a]:         movi #72, adx   
3996 [0xf9c]:         rmov adx, ebx   
3997 [0xf9d]:         movi #2, ebx   
3999 [0xf9f]:         movsl #0   
4000 [0xfa0]:         movi #73, adx   
4002 [0xfa2]:         rmov adx, ebx   
4003 [0xfa3]:         movi #2, ebx   
4005 [0xfa5]:         movsl #0   
4006 [0xfa6]:         movi #74, adx   
4008 [0xfa8]:         rmov adx, ebx   
4009 [0xfa9]:         movi #0, ebx   
4011 [0xfab]:         movsl #0   
4012 [0xfac]:         movi #75, adx   
4014 [0xfae]:         rmov adx, ebx   
4015 [0xfaf]:         movi #2, ebx   
4017 [0xfb1]:         movsl #0   
4018 [0xfb2]:         movi #76, adx   
4020 [0xfb4]:         rmov adx, ebx   
4021 [0xfb5]:         movi #2, ebx   
4023 [0xfb7]:         movsl #0   
4024 [0xfb8]:         movi #77, adx   
4026 [0xfba]:         rmov adx, ebx   
4027 [0xfbb]:         movi #0, ebx   
4029 [0xfbd]:         movsl #0   
4030 [0xfbe]:         movi #78, adx   
4032 [0xfc0]:         rmov adx, ebx   
4033 [0xfc1]:         movi #2, ebx   
4035 [0xfc3]:         movsl #0   
4036 [0xfc4]:         movi #79, adx   
4038 [0xfc6]:         rmov adx, ebx   
4039 [0xfc7]:         movi #2, ebx   
4041 [0xfc9]:         movsl #0   
4042 [0xfca]:         movi #80, adx   
4044 [0xfcc]:         rmov adx, ebx   
4045 [0xfcd]:         movi #2, ebx   
4047 [0xfcf]:         movsl #0   
4048 [0xfd0]:         movi #81, adx   
4050 [0xfd2]:         rmov adx, ebx   
4051 [0xfd3]:         movi #0, ebx   
4053 [0xfd5]:         movsl #0   
4054 [0xfd6]:         movi #82, adx   
4056 [0xfd8]:         rmov adx, ebx   
4057 [0xfd9]:         movi #2, ebx   
4059 [0xfdb]:         movsl #0   
4060 [0xfdc]:         movi #83, adx   
4062 [0xfde]:         rmov adx, ebx   
4063 [0xfdf]:         movi #2, ebx   
4065 [0xfe1]:         movsl #0   
4066 [0xfe2]:         movi #84, adx   
4068 [0xfe4]:         rmov adx, ebx   
4069 [0xfe5]:         movi #0, ebx   
4071 [0xfe7]:         movsl #0   
4072 [0xfe8]:         movi #85, adx   
4074 [0xfea]:         rmov adx, ebx   
4075 [0xfeb]:         movi #2, ebx   
4077 [0xfed]:         movsl #0   
4078 [0xfee]:         movi #86, adx   
4080 [0xff0]:         rmov adx, ebx   
4081 [0xff1]:         movi #2, ebx   
4083 [0xff3]:         movsl #0   
4084 [0xff4]:         movi #87, adx   
4086 [0xff6]:         rmov adx, ebx   
4087 [0xff7]:         movi #0, ebx   
4089 [0xff9]:         movsl #0   
4090 [0xffa]:         movi #88, adx   
4092 [0xffc]:         rmov adx, ebx   
4093 [0xffd]:         movi #2, ebx   
4095 [0xfff]:         movsl #0   
4096 [0x1000]:         movi #89, adx   
4098 [0x1002]:         rmov adx, ebx   
4099 [0x1003]:         movi #2, ebx   
4101 [0x1005]:         movsl #0   
4102 [0x1006]:         movi #90, adx   
4104 [0x1008]:         rmov adx, ebx   
4105 [0x1009]:         movi #0, ebx   
4107 [0x100b]:         movsl #0   
4108 [0x100c]:         movi #91, adx   
4110 [0x100e]:         rmov adx, ebx   
4111 [0x100f]:         movi #2, ebx   
4113 [0x1011]:         movsl #0   
4114 [0x1012]:         movi #92, adx   
4116 [0x1014]:         rmov adx, ebx   
4117 [0x1015]:         movi #2, ebx   
4119 [0x1017]:         movsl #0   
4120 [0x1018]:         movi #93, adx   
4122 [0x101a]:         rmov adx, ebx   
4123 [0x101b]:         movi #0, ebx   
4125 [0x101d]:         movsl #0   
4126 [0x101e]:         movi #94, adx   
4128 [0x1020]:         rmov adx, ebx   
4129 [0x1021]:         movi #2, ebx   
4131 [0x1023]:         movsl #0   
4132 [0x1024]:         movi #95, adx   
4134 [0x1026]:         rmov adx, ebx   
4135 [0x1027]:         movi #0, ebx   
4137 [0x1029]:         movsl #0   
4138 [0x102a]:         movi #96, adx   
4140 [0x102c]:         rmov adx, ebx   
4141 [0x102d]:         movi #2, ebx   
4143 [0x102f]:         movsl #0   
4144 [0x1030]:         movi #97, adx   
4146 [0x1032]:         rmov adx, ebx   
4147 [0x1033]:         movi #0, ebx   
4149 [0x1035]:         movsl #0   
4150 [0x1036]:         movi #98, adx   
4152 [0x1038]:         rmov adx, ebx   
4153 [0x1039]:         movi #0, ebx   
4155 [0x103b]:         movsl #0   
4156 [0x103c]:         movi #99, adx   
4158 [0x103e]:         rmov adx, ebx   
4159 [0x103f]:         movi #0, ebx   
4161 [0x1041]:         movsl #0   
4162 [0x1042]:         movi #100, adx   
4164 [0x1044]:         rmov adx, ebx   
4165 [0x1045]:         movi #0, ebx   
4167 [0x1047]:         movsl #0   
4168 [0x1048]:         movi #101, adx   
4170 [0x104a]:         rmov adx, ebx   
4171 [0x104b]:         movi #0, ebx   
4173 [0x104d]:         movsl #0   
4174 [0x104e]:         movi #102, adx   
4176 [0x1050]:         rmov adx, ebx   
4177 [0x1051]:         movi #0, ebx   
4179 [0x1053]:         movsl #0   
4180 [0x1054]:         movi #103, adx   
4182 [0x1056]:         rmov adx, ebx   
4183 [0x1057]:         movi #0, ebx   
4185 [0x1059]:         movsl #0   
4186 [0x105a]:         movi #104, adx   
4188 [0x105c]:         rmov adx, ebx   
4189 [0x105d]:         movi #0, ebx   
4191 [0x105f]:         movsl #0   
4192 [0x1060]:         movi #105, adx   
4194 [0x1062]:         rmov adx, ebx   
4195 [0x1063]:         movi #0, ebx   
4197 [0x1065]:         movsl #0   
4198 [0x1066]:         movi #106, adx   
4200 [0x1068]:         rmov adx, ebx   
4201 [0x1069]:         movi #0, ebx   
4203 [0x106b]:         movsl #0   
4204 [0x106c]:         movi #107, adx   
4206 [0x106e]:         rmov adx, ebx   
4207 [0x106f]:         movi #0, ebx   
4209 [0x1071]:         movsl #0   
4210 [0x1072]:         movi #108, adx   
4212 [0x1074]:         rmov adx, ebx   
4213 [0x1075]:         movi #0, ebx   
4215 [0x1077]:         movsl #0   
4216 [0x1078]:         movi #109, adx   
4218 [0x107a]:         rmov adx, ebx   
4219 [0x107b]:         movi #0, ebx   
4221 [0x107d]:         movsl #0   
4222 [0x107e]:         movi #110, adx   
4224 [0x1080]:         rmov adx, ebx   
4225 [0x1081]:         movi #2, ebx   
4227 [0x1083]:         movsl #0   
4228 [0x1084]:         movi #111, adx   
4230 [0x1086]:         rmov adx, ebx   
4231 [0x1087]:         movi #0, ebx   
4233 [0x1089]:         movsl #0   
4234 [0x108a]:         movi #112, adx   
4236 [0x108c]:         rmov adx, ebx   
4237 [0x108d]:         movi #2, ebx   
4239 [0x108f]:         movsl #0   
4240 [0x1090]:         movi #113, adx   
4242 [0x1092]:         rmov adx, ebx   
4243 [0x1093]:         movi #2, ebx   
4245 [0x1095]:         movsl #0   
4246 [0x1096]:         movi #114, adx   
4248 [0x1098]:         rmov adx, ebx   
4249 [0x1099]:         movi #2, ebx   
4251 [0x109b]:         movsl #0   
4252 [0x109c]:         movi #115, adx   
4254 [0x109e]:         rmov adx, ebx   
4255 [0x109f]:         movi #2, ebx   
4257 [0x10a1]:         movsl #0   
4258 [0x10a2]:         movi #116, adx   
4260 [0x10a4]:         rmov adx, ebx   
4261 [0x10a5]:         movi #2, ebx   
4263 [0x10a7]:         movsl #0   
4264 [0x10a8]:         movi #117, adx   
4266 [0x10aa]:         rmov adx, ebx   
4267 [0x10ab]:         movi #2, ebx   
4269 [0x10ad]:         movsl #0   
4270 [0x10ae]:         movi #118, adx   
4272 [0x10b0]:         rmov adx, ebx   
4273 [0x10b1]:         movi #2, ebx   
4275 [0x10b3]:         movsl #0   
4276 [0x10b4]:         movi #119, adx   
4278 [0x10b6]:         rmov adx, ebx   
4279 [0x10b7]:         movi #2, ebx   
4281 [0x10b9]:         movsl #0   
4282 [0x10ba]:         movi #120, adx   
4284 [0x10bc]:         rmov adx, ebx   
4285 [0x10bd]:         movi #2, ebx   
4287 [0x10bf]:         movsl #0   
4288 [0x10c0]:         movi #121, adx   
4290 [0x10c2]:         rmov adx, ebx   
4291 [0x10c3]:         movi #2, ebx   
4293 [0x10c5]:         movsl #0   
4294 [0x10c6]:         movi #122, adx   
4296 [0x10c8]:         rmov adx, ebx   
4297 [0x10c9]:         movi #2, ebx   
4299 [0x10cb]:         movsl #0   
4300 [0x10cc]:         movi #123, adx   
4302 [0x10ce]:         rmov adx, ebx   
4303 [0x10cf]:         movi #2, ebx   
4305 [0x10d1]:         movsl #0   
4306 [0x10d2]:         movi #124, adx   
4308 [0x10d4]:         rmov adx, ebx   
4309 [0x10d5]:         movi #2, ebx   
4311 [0x10d7]:         movsl #0   
4312 [0x10d8]:         movi #125, adx   
4314 [0x10da]:         rmov adx, ebx   
4315 [0x10db]:         movi #2, ebx   
4317 [0x10dd]:         movsl #0   
4318 [0x10de]:         movi #126, adx   
4320 [0x10e0]:         rmov adx, ebx   
4321 [0x10e1]:         movi #2, ebx   
4323 [0x10e3]:         movsl #0   
4324 [0x10e4]:         movi #127, adx   
4326 [0x10e6]:         rmov adx, ebx   
4327 [0x10e7]:         movi #0, ebx   
4329 [0x10e9]:         movsl #0   
4330 [0x10ea]:         movi #128, adx   
4332 [0x10ec]:         rmov adx, ebx   
4333 [0x10ed]:         movi #0, ebx   
4335 [0x10ef]:         movsl #0   
4336 [0x10f0]:         movi #129, adx   
4338 [0x10f2]:         rmov adx, ebx   
4339 [0x10f3]:         movi #0, ebx   
4341 [0x10f5]:         movsl #0   
4342 [0x10f6]:         movi #130, adx   
4344 [0x10f8]:         rmov adx, ebx   
4345 [0x10f9]:         movi #0, ebx   
4347 [0x10fb]:         movsl #0   
4348 [0x10fc]:         movi #131, adx   
4350 [0x10fe]:         rmov adx, ebx   
4351 [0x10ff]:         movi #0, ebx   
4353 [0x1101]:         movsl #0   
4354 [0x1102]:         movi #132, adx   
4356 [0x1104]:         rmov adx, ebx   
4357 [0x1105]:         movi #0, ebx   
4359 [0x1107]:         movsl #0   
4360 [0x1108]:         movi #133, adx   
4362 [0x110a]:         rmov adx, ebx   
4363 [0x110b]:         movi #0, ebx   
4365 [0x110d]:         movsl #0   
4366 [0x110e]:         movi #134, adx   
4368 [0x1110]:         rmov adx, ebx   
4369 [0x1111]:         movi #0, ebx   
4371 [0x1113]:         movsl #0   
4372 [0x1114]:         movi #135, adx   
4374 [0x1116]:         rmov adx, ebx   
4375 [0x1117]:         movi #0, ebx   
4377 [0x1119]:         movsl #0   
4378 [0x111a]:         movi #136, adx   
4380 [0x111c]:         rmov adx, ebx   
4381 [0x111d]:         movi #0, ebx   
4383 [0x111f]:         movsl #0   
4384 [0x1120]:         movi #137, adx   
4386 [0x1122]:         rmov adx, ebx   
4387 [0x1123]:         movi #0, ebx   
4389 [0x1125]:         movsl #0   
4390 [0x1126]:         movi #138, adx   
4392 [0x1128]:         rmov adx, ebx   
4393 [0x1129]:         movi #0, ebx   
4395 [0x112b]:         movsl #0   
4396 [0x112c]:         movi #139, adx   
4398 [0x112e]:         rmov adx, ebx   
4399 [0x112f]:         movi #0, ebx   
4401 [0x1131]:         movsl #0   
4402 [0x1132]:         movi #140, adx   
4404 [0x1134]:         rmov adx, ebx   
4405 [0x1135]:         movi #0, ebx   
4407 [0x1137]:         movsl #0   
4408 [0x1138]:         movi #141, adx   
4410 [0x113a]:         rmov adx, ebx   
4411 [0x113b]:         movi #0, ebx   
4413 [0x113d]:         movsl #0   
4414 [0x113e]:         movi #142, adx   
4416 [0x1140]:         rmov adx, ebx   
4417 [0x1141]:         movi #0, ebx   
4419 [0x1143]:         movsl #0   
4420 [0x1144]:         movi #143, adx   
4422 [0x1146]:         rmov adx, ebx   
4423 [0x1147]:         movg @108 // @ui.res.drawable#__srt_global   
4424 [0x1148]:         movn #8   
4426 [0x114a]:         popobj   
4427 [0x114b]:         new_class @121 // ui.support#drawable   
4428 [0x114c]:         dup    
4429 [0x114d]:         istore 17   
4431 [0x114f]:         movg @108 // @ui.res.drawable#__srt_global   
4432 [0x1150]:         movn #8   
4434 [0x1152]:         pushobj   
4435 [0x1153]:         istore 16   
4437 [0x1155]:         movi #9, ebx   
4439 [0x1157]:         rstore ebx   
4440 [0x1158]:         call @3181 // <ui.support#drawable.drawable>   
4441 [0x1159]:         movg @108 // @ui.res.drawable#__srt_global   
4442 [0x115a]:         movn #9   
4444 [0x115c]:         popobj   
4445 [0x115d]:         movi #117, ebx   
4447 [0x115f]:         newarry ebx   
4448 [0x1160]:         movi #0, ebx   
4450 [0x1162]:         movsl #0   
4451 [0x1163]:         movi #0, adx   
4453 [0x1165]:         rmov adx, ebx   
4454 [0x1166]:         movi #0, ebx   
4456 [0x1168]:         movsl #0   
4457 [0x1169]:         movi #1, adx   
4459 [0x116b]:         rmov adx, ebx   
4460 [0x116c]:         movi #0, ebx   
4462 [0x116e]:         movsl #0   
4463 [0x116f]:         movi #2, adx   
4465 [0x1171]:         rmov adx, ebx   
4466 [0x1172]:         movi #0, ebx   
4468 [0x1174]:         movsl #0   
4469 [0x1175]:         movi #3, adx   
4471 [0x1177]:         rmov adx, ebx   
4472 [0x1178]:         movi #0, ebx   
4474 [0x117a]:         movsl #0   
4475 [0x117b]:         movi #4, adx   
4477 [0x117d]:         rmov adx, ebx   
4478 [0x117e]:         movi #0, ebx   
4480 [0x1180]:         movsl #0   
4481 [0x1181]:         movi #5, adx   
4483 [0x1183]:         rmov adx, ebx   
4484 [0x1184]:         movi #2, ebx   
4486 [0x1186]:         movsl #0   
4487 [0x1187]:         movi #6, adx   
4489 [0x1189]:         rmov adx, ebx   
4490 [0x118a]:         movi #0, ebx   
4492 [0x118c]:         movsl #0   
4493 [0x118d]:         movi #7, adx   
4495 [0x118f]:         rmov adx, ebx   
4496 [0x1190]:         movi #0, ebx   
4498 [0x1192]:         movsl #0   
4499 [0x1193]:         movi #8, adx   
4501 [0x1195]:         rmov adx, ebx   
4502 [0x1196]:         movi #0, ebx   
4504 [0x1198]:         movsl #0   
4505 [0x1199]:         movi #9, adx   
4507 [0x119b]:         rmov adx, ebx   
4508 [0x119c]:         movi #0, ebx   
4510 [0x119e]:         movsl #0   
4511 [0x119f]:         movi #10, adx   
4513 [0x11a1]:         rmov adx, ebx   
4514 [0x11a2]:         movi #0, ebx   
4516 [0x11a4]:         movsl #0   
4517 [0x11a5]:         movi #11, adx   
4519 [0x11a7]:         rmov adx, ebx   
4520 [0x11a8]:         movi #0, ebx   
4522 [0x11aa]:         movsl #0   
4523 [0x11ab]:         movi #12, adx   
4525 [0x11ad]:         rmov adx, ebx   
4526 [0x11ae]:         movi #0, ebx   
4528 [0x11b0]:         movsl #0   
4529 [0x11b1]:         movi #13, adx   
4531 [0x11b3]:         rmov adx, ebx   
4532 [0x11b4]:         movi #0, ebx   
4534 [0x11b6]:         movsl #0   
4535 [0x11b7]:         movi #14, adx   
4537 [0x11b9]:         rmov adx, ebx   
4538 [0x11ba]:         movi #0, ebx   
4540 [0x11bc]:         movsl #0   
4541 [0x11bd]:         movi #15, adx   
4543 [0x11bf]:         rmov adx, ebx   
4544 [0x11c0]:         movi #2, ebx   
4546 [0x11c2]:         movsl #0   
4547 [0x11c3]:         movi #16, adx   
4549 [0x11c5]:         rmov adx, ebx   
4550 [0x11c6]:         movi #0, ebx   
4552 [0x11c8]:         movsl #0   
4553 [0x11c9]:         movi #17, adx   
4555 [0x11cb]:         rmov adx, ebx   
4556 [0x11cc]:         movi #2, ebx   
4558 [0x11ce]:         movsl #0   
4559 [0x11cf]:         movi #18, adx   
4561 [0x11d1]:         rmov adx, ebx   
4562 [0x11d2]:         movi #2, ebx   
4564 [0x11d4]:         movsl #0   
4565 [0x11d5]:         movi #19, adx   
4567 [0x11d7]:         rmov adx, ebx   
4568 [0x11d8]:         movi #2, ebx   
4570 [0x11da]:         movsl #0   
4571 [0x11db]:         movi #20, adx   
4573 [0x11dd]:         rmov adx, ebx   
4574 [0x11de]:         movi #0, ebx   
4576 [0x11e0]:         movsl #0   
4577 [0x11e1]:         movi #21, adx   
4579 [0x11e3]:         rmov adx, ebx   
4580 [0x11e4]:         movi #0, ebx   
4582 [0x11e6]:         movsl #0   
4583 [0x11e7]:         movi #22, adx   
4585 [0x11e9]:         rmov adx, ebx   
4586 [0x11ea]:         movi #0, ebx   
4588 [0x11ec]:         movsl #0   
4589 [0x11ed]:         movi #23, adx   
4591 [0x11ef]:         rmov adx, ebx   
4592 [0x11f0]:         movi #0, ebx   
4594 [0x11f2]:         movsl #0   
4595 [0x11f3]:         movi #24, adx   
4597 [0x11f5]:         rmov adx, ebx   
4598 [0x11f6]:         movi #0, ebx   
4600 [0x11f8]:         movsl #0   
4601 [0x11f9]:         movi #25, adx   
4603 [0x11fb]:         rmov adx, ebx   
4604 [0x11fc]:         movi #0, ebx   
4606 [0x11fe]:         movsl #0   
4607 [0x11ff]:         movi #26, adx   
4609 [0x1201]:         rmov adx, ebx   
4610 [0x1202]:         movi #0, ebx   
4612 [0x1204]:         movsl #0   
4613 [0x1205]:         movi #27, adx   
4615 [0x1207]:         rmov adx, ebx   
4616 [0x1208]:         movi #2, ebx   
4618 [0x120a]:         movsl #0   
4619 [0x120b]:         movi #28, adx   
4621 [0x120d]:         rmov adx, ebx   
4622 [0x120e]:         movi #2, ebx   
4624 [0x1210]:         movsl #0   
4625 [0x1211]:         movi #29, adx   
4627 [0x1213]:         rmov adx, ebx   
4628 [0x1214]:         movi #2, ebx   
4630 [0x1216]:         movsl #0   
4631 [0x1217]:         movi #30, adx   
4633 [0x1219]:         rmov adx, ebx   
4634 [0x121a]:         movi #2, ebx   
4636 [0x121c]:         movsl #0   
4637 [0x121d]:         movi #31, adx   
4639 [0x121f]:         rmov adx, ebx   
4640 [0x1220]:         movi #2, ebx   
4642 [0x1222]:         movsl #0   
4643 [0x1223]:         movi #32, adx   
4645 [0x1225]:         rmov adx, ebx   
4646 [0x1226]:         movi #2, ebx   
4648 [0x1228]:         movsl #0   
4649 [0x1229]:         movi #33, adx   
4651 [0x122b]:         rmov adx, ebx   
4652 [0x122c]:         movi #2, ebx   
4654 [0x122e]:         movsl #0   
4655 [0x122f]:         movi #34, adx   
4657 [0x1231]:         rmov adx, ebx   
4658 [0x1232]:         movi #0, ebx   
4660 [0x1234]:         movsl #0   
4661 [0x1235]:         movi #35, adx   
4663 [0x1237]:         rmov adx, ebx   
4664 [0x1238]:         movi #0, ebx   
4666 [0x123a]:         movsl #0   
4667 [0x123b]:         movi #36, adx   
4669 [0x123d]:         rmov adx, ebx   
4670 [0x123e]:         movi #0, ebx   
4672 [0x1240]:         movsl #0   
4673 [0x1241]:         movi #37, adx   
4675 [0x1243]:         rmov adx, ebx   
4676 [0x1244]:         movi #0, ebx   
4678 [0x1246]:         movsl #0   
4679 [0x1247]:         movi #38, adx   
4681 [0x1249]:         rmov adx, ebx   
4682 [0x124a]:         movi #0, ebx   
4684 [0x124c]:         movsl #0   
4685 [0x124d]:         movi #39, adx   
4687 [0x124f]:         rmov adx, ebx   
4688 [0x1250]:         movi #0, ebx   
4690 [0x1252]:         movsl #0   
4691 [0x1253]:         movi #40, adx   
4693 [0x1255]:         rmov adx, ebx   
4694 [0x1256]:         movi #2, ebx   
4696 [0x1258]:         movsl #0   
4697 [0x1259]:         movi #41, adx   
4699 [0x125b]:         rmov adx, ebx   
4700 [0x125c]:         movi #2, ebx   
4702 [0x125e]:         movsl #0   
4703 [0x125f]:         movi #42, adx   
4705 [0x1261]:         rmov adx, ebx   
4706 [0x1262]:         movi #2, ebx   
4708 [0x1264]:         movsl #0   
4709 [0x1265]:         movi #43, adx   
4711 [0x1267]:         rmov adx, ebx   
4712 [0x1268]:         movi #2, ebx   
4714 [0x126a]:         movsl #0   
4715 [0x126b]:         movi #44, adx   
4717 [0x126d]:         rmov adx, ebx   
4718 [0x126e]:         movi #2, ebx   
4720 [0x1270]:         movsl #0   
4721 [0x1271]:         movi #45, adx   
4723 [0x1273]:         rmov adx, ebx   
4724 [0x1274]:         movi #2, ebx   
4726 [0x1276]:         movsl #0   
4727 [0x1277]:         movi #46, adx   
4729 [0x1279]:         rmov adx, ebx   
4730 [0x127a]:         movi #2, ebx   
4732 [0x127c]:         movsl #0   
4733 [0x127d]:         movi #47, adx   
4735 [0x127f]:         rmov adx, ebx   
4736 [0x1280]:         movi #0, ebx   
4738 [0x1282]:         movsl #0   
4739 [0x1283]:         movi #48, adx   
4741 [0x1285]:         rmov adx, ebx   
4742 [0x1286]:         movi #0, ebx   
4744 [0x1288]:         movsl #0   
4745 [0x1289]:         movi #49, adx   
4747 [0x128b]:         rmov adx, ebx   
4748 [0x128c]:         movi #0, ebx   
4750 [0x128e]:         movsl #0   
4751 [0x128f]:         movi #50, adx   
4753 [0x1291]:         rmov adx, ebx   
4754 [0x1292]:         movi #0, ebx   
4756 [0x1294]:         movsl #0   
4757 [0x1295]:         movi #51, adx   
4759 [0x1297]:         rmov adx, ebx   
4760 [0x1298]:         movi #0, ebx   
4762 [0x129a]:         movsl #0   
4763 [0x129b]:         movi #52, adx   
4765 [0x129d]:         rmov adx, ebx   
4766 [0x129e]:         movi #0, ebx   
4768 [0x12a0]:         movsl #0   
4769 [0x12a1]:         movi #53, adx   
4771 [0x12a3]:         rmov adx, ebx   
4772 [0x12a4]:         movi #2, ebx   
4774 [0x12a6]:         movsl #0   
4775 [0x12a7]:         movi #54, adx   
4777 [0x12a9]:         rmov adx, ebx   
4778 [0x12aa]:         movi #2, ebx   
4780 [0x12ac]:         movsl #0   
4781 [0x12ad]:         movi #55, adx   
4783 [0x12af]:         rmov adx, ebx   
4784 [0x12b0]:         movi #2, ebx   
4786 [0x12b2]:         movsl #0   
4787 [0x12b3]:         movi #56, adx   
4789 [0x12b5]:         rmov adx, ebx   
4790 [0x12b6]:         movi #2, ebx   
4792 [0x12b8]:         movsl #0   
4793 [0x12b9]:         movi #57, adx   
4795 [0x12bb]:         rmov adx, ebx   
4796 [0x12bc]:         movi #0, ebx   
4798 [0x12be]:         movsl #0   
4799 [0x12bf]:         movi #58, adx   
4801 [0x12c1]:         rmov adx, ebx   
4802 [0x12c2]:         movi #2, ebx   
4804 [0x12c4]:         movsl #0   
4805 [0x12c5]:         movi #59, adx   
4807 [0x12c7]:         rmov adx, ebx   
4808 [0x12c8]:         movi #2, ebx   
4810 [0x12ca]:         movsl #0   
4811 [0x12cb]:         movi #60, adx   
4813 [0x12cd]:         rmov adx, ebx   
4814 [0x12ce]:         movi #0, ebx   
4816 [0x12d0]:         movsl #0   
4817 [0x12d1]:         movi #61, adx   
4819 [0x12d3]:         rmov adx, ebx   
4820 [0x12d4]:         movi #0, ebx   
4822 [0x12d6]:         movsl #0   
4823 [0x12d7]:         movi #62, adx   
4825 [0x12d9]:         rmov adx, ebx   
4826 [0x12da]:         movi #0, ebx   
4828 [0x12dc]:         movsl #0   
4829 [0x12dd]:         movi #63, adx   
4831 [0x12df]:         rmov adx, ebx   
4832 [0x12e0]:         movi #0, ebx   
4834 [0x12e2]:         movsl #0   
4835 [0x12e3]:         movi #64, adx   
4837 [0x12e5]:         rmov adx, ebx   
4838 [0x12e6]:         movi #0, ebx   
4840 [0x12e8]:         movsl #0   
4841 [0x12e9]:         movi #65, adx   
4843 [0x12eb]:         rmov adx, ebx   
4844 [0x12ec]:         movi #0, ebx   
4846 [0x12ee]:         movsl #0   
4847 [0x12ef]:         movi #66, adx   
4849 [0x12f1]:         rmov adx, ebx   
4850 [0x12f2]:         movi #2, ebx   
4852 [0x12f4]:         movsl #0   
4853 [0x12f5]:         movi #67, adx   
4855 [0x12f7]:         rmov adx, ebx   
4856 [0x12f8]:         movi #0, ebx   
4858 [0x12fa]:         movsl #0   
4859 [0x12fb]:         movi #68, adx   
4861 [0x12fd]:         rmov adx, ebx   
4862 [0x12fe]:         movi #2, ebx   
4864 [0x1300]:         movsl #0   
4865 [0x1301]:         movi #69, adx   
4867 [0x1303]:         rmov adx, ebx   
4868 [0x1304]:         movi #2, ebx   
4870 [0x1306]:         movsl #0   
4871 [0x1307]:         movi #70, adx   
4873 [0x1309]:         rmov adx, ebx   
4874 [0x130a]:         movi #0, ebx   
4876 [0x130c]:         movsl #0   
4877 [0x130d]:         movi #71, adx   
4879 [0x130f]:         rmov adx, ebx   
4880 [0x1310]:         movi #2, ebx   
4882 [0x1312]:         movsl #0   
4883 [0x1313]:         movi #72, adx   
4885 [0x1315]:         rmov adx, ebx   
4886 [0x1316]:         movi #2, ebx   
4888 [0x1318]:         movsl #0   
4889 [0x1319]:         movi #73, adx   
4891 [0x131b]:         rmov adx, ebx   
4892 [0x131c]:         movi #0, ebx   
4894 [0x131e]:         movsl #0   
4895 [0x131f]:         movi #74, adx   
4897 [0x1321]:         rmov adx, ebx   
4898 [0x1322]:         movi #0, ebx   
4900 [0x1324]:         movsl #0   
4901 [0x1325]:         movi #75, adx   
4903 [0x1327]:         rmov adx, ebx   
4904 [0x1328]:         movi #0, ebx   
4906 [0x132a]:         movsl #0   
4907 [0x132b]:         movi #76, adx   
4909 [0x132d]:         rmov adx, ebx   
4910 [0x132e]:         movi #0, ebx   
4912 [0x1330]:         movsl #0   
4913 [0x1331]:         movi #77, adx   
4915 [0x1333]:         rmov adx, ebx   
4916 [0x1334]:         movi #0, ebx   
4918 [0x1336]:         movsl #0   
4919 [0x1337]:         movi #78, adx   
4921 [0x1339]:         rmov adx, ebx   
4922 [0x133a]:         movi #0, ebx   
4924 [0x133c]:         movsl #0   
4925 [0x133d]:         movi #79, adx   
4927 [0x133f]:         rmov adx, ebx   
4928 [0x1340]:         movi #2, ebx   
4930 [0x1342]:         movsl #0   
4931 [0x1343]:         movi #80, adx   
4933 [0x1345]:         rmov adx, ebx   
4934 [0x1346]:         movi #0, ebx   
4936 [0x1348]:         movsl #0   
4937 [0x1349]:         movi #81, adx   
4939 [0x134b]:         rmov adx, ebx   
4940 [0x134c]:         movi #2, ebx   
4942 [0x134e]:         movsl #0   
4943 [0x134f]:         movi #82, adx   
4945 [0x1351]:         rmov adx, ebx   
4946 [0x1352]:         movi #0, ebx   
4948 [0x1354]:         movsl #0   
4949 [0x1355]:         movi #83, adx   
4951 [0x1357]:         rmov adx, ebx   
4952 [0x1358]:         movi #2, ebx   
4954 [0x135a]:         movsl #0   
4955 [0x135b]:         movi #84, adx   
4957 [0x135d]:         rmov adx, ebx   
4958 [0x135e]:         movi #2, ebx   
4960 [0x1360]:         movsl #0   
4961 [0x1361]:         movi #85, adx   
4963 [0x1363]:         rmov adx, ebx   
4964 [0x1364]:         movi #2, ebx   
4966 [0x1366]:         movsl #0   
4967 [0x1367]:         movi #86, adx   
4969 [0x1369]:         rmov adx, ebx   
4970 [0x136a]:         movi #0, ebx   
4972 [0x136c]:         movsl #0   
4973 [0x136d]:         movi #87, adx   
4975 [0x136f]:         rmov adx, ebx   
4976 [0x1370]:         movi #0, ebx   
4978 [0x1372]:         movsl #0   
4979 [0x1373]:         movi #88, adx   
4981 [0x1375]:         rmov adx, ebx   
4982 [0x1376]:         movi #0, ebx   
4984 [0x1378]:         movsl #0   
4985 [0x1379]:         movi #89, adx   
4987 [0x137b]:         rmov adx, ebx   
4988 [0x137c]:         movi #0, ebx   
4990 [0x137e]:         movsl #0   
4991 [0x137f]:         movi #90, adx   
4993 [0x1381]:         rmov adx, ebx   
4994 [0x1382]:         movi #0, ebx   
4996 [0x1384]:         movsl #0   
4997 [0x1385]:         movi #91, adx   
4999 [0x1387]:         rmov adx, ebx   
5000 [0x1388]:         movi #0, ebx   
5002 [0x138a]:         movsl #0   
5003 [0x138b]:         movi #92, adx   
5005 [0x138d]:         rmov adx, ebx   
5006 [0x138e]:         movi #0, ebx   
5008 [0x1390]:         movsl #0   
5009 [0x1391]:         movi #93, adx   
5011 [0x1393]:         rmov adx, ebx   
5012 [0x1394]:         movi #2, ebx   
5014 [0x1396]:         movsl #0   
5015 [0x1397]:         movi #94, adx   
5017 [0x1399]:         rmov adx, ebx   
5018 [0x139a]:         movi #0, ebx   
5020 [0x139c]:         movsl #0   
5021 [0x139d]:         movi #95, adx   
5023 [0x139f]:         rmov adx, ebx   
5024 [0x13a0]:         movi #2, ebx   
5026 [0x13a2]:         movsl #0   
5027 [0x13a3]:         movi #96, adx   
5029 [0x13a5]:         rmov adx, ebx   
5030 [0x13a6]:         movi #2, ebx   
5032 [0x13a8]:         movsl #0   
5033 [0x13a9]:         movi #97, adx   
5035 [0x13ab]:         rmov adx, ebx   
5036 [0x13ac]:         movi #2, ebx   
5038 [0x13ae]:         movsl #0   
5039 [0x13af]:         movi #98, adx   
5041 [0x13b1]:         rmov adx, ebx   
5042 [0x13b2]:         movi #0, ebx   
5044 [0x13b4]:         movsl #0   
5045 [0x13b5]:         movi #99, adx   
5047 [0x13b7]:         rmov adx, ebx   
5048 [0x13b8]:         movi #0, ebx   
5050 [0x13ba]:         movsl #0   
5051 [0x13bb]:         movi #100, adx   
5053 [0x13bd]:         rmov adx, ebx   
5054 [0x13be]:         movi #0, ebx   
5056 [0x13c0]:         movsl #0   
5057 [0x13c1]:         movi #101, adx   
5059 [0x13c3]:         rmov adx, ebx   
5060 [0x13c4]:         movi #0, ebx   
5062 [0x13c6]:         movsl #0   
5063 [0x13c7]:         movi #102, adx   
5065 [0x13c9]:         rmov adx, ebx   
5066 [0x13ca]:         movi #0, ebx   
5068 [0x13cc]:         movsl #0   
5069 [0x13cd]:         movi #103, adx   
5071 [0x13cf]:         rmov adx, ebx   
5072 [0x13d0]:         movi #0, ebx   
5074 [0x13d2]:         movsl #0   
5075 [0x13d3]:         movi #104, adx   
5077 [0x13d5]:         rmov adx, ebx   
5078 [0x13d6]:         movi #0, ebx   
5080 [0x13d8]:         movsl #0   
5081 [0x13d9]:         movi #105, adx   
5083 [0x13db]:         rmov adx, ebx   
5084 [0x13dc]:         movi #0, ebx   
5086 [0x13de]:         movsl #0   
5087 [0x13df]:         movi #106, adx   
5089 [0x13e1]:         rmov adx, ebx   
5090 [0x13e2]:         movi #0, ebx   
5092 [0x13e4]:         movsl #0   
5093 [0x13e5]:         movi #107, adx   
5095 [0x13e7]:         rmov adx, ebx   
5096 [0x13e8]:         movi #0, ebx   
5098 [0x13ea]:         movsl #0   
5099 [0x13eb]:         movi #108, adx   
5101 [0x13ed]:         rmov adx, ebx   
5102 [0x13ee]:         movi #0, ebx   
5104 [0x13f0]:         movsl #0   
5105 [0x13f1]:         movi #109, adx   
5107 [0x13f3]:         rmov adx, ebx   
5108 [0x13f4]:         movi #0, ebx   
5110 [0x13f6]:         movsl #0   
5111 [0x13f7]:         movi #110, adx   
5113 [0x13f9]:         rmov adx, ebx   
5114 [0x13fa]:         movi #0, ebx   
5116 [0x13fc]:         movsl #0   
5117 [0x13fd]:         movi #111, adx   
5119 [0x13ff]:         rmov adx, ebx   
5120 [0x1400]:         movi #0, ebx   
5122 [0x1402]:         movsl #0   
5123 [0x1403]:         movi #112, adx   
5125 [0x1405]:         rmov adx, ebx   
5126 [0x1406]:         movi #0, ebx   
5128 [0x1408]:         movsl #0   
5129 [0x1409]:         movi #113, adx   
5131 [0x140b]:         rmov adx, ebx   
5132 [0x140c]:         movi #0, ebx   
5134 [0x140e]:         movsl #0   
5135 [0x140f]:         movi #114, adx   
5137 [0x1411]:         rmov adx, ebx   
5138 [0x1412]:         movi #0, ebx   
5140 [0x1414]:         movsl #0   
5141 [0x1415]:         movi #115, adx   
5143 [0x1417]:         rmov adx, ebx   
5144 [0x1418]:         movi #0, ebx   
5146 [0x141a]:         movsl #0   
5147 [0x141b]:         movi #116, adx   
5149 [0x141d]:         rmov adx, ebx   
5150 [0x141e]:         movg @108 // @ui.res.drawable#__srt_global   
5151 [0x141f]:         movn #10   
5153 [0x1421]:         popobj   
5154 [0x1422]:         new_class @121 // ui.support#drawable   
5155 [0x1423]:         dup    
5156 [0x1424]:         istore 10   
5158 [0x1426]:         movg @108 // @ui.res.drawable#__srt_global   
5159 [0x1427]:         movn #10   
5161 [0x1429]:         pushobj   
5162 [0x142a]:         istore 13   
5164 [0x142c]:         movi #9, ebx   
5166 [0x142e]:         rstore ebx   
5167 [0x142f]:         call @3181 // <ui.support#drawable.drawable>   
5168 [0x1430]:         movg @108 // @ui.res.drawable#__srt_global   
5169 [0x1431]:         movn #11   
5171 [0x1433]:         popobj   
5172 [0x1434]:         movi #117, ebx   
5174 [0x1436]:         newarry ebx   
5175 [0x1437]:         movi #0, ebx   
5177 [0x1439]:         movsl #0   
5178 [0x143a]:         movi #0, adx   
5180 [0x143c]:         rmov adx, ebx   
5181 [0x143d]:         movi #2, ebx   
5183 [0x143f]:         movsl #0   
5184 [0x1440]:         movi #1, adx   
5186 [0x1442]:         rmov adx, ebx   
5187 [0x1443]:         movi #2, ebx   
5189 [0x1445]:         movsl #0   
5190 [0x1446]:         movi #2, adx   
5192 [0x1448]:         rmov adx, ebx   
5193 [0x1449]:         movi #2, ebx   
5195 [0x144b]:         movsl #0   
5196 [0x144c]:         movi #3, adx   
5198 [0x144e]:         rmov adx, ebx   
5199 [0x144f]:         movi #2, ebx   
5201 [0x1451]:         movsl #0   
5202 [0x1452]:         movi #4, adx   
5204 [0x1454]:         rmov adx, ebx   
5205 [0x1455]:         movi #2, ebx   
5207 [0x1457]:         movsl #0   
5208 [0x1458]:         movi #5, adx   
5210 [0x145a]:         rmov adx, ebx   
5211 [0x145b]:         movi #0, ebx   
5213 [0x145d]:         movsl #0   
5214 [0x145e]:         movi #6, adx   
5216 [0x1460]:         rmov adx, ebx   
5217 [0x1461]:         movi #0, ebx   
5219 [0x1463]:         movsl #0   
5220 [0x1464]:         movi #7, adx   
5222 [0x1466]:         rmov adx, ebx   
5223 [0x1467]:         movi #0, ebx   
5225 [0x1469]:         movsl #0   
5226 [0x146a]:         movi #8, adx   
5228 [0x146c]:         rmov adx, ebx   
5229 [0x146d]:         movi #0, ebx   
5231 [0x146f]:         movsl #0   
5232 [0x1470]:         movi #9, adx   
5234 [0x1472]:         rmov adx, ebx   
5235 [0x1473]:         movi #0, ebx   
5237 [0x1475]:         movsl #0   
5238 [0x1476]:         movi #10, adx   
5240 [0x1478]:         rmov adx, ebx   
5241 [0x1479]:         movi #0, ebx   
5243 [0x147b]:         movsl #0   
5244 [0x147c]:         movi #11, adx   
5246 [0x147e]:         rmov adx, ebx   
5247 [0x147f]:         movi #0, ebx   
5249 [0x1481]:         movsl #0   
5250 [0x1482]:         movi #12, adx   
5252 [0x1484]:         rmov adx, ebx   
5253 [0x1485]:         movi #0, ebx   
5255 [0x1487]:         movsl #0   
5256 [0x1488]:         movi #13, adx   
5258 [0x148a]:         rmov adx, ebx   
5259 [0x148b]:         movi #2, ebx   
5261 [0x148d]:         movsl #0   
5262 [0x148e]:         movi #14, adx   
5264 [0x1490]:         rmov adx, ebx   
5265 [0x1491]:         movi #0, ebx   
5267 [0x1493]:         movsl #0   
5268 [0x1494]:         movi #15, adx   
5270 [0x1496]:         rmov adx, ebx   
5271 [0x1497]:         movi #2, ebx   
5273 [0x1499]:         movsl #0   
5274 [0x149a]:         movi #16, adx   
5276 [0x149c]:         rmov adx, ebx   
5277 [0x149d]:         movi #0, ebx   
5279 [0x149f]:         movsl #0   
5280 [0x14a0]:         movi #17, adx   
5282 [0x14a2]:         rmov adx, ebx   
5283 [0x14a3]:         movi #2, ebx   
5285 [0x14a5]:         movsl #0   
5286 [0x14a6]:         movi #18, adx   
5288 [0x14a8]:         rmov adx, ebx   
5289 [0x14a9]:         movi #0, ebx   
5291 [0x14ab]:         movsl #0   
5292 [0x14ac]:         movi #19, adx   
5294 [0x14ae]:         rmov adx, ebx   
5295 [0x14af]:         movi #0, ebx   
5297 [0x14b1]:         movsl #0   
5298 [0x14b2]:         movi #20, adx   
5300 [0x14b4]:         rmov adx, ebx   
5301 [0x14b5]:         movi #0, ebx   
5303 [0x14b7]:         movsl #0   
5304 [0x14b8]:         movi #21, adx   
5306 [0x14ba]:         rmov adx, ebx   
5307 [0x14bb]:         movi #0, ebx   
5309 [0x14bd]:         movsl #0   
5310 [0x14be]:         movi #22, adx   
5312 [0x14c0]:         rmov adx, ebx   
5313 [0x14c1]:         movi #2, ebx   
5315 [0x14c3]:         movsl #0   
5316 [0x14c4]:         movi #23, adx   
5318 [0x14c6]:         rmov adx, ebx   
5319 [0x14c7]:         movi #0, ebx   
5321 [0x14c9]:         movsl #0   
5322 [0x14ca]:         movi #24, adx   
5324 [0x14cc]:         rmov adx, ebx   
5325 [0x14cd]:         movi #2, ebx   
5327 [0x14cf]:         movsl #0   
5328 [0x14d0]:         movi #25, adx   
5330 [0x14d2]:         rmov adx, ebx   
5331 [0x14d3]:         movi #0, ebx   
5333 [0x14d5]:         movsl #0   
5334 [0x14d6]:         movi #26, adx   
5336 [0x14d8]:         rmov adx, ebx   
5337 [0x14d9]:         movi #0, ebx   
5339 [0x14db]:         movsl #0   
5340 [0x14dc]:         movi #27, adx   
5342 [0x14de]:         rmov adx, ebx   
5343 [0x14df]:         movi #2, ebx   
5345 [0x14e1]:         movsl #0   
5346 [0x14e2]:         movi #28, adx   
5348 [0x14e4]:         rmov adx, ebx   
5349 [0x14e5]:         movi #2, ebx   
5351 [0x14e7]:         movsl #0   
5352 [0x14e8]:         movi #29, adx   
5354 [0x14ea]:         rmov adx, ebx   
5355 [0x14eb]:         movi #2, ebx   
5357 [0x14ed]:         movsl #0   
5358 [0x14ee]:         movi #30, adx   
5360 [0x14f0]:         rmov adx, ebx   
5361 [0x14f1]:         movi #0, ebx   
5363 [0x14f3]:         movsl #0   
5364 [0x14f4]:         movi #31, adx   
5366 [0x14f6]:         rmov adx, ebx   
5367 [0x14f7]:         movi #0, ebx   
5369 [0x14f9]:         movsl #0   
5370 [0x14fa]:         movi #32, adx   
5372 [0x14fc]:         rmov adx, ebx   
5373 [0x14fd]:         movi #0, ebx   
5375 [0x14ff]:         movsl #0   
5376 [0x1500]:         movi #33, adx   
5378 [0x1502]:         rmov adx, ebx   
5379 [0x1503]:         movi #0, ebx   
5381 [0x1505]:         movsl #0   
5382 [0x1506]:         movi #34, adx   
5384 [0x1508]:         rmov adx, ebx   
5385 [0x1509]:         movi #0, ebx   
5387 [0x150b]:         movsl #0   
5388 [0x150c]:         movi #35, adx   
5390 [0x150e]:         rmov adx, ebx   
5391 [0x150f]:         movi #0, ebx   
5393 [0x1511]:         movsl #0   
5394 [0x1512]:         movi #36, adx   
5396 [0x1514]:         rmov adx, ebx   
5397 [0x1515]:         movi #2, ebx   
5399 [0x1517]:         movsl #0   
5400 [0x1518]:         movi #37, adx   
5402 [0x151a]:         rmov adx, ebx   
5403 [0x151b]:         movi #0, ebx   
5405 [0x151d]:         movsl #0   
5406 [0x151e]:         movi #38, adx   
5408 [0x1520]:         rmov adx, ebx   
5409 [0x1521]:         movi #0, ebx   
5411 [0x1523]:         movsl #0   
5412 [0x1524]:         movi #39, adx   
5414 [0x1526]:         rmov adx, ebx   
5415 [0x1527]:         movi #0, ebx   
5417 [0x1529]:         movsl #0   
5418 [0x152a]:         movi #40, adx   
5420 [0x152c]:         rmov adx, ebx   
5421 [0x152d]:         movi #0, ebx   
5423 [0x152f]:         movsl #0   
5424 [0x1530]:         movi #41, adx   
5426 [0x1532]:         rmov adx, ebx   
5427 [0x1533]:         movi #2, ebx   
5429 [0x1535]:         movsl #0   
5430 [0x1536]:         movi #42, adx   
5432 [0x1538]:         rmov adx, ebx   
5433 [0x1539]:         movi #0, ebx   
5435 [0x153b]:         movsl #0   
5436 [0x153c]:         movi #43, adx   
5438 [0x153e]:         rmov adx, ebx   
5439 [0x153f]:         movi #0, ebx   
5441 [0x1541]:         movsl #0   
5442 [0x1542]:         movi #44, adx   
5444 [0x1544]:         rmov adx, ebx   
5445 [0x1545]:         movi #0, ebx   
5447 [0x1547]:         movsl #0   
5448 [0x1548]:         movi #45, adx   
5450 [0x154a]:         rmov adx, ebx   
5451 [0x154b]:         movi #0, ebx   
5453 [0x154d]:         movsl #0   
5454 [0x154e]:         movi #46, adx   
5456 [0x1550]:         rmov adx, ebx   
5457 [0x1551]:         movi #0, ebx   
5459 [0x1553]:         movsl #0   
5460 [0x1554]:         movi #47, adx   
5462 [0x1556]:         rmov adx, ebx   
5463 [0x1557]:         movi #0, ebx   
5465 [0x1559]:         movsl #0   
5466 [0x155a]:         movi #48, adx   
5468 [0x155c]:         rmov adx, ebx   
5469 [0x155d]:         movi #2, ebx   
5471 [0x155f]:         movsl #0   
5472 [0x1560]:         movi #49, adx   
5474 [0x1562]:         rmov adx, ebx   
5475 [0x1563]:         movi #0, ebx   
5477 [0x1565]:         movsl #0   
5478 [0x1566]:         movi #50, adx   
5480 [0x1568]:         rmov adx, ebx   
5481 [0x1569]:         movi #2, ebx   
5483 [0x156b]:         movsl #0   
5484 [0x156c]:         movi #51, adx   
5486 [0x156e]:         rmov adx, ebx   
5487 [0x156f]:         movi #0, ebx   
5489 [0x1571]:         movsl #0   
5490 [0x1572]:         movi #52, adx   
5492 [0x1574]:         rmov adx, ebx   
5493 [0x1575]:         movi #0, ebx   
5495 [0x1577]:         movsl #0   
5496 [0x1578]:         movi #53, adx   
5498 [0x157a]:         rmov adx, ebx   
5499 [0x157b]:         movi #0, ebx   
5501 [0x157d]:         movsl #0   
5502 [0x157e]:         movi #54, adx   
5504 [0x1580]:         rmov adx, ebx   
5505 [0x1581]:         movi #2, ebx   
5507 [0x1583]:         movsl #0   
5508 [0x1584]:         movi #55, adx   
5510 [0x1586]:         rmov adx, ebx   
5511 [0x1587]:         movi #0, ebx   
5513 [0x1589]:         movsl #0   
5514 [0x158a]:         movi #56, adx   
5516 [0x158c]:         rmov adx, ebx   
5517 [0x158d]:         movi #0, ebx   
5519 [0x158f]:         movsl #0   
5520 [0x1590]:         movi #57, adx   
5522 [0x1592]:         rmov adx, ebx   
5523 [0x1593]:         movi #0, ebx   
5525 [0x1595]:         movsl #0   
5526 [0x1596]:         movi #58, adx   
5528 [0x1598]:         rmov adx, ebx   
5529 [0x1599]:         movi #0, ebx   
5531 [0x159b]:         movsl #0   
5532 [0x159c]:         movi #59, adx   
5534 [0x159e]:         rmov adx, ebx   
5535 [0x159f]:         movi #0, ebx   
5537 [0x15a1]:         movsl #0   
5538 [0x15a2]:         movi #60, adx   
5540 [0x15a4]:         rmov adx, ebx   
5541 [0x15a5]:         movi #2, ebx   
5543 [0x15a7]:         movsl #0   
5544 [0x15a8]:         movi #61, adx   
5546 [0x15aa]:         rmov adx, ebx   
5547 [0x15ab]:         movi #0, ebx   
5549 [0x15ad]:         movsl #0   
5550 [0x15ae]:         movi #62, adx   
5552 [0x15b0]:         rmov adx, ebx   
5553 [0x15b1]:         movi #2, ebx   
5555 [0x15b3]:         movsl #0   
5556 [0x15b4]:         movi #63, adx   
5558 [0x15b6]:         rmov adx, ebx   
5559 [0x15b7]:         movi #0, ebx   
5561 [0x15b9]:         movsl #0   
5562 [0x15ba]:         movi #64, adx   
5564 [0x15bc]:         rmov adx, ebx   
5565 [0x15bd]:         movi #0, ebx   
5567 [0x15bf]:         movsl #0   
5568 [0x15c0]:         movi #65, adx   
5570 [0x15c2]:         rmov adx, ebx   
5571 [0x15c3]:         movi #0, ebx   
5573 [0x15c5]:         movsl #0   
5574 [0x15c6]:         movi #66, adx   
5576 [0x15c8]:         rmov adx, ebx   
5577 [0x15c9]:         movi #0, ebx   
5579 [0x15cb]:         movsl #0   
5580 [0x15cc]:         movi #67, adx   
5582 [0x15ce]:         rmov adx, ebx   
5583 [0x15cf]:         movi #2, ebx   
5585 [0x15d1]:         movsl #0   
5586 [0x15d2]:         movi #68, adx   
5588 [0x15d4]:         rmov adx, ebx   
5589 [0x15d5]:         movi #0, ebx   
5591 [0x15d7]:         movsl #0   
5592 [0x15d8]:         movi #69, adx   
5594 [0x15da]:         rmov adx, ebx   
5595 [0x15db]:         movi #0, ebx   
5597 [0x15dd]:         movsl #0   
5598 [0x15de]:         movi #70, adx   
5600 [0x15e0]:         rmov adx, ebx   
5601 [0x15e1]:         movi #0, ebx   
5603 [0x15e3]:         movsl #0   
5604 [0x15e4]:         movi #71, adx   
5606 [0x15e6]:         rmov adx, ebx   
5607 [0x15e7]:         movi #2, ebx   
5609 [0x15e9]:         movsl #0   
5610 [0x15ea]:         movi #72, adx   
5612 [0x15ec]:         rmov adx, ebx   
5613 [0x15ed]:         movi #0, ebx   
5615 [0x15ef]:         movsl #0   
5616 [0x15f0]:         movi #73, adx   
5618 [0x15f2]:         rmov adx, ebx   
5619 [0x15f3]:         movi #2, ebx   
5621 [0x15f5]:         movsl #0   
5622 [0x15f6]:         movi #74, adx   
5624 [0x15f8]:         rmov adx, ebx   
5625 [0x15f9]:         movi #0, ebx   
5627 [0x15fb]:         movsl #0   
5628 [0x15fc]:         movi #75, adx   
5630 [0x15fe]:         rmov adx, ebx   
5631 [0x15ff]:         movi #2, ebx   
5633 [0x1601]:         movsl #0   
5634 [0x1602]:         movi #76, adx   
5636 [0x1604]:         rmov adx, ebx   
5637 [0x1605]:         movi #0, ebx   
5639 [0x1607]:         movsl #0   
5640 [0x1608]:         movi #77, adx   
5642 [0x160a]:         rmov adx, ebx   
5643 [0x160b]:         movi #0, ebx   
5645 [0x160d]:         movsl #0   
5646 [0x160e]:         movi #78, adx   
5648 [0x1610]:         rmov adx, ebx   
5649 [0x1611]:         movi #0, ebx   
5651 [0x1613]:         movsl #0   
5652 [0x1614]:         movi #79, adx   
5654 [0x1616]:         rmov adx, ebx   
5655 [0x1617]:         movi #0, ebx   
5657 [0x1619]:         movsl #0   
5658 [0x161a]:         movi #80, adx   
5660 [0x161c]:         rmov adx, ebx   
5661 [0x161d]:         movi #2, ebx   
5663 [0x161f]:         movsl #0   
5664 [0x1620]:         movi #81, adx   
5666 [0x1622]:         rmov adx, ebx   
5667 [0x1623]:         movi #0, ebx   
5669 [0x1625]:         movsl #0   
5670 [0x1626]:         movi #82, adx   
5672 [0x1628]:         rmov adx, ebx   
5673 [0x1629]:         movi #2, ebx   
5675 [0x162b]:         movsl #0   
5676 [0x162c]:         movi #83, adx   
5678 [0x162e]:         rmov adx, ebx   
5679 [0x162f]:         movi #0, ebx   
5681 [0x1631]:         movsl #0   
5682 [0x1632]:         movi #84, adx   
5684 [0x1634]:         rmov adx, ebx   
5685 [0x1635]:         movi #2, ebx   
5687 [0x1637]:         movsl #0   
5688 [0x1638]:         movi #85, adx   
5690 [0x163a]:         rmov adx, ebx   
5691 [0x163b]:         movi #0, ebx   
5693 [0x163d]:         movsl #0   
5694 [0x163e]:         movi #86, adx   
5696 [0x1640]:         rmov adx, ebx   
5697 [0x1641]:         movi #2, ebx   
5699 [0x1643]:         movsl #0   
5700 [0x1644]:         movi #87, adx   
5702 [0x1646]:         rmov adx, ebx   
5703 [0x1647]:         movi #0, ebx   
5705 [0x1649]:         movsl #0   
5706 [0x164a]:         movi #88, adx   
5708 [0x164c]:         rmov adx, ebx   
5709 [0x164d]:         movi #2, ebx   
5711 [0x164f]:         movsl #0   
5712 [0x1650]:         movi #89, adx   
5714 [0x1652]:         rmov adx, ebx   
5715 [0x1653]:         movi #0, ebx   
5717 [0x1655]:         movsl #0   
5718 [0x1656]:         movi #90, adx   
5720 [0x1658]:         rmov adx, ebx   
5721 [0x1659]:         movi #0, ebx   
5723 [0x165b]:         movsl #0   
5724 [0x165c]:         movi #91, adx   
5726 [0x165e]:         rmov adx, ebx   
5727 [0x165f]:         movi #0, ebx   
5729 [0x1661]:         movsl #0   
5730 [0x1662]:         movi #92, adx   
5732 [0x1664]:         rmov adx, ebx   
5733 [0x1665]:         movi #0, ebx   
5735 [0x1667]:         movsl #0   
5736 [0x1668]:         movi #93, adx   
5738 [0x166a]:         rmov adx, ebx   
5739 [0x166b]:         movi #2, ebx   
5741 [0x166d]:         movsl #0   
5742 [0x166e]:         movi #94, adx   
5744 [0x1670]:         rmov adx, ebx   
5745 [0x1671]:         movi #0, ebx   
5747 [0x1673]:         movsl #0   
5748 [0x1674]:         movi #95, adx   
5750 [0x1676]:         rmov adx, ebx   
5751 [0x1677]:         movi #2, ebx   
5753 [0x1679]:         movsl #0   
5754 [0x167a]:         movi #96, adx   
5756 [0x167c]:         rmov adx, ebx   
5757 [0x167d]:         movi #0, ebx   
5759 [0x167f]:         movsl #0   
5760 [0x1680]:         movi #97, adx   
5762 [0x1682]:         rmov adx, ebx   
5763 [0x1683]:         movi #2, ebx   
5765 [0x1685]:         movsl #0   
5766 [0x1686]:         movi #98, adx   
5768 [0x1688]:         rmov adx, ebx   
5769 [0x1689]:         movi #0, ebx   
5771 [0x168b]:         movsl #0   
5772 [0x168c]:         movi #99, adx   
5774 [0x168e]:         rmov adx, ebx   
5775 [0x168f]:         movi #2, ebx   
5777 [0x1691]:         movsl #0   
5778 [0x1692]:         movi #100, adx   
5780 [0x1694]:         rmov adx, ebx   
5781 [0x1695]:         movi #0, ebx   
5783 [0x1697]:         movsl #0   
5784 [0x1698]:         movi #101, adx   
5786 [0x169a]:         rmov adx, ebx   
5787 [0x169b]:         movi #2, ebx   
5789 [0x169d]:         movsl #0   
5790 [0x169e]:         movi #102, adx   
5792 [0x16a0]:         rmov adx, ebx   
5793 [0x16a1]:         movi #0, ebx   
5795 [0x16a3]:         movsl #0   
5796 [0x16a4]:         movi #103, adx   
5798 [0x16a6]:         rmov adx, ebx   
5799 [0x16a7]:         movi #0, ebx   
5801 [0x16a9]:         movsl #0   
5802 [0x16aa]:         movi #104, adx   
5804 [0x16ac]:         rmov adx, ebx   
5805 [0x16ad]:         movi #0, ebx   
5807 [0x16af]:         movsl #0   
5808 [0x16b0]:         movi #105, adx   
5810 [0x16b2]:         rmov adx, ebx   
5811 [0x16b3]:         movi #0, ebx   
5813 [0x16b5]:         movsl #0   
5814 [0x16b6]:         movi #106, adx   
5816 [0x16b8]:         rmov adx, ebx   
5817 [0x16b9]:         movi #2, ebx   
5819 [0x16bb]:         movsl #0   
5820 [0x16bc]:         movi #107, adx   
5822 [0x16be]:         rmov adx, ebx   
5823 [0x16bf]:         movi #0, ebx   
5825 [0x16c1]:         movsl #0   
5826 [0x16c2]:         movi #108, adx   
5828 [0x16c4]:         rmov adx, ebx   
5829 [0x16c5]:         movi #2, ebx   
5831 [0x16c7]:         movsl #0   
5832 [0x16c8]:         movi #109, adx   
5834 [0x16ca]:         rmov adx, ebx   
5835 [0x16cb]:         movi #0, ebx   
5837 [0x16cd]:         movsl #0   
5838 [0x16ce]:         movi #110, adx   
5840 [0x16d0]:         rmov adx, ebx   
5841 [0x16d1]:         movi #2, ebx   
5843 [0x16d3]:         movsl #0   
5844 [0x16d4]:         movi #111, adx   
5846 [0x16d6]:         rmov adx, ebx   
5847 [0x16d7]:         movi #0, ebx   
5849 [0x16d9]:         movsl #0   
5850 [0x16da]:         movi #112, adx   
5852 [0x16dc]:         rmov adx, ebx   
5853 [0x16dd]:         movi #2, ebx   
5855 [0x16df]:         movsl #0   
5856 [0x16e0]:         movi #113, adx   
5858 [0x16e2]:         rmov adx, ebx   
5859 [0x16e3]:         movi #0, ebx   
5861 [0x16e5]:         movsl #0   
5862 [0x16e6]:         movi #114, adx   
5864 [0x16e8]:         rmov adx, ebx   
5865 [0x16e9]:         movi #2, ebx   
5867 [0x16eb]:         movsl #0   
5868 [0x16ec]:         movi #115, adx   
5870 [0x16ee]:         rmov adx, ebx   
5871 [0x16ef]:         movi #0, ebx   
5873 [0x16f1]:         movsl #0   
5874 [0x16f2]:         movi #116, adx   
5876 [0x16f4]:         rmov adx, ebx   
5877 [0x16f5]:         movg @108 // @ui.res.drawable#__srt_global   
5878 [0x16f6]:         movn #12   
5880 [0x16f8]:         popobj   
5881 [0x16f9]:         new_class @121 // ui.support#drawable   
5882 [0x16fa]:         dup    
5883 [0x16fb]:         istore 5   
5885 [0x16fd]:         movg @108 // @ui.res.drawable#__srt_global   
5886 [0x16fe]:         movn #12   
5888 [0x1700]:         pushobj   
5889 [0x1701]:         istore 13   
5891 [0x1703]:         movi #9, ebx   
5893 [0x1705]:         rstore ebx   
5894 [0x1706]:         call @3181 // <ui.support#drawable.drawable>   
5895 [0x1707]:         movg @108 // @ui.res.drawable#__srt_global   
5896 [0x1708]:         movn #13   
5898 [0x170a]:         popobj   
5899 [0x170b]:         movi #117, ebx   
5901 [0x170d]:         newarry ebx   
5902 [0x170e]:         movi #0, ebx   
5904 [0x1710]:         movsl #0   
5905 [0x1711]:         movi #0, adx   
5907 [0x1713]:         rmov adx, ebx   
5908 [0x1714]:         movi #2, ebx   
5910 [0x1716]:         movsl #0   
5911 [0x1717]:         movi #1, adx   
5913 [0x1719]:         rmov adx, ebx   
5914 [0x171a]:         movi #2, ebx   
5916 [0x171c]:         movsl #0   
5917 [0x171d]:         movi #2, adx   
5919 [0x171f]:         rmov adx, ebx   
5920 [0x1720]:         movi #2, ebx   
5922 [0x1722]:         movsl #0   
5923 [0x1723]:         movi #3, adx   
5925 [0x1725]:         rmov adx, ebx   
5926 [0x1726]:         movi #2, ebx   
5928 [0x1728]:         movsl #0   
5929 [0x1729]:         movi #4, adx   
5931 [0x172b]:         rmov adx, ebx   
5932 [0x172c]:         movi #2, ebx   
5934 [0x172e]:         movsl #0   
5935 [0x172f]:         movi #5, adx   
5937 [0x1731]:         rmov adx, ebx   
5938 [0x1732]:         movi #0, ebx   
5940 [0x1734]:         movsl #0   
5941 [0x1735]:         movi #6, adx   
5943 [0x1737]:         rmov adx, ebx   
5944 [0x1738]:         movi #0, ebx   
5946 [0x173a]:         movsl #0   
5947 [0x173b]:         movi #7, adx   
5949 [0x173d]:         rmov adx, ebx   
5950 [0x173e]:         movi #0, ebx   
5952 [0x1740]:         movsl #0   
5953 [0x1741]:         movi #8, adx   
5955 [0x1743]:         rmov adx, ebx   
5956 [0x1744]:         movi #0, ebx   
5958 [0x1746]:         movsl #0   
5959 [0x1747]:         movi #9, adx   
5961 [0x1749]:         rmov adx, ebx   
5962 [0x174a]:         movi #0, ebx   
5964 [0x174c]:         movsl #0   
5965 [0x174d]:         movi #10, adx   
5967 [0x174f]:         rmov adx, ebx   
5968 [0x1750]:         movi #0, ebx   
5970 [0x1752]:         movsl #0   
5971 [0x1753]:         movi #11, adx   
5973 [0x1755]:         rmov adx, ebx   
5974 [0x1756]:         movi #0, ebx   
5976 [0x1758]:         movsl #0   
5977 [0x1759]:         movi #12, adx   
5979 [0x175b]:         rmov adx, ebx   
5980 [0x175c]:         movi #0, ebx   
5982 [0x175e]:         movsl #0   
5983 [0x175f]:         movi #13, adx   
5985 [0x1761]:         rmov adx, ebx   
5986 [0x1762]:         movi #2, ebx   
5988 [0x1764]:         movsl #0   
5989 [0x1765]:         movi #14, adx   
5991 [0x1767]:         rmov adx, ebx   
5992 [0x1768]:         movi #0, ebx   
5994 [0x176a]:         movsl #0   
5995 [0x176b]:         movi #15, adx   
5997 [0x176d]:         rmov adx, ebx   
5998 [0x176e]:         movi #2, ebx   
6000 [0x1770]:         movsl #0   
6001 [0x1771]:         movi #16, adx   
6003 [0x1773]:         rmov adx, ebx   
6004 [0x1774]:         movi #0, ebx   
6006 [0x1776]:         movsl #0   
6007 [0x1777]:         movi #17, adx   
6009 [0x1779]:         rmov adx, ebx   
6010 [0x177a]:         movi #2, ebx   
6012 [0x177c]:         movsl #0   
6013 [0x177d]:         movi #18, adx   
6015 [0x177f]:         rmov adx, ebx   
6016 [0x1780]:         movi #0, ebx   
6018 [0x1782]:         movsl #0   
6019 [0x1783]:         movi #19, adx   
6021 [0x1785]:         rmov adx, ebx   
6022 [0x1786]:         movi #0, ebx   
6024 [0x1788]:         movsl #0   
6025 [0x1789]:         movi #20, adx   
6027 [0x178b]:         rmov adx, ebx   
6028 [0x178c]:         movi #0, ebx   
6030 [0x178e]:         movsl #0   
6031 [0x178f]:         movi #21, adx   
6033 [0x1791]:         rmov adx, ebx   
6034 [0x1792]:         movi #0, ebx   
6036 [0x1794]:         movsl #0   
6037 [0x1795]:         movi #22, adx   
6039 [0x1797]:         rmov adx, ebx   
6040 [0x1798]:         movi #0, ebx   
6042 [0x179a]:         movsl #0   
6043 [0x179b]:         movi #23, adx   
6045 [0x179d]:         rmov adx, ebx   
6046 [0x179e]:         movi #0, ebx   
6048 [0x17a0]:         movsl #0   
6049 [0x17a1]:         movi #24, adx   
6051 [0x17a3]:         rmov adx, ebx   
6052 [0x17a4]:         movi #0, ebx   
6054 [0x17a6]:         movsl #0   
6055 [0x17a7]:         movi #25, adx   
6057 [0x17a9]:         rmov adx, ebx   
6058 [0x17aa]:         movi #0, ebx   
6060 [0x17ac]:         movsl #0   
6061 [0x17ad]:         movi #26, adx   
6063 [0x17af]:         rmov adx, ebx   
6064 [0x17b0]:         movi #0, ebx   
6066 [0x17b2]:         movsl #0   
6067 [0x17b3]:         movi #27, adx   
6069 [0x17b5]:         rmov adx, ebx   
6070 [0x17b6]:         movi #2, ebx   
6072 [0x17b8]:         movsl #0   
6073 [0x17b9]:         movi #28, adx   
6075 [0x17bb]:         rmov adx, ebx   
6076 [0x17bc]:         movi #2, ebx   
6078 [0x17be]:         movsl #0   
6079 [0x17bf]:         movi #29, adx   
6081 [0x17c1]:         rmov adx, ebx   
6082 [0x17c2]:         movi #2, ebx   
6084 [0x17c4]:         movsl #0   
6085 [0x17c5]:         movi #30, adx   
6087 [0x17c7]:         rmov adx, ebx   
6088 [0x17c8]:         movi #0, ebx   
6090 [0x17ca]:         movsl #0   
6091 [0x17cb]:         movi #31, adx   
6093 [0x17cd]:         rmov adx, ebx   
6094 [0x17ce]:         movi #0, ebx   
6096 [0x17d0]:         movsl #0   
6097 [0x17d1]:         movi #32, adx   
6099 [0x17d3]:         rmov adx, ebx   
6100 [0x17d4]:         movi #0, ebx   
6102 [0x17d6]:         movsl #0   
6103 [0x17d7]:         movi #33, adx   
6105 [0x17d9]:         rmov adx, ebx   
6106 [0x17da]:         movi #0, ebx   
6108 [0x17dc]:         movsl #0   
6109 [0x17dd]:         movi #34, adx   
6111 [0x17df]:         rmov adx, ebx   
6112 [0x17e0]:         movi #0, ebx   
6114 [0x17e2]:         movsl #0   
6115 [0x17e3]:         movi #35, adx   
6117 [0x17e5]:         rmov adx, ebx   
6118 [0x17e6]:         movi #0, ebx   
6120 [0x17e8]:         movsl #0   
6121 [0x17e9]:         movi #36, adx   
6123 [0x17eb]:         rmov adx, ebx   
6124 [0x17ec]:         movi #0, ebx   
6126 [0x17ee]:         movsl #0   
6127 [0x17ef]:         movi #37, adx   
6129 [0x17f1]:         rmov adx, ebx   
6130 [0x17f2]:         movi #0, ebx   
6132 [0x17f4]:         movsl #0   
6133 [0x17f5]:         movi #38, adx   
6135 [0x17f7]:         rmov adx, ebx   
6136 [0x17f8]:         movi #0, ebx   
6138 [0x17fa]:         movsl #0   
6139 [0x17fb]:         movi #39, adx   
6141 [0x17fd]:         rmov adx, ebx   
6142 [0x17fe]:         movi #0, ebx   
6144 [0x1800]:         movsl #0   
6145 [0x1801]:         movi #40, adx   
6147 [0x1803]:         rmov adx, ebx   
6148 [0x1804]:         movi #0, ebx   
6150 [0x1806]:         movsl #0   
6151 [0x1807]:         movi #41, adx   
6153 [0x1809]:         rmov adx, ebx   
6154 [0x180a]:         movi #2, ebx   
6156 [0x180c]:         movsl #0   
6157 [0x180d]:         movi #42, adx   
6159 [0x180f]:         rmov adx, ebx   
6160 [0x1810]:         movi #0, ebx   
6162 [0x1812]:         movsl #0   
6163 [0x1813]:         movi #43, adx   
6165 [0x1815]:         rmov adx, ebx   
6166 [0x1816]:         movi #0, ebx   
6168 [0x1818]:         movsl #0   
6169 [0x1819]:         movi #44, adx   
6171 [0x181b]:         rmov adx, ebx   
6172 [0x181c]:         movi #0, ebx   
6174 [0x181e]:         movsl #0   
6175 [0x181f]:         movi #45, adx   
6177 [0x1821]:         rmov adx, ebx   
6178 [0x1822]:         movi #0, ebx   
6180 [0x1824]:         movsl #0   
6181 [0x1825]:         movi #46, adx   
6183 [0x1827]:         rmov adx, ebx   
6184 [0x1828]:         movi #0, ebx   
6186 [0x182a]:         movsl #0   
6187 [0x182b]:         movi #47, adx   
6189 [0x182d]:         rmov adx, ebx   
6190 [0x182e]:         movi #0, ebx   
6192 [0x1830]:         movsl #0   
6193 [0x1831]:         movi #48, adx   
6195 [0x1833]:         rmov adx, ebx   
6196 [0x1834]:         movi #0, ebx   
6198 [0x1836]:         movsl #0   
6199 [0x1837]:         movi #49, adx   
6201 [0x1839]:         rmov adx, ebx   
6202 [0x183a]:         movi #0, ebx   
6204 [0x183c]:         movsl #0   
6205 [0x183d]:         movi #50, adx   
6207 [0x183f]:         rmov adx, ebx   
6208 [0x1840]:         movi #0, ebx   
6210 [0x1842]:         movsl #0   
6211 [0x1843]:         movi #51, adx   
6213 [0x1845]:         rmov adx, ebx   
6214 [0x1846]:         movi #0, ebx   
6216 [0x1848]:         movsl #0   
6217 [0x1849]:         movi #52, adx   
6219 [0x184b]:         rmov adx, ebx   
6220 [0x184c]:         movi #0, ebx   
6222 [0x184e]:         movsl #0   
6223 [0x184f]:         movi #53, adx   
6225 [0x1851]:         rmov adx, ebx   
6226 [0x1852]:         movi #0, ebx   
6228 [0x1854]:         movsl #0   
6229 [0x1855]:         movi #54, adx   
6231 [0x1857]:         rmov adx, ebx   
6232 [0x1858]:         movi #2, ebx   
6234 [0x185a]:         movsl #0   
6235 [0x185b]:         movi #55, adx   
6237 [0x185d]:         rmov adx, ebx   
6238 [0x185e]:         movi #0, ebx   
6240 [0x1860]:         movsl #0   
6241 [0x1861]:         movi #56, adx   
6243 [0x1863]:         rmov adx, ebx   
6244 [0x1864]:         movi #0, ebx   
6246 [0x1866]:         movsl #0   
6247 [0x1867]:         movi #57, adx   
6249 [0x1869]:         rmov adx, ebx   
6250 [0x186a]:         movi #0, ebx   
6252 [0x186c]:         movsl #0   
6253 [0x186d]:         movi #58, adx   
6255 [0x186f]:         rmov adx, ebx   
6256 [0x1870]:         movi #0, ebx   
6258 [0x1872]:         movsl #0   
6259 [0x1873]:         movi #59, adx   
6261 [0x1875]:         rmov adx, ebx   
6262 [0x1876]:         movi #0, ebx   
6264 [0x1878]:         movsl #0   
6265 [0x1879]:         movi #60, adx   
6267 [0x187b]:         rmov adx, ebx   
6268 [0x187c]:         movi #0, ebx   
6270 [0x187e]:         movsl #0   
6271 [0x187f]:         movi #61, adx   
6273 [0x1881]:         rmov adx, ebx   
6274 [0x1882]:         movi #0, ebx   
6276 [0x1884]:         movsl #0   
6277 [0x1885]:         movi #62, adx   
6279 [0x1887]:         rmov adx, ebx   
6280 [0x1888]:         movi #0, ebx   
6282 [0x188a]:         movsl #0   
6283 [0x188b]:         movi #63, adx   
6285 [0x188d]:         rmov adx, ebx   
6286 [0x188e]:         movi #0, ebx   
6288 [0x1890]:         movsl #0   
6289 [0x1891]:         movi #64, adx   
6291 [0x1893]:         rmov adx, ebx   
6292 [0x1894]:         movi #0, ebx   
6294 [0x1896]:         movsl #0   
6295 [0x1897]:         movi #65, adx   
6297 [0x1899]:         rmov adx, ebx   
6298 [0x189a]:         movi #0, ebx   
6300 [0x189c]:         movsl #0   
6301 [0x189d]:         movi #66, adx   
6303 [0x189f]:         rmov adx, ebx   
6304 [0x18a0]:         movi #0, ebx   
6306 [0x18a2]:         movsl #0   
6307 [0x18a3]:         movi #67, adx   
6309 [0x18a5]:         rmov adx, ebx   
6310 [0x18a6]:         movi #2, ebx   
6312 [0x18a8]:         movsl #0   
6313 [0x18a9]:         movi #68, adx   
6315 [0x18ab]:         rmov adx, ebx   
6316 [0x18ac]:         movi #0, ebx   
6318 [0x18ae]:         movsl #0   
6319 [0x18af]:         movi #69, adx   
6321 [0x18b1]:         rmov adx, ebx   
6322 [0x18b2]:         movi #0, ebx   
6324 [0x18b4]:         movsl #0   
6325 [0x18b5]:         movi #70, adx   
6327 [0x18b7]:         rmov adx, ebx   
6328 [0x18b8]:         movi #0, ebx   
6330 [0x18ba]:         movsl #0   
6331 [0x18bb]:         movi #71, adx   
6333 [0x18bd]:         rmov adx, ebx   
6334 [0x18be]:         movi #0, ebx   
6336 [0x18c0]:         movsl #0   
6337 [0x18c1]:         movi #72, adx   
6339 [0x18c3]:         rmov adx, ebx   
6340 [0x18c4]:         movi #0, ebx   
6342 [0x18c6]:         movsl #0   
6343 [0x18c7]:         movi #73, adx   
6345 [0x18c9]:         rmov adx, ebx   
6346 [0x18ca]:         movi #0, ebx   
6348 [0x18cc]:         movsl #0   
6349 [0x18cd]:         movi #74, adx   
6351 [0x18cf]:         rmov adx, ebx   
6352 [0x18d0]:         movi #0, ebx   
6354 [0x18d2]:         movsl #0   
6355 [0x18d3]:         movi #75, adx   
6357 [0x18d5]:         rmov adx, ebx   
6358 [0x18d6]:         movi #0, ebx   
6360 [0x18d8]:         movsl #0   
6361 [0x18d9]:         movi #76, adx   
6363 [0x18db]:         rmov adx, ebx   
6364 [0x18dc]:         movi #0, ebx   
6366 [0x18de]:         movsl #0   
6367 [0x18df]:         movi #77, adx   
6369 [0x18e1]:         rmov adx, ebx   
6370 [0x18e2]:         movi #0, ebx   
6372 [0x18e4]:         movsl #0   
6373 [0x18e5]:         movi #78, adx   
6375 [0x18e7]:         rmov adx, ebx   
6376 [0x18e8]:         movi #0, ebx   
6378 [0x18ea]:         movsl #0   
6379 [0x18eb]:         movi #79, adx   
6381 [0x18ed]:         rmov adx, ebx   
6382 [0x18ee]:         movi #0, ebx   
6384 [0x18f0]:         movsl #0   
6385 [0x18f1]:         movi #80, adx   
6387 [0x18f3]:         rmov adx, ebx   
6388 [0x18f4]:         movi #2, ebx   
6390 [0x18f6]:         movsl #0   
6391 [0x18f7]:         movi #81, adx   
6393 [0x18f9]:         rmov adx, ebx   
6394 [0x18fa]:         movi #0, ebx   
6396 [0x18fc]:         movsl #0   
6397 [0x18fd]:         movi #82, adx   
6399 [0x18ff]:         rmov adx, ebx   
6400 [0x1900]:         movi #2, ebx   
6402 [0x1902]:         movsl #0   
6403 [0x1903]:         movi #83, adx   
6405 [0x1905]:         rmov adx, ebx   
6406 [0x1906]:         movi #0, ebx   
6408 [0x1908]:         movsl #0   
6409 [0x1909]:         movi #84, adx   
6411 [0x190b]:         rmov adx, ebx   
6412 [0x190c]:         movi #0, ebx   
6414 [0x190e]:         movsl #0   
6415 [0x190f]:         movi #85, adx   
6417 [0x1911]:         rmov adx, ebx   
6418 [0x1912]:         movi #0, ebx   
6420 [0x1914]:         movsl #0   
6421 [0x1915]:         movi #86, adx   
6423 [0x1917]:         rmov adx, ebx   
6424 [0x1918]:         movi #0, ebx   
6426 [0x191a]:         movsl #0   
6427 [0x191b]:         movi #87, adx   
6429 [0x191d]:         rmov adx, ebx   
6430 [0x191e]:         movi #0, ebx   
6432 [0x1920]:         movsl #0   
6433 [0x1921]:         movi #88, adx   
6435 [0x1923]:         rmov adx, ebx   
6436 [0x1924]:         movi #0, ebx   
6438 [0x1926]:         movsl #0   
6439 [0x1927]:         movi #89, adx   
6441 [0x1929]:         rmov adx, ebx   
6442 [0x192a]:         movi #0, ebx   
6444 [0x192c]:         movsl #0   
6445 [0x192d]:         movi #90, adx   
6447 [0x192f]:         rmov adx, ebx   
6448 [0x1930]:         movi #0, ebx   
6450 [0x1932]:         movsl #0   
6451 [0x1933]:         movi #91, adx   
6453 [0x1935]:         rmov adx, ebx   
6454 [0x1936]:         movi #0, ebx   
6456 [0x1938]:         movsl #0   
6457 [0x1939]:         movi #92, adx   
6459 [0x193b]:         rmov adx, ebx   
6460 [0x193c]:         movi #0, ebx   
6462 [0x193e]:         movsl #0   
6463 [0x193f]:         movi #93, adx   
6465 [0x1941]:         rmov adx, ebx   
6466 [0x1942]:         movi #2, ebx   
6468 [0x1944]:         movsl #0   
6469 [0x1945]:         movi #94, adx   
6471 [0x1947]:         rmov adx, ebx   
6472 [0x1948]:         movi #0, ebx   
6474 [0x194a]:         movsl #0   
6475 [0x194b]:         movi #95, adx   
6477 [0x194d]:         rmov adx, ebx   
6478 [0x194e]:         movi #2, ebx   
6480 [0x1950]:         movsl #0   
6481 [0x1951]:         movi #96, adx   
6483 [0x1953]:         rmov adx, ebx   
6484 [0x1954]:         movi #0, ebx   
6486 [0x1956]:         movsl #0   
6487 [0x1957]:         movi #97, adx   
6489 [0x1959]:         rmov adx, ebx   
6490 [0x195a]:         movi #0, ebx   
6492 [0x195c]:         movsl #0   
6493 [0x195d]:         movi #98, adx   
6495 [0x195f]:         rmov adx, ebx   
6496 [0x1960]:         movi #0, ebx   
6498 [0x1962]:         movsl #0   
6499 [0x1963]:         movi #99, adx   
6501 [0x1965]:         rmov adx, ebx   
6502 [0x1966]:         movi #0, ebx   
6504 [0x1968]:         movsl #0   
6505 [0x1969]:         movi #100, adx   
6507 [0x196b]:         rmov adx, ebx   
6508 [0x196c]:         movi #0, ebx   
6510 [0x196e]:         movsl #0   
6511 [0x196f]:         movi #101, adx   
6513 [0x1971]:         rmov adx, ebx   
6514 [0x1972]:         movi #0, ebx   
6516 [0x1974]:         movsl #0   
6517 [0x1975]:         movi #102, adx   
6519 [0x1977]:         rmov adx, ebx   
6520 [0x1978]:         movi #0, ebx   
6522 [0x197a]:         movsl #0   
6523 [0x197b]:         movi #103, adx   
6525 [0x197d]:         rmov adx, ebx   
6526 [0x197e]:         movi #0, ebx   
6528 [0x1980]:         movsl #0   
6529 [0x1981]:         movi #104, adx   
6531 [0x1983]:         rmov adx, ebx   
6532 [0x1984]:         movi #0, ebx   
6534 [0x1986]:         movsl #0   
6535 [0x1987]:         movi #105, adx   
6537 [0x1989]:         rmov adx, ebx   
6538 [0x198a]:         movi #0, ebx   
6540 [0x198c]:         movsl #0   
6541 [0x198d]:         movi #106, adx   
6543 [0x198f]:         rmov adx, ebx   
6544 [0x1990]:         movi #2, ebx   
6546 [0x1992]:         movsl #0   
6547 [0x1993]:         movi #107, adx   
6549 [0x1995]:         rmov adx, ebx   
6550 [0x1996]:         movi #0, ebx   
6552 [0x1998]:         movsl #0   
6553 [0x1999]:         movi #108, adx   
6555 [0x199b]:         rmov adx, ebx   
6556 [0x199c]:         movi #2, ebx   
6558 [0x199e]:         movsl #0   
6559 [0x199f]:         movi #109, adx   
6561 [0x19a1]:         rmov adx, ebx   
6562 [0x19a2]:         movi #0, ebx   
6564 [0x19a4]:         movsl #0   
6565 [0x19a5]:         movi #110, adx   
6567 [0x19a7]:         rmov adx, ebx   
6568 [0x19a8]:         movi #0, ebx   
6570 [0x19aa]:         movsl #0   
6571 [0x19ab]:         movi #111, adx   
6573 [0x19ad]:         rmov adx, ebx   
6574 [0x19ae]:         movi #0, ebx   
6576 [0x19b0]:         movsl #0   
6577 [0x19b1]:         movi #112, adx   
6579 [0x19b3]:         rmov adx, ebx   
6580 [0x19b4]:         movi #0, ebx   
6582 [0x19b6]:         movsl #0   
6583 [0x19b7]:         movi #113, adx   
6585 [0x19b9]:         rmov adx, ebx   
6586 [0x19ba]:         movi #0, ebx   
6588 [0x19bc]:         movsl #0   
6589 [0x19bd]:         movi #114, adx   
6591 [0x19bf]:         rmov adx, ebx   
6592 [0x19c0]:         movi #0, ebx   
6594 [0x19c2]:         movsl #0   
6595 [0x19c3]:         movi #115, adx   
6597 [0x19c5]:         rmov adx, ebx   
6598 [0x19c6]:         movi #0, ebx   
6600 [0x19c8]:         movsl #0   
6601 [0x19c9]:         movi #116, adx   
6603 [0x19cb]:         rmov adx, ebx   
6604 [0x19cc]:         movg @108 // @ui.res.drawable#__srt_global   
6605 [0x19cd]:         movn #14   
6607 [0x19cf]:         popobj   
6608 [0x19d0]:         new_class @121 // ui.support#drawable   
6609 [0x19d1]:         dup    
6610 [0x19d2]:         istore 6   
6612 [0x19d4]:         movg @108 // @ui.res.drawable#__srt_global   
6613 [0x19d5]:         movn #14   
6615 [0x19d7]:         pushobj   
6616 [0x19d8]:         istore 13   
6618 [0x19da]:         movi #9, ebx   
6620 [0x19dc]:         rstore ebx   
6621 [0x19dd]:         call @3181 // <ui.support#drawable.drawable>   
6622 [0x19de]:         movg @108 // @ui.res.drawable#__srt_global   
6623 [0x19df]:         movn #15   
6625 [0x19e1]:         popobj   
6626 [0x19e2]:         movi #117, ebx   
6628 [0x19e4]:         newarry ebx   
6629 [0x19e5]:         movi #0, ebx   
6631 [0x19e7]:         movsl #0   
6632 [0x19e8]:         movi #0, adx   
6634 [0x19ea]:         rmov adx, ebx   
6635 [0x19eb]:         movi #2, ebx   
6637 [0x19ed]:         movsl #0   
6638 [0x19ee]:         movi #1, adx   
6640 [0x19f0]:         rmov adx, ebx   
6641 [0x19f1]:         movi #2, ebx   
6643 [0x19f3]:         movsl #0   
6644 [0x19f4]:         movi #2, adx   
6646 [0x19f6]:         rmov adx, ebx   
6647 [0x19f7]:         movi #2, ebx   
6649 [0x19f9]:         movsl #0   
6650 [0x19fa]:         movi #3, adx   
6652 [0x19fc]:         rmov adx, ebx   
6653 [0x19fd]:         movi #2, ebx   
6655 [0x19ff]:         movsl #0   
6656 [0x1a00]:         movi #4, adx   
6658 [0x1a02]:         rmov adx, ebx   
6659 [0x1a03]:         movi #2, ebx   
6661 [0x1a05]:         movsl #0   
6662 [0x1a06]:         movi #5, adx   
6664 [0x1a08]:         rmov adx, ebx   
6665 [0x1a09]:         movi #0, ebx   
6667 [0x1a0b]:         movsl #0   
6668 [0x1a0c]:         movi #6, adx   
6670 [0x1a0e]:         rmov adx, ebx   
6671 [0x1a0f]:         movi #0, ebx   
6673 [0x1a11]:         movsl #0   
6674 [0x1a12]:         movi #7, adx   
6676 [0x1a14]:         rmov adx, ebx   
6677 [0x1a15]:         movi #0, ebx   
6679 [0x1a17]:         movsl #0   
6680 [0x1a18]:         movi #8, adx   
6682 [0x1a1a]:         rmov adx, ebx   
6683 [0x1a1b]:         movi #0, ebx   
6685 [0x1a1d]:         movsl #0   
6686 [0x1a1e]:         movi #9, adx   
6688 [0x1a20]:         rmov adx, ebx   
6689 [0x1a21]:         movi #0, ebx   
6691 [0x1a23]:         movsl #0   
6692 [0x1a24]:         movi #10, adx   
6694 [0x1a26]:         rmov adx, ebx   
6695 [0x1a27]:         movi #0, ebx   
6697 [0x1a29]:         movsl #0   
6698 [0x1a2a]:         movi #11, adx   
6700 [0x1a2c]:         rmov adx, ebx   
6701 [0x1a2d]:         movi #0, ebx   
6703 [0x1a2f]:         movsl #0   
6704 [0x1a30]:         movi #12, adx   
6706 [0x1a32]:         rmov adx, ebx   
6707 [0x1a33]:         movi #0, ebx   
6709 [0x1a35]:         movsl #0   
6710 [0x1a36]:         movi #13, adx   
6712 [0x1a38]:         rmov adx, ebx   
6713 [0x1a39]:         movi #2, ebx   
6715 [0x1a3b]:         movsl #0   
6716 [0x1a3c]:         movi #14, adx   
6718 [0x1a3e]:         rmov adx, ebx   
6719 [0x1a3f]:         movi #0, ebx   
6721 [0x1a41]:         movsl #0   
6722 [0x1a42]:         movi #15, adx   
6724 [0x1a44]:         rmov adx, ebx   
6725 [0x1a45]:         movi #2, ebx   
6727 [0x1a47]:         movsl #0   
6728 [0x1a48]:         movi #16, adx   
6730 [0x1a4a]:         rmov adx, ebx   
6731 [0x1a4b]:         movi #0, ebx   
6733 [0x1a4d]:         movsl #0   
6734 [0x1a4e]:         movi #17, adx   
6736 [0x1a50]:         rmov adx, ebx   
6737 [0x1a51]:         movi #2, ebx   
6739 [0x1a53]:         movsl #0   
6740 [0x1a54]:         movi #18, adx   
6742 [0x1a56]:         rmov adx, ebx   
6743 [0x1a57]:         movi #0, ebx   
6745 [0x1a59]:         movsl #0   
6746 [0x1a5a]:         movi #19, adx   
6748 [0x1a5c]:         rmov adx, ebx   
6749 [0x1a5d]:         movi #0, ebx   
6751 [0x1a5f]:         movsl #0   
6752 [0x1a60]:         movi #20, adx   
6754 [0x1a62]:         rmov adx, ebx   
6755 [0x1a63]:         movi #0, ebx   
6757 [0x1a65]:         movsl #0   
6758 [0x1a66]:         movi #21, adx   
6760 [0x1a68]:         rmov adx, ebx   
6761 [0x1a69]:         movi #0, ebx   
6763 [0x1a6b]:         movsl #0   
6764 [0x1a6c]:         movi #22, adx   
6766 [0x1a6e]:         rmov adx, ebx   
6767 [0x1a6f]:         movi #0, ebx   
6769 [0x1a71]:         movsl #0   
6770 [0x1a72]:         movi #23, adx   
6772 [0x1a74]:         rmov adx, ebx   
6773 [0x1a75]:         movi #0, ebx   
6775 [0x1a77]:         movsl #0   
6776 [0x1a78]:         movi #24, adx   
6778 [0x1a7a]:         rmov adx, ebx   
6779 [0x1a7b]:         movi #0, ebx   
6781 [0x1a7d]:         movsl #0   
6782 [0x1a7e]:         movi #25, adx   
6784 [0x1a80]:         rmov adx, ebx   
6785 [0x1a81]:         movi #0, ebx   
6787 [0x1a83]:         movsl #0   
6788 [0x1a84]:         movi #26, adx   
6790 [0x1a86]:         rmov adx, ebx   
6791 [0x1a87]:         movi #0, ebx   
6793 [0x1a89]:         movsl #0   
6794 [0x1a8a]:         movi #27, adx   
6796 [0x1a8c]:         rmov adx, ebx   
6797 [0x1a8d]:         movi #2, ebx   
6799 [0x1a8f]:         movsl #0   
6800 [0x1a90]:         movi #28, adx   
6802 [0x1a92]:         rmov adx, ebx   
6803 [0x1a93]:         movi #2, ebx   
6805 [0x1a95]:         movsl #0   
6806 [0x1a96]:         movi #29, adx   
6808 [0x1a98]:         rmov adx, ebx   
6809 [0x1a99]:         movi #2, ebx   
6811 [0x1a9b]:         movsl #0   
6812 [0x1a9c]:         movi #30, adx   
6814 [0x1a9e]:         rmov adx, ebx   
6815 [0x1a9f]:         movi #0, ebx   
6817 [0x1aa1]:         movsl #0   
6818 [0x1aa2]:         movi #31, adx   
6820 [0x1aa4]:         rmov adx, ebx   
6821 [0x1aa5]:         movi #0, ebx   
6823 [0x1aa7]:         movsl #0   
6824 [0x1aa8]:         movi #32, adx   
6826 [0x1aaa]:         rmov adx, ebx   
6827 [0x1aab]:         movi #0, ebx   
6829 [0x1aad]:         movsl #0   
6830 [0x1aae]:         movi #33, adx   
6832 [0x1ab0]:         rmov adx, ebx   
6833 [0x1ab1]:         movi #0, ebx   
6835 [0x1ab3]:         movsl #0   
6836 [0x1ab4]:         movi #34, adx   
6838 [0x1ab6]:         rmov adx, ebx   
6839 [0x1ab7]:         movi #0, ebx   
6841 [0x1ab9]:         movsl #0   
6842 [0x1aba]:         movi #35, adx   
6844 [0x1abc]:         rmov adx, ebx   
6845 [0x1abd]:         movi #0, ebx   
6847 [0x1abf]:         movsl #0   
6848 [0x1ac0]:         movi #36, adx   
6850 [0x1ac2]:         rmov adx, ebx   
6851 [0x1ac3]:         movi #0, ebx   
6853 [0x1ac5]:         movsl #0   
6854 [0x1ac6]:         movi #37, adx   
6856 [0x1ac8]:         rmov adx, ebx   
6857 [0x1ac9]:         movi #0, ebx   
6859 [0x1acb]:         movsl #0   
6860 [0x1acc]:         movi #38, adx   
6862 [0x1ace]:         rmov adx, ebx   
6863 [0x1acf]:         movi #0, ebx   
6865 [0x1ad1]:         movsl #0   
6866 [0x1ad2]:         movi #39, adx   
6868 [0x1ad4]:         rmov adx, ebx   
6869 [0x1ad5]:         movi #0, ebx   
6871 [0x1ad7]:         movsl #0   
6872 [0x1ad8]:         movi #40, adx   
6874 [0x1ada]:         rmov adx, ebx   
6875 [0x1adb]:         movi #0, ebx   
6877 [0x1add]:         movsl #0   
6878 [0x1ade]:         movi #41, adx   
6880 [0x1ae0]:         rmov adx, ebx   
6881 [0x1ae1]:         movi #2, ebx   
6883 [0x1ae3]:         movsl #0   
6884 [0x1ae4]:         movi #42, adx   
6886 [0x1ae6]:         rmov adx, ebx   
6887 [0x1ae7]:         movi #0, ebx   
6889 [0x1ae9]:         movsl #0   
6890 [0x1aea]:         movi #43, adx   
6892 [0x1aec]:         rmov adx, ebx   
6893 [0x1aed]:         movi #0, ebx   
6895 [0x1aef]:         movsl #0   
6896 [0x1af0]:         movi #44, adx   
6898 [0x1af2]:         rmov adx, ebx   
6899 [0x1af3]:         movi #0, ebx   
6901 [0x1af5]:         movsl #0   
6902 [0x1af6]:         movi #45, adx   
6904 [0x1af8]:         rmov adx, ebx   
6905 [0x1af9]:         movi #0, ebx   
6907 [0x1afb]:         movsl #0   
6908 [0x1afc]:         movi #46, adx   
6910 [0x1afe]:         rmov adx, ebx   
6911 [0x1aff]:         movi #0, ebx   
6913 [0x1b01]:         movsl #0   
6914 [0x1b02]:         movi #47, adx   
6916 [0x1b04]:         rmov adx, ebx   
6917 [0x1b05]:         movi #0, ebx   
6919 [0x1b07]:         movsl #0   
6920 [0x1b08]:         movi #48, adx   
6922 [0x1b0a]:         rmov adx, ebx   
6923 [0x1b0b]:         movi #0, ebx   
6925 [0x1b0d]:         movsl #0   
6926 [0x1b0e]:         movi #49, adx   
6928 [0x1b10]:         rmov adx, ebx   
6929 [0x1b11]:         movi #0, ebx   
6931 [0x1b13]:         movsl #0   
6932 [0x1b14]:         movi #50, adx   
6934 [0x1b16]:         rmov adx, ebx   
6935 [0x1b17]:         movi #0, ebx   
6937 [0x1b19]:         movsl #0   
6938 [0x1b1a]:         movi #51, adx   
6940 [0x1b1c]:         rmov adx, ebx   
6941 [0x1b1d]:         movi #0, ebx   
6943 [0x1b1f]:         movsl #0   
6944 [0x1b20]:         movi #52, adx   
6946 [0x1b22]:         rmov adx, ebx   
6947 [0x1b23]:         movi #0, ebx   
6949 [0x1b25]:         movsl #0   
6950 [0x1b26]:         movi #53, adx   
6952 [0x1b28]:         rmov adx, ebx   
6953 [0x1b29]:         movi #0, ebx   
6955 [0x1b2b]:         movsl #0   
6956 [0x1b2c]:         movi #54, adx   
6958 [0x1b2e]:         rmov adx, ebx   
6959 [0x1b2f]:         movi #2, ebx   
6961 [0x1b31]:         movsl #0   
6962 [0x1b32]:         movi #55, adx   
6964 [0x1b34]:         rmov adx, ebx   
6965 [0x1b35]:         movi #0, ebx   
6967 [0x1b37]:         movsl #0   
6968 [0x1b38]:         movi #56, adx   
6970 [0x1b3a]:         rmov adx, ebx   
6971 [0x1b3b]:         movi #0, ebx   
6973 [0x1b3d]:         movsl #0   
6974 [0x1b3e]:         movi #57, adx   
6976 [0x1b40]:         rmov adx, ebx   
6977 [0x1b41]:         movi #0, ebx   
6979 [0x1b43]:         movsl #0   
6980 [0x1b44]:         movi #58, adx   
6982 [0x1b46]:         rmov adx, ebx   
6983 [0x1b47]:         movi #0, ebx   
6985 [0x1b49]:         movsl #0   
6986 [0x1b4a]:         movi #59, adx   
6988 [0x1b4c]:         rmov adx, ebx   
6989 [0x1b4d]:         movi #0, ebx   
6991 [0x1b4f]:         movsl #0   
6992 [0x1b50]:         movi #60, adx   
6994 [0x1b52]:         rmov adx, ebx   
6995 [0x1b53]:         movi #0, ebx   
6997 [0x1b55]:         movsl #0   
6998 [0x1b56]:         movi #61, adx   
7000 [0x1b58]:         rmov adx, ebx   
7001 [0x1b59]:         movi #0, ebx   
7003 [0x1b5b]:         movsl #0   
7004 [0x1b5c]:         movi #62, adx   
7006 [0x1b5e]:         rmov adx, ebx   
7007 [0x1b5f]:         movi #0, ebx   
7009 [0x1b61]:         movsl #0   
7010 [0x1b62]:         movi #63, adx   
7012 [0x1b64]:         rmov adx, ebx   
7013 [0x1b65]:         movi #0, ebx   
7015 [0x1b67]:         movsl #0   
7016 [0x1b68]:         movi #64, adx   
7018 [0x1b6a]:         rmov adx, ebx   
7019 [0x1b6b]:         movi #0, ebx   
7021 [0x1b6d]:         movsl #0   
7022 [0x1b6e]:         movi #65, adx   
7024 [0x1b70]:         rmov adx, ebx   
7025 [0x1b71]:         movi #0, ebx   
7027 [0x1b73]:         movsl #0   
7028 [0x1b74]:         movi #66, adx   
7030 [0x1b76]:         rmov adx, ebx   
7031 [0x1b77]:         movi #0, ebx   
7033 [0x1b79]:         movsl #0   
7034 [0x1b7a]:         movi #67, adx   
7036 [0x1b7c]:         rmov adx, ebx   
7037 [0x1b7d]:         movi #2, ebx   
7039 [0x1b7f]:         movsl #0   
7040 [0x1b80]:         movi #68, adx   
7042 [0x1b82]:         rmov adx, ebx   
7043 [0x1b83]:         movi #0, ebx   
7045 [0x1b85]:         movsl #0   
7046 [0x1b86]:         movi #69, adx   
7048 [0x1b88]:         rmov adx, ebx   
7049 [0x1b89]:         movi #0, ebx   
7051 [0x1b8b]:         movsl #0   
7052 [0x1b8c]:         movi #70, adx   
7054 [0x1b8e]:         rmov adx, ebx   
7055 [0x1b8f]:         movi #0, ebx   
7057 [0x1b91]:         movsl #0   
7058 [0x1b92]:         movi #71, adx   
7060 [0x1b94]:         rmov adx, ebx   
7061 [0x1b95]:         movi #2, ebx   
7063 [0x1b97]:         movsl #0   
7064 [0x1b98]:         movi #72, adx   
7066 [0x1b9a]:         rmov adx, ebx   
7067 [0x1b9b]:         movi #0, ebx   
7069 [0x1b9d]:         movsl #0   
7070 [0x1b9e]:         movi #73, adx   
7072 [0x1ba0]:         rmov adx, ebx   
7073 [0x1ba1]:         movi #0, ebx   
7075 [0x1ba3]:         movsl #0   
7076 [0x1ba4]:         movi #74, adx   
7078 [0x1ba6]:         rmov adx, ebx   
7079 [0x1ba7]:         movi #0, ebx   
7081 [0x1ba9]:         movsl #0   
7082 [0x1baa]:         movi #75, adx   
7084 [0x1bac]:         rmov adx, ebx   
7085 [0x1bad]:         movi #0, ebx   
7087 [0x1baf]:         movsl #0   
7088 [0x1bb0]:         movi #76, adx   
7090 [0x1bb2]:         rmov adx, ebx   
7091 [0x1bb3]:         movi #0, ebx   
7093 [0x1bb5]:         movsl #0   
7094 [0x1bb6]:         movi #77, adx   
7096 [0x1bb8]:         rmov adx, ebx   
7097 [0x1bb9]:         movi #0, ebx   
7099 [0x1bbb]:         movsl #0   
7100 [0x1bbc]:         movi #78, adx   
7102 [0x1bbe]:         rmov adx, ebx   
7103 [0x1bbf]:         movi #0, ebx   
7105 [0x1bc1]:         movsl #0   
7106 [0x1bc2]:         movi #79, adx   
7108 [0x1bc4]:         rmov adx, ebx   
7109 [0x1bc5]:         movi #0, ebx   
7111 [0x1bc7]:         movsl #0   
7112 [0x1bc8]:         movi #80, adx   
7114 [0x1bca]:         rmov adx, ebx   
7115 [0x1bcb]:         movi #2, ebx   
7117 [0x1bcd]:         movsl #0   
7118 [0x1bce]:         movi #81, adx   
7120 [0x1bd0]:         rmov adx, ebx   
7121 [0x1bd1]:         movi #0, ebx   
7123 [0x1bd3]:         movsl #0   
7124 [0x1bd4]:         movi #82, adx   
7126 [0x1bd6]:         rmov adx, ebx   
7127 [0x1bd7]:         movi #2, ebx   
7129 [0x1bd9]:         movsl #0   
7130 [0x1bda]:         movi #83, adx   
7132 [0x1bdc]:         rmov adx, ebx   
7133 [0x1bdd]:         movi #0, ebx   
7135 [0x1bdf]:         movsl #0   
7136 [0x1be0]:         movi #84, adx   
7138 [0x1be2]:         rmov adx, ebx   
7139 [0x1be3]:         movi #2, ebx   
7141 [0x1be5]:         movsl #0   
7142 [0x1be6]:         movi #85, adx   
7144 [0x1be8]:         rmov adx, ebx   
7145 [0x1be9]:         movi #0, ebx   
7147 [0x1beb]:         movsl #0   
7148 [0x1bec]:         movi #86, adx   
7150 [0x1bee]:         rmov adx, ebx   
7151 [0x1bef]:         movi #0, ebx   
7153 [0x1bf1]:         movsl #0   
7154 [0x1bf2]:         movi #87, adx   
7156 [0x1bf4]:         rmov adx, ebx   
7157 [0x1bf5]:         movi #0, ebx   
7159 [0x1bf7]:         movsl #0   
7160 [0x1bf8]:         movi #88, adx   
7162 [0x1bfa]:         rmov adx, ebx   
7163 [0x1bfb]:         movi #0, ebx   
7165 [0x1bfd]:         movsl #0   
7166 [0x1bfe]:         movi #89, adx   
7168 [0x1c00]:         rmov adx, ebx   
7169 [0x1c01]:         movi #0, ebx   
7171 [0x1c03]:         movsl #0   
7172 [0x1c04]:         movi #90, adx   
7174 [0x1c06]:         rmov adx, ebx   
7175 [0x1c07]:         movi #0, ebx   
7177 [0x1c09]:         movsl #0   
7178 [0x1c0a]:         movi #91, adx   
7180 [0x1c0c]:         rmov adx, ebx   
7181 [0x1c0d]:         movi #0, ebx   
7183 [0x1c0f]:         movsl #0   
7184 [0x1c10]:         movi #92, adx   
7186 [0x1c12]:         rmov adx, ebx   
7187 [0x1c13]:         movi #0, ebx   
7189 [0x1c15]:         movsl #0   
7190 [0x1c16]:         movi #93, adx   
7192 [0x1c18]:         rmov adx, ebx   
7193 [0x1c19]:         movi #2, ebx   
7195 [0x1c1b]:         movsl #0   
7196 [0x1c1c]:         movi #94, adx   
7198 [0x1c1e]:         rmov adx, ebx   
7199 [0x1c1f]:         movi #0, ebx   
7201 [0x1c21]:         movsl #0   
7202 [0x1c22]:         movi #95, adx   
7204 [0x1c24]:         rmov adx, ebx   
7205 [0x1c25]:         movi #2, ebx   
7207 [0x1c27]:         movsl #0   
7208 [0x1c28]:         movi #96, adx   
7210 [0x1c2a]:         rmov adx, ebx   
7211 [0x1c2b]:         movi #0, ebx   
7213 [0x1c2d]:         movsl #0   
7214 [0x1c2e]:         movi #97, adx   
7216 [0x1c30]:         rmov adx, ebx   
7217 [0x1c31]:         movi #2, ebx   
7219 [0x1c33]:         movsl #0   
7220 [0x1c34]:         movi #98, adx   
7222 [0x1c36]:         rmov adx, ebx   
7223 [0x1c37]:         movi #0, ebx   
7225 [0x1c39]:         movsl #0   
7226 [0x1c3a]:         movi #99, adx   
7228 [0x1c3c]:         rmov adx, ebx   
7229 [0x1c3d]:         movi #0, ebx   
7231 [0x1c3f]:         movsl #0   
7232 [0x1c40]:         movi #100, adx   
7234 [0x1c42]:         rmov adx, ebx   
7235 [0x1c43]:         movi #0, ebx   
7237 [0x1c45]:         movsl #0   
7238 [0x1c46]:         movi #101, adx   
7240 [0x1c48]:         rmov adx, ebx   
7241 [0x1c49]:         movi #0, ebx   
7243 [0x1c4b]:         movsl #0   
7244 [0x1c4c]:         movi #102, adx   
7246 [0x1c4e]:         rmov adx, ebx   
7247 [0x1c4f]:         movi #0, ebx   
7249 [0x1c51]:         movsl #0   
7250 [0x1c52]:         movi #103, adx   
7252 [0x1c54]:         rmov adx, ebx   
7253 [0x1c55]:         movi #0, ebx   
7255 [0x1c57]:         movsl #0   
7256 [0x1c58]:         movi #104, adx   
7258 [0x1c5a]:         rmov adx, ebx   
7259 [0x1c5b]:         movi #0, ebx   
7261 [0x1c5d]:         movsl #0   
7262 [0x1c5e]:         movi #105, adx   
7264 [0x1c60]:         rmov adx, ebx   
7265 [0x1c61]:         movi #0, ebx   
7267 [0x1c63]:         movsl #0   
7268 [0x1c64]:         movi #106, adx   
7270 [0x1c66]:         rmov adx, ebx   
7271 [0x1c67]:         movi #2, ebx   
7273 [0x1c69]:         movsl #0   
7274 [0x1c6a]:         movi #107, adx   
7276 [0x1c6c]:         rmov adx, ebx   
7277 [0x1c6d]:         movi #0, ebx   
7279 [0x1c6f]:         movsl #0   
7280 [0x1c70]:         movi #108, adx   
7282 [0x1c72]:         rmov adx, ebx   
7283 [0x1c73]:         movi #2, ebx   
7285 [0x1c75]:         movsl #0   
7286 [0x1c76]:         movi #109, adx   
7288 [0x1c78]:         rmov adx, ebx   
7289 [0x1c79]:         movi #0, ebx   
7291 [0x1c7b]:         movsl #0   
7292 [0x1c7c]:         movi #110, adx   
7294 [0x1c7e]:         rmov adx, ebx   
7295 [0x1c7f]:         movi #2, ebx   
7297 [0x1c81]:         movsl #0   
7298 [0x1c82]:         movi #111, adx   
7300 [0x1c84]:         rmov adx, ebx   
7301 [0x1c85]:         movi #0, ebx   
7303 [0x1c87]:         movsl #0   
7304 [0x1c88]:         movi #112, adx   
7306 [0x1c8a]:         rmov adx, ebx   
7307 [0x1c8b]:         movi #0, ebx   
7309 [0x1c8d]:         movsl #0   
7310 [0x1c8e]:         movi #113, adx   
7312 [0x1c90]:         rmov adx, ebx   
7313 [0x1c91]:         movi #0, ebx   
7315 [0x1c93]:         movsl #0   
7316 [0x1c94]:         movi #114, adx   
7318 [0x1c96]:         rmov adx, ebx   
7319 [0x1c97]:         movi #0, ebx   
7321 [0x1c99]:         movsl #0   
7322 [0x1c9a]:         movi #115, adx   
7324 [0x1c9c]:         rmov adx, ebx   
7325 [0x1c9d]:         movi #0, ebx   
7327 [0x1c9f]:         movsl #0   
7328 [0x1ca0]:         movi #116, adx   
7330 [0x1ca2]:         rmov adx, ebx   
7331 [0x1ca3]:         movg @108 // @ui.res.drawable#__srt_global   
7332 [0x1ca4]:         movn #16   
7334 [0x1ca6]:         popobj   
7335 [0x1ca7]:         new_class @121 // ui.support#drawable   
7336 [0x1ca8]:         dup    
7337 [0x1ca9]:         istore 7   
7339 [0x1cab]:         movg @108 // @ui.res.drawable#__srt_global   
7340 [0x1cac]:         movn #16   
7342 [0x1cae]:         pushobj   
7343 [0x1caf]:         istore 13   
7345 [0x1cb1]:         movi #9, ebx   
7347 [0x1cb3]:         rstore ebx   
7348 [0x1cb4]:         call @3181 // <ui.support#drawable.drawable>   
7349 [0x1cb5]:         movg @108 // @ui.res.drawable#__srt_global   
7350 [0x1cb6]:         movn #17   
7352 [0x1cb8]:         popobj   
7353 [0x1cb9]:         movi #117, ebx   
7355 [0x1cbb]:         newarry ebx   
7356 [0x1cbc]:         movi #0, ebx   
7358 [0x1cbe]:         movsl #0   
7359 [0x1cbf]:         movi #0, adx   
7361 [0x1cc1]:         rmov adx, ebx   
7362 [0x1cc2]:         movi #2, ebx   
7364 [0x1cc4]:         movsl #0   
7365 [0x1cc5]:         movi #1, adx   
7367 [0x1cc7]:         rmov adx, ebx   
7368 [0x1cc8]:         movi #2, ebx   
7370 [0x1cca]:         movsl #0   
7371 [0x1ccb]:         movi #2, adx   
7373 [0x1ccd]:         rmov adx, ebx   
7374 [0x1cce]:         movi #2, ebx   
7376 [0x1cd0]:         movsl #0   
7377 [0x1cd1]:         movi #3, adx   
7379 [0x1cd3]:         rmov adx, ebx   
7380 [0x1cd4]:         movi #2, ebx   
7382 [0x1cd6]:         movsl #0   
7383 [0x1cd7]:         movi #4, adx   
7385 [0x1cd9]:         rmov adx, ebx   
7386 [0x1cda]:         movi #2, ebx   
7388 [0x1cdc]:         movsl #0   
7389 [0x1cdd]:         movi #5, adx   
7391 [0x1cdf]:         rmov adx, ebx   
7392 [0x1ce0]:         movi #0, ebx   
7394 [0x1ce2]:         movsl #0   
7395 [0x1ce3]:         movi #6, adx   
7397 [0x1ce5]:         rmov adx, ebx   
7398 [0x1ce6]:         movi #0, ebx   
7400 [0x1ce8]:         movsl #0   
7401 [0x1ce9]:         movi #7, adx   
7403 [0x1ceb]:         rmov adx, ebx   
7404 [0x1cec]:         movi #0, ebx   
7406 [0x1cee]:         movsl #0   
7407 [0x1cef]:         movi #8, adx   
7409 [0x1cf1]:         rmov adx, ebx   
7410 [0x1cf2]:         movi #0, ebx   
7412 [0x1cf4]:         movsl #0   
7413 [0x1cf5]:         movi #9, adx   
7415 [0x1cf7]:         rmov adx, ebx   
7416 [0x1cf8]:         movi #0, ebx   
7418 [0x1cfa]:         movsl #0   
7419 [0x1cfb]:         movi #10, adx   
7421 [0x1cfd]:         rmov adx, ebx   
7422 [0x1cfe]:         movi #0, ebx   
7424 [0x1d00]:         movsl #0   
7425 [0x1d01]:         movi #11, adx   
7427 [0x1d03]:         rmov adx, ebx   
7428 [0x1d04]:         movi #0, ebx   
7430 [0x1d06]:         movsl #0   
7431 [0x1d07]:         movi #12, adx   
7433 [0x1d09]:         rmov adx, ebx   
7434 [0x1d0a]:         movi #0, ebx   
7436 [0x1d0c]:         movsl #0   
7437 [0x1d0d]:         movi #13, adx   
7439 [0x1d0f]:         rmov adx, ebx   
7440 [0x1d10]:         movi #2, ebx   
7442 [0x1d12]:         movsl #0   
7443 [0x1d13]:         movi #14, adx   
7445 [0x1d15]:         rmov adx, ebx   
7446 [0x1d16]:         movi #0, ebx   
7448 [0x1d18]:         movsl #0   
7449 [0x1d19]:         movi #15, adx   
7451 [0x1d1b]:         rmov adx, ebx   
7452 [0x1d1c]:         movi #2, ebx   
7454 [0x1d1e]:         movsl #0   
7455 [0x1d1f]:         movi #16, adx   
7457 [0x1d21]:         rmov adx, ebx   
7458 [0x1d22]:         movi #0, ebx   
7460 [0x1d24]:         movsl #0   
7461 [0x1d25]:         movi #17, adx   
7463 [0x1d27]:         rmov adx, ebx   
7464 [0x1d28]:         movi #2, ebx   
7466 [0x1d2a]:         movsl #0   
7467 [0x1d2b]:         movi #18, adx   
7469 [0x1d2d]:         rmov adx, ebx   
7470 [0x1d2e]:         movi #0, ebx   
7472 [0x1d30]:         movsl #0   
7473 [0x1d31]:         movi #19, adx   
7475 [0x1d33]:         rmov adx, ebx   
7476 [0x1d34]:         movi #0, ebx   
7478 [0x1d36]:         movsl #0   
7479 [0x1d37]:         movi #20, adx   
7481 [0x1d39]:         rmov adx, ebx   
7482 [0x1d3a]:         movi #0, ebx   
7484 [0x1d3c]:         movsl #0   
7485 [0x1d3d]:         movi #21, adx   
7487 [0x1d3f]:         rmov adx, ebx   
7488 [0x1d40]:         movi #0, ebx   
7490 [0x1d42]:         movsl #0   
7491 [0x1d43]:         movi #22, adx   
7493 [0x1d45]:         rmov adx, ebx   
7494 [0x1d46]:         movi #0, ebx   
7496 [0x1d48]:         movsl #0   
7497 [0x1d49]:         movi #23, adx   
7499 [0x1d4b]:         rmov adx, ebx   
7500 [0x1d4c]:         movi #0, ebx   
7502 [0x1d4e]:         movsl #0   
7503 [0x1d4f]:         movi #24, adx   
7505 [0x1d51]:         rmov adx, ebx   
7506 [0x1d52]:         movi #0, ebx   
7508 [0x1d54]:         movsl #0   
7509 [0x1d55]:         movi #25, adx   
7511 [0x1d57]:         rmov adx, ebx   
7512 [0x1d58]:         movi #0, ebx   
7514 [0x1d5a]:         movsl #0   
7515 [0x1d5b]:         movi #26, adx   
7517 [0x1d5d]:         rmov adx, ebx   
7518 [0x1d5e]:         movi #0, ebx   
7520 [0x1d60]:         movsl #0   
7521 [0x1d61]:         movi #27, adx   
7523 [0x1d63]:         rmov adx, ebx   
7524 [0x1d64]:         movi #2, ebx   
7526 [0x1d66]:         movsl #0   
7527 [0x1d67]:         movi #28, adx   
7529 [0x1d69]:         rmov adx, ebx   
7530 [0x1d6a]:         movi #2, ebx   
7532 [0x1d6c]:         movsl #0   
7533 [0x1d6d]:         movi #29, adx   
7535 [0x1d6f]:         rmov adx, ebx   
7536 [0x1d70]:         movi #2, ebx   
7538 [0x1d72]:         movsl #0   
7539 [0x1d73]:         movi #30, adx   
7541 [0x1d75]:         rmov adx, ebx   
7542 [0x1d76]:         movi #0, ebx   
7544 [0x1d78]:         movsl #0   
7545 [0x1d79]:         movi #31, adx   
7547 [0x1d7b]:         rmov adx, ebx   
7548 [0x1d7c]:         movi #0, ebx   
7550 [0x1d7e]:         movsl #0   
7551 [0x1d7f]:         movi #32, adx   
7553 [0x1d81]:         rmov adx, ebx   
7554 [0x1d82]:         movi #0, ebx   
7556 [0x1d84]:         movsl #0   
7557 [0x1d85]:         movi #33, adx   
7559 [0x1d87]:         rmov adx, ebx   
7560 [0x1d88]:         movi #0, ebx   
7562 [0x1d8a]:         movsl #0   
7563 [0x1d8b]:         movi #34, adx   
7565 [0x1d8d]:         rmov adx, ebx   
7566 [0x1d8e]:         movi #0, ebx   
7568 [0x1d90]:         movsl #0   
7569 [0x1d91]:         movi #35, adx   
7571 [0x1d93]:         rmov adx, ebx   
7572 [0x1d94]:         movi #0, ebx   
7574 [0x1d96]:         movsl #0   
7575 [0x1d97]:         movi #36, adx   
7577 [0x1d99]:         rmov adx, ebx   
7578 [0x1d9a]:         movi #0, ebx   
7580 [0x1d9c]:         movsl #0   
7581 [0x1d9d]:         movi #37, adx   
7583 [0x1d9f]:         rmov adx, ebx   
7584 [0x1da0]:         movi #0, ebx   
7586 [0x1da2]:         movsl #0   
7587 [0x1da3]:         movi #38, adx   
7589 [0x1da5]:         rmov adx, ebx   
7590 [0x1da6]:         movi #0, ebx   
7592 [0x1da8]:         movsl #0   
7593 [0x1da9]:         movi #39, adx   
7595 [0x1dab]:         rmov adx, ebx   
7596 [0x1dac]:         movi #0, ebx   
7598 [0x1dae]:         movsl #0   
7599 [0x1daf]:         movi #40, adx   
7601 [0x1db1]:         rmov adx, ebx   
7602 [0x1db2]:         movi #0, ebx   
7604 [0x1db4]:         movsl #0   
7605 [0x1db5]:         movi #41, adx   
7607 [0x1db7]:         rmov adx, ebx   
7608 [0x1db8]:         movi #2, ebx   
7610 [0x1dba]:         movsl #0   
7611 [0x1dbb]:         movi #42, adx   
7613 [0x1dbd]:         rmov adx, ebx   
7614 [0x1dbe]:         movi #0, ebx   
7616 [0x1dc0]:         movsl #0   
7617 [0x1dc1]:         movi #43, adx   
7619 [0x1dc3]:         rmov adx, ebx   
7620 [0x1dc4]:         movi #0, ebx   
7622 [0x1dc6]:         movsl #0   
7623 [0x1dc7]:         movi #44, adx   
7625 [0x1dc9]:         rmov adx, ebx   
7626 [0x1dca]:         movi #0, ebx   
7628 [0x1dcc]:         movsl #0   
7629 [0x1dcd]:         movi #45, adx   
7631 [0x1dcf]:         rmov adx, ebx   
7632 [0x1dd0]:         movi #0, ebx   
7634 [0x1dd2]:         movsl #0   
7635 [0x1dd3]:         movi #46, adx   
7637 [0x1dd5]:         rmov adx, ebx   
7638 [0x1dd6]:         movi #0, ebx   
7640 [0x1dd8]:         movsl #0   
7641 [0x1dd9]:         movi #47, adx   
7643 [0x1ddb]:         rmov adx, ebx   
7644 [0x1ddc]:         movi #0, ebx   
7646 [0x1dde]:         movsl #0   
7647 [0x1ddf]:         movi #48, adx   
7649 [0x1de1]:         rmov adx, ebx   
7650 [0x1de2]:         movi #0, ebx   
7652 [0x1de4]:         movsl #0   
7653 [0x1de5]:         movi #49, adx   
7655 [0x1de7]:         rmov adx, ebx   
7656 [0x1de8]:         movi #0, ebx   
7658 [0x1dea]:         movsl #0   
7659 [0x1deb]:         movi #50, adx   
7661 [0x1ded]:         rmov adx, ebx   
7662 [0x1dee]:         movi #0, ebx   
7664 [0x1df0]:         movsl #0   
7665 [0x1df1]:         movi #51, adx   
7667 [0x1df3]:         rmov adx, ebx   
7668 [0x1df4]:         movi #0, ebx   
7670 [0x1df6]:         movsl #0   
7671 [0x1df7]:         movi #52, adx   
7673 [0x1df9]:         rmov adx, ebx   
7674 [0x1dfa]:         movi #0, ebx   
7676 [0x1dfc]:         movsl #0   
7677 [0x1dfd]:         movi #53, adx   
7679 [0x1dff]:         rmov adx, ebx   
7680 [0x1e00]:         movi #0, ebx   
7682 [0x1e02]:         movsl #0   
7683 [0x1e03]:         movi #54, adx   
7685 [0x1e05]:         rmov adx, ebx   
7686 [0x1e06]:         movi #2, ebx   
7688 [0x1e08]:         movsl #0   
7689 [0x1e09]:         movi #55, adx   
7691 [0x1e0b]:         rmov adx, ebx   
7692 [0x1e0c]:         movi #0, ebx   
7694 [0x1e0e]:         movsl #0   
7695 [0x1e0f]:         movi #56, adx   
7697 [0x1e11]:         rmov adx, ebx   
7698 [0x1e12]:         movi #0, ebx   
7700 [0x1e14]:         movsl #0   
7701 [0x1e15]:         movi #57, adx   
7703 [0x1e17]:         rmov adx, ebx   
7704 [0x1e18]:         movi #0, ebx   
7706 [0x1e1a]:         movsl #0   
7707 [0x1e1b]:         movi #58, adx   
7709 [0x1e1d]:         rmov adx, ebx   
7710 [0x1e1e]:         movi #0, ebx   
7712 [0x1e20]:         movsl #0   
7713 [0x1e21]:         movi #59, adx   
7715 [0x1e23]:         rmov adx, ebx   
7716 [0x1e24]:         movi #0, ebx   
7718 [0x1e26]:         movsl #0   
7719 [0x1e27]:         movi #60, adx   
7721 [0x1e29]:         rmov adx, ebx   
7722 [0x1e2a]:         movi #2, ebx   
7724 [0x1e2c]:         movsl #0   
7725 [0x1e2d]:         movi #61, adx   
7727 [0x1e2f]:         rmov adx, ebx   
7728 [0x1e30]:         movi #0, ebx   
7730 [0x1e32]:         movsl #0   
7731 [0x1e33]:         movi #62, adx   
7733 [0x1e35]:         rmov adx, ebx   
7734 [0x1e36]:         movi #0, ebx   
7736 [0x1e38]:         movsl #0   
7737 [0x1e39]:         movi #63, adx   
7739 [0x1e3b]:         rmov adx, ebx   
7740 [0x1e3c]:         movi #0, ebx   
7742 [0x1e3e]:         movsl #0   
7743 [0x1e3f]:         movi #64, adx   
7745 [0x1e41]:         rmov adx, ebx   
7746 [0x1e42]:         movi #0, ebx   
7748 [0x1e44]:         movsl #0   
7749 [0x1e45]:         movi #65, adx   
7751 [0x1e47]:         rmov adx, ebx   
7752 [0x1e48]:         movi #0, ebx   
7754 [0x1e4a]:         movsl #0   
7755 [0x1e4b]:         movi #66, adx   
7757 [0x1e4d]:         rmov adx, ebx   
7758 [0x1e4e]:         movi #0, ebx   
7760 [0x1e50]:         movsl #0   
7761 [0x1e51]:         movi #67, adx   
7763 [0x1e53]:         rmov adx, ebx   
7764 [0x1e54]:         movi #2, ebx   
7766 [0x1e56]:         movsl #0   
7767 [0x1e57]:         movi #68, adx   
7769 [0x1e59]:         rmov adx, ebx   
7770 [0x1e5a]:         movi #0, ebx   
7772 [0x1e5c]:         movsl #0   
7773 [0x1e5d]:         movi #69, adx   
7775 [0x1e5f]:         rmov adx, ebx   
7776 [0x1e60]:         movi #0, ebx   
7778 [0x1e62]:         movsl #0   
7779 [0x1e63]:         movi #70, adx   
7781 [0x1e65]:         rmov adx, ebx   
7782 [0x1e66]:         movi #0, ebx   
7784 [0x1e68]:         movsl #0   
7785 [0x1e69]:         movi #71, adx   
7787 [0x1e6b]:         rmov adx, ebx   
7788 [0x1e6c]:         movi #2, ebx   
7790 [0x1e6e]:         movsl #0   
7791 [0x1e6f]:         movi #72, adx   
7793 [0x1e71]:         rmov adx, ebx   
7794 [0x1e72]:         movi #0, ebx   
7796 [0x1e74]:         movsl #0   
7797 [0x1e75]:         movi #73, adx   
7799 [0x1e77]:         rmov adx, ebx   
7800 [0x1e78]:         movi #2, ebx   
7802 [0x1e7a]:         movsl #0   
7803 [0x1e7b]:         movi #74, adx   
7805 [0x1e7d]:         rmov adx, ebx   
7806 [0x1e7e]:         movi #0, ebx   
7808 [0x1e80]:         movsl #0   
7809 [0x1e81]:         movi #75, adx   
7811 [0x1e83]:         rmov adx, ebx   
7812 [0x1e84]:         movi #0, ebx   
7814 [0x1e86]:         movsl #0   
7815 [0x1e87]:         movi #76, adx   
7817 [0x1e89]:         rmov adx, ebx   
7818 [0x1e8a]:         movi #0, ebx   
7820 [0x1e8c]:         movsl #0   
7821 [0x1e8d]:         movi #77, adx   
7823 [0x1e8f]:         rmov adx, ebx   
7824 [0x1e90]:         movi #0, ebx   
7826 [0x1e92]:         movsl #0   
7827 [0x1e93]:         movi #78, adx   
7829 [0x1e95]:         rmov adx, ebx   
7830 [0x1e96]:         movi #0, ebx   
7832 [0x1e98]:         movsl #0   
7833 [0x1e99]:         movi #79, adx   
7835 [0x1e9b]:         rmov adx, ebx   
7836 [0x1e9c]:         movi #0, ebx   
7838 [0x1e9e]:         movsl #0   
7839 [0x1e9f]:         movi #80, adx   
7841 [0x1ea1]:         rmov adx, ebx   
7842 [0x1ea2]:         movi #2, ebx   
7844 [0x1ea4]:         movsl #0   
7845 [0x1ea5]:         movi #81, adx   
7847 [0x1ea7]:         rmov adx, ebx   
7848 [0x1ea8]:         movi #0, ebx   
7850 [0x1eaa]:         movsl #0   
7851 [0x1eab]:         movi #82, adx   
7853 [0x1ead]:         rmov adx, ebx   
7854 [0x1eae]:         movi #2, ebx   
7856 [0x1eb0]:         movsl #0   
7857 [0x1eb1]:         movi #83, adx   
7859 [0x1eb3]:         rmov adx, ebx   
7860 [0x1eb4]:         movi #0, ebx   
7862 [0x1eb6]:         movsl #0   
7863 [0x1eb7]:         movi #84, adx   
7865 [0x1eb9]:         rmov adx, ebx   
7866 [0x1eba]:         movi #2, ebx   
7868 [0x1ebc]:         movsl #0   
7869 [0x1ebd]:         movi #85, adx   
7871 [0x1ebf]:         rmov adx, ebx   
7872 [0x1ec0]:         movi #0, ebx   
7874 [0x1ec2]:         movsl #0   
7875 [0x1ec3]:         movi #86, adx   
7877 [0x1ec5]:         rmov adx, ebx   
7878 [0x1ec6]:         movi #2, ebx   
7880 [0x1ec8]:         movsl #0   
7881 [0x1ec9]:         movi #87, adx   
7883 [0x1ecb]:         rmov adx, ebx   
7884 [0x1ecc]:         movi #0, ebx   
7886 [0x1ece]:         movsl #0   
7887 [0x1ecf]:         movi #88, adx   
7889 [0x1ed1]:         rmov adx, ebx   
7890 [0x1ed2]:         movi #0, ebx   
7892 [0x1ed4]:         movsl #0   
7893 [0x1ed5]:         movi #89, adx   
7895 [0x1ed7]:         rmov adx, ebx   
7896 [0x1ed8]:         movi #0, ebx   
7898 [0x1eda]:         movsl #0   
7899 [0x1edb]:         movi #90, adx   
7901 [0x1edd]:         rmov adx, ebx   
7902 [0x1ede]:         movi #0, ebx   
7904 [0x1ee0]:         movsl #0   
7905 [0x1ee1]:         movi #91, adx   
7907 [0x1ee3]:         rmov adx, ebx   
7908 [0x1ee4]:         movi #0, ebx   
7910 [0x1ee6]:         movsl #0   
7911 [0x1ee7]:         movi #92, adx   
7913 [0x1ee9]:         rmov adx, ebx   
7914 [0x1eea]:         movi #0, ebx   
7916 [0x1eec]:         movsl #0   
7917 [0x1eed]:         movi #93, adx   
7919 [0x1eef]:         rmov adx, ebx   
7920 [0x1ef0]:         movi #2, ebx   
7922 [0x1ef2]:         movsl #0   
7923 [0x1ef3]:         movi #94, adx   
7925 [0x1ef5]:         rmov adx, ebx   
7926 [0x1ef6]:         movi #0, ebx   
7928 [0x1ef8]:         movsl #0   
7929 [0x1ef9]:         movi #95, adx   
7931 [0x1efb]:         rmov adx, ebx   
7932 [0x1efc]:         movi #2, ebx   
7934 [0x1efe]:         movsl #0   
7935 [0x1eff]:         movi #96, adx   
7937 [0x1f01]:         rmov adx, ebx   
7938 [0x1f02]:         movi #0, ebx   
7940 [0x1f04]:         movsl #0   
7941 [0x1f05]:         movi #97, adx   
7943 [0x1f07]:         rmov adx, ebx   
7944 [0x1f08]:         movi #2, ebx   
7946 [0x1f0a]:         movsl #0   
7947 [0x1f0b]:         movi #98, adx   
7949 [0x1f0d]:         rmov adx, ebx   
7950 [0x1f0e]:         movi #0, ebx   
7952 [0x1f10]:         movsl #0   
7953 [0x1f11]:         movi #99, adx   
7955 [0x1f13]:         rmov adx, ebx   
7956 [0x1f14]:         movi #2, ebx   
7958 [0x1f16]:         movsl #0   
7959 [0x1f17]:         movi #100, adx   
7961 [0x1f19]:         rmov adx, ebx   
7962 [0x1f1a]:         movi #0, ebx   
7964 [0x1f1c]:         movsl #0   
7965 [0x1f1d]:         movi #101, adx   
7967 [0x1f1f]:         rmov adx, ebx   
7968 [0x1f20]:         movi #0, ebx   
7970 [0x1f22]:         movsl #0   
7971 [0x1f23]:         movi #102, adx   
7973 [0x1f25]:         rmov adx, ebx   
7974 [0x1f26]:         movi #0, ebx   
7976 [0x1f28]:         movsl #0   
7977 [0x1f29]:         movi #103, adx   
7979 [0x1f2b]:         rmov adx, ebx   
7980 [0x1f2c]:         movi #0, ebx   
7982 [0x1f2e]:         movsl #0   
7983 [0x1f2f]:         movi #104, adx   
7985 [0x1f31]:         rmov adx, ebx   
7986 [0x1f32]:         movi #0, ebx   
7988 [0x1f34]:         movsl #0   
7989 [0x1f35]:         movi #105, adx   
7991 [0x1f37]:         rmov adx, ebx   
7992 [0x1f38]:         movi #0, ebx   
7994 [0x1f3a]:         movsl #0   
7995 [0x1f3b]:         movi #106, adx   
7997 [0x1f3d]:         rmov adx, ebx   
7998 [0x1f3e]:         movi #2, ebx   
8000 [0x1f40]:         movsl #0   
8001 [0x1f41]:         movi #107, adx   
8003 [0x1f43]:         rmov adx, ebx   
8004 [0x1f44]:         movi #0, ebx   
8006 [0x1f46]:         movsl #0   
8007 [0x1f47]:         movi #108, adx   
8009 [0x1f49]:         rmov adx, ebx   
8010 [0x1f4a]:         movi #2, ebx   
8012 [0x1f4c]:         movsl #0   
8013 [0x1f4d]:         movi #109, adx   
8015 [0x1f4f]:         rmov adx, ebx   
8016 [0x1f50]:         movi #0, ebx   
8018 [0x1f52]:         movsl #0   
8019 [0x1f53]:         movi #110, adx   
8021 [0x1f55]:         rmov adx, ebx   
8022 [0x1f56]:         movi #2, ebx   
8024 [0x1f58]:         movsl #0   
8025 [0x1f59]:         movi #111, adx   
8027 [0x1f5b]:         rmov adx, ebx   
8028 [0x1f5c]:         movi #0, ebx   
8030 [0x1f5e]:         movsl #0   
8031 [0x1f5f]:         movi #112, adx   
8033 [0x1f61]:         rmov adx, ebx   
8034 [0x1f62]:         movi #2, ebx   
8036 [0x1f64]:         movsl #0   
8037 [0x1f65]:         movi #113, adx   
8039 [0x1f67]:         rmov adx, ebx   
8040 [0x1f68]:         movi #0, ebx   
8042 [0x1f6a]:         movsl #0   
8043 [0x1f6b]:         movi #114, adx   
8045 [0x1f6d]:         rmov adx, ebx   
8046 [0x1f6e]:         movi #0, ebx   
8048 [0x1f70]:         movsl #0   
8049 [0x1f71]:         movi #115, adx   
8051 [0x1f73]:         rmov adx, ebx   
8052 [0x1f74]:         movi #0, ebx   
8054 [0x1f76]:         movsl #0   
8055 [0x1f77]:         movi #116, adx   
8057 [0x1f79]:         rmov adx, ebx   
8058 [0x1f7a]:         movg @108 // @ui.res.drawable#__srt_global   
8059 [0x1f7b]:         movn #18   
8061 [0x1f7d]:         popobj   
8062 [0x1f7e]:         new_class @121 // ui.support#drawable   
8063 [0x1f7f]:         dup    
8064 [0x1f80]:         istore 8   
8066 [0x1f82]:         movg @108 // @ui.res.drawable#__srt_global   
8067 [0x1f83]:         movn #18   
8069 [0x1f85]:         pushobj   
8070 [0x1f86]:         istore 13   
8072 [0x1f88]:         movi #9, ebx   
8074 [0x1f8a]:         rstore ebx   
8075 [0x1f8b]:         call @3181 // <ui.support#drawable.drawable>   
8076 [0x1f8c]:         movg @108 // @ui.res.drawable#__srt_global   
8077 [0x1f8d]:         movn #19   
8079 [0x1f8f]:         popobj   
8080 [0x1f90]:         movi #117, ebx   
8082 [0x1f92]:         newarry ebx   
8083 [0x1f93]:         movi #0, ebx   
8085 [0x1f95]:         movsl #0   
8086 [0x1f96]:         movi #0, adx   
8088 [0x1f98]:         rmov adx, ebx   
8089 [0x1f99]:         movi #2, ebx   
8091 [0x1f9b]:         movsl #0   
8092 [0x1f9c]:         movi #1, adx   
8094 [0x1f9e]:         rmov adx, ebx   
8095 [0x1f9f]:         movi #2, ebx   
8097 [0x1fa1]:         movsl #0   
8098 [0x1fa2]:         movi #2, adx   
8100 [0x1fa4]:         rmov adx, ebx   
8101 [0x1fa5]:         movi #2, ebx   
8103 [0x1fa7]:         movsl #0   
8104 [0x1fa8]:         movi #3, adx   
8106 [0x1faa]:         rmov adx, ebx   
8107 [0x1fab]:         movi #2, ebx   
8109 [0x1fad]:         movsl #0   
8110 [0x1fae]:         movi #4, adx   
8112 [0x1fb0]:         rmov adx, ebx   
8113 [0x1fb1]:         movi #2, ebx   
8115 [0x1fb3]:         movsl #0   
8116 [0x1fb4]:         movi #5, adx   
8118 [0x1fb6]:         rmov adx, ebx   
8119 [0x1fb7]:         movi #0, ebx   
8121 [0x1fb9]:         movsl #0   
8122 [0x1fba]:         movi #6, adx   
8124 [0x1fbc]:         rmov adx, ebx   
8125 [0x1fbd]:         movi #0, ebx   
8127 [0x1fbf]:         movsl #0   
8128 [0x1fc0]:         movi #7, adx   
8130 [0x1fc2]:         rmov adx, ebx   
8131 [0x1fc3]:         movi #0, ebx   
8133 [0x1fc5]:         movsl #0   
8134 [0x1fc6]:         movi #8, adx   
8136 [0x1fc8]:         rmov adx, ebx   
8137 [0x1fc9]:         movi #0, ebx   
8139 [0x1fcb]:         movsl #0   
8140 [0x1fcc]:         movi #9, adx   
8142 [0x1fce]:         rmov adx, ebx   
8143 [0x1fcf]:         movi #0, ebx   
8145 [0x1fd1]:         movsl #0   
8146 [0x1fd2]:         movi #10, adx   
8148 [0x1fd4]:         rmov adx, ebx   
8149 [0x1fd5]:         movi #0, ebx   
8151 [0x1fd7]:         movsl #0   
8152 [0x1fd8]:         movi #11, adx   
8154 [0x1fda]:         rmov adx, ebx   
8155 [0x1fdb]:         movi #0, ebx   
8157 [0x1fdd]:         movsl #0   
8158 [0x1fde]:         movi #12, adx   
8160 [0x1fe0]:         rmov adx, ebx   
8161 [0x1fe1]:         movi #0, ebx   
8163 [0x1fe3]:         movsl #0   
8164 [0x1fe4]:         movi #13, adx   
8166 [0x1fe6]:         rmov adx, ebx   
8167 [0x1fe7]:         movi #2, ebx   
8169 [0x1fe9]:         movsl #0   
8170 [0x1fea]:         movi #14, adx   
8172 [0x1fec]:         rmov adx, ebx   
8173 [0x1fed]:         movi #0, ebx   
8175 [0x1fef]:         movsl #0   
8176 [0x1ff0]:         movi #15, adx   
8178 [0x1ff2]:         rmov adx, ebx   
8179 [0x1ff3]:         movi #2, ebx   
8181 [0x1ff5]:         movsl #0   
8182 [0x1ff6]:         movi #16, adx   
8184 [0x1ff8]:         rmov adx, ebx   
8185 [0x1ff9]:         movi #0, ebx   
8187 [0x1ffb]:         movsl #0   
8188 [0x1ffc]:         movi #17, adx   
8190 [0x1ffe]:         rmov adx, ebx   
8191 [0x1fff]:         movi #2, ebx   
8193 [0x2001]:         movsl #0   
8194 [0x2002]:         movi #18, adx   
8196 [0x2004]:         rmov adx, ebx   
8197 [0x2005]:         movi #0, ebx   
8199 [0x2007]:         movsl #0   
8200 [0x2008]:         movi #19, adx   
8202 [0x200a]:         rmov adx, ebx   
8203 [0x200b]:         movi #0, ebx   
8205 [0x200d]:         movsl #0   
8206 [0x200e]:         movi #20, adx   
8208 [0x2010]:         rmov adx, ebx   
8209 [0x2011]:         movi #0, ebx   
8211 [0x2013]:         movsl #0   
8212 [0x2014]:         movi #21, adx   
8214 [0x2016]:         rmov adx, ebx   
8215 [0x2017]:         movi #0, ebx   
8217 [0x2019]:         movsl #0   
8218 [0x201a]:         movi #22, adx   
8220 [0x201c]:         rmov adx, ebx   
8221 [0x201d]:         movi #0, ebx   
8223 [0x201f]:         movsl #0   
8224 [0x2020]:         movi #23, adx   
8226 [0x2022]:         rmov adx, ebx   
8227 [0x2023]:         movi #0, ebx   
8229 [0x2025]:         movsl #0   
8230 [0x2026]:         movi #24, adx   
8232 [0x2028]:         rmov adx, ebx   
8233 [0x2029]:         movi #0, ebx   
8235 [0x202b]:         movsl #0   
8236 [0x202c]:         movi #25, adx   
8238 [0x202e]:         rmov adx, ebx   
8239 [0x202f]:         movi #0, ebx   
8241 [0x2031]:         movsl #0   
8242 [0x2032]:         movi #26, adx   
8244 [0x2034]:         rmov adx, ebx   
8245 [0x2035]:         movi #0, ebx   
8247 [0x2037]:         movsl #0   
8248 [0x2038]:         movi #27, adx   
8250 [0x203a]:         rmov adx, ebx   
8251 [0x203b]:         movi #2, ebx   
8253 [0x203d]:         movsl #0   
8254 [0x203e]:         movi #28, adx   
8256 [0x2040]:         rmov adx, ebx   
8257 [0x2041]:         movi #2, ebx   
8259 [0x2043]:         movsl #0   
8260 [0x2044]:         movi #29, adx   
8262 [0x2046]:         rmov adx, ebx   
8263 [0x2047]:         movi #2, ebx   
8265 [0x2049]:         movsl #0   
8266 [0x204a]:         movi #30, adx   
8268 [0x204c]:         rmov adx, ebx   
8269 [0x204d]:         movi #0, ebx   
8271 [0x204f]:         movsl #0   
8272 [0x2050]:         movi #31, adx   
8274 [0x2052]:         rmov adx, ebx   
8275 [0x2053]:         movi #0, ebx   
8277 [0x2055]:         movsl #0   
8278 [0x2056]:         movi #32, adx   
8280 [0x2058]:         rmov adx, ebx   
8281 [0x2059]:         movi #0, ebx   
8283 [0x205b]:         movsl #0   
8284 [0x205c]:         movi #33, adx   
8286 [0x205e]:         rmov adx, ebx   
8287 [0x205f]:         movi #0, ebx   
8289 [0x2061]:         movsl #0   
8290 [0x2062]:         movi #34, adx   
8292 [0x2064]:         rmov adx, ebx   
8293 [0x2065]:         movi #0, ebx   
8295 [0x2067]:         movsl #0   
8296 [0x2068]:         movi #35, adx   
8298 [0x206a]:         rmov adx, ebx   
8299 [0x206b]:         movi #0, ebx   
8301 [0x206d]:         movsl #0   
8302 [0x206e]:         movi #36, adx   
8304 [0x2070]:         rmov adx, ebx   
8305 [0x2071]:         movi #2, ebx   
8307 [0x2073]:         movsl #0   
8308 [0x2074]:         movi #37, adx   
8310 [0x2076]:         rmov adx, ebx   
8311 [0x2077]:         movi #0, ebx   
8313 [0x2079]:         movsl #0   
8314 [0x207a]:         movi #38, adx   
8316 [0x207c]:         rmov adx, ebx   
8317 [0x207d]:         movi #0, ebx   
8319 [0x207f]:         movsl #0   
8320 [0x2080]:         movi #39, adx   
8322 [0x2082]:         rmov adx, ebx   
8323 [0x2083]:         movi #0, ebx   
8325 [0x2085]:         movsl #0   
8326 [0x2086]:         movi #40, adx   
8328 [0x2088]:         rmov adx, ebx   
8329 [0x2089]:         movi #0, ebx   
8331 [0x208b]:         movsl #0   
8332 [0x208c]:         movi #41, adx   
8334 [0x208e]:         rmov adx, ebx   
8335 [0x208f]:         movi #2, ebx   
8337 [0x2091]:         movsl #0   
8338 [0x2092]:         movi #42, adx   
8340 [0x2094]:         rmov adx, ebx   
8341 [0x2095]:         movi #0, ebx   
8343 [0x2097]:         movsl #0   
8344 [0x2098]:         movi #43, adx   
8346 [0x209a]:         rmov adx, ebx   
8347 [0x209b]:         movi #0, ebx   
8349 [0x209d]:         movsl #0   
8350 [0x209e]:         movi #44, adx   
8352 [0x20a0]:         rmov adx, ebx   
8353 [0x20a1]:         movi #0, ebx   
8355 [0x20a3]:         movsl #0   
8356 [0x20a4]:         movi #45, adx   
8358 [0x20a6]:         rmov adx, ebx   
8359 [0x20a7]:         movi #0, ebx   
8361 [0x20a9]:         movsl #0   
8362 [0x20aa]:         movi #46, adx   
8364 [0x20ac]:         rmov adx, ebx   
8365 [0x20ad]:         movi #0, ebx   
8367 [0x20af]:         movsl #0   
8368 [0x20b0]:         movi #47, adx   
8370 [0x20b2]:         rmov adx, ebx   
8371 [0x20b3]:         movi #0, ebx   
8373 [0x20b5]:         movsl #0   
8374 [0x20b6]:         movi #48, adx   
8376 [0x20b8]:         rmov adx, ebx   
8377 [0x20b9]:         movi #0, ebx   
8379 [0x20bb]:         movsl #0   
8380 [0x20bc]:         movi #49, adx   
8382 [0x20be]:         rmov adx, ebx   
8383 [0x20bf]:         movi #2, ebx   
8385 [0x20c1]:         movsl #0   
8386 [0x20c2]:         movi #50, adx   
8388 [0x20c4]:         rmov adx, ebx   
8389 [0x20c5]:         movi #0, ebx   
8391 [0x20c7]:         movsl #0   
8392 [0x20c8]:         movi #51, adx   
8394 [0x20ca]:         rmov adx, ebx   
8395 [0x20cb]:         movi #0, ebx   
8397 [0x20cd]:         movsl #0   
8398 [0x20ce]:         movi #52, adx   
8400 [0x20d0]:         rmov adx, ebx   
8401 [0x20d1]:         movi #0, ebx   
8403 [0x20d3]:         movsl #0   
8404 [0x20d4]:         movi #53, adx   
8406 [0x20d6]:         rmov adx, ebx   
8407 [0x20d7]:         movi #0, ebx   
8409 [0x20d9]:         movsl #0   
8410 [0x20da]:         movi #54, adx   
8412 [0x20dc]:         rmov adx, ebx   
8413 [0x20dd]:         movi #2, ebx   
8415 [0x20df]:         movsl #0   
8416 [0x20e0]:         movi #55, adx   
8418 [0x20e2]:         rmov adx, ebx   
8419 [0x20e3]:         movi #0, ebx   
8421 [0x20e5]:         movsl #0   
8422 [0x20e6]:         movi #56, adx   
8424 [0x20e8]:         rmov adx, ebx   
8425 [0x20e9]:         movi #0, ebx   
8427 [0x20eb]:         movsl #0   
8428 [0x20ec]:         movi #57, adx   
8430 [0x20ee]:         rmov adx, ebx   
8431 [0x20ef]:         movi #0, ebx   
8433 [0x20f1]:         movsl #0   
8434 [0x20f2]:         movi #58, adx   
8436 [0x20f4]:         rmov adx, ebx   
8437 [0x20f5]:         movi #0, ebx   
8439 [0x20f7]:         movsl #0   
8440 [0x20f8]:         movi #59, adx   
8442 [0x20fa]:         rmov adx, ebx   
8443 [0x20fb]:         movi #0, ebx   
8445 [0x20fd]:         movsl #0   
8446 [0x20fe]:         movi #60, adx   
8448 [0x2100]:         rmov adx, ebx   
8449 [0x2101]:         movi #2, ebx   
8451 [0x2103]:         movsl #0   
8452 [0x2104]:         movi #61, adx   
8454 [0x2106]:         rmov adx, ebx   
8455 [0x2107]:         movi #0, ebx   
8457 [0x2109]:         movsl #0   
8458 [0x210a]:         movi #62, adx   
8460 [0x210c]:         rmov adx, ebx   
8461 [0x210d]:         movi #2, ebx   
8463 [0x210f]:         movsl #0   
8464 [0x2110]:         movi #63, adx   
8466 [0x2112]:         rmov adx, ebx   
8467 [0x2113]:         movi #0, ebx   
8469 [0x2115]:         movsl #0   
8470 [0x2116]:         movi #64, adx   
8472 [0x2118]:         rmov adx, ebx   
8473 [0x2119]:         movi #0, ebx   
8475 [0x211b]:         movsl #0   
8476 [0x211c]:         movi #65, adx   
8478 [0x211e]:         rmov adx, ebx   
8479 [0x211f]:         movi #0, ebx   
8481 [0x2121]:         movsl #0   
8482 [0x2122]:         movi #66, adx   
8484 [0x2124]:         rmov adx, ebx   
8485 [0x2125]:         movi #0, ebx   
8487 [0x2127]:         movsl #0   
8488 [0x2128]:         movi #67, adx   
8490 [0x212a]:         rmov adx, ebx   
8491 [0x212b]:         movi #2, ebx   
8493 [0x212d]:         movsl #0   
8494 [0x212e]:         movi #68, adx   
8496 [0x2130]:         rmov adx, ebx   
8497 [0x2131]:         movi #0, ebx   
8499 [0x2133]:         movsl #0   
8500 [0x2134]:         movi #69, adx   
8502 [0x2136]:         rmov adx, ebx   
8503 [0x2137]:         movi #0, ebx   
8505 [0x2139]:         movsl #0   
8506 [0x213a]:         movi #70, adx   
8508 [0x213c]:         rmov adx, ebx   
8509 [0x213d]:         movi #0, ebx   
8511 [0x213f]:         movsl #0   
8512 [0x2140]:         movi #71, adx   
8514 [0x2142]:         rmov adx, ebx   
8515 [0x2143]:         movi #2, ebx   
8517 [0x2145]:         movsl #0   
8518 [0x2146]:         movi #72, adx   
8520 [0x2148]:         rmov adx, ebx   
8521 [0x2149]:         movi #0, ebx   
8523 [0x214b]:         movsl #0   
8524 [0x214c]:         movi #73, adx   
8526 [0x214e]:         rmov adx, ebx   
8527 [0x214f]:         movi #2, ebx   
8529 [0x2151]:         movsl #0   
8530 [0x2152]:         movi #74, adx   
8532 [0x2154]:         rmov adx, ebx   
8533 [0x2155]:         movi #0, ebx   
8535 [0x2157]:         movsl #0   
8536 [0x2158]:         movi #75, adx   
8538 [0x215a]:         rmov adx, ebx   
8539 [0x215b]:         movi #2, ebx   
8541 [0x215d]:         movsl #0   
8542 [0x215e]:         movi #76, adx   
8544 [0x2160]:         rmov adx, ebx   
8545 [0x2161]:         movi #0, ebx   
8547 [0x2163]:         movsl #0   
8548 [0x2164]:         movi #77, adx   
8550 [0x2166]:         rmov adx, ebx   
8551 [0x2167]:         movi #0, ebx   
8553 [0x2169]:         movsl #0   
8554 [0x216a]:         movi #78, adx   
8556 [0x216c]:         rmov adx, ebx   
8557 [0x216d]:         movi #0, ebx   
8559 [0x216f]:         movsl #0   
8560 [0x2170]:         movi #79, adx   
8562 [0x2172]:         rmov adx, ebx   
8563 [0x2173]:         movi #0, ebx   
8565 [0x2175]:         movsl #0   
8566 [0x2176]:         movi #80, adx   
8568 [0x2178]:         rmov adx, ebx   
8569 [0x2179]:         movi #2, ebx   
8571 [0x217b]:         movsl #0   
8572 [0x217c]:         movi #81, adx   
8574 [0x217e]:         rmov adx, ebx   
8575 [0x217f]:         movi #0, ebx   
8577 [0x2181]:         movsl #0   
8578 [0x2182]:         movi #82, adx   
8580 [0x2184]:         rmov adx, ebx   
8581 [0x2185]:         movi #2, ebx   
8583 [0x2187]:         movsl #0   
8584 [0x2188]:         movi #83, adx   
8586 [0x218a]:         rmov adx, ebx   
8587 [0x218b]:         movi #0, ebx   
8589 [0x218d]:         movsl #0   
8590 [0x218e]:         movi #84, adx   
8592 [0x2190]:         rmov adx, ebx   
8593 [0x2191]:         movi #2, ebx   
8595 [0x2193]:         movsl #0   
8596 [0x2194]:         movi #85, adx   
8598 [0x2196]:         rmov adx, ebx   
8599 [0x2197]:         movi #0, ebx   
8601 [0x2199]:         movsl #0   
8602 [0x219a]:         movi #86, adx   
8604 [0x219c]:         rmov adx, ebx   
8605 [0x219d]:         movi #2, ebx   
8607 [0x219f]:         movsl #0   
8608 [0x21a0]:         movi #87, adx   
8610 [0x21a2]:         rmov adx, ebx   
8611 [0x21a3]:         movi #0, ebx   
8613 [0x21a5]:         movsl #0   
8614 [0x21a6]:         movi #88, adx   
8616 [0x21a8]:         rmov adx, ebx   
8617 [0x21a9]:         movi #2, ebx   
8619 [0x21ab]:         movsl #0   
8620 [0x21ac]:         movi #89, adx   
8622 [0x21ae]:         rmov adx, ebx   
8623 [0x21af]:         movi #0, ebx   
8625 [0x21b1]:         movsl #0   
8626 [0x21b2]:         movi #90, adx   
8628 [0x21b4]:         rmov adx, ebx   
8629 [0x21b5]:         movi #0, ebx   
8631 [0x21b7]:         movsl #0   
8632 [0x21b8]:         movi #91, adx   
8634 [0x21ba]:         rmov adx, ebx   
8635 [0x21bb]:         movi #0, ebx   
8637 [0x21bd]:         movsl #0   
8638 [0x21be]:         movi #92, adx   
8640 [0x21c0]:         rmov adx, ebx   
8641 [0x21c1]:         movi #0, ebx   
8643 [0x21c3]:         movsl #0   
8644 [0x21c4]:         movi #93, adx   
8646 [0x21c6]:         rmov adx, ebx   
8647 [0x21c7]:         movi #2, ebx   
8649 [0x21c9]:         movsl #0   
8650 [0x21ca]:         movi #94, adx   
8652 [0x21cc]:         rmov adx, ebx   
8653 [0x21cd]:         movi #0, ebx   
8655 [0x21cf]:         movsl #0   
8656 [0x21d0]:         movi #95, adx   
8658 [0x21d2]:         rmov adx, ebx   
8659 [0x21d3]:         movi #2, ebx   
8661 [0x21d5]:         movsl #0   
8662 [0x21d6]:         movi #96, adx   
8664 [0x21d8]:         rmov adx, ebx   
8665 [0x21d9]:         movi #0, ebx   
8667 [0x21db]:         movsl #0   
8668 [0x21dc]:         movi #97, adx   
8670 [0x21de]:         rmov adx, ebx   
8671 [0x21df]:         movi #2, ebx   
8673 [0x21e1]:         movsl #0   
8674 [0x21e2]:         movi #98, adx   
8676 [0x21e4]:         rmov adx, ebx   
8677 [0x21e5]:         movi #0, ebx   
8679 [0x21e7]:         movsl #0   
8680 [0x21e8]:         movi #99, adx   
8682 [0x21ea]:         rmov adx, ebx   
8683 [0x21eb]:         movi #2, ebx   
8685 [0x21ed]:         movsl #0   
8686 [0x21ee]:         movi #100, adx   
8688 [0x21f0]:         rmov adx, ebx   
8689 [0x21f1]:         movi #0, ebx   
8691 [0x21f3]:         movsl #0   
8692 [0x21f4]:         movi #101, adx   
8694 [0x21f6]:         rmov adx, ebx   
8695 [0x21f7]:         movi #2, ebx   
8697 [0x21f9]:         movsl #0   
8698 [0x21fa]:         movi #102, adx   
8700 [0x21fc]:         rmov adx, ebx   
8701 [0x21fd]:         movi #0, ebx   
8703 [0x21ff]:         movsl #0   
8704 [0x2200]:         movi #103, adx   
8706 [0x2202]:         rmov adx, ebx   
8707 [0x2203]:         movi #0, ebx   
8709 [0x2205]:         movsl #0   
8710 [0x2206]:         movi #104, adx   
8712 [0x2208]:         rmov adx, ebx   
8713 [0x2209]:         movi #0, ebx   
8715 [0x220b]:         movsl #0   
8716 [0x220c]:         movi #105, adx   
8718 [0x220e]:         rmov adx, ebx   
8719 [0x220f]:         movi #0, ebx   
8721 [0x2211]:         movsl #0   
8722 [0x2212]:         movi #106, adx   
8724 [0x2214]:         rmov adx, ebx   
8725 [0x2215]:         movi #2, ebx   
8727 [0x2217]:         movsl #0   
8728 [0x2218]:         movi #107, adx   
8730 [0x221a]:         rmov adx, ebx   
8731 [0x221b]:         movi #0, ebx   
8733 [0x221d]:         movsl #0   
8734 [0x221e]:         movi #108, adx   
8736 [0x2220]:         rmov adx, ebx   
8737 [0x2221]:         movi #2, ebx   
8739 [0x2223]:         movsl #0   
8740 [0x2224]:         movi #109, adx   
8742 [0x2226]:         rmov adx, ebx   
8743 [0x2227]:         movi #0, ebx   
8745 [0x2229]:         movsl #0   
8746 [0x222a]:         movi #110, adx   
8748 [0x222c]:         rmov adx, ebx   
8749 [0x222d]:         movi #2, ebx   
8751 [0x222f]:         movsl #0   
8752 [0x2230]:         movi #111, adx   
8754 [0x2232]:         rmov adx, ebx   
8755 [0x2233]:         movi #0, ebx   
8757 [0x2235]:         movsl #0   
8758 [0x2236]:         movi #112, adx   
8760 [0x2238]:         rmov adx, ebx   
8761 [0x2239]:         movi #2, ebx   
8763 [0x223b]:         movsl #0   
8764 [0x223c]:         movi #113, adx   
8766 [0x223e]:         rmov adx, ebx   
8767 [0x223f]:         movi #0, ebx   
8769 [0x2241]:         movsl #0   
8770 [0x2242]:         movi #114, adx   
8772 [0x2244]:         rmov adx, ebx   
8773 [0x2245]:         movi #2, ebx   
8775 [0x2247]:         movsl #0   
8776 [0x2248]:         movi #115, adx   
8778 [0x224a]:         rmov adx, ebx   
8779 [0x224b]:         movi #0, ebx   
8781 [0x224d]:         movsl #0   
8782 [0x224e]:         movi #116, adx   
8784 [0x2250]:         rmov adx, ebx   
8785 [0x2251]:         movg @108 // @ui.res.drawable#__srt_global   
8786 [0x2252]:         movn #20   
8788 [0x2254]:         popobj   
8789 [0x2255]:         new_class @121 // ui.support#drawable   
8790 [0x2256]:         dup    
8791 [0x2257]:         istore 9   
8793 [0x2259]:         movg @108 // @ui.res.drawable#__srt_global   
8794 [0x225a]:         movn #20   
8796 [0x225c]:         pushobj   
8797 [0x225d]:         istore 13   
8799 [0x225f]:         movi #9, ebx   
8801 [0x2261]:         rstore ebx   
8802 [0x2262]:         call @3181 // <ui.support#drawable.drawable>   
8803 [0x2263]:         movg @108 // @ui.res.drawable#__srt_global   
8804 [0x2264]:         movn #21   
8806 [0x2266]:         popobj   
8807 [0x2267]:         movi #126, ebx   
8809 [0x2269]:         newarry ebx   
8810 [0x226a]:         movi #0, ebx   
8812 [0x226c]:         movsl #0   
8813 [0x226d]:         movi #0, adx   
8815 [0x226f]:         rmov adx, ebx   
8816 [0x2270]:         movi #0, ebx   
8818 [0x2272]:         movsl #0   
8819 [0x2273]:         movi #1, adx   
8821 [0x2275]:         rmov adx, ebx   
8822 [0x2276]:         movi #0, ebx   
8824 [0x2278]:         movsl #0   
8825 [0x2279]:         movi #2, adx   
8827 [0x227b]:         rmov adx, ebx   
8828 [0x227c]:         movi #0, ebx   
8830 [0x227e]:         movsl #0   
8831 [0x227f]:         movi #3, adx   
8833 [0x2281]:         rmov adx, ebx   
8834 [0x2282]:         movi #0, ebx   
8836 [0x2284]:         movsl #0   
8837 [0x2285]:         movi #4, adx   
8839 [0x2287]:         rmov adx, ebx   
8840 [0x2288]:         movi #0, ebx   
8842 [0x228a]:         movsl #0   
8843 [0x228b]:         movi #5, adx   
8845 [0x228d]:         rmov adx, ebx   
8846 [0x228e]:         movi #2, ebx   
8848 [0x2290]:         movsl #0   
8849 [0x2291]:         movi #6, adx   
8851 [0x2293]:         rmov adx, ebx   
8852 [0x2294]:         movi #2, ebx   
8854 [0x2296]:         movsl #0   
8855 [0x2297]:         movi #7, adx   
8857 [0x2299]:         rmov adx, ebx   
8858 [0x229a]:         movi #0, ebx   
8860 [0x229c]:         movsl #0   
8861 [0x229d]:         movi #8, adx   
8863 [0x229f]:         rmov adx, ebx   
8864 [0x22a0]:         movi #0, ebx   
8866 [0x22a2]:         movsl #0   
8867 [0x22a3]:         movi #9, adx   
8869 [0x22a5]:         rmov adx, ebx   
8870 [0x22a6]:         movi #0, ebx   
8872 [0x22a8]:         movsl #0   
8873 [0x22a9]:         movi #10, adx   
8875 [0x22ab]:         rmov adx, ebx   
8876 [0x22ac]:         movi #0, ebx   
8878 [0x22ae]:         movsl #0   
8879 [0x22af]:         movi #11, adx   
8881 [0x22b1]:         rmov adx, ebx   
8882 [0x22b2]:         movi #0, ebx   
8884 [0x22b4]:         movsl #0   
8885 [0x22b5]:         movi #12, adx   
8887 [0x22b7]:         rmov adx, ebx   
8888 [0x22b8]:         movi #0, ebx   
8890 [0x22ba]:         movsl #0   
8891 [0x22bb]:         movi #13, adx   
8893 [0x22bd]:         rmov adx, ebx   
8894 [0x22be]:         movi #0, ebx   
8896 [0x22c0]:         movsl #0   
8897 [0x22c1]:         movi #14, adx   
8899 [0x22c3]:         rmov adx, ebx   
8900 [0x22c4]:         movi #0, ebx   
8902 [0x22c6]:         movsl #0   
8903 [0x22c7]:         movi #15, adx   
8905 [0x22c9]:         rmov adx, ebx   
8906 [0x22ca]:         movi #0, ebx   
8908 [0x22cc]:         movsl #0   
8909 [0x22cd]:         movi #16, adx   
8911 [0x22cf]:         rmov adx, ebx   
8912 [0x22d0]:         movi #0, ebx   
8914 [0x22d2]:         movsl #0   
8915 [0x22d3]:         movi #17, adx   
8917 [0x22d5]:         rmov adx, ebx   
8918 [0x22d6]:         movi #0, ebx   
8920 [0x22d8]:         movsl #0   
8921 [0x22d9]:         movi #18, adx   
8923 [0x22db]:         rmov adx, ebx   
8924 [0x22dc]:         movi #2, ebx   
8926 [0x22de]:         movsl #0   
8927 [0x22df]:         movi #19, adx   
8929 [0x22e1]:         rmov adx, ebx   
8930 [0x22e2]:         movi #0, ebx   
8932 [0x22e4]:         movsl #0   
8933 [0x22e5]:         movi #20, adx   
8935 [0x22e7]:         rmov adx, ebx   
8936 [0x22e8]:         movi #0, ebx   
8938 [0x22ea]:         movsl #0   
8939 [0x22eb]:         movi #21, adx   
8941 [0x22ed]:         rmov adx, ebx   
8942 [0x22ee]:         movi #2, ebx   
8944 [0x22f0]:         movsl #0   
8945 [0x22f1]:         movi #22, adx   
8947 [0x22f3]:         rmov adx, ebx   
8948 [0x22f4]:         movi #0, ebx   
8950 [0x22f6]:         movsl #0   
8951 [0x22f7]:         movi #23, adx   
8953 [0x22f9]:         rmov adx, ebx   
8954 [0x22fa]:         movi #0, ebx   
8956 [0x22fc]:         movsl #0   
8957 [0x22fd]:         movi #24, adx   
8959 [0x22ff]:         rmov adx, ebx   
8960 [0x2300]:         movi #0, ebx   
8962 [0x2302]:         movsl #0   
8963 [0x2303]:         movi #25, adx   
8965 [0x2305]:         rmov adx, ebx   
8966 [0x2306]:         movi #0, ebx   
8968 [0x2308]:         movsl #0   
8969 [0x2309]:         movi #26, adx   
8971 [0x230b]:         rmov adx, ebx   
8972 [0x230c]:         movi #0, ebx   
8974 [0x230e]:         movsl #0   
8975 [0x230f]:         movi #27, adx   
8977 [0x2311]:         rmov adx, ebx   
8978 [0x2312]:         movi #0, ebx   
8980 [0x2314]:         movsl #0   
8981 [0x2315]:         movi #28, adx   
8983 [0x2317]:         rmov adx, ebx   
8984 [0x2318]:         movi #0, ebx   
8986 [0x231a]:         movsl #0   
8987 [0x231b]:         movi #29, adx   
8989 [0x231d]:         rmov adx, ebx   
8990 [0x231e]:         movi #0, ebx   
8992 [0x2320]:         movsl #0   
8993 [0x2321]:         movi #30, adx   
8995 [0x2323]:         rmov adx, ebx   
8996 [0x2324]:         movi #0, ebx   
8998 [0x2326]:         movsl #0   
8999 [0x2327]:         movi #31, adx   
9001 [0x2329]:         rmov adx, ebx   
9002 [0x232a]:         movi #2, ebx   
9004 [0x232c]:         movsl #0   
9005 [0x232d]:         movi #32, adx   
9007 [0x232f]:         rmov adx, ebx   
9008 [0x2330]:         movi #0, ebx   
9010 [0x2332]:         movsl #0   
9011 [0x2333]:         movi #33, adx   
9013 [0x2335]:         rmov adx, ebx   
9014 [0x2336]:         movi #0, ebx   
9016 [0x2338]:         movsl #0   
9017 [0x2339]:         movi #34, adx   
9019 [0x233b]:         rmov adx, ebx   
9020 [0x233c]:         movi #0, ebx   
9022 [0x233e]:         movsl #0   
9023 [0x233f]:         movi #35, adx   
9025 [0x2341]:         rmov adx, ebx   
9026 [0x2342]:         movi #0, ebx   
9028 [0x2344]:         movsl #0   
9029 [0x2345]:         movi #36, adx   
9031 [0x2347]:         rmov adx, ebx   
9032 [0x2348]:         movi #0, ebx   
9034 [0x234a]:         movsl #0   
9035 [0x234b]:         movi #37, adx   
9037 [0x234d]:         rmov adx, ebx   
9038 [0x234e]:         movi #2, ebx   
9040 [0x2350]:         movsl #0   
9041 [0x2351]:         movi #38, adx   
9043 [0x2353]:         rmov adx, ebx   
9044 [0x2354]:         movi #0, ebx   
9046 [0x2356]:         movsl #0   
9047 [0x2357]:         movi #39, adx   
9049 [0x2359]:         rmov adx, ebx   
9050 [0x235a]:         movi #0, ebx   
9052 [0x235c]:         movsl #0   
9053 [0x235d]:         movi #40, adx   
9055 [0x235f]:         rmov adx, ebx   
9056 [0x2360]:         movi #0, ebx   
9058 [0x2362]:         movsl #0   
9059 [0x2363]:         movi #41, adx   
9061 [0x2365]:         rmov adx, ebx   
9062 [0x2366]:         movi #0, ebx   
9064 [0x2368]:         movsl #0   
9065 [0x2369]:         movi #42, adx   
9067 [0x236b]:         rmov adx, ebx   
9068 [0x236c]:         movi #0, ebx   
9070 [0x236e]:         movsl #0   
9071 [0x236f]:         movi #43, adx   
9073 [0x2371]:         rmov adx, ebx   
9074 [0x2372]:         movi #0, ebx   
9076 [0x2374]:         movsl #0   
9077 [0x2375]:         movi #44, adx   
9079 [0x2377]:         rmov adx, ebx   
9080 [0x2378]:         movi #2, ebx   
9082 [0x237a]:         movsl #0   
9083 [0x237b]:         movi #45, adx   
9085 [0x237d]:         rmov adx, ebx   
9086 [0x237e]:         movi #0, ebx   
9088 [0x2380]:         movsl #0   
9089 [0x2381]:         movi #46, adx   
9091 [0x2383]:         rmov adx, ebx   
9092 [0x2384]:         movi #0, ebx   
9094 [0x2386]:         movsl #0   
9095 [0x2387]:         movi #47, adx   
9097 [0x2389]:         rmov adx, ebx   
9098 [0x238a]:         movi #0, ebx   
9100 [0x238c]:         movsl #0   
9101 [0x238d]:         movi #48, adx   
9103 [0x238f]:         rmov adx, ebx   
9104 [0x2390]:         movi #0, ebx   
9106 [0x2392]:         movsl #0   
9107 [0x2393]:         movi #49, adx   
9109 [0x2395]:         rmov adx, ebx   
9110 [0x2396]:         movi #0, ebx   
9112 [0x2398]:         movsl #0   
9113 [0x2399]:         movi #50, adx   
9115 [0x239b]:         rmov adx, ebx   
9116 [0x239c]:         movi #2, ebx   
9118 [0x239e]:         movsl #0   
9119 [0x239f]:         movi #51, adx   
9121 [0x23a1]:         rmov adx, ebx   
9122 [0x23a2]:         movi #0, ebx   
9124 [0x23a4]:         movsl #0   
9125 [0x23a5]:         movi #52, adx   
9127 [0x23a7]:         rmov adx, ebx   
9128 [0x23a8]:         movi #0, ebx   
9130 [0x23aa]:         movsl #0   
9131 [0x23ab]:         movi #53, adx   
9133 [0x23ad]:         rmov adx, ebx   
9134 [0x23ae]:         movi #0, ebx   
9136 [0x23b0]:         movsl #0   
9137 [0x23b1]:         movi #54, adx   
9139 [0x23b3]:         rmov adx, ebx   
9140 [0x23b4]:         movi #0, ebx   
9142 [0x23b6]:         movsl #0   
9143 [0x23b7]:         movi #55, adx   
9145 [0x23b9]:         rmov adx, ebx   
9146 [0x23ba]:         movi #0, ebx   
9148 [0x23bc]:         movsl #0   
9149 [0x23bd]:         movi #56, adx   
9151 [0x23bf]:         rmov adx, ebx   
9152 [0x23c0]:         movi #0, ebx   
9154 [0x23c2]:         movsl #0   
9155 [0x23c3]:         movi #57, adx   
9157 [0x23c5]:         rmov adx, ebx   
9158 [0x23c6]:         movi #2, ebx   
9160 [0x23c8]:         movsl #0   
9161 [0x23c9]:         movi #58, adx   
9163 [0x23cb]:         rmov adx, ebx   
9164 [0x23cc]:         movi #0, ebx   
9166 [0x23ce]:         movsl #0   
9167 [0x23cf]:         movi #59, adx   
9169 [0x23d1]:         rmov adx, ebx   
9170 [0x23d2]:         movi #0, ebx   
9172 [0x23d4]:         movsl #0   
9173 [0x23d5]:         movi #60, adx   
9175 [0x23d7]:         rmov adx, ebx   
9176 [0x23d8]:         movi #0, ebx   
9178 [0x23da]:         movsl #0   
9179 [0x23db]:         movi #61, adx   
9181 [0x23dd]:         rmov adx, ebx   
9182 [0x23de]:         movi #0, ebx   
9184 [0x23e0]:         movsl #0   
9185 [0x23e1]:         movi #62, adx   
9187 [0x23e3]:         rmov adx, ebx   
9188 [0x23e4]:         movi #0, ebx   
9190 [0x23e6]:         movsl #0   
9191 [0x23e7]:         movi #63, adx   
9193 [0x23e9]:         rmov adx, ebx   
9194 [0x23ea]:         movi #2, ebx   
9196 [0x23ec]:         movsl #0   
9197 [0x23ed]:         movi #64, adx   
9199 [0x23ef]:         rmov adx, ebx   
9200 [0x23f0]:         movi #0, ebx   
9202 [0x23f2]:         movsl #0   
9203 [0x23f3]:         movi #65, adx   
9205 [0x23f5]:         rmov adx, ebx   
9206 [0x23f6]:         movi #0, ebx   
9208 [0x23f8]:         movsl #0   
9209 [0x23f9]:         movi #66, adx   
9211 [0x23fb]:         rmov adx, ebx   
9212 [0x23fc]:         movi #2, ebx   
9214 [0x23fe]:         movsl #0   
9215 [0x23ff]:         movi #67, adx   
9217 [0x2401]:         rmov adx, ebx   
9218 [0x2402]:         movi #0, ebx   
9220 [0x2404]:         movsl #0   
9221 [0x2405]:         movi #68, adx   
9223 [0x2407]:         rmov adx, ebx   
9224 [0x2408]:         movi #0, ebx   
9226 [0x240a]:         movsl #0   
9227 [0x240b]:         movi #69, adx   
9229 [0x240d]:         rmov adx, ebx   
9230 [0x240e]:         movi #0, ebx   
9232 [0x2410]:         movsl #0   
9233 [0x2411]:         movi #70, adx   
9235 [0x2413]:         rmov adx, ebx   
9236 [0x2414]:         movi #0, ebx   
9238 [0x2416]:         movsl #0   
9239 [0x2417]:         movi #71, adx   
9241 [0x2419]:         rmov adx, ebx   
9242 [0x241a]:         movi #2, ebx   
9244 [0x241c]:         movsl #0   
9245 [0x241d]:         movi #72, adx   
9247 [0x241f]:         rmov adx, ebx   
9248 [0x2420]:         movi #0, ebx   
9250 [0x2422]:         movsl #0   
9251 [0x2423]:         movi #73, adx   
9253 [0x2425]:         rmov adx, ebx   
9254 [0x2426]:         movi #0, ebx   
9256 [0x2428]:         movsl #0   
9257 [0x2429]:         movi #74, adx   
9259 [0x242b]:         rmov adx, ebx   
9260 [0x242c]:         movi #0, ebx   
9262 [0x242e]:         movsl #0   
9263 [0x242f]:         movi #75, adx   
9265 [0x2431]:         rmov adx, ebx   
9266 [0x2432]:         movi #0, ebx   
9268 [0x2434]:         movsl #0   
9269 [0x2435]:         movi #76, adx   
9271 [0x2437]:         rmov adx, ebx   
9272 [0x2438]:         movi #2, ebx   
9274 [0x243a]:         movsl #0   
9275 [0x243b]:         movi #77, adx   
9277 [0x243d]:         rmov adx, ebx   
9278 [0x243e]:         movi #0, ebx   
9280 [0x2440]:         movsl #0   
9281 [0x2441]:         movi #78, adx   
9283 [0x2443]:         rmov adx, ebx   
9284 [0x2444]:         movi #0, ebx   
9286 [0x2446]:         movsl #0   
9287 [0x2447]:         movi #79, adx   
9289 [0x2449]:         rmov adx, ebx   
9290 [0x244a]:         movi #0, ebx   
9292 [0x244c]:         movsl #0   
9293 [0x244d]:         movi #80, adx   
9295 [0x244f]:         rmov adx, ebx   
9296 [0x2450]:         movi #2, ebx   
9298 [0x2452]:         movsl #0   
9299 [0x2453]:         movi #81, adx   
9301 [0x2455]:         rmov adx, ebx   
9302 [0x2456]:         movi #0, ebx   
9304 [0x2458]:         movsl #0   
9305 [0x2459]:         movi #82, adx   
9307 [0x245b]:         rmov adx, ebx   
9308 [0x245c]:         movi #0, ebx   
9310 [0x245e]:         movsl #0   
9311 [0x245f]:         movi #83, adx   
9313 [0x2461]:         rmov adx, ebx   
9314 [0x2462]:         movi #0, ebx   
9316 [0x2464]:         movsl #0   
9317 [0x2465]:         movi #84, adx   
9319 [0x2467]:         rmov adx, ebx   
9320 [0x2468]:         movi #0, ebx   
9322 [0x246a]:         movsl #0   
9323 [0x246b]:         movi #85, adx   
9325 [0x246d]:         rmov adx, ebx   
9326 [0x246e]:         movi #0, ebx   
9328 [0x2470]:         movsl #0   
9329 [0x2471]:         movi #86, adx   
9331 [0x2473]:         rmov adx, ebx   
9332 [0x2474]:         movi #2, ebx   
9334 [0x2476]:         movsl #0   
9335 [0x2477]:         movi #87, adx   
9337 [0x2479]:         rmov adx, ebx   
9338 [0x247a]:         movi #0, ebx   
9340 [0x247c]:         movsl #0   
9341 [0x247d]:         movi #88, adx   
9343 [0x247f]:         rmov adx, ebx   
9344 [0x2480]:         movi #0, ebx   
9346 [0x2482]:         movsl #0   
9347 [0x2483]:         movi #89, adx   
9349 [0x2485]:         rmov adx, ebx   
9350 [0x2486]:         movi #0, ebx   
9352 [0x2488]:         movsl #0   
9353 [0x2489]:         movi #90, adx   
9355 [0x248b]:         rmov adx, ebx   
9356 [0x248c]:         movi #0, ebx   
9358 [0x248e]:         movsl #0   
9359 [0x248f]:         movi #91, adx   
9361 [0x2491]:         rmov adx, ebx   
9362 [0x2492]:         movi #0, ebx   
9364 [0x2494]:         movsl #0   
9365 [0x2495]:         movi #92, adx   
9367 [0x2497]:         rmov adx, ebx   
9368 [0x2498]:         movi #0, ebx   
9370 [0x249a]:         movsl #0   
9371 [0x249b]:         movi #93, adx   
9373 [0x249d]:         rmov adx, ebx   
9374 [0x249e]:         movi #2, ebx   
9376 [0x24a0]:         movsl #0   
9377 [0x24a1]:         movi #94, adx   
9379 [0x24a3]:         rmov adx, ebx   
9380 [0x24a4]:         movi #0, ebx   
9382 [0x24a6]:         movsl #0   
9383 [0x24a7]:         movi #95, adx   
9385 [0x24a9]:         rmov adx, ebx   
9386 [0x24aa]:         movi #0, ebx   
9388 [0x24ac]:         movsl #0   
9389 [0x24ad]:         movi #96, adx   
9391 [0x24af]:         rmov adx, ebx   
9392 [0x24b0]:         movi #0, ebx   
9394 [0x24b2]:         movsl #0   
9395 [0x24b3]:         movi #97, adx   
9397 [0x24b5]:         rmov adx, ebx   
9398 [0x24b6]:         movi #0, ebx   
9400 [0x24b8]:         movsl #0   
9401 [0x24b9]:         movi #98, adx   
9403 [0x24bb]:         rmov adx, ebx   
9404 [0x24bc]:         movi #0, ebx   
9406 [0x24be]:         movsl #0   
9407 [0x24bf]:         movi #99, adx   
9409 [0x24c1]:         rmov adx, ebx   
9410 [0x24c2]:         movi #0, ebx   
9412 [0x24c4]:         movsl #0   
9413 [0x24c5]:         movi #100, adx   
9415 [0x24c7]:         rmov adx, ebx   
9416 [0x24c8]:         movi #0, ebx   
9418 [0x24ca]:         movsl #0   
9419 [0x24cb]:         movi #101, adx   
9421 [0x24cd]:         rmov adx, ebx   
9422 [0x24ce]:         movi #2, ebx   
9424 [0x24d0]:         movsl #0   
9425 [0x24d1]:         movi #102, adx   
9427 [0x24d3]:         rmov adx, ebx   
9428 [0x24d4]:         movi #0, ebx   
9430 [0x24d6]:         movsl #0   
9431 [0x24d7]:         movi #103, adx   
9433 [0x24d9]:         rmov adx, ebx   
9434 [0x24da]:         movi #2, ebx   
9436 [0x24dc]:         movsl #0   
9437 [0x24dd]:         movi #104, adx   
9439 [0x24df]:         rmov adx, ebx   
9440 [0x24e0]:         movi #0, ebx   
9442 [0x24e2]:         movsl #0   
9443 [0x24e3]:         movi #105, adx   
9445 [0x24e5]:         rmov adx, ebx   
9446 [0x24e6]:         movi #2, ebx   
9448 [0x24e8]:         movsl #0   
9449 [0x24e9]:         movi #106, adx   
9451 [0x24eb]:         rmov adx, ebx   
9452 [0x24ec]:         movi #2, ebx   
9454 [0x24ee]:         movsl #0   
9455 [0x24ef]:         movi #107, adx   
9457 [0x24f1]:         rmov adx, ebx   
9458 [0x24f2]:         movi #0, ebx   
9460 [0x24f4]:         movsl #0   
9461 [0x24f5]:         movi #108, adx   
9463 [0x24f7]:         rmov adx, ebx   
9464 [0x24f8]:         movi #0, ebx   
9466 [0x24fa]:         movsl #0   
9467 [0x24fb]:         movi #109, adx   
9469 [0x24fd]:         rmov adx, ebx   
9470 [0x24fe]:         movi #0, ebx   
9472 [0x2500]:         movsl #0   
9473 [0x2501]:         movi #110, adx   
9475 [0x2503]:         rmov adx, ebx   
9476 [0x2504]:         movi #0, ebx   
9478 [0x2506]:         movsl #0   
9479 [0x2507]:         movi #111, adx   
9481 [0x2509]:         rmov adx, ebx   
9482 [0x250a]:         movi #0, ebx   
9484 [0x250c]:         movsl #0   
9485 [0x250d]:         movi #112, adx   
9487 [0x250f]:         rmov adx, ebx   
9488 [0x2510]:         movi #0, ebx   
9490 [0x2512]:         movsl #0   
9491 [0x2513]:         movi #113, adx   
9493 [0x2515]:         rmov adx, ebx   
9494 [0x2516]:         movi #0, ebx   
9496 [0x2518]:         movsl #0   
9497 [0x2519]:         movi #114, adx   
9499 [0x251b]:         rmov adx, ebx   
9500 [0x251c]:         movi #0, ebx   
9502 [0x251e]:         movsl #0   
9503 [0x251f]:         movi #115, adx   
9505 [0x2521]:         rmov adx, ebx   
9506 [0x2522]:         movi #0, ebx   
9508 [0x2524]:         movsl #0   
9509 [0x2525]:         movi #116, adx   
9511 [0x2527]:         rmov adx, ebx   
9512 [0x2528]:         movi #2, ebx   
9514 [0x252a]:         movsl #0   
9515 [0x252b]:         movi #117, adx   
9517 [0x252d]:         rmov adx, ebx   
9518 [0x252e]:         movi #2, ebx   
9520 [0x2530]:         movsl #0   
9521 [0x2531]:         movi #118, adx   
9523 [0x2533]:         rmov adx, ebx   
9524 [0x2534]:         movi #0, ebx   
9526 [0x2536]:         movsl #0   
9527 [0x2537]:         movi #119, adx   
9529 [0x2539]:         rmov adx, ebx   
9530 [0x253a]:         movi #2, ebx   
9532 [0x253c]:         movsl #0   
9533 [0x253d]:         movi #120, adx   
9535 [0x253f]:         rmov adx, ebx   
9536 [0x2540]:         movi #0, ebx   
9538 [0x2542]:         movsl #0   
9539 [0x2543]:         movi #121, adx   
9541 [0x2545]:         rmov adx, ebx   
9542 [0x2546]:         movi #0, ebx   
9544 [0x2548]:         movsl #0   
9545 [0x2549]:         movi #122, adx   
9547 [0x254b]:         rmov adx, ebx   
9548 [0x254c]:         movi #0, ebx   
9550 [0x254e]:         movsl #0   
9551 [0x254f]:         movi #123, adx   
9553 [0x2551]:         rmov adx, ebx   
9554 [0x2552]:         movi #0, ebx   
9556 [0x2554]:         movsl #0   
9557 [0x2555]:         movi #124, adx   
9559 [0x2557]:         rmov adx, ebx   
9560 [0x2558]:         movi #0, ebx   
9562 [0x255a]:         movsl #0   
9563 [0x255b]:         movi #125, adx   
9565 [0x255d]:         rmov adx, ebx   
9566 [0x255e]:         movg @108 // @ui.res.drawable#__srt_global   
9567 [0x255f]:         movn #22   
9569 [0x2561]:         popobj   
9570 [0x2562]:         new_class @121 // ui.support#drawable   
9571 [0x2563]:         dup    
9572 [0x2564]:         istore 11   
9574 [0x2566]:         movg @108 // @ui.res.drawable#__srt_global   
9575 [0x2567]:         movn #22   
9577 [0x2569]:         pushobj   
9578 [0x256a]:         istore 14   
9580 [0x256c]:         movi #9, ebx   
9582 [0x256e]:         rstore ebx   
9583 [0x256f]:         call @3181 // <ui.support#drawable.drawable>   
9584 [0x2570]:         movg @108 // @ui.res.drawable#__srt_global   
9585 [0x2571]:         movn #23   
9587 [0x2573]:         popobj   
9588 [0x2574]:         ret   


function: std.io#thread_result.$03internal_static_init[3528] params(0) in file: lib\support\0.2.805/io//thread_kernel.sharp:3:5: note:  
		import platform.kernel;
		    ^

0 [0x0]: line: 42 istorel 0, fp+0   
2 [0x2]: line: 43 movi #17, ebx   
4 [0x4]:          new_classarray ebx  // std.io#thread_result[]   
5 [0x5]:          movg @31 // @std.io#thread_result   
6 [0x6]:          movn #17   
8 [0x8]:          popobj   
9 [0x9]: line: 44 movg @31 // @std.io#thread_result   
10 [0xa]:          movn #0   
12 [0xc]:          pushobj   
13 [0xd]:          movg @31 // @std.io#thread_result   
14 [0xe]:          movn #17   
16 [0x10]:          pushobj   
17 [0x11]:          loadl ebx, fp+0   
18 [0x12]:          movr egx, ebx   
19 [0x13]:          inc ebx   
20 [0x14]:          smovr_2 ebx, fp+0   
21 [0x15]:          movr ebx, egx   
22 [0x16]:          popobj2    
23 [0x17]:          movr adx, ebx   
24 [0x18]:          chklen adx   
25 [0x19]:          movnd adx   
26 [0x1a]:          popobj   
27 [0x1b]: line: 45 movg @31 // @std.io#thread_result   
28 [0x1c]:          movn #1   
30 [0x1e]:          pushobj   
31 [0x1f]:          movg @31 // @std.io#thread_result   
32 [0x20]:          movn #17   
34 [0x22]:          pushobj   
35 [0x23]:          loadl ebx, fp+0   
36 [0x24]:          movr egx, ebx   
37 [0x25]:          inc ebx   
38 [0x26]:          smovr_2 ebx, fp+0   
39 [0x27]:          movr ebx, egx   
40 [0x28]:          popobj2    
41 [0x29]:          movr adx, ebx   
42 [0x2a]:          chklen adx   
43 [0x2b]:          movnd adx   
44 [0x2c]:          popobj   
45 [0x2d]: line: 46 movg @31 // @std.io#thread_result   
46 [0x2e]:          movn #2   
48 [0x30]:          pushobj   
49 [0x31]:          movg @31 // @std.io#thread_result   
50 [0x32]:          movn #17   
52 [0x34]:          pushobj   
53 [0x35]:          loadl ebx, fp+0   
54 [0x36]:          movr egx, ebx   
55 [0x37]:          inc ebx   
56 [0x38]:          smovr_2 ebx, fp+0   
57 [0x39]:          movr ebx, egx   
58 [0x3a]:          popobj2    
59 [0x3b]:          movr adx, ebx   
60 [0x3c]:          chklen adx   
61 [0x3d]:          movnd adx   
62 [0x3e]:          popobj   
63 [0x3f]: line: 47 movg @31 // @std.io#thread_result   
64 [0x40]:          movn #3   
66 [0x42]:          pushobj   
67 [0x43]:          movg @31 // @std.io#thread_result   
68 [0x44]:          movn #17   
70 [0x46]:          pushobj   
71 [0x47]:          loadl ebx, fp+0   
72 [0x48]:          movr egx, ebx   
73 [0x49]:          inc ebx   
74 [0x4a]:          smovr_2 ebx, fp+0   
75 [0x4b]:          movr ebx, egx   
76 [0x4c]:          popobj2    
77 [0x4d]:          movr adx, ebx   
78 [0x4e]:          chklen adx   
79 [0x4f]:          movnd adx   
80 [0x50]:          popobj   
81 [0x51]: line: 48 movg @31 // @std.io#thread_result   
82 [0x52]:          movn #4   
84 [0x54]:          pushobj   
85 [0x55]:          movg @31 // @std.io#thread_result   
86 [0x56]:          movn #17   
88 [0x58]:          pushobj   
89 [0x59]:          loadl ebx, fp+0   
90 [0x5a]:          movr egx, ebx   
91 [0x5b]:          inc ebx   
92 [0x5c]:          smovr_2 ebx, fp+0   
93 [0x5d]:          movr ebx, egx   
94 [0x5e]:          popobj2    
95 [0x5f]:          movr adx, ebx   
96 [0x60]:          chklen adx   
97 [0x61]:          movnd adx   
98 [0x62]:          popobj   
99 [0x63]: line: 49 movg @31 // @std.io#thread_result   
100 [0x64]:          movn #5   
102 [0x66]:          pushobj   
103 [0x67]:          movg @31 // @std.io#thread_result   
104 [0x68]:          movn #17   
106 [0x6a]:          pushobj   
107 [0x6b]:          loadl ebx, fp+0   
108 [0x6c]:          movr egx, ebx   
109 [0x6d]:          inc ebx   
110 [0x6e]:          smovr_2 ebx, fp+0   
111 [0x6f]:          movr ebx, egx   
112 [0x70]:          popobj2    
113 [0x71]:          movr adx, ebx   
114 [0x72]:          chklen adx   
115 [0x73]:          movnd adx   
116 [0x74]:          popobj   
117 [0x75]: line: 50 movg @31 // @std.io#thread_result   
118 [0x76]:          movn #6   
120 [0x78]:          pushobj   
121 [0x79]:          movg @31 // @std.io#thread_result   
122 [0x7a]:          movn #17   
124 [0x7c]:          pushobj   
125 [0x7d]:          loadl ebx, fp+0   
126 [0x7e]:          movr egx, ebx   
127 [0x7f]:          inc ebx   
128 [0x80]:          smovr_2 ebx, fp+0   
129 [0x81]:          movr ebx, egx   
130 [0x82]:          popobj2    
131 [0x83]:          movr adx, ebx   
132 [0x84]:          chklen adx   
133 [0x85]:          movnd adx   
134 [0x86]:          popobj   
135 [0x87]: line: 51 movg @31 // @std.io#thread_result   
136 [0x88]:          movn #7   
138 [0x8a]:          pushobj   
139 [0x8b]:          movg @31 // @std.io#thread_result   
140 [0x8c]:          movn #17   
142 [0x8e]:          pushobj   
143 [0x8f]:          loadl ebx, fp+0   
144 [0x90]:          movr egx, ebx   
145 [0x91]:          inc ebx   
146 [0x92]:          smovr_2 ebx, fp+0   
147 [0x93]:          movr ebx, egx   
148 [0x94]:          popobj2    
149 [0x95]:          movr adx, ebx   
150 [0x96]:          chklen adx   
151 [0x97]:          movnd adx   
152 [0x98]:          popobj   
153 [0x99]: line: 52 movg @31 // @std.io#thread_result   
154 [0x9a]:          movn #8   
156 [0x9c]:          pushobj   
157 [0x9d]:          movg @31 // @std.io#thread_result   
158 [0x9e]:          movn #17   
160 [0xa0]:          pushobj   
161 [0xa1]:          loadl ebx, fp+0   
162 [0xa2]:          movr egx, ebx   
163 [0xa3]:          inc ebx   
164 [0xa4]:          smovr_2 ebx, fp+0   
165 [0xa5]:          movr ebx, egx   
166 [0xa6]:          popobj2    
167 [0xa7]:          movr adx, ebx   
168 [0xa8]:          chklen adx   
169 [0xa9]:          movnd adx   
170 [0xaa]:          popobj   
171 [0xab]: line: 53 movg @31 // @std.io#thread_result   
172 [0xac]:          movn #9   
174 [0xae]:          pushobj   
175 [0xaf]:          movg @31 // @std.io#thread_result   
176 [0xb0]:          movn #17   
178 [0xb2]:          pushobj   
179 [0xb3]:          loadl ebx, fp+0   
180 [0xb4]:          movr egx, ebx   
181 [0xb5]:          inc ebx   
182 [0xb6]:          smovr_2 ebx, fp+0   
183 [0xb7]:          movr ebx, egx   
184 [0xb8]:          popobj2    
185 [0xb9]:          movr adx, ebx   
186 [0xba]:          chklen adx   
187 [0xbb]:          movnd adx   
188 [0xbc]:          popobj   
189 [0xbd]: line: 54 movg @31 // @std.io#thread_result   
190 [0xbe]:          movn #10   
192 [0xc0]:          pushobj   
193 [0xc1]:          movg @31 // @std.io#thread_result   
194 [0xc2]:          movn #17   
196 [0xc4]:          pushobj   
197 [0xc5]:          loadl ebx, fp+0   
198 [0xc6]:          movr egx, ebx   
199 [0xc7]:          inc ebx   
200 [0xc8]:          smovr_2 ebx, fp+0   
201 [0xc9]:          movr ebx, egx   
202 [0xca]:          popobj2    
203 [0xcb]:          movr adx, ebx   
204 [0xcc]:          chklen adx   
205 [0xcd]:          movnd adx   
206 [0xce]:          popobj   
207 [0xcf]: line: 55 movg @31 // @std.io#thread_result   
208 [0xd0]:          movn #11   
210 [0xd2]:          pushobj   
211 [0xd3]:          movg @31 // @std.io#thread_result   
212 [0xd4]:          movn #17   
214 [0xd6]:          pushobj   
215 [0xd7]:          loadl ebx, fp+0   
216 [0xd8]:          movr egx, ebx   
217 [0xd9]:          inc ebx   
218 [0xda]:          smovr_2 ebx, fp+0   
219 [0xdb]:          movr ebx, egx   
220 [0xdc]:          popobj2    
221 [0xdd]:          movr adx, ebx   
222 [0xde]:          chklen adx   
223 [0xdf]:          movnd adx   
224 [0xe0]:          popobj   
225 [0xe1]: line: 56 movg @31 // @std.io#thread_result   
226 [0xe2]:          movn #12   
228 [0xe4]:          pushobj   
229 [0xe5]:          movg @31 // @std.io#thread_result   
230 [0xe6]:          movn #17   
232 [0xe8]:          pushobj   
233 [0xe9]:          loadl ebx, fp+0   
234 [0xea]:          movr egx, ebx   
235 [0xeb]:          inc ebx   
236 [0xec]:          smovr_2 ebx, fp+0   
237 [0xed]:          movr ebx, egx   
238 [0xee]:          popobj2    
239 [0xef]:          movr adx, ebx   
240 [0xf0]:          chklen adx   
241 [0xf1]:          movnd adx   
242 [0xf2]:          popobj   
243 [0xf3]: line: 57 movg @31 // @std.io#thread_result   
244 [0xf4]:          movn #13   
246 [0xf6]:          pushobj   
247 [0xf7]:          movg @31 // @std.io#thread_result   
248 [0xf8]:          movn #17   
250 [0xfa]:          pushobj   
251 [0xfb]:          loadl ebx, fp+0   
252 [0xfc]:          movr egx, ebx   
253 [0xfd]:          inc ebx   
254 [0xfe]:          smovr_2 ebx, fp+0   
255 [0xff]:          movr ebx, egx   
256 [0x100]:          popobj2    
257 [0x101]:          movr adx, ebx   
258 [0x102]:          chklen adx   
259 [0x103]:          movnd adx   
260 [0x104]:          popobj   
261 [0x105]: line: 58 movg @31 // @std.io#thread_result   
262 [0x106]:          movn #14   
264 [0x108]:          pushobj   
265 [0x109]:          movg @31 // @std.io#thread_result   
266 [0x10a]:          movn #17   
268 [0x10c]:          pushobj   
269 [0x10d]:          loadl ebx, fp+0   
270 [0x10e]:          movr egx, ebx   
271 [0x10f]:          inc ebx   
272 [0x110]:          smovr_2 ebx, fp+0   
273 [0x111]:          movr ebx, egx   
274 [0x112]:          popobj2    
275 [0x113]:          movr adx, ebx   
276 [0x114]:          chklen adx   
277 [0x115]:          movnd adx   
278 [0x116]:          popobj   
279 [0x117]: line: 59 movg @31 // @std.io#thread_result   
280 [0x118]:          movn #15   
282 [0x11a]:          pushobj   
283 [0x11b]:          movg @31 // @std.io#thread_result   
284 [0x11c]:          movn #17   
286 [0x11e]:          pushobj   
287 [0x11f]:          loadl ebx, fp+0   
288 [0x120]:          movr egx, ebx   
289 [0x121]:          inc ebx   
290 [0x122]:          smovr_2 ebx, fp+0   
291 [0x123]:          movr ebx, egx   
292 [0x124]:          popobj2    
293 [0x125]:          movr adx, ebx   
294 [0x126]:          chklen adx   
295 [0x127]:          movnd adx   
296 [0x128]:          popobj   
297 [0x129]: line: 60 movg @31 // @std.io#thread_result   
298 [0x12a]:          movn #16   
300 [0x12c]:          pushobj   
301 [0x12d]:          movg @31 // @std.io#thread_result   
302 [0x12e]:          movn #17   
304 [0x130]:          pushobj   
305 [0x131]:          loadl ebx, fp+0   
306 [0x132]:          movr egx, ebx   
307 [0x133]:          inc ebx   
308 [0x134]:          smovr_2 ebx, fp+0   
309 [0x135]:          movr ebx, egx   
310 [0x136]:          popobj2    
311 [0x137]:          movr adx, ebx   
312 [0x138]:          chklen adx   
313 [0x139]:          movnd adx   
314 [0x13a]:          popobj   
315 [0x13b]:          ret   
316 [0x13c]:          ret   


lambda: std.io.task#__srt_global.anon_func$3529[3529] params(2) in file: lib\support\0.2.805/io//task//job_master.sharp:71:35: note:  
				job_queue.remove(scheduled_job, { it, it2 -> return it.id == it2.id; });
		                                  ^

0 [0x0]: line: 71 movl 0   
1 [0x1]:          movn #15   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #15   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


lambda: std.io.task#__srt_global.anon_func$3530[3530] params(2) in file: lib\support\0.2.805/io//task//job_scheduler.sharp:89:52: note:  
		                        jobs.remove(scheduled_job, { it, it2 -> return it.id == it2.id; });
		                                                   ^

0 [0x0]: line: 89 movl 0   
1 [0x1]:          movn #15   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #15   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


lambda: std.io.task#__srt_global.anon_func$3531[3531] params(2) in file: lib\support\0.2.805/io//task//job_scheduler.sharp:104:48: note:  
		                    jobs.remove(scheduled_job, { it, it2 -> return it.id == it2.id; });
		                                               ^

0 [0x0]: line: 104 movl 0   
1 [0x1]:           movn #15   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #15   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           test ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


lambda: std.io.task#__srt_global.anon_func$3532[3532] params(1) in file: lib\support\0.2.805/io//task//job_scheduler.sharp:128:19: note:  
		        pool.find({ t ->
		                  ^

0 [0x0]: line: 129 pushl 0   
1 [0x1]:           movg @20 // @std.io.task#__srt_global   
2 [0x2]:           movn #3   
4 [0x4]:           pushobj   
5 [0x5]:           call @1877 // <std.io#thread.operator==>   
6 [0x6]:           loadval ebx   
7 [0x7]:           movr cmt, ebx   
8 [0x8]:           jne 12   
9 [0x9]:           istorel 0, fp+0   
11 [0xb]:           ret   
12 [0xc]:           nop   
13 [0xd]: line: 131 movg @20 // @std.io.task#__srt_global   
14 [0xe]:           movn #5   
16 [0x10]:           pushobj   
17 [0x11]:           pushl 0   
18 [0x12]:           call @1818 // <std.io.task#job_master.get_host_controller>   
19 [0x13]:           popobj2    
20 [0x14]:           movn #0   
22 [0x16]:           pushobj   
23 [0x17]:           pushnull    
24 [0x18]:           itest ebx   
25 [0x19]:           return_val ebx   
26 [0x1a]:           ret   


lambda: std.io.task#__srt_global.anon_func$3533[3533] params(1) in file: lib\support\0.2.805/io//task//job_scheduler.sharp:162:19: note:  
		        pool.find({ t ->
		                  ^

0 [0x0]: line: 163 pushl 0   
1 [0x1]:           movg @20 // @std.io.task#__srt_global   
2 [0x2]:           movn #3   
4 [0x4]:           pushobj   
5 [0x5]:           call @1877 // <std.io#thread.operator==>   
6 [0x6]:           loadval ebx   
7 [0x7]:           movr cmt, ebx   
8 [0x8]:           jne 12   
9 [0x9]:           istorel 0, fp+0   
11 [0xb]:           ret   
12 [0xc]:           nop   
13 [0xd]: line: 164 movg @20 // @std.io.task#__srt_global   
14 [0xe]:           movn #5   
16 [0x10]:           pushobj   
17 [0x11]:           pushl 0   
18 [0x12]:           call @1818 // <std.io.task#job_master.get_host_controller>   
19 [0x13]:           popobj2    
20 [0x14]:           smovr_3 fp+1   
21 [0x15]: line: 166 movl 1   
22 [0x16]:           movn #0   
24 [0x18]:           pushobj   
25 [0x19]:           pushnull    
26 [0x1a]:           itest ebx   
27 [0x1b]:           skne ebx // pc = 61   
28 [0x1c]:           movl 1   
29 [0x1d]:           movn #1   
31 [0x1f]:           movi #0, adx   
33 [0x21]:           iaload ebx, adx   
34 [0x22]:           rstore ebx   
35 [0x23]:           movi #0, ebx   
37 [0x25]:           loadval ecx   
38 [0x26]:           gt ecx, ebx   
39 [0x27]:           movr ebx, cmt   
40 [0x28]:           skne ebx // pc = 61   
41 [0x29]:           movg @20 // @std.io.task#__srt_global   
42 [0x2a]:           movn #4   
44 [0x2c]:           movi #0, adx   
46 [0x2e]:           iaload ebx, adx   
47 [0x2f]:           rstore ebx   
48 [0x30]:           movl 1   
49 [0x31]:           movn #1   
51 [0x33]:           movi #0, adx   
53 [0x35]:           iaload ebx, adx   
54 [0x36]:           loadval ecx   
55 [0x37]:           sub ecx, ebx -> ebx   
56 [0x38]:           rstore ebx   
57 [0x39]:           movi #180000, ebx   
59 [0x3b]:           loadval ecx   
60 [0x3c]:           gt ecx, ebx   
61 [0x3d]:           return_val cmt   
62 [0x3e]:           ret   


lambda: std.io.task#__srt_global.anon_func$3534[3534] params(1) in file: lib\support\0.2.805/io//task//job_scheduler.sharp:177:19: note:  
		        pool.find({ t ->
		                  ^

0 [0x0]: line: 178 movg @20 // @std.io.task#__srt_global   
1 [0x1]:           movn #5   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           call @1818 // <std.io.task#job_master.get_host_controller>   
6 [0x6]:           popobj2    
7 [0x7]:           smovr_3 fp+1   
8 [0x8]: line: 179 movl 1   
9 [0x9]:           movn #0   
11 [0xb]:           pushobj   
12 [0xc]:           pushnull    
13 [0xd]:           itest ebx   
14 [0xe]:           skne ebx // pc = 48   
15 [0xf]:           movl 1   
16 [0x10]:           movn #1   
18 [0x12]:           movi #0, adx   
20 [0x14]:           iaload ebx, adx   
21 [0x15]:           rstore ebx   
22 [0x16]:           movi #0, ebx   
24 [0x18]:           loadval ecx   
25 [0x19]:           gt ecx, ebx   
26 [0x1a]:           movr ebx, cmt   
27 [0x1b]:           skne ebx // pc = 48   
28 [0x1c]:           movg @20 // @std.io.task#__srt_global   
29 [0x1d]:           movn #4   
31 [0x1f]:           movi #0, adx   
33 [0x21]:           iaload ebx, adx   
34 [0x22]:           rstore ebx   
35 [0x23]:           movl 1   
36 [0x24]:           movn #1   
38 [0x26]:           movi #0, adx   
40 [0x28]:           iaload ebx, adx   
41 [0x29]:           loadval ecx   
42 [0x2a]:           sub ecx, ebx -> ebx   
43 [0x2b]:           rstore ebx   
44 [0x2c]:           movi #180000, ebx   
46 [0x2e]:           loadval ecx   
47 [0x2f]:           gt ecx, ebx   
48 [0x30]:           return_val cmt   
49 [0x31]:           ret   


lambda: main#__srt_global.anon_func$3535[3535] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/connection_tracker.sharp:20:10: note:  
		       = { ->
		         ^

0 [0x0]: line: 21 istore 26   
2 [0x2]:          ldc ebx // 1   
3 [0x3]:          rstore ebx   
4 [0x4]:          invoke_delegate 3058 { static=1, args=2 }   
6 [0x6]: line: 23 movg @101 // @main#__srt_global   
7 [0x7]:          movn #2   
9 [0x9]:          movi #0, adx   
11 [0xb]:          iaload ebx, adx   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 23   
14 [0xe]: line: 24 istore 200   
16 [0x10]:          call @1856 // <std.io#thread.sleep>   
17 [0x11]: line: 25 istore 26   
19 [0x13]:          ldc ebx // 0   
20 [0x14]:          rstore ebx   
21 [0x15]:          invoke_delegate 3058 { static=1, args=2 }   
23 [0x17]:          nop   
24 [0x18]:          ret   


lambda: main#__srt_global.anon_func$3536[3536] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/connection_tracker.sharp:34:10: note:  
		       = { ->
		         ^

0 [0x0]: line: 35 movg @101 // @main#__srt_global   
1 [0x1]:          movn #2   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 9   
8 [0x8]:          ret   
9 [0x9]:          nop   
10 [0xa]: line: 36 call @3122 // <common.network#network.get_signal_strength>   
11 [0xb]:          movg @101 // @main#__srt_global   
12 [0xc]:          movn #1   
14 [0xe]:          loadval ebx   
15 [0xf]:          movi #0, adx   
17 [0x11]:          rmov adx, ebx   
18 [0x12]: line: 38 movg @101 // @main#__srt_global   
19 [0x13]:          movn #1   
21 [0x15]:          movi #0, adx   
23 [0x17]:          iaload ebx, adx   
24 [0x18]:          rstore ebx   
25 [0x19]:          ldc ebx // 0   
26 [0x1a]:          loadval ecx   
27 [0x1b]:          test ecx, ebx   
28 [0x1c]:          jne 85   
29 [0x1d]: line: 39 movg @101 // @main#__srt_global   
30 [0x1e]:          movn #3   
32 [0x20]:          movi #0, adx   
34 [0x22]:          iaload ebx, adx   
35 [0x23]:          rstore ebx   
36 [0x24]:          movi #0, ebx   
38 [0x26]:          loadval ecx   
39 [0x27]:          gt ecx, ebx   
40 [0x28]:          movr ebx, cmt   
41 [0x29]:          movr cmt, ebx   
42 [0x2a]:          jne 55   
43 [0x2b]: line: 40 movg @101 // @main#__srt_global   
44 [0x2c]:          movn #3   
46 [0x2e]:          movi #0, adx   
48 [0x30]:          iaload ebx, adx   
49 [0x31]:          movr egx, ebx   
50 [0x32]:          dec ebx   
51 [0x33]:          movi #0, adx   
53 [0x35]:          rmov adx, ebx   
54 [0x36]:          jmp @83   
55 [0x37]: line: 42 istore 1   
57 [0x39]:          movg @101 // @main#__srt_global   
58 [0x3a]:          movn #2   
60 [0x3c]:          loadval ebx   
61 [0x3d]:          movi #0, adx   
63 [0x3f]:          rmov adx, ebx   
64 [0x40]: line: 43 call @3119 // <common.network#network.handshake>   
65 [0x41]: line: 44 istore 0   
67 [0x43]:          movg @101 // @main#__srt_global   
68 [0x44]:          movn #2   
70 [0x46]:          loadval ebx   
71 [0x47]:          movi #0, adx   
73 [0x49]:          rmov adx, ebx   
74 [0x4a]: line: 45 istore 4   
76 [0x4c]:          movg @101 // @main#__srt_global   
77 [0x4d]:          movn #3   
79 [0x4f]:          loadval ebx   
80 [0x50]:          movi #0, adx   
82 [0x52]:          rmov adx, ebx   
83 [0x53]:          nop   
84 [0x54]:          jmp @94   
85 [0x55]: line: 48 istore 0   
87 [0x57]:          movg @101 // @main#__srt_global   
88 [0x58]:          movn #3   
90 [0x5a]:          loadval ebx   
91 [0x5b]:          movi #0, adx   
93 [0x5d]:          rmov adx, ebx   
94 [0x5e]:          nop   
95 [0x5f]:          ret   


lambda: main#__srt_global.anon_func$3537[3537] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/main.sharp:23:11: note:  
		        = { ->
		          ^

0 [0x0]: line: 24 call @3119 // <common.network#network.handshake>   
1 [0x1]: line: 25 istore 0   
3 [0x3]:          movg @101 // @main#__srt_global   
4 [0x4]:          movn #2   
6 [0x6]:          loadval ebx   
7 [0x7]:          movi #0, adx   
9 [0x9]:          rmov adx, ebx   
10 [0xa]:          ret   


lambda: main#__srt_global.anon_func$3538[3538] params(0) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/main.sharp:31:9: note:  
		      = { ->
		        ^

0 [0x0]: line: 32 movg @101 // @main#__srt_global   
1 [0x1]:          movn #2   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          not ebx, ebx   
7 [0x7]:          movr cmt, ebx   
8 [0x8]:          jne 18   
9 [0x9]: line: 33 new_class @64 // std#string   
10 [0xa]:          dup    
11 [0xb]:          movg @72 // @common#constants.strings   
12 [0xc]:          movn #7   
14 [0xe]:          pushobj   
15 [0xf]:          call @2935 // <std#string.string>   
16 [0x10]:          call @3121 // <common.network#network.change_mode>   
17 [0x11]:          pop   
18 [0x12]:          nop   
19 [0x13]:          ret   


lambda: ui.layout#__srt_global.anon_func$3539[3539] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//layout//home_screen.sharp:108:15: note:  
		            = { args: object[]  ->
		              ^

0 [0x0]: line: 109 pushl 0   
1 [0x1]:           movi #1, ebx   
3 [0x3]:           popobj2    
4 [0x4]:           movr adx, ebx   
5 [0x5]:           chklen adx   
6 [0x6]:           movnd adx   
7 [0x7]:           movi #126, cmt   
9 [0x9]:           cast cmt   
10 [0xa]:           smovr_3 fp+1   
11 [0xb]: line: 110 pushl 0   
12 [0xc]:           movi #2, ebx   
14 [0xe]:           popobj2    
15 [0xf]:           movr adx, ebx   
16 [0x10]:           chklen adx   
17 [0x11]:           movnd adx   
18 [0x12]:           movi #126, cmt   
20 [0x14]:           cast cmt   
21 [0x15]:           smovr_3 fp+2   
22 [0x16]: line: 111 pushl 0   
23 [0x17]:           movi #3, ebx   
25 [0x19]:           popobj2    
26 [0x1a]:           movr adx, ebx   
27 [0x1b]:           chklen adx   
28 [0x1c]:           movnd adx   
29 [0x1d]:           movi #123, cmt   
31 [0x1f]:           cast cmt   
32 [0x20]:           smovr_3 fp+3   
33 [0x21]: line: 113 movg @101 // @main#__srt_global   
34 [0x22]:           movn #2   
36 [0x24]:           movi #0, adx   
38 [0x26]:           iaload ebx, adx   
39 [0x27]:           not ebx, ebx   
40 [0x28]:           movr cmt, ebx   
41 [0x29]:           jne 177   
42 [0x2a]: line: 114 call @3124 // <common.network#network.get_flight_data>   
43 [0x2b]:           popobj2    
44 [0x2c]:           smovr_3 fp+4   
45 [0x2d]: line: 116 movl 4   
46 [0x2e]:           checknull   
47 [0x2f]:           not ebx, ebx   
48 [0x30]:           movr cmt, ebx   
49 [0x31]:           jne 176   
50 [0x32]: line: 117 pushl 1   
51 [0x33]:           new_class @64 // std#string   
52 [0x34]:           dup    
53 [0x35]:           newstr @22 //    
54 [0x36]:           call @2935 // <std#string.string>   
55 [0x37]:           movl 4   
56 [0x38]:           movn #2   
58 [0x3a]:           movi #0, adx   
60 [0x3c]:           iaload ebx, adx   
61 [0x3d]:           rstore ebx   
62 [0x3e]:           call @2967 // <std#string.operator+>   
63 [0x3f]:           call @3471 // <ui.support#text_view.set_text>   
64 [0x40]: line: 118 pushl 2   
65 [0x41]:           new_class @64 // std#string   
66 [0x42]:           dup    
67 [0x43]:           newstr @22 //    
68 [0x44]:           call @2935 // <std#string.string>   
69 [0x45]:           movl 4   
70 [0x46]:           movn #1   
72 [0x48]:           movi #0, adx   
74 [0x4a]:           iaload ebx, adx   
75 [0x4b]:           rstore ebx   
76 [0x4c]:           call @2967 // <std#string.operator+>   
77 [0x4d]:           newstr @150 // M   
78 [0x4e]:           call @2947 // <std#string.operator+>   
79 [0x4f]:           call @3471 // <ui.support#text_view.set_text>   
80 [0x50]: line: 120 movl 4   
81 [0x51]:           movn #0   
83 [0x53]:           movi #0, adx   
85 [0x55]:           iaload ebx, adx   
86 [0x56]:           rstore ebx   
87 [0x57]:           movi #0, ebx   
89 [0x59]:           loadval ecx   
90 [0x5a]:           test ecx, ebx   
91 [0x5b]:           jne 98   
92 [0x5c]: line: 122 pushl 3   
93 [0x5d]:           istore 13   
95 [0x5f]:           call @3196 // <ui.support#image_view.set_drawable>   
96 [0x60]:           pop   
97 [0x61]:           jmp @175   
98 [0x62]:           movl 4   
99 [0x63]:           movn #0   
101 [0x65]:           movi #0, adx   
103 [0x67]:           iaload ebx, adx   
104 [0x68]:           rstore ebx   
105 [0x69]:           movi #1, ebx   
107 [0x6b]:           loadval ecx   
108 [0x6c]:           test ecx, ebx   
109 [0x6d]:           jne 116   
110 [0x6e]: line: 125 pushl 3   
111 [0x6f]:           istore 14   
113 [0x71]:           call @3196 // <ui.support#image_view.set_drawable>   
114 [0x72]:           pop   
115 [0x73]:           jmp @175   
116 [0x74]:           movl 4   
117 [0x75]:           movn #0   
119 [0x77]:           movi #0, adx   
121 [0x79]:           iaload ebx, adx   
122 [0x7a]:           rstore ebx   
123 [0x7b]:           movi #2, ebx   
125 [0x7d]:           loadval ecx   
126 [0x7e]:           test ecx, ebx   
127 [0x7f]:           jne 134   
128 [0x80]: line: 128 pushl 3   
129 [0x81]:           istore 15   
131 [0x83]:           call @3196 // <ui.support#image_view.set_drawable>   
132 [0x84]:           pop   
133 [0x85]:           jmp @175   
134 [0x86]:           movl 4   
135 [0x87]:           movn #0   
137 [0x89]:           movi #0, adx   
139 [0x8b]:           iaload ebx, adx   
140 [0x8c]:           rstore ebx   
141 [0x8d]:           movi #3, ebx   
143 [0x8f]:           loadval ecx   
144 [0x90]:           test ecx, ebx   
145 [0x91]:           jne 152   
146 [0x92]: line: 131 pushl 3   
147 [0x93]:           istore 16   
149 [0x95]:           call @3196 // <ui.support#image_view.set_drawable>   
150 [0x96]:           pop   
151 [0x97]:           jmp @175   
152 [0x98]:           movl 4   
153 [0x99]:           movn #0   
155 [0x9b]:           movi #0, adx   
157 [0x9d]:           iaload ebx, adx   
158 [0x9e]:           rstore ebx   
159 [0x9f]:           movi #4, ebx   
161 [0xa1]:           loadval ecx   
162 [0xa2]:           test ecx, ebx   
163 [0xa3]:           jne 170   
164 [0xa4]: line: 134 pushl 3   
165 [0xa5]:           istore 17   
167 [0xa7]:           call @3196 // <ui.support#image_view.set_drawable>   
168 [0xa8]:           pop   
169 [0xa9]:           jmp @175   
170 [0xaa]: line: 137 pushl 3   
171 [0xab]:           istore 13   
173 [0xad]:           call @3196 // <ui.support#image_view.set_drawable>   
174 [0xae]:           pop   
175 [0xaf]:           nop   
176 [0xb0]:           nop   
177 [0xb1]:           nop   
178 [0xb2]:           ret   


lambda: ui.layout#__srt_global.anon_func$3540[3540] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//layout//home_screen.sharp:148:15: note:  
		            = { args : object[] ->
		              ^

0 [0x0]: line: 149 pushl 0   
1 [0x1]:           movi #1, ebx   
3 [0x3]:           popobj2    
4 [0x4]:           movr adx, ebx   
5 [0x5]:           chklen adx   
6 [0x6]:           movnd adx   
7 [0x7]:           movi #123, cmt   
9 [0x9]:           cast cmt   
10 [0xa]:           smovr_3 fp+1   
11 [0xb]: line: 150 movg @101 // @main#__srt_global   
12 [0xc]:           movn #1   
14 [0xe]:           movi #0, adx   
16 [0x10]:           iaload ebx, adx   
17 [0x11]:           rstore ebx   
18 [0x12]:           movi #0, ebx   
20 [0x14]:           loadval ecx   
21 [0x15]:           test ecx, ebx   
22 [0x16]:           jne 29   
23 [0x17]: line: 152 pushl 1   
24 [0x18]:           istore 5   
26 [0x1a]:           call @3196 // <ui.support#image_view.set_drawable>   
27 [0x1b]:           pop   
28 [0x1c]:           jmp @106   
29 [0x1d]:           movg @101 // @main#__srt_global   
30 [0x1e]:           movn #1   
32 [0x20]:           movi #0, adx   
34 [0x22]:           iaload ebx, adx   
35 [0x23]:           rstore ebx   
36 [0x24]:           movi #1, ebx   
38 [0x26]:           loadval ecx   
39 [0x27]:           test ecx, ebx   
40 [0x28]:           jne 47   
41 [0x29]: line: 155 pushl 1   
42 [0x2a]:           istore 6   
44 [0x2c]:           call @3196 // <ui.support#image_view.set_drawable>   
45 [0x2d]:           pop   
46 [0x2e]:           jmp @106   
47 [0x2f]:           movg @101 // @main#__srt_global   
48 [0x30]:           movn #1   
50 [0x32]:           movi #0, adx   
52 [0x34]:           iaload ebx, adx   
53 [0x35]:           rstore ebx   
54 [0x36]:           movi #2, ebx   
56 [0x38]:           loadval ecx   
57 [0x39]:           test ecx, ebx   
58 [0x3a]:           jne 65   
59 [0x3b]: line: 158 pushl 1   
60 [0x3c]:           istore 7   
62 [0x3e]:           call @3196 // <ui.support#image_view.set_drawable>   
63 [0x3f]:           pop   
64 [0x40]:           jmp @106   
65 [0x41]:           movg @101 // @main#__srt_global   
66 [0x42]:           movn #1   
68 [0x44]:           movi #0, adx   
70 [0x46]:           iaload ebx, adx   
71 [0x47]:           rstore ebx   
72 [0x48]:           movi #3, ebx   
74 [0x4a]:           loadval ecx   
75 [0x4b]:           test ecx, ebx   
76 [0x4c]:           jne 83   
77 [0x4d]: line: 161 pushl 1   
78 [0x4e]:           istore 8   
80 [0x50]:           call @3196 // <ui.support#image_view.set_drawable>   
81 [0x51]:           pop   
82 [0x52]:           jmp @106   
83 [0x53]:           movg @101 // @main#__srt_global   
84 [0x54]:           movn #1   
86 [0x56]:           movi #0, adx   
88 [0x58]:           iaload ebx, adx   
89 [0x59]:           rstore ebx   
90 [0x5a]:           movi #4, ebx   
92 [0x5c]:           loadval ecx   
93 [0x5d]:           test ecx, ebx   
94 [0x5e]:           jne 101   
95 [0x5f]: line: 164 pushl 1   
96 [0x60]:           istore 9   
98 [0x62]:           call @3196 // <ui.support#image_view.set_drawable>   
99 [0x63]:           pop   
100 [0x64]:           jmp @106   
101 [0x65]: line: 167 pushl 1   
102 [0x66]:           istore 9   
104 [0x68]:           call @3196 // <ui.support#image_view.set_drawable>   
105 [0x69]:           pop   
106 [0x6a]:           nop   
107 [0x6b]:           ret   


lambda: ui.layout#__srt_global.anon_func$3541[3541] params(1) in file: C:\Users\bnunnally\OneDrive\Documents\Clion\RaspiDrone\controller/ui//layout//home_screen.sharp:177:15: note:  
		            = { args : object[] ->
		              ^

0 [0x0]: line: 178 pushl 0   
1 [0x1]:           movi #1, ebx   
3 [0x3]:           popobj2    
4 [0x4]:           movr adx, ebx   
5 [0x5]:           chklen adx   
6 [0x6]:           movnd adx   
7 [0x7]:           movi #126, cmt   
9 [0x9]:           cast cmt   
10 [0xa]:           smovr_3 fp+1   
11 [0xb]: line: 179 movg @67 // @std#time_request   
12 [0xc]:           movn #2   
14 [0xe]:           pushobj   
15 [0xf]:           call @3040 // <std#time.get_os_time>   
16 [0x10]:           ipopl 2   
17 [0x11]: line: 180 movg @67 // @std#time_request   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           call @3040 // <std#time.get_os_time>   
22 [0x16]:           ipopl 3   
23 [0x17]: line: 182 newstr @151 // am   
24 [0x18]:           popobj2    
25 [0x19]:           smovr_3 fp+4   
26 [0x1a]: line: 192 new_class @64 // std#string   
27 [0x1b]:           dup    
28 [0x1c]:           newstr @22 //    
29 [0x1d]:           call @2935 // <std#string.string>   
30 [0x1e]:           ipushl #2   
31 [0x1f]:           call @2967 // <std#string.operator+>   
32 [0x20]:           newstr @152 // :   
33 [0x21]:           call @2947 // <std#string.operator+>   
34 [0x22]:           popobj2    
35 [0x23]:           smovr_3 fp+5   
36 [0x24]: line: 194 loadl ecx, fp+3   
37 [0x25]:           movi #10, ebx   
39 [0x27]:           lt ecx, ebx   
40 [0x28]:           movr ebx, cmt   
41 [0x29]:           movr cmt, ebx   
42 [0x2a]:           jne 47   
43 [0x2b]: line: 195 pushl 5   
44 [0x2c]:           newstr @12 // 0   
45 [0x2d]:           call @2989 // <std#string.operator+=>   
46 [0x2e]:           pop   
47 [0x2f]:           nop   
48 [0x30]: line: 196 pushl 5   
49 [0x31]:           ipushl #3   
50 [0x32]:           call @2978 // <std#string.operator+=>   
51 [0x33]:           pop   
52 [0x34]: line: 197 pushl 5   
53 [0x35]:           pushl 4   
54 [0x36]:           call @2989 // <std#string.operator+=>   
55 [0x37]:           pop   
56 [0x38]: line: 198 pushl 1   
57 [0x39]:           pushl 5   
58 [0x3a]:           call @3471 // <ui.support#text_view.set_text>   
59 [0x3b]:           ret   


