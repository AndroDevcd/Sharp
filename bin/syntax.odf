## Object Dump file for bin/syntax:

pre codebase size: 105578
post codebase size: 95271
optimized opcodes: 10307
net % gain 9.76245


class: std#__srt_global[0] fields(2) methods(58)
class: std#_enum_[1] fields(2) methods(19)
class: std#throwable[2] fields(3) methods(15)
class: std#exception[3] fields(3) methods(18)
class: std#illegal_argument_exception[4] fields(3) methods(21)
class: std#illegal_state_exception[5] fields(3) methods(21)
class: std#out_of_bounds_exception[6] fields(3) methods(21)
class: std#io_exception[7] fields(3) methods(21)
class: std#invalid_operation_exception[8] fields(3) methods(21)
class: std#nullptr_exception[9] fields(3) methods(21)
class: std#runtime_exception[10] fields(3) methods(21)
class: std#stack_overflow_exception[11] fields(3) methods(21)
class: std#thread_stack_exception[12] fields(3) methods(21)
class: std#class_cast_exception[13] fields(3) methods(21)
class: std#out_of_memory_exception[14] fields(3) methods(21)
class: std#incompatible_class_exception[15] fields(3) methods(21)
class: std#object_import_error[16] fields(3) methods(24)
class: std#not_implemented_error[17] fields(3) methods(24)
class: std#unsatisfied_link_error[18] fields(3) methods(24)
class: std#assertion_error[19] fields(3) methods(24)
class: std#error[20] fields(3) methods(21)
class: std.export#__srt_global[21] fields(0) methods(5)
class: std.export#export_group[22] fields(2) methods(42)
class: std.io#__srt_global[23] fields(1) methods(45)
enum: std.io#buffer_type[24] fields(6) methods(19)
class: std.io.fiber#__srt_global[25] fields(4) methods(7)
class: std.io.fiber#fiber[26] fields(5) methods(25)
enum: std.io.fiber#fiber_state[27] fields(7) methods(19)
class: std.io#file[28] fields(3) methods(53)
class: std.io#file_system[29] fields(18) methods(30)
class: std.io.task#__srt_global[30] fields(9) methods(23)
class: std.io.task#cancellation_exception[31] fields(3) methods(24)
class: std.io.task#job[32] fields(21) methods(30)
class: std.io.task#job_builder[33] fields(2) methods(23)
class: std.io.task#job_master[34] fields(5) methods(17)
enum: std.io.task#job_state[35] fields(6) methods(19)
class: std.io.task#task[36] fields(0) methods(19)
class: std.io#thread[37] fields(15) methods(46)
class: std.io#thread_group[38] fields(5) methods(23)
enum: std.io#thread_priority[39] fields(5) methods(19)
enum: std.io#thread_result[40] fields(20) methods(22)
interface: std.io#uncaught_exception_handler[41] fields(0) methods(11)
class: std.io#unix_fs[42] fields(20) methods(35)
class: std.io#win_fs[43] fields(20) methods(35)
class: std.math#__srt_global[44] fields(5) methods(27)
class: std#_nil_[45] fields(1) methods(13)
class: std#_object_[46] fields(0) methods(9)
class: platform#__srt_global[47] fields(0) methods(4)
class: platform#build[48] fields(4) methods(12)
class: platform.kernel#__srt_global[49] fields(0) methods(1)
class: platform.kernel#platform[50] fields(4) methods(18)
class: platform.kernel#stack_state[51] fields(2) methods(10)
class: platform.kernel#vm[52] fields(0) methods(39)
class: std#ulong[53] fields(1) methods(320)
class: std#long[54] fields(1) methods(320)
class: std#uint[55] fields(1) methods(320)
class: std#int[56] fields(1) methods(320)
class: std#ushort[57] fields(1) methods(320)
class: std#short[58] fields(1) methods(320)
class: std#uchar[59] fields(1) methods(320)
class: std#char[60] fields(1) methods(326)
class: std#byte[61] fields(1) methods(428)
class: std#bool[62] fields(1) methods(322)
class: std#double[63] fields(1) methods(320)
interface: std#printable[64] fields(0) methods(11)
class: std#tmp[65] fields(0) methods(11)
class: std.reflect#__srt_global[66] fields(0) methods(1)
class: std.reflect#_class_[67] fields(6) methods(11)
class: std.reflect#data_entity[68] fields(6) methods(10)
enum: std.reflect#data_type[69] fields(19) methods(19)
enum: std.reflect#property_type[70] fields(5) methods(19)
class: std.reflect#data_property[71] fields(6) methods(11)
class: std.reflect#field[72] fields(2) methods(10)
class: std.reflect#function[73] fields(6) methods(11)
class: std.reflect#reflect[74] fields(4) methods(13)
class: std#string[75] fields(3) methods(69)
class: std#string_builder[76] fields(7) methods(55)
class: std#time[77] fields(1) methods(23)
enum: std#time_request[78] fields(11) methods(19)
enum: std#time_unit[79] fields(6) methods(19)
interface: std#unique[80] fields(0) methods(12)
class: main.frontend#__srt_global[81] fields(0) methods(1)
class: main.frontend#error_manager[82] fields(15) methods(33)
class: main.frontend#parse_error[83] fields(5) methods(13)
enum: main.frontend#compiler_error[84] fields(31) methods(19)
class: main.frontend.parser#__srt_global[85] fields(0) methods(1)
class: main.frontend.parser#ast[86] fields(6) methods(33)
enum: main.frontend.parser#ast_type[87] fields(90) methods(19)
class: main.frontend.parser#Parser[88] fields(12) methods(14)
class: main.frontend.tokenizer#__srt_global[89] fields(0) methods(1)
class: main.frontend.tokenizer#token[90] fields(5) methods(25)
enum: main.frontend.tokenizer#token_id[91] fields(17) methods(19)
class: main.frontend.tokenizer#tokenizer[92] fields(14) methods(37)
enum: main.frontend.tokenizer#token_type[93] fields(57) methods(19)
class: main#__srt_global[94] fields(10) methods(17)
class: main#options[95] fields(24) methods(11)
enum: main#optimization_level[96] fields(5) methods(19)
enum: main#compilation_mode[97] fields(4) methods(19)
class: main#platform[98] fields(1) methods(10)
std#loopable<std.io#thread>[99] fields(0) methods(11)
generic: std#integer<_uint64>[100] fields(1) methods(218)
generic: std#integer<_int64>[101] fields(1) methods(218)
generic: std#integer<_uint32>[102] fields(1) methods(218)
generic: std#integer<_int32>[103] fields(1) methods(218)
generic: std#integer<_uint16>[104] fields(1) methods(218)
generic: std#integer<_int16>[105] fields(1) methods(218)
generic: std#integer<_uint8>[106] fields(1) methods(218)
generic: std#integer<_int8>[107] fields(1) methods(218)
generic: std#integer<var>[108] fields(1) methods(218)
std#loopable<_int8>[109] fields(0) methods(11)
generic: std#list<std#string>[110] fields(5) methods(39)
std#loopable<std#string>[111] fields(0) methods(11)
generic: std#list<main.frontend#parse_error>[112] fields(5) methods(39)
std#loopable<main.frontend#parse_error>[113] fields(0) methods(11)
generic: std#synced_list<std.io#thread>[114] fields(5) methods(37)
generic: std#list<std.io#thread>[115] fields(5) methods(39)
generic: std#list<object>[116] fields(5) methods(39)
std#loopable<object>[117] fields(0) methods(11)
generic: std#synced_list<std.io.task#job>[118] fields(5) methods(37)
std#loopable<std.io.task#job>[119] fields(0) methods(11)
generic: std#list<std.io.task#job>[120] fields(5) methods(39)
generic: std#hashmap<main.frontend#compiler_error,std#string>[121] fields(5) methods(17)
generic: std#list<std#list<main.frontend#parse_error>>[122] fields(5) methods(39)
std#loopable<std#list<main.frontend#parse_error>>[123] fields(0) methods(11)
generic: std#list<main.frontend.tokenizer#token>[124] fields(5) methods(39)
std#loopable<main.frontend.tokenizer#token>[125] fields(0) methods(11)
generic: std#list<main.frontend.parser#ast>[126] fields(5) methods(39)
std#loopable<main.frontend.parser#ast>[127] fields(0) methods(11)
generic: main.frontend#entry<main.frontend#compiler_error,std#string>[128] fields(3) methods(12)


 strings: 

[0]: job#
[1]: nil
[2]: main
[3]: mod
[4]: true
[5]: false
[6]: class
[7]: static
[8]: protected
[9]: pro
[10]: private
[11]: def
[12]: import
[13]: return
[14]: self
[15]: const
[16]: public
[17]: new
[18]: null
[19]: operator
[20]: base
[21]: if
[22]: while
[23]: do
[24]: try
[25]: catch
[26]: finally
[27]: throw
[28]: continue
[29]: goto
[30]: break
[31]: else
[32]: object
[33]: asm
[34]: for
[35]: foreach
[36]: var
[37]: sizeof
[38]: _int8
[39]: _int16
[40]: _int32
[41]: _int64
[42]: _uint8
[43]: _uint16
[44]: _uint32
[45]: _uint64
[46]: delegate
[47]: interface
[48]: lock
[49]: enum
[50]: switch
[51]: default
[52]: volatile
[53]: fn
[54]: anonymous_group
[55]: 
[56]: sharpc
[57]: 0.3.0
[58]: out
[59]: mapping.txt
[60]: generated
[61]: 1.0
[62]: assertion failed!
[63]: there is no data left in the exported group
[64]: fiber
[65]: file path cannot be null
[66]: file path cannot be empty
[67]: Negative time
[68]: file could not be resolved: 
[69]: could not retrieve current directory
[70]: cannot set update restart interval on non-recurring job
[71]: cannot set a timeout on a job that's blocking the calling thread
[72]: cannot set a job recurring that's blocking the calling thread
[73]: cannot block calling thread on job that has a timeout
[74]: cannot block calling thread on a recurring job
[75]: recurring jobs cannot be deferred tasks
[76]: Long term jobs
[77]: Short term jobs
[78]: task_scheduler
[79]: cannot modify max thread count after task library has started, 
[80]: try calling this before your first task
[81]: cannot modify max thread count after task library has started, try calling this before your first ta
[82]: cannot have less than 2 max threads
[83]: long_term_worker_thread#
[84]: worker_thread#
[85]: invalid thread priority 
[86]: win
[87]: posix
[88]: .dll
[89]: .so
[90]: length cannot be less than zero
[91]: length of: 
[92]:  is greater than the string: 
[93]: invalid precision: 
[94]: end_pos: 
[95]:  cannot be less than the start_pos: 
[96]: Index out of bounds exception at: 
[97]:  with size of: 
[98]: objref
[99]: endPos: 
[100]:  cannot be less than the startPos: 
[101]: cannot sleep for negative time: 
[102]: :
[103]: : warning S60
[104]: :  
[105]: 

[106]: : error S60
[107]: 	
[108]: 
	
[109]:  
[110]: ^

[111]: End of File
[112]: unexpected symbol
[113]: illegal number format mismatch
[114]: unexpected end of file
[115]: expected string literal before end of file
[116]: illegal string format
[117]: expected character literal before end of file
[118]: illegal character literal format
[119]: illegal specification of access specifier(s)
[120]: illegal symbol mismatch, unexpected bracket
[121]: missing bracket
[122]: invalid access specifier
[123]: multiple definition of
[124]: duplicate class:
[125]: redundant token
[126]: internal runtime error
[127]: could not resolve symbol
[128]: invalid cAst of type
[129]: redundant cAst of type
[130]: redundant self import of module
[131]: unexpected token
[132]: invalid access of
[133]: invalid param of type
[134]: incompatible types
[135]: ast: 
[136]:  ;
[137]: ,
[138]: tokens:

[139]: null

[140]: children: (
[141]: )

[142]: tree.txt
[143]: : 
[144]: )
[145]: +
[146]:  `
[147]: `
[148]: errors 
[149]: tokens 
[150]: eof
[151]: , a character literal cannot contain more than a single character; expected `'`
[152]: , text preceding `\` must be alpha, '"', or '\'' only
[153]: , character literals cannot be empty
[154]:  expected at least 1 letter in identifier
[155]: , unexpected or illegally placed underscore
[156]: , double decimal
[157]: , missing exponent prefix
[158]: , expected `+`, `-`, or digit
[159]: , duplicate exponent sign postfix
[160]: , expected `"` before end of line
[161]: (
[162]: , text preceding `$` must be alpha numeric, or '_' only
[163]: $
[164]: , text preceding `\` must be alpha, '\', '\'', or '"' only
[165]: -a
[166]: -c
[167]: -o
[168]: output file required after option `-o`
[169]: -L
[170]: library directory required after option `-L`
[171]: library path: library_dir dosen't exist!
[172]: library path: library_dir is not a directory
[173]: -V
[174]: -O
[175]: -O1
[176]: -O2
[177]: --h
[178]: -?
[179]: --hw
[180]: -R
[181]: -release
[182]: -s
[183]: -magic
[184]: -dbg
[185]: -showvers
[186]: -showversion
[187]: -target
[188]: file version required after option `
[189]: alpha
[190]: unknown platform target 
[191]: -w
[192]: -waccess
[193]: -wambig
[194]: -wdecl
[195]: -wmain
[196]: -wcast
[197]: -winit
[198]: -p
[199]: -run
[200]: -g
[201]: -green
[202]: --new-project
[203]: project directory required after option `
[204]: -v
[205]: file version required after option `-v`
[206]: -ignore
[207]: file path required after option `
[208]: ignored file: 
[209]:  dosen't exist!
[210]:  is a directory, try `-ignoredir` instead
[211]: -ignoredir
[212]: directory path required after option `
[213]: ignored directory: 
[214]:  is a file, try `-ignore` instead
[215]: -P
[216]: project path required after option `
[217]: project directory: 
[218]:  was found to be a file
[219]: -werror
[220]: -errlmt
[221]: cannot set the max errors allowed higher than (100,000) - 
[222]: cannot have an error limit of 0 
[223]: invalid error limit set 
[224]: invalid option `
[225]: `, try 
[226]:  --h
[227]: C:\Program Files\Sharp\include
[228]: /usr/include/sharp/
[229]: .sharp
[230]: warning: could not find support library files in path `
[231]: `, do you have them installed?
[232]: could not access library files in path `
[233]: could not access project directory files in: 
[234]: no_file
[235]: file `
[236]: ` doesnt exist!
[237]: ` is not a sharp file!
[238]: no files were found to be compiled, have you excluded your project directory by chance?
[239]: could not create project, a 
[240]: directory
[241]: file
[242]: could not create project, a directory
[243]:  with the name 
[244]: could not create project, a directory with the name 
[245]:  already exists!
[246]: failed to create project directory: 
[247]: /src/
[248]: /src/main/
[249]: /build/
[250]: /build/cache/
[251]: /build/outputs/
[252]: /build/cache/files/
[253]: failed to create all necessary directories for project: 
[254]: /src/main/main.sharp
[255]: /settings.json
[256]: C:\Program Files\Sharp\proj-template\main.sharp
[257]: C:\Program Files\Sharp\proj-template\settings.json
[258]: /usr/include/sharp/proj-template/main.sharp
[259]: /usr/include/sharp/settings.json
[260]: mod main;

def main() {
  println("hello, world!");
}

[261]: failed to create the main file for project: 
[262]: {
  name: "
[263]: ",
  version: "1.0",
  output: "
[264]: ",

[265]: ignore_folders: [
     "build"
  ]
}

[266]: . Error: 
[267]: Project: "
[268]: " successfully created!
[269]: invalid platform target `
[270]: :  error: 
[271]: Usage: sharpc 
[272]: {OPTIONS} SOURCE FILE(S)
[273]: Usage: sharpc {OPTIONS} SOURCE FILE(S)
[274]: Source file must have a .sharp extension to be compiled.

[275]: [-options]

    -V                print compiler version and exit
[276]:     -showvers         print compiler version and continue
[277]:     -o<file>          set the output object file
[278]:     -c                compile only and do not generate exe
[279]:     -a                enable aggressive error reporting
[280]:     -s                strip debugging info
[281]:     -O -O1            optimize code level 1
[282]:     -O2               optimize code level 2
[283]:     -L<path>          library directory path
[284]:     -w                disable all warnings
[285]:     -run              run compiled source after successful compilation
[286]:     -g -green         run compiler in "green" mode to consume less power
[287]:     -ignoredir<dir>   include a directory to ignore (only works in project mode)
[288]:     -ignore<file>     include a file to ignore
[289]:     -p                enable project mode compilation
[290]:     -P<path>          enable project mode compilation on a specific path
[291]:     --new-project<name> create a new sharp project
[292]:     -errlmt<count>    set max errors the compiler allows before quitting
[293]:     -v<version>       set the application version
[294]:     -target           target the specified platform of sharp to run on
[295]:     -release -r       generate a release build exe
[296]:     --hw               display help message for warning options
[297]:     --h -?             display this help message
[298]: Source file must have a .sharp extion to be compiled.

[299]: Please note that not all warnings will be able to be disabled individually.

[300]: [-options]

    -w                disable all warnings
[301]:     -winit            disable class initialization warnings
[302]:     -waccess          disable access modifier warnings (public, static, etc.)
[303]:     -wambig           disable ambiguous symbol warnings
[304]:     -wdecl            disable object declaration warnings
[305]:     -wmain            disable multiple main method warnings
[306]:     -wcast            disable type cast warnings
[307]:     -werror           enable warnings as errors
[308]:     --hw               display this help message
[309]: EXCLUSIVE
[310]: SINGLE
[311]: UNLIMITED
[312]: BUFFERED
[313]: FIB_CREATED
[314]: FIB_RUNNING
[315]: FIB_SUSPENDED
[316]: FIB_KILLED
[317]: FIB_INVALID
[318]: created
[319]: active
[320]: completed
[321]: cancelled
[322]: min_priority
[323]: norm_priority
[324]: max_priority
[325]: result_ok
[326]: result_ill_thread_start
[327]: result_thread_running
[328]: result_thread_terminated
[329]: result_invalid_stack_size
[330]: result_thread_not_started
[331]: result_ill_thread_join
[332]: result_thread_join_failed
[333]: result_ill_thread_interrupt
[334]: result_thread_interrupt_failed
[335]: result_ill_thread_destroy
[336]: result_thread_create_failed
[337]: result_no_thread_id
[338]: result_thread_destroy_failed
[339]: result_ill_priority_set
[340]: result_ill_thread_suspend
[341]: result_max_spin
[342]: enums
[343]: int8
[344]: int16
[345]: int32
[346]: int64
[347]: uint8
[348]: uint16
[349]: uint32
[350]: uint64
[351]: fnptr
[352]: _var
[353]: _object
[354]: _class
[355]: method
[356]: _nil
[357]: any
[358]: untyped
[359]: undefined
[360]: class_property
[361]: field_property
[362]: function_property
[363]: tm_seconds
[364]: tm_minutes
[365]: tm_hour
[366]: tm_mday
[367]: tm_mon
[368]: tm_year
[369]: tm_wday
[370]: tm_yday
[371]: tm_isdst
[372]: seconds
[373]: milliseconds
[374]: microseconds
[375]: nanoseconds
[376]: unexpected_symbol
[377]: illegal_number_format
[378]: unexpected_eof
[379]: expected_string_literal_eof
[380]: illegal_string_format
[381]: expected_char_literal_eof
[382]: illegal_char_literal_format
[383]: generic
[384]: illegal_access_declaration
[385]: illegal_bracket_mismatch
[386]: missing_bracket
[387]: invalid_access_specifier
[388]: multiple_definition
[389]: previously_defined
[390]: duplicate_class
[391]: redundant_token
[392]: internal_error
[393]: could_not_resolve
[394]: expected_reference_of_type
[395]: invalid_cast
[396]: redundant_cast
[397]: redundant_import
[398]: unexpected_token
[399]: invalid_access
[400]: symbol_already_defined
[401]: invalid_param
[402]: incompatible_types
[403]: duplicate_declaration
[404]: no_err
[405]: class_decl
[406]: generic_class_decl
[407]: generic_interface_decl
[408]: interface_decl
[409]: import_decl
[410]: module_decl
[411]: method_decl
[412]: enum_decl
[413]: delegate_post_decl
[414]: delegate_decl
[415]: constructor_decl
[416]: label_decl
[417]: operator_decl
[418]: var_decl
[419]: switch_declarator
[420]: value
[421]: value_list
[422]: utype_arg_list
[423]: utype_arg_list_opt
[424]: reference_identifier_list
[425]: utype_list
[426]: identifier_list
[427]: enum_identifier_list
[428]: vector_array
[429]: utype_arg
[430]: utype_arg_opt
[431]: expression
[432]: array_expression
[433]: primary_expression
[434]: dotnotation_call_expr
[435]: utype
[436]: block
[437]: switch_block
[438]: finally_block
[439]: assembly_block
[440]: catch_clause
[441]: method_return_type
[442]: return_stmnt
[443]: statement
[444]: if_statement
[445]: switch_statement
[446]: elseif_statement
[447]: else_statement
[448]: lock_statement
[449]: trycatch_statement
[450]: throw_statement
[451]: continue_statement
[452]: break_statement
[453]: goto_statement
[454]: while_statement
[455]: do_while_statement
[456]: assembly_statement
[457]: for_statement
[458]: for_expression_cond
[459]: for_expression_iter
[460]: foreach_statement
[461]: type_identifier
[462]: enum_identifier
[463]: func_prototype
[464]: reference_pointer
[465]: modulename
[466]: literal
[467]: literal_e
[468]: utype_class_e
[469]: dot_not_e
[470]: self_e
[471]: base_e
[472]: null_e
[473]: new_e
[474]: not_e
[475]: post_inc_e
[476]: arry_e
[477]: dot_fn_e
[478]: cast_e
[479]: pre_inc_e
[480]: paren_e
[481]: vect_e
[482]: add_e
[483]: mult_e
[484]: shift_e
[485]: less_e
[486]: equal_e
[487]: and_e
[488]: ques_e
[489]: assign_e
[490]: sizeof_e
[491]: free_e
[492]: none
[493]: identifier
[494]: native_type
[495]: integer_literal
[496]: hex_literal
[497]: string_literal
[498]: char_literal
[499]: accesstype
[500]: singleline_comment
[501]: return_statement
[502]: single
[503]: noentity
[504]: number
[505]: letter
[506]: underscore
[507]: left_paren
[508]: right_paren
[509]: left_curly
[510]: right_curly
[511]: hash
[512]: dot
[513]: plus
[514]: minus
[515]: mult
[516]: exponent
[517]: div
[518]: _mod
[519]: colon
[520]: semicolon
[521]: dub_quote
[522]: sing_quote
[523]: comma
[524]: newline
[525]: lte
[526]: gte
[527]: eqeq
[528]: pluseq
[529]: minuseq
[530]: multeq
[531]: diveq
[532]: andeq
[533]: oreq
[534]: xoreq
[535]: modeq
[536]: noteq
[537]: shl
[538]: shr
[539]: lessthan
[540]: greaterthan
[541]: and
[542]: andand
[543]: or
[544]: oror
[545]: xor
[546]: not
[547]: equals
[548]: infer
[549]: left_brace
[550]: right_brace
[551]: quesmk
[552]: ptr
[553]: inc
[554]: dec
[555]: dollar
[556]: at
[557]: basic
[558]: high_performance
[559]: file_mode
[560]: project_mode
[561]: illegal char in string: 
[562]: [ 
[563]: , 
[564]:  ]
[565]: Index: 
[566]: , size: 
[567]: key 
[568]:  value 

 constants: 

[0]: 2.7182818284590451e+00
[1]: 3.1415926535897931e+00
[2]: 1.0000000000000000e+00
[3]: 0.0000000000000000e+00
[4]: inf
[5]: nan
[6]: nan
[7]: 7.5000000000000000e-01
[8]: 2.5000000000000000e-01
[9]: 5.0000000000000000e-01
[10]: 1.0000000000000000e+09

 methods: 
constructor: std#__srt_global.__srt_global[0] params(0) in file: lib\support\/0.2.9//console.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: std.export#__srt_global.__srt_global[1] params(0) in file: lib\support\/0.2.9//export//export_group.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: std.io#__srt_global.__srt_global[2] params(0) in file: lib\support\/0.2.9//io//atomic.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: std.io.fiber#__srt_global.__srt_global[3] params(0) in file: lib\support\/0.2.9//io//fiber//fiber.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: std.io.task#__srt_global.__srt_global[4] params(0) in file: lib\support\/0.2.9//io//task//cancellation_exception.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: std.math#__srt_global.__srt_global[5] params(0) in file: lib\support\/0.2.9//math//math.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: platform#__srt_global.__srt_global[6] params(0) in file: lib\support\/0.2.9//platform//build.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: platform.kernel#__srt_global.__srt_global[7] params(0) in file: lib\support\/0.2.9//platform//kernel//platform.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: std.reflect#__srt_global.__srt_global[8] params(0) in file: lib\support\/0.2.9//reflect//class.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: main.frontend#__srt_global.__srt_global[9] params(0) in file: lib\support\/bootstrap//frontend//error_manager.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: main.frontend.parser#__srt_global.__srt_global[10] params(0) in file: lib\support\/bootstrap//frontend//parser//ast.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: main.frontend.tokenizer#__srt_global.__srt_global[11] params(0) in file: lib\support\/bootstrap//frontend//tokenizer//token.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


constructor: main#__srt_global.__srt_global[12] params(0) in file: lib\support\/bootstrap//main.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         ret   


std#loopable<std.io#thread>.get_elements[13] params(0) in file: lib\support\/0.2.9//loopable.sharp:4:8: note:  
		    def get_elements() : t[];
		       ^



constructor: std#loopable<std.io#thread>.loopable[14] params(0) in file: lib\support\/0.2.9//loopable.sharp:3:10: note:  
		interface loopable<t> {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#integer<_uint64>.integer[15] params(1) in file: lib\support\/0.2.9//primitives.sharp:8:12: note:  
		    integer(initial_val : var) {
		           ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 9 ipushl #1   
2 [0x2]:         movl 0   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         movu64 ebx, ebx   
7 [0x7]:         movi #0, adx   
9 [0x9]:         rmov adx, ebx   
10 [0xa]:         ret   


function: std#integer<_uint64>.hash[16] params(0) in file: lib\support\/0.2.9//primitives.sharp:12:8: note:  
		    def hash() : _int64 {
		       ^

0 [0x0]: line: 13 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          return_val ebx   
7 [0x7]:          ret   


overload function: std#integer<_uint64>.operator!=[17] params(1) in file: lib\support\/0.2.9//primitives.sharp:16:8: note:  
		    def operator!=(num : ulong) := (value!=num.value);
		       ^

0 [0x0]: line: 16 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator==[18] params(1) in file: lib\support\/0.2.9//primitives.sharp:17:8: note:  
		    def operator==(num : ulong) := (value==num.value);
		       ^

0 [0x0]: line: 17 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator!=[19] params(1) in file: lib\support\/0.2.9//primitives.sharp:18:8: note:  
		    def operator!=(num : long) := (value!=num.value);
		       ^

0 [0x0]: line: 18 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator==[20] params(1) in file: lib\support\/0.2.9//primitives.sharp:19:8: note:  
		    def operator==(num : long) := (value==num.value);
		       ^

0 [0x0]: line: 19 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator!=[21] params(1) in file: lib\support\/0.2.9//primitives.sharp:20:8: note:  
		    def operator!=(num : uint) := (value!=num.value);
		       ^

0 [0x0]: line: 20 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator==[22] params(1) in file: lib\support\/0.2.9//primitives.sharp:21:8: note:  
		    def operator==(num : uint) := (value==num.value);
		       ^

0 [0x0]: line: 21 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator!=[23] params(1) in file: lib\support\/0.2.9//primitives.sharp:22:8: note:  
		    def operator!=(num : int) := (value!=num.value);
		       ^

0 [0x0]: line: 22 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator==[24] params(1) in file: lib\support\/0.2.9//primitives.sharp:23:8: note:  
		    def operator==(num : int) := (value==num.value);
		       ^

0 [0x0]: line: 23 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator!=[25] params(1) in file: lib\support\/0.2.9//primitives.sharp:24:8: note:  
		    def operator!=(num : ushort) := (value!=num.value);
		       ^

0 [0x0]: line: 24 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator==[26] params(1) in file: lib\support\/0.2.9//primitives.sharp:25:8: note:  
		    def operator==(num : ushort) := (value==num.value);
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator!=[27] params(1) in file: lib\support\/0.2.9//primitives.sharp:26:8: note:  
		    def operator!=(num : short) := (value!=num.value);
		       ^

0 [0x0]: line: 26 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator==[28] params(1) in file: lib\support\/0.2.9//primitives.sharp:27:8: note:  
		    def operator==(num : short) := (value==num.value);
		       ^

0 [0x0]: line: 27 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator!=[29] params(1) in file: lib\support\/0.2.9//primitives.sharp:28:8: note:  
		    def operator!=(num : uchar) := (value!=num.value);
		       ^

0 [0x0]: line: 28 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator==[30] params(1) in file: lib\support\/0.2.9//primitives.sharp:29:8: note:  
		    def operator==(num : uchar) := (value==num.value);
		       ^

0 [0x0]: line: 29 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator!=[31] params(1) in file: lib\support\/0.2.9//primitives.sharp:30:8: note:  
		    def operator!=(num : char) := (value!=num.value);
		       ^

0 [0x0]: line: 30 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator==[32] params(1) in file: lib\support\/0.2.9//primitives.sharp:31:8: note:  
		    def operator==(num : char) := (value==num.value);
		       ^

0 [0x0]: line: 31 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator!=[33] params(1) in file: lib\support\/0.2.9//primitives.sharp:32:8: note:  
		    def operator!=(num : byte) := (value!=num.value);
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator==[34] params(1) in file: lib\support\/0.2.9//primitives.sharp:33:8: note:  
		    def operator==(num : byte) := (value==num.value);
		       ^

0 [0x0]: line: 33 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator!=[35] params(1) in file: lib\support\/0.2.9//primitives.sharp:34:8: note:  
		    def operator!=(num : bool) := (value!=num.value);
		       ^

0 [0x0]: line: 34 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator==[36] params(1) in file: lib\support\/0.2.9//primitives.sharp:35:8: note:  
		    def operator==(num : bool) := (value==num.value);
		       ^

0 [0x0]: line: 35 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator==[37] params(1) in file: lib\support\/0.2.9//primitives.sharp:36:8: note:  
		    def operator==(num : double) := (value==num.value);
		       ^

0 [0x0]: line: 36 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator+[38] params(1) in file: lib\support\/0.2.9//primitives.sharp:38:8: note:  
		    def operator+(num : ulong)  := (value+num.value);
		       ^

0 [0x0]: line: 38 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator+[39] params(1) in file: lib\support\/0.2.9//primitives.sharp:39:8: note:  
		    def operator+(num : long)   := (value+num.value);
		       ^

0 [0x0]: line: 39 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator+[40] params(1) in file: lib\support\/0.2.9//primitives.sharp:40:8: note:  
		    def operator+(num : uint)   := (value+num.value);
		       ^

0 [0x0]: line: 40 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator+[41] params(1) in file: lib\support\/0.2.9//primitives.sharp:41:8: note:  
		    def operator+(num : int)    := (value+num.value);
		       ^

0 [0x0]: line: 41 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator+[42] params(1) in file: lib\support\/0.2.9//primitives.sharp:42:8: note:  
		    def operator+(num : ushort) := (value+num.value);
		       ^

0 [0x0]: line: 42 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator+[43] params(1) in file: lib\support\/0.2.9//primitives.sharp:43:8: note:  
		    def operator+(num : short)  := (value+num.value);
		       ^

0 [0x0]: line: 43 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator+[44] params(1) in file: lib\support\/0.2.9//primitives.sharp:44:8: note:  
		    def operator+(num : uchar)  := (value+num.value);
		       ^

0 [0x0]: line: 44 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator+[45] params(1) in file: lib\support\/0.2.9//primitives.sharp:45:8: note:  
		    def operator+(num : char)   := (value+num.value);
		       ^

0 [0x0]: line: 45 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator+[46] params(1) in file: lib\support\/0.2.9//primitives.sharp:46:8: note:  
		    def operator+(num : byte)   := (value+num.value);
		       ^

0 [0x0]: line: 46 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator+[47] params(1) in file: lib\support\/0.2.9//primitives.sharp:47:8: note:  
		    def operator+(num : bool)   := (value+num.value);
		       ^

0 [0x0]: line: 47 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator+[48] params(1) in file: lib\support\/0.2.9//primitives.sharp:48:8: note:  
		    def operator+(num : double)   := (value+num.value);
		       ^

0 [0x0]: line: 48 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator+[49] params(1) in file: lib\support\/0.2.9//primitives.sharp:49:8: note:  
		    def operator+(num : var)    := (value+num);
		       ^

0 [0x0]: line: 49 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          add ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint64>.operator-[50] params(1) in file: lib\support\/0.2.9//primitives.sharp:51:8: note:  
		    def operator-(num : ulong)  := (value-num.value);
		       ^

0 [0x0]: line: 51 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator-[51] params(1) in file: lib\support\/0.2.9//primitives.sharp:52:8: note:  
		    def operator-(num : long)   := (value-num.value);
		       ^

0 [0x0]: line: 52 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator-[52] params(1) in file: lib\support\/0.2.9//primitives.sharp:53:8: note:  
		    def operator-(num : uint)   := (value-num.value);
		       ^

0 [0x0]: line: 53 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator-[53] params(1) in file: lib\support\/0.2.9//primitives.sharp:54:8: note:  
		    def operator-(num : int)    := (value-num.value);
		       ^

0 [0x0]: line: 54 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator-[54] params(1) in file: lib\support\/0.2.9//primitives.sharp:55:8: note:  
		    def operator-(num : ushort) := (value-num.value);
		       ^

0 [0x0]: line: 55 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator-[55] params(1) in file: lib\support\/0.2.9//primitives.sharp:56:8: note:  
		    def operator-(num : short)  := (value-num.value);
		       ^

0 [0x0]: line: 56 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator-[56] params(1) in file: lib\support\/0.2.9//primitives.sharp:57:8: note:  
		    def operator-(num : uchar)  := (value-num.value);
		       ^

0 [0x0]: line: 57 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator-[57] params(1) in file: lib\support\/0.2.9//primitives.sharp:58:8: note:  
		    def operator-(num : char)   := (value-num.value);
		       ^

0 [0x0]: line: 58 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator-[58] params(1) in file: lib\support\/0.2.9//primitives.sharp:59:8: note:  
		    def operator-(num : byte)   := (value-num.value);
		       ^

0 [0x0]: line: 59 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator-[59] params(1) in file: lib\support\/0.2.9//primitives.sharp:60:8: note:  
		    def operator-(num : bool)   := (value-num.value);
		       ^

0 [0x0]: line: 60 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator-[60] params(1) in file: lib\support\/0.2.9//primitives.sharp:61:8: note:  
		    def operator-(num : double)   := (value-num.value);
		       ^

0 [0x0]: line: 61 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator-[61] params(1) in file: lib\support\/0.2.9//primitives.sharp:62:8: note:  
		    def operator-(num : var)    := (value-num);
		       ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          sub ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint64>.operator*[62] params(1) in file: lib\support\/0.2.9//primitives.sharp:64:8: note:  
		    def operator*(num : ulong)  := (value*num.value);
		       ^

0 [0x0]: line: 64 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator*[63] params(1) in file: lib\support\/0.2.9//primitives.sharp:65:8: note:  
		    def operator*(num : long)   := (value*num.value);
		       ^

0 [0x0]: line: 65 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator*[64] params(1) in file: lib\support\/0.2.9//primitives.sharp:66:8: note:  
		    def operator*(num : uint)   := (value*num.value);
		       ^

0 [0x0]: line: 66 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator*[65] params(1) in file: lib\support\/0.2.9//primitives.sharp:67:8: note:  
		    def operator*(num : int)    := (value*num.value);
		       ^

0 [0x0]: line: 67 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator*[66] params(1) in file: lib\support\/0.2.9//primitives.sharp:68:8: note:  
		    def operator*(num : ushort) := (value*num.value);
		       ^

0 [0x0]: line: 68 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator*[67] params(1) in file: lib\support\/0.2.9//primitives.sharp:69:8: note:  
		    def operator*(num : short)  := (value*num.value);
		       ^

0 [0x0]: line: 69 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator*[68] params(1) in file: lib\support\/0.2.9//primitives.sharp:70:8: note:  
		    def operator*(num : uchar)  := (value*num.value);
		       ^

0 [0x0]: line: 70 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator*[69] params(1) in file: lib\support\/0.2.9//primitives.sharp:71:8: note:  
		    def operator*(num : char)   := (value*num.value);
		       ^

0 [0x0]: line: 71 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator*[70] params(1) in file: lib\support\/0.2.9//primitives.sharp:72:8: note:  
		    def operator*(num : byte)   := (value*num.value);
		       ^

0 [0x0]: line: 72 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator*[71] params(1) in file: lib\support\/0.2.9//primitives.sharp:73:8: note:  
		    def operator*(num : bool)   := (value*num.value);
		       ^

0 [0x0]: line: 73 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator*[72] params(1) in file: lib\support\/0.2.9//primitives.sharp:74:8: note:  
		    def operator*(num : double)   := (value*num.value);
		       ^

0 [0x0]: line: 74 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator*[73] params(1) in file: lib\support\/0.2.9//primitives.sharp:75:8: note:  
		    def operator*(num : var)    := (value*num);
		       ^

0 [0x0]: line: 75 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          mul ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint64>.operator/[74] params(1) in file: lib\support\/0.2.9//primitives.sharp:77:8: note:  
		    def operator/(num : ulong)  := (value/num.value);
		       ^

0 [0x0]: line: 77 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator/[75] params(1) in file: lib\support\/0.2.9//primitives.sharp:78:8: note:  
		    def operator/(num : long)   := (value/num.value);
		       ^

0 [0x0]: line: 78 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator/[76] params(1) in file: lib\support\/0.2.9//primitives.sharp:79:8: note:  
		    def operator/(num : uint)   := (value/num.value);
		       ^

0 [0x0]: line: 79 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator/[77] params(1) in file: lib\support\/0.2.9//primitives.sharp:80:8: note:  
		    def operator/(num : int)    := (value/num.value);
		       ^

0 [0x0]: line: 80 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator/[78] params(1) in file: lib\support\/0.2.9//primitives.sharp:81:8: note:  
		    def operator/(num : ushort) := (value/num.value);
		       ^

0 [0x0]: line: 81 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator/[79] params(1) in file: lib\support\/0.2.9//primitives.sharp:82:8: note:  
		    def operator/(num : short)  := (value/num.value);
		       ^

0 [0x0]: line: 82 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator/[80] params(1) in file: lib\support\/0.2.9//primitives.sharp:83:8: note:  
		    def operator/(num : uchar)  := (value/num.value);
		       ^

0 [0x0]: line: 83 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator/[81] params(1) in file: lib\support\/0.2.9//primitives.sharp:84:8: note:  
		    def operator/(num : char)   := (value/num.value);
		       ^

0 [0x0]: line: 84 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator/[82] params(1) in file: lib\support\/0.2.9//primitives.sharp:85:8: note:  
		    def operator/(num : byte)   := (value/num.value);
		       ^

0 [0x0]: line: 85 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator/[83] params(1) in file: lib\support\/0.2.9//primitives.sharp:86:8: note:  
		    def operator/(num : bool)   := (value/num.value);
		       ^

0 [0x0]: line: 86 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator/[84] params(1) in file: lib\support\/0.2.9//primitives.sharp:87:8: note:  
		    def operator/(num : double)   := (value/num.value);
		       ^

0 [0x0]: line: 87 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator/[85] params(1) in file: lib\support\/0.2.9//primitives.sharp:88:8: note:  
		    def operator/(num : var)    := (value/num);
		       ^

0 [0x0]: line: 88 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          div ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint64>.operator%[86] params(1) in file: lib\support\/0.2.9//primitives.sharp:90:8: note:  
		    def operator%(num : ulong)  := (value%num.value);
		       ^

0 [0x0]: line: 90 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator%[87] params(1) in file: lib\support\/0.2.9//primitives.sharp:91:8: note:  
		    def operator%(num : long)   := (value%num.value);
		       ^

0 [0x0]: line: 91 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator%[88] params(1) in file: lib\support\/0.2.9//primitives.sharp:92:8: note:  
		    def operator%(num : uint)   := (value%num.value);
		       ^

0 [0x0]: line: 92 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator%[89] params(1) in file: lib\support\/0.2.9//primitives.sharp:93:8: note:  
		    def operator%(num : int)    := (value%num.value);
		       ^

0 [0x0]: line: 93 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator%[90] params(1) in file: lib\support\/0.2.9//primitives.sharp:94:8: note:  
		    def operator%(num : ushort) := (value%num.value);
		       ^

0 [0x0]: line: 94 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator%[91] params(1) in file: lib\support\/0.2.9//primitives.sharp:95:8: note:  
		    def operator%(num : short)  := (value%num.value);
		       ^

0 [0x0]: line: 95 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator%[92] params(1) in file: lib\support\/0.2.9//primitives.sharp:96:8: note:  
		    def operator%(num : uchar)  := (value%num.value);
		       ^

0 [0x0]: line: 96 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator%[93] params(1) in file: lib\support\/0.2.9//primitives.sharp:97:8: note:  
		    def operator%(num : char)   := (value%num.value);
		       ^

0 [0x0]: line: 97 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator%[94] params(1) in file: lib\support\/0.2.9//primitives.sharp:98:8: note:  
		    def operator%(num : byte)   := (value%num.value);
		       ^

0 [0x0]: line: 98 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator%[95] params(1) in file: lib\support\/0.2.9//primitives.sharp:99:8: note:  
		    def operator%(num : bool)   := (value%num.value);
		       ^

0 [0x0]: line: 99 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint64>.operator%[96] params(1) in file: lib\support\/0.2.9//primitives.sharp:100:8: note:  
		    def operator%(num : double)   := (value%num.value);
		       ^

0 [0x0]: line: 100 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator%[97] params(1) in file: lib\support\/0.2.9//primitives.sharp:101:8: note:  
		    def operator%(num : var)    := (value%num);
		       ^

0 [0x0]: line: 101 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           mod ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint64>.operator<[98] params(1) in file: lib\support\/0.2.9//primitives.sharp:103:8: note:  
		    def operator<(num : ulong)  := (value<num.value);
		       ^

0 [0x0]: line: 103 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<[99] params(1) in file: lib\support\/0.2.9//primitives.sharp:104:8: note:  
		    def operator<(num : long)   := (value<num.value);
		       ^

0 [0x0]: line: 104 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<[100] params(1) in file: lib\support\/0.2.9//primitives.sharp:105:8: note:  
		    def operator<(num : uint)   := (value<num.value);
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<[101] params(1) in file: lib\support\/0.2.9//primitives.sharp:106:8: note:  
		    def operator<(num : int)    := (value<num.value);
		       ^

0 [0x0]: line: 106 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<[102] params(1) in file: lib\support\/0.2.9//primitives.sharp:107:8: note:  
		    def operator<(num : ushort) := (value<num.value);
		       ^

0 [0x0]: line: 107 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<[103] params(1) in file: lib\support\/0.2.9//primitives.sharp:108:8: note:  
		    def operator<(num : short)  := (value<num.value);
		       ^

0 [0x0]: line: 108 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<[104] params(1) in file: lib\support\/0.2.9//primitives.sharp:109:8: note:  
		    def operator<(num : uchar)  := (value<num.value);
		       ^

0 [0x0]: line: 109 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<[105] params(1) in file: lib\support\/0.2.9//primitives.sharp:110:8: note:  
		    def operator<(num : char)   := (value<num.value);
		       ^

0 [0x0]: line: 110 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<[106] params(1) in file: lib\support\/0.2.9//primitives.sharp:111:8: note:  
		    def operator<(num : byte)   := (value<num.value);
		       ^

0 [0x0]: line: 111 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<[107] params(1) in file: lib\support\/0.2.9//primitives.sharp:112:8: note:  
		    def operator<(num : bool)   := (value<num.value);
		       ^

0 [0x0]: line: 112 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<[108] params(1) in file: lib\support\/0.2.9//primitives.sharp:113:8: note:  
		    def operator<(num : double)   := (value<num.value);
		       ^

0 [0x0]: line: 113 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<[109] params(1) in file: lib\support\/0.2.9//primitives.sharp:114:8: note:  
		    def operator<(num : var)    := (value<num);
		       ^

0 [0x0]: line: 114 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           lt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint64>.operator>[110] params(1) in file: lib\support\/0.2.9//primitives.sharp:116:8: note:  
		    def operator>(num : ulong)  := (value>num.value);
		       ^

0 [0x0]: line: 116 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>[111] params(1) in file: lib\support\/0.2.9//primitives.sharp:117:8: note:  
		    def operator>(num : long)   := (value>num.value);
		       ^

0 [0x0]: line: 117 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>[112] params(1) in file: lib\support\/0.2.9//primitives.sharp:118:8: note:  
		    def operator>(num : uint)   := (value>num.value);
		       ^

0 [0x0]: line: 118 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>[113] params(1) in file: lib\support\/0.2.9//primitives.sharp:119:8: note:  
		    def operator>(num : int)    := (value>num.value);
		       ^

0 [0x0]: line: 119 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>[114] params(1) in file: lib\support\/0.2.9//primitives.sharp:120:8: note:  
		    def operator>(num : ushort) := (value>num.value);
		       ^

0 [0x0]: line: 120 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>[115] params(1) in file: lib\support\/0.2.9//primitives.sharp:121:8: note:  
		    def operator>(num : short)  := (value>num.value);
		       ^

0 [0x0]: line: 121 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>[116] params(1) in file: lib\support\/0.2.9//primitives.sharp:122:8: note:  
		    def operator>(num : uchar)  := (value>num.value);
		       ^

0 [0x0]: line: 122 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>[117] params(1) in file: lib\support\/0.2.9//primitives.sharp:123:8: note:  
		    def operator>(num : char)   := (value>num.value);
		       ^

0 [0x0]: line: 123 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>[118] params(1) in file: lib\support\/0.2.9//primitives.sharp:124:8: note:  
		    def operator>(num : byte)   := (value>num.value);
		       ^

0 [0x0]: line: 124 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>[119] params(1) in file: lib\support\/0.2.9//primitives.sharp:125:8: note:  
		    def operator>(num : bool)   := (value>num.value);
		       ^

0 [0x0]: line: 125 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>[120] params(1) in file: lib\support\/0.2.9//primitives.sharp:126:8: note:  
		    def operator>(num : double)   := (value>num.value);
		       ^

0 [0x0]: line: 126 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>[121] params(1) in file: lib\support\/0.2.9//primitives.sharp:127:8: note:  
		    def operator>(num : var)    := (value>num);
		       ^

0 [0x0]: line: 127 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint64>.operator<=[122] params(1) in file: lib\support\/0.2.9//primitives.sharp:129:8: note:  
		    def operator<=(num : ulong)  := (value>=num.value);
		       ^

0 [0x0]: line: 129 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<=[123] params(1) in file: lib\support\/0.2.9//primitives.sharp:130:8: note:  
		    def operator<=(num : long)   := (value>=num.value);
		       ^

0 [0x0]: line: 130 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<=[124] params(1) in file: lib\support\/0.2.9//primitives.sharp:131:8: note:  
		    def operator<=(num : uint)   := (value>=num.value);
		       ^

0 [0x0]: line: 131 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<=[125] params(1) in file: lib\support\/0.2.9//primitives.sharp:132:8: note:  
		    def operator<=(num : int)    := (value>=num.value);
		       ^

0 [0x0]: line: 132 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<=[126] params(1) in file: lib\support\/0.2.9//primitives.sharp:133:8: note:  
		    def operator<=(num : ushort) := (value>=num.value);
		       ^

0 [0x0]: line: 133 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<=[127] params(1) in file: lib\support\/0.2.9//primitives.sharp:134:8: note:  
		    def operator<=(num : short)  := (value>=num.value);
		       ^

0 [0x0]: line: 134 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<=[128] params(1) in file: lib\support\/0.2.9//primitives.sharp:135:8: note:  
		    def operator<=(num : uchar)  := (value>=num.value);
		       ^

0 [0x0]: line: 135 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<=[129] params(1) in file: lib\support\/0.2.9//primitives.sharp:136:8: note:  
		    def operator<=(num : char)   := (value>=num.value);
		       ^

0 [0x0]: line: 136 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<=[130] params(1) in file: lib\support\/0.2.9//primitives.sharp:137:8: note:  
		    def operator<=(num : byte)   := (value>=num.value);
		       ^

0 [0x0]: line: 137 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<=[131] params(1) in file: lib\support\/0.2.9//primitives.sharp:138:8: note:  
		    def operator<=(num : bool)   := (value>=num.value);
		       ^

0 [0x0]: line: 138 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<=[132] params(1) in file: lib\support\/0.2.9//primitives.sharp:139:8: note:  
		    def operator<=(num : double)   := (value>=num.value);
		       ^

0 [0x0]: line: 139 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<=[133] params(1) in file: lib\support\/0.2.9//primitives.sharp:140:8: note:  
		    def operator<=(num : var)    := (value>=num);
		       ^

0 [0x0]: line: 140 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gte ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint64>.operator**[134] params(1) in file: lib\support\/0.2.9//primitives.sharp:142:8: note:  
		    def operator**(num : ulong)  := (value**num.value);
		       ^

0 [0x0]: line: 142 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator**[135] params(1) in file: lib\support\/0.2.9//primitives.sharp:143:8: note:  
		    def operator**(num : long)   := (value**num.value);
		       ^

0 [0x0]: line: 143 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator**[136] params(1) in file: lib\support\/0.2.9//primitives.sharp:144:8: note:  
		    def operator**(num : uint)   := (value**num.value);
		       ^

0 [0x0]: line: 144 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator**[137] params(1) in file: lib\support\/0.2.9//primitives.sharp:145:8: note:  
		    def operator**(num : int)    := (value**num.value);
		       ^

0 [0x0]: line: 145 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator**[138] params(1) in file: lib\support\/0.2.9//primitives.sharp:146:8: note:  
		    def operator**(num : ushort) := (value**num.value);
		       ^

0 [0x0]: line: 146 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator**[139] params(1) in file: lib\support\/0.2.9//primitives.sharp:147:8: note:  
		    def operator**(num : short)  := (value**num.value);
		       ^

0 [0x0]: line: 147 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator**[140] params(1) in file: lib\support\/0.2.9//primitives.sharp:148:8: note:  
		    def operator**(num : uchar)  := (value**num.value);
		       ^

0 [0x0]: line: 148 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator**[141] params(1) in file: lib\support\/0.2.9//primitives.sharp:149:8: note:  
		    def operator**(num : char)   := (value**num.value);
		       ^

0 [0x0]: line: 149 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator**[142] params(1) in file: lib\support\/0.2.9//primitives.sharp:150:8: note:  
		    def operator**(num : byte)   := (value**num.value);
		       ^

0 [0x0]: line: 150 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator**[143] params(1) in file: lib\support\/0.2.9//primitives.sharp:151:8: note:  
		    def operator**(num : bool)   := (value**num.value);
		       ^

0 [0x0]: line: 151 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator**[144] params(1) in file: lib\support\/0.2.9//primitives.sharp:152:8: note:  
		    def operator**(num : double)   := (value**num.value);
		       ^

0 [0x0]: line: 152 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator**[145] params(1) in file: lib\support\/0.2.9//primitives.sharp:153:8: note:  
		    def operator**(num : var)    := (value**num);
		       ^

0 [0x0]: line: 153 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           exp ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint64>.operator<<[146] params(1) in file: lib\support\/0.2.9//primitives.sharp:155:8: note:  
		    def operator<<(num : ulong)  := (value<<num.value);
		       ^

0 [0x0]: line: 155 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<<[147] params(1) in file: lib\support\/0.2.9//primitives.sharp:156:8: note:  
		    def operator<<(num : long)   := (value<<num.value);
		       ^

0 [0x0]: line: 156 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<<[148] params(1) in file: lib\support\/0.2.9//primitives.sharp:157:8: note:  
		    def operator<<(num : uint)   := (value<<num.value);
		       ^

0 [0x0]: line: 157 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<<[149] params(1) in file: lib\support\/0.2.9//primitives.sharp:158:8: note:  
		    def operator<<(num : int)    := (value<<num.value);
		       ^

0 [0x0]: line: 158 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<<[150] params(1) in file: lib\support\/0.2.9//primitives.sharp:159:8: note:  
		    def operator<<(num : ushort) := (value<<num.value);
		       ^

0 [0x0]: line: 159 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<<[151] params(1) in file: lib\support\/0.2.9//primitives.sharp:160:8: note:  
		    def operator<<(num : short)  := (value<<num.value);
		       ^

0 [0x0]: line: 160 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<<[152] params(1) in file: lib\support\/0.2.9//primitives.sharp:161:8: note:  
		    def operator<<(num : uchar)  := (value<<num.value);
		       ^

0 [0x0]: line: 161 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<<[153] params(1) in file: lib\support\/0.2.9//primitives.sharp:162:8: note:  
		    def operator<<(num : char)   := (value<<num.value);
		       ^

0 [0x0]: line: 162 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<<[154] params(1) in file: lib\support\/0.2.9//primitives.sharp:163:8: note:  
		    def operator<<(num : byte)   := (value<<num.value);
		       ^

0 [0x0]: line: 163 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<<[155] params(1) in file: lib\support\/0.2.9//primitives.sharp:164:8: note:  
		    def operator<<(num : bool)   := (value<<num.value);
		       ^

0 [0x0]: line: 164 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<<[156] params(1) in file: lib\support\/0.2.9//primitives.sharp:165:8: note:  
		    def operator<<(num : double)   := (value<<num.value);
		       ^

0 [0x0]: line: 165 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator<<[157] params(1) in file: lib\support\/0.2.9//primitives.sharp:166:8: note:  
		    def operator<<(num : var)    := (value<<num);
		       ^

0 [0x0]: line: 166 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shl ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint64>.operator>>[158] params(1) in file: lib\support\/0.2.9//primitives.sharp:168:8: note:  
		    def operator>>(num : ulong)  := (value>>num.value);
		       ^

0 [0x0]: line: 168 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>>[159] params(1) in file: lib\support\/0.2.9//primitives.sharp:169:8: note:  
		    def operator>>(num : long)   := (value>>num.value);
		       ^

0 [0x0]: line: 169 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>>[160] params(1) in file: lib\support\/0.2.9//primitives.sharp:170:8: note:  
		    def operator>>(num : uint)   := (value>>num.value);
		       ^

0 [0x0]: line: 170 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>>[161] params(1) in file: lib\support\/0.2.9//primitives.sharp:171:8: note:  
		    def operator>>(num : int)    := (value>>num.value);
		       ^

0 [0x0]: line: 171 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>>[162] params(1) in file: lib\support\/0.2.9//primitives.sharp:172:8: note:  
		    def operator>>(num : ushort) := (value>>num.value);
		       ^

0 [0x0]: line: 172 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>>[163] params(1) in file: lib\support\/0.2.9//primitives.sharp:173:8: note:  
		    def operator>>(num : short)  := (value>>num.value);
		       ^

0 [0x0]: line: 173 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>>[164] params(1) in file: lib\support\/0.2.9//primitives.sharp:174:8: note:  
		    def operator>>(num : uchar)  := (value>>num.value);
		       ^

0 [0x0]: line: 174 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>>[165] params(1) in file: lib\support\/0.2.9//primitives.sharp:175:8: note:  
		    def operator>>(num : char)   := (value>>num.value);
		       ^

0 [0x0]: line: 175 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>>[166] params(1) in file: lib\support\/0.2.9//primitives.sharp:176:8: note:  
		    def operator>>(num : byte)   := (value>>num.value);
		       ^

0 [0x0]: line: 176 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>>[167] params(1) in file: lib\support\/0.2.9//primitives.sharp:177:8: note:  
		    def operator>>(num : bool)   := (value>>num.value);
		       ^

0 [0x0]: line: 177 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>>[168] params(1) in file: lib\support\/0.2.9//primitives.sharp:178:8: note:  
		    def operator>>(num : double)   := (value>>num.value);
		       ^

0 [0x0]: line: 178 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator>>[169] params(1) in file: lib\support\/0.2.9//primitives.sharp:179:8: note:  
		    def operator>>(num : var)    := (value>>num);
		       ^

0 [0x0]: line: 179 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shr ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint64>.operator^[170] params(1) in file: lib\support\/0.2.9//primitives.sharp:181:8: note:  
		    def operator^(num : ulong)  := (value^num.value);
		       ^

0 [0x0]: line: 181 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator^[171] params(1) in file: lib\support\/0.2.9//primitives.sharp:182:8: note:  
		    def operator^(num : long)   := (value^num.value);
		       ^

0 [0x0]: line: 182 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator^[172] params(1) in file: lib\support\/0.2.9//primitives.sharp:183:8: note:  
		    def operator^(num : uint)   := (value^num.value);
		       ^

0 [0x0]: line: 183 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator^[173] params(1) in file: lib\support\/0.2.9//primitives.sharp:184:8: note:  
		    def operator^(num : int)    := (value^num.value);
		       ^

0 [0x0]: line: 184 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator^[174] params(1) in file: lib\support\/0.2.9//primitives.sharp:185:8: note:  
		    def operator^(num : ushort) := (value^num.value);
		       ^

0 [0x0]: line: 185 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator^[175] params(1) in file: lib\support\/0.2.9//primitives.sharp:186:8: note:  
		    def operator^(num : short)  := (value^num.value);
		       ^

0 [0x0]: line: 186 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator^[176] params(1) in file: lib\support\/0.2.9//primitives.sharp:187:8: note:  
		    def operator^(num : uchar)  := (value^num.value);
		       ^

0 [0x0]: line: 187 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator^[177] params(1) in file: lib\support\/0.2.9//primitives.sharp:188:8: note:  
		    def operator^(num : char)   := (value^num.value);
		       ^

0 [0x0]: line: 188 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator^[178] params(1) in file: lib\support\/0.2.9//primitives.sharp:189:8: note:  
		    def operator^(num : byte)   := (value^num.value);
		       ^

0 [0x0]: line: 189 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator^[179] params(1) in file: lib\support\/0.2.9//primitives.sharp:190:8: note:  
		    def operator^(num : bool)   := (value^num.value);
		       ^

0 [0x0]: line: 190 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator^[180] params(1) in file: lib\support\/0.2.9//primitives.sharp:191:8: note:  
		    def operator^(num : double)   := (value^num.value);
		       ^

0 [0x0]: line: 191 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator^[181] params(1) in file: lib\support\/0.2.9//primitives.sharp:192:8: note:  
		    def operator^(num : var)    := (value^num);
		       ^

0 [0x0]: line: 192 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           xor ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint64>.operator&[182] params(1) in file: lib\support\/0.2.9//primitives.sharp:194:8: note:  
		    def operator&(num : ulong)  := (value&num.value);
		       ^

0 [0x0]: line: 194 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator&[183] params(1) in file: lib\support\/0.2.9//primitives.sharp:195:8: note:  
		    def operator&(num : long)   := (value&num.value);
		       ^

0 [0x0]: line: 195 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator&[184] params(1) in file: lib\support\/0.2.9//primitives.sharp:196:8: note:  
		    def operator&(num : uint)   := (value&num.value);
		       ^

0 [0x0]: line: 196 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator&[185] params(1) in file: lib\support\/0.2.9//primitives.sharp:197:8: note:  
		    def operator&(num : int)    := (value&num.value);
		       ^

0 [0x0]: line: 197 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator&[186] params(1) in file: lib\support\/0.2.9//primitives.sharp:198:8: note:  
		    def operator&(num : ushort) := (value&num.value);
		       ^

0 [0x0]: line: 198 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator&[187] params(1) in file: lib\support\/0.2.9//primitives.sharp:199:8: note:  
		    def operator&(num : short)  := (value&num.value);
		       ^

0 [0x0]: line: 199 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator&[188] params(1) in file: lib\support\/0.2.9//primitives.sharp:200:8: note:  
		    def operator&(num : uchar)  := (value&num.value);
		       ^

0 [0x0]: line: 200 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator&[189] params(1) in file: lib\support\/0.2.9//primitives.sharp:201:8: note:  
		    def operator&(num : char)   := (value&num.value);
		       ^

0 [0x0]: line: 201 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator&[190] params(1) in file: lib\support\/0.2.9//primitives.sharp:202:8: note:  
		    def operator&(num : byte)   := (value&num.value);
		       ^

0 [0x0]: line: 202 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator&[191] params(1) in file: lib\support\/0.2.9//primitives.sharp:203:8: note:  
		    def operator&(num : bool)   := (value&num.value);
		       ^

0 [0x0]: line: 203 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator&[192] params(1) in file: lib\support\/0.2.9//primitives.sharp:204:8: note:  
		    def operator&(num : double)   := (value&num.value);
		       ^

0 [0x0]: line: 204 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator&[193] params(1) in file: lib\support\/0.2.9//primitives.sharp:205:8: note:  
		    def operator&(num : var)    := (value&num);
		       ^

0 [0x0]: line: 205 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           uand ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint64>.operator|[194] params(1) in file: lib\support\/0.2.9//primitives.sharp:207:8: note:  
		    def operator|(num : ulong)  := (value|num.value);
		       ^

0 [0x0]: line: 207 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator|[195] params(1) in file: lib\support\/0.2.9//primitives.sharp:208:8: note:  
		    def operator|(num : long)   := (value|num.value);
		       ^

0 [0x0]: line: 208 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator|[196] params(1) in file: lib\support\/0.2.9//primitives.sharp:209:8: note:  
		    def operator|(num : uint)   := (value|num.value);
		       ^

0 [0x0]: line: 209 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator|[197] params(1) in file: lib\support\/0.2.9//primitives.sharp:210:8: note:  
		    def operator|(num : int)    := (value|num.value);
		       ^

0 [0x0]: line: 210 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator|[198] params(1) in file: lib\support\/0.2.9//primitives.sharp:211:8: note:  
		    def operator|(num : ushort) := (value|num.value);
		       ^

0 [0x0]: line: 211 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator|[199] params(1) in file: lib\support\/0.2.9//primitives.sharp:212:8: note:  
		    def operator|(num : short)  := (value|num.value);
		       ^

0 [0x0]: line: 212 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator|[200] params(1) in file: lib\support\/0.2.9//primitives.sharp:213:8: note:  
		    def operator|(num : uchar)  := (value|num.value);
		       ^

0 [0x0]: line: 213 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator|[201] params(1) in file: lib\support\/0.2.9//primitives.sharp:214:8: note:  
		    def operator|(num : char)   := (value|num.value);
		       ^

0 [0x0]: line: 214 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator|[202] params(1) in file: lib\support\/0.2.9//primitives.sharp:215:8: note:  
		    def operator|(num : byte)   := (value|num.value);
		       ^

0 [0x0]: line: 215 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator|[203] params(1) in file: lib\support\/0.2.9//primitives.sharp:216:8: note:  
		    def operator|(num : bool)   := (value|num.value);
		       ^

0 [0x0]: line: 216 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator|[204] params(1) in file: lib\support\/0.2.9//primitives.sharp:217:8: note:  
		    def operator|(num : double)   := (value|num.value);
		       ^

0 [0x0]: line: 217 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint64>.operator|[205] params(1) in file: lib\support\/0.2.9//primitives.sharp:218:8: note:  
		    def operator|(num : var)    := (value|num);
		       ^

0 [0x0]: line: 218 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           or ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint64>.operator!=[206] params(1) in file: lib\support\/0.2.9//primitives.sharp:220:8: note:  
		    def operator!=(num : var) := value!=num;
		       ^

0 [0x0]: line: 220 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           tne ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint64>.operator==[207] params(1) in file: lib\support\/0.2.9//primitives.sharp:221:8: note:  
		    def operator==(num : var) := value==num;
		       ^

0 [0x0]: line: 221 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           test ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint64>.operator=[208] params(1) in file: lib\support\/0.2.9//primitives.sharp:222:8: note:  
		    def operator=(num : var) := value=num;
		       ^

0 [0x0]: line: 222 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           loadval ebx   
5 [0x5]:           movu64 ebx, ebx   
6 [0x6]:           movi #0, adx   
8 [0x8]:           rmov adx, ebx   
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std#integer<_uint64>.to_string[209] params(0) in file: lib\support\/0.2.9//primitives.sharp:224:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 225 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           newstr @55 //    
4 [0x4]:           call @3546 // <std#string.string>   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           rstore ebx   
12 [0xc]:           call @3586 // <std#string.operator+>   
13 [0xd]:           popobj2    
14 [0xe]:           returnobj   
15 [0xf]:           ret   


function: std#integer<_uint64>.parse[210] params(1) in file: lib\support\/0.2.9//primitives.sharp:228:15: note:  
		    static def parse(s: string) : native_type {
		              ^

0 [0x0]: line: 229 movi #0, ebx   
2 [0x2]:           movu64 ebx, ebx   
3 [0x3]:           smovr_2 ebx, fp+1   
4 [0x4]: line: 231 movi #0, ebx   
6 [0x6]:           movr cmt, ebx   
7 [0x7]:           jne 14   
8 [0x8]: line: 232 pushl 0   
9 [0x9]:           call @1898 // <std#__srt_global.strtod>   
10 [0xa]:           loadval ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   
13 [0xd]:           jmp @104   
14 [0xe]: line: 234 istorel 0, fp+2   
16 [0x10]: line: 235 istorel 0, fp+3   
18 [0x12]: line: 236 pushl 0   
19 [0x13]:           call @3587 // <std#string.size>   
20 [0x14]:           ipopl 4   
21 [0x15]: line: 238 pushl 0   
22 [0x16]:           istore 0   
24 [0x18]:           call @3568 // <std#string.at>   
25 [0x19]:           loadval ebx   
26 [0x1a]:           rstore ebx   
27 [0x1b]:           movi #45, ebx   
29 [0x1d]:           loadval ecx   
30 [0x1e]:           test ecx, ebx   
31 [0x1f]:           movr ebx, cmt   
32 [0x20]:           movr cmt, ebx   
33 [0x21]:           jne 38   
34 [0x22]: line: 239 istorel 1, fp+3   
36 [0x24]: line: 240 istorel 1, fp+2   
38 [0x26]:           nop   
39 [0x27]: line: 243 ipushl #2   
40 [0x28]:           loadl ebx, fp+4   
41 [0x29]:           loadval ecx   
42 [0x2a]:           lt ecx, ebx   
43 [0x2b]:           movr ebx, cmt   
44 [0x2c]:           movr cmt, ebx   
45 [0x2d]:           jne 93   
46 [0x2e]: line: 244 pushl 0   
47 [0x2f]:           ipushl #2   
48 [0x30]:           call @3568 // <std#string.at>   
49 [0x31]:           call @3209 // <std#char.is_digit>   
50 [0x32]:           loadval ebx   
51 [0x33]:           not ebx, ebx   
52 [0x34]:           movr cmt, ebx   
53 [0x35]:           jne 68   
54 [0x36]: line: 245 new_class @4 // std#illegal_argument_exception   
56 [0x38]:           dup    
57 [0x39]:           new_class @75 // std#string   
59 [0x3b]:           dup    
60 [0x3c]:           newstr @561 // illegal char in string:    
61 [0x3d]:           call @3546 // <std#string.string>   
62 [0x3e]:           pushl 0   
63 [0x3f]:           ipushl #2   
64 [0x40]:           call @3568 // <std#string.at>   
65 [0x41]:           call @3579 // <std#string.operator+>   
66 [0x42]:           call @1962 // <std#illegal_argument_exception.illegal_argument_exception>   
67 [0x43]:           throw    
68 [0x44]:           nop   
69 [0x45]: line: 249 movi #10, ebx   
71 [0x47]:           loadl ecx, fp+1   
72 [0x48]:           mul ecx, ebx -> ebx   
73 [0x49]:           movu64 ebx, ebx   
74 [0x4a]:           smovr_2 ebx, fp+1   
75 [0x4b]: line: 250 pushl 0   
76 [0x4c]:           loadl ebx, fp+2   
77 [0x4d]:           movr egx, ebx   
78 [0x4e]:           inc ebx   
79 [0x4f]:           smovr_2 ebx, fp+2   
80 [0x50]:           rstore egx   
81 [0x51]:           call @3568 // <std#string.at>   
82 [0x52]:           loadval ebx   
83 [0x53]:           rstore ebx   
84 [0x54]:           movi #48, ebx   
86 [0x56]:           loadval ecx   
87 [0x57]:           sub ecx, ebx -> ebx   
88 [0x58]:           loadl ecx, fp+1   
89 [0x59]:           add ecx, ebx -> ebx   
90 [0x5a]:           movu64 ebx, ebx   
91 [0x5b]:           smovr_2 ebx, fp+1   
92 [0x5c]:           jmp @39   
93 [0x5d]: line: 252 loadl ebx, fp+3   
94 [0x5e]:           movr cmt, ebx   
95 [0x5f]:           jne 100   
96 [0x60]: line: 253 loadl ebx, fp+1   
97 [0x61]:           neg ebx, ebx   
98 [0x62]:           movu64 ebx, ebx   
99 [0x63]:           smovr_2 ebx, fp+1   
100 [0x64]:           nop   
101 [0x65]: line: 254 loadl ebx, fp+1   
102 [0x66]:           return_val ebx   
103 [0x67]:           ret   
104 [0x68]:           nop   


function: std#integer<_uint64>.to_ulong[211] params(0) in file: lib\support\/0.2.9//primitives.sharp:258:8: note:  
		    def to_ulong() := new ulong { value };
		       ^

0 [0x0]: line: 258 new_class @53 // std#ulong   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu64 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint64>.to_long[212] params(0) in file: lib\support\/0.2.9//primitives.sharp:259:8: note:  
		    def to_long() := new long { value };
		       ^

0 [0x0]: line: 259 new_class @54 // std#long   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov64 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint64>.to_uint[213] params(0) in file: lib\support\/0.2.9//primitives.sharp:260:8: note:  
		    def to_uint() := new uint { value };
		       ^

0 [0x0]: line: 260 new_class @55 // std#uint   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu32 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint64>.to_int[214] params(0) in file: lib\support\/0.2.9//primitives.sharp:261:8: note:  
		    def to_int() := new int { value };
		       ^

0 [0x0]: line: 261 new_class @56 // std#int   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov32 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint64>.to_ushort[215] params(0) in file: lib\support\/0.2.9//primitives.sharp:262:8: note:  
		    def to_ushort() := new ushort { value };
		       ^

0 [0x0]: line: 262 new_class @57 // std#ushort   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu16 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint64>.to_short[216] params(0) in file: lib\support\/0.2.9//primitives.sharp:263:8: note:  
		    def to_short() := new short { value };
		       ^

0 [0x0]: line: 263 new_class @58 // std#short   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov16 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint64>.to_uchar[217] params(0) in file: lib\support\/0.2.9//primitives.sharp:264:8: note:  
		    def to_uchar() := new uchar { value };
		       ^

0 [0x0]: line: 264 new_class @59 // std#uchar   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint64>.to_char[218] params(0) in file: lib\support\/0.2.9//primitives.sharp:265:8: note:  
		    def to_char() := new char { value };
		       ^

0 [0x0]: line: 265 new_class @60 // std#char   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint64>.to_byte[219] params(0) in file: lib\support\/0.2.9//primitives.sharp:266:8: note:  
		    def to_byte() := new byte { value };
		       ^

0 [0x0]: line: 266 new_class @61 // std#byte   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint64>.to_bool[220] params(0) in file: lib\support\/0.2.9//primitives.sharp:267:8: note:  
		    def to_bool() := new bool { value };
		       ^

0 [0x0]: line: 267 new_class @62 // std#bool   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint64>.to_double[221] params(0) in file: lib\support\/0.2.9//primitives.sharp:268:8: note:  
		    def to_double() := new double { value };
		       ^

0 [0x0]: line: 268 new_class @63 // std#double   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint64>.get_value[222] params(0) in file: lib\support\/0.2.9//primitives.sharp:270:8: note:  
		    def get_value() := value;
		       ^

0 [0x0]: line: 270 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


constructor: std#integer<_uint64>.integer[223] params(0) in file: lib\support\/0.2.9//primitives.sharp:5:13: note:  
		public class integer<native_type> {
		            ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#integer<_int64>.integer[224] params(1) in file: lib\support\/0.2.9//primitives.sharp:8:12: note:  
		    integer(initial_val : var) {
		           ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 9 ipushl #1   
2 [0x2]:         movl 0   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         mov64 ebx, ebx   
7 [0x7]:         movi #0, adx   
9 [0x9]:         rmov adx, ebx   
10 [0xa]:         ret   


function: std#integer<_int64>.hash[225] params(0) in file: lib\support\/0.2.9//primitives.sharp:12:8: note:  
		    def hash() : _int64 {
		       ^

0 [0x0]: line: 13 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          return_val ebx   
7 [0x7]:          ret   


overload function: std#integer<_int64>.operator!=[226] params(1) in file: lib\support\/0.2.9//primitives.sharp:16:8: note:  
		    def operator!=(num : ulong) := (value!=num.value);
		       ^

0 [0x0]: line: 16 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator==[227] params(1) in file: lib\support\/0.2.9//primitives.sharp:17:8: note:  
		    def operator==(num : ulong) := (value==num.value);
		       ^

0 [0x0]: line: 17 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator!=[228] params(1) in file: lib\support\/0.2.9//primitives.sharp:18:8: note:  
		    def operator!=(num : long) := (value!=num.value);
		       ^

0 [0x0]: line: 18 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator==[229] params(1) in file: lib\support\/0.2.9//primitives.sharp:19:8: note:  
		    def operator==(num : long) := (value==num.value);
		       ^

0 [0x0]: line: 19 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator!=[230] params(1) in file: lib\support\/0.2.9//primitives.sharp:20:8: note:  
		    def operator!=(num : uint) := (value!=num.value);
		       ^

0 [0x0]: line: 20 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator==[231] params(1) in file: lib\support\/0.2.9//primitives.sharp:21:8: note:  
		    def operator==(num : uint) := (value==num.value);
		       ^

0 [0x0]: line: 21 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator!=[232] params(1) in file: lib\support\/0.2.9//primitives.sharp:22:8: note:  
		    def operator!=(num : int) := (value!=num.value);
		       ^

0 [0x0]: line: 22 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator==[233] params(1) in file: lib\support\/0.2.9//primitives.sharp:23:8: note:  
		    def operator==(num : int) := (value==num.value);
		       ^

0 [0x0]: line: 23 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator!=[234] params(1) in file: lib\support\/0.2.9//primitives.sharp:24:8: note:  
		    def operator!=(num : ushort) := (value!=num.value);
		       ^

0 [0x0]: line: 24 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator==[235] params(1) in file: lib\support\/0.2.9//primitives.sharp:25:8: note:  
		    def operator==(num : ushort) := (value==num.value);
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator!=[236] params(1) in file: lib\support\/0.2.9//primitives.sharp:26:8: note:  
		    def operator!=(num : short) := (value!=num.value);
		       ^

0 [0x0]: line: 26 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator==[237] params(1) in file: lib\support\/0.2.9//primitives.sharp:27:8: note:  
		    def operator==(num : short) := (value==num.value);
		       ^

0 [0x0]: line: 27 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator!=[238] params(1) in file: lib\support\/0.2.9//primitives.sharp:28:8: note:  
		    def operator!=(num : uchar) := (value!=num.value);
		       ^

0 [0x0]: line: 28 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator==[239] params(1) in file: lib\support\/0.2.9//primitives.sharp:29:8: note:  
		    def operator==(num : uchar) := (value==num.value);
		       ^

0 [0x0]: line: 29 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator!=[240] params(1) in file: lib\support\/0.2.9//primitives.sharp:30:8: note:  
		    def operator!=(num : char) := (value!=num.value);
		       ^

0 [0x0]: line: 30 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator==[241] params(1) in file: lib\support\/0.2.9//primitives.sharp:31:8: note:  
		    def operator==(num : char) := (value==num.value);
		       ^

0 [0x0]: line: 31 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator!=[242] params(1) in file: lib\support\/0.2.9//primitives.sharp:32:8: note:  
		    def operator!=(num : byte) := (value!=num.value);
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator==[243] params(1) in file: lib\support\/0.2.9//primitives.sharp:33:8: note:  
		    def operator==(num : byte) := (value==num.value);
		       ^

0 [0x0]: line: 33 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator!=[244] params(1) in file: lib\support\/0.2.9//primitives.sharp:34:8: note:  
		    def operator!=(num : bool) := (value!=num.value);
		       ^

0 [0x0]: line: 34 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator==[245] params(1) in file: lib\support\/0.2.9//primitives.sharp:35:8: note:  
		    def operator==(num : bool) := (value==num.value);
		       ^

0 [0x0]: line: 35 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator==[246] params(1) in file: lib\support\/0.2.9//primitives.sharp:36:8: note:  
		    def operator==(num : double) := (value==num.value);
		       ^

0 [0x0]: line: 36 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator+[247] params(1) in file: lib\support\/0.2.9//primitives.sharp:38:8: note:  
		    def operator+(num : ulong)  := (value+num.value);
		       ^

0 [0x0]: line: 38 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator+[248] params(1) in file: lib\support\/0.2.9//primitives.sharp:39:8: note:  
		    def operator+(num : long)   := (value+num.value);
		       ^

0 [0x0]: line: 39 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator+[249] params(1) in file: lib\support\/0.2.9//primitives.sharp:40:8: note:  
		    def operator+(num : uint)   := (value+num.value);
		       ^

0 [0x0]: line: 40 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator+[250] params(1) in file: lib\support\/0.2.9//primitives.sharp:41:8: note:  
		    def operator+(num : int)    := (value+num.value);
		       ^

0 [0x0]: line: 41 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator+[251] params(1) in file: lib\support\/0.2.9//primitives.sharp:42:8: note:  
		    def operator+(num : ushort) := (value+num.value);
		       ^

0 [0x0]: line: 42 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator+[252] params(1) in file: lib\support\/0.2.9//primitives.sharp:43:8: note:  
		    def operator+(num : short)  := (value+num.value);
		       ^

0 [0x0]: line: 43 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator+[253] params(1) in file: lib\support\/0.2.9//primitives.sharp:44:8: note:  
		    def operator+(num : uchar)  := (value+num.value);
		       ^

0 [0x0]: line: 44 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator+[254] params(1) in file: lib\support\/0.2.9//primitives.sharp:45:8: note:  
		    def operator+(num : char)   := (value+num.value);
		       ^

0 [0x0]: line: 45 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator+[255] params(1) in file: lib\support\/0.2.9//primitives.sharp:46:8: note:  
		    def operator+(num : byte)   := (value+num.value);
		       ^

0 [0x0]: line: 46 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator+[256] params(1) in file: lib\support\/0.2.9//primitives.sharp:47:8: note:  
		    def operator+(num : bool)   := (value+num.value);
		       ^

0 [0x0]: line: 47 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator+[257] params(1) in file: lib\support\/0.2.9//primitives.sharp:48:8: note:  
		    def operator+(num : double)   := (value+num.value);
		       ^

0 [0x0]: line: 48 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator+[258] params(1) in file: lib\support\/0.2.9//primitives.sharp:49:8: note:  
		    def operator+(num : var)    := (value+num);
		       ^

0 [0x0]: line: 49 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          add ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int64>.operator-[259] params(1) in file: lib\support\/0.2.9//primitives.sharp:51:8: note:  
		    def operator-(num : ulong)  := (value-num.value);
		       ^

0 [0x0]: line: 51 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator-[260] params(1) in file: lib\support\/0.2.9//primitives.sharp:52:8: note:  
		    def operator-(num : long)   := (value-num.value);
		       ^

0 [0x0]: line: 52 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator-[261] params(1) in file: lib\support\/0.2.9//primitives.sharp:53:8: note:  
		    def operator-(num : uint)   := (value-num.value);
		       ^

0 [0x0]: line: 53 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator-[262] params(1) in file: lib\support\/0.2.9//primitives.sharp:54:8: note:  
		    def operator-(num : int)    := (value-num.value);
		       ^

0 [0x0]: line: 54 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator-[263] params(1) in file: lib\support\/0.2.9//primitives.sharp:55:8: note:  
		    def operator-(num : ushort) := (value-num.value);
		       ^

0 [0x0]: line: 55 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator-[264] params(1) in file: lib\support\/0.2.9//primitives.sharp:56:8: note:  
		    def operator-(num : short)  := (value-num.value);
		       ^

0 [0x0]: line: 56 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator-[265] params(1) in file: lib\support\/0.2.9//primitives.sharp:57:8: note:  
		    def operator-(num : uchar)  := (value-num.value);
		       ^

0 [0x0]: line: 57 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator-[266] params(1) in file: lib\support\/0.2.9//primitives.sharp:58:8: note:  
		    def operator-(num : char)   := (value-num.value);
		       ^

0 [0x0]: line: 58 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator-[267] params(1) in file: lib\support\/0.2.9//primitives.sharp:59:8: note:  
		    def operator-(num : byte)   := (value-num.value);
		       ^

0 [0x0]: line: 59 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator-[268] params(1) in file: lib\support\/0.2.9//primitives.sharp:60:8: note:  
		    def operator-(num : bool)   := (value-num.value);
		       ^

0 [0x0]: line: 60 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator-[269] params(1) in file: lib\support\/0.2.9//primitives.sharp:61:8: note:  
		    def operator-(num : double)   := (value-num.value);
		       ^

0 [0x0]: line: 61 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator-[270] params(1) in file: lib\support\/0.2.9//primitives.sharp:62:8: note:  
		    def operator-(num : var)    := (value-num);
		       ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          sub ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int64>.operator*[271] params(1) in file: lib\support\/0.2.9//primitives.sharp:64:8: note:  
		    def operator*(num : ulong)  := (value*num.value);
		       ^

0 [0x0]: line: 64 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator*[272] params(1) in file: lib\support\/0.2.9//primitives.sharp:65:8: note:  
		    def operator*(num : long)   := (value*num.value);
		       ^

0 [0x0]: line: 65 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator*[273] params(1) in file: lib\support\/0.2.9//primitives.sharp:66:8: note:  
		    def operator*(num : uint)   := (value*num.value);
		       ^

0 [0x0]: line: 66 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator*[274] params(1) in file: lib\support\/0.2.9//primitives.sharp:67:8: note:  
		    def operator*(num : int)    := (value*num.value);
		       ^

0 [0x0]: line: 67 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator*[275] params(1) in file: lib\support\/0.2.9//primitives.sharp:68:8: note:  
		    def operator*(num : ushort) := (value*num.value);
		       ^

0 [0x0]: line: 68 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator*[276] params(1) in file: lib\support\/0.2.9//primitives.sharp:69:8: note:  
		    def operator*(num : short)  := (value*num.value);
		       ^

0 [0x0]: line: 69 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator*[277] params(1) in file: lib\support\/0.2.9//primitives.sharp:70:8: note:  
		    def operator*(num : uchar)  := (value*num.value);
		       ^

0 [0x0]: line: 70 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator*[278] params(1) in file: lib\support\/0.2.9//primitives.sharp:71:8: note:  
		    def operator*(num : char)   := (value*num.value);
		       ^

0 [0x0]: line: 71 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator*[279] params(1) in file: lib\support\/0.2.9//primitives.sharp:72:8: note:  
		    def operator*(num : byte)   := (value*num.value);
		       ^

0 [0x0]: line: 72 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator*[280] params(1) in file: lib\support\/0.2.9//primitives.sharp:73:8: note:  
		    def operator*(num : bool)   := (value*num.value);
		       ^

0 [0x0]: line: 73 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator*[281] params(1) in file: lib\support\/0.2.9//primitives.sharp:74:8: note:  
		    def operator*(num : double)   := (value*num.value);
		       ^

0 [0x0]: line: 74 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator*[282] params(1) in file: lib\support\/0.2.9//primitives.sharp:75:8: note:  
		    def operator*(num : var)    := (value*num);
		       ^

0 [0x0]: line: 75 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          mul ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int64>.operator/[283] params(1) in file: lib\support\/0.2.9//primitives.sharp:77:8: note:  
		    def operator/(num : ulong)  := (value/num.value);
		       ^

0 [0x0]: line: 77 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator/[284] params(1) in file: lib\support\/0.2.9//primitives.sharp:78:8: note:  
		    def operator/(num : long)   := (value/num.value);
		       ^

0 [0x0]: line: 78 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator/[285] params(1) in file: lib\support\/0.2.9//primitives.sharp:79:8: note:  
		    def operator/(num : uint)   := (value/num.value);
		       ^

0 [0x0]: line: 79 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator/[286] params(1) in file: lib\support\/0.2.9//primitives.sharp:80:8: note:  
		    def operator/(num : int)    := (value/num.value);
		       ^

0 [0x0]: line: 80 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator/[287] params(1) in file: lib\support\/0.2.9//primitives.sharp:81:8: note:  
		    def operator/(num : ushort) := (value/num.value);
		       ^

0 [0x0]: line: 81 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator/[288] params(1) in file: lib\support\/0.2.9//primitives.sharp:82:8: note:  
		    def operator/(num : short)  := (value/num.value);
		       ^

0 [0x0]: line: 82 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator/[289] params(1) in file: lib\support\/0.2.9//primitives.sharp:83:8: note:  
		    def operator/(num : uchar)  := (value/num.value);
		       ^

0 [0x0]: line: 83 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator/[290] params(1) in file: lib\support\/0.2.9//primitives.sharp:84:8: note:  
		    def operator/(num : char)   := (value/num.value);
		       ^

0 [0x0]: line: 84 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator/[291] params(1) in file: lib\support\/0.2.9//primitives.sharp:85:8: note:  
		    def operator/(num : byte)   := (value/num.value);
		       ^

0 [0x0]: line: 85 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator/[292] params(1) in file: lib\support\/0.2.9//primitives.sharp:86:8: note:  
		    def operator/(num : bool)   := (value/num.value);
		       ^

0 [0x0]: line: 86 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator/[293] params(1) in file: lib\support\/0.2.9//primitives.sharp:87:8: note:  
		    def operator/(num : double)   := (value/num.value);
		       ^

0 [0x0]: line: 87 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator/[294] params(1) in file: lib\support\/0.2.9//primitives.sharp:88:8: note:  
		    def operator/(num : var)    := (value/num);
		       ^

0 [0x0]: line: 88 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          div ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int64>.operator%[295] params(1) in file: lib\support\/0.2.9//primitives.sharp:90:8: note:  
		    def operator%(num : ulong)  := (value%num.value);
		       ^

0 [0x0]: line: 90 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator%[296] params(1) in file: lib\support\/0.2.9//primitives.sharp:91:8: note:  
		    def operator%(num : long)   := (value%num.value);
		       ^

0 [0x0]: line: 91 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator%[297] params(1) in file: lib\support\/0.2.9//primitives.sharp:92:8: note:  
		    def operator%(num : uint)   := (value%num.value);
		       ^

0 [0x0]: line: 92 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator%[298] params(1) in file: lib\support\/0.2.9//primitives.sharp:93:8: note:  
		    def operator%(num : int)    := (value%num.value);
		       ^

0 [0x0]: line: 93 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator%[299] params(1) in file: lib\support\/0.2.9//primitives.sharp:94:8: note:  
		    def operator%(num : ushort) := (value%num.value);
		       ^

0 [0x0]: line: 94 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator%[300] params(1) in file: lib\support\/0.2.9//primitives.sharp:95:8: note:  
		    def operator%(num : short)  := (value%num.value);
		       ^

0 [0x0]: line: 95 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator%[301] params(1) in file: lib\support\/0.2.9//primitives.sharp:96:8: note:  
		    def operator%(num : uchar)  := (value%num.value);
		       ^

0 [0x0]: line: 96 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator%[302] params(1) in file: lib\support\/0.2.9//primitives.sharp:97:8: note:  
		    def operator%(num : char)   := (value%num.value);
		       ^

0 [0x0]: line: 97 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator%[303] params(1) in file: lib\support\/0.2.9//primitives.sharp:98:8: note:  
		    def operator%(num : byte)   := (value%num.value);
		       ^

0 [0x0]: line: 98 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator%[304] params(1) in file: lib\support\/0.2.9//primitives.sharp:99:8: note:  
		    def operator%(num : bool)   := (value%num.value);
		       ^

0 [0x0]: line: 99 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int64>.operator%[305] params(1) in file: lib\support\/0.2.9//primitives.sharp:100:8: note:  
		    def operator%(num : double)   := (value%num.value);
		       ^

0 [0x0]: line: 100 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator%[306] params(1) in file: lib\support\/0.2.9//primitives.sharp:101:8: note:  
		    def operator%(num : var)    := (value%num);
		       ^

0 [0x0]: line: 101 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           mod ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int64>.operator<[307] params(1) in file: lib\support\/0.2.9//primitives.sharp:103:8: note:  
		    def operator<(num : ulong)  := (value<num.value);
		       ^

0 [0x0]: line: 103 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<[308] params(1) in file: lib\support\/0.2.9//primitives.sharp:104:8: note:  
		    def operator<(num : long)   := (value<num.value);
		       ^

0 [0x0]: line: 104 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<[309] params(1) in file: lib\support\/0.2.9//primitives.sharp:105:8: note:  
		    def operator<(num : uint)   := (value<num.value);
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<[310] params(1) in file: lib\support\/0.2.9//primitives.sharp:106:8: note:  
		    def operator<(num : int)    := (value<num.value);
		       ^

0 [0x0]: line: 106 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<[311] params(1) in file: lib\support\/0.2.9//primitives.sharp:107:8: note:  
		    def operator<(num : ushort) := (value<num.value);
		       ^

0 [0x0]: line: 107 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<[312] params(1) in file: lib\support\/0.2.9//primitives.sharp:108:8: note:  
		    def operator<(num : short)  := (value<num.value);
		       ^

0 [0x0]: line: 108 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<[313] params(1) in file: lib\support\/0.2.9//primitives.sharp:109:8: note:  
		    def operator<(num : uchar)  := (value<num.value);
		       ^

0 [0x0]: line: 109 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<[314] params(1) in file: lib\support\/0.2.9//primitives.sharp:110:8: note:  
		    def operator<(num : char)   := (value<num.value);
		       ^

0 [0x0]: line: 110 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<[315] params(1) in file: lib\support\/0.2.9//primitives.sharp:111:8: note:  
		    def operator<(num : byte)   := (value<num.value);
		       ^

0 [0x0]: line: 111 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<[316] params(1) in file: lib\support\/0.2.9//primitives.sharp:112:8: note:  
		    def operator<(num : bool)   := (value<num.value);
		       ^

0 [0x0]: line: 112 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<[317] params(1) in file: lib\support\/0.2.9//primitives.sharp:113:8: note:  
		    def operator<(num : double)   := (value<num.value);
		       ^

0 [0x0]: line: 113 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<[318] params(1) in file: lib\support\/0.2.9//primitives.sharp:114:8: note:  
		    def operator<(num : var)    := (value<num);
		       ^

0 [0x0]: line: 114 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           lt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int64>.operator>[319] params(1) in file: lib\support\/0.2.9//primitives.sharp:116:8: note:  
		    def operator>(num : ulong)  := (value>num.value);
		       ^

0 [0x0]: line: 116 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>[320] params(1) in file: lib\support\/0.2.9//primitives.sharp:117:8: note:  
		    def operator>(num : long)   := (value>num.value);
		       ^

0 [0x0]: line: 117 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>[321] params(1) in file: lib\support\/0.2.9//primitives.sharp:118:8: note:  
		    def operator>(num : uint)   := (value>num.value);
		       ^

0 [0x0]: line: 118 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>[322] params(1) in file: lib\support\/0.2.9//primitives.sharp:119:8: note:  
		    def operator>(num : int)    := (value>num.value);
		       ^

0 [0x0]: line: 119 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>[323] params(1) in file: lib\support\/0.2.9//primitives.sharp:120:8: note:  
		    def operator>(num : ushort) := (value>num.value);
		       ^

0 [0x0]: line: 120 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>[324] params(1) in file: lib\support\/0.2.9//primitives.sharp:121:8: note:  
		    def operator>(num : short)  := (value>num.value);
		       ^

0 [0x0]: line: 121 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>[325] params(1) in file: lib\support\/0.2.9//primitives.sharp:122:8: note:  
		    def operator>(num : uchar)  := (value>num.value);
		       ^

0 [0x0]: line: 122 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>[326] params(1) in file: lib\support\/0.2.9//primitives.sharp:123:8: note:  
		    def operator>(num : char)   := (value>num.value);
		       ^

0 [0x0]: line: 123 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>[327] params(1) in file: lib\support\/0.2.9//primitives.sharp:124:8: note:  
		    def operator>(num : byte)   := (value>num.value);
		       ^

0 [0x0]: line: 124 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>[328] params(1) in file: lib\support\/0.2.9//primitives.sharp:125:8: note:  
		    def operator>(num : bool)   := (value>num.value);
		       ^

0 [0x0]: line: 125 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>[329] params(1) in file: lib\support\/0.2.9//primitives.sharp:126:8: note:  
		    def operator>(num : double)   := (value>num.value);
		       ^

0 [0x0]: line: 126 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>[330] params(1) in file: lib\support\/0.2.9//primitives.sharp:127:8: note:  
		    def operator>(num : var)    := (value>num);
		       ^

0 [0x0]: line: 127 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int64>.operator<=[331] params(1) in file: lib\support\/0.2.9//primitives.sharp:129:8: note:  
		    def operator<=(num : ulong)  := (value>=num.value);
		       ^

0 [0x0]: line: 129 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<=[332] params(1) in file: lib\support\/0.2.9//primitives.sharp:130:8: note:  
		    def operator<=(num : long)   := (value>=num.value);
		       ^

0 [0x0]: line: 130 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<=[333] params(1) in file: lib\support\/0.2.9//primitives.sharp:131:8: note:  
		    def operator<=(num : uint)   := (value>=num.value);
		       ^

0 [0x0]: line: 131 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<=[334] params(1) in file: lib\support\/0.2.9//primitives.sharp:132:8: note:  
		    def operator<=(num : int)    := (value>=num.value);
		       ^

0 [0x0]: line: 132 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<=[335] params(1) in file: lib\support\/0.2.9//primitives.sharp:133:8: note:  
		    def operator<=(num : ushort) := (value>=num.value);
		       ^

0 [0x0]: line: 133 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<=[336] params(1) in file: lib\support\/0.2.9//primitives.sharp:134:8: note:  
		    def operator<=(num : short)  := (value>=num.value);
		       ^

0 [0x0]: line: 134 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<=[337] params(1) in file: lib\support\/0.2.9//primitives.sharp:135:8: note:  
		    def operator<=(num : uchar)  := (value>=num.value);
		       ^

0 [0x0]: line: 135 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<=[338] params(1) in file: lib\support\/0.2.9//primitives.sharp:136:8: note:  
		    def operator<=(num : char)   := (value>=num.value);
		       ^

0 [0x0]: line: 136 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<=[339] params(1) in file: lib\support\/0.2.9//primitives.sharp:137:8: note:  
		    def operator<=(num : byte)   := (value>=num.value);
		       ^

0 [0x0]: line: 137 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<=[340] params(1) in file: lib\support\/0.2.9//primitives.sharp:138:8: note:  
		    def operator<=(num : bool)   := (value>=num.value);
		       ^

0 [0x0]: line: 138 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<=[341] params(1) in file: lib\support\/0.2.9//primitives.sharp:139:8: note:  
		    def operator<=(num : double)   := (value>=num.value);
		       ^

0 [0x0]: line: 139 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<=[342] params(1) in file: lib\support\/0.2.9//primitives.sharp:140:8: note:  
		    def operator<=(num : var)    := (value>=num);
		       ^

0 [0x0]: line: 140 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gte ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int64>.operator**[343] params(1) in file: lib\support\/0.2.9//primitives.sharp:142:8: note:  
		    def operator**(num : ulong)  := (value**num.value);
		       ^

0 [0x0]: line: 142 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator**[344] params(1) in file: lib\support\/0.2.9//primitives.sharp:143:8: note:  
		    def operator**(num : long)   := (value**num.value);
		       ^

0 [0x0]: line: 143 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator**[345] params(1) in file: lib\support\/0.2.9//primitives.sharp:144:8: note:  
		    def operator**(num : uint)   := (value**num.value);
		       ^

0 [0x0]: line: 144 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator**[346] params(1) in file: lib\support\/0.2.9//primitives.sharp:145:8: note:  
		    def operator**(num : int)    := (value**num.value);
		       ^

0 [0x0]: line: 145 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator**[347] params(1) in file: lib\support\/0.2.9//primitives.sharp:146:8: note:  
		    def operator**(num : ushort) := (value**num.value);
		       ^

0 [0x0]: line: 146 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator**[348] params(1) in file: lib\support\/0.2.9//primitives.sharp:147:8: note:  
		    def operator**(num : short)  := (value**num.value);
		       ^

0 [0x0]: line: 147 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator**[349] params(1) in file: lib\support\/0.2.9//primitives.sharp:148:8: note:  
		    def operator**(num : uchar)  := (value**num.value);
		       ^

0 [0x0]: line: 148 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator**[350] params(1) in file: lib\support\/0.2.9//primitives.sharp:149:8: note:  
		    def operator**(num : char)   := (value**num.value);
		       ^

0 [0x0]: line: 149 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator**[351] params(1) in file: lib\support\/0.2.9//primitives.sharp:150:8: note:  
		    def operator**(num : byte)   := (value**num.value);
		       ^

0 [0x0]: line: 150 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator**[352] params(1) in file: lib\support\/0.2.9//primitives.sharp:151:8: note:  
		    def operator**(num : bool)   := (value**num.value);
		       ^

0 [0x0]: line: 151 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator**[353] params(1) in file: lib\support\/0.2.9//primitives.sharp:152:8: note:  
		    def operator**(num : double)   := (value**num.value);
		       ^

0 [0x0]: line: 152 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator**[354] params(1) in file: lib\support\/0.2.9//primitives.sharp:153:8: note:  
		    def operator**(num : var)    := (value**num);
		       ^

0 [0x0]: line: 153 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           exp ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int64>.operator<<[355] params(1) in file: lib\support\/0.2.9//primitives.sharp:155:8: note:  
		    def operator<<(num : ulong)  := (value<<num.value);
		       ^

0 [0x0]: line: 155 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<<[356] params(1) in file: lib\support\/0.2.9//primitives.sharp:156:8: note:  
		    def operator<<(num : long)   := (value<<num.value);
		       ^

0 [0x0]: line: 156 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<<[357] params(1) in file: lib\support\/0.2.9//primitives.sharp:157:8: note:  
		    def operator<<(num : uint)   := (value<<num.value);
		       ^

0 [0x0]: line: 157 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<<[358] params(1) in file: lib\support\/0.2.9//primitives.sharp:158:8: note:  
		    def operator<<(num : int)    := (value<<num.value);
		       ^

0 [0x0]: line: 158 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<<[359] params(1) in file: lib\support\/0.2.9//primitives.sharp:159:8: note:  
		    def operator<<(num : ushort) := (value<<num.value);
		       ^

0 [0x0]: line: 159 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<<[360] params(1) in file: lib\support\/0.2.9//primitives.sharp:160:8: note:  
		    def operator<<(num : short)  := (value<<num.value);
		       ^

0 [0x0]: line: 160 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<<[361] params(1) in file: lib\support\/0.2.9//primitives.sharp:161:8: note:  
		    def operator<<(num : uchar)  := (value<<num.value);
		       ^

0 [0x0]: line: 161 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<<[362] params(1) in file: lib\support\/0.2.9//primitives.sharp:162:8: note:  
		    def operator<<(num : char)   := (value<<num.value);
		       ^

0 [0x0]: line: 162 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<<[363] params(1) in file: lib\support\/0.2.9//primitives.sharp:163:8: note:  
		    def operator<<(num : byte)   := (value<<num.value);
		       ^

0 [0x0]: line: 163 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<<[364] params(1) in file: lib\support\/0.2.9//primitives.sharp:164:8: note:  
		    def operator<<(num : bool)   := (value<<num.value);
		       ^

0 [0x0]: line: 164 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<<[365] params(1) in file: lib\support\/0.2.9//primitives.sharp:165:8: note:  
		    def operator<<(num : double)   := (value<<num.value);
		       ^

0 [0x0]: line: 165 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator<<[366] params(1) in file: lib\support\/0.2.9//primitives.sharp:166:8: note:  
		    def operator<<(num : var)    := (value<<num);
		       ^

0 [0x0]: line: 166 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shl ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int64>.operator>>[367] params(1) in file: lib\support\/0.2.9//primitives.sharp:168:8: note:  
		    def operator>>(num : ulong)  := (value>>num.value);
		       ^

0 [0x0]: line: 168 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>>[368] params(1) in file: lib\support\/0.2.9//primitives.sharp:169:8: note:  
		    def operator>>(num : long)   := (value>>num.value);
		       ^

0 [0x0]: line: 169 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>>[369] params(1) in file: lib\support\/0.2.9//primitives.sharp:170:8: note:  
		    def operator>>(num : uint)   := (value>>num.value);
		       ^

0 [0x0]: line: 170 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>>[370] params(1) in file: lib\support\/0.2.9//primitives.sharp:171:8: note:  
		    def operator>>(num : int)    := (value>>num.value);
		       ^

0 [0x0]: line: 171 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>>[371] params(1) in file: lib\support\/0.2.9//primitives.sharp:172:8: note:  
		    def operator>>(num : ushort) := (value>>num.value);
		       ^

0 [0x0]: line: 172 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>>[372] params(1) in file: lib\support\/0.2.9//primitives.sharp:173:8: note:  
		    def operator>>(num : short)  := (value>>num.value);
		       ^

0 [0x0]: line: 173 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>>[373] params(1) in file: lib\support\/0.2.9//primitives.sharp:174:8: note:  
		    def operator>>(num : uchar)  := (value>>num.value);
		       ^

0 [0x0]: line: 174 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>>[374] params(1) in file: lib\support\/0.2.9//primitives.sharp:175:8: note:  
		    def operator>>(num : char)   := (value>>num.value);
		       ^

0 [0x0]: line: 175 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>>[375] params(1) in file: lib\support\/0.2.9//primitives.sharp:176:8: note:  
		    def operator>>(num : byte)   := (value>>num.value);
		       ^

0 [0x0]: line: 176 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>>[376] params(1) in file: lib\support\/0.2.9//primitives.sharp:177:8: note:  
		    def operator>>(num : bool)   := (value>>num.value);
		       ^

0 [0x0]: line: 177 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>>[377] params(1) in file: lib\support\/0.2.9//primitives.sharp:178:8: note:  
		    def operator>>(num : double)   := (value>>num.value);
		       ^

0 [0x0]: line: 178 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator>>[378] params(1) in file: lib\support\/0.2.9//primitives.sharp:179:8: note:  
		    def operator>>(num : var)    := (value>>num);
		       ^

0 [0x0]: line: 179 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shr ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int64>.operator^[379] params(1) in file: lib\support\/0.2.9//primitives.sharp:181:8: note:  
		    def operator^(num : ulong)  := (value^num.value);
		       ^

0 [0x0]: line: 181 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator^[380] params(1) in file: lib\support\/0.2.9//primitives.sharp:182:8: note:  
		    def operator^(num : long)   := (value^num.value);
		       ^

0 [0x0]: line: 182 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator^[381] params(1) in file: lib\support\/0.2.9//primitives.sharp:183:8: note:  
		    def operator^(num : uint)   := (value^num.value);
		       ^

0 [0x0]: line: 183 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator^[382] params(1) in file: lib\support\/0.2.9//primitives.sharp:184:8: note:  
		    def operator^(num : int)    := (value^num.value);
		       ^

0 [0x0]: line: 184 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator^[383] params(1) in file: lib\support\/0.2.9//primitives.sharp:185:8: note:  
		    def operator^(num : ushort) := (value^num.value);
		       ^

0 [0x0]: line: 185 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator^[384] params(1) in file: lib\support\/0.2.9//primitives.sharp:186:8: note:  
		    def operator^(num : short)  := (value^num.value);
		       ^

0 [0x0]: line: 186 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator^[385] params(1) in file: lib\support\/0.2.9//primitives.sharp:187:8: note:  
		    def operator^(num : uchar)  := (value^num.value);
		       ^

0 [0x0]: line: 187 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator^[386] params(1) in file: lib\support\/0.2.9//primitives.sharp:188:8: note:  
		    def operator^(num : char)   := (value^num.value);
		       ^

0 [0x0]: line: 188 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator^[387] params(1) in file: lib\support\/0.2.9//primitives.sharp:189:8: note:  
		    def operator^(num : byte)   := (value^num.value);
		       ^

0 [0x0]: line: 189 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator^[388] params(1) in file: lib\support\/0.2.9//primitives.sharp:190:8: note:  
		    def operator^(num : bool)   := (value^num.value);
		       ^

0 [0x0]: line: 190 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator^[389] params(1) in file: lib\support\/0.2.9//primitives.sharp:191:8: note:  
		    def operator^(num : double)   := (value^num.value);
		       ^

0 [0x0]: line: 191 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator^[390] params(1) in file: lib\support\/0.2.9//primitives.sharp:192:8: note:  
		    def operator^(num : var)    := (value^num);
		       ^

0 [0x0]: line: 192 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           xor ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int64>.operator&[391] params(1) in file: lib\support\/0.2.9//primitives.sharp:194:8: note:  
		    def operator&(num : ulong)  := (value&num.value);
		       ^

0 [0x0]: line: 194 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator&[392] params(1) in file: lib\support\/0.2.9//primitives.sharp:195:8: note:  
		    def operator&(num : long)   := (value&num.value);
		       ^

0 [0x0]: line: 195 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator&[393] params(1) in file: lib\support\/0.2.9//primitives.sharp:196:8: note:  
		    def operator&(num : uint)   := (value&num.value);
		       ^

0 [0x0]: line: 196 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator&[394] params(1) in file: lib\support\/0.2.9//primitives.sharp:197:8: note:  
		    def operator&(num : int)    := (value&num.value);
		       ^

0 [0x0]: line: 197 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator&[395] params(1) in file: lib\support\/0.2.9//primitives.sharp:198:8: note:  
		    def operator&(num : ushort) := (value&num.value);
		       ^

0 [0x0]: line: 198 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator&[396] params(1) in file: lib\support\/0.2.9//primitives.sharp:199:8: note:  
		    def operator&(num : short)  := (value&num.value);
		       ^

0 [0x0]: line: 199 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator&[397] params(1) in file: lib\support\/0.2.9//primitives.sharp:200:8: note:  
		    def operator&(num : uchar)  := (value&num.value);
		       ^

0 [0x0]: line: 200 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator&[398] params(1) in file: lib\support\/0.2.9//primitives.sharp:201:8: note:  
		    def operator&(num : char)   := (value&num.value);
		       ^

0 [0x0]: line: 201 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator&[399] params(1) in file: lib\support\/0.2.9//primitives.sharp:202:8: note:  
		    def operator&(num : byte)   := (value&num.value);
		       ^

0 [0x0]: line: 202 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator&[400] params(1) in file: lib\support\/0.2.9//primitives.sharp:203:8: note:  
		    def operator&(num : bool)   := (value&num.value);
		       ^

0 [0x0]: line: 203 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator&[401] params(1) in file: lib\support\/0.2.9//primitives.sharp:204:8: note:  
		    def operator&(num : double)   := (value&num.value);
		       ^

0 [0x0]: line: 204 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator&[402] params(1) in file: lib\support\/0.2.9//primitives.sharp:205:8: note:  
		    def operator&(num : var)    := (value&num);
		       ^

0 [0x0]: line: 205 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           uand ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int64>.operator|[403] params(1) in file: lib\support\/0.2.9//primitives.sharp:207:8: note:  
		    def operator|(num : ulong)  := (value|num.value);
		       ^

0 [0x0]: line: 207 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator|[404] params(1) in file: lib\support\/0.2.9//primitives.sharp:208:8: note:  
		    def operator|(num : long)   := (value|num.value);
		       ^

0 [0x0]: line: 208 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator|[405] params(1) in file: lib\support\/0.2.9//primitives.sharp:209:8: note:  
		    def operator|(num : uint)   := (value|num.value);
		       ^

0 [0x0]: line: 209 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator|[406] params(1) in file: lib\support\/0.2.9//primitives.sharp:210:8: note:  
		    def operator|(num : int)    := (value|num.value);
		       ^

0 [0x0]: line: 210 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator|[407] params(1) in file: lib\support\/0.2.9//primitives.sharp:211:8: note:  
		    def operator|(num : ushort) := (value|num.value);
		       ^

0 [0x0]: line: 211 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator|[408] params(1) in file: lib\support\/0.2.9//primitives.sharp:212:8: note:  
		    def operator|(num : short)  := (value|num.value);
		       ^

0 [0x0]: line: 212 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator|[409] params(1) in file: lib\support\/0.2.9//primitives.sharp:213:8: note:  
		    def operator|(num : uchar)  := (value|num.value);
		       ^

0 [0x0]: line: 213 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator|[410] params(1) in file: lib\support\/0.2.9//primitives.sharp:214:8: note:  
		    def operator|(num : char)   := (value|num.value);
		       ^

0 [0x0]: line: 214 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator|[411] params(1) in file: lib\support\/0.2.9//primitives.sharp:215:8: note:  
		    def operator|(num : byte)   := (value|num.value);
		       ^

0 [0x0]: line: 215 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator|[412] params(1) in file: lib\support\/0.2.9//primitives.sharp:216:8: note:  
		    def operator|(num : bool)   := (value|num.value);
		       ^

0 [0x0]: line: 216 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator|[413] params(1) in file: lib\support\/0.2.9//primitives.sharp:217:8: note:  
		    def operator|(num : double)   := (value|num.value);
		       ^

0 [0x0]: line: 217 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int64>.operator|[414] params(1) in file: lib\support\/0.2.9//primitives.sharp:218:8: note:  
		    def operator|(num : var)    := (value|num);
		       ^

0 [0x0]: line: 218 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           or ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int64>.operator!=[415] params(1) in file: lib\support\/0.2.9//primitives.sharp:220:8: note:  
		    def operator!=(num : var) := value!=num;
		       ^

0 [0x0]: line: 220 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           tne ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int64>.operator==[416] params(1) in file: lib\support\/0.2.9//primitives.sharp:221:8: note:  
		    def operator==(num : var) := value==num;
		       ^

0 [0x0]: line: 221 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           test ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int64>.operator=[417] params(1) in file: lib\support\/0.2.9//primitives.sharp:222:8: note:  
		    def operator=(num : var) := value=num;
		       ^

0 [0x0]: line: 222 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           loadval ebx   
5 [0x5]:           mov64 ebx, ebx   
6 [0x6]:           movi #0, adx   
8 [0x8]:           rmov adx, ebx   
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std#integer<_int64>.to_string[418] params(0) in file: lib\support\/0.2.9//primitives.sharp:224:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 225 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           newstr @55 //    
4 [0x4]:           call @3546 // <std#string.string>   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           rstore ebx   
12 [0xc]:           call @3582 // <std#string.operator+>   
13 [0xd]:           popobj2    
14 [0xe]:           returnobj   
15 [0xf]:           ret   


function: std#integer<_int64>.parse[419] params(1) in file: lib\support\/0.2.9//primitives.sharp:228:15: note:  
		    static def parse(s: string) : native_type {
		              ^

0 [0x0]: line: 229 movi #0, ebx   
2 [0x2]:           mov64 ebx, ebx   
3 [0x3]:           smovr_2 ebx, fp+1   
4 [0x4]: line: 231 movi #0, ebx   
6 [0x6]:           movr cmt, ebx   
7 [0x7]:           jne 14   
8 [0x8]: line: 232 pushl 0   
9 [0x9]:           call @1898 // <std#__srt_global.strtod>   
10 [0xa]:           loadval ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   
13 [0xd]:           jmp @104   
14 [0xe]: line: 234 istorel 0, fp+2   
16 [0x10]: line: 235 istorel 0, fp+3   
18 [0x12]: line: 236 pushl 0   
19 [0x13]:           call @3587 // <std#string.size>   
20 [0x14]:           ipopl 4   
21 [0x15]: line: 238 pushl 0   
22 [0x16]:           istore 0   
24 [0x18]:           call @3568 // <std#string.at>   
25 [0x19]:           loadval ebx   
26 [0x1a]:           rstore ebx   
27 [0x1b]:           movi #45, ebx   
29 [0x1d]:           loadval ecx   
30 [0x1e]:           test ecx, ebx   
31 [0x1f]:           movr ebx, cmt   
32 [0x20]:           movr cmt, ebx   
33 [0x21]:           jne 38   
34 [0x22]: line: 239 istorel 1, fp+3   
36 [0x24]: line: 240 istorel 1, fp+2   
38 [0x26]:           nop   
39 [0x27]: line: 243 ipushl #2   
40 [0x28]:           loadl ebx, fp+4   
41 [0x29]:           loadval ecx   
42 [0x2a]:           lt ecx, ebx   
43 [0x2b]:           movr ebx, cmt   
44 [0x2c]:           movr cmt, ebx   
45 [0x2d]:           jne 93   
46 [0x2e]: line: 244 pushl 0   
47 [0x2f]:           ipushl #2   
48 [0x30]:           call @3568 // <std#string.at>   
49 [0x31]:           call @3209 // <std#char.is_digit>   
50 [0x32]:           loadval ebx   
51 [0x33]:           not ebx, ebx   
52 [0x34]:           movr cmt, ebx   
53 [0x35]:           jne 68   
54 [0x36]: line: 245 new_class @4 // std#illegal_argument_exception   
56 [0x38]:           dup    
57 [0x39]:           new_class @75 // std#string   
59 [0x3b]:           dup    
60 [0x3c]:           newstr @561 // illegal char in string:    
61 [0x3d]:           call @3546 // <std#string.string>   
62 [0x3e]:           pushl 0   
63 [0x3f]:           ipushl #2   
64 [0x40]:           call @3568 // <std#string.at>   
65 [0x41]:           call @3579 // <std#string.operator+>   
66 [0x42]:           call @1962 // <std#illegal_argument_exception.illegal_argument_exception>   
67 [0x43]:           throw    
68 [0x44]:           nop   
69 [0x45]: line: 249 movi #10, ebx   
71 [0x47]:           loadl ecx, fp+1   
72 [0x48]:           mul ecx, ebx -> ebx   
73 [0x49]:           mov64 ebx, ebx   
74 [0x4a]:           smovr_2 ebx, fp+1   
75 [0x4b]: line: 250 pushl 0   
76 [0x4c]:           loadl ebx, fp+2   
77 [0x4d]:           movr egx, ebx   
78 [0x4e]:           inc ebx   
79 [0x4f]:           smovr_2 ebx, fp+2   
80 [0x50]:           rstore egx   
81 [0x51]:           call @3568 // <std#string.at>   
82 [0x52]:           loadval ebx   
83 [0x53]:           rstore ebx   
84 [0x54]:           movi #48, ebx   
86 [0x56]:           loadval ecx   
87 [0x57]:           sub ecx, ebx -> ebx   
88 [0x58]:           loadl ecx, fp+1   
89 [0x59]:           add ecx, ebx -> ebx   
90 [0x5a]:           mov64 ebx, ebx   
91 [0x5b]:           smovr_2 ebx, fp+1   
92 [0x5c]:           jmp @39   
93 [0x5d]: line: 252 loadl ebx, fp+3   
94 [0x5e]:           movr cmt, ebx   
95 [0x5f]:           jne 100   
96 [0x60]: line: 253 loadl ebx, fp+1   
97 [0x61]:           neg ebx, ebx   
98 [0x62]:           mov64 ebx, ebx   
99 [0x63]:           smovr_2 ebx, fp+1   
100 [0x64]:           nop   
101 [0x65]: line: 254 loadl ebx, fp+1   
102 [0x66]:           return_val ebx   
103 [0x67]:           ret   
104 [0x68]:           nop   


function: std#integer<_int64>.to_ulong[420] params(0) in file: lib\support\/0.2.9//primitives.sharp:258:8: note:  
		    def to_ulong() := new ulong { value };
		       ^

0 [0x0]: line: 258 new_class @53 // std#ulong   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu64 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int64>.to_long[421] params(0) in file: lib\support\/0.2.9//primitives.sharp:259:8: note:  
		    def to_long() := new long { value };
		       ^

0 [0x0]: line: 259 new_class @54 // std#long   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov64 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int64>.to_uint[422] params(0) in file: lib\support\/0.2.9//primitives.sharp:260:8: note:  
		    def to_uint() := new uint { value };
		       ^

0 [0x0]: line: 260 new_class @55 // std#uint   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu32 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int64>.to_int[423] params(0) in file: lib\support\/0.2.9//primitives.sharp:261:8: note:  
		    def to_int() := new int { value };
		       ^

0 [0x0]: line: 261 new_class @56 // std#int   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov32 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int64>.to_ushort[424] params(0) in file: lib\support\/0.2.9//primitives.sharp:262:8: note:  
		    def to_ushort() := new ushort { value };
		       ^

0 [0x0]: line: 262 new_class @57 // std#ushort   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu16 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int64>.to_short[425] params(0) in file: lib\support\/0.2.9//primitives.sharp:263:8: note:  
		    def to_short() := new short { value };
		       ^

0 [0x0]: line: 263 new_class @58 // std#short   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov16 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int64>.to_uchar[426] params(0) in file: lib\support\/0.2.9//primitives.sharp:264:8: note:  
		    def to_uchar() := new uchar { value };
		       ^

0 [0x0]: line: 264 new_class @59 // std#uchar   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int64>.to_char[427] params(0) in file: lib\support\/0.2.9//primitives.sharp:265:8: note:  
		    def to_char() := new char { value };
		       ^

0 [0x0]: line: 265 new_class @60 // std#char   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int64>.to_byte[428] params(0) in file: lib\support\/0.2.9//primitives.sharp:266:8: note:  
		    def to_byte() := new byte { value };
		       ^

0 [0x0]: line: 266 new_class @61 // std#byte   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int64>.to_bool[429] params(0) in file: lib\support\/0.2.9//primitives.sharp:267:8: note:  
		    def to_bool() := new bool { value };
		       ^

0 [0x0]: line: 267 new_class @62 // std#bool   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int64>.to_double[430] params(0) in file: lib\support\/0.2.9//primitives.sharp:268:8: note:  
		    def to_double() := new double { value };
		       ^

0 [0x0]: line: 268 new_class @63 // std#double   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int64>.get_value[431] params(0) in file: lib\support\/0.2.9//primitives.sharp:270:8: note:  
		    def get_value() := value;
		       ^

0 [0x0]: line: 270 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


constructor: std#integer<_int64>.integer[432] params(0) in file: lib\support\/0.2.9//primitives.sharp:5:13: note:  
		public class integer<native_type> {
		            ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#integer<_uint32>.integer[433] params(1) in file: lib\support\/0.2.9//primitives.sharp:8:12: note:  
		    integer(initial_val : var) {
		           ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 9 ipushl #1   
2 [0x2]:         movl 0   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         movu32 ebx, ebx   
7 [0x7]:         movi #0, adx   
9 [0x9]:         rmov adx, ebx   
10 [0xa]:         ret   


function: std#integer<_uint32>.hash[434] params(0) in file: lib\support\/0.2.9//primitives.sharp:12:8: note:  
		    def hash() : _int64 {
		       ^

0 [0x0]: line: 13 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          return_val ebx   
7 [0x7]:          ret   


overload function: std#integer<_uint32>.operator!=[435] params(1) in file: lib\support\/0.2.9//primitives.sharp:16:8: note:  
		    def operator!=(num : ulong) := (value!=num.value);
		       ^

0 [0x0]: line: 16 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator==[436] params(1) in file: lib\support\/0.2.9//primitives.sharp:17:8: note:  
		    def operator==(num : ulong) := (value==num.value);
		       ^

0 [0x0]: line: 17 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator!=[437] params(1) in file: lib\support\/0.2.9//primitives.sharp:18:8: note:  
		    def operator!=(num : long) := (value!=num.value);
		       ^

0 [0x0]: line: 18 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator==[438] params(1) in file: lib\support\/0.2.9//primitives.sharp:19:8: note:  
		    def operator==(num : long) := (value==num.value);
		       ^

0 [0x0]: line: 19 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator!=[439] params(1) in file: lib\support\/0.2.9//primitives.sharp:20:8: note:  
		    def operator!=(num : uint) := (value!=num.value);
		       ^

0 [0x0]: line: 20 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator==[440] params(1) in file: lib\support\/0.2.9//primitives.sharp:21:8: note:  
		    def operator==(num : uint) := (value==num.value);
		       ^

0 [0x0]: line: 21 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator!=[441] params(1) in file: lib\support\/0.2.9//primitives.sharp:22:8: note:  
		    def operator!=(num : int) := (value!=num.value);
		       ^

0 [0x0]: line: 22 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator==[442] params(1) in file: lib\support\/0.2.9//primitives.sharp:23:8: note:  
		    def operator==(num : int) := (value==num.value);
		       ^

0 [0x0]: line: 23 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator!=[443] params(1) in file: lib\support\/0.2.9//primitives.sharp:24:8: note:  
		    def operator!=(num : ushort) := (value!=num.value);
		       ^

0 [0x0]: line: 24 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator==[444] params(1) in file: lib\support\/0.2.9//primitives.sharp:25:8: note:  
		    def operator==(num : ushort) := (value==num.value);
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator!=[445] params(1) in file: lib\support\/0.2.9//primitives.sharp:26:8: note:  
		    def operator!=(num : short) := (value!=num.value);
		       ^

0 [0x0]: line: 26 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator==[446] params(1) in file: lib\support\/0.2.9//primitives.sharp:27:8: note:  
		    def operator==(num : short) := (value==num.value);
		       ^

0 [0x0]: line: 27 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator!=[447] params(1) in file: lib\support\/0.2.9//primitives.sharp:28:8: note:  
		    def operator!=(num : uchar) := (value!=num.value);
		       ^

0 [0x0]: line: 28 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator==[448] params(1) in file: lib\support\/0.2.9//primitives.sharp:29:8: note:  
		    def operator==(num : uchar) := (value==num.value);
		       ^

0 [0x0]: line: 29 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator!=[449] params(1) in file: lib\support\/0.2.9//primitives.sharp:30:8: note:  
		    def operator!=(num : char) := (value!=num.value);
		       ^

0 [0x0]: line: 30 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator==[450] params(1) in file: lib\support\/0.2.9//primitives.sharp:31:8: note:  
		    def operator==(num : char) := (value==num.value);
		       ^

0 [0x0]: line: 31 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator!=[451] params(1) in file: lib\support\/0.2.9//primitives.sharp:32:8: note:  
		    def operator!=(num : byte) := (value!=num.value);
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator==[452] params(1) in file: lib\support\/0.2.9//primitives.sharp:33:8: note:  
		    def operator==(num : byte) := (value==num.value);
		       ^

0 [0x0]: line: 33 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator!=[453] params(1) in file: lib\support\/0.2.9//primitives.sharp:34:8: note:  
		    def operator!=(num : bool) := (value!=num.value);
		       ^

0 [0x0]: line: 34 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator==[454] params(1) in file: lib\support\/0.2.9//primitives.sharp:35:8: note:  
		    def operator==(num : bool) := (value==num.value);
		       ^

0 [0x0]: line: 35 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator==[455] params(1) in file: lib\support\/0.2.9//primitives.sharp:36:8: note:  
		    def operator==(num : double) := (value==num.value);
		       ^

0 [0x0]: line: 36 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator+[456] params(1) in file: lib\support\/0.2.9//primitives.sharp:38:8: note:  
		    def operator+(num : ulong)  := (value+num.value);
		       ^

0 [0x0]: line: 38 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator+[457] params(1) in file: lib\support\/0.2.9//primitives.sharp:39:8: note:  
		    def operator+(num : long)   := (value+num.value);
		       ^

0 [0x0]: line: 39 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator+[458] params(1) in file: lib\support\/0.2.9//primitives.sharp:40:8: note:  
		    def operator+(num : uint)   := (value+num.value);
		       ^

0 [0x0]: line: 40 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator+[459] params(1) in file: lib\support\/0.2.9//primitives.sharp:41:8: note:  
		    def operator+(num : int)    := (value+num.value);
		       ^

0 [0x0]: line: 41 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator+[460] params(1) in file: lib\support\/0.2.9//primitives.sharp:42:8: note:  
		    def operator+(num : ushort) := (value+num.value);
		       ^

0 [0x0]: line: 42 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator+[461] params(1) in file: lib\support\/0.2.9//primitives.sharp:43:8: note:  
		    def operator+(num : short)  := (value+num.value);
		       ^

0 [0x0]: line: 43 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator+[462] params(1) in file: lib\support\/0.2.9//primitives.sharp:44:8: note:  
		    def operator+(num : uchar)  := (value+num.value);
		       ^

0 [0x0]: line: 44 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator+[463] params(1) in file: lib\support\/0.2.9//primitives.sharp:45:8: note:  
		    def operator+(num : char)   := (value+num.value);
		       ^

0 [0x0]: line: 45 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator+[464] params(1) in file: lib\support\/0.2.9//primitives.sharp:46:8: note:  
		    def operator+(num : byte)   := (value+num.value);
		       ^

0 [0x0]: line: 46 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator+[465] params(1) in file: lib\support\/0.2.9//primitives.sharp:47:8: note:  
		    def operator+(num : bool)   := (value+num.value);
		       ^

0 [0x0]: line: 47 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator+[466] params(1) in file: lib\support\/0.2.9//primitives.sharp:48:8: note:  
		    def operator+(num : double)   := (value+num.value);
		       ^

0 [0x0]: line: 48 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator+[467] params(1) in file: lib\support\/0.2.9//primitives.sharp:49:8: note:  
		    def operator+(num : var)    := (value+num);
		       ^

0 [0x0]: line: 49 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          add ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint32>.operator-[468] params(1) in file: lib\support\/0.2.9//primitives.sharp:51:8: note:  
		    def operator-(num : ulong)  := (value-num.value);
		       ^

0 [0x0]: line: 51 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator-[469] params(1) in file: lib\support\/0.2.9//primitives.sharp:52:8: note:  
		    def operator-(num : long)   := (value-num.value);
		       ^

0 [0x0]: line: 52 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator-[470] params(1) in file: lib\support\/0.2.9//primitives.sharp:53:8: note:  
		    def operator-(num : uint)   := (value-num.value);
		       ^

0 [0x0]: line: 53 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator-[471] params(1) in file: lib\support\/0.2.9//primitives.sharp:54:8: note:  
		    def operator-(num : int)    := (value-num.value);
		       ^

0 [0x0]: line: 54 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator-[472] params(1) in file: lib\support\/0.2.9//primitives.sharp:55:8: note:  
		    def operator-(num : ushort) := (value-num.value);
		       ^

0 [0x0]: line: 55 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator-[473] params(1) in file: lib\support\/0.2.9//primitives.sharp:56:8: note:  
		    def operator-(num : short)  := (value-num.value);
		       ^

0 [0x0]: line: 56 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator-[474] params(1) in file: lib\support\/0.2.9//primitives.sharp:57:8: note:  
		    def operator-(num : uchar)  := (value-num.value);
		       ^

0 [0x0]: line: 57 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator-[475] params(1) in file: lib\support\/0.2.9//primitives.sharp:58:8: note:  
		    def operator-(num : char)   := (value-num.value);
		       ^

0 [0x0]: line: 58 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator-[476] params(1) in file: lib\support\/0.2.9//primitives.sharp:59:8: note:  
		    def operator-(num : byte)   := (value-num.value);
		       ^

0 [0x0]: line: 59 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator-[477] params(1) in file: lib\support\/0.2.9//primitives.sharp:60:8: note:  
		    def operator-(num : bool)   := (value-num.value);
		       ^

0 [0x0]: line: 60 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator-[478] params(1) in file: lib\support\/0.2.9//primitives.sharp:61:8: note:  
		    def operator-(num : double)   := (value-num.value);
		       ^

0 [0x0]: line: 61 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator-[479] params(1) in file: lib\support\/0.2.9//primitives.sharp:62:8: note:  
		    def operator-(num : var)    := (value-num);
		       ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          sub ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint32>.operator*[480] params(1) in file: lib\support\/0.2.9//primitives.sharp:64:8: note:  
		    def operator*(num : ulong)  := (value*num.value);
		       ^

0 [0x0]: line: 64 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator*[481] params(1) in file: lib\support\/0.2.9//primitives.sharp:65:8: note:  
		    def operator*(num : long)   := (value*num.value);
		       ^

0 [0x0]: line: 65 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator*[482] params(1) in file: lib\support\/0.2.9//primitives.sharp:66:8: note:  
		    def operator*(num : uint)   := (value*num.value);
		       ^

0 [0x0]: line: 66 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator*[483] params(1) in file: lib\support\/0.2.9//primitives.sharp:67:8: note:  
		    def operator*(num : int)    := (value*num.value);
		       ^

0 [0x0]: line: 67 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator*[484] params(1) in file: lib\support\/0.2.9//primitives.sharp:68:8: note:  
		    def operator*(num : ushort) := (value*num.value);
		       ^

0 [0x0]: line: 68 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator*[485] params(1) in file: lib\support\/0.2.9//primitives.sharp:69:8: note:  
		    def operator*(num : short)  := (value*num.value);
		       ^

0 [0x0]: line: 69 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator*[486] params(1) in file: lib\support\/0.2.9//primitives.sharp:70:8: note:  
		    def operator*(num : uchar)  := (value*num.value);
		       ^

0 [0x0]: line: 70 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator*[487] params(1) in file: lib\support\/0.2.9//primitives.sharp:71:8: note:  
		    def operator*(num : char)   := (value*num.value);
		       ^

0 [0x0]: line: 71 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator*[488] params(1) in file: lib\support\/0.2.9//primitives.sharp:72:8: note:  
		    def operator*(num : byte)   := (value*num.value);
		       ^

0 [0x0]: line: 72 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator*[489] params(1) in file: lib\support\/0.2.9//primitives.sharp:73:8: note:  
		    def operator*(num : bool)   := (value*num.value);
		       ^

0 [0x0]: line: 73 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator*[490] params(1) in file: lib\support\/0.2.9//primitives.sharp:74:8: note:  
		    def operator*(num : double)   := (value*num.value);
		       ^

0 [0x0]: line: 74 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator*[491] params(1) in file: lib\support\/0.2.9//primitives.sharp:75:8: note:  
		    def operator*(num : var)    := (value*num);
		       ^

0 [0x0]: line: 75 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          mul ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint32>.operator/[492] params(1) in file: lib\support\/0.2.9//primitives.sharp:77:8: note:  
		    def operator/(num : ulong)  := (value/num.value);
		       ^

0 [0x0]: line: 77 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator/[493] params(1) in file: lib\support\/0.2.9//primitives.sharp:78:8: note:  
		    def operator/(num : long)   := (value/num.value);
		       ^

0 [0x0]: line: 78 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator/[494] params(1) in file: lib\support\/0.2.9//primitives.sharp:79:8: note:  
		    def operator/(num : uint)   := (value/num.value);
		       ^

0 [0x0]: line: 79 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator/[495] params(1) in file: lib\support\/0.2.9//primitives.sharp:80:8: note:  
		    def operator/(num : int)    := (value/num.value);
		       ^

0 [0x0]: line: 80 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator/[496] params(1) in file: lib\support\/0.2.9//primitives.sharp:81:8: note:  
		    def operator/(num : ushort) := (value/num.value);
		       ^

0 [0x0]: line: 81 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator/[497] params(1) in file: lib\support\/0.2.9//primitives.sharp:82:8: note:  
		    def operator/(num : short)  := (value/num.value);
		       ^

0 [0x0]: line: 82 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator/[498] params(1) in file: lib\support\/0.2.9//primitives.sharp:83:8: note:  
		    def operator/(num : uchar)  := (value/num.value);
		       ^

0 [0x0]: line: 83 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator/[499] params(1) in file: lib\support\/0.2.9//primitives.sharp:84:8: note:  
		    def operator/(num : char)   := (value/num.value);
		       ^

0 [0x0]: line: 84 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator/[500] params(1) in file: lib\support\/0.2.9//primitives.sharp:85:8: note:  
		    def operator/(num : byte)   := (value/num.value);
		       ^

0 [0x0]: line: 85 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator/[501] params(1) in file: lib\support\/0.2.9//primitives.sharp:86:8: note:  
		    def operator/(num : bool)   := (value/num.value);
		       ^

0 [0x0]: line: 86 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator/[502] params(1) in file: lib\support\/0.2.9//primitives.sharp:87:8: note:  
		    def operator/(num : double)   := (value/num.value);
		       ^

0 [0x0]: line: 87 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator/[503] params(1) in file: lib\support\/0.2.9//primitives.sharp:88:8: note:  
		    def operator/(num : var)    := (value/num);
		       ^

0 [0x0]: line: 88 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          div ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint32>.operator%[504] params(1) in file: lib\support\/0.2.9//primitives.sharp:90:8: note:  
		    def operator%(num : ulong)  := (value%num.value);
		       ^

0 [0x0]: line: 90 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator%[505] params(1) in file: lib\support\/0.2.9//primitives.sharp:91:8: note:  
		    def operator%(num : long)   := (value%num.value);
		       ^

0 [0x0]: line: 91 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator%[506] params(1) in file: lib\support\/0.2.9//primitives.sharp:92:8: note:  
		    def operator%(num : uint)   := (value%num.value);
		       ^

0 [0x0]: line: 92 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator%[507] params(1) in file: lib\support\/0.2.9//primitives.sharp:93:8: note:  
		    def operator%(num : int)    := (value%num.value);
		       ^

0 [0x0]: line: 93 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator%[508] params(1) in file: lib\support\/0.2.9//primitives.sharp:94:8: note:  
		    def operator%(num : ushort) := (value%num.value);
		       ^

0 [0x0]: line: 94 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator%[509] params(1) in file: lib\support\/0.2.9//primitives.sharp:95:8: note:  
		    def operator%(num : short)  := (value%num.value);
		       ^

0 [0x0]: line: 95 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator%[510] params(1) in file: lib\support\/0.2.9//primitives.sharp:96:8: note:  
		    def operator%(num : uchar)  := (value%num.value);
		       ^

0 [0x0]: line: 96 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator%[511] params(1) in file: lib\support\/0.2.9//primitives.sharp:97:8: note:  
		    def operator%(num : char)   := (value%num.value);
		       ^

0 [0x0]: line: 97 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator%[512] params(1) in file: lib\support\/0.2.9//primitives.sharp:98:8: note:  
		    def operator%(num : byte)   := (value%num.value);
		       ^

0 [0x0]: line: 98 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator%[513] params(1) in file: lib\support\/0.2.9//primitives.sharp:99:8: note:  
		    def operator%(num : bool)   := (value%num.value);
		       ^

0 [0x0]: line: 99 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint32>.operator%[514] params(1) in file: lib\support\/0.2.9//primitives.sharp:100:8: note:  
		    def operator%(num : double)   := (value%num.value);
		       ^

0 [0x0]: line: 100 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator%[515] params(1) in file: lib\support\/0.2.9//primitives.sharp:101:8: note:  
		    def operator%(num : var)    := (value%num);
		       ^

0 [0x0]: line: 101 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           mod ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint32>.operator<[516] params(1) in file: lib\support\/0.2.9//primitives.sharp:103:8: note:  
		    def operator<(num : ulong)  := (value<num.value);
		       ^

0 [0x0]: line: 103 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<[517] params(1) in file: lib\support\/0.2.9//primitives.sharp:104:8: note:  
		    def operator<(num : long)   := (value<num.value);
		       ^

0 [0x0]: line: 104 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<[518] params(1) in file: lib\support\/0.2.9//primitives.sharp:105:8: note:  
		    def operator<(num : uint)   := (value<num.value);
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<[519] params(1) in file: lib\support\/0.2.9//primitives.sharp:106:8: note:  
		    def operator<(num : int)    := (value<num.value);
		       ^

0 [0x0]: line: 106 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<[520] params(1) in file: lib\support\/0.2.9//primitives.sharp:107:8: note:  
		    def operator<(num : ushort) := (value<num.value);
		       ^

0 [0x0]: line: 107 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<[521] params(1) in file: lib\support\/0.2.9//primitives.sharp:108:8: note:  
		    def operator<(num : short)  := (value<num.value);
		       ^

0 [0x0]: line: 108 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<[522] params(1) in file: lib\support\/0.2.9//primitives.sharp:109:8: note:  
		    def operator<(num : uchar)  := (value<num.value);
		       ^

0 [0x0]: line: 109 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<[523] params(1) in file: lib\support\/0.2.9//primitives.sharp:110:8: note:  
		    def operator<(num : char)   := (value<num.value);
		       ^

0 [0x0]: line: 110 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<[524] params(1) in file: lib\support\/0.2.9//primitives.sharp:111:8: note:  
		    def operator<(num : byte)   := (value<num.value);
		       ^

0 [0x0]: line: 111 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<[525] params(1) in file: lib\support\/0.2.9//primitives.sharp:112:8: note:  
		    def operator<(num : bool)   := (value<num.value);
		       ^

0 [0x0]: line: 112 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<[526] params(1) in file: lib\support\/0.2.9//primitives.sharp:113:8: note:  
		    def operator<(num : double)   := (value<num.value);
		       ^

0 [0x0]: line: 113 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<[527] params(1) in file: lib\support\/0.2.9//primitives.sharp:114:8: note:  
		    def operator<(num : var)    := (value<num);
		       ^

0 [0x0]: line: 114 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           lt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint32>.operator>[528] params(1) in file: lib\support\/0.2.9//primitives.sharp:116:8: note:  
		    def operator>(num : ulong)  := (value>num.value);
		       ^

0 [0x0]: line: 116 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>[529] params(1) in file: lib\support\/0.2.9//primitives.sharp:117:8: note:  
		    def operator>(num : long)   := (value>num.value);
		       ^

0 [0x0]: line: 117 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>[530] params(1) in file: lib\support\/0.2.9//primitives.sharp:118:8: note:  
		    def operator>(num : uint)   := (value>num.value);
		       ^

0 [0x0]: line: 118 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>[531] params(1) in file: lib\support\/0.2.9//primitives.sharp:119:8: note:  
		    def operator>(num : int)    := (value>num.value);
		       ^

0 [0x0]: line: 119 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>[532] params(1) in file: lib\support\/0.2.9//primitives.sharp:120:8: note:  
		    def operator>(num : ushort) := (value>num.value);
		       ^

0 [0x0]: line: 120 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>[533] params(1) in file: lib\support\/0.2.9//primitives.sharp:121:8: note:  
		    def operator>(num : short)  := (value>num.value);
		       ^

0 [0x0]: line: 121 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>[534] params(1) in file: lib\support\/0.2.9//primitives.sharp:122:8: note:  
		    def operator>(num : uchar)  := (value>num.value);
		       ^

0 [0x0]: line: 122 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>[535] params(1) in file: lib\support\/0.2.9//primitives.sharp:123:8: note:  
		    def operator>(num : char)   := (value>num.value);
		       ^

0 [0x0]: line: 123 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>[536] params(1) in file: lib\support\/0.2.9//primitives.sharp:124:8: note:  
		    def operator>(num : byte)   := (value>num.value);
		       ^

0 [0x0]: line: 124 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>[537] params(1) in file: lib\support\/0.2.9//primitives.sharp:125:8: note:  
		    def operator>(num : bool)   := (value>num.value);
		       ^

0 [0x0]: line: 125 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>[538] params(1) in file: lib\support\/0.2.9//primitives.sharp:126:8: note:  
		    def operator>(num : double)   := (value>num.value);
		       ^

0 [0x0]: line: 126 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>[539] params(1) in file: lib\support\/0.2.9//primitives.sharp:127:8: note:  
		    def operator>(num : var)    := (value>num);
		       ^

0 [0x0]: line: 127 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint32>.operator<=[540] params(1) in file: lib\support\/0.2.9//primitives.sharp:129:8: note:  
		    def operator<=(num : ulong)  := (value>=num.value);
		       ^

0 [0x0]: line: 129 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<=[541] params(1) in file: lib\support\/0.2.9//primitives.sharp:130:8: note:  
		    def operator<=(num : long)   := (value>=num.value);
		       ^

0 [0x0]: line: 130 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<=[542] params(1) in file: lib\support\/0.2.9//primitives.sharp:131:8: note:  
		    def operator<=(num : uint)   := (value>=num.value);
		       ^

0 [0x0]: line: 131 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<=[543] params(1) in file: lib\support\/0.2.9//primitives.sharp:132:8: note:  
		    def operator<=(num : int)    := (value>=num.value);
		       ^

0 [0x0]: line: 132 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<=[544] params(1) in file: lib\support\/0.2.9//primitives.sharp:133:8: note:  
		    def operator<=(num : ushort) := (value>=num.value);
		       ^

0 [0x0]: line: 133 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<=[545] params(1) in file: lib\support\/0.2.9//primitives.sharp:134:8: note:  
		    def operator<=(num : short)  := (value>=num.value);
		       ^

0 [0x0]: line: 134 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<=[546] params(1) in file: lib\support\/0.2.9//primitives.sharp:135:8: note:  
		    def operator<=(num : uchar)  := (value>=num.value);
		       ^

0 [0x0]: line: 135 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<=[547] params(1) in file: lib\support\/0.2.9//primitives.sharp:136:8: note:  
		    def operator<=(num : char)   := (value>=num.value);
		       ^

0 [0x0]: line: 136 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<=[548] params(1) in file: lib\support\/0.2.9//primitives.sharp:137:8: note:  
		    def operator<=(num : byte)   := (value>=num.value);
		       ^

0 [0x0]: line: 137 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<=[549] params(1) in file: lib\support\/0.2.9//primitives.sharp:138:8: note:  
		    def operator<=(num : bool)   := (value>=num.value);
		       ^

0 [0x0]: line: 138 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<=[550] params(1) in file: lib\support\/0.2.9//primitives.sharp:139:8: note:  
		    def operator<=(num : double)   := (value>=num.value);
		       ^

0 [0x0]: line: 139 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<=[551] params(1) in file: lib\support\/0.2.9//primitives.sharp:140:8: note:  
		    def operator<=(num : var)    := (value>=num);
		       ^

0 [0x0]: line: 140 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gte ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint32>.operator**[552] params(1) in file: lib\support\/0.2.9//primitives.sharp:142:8: note:  
		    def operator**(num : ulong)  := (value**num.value);
		       ^

0 [0x0]: line: 142 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator**[553] params(1) in file: lib\support\/0.2.9//primitives.sharp:143:8: note:  
		    def operator**(num : long)   := (value**num.value);
		       ^

0 [0x0]: line: 143 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator**[554] params(1) in file: lib\support\/0.2.9//primitives.sharp:144:8: note:  
		    def operator**(num : uint)   := (value**num.value);
		       ^

0 [0x0]: line: 144 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator**[555] params(1) in file: lib\support\/0.2.9//primitives.sharp:145:8: note:  
		    def operator**(num : int)    := (value**num.value);
		       ^

0 [0x0]: line: 145 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator**[556] params(1) in file: lib\support\/0.2.9//primitives.sharp:146:8: note:  
		    def operator**(num : ushort) := (value**num.value);
		       ^

0 [0x0]: line: 146 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator**[557] params(1) in file: lib\support\/0.2.9//primitives.sharp:147:8: note:  
		    def operator**(num : short)  := (value**num.value);
		       ^

0 [0x0]: line: 147 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator**[558] params(1) in file: lib\support\/0.2.9//primitives.sharp:148:8: note:  
		    def operator**(num : uchar)  := (value**num.value);
		       ^

0 [0x0]: line: 148 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator**[559] params(1) in file: lib\support\/0.2.9//primitives.sharp:149:8: note:  
		    def operator**(num : char)   := (value**num.value);
		       ^

0 [0x0]: line: 149 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator**[560] params(1) in file: lib\support\/0.2.9//primitives.sharp:150:8: note:  
		    def operator**(num : byte)   := (value**num.value);
		       ^

0 [0x0]: line: 150 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator**[561] params(1) in file: lib\support\/0.2.9//primitives.sharp:151:8: note:  
		    def operator**(num : bool)   := (value**num.value);
		       ^

0 [0x0]: line: 151 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator**[562] params(1) in file: lib\support\/0.2.9//primitives.sharp:152:8: note:  
		    def operator**(num : double)   := (value**num.value);
		       ^

0 [0x0]: line: 152 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator**[563] params(1) in file: lib\support\/0.2.9//primitives.sharp:153:8: note:  
		    def operator**(num : var)    := (value**num);
		       ^

0 [0x0]: line: 153 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           exp ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint32>.operator<<[564] params(1) in file: lib\support\/0.2.9//primitives.sharp:155:8: note:  
		    def operator<<(num : ulong)  := (value<<num.value);
		       ^

0 [0x0]: line: 155 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<<[565] params(1) in file: lib\support\/0.2.9//primitives.sharp:156:8: note:  
		    def operator<<(num : long)   := (value<<num.value);
		       ^

0 [0x0]: line: 156 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<<[566] params(1) in file: lib\support\/0.2.9//primitives.sharp:157:8: note:  
		    def operator<<(num : uint)   := (value<<num.value);
		       ^

0 [0x0]: line: 157 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<<[567] params(1) in file: lib\support\/0.2.9//primitives.sharp:158:8: note:  
		    def operator<<(num : int)    := (value<<num.value);
		       ^

0 [0x0]: line: 158 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<<[568] params(1) in file: lib\support\/0.2.9//primitives.sharp:159:8: note:  
		    def operator<<(num : ushort) := (value<<num.value);
		       ^

0 [0x0]: line: 159 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<<[569] params(1) in file: lib\support\/0.2.9//primitives.sharp:160:8: note:  
		    def operator<<(num : short)  := (value<<num.value);
		       ^

0 [0x0]: line: 160 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<<[570] params(1) in file: lib\support\/0.2.9//primitives.sharp:161:8: note:  
		    def operator<<(num : uchar)  := (value<<num.value);
		       ^

0 [0x0]: line: 161 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<<[571] params(1) in file: lib\support\/0.2.9//primitives.sharp:162:8: note:  
		    def operator<<(num : char)   := (value<<num.value);
		       ^

0 [0x0]: line: 162 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<<[572] params(1) in file: lib\support\/0.2.9//primitives.sharp:163:8: note:  
		    def operator<<(num : byte)   := (value<<num.value);
		       ^

0 [0x0]: line: 163 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<<[573] params(1) in file: lib\support\/0.2.9//primitives.sharp:164:8: note:  
		    def operator<<(num : bool)   := (value<<num.value);
		       ^

0 [0x0]: line: 164 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<<[574] params(1) in file: lib\support\/0.2.9//primitives.sharp:165:8: note:  
		    def operator<<(num : double)   := (value<<num.value);
		       ^

0 [0x0]: line: 165 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator<<[575] params(1) in file: lib\support\/0.2.9//primitives.sharp:166:8: note:  
		    def operator<<(num : var)    := (value<<num);
		       ^

0 [0x0]: line: 166 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shl ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint32>.operator>>[576] params(1) in file: lib\support\/0.2.9//primitives.sharp:168:8: note:  
		    def operator>>(num : ulong)  := (value>>num.value);
		       ^

0 [0x0]: line: 168 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>>[577] params(1) in file: lib\support\/0.2.9//primitives.sharp:169:8: note:  
		    def operator>>(num : long)   := (value>>num.value);
		       ^

0 [0x0]: line: 169 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>>[578] params(1) in file: lib\support\/0.2.9//primitives.sharp:170:8: note:  
		    def operator>>(num : uint)   := (value>>num.value);
		       ^

0 [0x0]: line: 170 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>>[579] params(1) in file: lib\support\/0.2.9//primitives.sharp:171:8: note:  
		    def operator>>(num : int)    := (value>>num.value);
		       ^

0 [0x0]: line: 171 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>>[580] params(1) in file: lib\support\/0.2.9//primitives.sharp:172:8: note:  
		    def operator>>(num : ushort) := (value>>num.value);
		       ^

0 [0x0]: line: 172 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>>[581] params(1) in file: lib\support\/0.2.9//primitives.sharp:173:8: note:  
		    def operator>>(num : short)  := (value>>num.value);
		       ^

0 [0x0]: line: 173 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>>[582] params(1) in file: lib\support\/0.2.9//primitives.sharp:174:8: note:  
		    def operator>>(num : uchar)  := (value>>num.value);
		       ^

0 [0x0]: line: 174 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>>[583] params(1) in file: lib\support\/0.2.9//primitives.sharp:175:8: note:  
		    def operator>>(num : char)   := (value>>num.value);
		       ^

0 [0x0]: line: 175 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>>[584] params(1) in file: lib\support\/0.2.9//primitives.sharp:176:8: note:  
		    def operator>>(num : byte)   := (value>>num.value);
		       ^

0 [0x0]: line: 176 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>>[585] params(1) in file: lib\support\/0.2.9//primitives.sharp:177:8: note:  
		    def operator>>(num : bool)   := (value>>num.value);
		       ^

0 [0x0]: line: 177 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>>[586] params(1) in file: lib\support\/0.2.9//primitives.sharp:178:8: note:  
		    def operator>>(num : double)   := (value>>num.value);
		       ^

0 [0x0]: line: 178 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator>>[587] params(1) in file: lib\support\/0.2.9//primitives.sharp:179:8: note:  
		    def operator>>(num : var)    := (value>>num);
		       ^

0 [0x0]: line: 179 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shr ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint32>.operator^[588] params(1) in file: lib\support\/0.2.9//primitives.sharp:181:8: note:  
		    def operator^(num : ulong)  := (value^num.value);
		       ^

0 [0x0]: line: 181 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator^[589] params(1) in file: lib\support\/0.2.9//primitives.sharp:182:8: note:  
		    def operator^(num : long)   := (value^num.value);
		       ^

0 [0x0]: line: 182 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator^[590] params(1) in file: lib\support\/0.2.9//primitives.sharp:183:8: note:  
		    def operator^(num : uint)   := (value^num.value);
		       ^

0 [0x0]: line: 183 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator^[591] params(1) in file: lib\support\/0.2.9//primitives.sharp:184:8: note:  
		    def operator^(num : int)    := (value^num.value);
		       ^

0 [0x0]: line: 184 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator^[592] params(1) in file: lib\support\/0.2.9//primitives.sharp:185:8: note:  
		    def operator^(num : ushort) := (value^num.value);
		       ^

0 [0x0]: line: 185 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator^[593] params(1) in file: lib\support\/0.2.9//primitives.sharp:186:8: note:  
		    def operator^(num : short)  := (value^num.value);
		       ^

0 [0x0]: line: 186 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator^[594] params(1) in file: lib\support\/0.2.9//primitives.sharp:187:8: note:  
		    def operator^(num : uchar)  := (value^num.value);
		       ^

0 [0x0]: line: 187 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator^[595] params(1) in file: lib\support\/0.2.9//primitives.sharp:188:8: note:  
		    def operator^(num : char)   := (value^num.value);
		       ^

0 [0x0]: line: 188 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator^[596] params(1) in file: lib\support\/0.2.9//primitives.sharp:189:8: note:  
		    def operator^(num : byte)   := (value^num.value);
		       ^

0 [0x0]: line: 189 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator^[597] params(1) in file: lib\support\/0.2.9//primitives.sharp:190:8: note:  
		    def operator^(num : bool)   := (value^num.value);
		       ^

0 [0x0]: line: 190 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator^[598] params(1) in file: lib\support\/0.2.9//primitives.sharp:191:8: note:  
		    def operator^(num : double)   := (value^num.value);
		       ^

0 [0x0]: line: 191 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator^[599] params(1) in file: lib\support\/0.2.9//primitives.sharp:192:8: note:  
		    def operator^(num : var)    := (value^num);
		       ^

0 [0x0]: line: 192 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           xor ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint32>.operator&[600] params(1) in file: lib\support\/0.2.9//primitives.sharp:194:8: note:  
		    def operator&(num : ulong)  := (value&num.value);
		       ^

0 [0x0]: line: 194 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator&[601] params(1) in file: lib\support\/0.2.9//primitives.sharp:195:8: note:  
		    def operator&(num : long)   := (value&num.value);
		       ^

0 [0x0]: line: 195 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator&[602] params(1) in file: lib\support\/0.2.9//primitives.sharp:196:8: note:  
		    def operator&(num : uint)   := (value&num.value);
		       ^

0 [0x0]: line: 196 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator&[603] params(1) in file: lib\support\/0.2.9//primitives.sharp:197:8: note:  
		    def operator&(num : int)    := (value&num.value);
		       ^

0 [0x0]: line: 197 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator&[604] params(1) in file: lib\support\/0.2.9//primitives.sharp:198:8: note:  
		    def operator&(num : ushort) := (value&num.value);
		       ^

0 [0x0]: line: 198 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator&[605] params(1) in file: lib\support\/0.2.9//primitives.sharp:199:8: note:  
		    def operator&(num : short)  := (value&num.value);
		       ^

0 [0x0]: line: 199 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator&[606] params(1) in file: lib\support\/0.2.9//primitives.sharp:200:8: note:  
		    def operator&(num : uchar)  := (value&num.value);
		       ^

0 [0x0]: line: 200 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator&[607] params(1) in file: lib\support\/0.2.9//primitives.sharp:201:8: note:  
		    def operator&(num : char)   := (value&num.value);
		       ^

0 [0x0]: line: 201 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator&[608] params(1) in file: lib\support\/0.2.9//primitives.sharp:202:8: note:  
		    def operator&(num : byte)   := (value&num.value);
		       ^

0 [0x0]: line: 202 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator&[609] params(1) in file: lib\support\/0.2.9//primitives.sharp:203:8: note:  
		    def operator&(num : bool)   := (value&num.value);
		       ^

0 [0x0]: line: 203 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator&[610] params(1) in file: lib\support\/0.2.9//primitives.sharp:204:8: note:  
		    def operator&(num : double)   := (value&num.value);
		       ^

0 [0x0]: line: 204 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator&[611] params(1) in file: lib\support\/0.2.9//primitives.sharp:205:8: note:  
		    def operator&(num : var)    := (value&num);
		       ^

0 [0x0]: line: 205 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           uand ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint32>.operator|[612] params(1) in file: lib\support\/0.2.9//primitives.sharp:207:8: note:  
		    def operator|(num : ulong)  := (value|num.value);
		       ^

0 [0x0]: line: 207 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator|[613] params(1) in file: lib\support\/0.2.9//primitives.sharp:208:8: note:  
		    def operator|(num : long)   := (value|num.value);
		       ^

0 [0x0]: line: 208 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator|[614] params(1) in file: lib\support\/0.2.9//primitives.sharp:209:8: note:  
		    def operator|(num : uint)   := (value|num.value);
		       ^

0 [0x0]: line: 209 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator|[615] params(1) in file: lib\support\/0.2.9//primitives.sharp:210:8: note:  
		    def operator|(num : int)    := (value|num.value);
		       ^

0 [0x0]: line: 210 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator|[616] params(1) in file: lib\support\/0.2.9//primitives.sharp:211:8: note:  
		    def operator|(num : ushort) := (value|num.value);
		       ^

0 [0x0]: line: 211 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator|[617] params(1) in file: lib\support\/0.2.9//primitives.sharp:212:8: note:  
		    def operator|(num : short)  := (value|num.value);
		       ^

0 [0x0]: line: 212 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator|[618] params(1) in file: lib\support\/0.2.9//primitives.sharp:213:8: note:  
		    def operator|(num : uchar)  := (value|num.value);
		       ^

0 [0x0]: line: 213 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator|[619] params(1) in file: lib\support\/0.2.9//primitives.sharp:214:8: note:  
		    def operator|(num : char)   := (value|num.value);
		       ^

0 [0x0]: line: 214 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator|[620] params(1) in file: lib\support\/0.2.9//primitives.sharp:215:8: note:  
		    def operator|(num : byte)   := (value|num.value);
		       ^

0 [0x0]: line: 215 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator|[621] params(1) in file: lib\support\/0.2.9//primitives.sharp:216:8: note:  
		    def operator|(num : bool)   := (value|num.value);
		       ^

0 [0x0]: line: 216 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator|[622] params(1) in file: lib\support\/0.2.9//primitives.sharp:217:8: note:  
		    def operator|(num : double)   := (value|num.value);
		       ^

0 [0x0]: line: 217 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint32>.operator|[623] params(1) in file: lib\support\/0.2.9//primitives.sharp:218:8: note:  
		    def operator|(num : var)    := (value|num);
		       ^

0 [0x0]: line: 218 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           or ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint32>.operator!=[624] params(1) in file: lib\support\/0.2.9//primitives.sharp:220:8: note:  
		    def operator!=(num : var) := value!=num;
		       ^

0 [0x0]: line: 220 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           tne ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint32>.operator==[625] params(1) in file: lib\support\/0.2.9//primitives.sharp:221:8: note:  
		    def operator==(num : var) := value==num;
		       ^

0 [0x0]: line: 221 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           test ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint32>.operator=[626] params(1) in file: lib\support\/0.2.9//primitives.sharp:222:8: note:  
		    def operator=(num : var) := value=num;
		       ^

0 [0x0]: line: 222 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           loadval ebx   
5 [0x5]:           movu32 ebx, ebx   
6 [0x6]:           movi #0, adx   
8 [0x8]:           rmov adx, ebx   
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std#integer<_uint32>.to_string[627] params(0) in file: lib\support\/0.2.9//primitives.sharp:224:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 225 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           newstr @55 //    
4 [0x4]:           call @3546 // <std#string.string>   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           rstore ebx   
12 [0xc]:           call @3585 // <std#string.operator+>   
13 [0xd]:           popobj2    
14 [0xe]:           returnobj   
15 [0xf]:           ret   


function: std#integer<_uint32>.parse[628] params(1) in file: lib\support\/0.2.9//primitives.sharp:228:15: note:  
		    static def parse(s: string) : native_type {
		              ^

0 [0x0]: line: 229 movi #0, ebx   
2 [0x2]:           movu32 ebx, ebx   
3 [0x3]:           smovr_2 ebx, fp+1   
4 [0x4]: line: 231 movi #0, ebx   
6 [0x6]:           movr cmt, ebx   
7 [0x7]:           jne 14   
8 [0x8]: line: 232 pushl 0   
9 [0x9]:           call @1898 // <std#__srt_global.strtod>   
10 [0xa]:           loadval ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   
13 [0xd]:           jmp @104   
14 [0xe]: line: 234 istorel 0, fp+2   
16 [0x10]: line: 235 istorel 0, fp+3   
18 [0x12]: line: 236 pushl 0   
19 [0x13]:           call @3587 // <std#string.size>   
20 [0x14]:           ipopl 4   
21 [0x15]: line: 238 pushl 0   
22 [0x16]:           istore 0   
24 [0x18]:           call @3568 // <std#string.at>   
25 [0x19]:           loadval ebx   
26 [0x1a]:           rstore ebx   
27 [0x1b]:           movi #45, ebx   
29 [0x1d]:           loadval ecx   
30 [0x1e]:           test ecx, ebx   
31 [0x1f]:           movr ebx, cmt   
32 [0x20]:           movr cmt, ebx   
33 [0x21]:           jne 38   
34 [0x22]: line: 239 istorel 1, fp+3   
36 [0x24]: line: 240 istorel 1, fp+2   
38 [0x26]:           nop   
39 [0x27]: line: 243 ipushl #2   
40 [0x28]:           loadl ebx, fp+4   
41 [0x29]:           loadval ecx   
42 [0x2a]:           lt ecx, ebx   
43 [0x2b]:           movr ebx, cmt   
44 [0x2c]:           movr cmt, ebx   
45 [0x2d]:           jne 93   
46 [0x2e]: line: 244 pushl 0   
47 [0x2f]:           ipushl #2   
48 [0x30]:           call @3568 // <std#string.at>   
49 [0x31]:           call @3209 // <std#char.is_digit>   
50 [0x32]:           loadval ebx   
51 [0x33]:           not ebx, ebx   
52 [0x34]:           movr cmt, ebx   
53 [0x35]:           jne 68   
54 [0x36]: line: 245 new_class @4 // std#illegal_argument_exception   
56 [0x38]:           dup    
57 [0x39]:           new_class @75 // std#string   
59 [0x3b]:           dup    
60 [0x3c]:           newstr @561 // illegal char in string:    
61 [0x3d]:           call @3546 // <std#string.string>   
62 [0x3e]:           pushl 0   
63 [0x3f]:           ipushl #2   
64 [0x40]:           call @3568 // <std#string.at>   
65 [0x41]:           call @3579 // <std#string.operator+>   
66 [0x42]:           call @1962 // <std#illegal_argument_exception.illegal_argument_exception>   
67 [0x43]:           throw    
68 [0x44]:           nop   
69 [0x45]: line: 249 movi #10, ebx   
71 [0x47]:           loadl ecx, fp+1   
72 [0x48]:           mul ecx, ebx -> ebx   
73 [0x49]:           movu32 ebx, ebx   
74 [0x4a]:           smovr_2 ebx, fp+1   
75 [0x4b]: line: 250 pushl 0   
76 [0x4c]:           loadl ebx, fp+2   
77 [0x4d]:           movr egx, ebx   
78 [0x4e]:           inc ebx   
79 [0x4f]:           smovr_2 ebx, fp+2   
80 [0x50]:           rstore egx   
81 [0x51]:           call @3568 // <std#string.at>   
82 [0x52]:           loadval ebx   
83 [0x53]:           rstore ebx   
84 [0x54]:           movi #48, ebx   
86 [0x56]:           loadval ecx   
87 [0x57]:           sub ecx, ebx -> ebx   
88 [0x58]:           loadl ecx, fp+1   
89 [0x59]:           add ecx, ebx -> ebx   
90 [0x5a]:           movu32 ebx, ebx   
91 [0x5b]:           smovr_2 ebx, fp+1   
92 [0x5c]:           jmp @39   
93 [0x5d]: line: 252 loadl ebx, fp+3   
94 [0x5e]:           movr cmt, ebx   
95 [0x5f]:           jne 100   
96 [0x60]: line: 253 loadl ebx, fp+1   
97 [0x61]:           neg ebx, ebx   
98 [0x62]:           movu32 ebx, ebx   
99 [0x63]:           smovr_2 ebx, fp+1   
100 [0x64]:           nop   
101 [0x65]: line: 254 loadl ebx, fp+1   
102 [0x66]:           return_val ebx   
103 [0x67]:           ret   
104 [0x68]:           nop   


function: std#integer<_uint32>.to_ulong[629] params(0) in file: lib\support\/0.2.9//primitives.sharp:258:8: note:  
		    def to_ulong() := new ulong { value };
		       ^

0 [0x0]: line: 258 new_class @53 // std#ulong   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu64 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint32>.to_long[630] params(0) in file: lib\support\/0.2.9//primitives.sharp:259:8: note:  
		    def to_long() := new long { value };
		       ^

0 [0x0]: line: 259 new_class @54 // std#long   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov64 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint32>.to_uint[631] params(0) in file: lib\support\/0.2.9//primitives.sharp:260:8: note:  
		    def to_uint() := new uint { value };
		       ^

0 [0x0]: line: 260 new_class @55 // std#uint   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu32 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint32>.to_int[632] params(0) in file: lib\support\/0.2.9//primitives.sharp:261:8: note:  
		    def to_int() := new int { value };
		       ^

0 [0x0]: line: 261 new_class @56 // std#int   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov32 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint32>.to_ushort[633] params(0) in file: lib\support\/0.2.9//primitives.sharp:262:8: note:  
		    def to_ushort() := new ushort { value };
		       ^

0 [0x0]: line: 262 new_class @57 // std#ushort   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu16 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint32>.to_short[634] params(0) in file: lib\support\/0.2.9//primitives.sharp:263:8: note:  
		    def to_short() := new short { value };
		       ^

0 [0x0]: line: 263 new_class @58 // std#short   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov16 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint32>.to_uchar[635] params(0) in file: lib\support\/0.2.9//primitives.sharp:264:8: note:  
		    def to_uchar() := new uchar { value };
		       ^

0 [0x0]: line: 264 new_class @59 // std#uchar   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint32>.to_char[636] params(0) in file: lib\support\/0.2.9//primitives.sharp:265:8: note:  
		    def to_char() := new char { value };
		       ^

0 [0x0]: line: 265 new_class @60 // std#char   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint32>.to_byte[637] params(0) in file: lib\support\/0.2.9//primitives.sharp:266:8: note:  
		    def to_byte() := new byte { value };
		       ^

0 [0x0]: line: 266 new_class @61 // std#byte   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint32>.to_bool[638] params(0) in file: lib\support\/0.2.9//primitives.sharp:267:8: note:  
		    def to_bool() := new bool { value };
		       ^

0 [0x0]: line: 267 new_class @62 // std#bool   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint32>.to_double[639] params(0) in file: lib\support\/0.2.9//primitives.sharp:268:8: note:  
		    def to_double() := new double { value };
		       ^

0 [0x0]: line: 268 new_class @63 // std#double   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint32>.get_value[640] params(0) in file: lib\support\/0.2.9//primitives.sharp:270:8: note:  
		    def get_value() := value;
		       ^

0 [0x0]: line: 270 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


constructor: std#integer<_uint32>.integer[641] params(0) in file: lib\support\/0.2.9//primitives.sharp:5:13: note:  
		public class integer<native_type> {
		            ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#integer<_int32>.integer[642] params(1) in file: lib\support\/0.2.9//primitives.sharp:8:12: note:  
		    integer(initial_val : var) {
		           ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 9 ipushl #1   
2 [0x2]:         movl 0   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         mov32 ebx, ebx   
7 [0x7]:         movi #0, adx   
9 [0x9]:         rmov adx, ebx   
10 [0xa]:         ret   


function: std#integer<_int32>.hash[643] params(0) in file: lib\support\/0.2.9//primitives.sharp:12:8: note:  
		    def hash() : _int64 {
		       ^

0 [0x0]: line: 13 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          return_val ebx   
7 [0x7]:          ret   


overload function: std#integer<_int32>.operator!=[644] params(1) in file: lib\support\/0.2.9//primitives.sharp:16:8: note:  
		    def operator!=(num : ulong) := (value!=num.value);
		       ^

0 [0x0]: line: 16 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator==[645] params(1) in file: lib\support\/0.2.9//primitives.sharp:17:8: note:  
		    def operator==(num : ulong) := (value==num.value);
		       ^

0 [0x0]: line: 17 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator!=[646] params(1) in file: lib\support\/0.2.9//primitives.sharp:18:8: note:  
		    def operator!=(num : long) := (value!=num.value);
		       ^

0 [0x0]: line: 18 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator==[647] params(1) in file: lib\support\/0.2.9//primitives.sharp:19:8: note:  
		    def operator==(num : long) := (value==num.value);
		       ^

0 [0x0]: line: 19 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator!=[648] params(1) in file: lib\support\/0.2.9//primitives.sharp:20:8: note:  
		    def operator!=(num : uint) := (value!=num.value);
		       ^

0 [0x0]: line: 20 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator==[649] params(1) in file: lib\support\/0.2.9//primitives.sharp:21:8: note:  
		    def operator==(num : uint) := (value==num.value);
		       ^

0 [0x0]: line: 21 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator!=[650] params(1) in file: lib\support\/0.2.9//primitives.sharp:22:8: note:  
		    def operator!=(num : int) := (value!=num.value);
		       ^

0 [0x0]: line: 22 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator==[651] params(1) in file: lib\support\/0.2.9//primitives.sharp:23:8: note:  
		    def operator==(num : int) := (value==num.value);
		       ^

0 [0x0]: line: 23 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator!=[652] params(1) in file: lib\support\/0.2.9//primitives.sharp:24:8: note:  
		    def operator!=(num : ushort) := (value!=num.value);
		       ^

0 [0x0]: line: 24 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator==[653] params(1) in file: lib\support\/0.2.9//primitives.sharp:25:8: note:  
		    def operator==(num : ushort) := (value==num.value);
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator!=[654] params(1) in file: lib\support\/0.2.9//primitives.sharp:26:8: note:  
		    def operator!=(num : short) := (value!=num.value);
		       ^

0 [0x0]: line: 26 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator==[655] params(1) in file: lib\support\/0.2.9//primitives.sharp:27:8: note:  
		    def operator==(num : short) := (value==num.value);
		       ^

0 [0x0]: line: 27 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator!=[656] params(1) in file: lib\support\/0.2.9//primitives.sharp:28:8: note:  
		    def operator!=(num : uchar) := (value!=num.value);
		       ^

0 [0x0]: line: 28 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator==[657] params(1) in file: lib\support\/0.2.9//primitives.sharp:29:8: note:  
		    def operator==(num : uchar) := (value==num.value);
		       ^

0 [0x0]: line: 29 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator!=[658] params(1) in file: lib\support\/0.2.9//primitives.sharp:30:8: note:  
		    def operator!=(num : char) := (value!=num.value);
		       ^

0 [0x0]: line: 30 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator==[659] params(1) in file: lib\support\/0.2.9//primitives.sharp:31:8: note:  
		    def operator==(num : char) := (value==num.value);
		       ^

0 [0x0]: line: 31 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator!=[660] params(1) in file: lib\support\/0.2.9//primitives.sharp:32:8: note:  
		    def operator!=(num : byte) := (value!=num.value);
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator==[661] params(1) in file: lib\support\/0.2.9//primitives.sharp:33:8: note:  
		    def operator==(num : byte) := (value==num.value);
		       ^

0 [0x0]: line: 33 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator!=[662] params(1) in file: lib\support\/0.2.9//primitives.sharp:34:8: note:  
		    def operator!=(num : bool) := (value!=num.value);
		       ^

0 [0x0]: line: 34 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator==[663] params(1) in file: lib\support\/0.2.9//primitives.sharp:35:8: note:  
		    def operator==(num : bool) := (value==num.value);
		       ^

0 [0x0]: line: 35 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator==[664] params(1) in file: lib\support\/0.2.9//primitives.sharp:36:8: note:  
		    def operator==(num : double) := (value==num.value);
		       ^

0 [0x0]: line: 36 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator+[665] params(1) in file: lib\support\/0.2.9//primitives.sharp:38:8: note:  
		    def operator+(num : ulong)  := (value+num.value);
		       ^

0 [0x0]: line: 38 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator+[666] params(1) in file: lib\support\/0.2.9//primitives.sharp:39:8: note:  
		    def operator+(num : long)   := (value+num.value);
		       ^

0 [0x0]: line: 39 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator+[667] params(1) in file: lib\support\/0.2.9//primitives.sharp:40:8: note:  
		    def operator+(num : uint)   := (value+num.value);
		       ^

0 [0x0]: line: 40 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator+[668] params(1) in file: lib\support\/0.2.9//primitives.sharp:41:8: note:  
		    def operator+(num : int)    := (value+num.value);
		       ^

0 [0x0]: line: 41 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator+[669] params(1) in file: lib\support\/0.2.9//primitives.sharp:42:8: note:  
		    def operator+(num : ushort) := (value+num.value);
		       ^

0 [0x0]: line: 42 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator+[670] params(1) in file: lib\support\/0.2.9//primitives.sharp:43:8: note:  
		    def operator+(num : short)  := (value+num.value);
		       ^

0 [0x0]: line: 43 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator+[671] params(1) in file: lib\support\/0.2.9//primitives.sharp:44:8: note:  
		    def operator+(num : uchar)  := (value+num.value);
		       ^

0 [0x0]: line: 44 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator+[672] params(1) in file: lib\support\/0.2.9//primitives.sharp:45:8: note:  
		    def operator+(num : char)   := (value+num.value);
		       ^

0 [0x0]: line: 45 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator+[673] params(1) in file: lib\support\/0.2.9//primitives.sharp:46:8: note:  
		    def operator+(num : byte)   := (value+num.value);
		       ^

0 [0x0]: line: 46 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator+[674] params(1) in file: lib\support\/0.2.9//primitives.sharp:47:8: note:  
		    def operator+(num : bool)   := (value+num.value);
		       ^

0 [0x0]: line: 47 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator+[675] params(1) in file: lib\support\/0.2.9//primitives.sharp:48:8: note:  
		    def operator+(num : double)   := (value+num.value);
		       ^

0 [0x0]: line: 48 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator+[676] params(1) in file: lib\support\/0.2.9//primitives.sharp:49:8: note:  
		    def operator+(num : var)    := (value+num);
		       ^

0 [0x0]: line: 49 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          add ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int32>.operator-[677] params(1) in file: lib\support\/0.2.9//primitives.sharp:51:8: note:  
		    def operator-(num : ulong)  := (value-num.value);
		       ^

0 [0x0]: line: 51 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator-[678] params(1) in file: lib\support\/0.2.9//primitives.sharp:52:8: note:  
		    def operator-(num : long)   := (value-num.value);
		       ^

0 [0x0]: line: 52 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator-[679] params(1) in file: lib\support\/0.2.9//primitives.sharp:53:8: note:  
		    def operator-(num : uint)   := (value-num.value);
		       ^

0 [0x0]: line: 53 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator-[680] params(1) in file: lib\support\/0.2.9//primitives.sharp:54:8: note:  
		    def operator-(num : int)    := (value-num.value);
		       ^

0 [0x0]: line: 54 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator-[681] params(1) in file: lib\support\/0.2.9//primitives.sharp:55:8: note:  
		    def operator-(num : ushort) := (value-num.value);
		       ^

0 [0x0]: line: 55 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator-[682] params(1) in file: lib\support\/0.2.9//primitives.sharp:56:8: note:  
		    def operator-(num : short)  := (value-num.value);
		       ^

0 [0x0]: line: 56 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator-[683] params(1) in file: lib\support\/0.2.9//primitives.sharp:57:8: note:  
		    def operator-(num : uchar)  := (value-num.value);
		       ^

0 [0x0]: line: 57 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator-[684] params(1) in file: lib\support\/0.2.9//primitives.sharp:58:8: note:  
		    def operator-(num : char)   := (value-num.value);
		       ^

0 [0x0]: line: 58 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator-[685] params(1) in file: lib\support\/0.2.9//primitives.sharp:59:8: note:  
		    def operator-(num : byte)   := (value-num.value);
		       ^

0 [0x0]: line: 59 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator-[686] params(1) in file: lib\support\/0.2.9//primitives.sharp:60:8: note:  
		    def operator-(num : bool)   := (value-num.value);
		       ^

0 [0x0]: line: 60 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator-[687] params(1) in file: lib\support\/0.2.9//primitives.sharp:61:8: note:  
		    def operator-(num : double)   := (value-num.value);
		       ^

0 [0x0]: line: 61 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator-[688] params(1) in file: lib\support\/0.2.9//primitives.sharp:62:8: note:  
		    def operator-(num : var)    := (value-num);
		       ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          sub ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int32>.operator*[689] params(1) in file: lib\support\/0.2.9//primitives.sharp:64:8: note:  
		    def operator*(num : ulong)  := (value*num.value);
		       ^

0 [0x0]: line: 64 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator*[690] params(1) in file: lib\support\/0.2.9//primitives.sharp:65:8: note:  
		    def operator*(num : long)   := (value*num.value);
		       ^

0 [0x0]: line: 65 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator*[691] params(1) in file: lib\support\/0.2.9//primitives.sharp:66:8: note:  
		    def operator*(num : uint)   := (value*num.value);
		       ^

0 [0x0]: line: 66 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator*[692] params(1) in file: lib\support\/0.2.9//primitives.sharp:67:8: note:  
		    def operator*(num : int)    := (value*num.value);
		       ^

0 [0x0]: line: 67 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator*[693] params(1) in file: lib\support\/0.2.9//primitives.sharp:68:8: note:  
		    def operator*(num : ushort) := (value*num.value);
		       ^

0 [0x0]: line: 68 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator*[694] params(1) in file: lib\support\/0.2.9//primitives.sharp:69:8: note:  
		    def operator*(num : short)  := (value*num.value);
		       ^

0 [0x0]: line: 69 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator*[695] params(1) in file: lib\support\/0.2.9//primitives.sharp:70:8: note:  
		    def operator*(num : uchar)  := (value*num.value);
		       ^

0 [0x0]: line: 70 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator*[696] params(1) in file: lib\support\/0.2.9//primitives.sharp:71:8: note:  
		    def operator*(num : char)   := (value*num.value);
		       ^

0 [0x0]: line: 71 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator*[697] params(1) in file: lib\support\/0.2.9//primitives.sharp:72:8: note:  
		    def operator*(num : byte)   := (value*num.value);
		       ^

0 [0x0]: line: 72 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator*[698] params(1) in file: lib\support\/0.2.9//primitives.sharp:73:8: note:  
		    def operator*(num : bool)   := (value*num.value);
		       ^

0 [0x0]: line: 73 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator*[699] params(1) in file: lib\support\/0.2.9//primitives.sharp:74:8: note:  
		    def operator*(num : double)   := (value*num.value);
		       ^

0 [0x0]: line: 74 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator*[700] params(1) in file: lib\support\/0.2.9//primitives.sharp:75:8: note:  
		    def operator*(num : var)    := (value*num);
		       ^

0 [0x0]: line: 75 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          mul ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int32>.operator/[701] params(1) in file: lib\support\/0.2.9//primitives.sharp:77:8: note:  
		    def operator/(num : ulong)  := (value/num.value);
		       ^

0 [0x0]: line: 77 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator/[702] params(1) in file: lib\support\/0.2.9//primitives.sharp:78:8: note:  
		    def operator/(num : long)   := (value/num.value);
		       ^

0 [0x0]: line: 78 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator/[703] params(1) in file: lib\support\/0.2.9//primitives.sharp:79:8: note:  
		    def operator/(num : uint)   := (value/num.value);
		       ^

0 [0x0]: line: 79 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator/[704] params(1) in file: lib\support\/0.2.9//primitives.sharp:80:8: note:  
		    def operator/(num : int)    := (value/num.value);
		       ^

0 [0x0]: line: 80 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator/[705] params(1) in file: lib\support\/0.2.9//primitives.sharp:81:8: note:  
		    def operator/(num : ushort) := (value/num.value);
		       ^

0 [0x0]: line: 81 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator/[706] params(1) in file: lib\support\/0.2.9//primitives.sharp:82:8: note:  
		    def operator/(num : short)  := (value/num.value);
		       ^

0 [0x0]: line: 82 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator/[707] params(1) in file: lib\support\/0.2.9//primitives.sharp:83:8: note:  
		    def operator/(num : uchar)  := (value/num.value);
		       ^

0 [0x0]: line: 83 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator/[708] params(1) in file: lib\support\/0.2.9//primitives.sharp:84:8: note:  
		    def operator/(num : char)   := (value/num.value);
		       ^

0 [0x0]: line: 84 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator/[709] params(1) in file: lib\support\/0.2.9//primitives.sharp:85:8: note:  
		    def operator/(num : byte)   := (value/num.value);
		       ^

0 [0x0]: line: 85 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator/[710] params(1) in file: lib\support\/0.2.9//primitives.sharp:86:8: note:  
		    def operator/(num : bool)   := (value/num.value);
		       ^

0 [0x0]: line: 86 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator/[711] params(1) in file: lib\support\/0.2.9//primitives.sharp:87:8: note:  
		    def operator/(num : double)   := (value/num.value);
		       ^

0 [0x0]: line: 87 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator/[712] params(1) in file: lib\support\/0.2.9//primitives.sharp:88:8: note:  
		    def operator/(num : var)    := (value/num);
		       ^

0 [0x0]: line: 88 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          div ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int32>.operator%[713] params(1) in file: lib\support\/0.2.9//primitives.sharp:90:8: note:  
		    def operator%(num : ulong)  := (value%num.value);
		       ^

0 [0x0]: line: 90 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator%[714] params(1) in file: lib\support\/0.2.9//primitives.sharp:91:8: note:  
		    def operator%(num : long)   := (value%num.value);
		       ^

0 [0x0]: line: 91 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator%[715] params(1) in file: lib\support\/0.2.9//primitives.sharp:92:8: note:  
		    def operator%(num : uint)   := (value%num.value);
		       ^

0 [0x0]: line: 92 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator%[716] params(1) in file: lib\support\/0.2.9//primitives.sharp:93:8: note:  
		    def operator%(num : int)    := (value%num.value);
		       ^

0 [0x0]: line: 93 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator%[717] params(1) in file: lib\support\/0.2.9//primitives.sharp:94:8: note:  
		    def operator%(num : ushort) := (value%num.value);
		       ^

0 [0x0]: line: 94 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator%[718] params(1) in file: lib\support\/0.2.9//primitives.sharp:95:8: note:  
		    def operator%(num : short)  := (value%num.value);
		       ^

0 [0x0]: line: 95 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator%[719] params(1) in file: lib\support\/0.2.9//primitives.sharp:96:8: note:  
		    def operator%(num : uchar)  := (value%num.value);
		       ^

0 [0x0]: line: 96 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator%[720] params(1) in file: lib\support\/0.2.9//primitives.sharp:97:8: note:  
		    def operator%(num : char)   := (value%num.value);
		       ^

0 [0x0]: line: 97 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator%[721] params(1) in file: lib\support\/0.2.9//primitives.sharp:98:8: note:  
		    def operator%(num : byte)   := (value%num.value);
		       ^

0 [0x0]: line: 98 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator%[722] params(1) in file: lib\support\/0.2.9//primitives.sharp:99:8: note:  
		    def operator%(num : bool)   := (value%num.value);
		       ^

0 [0x0]: line: 99 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int32>.operator%[723] params(1) in file: lib\support\/0.2.9//primitives.sharp:100:8: note:  
		    def operator%(num : double)   := (value%num.value);
		       ^

0 [0x0]: line: 100 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator%[724] params(1) in file: lib\support\/0.2.9//primitives.sharp:101:8: note:  
		    def operator%(num : var)    := (value%num);
		       ^

0 [0x0]: line: 101 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           mod ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int32>.operator<[725] params(1) in file: lib\support\/0.2.9//primitives.sharp:103:8: note:  
		    def operator<(num : ulong)  := (value<num.value);
		       ^

0 [0x0]: line: 103 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<[726] params(1) in file: lib\support\/0.2.9//primitives.sharp:104:8: note:  
		    def operator<(num : long)   := (value<num.value);
		       ^

0 [0x0]: line: 104 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<[727] params(1) in file: lib\support\/0.2.9//primitives.sharp:105:8: note:  
		    def operator<(num : uint)   := (value<num.value);
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<[728] params(1) in file: lib\support\/0.2.9//primitives.sharp:106:8: note:  
		    def operator<(num : int)    := (value<num.value);
		       ^

0 [0x0]: line: 106 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<[729] params(1) in file: lib\support\/0.2.9//primitives.sharp:107:8: note:  
		    def operator<(num : ushort) := (value<num.value);
		       ^

0 [0x0]: line: 107 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<[730] params(1) in file: lib\support\/0.2.9//primitives.sharp:108:8: note:  
		    def operator<(num : short)  := (value<num.value);
		       ^

0 [0x0]: line: 108 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<[731] params(1) in file: lib\support\/0.2.9//primitives.sharp:109:8: note:  
		    def operator<(num : uchar)  := (value<num.value);
		       ^

0 [0x0]: line: 109 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<[732] params(1) in file: lib\support\/0.2.9//primitives.sharp:110:8: note:  
		    def operator<(num : char)   := (value<num.value);
		       ^

0 [0x0]: line: 110 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<[733] params(1) in file: lib\support\/0.2.9//primitives.sharp:111:8: note:  
		    def operator<(num : byte)   := (value<num.value);
		       ^

0 [0x0]: line: 111 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<[734] params(1) in file: lib\support\/0.2.9//primitives.sharp:112:8: note:  
		    def operator<(num : bool)   := (value<num.value);
		       ^

0 [0x0]: line: 112 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<[735] params(1) in file: lib\support\/0.2.9//primitives.sharp:113:8: note:  
		    def operator<(num : double)   := (value<num.value);
		       ^

0 [0x0]: line: 113 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<[736] params(1) in file: lib\support\/0.2.9//primitives.sharp:114:8: note:  
		    def operator<(num : var)    := (value<num);
		       ^

0 [0x0]: line: 114 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           lt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int32>.operator>[737] params(1) in file: lib\support\/0.2.9//primitives.sharp:116:8: note:  
		    def operator>(num : ulong)  := (value>num.value);
		       ^

0 [0x0]: line: 116 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>[738] params(1) in file: lib\support\/0.2.9//primitives.sharp:117:8: note:  
		    def operator>(num : long)   := (value>num.value);
		       ^

0 [0x0]: line: 117 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>[739] params(1) in file: lib\support\/0.2.9//primitives.sharp:118:8: note:  
		    def operator>(num : uint)   := (value>num.value);
		       ^

0 [0x0]: line: 118 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>[740] params(1) in file: lib\support\/0.2.9//primitives.sharp:119:8: note:  
		    def operator>(num : int)    := (value>num.value);
		       ^

0 [0x0]: line: 119 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>[741] params(1) in file: lib\support\/0.2.9//primitives.sharp:120:8: note:  
		    def operator>(num : ushort) := (value>num.value);
		       ^

0 [0x0]: line: 120 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>[742] params(1) in file: lib\support\/0.2.9//primitives.sharp:121:8: note:  
		    def operator>(num : short)  := (value>num.value);
		       ^

0 [0x0]: line: 121 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>[743] params(1) in file: lib\support\/0.2.9//primitives.sharp:122:8: note:  
		    def operator>(num : uchar)  := (value>num.value);
		       ^

0 [0x0]: line: 122 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>[744] params(1) in file: lib\support\/0.2.9//primitives.sharp:123:8: note:  
		    def operator>(num : char)   := (value>num.value);
		       ^

0 [0x0]: line: 123 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>[745] params(1) in file: lib\support\/0.2.9//primitives.sharp:124:8: note:  
		    def operator>(num : byte)   := (value>num.value);
		       ^

0 [0x0]: line: 124 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>[746] params(1) in file: lib\support\/0.2.9//primitives.sharp:125:8: note:  
		    def operator>(num : bool)   := (value>num.value);
		       ^

0 [0x0]: line: 125 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>[747] params(1) in file: lib\support\/0.2.9//primitives.sharp:126:8: note:  
		    def operator>(num : double)   := (value>num.value);
		       ^

0 [0x0]: line: 126 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>[748] params(1) in file: lib\support\/0.2.9//primitives.sharp:127:8: note:  
		    def operator>(num : var)    := (value>num);
		       ^

0 [0x0]: line: 127 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int32>.operator<=[749] params(1) in file: lib\support\/0.2.9//primitives.sharp:129:8: note:  
		    def operator<=(num : ulong)  := (value>=num.value);
		       ^

0 [0x0]: line: 129 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<=[750] params(1) in file: lib\support\/0.2.9//primitives.sharp:130:8: note:  
		    def operator<=(num : long)   := (value>=num.value);
		       ^

0 [0x0]: line: 130 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<=[751] params(1) in file: lib\support\/0.2.9//primitives.sharp:131:8: note:  
		    def operator<=(num : uint)   := (value>=num.value);
		       ^

0 [0x0]: line: 131 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<=[752] params(1) in file: lib\support\/0.2.9//primitives.sharp:132:8: note:  
		    def operator<=(num : int)    := (value>=num.value);
		       ^

0 [0x0]: line: 132 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<=[753] params(1) in file: lib\support\/0.2.9//primitives.sharp:133:8: note:  
		    def operator<=(num : ushort) := (value>=num.value);
		       ^

0 [0x0]: line: 133 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<=[754] params(1) in file: lib\support\/0.2.9//primitives.sharp:134:8: note:  
		    def operator<=(num : short)  := (value>=num.value);
		       ^

0 [0x0]: line: 134 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<=[755] params(1) in file: lib\support\/0.2.9//primitives.sharp:135:8: note:  
		    def operator<=(num : uchar)  := (value>=num.value);
		       ^

0 [0x0]: line: 135 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<=[756] params(1) in file: lib\support\/0.2.9//primitives.sharp:136:8: note:  
		    def operator<=(num : char)   := (value>=num.value);
		       ^

0 [0x0]: line: 136 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<=[757] params(1) in file: lib\support\/0.2.9//primitives.sharp:137:8: note:  
		    def operator<=(num : byte)   := (value>=num.value);
		       ^

0 [0x0]: line: 137 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<=[758] params(1) in file: lib\support\/0.2.9//primitives.sharp:138:8: note:  
		    def operator<=(num : bool)   := (value>=num.value);
		       ^

0 [0x0]: line: 138 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<=[759] params(1) in file: lib\support\/0.2.9//primitives.sharp:139:8: note:  
		    def operator<=(num : double)   := (value>=num.value);
		       ^

0 [0x0]: line: 139 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<=[760] params(1) in file: lib\support\/0.2.9//primitives.sharp:140:8: note:  
		    def operator<=(num : var)    := (value>=num);
		       ^

0 [0x0]: line: 140 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gte ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int32>.operator**[761] params(1) in file: lib\support\/0.2.9//primitives.sharp:142:8: note:  
		    def operator**(num : ulong)  := (value**num.value);
		       ^

0 [0x0]: line: 142 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator**[762] params(1) in file: lib\support\/0.2.9//primitives.sharp:143:8: note:  
		    def operator**(num : long)   := (value**num.value);
		       ^

0 [0x0]: line: 143 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator**[763] params(1) in file: lib\support\/0.2.9//primitives.sharp:144:8: note:  
		    def operator**(num : uint)   := (value**num.value);
		       ^

0 [0x0]: line: 144 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator**[764] params(1) in file: lib\support\/0.2.9//primitives.sharp:145:8: note:  
		    def operator**(num : int)    := (value**num.value);
		       ^

0 [0x0]: line: 145 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator**[765] params(1) in file: lib\support\/0.2.9//primitives.sharp:146:8: note:  
		    def operator**(num : ushort) := (value**num.value);
		       ^

0 [0x0]: line: 146 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator**[766] params(1) in file: lib\support\/0.2.9//primitives.sharp:147:8: note:  
		    def operator**(num : short)  := (value**num.value);
		       ^

0 [0x0]: line: 147 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator**[767] params(1) in file: lib\support\/0.2.9//primitives.sharp:148:8: note:  
		    def operator**(num : uchar)  := (value**num.value);
		       ^

0 [0x0]: line: 148 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator**[768] params(1) in file: lib\support\/0.2.9//primitives.sharp:149:8: note:  
		    def operator**(num : char)   := (value**num.value);
		       ^

0 [0x0]: line: 149 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator**[769] params(1) in file: lib\support\/0.2.9//primitives.sharp:150:8: note:  
		    def operator**(num : byte)   := (value**num.value);
		       ^

0 [0x0]: line: 150 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator**[770] params(1) in file: lib\support\/0.2.9//primitives.sharp:151:8: note:  
		    def operator**(num : bool)   := (value**num.value);
		       ^

0 [0x0]: line: 151 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator**[771] params(1) in file: lib\support\/0.2.9//primitives.sharp:152:8: note:  
		    def operator**(num : double)   := (value**num.value);
		       ^

0 [0x0]: line: 152 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator**[772] params(1) in file: lib\support\/0.2.9//primitives.sharp:153:8: note:  
		    def operator**(num : var)    := (value**num);
		       ^

0 [0x0]: line: 153 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           exp ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int32>.operator<<[773] params(1) in file: lib\support\/0.2.9//primitives.sharp:155:8: note:  
		    def operator<<(num : ulong)  := (value<<num.value);
		       ^

0 [0x0]: line: 155 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<<[774] params(1) in file: lib\support\/0.2.9//primitives.sharp:156:8: note:  
		    def operator<<(num : long)   := (value<<num.value);
		       ^

0 [0x0]: line: 156 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<<[775] params(1) in file: lib\support\/0.2.9//primitives.sharp:157:8: note:  
		    def operator<<(num : uint)   := (value<<num.value);
		       ^

0 [0x0]: line: 157 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<<[776] params(1) in file: lib\support\/0.2.9//primitives.sharp:158:8: note:  
		    def operator<<(num : int)    := (value<<num.value);
		       ^

0 [0x0]: line: 158 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<<[777] params(1) in file: lib\support\/0.2.9//primitives.sharp:159:8: note:  
		    def operator<<(num : ushort) := (value<<num.value);
		       ^

0 [0x0]: line: 159 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<<[778] params(1) in file: lib\support\/0.2.9//primitives.sharp:160:8: note:  
		    def operator<<(num : short)  := (value<<num.value);
		       ^

0 [0x0]: line: 160 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<<[779] params(1) in file: lib\support\/0.2.9//primitives.sharp:161:8: note:  
		    def operator<<(num : uchar)  := (value<<num.value);
		       ^

0 [0x0]: line: 161 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<<[780] params(1) in file: lib\support\/0.2.9//primitives.sharp:162:8: note:  
		    def operator<<(num : char)   := (value<<num.value);
		       ^

0 [0x0]: line: 162 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<<[781] params(1) in file: lib\support\/0.2.9//primitives.sharp:163:8: note:  
		    def operator<<(num : byte)   := (value<<num.value);
		       ^

0 [0x0]: line: 163 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<<[782] params(1) in file: lib\support\/0.2.9//primitives.sharp:164:8: note:  
		    def operator<<(num : bool)   := (value<<num.value);
		       ^

0 [0x0]: line: 164 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<<[783] params(1) in file: lib\support\/0.2.9//primitives.sharp:165:8: note:  
		    def operator<<(num : double)   := (value<<num.value);
		       ^

0 [0x0]: line: 165 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator<<[784] params(1) in file: lib\support\/0.2.9//primitives.sharp:166:8: note:  
		    def operator<<(num : var)    := (value<<num);
		       ^

0 [0x0]: line: 166 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shl ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int32>.operator>>[785] params(1) in file: lib\support\/0.2.9//primitives.sharp:168:8: note:  
		    def operator>>(num : ulong)  := (value>>num.value);
		       ^

0 [0x0]: line: 168 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>>[786] params(1) in file: lib\support\/0.2.9//primitives.sharp:169:8: note:  
		    def operator>>(num : long)   := (value>>num.value);
		       ^

0 [0x0]: line: 169 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>>[787] params(1) in file: lib\support\/0.2.9//primitives.sharp:170:8: note:  
		    def operator>>(num : uint)   := (value>>num.value);
		       ^

0 [0x0]: line: 170 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>>[788] params(1) in file: lib\support\/0.2.9//primitives.sharp:171:8: note:  
		    def operator>>(num : int)    := (value>>num.value);
		       ^

0 [0x0]: line: 171 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>>[789] params(1) in file: lib\support\/0.2.9//primitives.sharp:172:8: note:  
		    def operator>>(num : ushort) := (value>>num.value);
		       ^

0 [0x0]: line: 172 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>>[790] params(1) in file: lib\support\/0.2.9//primitives.sharp:173:8: note:  
		    def operator>>(num : short)  := (value>>num.value);
		       ^

0 [0x0]: line: 173 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>>[791] params(1) in file: lib\support\/0.2.9//primitives.sharp:174:8: note:  
		    def operator>>(num : uchar)  := (value>>num.value);
		       ^

0 [0x0]: line: 174 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>>[792] params(1) in file: lib\support\/0.2.9//primitives.sharp:175:8: note:  
		    def operator>>(num : char)   := (value>>num.value);
		       ^

0 [0x0]: line: 175 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>>[793] params(1) in file: lib\support\/0.2.9//primitives.sharp:176:8: note:  
		    def operator>>(num : byte)   := (value>>num.value);
		       ^

0 [0x0]: line: 176 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>>[794] params(1) in file: lib\support\/0.2.9//primitives.sharp:177:8: note:  
		    def operator>>(num : bool)   := (value>>num.value);
		       ^

0 [0x0]: line: 177 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>>[795] params(1) in file: lib\support\/0.2.9//primitives.sharp:178:8: note:  
		    def operator>>(num : double)   := (value>>num.value);
		       ^

0 [0x0]: line: 178 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator>>[796] params(1) in file: lib\support\/0.2.9//primitives.sharp:179:8: note:  
		    def operator>>(num : var)    := (value>>num);
		       ^

0 [0x0]: line: 179 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shr ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int32>.operator^[797] params(1) in file: lib\support\/0.2.9//primitives.sharp:181:8: note:  
		    def operator^(num : ulong)  := (value^num.value);
		       ^

0 [0x0]: line: 181 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator^[798] params(1) in file: lib\support\/0.2.9//primitives.sharp:182:8: note:  
		    def operator^(num : long)   := (value^num.value);
		       ^

0 [0x0]: line: 182 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator^[799] params(1) in file: lib\support\/0.2.9//primitives.sharp:183:8: note:  
		    def operator^(num : uint)   := (value^num.value);
		       ^

0 [0x0]: line: 183 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator^[800] params(1) in file: lib\support\/0.2.9//primitives.sharp:184:8: note:  
		    def operator^(num : int)    := (value^num.value);
		       ^

0 [0x0]: line: 184 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator^[801] params(1) in file: lib\support\/0.2.9//primitives.sharp:185:8: note:  
		    def operator^(num : ushort) := (value^num.value);
		       ^

0 [0x0]: line: 185 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator^[802] params(1) in file: lib\support\/0.2.9//primitives.sharp:186:8: note:  
		    def operator^(num : short)  := (value^num.value);
		       ^

0 [0x0]: line: 186 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator^[803] params(1) in file: lib\support\/0.2.9//primitives.sharp:187:8: note:  
		    def operator^(num : uchar)  := (value^num.value);
		       ^

0 [0x0]: line: 187 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator^[804] params(1) in file: lib\support\/0.2.9//primitives.sharp:188:8: note:  
		    def operator^(num : char)   := (value^num.value);
		       ^

0 [0x0]: line: 188 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator^[805] params(1) in file: lib\support\/0.2.9//primitives.sharp:189:8: note:  
		    def operator^(num : byte)   := (value^num.value);
		       ^

0 [0x0]: line: 189 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator^[806] params(1) in file: lib\support\/0.2.9//primitives.sharp:190:8: note:  
		    def operator^(num : bool)   := (value^num.value);
		       ^

0 [0x0]: line: 190 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator^[807] params(1) in file: lib\support\/0.2.9//primitives.sharp:191:8: note:  
		    def operator^(num : double)   := (value^num.value);
		       ^

0 [0x0]: line: 191 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator^[808] params(1) in file: lib\support\/0.2.9//primitives.sharp:192:8: note:  
		    def operator^(num : var)    := (value^num);
		       ^

0 [0x0]: line: 192 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           xor ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int32>.operator&[809] params(1) in file: lib\support\/0.2.9//primitives.sharp:194:8: note:  
		    def operator&(num : ulong)  := (value&num.value);
		       ^

0 [0x0]: line: 194 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator&[810] params(1) in file: lib\support\/0.2.9//primitives.sharp:195:8: note:  
		    def operator&(num : long)   := (value&num.value);
		       ^

0 [0x0]: line: 195 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator&[811] params(1) in file: lib\support\/0.2.9//primitives.sharp:196:8: note:  
		    def operator&(num : uint)   := (value&num.value);
		       ^

0 [0x0]: line: 196 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator&[812] params(1) in file: lib\support\/0.2.9//primitives.sharp:197:8: note:  
		    def operator&(num : int)    := (value&num.value);
		       ^

0 [0x0]: line: 197 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator&[813] params(1) in file: lib\support\/0.2.9//primitives.sharp:198:8: note:  
		    def operator&(num : ushort) := (value&num.value);
		       ^

0 [0x0]: line: 198 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator&[814] params(1) in file: lib\support\/0.2.9//primitives.sharp:199:8: note:  
		    def operator&(num : short)  := (value&num.value);
		       ^

0 [0x0]: line: 199 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator&[815] params(1) in file: lib\support\/0.2.9//primitives.sharp:200:8: note:  
		    def operator&(num : uchar)  := (value&num.value);
		       ^

0 [0x0]: line: 200 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator&[816] params(1) in file: lib\support\/0.2.9//primitives.sharp:201:8: note:  
		    def operator&(num : char)   := (value&num.value);
		       ^

0 [0x0]: line: 201 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator&[817] params(1) in file: lib\support\/0.2.9//primitives.sharp:202:8: note:  
		    def operator&(num : byte)   := (value&num.value);
		       ^

0 [0x0]: line: 202 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator&[818] params(1) in file: lib\support\/0.2.9//primitives.sharp:203:8: note:  
		    def operator&(num : bool)   := (value&num.value);
		       ^

0 [0x0]: line: 203 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator&[819] params(1) in file: lib\support\/0.2.9//primitives.sharp:204:8: note:  
		    def operator&(num : double)   := (value&num.value);
		       ^

0 [0x0]: line: 204 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator&[820] params(1) in file: lib\support\/0.2.9//primitives.sharp:205:8: note:  
		    def operator&(num : var)    := (value&num);
		       ^

0 [0x0]: line: 205 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           uand ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int32>.operator|[821] params(1) in file: lib\support\/0.2.9//primitives.sharp:207:8: note:  
		    def operator|(num : ulong)  := (value|num.value);
		       ^

0 [0x0]: line: 207 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator|[822] params(1) in file: lib\support\/0.2.9//primitives.sharp:208:8: note:  
		    def operator|(num : long)   := (value|num.value);
		       ^

0 [0x0]: line: 208 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator|[823] params(1) in file: lib\support\/0.2.9//primitives.sharp:209:8: note:  
		    def operator|(num : uint)   := (value|num.value);
		       ^

0 [0x0]: line: 209 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator|[824] params(1) in file: lib\support\/0.2.9//primitives.sharp:210:8: note:  
		    def operator|(num : int)    := (value|num.value);
		       ^

0 [0x0]: line: 210 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator|[825] params(1) in file: lib\support\/0.2.9//primitives.sharp:211:8: note:  
		    def operator|(num : ushort) := (value|num.value);
		       ^

0 [0x0]: line: 211 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator|[826] params(1) in file: lib\support\/0.2.9//primitives.sharp:212:8: note:  
		    def operator|(num : short)  := (value|num.value);
		       ^

0 [0x0]: line: 212 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator|[827] params(1) in file: lib\support\/0.2.9//primitives.sharp:213:8: note:  
		    def operator|(num : uchar)  := (value|num.value);
		       ^

0 [0x0]: line: 213 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator|[828] params(1) in file: lib\support\/0.2.9//primitives.sharp:214:8: note:  
		    def operator|(num : char)   := (value|num.value);
		       ^

0 [0x0]: line: 214 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator|[829] params(1) in file: lib\support\/0.2.9//primitives.sharp:215:8: note:  
		    def operator|(num : byte)   := (value|num.value);
		       ^

0 [0x0]: line: 215 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator|[830] params(1) in file: lib\support\/0.2.9//primitives.sharp:216:8: note:  
		    def operator|(num : bool)   := (value|num.value);
		       ^

0 [0x0]: line: 216 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator|[831] params(1) in file: lib\support\/0.2.9//primitives.sharp:217:8: note:  
		    def operator|(num : double)   := (value|num.value);
		       ^

0 [0x0]: line: 217 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int32>.operator|[832] params(1) in file: lib\support\/0.2.9//primitives.sharp:218:8: note:  
		    def operator|(num : var)    := (value|num);
		       ^

0 [0x0]: line: 218 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           or ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int32>.operator!=[833] params(1) in file: lib\support\/0.2.9//primitives.sharp:220:8: note:  
		    def operator!=(num : var) := value!=num;
		       ^

0 [0x0]: line: 220 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           tne ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int32>.operator==[834] params(1) in file: lib\support\/0.2.9//primitives.sharp:221:8: note:  
		    def operator==(num : var) := value==num;
		       ^

0 [0x0]: line: 221 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           test ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int32>.operator=[835] params(1) in file: lib\support\/0.2.9//primitives.sharp:222:8: note:  
		    def operator=(num : var) := value=num;
		       ^

0 [0x0]: line: 222 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           loadval ebx   
5 [0x5]:           mov32 ebx, ebx   
6 [0x6]:           movi #0, adx   
8 [0x8]:           rmov adx, ebx   
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std#integer<_int32>.to_string[836] params(0) in file: lib\support\/0.2.9//primitives.sharp:224:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 225 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           newstr @55 //    
4 [0x4]:           call @3546 // <std#string.string>   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           rstore ebx   
12 [0xc]:           call @3581 // <std#string.operator+>   
13 [0xd]:           popobj2    
14 [0xe]:           returnobj   
15 [0xf]:           ret   


function: std#integer<_int32>.parse[837] params(1) in file: lib\support\/0.2.9//primitives.sharp:228:15: note:  
		    static def parse(s: string) : native_type {
		              ^

0 [0x0]: line: 229 movi #0, ebx   
2 [0x2]:           mov32 ebx, ebx   
3 [0x3]:           smovr_2 ebx, fp+1   
4 [0x4]: line: 231 movi #0, ebx   
6 [0x6]:           movr cmt, ebx   
7 [0x7]:           jne 14   
8 [0x8]: line: 232 pushl 0   
9 [0x9]:           call @1898 // <std#__srt_global.strtod>   
10 [0xa]:           loadval ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   
13 [0xd]:           jmp @104   
14 [0xe]: line: 234 istorel 0, fp+2   
16 [0x10]: line: 235 istorel 0, fp+3   
18 [0x12]: line: 236 pushl 0   
19 [0x13]:           call @3587 // <std#string.size>   
20 [0x14]:           ipopl 4   
21 [0x15]: line: 238 pushl 0   
22 [0x16]:           istore 0   
24 [0x18]:           call @3568 // <std#string.at>   
25 [0x19]:           loadval ebx   
26 [0x1a]:           rstore ebx   
27 [0x1b]:           movi #45, ebx   
29 [0x1d]:           loadval ecx   
30 [0x1e]:           test ecx, ebx   
31 [0x1f]:           movr ebx, cmt   
32 [0x20]:           movr cmt, ebx   
33 [0x21]:           jne 38   
34 [0x22]: line: 239 istorel 1, fp+3   
36 [0x24]: line: 240 istorel 1, fp+2   
38 [0x26]:           nop   
39 [0x27]: line: 243 ipushl #2   
40 [0x28]:           loadl ebx, fp+4   
41 [0x29]:           loadval ecx   
42 [0x2a]:           lt ecx, ebx   
43 [0x2b]:           movr ebx, cmt   
44 [0x2c]:           movr cmt, ebx   
45 [0x2d]:           jne 93   
46 [0x2e]: line: 244 pushl 0   
47 [0x2f]:           ipushl #2   
48 [0x30]:           call @3568 // <std#string.at>   
49 [0x31]:           call @3209 // <std#char.is_digit>   
50 [0x32]:           loadval ebx   
51 [0x33]:           not ebx, ebx   
52 [0x34]:           movr cmt, ebx   
53 [0x35]:           jne 68   
54 [0x36]: line: 245 new_class @4 // std#illegal_argument_exception   
56 [0x38]:           dup    
57 [0x39]:           new_class @75 // std#string   
59 [0x3b]:           dup    
60 [0x3c]:           newstr @561 // illegal char in string:    
61 [0x3d]:           call @3546 // <std#string.string>   
62 [0x3e]:           pushl 0   
63 [0x3f]:           ipushl #2   
64 [0x40]:           call @3568 // <std#string.at>   
65 [0x41]:           call @3579 // <std#string.operator+>   
66 [0x42]:           call @1962 // <std#illegal_argument_exception.illegal_argument_exception>   
67 [0x43]:           throw    
68 [0x44]:           nop   
69 [0x45]: line: 249 movi #10, ebx   
71 [0x47]:           loadl ecx, fp+1   
72 [0x48]:           mul ecx, ebx -> ebx   
73 [0x49]:           mov32 ebx, ebx   
74 [0x4a]:           smovr_2 ebx, fp+1   
75 [0x4b]: line: 250 pushl 0   
76 [0x4c]:           loadl ebx, fp+2   
77 [0x4d]:           movr egx, ebx   
78 [0x4e]:           inc ebx   
79 [0x4f]:           smovr_2 ebx, fp+2   
80 [0x50]:           rstore egx   
81 [0x51]:           call @3568 // <std#string.at>   
82 [0x52]:           loadval ebx   
83 [0x53]:           rstore ebx   
84 [0x54]:           movi #48, ebx   
86 [0x56]:           loadval ecx   
87 [0x57]:           sub ecx, ebx -> ebx   
88 [0x58]:           loadl ecx, fp+1   
89 [0x59]:           add ecx, ebx -> ebx   
90 [0x5a]:           mov32 ebx, ebx   
91 [0x5b]:           smovr_2 ebx, fp+1   
92 [0x5c]:           jmp @39   
93 [0x5d]: line: 252 loadl ebx, fp+3   
94 [0x5e]:           movr cmt, ebx   
95 [0x5f]:           jne 100   
96 [0x60]: line: 253 loadl ebx, fp+1   
97 [0x61]:           neg ebx, ebx   
98 [0x62]:           mov32 ebx, ebx   
99 [0x63]:           smovr_2 ebx, fp+1   
100 [0x64]:           nop   
101 [0x65]: line: 254 loadl ebx, fp+1   
102 [0x66]:           return_val ebx   
103 [0x67]:           ret   
104 [0x68]:           nop   


function: std#integer<_int32>.to_ulong[838] params(0) in file: lib\support\/0.2.9//primitives.sharp:258:8: note:  
		    def to_ulong() := new ulong { value };
		       ^

0 [0x0]: line: 258 new_class @53 // std#ulong   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu64 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int32>.to_long[839] params(0) in file: lib\support\/0.2.9//primitives.sharp:259:8: note:  
		    def to_long() := new long { value };
		       ^

0 [0x0]: line: 259 new_class @54 // std#long   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov64 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int32>.to_uint[840] params(0) in file: lib\support\/0.2.9//primitives.sharp:260:8: note:  
		    def to_uint() := new uint { value };
		       ^

0 [0x0]: line: 260 new_class @55 // std#uint   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu32 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int32>.to_int[841] params(0) in file: lib\support\/0.2.9//primitives.sharp:261:8: note:  
		    def to_int() := new int { value };
		       ^

0 [0x0]: line: 261 new_class @56 // std#int   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov32 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int32>.to_ushort[842] params(0) in file: lib\support\/0.2.9//primitives.sharp:262:8: note:  
		    def to_ushort() := new ushort { value };
		       ^

0 [0x0]: line: 262 new_class @57 // std#ushort   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu16 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int32>.to_short[843] params(0) in file: lib\support\/0.2.9//primitives.sharp:263:8: note:  
		    def to_short() := new short { value };
		       ^

0 [0x0]: line: 263 new_class @58 // std#short   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov16 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int32>.to_uchar[844] params(0) in file: lib\support\/0.2.9//primitives.sharp:264:8: note:  
		    def to_uchar() := new uchar { value };
		       ^

0 [0x0]: line: 264 new_class @59 // std#uchar   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int32>.to_char[845] params(0) in file: lib\support\/0.2.9//primitives.sharp:265:8: note:  
		    def to_char() := new char { value };
		       ^

0 [0x0]: line: 265 new_class @60 // std#char   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int32>.to_byte[846] params(0) in file: lib\support\/0.2.9//primitives.sharp:266:8: note:  
		    def to_byte() := new byte { value };
		       ^

0 [0x0]: line: 266 new_class @61 // std#byte   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int32>.to_bool[847] params(0) in file: lib\support\/0.2.9//primitives.sharp:267:8: note:  
		    def to_bool() := new bool { value };
		       ^

0 [0x0]: line: 267 new_class @62 // std#bool   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int32>.to_double[848] params(0) in file: lib\support\/0.2.9//primitives.sharp:268:8: note:  
		    def to_double() := new double { value };
		       ^

0 [0x0]: line: 268 new_class @63 // std#double   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int32>.get_value[849] params(0) in file: lib\support\/0.2.9//primitives.sharp:270:8: note:  
		    def get_value() := value;
		       ^

0 [0x0]: line: 270 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


constructor: std#integer<_int32>.integer[850] params(0) in file: lib\support\/0.2.9//primitives.sharp:5:13: note:  
		public class integer<native_type> {
		            ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#integer<_uint16>.integer[851] params(1) in file: lib\support\/0.2.9//primitives.sharp:8:12: note:  
		    integer(initial_val : var) {
		           ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 9 ipushl #1   
2 [0x2]:         movl 0   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         movu16 ebx, ebx   
7 [0x7]:         movi #0, adx   
9 [0x9]:         rmov adx, ebx   
10 [0xa]:         ret   


function: std#integer<_uint16>.hash[852] params(0) in file: lib\support\/0.2.9//primitives.sharp:12:8: note:  
		    def hash() : _int64 {
		       ^

0 [0x0]: line: 13 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          return_val ebx   
7 [0x7]:          ret   


overload function: std#integer<_uint16>.operator!=[853] params(1) in file: lib\support\/0.2.9//primitives.sharp:16:8: note:  
		    def operator!=(num : ulong) := (value!=num.value);
		       ^

0 [0x0]: line: 16 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator==[854] params(1) in file: lib\support\/0.2.9//primitives.sharp:17:8: note:  
		    def operator==(num : ulong) := (value==num.value);
		       ^

0 [0x0]: line: 17 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator!=[855] params(1) in file: lib\support\/0.2.9//primitives.sharp:18:8: note:  
		    def operator!=(num : long) := (value!=num.value);
		       ^

0 [0x0]: line: 18 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator==[856] params(1) in file: lib\support\/0.2.9//primitives.sharp:19:8: note:  
		    def operator==(num : long) := (value==num.value);
		       ^

0 [0x0]: line: 19 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator!=[857] params(1) in file: lib\support\/0.2.9//primitives.sharp:20:8: note:  
		    def operator!=(num : uint) := (value!=num.value);
		       ^

0 [0x0]: line: 20 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator==[858] params(1) in file: lib\support\/0.2.9//primitives.sharp:21:8: note:  
		    def operator==(num : uint) := (value==num.value);
		       ^

0 [0x0]: line: 21 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator!=[859] params(1) in file: lib\support\/0.2.9//primitives.sharp:22:8: note:  
		    def operator!=(num : int) := (value!=num.value);
		       ^

0 [0x0]: line: 22 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator==[860] params(1) in file: lib\support\/0.2.9//primitives.sharp:23:8: note:  
		    def operator==(num : int) := (value==num.value);
		       ^

0 [0x0]: line: 23 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator!=[861] params(1) in file: lib\support\/0.2.9//primitives.sharp:24:8: note:  
		    def operator!=(num : ushort) := (value!=num.value);
		       ^

0 [0x0]: line: 24 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator==[862] params(1) in file: lib\support\/0.2.9//primitives.sharp:25:8: note:  
		    def operator==(num : ushort) := (value==num.value);
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator!=[863] params(1) in file: lib\support\/0.2.9//primitives.sharp:26:8: note:  
		    def operator!=(num : short) := (value!=num.value);
		       ^

0 [0x0]: line: 26 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator==[864] params(1) in file: lib\support\/0.2.9//primitives.sharp:27:8: note:  
		    def operator==(num : short) := (value==num.value);
		       ^

0 [0x0]: line: 27 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator!=[865] params(1) in file: lib\support\/0.2.9//primitives.sharp:28:8: note:  
		    def operator!=(num : uchar) := (value!=num.value);
		       ^

0 [0x0]: line: 28 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator==[866] params(1) in file: lib\support\/0.2.9//primitives.sharp:29:8: note:  
		    def operator==(num : uchar) := (value==num.value);
		       ^

0 [0x0]: line: 29 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator!=[867] params(1) in file: lib\support\/0.2.9//primitives.sharp:30:8: note:  
		    def operator!=(num : char) := (value!=num.value);
		       ^

0 [0x0]: line: 30 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator==[868] params(1) in file: lib\support\/0.2.9//primitives.sharp:31:8: note:  
		    def operator==(num : char) := (value==num.value);
		       ^

0 [0x0]: line: 31 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator!=[869] params(1) in file: lib\support\/0.2.9//primitives.sharp:32:8: note:  
		    def operator!=(num : byte) := (value!=num.value);
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator==[870] params(1) in file: lib\support\/0.2.9//primitives.sharp:33:8: note:  
		    def operator==(num : byte) := (value==num.value);
		       ^

0 [0x0]: line: 33 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator!=[871] params(1) in file: lib\support\/0.2.9//primitives.sharp:34:8: note:  
		    def operator!=(num : bool) := (value!=num.value);
		       ^

0 [0x0]: line: 34 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator==[872] params(1) in file: lib\support\/0.2.9//primitives.sharp:35:8: note:  
		    def operator==(num : bool) := (value==num.value);
		       ^

0 [0x0]: line: 35 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator==[873] params(1) in file: lib\support\/0.2.9//primitives.sharp:36:8: note:  
		    def operator==(num : double) := (value==num.value);
		       ^

0 [0x0]: line: 36 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator+[874] params(1) in file: lib\support\/0.2.9//primitives.sharp:38:8: note:  
		    def operator+(num : ulong)  := (value+num.value);
		       ^

0 [0x0]: line: 38 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator+[875] params(1) in file: lib\support\/0.2.9//primitives.sharp:39:8: note:  
		    def operator+(num : long)   := (value+num.value);
		       ^

0 [0x0]: line: 39 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator+[876] params(1) in file: lib\support\/0.2.9//primitives.sharp:40:8: note:  
		    def operator+(num : uint)   := (value+num.value);
		       ^

0 [0x0]: line: 40 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator+[877] params(1) in file: lib\support\/0.2.9//primitives.sharp:41:8: note:  
		    def operator+(num : int)    := (value+num.value);
		       ^

0 [0x0]: line: 41 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator+[878] params(1) in file: lib\support\/0.2.9//primitives.sharp:42:8: note:  
		    def operator+(num : ushort) := (value+num.value);
		       ^

0 [0x0]: line: 42 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator+[879] params(1) in file: lib\support\/0.2.9//primitives.sharp:43:8: note:  
		    def operator+(num : short)  := (value+num.value);
		       ^

0 [0x0]: line: 43 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator+[880] params(1) in file: lib\support\/0.2.9//primitives.sharp:44:8: note:  
		    def operator+(num : uchar)  := (value+num.value);
		       ^

0 [0x0]: line: 44 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator+[881] params(1) in file: lib\support\/0.2.9//primitives.sharp:45:8: note:  
		    def operator+(num : char)   := (value+num.value);
		       ^

0 [0x0]: line: 45 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator+[882] params(1) in file: lib\support\/0.2.9//primitives.sharp:46:8: note:  
		    def operator+(num : byte)   := (value+num.value);
		       ^

0 [0x0]: line: 46 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator+[883] params(1) in file: lib\support\/0.2.9//primitives.sharp:47:8: note:  
		    def operator+(num : bool)   := (value+num.value);
		       ^

0 [0x0]: line: 47 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator+[884] params(1) in file: lib\support\/0.2.9//primitives.sharp:48:8: note:  
		    def operator+(num : double)   := (value+num.value);
		       ^

0 [0x0]: line: 48 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator+[885] params(1) in file: lib\support\/0.2.9//primitives.sharp:49:8: note:  
		    def operator+(num : var)    := (value+num);
		       ^

0 [0x0]: line: 49 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          add ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint16>.operator-[886] params(1) in file: lib\support\/0.2.9//primitives.sharp:51:8: note:  
		    def operator-(num : ulong)  := (value-num.value);
		       ^

0 [0x0]: line: 51 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator-[887] params(1) in file: lib\support\/0.2.9//primitives.sharp:52:8: note:  
		    def operator-(num : long)   := (value-num.value);
		       ^

0 [0x0]: line: 52 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator-[888] params(1) in file: lib\support\/0.2.9//primitives.sharp:53:8: note:  
		    def operator-(num : uint)   := (value-num.value);
		       ^

0 [0x0]: line: 53 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator-[889] params(1) in file: lib\support\/0.2.9//primitives.sharp:54:8: note:  
		    def operator-(num : int)    := (value-num.value);
		       ^

0 [0x0]: line: 54 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator-[890] params(1) in file: lib\support\/0.2.9//primitives.sharp:55:8: note:  
		    def operator-(num : ushort) := (value-num.value);
		       ^

0 [0x0]: line: 55 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator-[891] params(1) in file: lib\support\/0.2.9//primitives.sharp:56:8: note:  
		    def operator-(num : short)  := (value-num.value);
		       ^

0 [0x0]: line: 56 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator-[892] params(1) in file: lib\support\/0.2.9//primitives.sharp:57:8: note:  
		    def operator-(num : uchar)  := (value-num.value);
		       ^

0 [0x0]: line: 57 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator-[893] params(1) in file: lib\support\/0.2.9//primitives.sharp:58:8: note:  
		    def operator-(num : char)   := (value-num.value);
		       ^

0 [0x0]: line: 58 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator-[894] params(1) in file: lib\support\/0.2.9//primitives.sharp:59:8: note:  
		    def operator-(num : byte)   := (value-num.value);
		       ^

0 [0x0]: line: 59 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator-[895] params(1) in file: lib\support\/0.2.9//primitives.sharp:60:8: note:  
		    def operator-(num : bool)   := (value-num.value);
		       ^

0 [0x0]: line: 60 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator-[896] params(1) in file: lib\support\/0.2.9//primitives.sharp:61:8: note:  
		    def operator-(num : double)   := (value-num.value);
		       ^

0 [0x0]: line: 61 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator-[897] params(1) in file: lib\support\/0.2.9//primitives.sharp:62:8: note:  
		    def operator-(num : var)    := (value-num);
		       ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          sub ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint16>.operator*[898] params(1) in file: lib\support\/0.2.9//primitives.sharp:64:8: note:  
		    def operator*(num : ulong)  := (value*num.value);
		       ^

0 [0x0]: line: 64 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator*[899] params(1) in file: lib\support\/0.2.9//primitives.sharp:65:8: note:  
		    def operator*(num : long)   := (value*num.value);
		       ^

0 [0x0]: line: 65 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator*[900] params(1) in file: lib\support\/0.2.9//primitives.sharp:66:8: note:  
		    def operator*(num : uint)   := (value*num.value);
		       ^

0 [0x0]: line: 66 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator*[901] params(1) in file: lib\support\/0.2.9//primitives.sharp:67:8: note:  
		    def operator*(num : int)    := (value*num.value);
		       ^

0 [0x0]: line: 67 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator*[902] params(1) in file: lib\support\/0.2.9//primitives.sharp:68:8: note:  
		    def operator*(num : ushort) := (value*num.value);
		       ^

0 [0x0]: line: 68 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator*[903] params(1) in file: lib\support\/0.2.9//primitives.sharp:69:8: note:  
		    def operator*(num : short)  := (value*num.value);
		       ^

0 [0x0]: line: 69 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator*[904] params(1) in file: lib\support\/0.2.9//primitives.sharp:70:8: note:  
		    def operator*(num : uchar)  := (value*num.value);
		       ^

0 [0x0]: line: 70 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator*[905] params(1) in file: lib\support\/0.2.9//primitives.sharp:71:8: note:  
		    def operator*(num : char)   := (value*num.value);
		       ^

0 [0x0]: line: 71 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator*[906] params(1) in file: lib\support\/0.2.9//primitives.sharp:72:8: note:  
		    def operator*(num : byte)   := (value*num.value);
		       ^

0 [0x0]: line: 72 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator*[907] params(1) in file: lib\support\/0.2.9//primitives.sharp:73:8: note:  
		    def operator*(num : bool)   := (value*num.value);
		       ^

0 [0x0]: line: 73 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator*[908] params(1) in file: lib\support\/0.2.9//primitives.sharp:74:8: note:  
		    def operator*(num : double)   := (value*num.value);
		       ^

0 [0x0]: line: 74 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator*[909] params(1) in file: lib\support\/0.2.9//primitives.sharp:75:8: note:  
		    def operator*(num : var)    := (value*num);
		       ^

0 [0x0]: line: 75 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          mul ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint16>.operator/[910] params(1) in file: lib\support\/0.2.9//primitives.sharp:77:8: note:  
		    def operator/(num : ulong)  := (value/num.value);
		       ^

0 [0x0]: line: 77 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator/[911] params(1) in file: lib\support\/0.2.9//primitives.sharp:78:8: note:  
		    def operator/(num : long)   := (value/num.value);
		       ^

0 [0x0]: line: 78 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator/[912] params(1) in file: lib\support\/0.2.9//primitives.sharp:79:8: note:  
		    def operator/(num : uint)   := (value/num.value);
		       ^

0 [0x0]: line: 79 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator/[913] params(1) in file: lib\support\/0.2.9//primitives.sharp:80:8: note:  
		    def operator/(num : int)    := (value/num.value);
		       ^

0 [0x0]: line: 80 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator/[914] params(1) in file: lib\support\/0.2.9//primitives.sharp:81:8: note:  
		    def operator/(num : ushort) := (value/num.value);
		       ^

0 [0x0]: line: 81 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator/[915] params(1) in file: lib\support\/0.2.9//primitives.sharp:82:8: note:  
		    def operator/(num : short)  := (value/num.value);
		       ^

0 [0x0]: line: 82 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator/[916] params(1) in file: lib\support\/0.2.9//primitives.sharp:83:8: note:  
		    def operator/(num : uchar)  := (value/num.value);
		       ^

0 [0x0]: line: 83 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator/[917] params(1) in file: lib\support\/0.2.9//primitives.sharp:84:8: note:  
		    def operator/(num : char)   := (value/num.value);
		       ^

0 [0x0]: line: 84 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator/[918] params(1) in file: lib\support\/0.2.9//primitives.sharp:85:8: note:  
		    def operator/(num : byte)   := (value/num.value);
		       ^

0 [0x0]: line: 85 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator/[919] params(1) in file: lib\support\/0.2.9//primitives.sharp:86:8: note:  
		    def operator/(num : bool)   := (value/num.value);
		       ^

0 [0x0]: line: 86 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator/[920] params(1) in file: lib\support\/0.2.9//primitives.sharp:87:8: note:  
		    def operator/(num : double)   := (value/num.value);
		       ^

0 [0x0]: line: 87 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator/[921] params(1) in file: lib\support\/0.2.9//primitives.sharp:88:8: note:  
		    def operator/(num : var)    := (value/num);
		       ^

0 [0x0]: line: 88 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          div ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint16>.operator%[922] params(1) in file: lib\support\/0.2.9//primitives.sharp:90:8: note:  
		    def operator%(num : ulong)  := (value%num.value);
		       ^

0 [0x0]: line: 90 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator%[923] params(1) in file: lib\support\/0.2.9//primitives.sharp:91:8: note:  
		    def operator%(num : long)   := (value%num.value);
		       ^

0 [0x0]: line: 91 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator%[924] params(1) in file: lib\support\/0.2.9//primitives.sharp:92:8: note:  
		    def operator%(num : uint)   := (value%num.value);
		       ^

0 [0x0]: line: 92 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator%[925] params(1) in file: lib\support\/0.2.9//primitives.sharp:93:8: note:  
		    def operator%(num : int)    := (value%num.value);
		       ^

0 [0x0]: line: 93 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator%[926] params(1) in file: lib\support\/0.2.9//primitives.sharp:94:8: note:  
		    def operator%(num : ushort) := (value%num.value);
		       ^

0 [0x0]: line: 94 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator%[927] params(1) in file: lib\support\/0.2.9//primitives.sharp:95:8: note:  
		    def operator%(num : short)  := (value%num.value);
		       ^

0 [0x0]: line: 95 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator%[928] params(1) in file: lib\support\/0.2.9//primitives.sharp:96:8: note:  
		    def operator%(num : uchar)  := (value%num.value);
		       ^

0 [0x0]: line: 96 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator%[929] params(1) in file: lib\support\/0.2.9//primitives.sharp:97:8: note:  
		    def operator%(num : char)   := (value%num.value);
		       ^

0 [0x0]: line: 97 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator%[930] params(1) in file: lib\support\/0.2.9//primitives.sharp:98:8: note:  
		    def operator%(num : byte)   := (value%num.value);
		       ^

0 [0x0]: line: 98 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator%[931] params(1) in file: lib\support\/0.2.9//primitives.sharp:99:8: note:  
		    def operator%(num : bool)   := (value%num.value);
		       ^

0 [0x0]: line: 99 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint16>.operator%[932] params(1) in file: lib\support\/0.2.9//primitives.sharp:100:8: note:  
		    def operator%(num : double)   := (value%num.value);
		       ^

0 [0x0]: line: 100 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator%[933] params(1) in file: lib\support\/0.2.9//primitives.sharp:101:8: note:  
		    def operator%(num : var)    := (value%num);
		       ^

0 [0x0]: line: 101 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           mod ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint16>.operator<[934] params(1) in file: lib\support\/0.2.9//primitives.sharp:103:8: note:  
		    def operator<(num : ulong)  := (value<num.value);
		       ^

0 [0x0]: line: 103 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<[935] params(1) in file: lib\support\/0.2.9//primitives.sharp:104:8: note:  
		    def operator<(num : long)   := (value<num.value);
		       ^

0 [0x0]: line: 104 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<[936] params(1) in file: lib\support\/0.2.9//primitives.sharp:105:8: note:  
		    def operator<(num : uint)   := (value<num.value);
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<[937] params(1) in file: lib\support\/0.2.9//primitives.sharp:106:8: note:  
		    def operator<(num : int)    := (value<num.value);
		       ^

0 [0x0]: line: 106 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<[938] params(1) in file: lib\support\/0.2.9//primitives.sharp:107:8: note:  
		    def operator<(num : ushort) := (value<num.value);
		       ^

0 [0x0]: line: 107 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<[939] params(1) in file: lib\support\/0.2.9//primitives.sharp:108:8: note:  
		    def operator<(num : short)  := (value<num.value);
		       ^

0 [0x0]: line: 108 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<[940] params(1) in file: lib\support\/0.2.9//primitives.sharp:109:8: note:  
		    def operator<(num : uchar)  := (value<num.value);
		       ^

0 [0x0]: line: 109 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<[941] params(1) in file: lib\support\/0.2.9//primitives.sharp:110:8: note:  
		    def operator<(num : char)   := (value<num.value);
		       ^

0 [0x0]: line: 110 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<[942] params(1) in file: lib\support\/0.2.9//primitives.sharp:111:8: note:  
		    def operator<(num : byte)   := (value<num.value);
		       ^

0 [0x0]: line: 111 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<[943] params(1) in file: lib\support\/0.2.9//primitives.sharp:112:8: note:  
		    def operator<(num : bool)   := (value<num.value);
		       ^

0 [0x0]: line: 112 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<[944] params(1) in file: lib\support\/0.2.9//primitives.sharp:113:8: note:  
		    def operator<(num : double)   := (value<num.value);
		       ^

0 [0x0]: line: 113 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<[945] params(1) in file: lib\support\/0.2.9//primitives.sharp:114:8: note:  
		    def operator<(num : var)    := (value<num);
		       ^

0 [0x0]: line: 114 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           lt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint16>.operator>[946] params(1) in file: lib\support\/0.2.9//primitives.sharp:116:8: note:  
		    def operator>(num : ulong)  := (value>num.value);
		       ^

0 [0x0]: line: 116 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>[947] params(1) in file: lib\support\/0.2.9//primitives.sharp:117:8: note:  
		    def operator>(num : long)   := (value>num.value);
		       ^

0 [0x0]: line: 117 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>[948] params(1) in file: lib\support\/0.2.9//primitives.sharp:118:8: note:  
		    def operator>(num : uint)   := (value>num.value);
		       ^

0 [0x0]: line: 118 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>[949] params(1) in file: lib\support\/0.2.9//primitives.sharp:119:8: note:  
		    def operator>(num : int)    := (value>num.value);
		       ^

0 [0x0]: line: 119 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>[950] params(1) in file: lib\support\/0.2.9//primitives.sharp:120:8: note:  
		    def operator>(num : ushort) := (value>num.value);
		       ^

0 [0x0]: line: 120 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>[951] params(1) in file: lib\support\/0.2.9//primitives.sharp:121:8: note:  
		    def operator>(num : short)  := (value>num.value);
		       ^

0 [0x0]: line: 121 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>[952] params(1) in file: lib\support\/0.2.9//primitives.sharp:122:8: note:  
		    def operator>(num : uchar)  := (value>num.value);
		       ^

0 [0x0]: line: 122 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>[953] params(1) in file: lib\support\/0.2.9//primitives.sharp:123:8: note:  
		    def operator>(num : char)   := (value>num.value);
		       ^

0 [0x0]: line: 123 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>[954] params(1) in file: lib\support\/0.2.9//primitives.sharp:124:8: note:  
		    def operator>(num : byte)   := (value>num.value);
		       ^

0 [0x0]: line: 124 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>[955] params(1) in file: lib\support\/0.2.9//primitives.sharp:125:8: note:  
		    def operator>(num : bool)   := (value>num.value);
		       ^

0 [0x0]: line: 125 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>[956] params(1) in file: lib\support\/0.2.9//primitives.sharp:126:8: note:  
		    def operator>(num : double)   := (value>num.value);
		       ^

0 [0x0]: line: 126 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>[957] params(1) in file: lib\support\/0.2.9//primitives.sharp:127:8: note:  
		    def operator>(num : var)    := (value>num);
		       ^

0 [0x0]: line: 127 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint16>.operator<=[958] params(1) in file: lib\support\/0.2.9//primitives.sharp:129:8: note:  
		    def operator<=(num : ulong)  := (value>=num.value);
		       ^

0 [0x0]: line: 129 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<=[959] params(1) in file: lib\support\/0.2.9//primitives.sharp:130:8: note:  
		    def operator<=(num : long)   := (value>=num.value);
		       ^

0 [0x0]: line: 130 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<=[960] params(1) in file: lib\support\/0.2.9//primitives.sharp:131:8: note:  
		    def operator<=(num : uint)   := (value>=num.value);
		       ^

0 [0x0]: line: 131 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<=[961] params(1) in file: lib\support\/0.2.9//primitives.sharp:132:8: note:  
		    def operator<=(num : int)    := (value>=num.value);
		       ^

0 [0x0]: line: 132 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<=[962] params(1) in file: lib\support\/0.2.9//primitives.sharp:133:8: note:  
		    def operator<=(num : ushort) := (value>=num.value);
		       ^

0 [0x0]: line: 133 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<=[963] params(1) in file: lib\support\/0.2.9//primitives.sharp:134:8: note:  
		    def operator<=(num : short)  := (value>=num.value);
		       ^

0 [0x0]: line: 134 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<=[964] params(1) in file: lib\support\/0.2.9//primitives.sharp:135:8: note:  
		    def operator<=(num : uchar)  := (value>=num.value);
		       ^

0 [0x0]: line: 135 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<=[965] params(1) in file: lib\support\/0.2.9//primitives.sharp:136:8: note:  
		    def operator<=(num : char)   := (value>=num.value);
		       ^

0 [0x0]: line: 136 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<=[966] params(1) in file: lib\support\/0.2.9//primitives.sharp:137:8: note:  
		    def operator<=(num : byte)   := (value>=num.value);
		       ^

0 [0x0]: line: 137 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<=[967] params(1) in file: lib\support\/0.2.9//primitives.sharp:138:8: note:  
		    def operator<=(num : bool)   := (value>=num.value);
		       ^

0 [0x0]: line: 138 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<=[968] params(1) in file: lib\support\/0.2.9//primitives.sharp:139:8: note:  
		    def operator<=(num : double)   := (value>=num.value);
		       ^

0 [0x0]: line: 139 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<=[969] params(1) in file: lib\support\/0.2.9//primitives.sharp:140:8: note:  
		    def operator<=(num : var)    := (value>=num);
		       ^

0 [0x0]: line: 140 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gte ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint16>.operator**[970] params(1) in file: lib\support\/0.2.9//primitives.sharp:142:8: note:  
		    def operator**(num : ulong)  := (value**num.value);
		       ^

0 [0x0]: line: 142 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator**[971] params(1) in file: lib\support\/0.2.9//primitives.sharp:143:8: note:  
		    def operator**(num : long)   := (value**num.value);
		       ^

0 [0x0]: line: 143 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator**[972] params(1) in file: lib\support\/0.2.9//primitives.sharp:144:8: note:  
		    def operator**(num : uint)   := (value**num.value);
		       ^

0 [0x0]: line: 144 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator**[973] params(1) in file: lib\support\/0.2.9//primitives.sharp:145:8: note:  
		    def operator**(num : int)    := (value**num.value);
		       ^

0 [0x0]: line: 145 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator**[974] params(1) in file: lib\support\/0.2.9//primitives.sharp:146:8: note:  
		    def operator**(num : ushort) := (value**num.value);
		       ^

0 [0x0]: line: 146 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator**[975] params(1) in file: lib\support\/0.2.9//primitives.sharp:147:8: note:  
		    def operator**(num : short)  := (value**num.value);
		       ^

0 [0x0]: line: 147 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator**[976] params(1) in file: lib\support\/0.2.9//primitives.sharp:148:8: note:  
		    def operator**(num : uchar)  := (value**num.value);
		       ^

0 [0x0]: line: 148 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator**[977] params(1) in file: lib\support\/0.2.9//primitives.sharp:149:8: note:  
		    def operator**(num : char)   := (value**num.value);
		       ^

0 [0x0]: line: 149 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator**[978] params(1) in file: lib\support\/0.2.9//primitives.sharp:150:8: note:  
		    def operator**(num : byte)   := (value**num.value);
		       ^

0 [0x0]: line: 150 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator**[979] params(1) in file: lib\support\/0.2.9//primitives.sharp:151:8: note:  
		    def operator**(num : bool)   := (value**num.value);
		       ^

0 [0x0]: line: 151 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator**[980] params(1) in file: lib\support\/0.2.9//primitives.sharp:152:8: note:  
		    def operator**(num : double)   := (value**num.value);
		       ^

0 [0x0]: line: 152 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator**[981] params(1) in file: lib\support\/0.2.9//primitives.sharp:153:8: note:  
		    def operator**(num : var)    := (value**num);
		       ^

0 [0x0]: line: 153 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           exp ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint16>.operator<<[982] params(1) in file: lib\support\/0.2.9//primitives.sharp:155:8: note:  
		    def operator<<(num : ulong)  := (value<<num.value);
		       ^

0 [0x0]: line: 155 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<<[983] params(1) in file: lib\support\/0.2.9//primitives.sharp:156:8: note:  
		    def operator<<(num : long)   := (value<<num.value);
		       ^

0 [0x0]: line: 156 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<<[984] params(1) in file: lib\support\/0.2.9//primitives.sharp:157:8: note:  
		    def operator<<(num : uint)   := (value<<num.value);
		       ^

0 [0x0]: line: 157 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<<[985] params(1) in file: lib\support\/0.2.9//primitives.sharp:158:8: note:  
		    def operator<<(num : int)    := (value<<num.value);
		       ^

0 [0x0]: line: 158 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<<[986] params(1) in file: lib\support\/0.2.9//primitives.sharp:159:8: note:  
		    def operator<<(num : ushort) := (value<<num.value);
		       ^

0 [0x0]: line: 159 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<<[987] params(1) in file: lib\support\/0.2.9//primitives.sharp:160:8: note:  
		    def operator<<(num : short)  := (value<<num.value);
		       ^

0 [0x0]: line: 160 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<<[988] params(1) in file: lib\support\/0.2.9//primitives.sharp:161:8: note:  
		    def operator<<(num : uchar)  := (value<<num.value);
		       ^

0 [0x0]: line: 161 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<<[989] params(1) in file: lib\support\/0.2.9//primitives.sharp:162:8: note:  
		    def operator<<(num : char)   := (value<<num.value);
		       ^

0 [0x0]: line: 162 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<<[990] params(1) in file: lib\support\/0.2.9//primitives.sharp:163:8: note:  
		    def operator<<(num : byte)   := (value<<num.value);
		       ^

0 [0x0]: line: 163 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<<[991] params(1) in file: lib\support\/0.2.9//primitives.sharp:164:8: note:  
		    def operator<<(num : bool)   := (value<<num.value);
		       ^

0 [0x0]: line: 164 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<<[992] params(1) in file: lib\support\/0.2.9//primitives.sharp:165:8: note:  
		    def operator<<(num : double)   := (value<<num.value);
		       ^

0 [0x0]: line: 165 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator<<[993] params(1) in file: lib\support\/0.2.9//primitives.sharp:166:8: note:  
		    def operator<<(num : var)    := (value<<num);
		       ^

0 [0x0]: line: 166 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shl ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint16>.operator>>[994] params(1) in file: lib\support\/0.2.9//primitives.sharp:168:8: note:  
		    def operator>>(num : ulong)  := (value>>num.value);
		       ^

0 [0x0]: line: 168 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>>[995] params(1) in file: lib\support\/0.2.9//primitives.sharp:169:8: note:  
		    def operator>>(num : long)   := (value>>num.value);
		       ^

0 [0x0]: line: 169 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>>[996] params(1) in file: lib\support\/0.2.9//primitives.sharp:170:8: note:  
		    def operator>>(num : uint)   := (value>>num.value);
		       ^

0 [0x0]: line: 170 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>>[997] params(1) in file: lib\support\/0.2.9//primitives.sharp:171:8: note:  
		    def operator>>(num : int)    := (value>>num.value);
		       ^

0 [0x0]: line: 171 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>>[998] params(1) in file: lib\support\/0.2.9//primitives.sharp:172:8: note:  
		    def operator>>(num : ushort) := (value>>num.value);
		       ^

0 [0x0]: line: 172 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>>[999] params(1) in file: lib\support\/0.2.9//primitives.sharp:173:8: note:  
		    def operator>>(num : short)  := (value>>num.value);
		       ^

0 [0x0]: line: 173 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>>[1000] params(1) in file: lib\support\/0.2.9//primitives.sharp:174:8: note:  
		    def operator>>(num : uchar)  := (value>>num.value);
		       ^

0 [0x0]: line: 174 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>>[1001] params(1) in file: lib\support\/0.2.9//primitives.sharp:175:8: note:  
		    def operator>>(num : char)   := (value>>num.value);
		       ^

0 [0x0]: line: 175 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>>[1002] params(1) in file: lib\support\/0.2.9//primitives.sharp:176:8: note:  
		    def operator>>(num : byte)   := (value>>num.value);
		       ^

0 [0x0]: line: 176 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>>[1003] params(1) in file: lib\support\/0.2.9//primitives.sharp:177:8: note:  
		    def operator>>(num : bool)   := (value>>num.value);
		       ^

0 [0x0]: line: 177 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>>[1004] params(1) in file: lib\support\/0.2.9//primitives.sharp:178:8: note:  
		    def operator>>(num : double)   := (value>>num.value);
		       ^

0 [0x0]: line: 178 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator>>[1005] params(1) in file: lib\support\/0.2.9//primitives.sharp:179:8: note:  
		    def operator>>(num : var)    := (value>>num);
		       ^

0 [0x0]: line: 179 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shr ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint16>.operator^[1006] params(1) in file: lib\support\/0.2.9//primitives.sharp:181:8: note:  
		    def operator^(num : ulong)  := (value^num.value);
		       ^

0 [0x0]: line: 181 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator^[1007] params(1) in file: lib\support\/0.2.9//primitives.sharp:182:8: note:  
		    def operator^(num : long)   := (value^num.value);
		       ^

0 [0x0]: line: 182 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator^[1008] params(1) in file: lib\support\/0.2.9//primitives.sharp:183:8: note:  
		    def operator^(num : uint)   := (value^num.value);
		       ^

0 [0x0]: line: 183 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator^[1009] params(1) in file: lib\support\/0.2.9//primitives.sharp:184:8: note:  
		    def operator^(num : int)    := (value^num.value);
		       ^

0 [0x0]: line: 184 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator^[1010] params(1) in file: lib\support\/0.2.9//primitives.sharp:185:8: note:  
		    def operator^(num : ushort) := (value^num.value);
		       ^

0 [0x0]: line: 185 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator^[1011] params(1) in file: lib\support\/0.2.9//primitives.sharp:186:8: note:  
		    def operator^(num : short)  := (value^num.value);
		       ^

0 [0x0]: line: 186 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator^[1012] params(1) in file: lib\support\/0.2.9//primitives.sharp:187:8: note:  
		    def operator^(num : uchar)  := (value^num.value);
		       ^

0 [0x0]: line: 187 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator^[1013] params(1) in file: lib\support\/0.2.9//primitives.sharp:188:8: note:  
		    def operator^(num : char)   := (value^num.value);
		       ^

0 [0x0]: line: 188 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator^[1014] params(1) in file: lib\support\/0.2.9//primitives.sharp:189:8: note:  
		    def operator^(num : byte)   := (value^num.value);
		       ^

0 [0x0]: line: 189 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator^[1015] params(1) in file: lib\support\/0.2.9//primitives.sharp:190:8: note:  
		    def operator^(num : bool)   := (value^num.value);
		       ^

0 [0x0]: line: 190 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator^[1016] params(1) in file: lib\support\/0.2.9//primitives.sharp:191:8: note:  
		    def operator^(num : double)   := (value^num.value);
		       ^

0 [0x0]: line: 191 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator^[1017] params(1) in file: lib\support\/0.2.9//primitives.sharp:192:8: note:  
		    def operator^(num : var)    := (value^num);
		       ^

0 [0x0]: line: 192 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           xor ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint16>.operator&[1018] params(1) in file: lib\support\/0.2.9//primitives.sharp:194:8: note:  
		    def operator&(num : ulong)  := (value&num.value);
		       ^

0 [0x0]: line: 194 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator&[1019] params(1) in file: lib\support\/0.2.9//primitives.sharp:195:8: note:  
		    def operator&(num : long)   := (value&num.value);
		       ^

0 [0x0]: line: 195 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator&[1020] params(1) in file: lib\support\/0.2.9//primitives.sharp:196:8: note:  
		    def operator&(num : uint)   := (value&num.value);
		       ^

0 [0x0]: line: 196 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator&[1021] params(1) in file: lib\support\/0.2.9//primitives.sharp:197:8: note:  
		    def operator&(num : int)    := (value&num.value);
		       ^

0 [0x0]: line: 197 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator&[1022] params(1) in file: lib\support\/0.2.9//primitives.sharp:198:8: note:  
		    def operator&(num : ushort) := (value&num.value);
		       ^

0 [0x0]: line: 198 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator&[1023] params(1) in file: lib\support\/0.2.9//primitives.sharp:199:8: note:  
		    def operator&(num : short)  := (value&num.value);
		       ^

0 [0x0]: line: 199 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator&[1024] params(1) in file: lib\support\/0.2.9//primitives.sharp:200:8: note:  
		    def operator&(num : uchar)  := (value&num.value);
		       ^

0 [0x0]: line: 200 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator&[1025] params(1) in file: lib\support\/0.2.9//primitives.sharp:201:8: note:  
		    def operator&(num : char)   := (value&num.value);
		       ^

0 [0x0]: line: 201 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator&[1026] params(1) in file: lib\support\/0.2.9//primitives.sharp:202:8: note:  
		    def operator&(num : byte)   := (value&num.value);
		       ^

0 [0x0]: line: 202 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator&[1027] params(1) in file: lib\support\/0.2.9//primitives.sharp:203:8: note:  
		    def operator&(num : bool)   := (value&num.value);
		       ^

0 [0x0]: line: 203 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator&[1028] params(1) in file: lib\support\/0.2.9//primitives.sharp:204:8: note:  
		    def operator&(num : double)   := (value&num.value);
		       ^

0 [0x0]: line: 204 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator&[1029] params(1) in file: lib\support\/0.2.9//primitives.sharp:205:8: note:  
		    def operator&(num : var)    := (value&num);
		       ^

0 [0x0]: line: 205 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           uand ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint16>.operator|[1030] params(1) in file: lib\support\/0.2.9//primitives.sharp:207:8: note:  
		    def operator|(num : ulong)  := (value|num.value);
		       ^

0 [0x0]: line: 207 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator|[1031] params(1) in file: lib\support\/0.2.9//primitives.sharp:208:8: note:  
		    def operator|(num : long)   := (value|num.value);
		       ^

0 [0x0]: line: 208 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator|[1032] params(1) in file: lib\support\/0.2.9//primitives.sharp:209:8: note:  
		    def operator|(num : uint)   := (value|num.value);
		       ^

0 [0x0]: line: 209 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator|[1033] params(1) in file: lib\support\/0.2.9//primitives.sharp:210:8: note:  
		    def operator|(num : int)    := (value|num.value);
		       ^

0 [0x0]: line: 210 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator|[1034] params(1) in file: lib\support\/0.2.9//primitives.sharp:211:8: note:  
		    def operator|(num : ushort) := (value|num.value);
		       ^

0 [0x0]: line: 211 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator|[1035] params(1) in file: lib\support\/0.2.9//primitives.sharp:212:8: note:  
		    def operator|(num : short)  := (value|num.value);
		       ^

0 [0x0]: line: 212 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator|[1036] params(1) in file: lib\support\/0.2.9//primitives.sharp:213:8: note:  
		    def operator|(num : uchar)  := (value|num.value);
		       ^

0 [0x0]: line: 213 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator|[1037] params(1) in file: lib\support\/0.2.9//primitives.sharp:214:8: note:  
		    def operator|(num : char)   := (value|num.value);
		       ^

0 [0x0]: line: 214 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator|[1038] params(1) in file: lib\support\/0.2.9//primitives.sharp:215:8: note:  
		    def operator|(num : byte)   := (value|num.value);
		       ^

0 [0x0]: line: 215 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator|[1039] params(1) in file: lib\support\/0.2.9//primitives.sharp:216:8: note:  
		    def operator|(num : bool)   := (value|num.value);
		       ^

0 [0x0]: line: 216 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator|[1040] params(1) in file: lib\support\/0.2.9//primitives.sharp:217:8: note:  
		    def operator|(num : double)   := (value|num.value);
		       ^

0 [0x0]: line: 217 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint16>.operator|[1041] params(1) in file: lib\support\/0.2.9//primitives.sharp:218:8: note:  
		    def operator|(num : var)    := (value|num);
		       ^

0 [0x0]: line: 218 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           or ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint16>.operator!=[1042] params(1) in file: lib\support\/0.2.9//primitives.sharp:220:8: note:  
		    def operator!=(num : var) := value!=num;
		       ^

0 [0x0]: line: 220 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           tne ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint16>.operator==[1043] params(1) in file: lib\support\/0.2.9//primitives.sharp:221:8: note:  
		    def operator==(num : var) := value==num;
		       ^

0 [0x0]: line: 221 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           test ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint16>.operator=[1044] params(1) in file: lib\support\/0.2.9//primitives.sharp:222:8: note:  
		    def operator=(num : var) := value=num;
		       ^

0 [0x0]: line: 222 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           loadval ebx   
5 [0x5]:           movu16 ebx, ebx   
6 [0x6]:           movi #0, adx   
8 [0x8]:           rmov adx, ebx   
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std#integer<_uint16>.to_string[1045] params(0) in file: lib\support\/0.2.9//primitives.sharp:224:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 225 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           newstr @55 //    
4 [0x4]:           call @3546 // <std#string.string>   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           rstore ebx   
12 [0xc]:           call @3584 // <std#string.operator+>   
13 [0xd]:           popobj2    
14 [0xe]:           returnobj   
15 [0xf]:           ret   


function: std#integer<_uint16>.parse[1046] params(1) in file: lib\support\/0.2.9//primitives.sharp:228:15: note:  
		    static def parse(s: string) : native_type {
		              ^

0 [0x0]: line: 229 movi #0, ebx   
2 [0x2]:           movu16 ebx, ebx   
3 [0x3]:           smovr_2 ebx, fp+1   
4 [0x4]: line: 231 movi #0, ebx   
6 [0x6]:           movr cmt, ebx   
7 [0x7]:           jne 14   
8 [0x8]: line: 232 pushl 0   
9 [0x9]:           call @1898 // <std#__srt_global.strtod>   
10 [0xa]:           loadval ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   
13 [0xd]:           jmp @104   
14 [0xe]: line: 234 istorel 0, fp+2   
16 [0x10]: line: 235 istorel 0, fp+3   
18 [0x12]: line: 236 pushl 0   
19 [0x13]:           call @3587 // <std#string.size>   
20 [0x14]:           ipopl 4   
21 [0x15]: line: 238 pushl 0   
22 [0x16]:           istore 0   
24 [0x18]:           call @3568 // <std#string.at>   
25 [0x19]:           loadval ebx   
26 [0x1a]:           rstore ebx   
27 [0x1b]:           movi #45, ebx   
29 [0x1d]:           loadval ecx   
30 [0x1e]:           test ecx, ebx   
31 [0x1f]:           movr ebx, cmt   
32 [0x20]:           movr cmt, ebx   
33 [0x21]:           jne 38   
34 [0x22]: line: 239 istorel 1, fp+3   
36 [0x24]: line: 240 istorel 1, fp+2   
38 [0x26]:           nop   
39 [0x27]: line: 243 ipushl #2   
40 [0x28]:           loadl ebx, fp+4   
41 [0x29]:           loadval ecx   
42 [0x2a]:           lt ecx, ebx   
43 [0x2b]:           movr ebx, cmt   
44 [0x2c]:           movr cmt, ebx   
45 [0x2d]:           jne 93   
46 [0x2e]: line: 244 pushl 0   
47 [0x2f]:           ipushl #2   
48 [0x30]:           call @3568 // <std#string.at>   
49 [0x31]:           call @3209 // <std#char.is_digit>   
50 [0x32]:           loadval ebx   
51 [0x33]:           not ebx, ebx   
52 [0x34]:           movr cmt, ebx   
53 [0x35]:           jne 68   
54 [0x36]: line: 245 new_class @4 // std#illegal_argument_exception   
56 [0x38]:           dup    
57 [0x39]:           new_class @75 // std#string   
59 [0x3b]:           dup    
60 [0x3c]:           newstr @561 // illegal char in string:    
61 [0x3d]:           call @3546 // <std#string.string>   
62 [0x3e]:           pushl 0   
63 [0x3f]:           ipushl #2   
64 [0x40]:           call @3568 // <std#string.at>   
65 [0x41]:           call @3579 // <std#string.operator+>   
66 [0x42]:           call @1962 // <std#illegal_argument_exception.illegal_argument_exception>   
67 [0x43]:           throw    
68 [0x44]:           nop   
69 [0x45]: line: 249 movi #10, ebx   
71 [0x47]:           loadl ecx, fp+1   
72 [0x48]:           mul ecx, ebx -> ebx   
73 [0x49]:           movu16 ebx, ebx   
74 [0x4a]:           smovr_2 ebx, fp+1   
75 [0x4b]: line: 250 pushl 0   
76 [0x4c]:           loadl ebx, fp+2   
77 [0x4d]:           movr egx, ebx   
78 [0x4e]:           inc ebx   
79 [0x4f]:           smovr_2 ebx, fp+2   
80 [0x50]:           rstore egx   
81 [0x51]:           call @3568 // <std#string.at>   
82 [0x52]:           loadval ebx   
83 [0x53]:           rstore ebx   
84 [0x54]:           movi #48, ebx   
86 [0x56]:           loadval ecx   
87 [0x57]:           sub ecx, ebx -> ebx   
88 [0x58]:           loadl ecx, fp+1   
89 [0x59]:           add ecx, ebx -> ebx   
90 [0x5a]:           movu16 ebx, ebx   
91 [0x5b]:           smovr_2 ebx, fp+1   
92 [0x5c]:           jmp @39   
93 [0x5d]: line: 252 loadl ebx, fp+3   
94 [0x5e]:           movr cmt, ebx   
95 [0x5f]:           jne 100   
96 [0x60]: line: 253 loadl ebx, fp+1   
97 [0x61]:           neg ebx, ebx   
98 [0x62]:           movu16 ebx, ebx   
99 [0x63]:           smovr_2 ebx, fp+1   
100 [0x64]:           nop   
101 [0x65]: line: 254 loadl ebx, fp+1   
102 [0x66]:           return_val ebx   
103 [0x67]:           ret   
104 [0x68]:           nop   


function: std#integer<_uint16>.to_ulong[1047] params(0) in file: lib\support\/0.2.9//primitives.sharp:258:8: note:  
		    def to_ulong() := new ulong { value };
		       ^

0 [0x0]: line: 258 new_class @53 // std#ulong   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu64 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint16>.to_long[1048] params(0) in file: lib\support\/0.2.9//primitives.sharp:259:8: note:  
		    def to_long() := new long { value };
		       ^

0 [0x0]: line: 259 new_class @54 // std#long   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov64 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint16>.to_uint[1049] params(0) in file: lib\support\/0.2.9//primitives.sharp:260:8: note:  
		    def to_uint() := new uint { value };
		       ^

0 [0x0]: line: 260 new_class @55 // std#uint   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu32 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint16>.to_int[1050] params(0) in file: lib\support\/0.2.9//primitives.sharp:261:8: note:  
		    def to_int() := new int { value };
		       ^

0 [0x0]: line: 261 new_class @56 // std#int   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov32 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint16>.to_ushort[1051] params(0) in file: lib\support\/0.2.9//primitives.sharp:262:8: note:  
		    def to_ushort() := new ushort { value };
		       ^

0 [0x0]: line: 262 new_class @57 // std#ushort   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu16 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint16>.to_short[1052] params(0) in file: lib\support\/0.2.9//primitives.sharp:263:8: note:  
		    def to_short() := new short { value };
		       ^

0 [0x0]: line: 263 new_class @58 // std#short   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov16 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint16>.to_uchar[1053] params(0) in file: lib\support\/0.2.9//primitives.sharp:264:8: note:  
		    def to_uchar() := new uchar { value };
		       ^

0 [0x0]: line: 264 new_class @59 // std#uchar   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint16>.to_char[1054] params(0) in file: lib\support\/0.2.9//primitives.sharp:265:8: note:  
		    def to_char() := new char { value };
		       ^

0 [0x0]: line: 265 new_class @60 // std#char   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint16>.to_byte[1055] params(0) in file: lib\support\/0.2.9//primitives.sharp:266:8: note:  
		    def to_byte() := new byte { value };
		       ^

0 [0x0]: line: 266 new_class @61 // std#byte   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint16>.to_bool[1056] params(0) in file: lib\support\/0.2.9//primitives.sharp:267:8: note:  
		    def to_bool() := new bool { value };
		       ^

0 [0x0]: line: 267 new_class @62 // std#bool   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint16>.to_double[1057] params(0) in file: lib\support\/0.2.9//primitives.sharp:268:8: note:  
		    def to_double() := new double { value };
		       ^

0 [0x0]: line: 268 new_class @63 // std#double   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint16>.get_value[1058] params(0) in file: lib\support\/0.2.9//primitives.sharp:270:8: note:  
		    def get_value() := value;
		       ^

0 [0x0]: line: 270 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


constructor: std#integer<_uint16>.integer[1059] params(0) in file: lib\support\/0.2.9//primitives.sharp:5:13: note:  
		public class integer<native_type> {
		            ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#integer<_int16>.integer[1060] params(1) in file: lib\support\/0.2.9//primitives.sharp:8:12: note:  
		    integer(initial_val : var) {
		           ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 9 ipushl #1   
2 [0x2]:         movl 0   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         mov16 ebx, ebx   
7 [0x7]:         movi #0, adx   
9 [0x9]:         rmov adx, ebx   
10 [0xa]:         ret   


function: std#integer<_int16>.hash[1061] params(0) in file: lib\support\/0.2.9//primitives.sharp:12:8: note:  
		    def hash() : _int64 {
		       ^

0 [0x0]: line: 13 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          return_val ebx   
7 [0x7]:          ret   


overload function: std#integer<_int16>.operator!=[1062] params(1) in file: lib\support\/0.2.9//primitives.sharp:16:8: note:  
		    def operator!=(num : ulong) := (value!=num.value);
		       ^

0 [0x0]: line: 16 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator==[1063] params(1) in file: lib\support\/0.2.9//primitives.sharp:17:8: note:  
		    def operator==(num : ulong) := (value==num.value);
		       ^

0 [0x0]: line: 17 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator!=[1064] params(1) in file: lib\support\/0.2.9//primitives.sharp:18:8: note:  
		    def operator!=(num : long) := (value!=num.value);
		       ^

0 [0x0]: line: 18 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator==[1065] params(1) in file: lib\support\/0.2.9//primitives.sharp:19:8: note:  
		    def operator==(num : long) := (value==num.value);
		       ^

0 [0x0]: line: 19 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator!=[1066] params(1) in file: lib\support\/0.2.9//primitives.sharp:20:8: note:  
		    def operator!=(num : uint) := (value!=num.value);
		       ^

0 [0x0]: line: 20 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator==[1067] params(1) in file: lib\support\/0.2.9//primitives.sharp:21:8: note:  
		    def operator==(num : uint) := (value==num.value);
		       ^

0 [0x0]: line: 21 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator!=[1068] params(1) in file: lib\support\/0.2.9//primitives.sharp:22:8: note:  
		    def operator!=(num : int) := (value!=num.value);
		       ^

0 [0x0]: line: 22 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator==[1069] params(1) in file: lib\support\/0.2.9//primitives.sharp:23:8: note:  
		    def operator==(num : int) := (value==num.value);
		       ^

0 [0x0]: line: 23 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator!=[1070] params(1) in file: lib\support\/0.2.9//primitives.sharp:24:8: note:  
		    def operator!=(num : ushort) := (value!=num.value);
		       ^

0 [0x0]: line: 24 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator==[1071] params(1) in file: lib\support\/0.2.9//primitives.sharp:25:8: note:  
		    def operator==(num : ushort) := (value==num.value);
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator!=[1072] params(1) in file: lib\support\/0.2.9//primitives.sharp:26:8: note:  
		    def operator!=(num : short) := (value!=num.value);
		       ^

0 [0x0]: line: 26 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator==[1073] params(1) in file: lib\support\/0.2.9//primitives.sharp:27:8: note:  
		    def operator==(num : short) := (value==num.value);
		       ^

0 [0x0]: line: 27 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator!=[1074] params(1) in file: lib\support\/0.2.9//primitives.sharp:28:8: note:  
		    def operator!=(num : uchar) := (value!=num.value);
		       ^

0 [0x0]: line: 28 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator==[1075] params(1) in file: lib\support\/0.2.9//primitives.sharp:29:8: note:  
		    def operator==(num : uchar) := (value==num.value);
		       ^

0 [0x0]: line: 29 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator!=[1076] params(1) in file: lib\support\/0.2.9//primitives.sharp:30:8: note:  
		    def operator!=(num : char) := (value!=num.value);
		       ^

0 [0x0]: line: 30 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator==[1077] params(1) in file: lib\support\/0.2.9//primitives.sharp:31:8: note:  
		    def operator==(num : char) := (value==num.value);
		       ^

0 [0x0]: line: 31 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator!=[1078] params(1) in file: lib\support\/0.2.9//primitives.sharp:32:8: note:  
		    def operator!=(num : byte) := (value!=num.value);
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator==[1079] params(1) in file: lib\support\/0.2.9//primitives.sharp:33:8: note:  
		    def operator==(num : byte) := (value==num.value);
		       ^

0 [0x0]: line: 33 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator!=[1080] params(1) in file: lib\support\/0.2.9//primitives.sharp:34:8: note:  
		    def operator!=(num : bool) := (value!=num.value);
		       ^

0 [0x0]: line: 34 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator==[1081] params(1) in file: lib\support\/0.2.9//primitives.sharp:35:8: note:  
		    def operator==(num : bool) := (value==num.value);
		       ^

0 [0x0]: line: 35 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator==[1082] params(1) in file: lib\support\/0.2.9//primitives.sharp:36:8: note:  
		    def operator==(num : double) := (value==num.value);
		       ^

0 [0x0]: line: 36 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator+[1083] params(1) in file: lib\support\/0.2.9//primitives.sharp:38:8: note:  
		    def operator+(num : ulong)  := (value+num.value);
		       ^

0 [0x0]: line: 38 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator+[1084] params(1) in file: lib\support\/0.2.9//primitives.sharp:39:8: note:  
		    def operator+(num : long)   := (value+num.value);
		       ^

0 [0x0]: line: 39 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator+[1085] params(1) in file: lib\support\/0.2.9//primitives.sharp:40:8: note:  
		    def operator+(num : uint)   := (value+num.value);
		       ^

0 [0x0]: line: 40 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator+[1086] params(1) in file: lib\support\/0.2.9//primitives.sharp:41:8: note:  
		    def operator+(num : int)    := (value+num.value);
		       ^

0 [0x0]: line: 41 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator+[1087] params(1) in file: lib\support\/0.2.9//primitives.sharp:42:8: note:  
		    def operator+(num : ushort) := (value+num.value);
		       ^

0 [0x0]: line: 42 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator+[1088] params(1) in file: lib\support\/0.2.9//primitives.sharp:43:8: note:  
		    def operator+(num : short)  := (value+num.value);
		       ^

0 [0x0]: line: 43 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator+[1089] params(1) in file: lib\support\/0.2.9//primitives.sharp:44:8: note:  
		    def operator+(num : uchar)  := (value+num.value);
		       ^

0 [0x0]: line: 44 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator+[1090] params(1) in file: lib\support\/0.2.9//primitives.sharp:45:8: note:  
		    def operator+(num : char)   := (value+num.value);
		       ^

0 [0x0]: line: 45 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator+[1091] params(1) in file: lib\support\/0.2.9//primitives.sharp:46:8: note:  
		    def operator+(num : byte)   := (value+num.value);
		       ^

0 [0x0]: line: 46 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator+[1092] params(1) in file: lib\support\/0.2.9//primitives.sharp:47:8: note:  
		    def operator+(num : bool)   := (value+num.value);
		       ^

0 [0x0]: line: 47 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator+[1093] params(1) in file: lib\support\/0.2.9//primitives.sharp:48:8: note:  
		    def operator+(num : double)   := (value+num.value);
		       ^

0 [0x0]: line: 48 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator+[1094] params(1) in file: lib\support\/0.2.9//primitives.sharp:49:8: note:  
		    def operator+(num : var)    := (value+num);
		       ^

0 [0x0]: line: 49 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          add ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int16>.operator-[1095] params(1) in file: lib\support\/0.2.9//primitives.sharp:51:8: note:  
		    def operator-(num : ulong)  := (value-num.value);
		       ^

0 [0x0]: line: 51 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator-[1096] params(1) in file: lib\support\/0.2.9//primitives.sharp:52:8: note:  
		    def operator-(num : long)   := (value-num.value);
		       ^

0 [0x0]: line: 52 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator-[1097] params(1) in file: lib\support\/0.2.9//primitives.sharp:53:8: note:  
		    def operator-(num : uint)   := (value-num.value);
		       ^

0 [0x0]: line: 53 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator-[1098] params(1) in file: lib\support\/0.2.9//primitives.sharp:54:8: note:  
		    def operator-(num : int)    := (value-num.value);
		       ^

0 [0x0]: line: 54 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator-[1099] params(1) in file: lib\support\/0.2.9//primitives.sharp:55:8: note:  
		    def operator-(num : ushort) := (value-num.value);
		       ^

0 [0x0]: line: 55 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator-[1100] params(1) in file: lib\support\/0.2.9//primitives.sharp:56:8: note:  
		    def operator-(num : short)  := (value-num.value);
		       ^

0 [0x0]: line: 56 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator-[1101] params(1) in file: lib\support\/0.2.9//primitives.sharp:57:8: note:  
		    def operator-(num : uchar)  := (value-num.value);
		       ^

0 [0x0]: line: 57 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator-[1102] params(1) in file: lib\support\/0.2.9//primitives.sharp:58:8: note:  
		    def operator-(num : char)   := (value-num.value);
		       ^

0 [0x0]: line: 58 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator-[1103] params(1) in file: lib\support\/0.2.9//primitives.sharp:59:8: note:  
		    def operator-(num : byte)   := (value-num.value);
		       ^

0 [0x0]: line: 59 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator-[1104] params(1) in file: lib\support\/0.2.9//primitives.sharp:60:8: note:  
		    def operator-(num : bool)   := (value-num.value);
		       ^

0 [0x0]: line: 60 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator-[1105] params(1) in file: lib\support\/0.2.9//primitives.sharp:61:8: note:  
		    def operator-(num : double)   := (value-num.value);
		       ^

0 [0x0]: line: 61 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator-[1106] params(1) in file: lib\support\/0.2.9//primitives.sharp:62:8: note:  
		    def operator-(num : var)    := (value-num);
		       ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          sub ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int16>.operator*[1107] params(1) in file: lib\support\/0.2.9//primitives.sharp:64:8: note:  
		    def operator*(num : ulong)  := (value*num.value);
		       ^

0 [0x0]: line: 64 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator*[1108] params(1) in file: lib\support\/0.2.9//primitives.sharp:65:8: note:  
		    def operator*(num : long)   := (value*num.value);
		       ^

0 [0x0]: line: 65 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator*[1109] params(1) in file: lib\support\/0.2.9//primitives.sharp:66:8: note:  
		    def operator*(num : uint)   := (value*num.value);
		       ^

0 [0x0]: line: 66 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator*[1110] params(1) in file: lib\support\/0.2.9//primitives.sharp:67:8: note:  
		    def operator*(num : int)    := (value*num.value);
		       ^

0 [0x0]: line: 67 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator*[1111] params(1) in file: lib\support\/0.2.9//primitives.sharp:68:8: note:  
		    def operator*(num : ushort) := (value*num.value);
		       ^

0 [0x0]: line: 68 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator*[1112] params(1) in file: lib\support\/0.2.9//primitives.sharp:69:8: note:  
		    def operator*(num : short)  := (value*num.value);
		       ^

0 [0x0]: line: 69 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator*[1113] params(1) in file: lib\support\/0.2.9//primitives.sharp:70:8: note:  
		    def operator*(num : uchar)  := (value*num.value);
		       ^

0 [0x0]: line: 70 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator*[1114] params(1) in file: lib\support\/0.2.9//primitives.sharp:71:8: note:  
		    def operator*(num : char)   := (value*num.value);
		       ^

0 [0x0]: line: 71 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator*[1115] params(1) in file: lib\support\/0.2.9//primitives.sharp:72:8: note:  
		    def operator*(num : byte)   := (value*num.value);
		       ^

0 [0x0]: line: 72 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator*[1116] params(1) in file: lib\support\/0.2.9//primitives.sharp:73:8: note:  
		    def operator*(num : bool)   := (value*num.value);
		       ^

0 [0x0]: line: 73 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator*[1117] params(1) in file: lib\support\/0.2.9//primitives.sharp:74:8: note:  
		    def operator*(num : double)   := (value*num.value);
		       ^

0 [0x0]: line: 74 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator*[1118] params(1) in file: lib\support\/0.2.9//primitives.sharp:75:8: note:  
		    def operator*(num : var)    := (value*num);
		       ^

0 [0x0]: line: 75 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          mul ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int16>.operator/[1119] params(1) in file: lib\support\/0.2.9//primitives.sharp:77:8: note:  
		    def operator/(num : ulong)  := (value/num.value);
		       ^

0 [0x0]: line: 77 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator/[1120] params(1) in file: lib\support\/0.2.9//primitives.sharp:78:8: note:  
		    def operator/(num : long)   := (value/num.value);
		       ^

0 [0x0]: line: 78 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator/[1121] params(1) in file: lib\support\/0.2.9//primitives.sharp:79:8: note:  
		    def operator/(num : uint)   := (value/num.value);
		       ^

0 [0x0]: line: 79 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator/[1122] params(1) in file: lib\support\/0.2.9//primitives.sharp:80:8: note:  
		    def operator/(num : int)    := (value/num.value);
		       ^

0 [0x0]: line: 80 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator/[1123] params(1) in file: lib\support\/0.2.9//primitives.sharp:81:8: note:  
		    def operator/(num : ushort) := (value/num.value);
		       ^

0 [0x0]: line: 81 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator/[1124] params(1) in file: lib\support\/0.2.9//primitives.sharp:82:8: note:  
		    def operator/(num : short)  := (value/num.value);
		       ^

0 [0x0]: line: 82 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator/[1125] params(1) in file: lib\support\/0.2.9//primitives.sharp:83:8: note:  
		    def operator/(num : uchar)  := (value/num.value);
		       ^

0 [0x0]: line: 83 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator/[1126] params(1) in file: lib\support\/0.2.9//primitives.sharp:84:8: note:  
		    def operator/(num : char)   := (value/num.value);
		       ^

0 [0x0]: line: 84 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator/[1127] params(1) in file: lib\support\/0.2.9//primitives.sharp:85:8: note:  
		    def operator/(num : byte)   := (value/num.value);
		       ^

0 [0x0]: line: 85 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator/[1128] params(1) in file: lib\support\/0.2.9//primitives.sharp:86:8: note:  
		    def operator/(num : bool)   := (value/num.value);
		       ^

0 [0x0]: line: 86 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator/[1129] params(1) in file: lib\support\/0.2.9//primitives.sharp:87:8: note:  
		    def operator/(num : double)   := (value/num.value);
		       ^

0 [0x0]: line: 87 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator/[1130] params(1) in file: lib\support\/0.2.9//primitives.sharp:88:8: note:  
		    def operator/(num : var)    := (value/num);
		       ^

0 [0x0]: line: 88 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          div ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int16>.operator%[1131] params(1) in file: lib\support\/0.2.9//primitives.sharp:90:8: note:  
		    def operator%(num : ulong)  := (value%num.value);
		       ^

0 [0x0]: line: 90 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator%[1132] params(1) in file: lib\support\/0.2.9//primitives.sharp:91:8: note:  
		    def operator%(num : long)   := (value%num.value);
		       ^

0 [0x0]: line: 91 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator%[1133] params(1) in file: lib\support\/0.2.9//primitives.sharp:92:8: note:  
		    def operator%(num : uint)   := (value%num.value);
		       ^

0 [0x0]: line: 92 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator%[1134] params(1) in file: lib\support\/0.2.9//primitives.sharp:93:8: note:  
		    def operator%(num : int)    := (value%num.value);
		       ^

0 [0x0]: line: 93 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator%[1135] params(1) in file: lib\support\/0.2.9//primitives.sharp:94:8: note:  
		    def operator%(num : ushort) := (value%num.value);
		       ^

0 [0x0]: line: 94 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator%[1136] params(1) in file: lib\support\/0.2.9//primitives.sharp:95:8: note:  
		    def operator%(num : short)  := (value%num.value);
		       ^

0 [0x0]: line: 95 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator%[1137] params(1) in file: lib\support\/0.2.9//primitives.sharp:96:8: note:  
		    def operator%(num : uchar)  := (value%num.value);
		       ^

0 [0x0]: line: 96 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator%[1138] params(1) in file: lib\support\/0.2.9//primitives.sharp:97:8: note:  
		    def operator%(num : char)   := (value%num.value);
		       ^

0 [0x0]: line: 97 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator%[1139] params(1) in file: lib\support\/0.2.9//primitives.sharp:98:8: note:  
		    def operator%(num : byte)   := (value%num.value);
		       ^

0 [0x0]: line: 98 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator%[1140] params(1) in file: lib\support\/0.2.9//primitives.sharp:99:8: note:  
		    def operator%(num : bool)   := (value%num.value);
		       ^

0 [0x0]: line: 99 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int16>.operator%[1141] params(1) in file: lib\support\/0.2.9//primitives.sharp:100:8: note:  
		    def operator%(num : double)   := (value%num.value);
		       ^

0 [0x0]: line: 100 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator%[1142] params(1) in file: lib\support\/0.2.9//primitives.sharp:101:8: note:  
		    def operator%(num : var)    := (value%num);
		       ^

0 [0x0]: line: 101 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           mod ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int16>.operator<[1143] params(1) in file: lib\support\/0.2.9//primitives.sharp:103:8: note:  
		    def operator<(num : ulong)  := (value<num.value);
		       ^

0 [0x0]: line: 103 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<[1144] params(1) in file: lib\support\/0.2.9//primitives.sharp:104:8: note:  
		    def operator<(num : long)   := (value<num.value);
		       ^

0 [0x0]: line: 104 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<[1145] params(1) in file: lib\support\/0.2.9//primitives.sharp:105:8: note:  
		    def operator<(num : uint)   := (value<num.value);
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<[1146] params(1) in file: lib\support\/0.2.9//primitives.sharp:106:8: note:  
		    def operator<(num : int)    := (value<num.value);
		       ^

0 [0x0]: line: 106 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<[1147] params(1) in file: lib\support\/0.2.9//primitives.sharp:107:8: note:  
		    def operator<(num : ushort) := (value<num.value);
		       ^

0 [0x0]: line: 107 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<[1148] params(1) in file: lib\support\/0.2.9//primitives.sharp:108:8: note:  
		    def operator<(num : short)  := (value<num.value);
		       ^

0 [0x0]: line: 108 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<[1149] params(1) in file: lib\support\/0.2.9//primitives.sharp:109:8: note:  
		    def operator<(num : uchar)  := (value<num.value);
		       ^

0 [0x0]: line: 109 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<[1150] params(1) in file: lib\support\/0.2.9//primitives.sharp:110:8: note:  
		    def operator<(num : char)   := (value<num.value);
		       ^

0 [0x0]: line: 110 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<[1151] params(1) in file: lib\support\/0.2.9//primitives.sharp:111:8: note:  
		    def operator<(num : byte)   := (value<num.value);
		       ^

0 [0x0]: line: 111 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<[1152] params(1) in file: lib\support\/0.2.9//primitives.sharp:112:8: note:  
		    def operator<(num : bool)   := (value<num.value);
		       ^

0 [0x0]: line: 112 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<[1153] params(1) in file: lib\support\/0.2.9//primitives.sharp:113:8: note:  
		    def operator<(num : double)   := (value<num.value);
		       ^

0 [0x0]: line: 113 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<[1154] params(1) in file: lib\support\/0.2.9//primitives.sharp:114:8: note:  
		    def operator<(num : var)    := (value<num);
		       ^

0 [0x0]: line: 114 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           lt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int16>.operator>[1155] params(1) in file: lib\support\/0.2.9//primitives.sharp:116:8: note:  
		    def operator>(num : ulong)  := (value>num.value);
		       ^

0 [0x0]: line: 116 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>[1156] params(1) in file: lib\support\/0.2.9//primitives.sharp:117:8: note:  
		    def operator>(num : long)   := (value>num.value);
		       ^

0 [0x0]: line: 117 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>[1157] params(1) in file: lib\support\/0.2.9//primitives.sharp:118:8: note:  
		    def operator>(num : uint)   := (value>num.value);
		       ^

0 [0x0]: line: 118 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>[1158] params(1) in file: lib\support\/0.2.9//primitives.sharp:119:8: note:  
		    def operator>(num : int)    := (value>num.value);
		       ^

0 [0x0]: line: 119 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>[1159] params(1) in file: lib\support\/0.2.9//primitives.sharp:120:8: note:  
		    def operator>(num : ushort) := (value>num.value);
		       ^

0 [0x0]: line: 120 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>[1160] params(1) in file: lib\support\/0.2.9//primitives.sharp:121:8: note:  
		    def operator>(num : short)  := (value>num.value);
		       ^

0 [0x0]: line: 121 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>[1161] params(1) in file: lib\support\/0.2.9//primitives.sharp:122:8: note:  
		    def operator>(num : uchar)  := (value>num.value);
		       ^

0 [0x0]: line: 122 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>[1162] params(1) in file: lib\support\/0.2.9//primitives.sharp:123:8: note:  
		    def operator>(num : char)   := (value>num.value);
		       ^

0 [0x0]: line: 123 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>[1163] params(1) in file: lib\support\/0.2.9//primitives.sharp:124:8: note:  
		    def operator>(num : byte)   := (value>num.value);
		       ^

0 [0x0]: line: 124 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>[1164] params(1) in file: lib\support\/0.2.9//primitives.sharp:125:8: note:  
		    def operator>(num : bool)   := (value>num.value);
		       ^

0 [0x0]: line: 125 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>[1165] params(1) in file: lib\support\/0.2.9//primitives.sharp:126:8: note:  
		    def operator>(num : double)   := (value>num.value);
		       ^

0 [0x0]: line: 126 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>[1166] params(1) in file: lib\support\/0.2.9//primitives.sharp:127:8: note:  
		    def operator>(num : var)    := (value>num);
		       ^

0 [0x0]: line: 127 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int16>.operator<=[1167] params(1) in file: lib\support\/0.2.9//primitives.sharp:129:8: note:  
		    def operator<=(num : ulong)  := (value>=num.value);
		       ^

0 [0x0]: line: 129 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<=[1168] params(1) in file: lib\support\/0.2.9//primitives.sharp:130:8: note:  
		    def operator<=(num : long)   := (value>=num.value);
		       ^

0 [0x0]: line: 130 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<=[1169] params(1) in file: lib\support\/0.2.9//primitives.sharp:131:8: note:  
		    def operator<=(num : uint)   := (value>=num.value);
		       ^

0 [0x0]: line: 131 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<=[1170] params(1) in file: lib\support\/0.2.9//primitives.sharp:132:8: note:  
		    def operator<=(num : int)    := (value>=num.value);
		       ^

0 [0x0]: line: 132 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<=[1171] params(1) in file: lib\support\/0.2.9//primitives.sharp:133:8: note:  
		    def operator<=(num : ushort) := (value>=num.value);
		       ^

0 [0x0]: line: 133 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<=[1172] params(1) in file: lib\support\/0.2.9//primitives.sharp:134:8: note:  
		    def operator<=(num : short)  := (value>=num.value);
		       ^

0 [0x0]: line: 134 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<=[1173] params(1) in file: lib\support\/0.2.9//primitives.sharp:135:8: note:  
		    def operator<=(num : uchar)  := (value>=num.value);
		       ^

0 [0x0]: line: 135 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<=[1174] params(1) in file: lib\support\/0.2.9//primitives.sharp:136:8: note:  
		    def operator<=(num : char)   := (value>=num.value);
		       ^

0 [0x0]: line: 136 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<=[1175] params(1) in file: lib\support\/0.2.9//primitives.sharp:137:8: note:  
		    def operator<=(num : byte)   := (value>=num.value);
		       ^

0 [0x0]: line: 137 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<=[1176] params(1) in file: lib\support\/0.2.9//primitives.sharp:138:8: note:  
		    def operator<=(num : bool)   := (value>=num.value);
		       ^

0 [0x0]: line: 138 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<=[1177] params(1) in file: lib\support\/0.2.9//primitives.sharp:139:8: note:  
		    def operator<=(num : double)   := (value>=num.value);
		       ^

0 [0x0]: line: 139 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<=[1178] params(1) in file: lib\support\/0.2.9//primitives.sharp:140:8: note:  
		    def operator<=(num : var)    := (value>=num);
		       ^

0 [0x0]: line: 140 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gte ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int16>.operator**[1179] params(1) in file: lib\support\/0.2.9//primitives.sharp:142:8: note:  
		    def operator**(num : ulong)  := (value**num.value);
		       ^

0 [0x0]: line: 142 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator**[1180] params(1) in file: lib\support\/0.2.9//primitives.sharp:143:8: note:  
		    def operator**(num : long)   := (value**num.value);
		       ^

0 [0x0]: line: 143 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator**[1181] params(1) in file: lib\support\/0.2.9//primitives.sharp:144:8: note:  
		    def operator**(num : uint)   := (value**num.value);
		       ^

0 [0x0]: line: 144 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator**[1182] params(1) in file: lib\support\/0.2.9//primitives.sharp:145:8: note:  
		    def operator**(num : int)    := (value**num.value);
		       ^

0 [0x0]: line: 145 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator**[1183] params(1) in file: lib\support\/0.2.9//primitives.sharp:146:8: note:  
		    def operator**(num : ushort) := (value**num.value);
		       ^

0 [0x0]: line: 146 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator**[1184] params(1) in file: lib\support\/0.2.9//primitives.sharp:147:8: note:  
		    def operator**(num : short)  := (value**num.value);
		       ^

0 [0x0]: line: 147 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator**[1185] params(1) in file: lib\support\/0.2.9//primitives.sharp:148:8: note:  
		    def operator**(num : uchar)  := (value**num.value);
		       ^

0 [0x0]: line: 148 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator**[1186] params(1) in file: lib\support\/0.2.9//primitives.sharp:149:8: note:  
		    def operator**(num : char)   := (value**num.value);
		       ^

0 [0x0]: line: 149 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator**[1187] params(1) in file: lib\support\/0.2.9//primitives.sharp:150:8: note:  
		    def operator**(num : byte)   := (value**num.value);
		       ^

0 [0x0]: line: 150 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator**[1188] params(1) in file: lib\support\/0.2.9//primitives.sharp:151:8: note:  
		    def operator**(num : bool)   := (value**num.value);
		       ^

0 [0x0]: line: 151 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator**[1189] params(1) in file: lib\support\/0.2.9//primitives.sharp:152:8: note:  
		    def operator**(num : double)   := (value**num.value);
		       ^

0 [0x0]: line: 152 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator**[1190] params(1) in file: lib\support\/0.2.9//primitives.sharp:153:8: note:  
		    def operator**(num : var)    := (value**num);
		       ^

0 [0x0]: line: 153 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           exp ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int16>.operator<<[1191] params(1) in file: lib\support\/0.2.9//primitives.sharp:155:8: note:  
		    def operator<<(num : ulong)  := (value<<num.value);
		       ^

0 [0x0]: line: 155 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<<[1192] params(1) in file: lib\support\/0.2.9//primitives.sharp:156:8: note:  
		    def operator<<(num : long)   := (value<<num.value);
		       ^

0 [0x0]: line: 156 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<<[1193] params(1) in file: lib\support\/0.2.9//primitives.sharp:157:8: note:  
		    def operator<<(num : uint)   := (value<<num.value);
		       ^

0 [0x0]: line: 157 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<<[1194] params(1) in file: lib\support\/0.2.9//primitives.sharp:158:8: note:  
		    def operator<<(num : int)    := (value<<num.value);
		       ^

0 [0x0]: line: 158 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<<[1195] params(1) in file: lib\support\/0.2.9//primitives.sharp:159:8: note:  
		    def operator<<(num : ushort) := (value<<num.value);
		       ^

0 [0x0]: line: 159 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<<[1196] params(1) in file: lib\support\/0.2.9//primitives.sharp:160:8: note:  
		    def operator<<(num : short)  := (value<<num.value);
		       ^

0 [0x0]: line: 160 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<<[1197] params(1) in file: lib\support\/0.2.9//primitives.sharp:161:8: note:  
		    def operator<<(num : uchar)  := (value<<num.value);
		       ^

0 [0x0]: line: 161 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<<[1198] params(1) in file: lib\support\/0.2.9//primitives.sharp:162:8: note:  
		    def operator<<(num : char)   := (value<<num.value);
		       ^

0 [0x0]: line: 162 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<<[1199] params(1) in file: lib\support\/0.2.9//primitives.sharp:163:8: note:  
		    def operator<<(num : byte)   := (value<<num.value);
		       ^

0 [0x0]: line: 163 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<<[1200] params(1) in file: lib\support\/0.2.9//primitives.sharp:164:8: note:  
		    def operator<<(num : bool)   := (value<<num.value);
		       ^

0 [0x0]: line: 164 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<<[1201] params(1) in file: lib\support\/0.2.9//primitives.sharp:165:8: note:  
		    def operator<<(num : double)   := (value<<num.value);
		       ^

0 [0x0]: line: 165 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator<<[1202] params(1) in file: lib\support\/0.2.9//primitives.sharp:166:8: note:  
		    def operator<<(num : var)    := (value<<num);
		       ^

0 [0x0]: line: 166 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shl ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int16>.operator>>[1203] params(1) in file: lib\support\/0.2.9//primitives.sharp:168:8: note:  
		    def operator>>(num : ulong)  := (value>>num.value);
		       ^

0 [0x0]: line: 168 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>>[1204] params(1) in file: lib\support\/0.2.9//primitives.sharp:169:8: note:  
		    def operator>>(num : long)   := (value>>num.value);
		       ^

0 [0x0]: line: 169 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>>[1205] params(1) in file: lib\support\/0.2.9//primitives.sharp:170:8: note:  
		    def operator>>(num : uint)   := (value>>num.value);
		       ^

0 [0x0]: line: 170 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>>[1206] params(1) in file: lib\support\/0.2.9//primitives.sharp:171:8: note:  
		    def operator>>(num : int)    := (value>>num.value);
		       ^

0 [0x0]: line: 171 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>>[1207] params(1) in file: lib\support\/0.2.9//primitives.sharp:172:8: note:  
		    def operator>>(num : ushort) := (value>>num.value);
		       ^

0 [0x0]: line: 172 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>>[1208] params(1) in file: lib\support\/0.2.9//primitives.sharp:173:8: note:  
		    def operator>>(num : short)  := (value>>num.value);
		       ^

0 [0x0]: line: 173 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>>[1209] params(1) in file: lib\support\/0.2.9//primitives.sharp:174:8: note:  
		    def operator>>(num : uchar)  := (value>>num.value);
		       ^

0 [0x0]: line: 174 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>>[1210] params(1) in file: lib\support\/0.2.9//primitives.sharp:175:8: note:  
		    def operator>>(num : char)   := (value>>num.value);
		       ^

0 [0x0]: line: 175 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>>[1211] params(1) in file: lib\support\/0.2.9//primitives.sharp:176:8: note:  
		    def operator>>(num : byte)   := (value>>num.value);
		       ^

0 [0x0]: line: 176 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>>[1212] params(1) in file: lib\support\/0.2.9//primitives.sharp:177:8: note:  
		    def operator>>(num : bool)   := (value>>num.value);
		       ^

0 [0x0]: line: 177 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>>[1213] params(1) in file: lib\support\/0.2.9//primitives.sharp:178:8: note:  
		    def operator>>(num : double)   := (value>>num.value);
		       ^

0 [0x0]: line: 178 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator>>[1214] params(1) in file: lib\support\/0.2.9//primitives.sharp:179:8: note:  
		    def operator>>(num : var)    := (value>>num);
		       ^

0 [0x0]: line: 179 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shr ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int16>.operator^[1215] params(1) in file: lib\support\/0.2.9//primitives.sharp:181:8: note:  
		    def operator^(num : ulong)  := (value^num.value);
		       ^

0 [0x0]: line: 181 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator^[1216] params(1) in file: lib\support\/0.2.9//primitives.sharp:182:8: note:  
		    def operator^(num : long)   := (value^num.value);
		       ^

0 [0x0]: line: 182 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator^[1217] params(1) in file: lib\support\/0.2.9//primitives.sharp:183:8: note:  
		    def operator^(num : uint)   := (value^num.value);
		       ^

0 [0x0]: line: 183 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator^[1218] params(1) in file: lib\support\/0.2.9//primitives.sharp:184:8: note:  
		    def operator^(num : int)    := (value^num.value);
		       ^

0 [0x0]: line: 184 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator^[1219] params(1) in file: lib\support\/0.2.9//primitives.sharp:185:8: note:  
		    def operator^(num : ushort) := (value^num.value);
		       ^

0 [0x0]: line: 185 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator^[1220] params(1) in file: lib\support\/0.2.9//primitives.sharp:186:8: note:  
		    def operator^(num : short)  := (value^num.value);
		       ^

0 [0x0]: line: 186 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator^[1221] params(1) in file: lib\support\/0.2.9//primitives.sharp:187:8: note:  
		    def operator^(num : uchar)  := (value^num.value);
		       ^

0 [0x0]: line: 187 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator^[1222] params(1) in file: lib\support\/0.2.9//primitives.sharp:188:8: note:  
		    def operator^(num : char)   := (value^num.value);
		       ^

0 [0x0]: line: 188 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator^[1223] params(1) in file: lib\support\/0.2.9//primitives.sharp:189:8: note:  
		    def operator^(num : byte)   := (value^num.value);
		       ^

0 [0x0]: line: 189 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator^[1224] params(1) in file: lib\support\/0.2.9//primitives.sharp:190:8: note:  
		    def operator^(num : bool)   := (value^num.value);
		       ^

0 [0x0]: line: 190 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator^[1225] params(1) in file: lib\support\/0.2.9//primitives.sharp:191:8: note:  
		    def operator^(num : double)   := (value^num.value);
		       ^

0 [0x0]: line: 191 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator^[1226] params(1) in file: lib\support\/0.2.9//primitives.sharp:192:8: note:  
		    def operator^(num : var)    := (value^num);
		       ^

0 [0x0]: line: 192 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           xor ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int16>.operator&[1227] params(1) in file: lib\support\/0.2.9//primitives.sharp:194:8: note:  
		    def operator&(num : ulong)  := (value&num.value);
		       ^

0 [0x0]: line: 194 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator&[1228] params(1) in file: lib\support\/0.2.9//primitives.sharp:195:8: note:  
		    def operator&(num : long)   := (value&num.value);
		       ^

0 [0x0]: line: 195 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator&[1229] params(1) in file: lib\support\/0.2.9//primitives.sharp:196:8: note:  
		    def operator&(num : uint)   := (value&num.value);
		       ^

0 [0x0]: line: 196 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator&[1230] params(1) in file: lib\support\/0.2.9//primitives.sharp:197:8: note:  
		    def operator&(num : int)    := (value&num.value);
		       ^

0 [0x0]: line: 197 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator&[1231] params(1) in file: lib\support\/0.2.9//primitives.sharp:198:8: note:  
		    def operator&(num : ushort) := (value&num.value);
		       ^

0 [0x0]: line: 198 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator&[1232] params(1) in file: lib\support\/0.2.9//primitives.sharp:199:8: note:  
		    def operator&(num : short)  := (value&num.value);
		       ^

0 [0x0]: line: 199 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator&[1233] params(1) in file: lib\support\/0.2.9//primitives.sharp:200:8: note:  
		    def operator&(num : uchar)  := (value&num.value);
		       ^

0 [0x0]: line: 200 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator&[1234] params(1) in file: lib\support\/0.2.9//primitives.sharp:201:8: note:  
		    def operator&(num : char)   := (value&num.value);
		       ^

0 [0x0]: line: 201 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator&[1235] params(1) in file: lib\support\/0.2.9//primitives.sharp:202:8: note:  
		    def operator&(num : byte)   := (value&num.value);
		       ^

0 [0x0]: line: 202 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator&[1236] params(1) in file: lib\support\/0.2.9//primitives.sharp:203:8: note:  
		    def operator&(num : bool)   := (value&num.value);
		       ^

0 [0x0]: line: 203 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator&[1237] params(1) in file: lib\support\/0.2.9//primitives.sharp:204:8: note:  
		    def operator&(num : double)   := (value&num.value);
		       ^

0 [0x0]: line: 204 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator&[1238] params(1) in file: lib\support\/0.2.9//primitives.sharp:205:8: note:  
		    def operator&(num : var)    := (value&num);
		       ^

0 [0x0]: line: 205 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           uand ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int16>.operator|[1239] params(1) in file: lib\support\/0.2.9//primitives.sharp:207:8: note:  
		    def operator|(num : ulong)  := (value|num.value);
		       ^

0 [0x0]: line: 207 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator|[1240] params(1) in file: lib\support\/0.2.9//primitives.sharp:208:8: note:  
		    def operator|(num : long)   := (value|num.value);
		       ^

0 [0x0]: line: 208 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator|[1241] params(1) in file: lib\support\/0.2.9//primitives.sharp:209:8: note:  
		    def operator|(num : uint)   := (value|num.value);
		       ^

0 [0x0]: line: 209 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator|[1242] params(1) in file: lib\support\/0.2.9//primitives.sharp:210:8: note:  
		    def operator|(num : int)    := (value|num.value);
		       ^

0 [0x0]: line: 210 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator|[1243] params(1) in file: lib\support\/0.2.9//primitives.sharp:211:8: note:  
		    def operator|(num : ushort) := (value|num.value);
		       ^

0 [0x0]: line: 211 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator|[1244] params(1) in file: lib\support\/0.2.9//primitives.sharp:212:8: note:  
		    def operator|(num : short)  := (value|num.value);
		       ^

0 [0x0]: line: 212 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator|[1245] params(1) in file: lib\support\/0.2.9//primitives.sharp:213:8: note:  
		    def operator|(num : uchar)  := (value|num.value);
		       ^

0 [0x0]: line: 213 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator|[1246] params(1) in file: lib\support\/0.2.9//primitives.sharp:214:8: note:  
		    def operator|(num : char)   := (value|num.value);
		       ^

0 [0x0]: line: 214 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator|[1247] params(1) in file: lib\support\/0.2.9//primitives.sharp:215:8: note:  
		    def operator|(num : byte)   := (value|num.value);
		       ^

0 [0x0]: line: 215 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator|[1248] params(1) in file: lib\support\/0.2.9//primitives.sharp:216:8: note:  
		    def operator|(num : bool)   := (value|num.value);
		       ^

0 [0x0]: line: 216 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator|[1249] params(1) in file: lib\support\/0.2.9//primitives.sharp:217:8: note:  
		    def operator|(num : double)   := (value|num.value);
		       ^

0 [0x0]: line: 217 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int16>.operator|[1250] params(1) in file: lib\support\/0.2.9//primitives.sharp:218:8: note:  
		    def operator|(num : var)    := (value|num);
		       ^

0 [0x0]: line: 218 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           or ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int16>.operator!=[1251] params(1) in file: lib\support\/0.2.9//primitives.sharp:220:8: note:  
		    def operator!=(num : var) := value!=num;
		       ^

0 [0x0]: line: 220 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           tne ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int16>.operator==[1252] params(1) in file: lib\support\/0.2.9//primitives.sharp:221:8: note:  
		    def operator==(num : var) := value==num;
		       ^

0 [0x0]: line: 221 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           test ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int16>.operator=[1253] params(1) in file: lib\support\/0.2.9//primitives.sharp:222:8: note:  
		    def operator=(num : var) := value=num;
		       ^

0 [0x0]: line: 222 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           loadval ebx   
5 [0x5]:           mov16 ebx, ebx   
6 [0x6]:           movi #0, adx   
8 [0x8]:           rmov adx, ebx   
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std#integer<_int16>.to_string[1254] params(0) in file: lib\support\/0.2.9//primitives.sharp:224:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 225 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           newstr @55 //    
4 [0x4]:           call @3546 // <std#string.string>   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           rstore ebx   
12 [0xc]:           call @3580 // <std#string.operator+>   
13 [0xd]:           popobj2    
14 [0xe]:           returnobj   
15 [0xf]:           ret   


function: std#integer<_int16>.parse[1255] params(1) in file: lib\support\/0.2.9//primitives.sharp:228:15: note:  
		    static def parse(s: string) : native_type {
		              ^

0 [0x0]: line: 229 movi #0, ebx   
2 [0x2]:           mov16 ebx, ebx   
3 [0x3]:           smovr_2 ebx, fp+1   
4 [0x4]: line: 231 movi #0, ebx   
6 [0x6]:           movr cmt, ebx   
7 [0x7]:           jne 14   
8 [0x8]: line: 232 pushl 0   
9 [0x9]:           call @1898 // <std#__srt_global.strtod>   
10 [0xa]:           loadval ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   
13 [0xd]:           jmp @104   
14 [0xe]: line: 234 istorel 0, fp+2   
16 [0x10]: line: 235 istorel 0, fp+3   
18 [0x12]: line: 236 pushl 0   
19 [0x13]:           call @3587 // <std#string.size>   
20 [0x14]:           ipopl 4   
21 [0x15]: line: 238 pushl 0   
22 [0x16]:           istore 0   
24 [0x18]:           call @3568 // <std#string.at>   
25 [0x19]:           loadval ebx   
26 [0x1a]:           rstore ebx   
27 [0x1b]:           movi #45, ebx   
29 [0x1d]:           loadval ecx   
30 [0x1e]:           test ecx, ebx   
31 [0x1f]:           movr ebx, cmt   
32 [0x20]:           movr cmt, ebx   
33 [0x21]:           jne 38   
34 [0x22]: line: 239 istorel 1, fp+3   
36 [0x24]: line: 240 istorel 1, fp+2   
38 [0x26]:           nop   
39 [0x27]: line: 243 ipushl #2   
40 [0x28]:           loadl ebx, fp+4   
41 [0x29]:           loadval ecx   
42 [0x2a]:           lt ecx, ebx   
43 [0x2b]:           movr ebx, cmt   
44 [0x2c]:           movr cmt, ebx   
45 [0x2d]:           jne 93   
46 [0x2e]: line: 244 pushl 0   
47 [0x2f]:           ipushl #2   
48 [0x30]:           call @3568 // <std#string.at>   
49 [0x31]:           call @3209 // <std#char.is_digit>   
50 [0x32]:           loadval ebx   
51 [0x33]:           not ebx, ebx   
52 [0x34]:           movr cmt, ebx   
53 [0x35]:           jne 68   
54 [0x36]: line: 245 new_class @4 // std#illegal_argument_exception   
56 [0x38]:           dup    
57 [0x39]:           new_class @75 // std#string   
59 [0x3b]:           dup    
60 [0x3c]:           newstr @561 // illegal char in string:    
61 [0x3d]:           call @3546 // <std#string.string>   
62 [0x3e]:           pushl 0   
63 [0x3f]:           ipushl #2   
64 [0x40]:           call @3568 // <std#string.at>   
65 [0x41]:           call @3579 // <std#string.operator+>   
66 [0x42]:           call @1962 // <std#illegal_argument_exception.illegal_argument_exception>   
67 [0x43]:           throw    
68 [0x44]:           nop   
69 [0x45]: line: 249 movi #10, ebx   
71 [0x47]:           loadl ecx, fp+1   
72 [0x48]:           mul ecx, ebx -> ebx   
73 [0x49]:           mov16 ebx, ebx   
74 [0x4a]:           smovr_2 ebx, fp+1   
75 [0x4b]: line: 250 pushl 0   
76 [0x4c]:           loadl ebx, fp+2   
77 [0x4d]:           movr egx, ebx   
78 [0x4e]:           inc ebx   
79 [0x4f]:           smovr_2 ebx, fp+2   
80 [0x50]:           rstore egx   
81 [0x51]:           call @3568 // <std#string.at>   
82 [0x52]:           loadval ebx   
83 [0x53]:           rstore ebx   
84 [0x54]:           movi #48, ebx   
86 [0x56]:           loadval ecx   
87 [0x57]:           sub ecx, ebx -> ebx   
88 [0x58]:           loadl ecx, fp+1   
89 [0x59]:           add ecx, ebx -> ebx   
90 [0x5a]:           mov16 ebx, ebx   
91 [0x5b]:           smovr_2 ebx, fp+1   
92 [0x5c]:           jmp @39   
93 [0x5d]: line: 252 loadl ebx, fp+3   
94 [0x5e]:           movr cmt, ebx   
95 [0x5f]:           jne 100   
96 [0x60]: line: 253 loadl ebx, fp+1   
97 [0x61]:           neg ebx, ebx   
98 [0x62]:           mov16 ebx, ebx   
99 [0x63]:           smovr_2 ebx, fp+1   
100 [0x64]:           nop   
101 [0x65]: line: 254 loadl ebx, fp+1   
102 [0x66]:           return_val ebx   
103 [0x67]:           ret   
104 [0x68]:           nop   


function: std#integer<_int16>.to_ulong[1256] params(0) in file: lib\support\/0.2.9//primitives.sharp:258:8: note:  
		    def to_ulong() := new ulong { value };
		       ^

0 [0x0]: line: 258 new_class @53 // std#ulong   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu64 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int16>.to_long[1257] params(0) in file: lib\support\/0.2.9//primitives.sharp:259:8: note:  
		    def to_long() := new long { value };
		       ^

0 [0x0]: line: 259 new_class @54 // std#long   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov64 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int16>.to_uint[1258] params(0) in file: lib\support\/0.2.9//primitives.sharp:260:8: note:  
		    def to_uint() := new uint { value };
		       ^

0 [0x0]: line: 260 new_class @55 // std#uint   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu32 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int16>.to_int[1259] params(0) in file: lib\support\/0.2.9//primitives.sharp:261:8: note:  
		    def to_int() := new int { value };
		       ^

0 [0x0]: line: 261 new_class @56 // std#int   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov32 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int16>.to_ushort[1260] params(0) in file: lib\support\/0.2.9//primitives.sharp:262:8: note:  
		    def to_ushort() := new ushort { value };
		       ^

0 [0x0]: line: 262 new_class @57 // std#ushort   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu16 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int16>.to_short[1261] params(0) in file: lib\support\/0.2.9//primitives.sharp:263:8: note:  
		    def to_short() := new short { value };
		       ^

0 [0x0]: line: 263 new_class @58 // std#short   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov16 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int16>.to_uchar[1262] params(0) in file: lib\support\/0.2.9//primitives.sharp:264:8: note:  
		    def to_uchar() := new uchar { value };
		       ^

0 [0x0]: line: 264 new_class @59 // std#uchar   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int16>.to_char[1263] params(0) in file: lib\support\/0.2.9//primitives.sharp:265:8: note:  
		    def to_char() := new char { value };
		       ^

0 [0x0]: line: 265 new_class @60 // std#char   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int16>.to_byte[1264] params(0) in file: lib\support\/0.2.9//primitives.sharp:266:8: note:  
		    def to_byte() := new byte { value };
		       ^

0 [0x0]: line: 266 new_class @61 // std#byte   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int16>.to_bool[1265] params(0) in file: lib\support\/0.2.9//primitives.sharp:267:8: note:  
		    def to_bool() := new bool { value };
		       ^

0 [0x0]: line: 267 new_class @62 // std#bool   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int16>.to_double[1266] params(0) in file: lib\support\/0.2.9//primitives.sharp:268:8: note:  
		    def to_double() := new double { value };
		       ^

0 [0x0]: line: 268 new_class @63 // std#double   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int16>.get_value[1267] params(0) in file: lib\support\/0.2.9//primitives.sharp:270:8: note:  
		    def get_value() := value;
		       ^

0 [0x0]: line: 270 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


constructor: std#integer<_int16>.integer[1268] params(0) in file: lib\support\/0.2.9//primitives.sharp:5:13: note:  
		public class integer<native_type> {
		            ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#integer<_uint8>.integer[1269] params(1) in file: lib\support\/0.2.9//primitives.sharp:8:12: note:  
		    integer(initial_val : var) {
		           ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 9 ipushl #1   
2 [0x2]:         movl 0   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         movu8 ebx, ebx   
7 [0x7]:         movi #0, adx   
9 [0x9]:         rmov adx, ebx   
10 [0xa]:         ret   


function: std#integer<_uint8>.hash[1270] params(0) in file: lib\support\/0.2.9//primitives.sharp:12:8: note:  
		    def hash() : _int64 {
		       ^

0 [0x0]: line: 13 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          return_val ebx   
7 [0x7]:          ret   


overload function: std#integer<_uint8>.operator!=[1271] params(1) in file: lib\support\/0.2.9//primitives.sharp:16:8: note:  
		    def operator!=(num : ulong) := (value!=num.value);
		       ^

0 [0x0]: line: 16 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator==[1272] params(1) in file: lib\support\/0.2.9//primitives.sharp:17:8: note:  
		    def operator==(num : ulong) := (value==num.value);
		       ^

0 [0x0]: line: 17 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator!=[1273] params(1) in file: lib\support\/0.2.9//primitives.sharp:18:8: note:  
		    def operator!=(num : long) := (value!=num.value);
		       ^

0 [0x0]: line: 18 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator==[1274] params(1) in file: lib\support\/0.2.9//primitives.sharp:19:8: note:  
		    def operator==(num : long) := (value==num.value);
		       ^

0 [0x0]: line: 19 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator!=[1275] params(1) in file: lib\support\/0.2.9//primitives.sharp:20:8: note:  
		    def operator!=(num : uint) := (value!=num.value);
		       ^

0 [0x0]: line: 20 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator==[1276] params(1) in file: lib\support\/0.2.9//primitives.sharp:21:8: note:  
		    def operator==(num : uint) := (value==num.value);
		       ^

0 [0x0]: line: 21 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator!=[1277] params(1) in file: lib\support\/0.2.9//primitives.sharp:22:8: note:  
		    def operator!=(num : int) := (value!=num.value);
		       ^

0 [0x0]: line: 22 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator==[1278] params(1) in file: lib\support\/0.2.9//primitives.sharp:23:8: note:  
		    def operator==(num : int) := (value==num.value);
		       ^

0 [0x0]: line: 23 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator!=[1279] params(1) in file: lib\support\/0.2.9//primitives.sharp:24:8: note:  
		    def operator!=(num : ushort) := (value!=num.value);
		       ^

0 [0x0]: line: 24 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator==[1280] params(1) in file: lib\support\/0.2.9//primitives.sharp:25:8: note:  
		    def operator==(num : ushort) := (value==num.value);
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator!=[1281] params(1) in file: lib\support\/0.2.9//primitives.sharp:26:8: note:  
		    def operator!=(num : short) := (value!=num.value);
		       ^

0 [0x0]: line: 26 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator==[1282] params(1) in file: lib\support\/0.2.9//primitives.sharp:27:8: note:  
		    def operator==(num : short) := (value==num.value);
		       ^

0 [0x0]: line: 27 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator!=[1283] params(1) in file: lib\support\/0.2.9//primitives.sharp:28:8: note:  
		    def operator!=(num : uchar) := (value!=num.value);
		       ^

0 [0x0]: line: 28 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator==[1284] params(1) in file: lib\support\/0.2.9//primitives.sharp:29:8: note:  
		    def operator==(num : uchar) := (value==num.value);
		       ^

0 [0x0]: line: 29 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator!=[1285] params(1) in file: lib\support\/0.2.9//primitives.sharp:30:8: note:  
		    def operator!=(num : char) := (value!=num.value);
		       ^

0 [0x0]: line: 30 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator==[1286] params(1) in file: lib\support\/0.2.9//primitives.sharp:31:8: note:  
		    def operator==(num : char) := (value==num.value);
		       ^

0 [0x0]: line: 31 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator!=[1287] params(1) in file: lib\support\/0.2.9//primitives.sharp:32:8: note:  
		    def operator!=(num : byte) := (value!=num.value);
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator==[1288] params(1) in file: lib\support\/0.2.9//primitives.sharp:33:8: note:  
		    def operator==(num : byte) := (value==num.value);
		       ^

0 [0x0]: line: 33 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator!=[1289] params(1) in file: lib\support\/0.2.9//primitives.sharp:34:8: note:  
		    def operator!=(num : bool) := (value!=num.value);
		       ^

0 [0x0]: line: 34 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator==[1290] params(1) in file: lib\support\/0.2.9//primitives.sharp:35:8: note:  
		    def operator==(num : bool) := (value==num.value);
		       ^

0 [0x0]: line: 35 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator==[1291] params(1) in file: lib\support\/0.2.9//primitives.sharp:36:8: note:  
		    def operator==(num : double) := (value==num.value);
		       ^

0 [0x0]: line: 36 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator+[1292] params(1) in file: lib\support\/0.2.9//primitives.sharp:38:8: note:  
		    def operator+(num : ulong)  := (value+num.value);
		       ^

0 [0x0]: line: 38 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator+[1293] params(1) in file: lib\support\/0.2.9//primitives.sharp:39:8: note:  
		    def operator+(num : long)   := (value+num.value);
		       ^

0 [0x0]: line: 39 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator+[1294] params(1) in file: lib\support\/0.2.9//primitives.sharp:40:8: note:  
		    def operator+(num : uint)   := (value+num.value);
		       ^

0 [0x0]: line: 40 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator+[1295] params(1) in file: lib\support\/0.2.9//primitives.sharp:41:8: note:  
		    def operator+(num : int)    := (value+num.value);
		       ^

0 [0x0]: line: 41 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator+[1296] params(1) in file: lib\support\/0.2.9//primitives.sharp:42:8: note:  
		    def operator+(num : ushort) := (value+num.value);
		       ^

0 [0x0]: line: 42 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator+[1297] params(1) in file: lib\support\/0.2.9//primitives.sharp:43:8: note:  
		    def operator+(num : short)  := (value+num.value);
		       ^

0 [0x0]: line: 43 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator+[1298] params(1) in file: lib\support\/0.2.9//primitives.sharp:44:8: note:  
		    def operator+(num : uchar)  := (value+num.value);
		       ^

0 [0x0]: line: 44 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator+[1299] params(1) in file: lib\support\/0.2.9//primitives.sharp:45:8: note:  
		    def operator+(num : char)   := (value+num.value);
		       ^

0 [0x0]: line: 45 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator+[1300] params(1) in file: lib\support\/0.2.9//primitives.sharp:46:8: note:  
		    def operator+(num : byte)   := (value+num.value);
		       ^

0 [0x0]: line: 46 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator+[1301] params(1) in file: lib\support\/0.2.9//primitives.sharp:47:8: note:  
		    def operator+(num : bool)   := (value+num.value);
		       ^

0 [0x0]: line: 47 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator+[1302] params(1) in file: lib\support\/0.2.9//primitives.sharp:48:8: note:  
		    def operator+(num : double)   := (value+num.value);
		       ^

0 [0x0]: line: 48 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator+[1303] params(1) in file: lib\support\/0.2.9//primitives.sharp:49:8: note:  
		    def operator+(num : var)    := (value+num);
		       ^

0 [0x0]: line: 49 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          add ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint8>.operator-[1304] params(1) in file: lib\support\/0.2.9//primitives.sharp:51:8: note:  
		    def operator-(num : ulong)  := (value-num.value);
		       ^

0 [0x0]: line: 51 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator-[1305] params(1) in file: lib\support\/0.2.9//primitives.sharp:52:8: note:  
		    def operator-(num : long)   := (value-num.value);
		       ^

0 [0x0]: line: 52 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator-[1306] params(1) in file: lib\support\/0.2.9//primitives.sharp:53:8: note:  
		    def operator-(num : uint)   := (value-num.value);
		       ^

0 [0x0]: line: 53 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator-[1307] params(1) in file: lib\support\/0.2.9//primitives.sharp:54:8: note:  
		    def operator-(num : int)    := (value-num.value);
		       ^

0 [0x0]: line: 54 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator-[1308] params(1) in file: lib\support\/0.2.9//primitives.sharp:55:8: note:  
		    def operator-(num : ushort) := (value-num.value);
		       ^

0 [0x0]: line: 55 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator-[1309] params(1) in file: lib\support\/0.2.9//primitives.sharp:56:8: note:  
		    def operator-(num : short)  := (value-num.value);
		       ^

0 [0x0]: line: 56 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator-[1310] params(1) in file: lib\support\/0.2.9//primitives.sharp:57:8: note:  
		    def operator-(num : uchar)  := (value-num.value);
		       ^

0 [0x0]: line: 57 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator-[1311] params(1) in file: lib\support\/0.2.9//primitives.sharp:58:8: note:  
		    def operator-(num : char)   := (value-num.value);
		       ^

0 [0x0]: line: 58 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator-[1312] params(1) in file: lib\support\/0.2.9//primitives.sharp:59:8: note:  
		    def operator-(num : byte)   := (value-num.value);
		       ^

0 [0x0]: line: 59 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator-[1313] params(1) in file: lib\support\/0.2.9//primitives.sharp:60:8: note:  
		    def operator-(num : bool)   := (value-num.value);
		       ^

0 [0x0]: line: 60 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator-[1314] params(1) in file: lib\support\/0.2.9//primitives.sharp:61:8: note:  
		    def operator-(num : double)   := (value-num.value);
		       ^

0 [0x0]: line: 61 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator-[1315] params(1) in file: lib\support\/0.2.9//primitives.sharp:62:8: note:  
		    def operator-(num : var)    := (value-num);
		       ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          sub ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint8>.operator*[1316] params(1) in file: lib\support\/0.2.9//primitives.sharp:64:8: note:  
		    def operator*(num : ulong)  := (value*num.value);
		       ^

0 [0x0]: line: 64 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator*[1317] params(1) in file: lib\support\/0.2.9//primitives.sharp:65:8: note:  
		    def operator*(num : long)   := (value*num.value);
		       ^

0 [0x0]: line: 65 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator*[1318] params(1) in file: lib\support\/0.2.9//primitives.sharp:66:8: note:  
		    def operator*(num : uint)   := (value*num.value);
		       ^

0 [0x0]: line: 66 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator*[1319] params(1) in file: lib\support\/0.2.9//primitives.sharp:67:8: note:  
		    def operator*(num : int)    := (value*num.value);
		       ^

0 [0x0]: line: 67 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator*[1320] params(1) in file: lib\support\/0.2.9//primitives.sharp:68:8: note:  
		    def operator*(num : ushort) := (value*num.value);
		       ^

0 [0x0]: line: 68 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator*[1321] params(1) in file: lib\support\/0.2.9//primitives.sharp:69:8: note:  
		    def operator*(num : short)  := (value*num.value);
		       ^

0 [0x0]: line: 69 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator*[1322] params(1) in file: lib\support\/0.2.9//primitives.sharp:70:8: note:  
		    def operator*(num : uchar)  := (value*num.value);
		       ^

0 [0x0]: line: 70 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator*[1323] params(1) in file: lib\support\/0.2.9//primitives.sharp:71:8: note:  
		    def operator*(num : char)   := (value*num.value);
		       ^

0 [0x0]: line: 71 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator*[1324] params(1) in file: lib\support\/0.2.9//primitives.sharp:72:8: note:  
		    def operator*(num : byte)   := (value*num.value);
		       ^

0 [0x0]: line: 72 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator*[1325] params(1) in file: lib\support\/0.2.9//primitives.sharp:73:8: note:  
		    def operator*(num : bool)   := (value*num.value);
		       ^

0 [0x0]: line: 73 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator*[1326] params(1) in file: lib\support\/0.2.9//primitives.sharp:74:8: note:  
		    def operator*(num : double)   := (value*num.value);
		       ^

0 [0x0]: line: 74 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator*[1327] params(1) in file: lib\support\/0.2.9//primitives.sharp:75:8: note:  
		    def operator*(num : var)    := (value*num);
		       ^

0 [0x0]: line: 75 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          mul ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint8>.operator/[1328] params(1) in file: lib\support\/0.2.9//primitives.sharp:77:8: note:  
		    def operator/(num : ulong)  := (value/num.value);
		       ^

0 [0x0]: line: 77 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator/[1329] params(1) in file: lib\support\/0.2.9//primitives.sharp:78:8: note:  
		    def operator/(num : long)   := (value/num.value);
		       ^

0 [0x0]: line: 78 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator/[1330] params(1) in file: lib\support\/0.2.9//primitives.sharp:79:8: note:  
		    def operator/(num : uint)   := (value/num.value);
		       ^

0 [0x0]: line: 79 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator/[1331] params(1) in file: lib\support\/0.2.9//primitives.sharp:80:8: note:  
		    def operator/(num : int)    := (value/num.value);
		       ^

0 [0x0]: line: 80 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator/[1332] params(1) in file: lib\support\/0.2.9//primitives.sharp:81:8: note:  
		    def operator/(num : ushort) := (value/num.value);
		       ^

0 [0x0]: line: 81 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator/[1333] params(1) in file: lib\support\/0.2.9//primitives.sharp:82:8: note:  
		    def operator/(num : short)  := (value/num.value);
		       ^

0 [0x0]: line: 82 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator/[1334] params(1) in file: lib\support\/0.2.9//primitives.sharp:83:8: note:  
		    def operator/(num : uchar)  := (value/num.value);
		       ^

0 [0x0]: line: 83 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator/[1335] params(1) in file: lib\support\/0.2.9//primitives.sharp:84:8: note:  
		    def operator/(num : char)   := (value/num.value);
		       ^

0 [0x0]: line: 84 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator/[1336] params(1) in file: lib\support\/0.2.9//primitives.sharp:85:8: note:  
		    def operator/(num : byte)   := (value/num.value);
		       ^

0 [0x0]: line: 85 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator/[1337] params(1) in file: lib\support\/0.2.9//primitives.sharp:86:8: note:  
		    def operator/(num : bool)   := (value/num.value);
		       ^

0 [0x0]: line: 86 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator/[1338] params(1) in file: lib\support\/0.2.9//primitives.sharp:87:8: note:  
		    def operator/(num : double)   := (value/num.value);
		       ^

0 [0x0]: line: 87 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator/[1339] params(1) in file: lib\support\/0.2.9//primitives.sharp:88:8: note:  
		    def operator/(num : var)    := (value/num);
		       ^

0 [0x0]: line: 88 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          div ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_uint8>.operator%[1340] params(1) in file: lib\support\/0.2.9//primitives.sharp:90:8: note:  
		    def operator%(num : ulong)  := (value%num.value);
		       ^

0 [0x0]: line: 90 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator%[1341] params(1) in file: lib\support\/0.2.9//primitives.sharp:91:8: note:  
		    def operator%(num : long)   := (value%num.value);
		       ^

0 [0x0]: line: 91 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator%[1342] params(1) in file: lib\support\/0.2.9//primitives.sharp:92:8: note:  
		    def operator%(num : uint)   := (value%num.value);
		       ^

0 [0x0]: line: 92 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator%[1343] params(1) in file: lib\support\/0.2.9//primitives.sharp:93:8: note:  
		    def operator%(num : int)    := (value%num.value);
		       ^

0 [0x0]: line: 93 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator%[1344] params(1) in file: lib\support\/0.2.9//primitives.sharp:94:8: note:  
		    def operator%(num : ushort) := (value%num.value);
		       ^

0 [0x0]: line: 94 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator%[1345] params(1) in file: lib\support\/0.2.9//primitives.sharp:95:8: note:  
		    def operator%(num : short)  := (value%num.value);
		       ^

0 [0x0]: line: 95 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator%[1346] params(1) in file: lib\support\/0.2.9//primitives.sharp:96:8: note:  
		    def operator%(num : uchar)  := (value%num.value);
		       ^

0 [0x0]: line: 96 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator%[1347] params(1) in file: lib\support\/0.2.9//primitives.sharp:97:8: note:  
		    def operator%(num : char)   := (value%num.value);
		       ^

0 [0x0]: line: 97 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator%[1348] params(1) in file: lib\support\/0.2.9//primitives.sharp:98:8: note:  
		    def operator%(num : byte)   := (value%num.value);
		       ^

0 [0x0]: line: 98 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator%[1349] params(1) in file: lib\support\/0.2.9//primitives.sharp:99:8: note:  
		    def operator%(num : bool)   := (value%num.value);
		       ^

0 [0x0]: line: 99 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_uint8>.operator%[1350] params(1) in file: lib\support\/0.2.9//primitives.sharp:100:8: note:  
		    def operator%(num : double)   := (value%num.value);
		       ^

0 [0x0]: line: 100 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator%[1351] params(1) in file: lib\support\/0.2.9//primitives.sharp:101:8: note:  
		    def operator%(num : var)    := (value%num);
		       ^

0 [0x0]: line: 101 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           mod ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint8>.operator<[1352] params(1) in file: lib\support\/0.2.9//primitives.sharp:103:8: note:  
		    def operator<(num : ulong)  := (value<num.value);
		       ^

0 [0x0]: line: 103 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<[1353] params(1) in file: lib\support\/0.2.9//primitives.sharp:104:8: note:  
		    def operator<(num : long)   := (value<num.value);
		       ^

0 [0x0]: line: 104 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<[1354] params(1) in file: lib\support\/0.2.9//primitives.sharp:105:8: note:  
		    def operator<(num : uint)   := (value<num.value);
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<[1355] params(1) in file: lib\support\/0.2.9//primitives.sharp:106:8: note:  
		    def operator<(num : int)    := (value<num.value);
		       ^

0 [0x0]: line: 106 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<[1356] params(1) in file: lib\support\/0.2.9//primitives.sharp:107:8: note:  
		    def operator<(num : ushort) := (value<num.value);
		       ^

0 [0x0]: line: 107 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<[1357] params(1) in file: lib\support\/0.2.9//primitives.sharp:108:8: note:  
		    def operator<(num : short)  := (value<num.value);
		       ^

0 [0x0]: line: 108 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<[1358] params(1) in file: lib\support\/0.2.9//primitives.sharp:109:8: note:  
		    def operator<(num : uchar)  := (value<num.value);
		       ^

0 [0x0]: line: 109 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<[1359] params(1) in file: lib\support\/0.2.9//primitives.sharp:110:8: note:  
		    def operator<(num : char)   := (value<num.value);
		       ^

0 [0x0]: line: 110 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<[1360] params(1) in file: lib\support\/0.2.9//primitives.sharp:111:8: note:  
		    def operator<(num : byte)   := (value<num.value);
		       ^

0 [0x0]: line: 111 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<[1361] params(1) in file: lib\support\/0.2.9//primitives.sharp:112:8: note:  
		    def operator<(num : bool)   := (value<num.value);
		       ^

0 [0x0]: line: 112 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<[1362] params(1) in file: lib\support\/0.2.9//primitives.sharp:113:8: note:  
		    def operator<(num : double)   := (value<num.value);
		       ^

0 [0x0]: line: 113 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<[1363] params(1) in file: lib\support\/0.2.9//primitives.sharp:114:8: note:  
		    def operator<(num : var)    := (value<num);
		       ^

0 [0x0]: line: 114 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           lt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint8>.operator>[1364] params(1) in file: lib\support\/0.2.9//primitives.sharp:116:8: note:  
		    def operator>(num : ulong)  := (value>num.value);
		       ^

0 [0x0]: line: 116 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>[1365] params(1) in file: lib\support\/0.2.9//primitives.sharp:117:8: note:  
		    def operator>(num : long)   := (value>num.value);
		       ^

0 [0x0]: line: 117 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>[1366] params(1) in file: lib\support\/0.2.9//primitives.sharp:118:8: note:  
		    def operator>(num : uint)   := (value>num.value);
		       ^

0 [0x0]: line: 118 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>[1367] params(1) in file: lib\support\/0.2.9//primitives.sharp:119:8: note:  
		    def operator>(num : int)    := (value>num.value);
		       ^

0 [0x0]: line: 119 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>[1368] params(1) in file: lib\support\/0.2.9//primitives.sharp:120:8: note:  
		    def operator>(num : ushort) := (value>num.value);
		       ^

0 [0x0]: line: 120 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>[1369] params(1) in file: lib\support\/0.2.9//primitives.sharp:121:8: note:  
		    def operator>(num : short)  := (value>num.value);
		       ^

0 [0x0]: line: 121 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>[1370] params(1) in file: lib\support\/0.2.9//primitives.sharp:122:8: note:  
		    def operator>(num : uchar)  := (value>num.value);
		       ^

0 [0x0]: line: 122 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>[1371] params(1) in file: lib\support\/0.2.9//primitives.sharp:123:8: note:  
		    def operator>(num : char)   := (value>num.value);
		       ^

0 [0x0]: line: 123 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>[1372] params(1) in file: lib\support\/0.2.9//primitives.sharp:124:8: note:  
		    def operator>(num : byte)   := (value>num.value);
		       ^

0 [0x0]: line: 124 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>[1373] params(1) in file: lib\support\/0.2.9//primitives.sharp:125:8: note:  
		    def operator>(num : bool)   := (value>num.value);
		       ^

0 [0x0]: line: 125 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>[1374] params(1) in file: lib\support\/0.2.9//primitives.sharp:126:8: note:  
		    def operator>(num : double)   := (value>num.value);
		       ^

0 [0x0]: line: 126 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>[1375] params(1) in file: lib\support\/0.2.9//primitives.sharp:127:8: note:  
		    def operator>(num : var)    := (value>num);
		       ^

0 [0x0]: line: 127 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint8>.operator<=[1376] params(1) in file: lib\support\/0.2.9//primitives.sharp:129:8: note:  
		    def operator<=(num : ulong)  := (value>=num.value);
		       ^

0 [0x0]: line: 129 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<=[1377] params(1) in file: lib\support\/0.2.9//primitives.sharp:130:8: note:  
		    def operator<=(num : long)   := (value>=num.value);
		       ^

0 [0x0]: line: 130 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<=[1378] params(1) in file: lib\support\/0.2.9//primitives.sharp:131:8: note:  
		    def operator<=(num : uint)   := (value>=num.value);
		       ^

0 [0x0]: line: 131 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<=[1379] params(1) in file: lib\support\/0.2.9//primitives.sharp:132:8: note:  
		    def operator<=(num : int)    := (value>=num.value);
		       ^

0 [0x0]: line: 132 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<=[1380] params(1) in file: lib\support\/0.2.9//primitives.sharp:133:8: note:  
		    def operator<=(num : ushort) := (value>=num.value);
		       ^

0 [0x0]: line: 133 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<=[1381] params(1) in file: lib\support\/0.2.9//primitives.sharp:134:8: note:  
		    def operator<=(num : short)  := (value>=num.value);
		       ^

0 [0x0]: line: 134 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<=[1382] params(1) in file: lib\support\/0.2.9//primitives.sharp:135:8: note:  
		    def operator<=(num : uchar)  := (value>=num.value);
		       ^

0 [0x0]: line: 135 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<=[1383] params(1) in file: lib\support\/0.2.9//primitives.sharp:136:8: note:  
		    def operator<=(num : char)   := (value>=num.value);
		       ^

0 [0x0]: line: 136 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<=[1384] params(1) in file: lib\support\/0.2.9//primitives.sharp:137:8: note:  
		    def operator<=(num : byte)   := (value>=num.value);
		       ^

0 [0x0]: line: 137 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<=[1385] params(1) in file: lib\support\/0.2.9//primitives.sharp:138:8: note:  
		    def operator<=(num : bool)   := (value>=num.value);
		       ^

0 [0x0]: line: 138 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<=[1386] params(1) in file: lib\support\/0.2.9//primitives.sharp:139:8: note:  
		    def operator<=(num : double)   := (value>=num.value);
		       ^

0 [0x0]: line: 139 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<=[1387] params(1) in file: lib\support\/0.2.9//primitives.sharp:140:8: note:  
		    def operator<=(num : var)    := (value>=num);
		       ^

0 [0x0]: line: 140 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gte ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint8>.operator**[1388] params(1) in file: lib\support\/0.2.9//primitives.sharp:142:8: note:  
		    def operator**(num : ulong)  := (value**num.value);
		       ^

0 [0x0]: line: 142 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator**[1389] params(1) in file: lib\support\/0.2.9//primitives.sharp:143:8: note:  
		    def operator**(num : long)   := (value**num.value);
		       ^

0 [0x0]: line: 143 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator**[1390] params(1) in file: lib\support\/0.2.9//primitives.sharp:144:8: note:  
		    def operator**(num : uint)   := (value**num.value);
		       ^

0 [0x0]: line: 144 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator**[1391] params(1) in file: lib\support\/0.2.9//primitives.sharp:145:8: note:  
		    def operator**(num : int)    := (value**num.value);
		       ^

0 [0x0]: line: 145 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator**[1392] params(1) in file: lib\support\/0.2.9//primitives.sharp:146:8: note:  
		    def operator**(num : ushort) := (value**num.value);
		       ^

0 [0x0]: line: 146 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator**[1393] params(1) in file: lib\support\/0.2.9//primitives.sharp:147:8: note:  
		    def operator**(num : short)  := (value**num.value);
		       ^

0 [0x0]: line: 147 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator**[1394] params(1) in file: lib\support\/0.2.9//primitives.sharp:148:8: note:  
		    def operator**(num : uchar)  := (value**num.value);
		       ^

0 [0x0]: line: 148 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator**[1395] params(1) in file: lib\support\/0.2.9//primitives.sharp:149:8: note:  
		    def operator**(num : char)   := (value**num.value);
		       ^

0 [0x0]: line: 149 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator**[1396] params(1) in file: lib\support\/0.2.9//primitives.sharp:150:8: note:  
		    def operator**(num : byte)   := (value**num.value);
		       ^

0 [0x0]: line: 150 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator**[1397] params(1) in file: lib\support\/0.2.9//primitives.sharp:151:8: note:  
		    def operator**(num : bool)   := (value**num.value);
		       ^

0 [0x0]: line: 151 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator**[1398] params(1) in file: lib\support\/0.2.9//primitives.sharp:152:8: note:  
		    def operator**(num : double)   := (value**num.value);
		       ^

0 [0x0]: line: 152 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator**[1399] params(1) in file: lib\support\/0.2.9//primitives.sharp:153:8: note:  
		    def operator**(num : var)    := (value**num);
		       ^

0 [0x0]: line: 153 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           exp ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint8>.operator<<[1400] params(1) in file: lib\support\/0.2.9//primitives.sharp:155:8: note:  
		    def operator<<(num : ulong)  := (value<<num.value);
		       ^

0 [0x0]: line: 155 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<<[1401] params(1) in file: lib\support\/0.2.9//primitives.sharp:156:8: note:  
		    def operator<<(num : long)   := (value<<num.value);
		       ^

0 [0x0]: line: 156 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<<[1402] params(1) in file: lib\support\/0.2.9//primitives.sharp:157:8: note:  
		    def operator<<(num : uint)   := (value<<num.value);
		       ^

0 [0x0]: line: 157 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<<[1403] params(1) in file: lib\support\/0.2.9//primitives.sharp:158:8: note:  
		    def operator<<(num : int)    := (value<<num.value);
		       ^

0 [0x0]: line: 158 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<<[1404] params(1) in file: lib\support\/0.2.9//primitives.sharp:159:8: note:  
		    def operator<<(num : ushort) := (value<<num.value);
		       ^

0 [0x0]: line: 159 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<<[1405] params(1) in file: lib\support\/0.2.9//primitives.sharp:160:8: note:  
		    def operator<<(num : short)  := (value<<num.value);
		       ^

0 [0x0]: line: 160 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<<[1406] params(1) in file: lib\support\/0.2.9//primitives.sharp:161:8: note:  
		    def operator<<(num : uchar)  := (value<<num.value);
		       ^

0 [0x0]: line: 161 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<<[1407] params(1) in file: lib\support\/0.2.9//primitives.sharp:162:8: note:  
		    def operator<<(num : char)   := (value<<num.value);
		       ^

0 [0x0]: line: 162 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<<[1408] params(1) in file: lib\support\/0.2.9//primitives.sharp:163:8: note:  
		    def operator<<(num : byte)   := (value<<num.value);
		       ^

0 [0x0]: line: 163 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<<[1409] params(1) in file: lib\support\/0.2.9//primitives.sharp:164:8: note:  
		    def operator<<(num : bool)   := (value<<num.value);
		       ^

0 [0x0]: line: 164 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<<[1410] params(1) in file: lib\support\/0.2.9//primitives.sharp:165:8: note:  
		    def operator<<(num : double)   := (value<<num.value);
		       ^

0 [0x0]: line: 165 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator<<[1411] params(1) in file: lib\support\/0.2.9//primitives.sharp:166:8: note:  
		    def operator<<(num : var)    := (value<<num);
		       ^

0 [0x0]: line: 166 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shl ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint8>.operator>>[1412] params(1) in file: lib\support\/0.2.9//primitives.sharp:168:8: note:  
		    def operator>>(num : ulong)  := (value>>num.value);
		       ^

0 [0x0]: line: 168 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>>[1413] params(1) in file: lib\support\/0.2.9//primitives.sharp:169:8: note:  
		    def operator>>(num : long)   := (value>>num.value);
		       ^

0 [0x0]: line: 169 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>>[1414] params(1) in file: lib\support\/0.2.9//primitives.sharp:170:8: note:  
		    def operator>>(num : uint)   := (value>>num.value);
		       ^

0 [0x0]: line: 170 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>>[1415] params(1) in file: lib\support\/0.2.9//primitives.sharp:171:8: note:  
		    def operator>>(num : int)    := (value>>num.value);
		       ^

0 [0x0]: line: 171 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>>[1416] params(1) in file: lib\support\/0.2.9//primitives.sharp:172:8: note:  
		    def operator>>(num : ushort) := (value>>num.value);
		       ^

0 [0x0]: line: 172 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>>[1417] params(1) in file: lib\support\/0.2.9//primitives.sharp:173:8: note:  
		    def operator>>(num : short)  := (value>>num.value);
		       ^

0 [0x0]: line: 173 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>>[1418] params(1) in file: lib\support\/0.2.9//primitives.sharp:174:8: note:  
		    def operator>>(num : uchar)  := (value>>num.value);
		       ^

0 [0x0]: line: 174 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>>[1419] params(1) in file: lib\support\/0.2.9//primitives.sharp:175:8: note:  
		    def operator>>(num : char)   := (value>>num.value);
		       ^

0 [0x0]: line: 175 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>>[1420] params(1) in file: lib\support\/0.2.9//primitives.sharp:176:8: note:  
		    def operator>>(num : byte)   := (value>>num.value);
		       ^

0 [0x0]: line: 176 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>>[1421] params(1) in file: lib\support\/0.2.9//primitives.sharp:177:8: note:  
		    def operator>>(num : bool)   := (value>>num.value);
		       ^

0 [0x0]: line: 177 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>>[1422] params(1) in file: lib\support\/0.2.9//primitives.sharp:178:8: note:  
		    def operator>>(num : double)   := (value>>num.value);
		       ^

0 [0x0]: line: 178 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator>>[1423] params(1) in file: lib\support\/0.2.9//primitives.sharp:179:8: note:  
		    def operator>>(num : var)    := (value>>num);
		       ^

0 [0x0]: line: 179 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shr ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint8>.operator^[1424] params(1) in file: lib\support\/0.2.9//primitives.sharp:181:8: note:  
		    def operator^(num : ulong)  := (value^num.value);
		       ^

0 [0x0]: line: 181 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator^[1425] params(1) in file: lib\support\/0.2.9//primitives.sharp:182:8: note:  
		    def operator^(num : long)   := (value^num.value);
		       ^

0 [0x0]: line: 182 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator^[1426] params(1) in file: lib\support\/0.2.9//primitives.sharp:183:8: note:  
		    def operator^(num : uint)   := (value^num.value);
		       ^

0 [0x0]: line: 183 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator^[1427] params(1) in file: lib\support\/0.2.9//primitives.sharp:184:8: note:  
		    def operator^(num : int)    := (value^num.value);
		       ^

0 [0x0]: line: 184 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator^[1428] params(1) in file: lib\support\/0.2.9//primitives.sharp:185:8: note:  
		    def operator^(num : ushort) := (value^num.value);
		       ^

0 [0x0]: line: 185 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator^[1429] params(1) in file: lib\support\/0.2.9//primitives.sharp:186:8: note:  
		    def operator^(num : short)  := (value^num.value);
		       ^

0 [0x0]: line: 186 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator^[1430] params(1) in file: lib\support\/0.2.9//primitives.sharp:187:8: note:  
		    def operator^(num : uchar)  := (value^num.value);
		       ^

0 [0x0]: line: 187 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator^[1431] params(1) in file: lib\support\/0.2.9//primitives.sharp:188:8: note:  
		    def operator^(num : char)   := (value^num.value);
		       ^

0 [0x0]: line: 188 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator^[1432] params(1) in file: lib\support\/0.2.9//primitives.sharp:189:8: note:  
		    def operator^(num : byte)   := (value^num.value);
		       ^

0 [0x0]: line: 189 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator^[1433] params(1) in file: lib\support\/0.2.9//primitives.sharp:190:8: note:  
		    def operator^(num : bool)   := (value^num.value);
		       ^

0 [0x0]: line: 190 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator^[1434] params(1) in file: lib\support\/0.2.9//primitives.sharp:191:8: note:  
		    def operator^(num : double)   := (value^num.value);
		       ^

0 [0x0]: line: 191 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator^[1435] params(1) in file: lib\support\/0.2.9//primitives.sharp:192:8: note:  
		    def operator^(num : var)    := (value^num);
		       ^

0 [0x0]: line: 192 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           xor ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint8>.operator&[1436] params(1) in file: lib\support\/0.2.9//primitives.sharp:194:8: note:  
		    def operator&(num : ulong)  := (value&num.value);
		       ^

0 [0x0]: line: 194 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator&[1437] params(1) in file: lib\support\/0.2.9//primitives.sharp:195:8: note:  
		    def operator&(num : long)   := (value&num.value);
		       ^

0 [0x0]: line: 195 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator&[1438] params(1) in file: lib\support\/0.2.9//primitives.sharp:196:8: note:  
		    def operator&(num : uint)   := (value&num.value);
		       ^

0 [0x0]: line: 196 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator&[1439] params(1) in file: lib\support\/0.2.9//primitives.sharp:197:8: note:  
		    def operator&(num : int)    := (value&num.value);
		       ^

0 [0x0]: line: 197 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator&[1440] params(1) in file: lib\support\/0.2.9//primitives.sharp:198:8: note:  
		    def operator&(num : ushort) := (value&num.value);
		       ^

0 [0x0]: line: 198 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator&[1441] params(1) in file: lib\support\/0.2.9//primitives.sharp:199:8: note:  
		    def operator&(num : short)  := (value&num.value);
		       ^

0 [0x0]: line: 199 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator&[1442] params(1) in file: lib\support\/0.2.9//primitives.sharp:200:8: note:  
		    def operator&(num : uchar)  := (value&num.value);
		       ^

0 [0x0]: line: 200 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator&[1443] params(1) in file: lib\support\/0.2.9//primitives.sharp:201:8: note:  
		    def operator&(num : char)   := (value&num.value);
		       ^

0 [0x0]: line: 201 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator&[1444] params(1) in file: lib\support\/0.2.9//primitives.sharp:202:8: note:  
		    def operator&(num : byte)   := (value&num.value);
		       ^

0 [0x0]: line: 202 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator&[1445] params(1) in file: lib\support\/0.2.9//primitives.sharp:203:8: note:  
		    def operator&(num : bool)   := (value&num.value);
		       ^

0 [0x0]: line: 203 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator&[1446] params(1) in file: lib\support\/0.2.9//primitives.sharp:204:8: note:  
		    def operator&(num : double)   := (value&num.value);
		       ^

0 [0x0]: line: 204 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator&[1447] params(1) in file: lib\support\/0.2.9//primitives.sharp:205:8: note:  
		    def operator&(num : var)    := (value&num);
		       ^

0 [0x0]: line: 205 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           uand ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint8>.operator|[1448] params(1) in file: lib\support\/0.2.9//primitives.sharp:207:8: note:  
		    def operator|(num : ulong)  := (value|num.value);
		       ^

0 [0x0]: line: 207 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator|[1449] params(1) in file: lib\support\/0.2.9//primitives.sharp:208:8: note:  
		    def operator|(num : long)   := (value|num.value);
		       ^

0 [0x0]: line: 208 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator|[1450] params(1) in file: lib\support\/0.2.9//primitives.sharp:209:8: note:  
		    def operator|(num : uint)   := (value|num.value);
		       ^

0 [0x0]: line: 209 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator|[1451] params(1) in file: lib\support\/0.2.9//primitives.sharp:210:8: note:  
		    def operator|(num : int)    := (value|num.value);
		       ^

0 [0x0]: line: 210 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator|[1452] params(1) in file: lib\support\/0.2.9//primitives.sharp:211:8: note:  
		    def operator|(num : ushort) := (value|num.value);
		       ^

0 [0x0]: line: 211 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator|[1453] params(1) in file: lib\support\/0.2.9//primitives.sharp:212:8: note:  
		    def operator|(num : short)  := (value|num.value);
		       ^

0 [0x0]: line: 212 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator|[1454] params(1) in file: lib\support\/0.2.9//primitives.sharp:213:8: note:  
		    def operator|(num : uchar)  := (value|num.value);
		       ^

0 [0x0]: line: 213 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator|[1455] params(1) in file: lib\support\/0.2.9//primitives.sharp:214:8: note:  
		    def operator|(num : char)   := (value|num.value);
		       ^

0 [0x0]: line: 214 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator|[1456] params(1) in file: lib\support\/0.2.9//primitives.sharp:215:8: note:  
		    def operator|(num : byte)   := (value|num.value);
		       ^

0 [0x0]: line: 215 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator|[1457] params(1) in file: lib\support\/0.2.9//primitives.sharp:216:8: note:  
		    def operator|(num : bool)   := (value|num.value);
		       ^

0 [0x0]: line: 216 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator|[1458] params(1) in file: lib\support\/0.2.9//primitives.sharp:217:8: note:  
		    def operator|(num : double)   := (value|num.value);
		       ^

0 [0x0]: line: 217 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_uint8>.operator|[1459] params(1) in file: lib\support\/0.2.9//primitives.sharp:218:8: note:  
		    def operator|(num : var)    := (value|num);
		       ^

0 [0x0]: line: 218 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           or ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_uint8>.operator!=[1460] params(1) in file: lib\support\/0.2.9//primitives.sharp:220:8: note:  
		    def operator!=(num : var) := value!=num;
		       ^

0 [0x0]: line: 220 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           tne ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint8>.operator==[1461] params(1) in file: lib\support\/0.2.9//primitives.sharp:221:8: note:  
		    def operator==(num : var) := value==num;
		       ^

0 [0x0]: line: 221 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           test ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_uint8>.operator=[1462] params(1) in file: lib\support\/0.2.9//primitives.sharp:222:8: note:  
		    def operator=(num : var) := value=num;
		       ^

0 [0x0]: line: 222 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           loadval ebx   
5 [0x5]:           movu8 ebx, ebx   
6 [0x6]:           movi #0, adx   
8 [0x8]:           rmov adx, ebx   
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std#integer<_uint8>.to_string[1463] params(0) in file: lib\support\/0.2.9//primitives.sharp:224:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 225 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           newstr @55 //    
4 [0x4]:           call @3546 // <std#string.string>   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           rstore ebx   
12 [0xc]:           call @3583 // <std#string.operator+>   
13 [0xd]:           popobj2    
14 [0xe]:           returnobj   
15 [0xf]:           ret   


function: std#integer<_uint8>.parse[1464] params(1) in file: lib\support\/0.2.9//primitives.sharp:228:15: note:  
		    static def parse(s: string) : native_type {
		              ^

0 [0x0]: line: 229 movi #0, ebx   
2 [0x2]:           movu8 ebx, ebx   
3 [0x3]:           smovr_2 ebx, fp+1   
4 [0x4]: line: 231 movi #0, ebx   
6 [0x6]:           movr cmt, ebx   
7 [0x7]:           jne 14   
8 [0x8]: line: 232 pushl 0   
9 [0x9]:           call @1898 // <std#__srt_global.strtod>   
10 [0xa]:           loadval ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   
13 [0xd]:           jmp @104   
14 [0xe]: line: 234 istorel 0, fp+2   
16 [0x10]: line: 235 istorel 0, fp+3   
18 [0x12]: line: 236 pushl 0   
19 [0x13]:           call @3587 // <std#string.size>   
20 [0x14]:           ipopl 4   
21 [0x15]: line: 238 pushl 0   
22 [0x16]:           istore 0   
24 [0x18]:           call @3568 // <std#string.at>   
25 [0x19]:           loadval ebx   
26 [0x1a]:           rstore ebx   
27 [0x1b]:           movi #45, ebx   
29 [0x1d]:           loadval ecx   
30 [0x1e]:           test ecx, ebx   
31 [0x1f]:           movr ebx, cmt   
32 [0x20]:           movr cmt, ebx   
33 [0x21]:           jne 38   
34 [0x22]: line: 239 istorel 1, fp+3   
36 [0x24]: line: 240 istorel 1, fp+2   
38 [0x26]:           nop   
39 [0x27]: line: 243 ipushl #2   
40 [0x28]:           loadl ebx, fp+4   
41 [0x29]:           loadval ecx   
42 [0x2a]:           lt ecx, ebx   
43 [0x2b]:           movr ebx, cmt   
44 [0x2c]:           movr cmt, ebx   
45 [0x2d]:           jne 93   
46 [0x2e]: line: 244 pushl 0   
47 [0x2f]:           ipushl #2   
48 [0x30]:           call @3568 // <std#string.at>   
49 [0x31]:           call @3209 // <std#char.is_digit>   
50 [0x32]:           loadval ebx   
51 [0x33]:           not ebx, ebx   
52 [0x34]:           movr cmt, ebx   
53 [0x35]:           jne 68   
54 [0x36]: line: 245 new_class @4 // std#illegal_argument_exception   
56 [0x38]:           dup    
57 [0x39]:           new_class @75 // std#string   
59 [0x3b]:           dup    
60 [0x3c]:           newstr @561 // illegal char in string:    
61 [0x3d]:           call @3546 // <std#string.string>   
62 [0x3e]:           pushl 0   
63 [0x3f]:           ipushl #2   
64 [0x40]:           call @3568 // <std#string.at>   
65 [0x41]:           call @3579 // <std#string.operator+>   
66 [0x42]:           call @1962 // <std#illegal_argument_exception.illegal_argument_exception>   
67 [0x43]:           throw    
68 [0x44]:           nop   
69 [0x45]: line: 249 movi #10, ebx   
71 [0x47]:           loadl ecx, fp+1   
72 [0x48]:           mul ecx, ebx -> ebx   
73 [0x49]:           movu8 ebx, ebx   
74 [0x4a]:           smovr_2 ebx, fp+1   
75 [0x4b]: line: 250 pushl 0   
76 [0x4c]:           loadl ebx, fp+2   
77 [0x4d]:           movr egx, ebx   
78 [0x4e]:           inc ebx   
79 [0x4f]:           smovr_2 ebx, fp+2   
80 [0x50]:           rstore egx   
81 [0x51]:           call @3568 // <std#string.at>   
82 [0x52]:           loadval ebx   
83 [0x53]:           rstore ebx   
84 [0x54]:           movi #48, ebx   
86 [0x56]:           loadval ecx   
87 [0x57]:           sub ecx, ebx -> ebx   
88 [0x58]:           loadl ecx, fp+1   
89 [0x59]:           add ecx, ebx -> ebx   
90 [0x5a]:           movu8 ebx, ebx   
91 [0x5b]:           smovr_2 ebx, fp+1   
92 [0x5c]:           jmp @39   
93 [0x5d]: line: 252 loadl ebx, fp+3   
94 [0x5e]:           movr cmt, ebx   
95 [0x5f]:           jne 100   
96 [0x60]: line: 253 loadl ebx, fp+1   
97 [0x61]:           neg ebx, ebx   
98 [0x62]:           movu8 ebx, ebx   
99 [0x63]:           smovr_2 ebx, fp+1   
100 [0x64]:           nop   
101 [0x65]: line: 254 loadl ebx, fp+1   
102 [0x66]:           return_val ebx   
103 [0x67]:           ret   
104 [0x68]:           nop   


function: std#integer<_uint8>.to_ulong[1465] params(0) in file: lib\support\/0.2.9//primitives.sharp:258:8: note:  
		    def to_ulong() := new ulong { value };
		       ^

0 [0x0]: line: 258 new_class @53 // std#ulong   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu64 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint8>.to_long[1466] params(0) in file: lib\support\/0.2.9//primitives.sharp:259:8: note:  
		    def to_long() := new long { value };
		       ^

0 [0x0]: line: 259 new_class @54 // std#long   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov64 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint8>.to_uint[1467] params(0) in file: lib\support\/0.2.9//primitives.sharp:260:8: note:  
		    def to_uint() := new uint { value };
		       ^

0 [0x0]: line: 260 new_class @55 // std#uint   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu32 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint8>.to_int[1468] params(0) in file: lib\support\/0.2.9//primitives.sharp:261:8: note:  
		    def to_int() := new int { value };
		       ^

0 [0x0]: line: 261 new_class @56 // std#int   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov32 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint8>.to_ushort[1469] params(0) in file: lib\support\/0.2.9//primitives.sharp:262:8: note:  
		    def to_ushort() := new ushort { value };
		       ^

0 [0x0]: line: 262 new_class @57 // std#ushort   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu16 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint8>.to_short[1470] params(0) in file: lib\support\/0.2.9//primitives.sharp:263:8: note:  
		    def to_short() := new short { value };
		       ^

0 [0x0]: line: 263 new_class @58 // std#short   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov16 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint8>.to_uchar[1471] params(0) in file: lib\support\/0.2.9//primitives.sharp:264:8: note:  
		    def to_uchar() := new uchar { value };
		       ^

0 [0x0]: line: 264 new_class @59 // std#uchar   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint8>.to_char[1472] params(0) in file: lib\support\/0.2.9//primitives.sharp:265:8: note:  
		    def to_char() := new char { value };
		       ^

0 [0x0]: line: 265 new_class @60 // std#char   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint8>.to_byte[1473] params(0) in file: lib\support\/0.2.9//primitives.sharp:266:8: note:  
		    def to_byte() := new byte { value };
		       ^

0 [0x0]: line: 266 new_class @61 // std#byte   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint8>.to_bool[1474] params(0) in file: lib\support\/0.2.9//primitives.sharp:267:8: note:  
		    def to_bool() := new bool { value };
		       ^

0 [0x0]: line: 267 new_class @62 // std#bool   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_uint8>.to_double[1475] params(0) in file: lib\support\/0.2.9//primitives.sharp:268:8: note:  
		    def to_double() := new double { value };
		       ^

0 [0x0]: line: 268 new_class @63 // std#double   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_uint8>.get_value[1476] params(0) in file: lib\support\/0.2.9//primitives.sharp:270:8: note:  
		    def get_value() := value;
		       ^

0 [0x0]: line: 270 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


constructor: std#integer<_uint8>.integer[1477] params(0) in file: lib\support\/0.2.9//primitives.sharp:5:13: note:  
		public class integer<native_type> {
		            ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#integer<_int8>.integer[1478] params(1) in file: lib\support\/0.2.9//primitives.sharp:8:12: note:  
		    integer(initial_val : var) {
		           ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 9 ipushl #1   
2 [0x2]:         movl 0   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         mov8 ebx, ebx   
7 [0x7]:         movi #0, adx   
9 [0x9]:         rmov adx, ebx   
10 [0xa]:         ret   


function: std#integer<_int8>.hash[1479] params(0) in file: lib\support\/0.2.9//primitives.sharp:12:8: note:  
		    def hash() : _int64 {
		       ^

0 [0x0]: line: 13 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          return_val ebx   
7 [0x7]:          ret   


overload function: std#integer<_int8>.operator!=[1480] params(1) in file: lib\support\/0.2.9//primitives.sharp:16:8: note:  
		    def operator!=(num : ulong) := (value!=num.value);
		       ^

0 [0x0]: line: 16 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator==[1481] params(1) in file: lib\support\/0.2.9//primitives.sharp:17:8: note:  
		    def operator==(num : ulong) := (value==num.value);
		       ^

0 [0x0]: line: 17 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator!=[1482] params(1) in file: lib\support\/0.2.9//primitives.sharp:18:8: note:  
		    def operator!=(num : long) := (value!=num.value);
		       ^

0 [0x0]: line: 18 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator==[1483] params(1) in file: lib\support\/0.2.9//primitives.sharp:19:8: note:  
		    def operator==(num : long) := (value==num.value);
		       ^

0 [0x0]: line: 19 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator!=[1484] params(1) in file: lib\support\/0.2.9//primitives.sharp:20:8: note:  
		    def operator!=(num : uint) := (value!=num.value);
		       ^

0 [0x0]: line: 20 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator==[1485] params(1) in file: lib\support\/0.2.9//primitives.sharp:21:8: note:  
		    def operator==(num : uint) := (value==num.value);
		       ^

0 [0x0]: line: 21 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator!=[1486] params(1) in file: lib\support\/0.2.9//primitives.sharp:22:8: note:  
		    def operator!=(num : int) := (value!=num.value);
		       ^

0 [0x0]: line: 22 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator==[1487] params(1) in file: lib\support\/0.2.9//primitives.sharp:23:8: note:  
		    def operator==(num : int) := (value==num.value);
		       ^

0 [0x0]: line: 23 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator!=[1488] params(1) in file: lib\support\/0.2.9//primitives.sharp:24:8: note:  
		    def operator!=(num : ushort) := (value!=num.value);
		       ^

0 [0x0]: line: 24 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator==[1489] params(1) in file: lib\support\/0.2.9//primitives.sharp:25:8: note:  
		    def operator==(num : ushort) := (value==num.value);
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator!=[1490] params(1) in file: lib\support\/0.2.9//primitives.sharp:26:8: note:  
		    def operator!=(num : short) := (value!=num.value);
		       ^

0 [0x0]: line: 26 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator==[1491] params(1) in file: lib\support\/0.2.9//primitives.sharp:27:8: note:  
		    def operator==(num : short) := (value==num.value);
		       ^

0 [0x0]: line: 27 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator!=[1492] params(1) in file: lib\support\/0.2.9//primitives.sharp:28:8: note:  
		    def operator!=(num : uchar) := (value!=num.value);
		       ^

0 [0x0]: line: 28 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator==[1493] params(1) in file: lib\support\/0.2.9//primitives.sharp:29:8: note:  
		    def operator==(num : uchar) := (value==num.value);
		       ^

0 [0x0]: line: 29 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator!=[1494] params(1) in file: lib\support\/0.2.9//primitives.sharp:30:8: note:  
		    def operator!=(num : char) := (value!=num.value);
		       ^

0 [0x0]: line: 30 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator==[1495] params(1) in file: lib\support\/0.2.9//primitives.sharp:31:8: note:  
		    def operator==(num : char) := (value==num.value);
		       ^

0 [0x0]: line: 31 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator!=[1496] params(1) in file: lib\support\/0.2.9//primitives.sharp:32:8: note:  
		    def operator!=(num : byte) := (value!=num.value);
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator==[1497] params(1) in file: lib\support\/0.2.9//primitives.sharp:33:8: note:  
		    def operator==(num : byte) := (value==num.value);
		       ^

0 [0x0]: line: 33 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator!=[1498] params(1) in file: lib\support\/0.2.9//primitives.sharp:34:8: note:  
		    def operator!=(num : bool) := (value!=num.value);
		       ^

0 [0x0]: line: 34 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator==[1499] params(1) in file: lib\support\/0.2.9//primitives.sharp:35:8: note:  
		    def operator==(num : bool) := (value==num.value);
		       ^

0 [0x0]: line: 35 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator==[1500] params(1) in file: lib\support\/0.2.9//primitives.sharp:36:8: note:  
		    def operator==(num : double) := (value==num.value);
		       ^

0 [0x0]: line: 36 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator+[1501] params(1) in file: lib\support\/0.2.9//primitives.sharp:38:8: note:  
		    def operator+(num : ulong)  := (value+num.value);
		       ^

0 [0x0]: line: 38 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator+[1502] params(1) in file: lib\support\/0.2.9//primitives.sharp:39:8: note:  
		    def operator+(num : long)   := (value+num.value);
		       ^

0 [0x0]: line: 39 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator+[1503] params(1) in file: lib\support\/0.2.9//primitives.sharp:40:8: note:  
		    def operator+(num : uint)   := (value+num.value);
		       ^

0 [0x0]: line: 40 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator+[1504] params(1) in file: lib\support\/0.2.9//primitives.sharp:41:8: note:  
		    def operator+(num : int)    := (value+num.value);
		       ^

0 [0x0]: line: 41 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator+[1505] params(1) in file: lib\support\/0.2.9//primitives.sharp:42:8: note:  
		    def operator+(num : ushort) := (value+num.value);
		       ^

0 [0x0]: line: 42 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator+[1506] params(1) in file: lib\support\/0.2.9//primitives.sharp:43:8: note:  
		    def operator+(num : short)  := (value+num.value);
		       ^

0 [0x0]: line: 43 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator+[1507] params(1) in file: lib\support\/0.2.9//primitives.sharp:44:8: note:  
		    def operator+(num : uchar)  := (value+num.value);
		       ^

0 [0x0]: line: 44 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator+[1508] params(1) in file: lib\support\/0.2.9//primitives.sharp:45:8: note:  
		    def operator+(num : char)   := (value+num.value);
		       ^

0 [0x0]: line: 45 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator+[1509] params(1) in file: lib\support\/0.2.9//primitives.sharp:46:8: note:  
		    def operator+(num : byte)   := (value+num.value);
		       ^

0 [0x0]: line: 46 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator+[1510] params(1) in file: lib\support\/0.2.9//primitives.sharp:47:8: note:  
		    def operator+(num : bool)   := (value+num.value);
		       ^

0 [0x0]: line: 47 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator+[1511] params(1) in file: lib\support\/0.2.9//primitives.sharp:48:8: note:  
		    def operator+(num : double)   := (value+num.value);
		       ^

0 [0x0]: line: 48 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator+[1512] params(1) in file: lib\support\/0.2.9//primitives.sharp:49:8: note:  
		    def operator+(num : var)    := (value+num);
		       ^

0 [0x0]: line: 49 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          add ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int8>.operator-[1513] params(1) in file: lib\support\/0.2.9//primitives.sharp:51:8: note:  
		    def operator-(num : ulong)  := (value-num.value);
		       ^

0 [0x0]: line: 51 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator-[1514] params(1) in file: lib\support\/0.2.9//primitives.sharp:52:8: note:  
		    def operator-(num : long)   := (value-num.value);
		       ^

0 [0x0]: line: 52 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator-[1515] params(1) in file: lib\support\/0.2.9//primitives.sharp:53:8: note:  
		    def operator-(num : uint)   := (value-num.value);
		       ^

0 [0x0]: line: 53 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator-[1516] params(1) in file: lib\support\/0.2.9//primitives.sharp:54:8: note:  
		    def operator-(num : int)    := (value-num.value);
		       ^

0 [0x0]: line: 54 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator-[1517] params(1) in file: lib\support\/0.2.9//primitives.sharp:55:8: note:  
		    def operator-(num : ushort) := (value-num.value);
		       ^

0 [0x0]: line: 55 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator-[1518] params(1) in file: lib\support\/0.2.9//primitives.sharp:56:8: note:  
		    def operator-(num : short)  := (value-num.value);
		       ^

0 [0x0]: line: 56 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator-[1519] params(1) in file: lib\support\/0.2.9//primitives.sharp:57:8: note:  
		    def operator-(num : uchar)  := (value-num.value);
		       ^

0 [0x0]: line: 57 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator-[1520] params(1) in file: lib\support\/0.2.9//primitives.sharp:58:8: note:  
		    def operator-(num : char)   := (value-num.value);
		       ^

0 [0x0]: line: 58 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator-[1521] params(1) in file: lib\support\/0.2.9//primitives.sharp:59:8: note:  
		    def operator-(num : byte)   := (value-num.value);
		       ^

0 [0x0]: line: 59 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator-[1522] params(1) in file: lib\support\/0.2.9//primitives.sharp:60:8: note:  
		    def operator-(num : bool)   := (value-num.value);
		       ^

0 [0x0]: line: 60 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator-[1523] params(1) in file: lib\support\/0.2.9//primitives.sharp:61:8: note:  
		    def operator-(num : double)   := (value-num.value);
		       ^

0 [0x0]: line: 61 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator-[1524] params(1) in file: lib\support\/0.2.9//primitives.sharp:62:8: note:  
		    def operator-(num : var)    := (value-num);
		       ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          sub ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int8>.operator*[1525] params(1) in file: lib\support\/0.2.9//primitives.sharp:64:8: note:  
		    def operator*(num : ulong)  := (value*num.value);
		       ^

0 [0x0]: line: 64 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator*[1526] params(1) in file: lib\support\/0.2.9//primitives.sharp:65:8: note:  
		    def operator*(num : long)   := (value*num.value);
		       ^

0 [0x0]: line: 65 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator*[1527] params(1) in file: lib\support\/0.2.9//primitives.sharp:66:8: note:  
		    def operator*(num : uint)   := (value*num.value);
		       ^

0 [0x0]: line: 66 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator*[1528] params(1) in file: lib\support\/0.2.9//primitives.sharp:67:8: note:  
		    def operator*(num : int)    := (value*num.value);
		       ^

0 [0x0]: line: 67 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator*[1529] params(1) in file: lib\support\/0.2.9//primitives.sharp:68:8: note:  
		    def operator*(num : ushort) := (value*num.value);
		       ^

0 [0x0]: line: 68 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator*[1530] params(1) in file: lib\support\/0.2.9//primitives.sharp:69:8: note:  
		    def operator*(num : short)  := (value*num.value);
		       ^

0 [0x0]: line: 69 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator*[1531] params(1) in file: lib\support\/0.2.9//primitives.sharp:70:8: note:  
		    def operator*(num : uchar)  := (value*num.value);
		       ^

0 [0x0]: line: 70 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator*[1532] params(1) in file: lib\support\/0.2.9//primitives.sharp:71:8: note:  
		    def operator*(num : char)   := (value*num.value);
		       ^

0 [0x0]: line: 71 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator*[1533] params(1) in file: lib\support\/0.2.9//primitives.sharp:72:8: note:  
		    def operator*(num : byte)   := (value*num.value);
		       ^

0 [0x0]: line: 72 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator*[1534] params(1) in file: lib\support\/0.2.9//primitives.sharp:73:8: note:  
		    def operator*(num : bool)   := (value*num.value);
		       ^

0 [0x0]: line: 73 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator*[1535] params(1) in file: lib\support\/0.2.9//primitives.sharp:74:8: note:  
		    def operator*(num : double)   := (value*num.value);
		       ^

0 [0x0]: line: 74 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator*[1536] params(1) in file: lib\support\/0.2.9//primitives.sharp:75:8: note:  
		    def operator*(num : var)    := (value*num);
		       ^

0 [0x0]: line: 75 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          mul ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int8>.operator/[1537] params(1) in file: lib\support\/0.2.9//primitives.sharp:77:8: note:  
		    def operator/(num : ulong)  := (value/num.value);
		       ^

0 [0x0]: line: 77 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator/[1538] params(1) in file: lib\support\/0.2.9//primitives.sharp:78:8: note:  
		    def operator/(num : long)   := (value/num.value);
		       ^

0 [0x0]: line: 78 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator/[1539] params(1) in file: lib\support\/0.2.9//primitives.sharp:79:8: note:  
		    def operator/(num : uint)   := (value/num.value);
		       ^

0 [0x0]: line: 79 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator/[1540] params(1) in file: lib\support\/0.2.9//primitives.sharp:80:8: note:  
		    def operator/(num : int)    := (value/num.value);
		       ^

0 [0x0]: line: 80 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator/[1541] params(1) in file: lib\support\/0.2.9//primitives.sharp:81:8: note:  
		    def operator/(num : ushort) := (value/num.value);
		       ^

0 [0x0]: line: 81 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator/[1542] params(1) in file: lib\support\/0.2.9//primitives.sharp:82:8: note:  
		    def operator/(num : short)  := (value/num.value);
		       ^

0 [0x0]: line: 82 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator/[1543] params(1) in file: lib\support\/0.2.9//primitives.sharp:83:8: note:  
		    def operator/(num : uchar)  := (value/num.value);
		       ^

0 [0x0]: line: 83 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator/[1544] params(1) in file: lib\support\/0.2.9//primitives.sharp:84:8: note:  
		    def operator/(num : char)   := (value/num.value);
		       ^

0 [0x0]: line: 84 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator/[1545] params(1) in file: lib\support\/0.2.9//primitives.sharp:85:8: note:  
		    def operator/(num : byte)   := (value/num.value);
		       ^

0 [0x0]: line: 85 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator/[1546] params(1) in file: lib\support\/0.2.9//primitives.sharp:86:8: note:  
		    def operator/(num : bool)   := (value/num.value);
		       ^

0 [0x0]: line: 86 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator/[1547] params(1) in file: lib\support\/0.2.9//primitives.sharp:87:8: note:  
		    def operator/(num : double)   := (value/num.value);
		       ^

0 [0x0]: line: 87 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator/[1548] params(1) in file: lib\support\/0.2.9//primitives.sharp:88:8: note:  
		    def operator/(num : var)    := (value/num);
		       ^

0 [0x0]: line: 88 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          div ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<_int8>.operator%[1549] params(1) in file: lib\support\/0.2.9//primitives.sharp:90:8: note:  
		    def operator%(num : ulong)  := (value%num.value);
		       ^

0 [0x0]: line: 90 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator%[1550] params(1) in file: lib\support\/0.2.9//primitives.sharp:91:8: note:  
		    def operator%(num : long)   := (value%num.value);
		       ^

0 [0x0]: line: 91 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator%[1551] params(1) in file: lib\support\/0.2.9//primitives.sharp:92:8: note:  
		    def operator%(num : uint)   := (value%num.value);
		       ^

0 [0x0]: line: 92 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator%[1552] params(1) in file: lib\support\/0.2.9//primitives.sharp:93:8: note:  
		    def operator%(num : int)    := (value%num.value);
		       ^

0 [0x0]: line: 93 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator%[1553] params(1) in file: lib\support\/0.2.9//primitives.sharp:94:8: note:  
		    def operator%(num : ushort) := (value%num.value);
		       ^

0 [0x0]: line: 94 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator%[1554] params(1) in file: lib\support\/0.2.9//primitives.sharp:95:8: note:  
		    def operator%(num : short)  := (value%num.value);
		       ^

0 [0x0]: line: 95 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator%[1555] params(1) in file: lib\support\/0.2.9//primitives.sharp:96:8: note:  
		    def operator%(num : uchar)  := (value%num.value);
		       ^

0 [0x0]: line: 96 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator%[1556] params(1) in file: lib\support\/0.2.9//primitives.sharp:97:8: note:  
		    def operator%(num : char)   := (value%num.value);
		       ^

0 [0x0]: line: 97 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator%[1557] params(1) in file: lib\support\/0.2.9//primitives.sharp:98:8: note:  
		    def operator%(num : byte)   := (value%num.value);
		       ^

0 [0x0]: line: 98 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator%[1558] params(1) in file: lib\support\/0.2.9//primitives.sharp:99:8: note:  
		    def operator%(num : bool)   := (value%num.value);
		       ^

0 [0x0]: line: 99 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<_int8>.operator%[1559] params(1) in file: lib\support\/0.2.9//primitives.sharp:100:8: note:  
		    def operator%(num : double)   := (value%num.value);
		       ^

0 [0x0]: line: 100 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator%[1560] params(1) in file: lib\support\/0.2.9//primitives.sharp:101:8: note:  
		    def operator%(num : var)    := (value%num);
		       ^

0 [0x0]: line: 101 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           mod ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int8>.operator<[1561] params(1) in file: lib\support\/0.2.9//primitives.sharp:103:8: note:  
		    def operator<(num : ulong)  := (value<num.value);
		       ^

0 [0x0]: line: 103 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<[1562] params(1) in file: lib\support\/0.2.9//primitives.sharp:104:8: note:  
		    def operator<(num : long)   := (value<num.value);
		       ^

0 [0x0]: line: 104 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<[1563] params(1) in file: lib\support\/0.2.9//primitives.sharp:105:8: note:  
		    def operator<(num : uint)   := (value<num.value);
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<[1564] params(1) in file: lib\support\/0.2.9//primitives.sharp:106:8: note:  
		    def operator<(num : int)    := (value<num.value);
		       ^

0 [0x0]: line: 106 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<[1565] params(1) in file: lib\support\/0.2.9//primitives.sharp:107:8: note:  
		    def operator<(num : ushort) := (value<num.value);
		       ^

0 [0x0]: line: 107 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<[1566] params(1) in file: lib\support\/0.2.9//primitives.sharp:108:8: note:  
		    def operator<(num : short)  := (value<num.value);
		       ^

0 [0x0]: line: 108 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<[1567] params(1) in file: lib\support\/0.2.9//primitives.sharp:109:8: note:  
		    def operator<(num : uchar)  := (value<num.value);
		       ^

0 [0x0]: line: 109 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<[1568] params(1) in file: lib\support\/0.2.9//primitives.sharp:110:8: note:  
		    def operator<(num : char)   := (value<num.value);
		       ^

0 [0x0]: line: 110 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<[1569] params(1) in file: lib\support\/0.2.9//primitives.sharp:111:8: note:  
		    def operator<(num : byte)   := (value<num.value);
		       ^

0 [0x0]: line: 111 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<[1570] params(1) in file: lib\support\/0.2.9//primitives.sharp:112:8: note:  
		    def operator<(num : bool)   := (value<num.value);
		       ^

0 [0x0]: line: 112 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<[1571] params(1) in file: lib\support\/0.2.9//primitives.sharp:113:8: note:  
		    def operator<(num : double)   := (value<num.value);
		       ^

0 [0x0]: line: 113 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<[1572] params(1) in file: lib\support\/0.2.9//primitives.sharp:114:8: note:  
		    def operator<(num : var)    := (value<num);
		       ^

0 [0x0]: line: 114 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           lt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int8>.operator>[1573] params(1) in file: lib\support\/0.2.9//primitives.sharp:116:8: note:  
		    def operator>(num : ulong)  := (value>num.value);
		       ^

0 [0x0]: line: 116 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>[1574] params(1) in file: lib\support\/0.2.9//primitives.sharp:117:8: note:  
		    def operator>(num : long)   := (value>num.value);
		       ^

0 [0x0]: line: 117 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>[1575] params(1) in file: lib\support\/0.2.9//primitives.sharp:118:8: note:  
		    def operator>(num : uint)   := (value>num.value);
		       ^

0 [0x0]: line: 118 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>[1576] params(1) in file: lib\support\/0.2.9//primitives.sharp:119:8: note:  
		    def operator>(num : int)    := (value>num.value);
		       ^

0 [0x0]: line: 119 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>[1577] params(1) in file: lib\support\/0.2.9//primitives.sharp:120:8: note:  
		    def operator>(num : ushort) := (value>num.value);
		       ^

0 [0x0]: line: 120 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>[1578] params(1) in file: lib\support\/0.2.9//primitives.sharp:121:8: note:  
		    def operator>(num : short)  := (value>num.value);
		       ^

0 [0x0]: line: 121 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>[1579] params(1) in file: lib\support\/0.2.9//primitives.sharp:122:8: note:  
		    def operator>(num : uchar)  := (value>num.value);
		       ^

0 [0x0]: line: 122 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>[1580] params(1) in file: lib\support\/0.2.9//primitives.sharp:123:8: note:  
		    def operator>(num : char)   := (value>num.value);
		       ^

0 [0x0]: line: 123 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>[1581] params(1) in file: lib\support\/0.2.9//primitives.sharp:124:8: note:  
		    def operator>(num : byte)   := (value>num.value);
		       ^

0 [0x0]: line: 124 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>[1582] params(1) in file: lib\support\/0.2.9//primitives.sharp:125:8: note:  
		    def operator>(num : bool)   := (value>num.value);
		       ^

0 [0x0]: line: 125 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>[1583] params(1) in file: lib\support\/0.2.9//primitives.sharp:126:8: note:  
		    def operator>(num : double)   := (value>num.value);
		       ^

0 [0x0]: line: 126 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>[1584] params(1) in file: lib\support\/0.2.9//primitives.sharp:127:8: note:  
		    def operator>(num : var)    := (value>num);
		       ^

0 [0x0]: line: 127 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int8>.operator<=[1585] params(1) in file: lib\support\/0.2.9//primitives.sharp:129:8: note:  
		    def operator<=(num : ulong)  := (value>=num.value);
		       ^

0 [0x0]: line: 129 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<=[1586] params(1) in file: lib\support\/0.2.9//primitives.sharp:130:8: note:  
		    def operator<=(num : long)   := (value>=num.value);
		       ^

0 [0x0]: line: 130 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<=[1587] params(1) in file: lib\support\/0.2.9//primitives.sharp:131:8: note:  
		    def operator<=(num : uint)   := (value>=num.value);
		       ^

0 [0x0]: line: 131 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<=[1588] params(1) in file: lib\support\/0.2.9//primitives.sharp:132:8: note:  
		    def operator<=(num : int)    := (value>=num.value);
		       ^

0 [0x0]: line: 132 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<=[1589] params(1) in file: lib\support\/0.2.9//primitives.sharp:133:8: note:  
		    def operator<=(num : ushort) := (value>=num.value);
		       ^

0 [0x0]: line: 133 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<=[1590] params(1) in file: lib\support\/0.2.9//primitives.sharp:134:8: note:  
		    def operator<=(num : short)  := (value>=num.value);
		       ^

0 [0x0]: line: 134 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<=[1591] params(1) in file: lib\support\/0.2.9//primitives.sharp:135:8: note:  
		    def operator<=(num : uchar)  := (value>=num.value);
		       ^

0 [0x0]: line: 135 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<=[1592] params(1) in file: lib\support\/0.2.9//primitives.sharp:136:8: note:  
		    def operator<=(num : char)   := (value>=num.value);
		       ^

0 [0x0]: line: 136 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<=[1593] params(1) in file: lib\support\/0.2.9//primitives.sharp:137:8: note:  
		    def operator<=(num : byte)   := (value>=num.value);
		       ^

0 [0x0]: line: 137 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<=[1594] params(1) in file: lib\support\/0.2.9//primitives.sharp:138:8: note:  
		    def operator<=(num : bool)   := (value>=num.value);
		       ^

0 [0x0]: line: 138 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<=[1595] params(1) in file: lib\support\/0.2.9//primitives.sharp:139:8: note:  
		    def operator<=(num : double)   := (value>=num.value);
		       ^

0 [0x0]: line: 139 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<=[1596] params(1) in file: lib\support\/0.2.9//primitives.sharp:140:8: note:  
		    def operator<=(num : var)    := (value>=num);
		       ^

0 [0x0]: line: 140 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gte ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int8>.operator**[1597] params(1) in file: lib\support\/0.2.9//primitives.sharp:142:8: note:  
		    def operator**(num : ulong)  := (value**num.value);
		       ^

0 [0x0]: line: 142 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator**[1598] params(1) in file: lib\support\/0.2.9//primitives.sharp:143:8: note:  
		    def operator**(num : long)   := (value**num.value);
		       ^

0 [0x0]: line: 143 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator**[1599] params(1) in file: lib\support\/0.2.9//primitives.sharp:144:8: note:  
		    def operator**(num : uint)   := (value**num.value);
		       ^

0 [0x0]: line: 144 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator**[1600] params(1) in file: lib\support\/0.2.9//primitives.sharp:145:8: note:  
		    def operator**(num : int)    := (value**num.value);
		       ^

0 [0x0]: line: 145 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator**[1601] params(1) in file: lib\support\/0.2.9//primitives.sharp:146:8: note:  
		    def operator**(num : ushort) := (value**num.value);
		       ^

0 [0x0]: line: 146 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator**[1602] params(1) in file: lib\support\/0.2.9//primitives.sharp:147:8: note:  
		    def operator**(num : short)  := (value**num.value);
		       ^

0 [0x0]: line: 147 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator**[1603] params(1) in file: lib\support\/0.2.9//primitives.sharp:148:8: note:  
		    def operator**(num : uchar)  := (value**num.value);
		       ^

0 [0x0]: line: 148 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator**[1604] params(1) in file: lib\support\/0.2.9//primitives.sharp:149:8: note:  
		    def operator**(num : char)   := (value**num.value);
		       ^

0 [0x0]: line: 149 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator**[1605] params(1) in file: lib\support\/0.2.9//primitives.sharp:150:8: note:  
		    def operator**(num : byte)   := (value**num.value);
		       ^

0 [0x0]: line: 150 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator**[1606] params(1) in file: lib\support\/0.2.9//primitives.sharp:151:8: note:  
		    def operator**(num : bool)   := (value**num.value);
		       ^

0 [0x0]: line: 151 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator**[1607] params(1) in file: lib\support\/0.2.9//primitives.sharp:152:8: note:  
		    def operator**(num : double)   := (value**num.value);
		       ^

0 [0x0]: line: 152 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator**[1608] params(1) in file: lib\support\/0.2.9//primitives.sharp:153:8: note:  
		    def operator**(num : var)    := (value**num);
		       ^

0 [0x0]: line: 153 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           exp ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int8>.operator<<[1609] params(1) in file: lib\support\/0.2.9//primitives.sharp:155:8: note:  
		    def operator<<(num : ulong)  := (value<<num.value);
		       ^

0 [0x0]: line: 155 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<<[1610] params(1) in file: lib\support\/0.2.9//primitives.sharp:156:8: note:  
		    def operator<<(num : long)   := (value<<num.value);
		       ^

0 [0x0]: line: 156 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<<[1611] params(1) in file: lib\support\/0.2.9//primitives.sharp:157:8: note:  
		    def operator<<(num : uint)   := (value<<num.value);
		       ^

0 [0x0]: line: 157 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<<[1612] params(1) in file: lib\support\/0.2.9//primitives.sharp:158:8: note:  
		    def operator<<(num : int)    := (value<<num.value);
		       ^

0 [0x0]: line: 158 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<<[1613] params(1) in file: lib\support\/0.2.9//primitives.sharp:159:8: note:  
		    def operator<<(num : ushort) := (value<<num.value);
		       ^

0 [0x0]: line: 159 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<<[1614] params(1) in file: lib\support\/0.2.9//primitives.sharp:160:8: note:  
		    def operator<<(num : short)  := (value<<num.value);
		       ^

0 [0x0]: line: 160 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<<[1615] params(1) in file: lib\support\/0.2.9//primitives.sharp:161:8: note:  
		    def operator<<(num : uchar)  := (value<<num.value);
		       ^

0 [0x0]: line: 161 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<<[1616] params(1) in file: lib\support\/0.2.9//primitives.sharp:162:8: note:  
		    def operator<<(num : char)   := (value<<num.value);
		       ^

0 [0x0]: line: 162 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<<[1617] params(1) in file: lib\support\/0.2.9//primitives.sharp:163:8: note:  
		    def operator<<(num : byte)   := (value<<num.value);
		       ^

0 [0x0]: line: 163 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<<[1618] params(1) in file: lib\support\/0.2.9//primitives.sharp:164:8: note:  
		    def operator<<(num : bool)   := (value<<num.value);
		       ^

0 [0x0]: line: 164 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<<[1619] params(1) in file: lib\support\/0.2.9//primitives.sharp:165:8: note:  
		    def operator<<(num : double)   := (value<<num.value);
		       ^

0 [0x0]: line: 165 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator<<[1620] params(1) in file: lib\support\/0.2.9//primitives.sharp:166:8: note:  
		    def operator<<(num : var)    := (value<<num);
		       ^

0 [0x0]: line: 166 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shl ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int8>.operator>>[1621] params(1) in file: lib\support\/0.2.9//primitives.sharp:168:8: note:  
		    def operator>>(num : ulong)  := (value>>num.value);
		       ^

0 [0x0]: line: 168 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>>[1622] params(1) in file: lib\support\/0.2.9//primitives.sharp:169:8: note:  
		    def operator>>(num : long)   := (value>>num.value);
		       ^

0 [0x0]: line: 169 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>>[1623] params(1) in file: lib\support\/0.2.9//primitives.sharp:170:8: note:  
		    def operator>>(num : uint)   := (value>>num.value);
		       ^

0 [0x0]: line: 170 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>>[1624] params(1) in file: lib\support\/0.2.9//primitives.sharp:171:8: note:  
		    def operator>>(num : int)    := (value>>num.value);
		       ^

0 [0x0]: line: 171 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>>[1625] params(1) in file: lib\support\/0.2.9//primitives.sharp:172:8: note:  
		    def operator>>(num : ushort) := (value>>num.value);
		       ^

0 [0x0]: line: 172 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>>[1626] params(1) in file: lib\support\/0.2.9//primitives.sharp:173:8: note:  
		    def operator>>(num : short)  := (value>>num.value);
		       ^

0 [0x0]: line: 173 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>>[1627] params(1) in file: lib\support\/0.2.9//primitives.sharp:174:8: note:  
		    def operator>>(num : uchar)  := (value>>num.value);
		       ^

0 [0x0]: line: 174 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>>[1628] params(1) in file: lib\support\/0.2.9//primitives.sharp:175:8: note:  
		    def operator>>(num : char)   := (value>>num.value);
		       ^

0 [0x0]: line: 175 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>>[1629] params(1) in file: lib\support\/0.2.9//primitives.sharp:176:8: note:  
		    def operator>>(num : byte)   := (value>>num.value);
		       ^

0 [0x0]: line: 176 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>>[1630] params(1) in file: lib\support\/0.2.9//primitives.sharp:177:8: note:  
		    def operator>>(num : bool)   := (value>>num.value);
		       ^

0 [0x0]: line: 177 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>>[1631] params(1) in file: lib\support\/0.2.9//primitives.sharp:178:8: note:  
		    def operator>>(num : double)   := (value>>num.value);
		       ^

0 [0x0]: line: 178 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator>>[1632] params(1) in file: lib\support\/0.2.9//primitives.sharp:179:8: note:  
		    def operator>>(num : var)    := (value>>num);
		       ^

0 [0x0]: line: 179 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shr ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int8>.operator^[1633] params(1) in file: lib\support\/0.2.9//primitives.sharp:181:8: note:  
		    def operator^(num : ulong)  := (value^num.value);
		       ^

0 [0x0]: line: 181 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator^[1634] params(1) in file: lib\support\/0.2.9//primitives.sharp:182:8: note:  
		    def operator^(num : long)   := (value^num.value);
		       ^

0 [0x0]: line: 182 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator^[1635] params(1) in file: lib\support\/0.2.9//primitives.sharp:183:8: note:  
		    def operator^(num : uint)   := (value^num.value);
		       ^

0 [0x0]: line: 183 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator^[1636] params(1) in file: lib\support\/0.2.9//primitives.sharp:184:8: note:  
		    def operator^(num : int)    := (value^num.value);
		       ^

0 [0x0]: line: 184 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator^[1637] params(1) in file: lib\support\/0.2.9//primitives.sharp:185:8: note:  
		    def operator^(num : ushort) := (value^num.value);
		       ^

0 [0x0]: line: 185 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator^[1638] params(1) in file: lib\support\/0.2.9//primitives.sharp:186:8: note:  
		    def operator^(num : short)  := (value^num.value);
		       ^

0 [0x0]: line: 186 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator^[1639] params(1) in file: lib\support\/0.2.9//primitives.sharp:187:8: note:  
		    def operator^(num : uchar)  := (value^num.value);
		       ^

0 [0x0]: line: 187 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator^[1640] params(1) in file: lib\support\/0.2.9//primitives.sharp:188:8: note:  
		    def operator^(num : char)   := (value^num.value);
		       ^

0 [0x0]: line: 188 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator^[1641] params(1) in file: lib\support\/0.2.9//primitives.sharp:189:8: note:  
		    def operator^(num : byte)   := (value^num.value);
		       ^

0 [0x0]: line: 189 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator^[1642] params(1) in file: lib\support\/0.2.9//primitives.sharp:190:8: note:  
		    def operator^(num : bool)   := (value^num.value);
		       ^

0 [0x0]: line: 190 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator^[1643] params(1) in file: lib\support\/0.2.9//primitives.sharp:191:8: note:  
		    def operator^(num : double)   := (value^num.value);
		       ^

0 [0x0]: line: 191 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator^[1644] params(1) in file: lib\support\/0.2.9//primitives.sharp:192:8: note:  
		    def operator^(num : var)    := (value^num);
		       ^

0 [0x0]: line: 192 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           xor ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int8>.operator&[1645] params(1) in file: lib\support\/0.2.9//primitives.sharp:194:8: note:  
		    def operator&(num : ulong)  := (value&num.value);
		       ^

0 [0x0]: line: 194 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator&[1646] params(1) in file: lib\support\/0.2.9//primitives.sharp:195:8: note:  
		    def operator&(num : long)   := (value&num.value);
		       ^

0 [0x0]: line: 195 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator&[1647] params(1) in file: lib\support\/0.2.9//primitives.sharp:196:8: note:  
		    def operator&(num : uint)   := (value&num.value);
		       ^

0 [0x0]: line: 196 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator&[1648] params(1) in file: lib\support\/0.2.9//primitives.sharp:197:8: note:  
		    def operator&(num : int)    := (value&num.value);
		       ^

0 [0x0]: line: 197 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator&[1649] params(1) in file: lib\support\/0.2.9//primitives.sharp:198:8: note:  
		    def operator&(num : ushort) := (value&num.value);
		       ^

0 [0x0]: line: 198 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator&[1650] params(1) in file: lib\support\/0.2.9//primitives.sharp:199:8: note:  
		    def operator&(num : short)  := (value&num.value);
		       ^

0 [0x0]: line: 199 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator&[1651] params(1) in file: lib\support\/0.2.9//primitives.sharp:200:8: note:  
		    def operator&(num : uchar)  := (value&num.value);
		       ^

0 [0x0]: line: 200 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator&[1652] params(1) in file: lib\support\/0.2.9//primitives.sharp:201:8: note:  
		    def operator&(num : char)   := (value&num.value);
		       ^

0 [0x0]: line: 201 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator&[1653] params(1) in file: lib\support\/0.2.9//primitives.sharp:202:8: note:  
		    def operator&(num : byte)   := (value&num.value);
		       ^

0 [0x0]: line: 202 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator&[1654] params(1) in file: lib\support\/0.2.9//primitives.sharp:203:8: note:  
		    def operator&(num : bool)   := (value&num.value);
		       ^

0 [0x0]: line: 203 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator&[1655] params(1) in file: lib\support\/0.2.9//primitives.sharp:204:8: note:  
		    def operator&(num : double)   := (value&num.value);
		       ^

0 [0x0]: line: 204 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator&[1656] params(1) in file: lib\support\/0.2.9//primitives.sharp:205:8: note:  
		    def operator&(num : var)    := (value&num);
		       ^

0 [0x0]: line: 205 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           uand ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int8>.operator|[1657] params(1) in file: lib\support\/0.2.9//primitives.sharp:207:8: note:  
		    def operator|(num : ulong)  := (value|num.value);
		       ^

0 [0x0]: line: 207 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator|[1658] params(1) in file: lib\support\/0.2.9//primitives.sharp:208:8: note:  
		    def operator|(num : long)   := (value|num.value);
		       ^

0 [0x0]: line: 208 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator|[1659] params(1) in file: lib\support\/0.2.9//primitives.sharp:209:8: note:  
		    def operator|(num : uint)   := (value|num.value);
		       ^

0 [0x0]: line: 209 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator|[1660] params(1) in file: lib\support\/0.2.9//primitives.sharp:210:8: note:  
		    def operator|(num : int)    := (value|num.value);
		       ^

0 [0x0]: line: 210 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator|[1661] params(1) in file: lib\support\/0.2.9//primitives.sharp:211:8: note:  
		    def operator|(num : ushort) := (value|num.value);
		       ^

0 [0x0]: line: 211 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator|[1662] params(1) in file: lib\support\/0.2.9//primitives.sharp:212:8: note:  
		    def operator|(num : short)  := (value|num.value);
		       ^

0 [0x0]: line: 212 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator|[1663] params(1) in file: lib\support\/0.2.9//primitives.sharp:213:8: note:  
		    def operator|(num : uchar)  := (value|num.value);
		       ^

0 [0x0]: line: 213 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator|[1664] params(1) in file: lib\support\/0.2.9//primitives.sharp:214:8: note:  
		    def operator|(num : char)   := (value|num.value);
		       ^

0 [0x0]: line: 214 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator|[1665] params(1) in file: lib\support\/0.2.9//primitives.sharp:215:8: note:  
		    def operator|(num : byte)   := (value|num.value);
		       ^

0 [0x0]: line: 215 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator|[1666] params(1) in file: lib\support\/0.2.9//primitives.sharp:216:8: note:  
		    def operator|(num : bool)   := (value|num.value);
		       ^

0 [0x0]: line: 216 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator|[1667] params(1) in file: lib\support\/0.2.9//primitives.sharp:217:8: note:  
		    def operator|(num : double)   := (value|num.value);
		       ^

0 [0x0]: line: 217 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<_int8>.operator|[1668] params(1) in file: lib\support\/0.2.9//primitives.sharp:218:8: note:  
		    def operator|(num : var)    := (value|num);
		       ^

0 [0x0]: line: 218 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           or ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<_int8>.operator!=[1669] params(1) in file: lib\support\/0.2.9//primitives.sharp:220:8: note:  
		    def operator!=(num : var) := value!=num;
		       ^

0 [0x0]: line: 220 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           tne ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int8>.operator==[1670] params(1) in file: lib\support\/0.2.9//primitives.sharp:221:8: note:  
		    def operator==(num : var) := value==num;
		       ^

0 [0x0]: line: 221 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           test ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<_int8>.operator=[1671] params(1) in file: lib\support\/0.2.9//primitives.sharp:222:8: note:  
		    def operator=(num : var) := value=num;
		       ^

0 [0x0]: line: 222 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           loadval ebx   
5 [0x5]:           mov8 ebx, ebx   
6 [0x6]:           movi #0, adx   
8 [0x8]:           rmov adx, ebx   
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std#integer<_int8>.to_string[1672] params(0) in file: lib\support\/0.2.9//primitives.sharp:224:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 225 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           newstr @55 //    
4 [0x4]:           call @3546 // <std#string.string>   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           rstore ebx   
12 [0xc]:           call @3579 // <std#string.operator+>   
13 [0xd]:           popobj2    
14 [0xe]:           returnobj   
15 [0xf]:           ret   


function: std#integer<_int8>.parse[1673] params(1) in file: lib\support\/0.2.9//primitives.sharp:228:15: note:  
		    static def parse(s: string) : native_type {
		              ^

0 [0x0]: line: 229 movi #0, ebx   
2 [0x2]:           mov8 ebx, ebx   
3 [0x3]:           smovr_2 ebx, fp+1   
4 [0x4]: line: 231 movi #0, ebx   
6 [0x6]:           movr cmt, ebx   
7 [0x7]:           jne 14   
8 [0x8]: line: 232 pushl 0   
9 [0x9]:           call @1898 // <std#__srt_global.strtod>   
10 [0xa]:           loadval ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   
13 [0xd]:           jmp @104   
14 [0xe]: line: 234 istorel 0, fp+2   
16 [0x10]: line: 235 istorel 0, fp+3   
18 [0x12]: line: 236 pushl 0   
19 [0x13]:           call @3587 // <std#string.size>   
20 [0x14]:           ipopl 4   
21 [0x15]: line: 238 pushl 0   
22 [0x16]:           istore 0   
24 [0x18]:           call @3568 // <std#string.at>   
25 [0x19]:           loadval ebx   
26 [0x1a]:           rstore ebx   
27 [0x1b]:           movi #45, ebx   
29 [0x1d]:           loadval ecx   
30 [0x1e]:           test ecx, ebx   
31 [0x1f]:           movr ebx, cmt   
32 [0x20]:           movr cmt, ebx   
33 [0x21]:           jne 38   
34 [0x22]: line: 239 istorel 1, fp+3   
36 [0x24]: line: 240 istorel 1, fp+2   
38 [0x26]:           nop   
39 [0x27]: line: 243 ipushl #2   
40 [0x28]:           loadl ebx, fp+4   
41 [0x29]:           loadval ecx   
42 [0x2a]:           lt ecx, ebx   
43 [0x2b]:           movr ebx, cmt   
44 [0x2c]:           movr cmt, ebx   
45 [0x2d]:           jne 93   
46 [0x2e]: line: 244 pushl 0   
47 [0x2f]:           ipushl #2   
48 [0x30]:           call @3568 // <std#string.at>   
49 [0x31]:           call @3209 // <std#char.is_digit>   
50 [0x32]:           loadval ebx   
51 [0x33]:           not ebx, ebx   
52 [0x34]:           movr cmt, ebx   
53 [0x35]:           jne 68   
54 [0x36]: line: 245 new_class @4 // std#illegal_argument_exception   
56 [0x38]:           dup    
57 [0x39]:           new_class @75 // std#string   
59 [0x3b]:           dup    
60 [0x3c]:           newstr @561 // illegal char in string:    
61 [0x3d]:           call @3546 // <std#string.string>   
62 [0x3e]:           pushl 0   
63 [0x3f]:           ipushl #2   
64 [0x40]:           call @3568 // <std#string.at>   
65 [0x41]:           call @3579 // <std#string.operator+>   
66 [0x42]:           call @1962 // <std#illegal_argument_exception.illegal_argument_exception>   
67 [0x43]:           throw    
68 [0x44]:           nop   
69 [0x45]: line: 249 movi #10, ebx   
71 [0x47]:           loadl ecx, fp+1   
72 [0x48]:           mul ecx, ebx -> ebx   
73 [0x49]:           mov8 ebx, ebx   
74 [0x4a]:           smovr_2 ebx, fp+1   
75 [0x4b]: line: 250 pushl 0   
76 [0x4c]:           loadl ebx, fp+2   
77 [0x4d]:           movr egx, ebx   
78 [0x4e]:           inc ebx   
79 [0x4f]:           smovr_2 ebx, fp+2   
80 [0x50]:           rstore egx   
81 [0x51]:           call @3568 // <std#string.at>   
82 [0x52]:           loadval ebx   
83 [0x53]:           rstore ebx   
84 [0x54]:           movi #48, ebx   
86 [0x56]:           loadval ecx   
87 [0x57]:           sub ecx, ebx -> ebx   
88 [0x58]:           loadl ecx, fp+1   
89 [0x59]:           add ecx, ebx -> ebx   
90 [0x5a]:           mov8 ebx, ebx   
91 [0x5b]:           smovr_2 ebx, fp+1   
92 [0x5c]:           jmp @39   
93 [0x5d]: line: 252 loadl ebx, fp+3   
94 [0x5e]:           movr cmt, ebx   
95 [0x5f]:           jne 100   
96 [0x60]: line: 253 loadl ebx, fp+1   
97 [0x61]:           neg ebx, ebx   
98 [0x62]:           mov8 ebx, ebx   
99 [0x63]:           smovr_2 ebx, fp+1   
100 [0x64]:           nop   
101 [0x65]: line: 254 loadl ebx, fp+1   
102 [0x66]:           return_val ebx   
103 [0x67]:           ret   
104 [0x68]:           nop   


function: std#integer<_int8>.to_ulong[1674] params(0) in file: lib\support\/0.2.9//primitives.sharp:258:8: note:  
		    def to_ulong() := new ulong { value };
		       ^

0 [0x0]: line: 258 new_class @53 // std#ulong   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu64 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int8>.to_long[1675] params(0) in file: lib\support\/0.2.9//primitives.sharp:259:8: note:  
		    def to_long() := new long { value };
		       ^

0 [0x0]: line: 259 new_class @54 // std#long   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov64 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int8>.to_uint[1676] params(0) in file: lib\support\/0.2.9//primitives.sharp:260:8: note:  
		    def to_uint() := new uint { value };
		       ^

0 [0x0]: line: 260 new_class @55 // std#uint   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu32 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int8>.to_int[1677] params(0) in file: lib\support\/0.2.9//primitives.sharp:261:8: note:  
		    def to_int() := new int { value };
		       ^

0 [0x0]: line: 261 new_class @56 // std#int   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov32 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int8>.to_ushort[1678] params(0) in file: lib\support\/0.2.9//primitives.sharp:262:8: note:  
		    def to_ushort() := new ushort { value };
		       ^

0 [0x0]: line: 262 new_class @57 // std#ushort   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu16 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int8>.to_short[1679] params(0) in file: lib\support\/0.2.9//primitives.sharp:263:8: note:  
		    def to_short() := new short { value };
		       ^

0 [0x0]: line: 263 new_class @58 // std#short   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov16 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int8>.to_uchar[1680] params(0) in file: lib\support\/0.2.9//primitives.sharp:264:8: note:  
		    def to_uchar() := new uchar { value };
		       ^

0 [0x0]: line: 264 new_class @59 // std#uchar   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int8>.to_char[1681] params(0) in file: lib\support\/0.2.9//primitives.sharp:265:8: note:  
		    def to_char() := new char { value };
		       ^

0 [0x0]: line: 265 new_class @60 // std#char   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int8>.to_byte[1682] params(0) in file: lib\support\/0.2.9//primitives.sharp:266:8: note:  
		    def to_byte() := new byte { value };
		       ^

0 [0x0]: line: 266 new_class @61 // std#byte   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int8>.to_bool[1683] params(0) in file: lib\support\/0.2.9//primitives.sharp:267:8: note:  
		    def to_bool() := new bool { value };
		       ^

0 [0x0]: line: 267 new_class @62 // std#bool   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<_int8>.to_double[1684] params(0) in file: lib\support\/0.2.9//primitives.sharp:268:8: note:  
		    def to_double() := new double { value };
		       ^

0 [0x0]: line: 268 new_class @63 // std#double   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<_int8>.get_value[1685] params(0) in file: lib\support\/0.2.9//primitives.sharp:270:8: note:  
		    def get_value() := value;
		       ^

0 [0x0]: line: 270 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


constructor: std#integer<_int8>.integer[1686] params(0) in file: lib\support\/0.2.9//primitives.sharp:5:13: note:  
		public class integer<native_type> {
		            ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#integer<var>.integer[1687] params(1) in file: lib\support\/0.2.9//primitives.sharp:8:12: note:  
		    integer(initial_val : var) {
		           ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 9 ipushl #1   
2 [0x2]:         movl 0   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         movi #0, adx   
8 [0x8]:         rmov adx, ebx   
9 [0x9]:         ret   


function: std#integer<var>.hash[1688] params(0) in file: lib\support\/0.2.9//primitives.sharp:12:8: note:  
		    def hash() : _int64 {
		       ^

0 [0x0]: line: 13 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          return_val ebx   
7 [0x7]:          ret   


overload function: std#integer<var>.operator!=[1689] params(1) in file: lib\support\/0.2.9//primitives.sharp:16:8: note:  
		    def operator!=(num : ulong) := (value!=num.value);
		       ^

0 [0x0]: line: 16 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<var>.operator==[1690] params(1) in file: lib\support\/0.2.9//primitives.sharp:17:8: note:  
		    def operator==(num : ulong) := (value==num.value);
		       ^

0 [0x0]: line: 17 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<var>.operator!=[1691] params(1) in file: lib\support\/0.2.9//primitives.sharp:18:8: note:  
		    def operator!=(num : long) := (value!=num.value);
		       ^

0 [0x0]: line: 18 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<var>.operator==[1692] params(1) in file: lib\support\/0.2.9//primitives.sharp:19:8: note:  
		    def operator==(num : long) := (value==num.value);
		       ^

0 [0x0]: line: 19 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<var>.operator!=[1693] params(1) in file: lib\support\/0.2.9//primitives.sharp:20:8: note:  
		    def operator!=(num : uint) := (value!=num.value);
		       ^

0 [0x0]: line: 20 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<var>.operator==[1694] params(1) in file: lib\support\/0.2.9//primitives.sharp:21:8: note:  
		    def operator==(num : uint) := (value==num.value);
		       ^

0 [0x0]: line: 21 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<var>.operator!=[1695] params(1) in file: lib\support\/0.2.9//primitives.sharp:22:8: note:  
		    def operator!=(num : int) := (value!=num.value);
		       ^

0 [0x0]: line: 22 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<var>.operator==[1696] params(1) in file: lib\support\/0.2.9//primitives.sharp:23:8: note:  
		    def operator==(num : int) := (value==num.value);
		       ^

0 [0x0]: line: 23 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<var>.operator!=[1697] params(1) in file: lib\support\/0.2.9//primitives.sharp:24:8: note:  
		    def operator!=(num : ushort) := (value!=num.value);
		       ^

0 [0x0]: line: 24 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<var>.operator==[1698] params(1) in file: lib\support\/0.2.9//primitives.sharp:25:8: note:  
		    def operator==(num : ushort) := (value==num.value);
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<var>.operator!=[1699] params(1) in file: lib\support\/0.2.9//primitives.sharp:26:8: note:  
		    def operator!=(num : short) := (value!=num.value);
		       ^

0 [0x0]: line: 26 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<var>.operator==[1700] params(1) in file: lib\support\/0.2.9//primitives.sharp:27:8: note:  
		    def operator==(num : short) := (value==num.value);
		       ^

0 [0x0]: line: 27 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<var>.operator!=[1701] params(1) in file: lib\support\/0.2.9//primitives.sharp:28:8: note:  
		    def operator!=(num : uchar) := (value!=num.value);
		       ^

0 [0x0]: line: 28 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<var>.operator==[1702] params(1) in file: lib\support\/0.2.9//primitives.sharp:29:8: note:  
		    def operator==(num : uchar) := (value==num.value);
		       ^

0 [0x0]: line: 29 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<var>.operator!=[1703] params(1) in file: lib\support\/0.2.9//primitives.sharp:30:8: note:  
		    def operator!=(num : char) := (value!=num.value);
		       ^

0 [0x0]: line: 30 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<var>.operator==[1704] params(1) in file: lib\support\/0.2.9//primitives.sharp:31:8: note:  
		    def operator==(num : char) := (value==num.value);
		       ^

0 [0x0]: line: 31 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<var>.operator!=[1705] params(1) in file: lib\support\/0.2.9//primitives.sharp:32:8: note:  
		    def operator!=(num : byte) := (value!=num.value);
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<var>.operator==[1706] params(1) in file: lib\support\/0.2.9//primitives.sharp:33:8: note:  
		    def operator==(num : byte) := (value==num.value);
		       ^

0 [0x0]: line: 33 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<var>.operator!=[1707] params(1) in file: lib\support\/0.2.9//primitives.sharp:34:8: note:  
		    def operator!=(num : bool) := (value!=num.value);
		       ^

0 [0x0]: line: 34 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<var>.operator==[1708] params(1) in file: lib\support\/0.2.9//primitives.sharp:35:8: note:  
		    def operator==(num : bool) := (value==num.value);
		       ^

0 [0x0]: line: 35 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<var>.operator==[1709] params(1) in file: lib\support\/0.2.9//primitives.sharp:36:8: note:  
		    def operator==(num : double) := (value==num.value);
		       ^

0 [0x0]: line: 36 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#integer<var>.operator+[1710] params(1) in file: lib\support\/0.2.9//primitives.sharp:38:8: note:  
		    def operator+(num : ulong)  := (value+num.value);
		       ^

0 [0x0]: line: 38 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator+[1711] params(1) in file: lib\support\/0.2.9//primitives.sharp:39:8: note:  
		    def operator+(num : long)   := (value+num.value);
		       ^

0 [0x0]: line: 39 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator+[1712] params(1) in file: lib\support\/0.2.9//primitives.sharp:40:8: note:  
		    def operator+(num : uint)   := (value+num.value);
		       ^

0 [0x0]: line: 40 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator+[1713] params(1) in file: lib\support\/0.2.9//primitives.sharp:41:8: note:  
		    def operator+(num : int)    := (value+num.value);
		       ^

0 [0x0]: line: 41 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator+[1714] params(1) in file: lib\support\/0.2.9//primitives.sharp:42:8: note:  
		    def operator+(num : ushort) := (value+num.value);
		       ^

0 [0x0]: line: 42 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator+[1715] params(1) in file: lib\support\/0.2.9//primitives.sharp:43:8: note:  
		    def operator+(num : short)  := (value+num.value);
		       ^

0 [0x0]: line: 43 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator+[1716] params(1) in file: lib\support\/0.2.9//primitives.sharp:44:8: note:  
		    def operator+(num : uchar)  := (value+num.value);
		       ^

0 [0x0]: line: 44 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator+[1717] params(1) in file: lib\support\/0.2.9//primitives.sharp:45:8: note:  
		    def operator+(num : char)   := (value+num.value);
		       ^

0 [0x0]: line: 45 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator+[1718] params(1) in file: lib\support\/0.2.9//primitives.sharp:46:8: note:  
		    def operator+(num : byte)   := (value+num.value);
		       ^

0 [0x0]: line: 46 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator+[1719] params(1) in file: lib\support\/0.2.9//primitives.sharp:47:8: note:  
		    def operator+(num : bool)   := (value+num.value);
		       ^

0 [0x0]: line: 47 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator+[1720] params(1) in file: lib\support\/0.2.9//primitives.sharp:48:8: note:  
		    def operator+(num : double)   := (value+num.value);
		       ^

0 [0x0]: line: 48 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator+[1721] params(1) in file: lib\support\/0.2.9//primitives.sharp:49:8: note:  
		    def operator+(num : var)    := (value+num);
		       ^

0 [0x0]: line: 49 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          add ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<var>.operator-[1722] params(1) in file: lib\support\/0.2.9//primitives.sharp:51:8: note:  
		    def operator-(num : ulong)  := (value-num.value);
		       ^

0 [0x0]: line: 51 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator-[1723] params(1) in file: lib\support\/0.2.9//primitives.sharp:52:8: note:  
		    def operator-(num : long)   := (value-num.value);
		       ^

0 [0x0]: line: 52 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator-[1724] params(1) in file: lib\support\/0.2.9//primitives.sharp:53:8: note:  
		    def operator-(num : uint)   := (value-num.value);
		       ^

0 [0x0]: line: 53 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator-[1725] params(1) in file: lib\support\/0.2.9//primitives.sharp:54:8: note:  
		    def operator-(num : int)    := (value-num.value);
		       ^

0 [0x0]: line: 54 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator-[1726] params(1) in file: lib\support\/0.2.9//primitives.sharp:55:8: note:  
		    def operator-(num : ushort) := (value-num.value);
		       ^

0 [0x0]: line: 55 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator-[1727] params(1) in file: lib\support\/0.2.9//primitives.sharp:56:8: note:  
		    def operator-(num : short)  := (value-num.value);
		       ^

0 [0x0]: line: 56 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator-[1728] params(1) in file: lib\support\/0.2.9//primitives.sharp:57:8: note:  
		    def operator-(num : uchar)  := (value-num.value);
		       ^

0 [0x0]: line: 57 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator-[1729] params(1) in file: lib\support\/0.2.9//primitives.sharp:58:8: note:  
		    def operator-(num : char)   := (value-num.value);
		       ^

0 [0x0]: line: 58 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator-[1730] params(1) in file: lib\support\/0.2.9//primitives.sharp:59:8: note:  
		    def operator-(num : byte)   := (value-num.value);
		       ^

0 [0x0]: line: 59 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator-[1731] params(1) in file: lib\support\/0.2.9//primitives.sharp:60:8: note:  
		    def operator-(num : bool)   := (value-num.value);
		       ^

0 [0x0]: line: 60 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator-[1732] params(1) in file: lib\support\/0.2.9//primitives.sharp:61:8: note:  
		    def operator-(num : double)   := (value-num.value);
		       ^

0 [0x0]: line: 61 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          sub ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator-[1733] params(1) in file: lib\support\/0.2.9//primitives.sharp:62:8: note:  
		    def operator-(num : var)    := (value-num);
		       ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          sub ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<var>.operator*[1734] params(1) in file: lib\support\/0.2.9//primitives.sharp:64:8: note:  
		    def operator*(num : ulong)  := (value*num.value);
		       ^

0 [0x0]: line: 64 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator*[1735] params(1) in file: lib\support\/0.2.9//primitives.sharp:65:8: note:  
		    def operator*(num : long)   := (value*num.value);
		       ^

0 [0x0]: line: 65 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator*[1736] params(1) in file: lib\support\/0.2.9//primitives.sharp:66:8: note:  
		    def operator*(num : uint)   := (value*num.value);
		       ^

0 [0x0]: line: 66 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator*[1737] params(1) in file: lib\support\/0.2.9//primitives.sharp:67:8: note:  
		    def operator*(num : int)    := (value*num.value);
		       ^

0 [0x0]: line: 67 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator*[1738] params(1) in file: lib\support\/0.2.9//primitives.sharp:68:8: note:  
		    def operator*(num : ushort) := (value*num.value);
		       ^

0 [0x0]: line: 68 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator*[1739] params(1) in file: lib\support\/0.2.9//primitives.sharp:69:8: note:  
		    def operator*(num : short)  := (value*num.value);
		       ^

0 [0x0]: line: 69 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator*[1740] params(1) in file: lib\support\/0.2.9//primitives.sharp:70:8: note:  
		    def operator*(num : uchar)  := (value*num.value);
		       ^

0 [0x0]: line: 70 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator*[1741] params(1) in file: lib\support\/0.2.9//primitives.sharp:71:8: note:  
		    def operator*(num : char)   := (value*num.value);
		       ^

0 [0x0]: line: 71 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator*[1742] params(1) in file: lib\support\/0.2.9//primitives.sharp:72:8: note:  
		    def operator*(num : byte)   := (value*num.value);
		       ^

0 [0x0]: line: 72 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator*[1743] params(1) in file: lib\support\/0.2.9//primitives.sharp:73:8: note:  
		    def operator*(num : bool)   := (value*num.value);
		       ^

0 [0x0]: line: 73 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator*[1744] params(1) in file: lib\support\/0.2.9//primitives.sharp:74:8: note:  
		    def operator*(num : double)   := (value*num.value);
		       ^

0 [0x0]: line: 74 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mul ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator*[1745] params(1) in file: lib\support\/0.2.9//primitives.sharp:75:8: note:  
		    def operator*(num : var)    := (value*num);
		       ^

0 [0x0]: line: 75 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          mul ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<var>.operator/[1746] params(1) in file: lib\support\/0.2.9//primitives.sharp:77:8: note:  
		    def operator/(num : ulong)  := (value/num.value);
		       ^

0 [0x0]: line: 77 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator/[1747] params(1) in file: lib\support\/0.2.9//primitives.sharp:78:8: note:  
		    def operator/(num : long)   := (value/num.value);
		       ^

0 [0x0]: line: 78 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator/[1748] params(1) in file: lib\support\/0.2.9//primitives.sharp:79:8: note:  
		    def operator/(num : uint)   := (value/num.value);
		       ^

0 [0x0]: line: 79 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator/[1749] params(1) in file: lib\support\/0.2.9//primitives.sharp:80:8: note:  
		    def operator/(num : int)    := (value/num.value);
		       ^

0 [0x0]: line: 80 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator/[1750] params(1) in file: lib\support\/0.2.9//primitives.sharp:81:8: note:  
		    def operator/(num : ushort) := (value/num.value);
		       ^

0 [0x0]: line: 81 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator/[1751] params(1) in file: lib\support\/0.2.9//primitives.sharp:82:8: note:  
		    def operator/(num : short)  := (value/num.value);
		       ^

0 [0x0]: line: 82 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator/[1752] params(1) in file: lib\support\/0.2.9//primitives.sharp:83:8: note:  
		    def operator/(num : uchar)  := (value/num.value);
		       ^

0 [0x0]: line: 83 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator/[1753] params(1) in file: lib\support\/0.2.9//primitives.sharp:84:8: note:  
		    def operator/(num : char)   := (value/num.value);
		       ^

0 [0x0]: line: 84 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator/[1754] params(1) in file: lib\support\/0.2.9//primitives.sharp:85:8: note:  
		    def operator/(num : byte)   := (value/num.value);
		       ^

0 [0x0]: line: 85 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator/[1755] params(1) in file: lib\support\/0.2.9//primitives.sharp:86:8: note:  
		    def operator/(num : bool)   := (value/num.value);
		       ^

0 [0x0]: line: 86 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator/[1756] params(1) in file: lib\support\/0.2.9//primitives.sharp:87:8: note:  
		    def operator/(num : double)   := (value/num.value);
		       ^

0 [0x0]: line: 87 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          div ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator/[1757] params(1) in file: lib\support\/0.2.9//primitives.sharp:88:8: note:  
		    def operator/(num : var)    := (value/num);
		       ^

0 [0x0]: line: 88 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          div ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


overload function: std#integer<var>.operator%[1758] params(1) in file: lib\support\/0.2.9//primitives.sharp:90:8: note:  
		    def operator%(num : ulong)  := (value%num.value);
		       ^

0 [0x0]: line: 90 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator%[1759] params(1) in file: lib\support\/0.2.9//primitives.sharp:91:8: note:  
		    def operator%(num : long)   := (value%num.value);
		       ^

0 [0x0]: line: 91 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator%[1760] params(1) in file: lib\support\/0.2.9//primitives.sharp:92:8: note:  
		    def operator%(num : uint)   := (value%num.value);
		       ^

0 [0x0]: line: 92 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator%[1761] params(1) in file: lib\support\/0.2.9//primitives.sharp:93:8: note:  
		    def operator%(num : int)    := (value%num.value);
		       ^

0 [0x0]: line: 93 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator%[1762] params(1) in file: lib\support\/0.2.9//primitives.sharp:94:8: note:  
		    def operator%(num : ushort) := (value%num.value);
		       ^

0 [0x0]: line: 94 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator%[1763] params(1) in file: lib\support\/0.2.9//primitives.sharp:95:8: note:  
		    def operator%(num : short)  := (value%num.value);
		       ^

0 [0x0]: line: 95 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator%[1764] params(1) in file: lib\support\/0.2.9//primitives.sharp:96:8: note:  
		    def operator%(num : uchar)  := (value%num.value);
		       ^

0 [0x0]: line: 96 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator%[1765] params(1) in file: lib\support\/0.2.9//primitives.sharp:97:8: note:  
		    def operator%(num : char)   := (value%num.value);
		       ^

0 [0x0]: line: 97 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator%[1766] params(1) in file: lib\support\/0.2.9//primitives.sharp:98:8: note:  
		    def operator%(num : byte)   := (value%num.value);
		       ^

0 [0x0]: line: 98 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator%[1767] params(1) in file: lib\support\/0.2.9//primitives.sharp:99:8: note:  
		    def operator%(num : bool)   := (value%num.value);
		       ^

0 [0x0]: line: 99 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          mod ecx, ebx -> ebx   
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


overload function: std#integer<var>.operator%[1768] params(1) in file: lib\support\/0.2.9//primitives.sharp:100:8: note:  
		    def operator%(num : double)   := (value%num.value);
		       ^

0 [0x0]: line: 100 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator%[1769] params(1) in file: lib\support\/0.2.9//primitives.sharp:101:8: note:  
		    def operator%(num : var)    := (value%num);
		       ^

0 [0x0]: line: 101 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           mod ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<var>.operator<[1770] params(1) in file: lib\support\/0.2.9//primitives.sharp:103:8: note:  
		    def operator<(num : ulong)  := (value<num.value);
		       ^

0 [0x0]: line: 103 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<[1771] params(1) in file: lib\support\/0.2.9//primitives.sharp:104:8: note:  
		    def operator<(num : long)   := (value<num.value);
		       ^

0 [0x0]: line: 104 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<[1772] params(1) in file: lib\support\/0.2.9//primitives.sharp:105:8: note:  
		    def operator<(num : uint)   := (value<num.value);
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<[1773] params(1) in file: lib\support\/0.2.9//primitives.sharp:106:8: note:  
		    def operator<(num : int)    := (value<num.value);
		       ^

0 [0x0]: line: 106 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<[1774] params(1) in file: lib\support\/0.2.9//primitives.sharp:107:8: note:  
		    def operator<(num : ushort) := (value<num.value);
		       ^

0 [0x0]: line: 107 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<[1775] params(1) in file: lib\support\/0.2.9//primitives.sharp:108:8: note:  
		    def operator<(num : short)  := (value<num.value);
		       ^

0 [0x0]: line: 108 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<[1776] params(1) in file: lib\support\/0.2.9//primitives.sharp:109:8: note:  
		    def operator<(num : uchar)  := (value<num.value);
		       ^

0 [0x0]: line: 109 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<[1777] params(1) in file: lib\support\/0.2.9//primitives.sharp:110:8: note:  
		    def operator<(num : char)   := (value<num.value);
		       ^

0 [0x0]: line: 110 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<[1778] params(1) in file: lib\support\/0.2.9//primitives.sharp:111:8: note:  
		    def operator<(num : byte)   := (value<num.value);
		       ^

0 [0x0]: line: 111 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<[1779] params(1) in file: lib\support\/0.2.9//primitives.sharp:112:8: note:  
		    def operator<(num : bool)   := (value<num.value);
		       ^

0 [0x0]: line: 112 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<[1780] params(1) in file: lib\support\/0.2.9//primitives.sharp:113:8: note:  
		    def operator<(num : double)   := (value<num.value);
		       ^

0 [0x0]: line: 113 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<[1781] params(1) in file: lib\support\/0.2.9//primitives.sharp:114:8: note:  
		    def operator<(num : var)    := (value<num);
		       ^

0 [0x0]: line: 114 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           lt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<var>.operator>[1782] params(1) in file: lib\support\/0.2.9//primitives.sharp:116:8: note:  
		    def operator>(num : ulong)  := (value>num.value);
		       ^

0 [0x0]: line: 116 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator>[1783] params(1) in file: lib\support\/0.2.9//primitives.sharp:117:8: note:  
		    def operator>(num : long)   := (value>num.value);
		       ^

0 [0x0]: line: 117 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator>[1784] params(1) in file: lib\support\/0.2.9//primitives.sharp:118:8: note:  
		    def operator>(num : uint)   := (value>num.value);
		       ^

0 [0x0]: line: 118 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator>[1785] params(1) in file: lib\support\/0.2.9//primitives.sharp:119:8: note:  
		    def operator>(num : int)    := (value>num.value);
		       ^

0 [0x0]: line: 119 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator>[1786] params(1) in file: lib\support\/0.2.9//primitives.sharp:120:8: note:  
		    def operator>(num : ushort) := (value>num.value);
		       ^

0 [0x0]: line: 120 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator>[1787] params(1) in file: lib\support\/0.2.9//primitives.sharp:121:8: note:  
		    def operator>(num : short)  := (value>num.value);
		       ^

0 [0x0]: line: 121 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator>[1788] params(1) in file: lib\support\/0.2.9//primitives.sharp:122:8: note:  
		    def operator>(num : uchar)  := (value>num.value);
		       ^

0 [0x0]: line: 122 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator>[1789] params(1) in file: lib\support\/0.2.9//primitives.sharp:123:8: note:  
		    def operator>(num : char)   := (value>num.value);
		       ^

0 [0x0]: line: 123 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator>[1790] params(1) in file: lib\support\/0.2.9//primitives.sharp:124:8: note:  
		    def operator>(num : byte)   := (value>num.value);
		       ^

0 [0x0]: line: 124 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator>[1791] params(1) in file: lib\support\/0.2.9//primitives.sharp:125:8: note:  
		    def operator>(num : bool)   := (value>num.value);
		       ^

0 [0x0]: line: 125 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator>[1792] params(1) in file: lib\support\/0.2.9//primitives.sharp:126:8: note:  
		    def operator>(num : double)   := (value>num.value);
		       ^

0 [0x0]: line: 126 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gt ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator>[1793] params(1) in file: lib\support\/0.2.9//primitives.sharp:127:8: note:  
		    def operator>(num : var)    := (value>num);
		       ^

0 [0x0]: line: 127 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gt ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<var>.operator<=[1794] params(1) in file: lib\support\/0.2.9//primitives.sharp:129:8: note:  
		    def operator<=(num : ulong)  := (value>=num.value);
		       ^

0 [0x0]: line: 129 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<=[1795] params(1) in file: lib\support\/0.2.9//primitives.sharp:130:8: note:  
		    def operator<=(num : long)   := (value>=num.value);
		       ^

0 [0x0]: line: 130 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<=[1796] params(1) in file: lib\support\/0.2.9//primitives.sharp:131:8: note:  
		    def operator<=(num : uint)   := (value>=num.value);
		       ^

0 [0x0]: line: 131 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<=[1797] params(1) in file: lib\support\/0.2.9//primitives.sharp:132:8: note:  
		    def operator<=(num : int)    := (value>=num.value);
		       ^

0 [0x0]: line: 132 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<=[1798] params(1) in file: lib\support\/0.2.9//primitives.sharp:133:8: note:  
		    def operator<=(num : ushort) := (value>=num.value);
		       ^

0 [0x0]: line: 133 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<=[1799] params(1) in file: lib\support\/0.2.9//primitives.sharp:134:8: note:  
		    def operator<=(num : short)  := (value>=num.value);
		       ^

0 [0x0]: line: 134 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<=[1800] params(1) in file: lib\support\/0.2.9//primitives.sharp:135:8: note:  
		    def operator<=(num : uchar)  := (value>=num.value);
		       ^

0 [0x0]: line: 135 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<=[1801] params(1) in file: lib\support\/0.2.9//primitives.sharp:136:8: note:  
		    def operator<=(num : char)   := (value>=num.value);
		       ^

0 [0x0]: line: 136 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<=[1802] params(1) in file: lib\support\/0.2.9//primitives.sharp:137:8: note:  
		    def operator<=(num : byte)   := (value>=num.value);
		       ^

0 [0x0]: line: 137 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<=[1803] params(1) in file: lib\support\/0.2.9//primitives.sharp:138:8: note:  
		    def operator<=(num : bool)   := (value>=num.value);
		       ^

0 [0x0]: line: 138 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<=[1804] params(1) in file: lib\support\/0.2.9//primitives.sharp:139:8: note:  
		    def operator<=(num : double)   := (value>=num.value);
		       ^

0 [0x0]: line: 139 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<=[1805] params(1) in file: lib\support\/0.2.9//primitives.sharp:140:8: note:  
		    def operator<=(num : var)    := (value>=num);
		       ^

0 [0x0]: line: 140 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           gte ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<var>.operator**[1806] params(1) in file: lib\support\/0.2.9//primitives.sharp:142:8: note:  
		    def operator**(num : ulong)  := (value**num.value);
		       ^

0 [0x0]: line: 142 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator**[1807] params(1) in file: lib\support\/0.2.9//primitives.sharp:143:8: note:  
		    def operator**(num : long)   := (value**num.value);
		       ^

0 [0x0]: line: 143 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator**[1808] params(1) in file: lib\support\/0.2.9//primitives.sharp:144:8: note:  
		    def operator**(num : uint)   := (value**num.value);
		       ^

0 [0x0]: line: 144 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator**[1809] params(1) in file: lib\support\/0.2.9//primitives.sharp:145:8: note:  
		    def operator**(num : int)    := (value**num.value);
		       ^

0 [0x0]: line: 145 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator**[1810] params(1) in file: lib\support\/0.2.9//primitives.sharp:146:8: note:  
		    def operator**(num : ushort) := (value**num.value);
		       ^

0 [0x0]: line: 146 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator**[1811] params(1) in file: lib\support\/0.2.9//primitives.sharp:147:8: note:  
		    def operator**(num : short)  := (value**num.value);
		       ^

0 [0x0]: line: 147 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator**[1812] params(1) in file: lib\support\/0.2.9//primitives.sharp:148:8: note:  
		    def operator**(num : uchar)  := (value**num.value);
		       ^

0 [0x0]: line: 148 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator**[1813] params(1) in file: lib\support\/0.2.9//primitives.sharp:149:8: note:  
		    def operator**(num : char)   := (value**num.value);
		       ^

0 [0x0]: line: 149 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator**[1814] params(1) in file: lib\support\/0.2.9//primitives.sharp:150:8: note:  
		    def operator**(num : byte)   := (value**num.value);
		       ^

0 [0x0]: line: 150 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator**[1815] params(1) in file: lib\support\/0.2.9//primitives.sharp:151:8: note:  
		    def operator**(num : bool)   := (value**num.value);
		       ^

0 [0x0]: line: 151 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator**[1816] params(1) in file: lib\support\/0.2.9//primitives.sharp:152:8: note:  
		    def operator**(num : double)   := (value**num.value);
		       ^

0 [0x0]: line: 152 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           exp ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator**[1817] params(1) in file: lib\support\/0.2.9//primitives.sharp:153:8: note:  
		    def operator**(num : var)    := (value**num);
		       ^

0 [0x0]: line: 153 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           exp ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<var>.operator<<[1818] params(1) in file: lib\support\/0.2.9//primitives.sharp:155:8: note:  
		    def operator<<(num : ulong)  := (value<<num.value);
		       ^

0 [0x0]: line: 155 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<<[1819] params(1) in file: lib\support\/0.2.9//primitives.sharp:156:8: note:  
		    def operator<<(num : long)   := (value<<num.value);
		       ^

0 [0x0]: line: 156 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<<[1820] params(1) in file: lib\support\/0.2.9//primitives.sharp:157:8: note:  
		    def operator<<(num : uint)   := (value<<num.value);
		       ^

0 [0x0]: line: 157 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<<[1821] params(1) in file: lib\support\/0.2.9//primitives.sharp:158:8: note:  
		    def operator<<(num : int)    := (value<<num.value);
		       ^

0 [0x0]: line: 158 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<<[1822] params(1) in file: lib\support\/0.2.9//primitives.sharp:159:8: note:  
		    def operator<<(num : ushort) := (value<<num.value);
		       ^

0 [0x0]: line: 159 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<<[1823] params(1) in file: lib\support\/0.2.9//primitives.sharp:160:8: note:  
		    def operator<<(num : short)  := (value<<num.value);
		       ^

0 [0x0]: line: 160 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<<[1824] params(1) in file: lib\support\/0.2.9//primitives.sharp:161:8: note:  
		    def operator<<(num : uchar)  := (value<<num.value);
		       ^

0 [0x0]: line: 161 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<<[1825] params(1) in file: lib\support\/0.2.9//primitives.sharp:162:8: note:  
		    def operator<<(num : char)   := (value<<num.value);
		       ^

0 [0x0]: line: 162 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<<[1826] params(1) in file: lib\support\/0.2.9//primitives.sharp:163:8: note:  
		    def operator<<(num : byte)   := (value<<num.value);
		       ^

0 [0x0]: line: 163 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<<[1827] params(1) in file: lib\support\/0.2.9//primitives.sharp:164:8: note:  
		    def operator<<(num : bool)   := (value<<num.value);
		       ^

0 [0x0]: line: 164 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<<[1828] params(1) in file: lib\support\/0.2.9//primitives.sharp:165:8: note:  
		    def operator<<(num : double)   := (value<<num.value);
		       ^

0 [0x0]: line: 165 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shl ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator<<[1829] params(1) in file: lib\support\/0.2.9//primitives.sharp:166:8: note:  
		    def operator<<(num : var)    := (value<<num);
		       ^

0 [0x0]: line: 166 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shl ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<var>.operator>>[1830] params(1) in file: lib\support\/0.2.9//primitives.sharp:168:8: note:  
		    def operator>>(num : ulong)  := (value>>num.value);
		       ^

0 [0x0]: line: 168 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator>>[1831] params(1) in file: lib\support\/0.2.9//primitives.sharp:169:8: note:  
		    def operator>>(num : long)   := (value>>num.value);
		       ^

0 [0x0]: line: 169 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator>>[1832] params(1) in file: lib\support\/0.2.9//primitives.sharp:170:8: note:  
		    def operator>>(num : uint)   := (value>>num.value);
		       ^

0 [0x0]: line: 170 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator>>[1833] params(1) in file: lib\support\/0.2.9//primitives.sharp:171:8: note:  
		    def operator>>(num : int)    := (value>>num.value);
		       ^

0 [0x0]: line: 171 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator>>[1834] params(1) in file: lib\support\/0.2.9//primitives.sharp:172:8: note:  
		    def operator>>(num : ushort) := (value>>num.value);
		       ^

0 [0x0]: line: 172 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator>>[1835] params(1) in file: lib\support\/0.2.9//primitives.sharp:173:8: note:  
		    def operator>>(num : short)  := (value>>num.value);
		       ^

0 [0x0]: line: 173 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator>>[1836] params(1) in file: lib\support\/0.2.9//primitives.sharp:174:8: note:  
		    def operator>>(num : uchar)  := (value>>num.value);
		       ^

0 [0x0]: line: 174 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator>>[1837] params(1) in file: lib\support\/0.2.9//primitives.sharp:175:8: note:  
		    def operator>>(num : char)   := (value>>num.value);
		       ^

0 [0x0]: line: 175 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator>>[1838] params(1) in file: lib\support\/0.2.9//primitives.sharp:176:8: note:  
		    def operator>>(num : byte)   := (value>>num.value);
		       ^

0 [0x0]: line: 176 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator>>[1839] params(1) in file: lib\support\/0.2.9//primitives.sharp:177:8: note:  
		    def operator>>(num : bool)   := (value>>num.value);
		       ^

0 [0x0]: line: 177 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator>>[1840] params(1) in file: lib\support\/0.2.9//primitives.sharp:178:8: note:  
		    def operator>>(num : double)   := (value>>num.value);
		       ^

0 [0x0]: line: 178 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           shr ecx, ebx -> ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator>>[1841] params(1) in file: lib\support\/0.2.9//primitives.sharp:179:8: note:  
		    def operator>>(num : var)    := (value>>num);
		       ^

0 [0x0]: line: 179 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           shr ecx, ebx -> ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<var>.operator^[1842] params(1) in file: lib\support\/0.2.9//primitives.sharp:181:8: note:  
		    def operator^(num : ulong)  := (value^num.value);
		       ^

0 [0x0]: line: 181 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator^[1843] params(1) in file: lib\support\/0.2.9//primitives.sharp:182:8: note:  
		    def operator^(num : long)   := (value^num.value);
		       ^

0 [0x0]: line: 182 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator^[1844] params(1) in file: lib\support\/0.2.9//primitives.sharp:183:8: note:  
		    def operator^(num : uint)   := (value^num.value);
		       ^

0 [0x0]: line: 183 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator^[1845] params(1) in file: lib\support\/0.2.9//primitives.sharp:184:8: note:  
		    def operator^(num : int)    := (value^num.value);
		       ^

0 [0x0]: line: 184 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator^[1846] params(1) in file: lib\support\/0.2.9//primitives.sharp:185:8: note:  
		    def operator^(num : ushort) := (value^num.value);
		       ^

0 [0x0]: line: 185 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator^[1847] params(1) in file: lib\support\/0.2.9//primitives.sharp:186:8: note:  
		    def operator^(num : short)  := (value^num.value);
		       ^

0 [0x0]: line: 186 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator^[1848] params(1) in file: lib\support\/0.2.9//primitives.sharp:187:8: note:  
		    def operator^(num : uchar)  := (value^num.value);
		       ^

0 [0x0]: line: 187 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator^[1849] params(1) in file: lib\support\/0.2.9//primitives.sharp:188:8: note:  
		    def operator^(num : char)   := (value^num.value);
		       ^

0 [0x0]: line: 188 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator^[1850] params(1) in file: lib\support\/0.2.9//primitives.sharp:189:8: note:  
		    def operator^(num : byte)   := (value^num.value);
		       ^

0 [0x0]: line: 189 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator^[1851] params(1) in file: lib\support\/0.2.9//primitives.sharp:190:8: note:  
		    def operator^(num : bool)   := (value^num.value);
		       ^

0 [0x0]: line: 190 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator^[1852] params(1) in file: lib\support\/0.2.9//primitives.sharp:191:8: note:  
		    def operator^(num : double)   := (value^num.value);
		       ^

0 [0x0]: line: 191 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           xor ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator^[1853] params(1) in file: lib\support\/0.2.9//primitives.sharp:192:8: note:  
		    def operator^(num : var)    := (value^num);
		       ^

0 [0x0]: line: 192 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           xor ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<var>.operator&[1854] params(1) in file: lib\support\/0.2.9//primitives.sharp:194:8: note:  
		    def operator&(num : ulong)  := (value&num.value);
		       ^

0 [0x0]: line: 194 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator&[1855] params(1) in file: lib\support\/0.2.9//primitives.sharp:195:8: note:  
		    def operator&(num : long)   := (value&num.value);
		       ^

0 [0x0]: line: 195 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator&[1856] params(1) in file: lib\support\/0.2.9//primitives.sharp:196:8: note:  
		    def operator&(num : uint)   := (value&num.value);
		       ^

0 [0x0]: line: 196 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator&[1857] params(1) in file: lib\support\/0.2.9//primitives.sharp:197:8: note:  
		    def operator&(num : int)    := (value&num.value);
		       ^

0 [0x0]: line: 197 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator&[1858] params(1) in file: lib\support\/0.2.9//primitives.sharp:198:8: note:  
		    def operator&(num : ushort) := (value&num.value);
		       ^

0 [0x0]: line: 198 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator&[1859] params(1) in file: lib\support\/0.2.9//primitives.sharp:199:8: note:  
		    def operator&(num : short)  := (value&num.value);
		       ^

0 [0x0]: line: 199 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator&[1860] params(1) in file: lib\support\/0.2.9//primitives.sharp:200:8: note:  
		    def operator&(num : uchar)  := (value&num.value);
		       ^

0 [0x0]: line: 200 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator&[1861] params(1) in file: lib\support\/0.2.9//primitives.sharp:201:8: note:  
		    def operator&(num : char)   := (value&num.value);
		       ^

0 [0x0]: line: 201 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator&[1862] params(1) in file: lib\support\/0.2.9//primitives.sharp:202:8: note:  
		    def operator&(num : byte)   := (value&num.value);
		       ^

0 [0x0]: line: 202 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator&[1863] params(1) in file: lib\support\/0.2.9//primitives.sharp:203:8: note:  
		    def operator&(num : bool)   := (value&num.value);
		       ^

0 [0x0]: line: 203 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator&[1864] params(1) in file: lib\support\/0.2.9//primitives.sharp:204:8: note:  
		    def operator&(num : double)   := (value&num.value);
		       ^

0 [0x0]: line: 204 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           uand ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator&[1865] params(1) in file: lib\support\/0.2.9//primitives.sharp:205:8: note:  
		    def operator&(num : var)    := (value&num);
		       ^

0 [0x0]: line: 205 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           uand ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<var>.operator|[1866] params(1) in file: lib\support\/0.2.9//primitives.sharp:207:8: note:  
		    def operator|(num : ulong)  := (value|num.value);
		       ^

0 [0x0]: line: 207 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator|[1867] params(1) in file: lib\support\/0.2.9//primitives.sharp:208:8: note:  
		    def operator|(num : long)   := (value|num.value);
		       ^

0 [0x0]: line: 208 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator|[1868] params(1) in file: lib\support\/0.2.9//primitives.sharp:209:8: note:  
		    def operator|(num : uint)   := (value|num.value);
		       ^

0 [0x0]: line: 209 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator|[1869] params(1) in file: lib\support\/0.2.9//primitives.sharp:210:8: note:  
		    def operator|(num : int)    := (value|num.value);
		       ^

0 [0x0]: line: 210 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator|[1870] params(1) in file: lib\support\/0.2.9//primitives.sharp:211:8: note:  
		    def operator|(num : ushort) := (value|num.value);
		       ^

0 [0x0]: line: 211 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator|[1871] params(1) in file: lib\support\/0.2.9//primitives.sharp:212:8: note:  
		    def operator|(num : short)  := (value|num.value);
		       ^

0 [0x0]: line: 212 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator|[1872] params(1) in file: lib\support\/0.2.9//primitives.sharp:213:8: note:  
		    def operator|(num : uchar)  := (value|num.value);
		       ^

0 [0x0]: line: 213 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator|[1873] params(1) in file: lib\support\/0.2.9//primitives.sharp:214:8: note:  
		    def operator|(num : char)   := (value|num.value);
		       ^

0 [0x0]: line: 214 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator|[1874] params(1) in file: lib\support\/0.2.9//primitives.sharp:215:8: note:  
		    def operator|(num : byte)   := (value|num.value);
		       ^

0 [0x0]: line: 215 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator|[1875] params(1) in file: lib\support\/0.2.9//primitives.sharp:216:8: note:  
		    def operator|(num : bool)   := (value|num.value);
		       ^

0 [0x0]: line: 216 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator|[1876] params(1) in file: lib\support\/0.2.9//primitives.sharp:217:8: note:  
		    def operator|(num : double)   := (value|num.value);
		       ^

0 [0x0]: line: 217 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           return_val ebx   
16 [0x10]:           ret   


overload function: std#integer<var>.operator|[1877] params(1) in file: lib\support\/0.2.9//primitives.sharp:218:8: note:  
		    def operator|(num : var)    := (value|num);
		       ^

0 [0x0]: line: 218 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           or ecx, ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


overload function: std#integer<var>.operator!=[1878] params(1) in file: lib\support\/0.2.9//primitives.sharp:220:8: note:  
		    def operator!=(num : var) := value!=num;
		       ^

0 [0x0]: line: 220 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           tne ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<var>.operator==[1879] params(1) in file: lib\support\/0.2.9//primitives.sharp:221:8: note:  
		    def operator==(num : var) := value==num;
		       ^

0 [0x0]: line: 221 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           test ecx, ebx   
10 [0xa]:           return_val cmt   
11 [0xb]:           ret   


overload function: std#integer<var>.operator=[1880] params(1) in file: lib\support\/0.2.9//primitives.sharp:222:8: note:  
		    def operator=(num : var) := value=num;
		       ^

0 [0x0]: line: 222 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           loadval ebx   
5 [0x5]:           movi #0, adx   
7 [0x7]:           rmov adx, ebx   
8 [0x8]:           returnobj   
9 [0x9]:           ret   


function: std#integer<var>.to_string[1881] params(0) in file: lib\support\/0.2.9//primitives.sharp:224:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 225 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           newstr @55 //    
4 [0x4]:           call @3546 // <std#string.string>   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           rstore ebx   
12 [0xc]:           call @3578 // <std#string.operator+>   
13 [0xd]:           popobj2    
14 [0xe]:           returnobj   
15 [0xf]:           ret   


function: std#integer<var>.parse[1882] params(1) in file: lib\support\/0.2.9//primitives.sharp:228:15: note:  
		    static def parse(s: string) : native_type {
		              ^

0 [0x0]: line: 229 istorel 0, fp+1   
2 [0x2]: line: 231 movi #1, ebx   
4 [0x4]:           movr cmt, ebx   
5 [0x5]:           jne 12   
6 [0x6]: line: 232 pushl 0   
7 [0x7]:           call @1898 // <std#__srt_global.strtod>   
8 [0x8]:           loadval ebx   
9 [0x9]:           return_val ebx   
10 [0xa]:           ret   
11 [0xb]:           jmp @95   
12 [0xc]: line: 234 istorel 0, fp+2   
14 [0xe]: line: 235 istorel 0, fp+3   
16 [0x10]: line: 236 pushl 0   
17 [0x11]:           call @3587 // <std#string.size>   
18 [0x12]:           ipopl 4   
19 [0x13]: line: 238 pushl 0   
20 [0x14]:           istore 0   
22 [0x16]:           call @3568 // <std#string.at>   
23 [0x17]:           loadval ebx   
24 [0x18]:           rstore ebx   
25 [0x19]:           movi #45, ebx   
27 [0x1b]:           loadval ecx   
28 [0x1c]:           test ecx, ebx   
29 [0x1d]:           movr ebx, cmt   
30 [0x1e]:           movr cmt, ebx   
31 [0x1f]:           jne 36   
32 [0x20]: line: 239 istorel 1, fp+3   
34 [0x22]: line: 240 istorel 1, fp+2   
36 [0x24]:           nop   
37 [0x25]: line: 243 ipushl #2   
38 [0x26]:           loadl ebx, fp+4   
39 [0x27]:           loadval ecx   
40 [0x28]:           lt ecx, ebx   
41 [0x29]:           movr ebx, cmt   
42 [0x2a]:           movr cmt, ebx   
43 [0x2b]:           jne 85   
44 [0x2c]: line: 244 pushl 0   
45 [0x2d]:           ipushl #2   
46 [0x2e]:           call @3568 // <std#string.at>   
47 [0x2f]:           call @3209 // <std#char.is_digit>   
48 [0x30]:           loadval ebx   
49 [0x31]:           not ebx, ebx   
50 [0x32]:           movr cmt, ebx   
51 [0x33]:           jne 66   
52 [0x34]: line: 245 new_class @4 // std#illegal_argument_exception   
54 [0x36]:           dup    
55 [0x37]:           new_class @75 // std#string   
57 [0x39]:           dup    
58 [0x3a]:           newstr @561 // illegal char in string:    
59 [0x3b]:           call @3546 // <std#string.string>   
60 [0x3c]:           pushl 0   
61 [0x3d]:           ipushl #2   
62 [0x3e]:           call @3568 // <std#string.at>   
63 [0x3f]:           call @3579 // <std#string.operator+>   
64 [0x40]:           call @1962 // <std#illegal_argument_exception.illegal_argument_exception>   
65 [0x41]:           throw    
66 [0x42]:           nop   
67 [0x43]: line: 249 movi #10, ebx   
69 [0x45]:           mull ebx, fp@1   
70 [0x46]: line: 250 pushl 0   
71 [0x47]:           loadl ebx, fp+2   
72 [0x48]:           movr egx, ebx   
73 [0x49]:           inc ebx   
74 [0x4a]:           smovr_2 ebx, fp+2   
75 [0x4b]:           rstore egx   
76 [0x4c]:           call @3568 // <std#string.at>   
77 [0x4d]:           loadval ebx   
78 [0x4e]:           rstore ebx   
79 [0x4f]:           movi #48, ebx   
81 [0x51]:           loadval ecx   
82 [0x52]:           sub ecx, ebx -> ebx   
83 [0x53]:           addl ebx, fp@1   
84 [0x54]:           jmp @37   
85 [0x55]: line: 252 loadl ebx, fp+3   
86 [0x56]:           movr cmt, ebx   
87 [0x57]:           jne 91   
88 [0x58]: line: 253 loadl ebx, fp+1   
89 [0x59]:           neg ebx, ebx   
90 [0x5a]:           smovr_2 ebx, fp+1   
91 [0x5b]:           nop   
92 [0x5c]: line: 254 loadl ebx, fp+1   
93 [0x5d]:           return_val ebx   
94 [0x5e]:           ret   
95 [0x5f]:           nop   


function: std#integer<var>.to_ulong[1883] params(0) in file: lib\support\/0.2.9//primitives.sharp:258:8: note:  
		    def to_ulong() := new ulong { value };
		       ^

0 [0x0]: line: 258 new_class @53 // std#ulong   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu64 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<var>.to_long[1884] params(0) in file: lib\support\/0.2.9//primitives.sharp:259:8: note:  
		    def to_long() := new long { value };
		       ^

0 [0x0]: line: 259 new_class @54 // std#long   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov64 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<var>.to_uint[1885] params(0) in file: lib\support\/0.2.9//primitives.sharp:260:8: note:  
		    def to_uint() := new uint { value };
		       ^

0 [0x0]: line: 260 new_class @55 // std#uint   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu32 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<var>.to_int[1886] params(0) in file: lib\support\/0.2.9//primitives.sharp:261:8: note:  
		    def to_int() := new int { value };
		       ^

0 [0x0]: line: 261 new_class @56 // std#int   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov32 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<var>.to_ushort[1887] params(0) in file: lib\support\/0.2.9//primitives.sharp:262:8: note:  
		    def to_ushort() := new ushort { value };
		       ^

0 [0x0]: line: 262 new_class @57 // std#ushort   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu16 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<var>.to_short[1888] params(0) in file: lib\support\/0.2.9//primitives.sharp:263:8: note:  
		    def to_short() := new short { value };
		       ^

0 [0x0]: line: 263 new_class @58 // std#short   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov16 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<var>.to_uchar[1889] params(0) in file: lib\support\/0.2.9//primitives.sharp:264:8: note:  
		    def to_uchar() := new uchar { value };
		       ^

0 [0x0]: line: 264 new_class @59 // std#uchar   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<var>.to_char[1890] params(0) in file: lib\support\/0.2.9//primitives.sharp:265:8: note:  
		    def to_char() := new char { value };
		       ^

0 [0x0]: line: 265 new_class @60 // std#char   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<var>.to_byte[1891] params(0) in file: lib\support\/0.2.9//primitives.sharp:266:8: note:  
		    def to_byte() := new byte { value };
		       ^

0 [0x0]: line: 266 new_class @61 // std#byte   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movu8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<var>.to_bool[1892] params(0) in file: lib\support\/0.2.9//primitives.sharp:267:8: note:  
		    def to_bool() := new bool { value };
		       ^

0 [0x0]: line: 267 new_class @62 // std#bool   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           mov8 ebx, ebx   
9 [0x9]:           movsl #0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           chklen adx   
15 [0xf]:           rmov adx, ebx   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std#integer<var>.to_double[1893] params(0) in file: lib\support\/0.2.9//primitives.sharp:268:8: note:  
		    def to_double() := new double { value };
		       ^

0 [0x0]: line: 268 new_class @63 // std#double   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           movsl #0   
9 [0x9]:           movn #0   
11 [0xb]:           movi #0, adx   
13 [0xd]:           chklen adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]:           popobj2    
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#integer<var>.get_value[1894] params(0) in file: lib\support\/0.2.9//primitives.sharp:270:8: note:  
		    def get_value() := value;
		       ^

0 [0x0]: line: 270 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


constructor: std#integer<var>.integer[1895] params(0) in file: lib\support\/0.2.9//primitives.sharp:5:13: note:  
		public class integer<native_type> {
		            ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


std#loopable<_int8>.get_elements[1896] params(0) in file: lib\support\/0.2.9//loopable.sharp:4:8: note:  
		    def get_elements() : t[];
		       ^



constructor: std#loopable<_int8>.loopable[1897] params(0) in file: lib\support\/0.2.9//loopable.sharp:3:10: note:  
		interface loopable<t> {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


function: std#__srt_global.strtod[1898] params(1) in file: lib\support\/0.2.9//console.sharp:5:4: note:  
		def strtod(str: string) : var {
		   ^

0 [0x0]: line: 6 pushl 0   
1 [0x1]:         call @3572 // <std#string.get_data>   
2 [0x2]:         popobj2    
3 [0x3]:         smovr_3 fp+1   
4 [0x4]: line: 7 istorel 0, fp+2   
6 [0x6]: line: 9 pushl 1   : protected asm start
7 [0x7]:         int 0x43   
8 [0x8]:         smovr_2 ebx, fp+2   
9 [0x9]: line: 15 loadl ebx, fp+2   : protected asm end
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


function: std#__srt_global.snprintf[1899] params(3) in file: lib\support\/0.2.9//console.sharp:18:4: note:  
		def snprintf(fmt: var, num: var, precision: var) : var[] {
		   ^

0 [0x0]: line: 19 loadl egx, fp+0   : protected asm start
1 [0x1]:          loadl ebx, fp+1   
2 [0x2]:          loadl ecx, fp+2   
3 [0x3]:          int 0x1   
4 [0x4]:          popobj2    
5 [0x5]:          returnobj   
6 [0x6]:          ret   
7 [0x7]: line: 28 pushnull    : protected asm end
8 [0x8]:          popobj2    
9 [0x9]:          returnobj   
10 [0xa]:          ret   


function: std#__srt_global.sys[1900] params(1) in file: lib\support\/0.2.9//console.sharp:31:4: note:  
		def sys(str: string) : var {
		   ^

0 [0x0]: line: 32 pushl 0   
1 [0x1]:          call @3572 // <std#string.get_data>   
2 [0x2]:          popobj2    
3 [0x3]:          smovr_3 fp+1   
4 [0x4]: line: 33 istorel 0, fp+2   
6 [0x6]: line: 34 pushl 1   : protected asm start
7 [0x7]:          int 0x1a   
8 [0x8]:          smovr_2 cmt, fp+2   
9 [0x9]: line: 40 loadl ebx, fp+2   : protected asm end
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


function: std#__srt_global.print[1901] params(1) in file: lib\support\/0.2.9//console.sharp:43:4: note:  
		def print(data: _int8[]) {
		   ^

0 [0x0]: line: 44 pushl 0   
1 [0x1]:          call @1930 // <std#__srt_global.print_chars>   
2 [0x2]:          ret   


function: std#__srt_global.print[1902] params(1) in file: lib\support\/0.2.9//console.sharp:47:4: note:  
		def print(str: string) {
		   ^

0 [0x0]: line: 48 pushl 0   
1 [0x1]:          call @3572 // <std#string.get_data>   
2 [0x2]:          call @1930 // <std#__srt_global.print_chars>   
3 [0x3]:          ret   


function: std#__srt_global.println[1903] params(1) in file: lib\support\/0.2.9//console.sharp:51:4: note:  
		def println(data: var[]) {
		   ^

0 [0x0]: line: 52 pushl 0   
1 [0x1]:          call @1933 // <std#__srt_global.print_numbers>   
2 [0x2]: line: 53 istore 10   
4 [0x4]:          call @1932 // <std#__srt_global.print_char>   
5 [0x5]:          ret   


function: std#__srt_global.println[1904] params(1) in file: lib\support\/0.2.9//console.sharp:56:4: note:  
		def println(data: _int8[]) {
		   ^

0 [0x0]: line: 57 pushl 0   
1 [0x1]:          call @1930 // <std#__srt_global.print_chars>   
2 [0x2]: line: 58 istore 10   
4 [0x4]:          call @1932 // <std#__srt_global.print_char>   
5 [0x5]:          ret   


function: std#__srt_global.println[1905] params(1) in file: lib\support\/0.2.9//console.sharp:61:4: note:  
		def println(data: _int16[]) {
		   ^

0 [0x0]: line: 62 pushl 0   
1 [0x1]:          call @1934 // <std#__srt_global.print_numbers>   
2 [0x2]: line: 63 istore 10   
4 [0x4]:          call @1932 // <std#__srt_global.print_char>   
5 [0x5]:          ret   


function: std#__srt_global.println[1906] params(1) in file: lib\support\/0.2.9//console.sharp:66:4: note:  
		def println(data: _int32[]) {
		   ^

0 [0x0]: line: 67 pushl 0   
1 [0x1]:          call @1935 // <std#__srt_global.print_numbers>   
2 [0x2]: line: 68 istore 10   
4 [0x4]:          call @1932 // <std#__srt_global.print_char>   
5 [0x5]:          ret   


function: std#__srt_global.println[1907] params(1) in file: lib\support\/0.2.9//console.sharp:71:4: note:  
		def println(data: _int64[]) {
		   ^

0 [0x0]: line: 72 pushl 0   
1 [0x1]:          call @1936 // <std#__srt_global.print_numbers>   
2 [0x2]: line: 73 istore 10   
4 [0x4]:          call @1932 // <std#__srt_global.print_char>   
5 [0x5]:          ret   


function: std#__srt_global.println[1908] params(1) in file: lib\support\/0.2.9//console.sharp:76:4: note:  
		def println(data: _uint8[]) {
		   ^

0 [0x0]: line: 77 pushl 0   
1 [0x1]:          call @1937 // <std#__srt_global.print_numbers>   
2 [0x2]: line: 78 istore 10   
4 [0x4]:          call @1932 // <std#__srt_global.print_char>   
5 [0x5]:          ret   


function: std#__srt_global.println[1909] params(1) in file: lib\support\/0.2.9//console.sharp:81:4: note:  
		def println(data: _uint16[]) {
		   ^

0 [0x0]: line: 82 pushl 0   
1 [0x1]:          call @1938 // <std#__srt_global.print_numbers>   
2 [0x2]: line: 83 istore 10   
4 [0x4]:          call @1932 // <std#__srt_global.print_char>   
5 [0x5]:          ret   


function: std#__srt_global.println[1910] params(1) in file: lib\support\/0.2.9//console.sharp:86:4: note:  
		def println(data: _uint32[]) {
		   ^

0 [0x0]: line: 87 pushl 0   
1 [0x1]:          call @1939 // <std#__srt_global.print_numbers>   
2 [0x2]: line: 88 istore 10   
4 [0x4]:          call @1932 // <std#__srt_global.print_char>   
5 [0x5]:          ret   


function: std#__srt_global.println[1911] params(1) in file: lib\support\/0.2.9//console.sharp:91:4: note:  
		def println(data: _uint64[]) {
		   ^

0 [0x0]: line: 92 pushl 0   
1 [0x1]:          call @1940 // <std#__srt_global.print_numbers>   
2 [0x2]: line: 93 istore 10   
4 [0x4]:          call @1932 // <std#__srt_global.print_char>   
5 [0x5]:          ret   


function: std#__srt_global.println[1912] params(1) in file: lib\support\/0.2.9//console.sharp:96:4: note:  
		def println(data: var) {
		   ^

0 [0x0]: line: 97 ipushl #0   
1 [0x1]:          call @1931 // <std#__srt_global.print_num>   
2 [0x2]: line: 98 istore 10   
4 [0x4]:          call @1932 // <std#__srt_global.print_char>   
5 [0x5]:          ret   


function: std#__srt_global.println[1913] params(0) in file: lib\support\/0.2.9//console.sharp:101:4: note:  
		def println() {
		   ^

0 [0x0]: line: 102 istore 10   
2 [0x2]:           call @1932 // <std#__srt_global.print_char>   
3 [0x3]:           ret   


function: std#__srt_global.println[1914] params(1) in file: lib\support\/0.2.9//console.sharp:105:4: note:  
		def println(e: _enum_) {
		   ^

0 [0x0]: line: 106 pushl 0   
1 [0x1]:           call @1949 // <std#_enum_.get_name>   
2 [0x2]:           call @1930 // <std#__srt_global.print_chars>   
3 [0x3]: line: 107 istore 10   
5 [0x5]:           call @1932 // <std#__srt_global.print_char>   
6 [0x6]:           ret   


function: std#__srt_global.read_line[1915] params(0) in file: lib\support\/0.2.9//console.sharp:110:4: note:  
		def read_line() : string {
		   ^

0 [0x0]: line: 111 istorel 0, fp+0   
2 [0x2]: line: 112 new_class @75 // std#string   
4 [0x4]:           dup    
5 [0x5]:           newstr @55 //    
6 [0x6]:           call @3546 // <std#string.string>   
7 [0x7]:           popobj2    
8 [0x8]:           smovr_3 fp+1   
9 [0x9]: line: 114 call @1917 // <std#__srt_global.read_char>   
10 [0xa]:           loadval ebx   
11 [0xb]:           mov8 ebx, ebx   
12 [0xc]:           smovr_2 ebx, fp+0   
13 [0xd]: line: 115 ipushl #0   
14 [0xe]:           movi #13, ebx   
16 [0x10]:           loadval ecx   
17 [0x11]:           tne ecx, ebx   
18 [0x12]:           movr ebx, cmt   
19 [0x13]:           skne ebx // pc = 26   
20 [0x14]:           ipushl #0   
21 [0x15]:           movi #10, ebx   
23 [0x17]:           loadval ecx   
24 [0x18]:           tne ecx, ebx   
25 [0x19]:           movr ebx, cmt   
26 [0x1a]:           movr cmt, ebx   
27 [0x1b]:           jne 37   
28 [0x1c]: line: 116 pushl 1   
29 [0x1d]:           ipushl #0   
30 [0x1e]:           call @3553 // <std#string.append>   
31 [0x1f]:           pop   
32 [0x20]: line: 117 call @1917 // <std#__srt_global.read_char>   
33 [0x21]:           loadval ebx   
34 [0x22]:           mov8 ebx, ebx   
35 [0x23]:           smovr_2 ebx, fp+0   
36 [0x24]:           jmp @13   
37 [0x25]: line: 120 movl 1   
38 [0x26]:           returnobj   
39 [0x27]:           ret   


function: std#__srt_global.read_passwd[1916] params(0) in file: lib\support\/0.2.9//console.sharp:123:4: note:  
		def read_passwd() : string {
		   ^

0 [0x0]: line: 124 istorel 0, fp+0   
2 [0x2]: line: 125 new_class @75 // std#string   
4 [0x4]:           dup    
5 [0x5]:           newstr @55 //    
6 [0x6]:           call @3546 // <std#string.string>   
7 [0x7]:           popobj2    
8 [0x8]:           smovr_3 fp+1   
9 [0x9]: line: 127 call @1918 // <std#__srt_global.read_raw_char>   
10 [0xa]:           loadval ebx   
11 [0xb]:           mov8 ebx, ebx   
12 [0xc]:           smovr_2 ebx, fp+0   
13 [0xd]: line: 128 ipushl #0   
14 [0xe]:           movi #13, ebx   
16 [0x10]:           loadval ecx   
17 [0x11]:           tne ecx, ebx   
18 [0x12]:           movr ebx, cmt   
19 [0x13]:           skne ebx // pc = 26   
20 [0x14]:           ipushl #0   
21 [0x15]:           movi #10, ebx   
23 [0x17]:           loadval ecx   
24 [0x18]:           tne ecx, ebx   
25 [0x19]:           movr ebx, cmt   
26 [0x1a]:           movr cmt, ebx   
27 [0x1b]:           jne 37   
28 [0x1c]: line: 129 pushl 1   
29 [0x1d]:           ipushl #0   
30 [0x1e]:           call @3553 // <std#string.append>   
31 [0x1f]:           pop   
32 [0x20]: line: 130 call @1918 // <std#__srt_global.read_raw_char>   
33 [0x21]:           loadval ebx   
34 [0x22]:           mov8 ebx, ebx   
35 [0x23]:           smovr_2 ebx, fp+0   
36 [0x24]:           jmp @13   
37 [0x25]: line: 133 movl 1   
38 [0x26]:           returnobj   
39 [0x27]:           ret   


function: std#__srt_global.read_char[1917] params(0) in file: lib\support\/0.2.9//console.sharp:136:4: note:  
		def read_char() : var {
		   ^

0 [0x0]: line: 137 istore 0   
2 [0x2]:           call @1942 // <std#__srt_global.read_ch>   
3 [0x3]:           loadval ebx   
4 [0x4]:           return_val ebx   
5 [0x5]:           ret   


function: std#__srt_global.read_raw_char[1918] params(0) in file: lib\support\/0.2.9//console.sharp:140:4: note:  
		def read_raw_char() : var {
		   ^

0 [0x0]: line: 141 istore 1   
2 [0x2]:           call @1942 // <std#__srt_global.read_ch>   
3 [0x3]:           loadval ebx   
4 [0x4]:           return_val ebx   
5 [0x5]:           ret   


function: std#__srt_global.println[1919] params(1) in file: lib\support\/0.2.9//console.sharp:144:4: note:  
		def println(str: string) {
		   ^

0 [0x0]: line: 145 pushl 0   
1 [0x1]:           call @3572 // <std#string.get_data>   
2 [0x2]:           call @1930 // <std#__srt_global.print_chars>   
3 [0x3]: line: 146 istore 10   
5 [0x5]:           call @1932 // <std#__srt_global.print_char>   
6 [0x6]:           ret   


function: std#__srt_global.println[1920] params(1) in file: lib\support\/0.2.9//console.sharp:149:4: note:  
		def println(o: printable) {
		   ^

0 [0x0]: line: 150 pushl 0   
1 [0x1]:           invoke_delegate 3530 { static=0, args=0 }   
3 [0x3]:           call @3572 // <std#string.get_data>   
4 [0x4]:           call @1930 // <std#__srt_global.print_chars>   
5 [0x5]: line: 151 istore 10   
7 [0x7]:           call @1932 // <std#__srt_global.print_char>   
8 [0x8]:           ret   


function: std#__srt_global.print[1921] params(1) in file: lib\support\/0.2.9//console.sharp:154:4: note:  
		def print(o: printable) {
		   ^

0 [0x0]: line: 155 pushl 0   
1 [0x1]:           invoke_delegate 3530 { static=0, args=0 }   
3 [0x3]:           popobj2    
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @1930 // <std#__srt_global.print_chars>   
8 [0x8]:           ret   


function: std#__srt_global.print[1922] params(1) in file: lib\support\/0.2.9//console.sharp:158:4: note:  
		def print(data: var) {
		   ^

0 [0x0]: line: 159 ipushl #0   
1 [0x1]:           call @1931 // <std#__srt_global.print_num>   
2 [0x2]:           ret   


function: std#__srt_global.flush[1923] params(0) in file: lib\support\/0.2.9//console.sharp:162:4: note:  
		def flush() {
		   ^

0 [0x0]: line: 163 int 0x34   : protected asm start
1 [0x1]:           ret   : protected asm end


function: std#__srt_global.utc_mills[1924] params(0) in file: lib\support\/0.2.9//console.sharp:166:4: note:  
		def utc_mills() : var {
		   ^

0 [0x0]: line: 167 call @3655 // <std#time.mills_time>   
1 [0x1]:           loadval ebx   
2 [0x2]:           return_val ebx   
3 [0x3]:           ret   


function: std#__srt_global.nano_time[1925] params(0) in file: lib\support\/0.2.9//console.sharp:170:4: note:  
		def nano_time() : var {
		   ^

0 [0x0]: line: 171 call @3650 // <std#time.nano_time>   
1 [0x1]:           loadval ebx   
2 [0x2]:           return_val ebx   
3 [0x3]:           ret   


function: std#__srt_global.exit[1926] params(1) in file: lib\support\/0.2.9//console.sharp:174:4: note:  
		def exit(val : var) {
		   ^

0 [0x0]: line: 175 ipushl #0   
1 [0x1]:           call @2356 // <platform.kernel#platform.exit>   
2 [0x2]:           ret   


function: std#__srt_global.exit[1927] params(0) in file: lib\support\/0.2.9//console.sharp:178:4: note:  
		def exit() {
		   ^

0 [0x0]: line: 179 istore 0   
2 [0x2]:           call @2356 // <platform.kernel#platform.exit>   
3 [0x3]:           ret   


function: std#__srt_global.sizeOf[1928] params(1) in file: lib\support\/0.2.9//console.sharp:182:4: note:  
		def sizeOf(data: object) : var {
		   ^

0 [0x0]: line: 183 pushl 0   : protected asm start
1 [0x1]:           int 0x33   
2 [0x2]:           return_val ebx   
3 [0x3]:           ret   
4 [0x4]: line: 189 istorel 0, fp+0   : protected asm end
6 [0x6]:           ret   


function: std#__srt_global.sizeOf[1929] params(1) in file: lib\support\/0.2.9//console.sharp:192:4: note:  
		def sizeOf(data: object[]) : var {
		   ^

0 [0x0]: line: 193 pushl 0   : protected asm start
1 [0x1]:           int 0x33   
2 [0x2]:           return_val ebx   
3 [0x3]:           ret   
4 [0x4]: line: 199 istorel 0, fp+0   : protected asm end
6 [0x6]:           ret   


function: std#__srt_global.print_chars[1930] params(1) in file: lib\support\/0.2.9//console.sharp:202:10: note:  
		local def print_chars(str: _int8[]) {
		         ^

0 [0x0]: line: 203 istorel -1, fp+2   
2 [0x2]:           pushl 0   
3 [0x3]:           popl 3   
4 [0x4]:           iaddl 1, fp@2   
6 [0x6]:           movl 3   
7 [0x7]:           sizeof ecx   
8 [0x8]:           loadl ebx, fp+2   
9 [0x9]:           lt ebx, ecx   
10 [0xa]:           jne 16   
11 [0xb]:           iaload ecx, ebx   
12 [0xc]:           smovr_2 ecx, fp+1   
13 [0xd]: line: 204 loadl ebx, fp+1   : protected asm start
14 [0xe]:           _putc ebx   
15 [0xf]:           jmp @4   : protected asm end
16 [0x10]: line: 210 call @1923 // <std#__srt_global.flush>   
17 [0x11]:           ret   


function: std#__srt_global.print_num[1931] params(1) in file: lib\support\/0.2.9//console.sharp:213:10: note:  
		local def print_num(val: var) {
		         ^

0 [0x0]: line: 214 loadl ebx, fp+0   : protected asm start
1 [0x1]:           put ebx   
2 [0x2]: line: 219 call @1923 // <std#__srt_global.flush>   : protected asm end
3 [0x3]:           ret   


function: std#__srt_global.print_char[1932] params(1) in file: lib\support\/0.2.9//console.sharp:222:10: note:  
		local def print_char(val: _int8) {
		         ^

0 [0x0]: line: 223 loadl ebx, fp+0   : protected asm start
1 [0x1]:           _putc ebx   
2 [0x2]: line: 228 call @1923 // <std#__srt_global.flush>   : protected asm end
3 [0x3]:           ret   


function: std#__srt_global.print_numbers[1933] params(1) in file: lib\support\/0.2.9//console.sharp:231:10: note:  
		local def print_numbers(str: var[]) {
		         ^

0 [0x0]: line: 232 movi #91, ebx   : protected asm start
2 [0x2]:           movi #32, ecx   
4 [0x4]:           _putc ebx   
5 [0x5]:           _putc ecx   
6 [0x6]: line: 238 istorel 0, fp+1   : protected asm end
8 [0x8]:           ipushl #1   
9 [0x9]:           movl 0   
10 [0xa]:           sizeof ebx   
11 [0xb]:           loadval ecx   
12 [0xc]:           lt ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           movr cmt, ebx   
15 [0xf]:           jne 48   
16 [0x10]: line: 239 pushl 0   
17 [0x11]:           loadl ebx, fp+1   
18 [0x12]:           popobj2    
19 [0x13]:           movr adx, ebx   
20 [0x14]:           chklen adx   
21 [0x15]:           iaload ebx, adx   
22 [0x16]:           smovr_2 ebx, fp+2   
23 [0x17]: line: 240 loadl ebx, fp+2   : protected asm start
24 [0x18]:           put ebx   
25 [0x19]: line: 245 ipushl #1   : protected asm end
26 [0x1a]:           movi #1, ebx   
28 [0x1c]:           loadval ecx   
29 [0x1d]:           add ecx, ebx -> ebx   
30 [0x1e]:           rstore ebx   
31 [0x1f]:           movl 0   
32 [0x20]:           sizeof ebx   
33 [0x21]:           loadval ecx   
34 [0x22]:           lt ecx, ebx   
35 [0x23]:           movr ebx, cmt   
36 [0x24]:           movr cmt, ebx   
37 [0x25]:           jne 44   
38 [0x26]: line: 246 movi #44, ebx   : protected asm start
40 [0x28]:           movi #32, ecx   
42 [0x2a]:           _putc ebx   
43 [0x2b]:           _putc ecx   
44 [0x2c]:           nop   : protected asm end
45 [0x2d]:           iaddl 1, fp@1   
47 [0x2f]:           jmp @8   
48 [0x30]: line: 254 movi #32, ebx   : protected asm start
50 [0x32]:           movi #93, ecx   
52 [0x34]:           _putc ebx   
53 [0x35]:           _putc ecx   
54 [0x36]: line: 261 call @1923 // <std#__srt_global.flush>   : protected asm end
55 [0x37]:           ret   


function: std#__srt_global.print_numbers[1934] params(1) in file: lib\support\/0.2.9//console.sharp:264:10: note:  
		local def print_numbers(str: _int16[]) {
		         ^

0 [0x0]: line: 265 pushl 0   : protected asm start
1 [0x1]:           call @1933 // <std#__srt_global.print_numbers>   
2 [0x2]:           ret   : protected asm end


function: std#__srt_global.print_numbers[1935] params(1) in file: lib\support\/0.2.9//console.sharp:271:10: note:  
		local def print_numbers(str: _int32[]) {
		         ^

0 [0x0]: line: 272 pushl 0   : protected asm start
1 [0x1]:           call @1933 // <std#__srt_global.print_numbers>   
2 [0x2]:           ret   : protected asm end


function: std#__srt_global.print_numbers[1936] params(1) in file: lib\support\/0.2.9//console.sharp:278:10: note:  
		local def print_numbers(str: _int64[]) {
		         ^

0 [0x0]: line: 279 pushl 0   : protected asm start
1 [0x1]:           call @1933 // <std#__srt_global.print_numbers>   
2 [0x2]:           ret   : protected asm end


function: std#__srt_global.print_numbers[1937] params(1) in file: lib\support\/0.2.9//console.sharp:285:10: note:  
		local def print_numbers(str: _uint8[]) {
		         ^

0 [0x0]: line: 286 pushl 0   : protected asm start
1 [0x1]:           call @1933 // <std#__srt_global.print_numbers>   
2 [0x2]:           ret   : protected asm end


function: std#__srt_global.print_numbers[1938] params(1) in file: lib\support\/0.2.9//console.sharp:292:10: note:  
		local def print_numbers(str: _uint16[]) {
		         ^

0 [0x0]: line: 293 pushl 0   : protected asm start
1 [0x1]:           call @1933 // <std#__srt_global.print_numbers>   
2 [0x2]:           ret   : protected asm end


function: std#__srt_global.print_numbers[1939] params(1) in file: lib\support\/0.2.9//console.sharp:299:10: note:  
		local def print_numbers(str: _uint32[]) {
		         ^

0 [0x0]: line: 300 pushl 0   : protected asm start
1 [0x1]:           call @1933 // <std#__srt_global.print_numbers>   
2 [0x2]:           ret   : protected asm end


function: std#__srt_global.print_numbers[1940] params(1) in file: lib\support\/0.2.9//console.sharp:306:10: note:  
		local def print_numbers(str: _uint64[]) {
		         ^

0 [0x0]: line: 307 pushl 0   : protected asm start
1 [0x1]:           call @1933 // <std#__srt_global.print_numbers>   
2 [0x2]:           ret   : protected asm end


function: std#__srt_global.print_chars[1941] params(1) in file: lib\support\/0.2.9//console.sharp:313:10: note:  
		local def print_chars(str: _int16[]) {
		         ^

0 [0x0]: line: 314 pushl 0   : protected asm start
1 [0x1]:           call @1930 // <std#__srt_global.print_chars>   
2 [0x2]:           ret   : protected asm end


function: std#__srt_global.read_ch[1942] params(1) in file: lib\support\/0.2.9//console.sharp:320:10: note:  
		local def read_ch(hide: var) : var {
		         ^

0 [0x0]: line: 321 loadl cmt, fp+0   : protected asm start
1 [0x1]:           get ebx   
2 [0x2]:           return_val ebx   
3 [0x3]:           ret   
4 [0x4]: line: 327 istorel 0, fp+0   : protected asm end
6 [0x6]:           ret   


constructor: std#_enum_._enum_[1943] params(1) in file: lib\support\/0.2.9//enum.sharp:18:11: note:  
		    _enum_(ord : var) {
		          ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 19 ipushl #1   
2 [0x2]:          movl 0   
3 [0x3]:          movn #1   
5 [0x5]:          loadval ebx   
6 [0x6]:          mov64 ebx, ebx   
7 [0x7]:          movi #0, adx   
9 [0x9]:          rmov adx, ebx   
10 [0xa]:          ret   


constructor: std#_enum_._enum_[1944] params(1) in file: lib\support\/0.2.9//enum.sharp:22:11: note:  
		    _enum_(e : _enum_) {
		          ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 23 movl 1   
2 [0x2]:          movn #1   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          movl 0   
8 [0x8]:          movn #1   
10 [0xa]:          mov64 ebx, ebx   
11 [0xb]:          movi #0, adx   
13 [0xd]:          rmov adx, ebx   
14 [0xe]: line: 24 movl 1   
15 [0xf]:          movn #0   
17 [0x11]:          pushobj   
18 [0x12]:          istore 0   
20 [0x14]:          movl 1   
21 [0x15]:          movn #0   
23 [0x17]:          sizeof ebx   
24 [0x18]:          rstore ebx   
25 [0x19]:          call @2163 // <std.io#__srt_global.copy>   
26 [0x1a]:          movl 0   
27 [0x1b]:          movn #0   
29 [0x1d]:          popobj   
30 [0x1e]:          ret   


overload function: std#_enum_.operator!=[1945] params(1) in file: lib\support\/0.2.9//enum.sharp:27:8: note:  
		    def operator!=(e : _enum_) : var {
		       ^

0 [0x0]: line: 28 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #1   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          tne ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#_enum_.operator!=[1946] params(1) in file: lib\support\/0.2.9//enum.sharp:31:8: note:  
		    def operator!=(num : var) : var {
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          tne ecx, ebx   
10 [0xa]:          return_val cmt   
11 [0xb]:          ret   


overload function: std#_enum_.operator==[1947] params(1) in file: lib\support\/0.2.9//enum.sharp:35:8: note:  
		    def operator==(e : _enum_) : var {
		       ^

0 [0x0]: line: 36 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #1   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


overload function: std#_enum_.operator==[1948] params(1) in file: lib\support\/0.2.9//enum.sharp:39:8: note:  
		    def operator==(num : var) : var {
		       ^

0 [0x0]: line: 40 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          loadl ebx, fp+1   
8 [0x8]:          loadval ecx   
9 [0x9]:          test ecx, ebx   
10 [0xa]:          return_val cmt   
11 [0xb]:          ret   


function: std#_enum_.get_name[1949] params(0) in file: lib\support\/0.2.9//enum.sharp:43:8: note:  
		    def get_name() : _int8[] {
		       ^

0 [0x0]: line: 44 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          returnobj   
4 [0x4]:          ret   


function: std#_enum_.get_ordinal[1950] params(0) in file: lib\support\/0.2.9//enum.sharp:47:8: note:  
		    def get_ordinal() : _int64 {
		       ^

0 [0x0]: line: 48 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          return_val ebx   
7 [0x7]:          ret   


function: std#_enum_.to_string[1951] params(0) in file: lib\support\/0.2.9//enum.sharp:51:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 52 new_class @75 // std#string   
2 [0x2]:          dup    
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          pushobj   
7 [0x7]:          call @3546 // <std#string.string>   
8 [0x8]:          popobj2    
9 [0x9]:          returnobj   
10 [0xa]:          ret   


constructor: std#_enum_._enum_[1952] params(0) in file: lib\support\/0.2.9//enum.sharp:14:17: note:  
		stable ext class _enum_ {
		                ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#throwable.throwable[1953] params(1) in file: lib\support\/0.2.9//exceptions.sharp:30:21: note:  
		    public throwable(message : _int8[]) {
		                    ^

0 [0x0]: line: 26 call @2364 // <platform.kernel#vm.get_frame_info>   
1 [0x1]:          movl 0   
2 [0x2]:          movn #2   
4 [0x4]:          popobj   
5 [0x5]:          pushl 0   
6 [0x6]: line: 31 pushl 1   
7 [0x7]:          movl 0   
8 [0x8]:          movn #0   
10 [0xa]:          popobj   
11 [0xb]:          ret   


constructor: std#throwable.throwable[1954] params(1) in file: lib\support\/0.2.9//exceptions.sharp:34:21: note:  
		    public throwable(message : string) {
		                    ^

0 [0x0]: line: 26 call @2364 // <platform.kernel#vm.get_frame_info>   
1 [0x1]:          movl 0   
2 [0x2]:          movn #2   
4 [0x4]:          popobj   
5 [0x5]:          pushl 0   
6 [0x6]: line: 35 pushl 1   
7 [0x7]:          call @3572 // <std#string.get_data>   
8 [0x8]:          movl 0   
9 [0x9]:          movn #0   
11 [0xb]:          popobj   
12 [0xc]:          ret   


function: std#throwable.get_message[1955] params(0) in file: lib\support\/0.2.9//exceptions.sharp:38:8: note:  
		    def get_message() : string {
		       ^

0 [0x0]: line: 39 new_class @75 // std#string   
2 [0x2]:          dup    
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          pushobj   
7 [0x7]:          call @3546 // <std#string.string>   
8 [0x8]:          popobj2    
9 [0x9]:          returnobj   
10 [0xa]:          ret   


function: std#throwable.to_string[1956] params(0) in file: lib\support\/0.2.9//exceptions.sharp:42:8: note:  
		    def to_string() : string
		       ^

0 [0x0]: line: 43 new_class @75 // std#string   
2 [0x2]:          dup    
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          pushobj   
7 [0x7]:          call @3546 // <std#string.string>   
8 [0x8]:          popobj2    
9 [0x9]:          returnobj   
10 [0xa]:          ret   


constructor: std#throwable.throwable[1957] params(0) in file: lib\support\/0.2.9//exceptions.sharp:10:6: note:  
		class throwable {
		     ^

0 [0x0]: line: 26 call @2364 // <platform.kernel#vm.get_frame_info>   
1 [0x1]:          movl 0   
2 [0x2]:          movn #2   
4 [0x4]:          popobj   
5 [0x5]:          ret   


constructor: std#exception.exception[1958] params(1) in file: lib\support\/0.2.9//exceptions.sharp:50:21: note:  
		    public exception(message : _int8[]) -> base(message) {}
		                    ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1953 // <std#throwable.throwable>   
3 [0x3]:         ret   


constructor: std#exception.exception[1959] params(1) in file: lib\support\/0.2.9//exceptions.sharp:51:21: note:  
		    public exception(message : string) -> base(message) {}
		                    ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1954 // <std#throwable.throwable>   
3 [0x3]:         ret   


constructor: std#exception.exception[1960] params(0) in file: lib\support\/0.2.9//exceptions.sharp:49:6: note:  
		class exception base throwable {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1957 // <std#throwable.throwable>   
2 [0x2]:         ret   


constructor: std#illegal_argument_exception.illegal_argument_exception[1961] params(1) in file: lib\support\/0.2.9//exceptions.sharp:55:38: note:  
		    public illegal_argument_exception(message : _int8[]) -> base(message) {}
		                                     ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1958 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#illegal_argument_exception.illegal_argument_exception[1962] params(1) in file: lib\support\/0.2.9//exceptions.sharp:56:38: note:  
		    public illegal_argument_exception(message : string) -> base(message) {}
		                                     ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1959 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#illegal_argument_exception.illegal_argument_exception[1963] params(0) in file: lib\support\/0.2.9//exceptions.sharp:54:6: note:  
		class illegal_argument_exception base exception {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1960 // <std#exception.exception>   
2 [0x2]:         ret   


constructor: std#illegal_state_exception.illegal_state_exception[1964] params(1) in file: lib\support\/0.2.9//exceptions.sharp:59:35: note:  
		    public illegal_state_exception(message : _int8[]) -> base(message) {}
		                                  ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1958 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#illegal_state_exception.illegal_state_exception[1965] params(1) in file: lib\support\/0.2.9//exceptions.sharp:60:35: note:  
		    public illegal_state_exception(message : string) -> base(message) {}
		                                  ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1959 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#illegal_state_exception.illegal_state_exception[1966] params(0) in file: lib\support\/0.2.9//exceptions.sharp:58:6: note:  
		class illegal_state_exception base exception {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1960 // <std#exception.exception>   
2 [0x2]:         ret   


constructor: std#out_of_bounds_exception.out_of_bounds_exception[1967] params(1) in file: lib\support\/0.2.9//exceptions.sharp:63:35: note:  
		    public out_of_bounds_exception(message : _int8[]) -> base(message) {}
		                                  ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1958 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#out_of_bounds_exception.out_of_bounds_exception[1968] params(1) in file: lib\support\/0.2.9//exceptions.sharp:64:35: note:  
		    public out_of_bounds_exception(message : string) -> base(message) {}
		                                  ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1959 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#out_of_bounds_exception.out_of_bounds_exception[1969] params(0) in file: lib\support\/0.2.9//exceptions.sharp:62:6: note:  
		class out_of_bounds_exception base exception {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1960 // <std#exception.exception>   
2 [0x2]:         ret   


constructor: std#io_exception.io_exception[1970] params(1) in file: lib\support\/0.2.9//exceptions.sharp:67:24: note:  
		    public io_exception(message : _int8[]) -> base(message) {}
		                       ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1958 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#io_exception.io_exception[1971] params(1) in file: lib\support\/0.2.9//exceptions.sharp:68:24: note:  
		    public io_exception(message : string) -> base(message) {}
		                       ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1959 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#io_exception.io_exception[1972] params(0) in file: lib\support\/0.2.9//exceptions.sharp:66:6: note:  
		class io_exception base exception {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1960 // <std#exception.exception>   
2 [0x2]:         ret   


constructor: std#invalid_operation_exception.invalid_operation_exception[1973] params(1) in file: lib\support\/0.2.9//exceptions.sharp:71:39: note:  
		    public invalid_operation_exception(message : _int8[]) -> base(message) {}
		                                      ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1958 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#invalid_operation_exception.invalid_operation_exception[1974] params(1) in file: lib\support\/0.2.9//exceptions.sharp:72:39: note:  
		    public invalid_operation_exception(message : string) -> base(message) {}
		                                      ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1959 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#invalid_operation_exception.invalid_operation_exception[1975] params(0) in file: lib\support\/0.2.9//exceptions.sharp:70:6: note:  
		class invalid_operation_exception base exception {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1960 // <std#exception.exception>   
2 [0x2]:         ret   


constructor: std#nullptr_exception.nullptr_exception[1976] params(1) in file: lib\support\/0.2.9//exceptions.sharp:75:29: note:  
		    public nullptr_exception(message : _int8[]) -> base(message) {}
		                            ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1958 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#nullptr_exception.nullptr_exception[1977] params(1) in file: lib\support\/0.2.9//exceptions.sharp:76:29: note:  
		    public nullptr_exception(message : string) -> base(message) {}
		                            ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1959 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#nullptr_exception.nullptr_exception[1978] params(0) in file: lib\support\/0.2.9//exceptions.sharp:74:6: note:  
		class nullptr_exception base exception {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1960 // <std#exception.exception>   
2 [0x2]:         ret   


constructor: std#runtime_exception.runtime_exception[1979] params(1) in file: lib\support\/0.2.9//exceptions.sharp:79:29: note:  
		    public runtime_exception(message : _int8[]) -> base(message) {}
		                            ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1958 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#runtime_exception.runtime_exception[1980] params(1) in file: lib\support\/0.2.9//exceptions.sharp:80:29: note:  
		    public runtime_exception(message : string) -> base(message) {}
		                            ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1959 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#runtime_exception.runtime_exception[1981] params(0) in file: lib\support\/0.2.9//exceptions.sharp:78:6: note:  
		class runtime_exception base exception {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1960 // <std#exception.exception>   
2 [0x2]:         ret   


constructor: std#stack_overflow_exception.stack_overflow_exception[1982] params(1) in file: lib\support\/0.2.9//exceptions.sharp:83:36: note:  
		    public stack_overflow_exception(message : _int8[]) -> base(message) {}
		                                   ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1958 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#stack_overflow_exception.stack_overflow_exception[1983] params(1) in file: lib\support\/0.2.9//exceptions.sharp:84:36: note:  
		    public stack_overflow_exception(message : string) -> base(message) {}
		                                   ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1959 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#stack_overflow_exception.stack_overflow_exception[1984] params(0) in file: lib\support\/0.2.9//exceptions.sharp:82:6: note:  
		class stack_overflow_exception base exception {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1960 // <std#exception.exception>   
2 [0x2]:         ret   


constructor: std#thread_stack_exception.thread_stack_exception[1985] params(1) in file: lib\support\/0.2.9//exceptions.sharp:87:34: note:  
		    public thread_stack_exception(message : _int8[]) -> base(message) {}
		                                 ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1958 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#thread_stack_exception.thread_stack_exception[1986] params(1) in file: lib\support\/0.2.9//exceptions.sharp:88:34: note:  
		    public thread_stack_exception(message : string) -> base(message) {}
		                                 ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1959 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#thread_stack_exception.thread_stack_exception[1987] params(0) in file: lib\support\/0.2.9//exceptions.sharp:86:6: note:  
		class thread_stack_exception base exception {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1960 // <std#exception.exception>   
2 [0x2]:         ret   


constructor: std#class_cast_exception.class_cast_exception[1988] params(1) in file: lib\support\/0.2.9//exceptions.sharp:91:32: note:  
		    public class_cast_exception(message : _int8[]) -> base(message) {}
		                               ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1958 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#class_cast_exception.class_cast_exception[1989] params(1) in file: lib\support\/0.2.9//exceptions.sharp:92:32: note:  
		    public class_cast_exception(message : string) -> base(message) {}
		                               ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1959 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#class_cast_exception.class_cast_exception[1990] params(0) in file: lib\support\/0.2.9//exceptions.sharp:90:6: note:  
		class class_cast_exception base exception {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1960 // <std#exception.exception>   
2 [0x2]:         ret   


constructor: std#out_of_memory_exception.out_of_memory_exception[1991] params(1) in file: lib\support\/0.2.9//exceptions.sharp:95:35: note:  
		    public out_of_memory_exception(message : _int8[]) -> base(message) {}
		                                  ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1958 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#out_of_memory_exception.out_of_memory_exception[1992] params(1) in file: lib\support\/0.2.9//exceptions.sharp:96:35: note:  
		    public out_of_memory_exception(message : string) -> base(message) {}
		                                  ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1959 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#out_of_memory_exception.out_of_memory_exception[1993] params(0) in file: lib\support\/0.2.9//exceptions.sharp:94:6: note:  
		class out_of_memory_exception base exception {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1960 // <std#exception.exception>   
2 [0x2]:         ret   


constructor: std#incompatible_class_exception.incompatible_class_exception[1994] params(1) in file: lib\support\/0.2.9//exceptions.sharp:99:40: note:  
		    public incompatible_class_exception(message : _int8[]) -> base(message) {}
		                                       ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1958 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#incompatible_class_exception.incompatible_class_exception[1995] params(1) in file: lib\support\/0.2.9//exceptions.sharp:100:40: note:  
		    public incompatible_class_exception(message : string) -> base(message) {}
		                                       ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1959 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#incompatible_class_exception.incompatible_class_exception[1996] params(0) in file: lib\support\/0.2.9//exceptions.sharp:98:6: note:  
		class incompatible_class_exception base exception {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1960 // <std#exception.exception>   
2 [0x2]:         ret   


constructor: std#object_import_error.object_import_error[1997] params(1) in file: lib\support\/0.2.9//exceptions.sharp:104:31: note:  
		    public object_import_error(message : _int8[]) -> base(message) {}
		                              ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @2009 // <std#error.error>   
3 [0x3]:         ret   


constructor: std#object_import_error.object_import_error[1998] params(1) in file: lib\support\/0.2.9//exceptions.sharp:105:31: note:  
		    public object_import_error(message : string) -> base(message) {}
		                              ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @2010 // <std#error.error>   
3 [0x3]:         ret   


constructor: std#object_import_error.object_import_error[1999] params(0) in file: lib\support\/0.2.9//exceptions.sharp:103:6: note:  
		class object_import_error base error {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @2011 // <std#error.error>   
2 [0x2]:         ret   


constructor: std#not_implemented_error.not_implemented_error[2000] params(1) in file: lib\support\/0.2.9//exceptions.sharp:108:33: note:  
		    public not_implemented_error(message : _int8[]) -> base(message) {}
		                                ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @2009 // <std#error.error>   
3 [0x3]:         ret   


constructor: std#not_implemented_error.not_implemented_error[2001] params(1) in file: lib\support\/0.2.9//exceptions.sharp:109:33: note:  
		    public not_implemented_error(message : string) -> base(message) {}
		                                ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @2010 // <std#error.error>   
3 [0x3]:         ret   


constructor: std#not_implemented_error.not_implemented_error[2002] params(0) in file: lib\support\/0.2.9//exceptions.sharp:107:6: note:  
		class not_implemented_error base error {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @2011 // <std#error.error>   
2 [0x2]:         ret   


constructor: std#unsatisfied_link_error.unsatisfied_link_error[2003] params(1) in file: lib\support\/0.2.9//exceptions.sharp:112:34: note:  
		    public unsatisfied_link_error(message : _int8[]) -> base(message) {}
		                                 ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @2009 // <std#error.error>   
3 [0x3]:         ret   


constructor: std#unsatisfied_link_error.unsatisfied_link_error[2004] params(1) in file: lib\support\/0.2.9//exceptions.sharp:113:34: note:  
		    public unsatisfied_link_error(message : string) -> base(message) {}
		                                 ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @2010 // <std#error.error>   
3 [0x3]:         ret   


constructor: std#unsatisfied_link_error.unsatisfied_link_error[2005] params(0) in file: lib\support\/0.2.9//exceptions.sharp:111:6: note:  
		class unsatisfied_link_error base error {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @2011 // <std#error.error>   
2 [0x2]:         ret   


constructor: std#assertion_error.assertion_error[2006] params(1) in file: lib\support\/0.2.9//exceptions.sharp:116:27: note:  
		    public assertion_error(message : _int8[]) -> base(message) {}
		                          ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @2009 // <std#error.error>   
3 [0x3]:         ret   


constructor: std#assertion_error.assertion_error[2007] params(1) in file: lib\support\/0.2.9//exceptions.sharp:117:27: note:  
		    public assertion_error(message : string) -> base(message) {}
		                          ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @2010 // <std#error.error>   
3 [0x3]:         ret   


constructor: std#assertion_error.assertion_error[2008] params(0) in file: lib\support\/0.2.9//exceptions.sharp:115:6: note:  
		class assertion_error base error {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @2011 // <std#error.error>   
2 [0x2]:         ret   


constructor: std#error.error[2009] params(1) in file: lib\support\/0.2.9//exceptions.sharp:121:17: note:  
		    public error(message : _int8[]) -> base(message) {}
		                ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1958 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#error.error[2010] params(1) in file: lib\support\/0.2.9//exceptions.sharp:122:17: note:  
		    public error(message : string) -> base(message) {}
		                ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1959 // <std#exception.exception>   
3 [0x3]:         ret   


constructor: std#error.error[2011] params(0) in file: lib\support\/0.2.9//exceptions.sharp:120:6: note:  
		class error base exception {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1960 // <std#exception.exception>   
2 [0x2]:         ret   


function: std#__srt_global.runtime_error[2012] params(1) in file: lib\support\/0.2.9//exceptions.sharp:139:4: note:  
		def runtime_error(message: string) : runtime_except {
		   ^

0 [0x0]: line: 140 new_class @10 // std#runtime_exception   
2 [0x2]:           dup    
3 [0x3]:           pushl 0   
4 [0x4]:           call @1980 // <std#runtime_exception.runtime_exception>   
5 [0x5]:           popobj2    
6 [0x6]:           returnobj   
7 [0x7]:           ret   


function: std#__srt_global.runtime_error[2013] params(0) in file: lib\support\/0.2.9//exceptions.sharp:143:4: note:  
		def runtime_error() : runtime_except {
		   ^

0 [0x0]: line: 144 new_class @10 // std#runtime_exception   
2 [0x2]:           dup    
3 [0x3]:           call @1981 // <std#runtime_exception.runtime_exception>   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   


function: std#__srt_global.todo[2014] params(1) in file: lib\support\/0.2.9//exceptions.sharp:147:4: note:  
		def todo(message: string) {
		   ^

0 [0x0]: line: 148 new_class @17 // std#not_implemented_error   
2 [0x2]:           dup    
3 [0x3]:           pushl 0   
4 [0x4]:           call @2001 // <std#not_implemented_error.not_implemented_error>   
5 [0x5]:           throw    
6 [0x6]:           ret   


function: std#__srt_global.assert[2015] params(1) in file: lib\support\/0.2.9//exceptions.sharp:151:4: note:  
		def assert(cond : var) {
		   ^

0 [0x0]: line: 152 loadl ebx, fp+0   
1 [0x1]:           not ebx, ebx   
2 [0x2]:           movr cmt, ebx   
3 [0x3]:           jne 10   
4 [0x4]: line: 153 new_class @19 // std#assertion_error   
6 [0x6]:           dup    
7 [0x7]:           newstr @62 // assertion failed!   
8 [0x8]:           call @2006 // <std#assertion_error.assertion_error>   
9 [0x9]:           throw    
10 [0xa]:           nop   
11 [0xb]:           ret   


function: std#__srt_global.assert[2016] params(2) in file: lib\support\/0.2.9//exceptions.sharp:157:4: note:  
		def assert(cond : var, message: string) {
		   ^

0 [0x0]: line: 158 loadl ebx, fp+0   
1 [0x1]:           not ebx, ebx   
2 [0x2]:           movr cmt, ebx   
3 [0x3]:           jne 10   
4 [0x4]: line: 159 new_class @19 // std#assertion_error   
6 [0x6]:           dup    
7 [0x7]:           pushl 1   
8 [0x8]:           call @2007 // <std#assertion_error.assertion_error>   
9 [0x9]:           throw    
10 [0xa]:           nop   
11 [0xb]:           ret   


constructor: std.export#export_group.export_group[2017] params(1) in file: lib\support\/0.2.9//export//export_group.sharp:9:16: note:  
		   export_group(name: string) {
		               ^

0 [0x0]:         new_class @116 // std#list<object>   
2 [0x2]:         dup    
3 [0x3]:         call @3906 // <std#list<object>.list>   
4 [0x4]:         movl 0   
5 [0x5]:         movn #0   
7 [0x7]:         popobj   
8 [0x8]:         new_class @75 // std#string   
10 [0xa]:         dup    
11 [0xb]:         newstr @54 // anonymous_group   
12 [0xc]:         call @3546 // <std#string.string>   
13 [0xd]:         movl 0   
14 [0xe]:         movn #1   
16 [0x10]:         popobj   
17 [0x11]:         pushl 0   
18 [0x12]: line: 10 pushl 1   
19 [0x13]:          movl 0   
20 [0x14]:          movn #1   
22 [0x16]:          popobj   
23 [0x17]:          ret   


function: std.export#export_group.write_var[2018] params(1) in file: lib\support\/0.2.9//export//export_group.sharp:13:7: note:  
		   def write_var(val: var) {
		      ^

0 [0x0]: line: 14 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          new_class @63 // std#double   
6 [0x6]:          dup    
7 [0x7]:          ipushl #1   
8 [0x8]:          call @3439 // <std#double.double>   
9 [0x9]:          call @3920 // <std#list<object>.add>   
10 [0xa]:          ret   


function: std.export#export_group.write_double[2019] params(1) in file: lib\support\/0.2.9//export//export_group.sharp:17:7: note:  
		   def write_double(val: double) {
		      ^

0 [0x0]: line: 18 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 1   
5 [0x5]:          call @3920 // <std#list<object>.add>   
6 [0x6]:          ret   


function: std.export#export_group.write_long[2020] params(1) in file: lib\support\/0.2.9//export//export_group.sharp:21:7: note:  
		   def write_long(val: long) {
		      ^

0 [0x0]: line: 22 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 1   
5 [0x5]:          call @3920 // <std#list<object>.add>   
6 [0x6]:          ret   


function: std.export#export_group.write_int[2021] params(1) in file: lib\support\/0.2.9//export//export_group.sharp:25:7: note:  
		   def write_int(val: int) {
		      ^

0 [0x0]: line: 26 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 1   
5 [0x5]:          call @3920 // <std#list<object>.add>   
6 [0x6]:          ret   


function: std.export#export_group.write_short[2022] params(1) in file: lib\support\/0.2.9//export//export_group.sharp:29:7: note:  
		   def write_short(val: short) {
		      ^

0 [0x0]: line: 30 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 1   
5 [0x5]:          call @3920 // <std#list<object>.add>   
6 [0x6]:          ret   


function: std.export#export_group.write_char[2023] params(1) in file: lib\support\/0.2.9//export//export_group.sharp:33:7: note:  
		   def write_char(val: char) {
		      ^

0 [0x0]: line: 34 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 1   
5 [0x5]:          call @3920 // <std#list<object>.add>   
6 [0x6]:          ret   


function: std.export#export_group.write_byte[2024] params(1) in file: lib\support\/0.2.9//export//export_group.sharp:37:7: note:  
		   def write_byte(val: byte) {
		      ^

0 [0x0]: line: 38 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 1   
5 [0x5]:          call @3920 // <std#list<object>.add>   
6 [0x6]:          ret   


function: std.export#export_group.write_bool[2025] params(1) in file: lib\support\/0.2.9//export//export_group.sharp:41:7: note:  
		   def write_bool(val: bool) {
		      ^

0 [0x0]: line: 42 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 1   
5 [0x5]:          call @3920 // <std#list<object>.add>   
6 [0x6]:          ret   


function: std.export#export_group.write_ulong[2026] params(1) in file: lib\support\/0.2.9//export//export_group.sharp:45:7: note:  
		   def write_ulong(val: ulong) {
		      ^

0 [0x0]: line: 46 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 1   
5 [0x5]:          call @3920 // <std#list<object>.add>   
6 [0x6]:          ret   


function: std.export#export_group.write_uint[2027] params(1) in file: lib\support\/0.2.9//export//export_group.sharp:49:7: note:  
		   def write_uint(val: uint) {
		      ^

0 [0x0]: line: 50 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 1   
5 [0x5]:          call @3920 // <std#list<object>.add>   
6 [0x6]:          ret   


function: std.export#export_group.write_ushort[2028] params(1) in file: lib\support\/0.2.9//export//export_group.sharp:53:7: note:  
		   def write_ushort(val: ushort) {
		      ^

0 [0x0]: line: 54 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 1   
5 [0x5]:          call @3920 // <std#list<object>.add>   
6 [0x6]:          ret   


function: std.export#export_group.write_uchar[2029] params(1) in file: lib\support\/0.2.9//export//export_group.sharp:57:7: note:  
		   def write_uchar(val: uchar) {
		      ^

0 [0x0]: line: 58 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 1   
5 [0x5]:          call @3920 // <std#list<object>.add>   
6 [0x6]:          ret   


function: std.export#export_group.write_object[2030] params(1) in file: lib\support\/0.2.9//export//export_group.sharp:61:7: note:  
		   def write_object(val: object) {
		      ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 1   
5 [0x5]:          call @3920 // <std#list<object>.add>   
6 [0x6]:          ret   


function: std.export#export_group.empty_group[2031] params(0) in file: lib\support\/0.2.9//export//export_group.sharp:65:7: note:  
		   def empty_group() {
		      ^

0 [0x0]: line: 66 new_class @5 // std#illegal_state_exception   
2 [0x2]:          dup    
3 [0x3]:          newstr @63 // there is no data left in the exported group   
4 [0x4]:          call @1964 // <std#illegal_state_exception.illegal_state_exception>   
5 [0x5]:          throw    
6 [0x6]:          ret   


function: std.export#export_group.read_var[2032] params(0) in file: lib\support\/0.2.9//export//export_group.sharp:69:7: note:  
		   def read_var() : var {
		      ^

0 [0x0]: line: 70 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          call @3909 // <std#list<object>.empty>   
5 [0x5]:          loadval ebx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 10   
8 [0x8]: line: 71 pushl 0   
9 [0x9]:          call @2031 // <std.export#export_group.empty_group>   
10 [0xa]:          nop   
11 [0xb]: line: 72 movl 0   
12 [0xc]:          movn #0   
14 [0xe]:          pushobj   
15 [0xf]:          call @3924 // <std#list<object>.pop_first>   
16 [0x10]:          popobj2    
17 [0x11]:          movi #63, cmt   
19 [0x13]:          cast cmt   
20 [0x14]:          pushobj   
21 [0x15]:          call @1894 // <std#integer<var>.get_value>   
22 [0x16]:          loadval ebx   
23 [0x17]:          return_val ebx   
24 [0x18]:          ret   


function: std.export#export_group.read_double[2033] params(0) in file: lib\support\/0.2.9//export//export_group.sharp:75:7: note:  
		   def read_double() : double {
		      ^

0 [0x0]: line: 76 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          call @3909 // <std#list<object>.empty>   
5 [0x5]:          loadval ebx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 10   
8 [0x8]: line: 77 pushl 0   
9 [0x9]:          call @2031 // <std.export#export_group.empty_group>   
10 [0xa]:          nop   
11 [0xb]: line: 78 movl 0   
12 [0xc]:          movn #0   
14 [0xe]:          pushobj   
15 [0xf]:          call @3924 // <std#list<object>.pop_first>   
16 [0x10]:          popobj2    
17 [0x11]:          movi #63, cmt   
19 [0x13]:          cast cmt   
20 [0x14]:          returnobj   
21 [0x15]:          ret   


function: std.export#export_group.read_long[2034] params(1) in file: lib\support\/0.2.9//export//export_group.sharp:81:7: note:  
		   def read_long(val: long) : long {
		      ^

0 [0x0]: line: 82 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          call @3909 // <std#list<object>.empty>   
5 [0x5]:          loadval ebx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 10   
8 [0x8]: line: 83 pushl 0   
9 [0x9]:          call @2031 // <std.export#export_group.empty_group>   
10 [0xa]:          nop   
11 [0xb]: line: 84 movl 0   
12 [0xc]:          movn #0   
14 [0xe]:          pushobj   
15 [0xf]:          call @3924 // <std#list<object>.pop_first>   
16 [0x10]:          popobj2    
17 [0x11]:          movi #54, cmt   
19 [0x13]:          cast cmt   
20 [0x14]:          returnobj   
21 [0x15]:          ret   


function: std.export#export_group.read_int[2035] params(0) in file: lib\support\/0.2.9//export//export_group.sharp:87:7: note:  
		   def read_int() : int {
		      ^

0 [0x0]: line: 88 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          call @3909 // <std#list<object>.empty>   
5 [0x5]:          loadval ebx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 10   
8 [0x8]: line: 89 pushl 0   
9 [0x9]:          call @2031 // <std.export#export_group.empty_group>   
10 [0xa]:          nop   
11 [0xb]: line: 90 movl 0   
12 [0xc]:          movn #0   
14 [0xe]:          pushobj   
15 [0xf]:          call @3924 // <std#list<object>.pop_first>   
16 [0x10]:          popobj2    
17 [0x11]:          movi #56, cmt   
19 [0x13]:          cast cmt   
20 [0x14]:          returnobj   
21 [0x15]:          ret   


function: std.export#export_group.read_short[2036] params(0) in file: lib\support\/0.2.9//export//export_group.sharp:93:7: note:  
		   def read_short() : short {
		      ^

0 [0x0]: line: 94 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          call @3909 // <std#list<object>.empty>   
5 [0x5]:          loadval ebx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 10   
8 [0x8]: line: 95 pushl 0   
9 [0x9]:          call @2031 // <std.export#export_group.empty_group>   
10 [0xa]:          nop   
11 [0xb]: line: 96 movl 0   
12 [0xc]:          movn #0   
14 [0xe]:          pushobj   
15 [0xf]:          call @3924 // <std#list<object>.pop_first>   
16 [0x10]:          popobj2    
17 [0x11]:          movi #58, cmt   
19 [0x13]:          cast cmt   
20 [0x14]:          returnobj   
21 [0x15]:          ret   


function: std.export#export_group.read_char[2037] params(0) in file: lib\support\/0.2.9//export//export_group.sharp:99:7: note:  
		   def read_char() : char {
		      ^

0 [0x0]: line: 100 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           call @3909 // <std#list<object>.empty>   
5 [0x5]:           loadval ebx   
6 [0x6]:           movr cmt, ebx   
7 [0x7]:           jne 10   
8 [0x8]: line: 101 pushl 0   
9 [0x9]:           call @2031 // <std.export#export_group.empty_group>   
10 [0xa]:           nop   
11 [0xb]: line: 102 movl 0   
12 [0xc]:           movn #0   
14 [0xe]:           pushobj   
15 [0xf]:           call @3924 // <std#list<object>.pop_first>   
16 [0x10]:           popobj2    
17 [0x11]:           movi #60, cmt   
19 [0x13]:           cast cmt   
20 [0x14]:           returnobj   
21 [0x15]:           ret   


function: std.export#export_group.read_byte[2038] params(0) in file: lib\support\/0.2.9//export//export_group.sharp:105:7: note:  
		   def read_byte() : byte {
		      ^

0 [0x0]: line: 106 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           call @3909 // <std#list<object>.empty>   
5 [0x5]:           loadval ebx   
6 [0x6]:           movr cmt, ebx   
7 [0x7]:           jne 10   
8 [0x8]: line: 107 pushl 0   
9 [0x9]:           call @2031 // <std.export#export_group.empty_group>   
10 [0xa]:           nop   
11 [0xb]: line: 108 movl 0   
12 [0xc]:           movn #0   
14 [0xe]:           pushobj   
15 [0xf]:           call @3924 // <std#list<object>.pop_first>   
16 [0x10]:           popobj2    
17 [0x11]:           movi #61, cmt   
19 [0x13]:           cast cmt   
20 [0x14]:           returnobj   
21 [0x15]:           ret   


function: std.export#export_group.read_bool[2039] params(1) in file: lib\support\/0.2.9//export//export_group.sharp:111:7: note:  
		   def read_bool(val: bool) : bool {
		      ^

0 [0x0]: line: 112 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           call @3909 // <std#list<object>.empty>   
5 [0x5]:           loadval ebx   
6 [0x6]:           movr cmt, ebx   
7 [0x7]:           jne 10   
8 [0x8]: line: 113 pushl 0   
9 [0x9]:           call @2031 // <std.export#export_group.empty_group>   
10 [0xa]:           nop   
11 [0xb]: line: 114 movl 0   
12 [0xc]:           movn #0   
14 [0xe]:           pushobj   
15 [0xf]:           call @3924 // <std#list<object>.pop_first>   
16 [0x10]:           popobj2    
17 [0x11]:           movi #62, cmt   
19 [0x13]:           cast cmt   
20 [0x14]:           returnobj   
21 [0x15]:           ret   


function: std.export#export_group.read_ulong[2040] params(0) in file: lib\support\/0.2.9//export//export_group.sharp:117:7: note:  
		   def read_ulong() : ulong {
		      ^

0 [0x0]: line: 118 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           call @3909 // <std#list<object>.empty>   
5 [0x5]:           loadval ebx   
6 [0x6]:           movr cmt, ebx   
7 [0x7]:           jne 10   
8 [0x8]: line: 119 pushl 0   
9 [0x9]:           call @2031 // <std.export#export_group.empty_group>   
10 [0xa]:           nop   
11 [0xb]: line: 120 movl 0   
12 [0xc]:           movn #0   
14 [0xe]:           pushobj   
15 [0xf]:           call @3924 // <std#list<object>.pop_first>   
16 [0x10]:           popobj2    
17 [0x11]:           movi #53, cmt   
19 [0x13]:           cast cmt   
20 [0x14]:           returnobj   
21 [0x15]:           ret   


function: std.export#export_group.read_uint[2041] params(1) in file: lib\support\/0.2.9//export//export_group.sharp:123:7: note:  
		   def read_uint(val: uint) : uint {
		      ^

0 [0x0]: line: 124 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           call @3909 // <std#list<object>.empty>   
5 [0x5]:           loadval ebx   
6 [0x6]:           movr cmt, ebx   
7 [0x7]:           jne 10   
8 [0x8]: line: 125 pushl 0   
9 [0x9]:           call @2031 // <std.export#export_group.empty_group>   
10 [0xa]:           nop   
11 [0xb]: line: 126 movl 0   
12 [0xc]:           movn #0   
14 [0xe]:           pushobj   
15 [0xf]:           call @3924 // <std#list<object>.pop_first>   
16 [0x10]:           popobj2    
17 [0x11]:           movi #55, cmt   
19 [0x13]:           cast cmt   
20 [0x14]:           returnobj   
21 [0x15]:           ret   


function: std.export#export_group.read_ushort[2042] params(0) in file: lib\support\/0.2.9//export//export_group.sharp:129:7: note:  
		   def read_ushort() : ushort {
		      ^

0 [0x0]: line: 130 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           call @3909 // <std#list<object>.empty>   
5 [0x5]:           loadval ebx   
6 [0x6]:           movr cmt, ebx   
7 [0x7]:           jne 10   
8 [0x8]: line: 131 pushl 0   
9 [0x9]:           call @2031 // <std.export#export_group.empty_group>   
10 [0xa]:           nop   
11 [0xb]: line: 132 movl 0   
12 [0xc]:           movn #0   
14 [0xe]:           pushobj   
15 [0xf]:           call @3924 // <std#list<object>.pop_first>   
16 [0x10]:           popobj2    
17 [0x11]:           movi #57, cmt   
19 [0x13]:           cast cmt   
20 [0x14]:           returnobj   
21 [0x15]:           ret   


function: std.export#export_group.read_uchar[2043] params(0) in file: lib\support\/0.2.9//export//export_group.sharp:135:7: note:  
		   def read_uchar() : uchar {
		      ^

0 [0x0]: line: 136 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           call @3909 // <std#list<object>.empty>   
5 [0x5]:           loadval ebx   
6 [0x6]:           movr cmt, ebx   
7 [0x7]:           jne 10   
8 [0x8]: line: 137 pushl 0   
9 [0x9]:           call @2031 // <std.export#export_group.empty_group>   
10 [0xa]:           nop   
11 [0xb]: line: 138 movl 0   
12 [0xc]:           movn #0   
14 [0xe]:           pushobj   
15 [0xf]:           call @3924 // <std#list<object>.pop_first>   
16 [0x10]:           popobj2    
17 [0x11]:           movi #59, cmt   
19 [0x13]:           cast cmt   
20 [0x14]:           returnobj   
21 [0x15]:           ret   


function: std.export#export_group.read_object[2044] params(0) in file: lib\support\/0.2.9//export//export_group.sharp:141:7: note:  
		   def read_object() : object {
		      ^

0 [0x0]: line: 142 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           call @3909 // <std#list<object>.empty>   
5 [0x5]:           loadval ebx   
6 [0x6]:           movr cmt, ebx   
7 [0x7]:           jne 10   
8 [0x8]: line: 143 pushl 0   
9 [0x9]:           call @2031 // <std.export#export_group.empty_group>   
10 [0xa]:           nop   
11 [0xb]: line: 144 movl 0   
12 [0xc]:           movn #0   
14 [0xe]:           pushobj   
15 [0xf]:           call @3924 // <std#list<object>.pop_first>   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   


function: std.export#export_group.export[2045] params(0) in file: lib\support\/0.2.9//export//export_group.sharp:147:7: note:  
		   def export() : _int8[] {
		      ^

0 [0x0]: line: 148 pushl 0   
1 [0x1]:           call @2050 // <std.export#__srt_global._export>   
2 [0x2]:           popobj2    
3 [0x3]:           returnobj   
4 [0x4]:           ret   


function: std.export#export_group.export[2046] params(1) in file: lib\support\/0.2.9//export//export_group.sharp:151:7: note:  
		   def export(filename: string) : file {
		      ^

0 [0x0]: line: 152 pushl 0   
1 [0x1]:           pushl 1   
2 [0x2]:           call @2052 // <std.export#__srt_global._export>   
3 [0x3]:           popobj2    
4 [0x4]:           returnobj   
5 [0x5]:           ret   


function: std.export#export_group.import_[2047] params(1) in file: lib\support\/0.2.9//export//export_group.sharp:155:7: note:  
		   def import_(bytes: string) {
		      ^

0 [0x0]: line: 156 pushl 1   
1 [0x1]:           call @2051 // <std.export#__srt_global._import>   
2 [0x2]:           popobj2    
3 [0x3]:           movi #22, cmt   
5 [0x5]:           cast cmt   
6 [0x6]:           smovr_3 fp+2   
7 [0x7]: line: 157 movl 2   
8 [0x8]:           movn #0   
10 [0xa]:           pushobj   
11 [0xb]:           movl 0   
12 [0xc]:           movn #0   
14 [0xe]:           popobj   
15 [0xf]:           ret   


function: std.export#export_group.import_from[2048] params(1) in file: lib\support\/0.2.9//export//export_group.sharp:160:7: note:  
		   def import_from(filename: string) {
		      ^

0 [0x0]: line: 161 pushl 1   
1 [0x1]:           call @2053 // <std.export#__srt_global._import_from>   
2 [0x2]:           popobj2    
3 [0x3]:           smovr_3 fp+2   
4 [0x4]: line: 162 movl 2   
5 [0x5]:           movn #0   
7 [0x7]:           pushobj   
8 [0x8]:           movl 0   
9 [0x9]:           movn #0   
11 [0xb]:           popobj   
12 [0xc]:           ret   


constructor: std.export#export_group.export_group[2049] params(0) in file: lib\support\/0.2.9//export//export_group.sharp:5:6: note:  
		class export_group {
		     ^

0 [0x0]:         new_class @116 // std#list<object>   
2 [0x2]:         dup    
3 [0x3]:         call @3906 // <std#list<object>.list>   
4 [0x4]:         movl 0   
5 [0x5]:         movn #0   
7 [0x7]:         popobj   
8 [0x8]:         new_class @75 // std#string   
10 [0xa]:         dup    
11 [0xb]:         newstr @54 // anonymous_group   
12 [0xc]:         call @3546 // <std#string.string>   
13 [0xd]:         movl 0   
14 [0xe]:         movn #1   
16 [0x10]:         popobj   
17 [0x11]:         ret   


function: std.export#__srt_global._export[2050] params(1) in file: lib\support\/0.2.9//export//serialization.sharp:5:4: note:  
		def _export(obj: object) : _int8[] {
		   ^

0 [0x0]: line: 6 movl 1   
1 [0x1]:         del   
2 [0x2]: line: 7 pushl 0   : protected asm start
3 [0x3]:         int 0x4d   
4 [0x4]:         movl 1   
5 [0x5]:         popobj   
6 [0x6]: line: 14 movl 1   : protected asm end
7 [0x7]:          returnobj   
8 [0x8]:          ret   


function: std.export#__srt_global._import[2051] params(1) in file: lib\support\/0.2.9//export//serialization.sharp:17:4: note:  
		def _import(bytes: string) : object {
		   ^

0 [0x0]: line: 18 movl 1   
1 [0x1]:          del   
2 [0x2]: line: 19 pushl 0   
3 [0x3]:          call @3572 // <std#string.get_data>   
4 [0x4]:          popobj2    
5 [0x5]:          smovr_3 fp+2   
6 [0x6]: line: 21 pushl 2   : protected asm start
7 [0x7]:          int 0x4e   
8 [0x8]:          movl 1   
9 [0x9]:          popobj   
10 [0xa]: line: 28 movl 1   : protected asm end
11 [0xb]:          returnobj   
12 [0xc]:          ret   


function: std.export#__srt_global._export[2052] params(2) in file: lib\support\/0.2.9//export//serialization.sharp:31:4: note:  
		def _export(obj: object, filename: string) : file {
		   ^

0 [0x0]: line: 32 new_class @28 // std.io#file   
2 [0x2]:          dup    
3 [0x3]:          pushl 1   
4 [0x4]:          call @2077 // <std.io#file.file>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+2   
7 [0x7]: line: 34 pushl 2   
8 [0x8]:          call @2087 // <std.io#file.exists>   
9 [0x9]:          loadval ebx   
10 [0xa]:          not ebx, ebx   
11 [0xb]:          movr cmt, ebx   
12 [0xc]:          jne 15   
13 [0xd]: line: 35 pushl 2   
14 [0xe]:          call @2095 // <std.io#file.create>   
15 [0xf]:          nop   
16 [0x10]: line: 36 pushl 2   
17 [0x11]:          new_class @75 // std#string   
19 [0x13]:          dup    
20 [0x14]:          pushl 0   
21 [0x15]:          call @2050 // <std.export#__srt_global._export>   
22 [0x16]:          call @3546 // <std#string.string>   
23 [0x17]:          call @2117 // <std.io#file.write>   
24 [0x18]:          pop   
25 [0x19]: line: 37 movl 2   
26 [0x1a]:          returnobj   
27 [0x1b]:          ret   


function: std.export#__srt_global._import_from[2053] params(1) in file: lib\support\/0.2.9//export//serialization.sharp:41:4: note:  
		def _import_from(filename: string) : object {
		   ^

0 [0x0]: line: 42 new_class @28 // std.io#file   
2 [0x2]:          dup    
3 [0x3]:          pushl 0   
4 [0x4]:          call @2077 // <std.io#file.file>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+1   
7 [0x7]: line: 43 pushl 1   
8 [0x8]:          call @2116 // <std.io#file.read>   
9 [0x9]:          call @2051 // <std.export#__srt_global._import>   
10 [0xa]:          popobj2    
11 [0xb]:          returnobj   
12 [0xc]:          ret   


function: std.io#__srt_global.critical_section[2054] params(1) in file: lib\support\/0.2.9//io//critical_section.sharp:4:4: note:  
		def critical_section(block : ()()) {
		   ^

0 [0x0]: line: 5 movg @23 // @std.io#__srt_global   : protected asm start: try start: try block start
1 [0x1]: line: 6 movn #0   
3 [0x3]:         _lck    
4 [0x4]: line: 11 ipushl #0   : protected asm end
5 [0x5]:          loadval ebx   
6 [0x6]:          calld ebx   
7 [0x7]:          jmp @8   : try block end
8 [0x8]:          movl 1   : try end
9 [0x9]:          del   
10 [0xa]: line: 13 movg @23 // @std.io#__srt_global   : protected asm start: finally start
11 [0xb]:          movn #0   
13 [0xd]:          _ulck   
14 [0xe]:          movl 1   : protected asm end
15 [0xf]:          checknull   
16 [0x10]:          je 19   
17 [0x11]:          pushobj   
18 [0x12]:          ret ERR   
19 [0x13]:          nop   : finally end
20 [0x14]:          ret   


function: std.io#__srt_global.critical_section[2055] params(2) in file: lib\support\/0.2.9//io//critical_section.sharp:21:4: note:  
		def critical_section(block : ()(), lock_obj : object) {
		   ^

0 [0x0]: line: 22 movl 1   : protected asm start: try start: try block start
1 [0x1]: line: 23 _lck    
2 [0x2]: line: 27 ipushl #0   : protected asm end
3 [0x3]:          loadval ebx   
4 [0x4]:          calld ebx   
5 [0x5]:          jmp @6   : try block end
6 [0x6]:          movl 2   : try end
7 [0x7]:          del   
8 [0x8]: line: 29 movl 1   : protected asm start: finally start
9 [0x9]:          _ulck   
10 [0xa]:          movl 2   : protected asm end
11 [0xb]:          checknull   
12 [0xc]:          je 15   
13 [0xd]:          pushobj   
14 [0xe]:          ret ERR   
15 [0xf]:          nop   : finally end
16 [0x10]:          ret   


constructor: std.io.fiber#fiber.fiber[2056] params(0) in file: lib\support\/0.2.9//io//fiber//fiber.sharp:12:17: note:  
		   private fiber() {}
		                ^

0 [0x0]:         new_class @75 // std#string   
2 [0x2]:         dup    
3 [0x3]:         newstr @55 //    
4 [0x4]:         call @3546 // <std#string.string>   
5 [0x5]:         movl 0   
6 [0x6]:         movn #0   
8 [0x8]:         popobj   
9 [0x9]:         movi #-1, ebx   
11 [0xb]:         movl 0   
12 [0xc]:         movn #1   
14 [0xe]:         movi #0, adx   
16 [0x10]:         rmov adx, ebx   
17 [0x11]:         pushl 0   
18 [0x12]:         ret   


constructor: std.io.fiber#fiber.fiber[2057] params(2) in file: lib\support\/0.2.9//io//fiber//fiber.sharp:20:9: note:  
		   fiber(name : string, main : (object[])(var)) {
		        ^

0 [0x0]:         new_class @75 // std#string   
2 [0x2]:         dup    
3 [0x3]:         newstr @55 //    
4 [0x4]:         call @3546 // <std#string.string>   
5 [0x5]:         movl 0   
6 [0x6]:         movn #0   
8 [0x8]:         popobj   
9 [0x9]:         movi #-1, ebx   
11 [0xb]:         movl 0   
12 [0xc]:         movn #1   
14 [0xe]:         movi #0, adx   
16 [0x10]:         rmov adx, ebx   
17 [0x11]:         pushl 0   
18 [0x12]: line: 21 pushl 1   
19 [0x13]:          movl 0   
20 [0x14]:          movn #0   
22 [0x16]:          popobj   
23 [0x17]: line: 22 ipushl #2   
24 [0x18]:          movl 0   
25 [0x19]:          movn #2   
27 [0x1b]:          loadval ebx   
28 [0x1c]:          movi #0, adx   
30 [0x1e]:          rmov adx, ebx   
31 [0x1f]:          ret   


constructor: std.io.fiber#fiber.fiber[2058] params(3) in file: lib\support\/0.2.9//io//fiber//fiber.sharp:25:9: note:  
		   fiber(name : string, t: thread, main : (object[])(var)) {
		        ^

0 [0x0]:         new_class @75 // std#string   
2 [0x2]:         dup    
3 [0x3]:         newstr @55 //    
4 [0x4]:         call @3546 // <std#string.string>   
5 [0x5]:         movl 0   
6 [0x6]:         movn #0   
8 [0x8]:         popobj   
9 [0x9]:         movi #-1, ebx   
11 [0xb]:         movl 0   
12 [0xc]:         movn #1   
14 [0xe]:         movi #0, adx   
16 [0x10]:         rmov adx, ebx   
17 [0x11]:         pushl 0   
18 [0x12]: line: 26 pushl 1   
19 [0x13]:          movl 0   
20 [0x14]:          movn #0   
22 [0x16]:          popobj   
23 [0x17]: line: 27 ipushl #3   
24 [0x18]:          movl 0   
25 [0x19]:          movn #2   
27 [0x1b]:          loadval ebx   
28 [0x1c]:          movi #0, adx   
30 [0x1e]:          rmov adx, ebx   
31 [0x1f]: line: 28 pushl 2   
32 [0x20]:          movl 0   
33 [0x21]:          movn #4   
35 [0x23]:          popobj   
36 [0x24]:          ret   


function: std.io.fiber#fiber.start[2059] params(1) in file: lib\support\/0.2.9//io//fiber//fiber.sharp:31:7: note:  
		   def start(args: object[]) {
		      ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #-1, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 30   
14 [0xe]: line: 33 pushl 0   
15 [0xf]:          movl 0   
16 [0x10]:          movn #4   
18 [0x12]:          pushobj   
19 [0x13]:          pushl 1   
20 [0x14]:          istore 2071   
22 [0x16]:          call @2367 // <platform.kernel#vm.start_fiber>   
23 [0x17]:          movl 0   
24 [0x18]:          movn #1   
26 [0x1a]:          loadval ebx   
27 [0x1b]:          movi #0, adx   
29 [0x1d]:          rmov adx, ebx   
30 [0x1e]:          nop   
31 [0x1f]:          ret   


function: std.io.fiber#fiber.suspend[2060] params(0) in file: lib\support\/0.2.9//io//fiber//fiber.sharp:36:7: note:  
		   def suspend() : var {
		      ^

0 [0x0]: line: 37 pushl 0   
1 [0x1]:          call @2368 // <platform.kernel#vm.suspend_fiber>   
2 [0x2]:          loadval ebx   
3 [0x3]:          return_val ebx   
4 [0x4]:          ret   


function: std.io.fiber#fiber.unsuspend[2061] params(0) in file: lib\support\/0.2.9//io//fiber//fiber.sharp:40:7: note:  
		   def unsuspend() : var {
		      ^

0 [0x0]: line: 41 pushl 0   
1 [0x1]:          call @2369 // <platform.kernel#vm.unsuspend_fiber>   
2 [0x2]:          loadval ebx   
3 [0x3]:          return_val ebx   
4 [0x4]:          ret   


function: std.io.fiber#fiber.kill[2062] params(0) in file: lib\support\/0.2.9//io//fiber//fiber.sharp:44:7: note:  
		   def kill() : var {
		      ^

0 [0x0]: line: 45 pushl 0   
1 [0x1]:          call @2370 // <platform.kernel#vm.kill_fiber>   
2 [0x2]:          ipopl 1   
3 [0x3]: line: 46 ipushl #1   
4 [0x4]:          movi #0, ebx   
6 [0x6]:          loadval ecx   
7 [0x7]:          test ecx, ebx   
8 [0x8]:          movr ebx, cmt   
9 [0x9]:          movr cmt, ebx   
10 [0xa]:          jne 19   
11 [0xb]: line: 47 movi #-1, ebx   
13 [0xd]:          movl 0   
14 [0xe]:          movn #1   
16 [0x10]:          movi #0, adx   
18 [0x12]:          rmov adx, ebx   
19 [0x13]:          nop   
20 [0x14]: line: 48 loadl ebx, fp+1   
21 [0x15]:          return_val ebx   
22 [0x16]:          ret   


function: std.io.fiber#fiber._lock[2063] params(0) in file: lib\support\/0.2.9//io//fiber//fiber.sharp:51:14: note:  
		   static def _lock() {
		             ^

0 [0x0]: line: 52 movg @25 // @std.io.fiber#__srt_global   
1 [0x1]:          movn #2   
3 [0x3]:          pushobj   
4 [0x4]:          call @2343 // <std#_object_._lock>   
5 [0x5]: line: 53 call @2069 // <std.io.fiber#fiber.current>   
6 [0x6]:          popobj2    
7 [0x7]:          movn #1   
9 [0x9]:          movi #0, adx   
11 [0xb]:          iaload ebx, adx   
12 [0xc]:          smovr_2 ebx, fp+0   
13 [0xd]: line: 54 movg @25 // @std.io.fiber#__srt_global   
14 [0xe]: line: 55 movn #1   
16 [0x10]:          movi #0, adx   
18 [0x12]:          iaload ebx, adx   
19 [0x13]:          rstore ebx   
20 [0x14]:          movi #-1, ebx   
22 [0x16]:          loadval ecx   
23 [0x17]:          tne ecx, ebx   
24 [0x18]:          movr ebx, cmt   
25 [0x19]:          movr cmt, ebx   
26 [0x1a]:          jne 31   
27 [0x1b]: line: 56 istore 2   
29 [0x1d]:          call @2072 // <std.io.fiber#__srt_global.delay>   
30 [0x1e]:          jmp @13   
31 [0x1f]: line: 59 ipushl #0   
32 [0x20]:          movg @25 // @std.io.fiber#__srt_global   
33 [0x21]:          movn #1   
35 [0x23]:          loadval ebx   
36 [0x24]:          movi #0, adx   
38 [0x26]:          rmov adx, ebx   
39 [0x27]: line: 60 movg @25 // @std.io.fiber#__srt_global   
40 [0x28]:          movn #1   
42 [0x2a]:          movi #0, adx   
44 [0x2c]:          iaload ebx, adx   
45 [0x2d]:          rstore ebx   
46 [0x2e]:          loadl ebx, fp+0   
47 [0x2f]:          loadval ecx   
48 [0x30]:          tne ecx, ebx   
49 [0x31]:          movr ebx, cmt   
50 [0x32]:          movr cmt, ebx   
51 [0x33]:          jne 53   
52 [0x34]: line: 61 jmp @13   
53 [0x35]:          nop   
54 [0x36]: line: 62 movg @25 // @std.io.fiber#__srt_global   
55 [0x37]:          movn #0   
57 [0x39]:          movi #0, adx   
59 [0x3b]:          iaload ebx, adx   
60 [0x3c]:          movr egx, ebx   
61 [0x3d]:          inc ebx   
62 [0x3e]:          movi #0, adx   
64 [0x40]:          rmov adx, ebx   
65 [0x41]:          ret   


function: std.io.fiber#fiber.unlock[2064] params(0) in file: lib\support\/0.2.9//io//fiber//fiber.sharp:65:14: note:  
		   static def unlock() {
		             ^

0 [0x0]: line: 66 movg @25 // @std.io.fiber#__srt_global   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          gt ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 26   
14 [0xe]: line: 67 movg @25 // @std.io.fiber#__srt_global   
15 [0xf]:          movn #0   
17 [0x11]:          movi #0, adx   
19 [0x13]:          iaload ebx, adx   
20 [0x14]:          movr egx, ebx   
21 [0x15]:          dec ebx   
22 [0x16]:          movi #0, adx   
24 [0x18]:          rmov adx, ebx   
25 [0x19]:          jmp @35   
26 [0x1a]: line: 69 istore 4294967295   
28 [0x1c]:          movg @25 // @std.io.fiber#__srt_global   
29 [0x1d]:          movn #1   
31 [0x1f]:          loadval ebx   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          nop   
36 [0x24]: line: 70 movg @25 // @std.io.fiber#__srt_global   
37 [0x25]:          movn #2   
39 [0x27]:          pushobj   
40 [0x28]:          call @2344 // <std#_object_._unlock>   
41 [0x29]:          ret   


function: std.io.fiber#fiber.bind[2065] params(1) in file: lib\support\/0.2.9//io//fiber//fiber.sharp:73:7: note:  
		   def bind(t: thread) : var {
		      ^

0 [0x0]: line: 74 pushl 0   
1 [0x1]:          pushl 1   
2 [0x2]:          call @2371 // <platform.kernel#vm.bind_fiber>   
3 [0x3]:          ipopl 2   
4 [0x4]: line: 75 ipushl #2   
5 [0x5]:          movi #0, ebx   
7 [0x7]:          loadval ecx   
8 [0x8]:          test ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          movr cmt, ebx   
11 [0xb]:          jne 17   
12 [0xc]: line: 76 pushl 1   
13 [0xd]:          movl 0   
14 [0xe]:          movn #4   
16 [0x10]:          popobj   
17 [0x11]:          nop   
18 [0x12]: line: 77 loadl ebx, fp+2   
19 [0x13]:          return_val ebx   
20 [0x14]:          ret   


function: std.io.fiber#fiber.join[2066] params(0) in file: lib\support\/0.2.9//io//fiber//fiber.sharp:80:7: note:  
		   def join() {
		      ^

0 [0x0]: line: 81 movi #1, ebx   
2 [0x2]:          movr cmt, ebx   
3 [0x3]:          jne 24   
4 [0x4]: line: 82 movl 0   
5 [0x5]:          movn #1   
7 [0x7]:          movi #0, adx   
9 [0x9]:          iaload ebx, adx   
10 [0xa]:          rstore ebx   
11 [0xb]:          movi #-1, ebx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 19   
18 [0x12]: line: 83 jmp @24   
19 [0x13]:          nop   
20 [0x14]: line: 84 istore 10   
22 [0x16]:          call @2072 // <std.io.fiber#__srt_global.delay>   
23 [0x17]:          jmp @0   
24 [0x18]:          ret   


function: std.io.fiber#fiber.unbind[2067] params(0) in file: lib\support\/0.2.9//io//fiber//fiber.sharp:88:7: note:  
		   def unbind() : var {
		      ^

0 [0x0]: line: 89 pushl 0   
1 [0x1]:          pushnull    
2 [0x2]:          call @2371 // <platform.kernel#vm.bind_fiber>   
3 [0x3]:          loadval ebx   
4 [0x4]:          return_val ebx   
5 [0x5]:          ret   


function: std.io.fiber#fiber.get_state[2068] params(0) in file: lib\support\/0.2.9//io//fiber//fiber.sharp:92:7: note:  
		   def get_state() : fiber_state {
		      ^

0 [0x0]: line: 93 pushl 0   
1 [0x1]:          call @2373 // <platform.kernel#vm.get_fiber_state>   
2 [0x2]:          ipopl 1   
3 [0x3]: line: 95 ipushl #1   
4 [0x4]:          movi #0, ebx   
6 [0x6]:          loadval ecx   
7 [0x7]:          test ecx, ebx   
8 [0x8]:          movr ebx, cmt   
9 [0x9]:          movr cmt, ebx   
10 [0xa]:          jne 17   
11 [0xb]: line: 97 movg @27 // @std.io.fiber#fiber_state   
12 [0xc]:          movn #0   
14 [0xe]:          returnobj   
15 [0xf]:          ret   
16 [0x10]:          jmp @64   
17 [0x11]:          ipushl #1   
18 [0x12]:          movi #1, ebx   
20 [0x14]:          loadval ecx   
21 [0x15]:          test ecx, ebx   
22 [0x16]:          movr ebx, cmt   
23 [0x17]:          movr cmt, ebx   
24 [0x18]:          jne 31   
25 [0x19]: line: 100 movg @27 // @std.io.fiber#fiber_state   
26 [0x1a]:           movn #1   
28 [0x1c]:           returnobj   
29 [0x1d]:           ret   
30 [0x1e]:           jmp @64   
31 [0x1f]:           ipushl #1   
32 [0x20]:           movi #2, ebx   
34 [0x22]:           loadval ecx   
35 [0x23]:           test ecx, ebx   
36 [0x24]:           movr ebx, cmt   
37 [0x25]:           movr cmt, ebx   
38 [0x26]:           jne 45   
39 [0x27]: line: 103 movg @27 // @std.io.fiber#fiber_state   
40 [0x28]:           movn #2   
42 [0x2a]:           returnobj   
43 [0x2b]:           ret   
44 [0x2c]:           jmp @64   
45 [0x2d]:           ipushl #1   
46 [0x2e]:           movi #3, ebx   
48 [0x30]:           loadval ecx   
49 [0x31]:           test ecx, ebx   
50 [0x32]:           movr ebx, cmt   
51 [0x33]:           movr cmt, ebx   
52 [0x34]:           jne 59   
53 [0x35]: line: 106 movg @27 // @std.io.fiber#fiber_state   
54 [0x36]:           movn #3   
56 [0x38]:           returnobj   
57 [0x39]:           ret   
58 [0x3a]:           jmp @64   
59 [0x3b]: line: 109 movg @27 // @std.io.fiber#fiber_state   
60 [0x3c]:           movn #4   
62 [0x3e]:           returnobj   
63 [0x3f]:           ret   
64 [0x40]:           nop   


function: std.io.fiber#fiber.current[2069] params(0) in file: lib\support\/0.2.9//io//fiber//fiber.sharp:114:14: note:  
		   static def current() : fiber {
		             ^

0 [0x0]: line: 115 call @2374 // <platform.kernel#vm.current_fiber>   
1 [0x1]:           popobj2    
2 [0x2]:           returnobj   
3 [0x3]:           ret   


function: std.io.fiber#fiber.poll[2070] params(1) in file: lib\support\/0.2.9//io//fiber//fiber.sharp:118:14: note:  
		   static def poll(t: thread) : var {
		             ^

0 [0x0]: line: 119 pushl 0   
1 [0x1]:           call @2372 // <platform.kernel#vm.get_bound_fibers>   
2 [0x2]:           loadval ebx   
3 [0x3]:           return_val ebx   
4 [0x4]:           ret   


function: std.io.fiber#fiber.fiber_main[2071] params(1) in file: lib\support\/0.2.9//io//fiber//fiber.sharp:122:22: note:  
		   private static def fiber_main(args : object[]) {
		                     ^

0 [0x0]: line: 123 call @2069 // <std.io.fiber#fiber.current>   
1 [0x1]: line: 124 popobj2    
2 [0x2]:           smovr_3 fp+1   
3 [0x3]: line: 126 movl 1   : try start: try block start
4 [0x4]: line: 127 movn #2   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           rstore ebx   
10 [0xa]:           pushl 0   
11 [0xb]:           smov ebx, sp+[-1]   
12 [0xc]:           calld ebx   
13 [0xd]:           swap    
14 [0xe]:           pop   
15 [0xf]:           movl 1   
16 [0x10]:           movn #3   
18 [0x12]:           loadval ebx   
19 [0x13]:           movi #0, adx   
21 [0x15]:           rmov adx, ebx   
22 [0x16]:           jmp @42   : try block end
23 [0x17]: line: 129 movi #-1, ebx   : catch(std#throwable)
25 [0x19]:           movl 1   
26 [0x1a]:           movn #1   
28 [0x1c]:           movi #0, adx   
30 [0x1e]:           rmov adx, ebx   
31 [0x1f]: line: 130 movi #300, ebx   
33 [0x21]:           movl 1   
34 [0x22]:           movn #3   
36 [0x24]:           movi #0, adx   
38 [0x26]:           rmov adx, ebx   
39 [0x27]: line: 131 pushl 2   
40 [0x28]:           throw    
41 [0x29]:           jmp @42   
42 [0x2a]:           nop   : try end
43 [0x2b]: line: 134 movi #-1, ebx   
45 [0x2d]:           movl 1   
46 [0x2e]:           movn #1   
48 [0x30]:           movi #0, adx   
50 [0x32]:           rmov adx, ebx   
51 [0x33]:           ret   


function: std.io.fiber#__srt_global.delay[2072] params(1) in file: lib\support\/0.2.9//io//fiber//fiber.sharp:138:4: note:  
		def delay(mills: var) {
		   ^

0 [0x0]: line: 139 loadl ebx, fp+0   : protected asm start
1 [0x1]:           int 0x44   
2 [0x2]:           ret   : protected asm end


function: std.io.fiber#__srt_global.slice[2073] params(1) in file: lib\support\/0.2.9//io//fiber//slice.sharp:6:4: note:  
		def slice(main: (object[])(var)) : fiber {
		   ^

0 [0x0]: line: 7 new_class @26 // std.io.fiber#fiber   
2 [0x2]:         dup    
3 [0x3]:         new_class @75 // std#string   
5 [0x5]:         dup    
6 [0x6]:         newstr @64 // fiber   
7 [0x7]:         call @3546 // <std#string.string>   
8 [0x8]:         movg @25 // @std.io.fiber#__srt_global   
9 [0x9]:         movn #3   
11 [0xb]:         movi #0, adx   
13 [0xd]:         iaload ebx, adx   
14 [0xe]:         movr egx, ebx   
15 [0xf]:         inc ebx   
16 [0x10]:         movi #0, adx   
18 [0x12]:         rmov adx, ebx   
19 [0x13]:         rstore egx   
20 [0x14]:         call @3578 // <std#string.operator+>   
21 [0x15]:         ipushl #0   
22 [0x16]:         call @2057 // <std.io.fiber#fiber.fiber>   
23 [0x17]:         popobj2    
24 [0x18]:         smovr_3 fp+1   
25 [0x19]: line: 8 pushl 1   
26 [0x1a]:         pushnull    
27 [0x1b]:         call @2059 // <std.io.fiber#fiber.start>   
28 [0x1c]: line: 9 movl 1   
29 [0x1d]:         returnobj   
30 [0x1e]:         ret   


function: std.io.fiber#__srt_global.slice[2074] params(2) in file: lib\support\/0.2.9//io//fiber//slice.sharp:12:4: note:  
		def slice(main: (object[])(var), args: object[]) : fiber {
		   ^

0 [0x0]: line: 13 new_class @26 // std.io.fiber#fiber   
2 [0x2]:          dup    
3 [0x3]:          new_class @75 // std#string   
5 [0x5]:          dup    
6 [0x6]:          newstr @64 // fiber   
7 [0x7]:          call @3546 // <std#string.string>   
8 [0x8]:          movg @25 // @std.io.fiber#__srt_global   
9 [0x9]:          movn #3   
11 [0xb]:          movi #0, adx   
13 [0xd]:          iaload ebx, adx   
14 [0xe]:          movr egx, ebx   
15 [0xf]:          inc ebx   
16 [0x10]:          movi #0, adx   
18 [0x12]:          rmov adx, ebx   
19 [0x13]:          rstore egx   
20 [0x14]:          call @3578 // <std#string.operator+>   
21 [0x15]:          ipushl #0   
22 [0x16]:          call @2057 // <std.io.fiber#fiber.fiber>   
23 [0x17]:          popobj2    
24 [0x18]:          smovr_3 fp+2   
25 [0x19]: line: 14 pushl 2   
26 [0x1a]:          pushl 1   
27 [0x1b]:          call @2059 // <std.io.fiber#fiber.start>   
28 [0x1c]: line: 15 movl 2   
29 [0x1d]:          returnobj   
30 [0x1e]:          ret   


function: std.io.fiber#__srt_global.slice[2075] params(2) in file: lib\support\/0.2.9//io//fiber//slice.sharp:18:4: note:  
		def slice(main: (object[])(var), t: thread) : fiber {
		   ^

0 [0x0]: line: 19 new_class @26 // std.io.fiber#fiber   
2 [0x2]:          dup    
3 [0x3]:          new_class @75 // std#string   
5 [0x5]:          dup    
6 [0x6]:          newstr @64 // fiber   
7 [0x7]:          call @3546 // <std#string.string>   
8 [0x8]:          movg @25 // @std.io.fiber#__srt_global   
9 [0x9]:          movn #3   
11 [0xb]:          movi #0, adx   
13 [0xd]:          iaload ebx, adx   
14 [0xe]:          movr egx, ebx   
15 [0xf]:          inc ebx   
16 [0x10]:          movi #0, adx   
18 [0x12]:          rmov adx, ebx   
19 [0x13]:          rstore egx   
20 [0x14]:          call @3578 // <std#string.operator+>   
21 [0x15]:          pushl 1   
22 [0x16]:          ipushl #0   
23 [0x17]:          call @2058 // <std.io.fiber#fiber.fiber>   
24 [0x18]:          popobj2    
25 [0x19]:          smovr_3 fp+2   
26 [0x1a]: line: 20 pushl 2   
27 [0x1b]:          pushnull    
28 [0x1c]:          call @2059 // <std.io.fiber#fiber.start>   
29 [0x1d]: line: 21 movl 2   
30 [0x1e]:          returnobj   
31 [0x1f]:          ret   


function: std.io.fiber#__srt_global.slice[2076] params(3) in file: lib\support\/0.2.9//io//fiber//slice.sharp:24:4: note:  
		def slice(main: (object[])(var), t: thread, args: object[]) : fiber {
		   ^

0 [0x0]: line: 25 new_class @26 // std.io.fiber#fiber   
2 [0x2]:          dup    
3 [0x3]:          new_class @75 // std#string   
5 [0x5]:          dup    
6 [0x6]:          newstr @64 // fiber   
7 [0x7]:          call @3546 // <std#string.string>   
8 [0x8]:          movg @25 // @std.io.fiber#__srt_global   
9 [0x9]:          movn #3   
11 [0xb]:          movi #0, adx   
13 [0xd]:          iaload ebx, adx   
14 [0xe]:          movr egx, ebx   
15 [0xf]:          inc ebx   
16 [0x10]:          movi #0, adx   
18 [0x12]:          rmov adx, ebx   
19 [0x13]:          rstore egx   
20 [0x14]:          call @3578 // <std#string.operator+>   
21 [0x15]:          pushl 1   
22 [0x16]:          ipushl #0   
23 [0x17]:          call @2058 // <std.io.fiber#fiber.fiber>   
24 [0x18]:          popobj2    
25 [0x19]:          smovr_3 fp+3   
26 [0x1a]: line: 26 pushl 3   
27 [0x1b]:          pushl 2   
28 [0x1c]:          call @2059 // <std.io.fiber#fiber.start>   
29 [0x1d]: line: 27 movl 3   
30 [0x1e]:          returnobj   
31 [0x1f]:          ret   


constructor: std.io#file.file[2077] params(1) in file: lib\support\/0.2.9//io//file.sharp:23:9: note:  
		    file(path: string) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 24 pushl 0   
2 [0x2]:          pushl 1   
3 [0x3]:          call @2081 // <std.io#file.update_path>   
4 [0x4]:          ret   


constructor: std.io#file.file[2078] params(1) in file: lib\support\/0.2.9//io//file.sharp:27:9: note:  
		    file(path: _int8[]) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 28 pushl 0   
2 [0x2]:          new_class @75 // std#string   
4 [0x4]:          dup    
5 [0x5]:          newstr @55 //    
6 [0x6]:          call @3546 // <std#string.string>   
7 [0x7]:          pushl 1   
8 [0x8]:          call @3558 // <std#string.operator+>   
9 [0x9]:          call @2081 // <std.io#file.update_path>   
10 [0xa]:          ret   


function: std.io#file.get_name[2079] params(0) in file: lib\support\/0.2.9//io//file.sharp:31:8: note:  
		    def get_name() : string {
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          pushnull    
5 [0x5]:          itest ebx   
6 [0x6]:          skpe ebx // pc = 19   
7 [0x7]:          movl 0   
8 [0x8]:          movn #0   
10 [0xa]:          pushobj   
11 [0xb]:          call @3587 // <std#string.size>   
12 [0xc]:          loadval ebx   
13 [0xd]:          rstore ebx   
14 [0xe]:          movi #0, ebx   
16 [0x10]:          loadval ecx   
17 [0x11]:          test ecx, ebx   
18 [0x12]:          movr ebx, cmt   
19 [0x13]:          movr cmt, ebx   
20 [0x14]:          jne 25   
21 [0x15]: line: 33 pushnull    
22 [0x16]:          popobj2    
23 [0x17]:          returnobj   
24 [0x18]:          ret   
25 [0x19]:          nop   
26 [0x1a]: line: 36 movl 0   
27 [0x1b]:          movn #0   
29 [0x1d]:          pushobj   
30 [0x1e]:          call @3587 // <std#string.size>   
31 [0x1f]:          loadval ebx   
32 [0x20]:          rstore ebx   
33 [0x21]:          movi #1, ebx   
35 [0x23]:          loadval ecx   
36 [0x24]:          sub ecx, ebx -> ebx   
37 [0x25]:          smovr_2 ebx, fp+1   
38 [0x26]:          ipushl #1   
39 [0x27]:          movi #0, ebx   
41 [0x29]:          loadval ecx   
42 [0x2a]:          gt ecx, ebx   
43 [0x2b]:          movr ebx, cmt   
44 [0x2c]:          movr cmt, ebx   
45 [0x2d]:          jne 90   
46 [0x2e]: line: 37 movl 0   
47 [0x2f]:          movn #0   
49 [0x31]:          pushobj   
50 [0x32]:          ipushl #1   
51 [0x33]:          call @3569 // <std#string.operator[>   
52 [0x34]:          loadval ebx   
53 [0x35]:          rstore ebx   
54 [0x36]:          movg @28 // @std.io#file   
55 [0x37]:          movn #1   
57 [0x39]:          movi #0, adx   
59 [0x3b]:          iaload ebx, adx   
60 [0x3c]:          loadval ecx   
61 [0x3d]:          test ecx, ebx   
62 [0x3e]:          movr ebx, cmt   
63 [0x3f]:          movr cmt, ebx   
64 [0x40]:          jne 84   
65 [0x41]: line: 38 movl 0   
66 [0x42]:          movn #0   
68 [0x44]:          pushobj   
69 [0x45]:          ipushl #1   
70 [0x46]:          movi #1, ebx   
72 [0x48]:          loadval ecx   
73 [0x49]:          add ecx, ebx -> ebx   
74 [0x4a]:          rstore ebx   
75 [0x4b]:          movl 0   
76 [0x4c]:          movn #0   
78 [0x4e]:          pushobj   
79 [0x4f]:          call @3587 // <std#string.size>   
80 [0x50]:          call @3601 // <std#string.substring>   
81 [0x51]:          popobj2    
82 [0x52]:          returnobj   
83 [0x53]:          ret   
84 [0x54]:          nop   
85 [0x55]:          loadl ebx, fp+1   
86 [0x56]:          movr egx, ebx   
87 [0x57]:          dec ebx   
88 [0x58]:          smovr_2 ebx, fp+1   
89 [0x59]:          jmp @38   
90 [0x5a]: line: 42 movl 0   
91 [0x5b]:          movn #0   
93 [0x5d]:          returnobj   
94 [0x5e]:          ret   


function: std.io#file.to_string[2080] params(0) in file: lib\support\/0.2.9//io//file.sharp:45:8: note:  
		    def to_string() := path;
		       ^

0 [0x0]: line: 45 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          returnobj   
4 [0x4]:          ret   


function: std.io#file.update_path[2081] params(1) in file: lib\support\/0.2.9//io//file.sharp:47:5: note:  
			def update_path(path: string) {
		    ^

0 [0x0]: line: 48 movl 1   
1 [0x1]:          checknull   
2 [0x2]:          movr cmt, ebx   
3 [0x3]:          jne 10   
4 [0x4]: line: 49 new_class @9 // std#nullptr_exception   
6 [0x6]:          dup    
7 [0x7]:          newstr @65 // file path cannot be null   
8 [0x8]:          call @1976 // <std#nullptr_exception.nullptr_exception>   
9 [0x9]:          throw    
10 [0xa]:          nop   
11 [0xb]: line: 51 pushl 1   
12 [0xc]:          call @3554 // <std#string.empty>   
13 [0xd]:          loadval ebx   
14 [0xe]:          movr cmt, ebx   
15 [0xf]:          jne 22   
16 [0x10]: line: 52 new_class @9 // std#nullptr_exception   
18 [0x12]:          dup    
19 [0x13]:          newstr @66 // file path cannot be empty   
20 [0x14]:          call @1976 // <std#nullptr_exception.nullptr_exception>   
21 [0x15]:          throw    
22 [0x16]:          nop   
23 [0x17]: line: 53 movg @28 // @std.io#file   
24 [0x18]:          movn #0   
26 [0x1a]:          pushobj   
27 [0x1b]:          pushl 1   
28 [0x1c]:          invoke_delegate 2121 { static=0, args=1 }   
30 [0x1e]:          movl 0   
31 [0x1f]:          movn #0   
33 [0x21]:          popobj   
34 [0x22]:          ret   


function: std.io#file.get_parent_file[2082] params(0) in file: lib\support\/0.2.9//io//file.sharp:56:8: note:  
		    def get_parent_file() : file {
		       ^

0 [0x0]: line: 57 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          pushnull    
5 [0x5]:          itest ebx   
6 [0x6]:          skpe ebx // pc = 19   
7 [0x7]:          movl 0   
8 [0x8]:          movn #0   
10 [0xa]:          pushobj   
11 [0xb]:          call @3587 // <std#string.size>   
12 [0xc]:          loadval ebx   
13 [0xd]:          rstore ebx   
14 [0xe]:          movi #0, ebx   
16 [0x10]:          loadval ecx   
17 [0x11]:          test ecx, ebx   
18 [0x12]:          movr ebx, cmt   
19 [0x13]:          movr cmt, ebx   
20 [0x14]:          jne 25   
21 [0x15]: line: 58 pushnull    
22 [0x16]:          popobj2    
23 [0x17]:          returnobj   
24 [0x18]:          ret   
25 [0x19]:          nop   
26 [0x1a]: line: 61 movl 0   
27 [0x1b]:          movn #0   
29 [0x1d]:          pushobj   
30 [0x1e]:          call @3587 // <std#string.size>   
31 [0x1f]:          loadval ebx   
32 [0x20]:          rstore ebx   
33 [0x21]:          movi #1, ebx   
35 [0x23]:          loadval ecx   
36 [0x24]:          sub ecx, ebx -> ebx   
37 [0x25]:          smovr_2 ebx, fp+1   
38 [0x26]:          ipushl #1   
39 [0x27]:          movi #0, ebx   
41 [0x29]:          loadval ecx   
42 [0x2a]:          gt ecx, ebx   
43 [0x2b]:          movr ebx, cmt   
44 [0x2c]:          movr cmt, ebx   
45 [0x2d]:          jne 91   
46 [0x2e]: line: 62 movl 0   
47 [0x2f]:          movn #0   
49 [0x31]:          pushobj   
50 [0x32]:          ipushl #1   
51 [0x33]:          call @3569 // <std#string.operator[>   
52 [0x34]:          loadval ebx   
53 [0x35]:          rstore ebx   
54 [0x36]:          movg @28 // @std.io#file   
55 [0x37]:          movn #1   
57 [0x39]:          movi #0, adx   
59 [0x3b]:          iaload ebx, adx   
60 [0x3c]:          loadval ecx   
61 [0x3d]:          test ecx, ebx   
62 [0x3e]:          movr ebx, cmt   
63 [0x3f]:          movr cmt, ebx   
64 [0x40]:          jne 85   
65 [0x41]: line: 63 new_class @28 // std.io#file   
67 [0x43]:          dup    
68 [0x44]:          movl 0   
69 [0x45]:          movn #0   
71 [0x47]:          pushobj   
72 [0x48]:          istore 0   
74 [0x4a]:          ipushl #1   
75 [0x4b]:          movi #1, ebx   
77 [0x4d]:          loadval ecx   
78 [0x4e]:          add ecx, ebx -> ebx   
79 [0x4f]:          rstore ebx   
80 [0x50]:          call @3601 // <std#string.substring>   
81 [0x51]:          call @2077 // <std.io#file.file>   
82 [0x52]:          popobj2    
83 [0x53]:          returnobj   
84 [0x54]:          ret   
85 [0x55]:          nop   
86 [0x56]:          loadl ebx, fp+1   
87 [0x57]:          movr egx, ebx   
88 [0x58]:          dec ebx   
89 [0x59]:          smovr_2 ebx, fp+1   
90 [0x5a]:          jmp @38   
91 [0x5b]: line: 67 pushnull    
92 [0x5c]:          popobj2    
93 [0x5d]:          returnobj   
94 [0x5e]:          ret   


function: std.io#file.get_path[2083] params(0) in file: lib\support\/0.2.9//io//file.sharp:70:8: note:  
		    def get_path() : string {
		       ^

0 [0x0]: line: 71 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          returnobj   
4 [0x4]:          ret   


function: std.io#file.get_absolute_path[2084] params(0) in file: lib\support\/0.2.9//io//file.sharp:87:8: note:  
		    def get_absolute_path() : string {
		       ^

0 [0x0]: line: 88 movg @28 // @std.io#file   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 0   
5 [0x5]:          call @2122 // <std.io#file_system.resolve>   
6 [0x6]:          popobj2    
7 [0x7]:          returnobj   
8 [0x8]:          ret   


function: std.io#file.is_readable[2085] params(0) in file: lib\support\/0.2.9//io//file.sharp:96:8: note:  
		    def is_readable() : var {
		       ^

0 [0x0]: line: 97 movg @28 // @std.io#file   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 0   
5 [0x5]:          istore 4   
7 [0x7]:          invoke_delegate 2125 { static=0, args=2 }   
9 [0x9]:          loadval ebx   
10 [0xa]:          rstore ebx   
11 [0xb]:          movi #0, ebx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


function: std.io#file.is_writeable[2086] params(0) in file: lib\support\/0.2.9//io//file.sharp:105:8: note:  
		    def is_writeable() : var {
		       ^

0 [0x0]: line: 106 movg @28 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           istore 2   
7 [0x7]:           invoke_delegate 2125 { static=0, args=2 }   
9 [0x9]:           loadval ebx   
10 [0xa]:           rstore ebx   
11 [0xb]:           movi #0, ebx   
13 [0xd]:           loadval ecx   
14 [0xe]:           test ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


function: std.io#file.exists[2087] params(0) in file: lib\support\/0.2.9//io//file.sharp:114:8: note:  
		    def exists() : var {
		       ^

0 [0x0]: line: 115 movg @28 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           ldc ebx // 0   
6 [0x6]:           rstore ebx   
7 [0x7]:           invoke_delegate 2125 { static=0, args=2 }   
9 [0x9]:           loadval ebx   
10 [0xa]:           rstore ebx   
11 [0xb]:           movi #0, ebx   
13 [0xd]:           loadval ecx   
14 [0xe]:           test ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


function: std.io#file.is_directory[2088] params(0) in file: lib\support\/0.2.9//io//file.sharp:123:8: note:  
		    def is_directory() : var {
		       ^

0 [0x0]: line: 124 movg @28 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           invoke_delegate 2124 { static=0, args=1 }   
7 [0x7]:           loadval ebx   
8 [0x8]:           rstore ebx   
9 [0x9]:           movi #4, ebx   
11 [0xb]:           loadval ecx   
12 [0xc]:           uand ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           rstore ebx   
15 [0xf]:           movi #0, ebx   
17 [0x11]:           loadval ecx   
18 [0x12]:           tne ecx, ebx   
19 [0x13]:           return_val cmt   
20 [0x14]:           ret   


function: std.io#file.is_file[2089] params(0) in file: lib\support\/0.2.9//io//file.sharp:133:8: note:  
		    def is_file() : var {
		       ^

0 [0x0]: line: 134 movg @28 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           invoke_delegate 2124 { static=0, args=1 }   
7 [0x7]:           loadval ebx   
8 [0x8]:           rstore ebx   
9 [0x9]:           movi #2, ebx   
11 [0xb]:           loadval ecx   
12 [0xc]:           uand ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           rstore ebx   
15 [0xf]:           movi #0, ebx   
17 [0x11]:           loadval ecx   
18 [0x12]:           tne ecx, ebx   
19 [0x13]:           return_val cmt   
20 [0x14]:           ret   


function: std.io#file.is_hidden[2090] params(0) in file: lib\support\/0.2.9//io//file.sharp:145:8: note:  
		    def is_hidden() : var {
		       ^

0 [0x0]: line: 146 movg @28 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           invoke_delegate 2124 { static=0, args=1 }   
7 [0x7]:           loadval ebx   
8 [0x8]:           rstore ebx   
9 [0x9]:           movi #128, ebx   
11 [0xb]:           loadval ecx   
12 [0xc]:           uand ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           rstore ebx   
15 [0xf]:           movi #0, ebx   
17 [0x11]:           loadval ecx   
18 [0x12]:           tne ecx, ebx   
19 [0x13]:           return_val cmt   
20 [0x14]:           ret   


function: std.io#file.last_modified[2091] params(0) in file: lib\support\/0.2.9//io//file.sharp:154:8: note:  
		    def last_modified() : var {
		       ^

0 [0x0]: line: 155 movg @28 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           ldc ebx // 0   
6 [0x6]:           rstore ebx   
7 [0x7]:           call @2127 // <std.io#file_system.last_modified_time>   
8 [0x8]:           loadval ebx   
9 [0x9]:           return_val ebx   
10 [0xa]:           ret   


function: std.io#file.last_status_changed[2092] params(0) in file: lib\support\/0.2.9//io//file.sharp:158:8: note:  
		    def last_status_changed() : var {
		       ^

0 [0x0]: line: 159 movg @28 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           ldc ebx // 1   
6 [0x6]:           rstore ebx   
7 [0x7]:           call @2127 // <std.io#file_system.last_modified_time>   
8 [0x8]:           loadval ebx   
9 [0x9]:           return_val ebx   
10 [0xa]:           ret   


function: std.io#file.last_accessed[2093] params(0) in file: lib\support\/0.2.9//io//file.sharp:162:8: note:  
		    def last_accessed() : var {
		       ^

0 [0x0]: line: 163 movg @28 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           istore 2   
7 [0x7]:           call @2127 // <std.io#file_system.last_modified_time>   
8 [0x8]:           loadval ebx   
9 [0x9]:           return_val ebx   
10 [0xa]:           ret   


function: std.io#file.length[2094] params(0) in file: lib\support\/0.2.9//io//file.sharp:171:8: note:  
		    def length() : var {
		       ^

0 [0x0]: line: 172 movg @28 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           call @2128 // <std.io#file_system.get_length>   
6 [0x6]:           loadval ebx   
7 [0x7]:           return_val ebx   
8 [0x8]:           ret   


function: std.io#file.create[2095] params(0) in file: lib\support\/0.2.9//io//file.sharp:186:8: note:  
		    def create() {
		       ^

0 [0x0]: line: 187 movg @28 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           movl 0   
5 [0x5]:           movn #0   
7 [0x7]:           pushobj   
8 [0x8]:           call @2129 // <std.io#file_system.create_file>   
9 [0x9]:           ret   


function: std.io#file.delete[2096] params(0) in file: lib\support\/0.2.9//io//file.sharp:196:8: note:  
		    def delete() : var {
		       ^

0 [0x0]: line: 197 movg @28 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           call @2131 // <std.io#file_system.delete>   
6 [0x6]:           loadval ebx   
7 [0x7]:           return_val ebx   
8 [0x8]:           ret   


function: std.io#file.list[2097] params(0) in file: lib\support\/0.2.9//io//file.sharp:212:8: note:  
		    def list() : list<string> {
		       ^

0 [0x0]: line: 213 new_class @110 // std#list<std#string>   
2 [0x2]:           dup    
3 [0x3]:           movg @28 // @std.io#file   
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           pushl 0   
8 [0x8]:           call @2132 // <std.io#file_system.list>   
9 [0x9]:           call @3670 // <std#list<std#string>.list>   
10 [0xa]:           popobj2    
11 [0xb]:           returnobj   
12 [0xc]:           ret   


function: std.io#file.mkdir[2098] params(0) in file: lib\support\/0.2.9//io//file.sharp:220:8: note:  
		    def mkdir() : var {
		       ^

0 [0x0]: line: 221 movg @28 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           call @2133 // <std.io#file_system.create_directory>   
6 [0x6]:           loadval ebx   
7 [0x7]:           return_val ebx   
8 [0x8]:           ret   


function: std.io#file.rename[2099] params(1) in file: lib\support\/0.2.9//io//file.sharp:239:8: note:  
		    def rename(dest: file) : var {
		       ^

0 [0x0]: line: 240 movl 1   
1 [0x1]:           checknull   
2 [0x2]:           movr cmt, ebx   
3 [0x3]:           jne 9   
4 [0x4]: line: 241 new_class @9 // std#nullptr_exception   
6 [0x6]:           dup    
7 [0x7]:           call @1978 // <std#nullptr_exception.nullptr_exception>   
8 [0x8]:           throw    
9 [0x9]:           nop   
10 [0xa]: line: 244 movg @28 // @std.io#file   
11 [0xb]:           movn #0   
13 [0xd]:           pushobj   
14 [0xe]:           pushl 0   
15 [0xf]:           pushl 1   
16 [0x10]:           call @2134 // <std.io#file_system.rename>   
17 [0x11]:           ipopl 2   
18 [0x12]: line: 245 ipushl #2   
19 [0x13]:           movi #0, ebx   
21 [0x15]:           loadval ecx   
22 [0x16]:           test ecx, ebx   
23 [0x17]:           movr ebx, cmt   
24 [0x18]:           movr cmt, ebx   
25 [0x19]:           jne 34   
26 [0x1a]: line: 247 movl 1   
27 [0x1b]:           movn #0   
29 [0x1d]:           pushobj   
30 [0x1e]:           movl 0   
31 [0x1f]:           movn #0   
33 [0x21]:           popobj   
34 [0x22]:           nop   
35 [0x23]: line: 251 loadl ebx, fp+2   
36 [0x24]:           return_val ebx   
37 [0x25]:           ret   


function: std.io#file.set_last_modified[2100] params(1) in file: lib\support\/0.2.9//io//file.sharp:266:8: note:  
		    def set_last_modified(time: var) : var {
		       ^

0 [0x0]: line: 267 loadl ebx, fp+1   
1 [0x1]:           mov32 ebx, ebx   
2 [0x2]:           rstore ebx   
3 [0x3]:           movi #0, ebx   
5 [0x5]:           loadval ecx   
6 [0x6]:           lt ecx, ebx   
7 [0x7]:           movr ebx, cmt   
8 [0x8]:           movr cmt, ebx   
9 [0x9]:           jne 16   
10 [0xa]:           new_class @4 // std#illegal_argument_exception   
12 [0xc]:           dup    
13 [0xd]:           newstr @67 // Negative time   
14 [0xe]:           call @1961 // <std#illegal_argument_exception.illegal_argument_exception>   
15 [0xf]:           throw    
16 [0x10]:           nop   
17 [0x11]: line: 268 movg @28 // @std.io#file   
18 [0x12]:           movn #0   
20 [0x14]:           pushobj   
21 [0x15]:           pushl 0   
22 [0x16]:           ipushl #1   
23 [0x17]:           call @2137 // <std.io#file_system.set_last_modified_time>   
24 [0x18]:           loadval ebx   
25 [0x19]:           return_val ebx   
26 [0x1a]:           ret   


function: std.io#file.set_read_only[2101] params(0) in file: lib\support\/0.2.9//io//file.sharp:279:8: note:  
		    def set_read_only() : var {
		       ^

0 [0x0]: line: 280 movg @28 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           call @2138 // <std.io#file_system.set_read_only>   
6 [0x6]:           loadval ebx   
7 [0x7]:           return_val ebx   
8 [0x8]:           ret   


function: std.io#file.set_writable[2102] params(2) in file: lib\support\/0.2.9//io//file.sharp:288:8: note:  
		    def set_writable(writable: var, owner_only: var) : var {
		       ^

0 [0x0]: line: 289 movg @28 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           istore 2   
7 [0x7]:           ipushl #1   
8 [0x8]:           ipushl #2   
9 [0x9]:           call @2126 // <std.io#file_system.set_permission>   
10 [0xa]:           loadval ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


function: std.io#file.set_writable[2103] params(1) in file: lib\support\/0.2.9//io//file.sharp:297:8: note:  
		    def set_writable(writable: var) : var {
		       ^

0 [0x0]: line: 298 pushl 0   
1 [0x1]:           ipushl #1   
2 [0x2]:           istore 1   
4 [0x4]:           call @2102 // <std.io#file.set_writable>   
5 [0x5]:           loadval ebx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.io#file.set_readable[2104] params(2) in file: lib\support\/0.2.9//io//file.sharp:306:8: note:  
		    def set_readable(readable: var, owner_only: var) : var {
		       ^

0 [0x0]: line: 307 movg @28 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           istore 4   
7 [0x7]:           ipushl #1   
8 [0x8]:           ipushl #2   
9 [0x9]:           call @2126 // <std.io#file_system.set_permission>   
10 [0xa]:           loadval ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


function: std.io#file.set_readable[2105] params(1) in file: lib\support\/0.2.9//io//file.sharp:315:8: note:  
		    def set_readable(readable: var) : var {
		       ^

0 [0x0]: line: 316 pushl 0   
1 [0x1]:           ipushl #1   
2 [0x2]:           istore 1   
4 [0x4]:           call @2104 // <std.io#file.set_readable>   
5 [0x5]:           loadval ebx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.io#file.set_executable[2106] params(2) in file: lib\support\/0.2.9//io//file.sharp:324:8: note:  
		    def set_executable(executable: var, owner_only: var) : var {
		       ^

0 [0x0]: line: 325 movg @28 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           ldc ebx // 1   
6 [0x6]:           rstore ebx   
7 [0x7]:           ipushl #1   
8 [0x8]:           ipushl #2   
9 [0x9]:           call @2126 // <std.io#file_system.set_permission>   
10 [0xa]:           loadval ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


function: std.io#file.set_executable[2107] params(1) in file: lib\support\/0.2.9//io//file.sharp:333:8: note:  
		    def set_executable(executable: var) : var {
		       ^

0 [0x0]: line: 334 pushl 0   
1 [0x1]:           ipushl #1   
2 [0x2]:           istore 1   
4 [0x4]:           call @2106 // <std.io#file.set_executable>   
5 [0x5]:           loadval ebx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.io#file.is_executable[2108] params(0) in file: lib\support\/0.2.9//io//file.sharp:342:8: note:  
		    def is_executable() : var {
		       ^

0 [0x0]: line: 343 movg @28 // @std.io#file   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 0   
5 [0x5]:           ldc ebx // 1   
6 [0x6]:           rstore ebx   
7 [0x7]:           invoke_delegate 2125 { static=0, args=2 }   
9 [0x9]:           loadval ebx   
10 [0xa]:           rstore ebx   
11 [0xb]:           movi #0, ebx   
13 [0xd]:           loadval ecx   
14 [0xe]:           test ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


function: std.io#file.get_total_space[2109] params(0) in file: lib\support\/0.2.9//io//file.sharp:354:8: note:  
		    def get_total_space() : var {
		       ^

0 [0x0]: line: 355 ldc ebx // 0   
1 [0x1]:           rstore ebx   
2 [0x2]:           call @2139 // <std.io#file_system.get_space_available>   
3 [0x3]:           loadval ebx   
4 [0x4]:           return_val ebx   
5 [0x5]:           ret   


function: std.io#file.get_free_space[2110] params(0) in file: lib\support\/0.2.9//io//file.sharp:363:8: note:  
		    def get_free_space() : var {
		       ^

0 [0x0]: line: 364 ldc ebx // 1   
1 [0x1]:           rstore ebx   
2 [0x2]:           call @2139 // <std.io#file_system.get_space_available>   
3 [0x3]:           loadval ebx   
4 [0x4]:           return_val ebx   
5 [0x5]:           ret   


function: std.io#file.get_usable_space[2111] params(0) in file: lib\support\/0.2.9//io//file.sharp:386:8: note:  
		    def get_usable_space() : var {
		       ^

0 [0x0]: line: 387 istore 2   
2 [0x2]:           call @2139 // <std.io#file_system.get_space_available>   
3 [0x3]:           loadval ebx   
4 [0x4]:           return_val ebx   
5 [0x5]:           ret   


function: std.io#file.current_directory[2112] params(0) in file: lib\support\/0.2.9//io//file.sharp:390:15: note:  
		    static def current_directory() : string {
		              ^

0 [0x0]: line: 391 call @2123 // <std.io#file_system.current_directory>   
1 [0x1]:           popobj2    
2 [0x2]:           returnobj   
3 [0x3]:           ret   


function: std.io#file.generate_temp_file[2113] params(3) in file: lib\support\/0.2.9//io//file.sharp:397:22: note:  
		    private static def generate_temp_file(prefix: string, suffix: string, dir: file) : file
		                     ^

0 [0x0]: line: 409 pushnull    
1 [0x1]:           popobj2    
2 [0x2]:           returnobj   
3 [0x3]:           ret   


function: std.io#file.create_temp_file[2114] params(3) in file: lib\support\/0.2.9//io//file.sharp:418:15: note:  
		    static def create_temp_file(prefix: string, suffix: string,
		              ^

0 [0x0]: line: 441 pushnull    
1 [0x1]:           popobj2    
2 [0x2]:           returnobj   
3 [0x3]:           ret   


function: std.io#file.create_temp_file[2115] params(2) in file: lib\support\/0.2.9//io//file.sharp:452:15: note:  
		    static def create_temp_file(prefix: string, suffix: string) : file
		              ^

0 [0x0]: line: 455 pushl 0   
1 [0x1]:           pushl 1   
2 [0x2]:           pushnull    
3 [0x3]:           call @2114 // <std.io#file.create_temp_file>   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   


function: std.io#file.read[2116] params(0) in file: lib\support\/0.2.9//io//file.sharp:458:8: note:  
		    def read() := fs.read(self);
		       ^

0 [0x0]: line: 458 pushl 0   
1 [0x1]:           call @2135 // <std.io#file_system.read>   
2 [0x2]:           popobj2    
3 [0x3]:           returnobj   
4 [0x4]:           ret   


function: std.io#file.write[2117] params(1) in file: lib\support\/0.2.9//io//file.sharp:460:8: note:  
		    def write(data: string) := fs.write(self, data);
		       ^

0 [0x0]: line: 460 pushl 0   
1 [0x1]:           pushl 1   
2 [0x2]:           call @2136 // <std.io#file_system.write>   
3 [0x3]:           loadval ebx   
4 [0x4]:           return_val ebx   
5 [0x5]:           ret   


function: std.io#file.get_file_system[2118] params(0) in file: lib\support\/0.2.9//io//file.sharp:462:23: note:  
		    private static def get_file_system() : file_system {
		                      ^

0 [0x0]: line: 463 call @2348 // <platform#build.is_windows>   
1 [0x1]:           loadval ebx   
2 [0x2]:           movr cmt, ebx   
3 [0x3]:           jne 12   
4 [0x4]: line: 464 new_class @43 // std.io#win_fs   
6 [0x6]:           dup    
7 [0x7]:           call @2310 // <std.io#win_fs.win_fs>   
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   
11 [0xb]:           jmp @19   
12 [0xc]: line: 466 new_class @42 // std.io#unix_fs   
14 [0xe]:           dup    
15 [0xf]:           call @2305 // <std.io#unix_fs.unix_fs>   
16 [0x10]:           popobj2    
17 [0x11]:           returnobj   
18 [0x12]:           ret   
19 [0x13]:           nop   


constructor: std.io#file.file[2119] params(0) in file: lib\support\/0.2.9//io//file.sharp:17:13: note:  
		public class file {
		            ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


std.io#file_system.path_separator[2120] params(0) in file: lib\support\/0.2.9//io//file_system.sharp:18:8: note:  
		    def path_separator() : var;
		       ^



std.io#file_system.normalize[2121] params(1) in file: lib\support\/0.2.9//io//file_system.sharp:24:8: note:  
		    def normalize(path: string) : string;
		       ^



function: std.io#file_system.resolve[2122] params(1) in file: lib\support\/0.2.9//io//file_system.sharp:30:9: note:  
		     def resolve(f: file) : string {
		        ^

0 [0x0]: line: 32 movl 1   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          call @3572 // <std#string.get_data>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+2   
7 [0x7]: line: 38 pushl 2   : protected asm start
8 [0x8]:          int 0x20   
9 [0x9]:          popl 2   : protected asm end
10 [0xa]: line: 44 movl 2   
11 [0xb]:          checknull   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 29   
14 [0xe]: line: 45 new_class @7 // std#io_exception   
16 [0x10]:          dup    
17 [0x11]:          new_class @75 // std#string   
19 [0x13]:          dup    
20 [0x14]:          newstr @68 // file could not be resolved:    
21 [0x15]:          call @3546 // <std#string.string>   
22 [0x16]:          movl 1   
23 [0x17]:          movn #0   
25 [0x19]:          pushobj   
26 [0x1a]:          call @3561 // <std#string.operator+>   
27 [0x1b]:          call @1971 // <std#io_exception.io_exception>   
28 [0x1c]:          throw    
29 [0x1d]:          nop   
30 [0x1e]: line: 48 new_class @75 // std#string   
32 [0x20]:          dup    
33 [0x21]:          newstr @55 //    
34 [0x22]:          call @3546 // <std#string.string>   
35 [0x23]:          pushl 2   
36 [0x24]:          call @3558 // <std#string.operator+>   
37 [0x25]:          popobj2    
38 [0x26]:          returnobj   
39 [0x27]:          ret   


function: std.io#file_system.current_directory[2123] params(0) in file: lib\support\/0.2.9//io//file_system.sharp:51:16: note:  
		     static def current_directory() : string {
		               ^

0 [0x0]: line: 52 movl 0   
1 [0x1]:          del   
2 [0x2]: line: 58 int 0x4f   : protected asm start
3 [0x3]:          popl 0   : protected asm end
4 [0x4]: line: 63 movl 0   
5 [0x5]:          checknull   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 14   
8 [0x8]: line: 64 new_class @7 // std#io_exception   
10 [0xa]:          dup    
11 [0xb]:          newstr @69 // could not retrieve current directory   
12 [0xc]:          call @1970 // <std#io_exception.io_exception>   
13 [0xd]:          throw    
14 [0xe]:          nop   
15 [0xf]: line: 67 new_class @75 // std#string   
17 [0x11]:          dup    
18 [0x12]:          newstr @55 //    
19 [0x13]:          call @3546 // <std#string.string>   
20 [0x14]:          pushl 0   
21 [0x15]:          call @3558 // <std#string.operator+>   
22 [0x16]:          popobj2    
23 [0x17]:          returnobj   
24 [0x18]:          ret   


std.io#file_system.get_attributes[2124] params(1) in file: lib\support\/0.2.9//io//file_system.sharp:86:9: note:  
		     def get_attributes(f: file) : var;
		        ^



std.io#file_system.check_access[2125] params(2) in file: lib\support\/0.2.9//io//file_system.sharp:100:9: note:  
		     def check_access(f: file, access: var) : var;
		        ^



function: std.io#file_system.set_permission[2126] params(4) in file: lib\support\/0.2.9//io//file_system.sharp:107:9: note:  
		     def set_permission(f: file, access: var, enable: var, owneronly: var) : var {
		        ^

0 [0x0]: line: 109 pushl 1   
1 [0x1]:           call @2084 // <std.io#file.get_absolute_path>   
2 [0x2]:           call @3572 // <std#string.get_data>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+5   
5 [0x5]: line: 110 istorel 0, fp+6   
7 [0x7]: line: 112 call @2348 // <platform#build.is_windows>   
8 [0x8]:           loadval ebx   
9 [0x9]:           skne ebx // pc = 15   
10 [0xa]:           ipushl #2   
11 [0xb]:           ldc ebx // 1   
12 [0xc]:           loadval ecx   
13 [0xd]:           test ecx, ebx   
14 [0xe]:           movr ebx, cmt   
15 [0xf]:           movr cmt, ebx   
16 [0x10]:           jne 20   
17 [0x11]: line: 113 istorel -1, fp+0   
19 [0x13]:           ret   
20 [0x14]:           nop   
21 [0x15]: line: 119 pushl 5   : protected asm start
22 [0x16]:           loadl ebx, fp+2   
23 [0x17]:           loadl egx, fp+3   
24 [0x18]:           loadl ecx, fp+4   
25 [0x19]:           int 0x2e   
26 [0x1a]:           smovr_2 ebx, fp+6   
27 [0x1b]: line: 128 loadl ebx, fp+6   : protected asm end
28 [0x1c]:           return_val ebx   
29 [0x1d]:           ret   


function: std.io#file_system.last_modified_time[2127] params(2) in file: lib\support\/0.2.9//io//file_system.sharp:140:9: note:  
		     def last_modified_time(f: file, stat_id: var) : var {
		        ^

0 [0x0]: line: 142 pushl 1   
1 [0x1]:           call @2084 // <std.io#file.get_absolute_path>   
2 [0x2]:           call @3572 // <std#string.get_data>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+3   
5 [0x5]: line: 143 istorel 0, fp+4   
7 [0x7]: line: 149 pushl 3   : protected asm start
8 [0x8]:           loadl ebx, fp+2   
9 [0x9]:           int 0x26   
10 [0xa]:           smovr_2 ebx, fp+4   
11 [0xb]: line: 156 loadl ebx, fp+4   : protected asm end
12 [0xc]:           return_val ebx   
13 [0xd]:           ret   


function: std.io#file_system.get_length[2128] params(1) in file: lib\support\/0.2.9//io//file_system.sharp:164:9: note:  
		     def get_length(f: file) : var {
		        ^

0 [0x0]: line: 166 pushl 1   
1 [0x1]:           call @2084 // <std.io#file.get_absolute_path>   
2 [0x2]:           call @3572 // <std#string.get_data>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+2   
5 [0x5]: line: 167 istorel 0, fp+3   
7 [0x7]: line: 173 pushl 2   : protected asm start
8 [0x8]:           int 0x27   
9 [0x9]:           smovr_2 ebx, fp+3   
10 [0xa]: line: 179 loadl ebx, fp+3   : protected asm end
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


function: std.io#file_system.create_file[2129] params(1) in file: lib\support\/0.2.9//io//file_system.sharp:189:8: note:  
		    def create_file(pathname: string) {
		       ^

0 [0x0]: line: 191 pushl 1   
1 [0x1]:           call @3572 // <std#string.get_data>   
2 [0x2]:           popobj2    
3 [0x3]:           smovr_3 fp+2   
4 [0x4]: line: 197 pushl 2   : protected asm start
5 [0x5]:           int 0x28   
6 [0x6]:           ret   : protected asm end


function: std.io#file_system.delete_directory[2130] params(1) in file: lib\support\/0.2.9//io//file_system.sharp:207:16: note:  
		    private def delete_directory(f: file) : var {
		               ^

0 [0x0]: line: 209 pushl 1   
1 [0x1]:           call @2084 // <std.io#file.get_absolute_path>   
2 [0x2]:           call @3572 // <std#string.get_data>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+2   
5 [0x5]: line: 210 istorel 0, fp+3   
7 [0x7]: line: 216 pushl 2   : protected asm start
8 [0x8]:           int 0x2c   
9 [0x9]:           smovr_2 ebx, fp+3   
10 [0xa]: line: 222 loadl ebx, fp+3   : protected asm end
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


function: std.io#file_system.delete[2131] params(1) in file: lib\support\/0.2.9//io//file_system.sharp:229:8: note:  
		    def delete(f: file) : var {
		       ^

0 [0x0]: line: 231 pushl 1   
1 [0x1]:           call @2084 // <std.io#file.get_absolute_path>   
2 [0x2]:           call @3572 // <std#string.get_data>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+2   
5 [0x5]: line: 232 istorel 0, fp+3   
7 [0x7]: line: 234 pushl 1   
8 [0x8]:           call @2088 // <std.io#file.is_directory>   
9 [0x9]:           loadval ebx   
10 [0xa]:           movr cmt, ebx   
11 [0xb]:           jne 18   
12 [0xc]: line: 235 pushl 0   
13 [0xd]:           pushl 1   
14 [0xe]:           call @2130 // <std.io#file_system.delete_directory>   
15 [0xf]:           loadval ebx   
16 [0x10]:           return_val ebx   
17 [0x11]:           ret   
18 [0x12]:           nop   
19 [0x13]: line: 241 pushl 2   : protected asm start
20 [0x14]:           int 0x29   
21 [0x15]:           smovr_2 ebx, fp+3   
22 [0x16]: line: 247 loadl ebx, fp+3   : protected asm end
23 [0x17]:           return_val ebx   
24 [0x18]:           ret   


function: std.io#file_system.list[2132] params(1) in file: lib\support\/0.2.9//io//file_system.sharp:255:8: note:  
		    def list(f: file) : string[] {
		       ^

0 [0x0]: line: 257 pushl 1   
1 [0x1]:           call @2084 // <std.io#file.get_absolute_path>   
2 [0x2]:           call @3572 // <std#string.get_data>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+2   
5 [0x5]: line: 258 movl 3   
6 [0x6]:           del   
7 [0x7]: line: 260 pushl 1   
8 [0x8]:           call @2088 // <std.io#file.is_directory>   
9 [0x9]:           loadval ebx   
10 [0xa]:           not ebx, ebx   
11 [0xb]:           movr cmt, ebx   
12 [0xc]:           jne 17   
13 [0xd]: line: 261 pushnull    
14 [0xe]:           popobj2    
15 [0xf]:           returnobj   
16 [0x10]:           ret   
17 [0x11]:           nop   
18 [0x12]: line: 267 pushl 2   : protected asm start
19 [0x13]:           int 0x2a   
20 [0x14]:           popl 3   
21 [0x15]: line: 273 movl 3   : protected asm end
22 [0x16]:           returnobj   
23 [0x17]:           ret   


function: std.io#file_system.create_directory[2133] params(1) in file: lib\support\/0.2.9//io//file_system.sharp:280:8: note:  
		    def create_directory(f: file) : var {
		       ^

0 [0x0]: line: 282 pushl 1   
1 [0x1]:           call @2083 // <std.io#file.get_path>   
2 [0x2]:           call @3572 // <std#string.get_data>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+2   
5 [0x5]: line: 283 istorel 0, fp+3   
7 [0x7]: line: 289 pushl 2   : protected asm start
8 [0x8]:           int 0x2b   
9 [0x9]:           smovr_2 ebx, fp+3   
10 [0xa]: line: 295 loadl ebx, fp+3   : protected asm end
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


function: std.io#file_system.rename[2134] params(2) in file: lib\support\/0.2.9//io//file_system.sharp:303:8: note:  
		    def rename(f1: file, f2: file) : var {
		       ^

0 [0x0]: line: 305 pushl 1   
1 [0x1]:           call @2084 // <std.io#file.get_absolute_path>   
2 [0x2]:           call @3572 // <std#string.get_data>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+3   
5 [0x5]: line: 306 pushl 2   
6 [0x6]:           call @2083 // <std.io#file.get_path>   
7 [0x7]:           call @3572 // <std#string.get_data>   
8 [0x8]:           popobj2    
9 [0x9]:           smovr_3 fp+4   
10 [0xa]: line: 307 istorel 0, fp+5   
12 [0xc]: line: 313 pushl 4   : protected asm start
13 [0xd]:           pushl 3   
14 [0xe]:           int 0x30   
15 [0xf]:           smovr_2 ebx, fp+5   
16 [0x10]: line: 320 loadl ebx, fp+5   : protected asm end
17 [0x11]:           return_val ebx   
18 [0x12]:           ret   


function: std.io#file_system.read[2135] params(1) in file: lib\support\/0.2.9//io//file_system.sharp:324:15: note:  
		    static def read(f: file) : string {
		              ^

0 [0x0]: line: 325 pushl 0   
1 [0x1]:           call @2084 // <std.io#file.get_absolute_path>   
2 [0x2]:           call @3572 // <std#string.get_data>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+1   
5 [0x5]: line: 326 movl 2   
6 [0x6]:           del   
7 [0x7]: line: 327 istorel 0, fp+3   
9 [0x9]: line: 333 pushl 1   : protected asm start
10 [0xa]:           int 0x2f   
11 [0xb]:           popl 2   
12 [0xc]: line: 339 movl 2   : protected asm end
13 [0xd]:           returnobj   
14 [0xe]:           ret   


function: std.io#file_system.write[2136] params(2) in file: lib\support\/0.2.9//io//file_system.sharp:343:15: note:  
		    static def write(f: file, data: string) : var {
		              ^

0 [0x0]: line: 344 pushl 0   
1 [0x1]:           call @2084 // <std.io#file.get_absolute_path>   
2 [0x2]:           call @3572 // <std#string.get_data>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+2   
5 [0x5]: line: 345 pushl 1   
6 [0x6]:           call @3572 // <std#string.get_data>   
7 [0x7]:           popobj2    
8 [0x8]:           smovr_3 fp+3   
9 [0x9]: line: 346 istorel 0, fp+4   
11 [0xb]: line: 352 pushl 3   : protected asm start
12 [0xc]:           pushl 2   
13 [0xd]:           int 0x31   
14 [0xe]:           smovr_2 ebx, fp+4   
15 [0xf]: line: 359 loadl ebx, fp+4   : protected asm end
16 [0x10]:           return_val ebx   
17 [0x11]:           ret   


function: std.io#file_system.set_last_modified_time[2137] params(2) in file: lib\support\/0.2.9//io//file_system.sharp:367:15: note:  
		    public def set_last_modified_time(f: file, time: var) : var {
		              ^

0 [0x0]: line: 369 pushl 1   
1 [0x1]:           call @2084 // <std.io#file.get_absolute_path>   
2 [0x2]:           call @3572 // <std#string.get_data>   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+3   
5 [0x5]: line: 370 istorel 0, fp+4   
7 [0x7]: line: 376 pushl 3   : protected asm start
8 [0x8]:           loadl ebx, fp+2   
9 [0x9]:           int 0x2d   
10 [0xa]:           smovr_2 ebx, fp+4   
11 [0xb]: line: 383 loadl ebx, fp+4   : protected asm end
12 [0xc]:           return_val ebx   
13 [0xd]:           ret   


function: std.io#file_system.set_read_only[2138] params(1) in file: lib\support\/0.2.9//io//file_system.sharp:391:15: note:  
		    public def set_read_only(f: file) : var {
		              ^

0 [0x0]: line: 392 pushl 0   
1 [0x1]:           pushl 1   
2 [0x2]:           istore 2   
4 [0x4]:           movi #0, ebx   
6 [0x6]:           rstore ebx   
7 [0x7]:           istore 1   
9 [0x9]:           call @2126 // <std.io#file_system.set_permission>   
10 [0xa]:           pop   
11 [0xb]: line: 393 pushl 0   
12 [0xc]:           pushl 1   
13 [0xd]:           istore 4   
15 [0xf]:           movi #1, ebx   
17 [0x11]:           rstore ebx   
18 [0x12]:           istore 1   
20 [0x14]:           call @2126 // <std.io#file_system.set_permission>   
21 [0x15]:           loadval ebx   
22 [0x16]:           return_val ebx   
23 [0x17]:           ret   


function: std.io#file_system.get_space_available[2139] params(1) in file: lib\support\/0.2.9//io//file_system.sharp:401:15: note:  
		    static def get_space_available(request: var) : var {
		              ^

0 [0x0]: line: 403 istorel 0, fp+1   
2 [0x2]: line: 409 loadl ebx, fp+0   : protected asm start
3 [0x3]:           int 0x32   
4 [0x4]:           smovr_2 ebx, fp+1   
5 [0x5]: line: 415 loadl ebx, fp+1   : protected asm end
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


constructor: std.io#file_system.file_system[2140] params(0) in file: lib\support\/0.2.9//io//file_system.sharp:10:16: note:  
		protected class file_system {
		               ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


function: std.io#__srt_global.realloc[2141] params(2) in file: lib\support\/0.2.9//io//memory.sharp:4:4: note:  
		def realloc(data: object[], size: var) {
		   ^

0 [0x0]: line: 5 pushl 0   : protected asm start
1 [0x1]:         ipushl #1   
2 [0x2]:         int 0x23   
3 [0x3]:         ret   : protected asm end


function: std.io#__srt_global.realloc[2142] params(2) in file: lib\support\/0.2.9//io//memory.sharp:12:4: note:  
		def realloc(data: var[], size: var) {
		   ^

0 [0x0]: line: 13 pushl 0   : protected asm start
1 [0x1]:          ipushl #1   
2 [0x2]:          int 0x23   
3 [0x3]:          ret   : protected asm end


function: std.io#__srt_global.realloc[2143] params(2) in file: lib\support\/0.2.9//io//memory.sharp:20:4: note:  
		def realloc(data: _int8[], size: var) {
		   ^

0 [0x0]: line: 21 pushl 0   : protected asm start
1 [0x1]:          ipushl #1   
2 [0x2]:          int 0x23   
3 [0x3]:          ret   : protected asm end


function: std.io#__srt_global.realloc[2144] params(2) in file: lib\support\/0.2.9//io//memory.sharp:28:4: note:  
		def realloc(data: _int16[], size: var) {
		   ^

0 [0x0]: line: 29 pushl 0   : protected asm start
1 [0x1]:          ipushl #1   
2 [0x2]:          int 0x23   
3 [0x3]:          ret   : protected asm end


function: std.io#__srt_global.realloc[2145] params(2) in file: lib\support\/0.2.9//io//memory.sharp:36:4: note:  
		def realloc(data: _int32[], size: var) {
		   ^

0 [0x0]: line: 37 pushl 0   : protected asm start
1 [0x1]:          ipushl #1   
2 [0x2]:          int 0x23   
3 [0x3]:          ret   : protected asm end


function: std.io#__srt_global.realloc[2146] params(2) in file: lib\support\/0.2.9//io//memory.sharp:44:4: note:  
		def realloc(data: _int64[], size: var) {
		   ^

0 [0x0]: line: 45 pushl 0   : protected asm start
1 [0x1]:          ipushl #1   
2 [0x2]:          int 0x23   
3 [0x3]:          ret   : protected asm end


function: std.io#__srt_global.realloc[2147] params(2) in file: lib\support\/0.2.9//io//memory.sharp:52:4: note:  
		def realloc(data: _uint8[], size: var) {
		   ^

0 [0x0]: line: 53 pushl 0   : protected asm start
1 [0x1]:          ipushl #1   
2 [0x2]:          int 0x23   
3 [0x3]:          ret   : protected asm end


function: std.io#__srt_global.realloc[2148] params(2) in file: lib\support\/0.2.9//io//memory.sharp:60:4: note:  
		def realloc(data: _uint16[], size: var) {
		   ^

0 [0x0]: line: 61 pushl 0   : protected asm start
1 [0x1]:          ipushl #1   
2 [0x2]:          int 0x23   
3 [0x3]:          ret   : protected asm end


function: std.io#__srt_global.realloc[2149] params(2) in file: lib\support\/0.2.9//io//memory.sharp:68:4: note:  
		def realloc(data: _uint32[], size: var) {
		   ^

0 [0x0]: line: 69 pushl 0   : protected asm start
1 [0x1]:          ipushl #1   
2 [0x2]:          int 0x23   
3 [0x3]:          ret   : protected asm end


function: std.io#__srt_global.realloc[2150] params(2) in file: lib\support\/0.2.9//io//memory.sharp:76:4: note:  
		def realloc(data: _uint64[], size: var) {
		   ^

0 [0x0]: line: 77 pushl 0   : protected asm start
1 [0x1]:          ipushl #1   
2 [0x2]:          int 0x23   
3 [0x3]:          ret   : protected asm end


function: std.io#__srt_global.memcopy[2151] params(5) in file: lib\support\/0.2.9//io//memory.sharp:84:4: note:  
		def memcopy(src: object[], dest: object[],  destStart: var, srcStart: var, srcEnd: var) {
		   ^

0 [0x0]: line: 85 pushl 1   : protected asm start
1 [0x1]:          pushl 0   
2 [0x2]:          ipushl #2   
3 [0x3]:          ipushl #3   
4 [0x4]:          ipushl #4   
5 [0x5]:          int 0x21   
6 [0x6]:          ret   : protected asm end


function: std.io#__srt_global.memcopy[2152] params(5) in file: lib\support\/0.2.9//io//memory.sharp:95:4: note:  
		def memcopy(src: var[], dest: var[],  destStart: var, srcStart: var, srcEnd: var) {
		   ^

0 [0x0]: line: 96 pushl 1   : protected asm start
1 [0x1]:          pushl 0   
2 [0x2]:          ipushl #2   
3 [0x3]:          ipushl #3   
4 [0x4]:          ipushl #4   
5 [0x5]:          int 0x21   
6 [0x6]:          ret   : protected asm end


function: std.io#__srt_global.memcopy[2153] params(5) in file: lib\support\/0.2.9//io//memory.sharp:106:4: note:  
		def memcopy(src: _int8[], dest: _int8[],  destStart: var, srcStart: var, srcEnd: var) {
		   ^

0 [0x0]: line: 107 pushl 1   : protected asm start
1 [0x1]:           pushl 0   
2 [0x2]:           ipushl #2   
3 [0x3]:           ipushl #3   
4 [0x4]:           ipushl #4   
5 [0x5]:           int 0x21   
6 [0x6]:           ret   : protected asm end


function: std.io#__srt_global.memcopy[2154] params(5) in file: lib\support\/0.2.9//io//memory.sharp:117:4: note:  
		def memcopy(src: _int16[], dest: _int16[],  destStart: var, srcStart: var, srcEnd: var) {
		   ^

0 [0x0]: line: 118 pushl 1   : protected asm start
1 [0x1]:           pushl 0   
2 [0x2]:           ipushl #2   
3 [0x3]:           ipushl #3   
4 [0x4]:           ipushl #4   
5 [0x5]:           int 0x21   
6 [0x6]:           ret   : protected asm end


function: std.io#__srt_global.memcopy[2155] params(5) in file: lib\support\/0.2.9//io//memory.sharp:128:4: note:  
		def memcopy(src: _int32[], dest: _int32[],  destStart: var, srcStart: var, srcEnd: var) {
		   ^

0 [0x0]: line: 129 pushl 1   : protected asm start
1 [0x1]:           pushl 0   
2 [0x2]:           ipushl #2   
3 [0x3]:           ipushl #3   
4 [0x4]:           ipushl #4   
5 [0x5]:           int 0x21   
6 [0x6]:           ret   : protected asm end


function: std.io#__srt_global.memcopy[2156] params(5) in file: lib\support\/0.2.9//io//memory.sharp:139:4: note:  
		def memcopy(src: _int64[], dest: _int64[],  destStart: var, srcStart: var, srcEnd: var) {
		   ^

0 [0x0]: line: 140 pushl 1   : protected asm start
1 [0x1]:           pushl 0   
2 [0x2]:           ipushl #2   
3 [0x3]:           ipushl #3   
4 [0x4]:           ipushl #4   
5 [0x5]:           int 0x21   
6 [0x6]:           ret   : protected asm end


function: std.io#__srt_global.memcopy[2157] params(5) in file: lib\support\/0.2.9//io//memory.sharp:150:4: note:  
		def memcopy(src: _uint8[], dest: _uint8[],  destStart: var, srcStart: var, srcEnd: var) {
		   ^

0 [0x0]: line: 151 pushl 1   : protected asm start
1 [0x1]:           pushl 0   
2 [0x2]:           ipushl #2   
3 [0x3]:           ipushl #3   
4 [0x4]:           ipushl #4   
5 [0x5]:           int 0x21   
6 [0x6]:           ret   : protected asm end


function: std.io#__srt_global.memcopy[2158] params(5) in file: lib\support\/0.2.9//io//memory.sharp:161:4: note:  
		def memcopy(src: _uint16[], dest: _uint16[],  destStart: var, srcStart: var, srcEnd: var) {
		   ^

0 [0x0]: line: 162 pushl 1   : protected asm start
1 [0x1]:           pushl 0   
2 [0x2]:           ipushl #2   
3 [0x3]:           ipushl #3   
4 [0x4]:           ipushl #4   
5 [0x5]:           int 0x21   
6 [0x6]:           ret   : protected asm end


function: std.io#__srt_global.memcopy[2159] params(5) in file: lib\support\/0.2.9//io//memory.sharp:172:4: note:  
		def memcopy(src: _uint32[], dest: _uint32[],  destStart: var, srcStart: var, srcEnd: var) {
		   ^

0 [0x0]: line: 173 pushl 1   : protected asm start
1 [0x1]:           pushl 0   
2 [0x2]:           ipushl #2   
3 [0x3]:           ipushl #3   
4 [0x4]:           ipushl #4   
5 [0x5]:           int 0x21   
6 [0x6]:           ret   : protected asm end


function: std.io#__srt_global.memcopy[2160] params(5) in file: lib\support\/0.2.9//io//memory.sharp:183:4: note:  
		def memcopy(src: _uint64[], dest: _uint64[],  destStart: var, srcStart: var, srcEnd: var) {
		   ^

0 [0x0]: line: 184 pushl 1   : protected asm start
1 [0x1]:           pushl 0   
2 [0x2]:           ipushl #2   
3 [0x3]:           ipushl #3   
4 [0x4]:           ipushl #4   
5 [0x5]:           int 0x21   
6 [0x6]:           ret   : protected asm end


function: std.io#__srt_global.copy[2161] params(3) in file: lib\support\/0.2.9//io//memory.sharp:194:4: note:  
		def copy(src: object[], srcStart: var, srcEnd: var) : object[] {
		   ^

0 [0x0]: line: 195 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x37   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 204 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.copy[2162] params(3) in file: lib\support\/0.2.9//io//memory.sharp:207:4: note:  
		def copy(src: var[], srcStart: var, srcEnd: var) : var[] {
		   ^

0 [0x0]: line: 208 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x37   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 217 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.copy[2163] params(3) in file: lib\support\/0.2.9//io//memory.sharp:220:4: note:  
		def copy(src: _int8[], srcStart: var, srcEnd: var) : _int8[] {
		   ^

0 [0x0]: line: 221 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x37   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 230 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.copy[2164] params(3) in file: lib\support\/0.2.9//io//memory.sharp:233:4: note:  
		def copy(src: _int16[], srcStart: var, srcEnd: var) : _int16[] {
		   ^

0 [0x0]: line: 234 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x37   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 243 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.copy[2165] params(3) in file: lib\support\/0.2.9//io//memory.sharp:246:4: note:  
		def copy(src: _int32[], srcStart: var, srcEnd: var) : _int32[] {
		   ^

0 [0x0]: line: 247 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x37   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 256 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.copy[2166] params(3) in file: lib\support\/0.2.9//io//memory.sharp:259:4: note:  
		def copy(src: _uint8[], srcStart: var, srcEnd: var) : _uint8[] {
		   ^

0 [0x0]: line: 260 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x37   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 269 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.copy[2167] params(3) in file: lib\support\/0.2.9//io//memory.sharp:272:4: note:  
		def copy(src: _uint16[], srcStart: var, srcEnd: var) : _uint16[] {
		   ^

0 [0x0]: line: 273 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x37   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 282 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.copy[2168] params(3) in file: lib\support\/0.2.9//io//memory.sharp:285:4: note:  
		def copy(src: _uint32[], srcStart: var, srcEnd: var) : _uint32[] {
		   ^

0 [0x0]: line: 286 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x37   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 295 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.copy[2169] params(3) in file: lib\support\/0.2.9//io//memory.sharp:298:4: note:  
		def copy(src: _uint64[], srcStart: var, srcEnd: var) : _uint64[] {
		   ^

0 [0x0]: line: 299 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x37   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 308 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.copy[2170] params(3) in file: lib\support\/0.2.9//io//memory.sharp:311:4: note:  
		def copy(src: _int64[], srcStart: var, srcEnd: var) : _int64[] {
		   ^

0 [0x0]: line: 312 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x37   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 321 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.invert[2171] params(3) in file: lib\support\/0.2.9//io//memory.sharp:325:4: note:  
		def invert(src: object[], start: var, len: var) : object[] {
		   ^

0 [0x0]: line: 326 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x22   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 335 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.invert[2172] params(3) in file: lib\support\/0.2.9//io//memory.sharp:338:4: note:  
		def invert(src: var[], start: var, len: var) : var[] {
		   ^

0 [0x0]: line: 339 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x22   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 348 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.invert[2173] params(3) in file: lib\support\/0.2.9//io//memory.sharp:351:4: note:  
		def invert(src: _int8[], start: var, len: var) : _int8[] {
		   ^

0 [0x0]: line: 352 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x22   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 361 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.invert[2174] params(3) in file: lib\support\/0.2.9//io//memory.sharp:364:4: note:  
		def invert(src: _int16[], start: var, len: var) : _int16[] {
		   ^

0 [0x0]: line: 365 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x22   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 374 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.invert[2175] params(3) in file: lib\support\/0.2.9//io//memory.sharp:377:4: note:  
		def invert(src: _int32[], start: var, len: var) : _int32[] {
		   ^

0 [0x0]: line: 378 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x22   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 387 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.invert[2176] params(3) in file: lib\support\/0.2.9//io//memory.sharp:390:4: note:  
		def invert(src: _int64[], start: var, len: var) : _int64[] {
		   ^

0 [0x0]: line: 391 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x22   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 400 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.invert[2177] params(3) in file: lib\support\/0.2.9//io//memory.sharp:403:4: note:  
		def invert(src: _uint8[], start: var, len: var) : _uint8[] {
		   ^

0 [0x0]: line: 404 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x22   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 413 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.invert[2178] params(3) in file: lib\support\/0.2.9//io//memory.sharp:416:4: note:  
		def invert(src: _uint16[], start: var, len: var) : _uint16[] {
		   ^

0 [0x0]: line: 417 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x22   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 426 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.invert[2179] params(3) in file: lib\support\/0.2.9//io//memory.sharp:429:4: note:  
		def invert(src: _uint32[], start: var, len: var) : _uint32[] {
		   ^

0 [0x0]: line: 430 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x22   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 439 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


function: std.io#__srt_global.invert[2180] params(3) in file: lib\support\/0.2.9//io//memory.sharp:442:4: note:  
		def invert(src: _uint64[], start: var, len: var) : _uint64[] {
		   ^

0 [0x0]: line: 443 pushl 0   : protected asm start
1 [0x1]:           ipushl #1   
2 [0x2]:           ipushl #2   
3 [0x3]:           int 0x22   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]: line: 452 pushnull    : protected asm end
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


constructor: std.io.task#cancellation_exception.cancellation_exception[2181] params(1) in file: lib\support\/0.2.9//io//task//cancellation_exception.sharp:4:34: note:  
		    public cancellation_exception(message : _int8[]) -> base(message) {}
		                                 ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1979 // <std#runtime_exception.runtime_exception>   
3 [0x3]:         ret   


constructor: std.io.task#cancellation_exception.cancellation_exception[2182] params(1) in file: lib\support\/0.2.9//io//task//cancellation_exception.sharp:5:34: note:  
		    public cancellation_exception(message : string) -> base(message) {}
		                                 ^

0 [0x0]:         pushl 0   
1 [0x1]:         pushl 1   
2 [0x2]:         call @1980 // <std#runtime_exception.runtime_exception>   
3 [0x3]:         ret   


constructor: std.io.task#cancellation_exception.cancellation_exception[2183] params(0) in file: lib\support\/0.2.9//io//task//cancellation_exception.sharp:3:6: note:  
		class cancellation_exception base runtime_except {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1981 // <std#runtime_exception.runtime_exception>   
2 [0x2]:         ret   


constructor: std.io.task#job.job[2184] params(0) in file: lib\support\/0.2.9//io//task//job.sharp:8:13: note:  
			private job() {}
		            ^

0 [0x0]:         movi #0, ebx   
2 [0x2]:         movl 0   
3 [0x3]:         movn #9   
5 [0x5]:         movi #0, adx   
7 [0x7]:         rmov adx, ebx   
8 [0x8]:         movi #0, ebx   
10 [0xa]:         movl 0   
11 [0xb]:         movn #10   
13 [0xd]:         movi #0, adx   
15 [0xf]:         rmov adx, ebx   
16 [0x10]:         movi #0, ebx   
18 [0x12]:         movl 0   
19 [0x13]:         movn #11   
21 [0x15]:         movi #0, adx   
23 [0x17]:         rmov adx, ebx   
24 [0x18]:         movi #0, ebx   
26 [0x1a]:         movl 0   
27 [0x1b]:         movn #12   
29 [0x1d]:         movi #0, adx   
31 [0x1f]:         rmov adx, ebx   
32 [0x20]:         movi #0, ebx   
34 [0x22]:         movl 0   
35 [0x23]:         movn #13   
37 [0x25]:         movi #0, adx   
39 [0x27]:         rmov adx, ebx   
40 [0x28]:         movi #0, ebx   
42 [0x2a]:         movl 0   
43 [0x2b]:         movn #15   
45 [0x2d]:         movi #0, adx   
47 [0x2f]:         rmov adx, ebx   
48 [0x30]:         movi #0, ebx   
50 [0x32]:         movl 0   
51 [0x33]:         movn #16   
53 [0x35]:         movi #0, adx   
55 [0x37]:         rmov adx, ebx   
56 [0x38]:         movi #0, ebx   
58 [0x3a]:         movl 0   
59 [0x3b]:         movn #17   
61 [0x3d]:         movi #0, adx   
63 [0x3f]:         rmov adx, ebx   
64 [0x40]:         movi #0, ebx   
66 [0x42]:         movl 0   
67 [0x43]:         movn #18   
69 [0x45]:         movi #0, adx   
71 [0x47]:         rmov adx, ebx   
72 [0x48]:         movg @35 // @std.io.task#job_state   
73 [0x49]:         movn #0   
75 [0x4b]:         pushobj   
76 [0x4c]:         movl 0   
77 [0x4d]:         movn #19   
79 [0x4f]:         popobj   
80 [0x50]:         pushl 0   
81 [0x51]:         ret   


constructor: std.io.task#job.job[2185] params(1) in file: lib\support\/0.2.9//io//task//job.sharp:10:5: note:  
			job(name : string) {
		    ^

0 [0x0]:         movi #0, ebx   
2 [0x2]:         movl 0   
3 [0x3]:         movn #9   
5 [0x5]:         movi #0, adx   
7 [0x7]:         rmov adx, ebx   
8 [0x8]:         movi #0, ebx   
10 [0xa]:         movl 0   
11 [0xb]:         movn #10   
13 [0xd]:         movi #0, adx   
15 [0xf]:         rmov adx, ebx   
16 [0x10]:         movi #0, ebx   
18 [0x12]:         movl 0   
19 [0x13]:         movn #11   
21 [0x15]:         movi #0, adx   
23 [0x17]:         rmov adx, ebx   
24 [0x18]:         movi #0, ebx   
26 [0x1a]:         movl 0   
27 [0x1b]:         movn #12   
29 [0x1d]:         movi #0, adx   
31 [0x1f]:         rmov adx, ebx   
32 [0x20]:         movi #0, ebx   
34 [0x22]:         movl 0   
35 [0x23]:         movn #13   
37 [0x25]:         movi #0, adx   
39 [0x27]:         rmov adx, ebx   
40 [0x28]:         movi #0, ebx   
42 [0x2a]:         movl 0   
43 [0x2b]:         movn #15   
45 [0x2d]:         movi #0, adx   
47 [0x2f]:         rmov adx, ebx   
48 [0x30]:         movi #0, ebx   
50 [0x32]:         movl 0   
51 [0x33]:         movn #16   
53 [0x35]:         movi #0, adx   
55 [0x37]:         rmov adx, ebx   
56 [0x38]:         movi #0, ebx   
58 [0x3a]:         movl 0   
59 [0x3b]:         movn #17   
61 [0x3d]:         movi #0, adx   
63 [0x3f]:         rmov adx, ebx   
64 [0x40]:         movi #0, ebx   
66 [0x42]:         movl 0   
67 [0x43]:         movn #18   
69 [0x45]:         movi #0, adx   
71 [0x47]:         rmov adx, ebx   
72 [0x48]:         movg @35 // @std.io.task#job_state   
73 [0x49]:         movn #0   
75 [0x4b]:         pushobj   
76 [0x4c]:         movl 0   
77 [0x4d]:         movn #19   
79 [0x4f]:         popobj   
80 [0x50]:         pushl 0   
81 [0x51]: line: 11 pushl 1   
82 [0x52]:          movl 0   
83 [0x53]:          movn #6   
85 [0x55]:          popobj   
86 [0x56]: line: 12 movg @30 // @std.io.task#__srt_global   
87 [0x57]:          movn #8   
89 [0x59]:          _lck    
90 [0x5a]: line: 13 movg @32 // @std.io.task#job   
91 [0x5b]:          movn #0   
93 [0x5d]:          movi #0, adx   
95 [0x5f]:          iaload ebx, adx   
96 [0x60]:          movr egx, ebx   
97 [0x61]:          inc ebx   
98 [0x62]:          movi #0, adx   
100 [0x64]:          rmov adx, ebx   
101 [0x65]:          rstore egx   
102 [0x66]:          movl 0   
103 [0x67]:          movn #16   
105 [0x69]:          loadval ebx   
106 [0x6a]:          movi #0, adx   
108 [0x6c]:          rmov adx, ebx   
109 [0x6d]:          movg @30 // @std.io.task#__srt_global   
110 [0x6e]:          movn #8   
112 [0x70]:          _ulck   
113 [0x71]:          ret   


function: std.io.task#job.execute_async[2186] params(0) in file: lib\support\/0.2.9//io//task//job.sharp:17:15: note:  
			protected def execute_async() : var {
		              ^

0 [0x0]: line: 18 movl 0   
1 [0x1]:          movn #19   
3 [0x3]:          pushobj   
4 [0x4]:          movg @35 // @std.io.task#job_state   
5 [0x5]:          movn #0   
7 [0x7]:          pushobj   
8 [0x8]:          call @1947 // <std#_enum_.operator==>   
9 [0x9]:          loadval ebx   
10 [0xa]:          movr cmt, ebx   
11 [0xb]:          jne 87   
12 [0xc]: line: 19 movl 0   
13 [0xd]:          movn #4   
15 [0xf]:          pushobj   
16 [0x10]:          call @2279 // <std.io#thread.is_active>   
17 [0x11]:          loadval ebx   
18 [0x12]:          not ebx, ebx   
19 [0x13]:          movr cmt, ebx   
20 [0x14]:          jne 38   
21 [0x15]: line: 20 movl 0   
22 [0x16]:          movn #4   
24 [0x18]:          pushobj   
25 [0x19]:          call @2255 // <std.io#thread.start>   
26 [0x1a]:          movg @40 // @std.io#thread_result   
27 [0x1b]:          movn #0   
29 [0x1d]:          pushobj   
30 [0x1e]:          call @1945 // <std#_enum_.operator!=>   
31 [0x1f]:          loadval ebx   
32 [0x20]:          movr cmt, ebx   
33 [0x21]:          jne 37   
34 [0x22]: line: 22 istorel 2, fp+0   
36 [0x24]:          ret   
37 [0x25]:          nop   
38 [0x26]:          nop   
39 [0x27]: line: 26 movl 0   
40 [0x28]:          movn #4   
42 [0x2a]:          pushobj   
43 [0x2b]:          call @2070 // <std.io.fiber#fiber.poll>   
44 [0x2c]:          loadval ebx   
45 [0x2d]:          rstore ebx   
46 [0x2e]:          movi #1, ebx   
48 [0x30]:          loadval ecx   
49 [0x31]:          gte ecx, ebx   
50 [0x32]:          movr ebx, cmt   
51 [0x33]:          movr cmt, ebx   
52 [0x34]:          jne 77   
53 [0x35]: line: 27 istore 4124   
55 [0x37]:          movl 0   
56 [0x38]:          movn #4   
58 [0x3a]:          pushobj   
59 [0x3b]:          movi #1, ebx   
61 [0x3d]:          new_classarray ebx  // std.io.task#job[]   
63 [0x3f]:          pushl 0   
64 [0x40]:          movsl #-1   
65 [0x41]:          movn #0   
67 [0x43]:          popobj   
68 [0x44]:          call @2076 // <std.io.fiber#__srt_global.slice>   
69 [0x45]:          movl 0   
70 [0x46]:          movn #5   
72 [0x48]:          popobj   
73 [0x49]: line: 32 istorel 0, fp+0   
75 [0x4b]:          ret   
76 [0x4c]:          jmp @85   
77 [0x4d]: line: 34 movl 0   
78 [0x4e]:          movn #4   
80 [0x50]:          pushobj   
81 [0x51]:          call @2260 // <std.io#thread.interrupt>   
82 [0x52]: line: 35 istorel 2, fp+0   
84 [0x54]:          ret   
85 [0x55]:          nop   
86 [0x56]:          jmp @102   
87 [0x57]:          movl 0   
88 [0x58]:          movn #19   
90 [0x5a]:          pushobj   
91 [0x5b]:          movg @35 // @std.io.task#job_state   
92 [0x5c]:          movn #1   
94 [0x5e]:          pushobj   
95 [0x5f]:          call @1947 // <std#_enum_.operator==>   
96 [0x60]:          loadval ebx   
97 [0x61]:          movr cmt, ebx   
98 [0x62]:          jne 102   
99 [0x63]: line: 38 istorel 1, fp+0   
101 [0x65]:          ret   
102 [0x66]:          nop   
103 [0x67]: line: 41 istorel 2, fp+0   
105 [0x69]:          ret   


function: std.io.task#job.cancel[2187] params(0) in file: lib\support\/0.2.9//io//task//job.sharp:44:12: note:  
			public def cancel() {
		           ^

0 [0x0]: line: 45 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 46 movl 0   
3 [0x3]:          movn #19   
5 [0x5]:          pushobj   
6 [0x6]:          movg @35 // @std.io.task#job_state   
7 [0x7]:          movn #1   
9 [0x9]:          pushobj   
10 [0xa]:          call @1947 // <std#_enum_.operator==>   
11 [0xb]:          loadval ebx   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 50   
14 [0xe]: line: 47 movg @35 // @std.io.task#job_state   
15 [0xf]:          movn #3   
17 [0x11]:          pushobj   
18 [0x12]:          movl 0   
19 [0x13]:          movn #19   
21 [0x15]:          popobj   
22 [0x16]: line: 49 call @2069 // <std.io.fiber#fiber.current>   
23 [0x17]:          movl 0   
24 [0x18]:          movn #5   
26 [0x1a]:          pushobj   
27 [0x1b]:          itest ebx   
28 [0x1c]:          not ebx, ebx   
29 [0x1d]:          movr cmt, ebx   
30 [0x1e]:          jne 44   
31 [0x1f]: line: 50 movl 0   
32 [0x20]:          movn #5   
34 [0x22]:          pushobj   
35 [0x23]:          call @2062 // <std.io.fiber#fiber.kill>   
36 [0x24]:          pop   
37 [0x25]: line: 51 movg @30 // @std.io.task#__srt_global   
38 [0x26]:          movn #8   
40 [0x28]:          pushobj   
41 [0x29]:          pushl 0   
42 [0x2a]:          call @2224 // <std.io.task#job_master.cleanup_job>   
43 [0x2b]:          jmp @49   
44 [0x2c]: line: 54 new_class @31 // std.io.task#cancellation_exception   
46 [0x2e]:          dup    
47 [0x2f]:          call @2183 // <std.io.task#cancellation_exception.cancellation_exception>   
48 [0x30]:          throw    
49 [0x31]:          nop   
50 [0x32]:          nop   
51 [0x33]:          movl 0   
52 [0x34]:          _ulck   
53 [0x35]:          ret   


function: std.io.task#job.cancel_future[2188] params(0) in file: lib\support\/0.2.9//io//task//job.sharp:60:15: note:  
			protected def cancel_future() {
		              ^

0 [0x0]: line: 61 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 62 movl 0   
3 [0x3]:          movn #15   
5 [0x5]:          movi #0, adx   
7 [0x7]:          iaload ebx, adx   
8 [0x8]:          movr cmt, ebx   
9 [0x9]:          jne 32   
10 [0xa]: line: 63 movl 0   
11 [0xb]:          movn #14   
13 [0xd]:          smovr_3 fp+1   
14 [0xe]: line: 64 movl 1   
15 [0xf]:          checknull   
16 [0x10]:          not ebx, ebx   
17 [0x11]:          movr cmt, ebx   
18 [0x12]:          jne 32   
19 [0x13]: line: 65 pushl 1   
20 [0x14]:          call @2187 // <std.io.task#job.cancel>   
21 [0x15]: line: 66 movg @30 // @std.io.task#__srt_global   
22 [0x16]:          movn #8   
24 [0x18]:          pushobj   
25 [0x19]:          pushl 1   
26 [0x1a]:          call @2224 // <std.io.task#job_master.cleanup_job>   
27 [0x1b]: line: 68 movl 1   
28 [0x1c]:          movn #14   
30 [0x1e]:          smovr_3 fp+1   
31 [0x1f]:          jmp @14   
32 [0x20]:          nop   
33 [0x21]:          movl 0   
34 [0x22]:          _ulck   
35 [0x23]:          ret   


function: std.io.task#job.join[2189] params(0) in file: lib\support\/0.2.9//io//task//job.sharp:74:12: note:  
			public def join() {
		           ^

0 [0x0]: line: 75 movl 0   
1 [0x1]:          movn #17   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          skpe ebx // pc = 28   
7 [0x7]:          movl 0   
8 [0x8]:          movn #19   
10 [0xa]:          pushobj   
11 [0xb]:          movg @35 // @std.io.task#job_state   
12 [0xc]:          movn #3   
14 [0xe]:          pushobj   
15 [0xf]:          call @1947 // <std#_enum_.operator==>   
16 [0x10]:          loadval ebx   
17 [0x11]:          skpe ebx // pc = 28   
18 [0x12]:          movl 0   
19 [0x13]:          movn #19   
21 [0x15]:          pushobj   
22 [0x16]:          movg @35 // @std.io.task#job_state   
23 [0x17]:          movn #2   
25 [0x19]:          pushobj   
26 [0x1a]:          call @1947 // <std#_enum_.operator==>   
27 [0x1b]:          loadval ebx   
28 [0x1c]:          movr cmt, ebx   
29 [0x1d]:          jne 31   
30 [0x1e]: line: 78 ret   
31 [0x1f]:          nop   
32 [0x20]: line: 80 pushl 0   
33 [0x21]:          call @2199 // <std.io.task#job.is_finished>   
34 [0x22]:          loadval ebx   
35 [0x23]:          not ebx, ebx   
36 [0x24]:          movr cmt, ebx   
37 [0x25]:          jne 42   
38 [0x26]: line: 81 istore 10   
40 [0x28]:          call @2072 // <std.io.fiber#__srt_global.delay>   
41 [0x29]:          jmp @32   
42 [0x2a]:          ret   


function: std.io.task#job.get_state[2190] params(0) in file: lib\support\/0.2.9//io//task//job.sharp:85:12: note:  
			public def get_state() := state;
		           ^

0 [0x0]: line: 85 movl 0   
1 [0x1]:          movn #19   
3 [0x3]:          returnobj   
4 [0x4]:          ret   


function: std.io.task#job.get_name[2191] params(0) in file: lib\support\/0.2.9//io//task//job.sharp:86:12: note:  
			public def get_name() := name;
		           ^

0 [0x0]: line: 86 movl 0   
1 [0x1]:          movn #6   
3 [0x3]:          returnobj   
4 [0x4]:          ret   


function: std.io.task#job.get_id[2192] params(0) in file: lib\support\/0.2.9//io//task//job.sharp:87:12: note:  
			public def get_id() := id;
		           ^

0 [0x0]: line: 87 movl 0   
1 [0x1]:          movn #16   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          return_val ebx   
7 [0x7]:          ret   


overload function: std.io.task#job.operator=[2193] params(1) in file: lib\support\/0.2.9//io//task//job.sharp:89:15: note:  
			protected def operator=(block: ()()) {
		              ^

0 [0x0]: line: 90 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          loadval ebx   
5 [0x5]:          movi #0, adx   
7 [0x7]:          rmov adx, ebx   
8 [0x8]:          ret   


overload function: std.io.task#job.operator=[2194] params(1) in file: lib\support\/0.2.9//io//task//job.sharp:93:15: note:  
			protected def operator=(block: (args : object[])()) {
		              ^

0 [0x0]: line: 94 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #1   
4 [0x4]:          loadval ebx   
5 [0x5]:          movi #0, adx   
7 [0x7]:          rmov adx, ebx   
8 [0x8]:          ret   


overload function: std.io.task#job.operator=[2195] params(1) in file: lib\support\/0.2.9//io//task//job.sharp:97:15: note:  
			protected def operator=(block: (deferred : object, args : object[])()) {
		              ^

0 [0x0]: line: 98 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #2   
4 [0x4]:          loadval ebx   
5 [0x5]:          movi #0, adx   
7 [0x7]:          rmov adx, ebx   
8 [0x8]:          ret   


overload function: std.io.task#job.operator=[2196] params(1) in file: lib\support\/0.2.9//io//task//job.sharp:101:15: note:  
			protected def operator=(block: (deferred : object)()) {
		              ^

0 [0x0]: line: 102 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #3   
4 [0x4]:           loadval ebx   
5 [0x5]:           movi #0, adx   
7 [0x7]:           rmov adx, ebx   
8 [0x8]:           ret   


function: std.io.task#job.job_main[2197] params(1) in file: lib\support\/0.2.9//io//task//job.sharp:105:22: note:  
			protected static def job_main(args : object[]) : var {
		                     ^

0 [0x0]: line: 106 istore 10000   
2 [0x2]: line: 107 call @2072 // <std.io.fiber#__srt_global.delay>   
3 [0x3]:           jmp @0   
4 [0x4]: line: 109 istorel 0, fp+0   
6 [0x6]:           ret   


function: std.io.task#job.execute[2198] params(0) in file: lib\support\/0.2.9//io//task//job.sharp:112:15: note:  
			protected def execute() {
		              ^

0 [0x0]: line: 113 call @3655 // <std#time.mills_time>   
1 [0x1]:           movl 0   
2 [0x2]:           movn #11   
4 [0x4]:           loadval ebx   
5 [0x5]:           movi #0, adx   
7 [0x7]:           rmov adx, ebx   
8 [0x8]: line: 114 movg @30 // @std.io.task#__srt_global   
9 [0x9]:           movn #8   
11 [0xb]:           pushobj   
12 [0xc]:           pushl 0   
13 [0xd]:           call @2223 // <std.io.task#job_master.add_job>   
14 [0xe]: line: 115 movg @35 // @std.io.task#job_state   
15 [0xf]:           movn #1   
17 [0x11]:           pushobj   
18 [0x12]:           movl 0   
19 [0x13]:           movn #19   
21 [0x15]:           popobj   
22 [0x16]: line: 117 movl 0   : try start: try block start
23 [0x17]: line: 118 movn #15   
25 [0x19]:           movi #0, adx   
27 [0x1b]:           iaload ebx, adx   
28 [0x1c]:           movr cmt, ebx   
29 [0x1d]:           jne 32   
30 [0x1e]: line: 119 pushl 0   
31 [0x1f]:           call @2203 // <std.io.task#job.reschedule>   
32 [0x20]:           nop   
33 [0x21]: line: 121 movl 0   
34 [0x22]:           movn #0   
36 [0x24]:           movi #0, adx   
38 [0x26]:           iaload ebx, adx   
39 [0x27]:           movr cmt, ebx   
40 [0x28]:           jne 51   
41 [0x29]: line: 122 movl 0   
42 [0x2a]:           movn #0   
44 [0x2c]:           movi #0, adx   
46 [0x2e]:           iaload ebx, adx   
47 [0x2f]:           rstore ebx   
48 [0x30]:           loadval ebx   
49 [0x31]:           calld ebx   
50 [0x32]:           jmp @123   
51 [0x33]:           movl 0   
52 [0x34]:           movn #1   
54 [0x36]:           movi #0, adx   
56 [0x38]:           iaload ebx, adx   
57 [0x39]:           movr cmt, ebx   
58 [0x3a]:           jne 74   
59 [0x3b]: line: 123 movl 0   
60 [0x3c]:           movn #1   
62 [0x3e]:           movi #0, adx   
64 [0x40]:           iaload ebx, adx   
65 [0x41]:           rstore ebx   
66 [0x42]:           movl 0   
67 [0x43]:           movn #7   
69 [0x45]:           pushobj   
70 [0x46]:           smov ebx, sp+[-1]   
71 [0x47]:           calld ebx   
72 [0x48]:           pop   
73 [0x49]:           jmp @123   
74 [0x4a]:           movl 0   
75 [0x4b]:           movn #2   
77 [0x4d]:           movi #0, adx   
79 [0x4f]:           iaload ebx, adx   
80 [0x50]:           movr cmt, ebx   
81 [0x51]:           jne 101   
82 [0x52]: line: 124 movl 0   
83 [0x53]:           movn #2   
85 [0x55]:           movi #0, adx   
87 [0x57]:           iaload ebx, adx   
88 [0x58]:           rstore ebx   
89 [0x59]:           movl 0   
90 [0x5a]:           movn #8   
92 [0x5c]:           pushobj   
93 [0x5d]:           movl 0   
94 [0x5e]:           movn #7   
96 [0x60]:           pushobj   
97 [0x61]:           smov ebx, sp+[-2]   
98 [0x62]:           calld ebx   
99 [0x63]:           pop   
100 [0x64]:           jmp @123   
101 [0x65]:           movl 0   
102 [0x66]:           movn #3   
104 [0x68]:           movi #0, adx   
106 [0x6a]:           iaload ebx, adx   
107 [0x6b]:           movr cmt, ebx   
108 [0x6c]:           jne 123   
109 [0x6d]: line: 125 movl 0   
110 [0x6e]:           movn #3   
112 [0x70]:           movi #0, adx   
114 [0x72]:           iaload ebx, adx   
115 [0x73]:           rstore ebx   
116 [0x74]:           movl 0   
117 [0x75]:           movn #8   
119 [0x77]:           pushobj   
120 [0x78]:           smov ebx, sp+[-1]   
121 [0x79]:           calld ebx   
122 [0x7a]:           pop   
123 [0x7b]:           nop   
124 [0x7c]: line: 128 movg @35 // @std.io.task#job_state   
125 [0x7d]:           movn #2   
127 [0x7f]:           pushobj   
128 [0x80]:           movl 0   
129 [0x81]:           movn #19   
131 [0x83]:           popobj   
132 [0x84]: line: 129 movg @30 // @std.io.task#__srt_global   
133 [0x85]:           movn #8   
135 [0x87]:           pushobj   
136 [0x88]:           pushl 0   
137 [0x89]:           call @2224 // <std.io.task#job_master.cleanup_job>   
138 [0x8a]:           jmp @184   : try block end
139 [0x8b]: line: 131 movg @35 // @std.io.task#job_state   : catch(std.io.task#cancellation_exception)
140 [0x8c]:           movn #3   
142 [0x8e]:           pushobj   
143 [0x8f]:           movl 0   
144 [0x90]:           movn #19   
146 [0x92]:           popobj   
147 [0x93]: line: 132 movg @30 // @std.io.task#__srt_global   
148 [0x94]:           movn #8   
150 [0x96]:           pushobj   
151 [0x97]:           pushl 0   
152 [0x98]:           call @2224 // <std.io.task#job_master.cleanup_job>   
153 [0x99]:           jmp @184   
154 [0x9a]: line: 134 movg @35 // @std.io.task#job_state   : catch(std#throwable)
155 [0x9b]:           movn #3   
157 [0x9d]:           pushobj   
158 [0x9e]:           movl 0   
159 [0x9f]:           movn #19   
161 [0xa1]:           popobj   
162 [0xa2]: line: 135 movg @30 // @std.io.task#__srt_global   
163 [0xa3]:           movn #8   
165 [0xa5]:           pushobj   
166 [0xa6]:           pushl 0   
167 [0xa7]:           call @2224 // <std.io.task#job_master.cleanup_job>   
168 [0xa8]: line: 136 movl 0   
169 [0xa9]:           movn #17   
171 [0xab]:           movi #0, adx   
173 [0xad]:           iaload ebx, adx   
174 [0xae]:           not ebx, ebx   
175 [0xaf]:           movr cmt, ebx   
176 [0xb0]:           jne 180   
177 [0xb1]: line: 137 call @2069 // <std.io.fiber#fiber.current>   
178 [0xb2]:           call @2067 // <std.io.fiber#fiber.unbind>   
179 [0xb3]:           pop   
180 [0xb4]:           nop   
181 [0xb5]: line: 138 pushl 1   
182 [0xb6]:           throw    
183 [0xb7]:           jmp @184   
184 [0xb8]:           nop   : try end
185 [0xb9]:           ret   


function: std.io.task#job.is_finished[2199] params(0) in file: lib\support\/0.2.9//io//task//job.sharp:142:8: note:  
		    def is_finished() := state == completed || state == cancelled;
		       ^

0 [0x0]: line: 142 movl 0   
1 [0x1]:           movn #19   
3 [0x3]:           pushobj   
4 [0x4]:           movg @35 // @std.io.task#job_state   
5 [0x5]:           movn #2   
7 [0x7]:           pushobj   
8 [0x8]:           call @1947 // <std#_enum_.operator==>   
9 [0x9]:           loadval ebx   
10 [0xa]:           skpe ebx // pc = 21   
11 [0xb]:           movl 0   
12 [0xc]:           movn #19   
14 [0xe]:           pushobj   
15 [0xf]:           movg @35 // @std.io.task#job_state   
16 [0x10]:           movn #3   
18 [0x12]:           pushobj   
19 [0x13]:           call @1947 // <std#_enum_.operator==>   
20 [0x14]:           loadval ebx   
21 [0x15]:           return_val ebx   
22 [0x16]:           ret   


function: std.io.task#job.is_active[2200] params(0) in file: lib\support\/0.2.9//io//task//job.sharp:143:8: note:  
		    def is_active() := state == active;
		       ^

0 [0x0]: line: 143 movl 0   
1 [0x1]:           movn #19   
3 [0x3]:           pushobj   
4 [0x4]:           movg @35 // @std.io.task#job_state   
5 [0x5]:           movn #1   
7 [0x7]:           pushobj   
8 [0x8]:           call @1947 // <std#_enum_.operator==>   
9 [0x9]:           loadval ebx   
10 [0xa]:           return_val ebx   
11 [0xb]:           ret   


function: std.io.task#job.update_timeout[2201] params(1) in file: lib\support\/0.2.9//io//task//job.sharp:145:15: note:  
		    public def update_timeout(tm: var) {
		              ^

0 [0x0]: line: 146 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #10   
4 [0x4]:           loadval ebx   
5 [0x5]:           movi #0, adx   
7 [0x7]:           rmov adx, ebx   
8 [0x8]:           ret   


function: std.io.task#job.update_interval[2202] params(2) in file: lib\support\/0.2.9//io//task//job.sharp:149:15: note:  
		    public def update_interval(tm: var, interval: time_unit) {
		              ^

0 [0x0]: line: 150 movl 0   
1 [0x1]:           movn #15   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           not ebx, ebx   
7 [0x7]:           movr cmt, ebx   
8 [0x8]:           jne 15   
9 [0x9]: line: 151 new_class @5 // std#illegal_state_exception   
11 [0xb]:           dup    
12 [0xc]:           newstr @70 // cannot set update restart interval on non-recurring job   
13 [0xd]:           call @1964 // <std#illegal_state_exception.illegal_state_exception>   
14 [0xe]:           throw    
15 [0xf]:           nop   
16 [0x10]: line: 153 movl 0   
17 [0x11]:           movn #19   
19 [0x13]:           pushobj   
20 [0x14]:           movg @35 // @std.io.task#job_state   
21 [0x15]:           movn #1   
23 [0x17]:           pushobj   
24 [0x18]:           call @1947 // <std#_enum_.operator==>   
25 [0x19]:           loadval ebx   
26 [0x1a]:           movr cmt, ebx   
27 [0x1b]:           jne 34   
28 [0x1c]: line: 154 pushl 0   
29 [0x1d]:           call @2188 // <std.io.task#job.cancel_future>   
30 [0x1e]: line: 155 movl 0   
31 [0x1f]:           movn #14   
33 [0x21]:           del   
34 [0x22]:           nop   
35 [0x23]: line: 158 pushl 2   
36 [0x24]:           movg @79 // @std#time_unit   
37 [0x25]:           movn #3   
39 [0x27]:           pushobj   
40 [0x28]:           call @1947 // <std#_enum_.operator==>   
41 [0x29]:           loadval ebx   
42 [0x2a]:           movr cmt, ebx   
43 [0x2b]:           jne 54   
44 [0x2c]: line: 159 ipushl #1   
45 [0x2d]:           call @3653 // <std#time.nano_to_mills>   
46 [0x2e]:           movl 0   
47 [0x2f]:           movn #12   
49 [0x31]:           loadval ebx   
50 [0x32]:           movi #0, adx   
52 [0x34]:           rmov adx, ebx   
53 [0x35]:           jmp @113   
54 [0x36]:           pushl 2   
55 [0x37]:           movg @79 // @std#time_unit   
56 [0x38]:           movn #2   
58 [0x3a]:           pushobj   
59 [0x3b]:           call @1947 // <std#_enum_.operator==>   
60 [0x3c]:           loadval ebx   
61 [0x3d]:           movr cmt, ebx   
62 [0x3e]:           jne 75   
63 [0x3f]: line: 161 ipushl #1   
64 [0x40]:           movi #1000, ebx   
66 [0x42]:           loadval ecx   
67 [0x43]:           div ecx, ebx -> ebx   
68 [0x44]:           movl 0   
69 [0x45]:           movn #12   
71 [0x47]:           movi #0, adx   
73 [0x49]:           rmov adx, ebx   
74 [0x4a]:           jmp @113   
75 [0x4b]:           pushl 2   
76 [0x4c]:           movg @79 // @std#time_unit   
77 [0x4d]:           movn #1   
79 [0x4f]:           pushobj   
80 [0x50]:           call @1947 // <std#_enum_.operator==>   
81 [0x51]:           loadval ebx   
82 [0x52]:           movr cmt, ebx   
83 [0x53]:           jne 93   
84 [0x54]: line: 163 ipushl #1   
85 [0x55]:           movl 0   
86 [0x56]:           movn #12   
88 [0x58]:           loadval ebx   
89 [0x59]:           movi #0, adx   
91 [0x5b]:           rmov adx, ebx   
92 [0x5c]:           jmp @113   
93 [0x5d]:           pushl 2   
94 [0x5e]:           movg @79 // @std#time_unit   
95 [0x5f]:           movn #0   
97 [0x61]:           pushobj   
98 [0x62]:           call @1947 // <std#_enum_.operator==>   
99 [0x63]:           loadval ebx   
100 [0x64]:           movr cmt, ebx   
101 [0x65]:           jne 113   
102 [0x66]: line: 165 ipushl #1   
103 [0x67]:           movi #1000, ebx   
105 [0x69]:           loadval ecx   
106 [0x6a]:           mul ecx, ebx -> ebx   
107 [0x6b]:           movl 0   
108 [0x6c]:           movn #12   
110 [0x6e]:           movi #0, adx   
112 [0x70]:           rmov adx, ebx   
113 [0x71]:           nop   
114 [0x72]: line: 168 movl 0   
115 [0x73]:           movn #19   
117 [0x75]:           pushobj   
118 [0x76]:           movg @35 // @std.io.task#job_state   
119 [0x77]:           movn #1   
121 [0x79]:           pushobj   
122 [0x7a]:           call @1947 // <std#_enum_.operator==>   
123 [0x7b]:           loadval ebx   
124 [0x7c]:           movr cmt, ebx   
125 [0x7d]:           jne 128   
126 [0x7e]: line: 169 pushl 0   
127 [0x7f]:           call @2203 // <std.io.task#job.reschedule>   
128 [0x80]:           nop   
129 [0x81]:           ret   


function: std.io.task#job.reschedule[2203] params(0) in file: lib\support\/0.2.9//io//task//job.sharp:172:18: note:  
		    protected def reschedule() {
		                 ^

0 [0x0]: line: 174 movl 0   
1 [0x1]:           movn #11   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #12   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           rstore ebx   
16 [0x10]:           call @3655 // <std#time.mills_time>   
17 [0x11]:           loadval ebx   
18 [0x12]:           loadval ecx   
19 [0x13]:           sub ecx, ebx -> ebx   
20 [0x14]:           smovr_2 ebx, fp+1   
21 [0x15]: line: 175 call @2243 // <std.io.task#task.builder>   
22 [0x16]:           movl 0   
23 [0x17]:           movn #6   
25 [0x19]:           pushobj   
26 [0x1a]:           call @2209 // <std.io.task#job_builder.with_name>   
27 [0x1b]:           movl 0   
28 [0x1c]:           movn #12   
30 [0x1e]:           movi #0, adx   
32 [0x20]:           iaload ebx, adx   
33 [0x21]:           rstore ebx   
34 [0x22]:           movg @79 // @std#time_unit   
35 [0x23]:           movn #1   
37 [0x25]:           pushobj   
38 [0x26]:           call @2208 // <std.io.task#job_builder.recurring>   
39 [0x27]:           popobj2    
40 [0x28]:           smovr_3 fp+2   
41 [0x29]: line: 179 movl 0   
42 [0x2a]:           movn #7   
44 [0x2c]:           sizeof ebx   
45 [0x2d]:           rstore ebx   
46 [0x2e]:           movi #1, ebx   
48 [0x30]:           loadval ecx   
49 [0x31]:           sub ecx, ebx -> ebx   
50 [0x32]:           newobj_arry ebx   
51 [0x33]:           popobj2    
52 [0x34]:           smovr_3 fp+3   
53 [0x35]: line: 180 istorel 0, fp+4   
55 [0x37]: line: 181 istorel 1, fp+5   
57 [0x39]:           ipushl #5   
58 [0x3a]:           movl 0   
59 [0x3b]:           movn #7   
61 [0x3d]:           sizeof ebx   
62 [0x3e]:           loadval ecx   
63 [0x3f]:           lt ecx, ebx   
64 [0x40]:           movr ebx, cmt   
65 [0x41]:           movr cmt, ebx   
66 [0x42]:           jne 91   
67 [0x43]: line: 182 movl 0   
68 [0x44]:           movn #7   
70 [0x46]:           pushobj   
71 [0x47]:           loadl ebx, fp+5   
72 [0x48]:           popobj2    
73 [0x49]:           movr adx, ebx   
74 [0x4a]:           chklen adx   
75 [0x4b]:           movnd adx   
76 [0x4c]:           pushobj   
77 [0x4d]:           pushl 3   
78 [0x4e]:           loadl ebx, fp+4   
79 [0x4f]:           movr egx, ebx   
80 [0x50]:           inc ebx   
81 [0x51]:           smovr_2 ebx, fp+4   
82 [0x52]:           movr ebx, egx   
83 [0x53]:           popobj2    
84 [0x54]:           movr adx, ebx   
85 [0x55]:           chklen adx   
86 [0x56]:           movnd adx   
87 [0x57]:           popobj   
88 [0x58]:           iaddl 1, fp@5   
90 [0x5a]:           jmp @57   
91 [0x5b]: line: 185 movl 0   
92 [0x5c]:           movn #18   
94 [0x5e]:           movi #0, adx   
96 [0x60]:           iaload ebx, adx   
97 [0x61]:           movr cmt, ebx   
98 [0x62]:           jne 102   
99 [0x63]: line: 186 pushl 2   
100 [0x64]:           call @2212 // <std.io.task#job_builder.long_term>   
101 [0x65]:           pop   
102 [0x66]:           nop   
103 [0x67]: line: 187 pushl 2   
104 [0x68]:           pushl 3   
105 [0x69]:           call @2210 // <std.io.task#job_builder.with_args>   
106 [0x6a]:           pop   
107 [0x6b]: line: 189 movl 0   
108 [0x6c]:           movn #0   
110 [0x6e]:           movi #0, adx   
112 [0x70]:           iaload ebx, adx   
113 [0x71]:           movr cmt, ebx   
114 [0x72]:           jne 132   
115 [0x73]: line: 190 movl 0   
116 [0x74]:           movn #0   
118 [0x76]:           movi #0, adx   
120 [0x78]:           iaload ebx, adx   
121 [0x79]:           rstore ebx   
122 [0x7a]:           movl 2   
123 [0x7b]:           movn #1   
125 [0x7d]:           movn #0   
127 [0x7f]:           loadval ebx   
128 [0x80]:           movi #0, adx   
130 [0x82]:           rmov adx, ebx   
131 [0x83]:           jmp @206   
132 [0x84]:           movl 0   
133 [0x85]:           movn #1   
135 [0x87]:           movi #0, adx   
137 [0x89]:           iaload ebx, adx   
138 [0x8a]:           movr cmt, ebx   
139 [0x8b]:           jne 157   
140 [0x8c]: line: 191 movl 0   
141 [0x8d]:           movn #1   
143 [0x8f]:           movi #0, adx   
145 [0x91]:           iaload ebx, adx   
146 [0x92]:           rstore ebx   
147 [0x93]:           movl 2   
148 [0x94]:           movn #1   
150 [0x96]:           movn #1   
152 [0x98]:           loadval ebx   
153 [0x99]:           movi #0, adx   
155 [0x9b]:           rmov adx, ebx   
156 [0x9c]:           jmp @206   
157 [0x9d]:           movl 0   
158 [0x9e]:           movn #2   
160 [0xa0]:           movi #0, adx   
162 [0xa2]:           iaload ebx, adx   
163 [0xa3]:           movr cmt, ebx   
164 [0xa4]:           jne 182   
165 [0xa5]: line: 192 movl 0   
166 [0xa6]:           movn #2   
168 [0xa8]:           movi #0, adx   
170 [0xaa]:           iaload ebx, adx   
171 [0xab]:           rstore ebx   
172 [0xac]:           movl 2   
173 [0xad]:           movn #1   
175 [0xaf]:           movn #2   
177 [0xb1]:           loadval ebx   
178 [0xb2]:           movi #0, adx   
180 [0xb4]:           rmov adx, ebx   
181 [0xb5]:           jmp @206   
182 [0xb6]:           movl 0   
183 [0xb7]:           movn #3   
185 [0xb9]:           movi #0, adx   
187 [0xbb]:           iaload ebx, adx   
188 [0xbc]:           movr cmt, ebx   
189 [0xbd]:           jne 206   
190 [0xbe]: line: 193 movl 0   
191 [0xbf]:           movn #3   
193 [0xc1]:           movi #0, adx   
195 [0xc3]:           iaload ebx, adx   
196 [0xc4]:           rstore ebx   
197 [0xc5]:           movl 2   
198 [0xc6]:           movn #1   
200 [0xc8]:           movn #3   
202 [0xca]:           loadval ebx   
203 [0xcb]:           movi #0, adx   
205 [0xcd]:           rmov adx, ebx   
206 [0xce]:           nop   
207 [0xcf]: line: 196 ipushl #1   
208 [0xd0]:           movi #0, ebx   
210 [0xd2]:           loadval ecx   
211 [0xd3]:           gt ecx, ebx   
212 [0xd4]:           movr ebx, cmt   
213 [0xd5]:           movr cmt, ebx   
214 [0xd6]:           jne 219   
215 [0xd7]: line: 197 pushl 2   
216 [0xd8]:           ipushl #1   
217 [0xd9]:           call @2207 // <std.io.task#job_builder.schedule>   
218 [0xda]:           pop   
219 [0xdb]:           nop   
220 [0xdc]: line: 198 movl 0   
221 [0xdd]:           movn #9   
223 [0xdf]:           movi #0, adx   
225 [0xe1]:           iaload ebx, adx   
226 [0xe2]:           movr cmt, ebx   
227 [0xe3]:           jne 238   
228 [0xe4]: line: 199 pushl 2   
229 [0xe5]:           movl 0   
230 [0xe6]:           movn #10   
232 [0xe8]:           movi #0, adx   
234 [0xea]:           iaload ebx, adx   
235 [0xeb]:           rstore ebx   
236 [0xec]:           call @2206 // <std.io.task#job_builder.with_timeout>   
237 [0xed]:           pop   
238 [0xee]:           nop   
239 [0xef]: line: 201 movl 2   
240 [0xf0]:           movn #1   
242 [0xf2]:           pushobj   
243 [0xf3]:           movl 0   
244 [0xf4]:           movn #14   
246 [0xf6]:           popobj   
247 [0xf7]: line: 202 movl 2   
248 [0xf8]:           movn #0   
250 [0xfa]:           pushobj   
251 [0xfb]:           movl 2   
252 [0xfc]:           movn #1   
254 [0xfe]:           pushobj   
255 [0xff]:           call @2222 // <std.io.task#job_master.start_job>   
256 [0x100]:           ret   


constructor: std.io.task#job_builder.job_builder[2204] params(0) in file: lib\support\/0.2.9//io//task//job_builder.sharp:6:21: note:  
			private job_builder() {}
		                    ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std.io.task#job_builder.job_builder[2205] params(2) in file: lib\support\/0.2.9//io//task//job_builder.sharp:8:23: note:  
			protected job_builder(scheduled_job : job, master : job_master) {
		                      ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 9 pushl 1   
2 [0x2]:         movl 0   
3 [0x3]:         movn #1   
5 [0x5]:         popobj   
6 [0x6]: line: 10 pushl 2   
7 [0x7]:          movl 0   
8 [0x8]:          movn #0   
10 [0xa]:          popobj   
11 [0xb]: line: 12 movi #1, ebx   
13 [0xd]:          newobj_arry ebx   
14 [0xe]:          popobj2    
15 [0xf]:          smovr_3 fp+3   
16 [0x10]: line: 13 movl 0   
17 [0x11]:          movn #1   
19 [0x13]:          pushobj   
20 [0x14]:          pushl 3   
21 [0x15]:          movi #0, ebx   
23 [0x17]:          popobj2    
24 [0x18]:          movr adx, ebx   
25 [0x19]:          chklen adx   
26 [0x1a]:          movnd adx   
27 [0x1b]:          popobj   
28 [0x1c]: line: 14 pushl 3   
29 [0x1d]:          movl 0   
30 [0x1e]:          movn #1   
32 [0x20]:          movn #7   
34 [0x22]:          popobj   
35 [0x23]:          ret   


function: std.io.task#job_builder.with_timeout[2206] params(1) in file: lib\support\/0.2.9//io//task//job_builder.sharp:17:5: note:  
			def with_timeout(mills_time : var) : job_builder {
		    ^

0 [0x0]: line: 18 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          movn #17   
5 [0x5]:          movi #0, adx   
7 [0x7]:          iaload ebx, adx   
8 [0x8]:          movr cmt, ebx   
9 [0x9]:          jne 16   
10 [0xa]: line: 19 new_class @5 // std#illegal_state_exception   
12 [0xc]:          dup    
13 [0xd]:          newstr @71 // cannot set a timeout on a job that's blocking the calling thread   
14 [0xe]:          call @1964 // <std#illegal_state_exception.illegal_state_exception>   
15 [0xf]:          throw    
16 [0x10]:          nop   
17 [0x11]: line: 22 ipushl #1   
18 [0x12]:          movl 0   
19 [0x13]:          movn #1   
21 [0x15]:          movn #10   
23 [0x17]:          loadval ebx   
24 [0x18]:          movi #0, adx   
26 [0x1a]:          rmov adx, ebx   
27 [0x1b]: line: 23 istore 1   
29 [0x1d]:          movl 0   
30 [0x1e]:          movn #1   
32 [0x20]:          movn #9   
34 [0x22]:          loadval ebx   
35 [0x23]:          movi #0, adx   
37 [0x25]:          rmov adx, ebx   
38 [0x26]: line: 24 movl 0   
39 [0x27]:          returnobj   
40 [0x28]:          ret   


function: std.io.task#job_builder.schedule[2207] params(1) in file: lib\support\/0.2.9//io//task//job_builder.sharp:27:5: note:  
			def schedule(future : var) : job_builder {
		    ^

0 [0x0]: line: 28 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #1   
4 [0x4]:          movn #13   
6 [0x6]:          loadval ebx   
7 [0x7]:          movi #0, adx   
9 [0x9]:          rmov adx, ebx   
10 [0xa]: line: 29 movl 0   
11 [0xb]:          returnobj   
12 [0xc]:          ret   


function: std.io.task#job_builder.recurring[2208] params(2) in file: lib\support\/0.2.9//io//task//job_builder.sharp:32:5: note:  
			def recurring(tm : var, interval: time_unit) : job_builder {
		    ^

0 [0x0]: line: 33 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          movn #17   
5 [0x5]:          movi #0, adx   
7 [0x7]:          iaload ebx, adx   
8 [0x8]:          movr cmt, ebx   
9 [0x9]:          jne 16   
10 [0xa]: line: 34 new_class @5 // std#illegal_state_exception   
12 [0xc]:          dup    
13 [0xd]:          newstr @72 // cannot set a job recurring that's blocking the calling thread   
14 [0xe]:          call @1964 // <std#illegal_state_exception.illegal_state_exception>   
15 [0xf]:          throw    
16 [0x10]:          nop   
17 [0x11]: line: 37 istore 1   
19 [0x13]:          movl 0   
20 [0x14]:          movn #1   
22 [0x16]:          movn #15   
24 [0x18]:          loadval ebx   
25 [0x19]:          movi #0, adx   
27 [0x1b]:          rmov adx, ebx   
28 [0x1c]: line: 38 movl 0   
29 [0x1d]:          movn #1   
31 [0x1f]:          pushobj   
32 [0x20]:          ipushl #1   
33 [0x21]:          pushl 2   
34 [0x22]:          call @2202 // <std.io.task#job.update_interval>   
35 [0x23]: line: 39 movl 0   
36 [0x24]:          returnobj   
37 [0x25]:          ret   


function: std.io.task#job_builder.with_name[2209] params(1) in file: lib\support\/0.2.9//io//task//job_builder.sharp:42:5: note:  
			def with_name(job_name : string) : job_builder {
		    ^

0 [0x0]: line: 43 pushl 1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #1   
4 [0x4]:          movn #6   
6 [0x6]:          popobj   
7 [0x7]: line: 44 movl 0   
8 [0x8]:          returnobj   
9 [0x9]:          ret   


function: std.io.task#job_builder.with_args[2210] params(1) in file: lib\support\/0.2.9//io//task//job_builder.sharp:47:5: note:  
			def with_args(args : object[]) : job_builder {
		    ^

0 [0x0]: line: 48 istore 1   
2 [0x2]:          movl 1   
3 [0x3]:          sizeof ebx   
4 [0x4]:          loadval ecx   
5 [0x5]:          add ecx, ebx -> ebx   
6 [0x6]:          newobj_arry ebx   
7 [0x7]:          popobj2    
8 [0x8]:          smovr_3 fp+2   
9 [0x9]: line: 49 movl 0   
10 [0xa]:          movn #1   
12 [0xc]:          pushobj   
13 [0xd]:          pushl 2   
14 [0xe]:          movi #0, ebx   
16 [0x10]:          popobj2    
17 [0x11]:          movr adx, ebx   
18 [0x12]:          chklen adx   
19 [0x13]:          movnd adx   
20 [0x14]:          popobj   
21 [0x15]: line: 51 istorel 0, fp+3   
23 [0x17]: line: 52 istorel -1, fp+5   
25 [0x19]:          pushl 1   
26 [0x1a]:          popl 6   
27 [0x1b]:          iaddl 1, fp@5   
29 [0x1d]:          movl 6   
30 [0x1e]:          sizeof ecx   
31 [0x1f]:          loadl ebx, fp+5   
32 [0x20]:          lt ebx, ecx   
33 [0x21]:          jne 48   
34 [0x22]:          movnd ebx   
35 [0x23]:          pushobj   
36 [0x24]:          popl 4   
37 [0x25]: line: 53 pushl 4   
38 [0x26]:          pushl 2   
39 [0x27]:          loadl ebx, fp+3   
40 [0x28]:          inc ebx   
41 [0x29]:          smovr_2 ebx, fp+3   
42 [0x2a]:          popobj2    
43 [0x2b]:          movr adx, ebx   
44 [0x2c]:          chklen adx   
45 [0x2d]:          movnd adx   
46 [0x2e]:          popobj   
47 [0x2f]:          jmp @27   
48 [0x30]: line: 56 pushl 2   
49 [0x31]:          movl 0   
50 [0x32]:          movn #1   
52 [0x34]:          movn #7   
54 [0x36]:          popobj   
55 [0x37]: line: 57 movl 0   
56 [0x38]:          returnobj   
57 [0x39]:          ret   


function: std.io.task#job_builder.block[2211] params(0) in file: lib\support\/0.2.9//io//task//job_builder.sharp:60:5: note:  
			def block() : job_builder {
		    ^

0 [0x0]: line: 61 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          movn #9   
5 [0x5]:          movi #0, adx   
7 [0x7]:          iaload ebx, adx   
8 [0x8]:          movr cmt, ebx   
9 [0x9]:          jne 16   
10 [0xa]: line: 62 new_class @5 // std#illegal_state_exception   
12 [0xc]:          dup    
13 [0xd]:          newstr @73 // cannot block calling thread on job that has a timeout   
14 [0xe]:          call @1964 // <std#illegal_state_exception.illegal_state_exception>   
15 [0xf]:          throw    
16 [0x10]:          nop   
17 [0x11]: line: 65 movl 0   
18 [0x12]:          movn #1   
20 [0x14]:          movn #15   
22 [0x16]:          movi #0, adx   
24 [0x18]:          iaload ebx, adx   
25 [0x19]:          movr cmt, ebx   
26 [0x1a]:          jne 33   
27 [0x1b]: line: 66 new_class @5 // std#illegal_state_exception   
29 [0x1d]:          dup    
30 [0x1e]:          newstr @74 // cannot block calling thread on a recurring job   
31 [0x1f]:          call @1964 // <std#illegal_state_exception.illegal_state_exception>   
32 [0x20]:          throw    
33 [0x21]:          nop   
34 [0x22]: line: 69 istore 1   
36 [0x24]:          movl 0   
37 [0x25]:          movn #1   
39 [0x27]:          movn #17   
41 [0x29]:          loadval ebx   
42 [0x2a]:          movi #0, adx   
44 [0x2c]:          rmov adx, ebx   
45 [0x2d]: line: 70 movl 0   
46 [0x2e]:          returnobj   
47 [0x2f]:          ret   


function: std.io.task#job_builder.long_term[2212] params(0) in file: lib\support\/0.2.9//io//task//job_builder.sharp:73:5: note:  
			def long_term() : job_builder {
		    ^

0 [0x0]: line: 74 istore 1   
2 [0x2]:          movl 0   
3 [0x3]:          movn #1   
5 [0x5]:          movn #18   
7 [0x7]:          loadval ebx   
8 [0x8]:          movi #0, adx   
10 [0xa]:          rmov adx, ebx   
11 [0xb]: line: 75 movl 0   
12 [0xc]:          returnobj   
13 [0xd]:          ret   


overload function: std.io.task#job_builder.operator=[2213] params(1) in file: lib\support\/0.2.9//io//task//job_builder.sharp:78:12: note:  
			public def operator=(main: ()()) : job {
		           ^

0 [0x0]: line: 79 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          pushobj   
4 [0x4]:          ipushl #1   
5 [0x5]:          call @2193 // <std.io.task#job.operator=>   
6 [0x6]: line: 80 movl 0   
7 [0x7]:          movn #0   
9 [0x9]:          pushobj   
10 [0xa]:          movl 0   
11 [0xb]:          movn #1   
13 [0xd]:          pushobj   
14 [0xe]:          call @2222 // <std.io.task#job_master.start_job>   
15 [0xf]: line: 81 movl 0   
16 [0x10]:          movn #1   
18 [0x12]:          returnobj   
19 [0x13]:          ret   


overload function: std.io.task#job_builder.operator=[2214] params(1) in file: lib\support\/0.2.9//io//task//job_builder.sharp:84:12: note:  
			public def operator=(main: (args : object[])()) : job {
		           ^

0 [0x0]: line: 85 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          pushobj   
4 [0x4]:          ipushl #1   
5 [0x5]:          call @2194 // <std.io.task#job.operator=>   
6 [0x6]: line: 86 movl 0   
7 [0x7]:          movn #0   
9 [0x9]:          pushobj   
10 [0xa]:          movl 0   
11 [0xb]:          movn #1   
13 [0xd]:          pushobj   
14 [0xe]:          call @2222 // <std.io.task#job_master.start_job>   
15 [0xf]: line: 87 movl 0   
16 [0x10]:          movn #1   
18 [0x12]:          returnobj   
19 [0x13]:          ret   


overload function: std.io.task#job_builder.operator=[2215] params(1) in file: lib\support\/0.2.9//io//task//job_builder.sharp:90:18: note:  
		    protected def operator=(main: (deferred : object, args : object[])()) : job {
		                 ^

0 [0x0]: line: 91 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          pushobj   
4 [0x4]:          ipushl #1   
5 [0x5]:          call @2195 // <std.io.task#job.operator=>   
6 [0x6]: line: 92 movl 0   
7 [0x7]:          movn #1   
9 [0x9]:          movn #15   
11 [0xb]:          movi #0, adx   
13 [0xd]:          iaload ebx, adx   
14 [0xe]:          movr cmt, ebx   
15 [0xf]:          jne 22   
16 [0x10]: line: 93 new_class @5 // std#illegal_state_exception   
18 [0x12]:          dup    
19 [0x13]:          newstr @75 // recurring jobs cannot be deferred tasks   
20 [0x14]:          call @1964 // <std#illegal_state_exception.illegal_state_exception>   
21 [0x15]:          throw    
22 [0x16]:          nop   
23 [0x17]: line: 96 movl 0   
24 [0x18]:          movn #0   
26 [0x1a]:          pushobj   
27 [0x1b]:          movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          pushobj   
31 [0x1f]:          call @2222 // <std.io.task#job_master.start_job>   
32 [0x20]: line: 97 movl 0   
33 [0x21]:          movn #1   
35 [0x23]:          returnobj   
36 [0x24]:          ret   


overload function: std.io.task#job_builder.operator=[2216] params(1) in file: lib\support\/0.2.9//io//task//job_builder.sharp:100:18: note:  
		    protected def operator=(main: (deferred : object)()) : job {
		                 ^

0 [0x0]: line: 101 movl 0   
1 [0x1]:           movn #1   
3 [0x3]:           pushobj   
4 [0x4]:           ipushl #1   
5 [0x5]:           call @2196 // <std.io.task#job.operator=>   
6 [0x6]: line: 102 movl 0   
7 [0x7]:           movn #1   
9 [0x9]:           movn #15   
11 [0xb]:           movi #0, adx   
13 [0xd]:           iaload ebx, adx   
14 [0xe]:           movr cmt, ebx   
15 [0xf]:           jne 22   
16 [0x10]: line: 103 new_class @5 // std#illegal_state_exception   
18 [0x12]:           dup    
19 [0x13]:           newstr @75 // recurring jobs cannot be deferred tasks   
20 [0x14]:           call @1964 // <std#illegal_state_exception.illegal_state_exception>   
21 [0x15]:           throw    
22 [0x16]:           nop   
23 [0x17]: line: 106 movl 0   
24 [0x18]:           movn #0   
26 [0x1a]:           pushobj   
27 [0x1b]:           movl 0   
28 [0x1c]:           movn #1   
30 [0x1e]:           pushobj   
31 [0x1f]:           call @2222 // <std.io.task#job_master.start_job>   
32 [0x20]: line: 107 movl 0   
33 [0x21]:           movn #1   
35 [0x23]:           returnobj   
36 [0x24]:           ret   


function: std.io.task#job_builder.get_job[2217] params(0) in file: lib\support\/0.2.9//io//task//job_builder.sharp:110:12: note:  
			public def get_job() := scheduled_job;
		           ^

0 [0x0]: line: 110 movl 0   
1 [0x1]:           movn #1   
3 [0x3]:           returnobj   
4 [0x4]:           ret   


constructor: std.io.task#job_master.job_master[2218] params(0) in file: lib\support\/0.2.9//io//task//job_master.sharp:7:12: note:  
			job_master() {
		           ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 8 new_class @38 // std.io#thread_group   
3 [0x3]:         dup    
4 [0x4]:         new_class @75 // std#string   
6 [0x6]:         dup    
7 [0x7]:         newstr @76 // Long term jobs   
8 [0x8]:         call @3546 // <std#string.string>   
9 [0x9]:         movg @39 // @std.io#thread_priority   
10 [0xa]:         movn #0   
12 [0xc]:         pushobj   
13 [0xd]:         call @2284 // <std.io#thread_group.thread_group>   
14 [0xe]:         movl 0   
15 [0xf]:         movn #2   
17 [0x11]:         popobj   
18 [0x12]: line: 9 new_class @38 // std.io#thread_group   
20 [0x14]:         dup    
21 [0x15]:         new_class @75 // std#string   
23 [0x17]:         dup    
24 [0x18]:         newstr @77 // Short term jobs   
25 [0x19]:         call @3546 // <std#string.string>   
26 [0x1a]:         movg @39 // @std.io#thread_priority   
27 [0x1b]:         movn #2   
29 [0x1d]:         pushobj   
30 [0x1e]:         call @2284 // <std.io#thread_group.thread_group>   
31 [0x1f]:         movl 0   
32 [0x20]:         movn #3   
34 [0x22]:         popobj   
35 [0x23]: line: 10 new_class @118 // std#synced_list<std.io.task#job>   
37 [0x25]:          dup    
38 [0x26]:          call @3938 // <std#synced_list<std.io.task#job>.synced_list>   
39 [0x27]:          movl 0   
40 [0x28]:          movn #1   
42 [0x2a]:          popobj   
43 [0x2b]: line: 11 new_class @118 // std#synced_list<std.io.task#job>   
45 [0x2d]:          dup    
46 [0x2e]:          call @3938 // <std#synced_list<std.io.task#job>.synced_list>   
47 [0x2f]:          movl 0   
48 [0x30]:          movn #0   
50 [0x32]:          popobj   
51 [0x33]:          ret   


overload function: std.io.task#job_master.operator=[2219] params(1) in file: lib\support\/0.2.9//io//task//job_master.sharp:14:5: note:  
			def operator=(main: ()()) : job {
		    ^

0 [0x0]: line: 15 pushl 0   
1 [0x1]:          call @2220 // <std.io.task#job_master.create_job>   
2 [0x2]:          popobj2    
3 [0x3]:          smovr_3 fp+2   
4 [0x4]: line: 16 pushl 2   
5 [0x5]:          ipushl #1   
6 [0x6]:          call @2193 // <std.io.task#job.operator=>   
7 [0x7]: line: 17 pushl 0   
8 [0x8]:          pushl 2   
9 [0x9]:          call @2222 // <std.io.task#job_master.start_job>   
10 [0xa]: line: 18 movl 2   
11 [0xb]:          returnobj   
12 [0xc]:          ret   


function: std.io.task#job_master.create_job[2220] params(0) in file: lib\support\/0.2.9//io//task//job_master.sharp:21:15: note:  
			protected def create_job() := new job("job#${job.guid}");
		              ^

0 [0x0]: line: 21 new_class @32 // std.io.task#job   
2 [0x2]:          dup    
3 [0x3]:          new_class @75 // std#string   
5 [0x5]:          dup    
6 [0x6]:          newstr @0 // job#   
7 [0x7]:          call @3546 // <std#string.string>   
8 [0x8]:          movg @32 // @std.io.task#job   
9 [0x9]:          movn #0   
11 [0xb]:          movi #0, adx   
13 [0xd]:          iaload ebx, adx   
14 [0xe]:          rstore ebx   
15 [0xf]:          call @3578 // <std#string.operator+>   
16 [0x10]:          call @2185 // <std.io.task#job.job>   
17 [0x11]:          popobj2    
18 [0x12]:          returnobj   
19 [0x13]:          ret   


function: std.io.task#job_master.create_job[2221] params(1) in file: lib\support\/0.2.9//io//task//job_master.sharp:23:15: note:  
			protected def create_job(name : string) := new job(name);
		              ^

0 [0x0]: line: 23 new_class @32 // std.io.task#job   
2 [0x2]:          dup    
3 [0x3]:          pushl 1   
4 [0x4]:          call @2185 // <std.io.task#job.job>   
5 [0x5]:          popobj2    
6 [0x6]:          returnobj   
7 [0x7]:          ret   


function: std.io.task#job_master.start_job[2222] params(1) in file: lib\support\/0.2.9//io//task//job_master.sharp:25:15: note:  
			protected def start_job(scheduled_job : job) {
		              ^

0 [0x0]: line: 26 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 27 movl 0   
3 [0x3]:          movn #4   
5 [0x5]:          movi #0, adx   
7 [0x7]:          iaload ebx, adx   
8 [0x8]:          not ebx, ebx   
9 [0x9]:          movr cmt, ebx   
10 [0xa]:          jne 20   
11 [0xb]: line: 28 call @2226 // <std.io.task#__srt_global.start_scheduler>   
12 [0xc]: line: 29 movi #1, ebx   
14 [0xe]:          movl 0   
15 [0xf]:          movn #4   
17 [0x11]:          movi #0, adx   
19 [0x13]:          rmov adx, ebx   
20 [0x14]:          nop   
21 [0x15]:          movl 0   
22 [0x16]:          _ulck   
23 [0x17]: line: 33 movl 1   
24 [0x18]:          movn #13   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          iaload ebx, adx   
29 [0x1d]:          movr cmt, ebx   
30 [0x1e]:          jne 48   
31 [0x1f]: line: 34 movl 1   
32 [0x20]:          movn #13   
34 [0x22]:          movi #0, adx   
36 [0x24]:          iaload ebx, adx   
37 [0x25]:          rstore ebx   
38 [0x26]:          call @3655 // <std#time.mills_time>   
39 [0x27]:          loadval ebx   
40 [0x28]:          loadval ecx   
41 [0x29]:          add ecx, ebx -> ebx   
42 [0x2a]:          movl 1   
43 [0x2b]:          movn #13   
45 [0x2d]:          movi #0, adx   
47 [0x2f]:          rmov adx, ebx   
48 [0x30]:          nop   
49 [0x31]: line: 36 movl 1   
50 [0x32]:          movn #17   
52 [0x34]:          movi #0, adx   
54 [0x36]:          iaload ebx, adx   
55 [0x37]:          movr cmt, ebx   
56 [0x38]:          jne 60   
57 [0x39]: line: 37 pushl 1   
58 [0x3a]:          call @2233 // <std.io.task#__srt_global.execute_synchronous>   
59 [0x3b]:          jmp @66   
60 [0x3c]: line: 40 movl 0   
61 [0x3d]:          movn #1   
63 [0x3f]:          pushobj   
64 [0x40]:          pushl 1   
65 [0x41]:          call @3981 // <std#synced_list<std.io.task#job>.add>   
66 [0x42]:          nop   
67 [0x43]:          ret   


function: std.io.task#job_master.add_job[2223] params(1) in file: lib\support\/0.2.9//io//task//job_master.sharp:44:15: note:  
			protected def add_job(scheduled_job : job) {
		              ^

0 [0x0]: line: 45 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 1   
5 [0x5]:          call @3981 // <std#synced_list<std.io.task#job>.add>   
6 [0x6]:          ret   


function: std.io.task#job_master.cleanup_job[2224] params(1) in file: lib\support\/0.2.9//io//task//job_master.sharp:48:15: note:  
			protected def cleanup_job(scheduled_job : job) {
		              ^

0 [0x0]: line: 49 movl 1   
1 [0x1]:          movn #8   
3 [0x3]:          del   
4 [0x4]: line: 50 movl 1   
5 [0x5]:          movn #4   
7 [0x7]:          del   
8 [0x8]: line: 51 movl 1   
9 [0x9]:          movn #4   
11 [0xb]:          del   
12 [0xc]: line: 52 movl 1   
13 [0xd]:          movn #14   
15 [0xf]:          del   
16 [0x10]: line: 53 movl 1   
17 [0x11]:          movn #7   
19 [0x13]:          del   
20 [0x14]: line: 54 movl 1   
21 [0x15]:          movn #6   
23 [0x17]:          del   
24 [0x18]: line: 55 movl 0   
25 [0x19]:          movn #1   
27 [0x1b]:          pushobj   
28 [0x1c]:          pushl 1   
29 [0x1d]:          istore 4125   
31 [0x1f]:          call @3988 // <std#synced_list<std.io.task#job>.remove>   
32 [0x20]: line: 56 movl 0   
33 [0x21]:          movn #0   
35 [0x23]:          pushobj   
36 [0x24]:          pushl 1   
37 [0x25]:          istore 4126   
39 [0x27]:          call @3988 // <std#synced_list<std.io.task#job>.remove>   
40 [0x28]:          ret   


function: std.io.task#job_master.cancel_jobs_by_name[2225] params(1) in file: lib\support\/0.2.9//io//task//job_master.sharp:59:15: note:  
			protected def cancel_jobs_by_name(name: string) {
		              ^

0 [0x0]: line: 60 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          _lck    
4 [0x4]: line: 61 istorel 0, fp+2   
6 [0x6]:          ipushl #2   
7 [0x7]:          movl 0   
8 [0x8]:          movn #1   
10 [0xa]:          pushobj   
11 [0xb]:          call @3984 // <std#synced_list<std.io.task#job>.size>   
12 [0xc]:          loadval ebx   
13 [0xd]:          loadval ecx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 45   
18 [0x12]: line: 62 movl 0   
19 [0x13]:          movn #1   
21 [0x15]:          pushobj   
22 [0x16]:          ipushl #2   
23 [0x17]:          call @3943 // <std#synced_list<std.io.task#job>.at>   
24 [0x18]:          popobj2    
25 [0x19]:          movn #6   
27 [0x1b]:          pushobj   
28 [0x1c]:          pushl 1   
29 [0x1d]:          call @3564 // <std#string.operator==>   
30 [0x1e]:          loadval ebx   
31 [0x1f]:          movr cmt, ebx   
32 [0x20]:          jne 41   
33 [0x21]: line: 63 movl 0   
34 [0x22]:          movn #1   
36 [0x24]:          pushobj   
37 [0x25]:          ipushl #2   
38 [0x26]:          call @3989 // <std#synced_list<std.io.task#job>.remove_at>   
39 [0x27]: line: 64 istorel 0, fp+2   
41 [0x29]:          nop   
42 [0x2a]:          iaddl 1, fp@2   
44 [0x2c]:          jmp @6   
45 [0x2d]: line: 68 istorel -1, fp+4   
47 [0x2f]:          movl 0   
48 [0x30]:          movn #0   
50 [0x32]:          pushobj   
51 [0x33]:          invoke_delegate 3936 { static=0, args=0 }   
53 [0x35]:          popl 5   
54 [0x36]:          iaddl 1, fp@4   
56 [0x38]:          movl 5   
57 [0x39]:          sizeof ecx   
58 [0x3a]:          loadl ebx, fp+4   
59 [0x3b]:          lt ebx, ecx   
60 [0x3c]:          jne 85   
61 [0x3d]:          movnd ebx   
62 [0x3e]:          pushobj   
63 [0x3f]:          popl 3   
64 [0x40]: line: 69 movl 3   
65 [0x41]:          movn #6   
67 [0x43]:          pushobj   
68 [0x44]:          pushl 1   
69 [0x45]:          call @3564 // <std#string.operator==>   
70 [0x46]:          loadval ebx   
71 [0x47]:          movr cmt, ebx   
72 [0x48]:          jne 83   
73 [0x49]: line: 70 pushl 3   
74 [0x4a]:          call @2187 // <std.io.task#job.cancel>   
75 [0x4b]: line: 71 movl 0   
76 [0x4c]:          movn #0   
78 [0x4e]:          pushobj   
79 [0x4f]:          pushl 3   
80 [0x50]:          istore 4127   
82 [0x52]:          call @3988 // <std#synced_list<std.io.task#job>.remove>   
83 [0x53]:          nop   
84 [0x54]:          jmp @54   
85 [0x55]:          movl 0   
86 [0x56]:          movn #1   
88 [0x58]:          _ulck   
89 [0x59]:          ret   


function: std.io.task#__srt_global.start_scheduler[2226] params(0) in file: lib\support\/0.2.9//io//task//job_scheduler.sharp:16:14: note:  
		protected def start_scheduler() {
		             ^

0 [0x0]: line: 17 movg @30 // @std.io.task#__srt_global   
1 [0x1]:          movn #8   
3 [0x3]:          _lck    
4 [0x4]: line: 18 movg @30 // @std.io.task#__srt_global   
5 [0x5]:          movn #2   
7 [0x7]:          movi #0, adx   
9 [0x9]:          iaload ebx, adx   
10 [0xa]:          rstore ebx   
11 [0xb]:          movi #0, ebx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 19   
18 [0x12]: line: 19 call @2227 // <std.io.task#__srt_global.calculate_max_threads>   
19 [0x13]:          nop   
20 [0x14]: line: 20 new_class @37 // std.io#thread   
22 [0x16]:          dup    
23 [0x17]:          new_class @75 // std#string   
25 [0x19]:          dup    
26 [0x1a]:          newstr @78 // task_scheduler   
27 [0x1b]:          call @3546 // <std#string.string>   
28 [0x1c]:          istore 2230   
30 [0x1e]:          movg @30 // @std.io.task#__srt_global   
31 [0x1f]:          movn #8   
33 [0x21]:          movn #2   
35 [0x23]:          pushobj   
36 [0x24]:          call @2252 // <std.io#thread.thread>   
37 [0x25]:          movg @30 // @std.io.task#__srt_global   
38 [0x26]:          movn #3   
40 [0x28]:          popobj   
41 [0x29]: line: 21 movg @30 // @std.io.task#__srt_global   
42 [0x2a]:          movn #3   
44 [0x2c]:          pushobj   
45 [0x2d]:          pushnull    
46 [0x2e]:          call @2254 // <std.io#thread.start>   
47 [0x2f]:          pop   
48 [0x30]:          movg @30 // @std.io.task#__srt_global   
49 [0x31]:          movn #8   
51 [0x33]:          _ulck   
52 [0x34]:          ret   


function: std.io.task#__srt_global.calculate_max_threads[2227] params(0) in file: lib\support\/0.2.9//io//task//job_scheduler.sharp:25:12: note:  
		private def calculate_max_threads() {
		           ^

0 [0x0]: line: 26 call @2387 // <platform.kernel#vm.hardware_concurrency>   
1 [0x1]:          ipopl 0   
2 [0x2]: line: 27 movi #2, ebx   
4 [0x4]:          mull ebx, fp@0   
5 [0x5]: line: 28 movi #4, ebx   
7 [0x7]:          subl ebx, fp@0   
8 [0x8]: line: 30 ipushl #0   
9 [0x9]:          movi #2, ebx   
11 [0xb]:          loadval ecx   
12 [0xc]:          gt ecx, ebx   
13 [0xd]:          movr ebx, cmt   
14 [0xe]:          movr cmt, ebx   
15 [0xf]:          jne 42   
16 [0x10]: line: 31 ipushl #0   
17 [0x11]:          ldc ebx // 0.75   
18 [0x12]:          loadval ecx   
19 [0x13]:          mul ecx, ebx -> ebx   
20 [0x14]:          rstore ebx   
21 [0x15]:          call @2334 // <std.math#__srt_global.round>   
22 [0x16]:          movg @30 // @std.io.task#__srt_global   
23 [0x17]:          movn #0   
25 [0x19]:          loadval ebx   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          rmov adx, ebx   
29 [0x1d]: line: 32 ipushl #0   
30 [0x1e]:          ldc ebx // 0.25   
31 [0x1f]:          loadval ecx   
32 [0x20]:          mul ecx, ebx -> ebx   
33 [0x21]:          rstore ebx   
34 [0x22]:          call @2334 // <std.math#__srt_global.round>   
35 [0x23]:          movg @30 // @std.io.task#__srt_global   
36 [0x24]:          movn #1   
38 [0x26]:          loadval ebx   
39 [0x27]:          movi #0, adx   
41 [0x29]:          rmov adx, ebx   
42 [0x2a]:          nop   
43 [0x2b]: line: 35 movg @30 // @std.io.task#__srt_global   
44 [0x2c]:          movn #0   
46 [0x2e]:          movi #0, adx   
48 [0x30]:          iaload ebx, adx   
49 [0x31]:          rstore ebx   
50 [0x32]:          movi #0, ebx   
52 [0x34]:          loadval ecx   
53 [0x35]:          test ecx, ebx   
54 [0x36]:          movr ebx, cmt   
55 [0x37]:          movr cmt, ebx   
56 [0x38]:          jne 66   
57 [0x39]: line: 36 istore 1   
59 [0x3b]:          movg @30 // @std.io.task#__srt_global   
60 [0x3c]:          movn #0   
62 [0x3e]:          loadval ebx   
63 [0x3f]:          movi #0, adx   
65 [0x41]:          rmov adx, ebx   
66 [0x42]:          nop   
67 [0x43]: line: 38 movg @30 // @std.io.task#__srt_global   
68 [0x44]:          movn #1   
70 [0x46]:          movi #0, adx   
72 [0x48]:          iaload ebx, adx   
73 [0x49]:          rstore ebx   
74 [0x4a]:          movi #0, ebx   
76 [0x4c]:          loadval ecx   
77 [0x4d]:          test ecx, ebx   
78 [0x4e]:          movr ebx, cmt   
79 [0x4f]:          movr cmt, ebx   
80 [0x50]:          jne 90   
81 [0x51]: line: 39 istore 1   
83 [0x53]:          movg @30 // @std.io.task#__srt_global   
84 [0x54]:          movn #1   
86 [0x56]:          loadval ebx   
87 [0x57]:          movi #0, adx   
89 [0x59]:          rmov adx, ebx   
90 [0x5a]:          nop   
91 [0x5b]: line: 47 movg @30 // @std.io.task#__srt_global   
92 [0x5c]:          movn #0   
94 [0x5e]:          movi #0, adx   
96 [0x60]:          iaload ebx, adx   
97 [0x61]:          rstore ebx   
98 [0x62]:          movi #1, ebx   
100 [0x64]:          loadval ecx   
101 [0x65]:          test ecx, ebx   
102 [0x66]:          movr ebx, cmt   
103 [0x67]:          skne ebx // pc = 112   
104 [0x68]:          call @2387 // <platform.kernel#vm.hardware_concurrency>   
105 [0x69]:          loadval ebx   
106 [0x6a]:          rstore ebx   
107 [0x6b]:          movi #2, ebx   
109 [0x6d]:          loadval ecx   
110 [0x6e]:          lte ecx, ebx   
111 [0x6f]:          movr ebx, cmt   
112 [0x70]:          movr cmt, ebx   
113 [0x71]:          jne 123   
114 [0x72]: line: 48 istore 2   
116 [0x74]:          movg @30 // @std.io.task#__srt_global   
117 [0x75]:          movn #4   
119 [0x77]:          loadval ebx   
120 [0x78]:          movi #0, adx   
122 [0x7a]:          rmov adx, ebx   
123 [0x7b]:          nop   
124 [0x7c]: line: 50 movg @30 // @std.io.task#__srt_global   
125 [0x7d]:          movn #1   
127 [0x7f]:          movi #0, adx   
129 [0x81]:          iaload ebx, adx   
130 [0x82]:          rstore ebx   
131 [0x83]:          movi #1, ebx   
133 [0x85]:          loadval ecx   
134 [0x86]:          test ecx, ebx   
135 [0x87]:          movr ebx, cmt   
136 [0x88]:          skne ebx // pc = 145   
137 [0x89]:          call @2387 // <platform.kernel#vm.hardware_concurrency>   
138 [0x8a]:          loadval ebx   
139 [0x8b]:          rstore ebx   
140 [0x8c]:          movi #2, ebx   
142 [0x8e]:          loadval ecx   
143 [0x8f]:          lte ecx, ebx   
144 [0x90]:          movr ebx, cmt   
145 [0x91]:          movr cmt, ebx   
146 [0x92]:          jne 156   
147 [0x93]: line: 51 istore 2   
149 [0x95]:          movg @30 // @std.io.task#__srt_global   
150 [0x96]:          movn #4   
152 [0x98]:          loadval ebx   
153 [0x99]:          movi #0, adx   
155 [0x9b]:          rmov adx, ebx   
156 [0x9c]:          nop   
157 [0x9d]: line: 52 movg @30 // @std.io.task#__srt_global   
158 [0x9e]:          movn #0   
160 [0xa0]:          movi #0, adx   
162 [0xa2]:          iaload ebx, adx   
163 [0xa3]:          rstore ebx   
164 [0xa4]:          movg @30 // @std.io.task#__srt_global   
165 [0xa5]:          movn #1   
167 [0xa7]:          movi #0, adx   
169 [0xa9]:          iaload ebx, adx   
170 [0xaa]:          loadval ecx   
171 [0xab]:          add ecx, ebx -> ebx   
172 [0xac]:          rstore ebx   
173 [0xad]:          movg @30 // @std.io.task#__srt_global   
174 [0xae]:          movn #2   
176 [0xb0]:          loadval ebx   
177 [0xb1]:          movi #0, adx   
179 [0xb3]:          rmov adx, ebx   
180 [0xb4]:          ret   


function: std.io.task#__srt_global.set_thread_max[2228] params(1) in file: lib\support\/0.2.9//io//task//job_scheduler.sharp:55:4: note:  
		def set_thread_max(max: var) {
		   ^

0 [0x0]: line: 56 movg @30 // @std.io.task#__srt_global   
1 [0x1]:          movn #8   
3 [0x3]:          _lck    
4 [0x4]: line: 57 movg @30 // @std.io.task#__srt_global   
5 [0x5]:          movn #3   
7 [0x7]:          pushobj   
8 [0x8]:          pushnull    
9 [0x9]:          itest ebx   
10 [0xa]:          not ebx, ebx   
11 [0xb]:          movr cmt, ebx   
12 [0xc]:          jne 19   
13 [0xd]: line: 58 new_class @4 // std#illegal_argument_exception   
15 [0xf]:          dup    
16 [0x10]:          newstr @81 // cannot modify max thread count after task library has started, try calling this before your first task   
17 [0x11]:          call @1961 // <std#illegal_argument_exception.illegal_argument_exception>   
18 [0x12]:          throw    
19 [0x13]:          nop   
20 [0x14]: line: 62 ipushl #0   
21 [0x15]:          movi #2, ebx   
23 [0x17]:          loadval ecx   
24 [0x18]:          gte ecx, ebx   
25 [0x19]:          movr ebx, cmt   
26 [0x1a]:          movr cmt, ebx   
27 [0x1b]:          jne 186   
28 [0x1c]: line: 63 ipushl #0   
29 [0x1d]:          movi #2, ebx   
31 [0x1f]:          loadval ecx   
32 [0x20]:          gt ecx, ebx   
33 [0x21]:          movr ebx, cmt   
34 [0x22]:          movr cmt, ebx   
35 [0x23]:          jne 62   
36 [0x24]: line: 64 ipushl #0   
37 [0x25]:          ldc ebx // 0.75   
38 [0x26]:          loadval ecx   
39 [0x27]:          mul ecx, ebx -> ebx   
40 [0x28]:          rstore ebx   
41 [0x29]:          call @2334 // <std.math#__srt_global.round>   
42 [0x2a]:          movg @30 // @std.io.task#__srt_global   
43 [0x2b]:          movn #0   
45 [0x2d]:          loadval ebx   
46 [0x2e]:          movi #0, adx   
48 [0x30]:          rmov adx, ebx   
49 [0x31]: line: 65 ipushl #0   
50 [0x32]:          ldc ebx // 0.25   
51 [0x33]:          loadval ecx   
52 [0x34]:          mul ecx, ebx -> ebx   
53 [0x35]:          rstore ebx   
54 [0x36]:          call @2334 // <std.math#__srt_global.round>   
55 [0x37]:          movg @30 // @std.io.task#__srt_global   
56 [0x38]:          movn #1   
58 [0x3a]:          loadval ebx   
59 [0x3b]:          movi #0, adx   
61 [0x3d]:          rmov adx, ebx   
62 [0x3e]:          nop   
63 [0x3f]: line: 68 movg @30 // @std.io.task#__srt_global   
64 [0x40]:          movn #0   
66 [0x42]:          movi #0, adx   
68 [0x44]:          iaload ebx, adx   
69 [0x45]:          rstore ebx   
70 [0x46]:          movi #0, ebx   
72 [0x48]:          loadval ecx   
73 [0x49]:          test ecx, ebx   
74 [0x4a]:          movr ebx, cmt   
75 [0x4b]:          movr cmt, ebx   
76 [0x4c]:          jne 86   
77 [0x4d]: line: 69 istore 1   
79 [0x4f]:          movg @30 // @std.io.task#__srt_global   
80 [0x50]:          movn #0   
82 [0x52]:          loadval ebx   
83 [0x53]:          movi #0, adx   
85 [0x55]:          rmov adx, ebx   
86 [0x56]:          nop   
87 [0x57]: line: 71 movg @30 // @std.io.task#__srt_global   
88 [0x58]:          movn #1   
90 [0x5a]:          movi #0, adx   
92 [0x5c]:          iaload ebx, adx   
93 [0x5d]:          rstore ebx   
94 [0x5e]:          movi #0, ebx   
96 [0x60]:          loadval ecx   
97 [0x61]:          test ecx, ebx   
98 [0x62]:          movr ebx, cmt   
99 [0x63]:          movr cmt, ebx   
100 [0x64]:          jne 110   
101 [0x65]: line: 72 istore 1   
103 [0x67]:          movg @30 // @std.io.task#__srt_global   
104 [0x68]:          movn #1   
106 [0x6a]:          loadval ebx   
107 [0x6b]:          movi #0, adx   
109 [0x6d]:          rmov adx, ebx   
110 [0x6e]:          nop   
111 [0x6f]: line: 80 movg @30 // @std.io.task#__srt_global   
112 [0x70]:          movn #0   
114 [0x72]:          movi #0, adx   
116 [0x74]:          iaload ebx, adx   
117 [0x75]:          rstore ebx   
118 [0x76]:          movi #1, ebx   
120 [0x78]:          loadval ecx   
121 [0x79]:          test ecx, ebx   
122 [0x7a]:          movr ebx, cmt   
123 [0x7b]:          skne ebx // pc = 132   
124 [0x7c]:          call @2387 // <platform.kernel#vm.hardware_concurrency>   
125 [0x7d]:          loadval ebx   
126 [0x7e]:          rstore ebx   
127 [0x7f]:          movi #2, ebx   
129 [0x81]:          loadval ecx   
130 [0x82]:          lte ecx, ebx   
131 [0x83]:          movr ebx, cmt   
132 [0x84]:          movr cmt, ebx   
133 [0x85]:          jne 143   
134 [0x86]: line: 81 istore 2   
136 [0x88]:          movg @30 // @std.io.task#__srt_global   
137 [0x89]:          movn #4   
139 [0x8b]:          loadval ebx   
140 [0x8c]:          movi #0, adx   
142 [0x8e]:          rmov adx, ebx   
143 [0x8f]:          nop   
144 [0x90]: line: 83 movg @30 // @std.io.task#__srt_global   
145 [0x91]:          movn #1   
147 [0x93]:          movi #0, adx   
149 [0x95]:          iaload ebx, adx   
150 [0x96]:          rstore ebx   
151 [0x97]:          movi #1, ebx   
153 [0x99]:          loadval ecx   
154 [0x9a]:          test ecx, ebx   
155 [0x9b]:          movr ebx, cmt   
156 [0x9c]:          skne ebx // pc = 165   
157 [0x9d]:          call @2387 // <platform.kernel#vm.hardware_concurrency>   
158 [0x9e]:          loadval ebx   
159 [0x9f]:          rstore ebx   
160 [0xa0]:          movi #2, ebx   
162 [0xa2]:          loadval ecx   
163 [0xa3]:          lte ecx, ebx   
164 [0xa4]:          movr ebx, cmt   
165 [0xa5]:          movr cmt, ebx   
166 [0xa6]:          jne 176   
167 [0xa7]: line: 84 istore 2   
169 [0xa9]:          movg @30 // @std.io.task#__srt_global   
170 [0xaa]:          movn #4   
172 [0xac]:          loadval ebx   
173 [0xad]:          movi #0, adx   
175 [0xaf]:          rmov adx, ebx   
176 [0xb0]:          nop   
177 [0xb1]: line: 85 ipushl #0   
178 [0xb2]:          movg @30 // @std.io.task#__srt_global   
179 [0xb3]:          movn #2   
181 [0xb5]:          loadval ebx   
182 [0xb6]:          movi #0, adx   
184 [0xb8]:          rmov adx, ebx   
185 [0xb9]:          jmp @192   
186 [0xba]: line: 87 new_class @4 // std#illegal_argument_exception   
188 [0xbc]:          dup    
189 [0xbd]:          newstr @82 // cannot have less than 2 max threads   
190 [0xbe]:          call @1961 // <std#illegal_argument_exception.illegal_argument_exception>   
191 [0xbf]:          throw    
192 [0xc0]:          nop   
193 [0xc1]:          movg @30 // @std.io.task#__srt_global   
194 [0xc2]:          movn #8   
196 [0xc4]:          _ulck   
197 [0xc5]:          ret   


function: std.io.task#__srt_global.get_thread_max[2229] params(0) in file: lib\support\/0.2.9//io//task//job_scheduler.sharp:92:4: note:  
		def get_thread_max() : var {
		   ^

0 [0x0]: line: 93 movg @30 // @std.io.task#__srt_global   
1 [0x1]:          movn #8   
3 [0x3]:          _lck    
4 [0x4]: line: 94 movg @30 // @std.io.task#__srt_global   
5 [0x5]:          movn #2   
7 [0x7]:          movi #0, adx   
9 [0x9]:          iaload ebx, adx   
10 [0xa]:          rstore ebx   
11 [0xb]:          movi #0, ebx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 19   
18 [0x12]: line: 95 call @2227 // <std.io.task#__srt_global.calculate_max_threads>   
19 [0x13]:          nop   
20 [0x14]: line: 96 movg @30 // @std.io.task#__srt_global   
21 [0x15]:          movn #2   
23 [0x17]:          movi #0, adx   
25 [0x19]:          iaload ebx, adx   
26 [0x1a]:          return_val ebx   
27 [0x1b]:          movg @30 // @std.io.task#__srt_global   
28 [0x1c]:          movn #8   
30 [0x1e]:          _ulck   
31 [0x1f]:          ret   
32 [0x20]:          movg @30 // @std.io.task#__srt_global   
33 [0x21]:          movn #8   
35 [0x23]:          _ulck   


function: std.io.task#__srt_global.scheduler_main[2230] params(1) in file: lib\support\/0.2.9//io//task//job_scheduler.sharp:100:12: note:  
		private def scheduler_main(args : object[]) : var
		           ^

0 [0x0]: line: 102 movg @30 // @std.io.task#__srt_global   
1 [0x1]:           movn #8   
3 [0x3]:           movn #1   
5 [0x5]:           smovr_3 fp+1   
6 [0x6]: line: 103 istorel 12250, fp+2   
8 [0x8]: line: 104 movi #1, ebx   
10 [0xa]: line: 105 movr cmt, ebx   
11 [0xb]:           jne 196   
12 [0xc]: line: 107 call @2266 // <std.io#thread.yield>   
13 [0xd]: line: 108 istorel 0, fp+3   
15 [0xf]:           ipushl #3   
16 [0x10]:           pushl 1   
17 [0x11]:           call @3984 // <std#synced_list<std.io.task#job>.size>   
18 [0x12]:           loadval ebx   
19 [0x13]:           loadval ecx   
20 [0x14]:           lt ecx, ebx   
21 [0x15]:           movr ebx, cmt   
22 [0x16]:           movr cmt, ebx   
23 [0x17]:           jne 175   
24 [0x18]: line: 109 pushl 1   
25 [0x19]:           ipushl #3   
26 [0x1a]:           call @3943 // <std#synced_list<std.io.task#job>.at>   
27 [0x1b]:           popobj2    
28 [0x1c]:           smovr_3 fp+4   
29 [0x1d]: line: 111 movl 4   
30 [0x1e]:           movn #13   
32 [0x20]:           movi #0, adx   
34 [0x22]:           iaload ebx, adx   
35 [0x23]:           rstore ebx   
36 [0x24]:           movi #0, ebx   
38 [0x26]:           loadval ecx   
39 [0x27]:           tne ecx, ebx   
40 [0x28]:           movr ebx, cmt   
41 [0x29]:           movr cmt, ebx   
42 [0x2a]:           jne 87   
43 [0x2b]: line: 112 call @3655 // <std#time.mills_time>   
44 [0x2c]:           loadval ebx   
45 [0x2d]:           rstore ebx   
46 [0x2e]:           movl 4   
47 [0x2f]:           movn #13   
49 [0x31]:           movi #0, adx   
51 [0x33]:           iaload ebx, adx   
52 [0x34]:           loadval ecx   
53 [0x35]:           gte ecx, ebx   
54 [0x36]:           movr ebx, cmt   
55 [0x37]:           movr cmt, ebx   
56 [0x38]:           jne 85   
57 [0x39]: line: 113 movi #0, ebx   
59 [0x3b]:           movl 4   
60 [0x3c]:           movn #13   
62 [0x3e]:           movi #0, adx   
64 [0x40]:           rmov adx, ebx   
65 [0x41]: line: 114 pushl 4   
66 [0x42]:           call @2234 // <std.io.task#__srt_global.execute_job>   
67 [0x43]:           ipopl 5   
68 [0x44]: line: 116 loadl ebx, fp+5   
69 [0x45]:           skne ebx // pc = 77   
70 [0x46]:           movl 4   
71 [0x47]:           movn #9   
73 [0x49]:           movi #0, adx   
75 [0x4b]:           iaload ebx, adx   
76 [0x4c]:           not ebx, ebx   
77 [0x4d]:           movr cmt, ebx   
78 [0x4e]:           jne 84   
79 [0x4f]: line: 117 pushl 1   
80 [0x50]:           pushl 4   
81 [0x51]:           istore 4128   
83 [0x53]:           call @3988 // <std#synced_list<std.io.task#job>.remove>   
84 [0x54]:           nop   
85 [0x55]:           nop   
86 [0x56]:           jmp @171   
87 [0x57]:           movl 4   
88 [0x58]:           movn #9   
90 [0x5a]:           movi #0, adx   
92 [0x5c]:           iaload ebx, adx   
93 [0x5d]:           movr cmt, ebx   
94 [0x5e]:           jne 160   
95 [0x5f]: line: 121 movl 4   
96 [0x60]:           movn #4   
98 [0x62]:           pushobj   
99 [0x63]:           pushnull    
100 [0x64]:           itest ebx   
101 [0x65]:           movr cmt, ebx   
102 [0x66]:           jne 106   
103 [0x67]: line: 122 pushl 4   
104 [0x68]:           call @2234 // <std.io.task#__srt_global.execute_job>   
105 [0x69]:           pop   
106 [0x6a]:           nop   
107 [0x6b]: line: 125 movl 4   
108 [0x6c]:           movn #19   
110 [0x6e]:           pushobj   
111 [0x6f]:           movg @35 // @std.io.task#job_state   
112 [0x70]:           movn #1   
114 [0x72]:           pushobj   
115 [0x73]:           call @1947 // <std#_enum_.operator==>   
116 [0x74]:           loadval ebx   
117 [0x75]:           skne ebx // pc = 139   
118 [0x76]:           call @3655 // <std#time.mills_time>   
119 [0x77]:           loadval ebx   
120 [0x78]:           rstore ebx   
121 [0x79]:           movl 4   
122 [0x7a]:           movn #11   
124 [0x7c]:           movi #0, adx   
126 [0x7e]:           iaload ebx, adx   
127 [0x7f]:           rstore ebx   
128 [0x80]:           movl 4   
129 [0x81]:           movn #10   
131 [0x83]:           movi #0, adx   
133 [0x85]:           iaload ebx, adx   
134 [0x86]:           loadval ecx   
135 [0x87]:           add ecx, ebx -> ebx   
136 [0x88]:           loadval ecx   
137 [0x89]:           gte ecx, ebx   
138 [0x8a]:           movr ebx, cmt   
139 [0x8b]:           movr cmt, ebx   
140 [0x8c]:           jne 158   
141 [0x8d]: line: 126 movl 4   
142 [0x8e]:           movn #14   
144 [0x90]:           pushobj   
145 [0x91]:           pushnull    
146 [0x92]:           itest ebx   
147 [0x93]:           movr cmt, ebx   
148 [0x94]:           jne 150   
149 [0x95]:           jmp @141   
150 [0x96]: line: 127 pushl 4   
151 [0x97]:           call @2187 // <std.io.task#job.cancel>   
152 [0x98]: line: 128 movg @30 // @std.io.task#__srt_global   
153 [0x99]:           movn #8   
155 [0x9b]:           pushobj   
156 [0x9c]:           pushl 4   
157 [0x9d]:           call @2224 // <std.io.task#job_master.cleanup_job>   
158 [0x9e]:           nop   
159 [0x9f]:           jmp @171   
160 [0xa0]: line: 131 pushl 4   
161 [0xa1]:           call @2234 // <std.io.task#__srt_global.execute_job>   
162 [0xa2]:           loadval ebx   
163 [0xa3]:           movr cmt, ebx   
164 [0xa4]:           jne 170   
165 [0xa5]: line: 132 pushl 1   
166 [0xa6]:           pushl 4   
167 [0xa7]:           istore 4129   
169 [0xa9]:           call @3988 // <std#synced_list<std.io.task#job>.remove>   
170 [0xaa]:           nop   
171 [0xab]:           nop   
172 [0xac]:           iaddl 1, fp@3   
174 [0xae]:           jmp @15   
175 [0xaf]: line: 137 loadl ebx, fp+2   
176 [0xb0]:           movr egx, ebx   
177 [0xb1]:           dec ebx   
178 [0xb2]:           smovr_2 ebx, fp+2   
179 [0xb3]:           movr ebx, egx   
180 [0xb4]:           rstore ebx   
181 [0xb5]:           movi #0, ebx   
183 [0xb7]:           loadval ecx   
184 [0xb8]:           lte ecx, ebx   
185 [0xb9]:           movr ebx, cmt   
186 [0xba]:           movr cmt, ebx   
187 [0xbb]:           jne 191   
188 [0xbc]: line: 138 istorel 12250, fp+2   
190 [0xbe]: line: 139 call @2232 // <std.io.task#__srt_global.kill_threads>   
191 [0xbf]:           nop   
192 [0xc0]: line: 142 istore 5   
194 [0xc2]:           call @2262 // <std.io#thread.sleep>   
195 [0xc3]:           jmp @8   
196 [0xc4]: line: 144 istorel 0, fp+0   
198 [0xc6]:           ret   


function: std.io.task#__srt_global.get_host[2231] params(1) in file: lib\support\/0.2.9//io//task//job_scheduler.sharp:148:12: note:  
		private def get_host(long_running : var) : thread {
		           ^

0 [0x0]: line: 149 loadl ebx, fp+0   
1 [0x1]:           movr cmt, ebx   
2 [0x2]:           jne 14   
3 [0x3]: line: 150 movg @30 // @std.io.task#__srt_global   
4 [0x4]:           movn #8   
6 [0x6]:           movn #2   
8 [0x8]:           pushobj   
9 [0x9]:           movg @30 // @std.io.task#__srt_global   
10 [0xa]:           movn #6   
12 [0xc]:           popobj   
13 [0xd]:           jmp @24   
14 [0xe]: line: 152 movg @30 // @std.io.task#__srt_global   
15 [0xf]:           movn #8   
17 [0x11]:           movn #3   
19 [0x13]:           pushobj   
20 [0x14]:           movg @30 // @std.io.task#__srt_global   
21 [0x15]:           movn #6   
23 [0x17]:           popobj   
24 [0x18]:           nop   
25 [0x19]: line: 155 movg @30 // @std.io.task#__srt_global   
26 [0x1a]:           movn #6   
28 [0x1c]:           pushobj   
29 [0x1d]:           istore 4130   
31 [0x1f]:           call @2292 // <std.io#thread_group.find>   
32 [0x20]:           popobj2    
33 [0x21]:           smovr_3 fp+1   
34 [0x22]: line: 170 movl 1   
35 [0x23]:           checknull   
36 [0x24]:           movr cmt, ebx   
37 [0x25]:           jne 155   
38 [0x26]: line: 171 loadl ebx, fp+0   
39 [0x27]:           movr cmt, ebx   
40 [0x28]:           jne 98   
41 [0x29]: line: 172 movg @30 // @std.io.task#__srt_global   
42 [0x2a]:           movn #1   
44 [0x2c]:           movi #0, adx   
46 [0x2e]:           iaload ebx, adx   
47 [0x2f]:           rstore ebx   
48 [0x30]:           movi #0, ebx   
50 [0x32]:           loadval ecx   
51 [0x33]:           gt ecx, ebx   
52 [0x34]:           movr ebx, cmt   
53 [0x35]:           movr cmt, ebx   
54 [0x36]:           jne 96   
55 [0x37]: line: 173 movg @30 // @std.io.task#__srt_global   
56 [0x38]:           movn #1   
58 [0x3a]:           movi #0, adx   
60 [0x3c]:           iaload ebx, adx   
61 [0x3d]:           movr egx, ebx   
62 [0x3e]:           dec ebx   
63 [0x3f]:           movi #0, adx   
65 [0x41]:           rmov adx, ebx   
66 [0x42]: line: 174 new_class @37 // std.io#thread   
68 [0x44]:           dup    
69 [0x45]:           new_class @75 // std#string   
71 [0x47]:           dup    
72 [0x48]:           newstr @83 // long_term_worker_thread#   
73 [0x49]:           call @3546 // <std#string.string>   
74 [0x4a]:           movg @30 // @std.io.task#__srt_global   
75 [0x4b]:           movn #6   
77 [0x4d]:           pushobj   
78 [0x4e]:           call @2287 // <std.io#thread_group.size>   
79 [0x4f]:           loadval ebx   
80 [0x50]:           rstore ebx   
81 [0x51]:           movi #1, ebx   
83 [0x53]:           loadval ecx   
84 [0x54]:           add ecx, ebx -> ebx   
85 [0x55]:           rstore ebx   
86 [0x56]:           call @3578 // <std#string.operator+>   
87 [0x57]:           istore 2197   
89 [0x59]:           movg @30 // @std.io.task#__srt_global   
90 [0x5a]:           movn #6   
92 [0x5c]:           pushobj   
93 [0x5d]:           call @2252 // <std.io#thread.thread>   
94 [0x5e]:           popobj2    
95 [0x5f]:           smovr_3 fp+1   
96 [0x60]:           nop   
97 [0x61]:           jmp @154   
98 [0x62]: line: 177 movg @30 // @std.io.task#__srt_global   
99 [0x63]:           movn #0   
101 [0x65]:           movi #0, adx   
103 [0x67]:           iaload ebx, adx   
104 [0x68]:           rstore ebx   
105 [0x69]:           movi #0, ebx   
107 [0x6b]:           loadval ecx   
108 [0x6c]:           gt ecx, ebx   
109 [0x6d]:           movr ebx, cmt   
110 [0x6e]:           movr cmt, ebx   
111 [0x6f]:           jne 153   
112 [0x70]: line: 178 movg @30 // @std.io.task#__srt_global   
113 [0x71]:           movn #0   
115 [0x73]:           movi #0, adx   
117 [0x75]:           iaload ebx, adx   
118 [0x76]:           movr egx, ebx   
119 [0x77]:           dec ebx   
120 [0x78]:           movi #0, adx   
122 [0x7a]:           rmov adx, ebx   
123 [0x7b]: line: 179 new_class @37 // std.io#thread   
125 [0x7d]:           dup    
126 [0x7e]:           new_class @75 // std#string   
128 [0x80]:           dup    
129 [0x81]:           newstr @84 // worker_thread#   
130 [0x82]:           call @3546 // <std#string.string>   
131 [0x83]:           movg @30 // @std.io.task#__srt_global   
132 [0x84]:           movn #6   
134 [0x86]:           pushobj   
135 [0x87]:           call @2287 // <std.io#thread_group.size>   
136 [0x88]:           loadval ebx   
137 [0x89]:           rstore ebx   
138 [0x8a]:           movi #1, ebx   
140 [0x8c]:           loadval ecx   
141 [0x8d]:           add ecx, ebx -> ebx   
142 [0x8e]:           rstore ebx   
143 [0x8f]:           call @3578 // <std#string.operator+>   
144 [0x90]:           istore 2197   
146 [0x92]:           movg @30 // @std.io.task#__srt_global   
147 [0x93]:           movn #6   
149 [0x95]:           pushobj   
150 [0x96]:           call @2252 // <std.io#thread.thread>   
151 [0x97]:           popobj2    
152 [0x98]:           smovr_3 fp+1   
153 [0x99]:           nop   
154 [0x9a]:           nop   
155 [0x9b]:           nop   
156 [0x9c]: line: 184 movl 1   
157 [0x9d]:           returnobj   
158 [0x9e]:           ret   


function: std.io.task#__srt_global.kill_threads[2232] params(0) in file: lib\support\/0.2.9//io//task//job_scheduler.sharp:188:12: note:  
		private def kill_threads() {
		           ^

0 [0x0]: line: 189 movg @30 // @std.io.task#__srt_global   
1 [0x1]:           movn #2   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #3, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 15   
14 [0xe]: line: 190 ret   
15 [0xf]:           nop   
16 [0x10]: line: 192 movg @30 // @std.io.task#__srt_global   
17 [0x11]:           movn #8   
19 [0x13]:           movn #2   
21 [0x15]:           pushobj   
22 [0x16]:           movg @30 // @std.io.task#__srt_global   
23 [0x17]:           movn #6   
25 [0x19]:           popobj   
26 [0x1a]: line: 194 istore 0   
28 [0x1c]:           movg @30 // @std.io.task#__srt_global   
29 [0x1d]:           movn #7   
31 [0x1f]:           loadval ebx   
32 [0x20]:           movi #0, adx   
34 [0x22]:           rmov adx, ebx   
35 [0x23]: line: 195 movg @30 // @std.io.task#__srt_global   
36 [0x24]:           movn #6   
38 [0x26]:           pushobj   
39 [0x27]:           istore 4131   
41 [0x29]:           call @2292 // <std.io#thread_group.find>   
42 [0x2a]:           pop   
43 [0x2b]: line: 205 movg @30 // @std.io.task#__srt_global   
44 [0x2c]:           movn #7   
46 [0x2e]:           movi #0, adx   
48 [0x30]:           iaload ebx, adx   
49 [0x31]:           rstore ebx   
50 [0x32]:           movi #1, ebx   
52 [0x34]:           loadval ecx   
53 [0x35]:           lt ecx, ebx   
54 [0x36]:           movr ebx, cmt   
55 [0x37]:           movr cmt, ebx   
56 [0x38]:           jne 58   
57 [0x39]: line: 206 ret   
58 [0x3a]:           nop   
59 [0x3b]: line: 208 movg @30 // @std.io.task#__srt_global   
60 [0x3c]:           movn #6   
62 [0x3e]:           pushobj   
63 [0x3f]:           istore 4132   
65 [0x41]:           call @2292 // <std.io#thread_group.find>   
66 [0x42]:           popobj2    
67 [0x43]:           smovr_3 fp+0   
68 [0x44]: line: 216 movl 0   
69 [0x45]:           checknull   
70 [0x46]:           not ebx, ebx   
71 [0x47]:           movr cmt, ebx   
72 [0x48]:           jne 75   
73 [0x49]: line: 217 pushl 0   
74 [0x4a]:           call @2260 // <std.io#thread.interrupt>   
75 [0x4b]:           nop   
76 [0x4c]: line: 220 movg @30 // @std.io.task#__srt_global   
77 [0x4d]:           movn #8   
79 [0x4f]:           movn #3   
81 [0x51]:           pushobj   
82 [0x52]:           movg @30 // @std.io.task#__srt_global   
83 [0x53]:           movn #6   
85 [0x55]:           popobj   
86 [0x56]: line: 222 istore 0   
88 [0x58]:           movg @30 // @std.io.task#__srt_global   
89 [0x59]:           movn #7   
91 [0x5b]:           loadval ebx   
92 [0x5c]:           movi #0, adx   
94 [0x5e]:           rmov adx, ebx   
95 [0x5f]: line: 223 movg @30 // @std.io.task#__srt_global   
96 [0x60]:           movn #6   
98 [0x62]:           pushobj   
99 [0x63]:           istore 4133   
101 [0x65]:           call @2292 // <std.io#thread_group.find>   
102 [0x66]:           pop   
103 [0x67]: line: 232 movg @30 // @std.io.task#__srt_global   
104 [0x68]:           movn #7   
106 [0x6a]:           movi #0, adx   
108 [0x6c]:           iaload ebx, adx   
109 [0x6d]:           rstore ebx   
110 [0x6e]:           movi #1, ebx   
112 [0x70]:           loadval ecx   
113 [0x71]:           lt ecx, ebx   
114 [0x72]:           movr ebx, cmt   
115 [0x73]:           movr cmt, ebx   
116 [0x74]:           jne 118   
117 [0x75]: line: 233 ret   
118 [0x76]:           nop   
119 [0x77]: line: 235 movg @30 // @std.io.task#__srt_global   
120 [0x78]:           movn #6   
122 [0x7a]:           pushobj   
123 [0x7b]:           istore 4134   
125 [0x7d]:           call @2292 // <std.io#thread_group.find>   
126 [0x7e]:           popobj2    
127 [0x7f]:           smovr_3 fp+0   
128 [0x80]: line: 241 movl 0   
129 [0x81]:           checknull   
130 [0x82]:           not ebx, ebx   
131 [0x83]:           movr cmt, ebx   
132 [0x84]:           jne 135   
133 [0x85]: line: 242 pushl 0   
134 [0x86]:           call @2260 // <std.io#thread.interrupt>   
135 [0x87]:           nop   
136 [0x88]:           ret   


function: std.io.task#__srt_global.execute_synchronous[2233] params(1) in file: lib\support\/0.2.9//io//task//job_scheduler.sharp:246:14: note:  
		protected def execute_synchronous(scheduled_job : job) {
		             ^

0 [0x0]: line: 247 movl 0   
1 [0x1]:           movn #13   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #0, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           tne ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 37   
14 [0xe]: line: 248 movl 0   
15 [0xf]:           movn #13   
17 [0x11]:           movi #0, adx   
19 [0x13]:           iaload ebx, adx   
20 [0x14]:           rstore ebx   
21 [0x15]:           call @3655 // <std#time.mills_time>   
22 [0x16]:           loadval ebx   
23 [0x17]:           loadval ecx   
24 [0x18]:           sub ecx, ebx -> ebx   
25 [0x19]:           smovr_2 ebx, fp+1   
26 [0x1a]: line: 249 ipushl #1   
27 [0x1b]:           movi #0, ebx   
29 [0x1d]:           loadval ecx   
30 [0x1e]:           gt ecx, ebx   
31 [0x1f]:           movr ebx, cmt   
32 [0x20]:           movr cmt, ebx   
33 [0x21]:           jne 36   
34 [0x22]:           ipushl #1   
35 [0x23]:           call @2072 // <std.io.fiber#__srt_global.delay>   
36 [0x24]:           nop   
37 [0x25]:           nop   
38 [0x26]: line: 251 pushl 0   
39 [0x27]:           call @2198 // <std.io.task#job.execute>   
40 [0x28]:           ret   


function: std.io.task#__srt_global.execute_job[2234] params(1) in file: lib\support\/0.2.9//io//task//job_scheduler.sharp:254:14: note:  
		protected def execute_job(scheduled_job : job) : var {
		             ^

0 [0x0]: line: 255 movl 0   
1 [0x1]:           movn #18   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           call @2231 // <std.io.task#__srt_global.get_host>   
8 [0x8]:           popobj2    
9 [0x9]:           smovr_3 fp+1   
10 [0xa]: line: 257 movl 1   
11 [0xb]:           checknull   
12 [0xc]:           not ebx, ebx   
13 [0xd]:           movr cmt, ebx   
14 [0xe]:           jne 43   
15 [0xf]: line: 258 pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #4   
19 [0x13]:           popobj   
20 [0x14]: line: 259 pushl 0   
21 [0x15]:           call @2186 // <std.io.task#job.execute_async>   
22 [0x16]:           loadval ebx   
23 [0x17]:           rstore ebx   
24 [0x18]:           movi #0, ebx   
26 [0x1a]:           loadval ecx   
27 [0x1b]:           tne ecx, ebx   
28 [0x1c]:           movr ebx, cmt   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 38   
31 [0x1f]: line: 260 movl 0   
32 [0x20]:           movn #4   
34 [0x22]:           del   
35 [0x23]: line: 261 istorel 0, fp+0   
37 [0x25]:           ret   
38 [0x26]:           nop   
39 [0x27]: line: 264 istorel 1, fp+0   
41 [0x29]:           ret   
42 [0x2a]:           jmp @46   
43 [0x2b]: line: 265 istorel 0, fp+0   
45 [0x2d]:           ret   
46 [0x2e]:           nop   


function: std.io.task#__srt_global.finish[2235] params(0) in file: lib\support\/0.2.9//io//task//task.sharp:5:4: note:  
		def finish() {
		   ^

0 [0x0]: line: 6 new_class @31 // std.io.task#cancellation_exception   
2 [0x2]:         dup    
3 [0x3]:         call @2183 // <std.io.task#cancellation_exception.cancellation_exception>   
4 [0x4]:         throw    
5 [0x5]:         ret   


function: std.io.task#task.with_timeout[2236] params(1) in file: lib\support\/0.2.9//io//task//task.sharp:10:15: note:  
		    static def with_timeout(mills_time : var) : job_builder {
		              ^

0 [0x0]: line: 11 movg @30 // @std.io.task#__srt_global   
1 [0x1]:          movn #8   
3 [0x3]:          pushobj   
4 [0x4]:          call @2220 // <std.io.task#job_master.create_job>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+1   
7 [0x7]: line: 12 new_class @33 // std.io.task#job_builder   
9 [0x9]:          dup    
10 [0xa]:          pushl 1   
11 [0xb]:          movg @30 // @std.io.task#__srt_global   
12 [0xc]:          movn #8   
14 [0xe]:          pushobj   
15 [0xf]:          call @2205 // <std.io.task#job_builder.job_builder>   
16 [0x10]:          popobj2    
17 [0x11]:          smovr_3 fp+2   
18 [0x12]: line: 13 pushl 2   
19 [0x13]:          ipushl #0   
20 [0x14]:          call @2206 // <std.io.task#job_builder.with_timeout>   
21 [0x15]:          popobj2    
22 [0x16]:          returnobj   
23 [0x17]:          ret   


function: std.io.task#task.schedule[2237] params(1) in file: lib\support\/0.2.9//io//task//task.sharp:16:15: note:  
		    static def schedule(future : var) : job_builder {
		              ^

0 [0x0]: line: 17 movg @30 // @std.io.task#__srt_global   
1 [0x1]:          movn #8   
3 [0x3]:          pushobj   
4 [0x4]:          call @2220 // <std.io.task#job_master.create_job>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+1   
7 [0x7]: line: 18 new_class @33 // std.io.task#job_builder   
9 [0x9]:          dup    
10 [0xa]:          pushl 1   
11 [0xb]:          movg @30 // @std.io.task#__srt_global   
12 [0xc]:          movn #8   
14 [0xe]:          pushobj   
15 [0xf]:          call @2205 // <std.io.task#job_builder.job_builder>   
16 [0x10]:          popobj2    
17 [0x11]:          smovr_3 fp+2   
18 [0x12]: line: 19 pushl 2   
19 [0x13]:          ipushl #0   
20 [0x14]:          call @2207 // <std.io.task#job_builder.schedule>   
21 [0x15]:          popobj2    
22 [0x16]:          returnobj   
23 [0x17]:          ret   


function: std.io.task#task.with_name[2238] params(1) in file: lib\support\/0.2.9//io//task//task.sharp:22:15: note:  
		    static def with_name(job_name : string) : job_builder {
		              ^

0 [0x0]: line: 23 movg @30 // @std.io.task#__srt_global   
1 [0x1]:          movn #8   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 0   
5 [0x5]:          call @2221 // <std.io.task#job_master.create_job>   
6 [0x6]:          popobj2    
7 [0x7]:          smovr_3 fp+1   
8 [0x8]: line: 24 new_class @33 // std.io.task#job_builder   
10 [0xa]:          dup    
11 [0xb]:          pushl 1   
12 [0xc]:          movg @30 // @std.io.task#__srt_global   
13 [0xd]:          movn #8   
15 [0xf]:          pushobj   
16 [0x10]:          call @2205 // <std.io.task#job_builder.job_builder>   
17 [0x11]:          popobj2    
18 [0x12]:          smovr_3 fp+2   
19 [0x13]: line: 25 pushl 2   
20 [0x14]:          pushl 0   
21 [0x15]:          call @2209 // <std.io.task#job_builder.with_name>   
22 [0x16]:          popobj2    
23 [0x17]:          returnobj   
24 [0x18]:          ret   


function: std.io.task#task.with_args[2239] params(1) in file: lib\support\/0.2.9//io//task//task.sharp:28:15: note:  
		    static def with_args(args : object[]) : job_builder {
		              ^

0 [0x0]: line: 29 movg @30 // @std.io.task#__srt_global   
1 [0x1]:          movn #8   
3 [0x3]:          pushobj   
4 [0x4]:          call @2220 // <std.io.task#job_master.create_job>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+1   
7 [0x7]: line: 30 new_class @33 // std.io.task#job_builder   
9 [0x9]:          dup    
10 [0xa]:          pushl 1   
11 [0xb]:          movg @30 // @std.io.task#__srt_global   
12 [0xc]:          movn #8   
14 [0xe]:          pushobj   
15 [0xf]:          call @2205 // <std.io.task#job_builder.job_builder>   
16 [0x10]:          popobj2    
17 [0x11]:          smovr_3 fp+2   
18 [0x12]: line: 31 pushl 2   
19 [0x13]:          pushl 0   
20 [0x14]:          call @2210 // <std.io.task#job_builder.with_args>   
21 [0x15]:          popobj2    
22 [0x16]:          returnobj   
23 [0x17]:          ret   


function: std.io.task#task.recurring[2240] params(2) in file: lib\support\/0.2.9//io//task//task.sharp:34:5: note:  
			def recurring(tm : var, interval: time_unit) : job_builder {
		    ^

0 [0x0]: line: 35 movg @30 // @std.io.task#__srt_global   
1 [0x1]:          movn #8   
3 [0x3]:          pushobj   
4 [0x4]:          call @2220 // <std.io.task#job_master.create_job>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+3   
7 [0x7]: line: 36 new_class @33 // std.io.task#job_builder   
9 [0x9]:          dup    
10 [0xa]:          pushl 3   
11 [0xb]:          movg @30 // @std.io.task#__srt_global   
12 [0xc]:          movn #8   
14 [0xe]:          pushobj   
15 [0xf]:          call @2205 // <std.io.task#job_builder.job_builder>   
16 [0x10]:          popobj2    
17 [0x11]:          smovr_3 fp+4   
18 [0x12]: line: 37 pushl 4   
19 [0x13]:          ipushl #1   
20 [0x14]:          pushl 2   
21 [0x15]:          call @2208 // <std.io.task#job_builder.recurring>   
22 [0x16]:          popobj2    
23 [0x17]:          returnobj   
24 [0x18]:          ret   


function: std.io.task#task.block[2241] params(0) in file: lib\support\/0.2.9//io//task//task.sharp:40:12: note:  
			static def block() : job_builder {
		           ^

0 [0x0]: line: 41 movg @30 // @std.io.task#__srt_global   
1 [0x1]:          movn #8   
3 [0x3]:          pushobj   
4 [0x4]:          call @2220 // <std.io.task#job_master.create_job>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+0   
7 [0x7]: line: 42 new_class @33 // std.io.task#job_builder   
9 [0x9]:          dup    
10 [0xa]:          pushl 0   
11 [0xb]:          movg @30 // @std.io.task#__srt_global   
12 [0xc]:          movn #8   
14 [0xe]:          pushobj   
15 [0xf]:          call @2205 // <std.io.task#job_builder.job_builder>   
16 [0x10]:          popobj2    
17 [0x11]:          smovr_3 fp+1   
18 [0x12]: line: 43 pushl 1   
19 [0x13]:          call @2211 // <std.io.task#job_builder.block>   
20 [0x14]:          popobj2    
21 [0x15]:          returnobj   
22 [0x16]:          ret   


function: std.io.task#task.long_term[2242] params(0) in file: lib\support\/0.2.9//io//task//task.sharp:46:12: note:  
			static def long_term() : job_builder {
		           ^

0 [0x0]: line: 47 movg @30 // @std.io.task#__srt_global   
1 [0x1]:          movn #8   
3 [0x3]:          pushobj   
4 [0x4]:          call @2220 // <std.io.task#job_master.create_job>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+0   
7 [0x7]: line: 48 new_class @33 // std.io.task#job_builder   
9 [0x9]:          dup    
10 [0xa]:          pushl 0   
11 [0xb]:          movg @30 // @std.io.task#__srt_global   
12 [0xc]:          movn #8   
14 [0xe]:          pushobj   
15 [0xf]:          call @2205 // <std.io.task#job_builder.job_builder>   
16 [0x10]:          popobj2    
17 [0x11]:          smovr_3 fp+1   
18 [0x12]: line: 49 pushl 1   
19 [0x13]:          call @2212 // <std.io.task#job_builder.long_term>   
20 [0x14]:          popobj2    
21 [0x15]:          returnobj   
22 [0x16]:          ret   


function: std.io.task#task.builder[2243] params(0) in file: lib\support\/0.2.9//io//task//task.sharp:52:15: note:  
		    static def builder() : job_builder {
		              ^

0 [0x0]: line: 53 movg @30 // @std.io.task#__srt_global   
1 [0x1]:          movn #8   
3 [0x3]:          pushobj   
4 [0x4]:          call @2220 // <std.io.task#job_master.create_job>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+0   
7 [0x7]: line: 54 new_class @33 // std.io.task#job_builder   
9 [0x9]:          dup    
10 [0xa]:          pushl 0   
11 [0xb]:          movg @30 // @std.io.task#__srt_global   
12 [0xc]:          movn #8   
14 [0xe]:          pushobj   
15 [0xf]:          call @2205 // <std.io.task#job_builder.job_builder>   
16 [0x10]:          popobj2    
17 [0x11]:          smovr_3 fp+1   
18 [0x12]: line: 55 movl 1   
19 [0x13]:          returnobj   
20 [0x14]:          ret   


function: std.io.task#task.cancel_all_jobs_by_name[2244] params(1) in file: lib\support\/0.2.9//io//task//task.sharp:58:19: note:  
			public static def cancel_all_jobs_by_name(name: string) {
		                  ^

0 [0x0]: line: 59 movg @30 // @std.io.task#__srt_global   
1 [0x1]:          movn #8   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 0   
5 [0x5]:          call @2225 // <std.io.task#job_master.cancel_jobs_by_name>   
6 [0x6]:          ret   


constructor: std.io.task#task.task[2245] params(0) in file: lib\support\/0.2.9//io//task//task.sharp:9:6: note:  
		class task {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std.io#thread.thread[2246] params(0) in file: lib\support\/0.2.9//io//thread.sharp:8:19: note:  
		    private thread() {} // the user must use standardized constructor
		                  ^

0 [0x0]:         new_class @75 // std#string   
2 [0x2]:         dup    
3 [0x3]:         newstr @55 //    
4 [0x4]:         call @3546 // <std#string.string>   
5 [0x5]:         movl 0   
6 [0x6]:         movn #6   
8 [0x8]:         popobj   
9 [0x9]:         pushl 0   
10 [0xa]:         ret   


constructor: std.io#thread.thread[2247] params(2) in file: lib\support\/0.2.9//io//thread.sharp:10:15: note:  
			public thread(name : string, main: (object[])(var)) {
		              ^

0 [0x0]:         new_class @75 // std#string   
2 [0x2]:         dup    
3 [0x3]:         newstr @55 //    
4 [0x4]:         call @3546 // <std#string.string>   
5 [0x5]:         movl 0   
6 [0x6]:         movn #6   
8 [0x8]:         popobj   
9 [0x9]:         pushl 0   
10 [0xa]: line: 11 ipushl #2   
11 [0xb]:          movl 0   
12 [0xc]:          movn #11   
14 [0xe]:          loadval ebx   
15 [0xf]:          movi #0, adx   
17 [0x11]:          rmov adx, ebx   
18 [0x12]: line: 12 pushl 1   
19 [0x13]:          movl 0   
20 [0x14]:          movn #6   
22 [0x16]:          popobj   
23 [0x17]: line: 13 movg @38 // @std.io#thread_group   
24 [0x18]:          movn #0   
26 [0x1a]:          pushobj   
27 [0x1b]:          movl 0   
28 [0x1c]:          movn #7   
30 [0x1e]:          popobj   
31 [0x1f]: line: 14 movl 0   
32 [0x20]:          movn #7   
34 [0x22]:          pushobj   
35 [0x23]:          call @2289 // <std.io#thread_group.get_priority>   
36 [0x24]:          movl 0   
37 [0x25]:          movn #3   
39 [0x27]:          popobj   
40 [0x28]: line: 15 movi #-1, ebx   
42 [0x2a]:          movl 0   
43 [0x2b]:          movn #1   
45 [0x2d]:          movi #0, adx   
47 [0x2f]:          rmov adx, ebx   
48 [0x30]: line: 16 movg @37 // @std.io#thread   
49 [0x31]:          movn #0   
51 [0x33]:          movi #0, adx   
53 [0x35]:          iaload ebx, adx   
54 [0x36]:          movr egx, ebx   
55 [0x37]:          inc ebx   
56 [0x38]:          movi #0, adx   
58 [0x3a]:          rmov adx, ebx   
59 [0x3b]:          rstore egx   
60 [0x3c]:          movl 0   
61 [0x3d]:          movn #2   
63 [0x3f]:          loadval ebx   
64 [0x40]:          movi #0, adx   
66 [0x42]:          rmov adx, ebx   
67 [0x43]: line: 18 movl 0   
68 [0x44]:          movn #7   
70 [0x46]:          pushobj   
71 [0x47]:          pushl 0   
72 [0x48]:          call @2286 // <std.io#thread_group.add>   
73 [0x49]:          ret   


constructor: std.io#thread.thread[2248] params(3) in file: lib\support\/0.2.9//io//thread.sharp:21:15: note:  
			public thread(name : string, daemon: var, main: (object[])(var)) {
		              ^

0 [0x0]:         new_class @75 // std#string   
2 [0x2]:         dup    
3 [0x3]:         newstr @55 //    
4 [0x4]:         call @3546 // <std#string.string>   
5 [0x5]:         movl 0   
6 [0x6]:         movn #6   
8 [0x8]:         popobj   
9 [0x9]:         pushl 0   
10 [0xa]: line: 22 ipushl #3   
11 [0xb]:          movl 0   
12 [0xc]:          movn #11   
14 [0xe]:          loadval ebx   
15 [0xf]:          movi #0, adx   
17 [0x11]:          rmov adx, ebx   
18 [0x12]: line: 23 pushl 1   
19 [0x13]:          movl 0   
20 [0x14]:          movn #6   
22 [0x16]:          popobj   
23 [0x17]: line: 24 ipushl #2   
24 [0x18]:          movl 0   
25 [0x19]:          movn #4   
27 [0x1b]:          loadval ebx   
28 [0x1c]:          movi #0, adx   
30 [0x1e]:          rmov adx, ebx   
31 [0x1f]: line: 25 movg @38 // @std.io#thread_group   
32 [0x20]:          movn #0   
34 [0x22]:          pushobj   
35 [0x23]:          movl 0   
36 [0x24]:          movn #7   
38 [0x26]:          popobj   
39 [0x27]: line: 26 movl 0   
40 [0x28]:          movn #7   
42 [0x2a]:          pushobj   
43 [0x2b]:          call @2289 // <std.io#thread_group.get_priority>   
44 [0x2c]:          movl 0   
45 [0x2d]:          movn #3   
47 [0x2f]:          popobj   
48 [0x30]: line: 27 movi #-1, ebx   
50 [0x32]:          movl 0   
51 [0x33]:          movn #1   
53 [0x35]:          movi #0, adx   
55 [0x37]:          rmov adx, ebx   
56 [0x38]: line: 28 movg @37 // @std.io#thread   
57 [0x39]:          movn #0   
59 [0x3b]:          movi #0, adx   
61 [0x3d]:          iaload ebx, adx   
62 [0x3e]:          movr egx, ebx   
63 [0x3f]:          inc ebx   
64 [0x40]:          movi #0, adx   
66 [0x42]:          rmov adx, ebx   
67 [0x43]:          rstore egx   
68 [0x44]:          movl 0   
69 [0x45]:          movn #2   
71 [0x47]:          loadval ebx   
72 [0x48]:          movi #0, adx   
74 [0x4a]:          rmov adx, ebx   
75 [0x4b]: line: 30 movl 0   
76 [0x4c]:          movn #7   
78 [0x4e]:          pushobj   
79 [0x4f]:          pushl 0   
80 [0x50]:          call @2286 // <std.io#thread_group.add>   
81 [0x51]:          ret   


constructor: std.io#thread.thread[2249] params(3) in file: lib\support\/0.2.9//io//thread.sharp:33:18: note:  
		    public thread(name : string, main: (object[])(var), stack_size : var) {
		                 ^

0 [0x0]:         new_class @75 // std#string   
2 [0x2]:         dup    
3 [0x3]:         newstr @55 //    
4 [0x4]:         call @3546 // <std#string.string>   
5 [0x5]:         movl 0   
6 [0x6]:         movn #6   
8 [0x8]:         popobj   
9 [0x9]:         pushl 0   
10 [0xa]: line: 34 ipushl #2   
11 [0xb]:          movl 0   
12 [0xc]:          movn #11   
14 [0xe]:          loadval ebx   
15 [0xf]:          movi #0, adx   
17 [0x11]:          rmov adx, ebx   
18 [0x12]: line: 35 pushl 1   
19 [0x13]:          movl 0   
20 [0x14]:          movn #6   
22 [0x16]:          popobj   
23 [0x17]: line: 36 ipushl #3   
24 [0x18]:          movl 0   
25 [0x19]:          movn #10   
27 [0x1b]:          loadval ebx   
28 [0x1c]:          movi #0, adx   
30 [0x1e]:          rmov adx, ebx   
31 [0x1f]: line: 37 movg @38 // @std.io#thread_group   
32 [0x20]:          movn #0   
34 [0x22]:          pushobj   
35 [0x23]:          movl 0   
36 [0x24]:          movn #7   
38 [0x26]:          popobj   
39 [0x27]: line: 38 movl 0   
40 [0x28]:          movn #7   
42 [0x2a]:          pushobj   
43 [0x2b]:          call @2289 // <std.io#thread_group.get_priority>   
44 [0x2c]:          movl 0   
45 [0x2d]:          movn #3   
47 [0x2f]:          popobj   
48 [0x30]: line: 39 movi #-1, ebx   
50 [0x32]:          movl 0   
51 [0x33]:          movn #1   
53 [0x35]:          movi #0, adx   
55 [0x37]:          rmov adx, ebx   
56 [0x38]: line: 40 movg @37 // @std.io#thread   
57 [0x39]:          movn #0   
59 [0x3b]:          movi #0, adx   
61 [0x3d]:          iaload ebx, adx   
62 [0x3e]:          movr egx, ebx   
63 [0x3f]:          inc ebx   
64 [0x40]:          movi #0, adx   
66 [0x42]:          rmov adx, ebx   
67 [0x43]:          rstore egx   
68 [0x44]:          movl 0   
69 [0x45]:          movn #2   
71 [0x47]:          loadval ebx   
72 [0x48]:          movi #0, adx   
74 [0x4a]:          rmov adx, ebx   
75 [0x4b]: line: 42 movl 0   
76 [0x4c]:          movn #7   
78 [0x4e]:          pushobj   
79 [0x4f]:          pushl 0   
80 [0x50]:          call @2286 // <std.io#thread_group.add>   
81 [0x51]:          ret   


constructor: std.io#thread.thread[2250] params(4) in file: lib\support\/0.2.9//io//thread.sharp:45:18: note:  
		    public thread(name : string, daemon: var, main: (object[])(var), stack_size : var) {
		                 ^

0 [0x0]:         new_class @75 // std#string   
2 [0x2]:         dup    
3 [0x3]:         newstr @55 //    
4 [0x4]:         call @3546 // <std#string.string>   
5 [0x5]:         movl 0   
6 [0x6]:         movn #6   
8 [0x8]:         popobj   
9 [0x9]:         pushl 0   
10 [0xa]: line: 46 ipushl #3   
11 [0xb]:          movl 0   
12 [0xc]:          movn #11   
14 [0xe]:          loadval ebx   
15 [0xf]:          movi #0, adx   
17 [0x11]:          rmov adx, ebx   
18 [0x12]: line: 47 pushl 1   
19 [0x13]:          movl 0   
20 [0x14]:          movn #6   
22 [0x16]:          popobj   
23 [0x17]: line: 48 ipushl #4   
24 [0x18]:          movl 0   
25 [0x19]:          movn #10   
27 [0x1b]:          loadval ebx   
28 [0x1c]:          movi #0, adx   
30 [0x1e]:          rmov adx, ebx   
31 [0x1f]: line: 49 ipushl #2   
32 [0x20]:          movl 0   
33 [0x21]:          movn #4   
35 [0x23]:          loadval ebx   
36 [0x24]:          movi #0, adx   
38 [0x26]:          rmov adx, ebx   
39 [0x27]: line: 50 movg @38 // @std.io#thread_group   
40 [0x28]:          movn #0   
42 [0x2a]:          pushobj   
43 [0x2b]:          movl 0   
44 [0x2c]:          movn #7   
46 [0x2e]:          popobj   
47 [0x2f]: line: 51 movl 0   
48 [0x30]:          movn #7   
50 [0x32]:          pushobj   
51 [0x33]:          call @2289 // <std.io#thread_group.get_priority>   
52 [0x34]:          movl 0   
53 [0x35]:          movn #3   
55 [0x37]:          popobj   
56 [0x38]: line: 52 movi #-1, ebx   
58 [0x3a]:          movl 0   
59 [0x3b]:          movn #1   
61 [0x3d]:          movi #0, adx   
63 [0x3f]:          rmov adx, ebx   
64 [0x40]: line: 53 movg @37 // @std.io#thread   
65 [0x41]:          movn #0   
67 [0x43]:          movi #0, adx   
69 [0x45]:          iaload ebx, adx   
70 [0x46]:          movr egx, ebx   
71 [0x47]:          inc ebx   
72 [0x48]:          movi #0, adx   
74 [0x4a]:          rmov adx, ebx   
75 [0x4b]:          rstore egx   
76 [0x4c]:          movl 0   
77 [0x4d]:          movn #2   
79 [0x4f]:          loadval ebx   
80 [0x50]:          movi #0, adx   
82 [0x52]:          rmov adx, ebx   
83 [0x53]: line: 55 movl 0   
84 [0x54]:          movn #7   
86 [0x56]:          pushobj   
87 [0x57]:          pushl 0   
88 [0x58]:          call @2286 // <std.io#thread_group.add>   
89 [0x59]:          ret   


constructor: std.io#thread.thread[2251] params(4) in file: lib\support\/0.2.9//io//thread.sharp:58:18: note:  
		    public thread(name : string, main: (object[])(var), stack_size : var, group : thread_group) {
		                 ^

0 [0x0]:         new_class @75 // std#string   
2 [0x2]:         dup    
3 [0x3]:         newstr @55 //    
4 [0x4]:         call @3546 // <std#string.string>   
5 [0x5]:         movl 0   
6 [0x6]:         movn #6   
8 [0x8]:         popobj   
9 [0x9]:         pushl 0   
10 [0xa]: line: 59 ipushl #2   
11 [0xb]:          movl 0   
12 [0xc]:          movn #11   
14 [0xe]:          loadval ebx   
15 [0xf]:          movi #0, adx   
17 [0x11]:          rmov adx, ebx   
18 [0x12]: line: 60 pushl 1   
19 [0x13]:          movl 0   
20 [0x14]:          movn #6   
22 [0x16]:          popobj   
23 [0x17]: line: 61 ipushl #3   
24 [0x18]:          movl 0   
25 [0x19]:          movn #10   
27 [0x1b]:          loadval ebx   
28 [0x1c]:          movi #0, adx   
30 [0x1e]:          rmov adx, ebx   
31 [0x1f]: line: 62 pushl 4   
32 [0x20]:          movl 0   
33 [0x21]:          movn #7   
35 [0x23]:          popobj   
36 [0x24]: line: 63 pushl 4   
37 [0x25]:          call @2289 // <std.io#thread_group.get_priority>   
38 [0x26]:          movl 0   
39 [0x27]:          movn #3   
41 [0x29]:          popobj   
42 [0x2a]: line: 64 movi #-1, ebx   
44 [0x2c]:          movl 0   
45 [0x2d]:          movn #1   
47 [0x2f]:          movi #0, adx   
49 [0x31]:          rmov adx, ebx   
50 [0x32]: line: 65 movg @37 // @std.io#thread   
51 [0x33]:          movn #0   
53 [0x35]:          movi #0, adx   
55 [0x37]:          iaload ebx, adx   
56 [0x38]:          movr egx, ebx   
57 [0x39]:          inc ebx   
58 [0x3a]:          movi #0, adx   
60 [0x3c]:          rmov adx, ebx   
61 [0x3d]:          rstore egx   
62 [0x3e]:          movl 0   
63 [0x3f]:          movn #2   
65 [0x41]:          loadval ebx   
66 [0x42]:          movi #0, adx   
68 [0x44]:          rmov adx, ebx   
69 [0x45]: line: 67 movl 0   
70 [0x46]:          movn #7   
72 [0x48]:          pushobj   
73 [0x49]:          pushl 0   
74 [0x4a]:          call @2286 // <std.io#thread_group.add>   
75 [0x4b]:          ret   


constructor: std.io#thread.thread[2252] params(3) in file: lib\support\/0.2.9//io//thread.sharp:70:18: note:  
		    public thread(name : string, main: (object[])(var), group : thread_group) {
		                 ^

0 [0x0]:         new_class @75 // std#string   
2 [0x2]:         dup    
3 [0x3]:         newstr @55 //    
4 [0x4]:         call @3546 // <std#string.string>   
5 [0x5]:         movl 0   
6 [0x6]:         movn #6   
8 [0x8]:         popobj   
9 [0x9]:         pushl 0   
10 [0xa]: line: 71 ipushl #2   
11 [0xb]:          movl 0   
12 [0xc]:          movn #11   
14 [0xe]:          loadval ebx   
15 [0xf]:          movi #0, adx   
17 [0x11]:          rmov adx, ebx   
18 [0x12]: line: 72 pushl 1   
19 [0x13]:          movl 0   
20 [0x14]:          movn #6   
22 [0x16]:          popobj   
23 [0x17]: line: 73 pushl 3   
24 [0x18]:          movl 0   
25 [0x19]:          movn #7   
27 [0x1b]:          popobj   
28 [0x1c]: line: 74 pushl 3   
29 [0x1d]:          call @2289 // <std.io#thread_group.get_priority>   
30 [0x1e]:          movl 0   
31 [0x1f]:          movn #3   
33 [0x21]:          popobj   
34 [0x22]: line: 75 movi #-1, ebx   
36 [0x24]:          movl 0   
37 [0x25]:          movn #1   
39 [0x27]:          movi #0, adx   
41 [0x29]:          rmov adx, ebx   
42 [0x2a]: line: 76 movg @37 // @std.io#thread   
43 [0x2b]:          movn #0   
45 [0x2d]:          movi #0, adx   
47 [0x2f]:          iaload ebx, adx   
48 [0x30]:          movr egx, ebx   
49 [0x31]:          inc ebx   
50 [0x32]:          movi #0, adx   
52 [0x34]:          rmov adx, ebx   
53 [0x35]:          rstore egx   
54 [0x36]:          movl 0   
55 [0x37]:          movn #2   
57 [0x39]:          loadval ebx   
58 [0x3a]:          movi #0, adx   
60 [0x3c]:          rmov adx, ebx   
61 [0x3d]: line: 78 movl 0   
62 [0x3e]:          movn #7   
64 [0x40]:          pushobj   
65 [0x41]:          pushl 0   
66 [0x42]:          call @2286 // <std.io#thread_group.add>   
67 [0x43]:          ret   


constructor: std.io#thread.thread[2253] params(5) in file: lib\support\/0.2.9//io//thread.sharp:81:18: note:  
		    public thread(name : string, daemon: var, main: (object[])(var), stack_size : var, group : thread_group) {
		                 ^

0 [0x0]:         new_class @75 // std#string   
2 [0x2]:         dup    
3 [0x3]:         newstr @55 //    
4 [0x4]:         call @3546 // <std#string.string>   
5 [0x5]:         movl 0   
6 [0x6]:         movn #6   
8 [0x8]:         popobj   
9 [0x9]:         pushl 0   
10 [0xa]: line: 82 ipushl #3   
11 [0xb]:          movl 0   
12 [0xc]:          movn #11   
14 [0xe]:          loadval ebx   
15 [0xf]:          movi #0, adx   
17 [0x11]:          rmov adx, ebx   
18 [0x12]: line: 83 pushl 1   
19 [0x13]:          movl 0   
20 [0x14]:          movn #6   
22 [0x16]:          popobj   
23 [0x17]: line: 84 ipushl #2   
24 [0x18]:          movl 0   
25 [0x19]:          movn #4   
27 [0x1b]:          loadval ebx   
28 [0x1c]:          movi #0, adx   
30 [0x1e]:          rmov adx, ebx   
31 [0x1f]: line: 85 ipushl #4   
32 [0x20]:          movl 0   
33 [0x21]:          movn #10   
35 [0x23]:          loadval ebx   
36 [0x24]:          movi #0, adx   
38 [0x26]:          rmov adx, ebx   
39 [0x27]: line: 86 pushl 5   
40 [0x28]:          movl 0   
41 [0x29]:          movn #7   
43 [0x2b]:          popobj   
44 [0x2c]: line: 87 pushl 5   
45 [0x2d]:          call @2289 // <std.io#thread_group.get_priority>   
46 [0x2e]:          movl 0   
47 [0x2f]:          movn #3   
49 [0x31]:          popobj   
50 [0x32]: line: 88 movi #-1, ebx   
52 [0x34]:          movl 0   
53 [0x35]:          movn #1   
55 [0x37]:          movi #0, adx   
57 [0x39]:          rmov adx, ebx   
58 [0x3a]: line: 89 movg @37 // @std.io#thread   
59 [0x3b]:          movn #0   
61 [0x3d]:          movi #0, adx   
63 [0x3f]:          iaload ebx, adx   
64 [0x40]:          movr egx, ebx   
65 [0x41]:          inc ebx   
66 [0x42]:          movi #0, adx   
68 [0x44]:          rmov adx, ebx   
69 [0x45]:          rstore egx   
70 [0x46]:          movl 0   
71 [0x47]:          movn #2   
73 [0x49]:          loadval ebx   
74 [0x4a]:          movi #0, adx   
76 [0x4c]:          rmov adx, ebx   
77 [0x4d]: line: 91 movl 0   
78 [0x4e]:          movn #7   
80 [0x50]:          pushobj   
81 [0x51]:          pushl 0   
82 [0x52]:          call @2286 // <std.io#thread_group.add>   
83 [0x53]:          ret   


function: std.io#thread.start[2254] params(1) in file: lib\support\/0.2.9//io//thread.sharp:94:15: note:  
		    public def start(args : object[]) : thread_result {
		              ^

0 [0x0]: line: 95 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #-1, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 29   
14 [0xe]: line: 96 movl 0   
15 [0xf]:          movn #4   
17 [0x11]:          movi #0, adx   
19 [0x13]:          iaload ebx, adx   
20 [0x14]:          rstore ebx   
21 [0x15]:          call @2366 // <platform.kernel#vm.thread_create>   
22 [0x16]:          movl 0   
23 [0x17]:          movn #1   
25 [0x19]:          loadval ebx   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          rmov adx, ebx   
29 [0x1d]:          nop   
30 [0x1e]: line: 97 pushl 0   
31 [0x1f]:          pushl 1   
32 [0x20]:          call @2383 // <platform.kernel#vm.thread_start>   
33 [0x21]:          popobj2    
34 [0x22]:          returnobj   
35 [0x23]:          ret   


function: std.io#thread.start[2255] params(0) in file: lib\support\/0.2.9//io//thread.sharp:100:15: note:  
		    public def start() : thread_result {
		              ^

0 [0x0]: line: 101 pushl 0   
1 [0x1]:           pushnull    
2 [0x2]:           call @2254 // <std.io#thread.start>   
3 [0x3]:           popobj2    
4 [0x4]:           returnobj   
5 [0x5]:           ret   


function: std.io#thread.suspend[2256] params(0) in file: lib\support\/0.2.9//io//thread.sharp:104:12: note:  
			public def suspend() : thread_result {
		           ^

0 [0x0]: line: 105 pushl 0   
1 [0x1]:           call @2375 // <platform.kernel#vm.suspend>   
2 [0x2]:           popobj2    
3 [0x3]:           smovr_3 fp+1   
4 [0x4]: line: 106 pushl 1   
5 [0x5]:           movg @40 // @std.io#thread_result   
6 [0x6]:           movn #0   
8 [0x8]:           pushobj   
9 [0x9]:           call @1947 // <std#_enum_.operator==>   
10 [0xa]:           loadval ebx   
11 [0xb]:           movr cmt, ebx   
12 [0xc]:           jne 27   
13 [0xd]: line: 107 movi #1, ebx   
15 [0xf]:           movl 0   
16 [0x10]:           movn #9   
18 [0x12]:           movi #0, adx   
20 [0x14]:           rmov adx, ebx   
21 [0x15]: line: 108 movl 0   
22 [0x16]:           movn #13   
24 [0x18]:           pushobj   
25 [0x19]:           call @2060 // <std.io.fiber#fiber.suspend>   
26 [0x1a]:           pop   
27 [0x1b]:           nop   
28 [0x1c]: line: 110 movl 1   
29 [0x1d]:           returnobj   
30 [0x1e]:           ret   


function: std.io#thread.unsuspend[2257] params(0) in file: lib\support\/0.2.9//io//thread.sharp:113:12: note:  
			public def unsuspend() : thread_result {
		           ^

0 [0x0]: line: 114 pushl 0   
1 [0x1]:           istore 0   
3 [0x3]:           call @2376 // <platform.kernel#vm.unsuspend>   
4 [0x4]:           popobj2    
5 [0x5]:           smovr_3 fp+1   
6 [0x6]: line: 115 pushl 1   
7 [0x7]:           movg @40 // @std.io#thread_result   
8 [0x8]:           movn #0   
10 [0xa]:           pushobj   
11 [0xb]:           call @1947 // <std#_enum_.operator==>   
12 [0xc]:           loadval ebx   
13 [0xd]:           movr cmt, ebx   
14 [0xe]:           jne 29   
15 [0xf]: line: 116 movi #0, ebx   
17 [0x11]:           movl 0   
18 [0x12]:           movn #9   
20 [0x14]:           movi #0, adx   
22 [0x16]:           rmov adx, ebx   
23 [0x17]: line: 117 movl 0   
24 [0x18]:           movn #13   
26 [0x1a]:           pushobj   
27 [0x1b]:           call @2061 // <std.io.fiber#fiber.unsuspend>   
28 [0x1c]:           pop   
29 [0x1d]:           nop   
30 [0x1e]: line: 119 movl 1   
31 [0x1f]:           returnobj   
32 [0x20]:           ret   


function: std.io#thread.unsuspend_and_wait[2258] params(0) in file: lib\support\/0.2.9//io//thread.sharp:122:12: note:  
			public def unsuspend_and_wait() : thread_result {
		           ^

0 [0x0]: line: 123 pushl 0   
1 [0x1]:           istore 1   
3 [0x3]:           call @2376 // <platform.kernel#vm.unsuspend>   
4 [0x4]:           popobj2    
5 [0x5]:           smovr_3 fp+1   
6 [0x6]: line: 124 pushl 1   
7 [0x7]:           movg @40 // @std.io#thread_result   
8 [0x8]:           movn #0   
10 [0xa]:           pushobj   
11 [0xb]:           call @1947 // <std#_enum_.operator==>   
12 [0xc]:           loadval ebx   
13 [0xd]:           movr cmt, ebx   
14 [0xe]:           jne 29   
15 [0xf]: line: 125 movi #0, ebx   
17 [0x11]:           movl 0   
18 [0x12]:           movn #9   
20 [0x14]:           movi #0, adx   
22 [0x16]:           rmov adx, ebx   
23 [0x17]: line: 126 movl 0   
24 [0x18]:           movn #13   
26 [0x1a]:           pushobj   
27 [0x1b]:           call @2061 // <std.io.fiber#fiber.unsuspend>   
28 [0x1c]:           pop   
29 [0x1d]:           nop   
30 [0x1e]: line: 128 movl 1   
31 [0x1f]:           returnobj   
32 [0x20]:           ret   


function: std.io#thread.join[2259] params(0) in file: lib\support\/0.2.9//io//thread.sharp:131:15: note:  
		    public def join() := vm.thread_join(self);
		              ^

0 [0x0]: line: 131 pushl 0   
1 [0x1]:           call @2378 // <platform.kernel#vm.thread_join>   
2 [0x2]:           popobj2    
3 [0x3]:           returnobj   
4 [0x4]:           ret   


function: std.io#thread.interrupt[2260] params(0) in file: lib\support\/0.2.9//io//thread.sharp:133:15: note:  
		    public def interrupt() {
		              ^

0 [0x0]: line: 134 pushl 0   
1 [0x1]:           call @2379 // <platform.kernel#vm.kill>   
2 [0x2]:           pop   
3 [0x3]:           ret   


function: std.io#thread.current[2261] params(0) in file: lib\support\/0.2.9//io//thread.sharp:137:22: note:  
		    public static def current() := vm.current_thread();
		                     ^

0 [0x0]: line: 137 call @2380 // <platform.kernel#vm.current_thread>   
1 [0x1]:           popobj2    
2 [0x2]:           returnobj   
3 [0x3]:           ret   


function: std.io#thread.sleep[2262] params(1) in file: lib\support\/0.2.9//io//thread.sharp:139:22: note:  
		    public static def sleep(mills_time : var) := time.sleep(milliseconds, mills_time);
		                     ^

0 [0x0]: line: 139 movg @79 // @std#time_unit   
1 [0x1]:           movn #1   
3 [0x3]:           pushobj   
4 [0x4]:           ipushl #0   
5 [0x5]:           call @3657 // <std#time.sleep>   
6 [0x6]:           ret   


function: std.io#thread.suspend_for[2263] params(1) in file: lib\support\/0.2.9//io//thread.sharp:141:22: note:  
		    public static def suspend_for(mills_time : var) {
		                     ^

0 [0x0]: line: 142 istore 1   
2 [0x2]:           call @2380 // <platform.kernel#vm.current_thread>   
3 [0x3]:           popobj2    
4 [0x4]:           movn #9   
6 [0x6]:           loadval ebx   
7 [0x7]:           movi #0, adx   
9 [0x9]:           rmov adx, ebx   
10 [0xa]: line: 143 movg @79 // @std#time_unit   
11 [0xb]:           movn #1   
13 [0xd]:           pushobj   
14 [0xe]:           ipushl #0   
15 [0xf]:           call @3658 // <std#time.wait>   
16 [0x10]: line: 144 istore 0   
18 [0x12]:           call @2380 // <platform.kernel#vm.current_thread>   
19 [0x13]:           popobj2    
20 [0x14]:           movn #9   
22 [0x16]:           loadval ebx   
23 [0x17]:           movi #0, adx   
25 [0x19]:           rmov adx, ebx   
26 [0x1a]:           ret   


function: std.io#thread.exit[2264] params(1) in file: lib\support\/0.2.9//io//thread.sharp:147:22: note:  
		    public static def exit(code : var) {
		                     ^

0 [0x0]: line: 148 call @2261 // <std.io#thread.current>   
1 [0x1]:           ipushl #0   
2 [0x2]:           call @2381 // <platform.kernel#vm.exit_thread>   
3 [0x3]: line: 149 hlt   : protected asm start
4 [0x4]:           ret   : protected asm end


function: std.io#thread.hash[2265] params(0) in file: lib\support\/0.2.9//io//thread.sharp:152:8: note:  
		    def hash() : _int64 {
		       ^

0 [0x0]: line: 153 movl 0   
1 [0x1]:           movn #2   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.io#thread.yield[2266] params(0) in file: lib\support\/0.2.9//io//thread.sharp:156:22: note:  
		    public static def yield() := vm.thread_yield();
		                     ^

0 [0x0]: line: 156 call @2382 // <platform.kernel#vm.thread_yield>   
1 [0x1]:           ret   


function: std.io#thread.set_exception_handler[2267] params(1) in file: lib\support\/0.2.9//io//thread.sharp:158:15: note:  
		    public def set_exception_handler(error_handler: uncaught_exception_handler) {
		              ^

0 [0x0]: line: 159 pushl 1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #12   
4 [0x4]:           popobj   
5 [0x5]:           ret   


function: std.io#thread.set_priority[2268] params(1) in file: lib\support\/0.2.9//io//thread.sharp:162:15: note:  
		    public def set_priority(priority : thread_priority) : thread_result {
		              ^

0 [0x0]: line: 163 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 164 pushl 1   
3 [0x3]:           movg @39 // @std.io#thread_priority   
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @1947 // <std#_enum_.operator==>   
8 [0x8]:           loadval ebx   
9 [0x9]:           movr cmt, ebx   
10 [0xa]:           je 29   
11 [0xb]:           pushl 1   
12 [0xc]:           movg @39 // @std.io#thread_priority   
13 [0xd]:           movn #1   
15 [0xf]:           pushobj   
16 [0x10]:           call @1947 // <std#_enum_.operator==>   
17 [0x11]:           loadval ebx   
18 [0x12]:           movr cmt, ebx   
19 [0x13]:           je 29   
20 [0x14]:           pushl 1   
21 [0x15]:           movg @39 // @std.io#thread_priority   
22 [0x16]:           movn #2   
24 [0x18]:           pushobj   
25 [0x19]:           call @1947 // <std#_enum_.operator==>   
26 [0x1a]:           loadval ebx   
27 [0x1b]:           movr cmt, ebx   
28 [0x1c]:           jne 41   
29 [0x1d]: line: 168 pushl 0   
30 [0x1e]:           pushl 1   
31 [0x1f]:           call @1950 // <std#_enum_.get_ordinal>   
32 [0x20]:           call @2384 // <platform.kernel#vm.set_thread_priority>   
33 [0x21]:           popobj2    
34 [0x22]:           pushobj   
35 [0x23]:           movl 0   
36 [0x24]:           _ulck   
37 [0x25]:           popobj2    
38 [0x26]:           returnobj   
39 [0x27]:           ret   
40 [0x28]:           jmp @53   
41 [0x29]: line: 171 new_class @4 // std#illegal_argument_exception   
43 [0x2b]:           dup    
44 [0x2c]:           new_class @75 // std#string   
46 [0x2e]:           dup    
47 [0x2f]:           newstr @85 // invalid thread priority    
48 [0x30]:           call @3546 // <std#string.string>   
49 [0x31]:           pushl 1   
50 [0x32]:           call @3560 // <std#string.operator+>   
51 [0x33]:           call @1962 // <std#illegal_argument_exception.illegal_argument_exception>   
52 [0x34]:           throw    
53 [0x35]:           nop   
54 [0x36]:           movl 0   
55 [0x37]:           _ulck   


function: std.io#thread.remove_thread[2269] params(1) in file: lib\support\/0.2.9//io//thread.sharp:177:16: note:  
		    private def remove_thread(t : thread) {
		               ^

0 [0x0]: line: 178 movl 0   
1 [0x1]:           movn #7   
3 [0x3]:           pushobj   
4 [0x4]:           movl 1   
5 [0x5]:           movn #1   
7 [0x7]:           movi #0, adx   
9 [0x9]:           iaload ebx, adx   
10 [0xa]:           rstore ebx   
11 [0xb]:           call @2290 // <std.io#thread_group.remove>   
12 [0xc]:           pop   
13 [0xd]:           ret   


function: std.io#thread.get_id[2270] params(0) in file: lib\support\/0.2.9//io//thread.sharp:181:15: note:  
		    public def get_id() := id;
		              ^

0 [0x0]: line: 181 movl 0   
1 [0x1]:           movn #2   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.io#thread.get_native_handle[2271] params(0) in file: lib\support\/0.2.9//io//thread.sharp:182:15: note:  
		    public def get_native_handle() := native_handle;
		              ^

0 [0x0]: line: 182 movl 0   
1 [0x1]:           movn #1   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.io#thread.get_stack_size[2272] params(0) in file: lib\support\/0.2.9//io//thread.sharp:183:15: note:  
		    public def get_stack_size() := stack_size;
		              ^

0 [0x0]: line: 183 movl 0   
1 [0x1]:           movn #10   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.io#thread.get_name[2273] params(0) in file: lib\support\/0.2.9//io//thread.sharp:184:15: note:  
		    public def get_name() := name;
		              ^

0 [0x0]: line: 184 movl 0   
1 [0x1]:           movn #6   
3 [0x3]:           returnobj   
4 [0x4]:           ret   


function: std.io#thread.is_exited[2274] params(0) in file: lib\support\/0.2.9//io//thread.sharp:185:15: note:  
		    public def is_exited() := exited;
		              ^

0 [0x0]: line: 185 movl 0   
1 [0x1]:           movn #5   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.io#thread.is_daemon[2275] params(0) in file: lib\support\/0.2.9//io//thread.sharp:186:15: note:  
		    public def is_daemon() := daemon;
		              ^

0 [0x0]: line: 186 movl 0   
1 [0x1]:           movn #4   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.io#thread.is_started[2276] params(0) in file: lib\support\/0.2.9//io//thread.sharp:187:15: note:  
		    public def is_started() := started;
		              ^

0 [0x0]: line: 187 movl 0   
1 [0x1]:           movn #8   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.io#thread.is_suspended[2277] params(0) in file: lib\support\/0.2.9//io//thread.sharp:188:15: note:  
		    public def is_suspended() := suspended;
		              ^

0 [0x0]: line: 188 movl 0   
1 [0x1]:           movn #9   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.io#thread.set_main[2278] params(1) in file: lib\support\/0.2.9//io//thread.sharp:189:12: note:  
			public def set_main(main: (object[])(var)) := self->main = main;
		           ^

0 [0x0]: line: 189 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #11   
4 [0x4]:           loadval ebx   
5 [0x5]:           movi #0, adx   
7 [0x7]:           rmov adx, ebx   
8 [0x8]:           returnobj   
9 [0x9]:           ret   


function: std.io#thread.is_active[2279] params(0) in file: lib\support\/0.2.9//io//thread.sharp:190:12: note:  
			public def is_active() := started && !exited;
		           ^

0 [0x0]: line: 190 movl 0   
1 [0x1]:           movn #8   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           skne ebx // pc = 14   
7 [0x7]:           movl 0   
8 [0x8]:           movn #5   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           not ebx, ebx   
14 [0xe]:           return_val ebx   
15 [0xf]:           ret   


function: std.io#thread.get_exit_code[2280] params(0) in file: lib\support\/0.2.9//io//thread.sharp:191:12: note:  
			public def get_exit_code() := exit_code;
		           ^

0 [0x0]: line: 191 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.io#thread.get_exception_handler[2281] params(0) in file: lib\support\/0.2.9//io//thread.sharp:192:12: note:  
			public def get_exception_handler() := error_handler;
		           ^

0 [0x0]: line: 192 movl 0   
1 [0x1]:           movn #12   
3 [0x3]:           returnobj   
4 [0x4]:           ret   


overload function: std.io#thread.operator==[2282] params(1) in file: lib\support\/0.2.9//io//thread.sharp:194:15: note:  
		    public def operator==(t : thread) : var = native_handle==t.native_handle;
		              ^

0 [0x0]: line: 194 movl 0   
1 [0x1]:           movn #1   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #1   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           test ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


constructor: std.io#thread_group.thread_group[2283] params(1) in file: lib\support\/0.2.9//io//thread_group.sharp:5:21: note:  
			public thread_group(name : string) {
		                    ^

0 [0x0]:         new_class @114 // std#synced_list<std.io#thread>   
2 [0x2]:         dup    
3 [0x3]:         call @3845 // <std#synced_list<std.io#thread>.synced_list>   
4 [0x4]:         movl 0   
5 [0x5]:         movn #0   
7 [0x7]:         popobj   
8 [0x8]:         movi #0, ebx   
10 [0xa]:         movl 0   
11 [0xb]:         movn #3   
13 [0xd]:         movi #0, adx   
15 [0xf]:         rmov adx, ebx   
16 [0x10]:         pushl 0   
17 [0x11]: line: 6 pushl 1   
18 [0x12]:         movl 0   
19 [0x13]:         movn #1   
21 [0x15]:         popobj   
22 [0x16]: line: 7 movg @39 // @std.io#thread_priority   
23 [0x17]:         movn #1   
25 [0x19]:         pushobj   
26 [0x1a]:         movl 0   
27 [0x1b]:         movn #2   
29 [0x1d]:         popobj   
30 [0x1e]:         ret   


constructor: std.io#thread_group.thread_group[2284] params(2) in file: lib\support\/0.2.9//io//thread_group.sharp:10:21: note:  
			public thread_group(name : string, priority : thread_priority) {
		                    ^

0 [0x0]:         new_class @114 // std#synced_list<std.io#thread>   
2 [0x2]:         dup    
3 [0x3]:         call @3845 // <std#synced_list<std.io#thread>.synced_list>   
4 [0x4]:         movl 0   
5 [0x5]:         movn #0   
7 [0x7]:         popobj   
8 [0x8]:         movi #0, ebx   
10 [0xa]:         movl 0   
11 [0xb]:         movn #3   
13 [0xd]:         movi #0, adx   
15 [0xf]:         rmov adx, ebx   
16 [0x10]:         pushl 0   
17 [0x11]: line: 11 pushl 1   
18 [0x12]:          movl 0   
19 [0x13]:          movn #1   
21 [0x15]:          popobj   
22 [0x16]: line: 12 pushl 2   
23 [0x17]:          movl 0   
24 [0x18]:          movn #2   
26 [0x1a]:          popobj   
27 [0x1b]:          ret   


function: std.io#thread_group.at[2285] params(1) in file: lib\support\/0.2.9//io//thread_group.sharp:15:5: note:  
			def at(id : var) := handles.at(id);
		    ^

0 [0x0]: line: 15 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          ipushl #1   
5 [0x5]:          call @3850 // <std#synced_list<std.io#thread>.at>   
6 [0x6]:          popobj2    
7 [0x7]:          returnobj   
8 [0x8]:          ret   


function: std.io#thread_group.add[2286] params(1) in file: lib\support\/0.2.9//io//thread_group.sharp:17:5: note:  
			def add(t : thread) {
		    ^

0 [0x0]: line: 18 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 19 movl 0   
3 [0x3]:          movn #0   
5 [0x5]:          pushobj   
6 [0x6]:          pushl 1   
7 [0x7]:          call @3889 // <std#synced_list<std.io#thread>.indexof>   
8 [0x8]:          ipopl 2   
9 [0x9]: line: 20 ipushl #2   
10 [0xa]:          movi #0, ebx   
12 [0xc]:          loadval ecx   
13 [0xd]:          gte ecx, ebx   
14 [0xe]:          movr ebx, cmt   
15 [0xf]:          movr cmt, ebx   
16 [0x10]:          jne 26   
17 [0x11]: line: 21 movl 0   
18 [0x12]:          movn #0   
20 [0x14]:          pushobj   
21 [0x15]:          ipushl #2   
22 [0x16]:          pushl 1   
23 [0x17]:          call @3852 // <std#synced_list<std.io#thread>.put>   
24 [0x18]:          pop   
25 [0x19]:          jmp @43   
26 [0x1a]: line: 23 movl 0   
27 [0x1b]:          movn #0   
29 [0x1d]:          pushobj   
30 [0x1e]:          pushl 1   
31 [0x1f]:          call @3888 // <std#synced_list<std.io#thread>.add>   
32 [0x20]: line: 24 movl 0   
33 [0x21]:          movn #3   
35 [0x23]:          movi #0, adx   
37 [0x25]:          iaload ebx, adx   
38 [0x26]:          movr egx, ebx   
39 [0x27]:          inc ebx   
40 [0x28]:          movi #0, adx   
42 [0x2a]:          rmov adx, ebx   
43 [0x2b]:          nop   
44 [0x2c]:          movl 0   
45 [0x2d]:          _ulck   
46 [0x2e]:          ret   


function: std.io#thread_group.size[2287] params(0) in file: lib\support\/0.2.9//io//thread_group.sharp:29:5: note:  
			def size() := n_threads;
		    ^

0 [0x0]: line: 29 movl 0   
1 [0x1]:          movn #3   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          return_val ebx   
7 [0x7]:          ret   


function: std.io#thread_group.get_name[2288] params(0) in file: lib\support\/0.2.9//io//thread_group.sharp:30:5: note:  
			def get_name() := name;
		    ^

0 [0x0]: line: 30 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          returnobj   
4 [0x4]:          ret   


function: std.io#thread_group.get_priority[2289] params(0) in file: lib\support\/0.2.9//io//thread_group.sharp:31:5: note:  
			def get_priority() := default_priority;
		    ^

0 [0x0]: line: 31 movl 0   
1 [0x1]:          movn #2   
3 [0x3]:          returnobj   
4 [0x4]:          ret   


function: std.io#thread_group.remove[2290] params(1) in file: lib\support\/0.2.9//io//thread_group.sharp:32:5: note:  
			def remove(id : var) : var {
		    ^

0 [0x0]: line: 33 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 34 pushl 0   
3 [0x3]:          ipushl #1   
4 [0x4]:          call @2293 // <std.io#thread_group.find>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+2   
7 [0x7]: line: 35 movl 2   
8 [0x8]:          checknull   
9 [0x9]:          not ebx, ebx   
10 [0xa]:          movr cmt, ebx   
11 [0xb]:          jne 34   
12 [0xc]: line: 36 movl 0   
13 [0xd]:          movn #0   
15 [0xf]:          pushobj   
16 [0x10]:          pushl 2   
17 [0x11]:          call @3894 // <std#synced_list<std.io#thread>.remove>   
18 [0x12]: line: 37 movl 0   
19 [0x13]:          movn #3   
21 [0x15]:          movi #0, adx   
23 [0x17]:          iaload ebx, adx   
24 [0x18]:          movr egx, ebx   
25 [0x19]:          dec ebx   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          rmov adx, ebx   
29 [0x1d]: line: 38 istorel 1, fp+0   
31 [0x1f]:          movl 0   
32 [0x20]:          _ulck   
33 [0x21]:          ret   
34 [0x22]:          nop   
35 [0x23]: line: 41 istorel 0, fp+0   
37 [0x25]:          movl 0   
38 [0x26]:          _ulck   
39 [0x27]:          ret   
40 [0x28]:          movl 0   
41 [0x29]:          _ulck   


function: std.io#thread_group.get_elements[2291] params(0) in file: lib\support\/0.2.9//io//thread_group.sharp:45:8: note:  
		    def get_elements() : thread[] {
		       ^

0 [0x0]: line: 46 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          call @3848 // <std#synced_list<std.io#thread>.get_elements>   
5 [0x5]:          popobj2    
6 [0x6]:          returnobj   
7 [0x7]:          ret   


function: std.io#thread_group.find[2292] params(1) in file: lib\support\/0.2.9//io//thread_group.sharp:49:8: note:  
		    def find(find_func: (thread)(var)) : thread {
		       ^

0 [0x0]: line: 50 istorel 0, fp+2   
2 [0x2]:          ipushl #2   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          pushobj   
7 [0x7]:          call @3891 // <std#synced_list<std.io#thread>.size>   
8 [0x8]:          loadval ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          lt ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 42   
14 [0xe]: line: 51 movl 0   
15 [0xf]:          movn #0   
17 [0x11]:          pushobj   
18 [0x12]:          ipushl #2   
19 [0x13]:          call @3850 // <std#synced_list<std.io#thread>.at>   
20 [0x14]:          popobj2    
21 [0x15]:          smovr_3 fp+3   
22 [0x16]: line: 52 movl 3   
23 [0x17]:          checknull   
24 [0x18]:          not ebx, ebx   
25 [0x19]:          skne ebx // pc = 33   
26 [0x1a]:          ipushl #1   
27 [0x1b]:          pushl 3   
28 [0x1c]:          smov ebx, sp+[-1]   
29 [0x1d]:          calld ebx   
30 [0x1e]:          swap    
31 [0x1f]:          pop   
32 [0x20]:          loadval ebx   
33 [0x21]:          movr cmt, ebx   
34 [0x22]:          jne 38   
35 [0x23]: line: 53 movl 3   
36 [0x24]:          returnobj   
37 [0x25]:          ret   
38 [0x26]:          nop   
39 [0x27]:          iaddl 1, fp@2   
41 [0x29]:          jmp @2   
42 [0x2a]: line: 57 pushnull    
43 [0x2b]:          popobj2    
44 [0x2c]:          returnobj   
45 [0x2d]:          ret   


function: std.io#thread_group.find[2293] params(1) in file: lib\support\/0.2.9//io//thread_group.sharp:60:8: note:  
		    def find(id: var) : thread {
		       ^

0 [0x0]: line: 61 istorel 0, fp+2   
2 [0x2]:          ipushl #2   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          pushobj   
7 [0x7]:          call @3891 // <std#synced_list<std.io#thread>.size>   
8 [0x8]:          loadval ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          lt ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 42   
14 [0xe]: line: 62 movl 0   
15 [0xf]:          movn #0   
17 [0x11]:          pushobj   
18 [0x12]:          ipushl #2   
19 [0x13]:          call @3849 // <std#synced_list<std.io#thread>.operator[>   
20 [0x14]:          call @2270 // <std.io#thread.get_id>   
21 [0x15]:          loadval ebx   
22 [0x16]:          rstore ebx   
23 [0x17]:          loadl ebx, fp+1   
24 [0x18]:          loadval ecx   
25 [0x19]:          test ecx, ebx   
26 [0x1a]:          movr ebx, cmt   
27 [0x1b]:          movr cmt, ebx   
28 [0x1c]:          jne 38   
29 [0x1d]: line: 63 movl 0   
30 [0x1e]:          movn #0   
32 [0x20]:          pushobj   
33 [0x21]:          ipushl #2   
34 [0x22]:          call @3849 // <std#synced_list<std.io#thread>.operator[>   
35 [0x23]:          popobj2    
36 [0x24]:          returnobj   
37 [0x25]:          ret   
38 [0x26]:          nop   
39 [0x27]:          iaddl 1, fp@2   
41 [0x29]:          jmp @2   
42 [0x2a]: line: 67 pushnull    
43 [0x2b]:          popobj2    
44 [0x2c]:          returnobj   
45 [0x2d]:          ret   


function: std.io#thread_group.kill_all[2294] params(0) in file: lib\support\/0.2.9//io//thread_group.sharp:70:5: note:  
			def kill_all() {
		    ^

0 [0x0]: line: 71 istorel -1, fp+2   
2 [0x2]:          movl 0   
3 [0x3]:          movn #0   
5 [0x5]:          pushobj   
6 [0x6]:          invoke_delegate 13 { static=0, args=0 }   
8 [0x8]:          popl 3   
9 [0x9]:          iaddl 1, fp@2   
11 [0xb]:          movl 3   
12 [0xc]:          sizeof ecx   
13 [0xd]:          loadl ebx, fp+2   
14 [0xe]:          lt ebx, ecx   
15 [0xf]:          jne 22   
16 [0x10]:          movnd ebx   
17 [0x11]:          pushobj   
18 [0x12]:          popl 1   
19 [0x13]: line: 72 pushl 1   
20 [0x14]:          call @2260 // <std.io#thread.interrupt>   
21 [0x15]:          jmp @9   
22 [0x16]:          ret   


constructor: std.io#thread_group.thread_group[2295] params(0) in file: lib\support\/0.2.9//io//thread_group.sharp:3:13: note:  
		public class thread_group : loopable<thread> {
		            ^

0 [0x0]:         new_class @114 // std#synced_list<std.io#thread>   
2 [0x2]:         dup    
3 [0x3]:         call @3845 // <std#synced_list<std.io#thread>.synced_list>   
4 [0x4]:         movl 0   
5 [0x5]:         movn #0   
7 [0x7]:         popobj   
8 [0x8]:         movi #0, ebx   
10 [0xa]:         movl 0   
11 [0xb]:         movn #3   
13 [0xd]:         movi #0, adx   
15 [0xf]:         rmov adx, ebx   
16 [0x10]:         ret   


function: std.io#__srt_global._srt_thread_start[2296] params(0) in file: lib\support\/0.2.9//io//thread_kernel.sharp:5:4: note:  
		def _srt_thread_start() {
		   ^

0 [0x0]: line: 6 call @2380 // <platform.kernel#vm.current_thread>   
1 [0x1]:         popobj2    
2 [0x2]:         smovr_3 fp+0   
3 [0x3]: line: 8 movi #1, ebx   : protected asm start
5 [0x5]:         movi #0, egx   
7 [0x7]:         movi #0, adx   
9 [0x9]:         movl 0   
10 [0xa]:         movn #5   
12 [0xc]:         rmov adx, egx   
13 [0xd]:         movl 0   
14 [0xe]:         movn #8   
16 [0x10]:         rmov adx, ebx   : protected asm end
17 [0x11]: line: 21 istorel 1, fp+1   
19 [0x13]: line: 22 movl 0   : try start: try block start
20 [0x14]: line: 24 movn #11   
22 [0x16]: line: 25 movi #0, adx   
24 [0x18]:          iaload ebx, adx   
25 [0x19]:          rstore ebx   
26 [0x1a]:          call @2386 // <platform.kernel#vm.thread_args>   
27 [0x1b]:          smov ebx, sp+[-1]   
28 [0x1c]:          calld ebx   
29 [0x1d]:          swap    
30 [0x1e]:          pop   
31 [0x1f]:          ipopl 1   
32 [0x20]:          jmp @53   : try block end
33 [0x21]: line: 27 pushl 0   : catch(std#throwable)
34 [0x22]:          call @2281 // <std.io#thread.get_exception_handler>   
35 [0x23]:          pushnull    
36 [0x24]:          itest ebx   
37 [0x25]:          not ebx, ebx   
38 [0x26]:          movr cmt, ebx   
39 [0x27]:          jne 46   
40 [0x28]: line: 28 pushl 0   
41 [0x29]:          call @2281 // <std.io#thread.get_exception_handler>   
42 [0x2a]:          pushl 2   
43 [0x2b]:          invoke_delegate 2299 { static=0, args=1 }   
45 [0x2d]:          jmp @51   
46 [0x2e]: line: 30 pushl 0   
47 [0x2f]:          ipushl #1   
48 [0x30]:          call @2381 // <platform.kernel#vm.exit_thread>   
49 [0x31]: line: 31 pushl 2   
50 [0x32]:          throw    
51 [0x33]:          nop   
52 [0x34]:          jmp @53   
53 [0x35]:          nop   : try end
54 [0x36]: line: 35 pushl 0   
55 [0x37]:          ipushl #1   
56 [0x38]:          call @2381 // <platform.kernel#vm.exit_thread>   
57 [0x39]:          ret   


function: std.io#thread_result.at[2297] params(1) in file: lib\support\/0.2.9//io//thread_kernel.sharp:63:15: note:  
		    static def at(index: var) : thread_result {
		              ^

0 [0x0]: line: 64 ipushl #0   
1 [0x1]:          movg @40 // @std.io#thread_result   
2 [0x2]:          movn #16   
4 [0x4]:          pushobj   
5 [0x5]:          call @1950 // <std#_enum_.get_ordinal>   
6 [0x6]:          loadval ebx   
7 [0x7]:          loadval ecx   
8 [0x8]:          test ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          movr cmt, ebx   
11 [0xb]:          jne 31   
12 [0xc]: line: 65 movg @40 // @std.io#thread_result   
13 [0xd]:          movn #17   
15 [0xf]:          pushobj   
16 [0x10]:          movg @40 // @std.io#thread_result   
17 [0x11]:          movn #17   
19 [0x13]:          sizeof ebx   
20 [0x14]:          rstore ebx   
21 [0x15]:          movi #1, ebx   
23 [0x17]:          loadval ecx   
24 [0x18]:          sub ecx, ebx -> ebx   
25 [0x19]:          popobj2    
26 [0x1a]:          movr adx, ebx   
27 [0x1b]:          chklen adx   
28 [0x1c]:          movnd adx   
29 [0x1d]:          returnobj   
30 [0x1e]:          ret   
31 [0x1f]:          nop   
32 [0x20]: line: 67 movg @40 // @std.io#thread_result   
33 [0x21]:          movn #17   
35 [0x23]:          pushobj   
36 [0x24]:          loadl ebx, fp+0   
37 [0x25]:          popobj2    
38 [0x26]:          movr adx, ebx   
39 [0x27]:          chklen adx   
40 [0x28]:          movnd adx   
41 [0x29]:          returnobj   
42 [0x2a]:          ret   


constructor: std.io#thread_result.thread_result[2298] params(0) in file: lib\support\/0.2.9//io//thread_kernel.sharp:38:7: note:  
		mutate thread_result {
		      ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1952 // <std#_enum_._enum_>   
2 [0x2]:         ret   


std.io#uncaught_exception_handler.uncaught_exception[2299] params(1) in file: lib\support\/0.2.9//io//uncaught_exception_handler.sharp:4:8: note:  
		    def uncaught_exception(err: throwable);
		       ^



constructor: std.io#uncaught_exception_handler.uncaught_exception_handler[2300] params(0) in file: lib\support\/0.2.9//io//uncaught_exception_handler.sharp:3:10: note:  
		interface uncaught_exception_handler {
		         ^

0 [0x0]:         ret   


function: std.io#unix_fs.path_separator[2301] params(0) in file: lib\support\/0.2.9//io//unix_fs.sharp:12:8: note:  
		    def path_separator() : var {
		       ^

0 [0x0]: line: 13 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          return_val ebx   
7 [0x7]:          ret   


function: std.io#unix_fs.normalize[2302] params(1) in file: lib\support\/0.2.9//io//unix_fs.sharp:20:8: note:  
		    def normalize(pathname: string) : string {
		       ^

0 [0x0]: line: 21 pushl 1   
1 [0x1]:          call @3587 // <std#string.size>   
2 [0x2]:          ipopl 2   
3 [0x3]: line: 22 istorel 0, fp+3   
5 [0x5]: line: 23 istorel 0, fp+4   
7 [0x7]:          ipushl #4   
8 [0x8]:          loadl ebx, fp+2   
9 [0x9]:          loadval ecx   
10 [0xa]:          lt ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 283   
14 [0xe]: line: 25 pushl 1   
15 [0xf]:          ipushl #4   
16 [0x10]:          call @3569 // <std#string.operator[>   
17 [0x11]:          loadval ebx   
18 [0x12]:          rstore ebx   
19 [0x13]:          movi #92, ebx   
21 [0x15]:          loadval ecx   
22 [0x16]:          test ecx, ebx   
23 [0x17]:          movr ebx, cmt   
24 [0x18]:          movr cmt, ebx   
25 [0x19]:          jne 120   
26 [0x1a]: line: 26 ipushl #3   
27 [0x1b]:          movi #0, ebx   
29 [0x1d]:          loadval ecx   
30 [0x1e]:          gt ecx, ebx   
31 [0x1f]:          movr ebx, cmt   
32 [0x20]:          skne ebx // pc = 52   
33 [0x21]:          movl 0   
34 [0x22]:          movn #1   
36 [0x24]:          pushobj   
37 [0x25]:          ipushl #3   
38 [0x26]:          movi #1, ebx   
40 [0x28]:          loadval ecx   
41 [0x29]:          sub ecx, ebx -> ebx   
42 [0x2a]:          popobj2    
43 [0x2b]:          movr adx, ebx   
44 [0x2c]:          chklen adx   
45 [0x2d]:          iaload ebx, adx   
46 [0x2e]:          rstore ebx   
47 [0x2f]:          movi #47, ebx   
49 [0x31]:          loadval ecx   
50 [0x32]:          tne ecx, ebx   
51 [0x33]:          movr ebx, cmt   
52 [0x34]:          movr cmt, ebx   
53 [0x35]:          jne 70   
54 [0x36]: line: 27 istore 47   
56 [0x38]:          movl 0   
57 [0x39]:          movn #1   
59 [0x3b]:          pushobj   
60 [0x3c]:          loadl ebx, fp+3   
61 [0x3d]:          movr egx, ebx   
62 [0x3e]:          inc ebx   
63 [0x3f]:          smovr_2 ebx, fp+3   
64 [0x40]:          movr ebx, egx   
65 [0x41]:          popobj2    
66 [0x42]:          movr adx, ebx   
67 [0x43]:          chklen adx   
68 [0x44]:          loadval ebx   
69 [0x45]:          rmov adx, ebx   
70 [0x46]:          nop   
71 [0x47]: line: 29 ipushl #4   
72 [0x48]:          movi #1, ebx   
74 [0x4a]:          loadval ecx   
75 [0x4b]:          add ecx, ebx -> ebx   
76 [0x4c]:          rstore ebx   
77 [0x4d]:          loadl ebx, fp+2   
78 [0x4e]:          loadval ecx   
79 [0x4f]:          lt ecx, ebx   
80 [0x50]:          movr ebx, cmt   
81 [0x51]:          skne ebx // pc = 98   
82 [0x52]:          movl 1   
83 [0x53]:          pushobj   
84 [0x54]:          ipushl #4   
85 [0x55]:          movi #1, ebx   
87 [0x57]:          loadval ecx   
88 [0x58]:          add ecx, ebx -> ebx   
89 [0x59]:          rstore ebx   
90 [0x5a]:          call @3569 // <std#string.operator[>   
91 [0x5b]:          loadval ebx   
92 [0x5c]:          rstore ebx   
93 [0x5d]:          movi #92, ebx   
95 [0x5f]:          loadval ecx   
96 [0x60]:          test ecx, ebx   
97 [0x61]:          movr ebx, cmt   
98 [0x62]:          movr cmt, ebx   
99 [0x63]:          jne 118   
100 [0x64]: line: 30 iaddl 1, fp@4   
102 [0x66]: line: 31 pushl 1   
103 [0x67]:          ipushl #4   
104 [0x68]:          call @3569 // <std#string.operator[>   
105 [0x69]:          loadval ebx   
106 [0x6a]:          rstore ebx   
107 [0x6b]:          movi #92, ebx   
109 [0x6d]:          loadval ecx   
110 [0x6e]:          test ecx, ebx   
111 [0x6f]:          movr ebx, cmt   
112 [0x70]:          movr cmt, ebx   
113 [0x71]:          je 100   
114 [0x72]: line: 33 loadl ebx, fp+4   
115 [0x73]:          movr egx, ebx   
116 [0x74]:          dec ebx   
117 [0x75]:          smovr_2 ebx, fp+4   
118 [0x76]:          nop   
119 [0x77]:          jmp @279   
120 [0x78]:          pushl 1   
121 [0x79]:          ipushl #4   
122 [0x7a]:          call @3569 // <std#string.operator[>   
123 [0x7b]:          loadval ebx   
124 [0x7c]:          rstore ebx   
125 [0x7d]:          movi #47, ebx   
127 [0x7f]:          loadval ecx   
128 [0x80]:          test ecx, ebx   
129 [0x81]:          movr ebx, cmt   
130 [0x82]:          movr cmt, ebx   
131 [0x83]:          jne 262   
132 [0x84]: line: 37 ipushl #4   
133 [0x85]:          movi #1, ebx   
135 [0x87]:          loadval ecx   
136 [0x88]:          add ecx, ebx -> ebx   
137 [0x89]:          rstore ebx   
138 [0x8a]:          loadl ebx, fp+2   
139 [0x8b]:          loadval ecx   
140 [0x8c]:          lt ecx, ebx   
141 [0x8d]:          movr ebx, cmt   
142 [0x8e]:          skne ebx // pc = 159   
143 [0x8f]:          movl 1   
144 [0x90]:          pushobj   
145 [0x91]:          ipushl #4   
146 [0x92]:          movi #1, ebx   
148 [0x94]:          loadval ecx   
149 [0x95]:          add ecx, ebx -> ebx   
150 [0x96]:          rstore ebx   
151 [0x97]:          call @3569 // <std#string.operator[>   
152 [0x98]:          loadval ebx   
153 [0x99]:          rstore ebx   
154 [0x9a]:          movi #47, ebx   
156 [0x9c]:          loadval ecx   
157 [0x9d]:          test ecx, ebx   
158 [0x9e]:          movr ebx, cmt   
159 [0x9f]:          movr cmt, ebx   
160 [0xa0]:          jne 208   
161 [0xa1]: line: 38 iaddl 1, fp@4   
163 [0xa3]: line: 39 pushl 1   
164 [0xa4]:          ipushl #4   
165 [0xa5]:          call @3569 // <std#string.operator[>   
166 [0xa6]:          loadval ebx   
167 [0xa7]:          rstore ebx   
168 [0xa8]:          movi #47, ebx   
170 [0xaa]:          loadval ecx   
171 [0xab]:          test ecx, ebx   
172 [0xac]:          movr ebx, cmt   
173 [0xad]:          movr cmt, ebx   
174 [0xae]:          je 161   
175 [0xaf]: line: 42 ipushl #3   
176 [0xb0]:          movi #0, ebx   
178 [0xb2]:          loadval ecx   
179 [0xb3]:          gt ecx, ebx   
180 [0xb4]:          movr ebx, cmt   
181 [0xb5]:          skne ebx // pc = 201   
182 [0xb6]:          movl 0   
183 [0xb7]:          movn #1   
185 [0xb9]:          pushobj   
186 [0xba]:          ipushl #3   
187 [0xbb]:          movi #1, ebx   
189 [0xbd]:          loadval ecx   
190 [0xbe]:          sub ecx, ebx -> ebx   
191 [0xbf]:          popobj2    
192 [0xc0]:          movr adx, ebx   
193 [0xc1]:          chklen adx   
194 [0xc2]:          iaload ebx, adx   
195 [0xc3]:          rstore ebx   
196 [0xc4]:          movi #47, ebx   
198 [0xc6]:          loadval ecx   
199 [0xc7]:          tne ecx, ebx   
200 [0xc8]:          movr ebx, cmt   
201 [0xc9]:          movr cmt, ebx   
202 [0xca]:          jne 207   
203 [0xcb]: line: 43 loadl ebx, fp+4   
204 [0xcc]:          movr egx, ebx   
205 [0xcd]:          dec ebx   
206 [0xce]:          smovr_2 ebx, fp+4   
207 [0xcf]:          nop   
208 [0xd0]:          nop   
209 [0xd1]: line: 46 ipushl #3   
210 [0xd2]:          movi #0, ebx   
212 [0xd4]:          loadval ecx   
213 [0xd5]:          test ecx, ebx   
214 [0xd6]:          movr ebx, cmt   
215 [0xd7]:          skpe ebx // pc = 242   
216 [0xd8]:          ipushl #3   
217 [0xd9]:          movi #0, ebx   
219 [0xdb]:          loadval ecx   
220 [0xdc]:          gt ecx, ebx   
221 [0xdd]:          movr ebx, cmt   
222 [0xde]:          skne ebx // pc = 242   
223 [0xdf]:          movl 0   
224 [0xe0]:          movn #1   
226 [0xe2]:          pushobj   
227 [0xe3]:          ipushl #3   
228 [0xe4]:          movi #1, ebx   
230 [0xe6]:          loadval ecx   
231 [0xe7]:          sub ecx, ebx -> ebx   
232 [0xe8]:          popobj2    
233 [0xe9]:          movr adx, ebx   
234 [0xea]:          chklen adx   
235 [0xeb]:          iaload ebx, adx   
236 [0xec]:          rstore ebx   
237 [0xed]:          movi #47, ebx   
239 [0xef]:          loadval ecx   
240 [0xf0]:          tne ecx, ebx   
241 [0xf1]:          movr ebx, cmt   
242 [0xf2]:          movr cmt, ebx   
243 [0xf3]:          jne 260   
244 [0xf4]: line: 47 istore 47   
246 [0xf6]:          movl 0   
247 [0xf7]:          movn #1   
249 [0xf9]:          pushobj   
250 [0xfa]:          loadl ebx, fp+3   
251 [0xfb]:          movr egx, ebx   
252 [0xfc]:          inc ebx   
253 [0xfd]:          smovr_2 ebx, fp+3   
254 [0xfe]:          movr ebx, egx   
255 [0xff]:          popobj2    
256 [0x100]:          movr adx, ebx   
257 [0x101]:          chklen adx   
258 [0x102]:          loadval ebx   
259 [0x103]:          rmov adx, ebx   
260 [0x104]:          nop   
261 [0x105]:          jmp @279   
262 [0x106]: line: 50 pushl 1   
263 [0x107]:          ipushl #4   
264 [0x108]:          call @3569 // <std#string.operator[>   
265 [0x109]:          movl 0   
266 [0x10a]:          movn #1   
268 [0x10c]:          pushobj   
269 [0x10d]:          loadl ebx, fp+3   
270 [0x10e]:          movr egx, ebx   
271 [0x10f]:          inc ebx   
272 [0x110]:          smovr_2 ebx, fp+3   
273 [0x111]:          movr ebx, egx   
274 [0x112]:          popobj2    
275 [0x113]:          movr adx, ebx   
276 [0x114]:          chklen adx   
277 [0x115]:          loadval ebx   
278 [0x116]:          rmov adx, ebx   
279 [0x117]:          nop   
280 [0x118]:          iaddl 1, fp@4   
282 [0x11a]:          jmp @7   
283 [0x11b]: line: 53 new_class @75 // std#string   
285 [0x11d]:          dup    
286 [0x11e]:          movl 0   
287 [0x11f]:          movn #1   
289 [0x121]:          pushobj   
290 [0x122]:          istore 0   
292 [0x124]:          ipushl #3   
293 [0x125]:          call @3551 // <std#string.string>   
294 [0x126]:          popobj2    
295 [0x127]:          returnobj   
296 [0x128]:          ret   


function: std.io#unix_fs.get_attributes[2303] params(1) in file: lib\support\/0.2.9//io//unix_fs.sharp:61:9: note:  
		     def get_attributes(f: file) : var {
		        ^

0 [0x0]: line: 62 movl 1   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          call @3572 // <std#string.get_data>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+2   
7 [0x7]: line: 63 istorel 0, fp+3   
9 [0x9]: line: 69 pushl 2   : protected asm start
10 [0xa]:          int 0x25   
11 [0xb]:          smovr_2 ebx, fp+3   
12 [0xc]: line: 75 loadl ebx, fp+3   : protected asm end
13 [0xd]:          return_val ebx   
14 [0xe]:          ret   


function: std.io#unix_fs.check_access[2304] params(2) in file: lib\support\/0.2.9//io//unix_fs.sharp:85:9: note:  
		     def check_access(f: file, access: var) : var {
		        ^

0 [0x0]: line: 86 movl 1   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          call @3572 // <std#string.get_data>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+3   
7 [0x7]: line: 87 istorel 0, fp+4   
9 [0x9]: line: 93 pushl 3   : protected asm start
10 [0xa]:          loadl ebx, fp+2   
11 [0xb]:          int 0x24   
12 [0xc]:          smovr_2 ebx, fp+4   
13 [0xd]: line: 100 loadl ebx, fp+4   : protected asm end
14 [0xe]:           return_val ebx   
15 [0xf]:           ret   


constructor: std.io#unix_fs.unix_fs[2305] params(0) in file: lib\support\/0.2.9//io//unix_fs.sharp:8:16: note:  
		protected class unix_fs base file_system {
		               ^

0 [0x0]:         movi #47, ebx   
2 [0x2]:         movl 0   
3 [0x3]:         movn #0   
5 [0x5]:         mov8 ebx, ebx   
6 [0x6]:         movi #0, adx   
8 [0x8]:         rmov adx, ebx   
9 [0x9]:         movi #512, ebx   
11 [0xb]:         newarry ebx: 0   
12 [0xc]:         movl 0   
13 [0xd]:         movn #1   
15 [0xf]:         popobj   
16 [0x10]:         ret   


function: std.io#win_fs.path_separator[2306] params(0) in file: lib\support\/0.2.9//io//win_fs.sharp:15:8: note:  
		    def path_separator() : var {
		       ^

0 [0x0]: line: 16 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          return_val ebx   
7 [0x7]:          ret   


function: std.io#win_fs.normalize[2307] params(1) in file: lib\support\/0.2.9//io//win_fs.sharp:23:8: note:  
		    def normalize(pathname: string) : string {
		       ^

0 [0x0]: line: 24 pushl 1   
1 [0x1]:          call @3587 // <std#string.size>   
2 [0x2]:          ipopl 2   
3 [0x3]: line: 25 istorel 0, fp+3   
5 [0x5]: line: 26 istorel 0, fp+4   
7 [0x7]:          ipushl #4   
8 [0x8]:          loadl ebx, fp+2   
9 [0x9]:          loadval ecx   
10 [0xa]:          lt ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 276   
14 [0xe]: line: 28 pushl 1   
15 [0xf]:          ipushl #4   
16 [0x10]:          call @3569 // <std#string.operator[>   
17 [0x11]:          loadval ebx   
18 [0x12]:          rstore ebx   
19 [0x13]:          movi #47, ebx   
21 [0x15]:          loadval ecx   
22 [0x16]:          test ecx, ebx   
23 [0x17]:          movr ebx, cmt   
24 [0x18]:          movr cmt, ebx   
25 [0x19]:          jne 120   
26 [0x1a]: line: 29 ipushl #3   
27 [0x1b]:          movi #0, ebx   
29 [0x1d]:          loadval ecx   
30 [0x1e]:          gt ecx, ebx   
31 [0x1f]:          movr ebx, cmt   
32 [0x20]:          skne ebx // pc = 52   
33 [0x21]:          movl 0   
34 [0x22]:          movn #1   
36 [0x24]:          pushobj   
37 [0x25]:          ipushl #3   
38 [0x26]:          movi #1, ebx   
40 [0x28]:          loadval ecx   
41 [0x29]:          sub ecx, ebx -> ebx   
42 [0x2a]:          popobj2    
43 [0x2b]:          movr adx, ebx   
44 [0x2c]:          chklen adx   
45 [0x2d]:          iaload ebx, adx   
46 [0x2e]:          rstore ebx   
47 [0x2f]:          movi #92, ebx   
49 [0x31]:          loadval ecx   
50 [0x32]:          tne ecx, ebx   
51 [0x33]:          movr ebx, cmt   
52 [0x34]:          movr cmt, ebx   
53 [0x35]:          jne 70   
54 [0x36]: line: 30 istore 92   
56 [0x38]:          movl 0   
57 [0x39]:          movn #1   
59 [0x3b]:          pushobj   
60 [0x3c]:          loadl ebx, fp+3   
61 [0x3d]:          movr egx, ebx   
62 [0x3e]:          inc ebx   
63 [0x3f]:          smovr_2 ebx, fp+3   
64 [0x40]:          movr ebx, egx   
65 [0x41]:          popobj2    
66 [0x42]:          movr adx, ebx   
67 [0x43]:          chklen adx   
68 [0x44]:          loadval ebx   
69 [0x45]:          rmov adx, ebx   
70 [0x46]:          nop   
71 [0x47]: line: 32 ipushl #4   
72 [0x48]:          movi #1, ebx   
74 [0x4a]:          loadval ecx   
75 [0x4b]:          add ecx, ebx -> ebx   
76 [0x4c]:          rstore ebx   
77 [0x4d]:          loadl ebx, fp+2   
78 [0x4e]:          loadval ecx   
79 [0x4f]:          lt ecx, ebx   
80 [0x50]:          movr ebx, cmt   
81 [0x51]:          skne ebx // pc = 98   
82 [0x52]:          movl 1   
83 [0x53]:          pushobj   
84 [0x54]:          ipushl #4   
85 [0x55]:          movi #1, ebx   
87 [0x57]:          loadval ecx   
88 [0x58]:          add ecx, ebx -> ebx   
89 [0x59]:          rstore ebx   
90 [0x5a]:          call @3569 // <std#string.operator[>   
91 [0x5b]:          loadval ebx   
92 [0x5c]:          rstore ebx   
93 [0x5d]:          movi #47, ebx   
95 [0x5f]:          loadval ecx   
96 [0x60]:          test ecx, ebx   
97 [0x61]:          movr ebx, cmt   
98 [0x62]:          movr cmt, ebx   
99 [0x63]:          jne 118   
100 [0x64]: line: 33 iaddl 1, fp@4   
102 [0x66]: line: 34 pushl 1   
103 [0x67]:          ipushl #4   
104 [0x68]:          call @3569 // <std#string.operator[>   
105 [0x69]:          loadval ebx   
106 [0x6a]:          rstore ebx   
107 [0x6b]:          movi #47, ebx   
109 [0x6d]:          loadval ecx   
110 [0x6e]:          test ecx, ebx   
111 [0x6f]:          movr ebx, cmt   
112 [0x70]:          movr cmt, ebx   
113 [0x71]:          je 100   
114 [0x72]: line: 36 loadl ebx, fp+4   
115 [0x73]:          movr egx, ebx   
116 [0x74]:          dec ebx   
117 [0x75]:          smovr_2 ebx, fp+4   
118 [0x76]:          nop   
119 [0x77]:          jmp @272   
120 [0x78]:          pushl 1   
121 [0x79]:          ipushl #4   
122 [0x7a]:          call @3569 // <std#string.operator[>   
123 [0x7b]:          loadval ebx   
124 [0x7c]:          rstore ebx   
125 [0x7d]:          movi #92, ebx   
127 [0x7f]:          loadval ecx   
128 [0x80]:          test ecx, ebx   
129 [0x81]:          movr ebx, cmt   
130 [0x82]:          movr cmt, ebx   
131 [0x83]:          jne 255   
132 [0x84]: line: 40 ipushl #4   
133 [0x85]:          movi #1, ebx   
135 [0x87]:          loadval ecx   
136 [0x88]:          add ecx, ebx -> ebx   
137 [0x89]:          rstore ebx   
138 [0x8a]:          loadl ebx, fp+2   
139 [0x8b]:          loadval ecx   
140 [0x8c]:          lt ecx, ebx   
141 [0x8d]:          movr ebx, cmt   
142 [0x8e]:          skne ebx // pc = 159   
143 [0x8f]:          movl 1   
144 [0x90]:          pushobj   
145 [0x91]:          ipushl #4   
146 [0x92]:          movi #1, ebx   
148 [0x94]:          loadval ecx   
149 [0x95]:          add ecx, ebx -> ebx   
150 [0x96]:          rstore ebx   
151 [0x97]:          call @3569 // <std#string.operator[>   
152 [0x98]:          loadval ebx   
153 [0x99]:          rstore ebx   
154 [0x9a]:          movi #92, ebx   
156 [0x9c]:          loadval ecx   
157 [0x9d]:          test ecx, ebx   
158 [0x9e]:          movr ebx, cmt   
159 [0x9f]:          movr cmt, ebx   
160 [0xa0]:          jne 208   
161 [0xa1]: line: 41 iaddl 1, fp@4   
163 [0xa3]: line: 42 pushl 1   
164 [0xa4]:          ipushl #4   
165 [0xa5]:          call @3569 // <std#string.operator[>   
166 [0xa6]:          loadval ebx   
167 [0xa7]:          rstore ebx   
168 [0xa8]:          movi #92, ebx   
170 [0xaa]:          loadval ecx   
171 [0xab]:          test ecx, ebx   
172 [0xac]:          movr ebx, cmt   
173 [0xad]:          movr cmt, ebx   
174 [0xae]:          je 161   
175 [0xaf]: line: 45 ipushl #3   
176 [0xb0]:          movi #0, ebx   
178 [0xb2]:          loadval ecx   
179 [0xb3]:          gt ecx, ebx   
180 [0xb4]:          movr ebx, cmt   
181 [0xb5]:          skne ebx // pc = 201   
182 [0xb6]:          movl 0   
183 [0xb7]:          movn #1   
185 [0xb9]:          pushobj   
186 [0xba]:          ipushl #3   
187 [0xbb]:          movi #1, ebx   
189 [0xbd]:          loadval ecx   
190 [0xbe]:          sub ecx, ebx -> ebx   
191 [0xbf]:          popobj2    
192 [0xc0]:          movr adx, ebx   
193 [0xc1]:          chklen adx   
194 [0xc2]:          iaload ebx, adx   
195 [0xc3]:          rstore ebx   
196 [0xc4]:          movi #92, ebx   
198 [0xc6]:          loadval ecx   
199 [0xc7]:          tne ecx, ebx   
200 [0xc8]:          movr ebx, cmt   
201 [0xc9]:          movr cmt, ebx   
202 [0xca]:          jne 207   
203 [0xcb]: line: 46 loadl ebx, fp+4   
204 [0xcc]:          movr egx, ebx   
205 [0xcd]:          dec ebx   
206 [0xce]:          smovr_2 ebx, fp+4   
207 [0xcf]:          nop   
208 [0xd0]:          nop   
209 [0xd1]: line: 49 ipushl #3   
210 [0xd2]:          movi #0, ebx   
212 [0xd4]:          loadval ecx   
213 [0xd5]:          gt ecx, ebx   
214 [0xd6]:          movr ebx, cmt   
215 [0xd7]:          skne ebx // pc = 235   
216 [0xd8]:          movl 0   
217 [0xd9]:          movn #1   
219 [0xdb]:          pushobj   
220 [0xdc]:          ipushl #3   
221 [0xdd]:          movi #1, ebx   
223 [0xdf]:          loadval ecx   
224 [0xe0]:          sub ecx, ebx -> ebx   
225 [0xe1]:          popobj2    
226 [0xe2]:          movr adx, ebx   
227 [0xe3]:          chklen adx   
228 [0xe4]:          iaload ebx, adx   
229 [0xe5]:          rstore ebx   
230 [0xe6]:          movi #92, ebx   
232 [0xe8]:          loadval ecx   
233 [0xe9]:          tne ecx, ebx   
234 [0xea]:          movr ebx, cmt   
235 [0xeb]:          movr cmt, ebx   
236 [0xec]:          jne 253   
237 [0xed]: line: 50 istore 92   
239 [0xef]:          movl 0   
240 [0xf0]:          movn #1   
242 [0xf2]:          pushobj   
243 [0xf3]:          loadl ebx, fp+3   
244 [0xf4]:          movr egx, ebx   
245 [0xf5]:          inc ebx   
246 [0xf6]:          smovr_2 ebx, fp+3   
247 [0xf7]:          movr ebx, egx   
248 [0xf8]:          popobj2    
249 [0xf9]:          movr adx, ebx   
250 [0xfa]:          chklen adx   
251 [0xfb]:          loadval ebx   
252 [0xfc]:          rmov adx, ebx   
253 [0xfd]:          nop   
254 [0xfe]:          jmp @272   
255 [0xff]: line: 53 pushl 1   
256 [0x100]:          ipushl #4   
257 [0x101]:          call @3569 // <std#string.operator[>   
258 [0x102]:          movl 0   
259 [0x103]:          movn #1   
261 [0x105]:          pushobj   
262 [0x106]:          loadl ebx, fp+3   
263 [0x107]:          movr egx, ebx   
264 [0x108]:          inc ebx   
265 [0x109]:          smovr_2 ebx, fp+3   
266 [0x10a]:          movr ebx, egx   
267 [0x10b]:          popobj2    
268 [0x10c]:          movr adx, ebx   
269 [0x10d]:          chklen adx   
270 [0x10e]:          loadval ebx   
271 [0x10f]:          rmov adx, ebx   
272 [0x110]:          nop   
273 [0x111]:          iaddl 1, fp@4   
275 [0x113]:          jmp @7   
276 [0x114]: line: 56 new_class @75 // std#string   
278 [0x116]:          dup    
279 [0x117]:          movl 0   
280 [0x118]:          movn #1   
282 [0x11a]:          pushobj   
283 [0x11b]:          istore 0   
285 [0x11d]:          ipushl #3   
286 [0x11e]:          call @3551 // <std#string.string>   
287 [0x11f]:          popobj2    
288 [0x120]:          returnobj   
289 [0x121]:          ret   


function: std.io#win_fs.get_attributes[2308] params(1) in file: lib\support\/0.2.9//io//win_fs.sharp:64:9: note:  
		     def get_attributes(f: file) : var {
		        ^

0 [0x0]: line: 65 movl 1   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          call @3572 // <std#string.get_data>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+2   
7 [0x7]: line: 66 istorel 0, fp+3   
9 [0x9]: line: 72 pushl 2   : protected asm start
10 [0xa]:          int 0x25   
11 [0xb]:          smovr_2 ebx, fp+3   
12 [0xc]: line: 78 loadl ebx, fp+3   : protected asm end
13 [0xd]:          return_val ebx   
14 [0xe]:          ret   


function: std.io#win_fs.check_access[2309] params(2) in file: lib\support\/0.2.9//io//win_fs.sharp:88:9: note:  
		     def check_access(f: file, access: var) : var {
		        ^

0 [0x0]: line: 89 movl 1   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          call @3572 // <std#string.get_data>   
5 [0x5]:          popobj2    
6 [0x6]:          smovr_3 fp+3   
7 [0x7]: line: 90 istorel 0, fp+4   
9 [0x9]: line: 93 ipushl #2   
10 [0xa]:          ldc ebx // 1   
11 [0xb]:          loadval ecx   
12 [0xc]:          test ecx, ebx   
13 [0xd]:          movr ebx, cmt   
14 [0xe]:          movr cmt, ebx   
15 [0xf]:          jne 19   
16 [0x10]: line: 94 istorel -1, fp+0   
18 [0x12]:          ret   
19 [0x13]:          nop   
20 [0x14]: line: 100 pushl 3   : protected asm start
21 [0x15]:           loadl ebx, fp+2   
22 [0x16]:           int 0x24   
23 [0x17]:           smovr_2 ebx, fp+4   
24 [0x18]: line: 107 loadl ebx, fp+4   : protected asm end
25 [0x19]:           return_val ebx   
26 [0x1a]:           ret   


constructor: std.io#win_fs.win_fs[2310] params(0) in file: lib\support\/0.2.9//io//win_fs.sharp:11:16: note:  
		protected class win_fs base file_system {
		               ^

0 [0x0]:         movi #92, ebx   
2 [0x2]:         movl 0   
3 [0x3]:         movn #0   
5 [0x5]:         mov8 ebx, ebx   
6 [0x6]:         movi #0, adx   
8 [0x8]:         rmov adx, ebx   
9 [0x9]:         movi #512, ebx   
11 [0xb]:         newarry ebx: 0   
12 [0xc]:         movl 0   
13 [0xd]:         movn #1   
15 [0xf]:         popobj   
16 [0x10]:         ret   


function: std.math#__srt_global.is_nan[2311] params(1) in file: lib\support\/0.2.9//math//math.sharp:44:18: note:  
		public static def is_nan(v: var): var {
		                 ^

0 [0x0]: line: 45 ipushl #0   
1 [0x1]:          loadl ebx, fp+0   
2 [0x2]:          loadval ecx   
3 [0x3]:          tne ecx, ebx   
4 [0x4]:          return_val cmt   
5 [0x5]:          ret   


function: std.math#__srt_global.is_infinite[2312] params(1) in file: lib\support\/0.2.9//math//math.sharp:56:18: note:  
		public static def is_infinite(v: var): var {
		                 ^

0 [0x0]: line: 57 ipushl #0   
1 [0x1]:          ldc ebx // inf   
2 [0x2]:          loadval ecx   
3 [0x3]:          test ecx, ebx   
4 [0x4]:          movr ebx, cmt   
5 [0x5]:          skpe ebx // pc = 11   
6 [0x6]:          ipushl #0   
7 [0x7]:          movi #-2147483648, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          return_val cmt   
12 [0xc]:          ret   


function: std.math#__srt_global.sin[2313] params(1) in file: lib\support\/0.2.9//math//math.sharp:60:4: note:  
		def sin(num: var) : var {
		   ^

0 [0x0]: line: 61 ipushl #0   
1 [0x1]:          istore 0   
3 [0x3]:          call @2335 // <std.math#__srt_global.math_proc>   
4 [0x4]:          loadval ebx   
5 [0x5]:          return_val ebx   
6 [0x6]:          ret   


function: std.math#__srt_global.cos[2314] params(1) in file: lib\support\/0.2.9//math//math.sharp:64:4: note:  
		def cos(num: var) : var {
		   ^

0 [0x0]: line: 65 ipushl #0   
1 [0x1]:          istore 1   
3 [0x3]:          call @2335 // <std.math#__srt_global.math_proc>   
4 [0x4]:          loadval ebx   
5 [0x5]:          return_val ebx   
6 [0x6]:          ret   


function: std.math#__srt_global.tan[2315] params(1) in file: lib\support\/0.2.9//math//math.sharp:68:4: note:  
		def tan(num: var) : var {
		   ^

0 [0x0]: line: 69 ipushl #0   
1 [0x1]:          istore 2   
3 [0x3]:          call @2335 // <std.math#__srt_global.math_proc>   
4 [0x4]:          loadval ebx   
5 [0x5]:          return_val ebx   
6 [0x6]:          ret   


function: std.math#__srt_global.sinh[2316] params(1) in file: lib\support\/0.2.9//math//math.sharp:72:4: note:  
		def sinh(num: var) : var {
		   ^

0 [0x0]: line: 73 ipushl #0   
1 [0x1]:          istore 3   
3 [0x3]:          call @2335 // <std.math#__srt_global.math_proc>   
4 [0x4]:          loadval ebx   
5 [0x5]:          return_val ebx   
6 [0x6]:          ret   


function: std.math#__srt_global.cosh[2317] params(1) in file: lib\support\/0.2.9//math//math.sharp:76:4: note:  
		def cosh(num: var) : var {
		   ^

0 [0x0]: line: 77 ipushl #0   
1 [0x1]:          istore 4   
3 [0x3]:          call @2335 // <std.math#__srt_global.math_proc>   
4 [0x4]:          loadval ebx   
5 [0x5]:          return_val ebx   
6 [0x6]:          ret   


function: std.math#__srt_global.tanh[2318] params(1) in file: lib\support\/0.2.9//math//math.sharp:80:4: note:  
		def tanh(num: var) : var {
		   ^

0 [0x0]: line: 81 ipushl #0   
1 [0x1]:          istore 5   
3 [0x3]:          call @2335 // <std.math#__srt_global.math_proc>   
4 [0x4]:          loadval ebx   
5 [0x5]:          return_val ebx   
6 [0x6]:          ret   


function: std.math#__srt_global.asin[2319] params(1) in file: lib\support\/0.2.9//math//math.sharp:84:4: note:  
		def asin(num: var) : var {
		   ^

0 [0x0]: line: 85 ipushl #0   
1 [0x1]:          istore 6   
3 [0x3]:          call @2335 // <std.math#__srt_global.math_proc>   
4 [0x4]:          loadval ebx   
5 [0x5]:          return_val ebx   
6 [0x6]:          ret   


function: std.math#__srt_global.acos[2320] params(1) in file: lib\support\/0.2.9//math//math.sharp:88:4: note:  
		def acos(num: var) : var {
		   ^

0 [0x0]: line: 89 ipushl #0   
1 [0x1]:          istore 7   
3 [0x3]:          call @2335 // <std.math#__srt_global.math_proc>   
4 [0x4]:          loadval ebx   
5 [0x5]:          return_val ebx   
6 [0x6]:          ret   


function: std.math#__srt_global.atan[2321] params(1) in file: lib\support\/0.2.9//math//math.sharp:92:4: note:  
		def atan(num: var) : var {
		   ^

0 [0x0]: line: 93 ipushl #0   
1 [0x1]:          istore 8   
3 [0x3]:          call @2335 // <std.math#__srt_global.math_proc>   
4 [0x4]:          loadval ebx   
5 [0x5]:          return_val ebx   
6 [0x6]:          ret   


function: std.math#__srt_global.atan[2322] params(2) in file: lib\support\/0.2.9//math//math.sharp:96:4: note:  
		def atan(num1: var, num2: var) : var {
		   ^

0 [0x0]: line: 97 ipushl #0   
1 [0x1]:          ipushl #1   
2 [0x2]:          istore 9   
4 [0x4]:          call @2336 // <std.math#__srt_global.math_proc>   
5 [0x5]:          loadval ebx   
6 [0x6]:          return_val ebx   
7 [0x7]:          ret   


function: std.math#__srt_global.exp[2323] params(1) in file: lib\support\/0.2.9//math//math.sharp:100:4: note:  
		def exp(num: var) : var {
		   ^

0 [0x0]: line: 101 ipushl #0   
1 [0x1]:           istore 10   
3 [0x3]:           call @2335 // <std.math#__srt_global.math_proc>   
4 [0x4]:           loadval ebx   
5 [0x5]:           return_val ebx   
6 [0x6]:           ret   


function: std.math#__srt_global.log[2324] params(1) in file: lib\support\/0.2.9//math//math.sharp:104:4: note:  
		def log(num: var) : var {
		   ^

0 [0x0]: line: 105 ipushl #0   
1 [0x1]:           istore 11   
3 [0x3]:           call @2335 // <std.math#__srt_global.math_proc>   
4 [0x4]:           loadval ebx   
5 [0x5]:           return_val ebx   
6 [0x6]:           ret   


function: std.math#__srt_global.log10[2325] params(1) in file: lib\support\/0.2.9//math//math.sharp:108:4: note:  
		def log10(num: var) : var {
		   ^

0 [0x0]: line: 109 ipushl #0   
1 [0x1]:           istore 12   
3 [0x3]:           call @2335 // <std.math#__srt_global.math_proc>   
4 [0x4]:           loadval ebx   
5 [0x5]:           return_val ebx   
6 [0x6]:           ret   


function: std.math#__srt_global.pow[2326] params(2) in file: lib\support\/0.2.9//math//math.sharp:112:4: note:  
		def pow(num: var, exp: var) : var {
		   ^

0 [0x0]: line: 113 ipushl #0   
1 [0x1]:           ipushl #1   
2 [0x2]:           istore 13   
4 [0x4]:           call @2336 // <std.math#__srt_global.math_proc>   
5 [0x5]:           loadval ebx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.math#__srt_global.sqrt[2327] params(1) in file: lib\support\/0.2.9//math//math.sharp:116:4: note:  
		def sqrt(num: var) : var {
		   ^

0 [0x0]: line: 117 ipushl #0   
1 [0x1]:           istore 14   
3 [0x3]:           call @2335 // <std.math#__srt_global.math_proc>   
4 [0x4]:           loadval ebx   
5 [0x5]:           return_val ebx   
6 [0x6]:           ret   


function: std.math#__srt_global.ceil[2328] params(1) in file: lib\support\/0.2.9//math//math.sharp:120:4: note:  
		def ceil(num: var) : var {
		   ^

0 [0x0]: line: 121 ipushl #0   
1 [0x1]:           istore 15   
3 [0x3]:           call @2335 // <std.math#__srt_global.math_proc>   
4 [0x4]:           loadval ebx   
5 [0x5]:           return_val ebx   
6 [0x6]:           ret   


function: std.math#__srt_global.floor[2329] params(1) in file: lib\support\/0.2.9//math//math.sharp:124:4: note:  
		def floor(num: var) : var {
		   ^

0 [0x0]: line: 125 ipushl #0   
1 [0x1]:           istore 16   
3 [0x3]:           call @2335 // <std.math#__srt_global.math_proc>   
4 [0x4]:           loadval ebx   
5 [0x5]:           return_val ebx   
6 [0x6]:           ret   


function: std.math#__srt_global.abs[2330] params(1) in file: lib\support\/0.2.9//math//math.sharp:128:4: note:  
		def abs(num: var) : var {
		   ^

0 [0x0]: line: 129 ipushl #0   
1 [0x1]:           call @2331 // <std.math#__srt_global.fabs>   
2 [0x2]:           loadval ebx   
3 [0x3]:           return_val ebx   
4 [0x4]:           ret   


function: std.math#__srt_global.fabs[2331] params(1) in file: lib\support\/0.2.9//math//math.sharp:132:12: note:  
		private def fabs(num: var) : var {
		           ^

0 [0x0]: line: 133 ipushl #0   
1 [0x1]:           istore 17   
3 [0x3]:           call @2335 // <std.math#__srt_global.math_proc>   
4 [0x4]:           loadval ebx   
5 [0x5]:           return_val ebx   
6 [0x6]:           ret   


function: std.math#__srt_global.ldexp[2332] params(2) in file: lib\support\/0.2.9//math//math.sharp:136:4: note:  
		def ldexp(num: var, num2: var) : var {
		   ^

0 [0x0]: line: 137 ipushl #0   
1 [0x1]:           ipushl #1   
2 [0x2]:           istore 18   
4 [0x4]:           call @2336 // <std.math#__srt_global.math_proc>   
5 [0x5]:           loadval ebx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.math#__srt_global.fmod[2333] params(2) in file: lib\support\/0.2.9//math//math.sharp:140:4: note:  
		def fmod(num: var, num2: var) : var {
		   ^

0 [0x0]: line: 141 ipushl #0   
1 [0x1]:           ipushl #1   
2 [0x2]:           istore 19   
4 [0x4]:           call @2336 // <std.math#__srt_global.math_proc>   
5 [0x5]:           loadval ebx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std.math#__srt_global.round[2334] params(1) in file: lib\support\/0.2.9//math//math.sharp:144:4: note:  
		def round(num: var) : var {
		   ^

0 [0x0]: line: 145 loadl ebx, fp+0   
1 [0x1]:           mov64 ebx, ebx   
2 [0x2]:           mov64 ebx, ebx   
3 [0x3]:           smovr_2 ebx, fp+1   
4 [0x4]: line: 146 loadl ebx, fp+1   
5 [0x5]:           subl ebx, fp@0   
6 [0x6]: line: 148 ipushl #0   
7 [0x7]:           ldc ebx // 0.5   
8 [0x8]:           loadval ecx   
9 [0x9]:           gte ecx, ebx   
10 [0xa]:           movr ebx, cmt   
11 [0xb]:           movr cmt, ebx   
12 [0xc]:           jne 21   
13 [0xd]:           ipushl #1   
14 [0xe]:           movi #1, ebx   
16 [0x10]:           loadval ecx   
17 [0x11]:           add ecx, ebx -> ebx   
18 [0x12]:           return_val ebx   
19 [0x13]:           ret   
20 [0x14]:           jmp @24   
21 [0x15]: line: 149 loadl ebx, fp+1   
22 [0x16]:           return_val ebx   
23 [0x17]:           ret   
24 [0x18]:           nop   


function: std.math#__srt_global.math_proc[2335] params(2) in file: lib\support\/0.2.9//math//math.sharp:152:10: note:  
		local def math_proc(num: var, proc: var) : var {
		         ^

0 [0x0]: line: 153 loadl ebx, fp+0   : protected asm start
1 [0x1]:           loadl ecx, fp+1   
2 [0x2]:           int 0x18   
3 [0x3]:           return_val cmt   
4 [0x4]:           ret   
5 [0x5]: line: 161 istorel 0, fp+0   : protected asm end
7 [0x7]:           ret   


function: std.math#__srt_global.math_proc[2336] params(3) in file: lib\support\/0.2.9//math//math.sharp:164:10: note:  
		local def math_proc(num:var, num2: var, proc: var) : var {
		         ^

0 [0x0]: line: 165 loadl ebx, fp+0   : protected asm start
1 [0x1]:           loadl egx, fp+1   
2 [0x2]:           loadl ecx, fp+2   
3 [0x3]:           int 0x18   
4 [0x4]:           return_val cmt   
5 [0x5]:           ret   
6 [0x6]: line: 174 istorel 0, fp+0   : protected asm end
8 [0x8]:           ret   


function: std#_nil_.to_string[2337] params(0) in file: lib\support\/0.2.9//nil.sharp:14:15: note:  
		    public def to_string() := new string("nil");
		              ^

0 [0x0]: line: 14 new_class @75 // std#string   
2 [0x2]:          dup    
3 [0x3]:          newstr @1 // nil   
4 [0x4]:          call @3546 // <std#string.string>   
5 [0x5]:          popobj2    
6 [0x6]:          returnobj   
7 [0x7]:          ret   


constructor: std#_nil_._nil_[2338] params(0) in file: lib\support\/0.2.9//nil.sharp:10:13: note:  
		stable class _nil_ {
		            ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


function: std#_object_.to_string[2339] params(0) in file: lib\support\/0.2.9//object.sharp:13:15: note:  
		    public def to_string() := new string();
		              ^

0 [0x0]: line: 13 new_class @75 // std#string   
2 [0x2]:          dup    
3 [0x3]:          call @3604 // <std#string.string>   
4 [0x4]:          popobj2    
5 [0x5]:          returnobj   
6 [0x6]:          ret   


function: std#_object_.wait[2340] params(0) in file: lib\support\/0.2.9//object.sharp:15:8: note:  
		    def wait() {
		       ^

0 [0x0]: line: 16 pushl 0   : protected asm start
1 [0x1]:          int 0x3c   
2 [0x2]:          ret   : protected asm end


function: std#_object_.notify[2341] params(0) in file: lib\support\/0.2.9//object.sharp:22:8: note:  
		    def notify() {
		       ^

0 [0x0]: line: 23 pushl 0   : protected asm start
1 [0x1]:          int 0x3d   
2 [0x2]:          ret   : protected asm end


function: std#_object_.notify[2342] params(1) in file: lib\support\/0.2.9//object.sharp:29:8: note:  
		    def notify(mills: var) {
		       ^

0 [0x0]: line: 30 pushl 0   : protected asm start
1 [0x1]:          loadl ebx, fp+1   
2 [0x2]:          int 0x3e   
3 [0x3]:          ret   : protected asm end


function: std#_object_._lock[2343] params(0) in file: lib\support\/0.2.9//object.sharp:37:8: note:  
		    def _lock() {
		       ^

0 [0x0]: line: 38 movl 0   : protected asm start
1 [0x1]:          _lck    
2 [0x2]:          ret   : protected asm end


function: std#_object_._unlock[2344] params(0) in file: lib\support\/0.2.9//object.sharp:44:8: note:  
		    def _unlock() {
		       ^

0 [0x0]: line: 45 movl 0   : protected asm start
1 [0x1]:          _ulck   
2 [0x2]:          ret   : protected asm end


function: std#_object_.hash[2345] params(0) in file: lib\support\/0.2.9//object.sharp:51:8: note:  
		    def hash() : _int64 {
		       ^

0 [0x0]: line: 53 istorel 0, fp+0   
2 [0x2]:          ret   


function: std#_object_.guid[2346] params(0) in file: lib\support\/0.2.9//object.sharp:56:8: note:  
		    def guid() : _int64 {
		       ^

0 [0x0]: line: 58 movg @0 // @std#__srt_global   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          movr egx, ebx   
7 [0x7]:          inc ebx   
8 [0x8]:          movi #0, adx   
10 [0xa]:          rmov adx, ebx   
11 [0xb]:          movr ebx, egx   
12 [0xc]:          return_val ebx   
13 [0xd]:          ret   


constructor: std#_object_._object_[2347] params(0) in file: lib\support\/0.2.9//object.sharp:11:13: note:  
		stable class _object_ : printable, unique {
		            ^

0 [0x0]:         ret   


function: platform#build.is_windows[2348] params(0) in file: lib\support\/0.2.9//platform//build.sharp:9:15: note:  
		    static def is_windows() : var {
		              ^

0 [0x0]: line: 10 movg @48 // @platform#build   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          newstr @86 // win   
5 [0x5]:          call @3563 // <std#string.operator==>   
6 [0x6]:          loadval ebx   
7 [0x7]:          return_val ebx   
8 [0x8]:          ret   


function: platform#build.is_linux[2349] params(0) in file: lib\support\/0.2.9//platform//build.sharp:13:15: note:  
		    static def is_linux() : var {
		              ^

0 [0x0]: line: 14 movg @48 // @platform#build   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          newstr @87 // posix   
5 [0x5]:          call @3563 // <std#string.operator==>   
6 [0x6]:          loadval ebx   
7 [0x7]:          return_val ebx   
8 [0x8]:          ret   


constructor: platform#build.build[2350] params(0) in file: lib\support\/0.2.9//platform//build.sharp:3:6: note:  
		class build {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


function: platform#__srt_global.load_library[2351] params(1) in file: lib\support\/0.2.9//platform//dl.sharp:5:4: note:  
		def load_library(name: string) {
		   ^

0 [0x0]: line: 6 pushl 0   
1 [0x1]:         call @2358 // <platform.kernel#platform.load_library>   
2 [0x2]:         ret   


function: platform#__srt_global.free_library[2352] params(1) in file: lib\support\/0.2.9//platform//dl.sharp:9:4: note:  
		def free_library(name: string): var {
		   ^

0 [0x0]: line: 10 pushl 0   
1 [0x1]:          call @2359 // <platform.kernel#platform.free_library>   
2 [0x2]:          loadval ebx   
3 [0x3]:          return_val ebx   
4 [0x4]:          ret   


function: platform#__srt_global.link[2353] params(2) in file: lib\support\/0.2.9//platform//dl.sharp:13:4: note:  
		def link(name: string, library: string): var {
		   ^

0 [0x0]: line: 14 pushl 0   
1 [0x1]:          pushl 1   
2 [0x2]:          call @2360 // <platform.kernel#platform.link_func>   
3 [0x3]:          loadval ebx   
4 [0x4]:          return_val ebx   
5 [0x5]:          ret   


function: platform.kernel#platform.tls_init[2354] params(0) in file: lib\support\/0.2.9//platform//kernel//platform.sharp:13:15: note:  
		    static def tls_init() {}
		              ^

0 [0x0]: line: 13 ret   


function: platform.kernel#platform.static_init[2355] params(0) in file: lib\support\/0.2.9//platform//kernel//platform.sharp:14:23: note:  
		    private static def static_init() {}
		                      ^

0 [0x0]: line: 14 new_class @24 // std.io#buffer_type   
2 [0x2]:          movg @24 // @std.io#buffer_type   
3 [0x3]:          movn #0   
5 [0x5]:          popobj   
6 [0x6]:          newstr @309 // EXCLUSIVE   
7 [0x7]:          movg @24 // @std.io#buffer_type   
8 [0x8]:          movn #0   
10 [0xa]:          movn #0   
12 [0xc]:          popobj   
13 [0xd]:          movi #33176, ebx   
15 [0xf]:          movg @24 // @std.io#buffer_type   
16 [0x10]:          movn #0   
18 [0x12]:          movn #1   
20 [0x14]:          movi #0, adx   
22 [0x16]:          rmov adx, ebx   
23 [0x17]:          new_class @24 // std.io#buffer_type   
25 [0x19]:          movg @24 // @std.io#buffer_type   
26 [0x1a]:          movn #1   
28 [0x1c]:          popobj   
29 [0x1d]:          newstr @310 // SINGLE   
30 [0x1e]:          movg @24 // @std.io#buffer_type   
31 [0x1f]:          movn #1   
33 [0x21]:          movn #0   
35 [0x23]:          popobj   
36 [0x24]:          movi #33177, ebx   
38 [0x26]:          movg @24 // @std.io#buffer_type   
39 [0x27]:          movn #1   
41 [0x29]:          movn #1   
43 [0x2b]:          movi #0, adx   
45 [0x2d]:          rmov adx, ebx   
46 [0x2e]:          new_class @24 // std.io#buffer_type   
48 [0x30]:          movg @24 // @std.io#buffer_type   
49 [0x31]:          movn #2   
51 [0x33]:          popobj   
52 [0x34]:          newstr @311 // UNLIMITED   
53 [0x35]:          movg @24 // @std.io#buffer_type   
54 [0x36]:          movn #2   
56 [0x38]:          movn #0   
58 [0x3a]:          popobj   
59 [0x3b]:          movi #33178, ebx   
61 [0x3d]:          movg @24 // @std.io#buffer_type   
62 [0x3e]:          movn #2   
64 [0x40]:          movn #1   
66 [0x42]:          movi #0, adx   
68 [0x44]:          rmov adx, ebx   
69 [0x45]:          new_class @24 // std.io#buffer_type   
71 [0x47]:          movg @24 // @std.io#buffer_type   
72 [0x48]:          movn #3   
74 [0x4a]:          popobj   
75 [0x4b]:          newstr @312 // BUFFERED   
76 [0x4c]:          movg @24 // @std.io#buffer_type   
77 [0x4d]:          movn #3   
79 [0x4f]:          movn #0   
81 [0x51]:          popobj   
82 [0x52]:          movi #33179, ebx   
84 [0x54]:          movg @24 // @std.io#buffer_type   
85 [0x55]:          movn #3   
87 [0x57]:          movn #1   
89 [0x59]:          movi #0, adx   
91 [0x5b]:          rmov adx, ebx   
92 [0x5c]:          new_class @27 // std.io.fiber#fiber_state   
94 [0x5e]:          movg @27 // @std.io.fiber#fiber_state   
95 [0x5f]:          movn #0   
97 [0x61]:          popobj   
98 [0x62]:          newstr @313 // FIB_CREATED   
99 [0x63]:          movg @27 // @std.io.fiber#fiber_state   
100 [0x64]:          movn #0   
102 [0x66]:          movn #0   
104 [0x68]:          popobj   
105 [0x69]:          movi #33177, ebx   
107 [0x6b]:          movg @27 // @std.io.fiber#fiber_state   
108 [0x6c]:          movn #0   
110 [0x6e]:          movn #1   
112 [0x70]:          movi #0, adx   
114 [0x72]:          rmov adx, ebx   
115 [0x73]:          new_class @27 // std.io.fiber#fiber_state   
117 [0x75]:          movg @27 // @std.io.fiber#fiber_state   
118 [0x76]:          movn #1   
120 [0x78]:          popobj   
121 [0x79]:          newstr @314 // FIB_RUNNING   
122 [0x7a]:          movg @27 // @std.io.fiber#fiber_state   
123 [0x7b]:          movn #1   
125 [0x7d]:          movn #0   
127 [0x7f]:          popobj   
128 [0x80]:          movi #33178, ebx   
130 [0x82]:          movg @27 // @std.io.fiber#fiber_state   
131 [0x83]:          movn #1   
133 [0x85]:          movn #1   
135 [0x87]:          movi #0, adx   
137 [0x89]:          rmov adx, ebx   
138 [0x8a]:          new_class @27 // std.io.fiber#fiber_state   
140 [0x8c]:          movg @27 // @std.io.fiber#fiber_state   
141 [0x8d]:          movn #2   
143 [0x8f]:          popobj   
144 [0x90]:          newstr @315 // FIB_SUSPENDED   
145 [0x91]:          movg @27 // @std.io.fiber#fiber_state   
146 [0x92]:          movn #2   
148 [0x94]:          movn #0   
150 [0x96]:          popobj   
151 [0x97]:          movi #33179, ebx   
153 [0x99]:          movg @27 // @std.io.fiber#fiber_state   
154 [0x9a]:          movn #2   
156 [0x9c]:          movn #1   
158 [0x9e]:          movi #0, adx   
160 [0xa0]:          rmov adx, ebx   
161 [0xa1]:          new_class @27 // std.io.fiber#fiber_state   
163 [0xa3]:          movg @27 // @std.io.fiber#fiber_state   
164 [0xa4]:          movn #3   
166 [0xa6]:          popobj   
167 [0xa7]:          newstr @316 // FIB_KILLED   
168 [0xa8]:          movg @27 // @std.io.fiber#fiber_state   
169 [0xa9]:          movn #3   
171 [0xab]:          movn #0   
173 [0xad]:          popobj   
174 [0xae]:          movi #33180, ebx   
176 [0xb0]:          movg @27 // @std.io.fiber#fiber_state   
177 [0xb1]:          movn #3   
179 [0xb3]:          movn #1   
181 [0xb5]:          movi #0, adx   
183 [0xb7]:          rmov adx, ebx   
184 [0xb8]:          new_class @27 // std.io.fiber#fiber_state   
186 [0xba]:          movg @27 // @std.io.fiber#fiber_state   
187 [0xbb]:          movn #4   
189 [0xbd]:          popobj   
190 [0xbe]:          newstr @317 // FIB_INVALID   
191 [0xbf]:          movg @27 // @std.io.fiber#fiber_state   
192 [0xc0]:          movn #4   
194 [0xc2]:          movn #0   
196 [0xc4]:          popobj   
197 [0xc5]:          movi #33181, ebx   
199 [0xc7]:          movg @27 // @std.io.fiber#fiber_state   
200 [0xc8]:          movn #4   
202 [0xca]:          movn #1   
204 [0xcc]:          movi #0, adx   
206 [0xce]:          rmov adx, ebx   
207 [0xcf]:          new_class @35 // std.io.task#job_state   
209 [0xd1]:          movg @35 // @std.io.task#job_state   
210 [0xd2]:          movn #0   
212 [0xd4]:          popobj   
213 [0xd5]:          newstr @318 // created   
214 [0xd6]:          movg @35 // @std.io.task#job_state   
215 [0xd7]:          movn #0   
217 [0xd9]:          movn #0   
219 [0xdb]:          popobj   
220 [0xdc]:          movi #-1, ebx   
222 [0xde]:          movg @35 // @std.io.task#job_state   
223 [0xdf]:          movn #0   
225 [0xe1]:          movn #1   
227 [0xe3]:          movi #0, adx   
229 [0xe5]:          rmov adx, ebx   
230 [0xe6]:          new_class @35 // std.io.task#job_state   
232 [0xe8]:          movg @35 // @std.io.task#job_state   
233 [0xe9]:          movn #1   
235 [0xeb]:          popobj   
236 [0xec]:          newstr @319 // active   
237 [0xed]:          movg @35 // @std.io.task#job_state   
238 [0xee]:          movn #1   
240 [0xf0]:          movn #0   
242 [0xf2]:          popobj   
243 [0xf3]:          movi #0, ebx   
245 [0xf5]:          movg @35 // @std.io.task#job_state   
246 [0xf6]:          movn #1   
248 [0xf8]:          movn #1   
250 [0xfa]:          movi #0, adx   
252 [0xfc]:          rmov adx, ebx   
253 [0xfd]:          new_class @35 // std.io.task#job_state   
255 [0xff]:          movg @35 // @std.io.task#job_state   
256 [0x100]:          movn #2   
258 [0x102]:          popobj   
259 [0x103]:          newstr @320 // completed   
260 [0x104]:          movg @35 // @std.io.task#job_state   
261 [0x105]:          movn #2   
263 [0x107]:          movn #0   
265 [0x109]:          popobj   
266 [0x10a]:          movi #1, ebx   
268 [0x10c]:          movg @35 // @std.io.task#job_state   
269 [0x10d]:          movn #2   
271 [0x10f]:          movn #1   
273 [0x111]:          movi #0, adx   
275 [0x113]:          rmov adx, ebx   
276 [0x114]:          new_class @35 // std.io.task#job_state   
278 [0x116]:          movg @35 // @std.io.task#job_state   
279 [0x117]:          movn #3   
281 [0x119]:          popobj   
282 [0x11a]:          newstr @321 // cancelled   
283 [0x11b]:          movg @35 // @std.io.task#job_state   
284 [0x11c]:          movn #3   
286 [0x11e]:          movn #0   
288 [0x120]:          popobj   
289 [0x121]:          movi #2, ebx   
291 [0x123]:          movg @35 // @std.io.task#job_state   
292 [0x124]:          movn #3   
294 [0x126]:          movn #1   
296 [0x128]:          movi #0, adx   
298 [0x12a]:          rmov adx, ebx   
299 [0x12b]:          new_class @39 // std.io#thread_priority   
301 [0x12d]:          movg @39 // @std.io#thread_priority   
302 [0x12e]:          movn #0   
304 [0x130]:          popobj   
305 [0x131]:          newstr @322 // min_priority   
306 [0x132]:          movg @39 // @std.io#thread_priority   
307 [0x133]:          movn #0   
309 [0x135]:          movn #0   
311 [0x137]:          popobj   
312 [0x138]:          movi #1, ebx   
314 [0x13a]:          movg @39 // @std.io#thread_priority   
315 [0x13b]:          movn #0   
317 [0x13d]:          movn #1   
319 [0x13f]:          movi #0, adx   
321 [0x141]:          rmov adx, ebx   
322 [0x142]:          new_class @39 // std.io#thread_priority   
324 [0x144]:          movg @39 // @std.io#thread_priority   
325 [0x145]:          movn #1   
327 [0x147]:          popobj   
328 [0x148]:          newstr @323 // norm_priority   
329 [0x149]:          movg @39 // @std.io#thread_priority   
330 [0x14a]:          movn #1   
332 [0x14c]:          movn #0   
334 [0x14e]:          popobj   
335 [0x14f]:          movi #4, ebx   
337 [0x151]:          movg @39 // @std.io#thread_priority   
338 [0x152]:          movn #1   
340 [0x154]:          movn #1   
342 [0x156]:          movi #0, adx   
344 [0x158]:          rmov adx, ebx   
345 [0x159]:          new_class @39 // std.io#thread_priority   
347 [0x15b]:          movg @39 // @std.io#thread_priority   
348 [0x15c]:          movn #2   
350 [0x15e]:          popobj   
351 [0x15f]:          newstr @324 // max_priority   
352 [0x160]:          movg @39 // @std.io#thread_priority   
353 [0x161]:          movn #2   
355 [0x163]:          movn #0   
357 [0x165]:          popobj   
358 [0x166]:          movi #6, ebx   
360 [0x168]:          movg @39 // @std.io#thread_priority   
361 [0x169]:          movn #2   
363 [0x16b]:          movn #1   
365 [0x16d]:          movi #0, adx   
367 [0x16f]:          rmov adx, ebx   
368 [0x170]:          new_class @40 // std.io#thread_result   
370 [0x172]:          movg @40 // @std.io#thread_result   
371 [0x173]:          movn #0   
373 [0x175]:          popobj   
374 [0x176]:          newstr @325 // result_ok   
375 [0x177]:          movg @40 // @std.io#thread_result   
376 [0x178]:          movn #0   
378 [0x17a]:          movn #0   
380 [0x17c]:          popobj   
381 [0x17d]:          movi #0, ebx   
383 [0x17f]:          movg @40 // @std.io#thread_result   
384 [0x180]:          movn #0   
386 [0x182]:          movn #1   
388 [0x184]:          movi #0, adx   
390 [0x186]:          rmov adx, ebx   
391 [0x187]:          new_class @40 // std.io#thread_result   
393 [0x189]:          movg @40 // @std.io#thread_result   
394 [0x18a]:          movn #1   
396 [0x18c]:          popobj   
397 [0x18d]:          newstr @326 // result_ill_thread_start   
398 [0x18e]:          movg @40 // @std.io#thread_result   
399 [0x18f]:          movn #1   
401 [0x191]:          movn #0   
403 [0x193]:          popobj   
404 [0x194]:          movi #1, ebx   
406 [0x196]:          movg @40 // @std.io#thread_result   
407 [0x197]:          movn #1   
409 [0x199]:          movn #1   
411 [0x19b]:          movi #0, adx   
413 [0x19d]:          rmov adx, ebx   
414 [0x19e]:          new_class @40 // std.io#thread_result   
416 [0x1a0]:          movg @40 // @std.io#thread_result   
417 [0x1a1]:          movn #2   
419 [0x1a3]:          popobj   
420 [0x1a4]:          newstr @327 // result_thread_running   
421 [0x1a5]:          movg @40 // @std.io#thread_result   
422 [0x1a6]:          movn #2   
424 [0x1a8]:          movn #0   
426 [0x1aa]:          popobj   
427 [0x1ab]:          movi #2, ebx   
429 [0x1ad]:          movg @40 // @std.io#thread_result   
430 [0x1ae]:          movn #2   
432 [0x1b0]:          movn #1   
434 [0x1b2]:          movi #0, adx   
436 [0x1b4]:          rmov adx, ebx   
437 [0x1b5]:          new_class @40 // std.io#thread_result   
439 [0x1b7]:          movg @40 // @std.io#thread_result   
440 [0x1b8]:          movn #3   
442 [0x1ba]:          popobj   
443 [0x1bb]:          newstr @328 // result_thread_terminated   
444 [0x1bc]:          movg @40 // @std.io#thread_result   
445 [0x1bd]:          movn #3   
447 [0x1bf]:          movn #0   
449 [0x1c1]:          popobj   
450 [0x1c2]:          movi #3, ebx   
452 [0x1c4]:          movg @40 // @std.io#thread_result   
453 [0x1c5]:          movn #3   
455 [0x1c7]:          movn #1   
457 [0x1c9]:          movi #0, adx   
459 [0x1cb]:          rmov adx, ebx   
460 [0x1cc]:          new_class @40 // std.io#thread_result   
462 [0x1ce]:          movg @40 // @std.io#thread_result   
463 [0x1cf]:          movn #4   
465 [0x1d1]:          popobj   
466 [0x1d2]:          newstr @329 // result_invalid_stack_size   
467 [0x1d3]:          movg @40 // @std.io#thread_result   
468 [0x1d4]:          movn #4   
470 [0x1d6]:          movn #0   
472 [0x1d8]:          popobj   
473 [0x1d9]:          movi #4, ebx   
475 [0x1db]:          movg @40 // @std.io#thread_result   
476 [0x1dc]:          movn #4   
478 [0x1de]:          movn #1   
480 [0x1e0]:          movi #0, adx   
482 [0x1e2]:          rmov adx, ebx   
483 [0x1e3]:          new_class @40 // std.io#thread_result   
485 [0x1e5]:          movg @40 // @std.io#thread_result   
486 [0x1e6]:          movn #5   
488 [0x1e8]:          popobj   
489 [0x1e9]:          newstr @330 // result_thread_not_started   
490 [0x1ea]:          movg @40 // @std.io#thread_result   
491 [0x1eb]:          movn #5   
493 [0x1ed]:          movn #0   
495 [0x1ef]:          popobj   
496 [0x1f0]:          movi #5, ebx   
498 [0x1f2]:          movg @40 // @std.io#thread_result   
499 [0x1f3]:          movn #5   
501 [0x1f5]:          movn #1   
503 [0x1f7]:          movi #0, adx   
505 [0x1f9]:          rmov adx, ebx   
506 [0x1fa]:          new_class @40 // std.io#thread_result   
508 [0x1fc]:          movg @40 // @std.io#thread_result   
509 [0x1fd]:          movn #6   
511 [0x1ff]:          popobj   
512 [0x200]:          newstr @331 // result_ill_thread_join   
513 [0x201]:          movg @40 // @std.io#thread_result   
514 [0x202]:          movn #6   
516 [0x204]:          movn #0   
518 [0x206]:          popobj   
519 [0x207]:          movi #6, ebx   
521 [0x209]:          movg @40 // @std.io#thread_result   
522 [0x20a]:          movn #6   
524 [0x20c]:          movn #1   
526 [0x20e]:          movi #0, adx   
528 [0x210]:          rmov adx, ebx   
529 [0x211]:          new_class @40 // std.io#thread_result   
531 [0x213]:          movg @40 // @std.io#thread_result   
532 [0x214]:          movn #7   
534 [0x216]:          popobj   
535 [0x217]:          newstr @332 // result_thread_join_failed   
536 [0x218]:          movg @40 // @std.io#thread_result   
537 [0x219]:          movn #7   
539 [0x21b]:          movn #0   
541 [0x21d]:          popobj   
542 [0x21e]:          movi #7, ebx   
544 [0x220]:          movg @40 // @std.io#thread_result   
545 [0x221]:          movn #7   
547 [0x223]:          movn #1   
549 [0x225]:          movi #0, adx   
551 [0x227]:          rmov adx, ebx   
552 [0x228]:          new_class @40 // std.io#thread_result   
554 [0x22a]:          movg @40 // @std.io#thread_result   
555 [0x22b]:          movn #8   
557 [0x22d]:          popobj   
558 [0x22e]:          newstr @333 // result_ill_thread_interrupt   
559 [0x22f]:          movg @40 // @std.io#thread_result   
560 [0x230]:          movn #8   
562 [0x232]:          movn #0   
564 [0x234]:          popobj   
565 [0x235]:          movi #8, ebx   
567 [0x237]:          movg @40 // @std.io#thread_result   
568 [0x238]:          movn #8   
570 [0x23a]:          movn #1   
572 [0x23c]:          movi #0, adx   
574 [0x23e]:          rmov adx, ebx   
575 [0x23f]:          new_class @40 // std.io#thread_result   
577 [0x241]:          movg @40 // @std.io#thread_result   
578 [0x242]:          movn #9   
580 [0x244]:          popobj   
581 [0x245]:          newstr @334 // result_thread_interrupt_failed   
582 [0x246]:          movg @40 // @std.io#thread_result   
583 [0x247]:          movn #9   
585 [0x249]:          movn #0   
587 [0x24b]:          popobj   
588 [0x24c]:          movi #9, ebx   
590 [0x24e]:          movg @40 // @std.io#thread_result   
591 [0x24f]:          movn #9   
593 [0x251]:          movn #1   
595 [0x253]:          movi #0, adx   
597 [0x255]:          rmov adx, ebx   
598 [0x256]:          new_class @40 // std.io#thread_result   
600 [0x258]:          movg @40 // @std.io#thread_result   
601 [0x259]:          movn #10   
603 [0x25b]:          popobj   
604 [0x25c]:          newstr @335 // result_ill_thread_destroy   
605 [0x25d]:          movg @40 // @std.io#thread_result   
606 [0x25e]:          movn #10   
608 [0x260]:          movn #0   
610 [0x262]:          popobj   
611 [0x263]:          movi #10, ebx   
613 [0x265]:          movg @40 // @std.io#thread_result   
614 [0x266]:          movn #10   
616 [0x268]:          movn #1   
618 [0x26a]:          movi #0, adx   
620 [0x26c]:          rmov adx, ebx   
621 [0x26d]:          new_class @40 // std.io#thread_result   
623 [0x26f]:          movg @40 // @std.io#thread_result   
624 [0x270]:          movn #11   
626 [0x272]:          popobj   
627 [0x273]:          newstr @336 // result_thread_create_failed   
628 [0x274]:          movg @40 // @std.io#thread_result   
629 [0x275]:          movn #11   
631 [0x277]:          movn #0   
633 [0x279]:          popobj   
634 [0x27a]:          movi #11, ebx   
636 [0x27c]:          movg @40 // @std.io#thread_result   
637 [0x27d]:          movn #11   
639 [0x27f]:          movn #1   
641 [0x281]:          movi #0, adx   
643 [0x283]:          rmov adx, ebx   
644 [0x284]:          new_class @40 // std.io#thread_result   
646 [0x286]:          movg @40 // @std.io#thread_result   
647 [0x287]:          movn #12   
649 [0x289]:          popobj   
650 [0x28a]:          newstr @337 // result_no_thread_id   
651 [0x28b]:          movg @40 // @std.io#thread_result   
652 [0x28c]:          movn #12   
654 [0x28e]:          movn #0   
656 [0x290]:          popobj   
657 [0x291]:          movi #12, ebx   
659 [0x293]:          movg @40 // @std.io#thread_result   
660 [0x294]:          movn #12   
662 [0x296]:          movn #1   
664 [0x298]:          movi #0, adx   
666 [0x29a]:          rmov adx, ebx   
667 [0x29b]:          new_class @40 // std.io#thread_result   
669 [0x29d]:          movg @40 // @std.io#thread_result   
670 [0x29e]:          movn #13   
672 [0x2a0]:          popobj   
673 [0x2a1]:          newstr @338 // result_thread_destroy_failed   
674 [0x2a2]:          movg @40 // @std.io#thread_result   
675 [0x2a3]:          movn #13   
677 [0x2a5]:          movn #0   
679 [0x2a7]:          popobj   
680 [0x2a8]:          movi #13, ebx   
682 [0x2aa]:          movg @40 // @std.io#thread_result   
683 [0x2ab]:          movn #13   
685 [0x2ad]:          movn #1   
687 [0x2af]:          movi #0, adx   
689 [0x2b1]:          rmov adx, ebx   
690 [0x2b2]:          new_class @40 // std.io#thread_result   
692 [0x2b4]:          movg @40 // @std.io#thread_result   
693 [0x2b5]:          movn #14   
695 [0x2b7]:          popobj   
696 [0x2b8]:          newstr @339 // result_ill_priority_set   
697 [0x2b9]:          movg @40 // @std.io#thread_result   
698 [0x2ba]:          movn #14   
700 [0x2bc]:          movn #0   
702 [0x2be]:          popobj   
703 [0x2bf]:          movi #14, ebx   
705 [0x2c1]:          movg @40 // @std.io#thread_result   
706 [0x2c2]:          movn #14   
708 [0x2c4]:          movn #1   
710 [0x2c6]:          movi #0, adx   
712 [0x2c8]:          rmov adx, ebx   
713 [0x2c9]:          new_class @40 // std.io#thread_result   
715 [0x2cb]:          movg @40 // @std.io#thread_result   
716 [0x2cc]:          movn #15   
718 [0x2ce]:          popobj   
719 [0x2cf]:          newstr @340 // result_ill_thread_suspend   
720 [0x2d0]:          movg @40 // @std.io#thread_result   
721 [0x2d1]:          movn #15   
723 [0x2d3]:          movn #0   
725 [0x2d5]:          popobj   
726 [0x2d6]:          movi #15, ebx   
728 [0x2d8]:          movg @40 // @std.io#thread_result   
729 [0x2d9]:          movn #15   
731 [0x2db]:          movn #1   
733 [0x2dd]:          movi #0, adx   
735 [0x2df]:          rmov adx, ebx   
736 [0x2e0]:          new_class @40 // std.io#thread_result   
738 [0x2e2]:          movg @40 // @std.io#thread_result   
739 [0x2e3]:          movn #16   
741 [0x2e5]:          popobj   
742 [0x2e6]:          newstr @341 // result_max_spin   
743 [0x2e7]:          movg @40 // @std.io#thread_result   
744 [0x2e8]:          movn #16   
746 [0x2ea]:          movn #0   
748 [0x2ec]:          popobj   
749 [0x2ed]:          movi #255, ebx   
751 [0x2ef]:          movg @40 // @std.io#thread_result   
752 [0x2f0]:          movn #16   
754 [0x2f2]:          movn #1   
756 [0x2f4]:          movi #0, adx   
758 [0x2f6]:          rmov adx, ebx   
759 [0x2f7]:          new_class @40 // std.io#thread_result   
761 [0x2f9]:          movg @40 // @std.io#thread_result   
762 [0x2fa]:          movn #17   
764 [0x2fc]:          popobj   
765 [0x2fd]:          newstr @342 // enums   
766 [0x2fe]:          movg @40 // @std.io#thread_result   
767 [0x2ff]:          movn #17   
769 [0x301]:          movn #0   
771 [0x303]:          popobj   
772 [0x304]:          movi #256, ebx   
774 [0x306]:          movg @40 // @std.io#thread_result   
775 [0x307]:          movn #17   
777 [0x309]:          movn #1   
779 [0x30b]:          movi #0, adx   
781 [0x30d]:          rmov adx, ebx   
782 [0x30e]:          new_class @69 // std.reflect#data_type   
784 [0x310]:          movg @69 // @std.reflect#data_type   
785 [0x311]:          movn #0   
787 [0x313]:          popobj   
788 [0x314]:          newstr @343 // int8   
789 [0x315]:          movg @69 // @std.reflect#data_type   
790 [0x316]:          movn #0   
792 [0x318]:          movn #0   
794 [0x31a]:          popobj   
795 [0x31b]:          movi #0, ebx   
797 [0x31d]:          movg @69 // @std.reflect#data_type   
798 [0x31e]:          movn #0   
800 [0x320]:          movn #1   
802 [0x322]:          movi #0, adx   
804 [0x324]:          rmov adx, ebx   
805 [0x325]:          new_class @69 // std.reflect#data_type   
807 [0x327]:          movg @69 // @std.reflect#data_type   
808 [0x328]:          movn #1   
810 [0x32a]:          popobj   
811 [0x32b]:          newstr @344 // int16   
812 [0x32c]:          movg @69 // @std.reflect#data_type   
813 [0x32d]:          movn #1   
815 [0x32f]:          movn #0   
817 [0x331]:          popobj   
818 [0x332]:          movi #1, ebx   
820 [0x334]:          movg @69 // @std.reflect#data_type   
821 [0x335]:          movn #1   
823 [0x337]:          movn #1   
825 [0x339]:          movi #0, adx   
827 [0x33b]:          rmov adx, ebx   
828 [0x33c]:          new_class @69 // std.reflect#data_type   
830 [0x33e]:          movg @69 // @std.reflect#data_type   
831 [0x33f]:          movn #2   
833 [0x341]:          popobj   
834 [0x342]:          newstr @345 // int32   
835 [0x343]:          movg @69 // @std.reflect#data_type   
836 [0x344]:          movn #2   
838 [0x346]:          movn #0   
840 [0x348]:          popobj   
841 [0x349]:          movi #2, ebx   
843 [0x34b]:          movg @69 // @std.reflect#data_type   
844 [0x34c]:          movn #2   
846 [0x34e]:          movn #1   
848 [0x350]:          movi #0, adx   
850 [0x352]:          rmov adx, ebx   
851 [0x353]:          new_class @69 // std.reflect#data_type   
853 [0x355]:          movg @69 // @std.reflect#data_type   
854 [0x356]:          movn #3   
856 [0x358]:          popobj   
857 [0x359]:          newstr @346 // int64   
858 [0x35a]:          movg @69 // @std.reflect#data_type   
859 [0x35b]:          movn #3   
861 [0x35d]:          movn #0   
863 [0x35f]:          popobj   
864 [0x360]:          movi #3, ebx   
866 [0x362]:          movg @69 // @std.reflect#data_type   
867 [0x363]:          movn #3   
869 [0x365]:          movn #1   
871 [0x367]:          movi #0, adx   
873 [0x369]:          rmov adx, ebx   
874 [0x36a]:          new_class @69 // std.reflect#data_type   
876 [0x36c]:          movg @69 // @std.reflect#data_type   
877 [0x36d]:          movn #4   
879 [0x36f]:          popobj   
880 [0x370]:          newstr @347 // uint8   
881 [0x371]:          movg @69 // @std.reflect#data_type   
882 [0x372]:          movn #4   
884 [0x374]:          movn #0   
886 [0x376]:          popobj   
887 [0x377]:          movi #4, ebx   
889 [0x379]:          movg @69 // @std.reflect#data_type   
890 [0x37a]:          movn #4   
892 [0x37c]:          movn #1   
894 [0x37e]:          movi #0, adx   
896 [0x380]:          rmov adx, ebx   
897 [0x381]:          new_class @69 // std.reflect#data_type   
899 [0x383]:          movg @69 // @std.reflect#data_type   
900 [0x384]:          movn #5   
902 [0x386]:          popobj   
903 [0x387]:          newstr @348 // uint16   
904 [0x388]:          movg @69 // @std.reflect#data_type   
905 [0x389]:          movn #5   
907 [0x38b]:          movn #0   
909 [0x38d]:          popobj   
910 [0x38e]:          movi #5, ebx   
912 [0x390]:          movg @69 // @std.reflect#data_type   
913 [0x391]:          movn #5   
915 [0x393]:          movn #1   
917 [0x395]:          movi #0, adx   
919 [0x397]:          rmov adx, ebx   
920 [0x398]:          new_class @69 // std.reflect#data_type   
922 [0x39a]:          movg @69 // @std.reflect#data_type   
923 [0x39b]:          movn #6   
925 [0x39d]:          popobj   
926 [0x39e]:          newstr @349 // uint32   
927 [0x39f]:          movg @69 // @std.reflect#data_type   
928 [0x3a0]:          movn #6   
930 [0x3a2]:          movn #0   
932 [0x3a4]:          popobj   
933 [0x3a5]:          movi #6, ebx   
935 [0x3a7]:          movg @69 // @std.reflect#data_type   
936 [0x3a8]:          movn #6   
938 [0x3aa]:          movn #1   
940 [0x3ac]:          movi #0, adx   
942 [0x3ae]:          rmov adx, ebx   
943 [0x3af]:          new_class @69 // std.reflect#data_type   
945 [0x3b1]:          movg @69 // @std.reflect#data_type   
946 [0x3b2]:          movn #7   
948 [0x3b4]:          popobj   
949 [0x3b5]:          newstr @350 // uint64   
950 [0x3b6]:          movg @69 // @std.reflect#data_type   
951 [0x3b7]:          movn #7   
953 [0x3b9]:          movn #0   
955 [0x3bb]:          popobj   
956 [0x3bc]:          movi #7, ebx   
958 [0x3be]:          movg @69 // @std.reflect#data_type   
959 [0x3bf]:          movn #7   
961 [0x3c1]:          movn #1   
963 [0x3c3]:          movi #0, adx   
965 [0x3c5]:          rmov adx, ebx   
966 [0x3c6]:          new_class @69 // std.reflect#data_type   
968 [0x3c8]:          movg @69 // @std.reflect#data_type   
969 [0x3c9]:          movn #8   
971 [0x3cb]:          popobj   
972 [0x3cc]:          newstr @351 // fnptr   
973 [0x3cd]:          movg @69 // @std.reflect#data_type   
974 [0x3ce]:          movn #8   
976 [0x3d0]:          movn #0   
978 [0x3d2]:          popobj   
979 [0x3d3]:          movi #8, ebx   
981 [0x3d5]:          movg @69 // @std.reflect#data_type   
982 [0x3d6]:          movn #8   
984 [0x3d8]:          movn #1   
986 [0x3da]:          movi #0, adx   
988 [0x3dc]:          rmov adx, ebx   
989 [0x3dd]:          new_class @69 // std.reflect#data_type   
991 [0x3df]:          movg @69 // @std.reflect#data_type   
992 [0x3e0]:          movn #9   
994 [0x3e2]:          popobj   
995 [0x3e3]:          newstr @352 // _var   
996 [0x3e4]:          movg @69 // @std.reflect#data_type   
997 [0x3e5]:          movn #9   
999 [0x3e7]:          movn #0   
1001 [0x3e9]:          popobj   
1002 [0x3ea]:          movi #9, ebx   
1004 [0x3ec]:          movg @69 // @std.reflect#data_type   
1005 [0x3ed]:          movn #9   
1007 [0x3ef]:          movn #1   
1009 [0x3f1]:          movi #0, adx   
1011 [0x3f3]:          rmov adx, ebx   
1012 [0x3f4]:          new_class @69 // std.reflect#data_type   
1014 [0x3f6]:          movg @69 // @std.reflect#data_type   
1015 [0x3f7]:          movn #10   
1017 [0x3f9]:          popobj   
1018 [0x3fa]:          newstr @353 // _object   
1019 [0x3fb]:          movg @69 // @std.reflect#data_type   
1020 [0x3fc]:          movn #10   
1022 [0x3fe]:          movn #0   
1024 [0x400]:          popobj   
1025 [0x401]:          movi #10, ebx   
1027 [0x403]:          movg @69 // @std.reflect#data_type   
1028 [0x404]:          movn #10   
1030 [0x406]:          movn #1   
1032 [0x408]:          movi #0, adx   
1034 [0x40a]:          rmov adx, ebx   
1035 [0x40b]:          new_class @69 // std.reflect#data_type   
1037 [0x40d]:          movg @69 // @std.reflect#data_type   
1038 [0x40e]:          movn #11   
1040 [0x410]:          popobj   
1041 [0x411]:          newstr @354 // _class   
1042 [0x412]:          movg @69 // @std.reflect#data_type   
1043 [0x413]:          movn #11   
1045 [0x415]:          movn #0   
1047 [0x417]:          popobj   
1048 [0x418]:          movi #11, ebx   
1050 [0x41a]:          movg @69 // @std.reflect#data_type   
1051 [0x41b]:          movn #11   
1053 [0x41d]:          movn #1   
1055 [0x41f]:          movi #0, adx   
1057 [0x421]:          rmov adx, ebx   
1058 [0x422]:          new_class @69 // std.reflect#data_type   
1060 [0x424]:          movg @69 // @std.reflect#data_type   
1061 [0x425]:          movn #12   
1063 [0x427]:          popobj   
1064 [0x428]:          newstr @355 // method   
1065 [0x429]:          movg @69 // @std.reflect#data_type   
1066 [0x42a]:          movn #12   
1068 [0x42c]:          movn #0   
1070 [0x42e]:          popobj   
1071 [0x42f]:          movi #12, ebx   
1073 [0x431]:          movg @69 // @std.reflect#data_type   
1074 [0x432]:          movn #12   
1076 [0x434]:          movn #1   
1078 [0x436]:          movi #0, adx   
1080 [0x438]:          rmov adx, ebx   
1081 [0x439]:          new_class @69 // std.reflect#data_type   
1083 [0x43b]:          movg @69 // @std.reflect#data_type   
1084 [0x43c]:          movn #13   
1086 [0x43e]:          popobj   
1087 [0x43f]:          newstr @356 // _nil   
1088 [0x440]:          movg @69 // @std.reflect#data_type   
1089 [0x441]:          movn #13   
1091 [0x443]:          movn #0   
1093 [0x445]:          popobj   
1094 [0x446]:          movi #13, ebx   
1096 [0x448]:          movg @69 // @std.reflect#data_type   
1097 [0x449]:          movn #13   
1099 [0x44b]:          movn #1   
1101 [0x44d]:          movi #0, adx   
1103 [0x44f]:          rmov adx, ebx   
1104 [0x450]:          new_class @69 // std.reflect#data_type   
1106 [0x452]:          movg @69 // @std.reflect#data_type   
1107 [0x453]:          movn #14   
1109 [0x455]:          popobj   
1110 [0x456]:          newstr @357 // any   
1111 [0x457]:          movg @69 // @std.reflect#data_type   
1112 [0x458]:          movn #14   
1114 [0x45a]:          movn #0   
1116 [0x45c]:          popobj   
1117 [0x45d]:          movi #14, ebx   
1119 [0x45f]:          movg @69 // @std.reflect#data_type   
1120 [0x460]:          movn #14   
1122 [0x462]:          movn #1   
1124 [0x464]:          movi #0, adx   
1126 [0x466]:          rmov adx, ebx   
1127 [0x467]:          new_class @69 // std.reflect#data_type   
1129 [0x469]:          movg @69 // @std.reflect#data_type   
1130 [0x46a]:          movn #15   
1132 [0x46c]:          popobj   
1133 [0x46d]:          newstr @358 // untyped   
1134 [0x46e]:          movg @69 // @std.reflect#data_type   
1135 [0x46f]:          movn #15   
1137 [0x471]:          movn #0   
1139 [0x473]:          popobj   
1140 [0x474]:          movi #15, ebx   
1142 [0x476]:          movg @69 // @std.reflect#data_type   
1143 [0x477]:          movn #15   
1145 [0x479]:          movn #1   
1147 [0x47b]:          movi #0, adx   
1149 [0x47d]:          rmov adx, ebx   
1150 [0x47e]:          new_class @69 // std.reflect#data_type   
1152 [0x480]:          movg @69 // @std.reflect#data_type   
1153 [0x481]:          movn #16   
1155 [0x483]:          popobj   
1156 [0x484]:          newstr @359 // undefined   
1157 [0x485]:          movg @69 // @std.reflect#data_type   
1158 [0x486]:          movn #16   
1160 [0x488]:          movn #0   
1162 [0x48a]:          popobj   
1163 [0x48b]:          movi #16, ebx   
1165 [0x48d]:          movg @69 // @std.reflect#data_type   
1166 [0x48e]:          movn #16   
1168 [0x490]:          movn #1   
1170 [0x492]:          movi #0, adx   
1172 [0x494]:          rmov adx, ebx   
1173 [0x495]:          new_class @70 // std.reflect#property_type   
1175 [0x497]:          movg @70 // @std.reflect#property_type   
1176 [0x498]:          movn #0   
1178 [0x49a]:          popobj   
1179 [0x49b]:          newstr @360 // class_property   
1180 [0x49c]:          movg @70 // @std.reflect#property_type   
1181 [0x49d]:          movn #0   
1183 [0x49f]:          movn #0   
1185 [0x4a1]:          popobj   
1186 [0x4a2]:          movi #33182, ebx   
1188 [0x4a4]:          movg @70 // @std.reflect#property_type   
1189 [0x4a5]:          movn #0   
1191 [0x4a7]:          movn #1   
1193 [0x4a9]:          movi #0, adx   
1195 [0x4ab]:          rmov adx, ebx   
1196 [0x4ac]:          new_class @70 // std.reflect#property_type   
1198 [0x4ae]:          movg @70 // @std.reflect#property_type   
1199 [0x4af]:          movn #1   
1201 [0x4b1]:          popobj   
1202 [0x4b2]:          newstr @361 // field_property   
1203 [0x4b3]:          movg @70 // @std.reflect#property_type   
1204 [0x4b4]:          movn #1   
1206 [0x4b6]:          movn #0   
1208 [0x4b8]:          popobj   
1209 [0x4b9]:          movi #33183, ebx   
1211 [0x4bb]:          movg @70 // @std.reflect#property_type   
1212 [0x4bc]:          movn #1   
1214 [0x4be]:          movn #1   
1216 [0x4c0]:          movi #0, adx   
1218 [0x4c2]:          rmov adx, ebx   
1219 [0x4c3]:          new_class @70 // std.reflect#property_type   
1221 [0x4c5]:          movg @70 // @std.reflect#property_type   
1222 [0x4c6]:          movn #2   
1224 [0x4c8]:          popobj   
1225 [0x4c9]:          newstr @362 // function_property   
1226 [0x4ca]:          movg @70 // @std.reflect#property_type   
1227 [0x4cb]:          movn #2   
1229 [0x4cd]:          movn #0   
1231 [0x4cf]:          popobj   
1232 [0x4d0]:          movi #33184, ebx   
1234 [0x4d2]:          movg @70 // @std.reflect#property_type   
1235 [0x4d3]:          movn #2   
1237 [0x4d5]:          movn #1   
1239 [0x4d7]:          movi #0, adx   
1241 [0x4d9]:          rmov adx, ebx   
1242 [0x4da]:          new_class @78 // std#time_request   
1244 [0x4dc]:          movg @78 // @std#time_request   
1245 [0x4dd]:          movn #0   
1247 [0x4df]:          popobj   
1248 [0x4e0]:          newstr @363 // tm_seconds   
1249 [0x4e1]:          movg @78 // @std#time_request   
1250 [0x4e2]:          movn #0   
1252 [0x4e4]:          movn #0   
1254 [0x4e6]:          popobj   
1255 [0x4e7]:          movi #0, ebx   
1257 [0x4e9]:          movg @78 // @std#time_request   
1258 [0x4ea]:          movn #0   
1260 [0x4ec]:          movn #1   
1262 [0x4ee]:          movi #0, adx   
1264 [0x4f0]:          rmov adx, ebx   
1265 [0x4f1]:          new_class @78 // std#time_request   
1267 [0x4f3]:          movg @78 // @std#time_request   
1268 [0x4f4]:          movn #1   
1270 [0x4f6]:          popobj   
1271 [0x4f7]:          newstr @364 // tm_minutes   
1272 [0x4f8]:          movg @78 // @std#time_request   
1273 [0x4f9]:          movn #1   
1275 [0x4fb]:          movn #0   
1277 [0x4fd]:          popobj   
1278 [0x4fe]:          movi #1, ebx   
1280 [0x500]:          movg @78 // @std#time_request   
1281 [0x501]:          movn #1   
1283 [0x503]:          movn #1   
1285 [0x505]:          movi #0, adx   
1287 [0x507]:          rmov adx, ebx   
1288 [0x508]:          new_class @78 // std#time_request   
1290 [0x50a]:          movg @78 // @std#time_request   
1291 [0x50b]:          movn #2   
1293 [0x50d]:          popobj   
1294 [0x50e]:          newstr @365 // tm_hour   
1295 [0x50f]:          movg @78 // @std#time_request   
1296 [0x510]:          movn #2   
1298 [0x512]:          movn #0   
1300 [0x514]:          popobj   
1301 [0x515]:          movi #2, ebx   
1303 [0x517]:          movg @78 // @std#time_request   
1304 [0x518]:          movn #2   
1306 [0x51a]:          movn #1   
1308 [0x51c]:          movi #0, adx   
1310 [0x51e]:          rmov adx, ebx   
1311 [0x51f]:          new_class @78 // std#time_request   
1313 [0x521]:          movg @78 // @std#time_request   
1314 [0x522]:          movn #3   
1316 [0x524]:          popobj   
1317 [0x525]:          newstr @366 // tm_mday   
1318 [0x526]:          movg @78 // @std#time_request   
1319 [0x527]:          movn #3   
1321 [0x529]:          movn #0   
1323 [0x52b]:          popobj   
1324 [0x52c]:          movi #3, ebx   
1326 [0x52e]:          movg @78 // @std#time_request   
1327 [0x52f]:          movn #3   
1329 [0x531]:          movn #1   
1331 [0x533]:          movi #0, adx   
1333 [0x535]:          rmov adx, ebx   
1334 [0x536]:          new_class @78 // std#time_request   
1336 [0x538]:          movg @78 // @std#time_request   
1337 [0x539]:          movn #4   
1339 [0x53b]:          popobj   
1340 [0x53c]:          newstr @367 // tm_mon   
1341 [0x53d]:          movg @78 // @std#time_request   
1342 [0x53e]:          movn #4   
1344 [0x540]:          movn #0   
1346 [0x542]:          popobj   
1347 [0x543]:          movi #4, ebx   
1349 [0x545]:          movg @78 // @std#time_request   
1350 [0x546]:          movn #4   
1352 [0x548]:          movn #1   
1354 [0x54a]:          movi #0, adx   
1356 [0x54c]:          rmov adx, ebx   
1357 [0x54d]:          new_class @78 // std#time_request   
1359 [0x54f]:          movg @78 // @std#time_request   
1360 [0x550]:          movn #5   
1362 [0x552]:          popobj   
1363 [0x553]:          newstr @368 // tm_year   
1364 [0x554]:          movg @78 // @std#time_request   
1365 [0x555]:          movn #5   
1367 [0x557]:          movn #0   
1369 [0x559]:          popobj   
1370 [0x55a]:          movi #5, ebx   
1372 [0x55c]:          movg @78 // @std#time_request   
1373 [0x55d]:          movn #5   
1375 [0x55f]:          movn #1   
1377 [0x561]:          movi #0, adx   
1379 [0x563]:          rmov adx, ebx   
1380 [0x564]:          new_class @78 // std#time_request   
1382 [0x566]:          movg @78 // @std#time_request   
1383 [0x567]:          movn #6   
1385 [0x569]:          popobj   
1386 [0x56a]:          newstr @369 // tm_wday   
1387 [0x56b]:          movg @78 // @std#time_request   
1388 [0x56c]:          movn #6   
1390 [0x56e]:          movn #0   
1392 [0x570]:          popobj   
1393 [0x571]:          movi #6, ebx   
1395 [0x573]:          movg @78 // @std#time_request   
1396 [0x574]:          movn #6   
1398 [0x576]:          movn #1   
1400 [0x578]:          movi #0, adx   
1402 [0x57a]:          rmov adx, ebx   
1403 [0x57b]:          new_class @78 // std#time_request   
1405 [0x57d]:          movg @78 // @std#time_request   
1406 [0x57e]:          movn #7   
1408 [0x580]:          popobj   
1409 [0x581]:          newstr @370 // tm_yday   
1410 [0x582]:          movg @78 // @std#time_request   
1411 [0x583]:          movn #7   
1413 [0x585]:          movn #0   
1415 [0x587]:          popobj   
1416 [0x588]:          movi #7, ebx   
1418 [0x58a]:          movg @78 // @std#time_request   
1419 [0x58b]:          movn #7   
1421 [0x58d]:          movn #1   
1423 [0x58f]:          movi #0, adx   
1425 [0x591]:          rmov adx, ebx   
1426 [0x592]:          new_class @78 // std#time_request   
1428 [0x594]:          movg @78 // @std#time_request   
1429 [0x595]:          movn #8   
1431 [0x597]:          popobj   
1432 [0x598]:          newstr @371 // tm_isdst   
1433 [0x599]:          movg @78 // @std#time_request   
1434 [0x59a]:          movn #8   
1436 [0x59c]:          movn #0   
1438 [0x59e]:          popobj   
1439 [0x59f]:          movi #8, ebx   
1441 [0x5a1]:          movg @78 // @std#time_request   
1442 [0x5a2]:          movn #8   
1444 [0x5a4]:          movn #1   
1446 [0x5a6]:          movi #0, adx   
1448 [0x5a8]:          rmov adx, ebx   
1449 [0x5a9]:          new_class @79 // std#time_unit   
1451 [0x5ab]:          movg @79 // @std#time_unit   
1452 [0x5ac]:          movn #0   
1454 [0x5ae]:          popobj   
1455 [0x5af]:          newstr @372 // seconds   
1456 [0x5b0]:          movg @79 // @std#time_unit   
1457 [0x5b1]:          movn #0   
1459 [0x5b3]:          movn #0   
1461 [0x5b5]:          popobj   
1462 [0x5b6]:          movi #0, ebx   
1464 [0x5b8]:          movg @79 // @std#time_unit   
1465 [0x5b9]:          movn #0   
1467 [0x5bb]:          movn #1   
1469 [0x5bd]:          movi #0, adx   
1471 [0x5bf]:          rmov adx, ebx   
1472 [0x5c0]:          new_class @79 // std#time_unit   
1474 [0x5c2]:          movg @79 // @std#time_unit   
1475 [0x5c3]:          movn #1   
1477 [0x5c5]:          popobj   
1478 [0x5c6]:          newstr @373 // milliseconds   
1479 [0x5c7]:          movg @79 // @std#time_unit   
1480 [0x5c8]:          movn #1   
1482 [0x5ca]:          movn #0   
1484 [0x5cc]:          popobj   
1485 [0x5cd]:          movi #1, ebx   
1487 [0x5cf]:          movg @79 // @std#time_unit   
1488 [0x5d0]:          movn #1   
1490 [0x5d2]:          movn #1   
1492 [0x5d4]:          movi #0, adx   
1494 [0x5d6]:          rmov adx, ebx   
1495 [0x5d7]:          new_class @79 // std#time_unit   
1497 [0x5d9]:          movg @79 // @std#time_unit   
1498 [0x5da]:          movn #2   
1500 [0x5dc]:          popobj   
1501 [0x5dd]:          newstr @374 // microseconds   
1502 [0x5de]:          movg @79 // @std#time_unit   
1503 [0x5df]:          movn #2   
1505 [0x5e1]:          movn #0   
1507 [0x5e3]:          popobj   
1508 [0x5e4]:          movi #2, ebx   
1510 [0x5e6]:          movg @79 // @std#time_unit   
1511 [0x5e7]:          movn #2   
1513 [0x5e9]:          movn #1   
1515 [0x5eb]:          movi #0, adx   
1517 [0x5ed]:          rmov adx, ebx   
1518 [0x5ee]:          new_class @79 // std#time_unit   
1520 [0x5f0]:          movg @79 // @std#time_unit   
1521 [0x5f1]:          movn #3   
1523 [0x5f3]:          popobj   
1524 [0x5f4]:          newstr @375 // nanoseconds   
1525 [0x5f5]:          movg @79 // @std#time_unit   
1526 [0x5f6]:          movn #3   
1528 [0x5f8]:          movn #0   
1530 [0x5fa]:          popobj   
1531 [0x5fb]:          movi #3, ebx   
1533 [0x5fd]:          movg @79 // @std#time_unit   
1534 [0x5fe]:          movn #3   
1536 [0x600]:          movn #1   
1538 [0x602]:          movi #0, adx   
1540 [0x604]:          rmov adx, ebx   
1541 [0x605]:          new_class @84 // main.frontend#compiler_error   
1543 [0x607]:          movg @84 // @main.frontend#compiler_error   
1544 [0x608]:          movn #0   
1546 [0x60a]:          popobj   
1547 [0x60b]:          newstr @376 // unexpected_symbol   
1548 [0x60c]:          movg @84 // @main.frontend#compiler_error   
1549 [0x60d]:          movn #0   
1551 [0x60f]:          movn #0   
1553 [0x611]:          popobj   
1554 [0x612]:          movi #0, ebx   
1556 [0x614]:          movg @84 // @main.frontend#compiler_error   
1557 [0x615]:          movn #0   
1559 [0x617]:          movn #1   
1561 [0x619]:          movi #0, adx   
1563 [0x61b]:          rmov adx, ebx   
1564 [0x61c]:          new_class @84 // main.frontend#compiler_error   
1566 [0x61e]:          movg @84 // @main.frontend#compiler_error   
1567 [0x61f]:          movn #1   
1569 [0x621]:          popobj   
1570 [0x622]:          newstr @377 // illegal_number_format   
1571 [0x623]:          movg @84 // @main.frontend#compiler_error   
1572 [0x624]:          movn #1   
1574 [0x626]:          movn #0   
1576 [0x628]:          popobj   
1577 [0x629]:          movi #1, ebx   
1579 [0x62b]:          movg @84 // @main.frontend#compiler_error   
1580 [0x62c]:          movn #1   
1582 [0x62e]:          movn #1   
1584 [0x630]:          movi #0, adx   
1586 [0x632]:          rmov adx, ebx   
1587 [0x633]:          new_class @84 // main.frontend#compiler_error   
1589 [0x635]:          movg @84 // @main.frontend#compiler_error   
1590 [0x636]:          movn #2   
1592 [0x638]:          popobj   
1593 [0x639]:          newstr @378 // unexpected_eof   
1594 [0x63a]:          movg @84 // @main.frontend#compiler_error   
1595 [0x63b]:          movn #2   
1597 [0x63d]:          movn #0   
1599 [0x63f]:          popobj   
1600 [0x640]:          movi #2, ebx   
1602 [0x642]:          movg @84 // @main.frontend#compiler_error   
1603 [0x643]:          movn #2   
1605 [0x645]:          movn #1   
1607 [0x647]:          movi #0, adx   
1609 [0x649]:          rmov adx, ebx   
1610 [0x64a]:          new_class @84 // main.frontend#compiler_error   
1612 [0x64c]:          movg @84 // @main.frontend#compiler_error   
1613 [0x64d]:          movn #3   
1615 [0x64f]:          popobj   
1616 [0x650]:          newstr @379 // expected_string_literal_eof   
1617 [0x651]:          movg @84 // @main.frontend#compiler_error   
1618 [0x652]:          movn #3   
1620 [0x654]:          movn #0   
1622 [0x656]:          popobj   
1623 [0x657]:          movi #3, ebx   
1625 [0x659]:          movg @84 // @main.frontend#compiler_error   
1626 [0x65a]:          movn #3   
1628 [0x65c]:          movn #1   
1630 [0x65e]:          movi #0, adx   
1632 [0x660]:          rmov adx, ebx   
1633 [0x661]:          new_class @84 // main.frontend#compiler_error   
1635 [0x663]:          movg @84 // @main.frontend#compiler_error   
1636 [0x664]:          movn #4   
1638 [0x666]:          popobj   
1639 [0x667]:          newstr @380 // illegal_string_format   
1640 [0x668]:          movg @84 // @main.frontend#compiler_error   
1641 [0x669]:          movn #4   
1643 [0x66b]:          movn #0   
1645 [0x66d]:          popobj   
1646 [0x66e]:          movi #4, ebx   
1648 [0x670]:          movg @84 // @main.frontend#compiler_error   
1649 [0x671]:          movn #4   
1651 [0x673]:          movn #1   
1653 [0x675]:          movi #0, adx   
1655 [0x677]:          rmov adx, ebx   
1656 [0x678]:          new_class @84 // main.frontend#compiler_error   
1658 [0x67a]:          movg @84 // @main.frontend#compiler_error   
1659 [0x67b]:          movn #5   
1661 [0x67d]:          popobj   
1662 [0x67e]:          newstr @381 // expected_char_literal_eof   
1663 [0x67f]:          movg @84 // @main.frontend#compiler_error   
1664 [0x680]:          movn #5   
1666 [0x682]:          movn #0   
1668 [0x684]:          popobj   
1669 [0x685]:          movi #5, ebx   
1671 [0x687]:          movg @84 // @main.frontend#compiler_error   
1672 [0x688]:          movn #5   
1674 [0x68a]:          movn #1   
1676 [0x68c]:          movi #0, adx   
1678 [0x68e]:          rmov adx, ebx   
1679 [0x68f]:          new_class @84 // main.frontend#compiler_error   
1681 [0x691]:          movg @84 // @main.frontend#compiler_error   
1682 [0x692]:          movn #6   
1684 [0x694]:          popobj   
1685 [0x695]:          newstr @382 // illegal_char_literal_format   
1686 [0x696]:          movg @84 // @main.frontend#compiler_error   
1687 [0x697]:          movn #6   
1689 [0x699]:          movn #0   
1691 [0x69b]:          popobj   
1692 [0x69c]:          movi #6, ebx   
1694 [0x69e]:          movg @84 // @main.frontend#compiler_error   
1695 [0x69f]:          movn #6   
1697 [0x6a1]:          movn #1   
1699 [0x6a3]:          movi #0, adx   
1701 [0x6a5]:          rmov adx, ebx   
1702 [0x6a6]:          new_class @84 // main.frontend#compiler_error   
1704 [0x6a8]:          movg @84 // @main.frontend#compiler_error   
1705 [0x6a9]:          movn #7   
1707 [0x6ab]:          popobj   
1708 [0x6ac]:          newstr @383 // generic   
1709 [0x6ad]:          movg @84 // @main.frontend#compiler_error   
1710 [0x6ae]:          movn #7   
1712 [0x6b0]:          movn #0   
1714 [0x6b2]:          popobj   
1715 [0x6b3]:          movi #7, ebx   
1717 [0x6b5]:          movg @84 // @main.frontend#compiler_error   
1718 [0x6b6]:          movn #7   
1720 [0x6b8]:          movn #1   
1722 [0x6ba]:          movi #0, adx   
1724 [0x6bc]:          rmov adx, ebx   
1725 [0x6bd]:          new_class @84 // main.frontend#compiler_error   
1727 [0x6bf]:          movg @84 // @main.frontend#compiler_error   
1728 [0x6c0]:          movn #8   
1730 [0x6c2]:          popobj   
1731 [0x6c3]:          newstr @384 // illegal_access_declaration   
1732 [0x6c4]:          movg @84 // @main.frontend#compiler_error   
1733 [0x6c5]:          movn #8   
1735 [0x6c7]:          movn #0   
1737 [0x6c9]:          popobj   
1738 [0x6ca]:          movi #8, ebx   
1740 [0x6cc]:          movg @84 // @main.frontend#compiler_error   
1741 [0x6cd]:          movn #8   
1743 [0x6cf]:          movn #1   
1745 [0x6d1]:          movi #0, adx   
1747 [0x6d3]:          rmov adx, ebx   
1748 [0x6d4]:          new_class @84 // main.frontend#compiler_error   
1750 [0x6d6]:          movg @84 // @main.frontend#compiler_error   
1751 [0x6d7]:          movn #9   
1753 [0x6d9]:          popobj   
1754 [0x6da]:          newstr @385 // illegal_bracket_mismatch   
1755 [0x6db]:          movg @84 // @main.frontend#compiler_error   
1756 [0x6dc]:          movn #9   
1758 [0x6de]:          movn #0   
1760 [0x6e0]:          popobj   
1761 [0x6e1]:          movi #9, ebx   
1763 [0x6e3]:          movg @84 // @main.frontend#compiler_error   
1764 [0x6e4]:          movn #9   
1766 [0x6e6]:          movn #1   
1768 [0x6e8]:          movi #0, adx   
1770 [0x6ea]:          rmov adx, ebx   
1771 [0x6eb]:          new_class @84 // main.frontend#compiler_error   
1773 [0x6ed]:          movg @84 // @main.frontend#compiler_error   
1774 [0x6ee]:          movn #10   
1776 [0x6f0]:          popobj   
1777 [0x6f1]:          newstr @386 // missing_bracket   
1778 [0x6f2]:          movg @84 // @main.frontend#compiler_error   
1779 [0x6f3]:          movn #10   
1781 [0x6f5]:          movn #0   
1783 [0x6f7]:          popobj   
1784 [0x6f8]:          movi #10, ebx   
1786 [0x6fa]:          movg @84 // @main.frontend#compiler_error   
1787 [0x6fb]:          movn #10   
1789 [0x6fd]:          movn #1   
1791 [0x6ff]:          movi #0, adx   
1793 [0x701]:          rmov adx, ebx   
1794 [0x702]:          new_class @84 // main.frontend#compiler_error   
1796 [0x704]:          movg @84 // @main.frontend#compiler_error   
1797 [0x705]:          movn #11   
1799 [0x707]:          popobj   
1800 [0x708]:          newstr @387 // invalid_access_specifier   
1801 [0x709]:          movg @84 // @main.frontend#compiler_error   
1802 [0x70a]:          movn #11   
1804 [0x70c]:          movn #0   
1806 [0x70e]:          popobj   
1807 [0x70f]:          movi #11, ebx   
1809 [0x711]:          movg @84 // @main.frontend#compiler_error   
1810 [0x712]:          movn #11   
1812 [0x714]:          movn #1   
1814 [0x716]:          movi #0, adx   
1816 [0x718]:          rmov adx, ebx   
1817 [0x719]:          new_class @84 // main.frontend#compiler_error   
1819 [0x71b]:          movg @84 // @main.frontend#compiler_error   
1820 [0x71c]:          movn #12   
1822 [0x71e]:          popobj   
1823 [0x71f]:          newstr @388 // multiple_definition   
1824 [0x720]:          movg @84 // @main.frontend#compiler_error   
1825 [0x721]:          movn #12   
1827 [0x723]:          movn #0   
1829 [0x725]:          popobj   
1830 [0x726]:          movi #12, ebx   
1832 [0x728]:          movg @84 // @main.frontend#compiler_error   
1833 [0x729]:          movn #12   
1835 [0x72b]:          movn #1   
1837 [0x72d]:          movi #0, adx   
1839 [0x72f]:          rmov adx, ebx   
1840 [0x730]:          new_class @84 // main.frontend#compiler_error   
1842 [0x732]:          movg @84 // @main.frontend#compiler_error   
1843 [0x733]:          movn #13   
1845 [0x735]:          popobj   
1846 [0x736]:          newstr @389 // previously_defined   
1847 [0x737]:          movg @84 // @main.frontend#compiler_error   
1848 [0x738]:          movn #13   
1850 [0x73a]:          movn #0   
1852 [0x73c]:          popobj   
1853 [0x73d]:          movi #13, ebx   
1855 [0x73f]:          movg @84 // @main.frontend#compiler_error   
1856 [0x740]:          movn #13   
1858 [0x742]:          movn #1   
1860 [0x744]:          movi #0, adx   
1862 [0x746]:          rmov adx, ebx   
1863 [0x747]:          new_class @84 // main.frontend#compiler_error   
1865 [0x749]:          movg @84 // @main.frontend#compiler_error   
1866 [0x74a]:          movn #14   
1868 [0x74c]:          popobj   
1869 [0x74d]:          newstr @390 // duplicate_class   
1870 [0x74e]:          movg @84 // @main.frontend#compiler_error   
1871 [0x74f]:          movn #14   
1873 [0x751]:          movn #0   
1875 [0x753]:          popobj   
1876 [0x754]:          movi #14, ebx   
1878 [0x756]:          movg @84 // @main.frontend#compiler_error   
1879 [0x757]:          movn #14   
1881 [0x759]:          movn #1   
1883 [0x75b]:          movi #0, adx   
1885 [0x75d]:          rmov adx, ebx   
1886 [0x75e]:          new_class @84 // main.frontend#compiler_error   
1888 [0x760]:          movg @84 // @main.frontend#compiler_error   
1889 [0x761]:          movn #15   
1891 [0x763]:          popobj   
1892 [0x764]:          newstr @391 // redundant_token   
1893 [0x765]:          movg @84 // @main.frontend#compiler_error   
1894 [0x766]:          movn #15   
1896 [0x768]:          movn #0   
1898 [0x76a]:          popobj   
1899 [0x76b]:          movi #15, ebx   
1901 [0x76d]:          movg @84 // @main.frontend#compiler_error   
1902 [0x76e]:          movn #15   
1904 [0x770]:          movn #1   
1906 [0x772]:          movi #0, adx   
1908 [0x774]:          rmov adx, ebx   
1909 [0x775]:          new_class @84 // main.frontend#compiler_error   
1911 [0x777]:          movg @84 // @main.frontend#compiler_error   
1912 [0x778]:          movn #16   
1914 [0x77a]:          popobj   
1915 [0x77b]:          newstr @392 // internal_error   
1916 [0x77c]:          movg @84 // @main.frontend#compiler_error   
1917 [0x77d]:          movn #16   
1919 [0x77f]:          movn #0   
1921 [0x781]:          popobj   
1922 [0x782]:          movi #16, ebx   
1924 [0x784]:          movg @84 // @main.frontend#compiler_error   
1925 [0x785]:          movn #16   
1927 [0x787]:          movn #1   
1929 [0x789]:          movi #0, adx   
1931 [0x78b]:          rmov adx, ebx   
1932 [0x78c]:          new_class @84 // main.frontend#compiler_error   
1934 [0x78e]:          movg @84 // @main.frontend#compiler_error   
1935 [0x78f]:          movn #17   
1937 [0x791]:          popobj   
1938 [0x792]:          newstr @393 // could_not_resolve   
1939 [0x793]:          movg @84 // @main.frontend#compiler_error   
1940 [0x794]:          movn #17   
1942 [0x796]:          movn #0   
1944 [0x798]:          popobj   
1945 [0x799]:          movi #17, ebx   
1947 [0x79b]:          movg @84 // @main.frontend#compiler_error   
1948 [0x79c]:          movn #17   
1950 [0x79e]:          movn #1   
1952 [0x7a0]:          movi #0, adx   
1954 [0x7a2]:          rmov adx, ebx   
1955 [0x7a3]:          new_class @84 // main.frontend#compiler_error   
1957 [0x7a5]:          movg @84 // @main.frontend#compiler_error   
1958 [0x7a6]:          movn #18   
1960 [0x7a8]:          popobj   
1961 [0x7a9]:          newstr @394 // expected_reference_of_type   
1962 [0x7aa]:          movg @84 // @main.frontend#compiler_error   
1963 [0x7ab]:          movn #18   
1965 [0x7ad]:          movn #0   
1967 [0x7af]:          popobj   
1968 [0x7b0]:          movi #18, ebx   
1970 [0x7b2]:          movg @84 // @main.frontend#compiler_error   
1971 [0x7b3]:          movn #18   
1973 [0x7b5]:          movn #1   
1975 [0x7b7]:          movi #0, adx   
1977 [0x7b9]:          rmov adx, ebx   
1978 [0x7ba]:          new_class @84 // main.frontend#compiler_error   
1980 [0x7bc]:          movg @84 // @main.frontend#compiler_error   
1981 [0x7bd]:          movn #19   
1983 [0x7bf]:          popobj   
1984 [0x7c0]:          newstr @395 // invalid_cast   
1985 [0x7c1]:          movg @84 // @main.frontend#compiler_error   
1986 [0x7c2]:          movn #19   
1988 [0x7c4]:          movn #0   
1990 [0x7c6]:          popobj   
1991 [0x7c7]:          movi #19, ebx   
1993 [0x7c9]:          movg @84 // @main.frontend#compiler_error   
1994 [0x7ca]:          movn #19   
1996 [0x7cc]:          movn #1   
1998 [0x7ce]:          movi #0, adx   
2000 [0x7d0]:          rmov adx, ebx   
2001 [0x7d1]:          new_class @84 // main.frontend#compiler_error   
2003 [0x7d3]:          movg @84 // @main.frontend#compiler_error   
2004 [0x7d4]:          movn #20   
2006 [0x7d6]:          popobj   
2007 [0x7d7]:          newstr @396 // redundant_cast   
2008 [0x7d8]:          movg @84 // @main.frontend#compiler_error   
2009 [0x7d9]:          movn #20   
2011 [0x7db]:          movn #0   
2013 [0x7dd]:          popobj   
2014 [0x7de]:          movi #20, ebx   
2016 [0x7e0]:          movg @84 // @main.frontend#compiler_error   
2017 [0x7e1]:          movn #20   
2019 [0x7e3]:          movn #1   
2021 [0x7e5]:          movi #0, adx   
2023 [0x7e7]:          rmov adx, ebx   
2024 [0x7e8]:          new_class @84 // main.frontend#compiler_error   
2026 [0x7ea]:          movg @84 // @main.frontend#compiler_error   
2027 [0x7eb]:          movn #21   
2029 [0x7ed]:          popobj   
2030 [0x7ee]:          newstr @397 // redundant_import   
2031 [0x7ef]:          movg @84 // @main.frontend#compiler_error   
2032 [0x7f0]:          movn #21   
2034 [0x7f2]:          movn #0   
2036 [0x7f4]:          popobj   
2037 [0x7f5]:          movi #21, ebx   
2039 [0x7f7]:          movg @84 // @main.frontend#compiler_error   
2040 [0x7f8]:          movn #21   
2042 [0x7fa]:          movn #1   
2044 [0x7fc]:          movi #0, adx   
2046 [0x7fe]:          rmov adx, ebx   
2047 [0x7ff]:          new_class @84 // main.frontend#compiler_error   
2049 [0x801]:          movg @84 // @main.frontend#compiler_error   
2050 [0x802]:          movn #22   
2052 [0x804]:          popobj   
2053 [0x805]:          newstr @398 // unexpected_token   
2054 [0x806]:          movg @84 // @main.frontend#compiler_error   
2055 [0x807]:          movn #22   
2057 [0x809]:          movn #0   
2059 [0x80b]:          popobj   
2060 [0x80c]:          movi #22, ebx   
2062 [0x80e]:          movg @84 // @main.frontend#compiler_error   
2063 [0x80f]:          movn #22   
2065 [0x811]:          movn #1   
2067 [0x813]:          movi #0, adx   
2069 [0x815]:          rmov adx, ebx   
2070 [0x816]:          new_class @84 // main.frontend#compiler_error   
2072 [0x818]:          movg @84 // @main.frontend#compiler_error   
2073 [0x819]:          movn #23   
2075 [0x81b]:          popobj   
2076 [0x81c]:          newstr @399 // invalid_access   
2077 [0x81d]:          movg @84 // @main.frontend#compiler_error   
2078 [0x81e]:          movn #23   
2080 [0x820]:          movn #0   
2082 [0x822]:          popobj   
2083 [0x823]:          movi #23, ebx   
2085 [0x825]:          movg @84 // @main.frontend#compiler_error   
2086 [0x826]:          movn #23   
2088 [0x828]:          movn #1   
2090 [0x82a]:          movi #0, adx   
2092 [0x82c]:          rmov adx, ebx   
2093 [0x82d]:          new_class @84 // main.frontend#compiler_error   
2095 [0x82f]:          movg @84 // @main.frontend#compiler_error   
2096 [0x830]:          movn #24   
2098 [0x832]:          popobj   
2099 [0x833]:          newstr @400 // symbol_already_defined   
2100 [0x834]:          movg @84 // @main.frontend#compiler_error   
2101 [0x835]:          movn #24   
2103 [0x837]:          movn #0   
2105 [0x839]:          popobj   
2106 [0x83a]:          movi #24, ebx   
2108 [0x83c]:          movg @84 // @main.frontend#compiler_error   
2109 [0x83d]:          movn #24   
2111 [0x83f]:          movn #1   
2113 [0x841]:          movi #0, adx   
2115 [0x843]:          rmov adx, ebx   
2116 [0x844]:          new_class @84 // main.frontend#compiler_error   
2118 [0x846]:          movg @84 // @main.frontend#compiler_error   
2119 [0x847]:          movn #25   
2121 [0x849]:          popobj   
2122 [0x84a]:          newstr @401 // invalid_param   
2123 [0x84b]:          movg @84 // @main.frontend#compiler_error   
2124 [0x84c]:          movn #25   
2126 [0x84e]:          movn #0   
2128 [0x850]:          popobj   
2129 [0x851]:          movi #25, ebx   
2131 [0x853]:          movg @84 // @main.frontend#compiler_error   
2132 [0x854]:          movn #25   
2134 [0x856]:          movn #1   
2136 [0x858]:          movi #0, adx   
2138 [0x85a]:          rmov adx, ebx   
2139 [0x85b]:          new_class @84 // main.frontend#compiler_error   
2141 [0x85d]:          movg @84 // @main.frontend#compiler_error   
2142 [0x85e]:          movn #26   
2144 [0x860]:          popobj   
2145 [0x861]:          newstr @402 // incompatible_types   
2146 [0x862]:          movg @84 // @main.frontend#compiler_error   
2147 [0x863]:          movn #26   
2149 [0x865]:          movn #0   
2151 [0x867]:          popobj   
2152 [0x868]:          movi #26, ebx   
2154 [0x86a]:          movg @84 // @main.frontend#compiler_error   
2155 [0x86b]:          movn #26   
2157 [0x86d]:          movn #1   
2159 [0x86f]:          movi #0, adx   
2161 [0x871]:          rmov adx, ebx   
2162 [0x872]:          new_class @84 // main.frontend#compiler_error   
2164 [0x874]:          movg @84 // @main.frontend#compiler_error   
2165 [0x875]:          movn #27   
2167 [0x877]:          popobj   
2168 [0x878]:          newstr @403 // duplicate_declaration   
2169 [0x879]:          movg @84 // @main.frontend#compiler_error   
2170 [0x87a]:          movn #27   
2172 [0x87c]:          movn #0   
2174 [0x87e]:          popobj   
2175 [0x87f]:          movi #27, ebx   
2177 [0x881]:          movg @84 // @main.frontend#compiler_error   
2178 [0x882]:          movn #27   
2180 [0x884]:          movn #1   
2182 [0x886]:          movi #0, adx   
2184 [0x888]:          rmov adx, ebx   
2185 [0x889]:          new_class @84 // main.frontend#compiler_error   
2187 [0x88b]:          movg @84 // @main.frontend#compiler_error   
2188 [0x88c]:          movn #28   
2190 [0x88e]:          popobj   
2191 [0x88f]:          newstr @404 // no_err   
2192 [0x890]:          movg @84 // @main.frontend#compiler_error   
2193 [0x891]:          movn #28   
2195 [0x893]:          movn #0   
2197 [0x895]:          popobj   
2198 [0x896]:          movi #999, ebx   
2200 [0x898]:          movg @84 // @main.frontend#compiler_error   
2201 [0x899]:          movn #28   
2203 [0x89b]:          movn #1   
2205 [0x89d]:          movi #0, adx   
2207 [0x89f]:          rmov adx, ebx   
2208 [0x8a0]:          new_class @87 // main.frontend.parser#ast_type   
2210 [0x8a2]:          movg @87 // @main.frontend.parser#ast_type   
2211 [0x8a3]:          movn #0   
2213 [0x8a5]:          popobj   
2214 [0x8a6]:          newstr @405 // class_decl   
2215 [0x8a7]:          movg @87 // @main.frontend.parser#ast_type   
2216 [0x8a8]:          movn #0   
2218 [0x8aa]:          movn #0   
2220 [0x8ac]:          popobj   
2221 [0x8ad]:          movi #33186, ebx   
2223 [0x8af]:          movg @87 // @main.frontend.parser#ast_type   
2224 [0x8b0]:          movn #0   
2226 [0x8b2]:          movn #1   
2228 [0x8b4]:          movi #0, adx   
2230 [0x8b6]:          rmov adx, ebx   
2231 [0x8b7]:          new_class @87 // main.frontend.parser#ast_type   
2233 [0x8b9]:          movg @87 // @main.frontend.parser#ast_type   
2234 [0x8ba]:          movn #1   
2236 [0x8bc]:          popobj   
2237 [0x8bd]:          newstr @406 // generic_class_decl   
2238 [0x8be]:          movg @87 // @main.frontend.parser#ast_type   
2239 [0x8bf]:          movn #1   
2241 [0x8c1]:          movn #0   
2243 [0x8c3]:          popobj   
2244 [0x8c4]:          movi #33187, ebx   
2246 [0x8c6]:          movg @87 // @main.frontend.parser#ast_type   
2247 [0x8c7]:          movn #1   
2249 [0x8c9]:          movn #1   
2251 [0x8cb]:          movi #0, adx   
2253 [0x8cd]:          rmov adx, ebx   
2254 [0x8ce]:          new_class @87 // main.frontend.parser#ast_type   
2256 [0x8d0]:          movg @87 // @main.frontend.parser#ast_type   
2257 [0x8d1]:          movn #2   
2259 [0x8d3]:          popobj   
2260 [0x8d4]:          newstr @407 // generic_interface_decl   
2261 [0x8d5]:          movg @87 // @main.frontend.parser#ast_type   
2262 [0x8d6]:          movn #2   
2264 [0x8d8]:          movn #0   
2266 [0x8da]:          popobj   
2267 [0x8db]:          movi #33188, ebx   
2269 [0x8dd]:          movg @87 // @main.frontend.parser#ast_type   
2270 [0x8de]:          movn #2   
2272 [0x8e0]:          movn #1   
2274 [0x8e2]:          movi #0, adx   
2276 [0x8e4]:          rmov adx, ebx   
2277 [0x8e5]:          new_class @87 // main.frontend.parser#ast_type   
2279 [0x8e7]:          movg @87 // @main.frontend.parser#ast_type   
2280 [0x8e8]:          movn #3   
2282 [0x8ea]:          popobj   
2283 [0x8eb]:          newstr @408 // interface_decl   
2284 [0x8ec]:          movg @87 // @main.frontend.parser#ast_type   
2285 [0x8ed]:          movn #3   
2287 [0x8ef]:          movn #0   
2289 [0x8f1]:          popobj   
2290 [0x8f2]:          movi #33189, ebx   
2292 [0x8f4]:          movg @87 // @main.frontend.parser#ast_type   
2293 [0x8f5]:          movn #3   
2295 [0x8f7]:          movn #1   
2297 [0x8f9]:          movi #0, adx   
2299 [0x8fb]:          rmov adx, ebx   
2300 [0x8fc]:          new_class @87 // main.frontend.parser#ast_type   
2302 [0x8fe]:          movg @87 // @main.frontend.parser#ast_type   
2303 [0x8ff]:          movn #4   
2305 [0x901]:          popobj   
2306 [0x902]:          newstr @409 // import_decl   
2307 [0x903]:          movg @87 // @main.frontend.parser#ast_type   
2308 [0x904]:          movn #4   
2310 [0x906]:          movn #0   
2312 [0x908]:          popobj   
2313 [0x909]:          movi #33190, ebx   
2315 [0x90b]:          movg @87 // @main.frontend.parser#ast_type   
2316 [0x90c]:          movn #4   
2318 [0x90e]:          movn #1   
2320 [0x910]:          movi #0, adx   
2322 [0x912]:          rmov adx, ebx   
2323 [0x913]:          new_class @87 // main.frontend.parser#ast_type   
2325 [0x915]:          movg @87 // @main.frontend.parser#ast_type   
2326 [0x916]:          movn #5   
2328 [0x918]:          popobj   
2329 [0x919]:          newstr @410 // module_decl   
2330 [0x91a]:          movg @87 // @main.frontend.parser#ast_type   
2331 [0x91b]:          movn #5   
2333 [0x91d]:          movn #0   
2335 [0x91f]:          popobj   
2336 [0x920]:          movi #33191, ebx   
2338 [0x922]:          movg @87 // @main.frontend.parser#ast_type   
2339 [0x923]:          movn #5   
2341 [0x925]:          movn #1   
2343 [0x927]:          movi #0, adx   
2345 [0x929]:          rmov adx, ebx   
2346 [0x92a]:          new_class @87 // main.frontend.parser#ast_type   
2348 [0x92c]:          movg @87 // @main.frontend.parser#ast_type   
2349 [0x92d]:          movn #6   
2351 [0x92f]:          popobj   
2352 [0x930]:          newstr @411 // method_decl   
2353 [0x931]:          movg @87 // @main.frontend.parser#ast_type   
2354 [0x932]:          movn #6   
2356 [0x934]:          movn #0   
2358 [0x936]:          popobj   
2359 [0x937]:          movi #33192, ebx   
2361 [0x939]:          movg @87 // @main.frontend.parser#ast_type   
2362 [0x93a]:          movn #6   
2364 [0x93c]:          movn #1   
2366 [0x93e]:          movi #0, adx   
2368 [0x940]:          rmov adx, ebx   
2369 [0x941]:          new_class @87 // main.frontend.parser#ast_type   
2371 [0x943]:          movg @87 // @main.frontend.parser#ast_type   
2372 [0x944]:          movn #7   
2374 [0x946]:          popobj   
2375 [0x947]:          newstr @412 // enum_decl   
2376 [0x948]:          movg @87 // @main.frontend.parser#ast_type   
2377 [0x949]:          movn #7   
2379 [0x94b]:          movn #0   
2381 [0x94d]:          popobj   
2382 [0x94e]:          movi #33193, ebx   
2384 [0x950]:          movg @87 // @main.frontend.parser#ast_type   
2385 [0x951]:          movn #7   
2387 [0x953]:          movn #1   
2389 [0x955]:          movi #0, adx   
2391 [0x957]:          rmov adx, ebx   
2392 [0x958]:          new_class @87 // main.frontend.parser#ast_type   
2394 [0x95a]:          movg @87 // @main.frontend.parser#ast_type   
2395 [0x95b]:          movn #8   
2397 [0x95d]:          popobj   
2398 [0x95e]:          newstr @413 // delegate_post_decl   
2399 [0x95f]:          movg @87 // @main.frontend.parser#ast_type   
2400 [0x960]:          movn #8   
2402 [0x962]:          movn #0   
2404 [0x964]:          popobj   
2405 [0x965]:          movi #33194, ebx   
2407 [0x967]:          movg @87 // @main.frontend.parser#ast_type   
2408 [0x968]:          movn #8   
2410 [0x96a]:          movn #1   
2412 [0x96c]:          movi #0, adx   
2414 [0x96e]:          rmov adx, ebx   
2415 [0x96f]:          new_class @87 // main.frontend.parser#ast_type   
2417 [0x971]:          movg @87 // @main.frontend.parser#ast_type   
2418 [0x972]:          movn #9   
2420 [0x974]:          popobj   
2421 [0x975]:          newstr @414 // delegate_decl   
2422 [0x976]:          movg @87 // @main.frontend.parser#ast_type   
2423 [0x977]:          movn #9   
2425 [0x979]:          movn #0   
2427 [0x97b]:          popobj   
2428 [0x97c]:          movi #33195, ebx   
2430 [0x97e]:          movg @87 // @main.frontend.parser#ast_type   
2431 [0x97f]:          movn #9   
2433 [0x981]:          movn #1   
2435 [0x983]:          movi #0, adx   
2437 [0x985]:          rmov adx, ebx   
2438 [0x986]:          new_class @87 // main.frontend.parser#ast_type   
2440 [0x988]:          movg @87 // @main.frontend.parser#ast_type   
2441 [0x989]:          movn #10   
2443 [0x98b]:          popobj   
2444 [0x98c]:          newstr @415 // constructor_decl   
2445 [0x98d]:          movg @87 // @main.frontend.parser#ast_type   
2446 [0x98e]:          movn #10   
2448 [0x990]:          movn #0   
2450 [0x992]:          popobj   
2451 [0x993]:          movi #33196, ebx   
2453 [0x995]:          movg @87 // @main.frontend.parser#ast_type   
2454 [0x996]:          movn #10   
2456 [0x998]:          movn #1   
2458 [0x99a]:          movi #0, adx   
2460 [0x99c]:          rmov adx, ebx   
2461 [0x99d]:          new_class @87 // main.frontend.parser#ast_type   
2463 [0x99f]:          movg @87 // @main.frontend.parser#ast_type   
2464 [0x9a0]:          movn #11   
2466 [0x9a2]:          popobj   
2467 [0x9a3]:          newstr @416 // label_decl   
2468 [0x9a4]:          movg @87 // @main.frontend.parser#ast_type   
2469 [0x9a5]:          movn #11   
2471 [0x9a7]:          movn #0   
2473 [0x9a9]:          popobj   
2474 [0x9aa]:          movi #33197, ebx   
2476 [0x9ac]:          movg @87 // @main.frontend.parser#ast_type   
2477 [0x9ad]:          movn #11   
2479 [0x9af]:          movn #1   
2481 [0x9b1]:          movi #0, adx   
2483 [0x9b3]:          rmov adx, ebx   
2484 [0x9b4]:          new_class @87 // main.frontend.parser#ast_type   
2486 [0x9b6]:          movg @87 // @main.frontend.parser#ast_type   
2487 [0x9b7]:          movn #12   
2489 [0x9b9]:          popobj   
2490 [0x9ba]:          newstr @417 // operator_decl   
2491 [0x9bb]:          movg @87 // @main.frontend.parser#ast_type   
2492 [0x9bc]:          movn #12   
2494 [0x9be]:          movn #0   
2496 [0x9c0]:          popobj   
2497 [0x9c1]:          movi #33198, ebx   
2499 [0x9c3]:          movg @87 // @main.frontend.parser#ast_type   
2500 [0x9c4]:          movn #12   
2502 [0x9c6]:          movn #1   
2504 [0x9c8]:          movi #0, adx   
2506 [0x9ca]:          rmov adx, ebx   
2507 [0x9cb]:          new_class @87 // main.frontend.parser#ast_type   
2509 [0x9cd]:          movg @87 // @main.frontend.parser#ast_type   
2510 [0x9ce]:          movn #13   
2512 [0x9d0]:          popobj   
2513 [0x9d1]:          newstr @418 // var_decl   
2514 [0x9d2]:          movg @87 // @main.frontend.parser#ast_type   
2515 [0x9d3]:          movn #13   
2517 [0x9d5]:          movn #0   
2519 [0x9d7]:          popobj   
2520 [0x9d8]:          movi #33199, ebx   
2522 [0x9da]:          movg @87 // @main.frontend.parser#ast_type   
2523 [0x9db]:          movn #13   
2525 [0x9dd]:          movn #1   
2527 [0x9df]:          movi #0, adx   
2529 [0x9e1]:          rmov adx, ebx   
2530 [0x9e2]:          new_class @87 // main.frontend.parser#ast_type   
2532 [0x9e4]:          movg @87 // @main.frontend.parser#ast_type   
2533 [0x9e5]:          movn #14   
2535 [0x9e7]:          popobj   
2536 [0x9e8]:          newstr @419 // switch_declarator   
2537 [0x9e9]:          movg @87 // @main.frontend.parser#ast_type   
2538 [0x9ea]:          movn #14   
2540 [0x9ec]:          movn #0   
2542 [0x9ee]:          popobj   
2543 [0x9ef]:          movi #33200, ebx   
2545 [0x9f1]:          movg @87 // @main.frontend.parser#ast_type   
2546 [0x9f2]:          movn #14   
2548 [0x9f4]:          movn #1   
2550 [0x9f6]:          movi #0, adx   
2552 [0x9f8]:          rmov adx, ebx   
2553 [0x9f9]:          new_class @87 // main.frontend.parser#ast_type   
2555 [0x9fb]:          movg @87 // @main.frontend.parser#ast_type   
2556 [0x9fc]:          movn #15   
2558 [0x9fe]:          popobj   
2559 [0x9ff]:          newstr @420 // value   
2560 [0xa00]:          movg @87 // @main.frontend.parser#ast_type   
2561 [0xa01]:          movn #15   
2563 [0xa03]:          movn #0   
2565 [0xa05]:          popobj   
2566 [0xa06]:          movi #33201, ebx   
2568 [0xa08]:          movg @87 // @main.frontend.parser#ast_type   
2569 [0xa09]:          movn #15   
2571 [0xa0b]:          movn #1   
2573 [0xa0d]:          movi #0, adx   
2575 [0xa0f]:          rmov adx, ebx   
2576 [0xa10]:          new_class @87 // main.frontend.parser#ast_type   
2578 [0xa12]:          movg @87 // @main.frontend.parser#ast_type   
2579 [0xa13]:          movn #16   
2581 [0xa15]:          popobj   
2582 [0xa16]:          newstr @421 // value_list   
2583 [0xa17]:          movg @87 // @main.frontend.parser#ast_type   
2584 [0xa18]:          movn #16   
2586 [0xa1a]:          movn #0   
2588 [0xa1c]:          popobj   
2589 [0xa1d]:          movi #33202, ebx   
2591 [0xa1f]:          movg @87 // @main.frontend.parser#ast_type   
2592 [0xa20]:          movn #16   
2594 [0xa22]:          movn #1   
2596 [0xa24]:          movi #0, adx   
2598 [0xa26]:          rmov adx, ebx   
2599 [0xa27]:          new_class @87 // main.frontend.parser#ast_type   
2601 [0xa29]:          movg @87 // @main.frontend.parser#ast_type   
2602 [0xa2a]:          movn #17   
2604 [0xa2c]:          popobj   
2605 [0xa2d]:          newstr @422 // utype_arg_list   
2606 [0xa2e]:          movg @87 // @main.frontend.parser#ast_type   
2607 [0xa2f]:          movn #17   
2609 [0xa31]:          movn #0   
2611 [0xa33]:          popobj   
2612 [0xa34]:          movi #33203, ebx   
2614 [0xa36]:          movg @87 // @main.frontend.parser#ast_type   
2615 [0xa37]:          movn #17   
2617 [0xa39]:          movn #1   
2619 [0xa3b]:          movi #0, adx   
2621 [0xa3d]:          rmov adx, ebx   
2622 [0xa3e]:          new_class @87 // main.frontend.parser#ast_type   
2624 [0xa40]:          movg @87 // @main.frontend.parser#ast_type   
2625 [0xa41]:          movn #18   
2627 [0xa43]:          popobj   
2628 [0xa44]:          newstr @423 // utype_arg_list_opt   
2629 [0xa45]:          movg @87 // @main.frontend.parser#ast_type   
2630 [0xa46]:          movn #18   
2632 [0xa48]:          movn #0   
2634 [0xa4a]:          popobj   
2635 [0xa4b]:          movi #33204, ebx   
2637 [0xa4d]:          movg @87 // @main.frontend.parser#ast_type   
2638 [0xa4e]:          movn #18   
2640 [0xa50]:          movn #1   
2642 [0xa52]:          movi #0, adx   
2644 [0xa54]:          rmov adx, ebx   
2645 [0xa55]:          new_class @87 // main.frontend.parser#ast_type   
2647 [0xa57]:          movg @87 // @main.frontend.parser#ast_type   
2648 [0xa58]:          movn #19   
2650 [0xa5a]:          popobj   
2651 [0xa5b]:          newstr @424 // reference_identifier_list   
2652 [0xa5c]:          movg @87 // @main.frontend.parser#ast_type   
2653 [0xa5d]:          movn #19   
2655 [0xa5f]:          movn #0   
2657 [0xa61]:          popobj   
2658 [0xa62]:          movi #33205, ebx   
2660 [0xa64]:          movg @87 // @main.frontend.parser#ast_type   
2661 [0xa65]:          movn #19   
2663 [0xa67]:          movn #1   
2665 [0xa69]:          movi #0, adx   
2667 [0xa6b]:          rmov adx, ebx   
2668 [0xa6c]:          new_class @87 // main.frontend.parser#ast_type   
2670 [0xa6e]:          movg @87 // @main.frontend.parser#ast_type   
2671 [0xa6f]:          movn #20   
2673 [0xa71]:          popobj   
2674 [0xa72]:          newstr @425 // utype_list   
2675 [0xa73]:          movg @87 // @main.frontend.parser#ast_type   
2676 [0xa74]:          movn #20   
2678 [0xa76]:          movn #0   
2680 [0xa78]:          popobj   
2681 [0xa79]:          movi #33206, ebx   
2683 [0xa7b]:          movg @87 // @main.frontend.parser#ast_type   
2684 [0xa7c]:          movn #20   
2686 [0xa7e]:          movn #1   
2688 [0xa80]:          movi #0, adx   
2690 [0xa82]:          rmov adx, ebx   
2691 [0xa83]:          new_class @87 // main.frontend.parser#ast_type   
2693 [0xa85]:          movg @87 // @main.frontend.parser#ast_type   
2694 [0xa86]:          movn #21   
2696 [0xa88]:          popobj   
2697 [0xa89]:          newstr @426 // identifier_list   
2698 [0xa8a]:          movg @87 // @main.frontend.parser#ast_type   
2699 [0xa8b]:          movn #21   
2701 [0xa8d]:          movn #0   
2703 [0xa8f]:          popobj   
2704 [0xa90]:          movi #33207, ebx   
2706 [0xa92]:          movg @87 // @main.frontend.parser#ast_type   
2707 [0xa93]:          movn #21   
2709 [0xa95]:          movn #1   
2711 [0xa97]:          movi #0, adx   
2713 [0xa99]:          rmov adx, ebx   
2714 [0xa9a]:          new_class @87 // main.frontend.parser#ast_type   
2716 [0xa9c]:          movg @87 // @main.frontend.parser#ast_type   
2717 [0xa9d]:          movn #22   
2719 [0xa9f]:          popobj   
2720 [0xaa0]:          newstr @427 // enum_identifier_list   
2721 [0xaa1]:          movg @87 // @main.frontend.parser#ast_type   
2722 [0xaa2]:          movn #22   
2724 [0xaa4]:          movn #0   
2726 [0xaa6]:          popobj   
2727 [0xaa7]:          movi #33208, ebx   
2729 [0xaa9]:          movg @87 // @main.frontend.parser#ast_type   
2730 [0xaaa]:          movn #22   
2732 [0xaac]:          movn #1   
2734 [0xaae]:          movi #0, adx   
2736 [0xab0]:          rmov adx, ebx   
2737 [0xab1]:          new_class @87 // main.frontend.parser#ast_type   
2739 [0xab3]:          movg @87 // @main.frontend.parser#ast_type   
2740 [0xab4]:          movn #23   
2742 [0xab6]:          popobj   
2743 [0xab7]:          newstr @428 // vector_array   
2744 [0xab8]:          movg @87 // @main.frontend.parser#ast_type   
2745 [0xab9]:          movn #23   
2747 [0xabb]:          movn #0   
2749 [0xabd]:          popobj   
2750 [0xabe]:          movi #33209, ebx   
2752 [0xac0]:          movg @87 // @main.frontend.parser#ast_type   
2753 [0xac1]:          movn #23   
2755 [0xac3]:          movn #1   
2757 [0xac5]:          movi #0, adx   
2759 [0xac7]:          rmov adx, ebx   
2760 [0xac8]:          new_class @87 // main.frontend.parser#ast_type   
2762 [0xaca]:          movg @87 // @main.frontend.parser#ast_type   
2763 [0xacb]:          movn #24   
2765 [0xacd]:          popobj   
2766 [0xace]:          newstr @429 // utype_arg   
2767 [0xacf]:          movg @87 // @main.frontend.parser#ast_type   
2768 [0xad0]:          movn #24   
2770 [0xad2]:          movn #0   
2772 [0xad4]:          popobj   
2773 [0xad5]:          movi #33210, ebx   
2775 [0xad7]:          movg @87 // @main.frontend.parser#ast_type   
2776 [0xad8]:          movn #24   
2778 [0xada]:          movn #1   
2780 [0xadc]:          movi #0, adx   
2782 [0xade]:          rmov adx, ebx   
2783 [0xadf]:          new_class @87 // main.frontend.parser#ast_type   
2785 [0xae1]:          movg @87 // @main.frontend.parser#ast_type   
2786 [0xae2]:          movn #25   
2788 [0xae4]:          popobj   
2789 [0xae5]:          newstr @430 // utype_arg_opt   
2790 [0xae6]:          movg @87 // @main.frontend.parser#ast_type   
2791 [0xae7]:          movn #25   
2793 [0xae9]:          movn #0   
2795 [0xaeb]:          popobj   
2796 [0xaec]:          movi #33211, ebx   
2798 [0xaee]:          movg @87 // @main.frontend.parser#ast_type   
2799 [0xaef]:          movn #25   
2801 [0xaf1]:          movn #1   
2803 [0xaf3]:          movi #0, adx   
2805 [0xaf5]:          rmov adx, ebx   
2806 [0xaf6]:          new_class @87 // main.frontend.parser#ast_type   
2808 [0xaf8]:          movg @87 // @main.frontend.parser#ast_type   
2809 [0xaf9]:          movn #26   
2811 [0xafb]:          popobj   
2812 [0xafc]:          newstr @431 // expression   
2813 [0xafd]:          movg @87 // @main.frontend.parser#ast_type   
2814 [0xafe]:          movn #26   
2816 [0xb00]:          movn #0   
2818 [0xb02]:          popobj   
2819 [0xb03]:          movi #33212, ebx   
2821 [0xb05]:          movg @87 // @main.frontend.parser#ast_type   
2822 [0xb06]:          movn #26   
2824 [0xb08]:          movn #1   
2826 [0xb0a]:          movi #0, adx   
2828 [0xb0c]:          rmov adx, ebx   
2829 [0xb0d]:          new_class @87 // main.frontend.parser#ast_type   
2831 [0xb0f]:          movg @87 // @main.frontend.parser#ast_type   
2832 [0xb10]:          movn #27   
2834 [0xb12]:          popobj   
2835 [0xb13]:          newstr @432 // array_expression   
2836 [0xb14]:          movg @87 // @main.frontend.parser#ast_type   
2837 [0xb15]:          movn #27   
2839 [0xb17]:          movn #0   
2841 [0xb19]:          popobj   
2842 [0xb1a]:          movi #33213, ebx   
2844 [0xb1c]:          movg @87 // @main.frontend.parser#ast_type   
2845 [0xb1d]:          movn #27   
2847 [0xb1f]:          movn #1   
2849 [0xb21]:          movi #0, adx   
2851 [0xb23]:          rmov adx, ebx   
2852 [0xb24]:          new_class @87 // main.frontend.parser#ast_type   
2854 [0xb26]:          movg @87 // @main.frontend.parser#ast_type   
2855 [0xb27]:          movn #28   
2857 [0xb29]:          popobj   
2858 [0xb2a]:          newstr @433 // primary_expression   
2859 [0xb2b]:          movg @87 // @main.frontend.parser#ast_type   
2860 [0xb2c]:          movn #28   
2862 [0xb2e]:          movn #0   
2864 [0xb30]:          popobj   
2865 [0xb31]:          movi #33214, ebx   
2867 [0xb33]:          movg @87 // @main.frontend.parser#ast_type   
2868 [0xb34]:          movn #28   
2870 [0xb36]:          movn #1   
2872 [0xb38]:          movi #0, adx   
2874 [0xb3a]:          rmov adx, ebx   
2875 [0xb3b]:          new_class @87 // main.frontend.parser#ast_type   
2877 [0xb3d]:          movg @87 // @main.frontend.parser#ast_type   
2878 [0xb3e]:          movn #29   
2880 [0xb40]:          popobj   
2881 [0xb41]:          newstr @434 // dotnotation_call_expr   
2882 [0xb42]:          movg @87 // @main.frontend.parser#ast_type   
2883 [0xb43]:          movn #29   
2885 [0xb45]:          movn #0   
2887 [0xb47]:          popobj   
2888 [0xb48]:          movi #33215, ebx   
2890 [0xb4a]:          movg @87 // @main.frontend.parser#ast_type   
2891 [0xb4b]:          movn #29   
2893 [0xb4d]:          movn #1   
2895 [0xb4f]:          movi #0, adx   
2897 [0xb51]:          rmov adx, ebx   
2898 [0xb52]:          new_class @87 // main.frontend.parser#ast_type   
2900 [0xb54]:          movg @87 // @main.frontend.parser#ast_type   
2901 [0xb55]:          movn #30   
2903 [0xb57]:          popobj   
2904 [0xb58]:          newstr @435 // utype   
2905 [0xb59]:          movg @87 // @main.frontend.parser#ast_type   
2906 [0xb5a]:          movn #30   
2908 [0xb5c]:          movn #0   
2910 [0xb5e]:          popobj   
2911 [0xb5f]:          movi #33216, ebx   
2913 [0xb61]:          movg @87 // @main.frontend.parser#ast_type   
2914 [0xb62]:          movn #30   
2916 [0xb64]:          movn #1   
2918 [0xb66]:          movi #0, adx   
2920 [0xb68]:          rmov adx, ebx   
2921 [0xb69]:          new_class @87 // main.frontend.parser#ast_type   
2923 [0xb6b]:          movg @87 // @main.frontend.parser#ast_type   
2924 [0xb6c]:          movn #31   
2926 [0xb6e]:          popobj   
2927 [0xb6f]:          newstr @436 // block   
2928 [0xb70]:          movg @87 // @main.frontend.parser#ast_type   
2929 [0xb71]:          movn #31   
2931 [0xb73]:          movn #0   
2933 [0xb75]:          popobj   
2934 [0xb76]:          movi #33217, ebx   
2936 [0xb78]:          movg @87 // @main.frontend.parser#ast_type   
2937 [0xb79]:          movn #31   
2939 [0xb7b]:          movn #1   
2941 [0xb7d]:          movi #0, adx   
2943 [0xb7f]:          rmov adx, ebx   
2944 [0xb80]:          new_class @87 // main.frontend.parser#ast_type   
2946 [0xb82]:          movg @87 // @main.frontend.parser#ast_type   
2947 [0xb83]:          movn #32   
2949 [0xb85]:          popobj   
2950 [0xb86]:          newstr @437 // switch_block   
2951 [0xb87]:          movg @87 // @main.frontend.parser#ast_type   
2952 [0xb88]:          movn #32   
2954 [0xb8a]:          movn #0   
2956 [0xb8c]:          popobj   
2957 [0xb8d]:          movi #33218, ebx   
2959 [0xb8f]:          movg @87 // @main.frontend.parser#ast_type   
2960 [0xb90]:          movn #32   
2962 [0xb92]:          movn #1   
2964 [0xb94]:          movi #0, adx   
2966 [0xb96]:          rmov adx, ebx   
2967 [0xb97]:          new_class @87 // main.frontend.parser#ast_type   
2969 [0xb99]:          movg @87 // @main.frontend.parser#ast_type   
2970 [0xb9a]:          movn #33   
2972 [0xb9c]:          popobj   
2973 [0xb9d]:          newstr @438 // finally_block   
2974 [0xb9e]:          movg @87 // @main.frontend.parser#ast_type   
2975 [0xb9f]:          movn #33   
2977 [0xba1]:          movn #0   
2979 [0xba3]:          popobj   
2980 [0xba4]:          movi #33219, ebx   
2982 [0xba6]:          movg @87 // @main.frontend.parser#ast_type   
2983 [0xba7]:          movn #33   
2985 [0xba9]:          movn #1   
2987 [0xbab]:          movi #0, adx   
2989 [0xbad]:          rmov adx, ebx   
2990 [0xbae]:          new_class @87 // main.frontend.parser#ast_type   
2992 [0xbb0]:          movg @87 // @main.frontend.parser#ast_type   
2993 [0xbb1]:          movn #34   
2995 [0xbb3]:          popobj   
2996 [0xbb4]:          newstr @439 // assembly_block   
2997 [0xbb5]:          movg @87 // @main.frontend.parser#ast_type   
2998 [0xbb6]:          movn #34   
3000 [0xbb8]:          movn #0   
3002 [0xbba]:          popobj   
3003 [0xbbb]:          movi #33220, ebx   
3005 [0xbbd]:          movg @87 // @main.frontend.parser#ast_type   
3006 [0xbbe]:          movn #34   
3008 [0xbc0]:          movn #1   
3010 [0xbc2]:          movi #0, adx   
3012 [0xbc4]:          rmov adx, ebx   
3013 [0xbc5]:          new_class @87 // main.frontend.parser#ast_type   
3015 [0xbc7]:          movg @87 // @main.frontend.parser#ast_type   
3016 [0xbc8]:          movn #35   
3018 [0xbca]:          popobj   
3019 [0xbcb]:          newstr @440 // catch_clause   
3020 [0xbcc]:          movg @87 // @main.frontend.parser#ast_type   
3021 [0xbcd]:          movn #35   
3023 [0xbcf]:          movn #0   
3025 [0xbd1]:          popobj   
3026 [0xbd2]:          movi #33221, ebx   
3028 [0xbd4]:          movg @87 // @main.frontend.parser#ast_type   
3029 [0xbd5]:          movn #35   
3031 [0xbd7]:          movn #1   
3033 [0xbd9]:          movi #0, adx   
3035 [0xbdb]:          rmov adx, ebx   
3036 [0xbdc]:          new_class @87 // main.frontend.parser#ast_type   
3038 [0xbde]:          movg @87 // @main.frontend.parser#ast_type   
3039 [0xbdf]:          movn #36   
3041 [0xbe1]:          popobj   
3042 [0xbe2]:          newstr @441 // method_return_type   
3043 [0xbe3]:          movg @87 // @main.frontend.parser#ast_type   
3044 [0xbe4]:          movn #36   
3046 [0xbe6]:          movn #0   
3048 [0xbe8]:          popobj   
3049 [0xbe9]:          movi #33222, ebx   
3051 [0xbeb]:          movg @87 // @main.frontend.parser#ast_type   
3052 [0xbec]:          movn #36   
3054 [0xbee]:          movn #1   
3056 [0xbf0]:          movi #0, adx   
3058 [0xbf2]:          rmov adx, ebx   
3059 [0xbf3]:          new_class @87 // main.frontend.parser#ast_type   
3061 [0xbf5]:          movg @87 // @main.frontend.parser#ast_type   
3062 [0xbf6]:          movn #37   
3064 [0xbf8]:          popobj   
3065 [0xbf9]:          newstr @442 // return_stmnt   
3066 [0xbfa]:          movg @87 // @main.frontend.parser#ast_type   
3067 [0xbfb]:          movn #37   
3069 [0xbfd]:          movn #0   
3071 [0xbff]:          popobj   
3072 [0xc00]:          movi #33223, ebx   
3074 [0xc02]:          movg @87 // @main.frontend.parser#ast_type   
3075 [0xc03]:          movn #37   
3077 [0xc05]:          movn #1   
3079 [0xc07]:          movi #0, adx   
3081 [0xc09]:          rmov adx, ebx   
3082 [0xc0a]:          new_class @87 // main.frontend.parser#ast_type   
3084 [0xc0c]:          movg @87 // @main.frontend.parser#ast_type   
3085 [0xc0d]:          movn #38   
3087 [0xc0f]:          popobj   
3088 [0xc10]:          newstr @443 // statement   
3089 [0xc11]:          movg @87 // @main.frontend.parser#ast_type   
3090 [0xc12]:          movn #38   
3092 [0xc14]:          movn #0   
3094 [0xc16]:          popobj   
3095 [0xc17]:          movi #33224, ebx   
3097 [0xc19]:          movg @87 // @main.frontend.parser#ast_type   
3098 [0xc1a]:          movn #38   
3100 [0xc1c]:          movn #1   
3102 [0xc1e]:          movi #0, adx   
3104 [0xc20]:          rmov adx, ebx   
3105 [0xc21]:          new_class @87 // main.frontend.parser#ast_type   
3107 [0xc23]:          movg @87 // @main.frontend.parser#ast_type   
3108 [0xc24]:          movn #39   
3110 [0xc26]:          popobj   
3111 [0xc27]:          newstr @444 // if_statement   
3112 [0xc28]:          movg @87 // @main.frontend.parser#ast_type   
3113 [0xc29]:          movn #39   
3115 [0xc2b]:          movn #0   
3117 [0xc2d]:          popobj   
3118 [0xc2e]:          movi #33225, ebx   
3120 [0xc30]:          movg @87 // @main.frontend.parser#ast_type   
3121 [0xc31]:          movn #39   
3123 [0xc33]:          movn #1   
3125 [0xc35]:          movi #0, adx   
3127 [0xc37]:          rmov adx, ebx   
3128 [0xc38]:          new_class @87 // main.frontend.parser#ast_type   
3130 [0xc3a]:          movg @87 // @main.frontend.parser#ast_type   
3131 [0xc3b]:          movn #40   
3133 [0xc3d]:          popobj   
3134 [0xc3e]:          newstr @445 // switch_statement   
3135 [0xc3f]:          movg @87 // @main.frontend.parser#ast_type   
3136 [0xc40]:          movn #40   
3138 [0xc42]:          movn #0   
3140 [0xc44]:          popobj   
3141 [0xc45]:          movi #33226, ebx   
3143 [0xc47]:          movg @87 // @main.frontend.parser#ast_type   
3144 [0xc48]:          movn #40   
3146 [0xc4a]:          movn #1   
3148 [0xc4c]:          movi #0, adx   
3150 [0xc4e]:          rmov adx, ebx   
3151 [0xc4f]:          new_class @87 // main.frontend.parser#ast_type   
3153 [0xc51]:          movg @87 // @main.frontend.parser#ast_type   
3154 [0xc52]:          movn #41   
3156 [0xc54]:          popobj   
3157 [0xc55]:          newstr @446 // elseif_statement   
3158 [0xc56]:          movg @87 // @main.frontend.parser#ast_type   
3159 [0xc57]:          movn #41   
3161 [0xc59]:          movn #0   
3163 [0xc5b]:          popobj   
3164 [0xc5c]:          movi #33227, ebx   
3166 [0xc5e]:          movg @87 // @main.frontend.parser#ast_type   
3167 [0xc5f]:          movn #41   
3169 [0xc61]:          movn #1   
3171 [0xc63]:          movi #0, adx   
3173 [0xc65]:          rmov adx, ebx   
3174 [0xc66]:          new_class @87 // main.frontend.parser#ast_type   
3176 [0xc68]:          movg @87 // @main.frontend.parser#ast_type   
3177 [0xc69]:          movn #42   
3179 [0xc6b]:          popobj   
3180 [0xc6c]:          newstr @447 // else_statement   
3181 [0xc6d]:          movg @87 // @main.frontend.parser#ast_type   
3182 [0xc6e]:          movn #42   
3184 [0xc70]:          movn #0   
3186 [0xc72]:          popobj   
3187 [0xc73]:          movi #33228, ebx   
3189 [0xc75]:          movg @87 // @main.frontend.parser#ast_type   
3190 [0xc76]:          movn #42   
3192 [0xc78]:          movn #1   
3194 [0xc7a]:          movi #0, adx   
3196 [0xc7c]:          rmov adx, ebx   
3197 [0xc7d]:          new_class @87 // main.frontend.parser#ast_type   
3199 [0xc7f]:          movg @87 // @main.frontend.parser#ast_type   
3200 [0xc80]:          movn #43   
3202 [0xc82]:          popobj   
3203 [0xc83]:          newstr @448 // lock_statement   
3204 [0xc84]:          movg @87 // @main.frontend.parser#ast_type   
3205 [0xc85]:          movn #43   
3207 [0xc87]:          movn #0   
3209 [0xc89]:          popobj   
3210 [0xc8a]:          movi #33229, ebx   
3212 [0xc8c]:          movg @87 // @main.frontend.parser#ast_type   
3213 [0xc8d]:          movn #43   
3215 [0xc8f]:          movn #1   
3217 [0xc91]:          movi #0, adx   
3219 [0xc93]:          rmov adx, ebx   
3220 [0xc94]:          new_class @87 // main.frontend.parser#ast_type   
3222 [0xc96]:          movg @87 // @main.frontend.parser#ast_type   
3223 [0xc97]:          movn #44   
3225 [0xc99]:          popobj   
3226 [0xc9a]:          newstr @449 // trycatch_statement   
3227 [0xc9b]:          movg @87 // @main.frontend.parser#ast_type   
3228 [0xc9c]:          movn #44   
3230 [0xc9e]:          movn #0   
3232 [0xca0]:          popobj   
3233 [0xca1]:          movi #33230, ebx   
3235 [0xca3]:          movg @87 // @main.frontend.parser#ast_type   
3236 [0xca4]:          movn #44   
3238 [0xca6]:          movn #1   
3240 [0xca8]:          movi #0, adx   
3242 [0xcaa]:          rmov adx, ebx   
3243 [0xcab]:          new_class @87 // main.frontend.parser#ast_type   
3245 [0xcad]:          movg @87 // @main.frontend.parser#ast_type   
3246 [0xcae]:          movn #45   
3248 [0xcb0]:          popobj   
3249 [0xcb1]:          newstr @450 // throw_statement   
3250 [0xcb2]:          movg @87 // @main.frontend.parser#ast_type   
3251 [0xcb3]:          movn #45   
3253 [0xcb5]:          movn #0   
3255 [0xcb7]:          popobj   
3256 [0xcb8]:          movi #33231, ebx   
3258 [0xcba]:          movg @87 // @main.frontend.parser#ast_type   
3259 [0xcbb]:          movn #45   
3261 [0xcbd]:          movn #1   
3263 [0xcbf]:          movi #0, adx   
3265 [0xcc1]:          rmov adx, ebx   
3266 [0xcc2]:          new_class @87 // main.frontend.parser#ast_type   
3268 [0xcc4]:          movg @87 // @main.frontend.parser#ast_type   
3269 [0xcc5]:          movn #46   
3271 [0xcc7]:          popobj   
3272 [0xcc8]:          newstr @451 // continue_statement   
3273 [0xcc9]:          movg @87 // @main.frontend.parser#ast_type   
3274 [0xcca]:          movn #46   
3276 [0xccc]:          movn #0   
3278 [0xcce]:          popobj   
3279 [0xccf]:          movi #33232, ebx   
3281 [0xcd1]:          movg @87 // @main.frontend.parser#ast_type   
3282 [0xcd2]:          movn #46   
3284 [0xcd4]:          movn #1   
3286 [0xcd6]:          movi #0, adx   
3288 [0xcd8]:          rmov adx, ebx   
3289 [0xcd9]:          new_class @87 // main.frontend.parser#ast_type   
3291 [0xcdb]:          movg @87 // @main.frontend.parser#ast_type   
3292 [0xcdc]:          movn #47   
3294 [0xcde]:          popobj   
3295 [0xcdf]:          newstr @452 // break_statement   
3296 [0xce0]:          movg @87 // @main.frontend.parser#ast_type   
3297 [0xce1]:          movn #47   
3299 [0xce3]:          movn #0   
3301 [0xce5]:          popobj   
3302 [0xce6]:          movi #33233, ebx   
3304 [0xce8]:          movg @87 // @main.frontend.parser#ast_type   
3305 [0xce9]:          movn #47   
3307 [0xceb]:          movn #1   
3309 [0xced]:          movi #0, adx   
3311 [0xcef]:          rmov adx, ebx   
3312 [0xcf0]:          new_class @87 // main.frontend.parser#ast_type   
3314 [0xcf2]:          movg @87 // @main.frontend.parser#ast_type   
3315 [0xcf3]:          movn #48   
3317 [0xcf5]:          popobj   
3318 [0xcf6]:          newstr @453 // goto_statement   
3319 [0xcf7]:          movg @87 // @main.frontend.parser#ast_type   
3320 [0xcf8]:          movn #48   
3322 [0xcfa]:          movn #0   
3324 [0xcfc]:          popobj   
3325 [0xcfd]:          movi #33234, ebx   
3327 [0xcff]:          movg @87 // @main.frontend.parser#ast_type   
3328 [0xd00]:          movn #48   
3330 [0xd02]:          movn #1   
3332 [0xd04]:          movi #0, adx   
3334 [0xd06]:          rmov adx, ebx   
3335 [0xd07]:          new_class @87 // main.frontend.parser#ast_type   
3337 [0xd09]:          movg @87 // @main.frontend.parser#ast_type   
3338 [0xd0a]:          movn #49   
3340 [0xd0c]:          popobj   
3341 [0xd0d]:          newstr @454 // while_statement   
3342 [0xd0e]:          movg @87 // @main.frontend.parser#ast_type   
3343 [0xd0f]:          movn #49   
3345 [0xd11]:          movn #0   
3347 [0xd13]:          popobj   
3348 [0xd14]:          movi #33235, ebx   
3350 [0xd16]:          movg @87 // @main.frontend.parser#ast_type   
3351 [0xd17]:          movn #49   
3353 [0xd19]:          movn #1   
3355 [0xd1b]:          movi #0, adx   
3357 [0xd1d]:          rmov adx, ebx   
3358 [0xd1e]:          new_class @87 // main.frontend.parser#ast_type   
3360 [0xd20]:          movg @87 // @main.frontend.parser#ast_type   
3361 [0xd21]:          movn #50   
3363 [0xd23]:          popobj   
3364 [0xd24]:          newstr @455 // do_while_statement   
3365 [0xd25]:          movg @87 // @main.frontend.parser#ast_type   
3366 [0xd26]:          movn #50   
3368 [0xd28]:          movn #0   
3370 [0xd2a]:          popobj   
3371 [0xd2b]:          movi #33236, ebx   
3373 [0xd2d]:          movg @87 // @main.frontend.parser#ast_type   
3374 [0xd2e]:          movn #50   
3376 [0xd30]:          movn #1   
3378 [0xd32]:          movi #0, adx   
3380 [0xd34]:          rmov adx, ebx   
3381 [0xd35]:          new_class @87 // main.frontend.parser#ast_type   
3383 [0xd37]:          movg @87 // @main.frontend.parser#ast_type   
3384 [0xd38]:          movn #51   
3386 [0xd3a]:          popobj   
3387 [0xd3b]:          newstr @456 // assembly_statement   
3388 [0xd3c]:          movg @87 // @main.frontend.parser#ast_type   
3389 [0xd3d]:          movn #51   
3391 [0xd3f]:          movn #0   
3393 [0xd41]:          popobj   
3394 [0xd42]:          movi #33237, ebx   
3396 [0xd44]:          movg @87 // @main.frontend.parser#ast_type   
3397 [0xd45]:          movn #51   
3399 [0xd47]:          movn #1   
3401 [0xd49]:          movi #0, adx   
3403 [0xd4b]:          rmov adx, ebx   
3404 [0xd4c]:          new_class @87 // main.frontend.parser#ast_type   
3406 [0xd4e]:          movg @87 // @main.frontend.parser#ast_type   
3407 [0xd4f]:          movn #52   
3409 [0xd51]:          popobj   
3410 [0xd52]:          newstr @457 // for_statement   
3411 [0xd53]:          movg @87 // @main.frontend.parser#ast_type   
3412 [0xd54]:          movn #52   
3414 [0xd56]:          movn #0   
3416 [0xd58]:          popobj   
3417 [0xd59]:          movi #33238, ebx   
3419 [0xd5b]:          movg @87 // @main.frontend.parser#ast_type   
3420 [0xd5c]:          movn #52   
3422 [0xd5e]:          movn #1   
3424 [0xd60]:          movi #0, adx   
3426 [0xd62]:          rmov adx, ebx   
3427 [0xd63]:          new_class @87 // main.frontend.parser#ast_type   
3429 [0xd65]:          movg @87 // @main.frontend.parser#ast_type   
3430 [0xd66]:          movn #53   
3432 [0xd68]:          popobj   
3433 [0xd69]:          newstr @458 // for_expression_cond   
3434 [0xd6a]:          movg @87 // @main.frontend.parser#ast_type   
3435 [0xd6b]:          movn #53   
3437 [0xd6d]:          movn #0   
3439 [0xd6f]:          popobj   
3440 [0xd70]:          movi #33239, ebx   
3442 [0xd72]:          movg @87 // @main.frontend.parser#ast_type   
3443 [0xd73]:          movn #53   
3445 [0xd75]:          movn #1   
3447 [0xd77]:          movi #0, adx   
3449 [0xd79]:          rmov adx, ebx   
3450 [0xd7a]:          new_class @87 // main.frontend.parser#ast_type   
3452 [0xd7c]:          movg @87 // @main.frontend.parser#ast_type   
3453 [0xd7d]:          movn #54   
3455 [0xd7f]:          popobj   
3456 [0xd80]:          newstr @459 // for_expression_iter   
3457 [0xd81]:          movg @87 // @main.frontend.parser#ast_type   
3458 [0xd82]:          movn #54   
3460 [0xd84]:          movn #0   
3462 [0xd86]:          popobj   
3463 [0xd87]:          movi #33240, ebx   
3465 [0xd89]:          movg @87 // @main.frontend.parser#ast_type   
3466 [0xd8a]:          movn #54   
3468 [0xd8c]:          movn #1   
3470 [0xd8e]:          movi #0, adx   
3472 [0xd90]:          rmov adx, ebx   
3473 [0xd91]:          new_class @87 // main.frontend.parser#ast_type   
3475 [0xd93]:          movg @87 // @main.frontend.parser#ast_type   
3476 [0xd94]:          movn #55   
3478 [0xd96]:          popobj   
3479 [0xd97]:          newstr @460 // foreach_statement   
3480 [0xd98]:          movg @87 // @main.frontend.parser#ast_type   
3481 [0xd99]:          movn #55   
3483 [0xd9b]:          movn #0   
3485 [0xd9d]:          popobj   
3486 [0xd9e]:          movi #33241, ebx   
3488 [0xda0]:          movg @87 // @main.frontend.parser#ast_type   
3489 [0xda1]:          movn #55   
3491 [0xda3]:          movn #1   
3493 [0xda5]:          movi #0, adx   
3495 [0xda7]:          rmov adx, ebx   
3496 [0xda8]:          new_class @87 // main.frontend.parser#ast_type   
3498 [0xdaa]:          movg @87 // @main.frontend.parser#ast_type   
3499 [0xdab]:          movn #56   
3501 [0xdad]:          popobj   
3502 [0xdae]:          newstr @461 // type_identifier   
3503 [0xdaf]:          movg @87 // @main.frontend.parser#ast_type   
3504 [0xdb0]:          movn #56   
3506 [0xdb2]:          movn #0   
3508 [0xdb4]:          popobj   
3509 [0xdb5]:          movi #33242, ebx   
3511 [0xdb7]:          movg @87 // @main.frontend.parser#ast_type   
3512 [0xdb8]:          movn #56   
3514 [0xdba]:          movn #1   
3516 [0xdbc]:          movi #0, adx   
3518 [0xdbe]:          rmov adx, ebx   
3519 [0xdbf]:          new_class @87 // main.frontend.parser#ast_type   
3521 [0xdc1]:          movg @87 // @main.frontend.parser#ast_type   
3522 [0xdc2]:          movn #57   
3524 [0xdc4]:          popobj   
3525 [0xdc5]:          newstr @462 // enum_identifier   
3526 [0xdc6]:          movg @87 // @main.frontend.parser#ast_type   
3527 [0xdc7]:          movn #57   
3529 [0xdc9]:          movn #0   
3531 [0xdcb]:          popobj   
3532 [0xdcc]:          movi #33243, ebx   
3534 [0xdce]:          movg @87 // @main.frontend.parser#ast_type   
3535 [0xdcf]:          movn #57   
3537 [0xdd1]:          movn #1   
3539 [0xdd3]:          movi #0, adx   
3541 [0xdd5]:          rmov adx, ebx   
3542 [0xdd6]:          new_class @87 // main.frontend.parser#ast_type   
3544 [0xdd8]:          movg @87 // @main.frontend.parser#ast_type   
3545 [0xdd9]:          movn #58   
3547 [0xddb]:          popobj   
3548 [0xddc]:          newstr @463 // func_prototype   
3549 [0xddd]:          movg @87 // @main.frontend.parser#ast_type   
3550 [0xdde]:          movn #58   
3552 [0xde0]:          movn #0   
3554 [0xde2]:          popobj   
3555 [0xde3]:          movi #33244, ebx   
3557 [0xde5]:          movg @87 // @main.frontend.parser#ast_type   
3558 [0xde6]:          movn #58   
3560 [0xde8]:          movn #1   
3562 [0xdea]:          movi #0, adx   
3564 [0xdec]:          rmov adx, ebx   
3565 [0xded]:          new_class @87 // main.frontend.parser#ast_type   
3567 [0xdef]:          movg @87 // @main.frontend.parser#ast_type   
3568 [0xdf0]:          movn #59   
3570 [0xdf2]:          popobj   
3571 [0xdf3]:          newstr @464 // reference_pointer   
3572 [0xdf4]:          movg @87 // @main.frontend.parser#ast_type   
3573 [0xdf5]:          movn #59   
3575 [0xdf7]:          movn #0   
3577 [0xdf9]:          popobj   
3578 [0xdfa]:          movi #33245, ebx   
3580 [0xdfc]:          movg @87 // @main.frontend.parser#ast_type   
3581 [0xdfd]:          movn #59   
3583 [0xdff]:          movn #1   
3585 [0xe01]:          movi #0, adx   
3587 [0xe03]:          rmov adx, ebx   
3588 [0xe04]:          new_class @87 // main.frontend.parser#ast_type   
3590 [0xe06]:          movg @87 // @main.frontend.parser#ast_type   
3591 [0xe07]:          movn #60   
3593 [0xe09]:          popobj   
3594 [0xe0a]:          newstr @465 // modulename   
3595 [0xe0b]:          movg @87 // @main.frontend.parser#ast_type   
3596 [0xe0c]:          movn #60   
3598 [0xe0e]:          movn #0   
3600 [0xe10]:          popobj   
3601 [0xe11]:          movi #33246, ebx   
3603 [0xe13]:          movg @87 // @main.frontend.parser#ast_type   
3604 [0xe14]:          movn #60   
3606 [0xe16]:          movn #1   
3608 [0xe18]:          movi #0, adx   
3610 [0xe1a]:          rmov adx, ebx   
3611 [0xe1b]:          new_class @87 // main.frontend.parser#ast_type   
3613 [0xe1d]:          movg @87 // @main.frontend.parser#ast_type   
3614 [0xe1e]:          movn #61   
3616 [0xe20]:          popobj   
3617 [0xe21]:          newstr @466 // literal   
3618 [0xe22]:          movg @87 // @main.frontend.parser#ast_type   
3619 [0xe23]:          movn #61   
3621 [0xe25]:          movn #0   
3623 [0xe27]:          popobj   
3624 [0xe28]:          movi #33247, ebx   
3626 [0xe2a]:          movg @87 // @main.frontend.parser#ast_type   
3627 [0xe2b]:          movn #61   
3629 [0xe2d]:          movn #1   
3631 [0xe2f]:          movi #0, adx   
3633 [0xe31]:          rmov adx, ebx   
3634 [0xe32]:          new_class @87 // main.frontend.parser#ast_type   
3636 [0xe34]:          movg @87 // @main.frontend.parser#ast_type   
3637 [0xe35]:          movn #62   
3639 [0xe37]:          popobj   
3640 [0xe38]:          newstr @467 // literal_e   
3641 [0xe39]:          movg @87 // @main.frontend.parser#ast_type   
3642 [0xe3a]:          movn #62   
3644 [0xe3c]:          movn #0   
3646 [0xe3e]:          popobj   
3647 [0xe3f]:          movi #33248, ebx   
3649 [0xe41]:          movg @87 // @main.frontend.parser#ast_type   
3650 [0xe42]:          movn #62   
3652 [0xe44]:          movn #1   
3654 [0xe46]:          movi #0, adx   
3656 [0xe48]:          rmov adx, ebx   
3657 [0xe49]:          new_class @87 // main.frontend.parser#ast_type   
3659 [0xe4b]:          movg @87 // @main.frontend.parser#ast_type   
3660 [0xe4c]:          movn #63   
3662 [0xe4e]:          popobj   
3663 [0xe4f]:          newstr @468 // utype_class_e   
3664 [0xe50]:          movg @87 // @main.frontend.parser#ast_type   
3665 [0xe51]:          movn #63   
3667 [0xe53]:          movn #0   
3669 [0xe55]:          popobj   
3670 [0xe56]:          movi #33249, ebx   
3672 [0xe58]:          movg @87 // @main.frontend.parser#ast_type   
3673 [0xe59]:          movn #63   
3675 [0xe5b]:          movn #1   
3677 [0xe5d]:          movi #0, adx   
3679 [0xe5f]:          rmov adx, ebx   
3680 [0xe60]:          new_class @87 // main.frontend.parser#ast_type   
3682 [0xe62]:          movg @87 // @main.frontend.parser#ast_type   
3683 [0xe63]:          movn #64   
3685 [0xe65]:          popobj   
3686 [0xe66]:          newstr @469 // dot_not_e   
3687 [0xe67]:          movg @87 // @main.frontend.parser#ast_type   
3688 [0xe68]:          movn #64   
3690 [0xe6a]:          movn #0   
3692 [0xe6c]:          popobj   
3693 [0xe6d]:          movi #33250, ebx   
3695 [0xe6f]:          movg @87 // @main.frontend.parser#ast_type   
3696 [0xe70]:          movn #64   
3698 [0xe72]:          movn #1   
3700 [0xe74]:          movi #0, adx   
3702 [0xe76]:          rmov adx, ebx   
3703 [0xe77]:          new_class @87 // main.frontend.parser#ast_type   
3705 [0xe79]:          movg @87 // @main.frontend.parser#ast_type   
3706 [0xe7a]:          movn #65   
3708 [0xe7c]:          popobj   
3709 [0xe7d]:          newstr @470 // self_e   
3710 [0xe7e]:          movg @87 // @main.frontend.parser#ast_type   
3711 [0xe7f]:          movn #65   
3713 [0xe81]:          movn #0   
3715 [0xe83]:          popobj   
3716 [0xe84]:          movi #33251, ebx   
3718 [0xe86]:          movg @87 // @main.frontend.parser#ast_type   
3719 [0xe87]:          movn #65   
3721 [0xe89]:          movn #1   
3723 [0xe8b]:          movi #0, adx   
3725 [0xe8d]:          rmov adx, ebx   
3726 [0xe8e]:          new_class @87 // main.frontend.parser#ast_type   
3728 [0xe90]:          movg @87 // @main.frontend.parser#ast_type   
3729 [0xe91]:          movn #66   
3731 [0xe93]:          popobj   
3732 [0xe94]:          newstr @471 // base_e   
3733 [0xe95]:          movg @87 // @main.frontend.parser#ast_type   
3734 [0xe96]:          movn #66   
3736 [0xe98]:          movn #0   
3738 [0xe9a]:          popobj   
3739 [0xe9b]:          movi #33252, ebx   
3741 [0xe9d]:          movg @87 // @main.frontend.parser#ast_type   
3742 [0xe9e]:          movn #66   
3744 [0xea0]:          movn #1   
3746 [0xea2]:          movi #0, adx   
3748 [0xea4]:          rmov adx, ebx   
3749 [0xea5]:          new_class @87 // main.frontend.parser#ast_type   
3751 [0xea7]:          movg @87 // @main.frontend.parser#ast_type   
3752 [0xea8]:          movn #67   
3754 [0xeaa]:          popobj   
3755 [0xeab]:          newstr @472 // null_e   
3756 [0xeac]:          movg @87 // @main.frontend.parser#ast_type   
3757 [0xead]:          movn #67   
3759 [0xeaf]:          movn #0   
3761 [0xeb1]:          popobj   
3762 [0xeb2]:          movi #33253, ebx   
3764 [0xeb4]:          movg @87 // @main.frontend.parser#ast_type   
3765 [0xeb5]:          movn #67   
3767 [0xeb7]:          movn #1   
3769 [0xeb9]:          movi #0, adx   
3771 [0xebb]:          rmov adx, ebx   
3772 [0xebc]:          new_class @87 // main.frontend.parser#ast_type   
3774 [0xebe]:          movg @87 // @main.frontend.parser#ast_type   
3775 [0xebf]:          movn #68   
3777 [0xec1]:          popobj   
3778 [0xec2]:          newstr @473 // new_e   
3779 [0xec3]:          movg @87 // @main.frontend.parser#ast_type   
3780 [0xec4]:          movn #68   
3782 [0xec6]:          movn #0   
3784 [0xec8]:          popobj   
3785 [0xec9]:          movi #33254, ebx   
3787 [0xecb]:          movg @87 // @main.frontend.parser#ast_type   
3788 [0xecc]:          movn #68   
3790 [0xece]:          movn #1   
3792 [0xed0]:          movi #0, adx   
3794 [0xed2]:          rmov adx, ebx   
3795 [0xed3]:          new_class @87 // main.frontend.parser#ast_type   
3797 [0xed5]:          movg @87 // @main.frontend.parser#ast_type   
3798 [0xed6]:          movn #69   
3800 [0xed8]:          popobj   
3801 [0xed9]:          newstr @474 // not_e   
3802 [0xeda]:          movg @87 // @main.frontend.parser#ast_type   
3803 [0xedb]:          movn #69   
3805 [0xedd]:          movn #0   
3807 [0xedf]:          popobj   
3808 [0xee0]:          movi #33255, ebx   
3810 [0xee2]:          movg @87 // @main.frontend.parser#ast_type   
3811 [0xee3]:          movn #69   
3813 [0xee5]:          movn #1   
3815 [0xee7]:          movi #0, adx   
3817 [0xee9]:          rmov adx, ebx   
3818 [0xeea]:          new_class @87 // main.frontend.parser#ast_type   
3820 [0xeec]:          movg @87 // @main.frontend.parser#ast_type   
3821 [0xeed]:          movn #70   
3823 [0xeef]:          popobj   
3824 [0xef0]:          newstr @475 // post_inc_e   
3825 [0xef1]:          movg @87 // @main.frontend.parser#ast_type   
3826 [0xef2]:          movn #70   
3828 [0xef4]:          movn #0   
3830 [0xef6]:          popobj   
3831 [0xef7]:          movi #33256, ebx   
3833 [0xef9]:          movg @87 // @main.frontend.parser#ast_type   
3834 [0xefa]:          movn #70   
3836 [0xefc]:          movn #1   
3838 [0xefe]:          movi #0, adx   
3840 [0xf00]:          rmov adx, ebx   
3841 [0xf01]:          new_class @87 // main.frontend.parser#ast_type   
3843 [0xf03]:          movg @87 // @main.frontend.parser#ast_type   
3844 [0xf04]:          movn #71   
3846 [0xf06]:          popobj   
3847 [0xf07]:          newstr @476 // arry_e   
3848 [0xf08]:          movg @87 // @main.frontend.parser#ast_type   
3849 [0xf09]:          movn #71   
3851 [0xf0b]:          movn #0   
3853 [0xf0d]:          popobj   
3854 [0xf0e]:          movi #33257, ebx   
3856 [0xf10]:          movg @87 // @main.frontend.parser#ast_type   
3857 [0xf11]:          movn #71   
3859 [0xf13]:          movn #1   
3861 [0xf15]:          movi #0, adx   
3863 [0xf17]:          rmov adx, ebx   
3864 [0xf18]:          new_class @87 // main.frontend.parser#ast_type   
3866 [0xf1a]:          movg @87 // @main.frontend.parser#ast_type   
3867 [0xf1b]:          movn #72   
3869 [0xf1d]:          popobj   
3870 [0xf1e]:          newstr @477 // dot_fn_e   
3871 [0xf1f]:          movg @87 // @main.frontend.parser#ast_type   
3872 [0xf20]:          movn #72   
3874 [0xf22]:          movn #0   
3876 [0xf24]:          popobj   
3877 [0xf25]:          movi #33258, ebx   
3879 [0xf27]:          movg @87 // @main.frontend.parser#ast_type   
3880 [0xf28]:          movn #72   
3882 [0xf2a]:          movn #1   
3884 [0xf2c]:          movi #0, adx   
3886 [0xf2e]:          rmov adx, ebx   
3887 [0xf2f]:          new_class @87 // main.frontend.parser#ast_type   
3889 [0xf31]:          movg @87 // @main.frontend.parser#ast_type   
3890 [0xf32]:          movn #73   
3892 [0xf34]:          popobj   
3893 [0xf35]:          newstr @478 // cast_e   
3894 [0xf36]:          movg @87 // @main.frontend.parser#ast_type   
3895 [0xf37]:          movn #73   
3897 [0xf39]:          movn #0   
3899 [0xf3b]:          popobj   
3900 [0xf3c]:          movi #33259, ebx   
3902 [0xf3e]:          movg @87 // @main.frontend.parser#ast_type   
3903 [0xf3f]:          movn #73   
3905 [0xf41]:          movn #1   
3907 [0xf43]:          movi #0, adx   
3909 [0xf45]:          rmov adx, ebx   
3910 [0xf46]:          new_class @87 // main.frontend.parser#ast_type   
3912 [0xf48]:          movg @87 // @main.frontend.parser#ast_type   
3913 [0xf49]:          movn #74   
3915 [0xf4b]:          popobj   
3916 [0xf4c]:          newstr @479 // pre_inc_e   
3917 [0xf4d]:          movg @87 // @main.frontend.parser#ast_type   
3918 [0xf4e]:          movn #74   
3920 [0xf50]:          movn #0   
3922 [0xf52]:          popobj   
3923 [0xf53]:          movi #33260, ebx   
3925 [0xf55]:          movg @87 // @main.frontend.parser#ast_type   
3926 [0xf56]:          movn #74   
3928 [0xf58]:          movn #1   
3930 [0xf5a]:          movi #0, adx   
3932 [0xf5c]:          rmov adx, ebx   
3933 [0xf5d]:          new_class @87 // main.frontend.parser#ast_type   
3935 [0xf5f]:          movg @87 // @main.frontend.parser#ast_type   
3936 [0xf60]:          movn #75   
3938 [0xf62]:          popobj   
3939 [0xf63]:          newstr @480 // paren_e   
3940 [0xf64]:          movg @87 // @main.frontend.parser#ast_type   
3941 [0xf65]:          movn #75   
3943 [0xf67]:          movn #0   
3945 [0xf69]:          popobj   
3946 [0xf6a]:          movi #33261, ebx   
3948 [0xf6c]:          movg @87 // @main.frontend.parser#ast_type   
3949 [0xf6d]:          movn #75   
3951 [0xf6f]:          movn #1   
3953 [0xf71]:          movi #0, adx   
3955 [0xf73]:          rmov adx, ebx   
3956 [0xf74]:          new_class @87 // main.frontend.parser#ast_type   
3958 [0xf76]:          movg @87 // @main.frontend.parser#ast_type   
3959 [0xf77]:          movn #76   
3961 [0xf79]:          popobj   
3962 [0xf7a]:          newstr @481 // vect_e   
3963 [0xf7b]:          movg @87 // @main.frontend.parser#ast_type   
3964 [0xf7c]:          movn #76   
3966 [0xf7e]:          movn #0   
3968 [0xf80]:          popobj   
3969 [0xf81]:          movi #33262, ebx   
3971 [0xf83]:          movg @87 // @main.frontend.parser#ast_type   
3972 [0xf84]:          movn #76   
3974 [0xf86]:          movn #1   
3976 [0xf88]:          movi #0, adx   
3978 [0xf8a]:          rmov adx, ebx   
3979 [0xf8b]:          new_class @87 // main.frontend.parser#ast_type   
3981 [0xf8d]:          movg @87 // @main.frontend.parser#ast_type   
3982 [0xf8e]:          movn #77   
3984 [0xf90]:          popobj   
3985 [0xf91]:          newstr @482 // add_e   
3986 [0xf92]:          movg @87 // @main.frontend.parser#ast_type   
3987 [0xf93]:          movn #77   
3989 [0xf95]:          movn #0   
3991 [0xf97]:          popobj   
3992 [0xf98]:          movi #33263, ebx   
3994 [0xf9a]:          movg @87 // @main.frontend.parser#ast_type   
3995 [0xf9b]:          movn #77   
3997 [0xf9d]:          movn #1   
3999 [0xf9f]:          movi #0, adx   
4001 [0xfa1]:          rmov adx, ebx   
4002 [0xfa2]:          new_class @87 // main.frontend.parser#ast_type   
4004 [0xfa4]:          movg @87 // @main.frontend.parser#ast_type   
4005 [0xfa5]:          movn #78   
4007 [0xfa7]:          popobj   
4008 [0xfa8]:          newstr @483 // mult_e   
4009 [0xfa9]:          movg @87 // @main.frontend.parser#ast_type   
4010 [0xfaa]:          movn #78   
4012 [0xfac]:          movn #0   
4014 [0xfae]:          popobj   
4015 [0xfaf]:          movi #33264, ebx   
4017 [0xfb1]:          movg @87 // @main.frontend.parser#ast_type   
4018 [0xfb2]:          movn #78   
4020 [0xfb4]:          movn #1   
4022 [0xfb6]:          movi #0, adx   
4024 [0xfb8]:          rmov adx, ebx   
4025 [0xfb9]:          new_class @87 // main.frontend.parser#ast_type   
4027 [0xfbb]:          movg @87 // @main.frontend.parser#ast_type   
4028 [0xfbc]:          movn #79   
4030 [0xfbe]:          popobj   
4031 [0xfbf]:          newstr @484 // shift_e   
4032 [0xfc0]:          movg @87 // @main.frontend.parser#ast_type   
4033 [0xfc1]:          movn #79   
4035 [0xfc3]:          movn #0   
4037 [0xfc5]:          popobj   
4038 [0xfc6]:          movi #33265, ebx   
4040 [0xfc8]:          movg @87 // @main.frontend.parser#ast_type   
4041 [0xfc9]:          movn #79   
4043 [0xfcb]:          movn #1   
4045 [0xfcd]:          movi #0, adx   
4047 [0xfcf]:          rmov adx, ebx   
4048 [0xfd0]:          new_class @87 // main.frontend.parser#ast_type   
4050 [0xfd2]:          movg @87 // @main.frontend.parser#ast_type   
4051 [0xfd3]:          movn #80   
4053 [0xfd5]:          popobj   
4054 [0xfd6]:          newstr @485 // less_e   
4055 [0xfd7]:          movg @87 // @main.frontend.parser#ast_type   
4056 [0xfd8]:          movn #80   
4058 [0xfda]:          movn #0   
4060 [0xfdc]:          popobj   
4061 [0xfdd]:          movi #33266, ebx   
4063 [0xfdf]:          movg @87 // @main.frontend.parser#ast_type   
4064 [0xfe0]:          movn #80   
4066 [0xfe2]:          movn #1   
4068 [0xfe4]:          movi #0, adx   
4070 [0xfe6]:          rmov adx, ebx   
4071 [0xfe7]:          new_class @87 // main.frontend.parser#ast_type   
4073 [0xfe9]:          movg @87 // @main.frontend.parser#ast_type   
4074 [0xfea]:          movn #81   
4076 [0xfec]:          popobj   
4077 [0xfed]:          newstr @486 // equal_e   
4078 [0xfee]:          movg @87 // @main.frontend.parser#ast_type   
4079 [0xfef]:          movn #81   
4081 [0xff1]:          movn #0   
4083 [0xff3]:          popobj   
4084 [0xff4]:          movi #33267, ebx   
4086 [0xff6]:          movg @87 // @main.frontend.parser#ast_type   
4087 [0xff7]:          movn #81   
4089 [0xff9]:          movn #1   
4091 [0xffb]:          movi #0, adx   
4093 [0xffd]:          rmov adx, ebx   
4094 [0xffe]:          new_class @87 // main.frontend.parser#ast_type   
4096 [0x1000]:          movg @87 // @main.frontend.parser#ast_type   
4097 [0x1001]:          movn #82   
4099 [0x1003]:          popobj   
4100 [0x1004]:          newstr @487 // and_e   
4101 [0x1005]:          movg @87 // @main.frontend.parser#ast_type   
4102 [0x1006]:          movn #82   
4104 [0x1008]:          movn #0   
4106 [0x100a]:          popobj   
4107 [0x100b]:          movi #33268, ebx   
4109 [0x100d]:          movg @87 // @main.frontend.parser#ast_type   
4110 [0x100e]:          movn #82   
4112 [0x1010]:          movn #1   
4114 [0x1012]:          movi #0, adx   
4116 [0x1014]:          rmov adx, ebx   
4117 [0x1015]:          new_class @87 // main.frontend.parser#ast_type   
4119 [0x1017]:          movg @87 // @main.frontend.parser#ast_type   
4120 [0x1018]:          movn #83   
4122 [0x101a]:          popobj   
4123 [0x101b]:          newstr @488 // ques_e   
4124 [0x101c]:          movg @87 // @main.frontend.parser#ast_type   
4125 [0x101d]:          movn #83   
4127 [0x101f]:          movn #0   
4129 [0x1021]:          popobj   
4130 [0x1022]:          movi #33269, ebx   
4132 [0x1024]:          movg @87 // @main.frontend.parser#ast_type   
4133 [0x1025]:          movn #83   
4135 [0x1027]:          movn #1   
4137 [0x1029]:          movi #0, adx   
4139 [0x102b]:          rmov adx, ebx   
4140 [0x102c]:          new_class @87 // main.frontend.parser#ast_type   
4142 [0x102e]:          movg @87 // @main.frontend.parser#ast_type   
4143 [0x102f]:          movn #84   
4145 [0x1031]:          popobj   
4146 [0x1032]:          newstr @489 // assign_e   
4147 [0x1033]:          movg @87 // @main.frontend.parser#ast_type   
4148 [0x1034]:          movn #84   
4150 [0x1036]:          movn #0   
4152 [0x1038]:          popobj   
4153 [0x1039]:          movi #33270, ebx   
4155 [0x103b]:          movg @87 // @main.frontend.parser#ast_type   
4156 [0x103c]:          movn #84   
4158 [0x103e]:          movn #1   
4160 [0x1040]:          movi #0, adx   
4162 [0x1042]:          rmov adx, ebx   
4163 [0x1043]:          new_class @87 // main.frontend.parser#ast_type   
4165 [0x1045]:          movg @87 // @main.frontend.parser#ast_type   
4166 [0x1046]:          movn #85   
4168 [0x1048]:          popobj   
4169 [0x1049]:          newstr @490 // sizeof_e   
4170 [0x104a]:          movg @87 // @main.frontend.parser#ast_type   
4171 [0x104b]:          movn #85   
4173 [0x104d]:          movn #0   
4175 [0x104f]:          popobj   
4176 [0x1050]:          movi #33271, ebx   
4178 [0x1052]:          movg @87 // @main.frontend.parser#ast_type   
4179 [0x1053]:          movn #85   
4181 [0x1055]:          movn #1   
4183 [0x1057]:          movi #0, adx   
4185 [0x1059]:          rmov adx, ebx   
4186 [0x105a]:          new_class @87 // main.frontend.parser#ast_type   
4188 [0x105c]:          movg @87 // @main.frontend.parser#ast_type   
4189 [0x105d]:          movn #86   
4191 [0x105f]:          popobj   
4192 [0x1060]:          newstr @491 // free_e   
4193 [0x1061]:          movg @87 // @main.frontend.parser#ast_type   
4194 [0x1062]:          movn #86   
4196 [0x1064]:          movn #0   
4198 [0x1066]:          popobj   
4199 [0x1067]:          movi #33272, ebx   
4201 [0x1069]:          movg @87 // @main.frontend.parser#ast_type   
4202 [0x106a]:          movn #86   
4204 [0x106c]:          movn #1   
4206 [0x106e]:          movi #0, adx   
4208 [0x1070]:          rmov adx, ebx   
4209 [0x1071]:          new_class @87 // main.frontend.parser#ast_type   
4211 [0x1073]:          movg @87 // @main.frontend.parser#ast_type   
4212 [0x1074]:          movn #87   
4214 [0x1076]:          popobj   
4215 [0x1077]:          newstr @492 // none   
4216 [0x1078]:          movg @87 // @main.frontend.parser#ast_type   
4217 [0x1079]:          movn #87   
4219 [0x107b]:          movn #0   
4221 [0x107d]:          popobj   
4222 [0x107e]:          movi #33273, ebx   
4224 [0x1080]:          movg @87 // @main.frontend.parser#ast_type   
4225 [0x1081]:          movn #87   
4227 [0x1083]:          movn #1   
4229 [0x1085]:          movi #0, adx   
4231 [0x1087]:          rmov adx, ebx   
4232 [0x1088]:          new_class @91 // main.frontend.tokenizer#token_id   
4234 [0x108a]:          movg @91 // @main.frontend.tokenizer#token_id   
4235 [0x108b]:          movn #0   
4237 [0x108d]:          popobj   
4238 [0x108e]:          newstr @493 // identifier   
4239 [0x108f]:          movg @91 // @main.frontend.tokenizer#token_id   
4240 [0x1090]:          movn #0   
4242 [0x1092]:          movn #0   
4244 [0x1094]:          popobj   
4245 [0x1095]:          movi #33187, ebx   
4247 [0x1097]:          movg @91 // @main.frontend.tokenizer#token_id   
4248 [0x1098]:          movn #0   
4250 [0x109a]:          movn #1   
4252 [0x109c]:          movi #0, adx   
4254 [0x109e]:          rmov adx, ebx   
4255 [0x109f]:          new_class @91 // main.frontend.tokenizer#token_id   
4257 [0x10a1]:          movg @91 // @main.frontend.tokenizer#token_id   
4258 [0x10a2]:          movn #1   
4260 [0x10a4]:          popobj   
4261 [0x10a5]:          newstr @494 // native_type   
4262 [0x10a6]:          movg @91 // @main.frontend.tokenizer#token_id   
4263 [0x10a7]:          movn #1   
4265 [0x10a9]:          movn #0   
4267 [0x10ab]:          popobj   
4268 [0x10ac]:          movi #33188, ebx   
4270 [0x10ae]:          movg @91 // @main.frontend.tokenizer#token_id   
4271 [0x10af]:          movn #1   
4273 [0x10b1]:          movn #1   
4275 [0x10b3]:          movi #0, adx   
4277 [0x10b5]:          rmov adx, ebx   
4278 [0x10b6]:          new_class @91 // main.frontend.tokenizer#token_id   
4280 [0x10b8]:          movg @91 // @main.frontend.tokenizer#token_id   
4281 [0x10b9]:          movn #2   
4283 [0x10bb]:          popobj   
4284 [0x10bc]:          newstr @461 // type_identifier   
4285 [0x10bd]:          movg @91 // @main.frontend.tokenizer#token_id   
4286 [0x10be]:          movn #2   
4288 [0x10c0]:          movn #0   
4290 [0x10c2]:          popobj   
4291 [0x10c3]:          movi #33189, ebx   
4293 [0x10c5]:          movg @91 // @main.frontend.tokenizer#token_id   
4294 [0x10c6]:          movn #2   
4296 [0x10c8]:          movn #1   
4298 [0x10ca]:          movi #0, adx   
4300 [0x10cc]:          rmov adx, ebx   
4301 [0x10cd]:          new_class @91 // main.frontend.tokenizer#token_id   
4303 [0x10cf]:          movg @91 // @main.frontend.tokenizer#token_id   
4304 [0x10d0]:          movn #3   
4306 [0x10d2]:          popobj   
4307 [0x10d3]:          newstr @495 // integer_literal   
4308 [0x10d4]:          movg @91 // @main.frontend.tokenizer#token_id   
4309 [0x10d5]:          movn #3   
4311 [0x10d7]:          movn #0   
4313 [0x10d9]:          popobj   
4314 [0x10da]:          movi #33190, ebx   
4316 [0x10dc]:          movg @91 // @main.frontend.tokenizer#token_id   
4317 [0x10dd]:          movn #3   
4319 [0x10df]:          movn #1   
4321 [0x10e1]:          movi #0, adx   
4323 [0x10e3]:          rmov adx, ebx   
4324 [0x10e4]:          new_class @91 // main.frontend.tokenizer#token_id   
4326 [0x10e6]:          movg @91 // @main.frontend.tokenizer#token_id   
4327 [0x10e7]:          movn #4   
4329 [0x10e9]:          popobj   
4330 [0x10ea]:          newstr @496 // hex_literal   
4331 [0x10eb]:          movg @91 // @main.frontend.tokenizer#token_id   
4332 [0x10ec]:          movn #4   
4334 [0x10ee]:          movn #0   
4336 [0x10f0]:          popobj   
4337 [0x10f1]:          movi #33191, ebx   
4339 [0x10f3]:          movg @91 // @main.frontend.tokenizer#token_id   
4340 [0x10f4]:          movn #4   
4342 [0x10f6]:          movn #1   
4344 [0x10f8]:          movi #0, adx   
4346 [0x10fa]:          rmov adx, ebx   
4347 [0x10fb]:          new_class @91 // main.frontend.tokenizer#token_id   
4349 [0x10fd]:          movg @91 // @main.frontend.tokenizer#token_id   
4350 [0x10fe]:          movn #5   
4352 [0x1100]:          popobj   
4353 [0x1101]:          newstr @465 // modulename   
4354 [0x1102]:          movg @91 // @main.frontend.tokenizer#token_id   
4355 [0x1103]:          movn #5   
4357 [0x1105]:          movn #0   
4359 [0x1107]:          popobj   
4360 [0x1108]:          movi #33192, ebx   
4362 [0x110a]:          movg @91 // @main.frontend.tokenizer#token_id   
4363 [0x110b]:          movn #5   
4365 [0x110d]:          movn #1   
4367 [0x110f]:          movi #0, adx   
4369 [0x1111]:          rmov adx, ebx   
4370 [0x1112]:          new_class @91 // main.frontend.tokenizer#token_id   
4372 [0x1114]:          movg @91 // @main.frontend.tokenizer#token_id   
4373 [0x1115]:          movn #6   
4375 [0x1117]:          popobj   
4376 [0x1118]:          newstr @497 // string_literal   
4377 [0x1119]:          movg @91 // @main.frontend.tokenizer#token_id   
4378 [0x111a]:          movn #6   
4380 [0x111c]:          movn #0   
4382 [0x111e]:          popobj   
4383 [0x111f]:          movi #33193, ebx   
4385 [0x1121]:          movg @91 // @main.frontend.tokenizer#token_id   
4386 [0x1122]:          movn #6   
4388 [0x1124]:          movn #1   
4390 [0x1126]:          movi #0, adx   
4392 [0x1128]:          rmov adx, ebx   
4393 [0x1129]:          new_class @91 // main.frontend.tokenizer#token_id   
4395 [0x112b]:          movg @91 // @main.frontend.tokenizer#token_id   
4396 [0x112c]:          movn #7   
4398 [0x112e]:          popobj   
4399 [0x112f]:          newstr @498 // char_literal   
4400 [0x1130]:          movg @91 // @main.frontend.tokenizer#token_id   
4401 [0x1131]:          movn #7   
4403 [0x1133]:          movn #0   
4405 [0x1135]:          popobj   
4406 [0x1136]:          movi #33194, ebx   
4408 [0x1138]:          movg @91 // @main.frontend.tokenizer#token_id   
4409 [0x1139]:          movn #7   
4411 [0x113b]:          movn #1   
4413 [0x113d]:          movi #0, adx   
4415 [0x113f]:          rmov adx, ebx   
4416 [0x1140]:          new_class @91 // main.frontend.tokenizer#token_id   
4418 [0x1142]:          movg @91 // @main.frontend.tokenizer#token_id   
4419 [0x1143]:          movn #8   
4421 [0x1145]:          popobj   
4422 [0x1146]:          newstr @466 // literal   
4423 [0x1147]:          movg @91 // @main.frontend.tokenizer#token_id   
4424 [0x1148]:          movn #8   
4426 [0x114a]:          movn #0   
4428 [0x114c]:          popobj   
4429 [0x114d]:          movi #33195, ebx   
4431 [0x114f]:          movg @91 // @main.frontend.tokenizer#token_id   
4432 [0x1150]:          movn #8   
4434 [0x1152]:          movn #1   
4436 [0x1154]:          movi #0, adx   
4438 [0x1156]:          rmov adx, ebx   
4439 [0x1157]:          new_class @91 // main.frontend.tokenizer#token_id   
4441 [0x1159]:          movg @91 // @main.frontend.tokenizer#token_id   
4442 [0x115a]:          movn #9   
4444 [0x115c]:          popobj   
4445 [0x115d]:          newstr @420 // value   
4446 [0x115e]:          movg @91 // @main.frontend.tokenizer#token_id   
4447 [0x115f]:          movn #9   
4449 [0x1161]:          movn #0   
4451 [0x1163]:          popobj   
4452 [0x1164]:          movi #33196, ebx   
4454 [0x1166]:          movg @91 // @main.frontend.tokenizer#token_id   
4455 [0x1167]:          movn #9   
4457 [0x1169]:          movn #1   
4459 [0x116b]:          movi #0, adx   
4461 [0x116d]:          rmov adx, ebx   
4462 [0x116e]:          new_class @91 // main.frontend.tokenizer#token_id   
4464 [0x1170]:          movg @91 // @main.frontend.tokenizer#token_id   
4465 [0x1171]:          movn #10   
4467 [0x1173]:          popobj   
4468 [0x1174]:          newstr @499 // accesstype   
4469 [0x1175]:          movg @91 // @main.frontend.tokenizer#token_id   
4470 [0x1176]:          movn #10   
4472 [0x1178]:          movn #0   
4474 [0x117a]:          popobj   
4475 [0x117b]:          movi #33197, ebx   
4477 [0x117d]:          movg @91 // @main.frontend.tokenizer#token_id   
4478 [0x117e]:          movn #10   
4480 [0x1180]:          movn #1   
4482 [0x1182]:          movi #0, adx   
4484 [0x1184]:          rmov adx, ebx   
4485 [0x1185]:          new_class @91 // main.frontend.tokenizer#token_id   
4487 [0x1187]:          movg @91 // @main.frontend.tokenizer#token_id   
4488 [0x1188]:          movn #11   
4490 [0x118a]:          popobj   
4491 [0x118b]:          newstr @500 // singleline_comment   
4492 [0x118c]:          movg @91 // @main.frontend.tokenizer#token_id   
4493 [0x118d]:          movn #11   
4495 [0x118f]:          movn #0   
4497 [0x1191]:          popobj   
4498 [0x1192]:          movi #33198, ebx   
4500 [0x1194]:          movg @91 // @main.frontend.tokenizer#token_id   
4501 [0x1195]:          movn #11   
4503 [0x1197]:          movn #1   
4505 [0x1199]:          movi #0, adx   
4507 [0x119b]:          rmov adx, ebx   
4508 [0x119c]:          new_class @91 // main.frontend.tokenizer#token_id   
4510 [0x119e]:          movg @91 // @main.frontend.tokenizer#token_id   
4511 [0x119f]:          movn #12   
4513 [0x11a1]:          popobj   
4514 [0x11a2]:          newstr @501 // return_statement   
4515 [0x11a3]:          movg @91 // @main.frontend.tokenizer#token_id   
4516 [0x11a4]:          movn #12   
4518 [0x11a6]:          movn #0   
4520 [0x11a8]:          popobj   
4521 [0x11a9]:          movi #33199, ebx   
4523 [0x11ab]:          movg @91 // @main.frontend.tokenizer#token_id   
4524 [0x11ac]:          movn #12   
4526 [0x11ae]:          movn #1   
4528 [0x11b0]:          movi #0, adx   
4530 [0x11b2]:          rmov adx, ebx   
4531 [0x11b3]:          new_class @91 // main.frontend.tokenizer#token_id   
4533 [0x11b5]:          movg @91 // @main.frontend.tokenizer#token_id   
4534 [0x11b6]:          movn #13   
4536 [0x11b8]:          popobj   
4537 [0x11b9]:          newstr @502 // single   
4538 [0x11ba]:          movg @91 // @main.frontend.tokenizer#token_id   
4539 [0x11bb]:          movn #13   
4541 [0x11bd]:          movn #0   
4543 [0x11bf]:          popobj   
4544 [0x11c0]:          movi #33200, ebx   
4546 [0x11c2]:          movg @91 // @main.frontend.tokenizer#token_id   
4547 [0x11c3]:          movn #13   
4549 [0x11c5]:          movn #1   
4551 [0x11c7]:          movi #0, adx   
4553 [0x11c9]:          rmov adx, ebx   
4554 [0x11ca]:          new_class @91 // main.frontend.tokenizer#token_id   
4556 [0x11cc]:          movg @91 // @main.frontend.tokenizer#token_id   
4557 [0x11cd]:          movn #14   
4559 [0x11cf]:          popobj   
4560 [0x11d0]:          newstr @503 // noentity   
4561 [0x11d1]:          movg @91 // @main.frontend.tokenizer#token_id   
4562 [0x11d2]:          movn #14   
4564 [0x11d4]:          movn #0   
4566 [0x11d6]:          popobj   
4567 [0x11d7]:          movi #33201, ebx   
4569 [0x11d9]:          movg @91 // @main.frontend.tokenizer#token_id   
4570 [0x11da]:          movn #14   
4572 [0x11dc]:          movn #1   
4574 [0x11de]:          movi #0, adx   
4576 [0x11e0]:          rmov adx, ebx   
4577 [0x11e1]:          new_class @93 // main.frontend.tokenizer#token_type   
4579 [0x11e3]:          movg @93 // @main.frontend.tokenizer#token_type   
4580 [0x11e4]:          movn #0   
4582 [0x11e6]:          popobj   
4583 [0x11e7]:          newstr @504 // number   
4584 [0x11e8]:          movg @93 // @main.frontend.tokenizer#token_type   
4585 [0x11e9]:          movn #0   
4587 [0x11eb]:          movn #0   
4589 [0x11ed]:          popobj   
4590 [0x11ee]:          movi #33188, ebx   
4592 [0x11f0]:          movg @93 // @main.frontend.tokenizer#token_type   
4593 [0x11f1]:          movn #0   
4595 [0x11f3]:          movn #1   
4597 [0x11f5]:          movi #0, adx   
4599 [0x11f7]:          rmov adx, ebx   
4600 [0x11f8]:          new_class @93 // main.frontend.tokenizer#token_type   
4602 [0x11fa]:          movg @93 // @main.frontend.tokenizer#token_type   
4603 [0x11fb]:          movn #1   
4605 [0x11fd]:          popobj   
4606 [0x11fe]:          newstr @505 // letter   
4607 [0x11ff]:          movg @93 // @main.frontend.tokenizer#token_type   
4608 [0x1200]:          movn #1   
4610 [0x1202]:          movn #0   
4612 [0x1204]:          popobj   
4613 [0x1205]:          movi #33189, ebx   
4615 [0x1207]:          movg @93 // @main.frontend.tokenizer#token_type   
4616 [0x1208]:          movn #1   
4618 [0x120a]:          movn #1   
4620 [0x120c]:          movi #0, adx   
4622 [0x120e]:          rmov adx, ebx   
4623 [0x120f]:          new_class @93 // main.frontend.tokenizer#token_type   
4625 [0x1211]:          movg @93 // @main.frontend.tokenizer#token_type   
4626 [0x1212]:          movn #2   
4628 [0x1214]:          popobj   
4629 [0x1215]:          newstr @506 // underscore   
4630 [0x1216]:          movg @93 // @main.frontend.tokenizer#token_type   
4631 [0x1217]:          movn #2   
4633 [0x1219]:          movn #0   
4635 [0x121b]:          popobj   
4636 [0x121c]:          movi #33190, ebx   
4638 [0x121e]:          movg @93 // @main.frontend.tokenizer#token_type   
4639 [0x121f]:          movn #2   
4641 [0x1221]:          movn #1   
4643 [0x1223]:          movi #0, adx   
4645 [0x1225]:          rmov adx, ebx   
4646 [0x1226]:          new_class @93 // main.frontend.tokenizer#token_type   
4648 [0x1228]:          movg @93 // @main.frontend.tokenizer#token_type   
4649 [0x1229]:          movn #3   
4651 [0x122b]:          popobj   
4652 [0x122c]:          newstr @507 // left_paren   
4653 [0x122d]:          movg @93 // @main.frontend.tokenizer#token_type   
4654 [0x122e]:          movn #3   
4656 [0x1230]:          movn #0   
4658 [0x1232]:          popobj   
4659 [0x1233]:          movi #33191, ebx   
4661 [0x1235]:          movg @93 // @main.frontend.tokenizer#token_type   
4662 [0x1236]:          movn #3   
4664 [0x1238]:          movn #1   
4666 [0x123a]:          movi #0, adx   
4668 [0x123c]:          rmov adx, ebx   
4669 [0x123d]:          new_class @93 // main.frontend.tokenizer#token_type   
4671 [0x123f]:          movg @93 // @main.frontend.tokenizer#token_type   
4672 [0x1240]:          movn #4   
4674 [0x1242]:          popobj   
4675 [0x1243]:          newstr @508 // right_paren   
4676 [0x1244]:          movg @93 // @main.frontend.tokenizer#token_type   
4677 [0x1245]:          movn #4   
4679 [0x1247]:          movn #0   
4681 [0x1249]:          popobj   
4682 [0x124a]:          movi #33192, ebx   
4684 [0x124c]:          movg @93 // @main.frontend.tokenizer#token_type   
4685 [0x124d]:          movn #4   
4687 [0x124f]:          movn #1   
4689 [0x1251]:          movi #0, adx   
4691 [0x1253]:          rmov adx, ebx   
4692 [0x1254]:          new_class @93 // main.frontend.tokenizer#token_type   
4694 [0x1256]:          movg @93 // @main.frontend.tokenizer#token_type   
4695 [0x1257]:          movn #5   
4697 [0x1259]:          popobj   
4698 [0x125a]:          newstr @509 // left_curly   
4699 [0x125b]:          movg @93 // @main.frontend.tokenizer#token_type   
4700 [0x125c]:          movn #5   
4702 [0x125e]:          movn #0   
4704 [0x1260]:          popobj   
4705 [0x1261]:          movi #33193, ebx   
4707 [0x1263]:          movg @93 // @main.frontend.tokenizer#token_type   
4708 [0x1264]:          movn #5   
4710 [0x1266]:          movn #1   
4712 [0x1268]:          movi #0, adx   
4714 [0x126a]:          rmov adx, ebx   
4715 [0x126b]:          new_class @93 // main.frontend.tokenizer#token_type   
4717 [0x126d]:          movg @93 // @main.frontend.tokenizer#token_type   
4718 [0x126e]:          movn #6   
4720 [0x1270]:          popobj   
4721 [0x1271]:          newstr @510 // right_curly   
4722 [0x1272]:          movg @93 // @main.frontend.tokenizer#token_type   
4723 [0x1273]:          movn #6   
4725 [0x1275]:          movn #0   
4727 [0x1277]:          popobj   
4728 [0x1278]:          movi #33194, ebx   
4730 [0x127a]:          movg @93 // @main.frontend.tokenizer#token_type   
4731 [0x127b]:          movn #6   
4733 [0x127d]:          movn #1   
4735 [0x127f]:          movi #0, adx   
4737 [0x1281]:          rmov adx, ebx   
4738 [0x1282]:          new_class @93 // main.frontend.tokenizer#token_type   
4740 [0x1284]:          movg @93 // @main.frontend.tokenizer#token_type   
4741 [0x1285]:          movn #7   
4743 [0x1287]:          popobj   
4744 [0x1288]:          newstr @511 // hash   
4745 [0x1289]:          movg @93 // @main.frontend.tokenizer#token_type   
4746 [0x128a]:          movn #7   
4748 [0x128c]:          movn #0   
4750 [0x128e]:          popobj   
4751 [0x128f]:          movi #33195, ebx   
4753 [0x1291]:          movg @93 // @main.frontend.tokenizer#token_type   
4754 [0x1292]:          movn #7   
4756 [0x1294]:          movn #1   
4758 [0x1296]:          movi #0, adx   
4760 [0x1298]:          rmov adx, ebx   
4761 [0x1299]:          new_class @93 // main.frontend.tokenizer#token_type   
4763 [0x129b]:          movg @93 // @main.frontend.tokenizer#token_type   
4764 [0x129c]:          movn #8   
4766 [0x129e]:          popobj   
4767 [0x129f]:          newstr @512 // dot   
4768 [0x12a0]:          movg @93 // @main.frontend.tokenizer#token_type   
4769 [0x12a1]:          movn #8   
4771 [0x12a3]:          movn #0   
4773 [0x12a5]:          popobj   
4774 [0x12a6]:          movi #33196, ebx   
4776 [0x12a8]:          movg @93 // @main.frontend.tokenizer#token_type   
4777 [0x12a9]:          movn #8   
4779 [0x12ab]:          movn #1   
4781 [0x12ad]:          movi #0, adx   
4783 [0x12af]:          rmov adx, ebx   
4784 [0x12b0]:          new_class @93 // main.frontend.tokenizer#token_type   
4786 [0x12b2]:          movg @93 // @main.frontend.tokenizer#token_type   
4787 [0x12b3]:          movn #9   
4789 [0x12b5]:          popobj   
4790 [0x12b6]:          newstr @513 // plus   
4791 [0x12b7]:          movg @93 // @main.frontend.tokenizer#token_type   
4792 [0x12b8]:          movn #9   
4794 [0x12ba]:          movn #0   
4796 [0x12bc]:          popobj   
4797 [0x12bd]:          movi #33197, ebx   
4799 [0x12bf]:          movg @93 // @main.frontend.tokenizer#token_type   
4800 [0x12c0]:          movn #9   
4802 [0x12c2]:          movn #1   
4804 [0x12c4]:          movi #0, adx   
4806 [0x12c6]:          rmov adx, ebx   
4807 [0x12c7]:          new_class @93 // main.frontend.tokenizer#token_type   
4809 [0x12c9]:          movg @93 // @main.frontend.tokenizer#token_type   
4810 [0x12ca]:          movn #10   
4812 [0x12cc]:          popobj   
4813 [0x12cd]:          newstr @514 // minus   
4814 [0x12ce]:          movg @93 // @main.frontend.tokenizer#token_type   
4815 [0x12cf]:          movn #10   
4817 [0x12d1]:          movn #0   
4819 [0x12d3]:          popobj   
4820 [0x12d4]:          movi #33198, ebx   
4822 [0x12d6]:          movg @93 // @main.frontend.tokenizer#token_type   
4823 [0x12d7]:          movn #10   
4825 [0x12d9]:          movn #1   
4827 [0x12db]:          movi #0, adx   
4829 [0x12dd]:          rmov adx, ebx   
4830 [0x12de]:          new_class @93 // main.frontend.tokenizer#token_type   
4832 [0x12e0]:          movg @93 // @main.frontend.tokenizer#token_type   
4833 [0x12e1]:          movn #11   
4835 [0x12e3]:          popobj   
4836 [0x12e4]:          newstr @515 // mult   
4837 [0x12e5]:          movg @93 // @main.frontend.tokenizer#token_type   
4838 [0x12e6]:          movn #11   
4840 [0x12e8]:          movn #0   
4842 [0x12ea]:          popobj   
4843 [0x12eb]:          movi #33199, ebx   
4845 [0x12ed]:          movg @93 // @main.frontend.tokenizer#token_type   
4846 [0x12ee]:          movn #11   
4848 [0x12f0]:          movn #1   
4850 [0x12f2]:          movi #0, adx   
4852 [0x12f4]:          rmov adx, ebx   
4853 [0x12f5]:          new_class @93 // main.frontend.tokenizer#token_type   
4855 [0x12f7]:          movg @93 // @main.frontend.tokenizer#token_type   
4856 [0x12f8]:          movn #12   
4858 [0x12fa]:          popobj   
4859 [0x12fb]:          newstr @516 // exponent   
4860 [0x12fc]:          movg @93 // @main.frontend.tokenizer#token_type   
4861 [0x12fd]:          movn #12   
4863 [0x12ff]:          movn #0   
4865 [0x1301]:          popobj   
4866 [0x1302]:          movi #33200, ebx   
4868 [0x1304]:          movg @93 // @main.frontend.tokenizer#token_type   
4869 [0x1305]:          movn #12   
4871 [0x1307]:          movn #1   
4873 [0x1309]:          movi #0, adx   
4875 [0x130b]:          rmov adx, ebx   
4876 [0x130c]:          new_class @93 // main.frontend.tokenizer#token_type   
4878 [0x130e]:          movg @93 // @main.frontend.tokenizer#token_type   
4879 [0x130f]:          movn #13   
4881 [0x1311]:          popobj   
4882 [0x1312]:          newstr @517 // div   
4883 [0x1313]:          movg @93 // @main.frontend.tokenizer#token_type   
4884 [0x1314]:          movn #13   
4886 [0x1316]:          movn #0   
4888 [0x1318]:          popobj   
4889 [0x1319]:          movi #33201, ebx   
4891 [0x131b]:          movg @93 // @main.frontend.tokenizer#token_type   
4892 [0x131c]:          movn #13   
4894 [0x131e]:          movn #1   
4896 [0x1320]:          movi #0, adx   
4898 [0x1322]:          rmov adx, ebx   
4899 [0x1323]:          new_class @93 // main.frontend.tokenizer#token_type   
4901 [0x1325]:          movg @93 // @main.frontend.tokenizer#token_type   
4902 [0x1326]:          movn #14   
4904 [0x1328]:          popobj   
4905 [0x1329]:          newstr @518 // _mod   
4906 [0x132a]:          movg @93 // @main.frontend.tokenizer#token_type   
4907 [0x132b]:          movn #14   
4909 [0x132d]:          movn #0   
4911 [0x132f]:          popobj   
4912 [0x1330]:          movi #33202, ebx   
4914 [0x1332]:          movg @93 // @main.frontend.tokenizer#token_type   
4915 [0x1333]:          movn #14   
4917 [0x1335]:          movn #1   
4919 [0x1337]:          movi #0, adx   
4921 [0x1339]:          rmov adx, ebx   
4922 [0x133a]:          new_class @93 // main.frontend.tokenizer#token_type   
4924 [0x133c]:          movg @93 // @main.frontend.tokenizer#token_type   
4925 [0x133d]:          movn #15   
4927 [0x133f]:          popobj   
4928 [0x1340]:          newstr @519 // colon   
4929 [0x1341]:          movg @93 // @main.frontend.tokenizer#token_type   
4930 [0x1342]:          movn #15   
4932 [0x1344]:          movn #0   
4934 [0x1346]:          popobj   
4935 [0x1347]:          movi #33203, ebx   
4937 [0x1349]:          movg @93 // @main.frontend.tokenizer#token_type   
4938 [0x134a]:          movn #15   
4940 [0x134c]:          movn #1   
4942 [0x134e]:          movi #0, adx   
4944 [0x1350]:          rmov adx, ebx   
4945 [0x1351]:          new_class @93 // main.frontend.tokenizer#token_type   
4947 [0x1353]:          movg @93 // @main.frontend.tokenizer#token_type   
4948 [0x1354]:          movn #16   
4950 [0x1356]:          popobj   
4951 [0x1357]:          newstr @520 // semicolon   
4952 [0x1358]:          movg @93 // @main.frontend.tokenizer#token_type   
4953 [0x1359]:          movn #16   
4955 [0x135b]:          movn #0   
4957 [0x135d]:          popobj   
4958 [0x135e]:          movi #33204, ebx   
4960 [0x1360]:          movg @93 // @main.frontend.tokenizer#token_type   
4961 [0x1361]:          movn #16   
4963 [0x1363]:          movn #1   
4965 [0x1365]:          movi #0, adx   
4967 [0x1367]:          rmov adx, ebx   
4968 [0x1368]:          new_class @93 // main.frontend.tokenizer#token_type   
4970 [0x136a]:          movg @93 // @main.frontend.tokenizer#token_type   
4971 [0x136b]:          movn #17   
4973 [0x136d]:          popobj   
4974 [0x136e]:          newstr @521 // dub_quote   
4975 [0x136f]:          movg @93 // @main.frontend.tokenizer#token_type   
4976 [0x1370]:          movn #17   
4978 [0x1372]:          movn #0   
4980 [0x1374]:          popobj   
4981 [0x1375]:          movi #33205, ebx   
4983 [0x1377]:          movg @93 // @main.frontend.tokenizer#token_type   
4984 [0x1378]:          movn #17   
4986 [0x137a]:          movn #1   
4988 [0x137c]:          movi #0, adx   
4990 [0x137e]:          rmov adx, ebx   
4991 [0x137f]:          new_class @93 // main.frontend.tokenizer#token_type   
4993 [0x1381]:          movg @93 // @main.frontend.tokenizer#token_type   
4994 [0x1382]:          movn #18   
4996 [0x1384]:          popobj   
4997 [0x1385]:          newstr @522 // sing_quote   
4998 [0x1386]:          movg @93 // @main.frontend.tokenizer#token_type   
4999 [0x1387]:          movn #18   
5001 [0x1389]:          movn #0   
5003 [0x138b]:          popobj   
5004 [0x138c]:          movi #33206, ebx   
5006 [0x138e]:          movg @93 // @main.frontend.tokenizer#token_type   
5007 [0x138f]:          movn #18   
5009 [0x1391]:          movn #1   
5011 [0x1393]:          movi #0, adx   
5013 [0x1395]:          rmov adx, ebx   
5014 [0x1396]:          new_class @93 // main.frontend.tokenizer#token_type   
5016 [0x1398]:          movg @93 // @main.frontend.tokenizer#token_type   
5017 [0x1399]:          movn #19   
5019 [0x139b]:          popobj   
5020 [0x139c]:          newstr @523 // comma   
5021 [0x139d]:          movg @93 // @main.frontend.tokenizer#token_type   
5022 [0x139e]:          movn #19   
5024 [0x13a0]:          movn #0   
5026 [0x13a2]:          popobj   
5027 [0x13a3]:          movi #33207, ebx   
5029 [0x13a5]:          movg @93 // @main.frontend.tokenizer#token_type   
5030 [0x13a6]:          movn #19   
5032 [0x13a8]:          movn #1   
5034 [0x13aa]:          movi #0, adx   
5036 [0x13ac]:          rmov adx, ebx   
5037 [0x13ad]:          new_class @93 // main.frontend.tokenizer#token_type   
5039 [0x13af]:          movg @93 // @main.frontend.tokenizer#token_type   
5040 [0x13b0]:          movn #20   
5042 [0x13b2]:          popobj   
5043 [0x13b3]:          newstr @524 // newline   
5044 [0x13b4]:          movg @93 // @main.frontend.tokenizer#token_type   
5045 [0x13b5]:          movn #20   
5047 [0x13b7]:          movn #0   
5049 [0x13b9]:          popobj   
5050 [0x13ba]:          movi #33208, ebx   
5052 [0x13bc]:          movg @93 // @main.frontend.tokenizer#token_type   
5053 [0x13bd]:          movn #20   
5055 [0x13bf]:          movn #1   
5057 [0x13c1]:          movi #0, adx   
5059 [0x13c3]:          rmov adx, ebx   
5060 [0x13c4]:          new_class @93 // main.frontend.tokenizer#token_type   
5062 [0x13c6]:          movg @93 // @main.frontend.tokenizer#token_type   
5063 [0x13c7]:          movn #21   
5065 [0x13c9]:          popobj   
5066 [0x13ca]:          newstr @525 // lte   
5067 [0x13cb]:          movg @93 // @main.frontend.tokenizer#token_type   
5068 [0x13cc]:          movn #21   
5070 [0x13ce]:          movn #0   
5072 [0x13d0]:          popobj   
5073 [0x13d1]:          movi #33209, ebx   
5075 [0x13d3]:          movg @93 // @main.frontend.tokenizer#token_type   
5076 [0x13d4]:          movn #21   
5078 [0x13d6]:          movn #1   
5080 [0x13d8]:          movi #0, adx   
5082 [0x13da]:          rmov adx, ebx   
5083 [0x13db]:          new_class @93 // main.frontend.tokenizer#token_type   
5085 [0x13dd]:          movg @93 // @main.frontend.tokenizer#token_type   
5086 [0x13de]:          movn #22   
5088 [0x13e0]:          popobj   
5089 [0x13e1]:          newstr @526 // gte   
5090 [0x13e2]:          movg @93 // @main.frontend.tokenizer#token_type   
5091 [0x13e3]:          movn #22   
5093 [0x13e5]:          movn #0   
5095 [0x13e7]:          popobj   
5096 [0x13e8]:          movi #33210, ebx   
5098 [0x13ea]:          movg @93 // @main.frontend.tokenizer#token_type   
5099 [0x13eb]:          movn #22   
5101 [0x13ed]:          movn #1   
5103 [0x13ef]:          movi #0, adx   
5105 [0x13f1]:          rmov adx, ebx   
5106 [0x13f2]:          new_class @93 // main.frontend.tokenizer#token_type   
5108 [0x13f4]:          movg @93 // @main.frontend.tokenizer#token_type   
5109 [0x13f5]:          movn #23   
5111 [0x13f7]:          popobj   
5112 [0x13f8]:          newstr @527 // eqeq   
5113 [0x13f9]:          movg @93 // @main.frontend.tokenizer#token_type   
5114 [0x13fa]:          movn #23   
5116 [0x13fc]:          movn #0   
5118 [0x13fe]:          popobj   
5119 [0x13ff]:          movi #33211, ebx   
5121 [0x1401]:          movg @93 // @main.frontend.tokenizer#token_type   
5122 [0x1402]:          movn #23   
5124 [0x1404]:          movn #1   
5126 [0x1406]:          movi #0, adx   
5128 [0x1408]:          rmov adx, ebx   
5129 [0x1409]:          new_class @93 // main.frontend.tokenizer#token_type   
5131 [0x140b]:          movg @93 // @main.frontend.tokenizer#token_type   
5132 [0x140c]:          movn #24   
5134 [0x140e]:          popobj   
5135 [0x140f]:          newstr @528 // pluseq   
5136 [0x1410]:          movg @93 // @main.frontend.tokenizer#token_type   
5137 [0x1411]:          movn #24   
5139 [0x1413]:          movn #0   
5141 [0x1415]:          popobj   
5142 [0x1416]:          movi #33212, ebx   
5144 [0x1418]:          movg @93 // @main.frontend.tokenizer#token_type   
5145 [0x1419]:          movn #24   
5147 [0x141b]:          movn #1   
5149 [0x141d]:          movi #0, adx   
5151 [0x141f]:          rmov adx, ebx   
5152 [0x1420]:          new_class @93 // main.frontend.tokenizer#token_type   
5154 [0x1422]:          movg @93 // @main.frontend.tokenizer#token_type   
5155 [0x1423]:          movn #25   
5157 [0x1425]:          popobj   
5158 [0x1426]:          newstr @529 // minuseq   
5159 [0x1427]:          movg @93 // @main.frontend.tokenizer#token_type   
5160 [0x1428]:          movn #25   
5162 [0x142a]:          movn #0   
5164 [0x142c]:          popobj   
5165 [0x142d]:          movi #33213, ebx   
5167 [0x142f]:          movg @93 // @main.frontend.tokenizer#token_type   
5168 [0x1430]:          movn #25   
5170 [0x1432]:          movn #1   
5172 [0x1434]:          movi #0, adx   
5174 [0x1436]:          rmov adx, ebx   
5175 [0x1437]:          new_class @93 // main.frontend.tokenizer#token_type   
5177 [0x1439]:          movg @93 // @main.frontend.tokenizer#token_type   
5178 [0x143a]:          movn #26   
5180 [0x143c]:          popobj   
5181 [0x143d]:          newstr @530 // multeq   
5182 [0x143e]:          movg @93 // @main.frontend.tokenizer#token_type   
5183 [0x143f]:          movn #26   
5185 [0x1441]:          movn #0   
5187 [0x1443]:          popobj   
5188 [0x1444]:          movi #33214, ebx   
5190 [0x1446]:          movg @93 // @main.frontend.tokenizer#token_type   
5191 [0x1447]:          movn #26   
5193 [0x1449]:          movn #1   
5195 [0x144b]:          movi #0, adx   
5197 [0x144d]:          rmov adx, ebx   
5198 [0x144e]:          new_class @93 // main.frontend.tokenizer#token_type   
5200 [0x1450]:          movg @93 // @main.frontend.tokenizer#token_type   
5201 [0x1451]:          movn #27   
5203 [0x1453]:          popobj   
5204 [0x1454]:          newstr @531 // diveq   
5205 [0x1455]:          movg @93 // @main.frontend.tokenizer#token_type   
5206 [0x1456]:          movn #27   
5208 [0x1458]:          movn #0   
5210 [0x145a]:          popobj   
5211 [0x145b]:          movi #33215, ebx   
5213 [0x145d]:          movg @93 // @main.frontend.tokenizer#token_type   
5214 [0x145e]:          movn #27   
5216 [0x1460]:          movn #1   
5218 [0x1462]:          movi #0, adx   
5220 [0x1464]:          rmov adx, ebx   
5221 [0x1465]:          new_class @93 // main.frontend.tokenizer#token_type   
5223 [0x1467]:          movg @93 // @main.frontend.tokenizer#token_type   
5224 [0x1468]:          movn #28   
5226 [0x146a]:          popobj   
5227 [0x146b]:          newstr @532 // andeq   
5228 [0x146c]:          movg @93 // @main.frontend.tokenizer#token_type   
5229 [0x146d]:          movn #28   
5231 [0x146f]:          movn #0   
5233 [0x1471]:          popobj   
5234 [0x1472]:          movi #33216, ebx   
5236 [0x1474]:          movg @93 // @main.frontend.tokenizer#token_type   
5237 [0x1475]:          movn #28   
5239 [0x1477]:          movn #1   
5241 [0x1479]:          movi #0, adx   
5243 [0x147b]:          rmov adx, ebx   
5244 [0x147c]:          new_class @93 // main.frontend.tokenizer#token_type   
5246 [0x147e]:          movg @93 // @main.frontend.tokenizer#token_type   
5247 [0x147f]:          movn #29   
5249 [0x1481]:          popobj   
5250 [0x1482]:          newstr @533 // oreq   
5251 [0x1483]:          movg @93 // @main.frontend.tokenizer#token_type   
5252 [0x1484]:          movn #29   
5254 [0x1486]:          movn #0   
5256 [0x1488]:          popobj   
5257 [0x1489]:          movi #33217, ebx   
5259 [0x148b]:          movg @93 // @main.frontend.tokenizer#token_type   
5260 [0x148c]:          movn #29   
5262 [0x148e]:          movn #1   
5264 [0x1490]:          movi #0, adx   
5266 [0x1492]:          rmov adx, ebx   
5267 [0x1493]:          new_class @93 // main.frontend.tokenizer#token_type   
5269 [0x1495]:          movg @93 // @main.frontend.tokenizer#token_type   
5270 [0x1496]:          movn #30   
5272 [0x1498]:          popobj   
5273 [0x1499]:          newstr @534 // xoreq   
5274 [0x149a]:          movg @93 // @main.frontend.tokenizer#token_type   
5275 [0x149b]:          movn #30   
5277 [0x149d]:          movn #0   
5279 [0x149f]:          popobj   
5280 [0x14a0]:          movi #33218, ebx   
5282 [0x14a2]:          movg @93 // @main.frontend.tokenizer#token_type   
5283 [0x14a3]:          movn #30   
5285 [0x14a5]:          movn #1   
5287 [0x14a7]:          movi #0, adx   
5289 [0x14a9]:          rmov adx, ebx   
5290 [0x14aa]:          new_class @93 // main.frontend.tokenizer#token_type   
5292 [0x14ac]:          movg @93 // @main.frontend.tokenizer#token_type   
5293 [0x14ad]:          movn #31   
5295 [0x14af]:          popobj   
5296 [0x14b0]:          newstr @535 // modeq   
5297 [0x14b1]:          movg @93 // @main.frontend.tokenizer#token_type   
5298 [0x14b2]:          movn #31   
5300 [0x14b4]:          movn #0   
5302 [0x14b6]:          popobj   
5303 [0x14b7]:          movi #33219, ebx   
5305 [0x14b9]:          movg @93 // @main.frontend.tokenizer#token_type   
5306 [0x14ba]:          movn #31   
5308 [0x14bc]:          movn #1   
5310 [0x14be]:          movi #0, adx   
5312 [0x14c0]:          rmov adx, ebx   
5313 [0x14c1]:          new_class @93 // main.frontend.tokenizer#token_type   
5315 [0x14c3]:          movg @93 // @main.frontend.tokenizer#token_type   
5316 [0x14c4]:          movn #32   
5318 [0x14c6]:          popobj   
5319 [0x14c7]:          newstr @536 // noteq   
5320 [0x14c8]:          movg @93 // @main.frontend.tokenizer#token_type   
5321 [0x14c9]:          movn #32   
5323 [0x14cb]:          movn #0   
5325 [0x14cd]:          popobj   
5326 [0x14ce]:          movi #33220, ebx   
5328 [0x14d0]:          movg @93 // @main.frontend.tokenizer#token_type   
5329 [0x14d1]:          movn #32   
5331 [0x14d3]:          movn #1   
5333 [0x14d5]:          movi #0, adx   
5335 [0x14d7]:          rmov adx, ebx   
5336 [0x14d8]:          new_class @93 // main.frontend.tokenizer#token_type   
5338 [0x14da]:          movg @93 // @main.frontend.tokenizer#token_type   
5339 [0x14db]:          movn #33   
5341 [0x14dd]:          popobj   
5342 [0x14de]:          newstr @537 // shl   
5343 [0x14df]:          movg @93 // @main.frontend.tokenizer#token_type   
5344 [0x14e0]:          movn #33   
5346 [0x14e2]:          movn #0   
5348 [0x14e4]:          popobj   
5349 [0x14e5]:          movi #33221, ebx   
5351 [0x14e7]:          movg @93 // @main.frontend.tokenizer#token_type   
5352 [0x14e8]:          movn #33   
5354 [0x14ea]:          movn #1   
5356 [0x14ec]:          movi #0, adx   
5358 [0x14ee]:          rmov adx, ebx   
5359 [0x14ef]:          new_class @93 // main.frontend.tokenizer#token_type   
5361 [0x14f1]:          movg @93 // @main.frontend.tokenizer#token_type   
5362 [0x14f2]:          movn #34   
5364 [0x14f4]:          popobj   
5365 [0x14f5]:          newstr @538 // shr   
5366 [0x14f6]:          movg @93 // @main.frontend.tokenizer#token_type   
5367 [0x14f7]:          movn #34   
5369 [0x14f9]:          movn #0   
5371 [0x14fb]:          popobj   
5372 [0x14fc]:          movi #33222, ebx   
5374 [0x14fe]:          movg @93 // @main.frontend.tokenizer#token_type   
5375 [0x14ff]:          movn #34   
5377 [0x1501]:          movn #1   
5379 [0x1503]:          movi #0, adx   
5381 [0x1505]:          rmov adx, ebx   
5382 [0x1506]:          new_class @93 // main.frontend.tokenizer#token_type   
5384 [0x1508]:          movg @93 // @main.frontend.tokenizer#token_type   
5385 [0x1509]:          movn #35   
5387 [0x150b]:          popobj   
5388 [0x150c]:          newstr @539 // lessthan   
5389 [0x150d]:          movg @93 // @main.frontend.tokenizer#token_type   
5390 [0x150e]:          movn #35   
5392 [0x1510]:          movn #0   
5394 [0x1512]:          popobj   
5395 [0x1513]:          movi #33223, ebx   
5397 [0x1515]:          movg @93 // @main.frontend.tokenizer#token_type   
5398 [0x1516]:          movn #35   
5400 [0x1518]:          movn #1   
5402 [0x151a]:          movi #0, adx   
5404 [0x151c]:          rmov adx, ebx   
5405 [0x151d]:          new_class @93 // main.frontend.tokenizer#token_type   
5407 [0x151f]:          movg @93 // @main.frontend.tokenizer#token_type   
5408 [0x1520]:          movn #36   
5410 [0x1522]:          popobj   
5411 [0x1523]:          newstr @540 // greaterthan   
5412 [0x1524]:          movg @93 // @main.frontend.tokenizer#token_type   
5413 [0x1525]:          movn #36   
5415 [0x1527]:          movn #0   
5417 [0x1529]:          popobj   
5418 [0x152a]:          movi #33224, ebx   
5420 [0x152c]:          movg @93 // @main.frontend.tokenizer#token_type   
5421 [0x152d]:          movn #36   
5423 [0x152f]:          movn #1   
5425 [0x1531]:          movi #0, adx   
5427 [0x1533]:          rmov adx, ebx   
5428 [0x1534]:          new_class @93 // main.frontend.tokenizer#token_type   
5430 [0x1536]:          movg @93 // @main.frontend.tokenizer#token_type   
5431 [0x1537]:          movn #37   
5433 [0x1539]:          popobj   
5434 [0x153a]:          newstr @541 // and   
5435 [0x153b]:          movg @93 // @main.frontend.tokenizer#token_type   
5436 [0x153c]:          movn #37   
5438 [0x153e]:          movn #0   
5440 [0x1540]:          popobj   
5441 [0x1541]:          movi #33225, ebx   
5443 [0x1543]:          movg @93 // @main.frontend.tokenizer#token_type   
5444 [0x1544]:          movn #37   
5446 [0x1546]:          movn #1   
5448 [0x1548]:          movi #0, adx   
5450 [0x154a]:          rmov adx, ebx   
5451 [0x154b]:          new_class @93 // main.frontend.tokenizer#token_type   
5453 [0x154d]:          movg @93 // @main.frontend.tokenizer#token_type   
5454 [0x154e]:          movn #38   
5456 [0x1550]:          popobj   
5457 [0x1551]:          newstr @542 // andand   
5458 [0x1552]:          movg @93 // @main.frontend.tokenizer#token_type   
5459 [0x1553]:          movn #38   
5461 [0x1555]:          movn #0   
5463 [0x1557]:          popobj   
5464 [0x1558]:          movi #33226, ebx   
5466 [0x155a]:          movg @93 // @main.frontend.tokenizer#token_type   
5467 [0x155b]:          movn #38   
5469 [0x155d]:          movn #1   
5471 [0x155f]:          movi #0, adx   
5473 [0x1561]:          rmov adx, ebx   
5474 [0x1562]:          new_class @93 // main.frontend.tokenizer#token_type   
5476 [0x1564]:          movg @93 // @main.frontend.tokenizer#token_type   
5477 [0x1565]:          movn #39   
5479 [0x1567]:          popobj   
5480 [0x1568]:          newstr @543 // or   
5481 [0x1569]:          movg @93 // @main.frontend.tokenizer#token_type   
5482 [0x156a]:          movn #39   
5484 [0x156c]:          movn #0   
5486 [0x156e]:          popobj   
5487 [0x156f]:          movi #33227, ebx   
5489 [0x1571]:          movg @93 // @main.frontend.tokenizer#token_type   
5490 [0x1572]:          movn #39   
5492 [0x1574]:          movn #1   
5494 [0x1576]:          movi #0, adx   
5496 [0x1578]:          rmov adx, ebx   
5497 [0x1579]:          new_class @93 // main.frontend.tokenizer#token_type   
5499 [0x157b]:          movg @93 // @main.frontend.tokenizer#token_type   
5500 [0x157c]:          movn #40   
5502 [0x157e]:          popobj   
5503 [0x157f]:          newstr @544 // oror   
5504 [0x1580]:          movg @93 // @main.frontend.tokenizer#token_type   
5505 [0x1581]:          movn #40   
5507 [0x1583]:          movn #0   
5509 [0x1585]:          popobj   
5510 [0x1586]:          movi #33228, ebx   
5512 [0x1588]:          movg @93 // @main.frontend.tokenizer#token_type   
5513 [0x1589]:          movn #40   
5515 [0x158b]:          movn #1   
5517 [0x158d]:          movi #0, adx   
5519 [0x158f]:          rmov adx, ebx   
5520 [0x1590]:          new_class @93 // main.frontend.tokenizer#token_type   
5522 [0x1592]:          movg @93 // @main.frontend.tokenizer#token_type   
5523 [0x1593]:          movn #41   
5525 [0x1595]:          popobj   
5526 [0x1596]:          newstr @545 // xor   
5527 [0x1597]:          movg @93 // @main.frontend.tokenizer#token_type   
5528 [0x1598]:          movn #41   
5530 [0x159a]:          movn #0   
5532 [0x159c]:          popobj   
5533 [0x159d]:          movi #33229, ebx   
5535 [0x159f]:          movg @93 // @main.frontend.tokenizer#token_type   
5536 [0x15a0]:          movn #41   
5538 [0x15a2]:          movn #1   
5540 [0x15a4]:          movi #0, adx   
5542 [0x15a6]:          rmov adx, ebx   
5543 [0x15a7]:          new_class @93 // main.frontend.tokenizer#token_type   
5545 [0x15a9]:          movg @93 // @main.frontend.tokenizer#token_type   
5546 [0x15aa]:          movn #42   
5548 [0x15ac]:          popobj   
5549 [0x15ad]:          newstr @546 // not   
5550 [0x15ae]:          movg @93 // @main.frontend.tokenizer#token_type   
5551 [0x15af]:          movn #42   
5553 [0x15b1]:          movn #0   
5555 [0x15b3]:          popobj   
5556 [0x15b4]:          movi #33230, ebx   
5558 [0x15b6]:          movg @93 // @main.frontend.tokenizer#token_type   
5559 [0x15b7]:          movn #42   
5561 [0x15b9]:          movn #1   
5563 [0x15bb]:          movi #0, adx   
5565 [0x15bd]:          rmov adx, ebx   
5566 [0x15be]:          new_class @93 // main.frontend.tokenizer#token_type   
5568 [0x15c0]:          movg @93 // @main.frontend.tokenizer#token_type   
5569 [0x15c1]:          movn #43   
5571 [0x15c3]:          popobj   
5572 [0x15c4]:          newstr @547 // equals   
5573 [0x15c5]:          movg @93 // @main.frontend.tokenizer#token_type   
5574 [0x15c6]:          movn #43   
5576 [0x15c8]:          movn #0   
5578 [0x15ca]:          popobj   
5579 [0x15cb]:          movi #33231, ebx   
5581 [0x15cd]:          movg @93 // @main.frontend.tokenizer#token_type   
5582 [0x15ce]:          movn #43   
5584 [0x15d0]:          movn #1   
5586 [0x15d2]:          movi #0, adx   
5588 [0x15d4]:          rmov adx, ebx   
5589 [0x15d5]:          new_class @93 // main.frontend.tokenizer#token_type   
5591 [0x15d7]:          movg @93 // @main.frontend.tokenizer#token_type   
5592 [0x15d8]:          movn #44   
5594 [0x15da]:          popobj   
5595 [0x15db]:          newstr @548 // infer   
5596 [0x15dc]:          movg @93 // @main.frontend.tokenizer#token_type   
5597 [0x15dd]:          movn #44   
5599 [0x15df]:          movn #0   
5601 [0x15e1]:          popobj   
5602 [0x15e2]:          movi #33232, ebx   
5604 [0x15e4]:          movg @93 // @main.frontend.tokenizer#token_type   
5605 [0x15e5]:          movn #44   
5607 [0x15e7]:          movn #1   
5609 [0x15e9]:          movi #0, adx   
5611 [0x15eb]:          rmov adx, ebx   
5612 [0x15ec]:          new_class @93 // main.frontend.tokenizer#token_type   
5614 [0x15ee]:          movg @93 // @main.frontend.tokenizer#token_type   
5615 [0x15ef]:          movn #45   
5617 [0x15f1]:          popobj   
5618 [0x15f2]:          newstr @549 // left_brace   
5619 [0x15f3]:          movg @93 // @main.frontend.tokenizer#token_type   
5620 [0x15f4]:          movn #45   
5622 [0x15f6]:          movn #0   
5624 [0x15f8]:          popobj   
5625 [0x15f9]:          movi #33233, ebx   
5627 [0x15fb]:          movg @93 // @main.frontend.tokenizer#token_type   
5628 [0x15fc]:          movn #45   
5630 [0x15fe]:          movn #1   
5632 [0x1600]:          movi #0, adx   
5634 [0x1602]:          rmov adx, ebx   
5635 [0x1603]:          new_class @93 // main.frontend.tokenizer#token_type   
5637 [0x1605]:          movg @93 // @main.frontend.tokenizer#token_type   
5638 [0x1606]:          movn #46   
5640 [0x1608]:          popobj   
5641 [0x1609]:          newstr @550 // right_brace   
5642 [0x160a]:          movg @93 // @main.frontend.tokenizer#token_type   
5643 [0x160b]:          movn #46   
5645 [0x160d]:          movn #0   
5647 [0x160f]:          popobj   
5648 [0x1610]:          movi #33234, ebx   
5650 [0x1612]:          movg @93 // @main.frontend.tokenizer#token_type   
5651 [0x1613]:          movn #46   
5653 [0x1615]:          movn #1   
5655 [0x1617]:          movi #0, adx   
5657 [0x1619]:          rmov adx, ebx   
5658 [0x161a]:          new_class @93 // main.frontend.tokenizer#token_type   
5660 [0x161c]:          movg @93 // @main.frontend.tokenizer#token_type   
5661 [0x161d]:          movn #47   
5663 [0x161f]:          popobj   
5664 [0x1620]:          newstr @551 // quesmk   
5665 [0x1621]:          movg @93 // @main.frontend.tokenizer#token_type   
5666 [0x1622]:          movn #47   
5668 [0x1624]:          movn #0   
5670 [0x1626]:          popobj   
5671 [0x1627]:          movi #33235, ebx   
5673 [0x1629]:          movg @93 // @main.frontend.tokenizer#token_type   
5674 [0x162a]:          movn #47   
5676 [0x162c]:          movn #1   
5678 [0x162e]:          movi #0, adx   
5680 [0x1630]:          rmov adx, ebx   
5681 [0x1631]:          new_class @93 // main.frontend.tokenizer#token_type   
5683 [0x1633]:          movg @93 // @main.frontend.tokenizer#token_type   
5684 [0x1634]:          movn #48   
5686 [0x1636]:          popobj   
5687 [0x1637]:          newstr @552 // ptr   
5688 [0x1638]:          movg @93 // @main.frontend.tokenizer#token_type   
5689 [0x1639]:          movn #48   
5691 [0x163b]:          movn #0   
5693 [0x163d]:          popobj   
5694 [0x163e]:          movi #33236, ebx   
5696 [0x1640]:          movg @93 // @main.frontend.tokenizer#token_type   
5697 [0x1641]:          movn #48   
5699 [0x1643]:          movn #1   
5701 [0x1645]:          movi #0, adx   
5703 [0x1647]:          rmov adx, ebx   
5704 [0x1648]:          new_class @93 // main.frontend.tokenizer#token_type   
5706 [0x164a]:          movg @93 // @main.frontend.tokenizer#token_type   
5707 [0x164b]:          movn #49   
5709 [0x164d]:          popobj   
5710 [0x164e]:          newstr @553 // inc   
5711 [0x164f]:          movg @93 // @main.frontend.tokenizer#token_type   
5712 [0x1650]:          movn #49   
5714 [0x1652]:          movn #0   
5716 [0x1654]:          popobj   
5717 [0x1655]:          movi #33237, ebx   
5719 [0x1657]:          movg @93 // @main.frontend.tokenizer#token_type   
5720 [0x1658]:          movn #49   
5722 [0x165a]:          movn #1   
5724 [0x165c]:          movi #0, adx   
5726 [0x165e]:          rmov adx, ebx   
5727 [0x165f]:          new_class @93 // main.frontend.tokenizer#token_type   
5729 [0x1661]:          movg @93 // @main.frontend.tokenizer#token_type   
5730 [0x1662]:          movn #50   
5732 [0x1664]:          popobj   
5733 [0x1665]:          newstr @554 // dec   
5734 [0x1666]:          movg @93 // @main.frontend.tokenizer#token_type   
5735 [0x1667]:          movn #50   
5737 [0x1669]:          movn #0   
5739 [0x166b]:          popobj   
5740 [0x166c]:          movi #33238, ebx   
5742 [0x166e]:          movg @93 // @main.frontend.tokenizer#token_type   
5743 [0x166f]:          movn #50   
5745 [0x1671]:          movn #1   
5747 [0x1673]:          movi #0, adx   
5749 [0x1675]:          rmov adx, ebx   
5750 [0x1676]:          new_class @93 // main.frontend.tokenizer#token_type   
5752 [0x1678]:          movg @93 // @main.frontend.tokenizer#token_type   
5753 [0x1679]:          movn #51   
5755 [0x167b]:          popobj   
5756 [0x167c]:          newstr @555 // dollar   
5757 [0x167d]:          movg @93 // @main.frontend.tokenizer#token_type   
5758 [0x167e]:          movn #51   
5760 [0x1680]:          movn #0   
5762 [0x1682]:          popobj   
5763 [0x1683]:          movi #33239, ebx   
5765 [0x1685]:          movg @93 // @main.frontend.tokenizer#token_type   
5766 [0x1686]:          movn #51   
5768 [0x1688]:          movn #1   
5770 [0x168a]:          movi #0, adx   
5772 [0x168c]:          rmov adx, ebx   
5773 [0x168d]:          new_class @93 // main.frontend.tokenizer#token_type   
5775 [0x168f]:          movg @93 // @main.frontend.tokenizer#token_type   
5776 [0x1690]:          movn #52   
5778 [0x1692]:          popobj   
5779 [0x1693]:          newstr @556 // at   
5780 [0x1694]:          movg @93 // @main.frontend.tokenizer#token_type   
5781 [0x1695]:          movn #52   
5783 [0x1697]:          movn #0   
5785 [0x1699]:          popobj   
5786 [0x169a]:          movi #33240, ebx   
5788 [0x169c]:          movg @93 // @main.frontend.tokenizer#token_type   
5789 [0x169d]:          movn #52   
5791 [0x169f]:          movn #1   
5793 [0x16a1]:          movi #0, adx   
5795 [0x16a3]:          rmov adx, ebx   
5796 [0x16a4]:          new_class @93 // main.frontend.tokenizer#token_type   
5798 [0x16a6]:          movg @93 // @main.frontend.tokenizer#token_type   
5799 [0x16a7]:          movn #53   
5801 [0x16a9]:          popobj   
5802 [0x16aa]:          newstr @150 // eof   
5803 [0x16ab]:          movg @93 // @main.frontend.tokenizer#token_type   
5804 [0x16ac]:          movn #53   
5806 [0x16ae]:          movn #0   
5808 [0x16b0]:          popobj   
5809 [0x16b1]:          movi #9999, ebx   
5811 [0x16b3]:          movg @93 // @main.frontend.tokenizer#token_type   
5812 [0x16b4]:          movn #53   
5814 [0x16b6]:          movn #1   
5816 [0x16b8]:          movi #0, adx   
5818 [0x16ba]:          rmov adx, ebx   
5819 [0x16bb]:          new_class @93 // main.frontend.tokenizer#token_type   
5821 [0x16bd]:          movg @93 // @main.frontend.tokenizer#token_type   
5822 [0x16be]:          movn #54   
5824 [0x16c0]:          popobj   
5825 [0x16c1]:          newstr @492 // none   
5826 [0x16c2]:          movg @93 // @main.frontend.tokenizer#token_type   
5827 [0x16c3]:          movn #54   
5829 [0x16c5]:          movn #0   
5831 [0x16c7]:          popobj   
5832 [0x16c8]:          movi #10000, ebx   
5834 [0x16ca]:          movg @93 // @main.frontend.tokenizer#token_type   
5835 [0x16cb]:          movn #54   
5837 [0x16cd]:          movn #1   
5839 [0x16cf]:          movi #0, adx   
5841 [0x16d1]:          rmov adx, ebx   
5842 [0x16d2]:          new_class @96 // main#optimization_level   
5844 [0x16d4]:          movg @96 // @main#optimization_level   
5845 [0x16d5]:          movn #0   
5847 [0x16d7]:          popobj   
5848 [0x16d8]:          newstr @492 // none   
5849 [0x16d9]:          movg @96 // @main#optimization_level   
5850 [0x16da]:          movn #0   
5852 [0x16dc]:          movn #0   
5854 [0x16de]:          popobj   
5855 [0x16df]:          movi #0, ebx   
5857 [0x16e1]:          movg @96 // @main#optimization_level   
5858 [0x16e2]:          movn #0   
5860 [0x16e4]:          movn #1   
5862 [0x16e6]:          movi #0, adx   
5864 [0x16e8]:          rmov adx, ebx   
5865 [0x16e9]:          new_class @96 // main#optimization_level   
5867 [0x16eb]:          movg @96 // @main#optimization_level   
5868 [0x16ec]:          movn #1   
5870 [0x16ee]:          popobj   
5871 [0x16ef]:          newstr @557 // basic   
5872 [0x16f0]:          movg @96 // @main#optimization_level   
5873 [0x16f1]:          movn #1   
5875 [0x16f3]:          movn #0   
5877 [0x16f5]:          popobj   
5878 [0x16f6]:          movi #1, ebx   
5880 [0x16f8]:          movg @96 // @main#optimization_level   
5881 [0x16f9]:          movn #1   
5883 [0x16fb]:          movn #1   
5885 [0x16fd]:          movi #0, adx   
5887 [0x16ff]:          rmov adx, ebx   
5888 [0x1700]:          new_class @96 // main#optimization_level   
5890 [0x1702]:          movg @96 // @main#optimization_level   
5891 [0x1703]:          movn #2   
5893 [0x1705]:          popobj   
5894 [0x1706]:          newstr @558 // high_performance   
5895 [0x1707]:          movg @96 // @main#optimization_level   
5896 [0x1708]:          movn #2   
5898 [0x170a]:          movn #0   
5900 [0x170c]:          popobj   
5901 [0x170d]:          movi #2, ebx   
5903 [0x170f]:          movg @96 // @main#optimization_level   
5904 [0x1710]:          movn #2   
5906 [0x1712]:          movn #1   
5908 [0x1714]:          movi #0, adx   
5910 [0x1716]:          rmov adx, ebx   
5911 [0x1717]:          new_class @97 // main#compilation_mode   
5913 [0x1719]:          movg @97 // @main#compilation_mode   
5914 [0x171a]:          movn #0   
5916 [0x171c]:          popobj   
5917 [0x171d]:          newstr @559 // file_mode   
5918 [0x171e]:          movg @97 // @main#compilation_mode   
5919 [0x171f]:          movn #0   
5921 [0x1721]:          movn #0   
5923 [0x1723]:          popobj   
5924 [0x1724]:          movi #33190, ebx   
5926 [0x1726]:          movg @97 // @main#compilation_mode   
5927 [0x1727]:          movn #0   
5929 [0x1729]:          movn #1   
5931 [0x172b]:          movi #0, adx   
5933 [0x172d]:          rmov adx, ebx   
5934 [0x172e]:          new_class @97 // main#compilation_mode   
5936 [0x1730]:          movg @97 // @main#compilation_mode   
5937 [0x1731]:          movn #1   
5939 [0x1733]:          popobj   
5940 [0x1734]:          newstr @560 // project_mode   
5941 [0x1735]:          movg @97 // @main#compilation_mode   
5942 [0x1736]:          movn #1   
5944 [0x1738]:          movn #0   
5946 [0x173a]:          popobj   
5947 [0x173b]:          movi #33191, ebx   
5949 [0x173d]:          movg @97 // @main#compilation_mode   
5950 [0x173e]:          movn #1   
5952 [0x1740]:          movn #1   
5954 [0x1742]:          movi #0, adx   
5956 [0x1744]:          rmov adx, ebx   
5957 [0x1745]:          movg @50 // @platform.kernel#platform   
5958 [0x1746]:          movn #0   
5960 [0x1748]:          movi #0, adx   
5962 [0x174a]:          movi #3828, ebx   
5964 [0x174c]:          rmov adx, ebx   
5965 [0x174d]:          call @4106 // <std.io#__srt_global.$03internal_static_init>   
5966 [0x174e]:          call @4107 // <std.io.fiber#__srt_global.$03internal_static_init>   
5967 [0x174f]:          call @4108 // <std.io#file.$03internal_static_init>   
5968 [0x1750]:          call @4109 // <std.io.task#job.$03internal_static_init>   
5969 [0x1751]:          call @4110 // <std.io.task#__srt_global.$03internal_static_init>   
5970 [0x1752]:          call @4111 // <std.io#thread_group.$03internal_static_init>   
5971 [0x1753]:          call @4112 // <std#_nil_.$03internal_static_init>   
5972 [0x1754]:          call @4113 // <std#__srt_global.$03internal_static_init>   
5973 [0x1755]:          call @4114 // <std#string.$03internal_static_init>   
5974 [0x1756]:          call @4115 // <std#string_builder.$03internal_static_init>   
5975 [0x1757]:          call @4116 // <std#time.$03internal_static_init>   
5976 [0x1758]:          call @4117 // <main.frontend#error_manager.$03internal_static_init>   
5977 [0x1759]:          call @4118 // <main.frontend.parser#ast.$03internal_static_init>   
5978 [0x175a]:          call @4119 // <main.frontend.parser#Parser.$03internal_static_init>   
5979 [0x175b]:          call @4120 // <main#__srt_global.$03internal_static_init>   
5980 [0x175c]:          call @4121 // <main#options.$03internal_static_init>   
5981 [0x175d]:          call @4122 // <std.io#thread_result.$03internal_static_init>   
5982 [0x175e]:          call @4123 // <std#tmp.$03internal_static_init>   
5983 [0x175f]:          ret   


function: platform.kernel#platform.exit[2356] params(1) in file: lib\support\/0.2.9//platform//kernel//platform.sharp:16:15: note:  
		    static def exit(value: var) {
		              ^

0 [0x0]: line: 17 ipushl #0   : protected asm start
1 [0x1]:          int 0x1d   
2 [0x2]:          ret   : protected asm end


function: platform.kernel#platform.get_lib_path[2357] params(1) in file: lib\support\/0.2.9//platform//kernel//platform.sharp:23:23: note:  
		    private static def get_lib_path(name: string) : _int8[] {
		                      ^

0 [0x0]: line: 24 call @2348 // <platform#build.is_windows>   
1 [0x1]:          loadval ebx   
2 [0x2]:          movr cmt, ebx   
3 [0x3]:          jne 9   
4 [0x4]: line: 25 pushl 0   
5 [0x5]:          newstr @88 // .dll   
6 [0x6]:          call @3600 // <std#string.operator+=>   
7 [0x7]:          pop   
8 [0x8]:          jmp @13   
9 [0x9]: line: 27 pushl 0   
10 [0xa]:          newstr @89 // .so   
11 [0xb]:          call @3600 // <std#string.operator+=>   
12 [0xc]:          pop   
13 [0xd]:          nop   
14 [0xe]: line: 30 new_class @28 // std.io#file   
16 [0x10]:          dup    
17 [0x11]:          pushl 0   
18 [0x12]:          call @2077 // <std.io#file.file>   
19 [0x13]:          call @2084 // <std.io#file.get_absolute_path>   
20 [0x14]:          call @3572 // <std#string.get_data>   
21 [0x15]:          popobj2    
22 [0x16]:          returnobj   
23 [0x17]:          ret   


function: platform.kernel#platform.load_library[2358] params(1) in file: lib\support\/0.2.9//platform//kernel//platform.sharp:33:15: note:  
		    static def load_library(name: string) {
		              ^

0 [0x0]: line: 34 pushl 0   
1 [0x1]:          call @2357 // <platform.kernel#platform.get_lib_path>   
2 [0x2]:          popobj2    
3 [0x3]:          smovr_3 fp+1   
4 [0x4]: line: 35 pushl 1   : protected asm start
5 [0x5]:          int 0x39   
6 [0x6]:          ret   : protected asm end


function: platform.kernel#platform.free_library[2359] params(1) in file: lib\support\/0.2.9//platform//kernel//platform.sharp:41:15: note:  
		    static def free_library(name: string): var {
		              ^

0 [0x0]: line: 42 pushl 0   
1 [0x1]:          call @2357 // <platform.kernel#platform.get_lib_path>   
2 [0x2]:          popobj2    
3 [0x3]:          smovr_3 fp+1   
4 [0x4]: line: 43 istorel 0, fp+2   
6 [0x6]: line: 44 pushl 1   : protected asm start
7 [0x7]:          int 0x3a   
8 [0x8]:          smovr_2 ebx, fp+2   
9 [0x9]: line: 50 loadl ebx, fp+2   : protected asm end
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


function: platform.kernel#platform.link_func[2360] params(2) in file: lib\support\/0.2.9//platform//kernel//platform.sharp:53:15: note:  
		    static def link_func(name: string, library: string): var {
		              ^

0 [0x0]: line: 54 pushl 0   
1 [0x1]:          call @2357 // <platform.kernel#platform.get_lib_path>   
2 [0x2]:          popobj2    
3 [0x3]:          smovr_3 fp+2   
4 [0x4]: line: 55 pushl 0   
5 [0x5]:          call @3572 // <std#string.get_data>   
6 [0x6]:          popobj2    
7 [0x7]:          smovr_3 fp+3   
8 [0x8]: line: 56 istorel 0, fp+4   
10 [0xa]: line: 57 pushl 3   : protected asm start
11 [0xb]:          pushl 2   
12 [0xc]:          int 0x3b   
13 [0xd]:          smovr_2 ebx, fp+4   
14 [0xe]: line: 64 loadl ebx, fp+4   : protected asm end
15 [0xf]:          return_val ebx   
16 [0x10]:          ret   


function: platform.kernel#platform.srt_init[2361] params(1) in file: lib\support\/0.2.9//platform//kernel//platform.sharp:67:23: note:  
		    private static def srt_init(args: object[]) : var {
		                      ^

0 [0x0]: line: 68 new_class @75 // std#string   
2 [0x2]:          dup    
3 [0x3]:          newstr @55 //    
4 [0x4]:          call @3546 // <std#string.string>   
5 [0x5]:          pushl 0   
6 [0x6]:          movi #0, ebx   
8 [0x8]:          popobj2    
9 [0x9]:          movr adx, ebx   
10 [0xa]:          chklen adx   
11 [0xb]:          movnd adx   
12 [0xc]:          vcast 0 -> []   
13 [0xd]:          pushobj   
14 [0xe]:          call @3558 // <std#string.operator+>   
15 [0xf]:          movg @48 // @platform#build   
16 [0x10]:          movn #1   
18 [0x12]:          popobj   
19 [0x13]: line: 69 new_class @75 // std#string   
21 [0x15]:          dup    
22 [0x16]:          newstr @55 //    
23 [0x17]:          call @3546 // <std#string.string>   
24 [0x18]:          pushl 0   
25 [0x19]:          movi #1, ebx   
27 [0x1b]:          popobj2    
28 [0x1c]:          movr adx, ebx   
29 [0x1d]:          chklen adx   
30 [0x1e]:          movnd adx   
31 [0x1f]:          vcast 0 -> []   
32 [0x20]:          pushobj   
33 [0x21]:          call @3558 // <std#string.operator+>   
34 [0x22]:          movg @48 // @platform#build   
35 [0x23]:          movn #3   
37 [0x25]:          popobj   
38 [0x26]: line: 70 new_class @75 // std#string   
40 [0x28]:          dup    
41 [0x29]:          newstr @55 //    
42 [0x2a]:          call @3546 // <std#string.string>   
43 [0x2b]:          pushl 0   
44 [0x2c]:          movi #2, ebx   
46 [0x2e]:          popobj2    
47 [0x2f]:          movr adx, ebx   
48 [0x30]:          chklen adx   
49 [0x31]:          movnd adx   
50 [0x32]:          vcast 0 -> []   
51 [0x33]:          pushobj   
52 [0x34]:          call @3558 // <std#string.operator+>   
53 [0x35]:          movg @48 // @platform#build   
54 [0x36]:          movn #2   
56 [0x38]:          popobj   
57 [0x39]: line: 71 new_class @75 // std#string   
59 [0x3b]:          dup    
60 [0x3c]:          newstr @55 //    
61 [0x3d]:          call @3546 // <std#string.string>   
62 [0x3e]:          pushl 0   
63 [0x3f]:          movi #3, ebx   
65 [0x41]:          popobj2    
66 [0x42]:          movr adx, ebx   
67 [0x43]:          chklen adx   
68 [0x44]:          movnd adx   
69 [0x45]:          vcast 0 -> []   
70 [0x46]:          pushobj   
71 [0x47]:          call @3558 // <std#string.operator+>   
72 [0x48]:          movg @48 // @platform#build   
73 [0x49]:          movn #0   
75 [0x4b]:          popobj   
76 [0x4c]: line: 73 call @2355 // <platform.kernel#platform.static_init>   
77 [0x4d]: line: 74 pushl 0   
78 [0x4e]: line: 76 movi #4, ebx   
80 [0x50]:          popobj2    
81 [0x51]:          movr adx, ebx   
82 [0x52]:          chklen adx   
83 [0x53]:          movnd adx   
84 [0x54]:          movi #37, cmt   
86 [0x56]:          cast cmt   
87 [0x57]:          smovr_3 fp+1   
88 [0x58]: line: 77 pushl 1   
89 [0x59]:          call @2385 // <platform.kernel#vm.set_thread>   
90 [0x5a]: line: 79 movg @39 // @std.io#thread_priority   
91 [0x5b]:          movn #2   
93 [0x5d]:          smovr_3 fp+2   
94 [0x5e]: line: 80 movg @38 // @std.io#thread_group   
95 [0x5f]:          movn #0   
97 [0x61]:          pushobj   
98 [0x62]:          pushl 1   
99 [0x63]:          call @2286 // <std.io#thread_group.add>   
100 [0x64]: line: 82 movg @38 // @std.io#thread_group   : protected asm start
101 [0x65]:          movn #0   
103 [0x67]:          pushobj   
104 [0x68]:          movl 1   
105 [0x69]:          movn #7   
107 [0x6b]:          popobj   
108 [0x6c]:          movl 2   
109 [0x6d]:          pushobj   
110 [0x6e]:          movl 1   
111 [0x6f]:          movn #3   
113 [0x71]:          popobj   
114 [0x72]: line: 99 movl 0   : protected asm end
115 [0x73]: line: 100 sizeof ebx   
116 [0x74]:           rstore ebx   
117 [0x75]:           movi #5, ebx   
119 [0x77]:           loadval ecx   
120 [0x78]:           sub ecx, ebx -> ebx   
121 [0x79]:           new_classarray ebx  // std#string[]   
123 [0x7b]:           popobj2    
124 [0x7c]:           smovr_3 fp+3   
125 [0x7d]: line: 101 istorel 0, fp+4   
127 [0x7f]: line: 103 istorel 5, fp+5   
129 [0x81]:           ipushl #5   
130 [0x82]:           movl 0   
131 [0x83]:           sizeof ebx   
132 [0x84]:           loadval ecx   
133 [0x85]:           lt ecx, ebx   
134 [0x86]:           movr ebx, cmt   
135 [0x87]:           movr cmt, ebx   
136 [0x88]:           jne 163   
137 [0x89]: line: 104 new_class @75 // std#string   
139 [0x8b]:           dup    
140 [0x8c]:           pushl 0   
141 [0x8d]:           loadl ebx, fp+5   
142 [0x8e]:           popobj2    
143 [0x8f]:           movr adx, ebx   
144 [0x90]:           chklen adx   
145 [0x91]:           movnd adx   
146 [0x92]:           vcast 0 -> []   
147 [0x93]:           pushobj   
148 [0x94]:           call @3546 // <std#string.string>   
149 [0x95]:           pushl 3   
150 [0x96]:           loadl ebx, fp+4   
151 [0x97]:           movr egx, ebx   
152 [0x98]:           inc ebx   
153 [0x99]:           smovr_2 ebx, fp+4   
154 [0x9a]:           movr ebx, egx   
155 [0x9b]:           popobj2    
156 [0x9c]:           movr adx, ebx   
157 [0x9d]:           chklen adx   
158 [0x9e]:           movnd adx   
159 [0x9f]:           popobj   
160 [0xa0]:           iaddl 1, fp@5   
162 [0xa2]:           jmp @129   
163 [0xa3]: line: 107 istorel 0, fp+6   
165 [0xa5]: line: 108 movg @50 // @platform.kernel#platform   
166 [0xa6]:           movn #0   
168 [0xa8]:           movi #0, adx   
170 [0xaa]:           iaload ebx, adx   
171 [0xab]:           rstore ebx   
172 [0xac]:           movi #0, ebx   
174 [0xae]:           loadval ecx   
175 [0xaf]:           tne ecx, ebx   
176 [0xb0]:           movr ebx, cmt   
177 [0xb1]:           movr cmt, ebx   
178 [0xb2]:           jne 193   
179 [0xb3]: line: 109 movg @50 // @platform.kernel#platform   
180 [0xb4]:           movn #0   
182 [0xb6]:           movi #0, adx   
184 [0xb8]:           iaload ebx, adx   
185 [0xb9]:           rstore ebx   
186 [0xba]:           pushl 3   
187 [0xbb]:           smov ebx, sp+[-1]   
188 [0xbc]:           calld ebx   
189 [0xbd]:           swap    
190 [0xbe]:           pop   
191 [0xbf]:           ipopl 6   
192 [0xc0]:           jmp @267   
193 [0xc1]:           movg @50 // @platform.kernel#platform   
194 [0xc2]:           movn #1   
196 [0xc4]:           movi #0, adx   
198 [0xc6]:           iaload ebx, adx   
199 [0xc7]:           rstore ebx   
200 [0xc8]:           movi #0, ebx   
202 [0xca]:           loadval ecx   
203 [0xcb]:           tne ecx, ebx   
204 [0xcc]:           movr ebx, cmt   
205 [0xcd]:           movr cmt, ebx   
206 [0xce]:           jne 219   
207 [0xcf]: line: 110 movg @50 // @platform.kernel#platform   
208 [0xd0]:           movn #1   
210 [0xd2]:           movi #0, adx   
212 [0xd4]:           iaload ebx, adx   
213 [0xd5]:           rstore ebx   
214 [0xd6]:           pushl 3   
215 [0xd7]:           smov ebx, sp+[-1]   
216 [0xd8]:           calld ebx   
217 [0xd9]:           pop   
218 [0xda]:           jmp @267   
219 [0xdb]:           movg @50 // @platform.kernel#platform   
220 [0xdc]:           movn #2   
222 [0xde]:           movi #0, adx   
224 [0xe0]:           iaload ebx, adx   
225 [0xe1]:           rstore ebx   
226 [0xe2]:           movi #0, ebx   
228 [0xe4]:           loadval ecx   
229 [0xe5]:           tne ecx, ebx   
230 [0xe6]:           movr ebx, cmt   
231 [0xe7]:           movr cmt, ebx   
232 [0xe8]:           jne 243   
233 [0xe9]: line: 111 movg @50 // @platform.kernel#platform   
234 [0xea]:           movn #2   
236 [0xec]:           movi #0, adx   
238 [0xee]:           iaload ebx, adx   
239 [0xef]:           rstore ebx   
240 [0xf0]:           loadval ebx   
241 [0xf1]:           calld ebx   
242 [0xf2]:           jmp @267   
243 [0xf3]:           movg @50 // @platform.kernel#platform   
244 [0xf4]:           movn #3   
246 [0xf6]:           movi #0, adx   
248 [0xf8]:           iaload ebx, adx   
249 [0xf9]:           rstore ebx   
250 [0xfa]:           movi #0, ebx   
252 [0xfc]:           loadval ecx   
253 [0xfd]:           tne ecx, ebx   
254 [0xfe]:           movr ebx, cmt   
255 [0xff]:           movr cmt, ebx   
256 [0x100]:           jne 267   
257 [0x101]: line: 112 movg @50 // @platform.kernel#platform   
258 [0x102]:           movn #3   
260 [0x104]:           movi #0, adx   
262 [0x106]:           iaload ebx, adx   
263 [0x107]:           rstore ebx   
264 [0x108]:           loadval ebx   
265 [0x109]:           calld ebx   
266 [0x10a]:           ipopl 6   
267 [0x10b]:           nop   
268 [0x10c]: line: 115 loadl ebx, fp+6   
269 [0x10d]:           return_val ebx   
270 [0x10e]:           ret   


constructor: platform.kernel#platform.platform[2362] params(0) in file: lib\support\/0.2.9//platform//kernel//platform.sharp:6:6: note:  
		class platform
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: platform.kernel#stack_state.stack_state[2363] params(0) in file: lib\support\/0.2.9//platform//kernel//stack_state.sharp:3:6: note:  
		class stack_state {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


function: platform.kernel#vm.get_frame_info[2364] params(0) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:7:15: note:  
		    static def get_frame_info() : stack_state {
		              ^

0 [0x0]: line: 8 int 0x35   : protected asm start
1 [0x1]:         popobj2    
2 [0x2]:         returnobj   
3 [0x3]:         ret   
4 [0x4]: line: 14 pushnull    : protected asm end
5 [0x5]:          popobj2    
6 [0x6]:          returnobj   
7 [0x7]:          ret   


function: platform.kernel#vm.get_stack_trace[2365] params(1) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:17:15: note:  
		    static def get_stack_trace(info : stack_state) : string {
		              ^

0 [0x0]: line: 18 pushl 0   : protected asm start
1 [0x1]:          int 0x36   
2 [0x2]:          popobj2    
3 [0x3]:          returnobj   
4 [0x4]:          ret   
5 [0x5]: line: 25 pushnull    : protected asm end
6 [0x6]:          popobj2    
7 [0x7]:          returnobj   
8 [0x8]:          ret   


function: platform.kernel#vm.thread_create[2366] params(1) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:28:15: note:  
		    static def thread_create(daemon: var) : var {
		              ^

0 [0x0]: line: 29 istorel 0, fp+1   
2 [0x2]: line: 30 movi #2296, adx   : protected asm start
4 [0x4]:          loadl ebx, fp+0   
5 [0x5]:          int 0x10   
6 [0x6]:          smovr_2 ebx, fp+1   
7 [0x7]: line: 37 loadl ebx, fp+1   : protected asm end
8 [0x8]:          return_val ebx   
9 [0x9]:          ret   


function: platform.kernel#vm.start_fiber[2367] params(4) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:40:15: note:  
		    static def start_fiber(fib: fiber, t: thread, args: object[], main: (object[])(var)) : var {
		              ^

0 [0x0]: line: 41 istorel 0, fp+4   
2 [0x2]: line: 42 movl 0   
3 [0x3]:          movn #0   
5 [0x5]:          pushobj   
6 [0x6]:          call @3572 // <std#string.get_data>   
7 [0x7]:          popobj2    
8 [0x8]:          smovr_3 fp+5   
9 [0x9]: line: 43 istorel -1, fp+6   
11 [0xb]: line: 45 movl 1   
12 [0xc]:          checknull   
13 [0xd]:          not ebx, ebx   
14 [0xe]:          movr cmt, ebx   
15 [0xf]:          jne 19   
16 [0x10]: line: 46 pushl 1   
17 [0x11]:          call @2271 // <std.io#thread.get_native_handle>   
18 [0x12]:          ipopl 6   
19 [0x13]:          nop   
20 [0x14]: line: 48 pushl 2   : protected asm start
21 [0x15]:          pushl 0   
22 [0x16]:          ipushl #6   
23 [0x17]:          ipushl #3   
24 [0x18]:          pushl 5   
25 [0x19]:          int 0x45   
26 [0x1a]:          smovr_2 ebx, fp+4   
27 [0x1b]: line: 58 loadl ebx, fp+4   : protected asm end
28 [0x1c]:          return_val ebx   
29 [0x1d]:          ret   


function: platform.kernel#vm.suspend_fiber[2368] params(1) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:61:15: note:  
		    static def suspend_fiber(fib: fiber) : var {
		              ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          smovr_2 ebx, fp+1   
7 [0x7]: line: 63 istorel 0, fp+2   
9 [0x9]: line: 65 ipushl #1   : protected asm start
10 [0xa]:          int 0x46   
11 [0xb]:          smovr_2 ebx, fp+2   
12 [0xc]: line: 71 loadl ebx, fp+2   : protected asm end
13 [0xd]:          return_val ebx   
14 [0xe]:          ret   


function: platform.kernel#vm.unsuspend_fiber[2369] params(1) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:74:15: note:  
		    static def unsuspend_fiber(fib: fiber) : var {
		              ^

0 [0x0]: line: 75 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          smovr_2 ebx, fp+1   
7 [0x7]: line: 76 istorel 0, fp+2   
9 [0x9]: line: 78 ipushl #1   : protected asm start
10 [0xa]:          int 0x47   
11 [0xb]:          smovr_2 ebx, fp+2   
12 [0xc]: line: 84 loadl ebx, fp+2   : protected asm end
13 [0xd]:          return_val ebx   
14 [0xe]:          ret   


function: platform.kernel#vm.kill_fiber[2370] params(1) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:87:15: note:  
		    static def kill_fiber(fib: fiber) : var {
		              ^

0 [0x0]: line: 88 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          smovr_2 ebx, fp+1   
7 [0x7]: line: 89 istorel 0, fp+2   
9 [0x9]: line: 91 ipushl #1   : protected asm start
10 [0xa]:          int 0x48   
11 [0xb]:          smovr_2 ebx, fp+2   
12 [0xc]: line: 97 loadl ebx, fp+2   : protected asm end
13 [0xd]:          return_val ebx   
14 [0xe]:          ret   


function: platform.kernel#vm.bind_fiber[2371] params(2) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:100:15: note:  
		    static def bind_fiber(fib: fiber, t: thread) : var {
		              ^

0 [0x0]: line: 101 movl 0   
1 [0x1]:           movn #1   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           smovr_2 ebx, fp+2   
7 [0x7]: line: 102 istorel -1, fp+3   
9 [0x9]: line: 104 movl 1   
10 [0xa]:           checknull   
11 [0xb]:           not ebx, ebx   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 17   
14 [0xe]: line: 105 pushl 1   
15 [0xf]:           call @2271 // <std.io#thread.get_native_handle>   
16 [0x10]:           ipopl 3   
17 [0x11]:           nop   
18 [0x12]: line: 106 istorel 0, fp+4   
20 [0x14]: line: 108 ipushl #3   : protected asm start
21 [0x15]:           ipushl #2   
22 [0x16]:           int 0x49   
23 [0x17]:           smovr_2 ebx, fp+4   
24 [0x18]: line: 115 loadl ebx, fp+4   : protected asm end
25 [0x19]:           return_val ebx   
26 [0x1a]:           ret   


function: platform.kernel#vm.get_bound_fibers[2372] params(1) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:118:15: note:  
		    static def get_bound_fibers(t: thread) : var {
		              ^

0 [0x0]: line: 119 pushl 0   
1 [0x1]:           call @2271 // <std.io#thread.get_native_handle>   
2 [0x2]:           ipopl 1   
3 [0x3]: line: 120 istorel 0, fp+2   
5 [0x5]: line: 122 ipushl #1   : protected asm start
6 [0x6]:           int 0x4a   
7 [0x7]:           smovr_2 ebx, fp+2   
8 [0x8]: line: 128 loadl ebx, fp+2   : protected asm end
9 [0x9]:           return_val ebx   
10 [0xa]:           ret   


function: platform.kernel#vm.get_fiber_state[2373] params(1) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:131:15: note:  
		    static def get_fiber_state(fib: fiber) : var {
		              ^

0 [0x0]: line: 132 movl 0   
1 [0x1]:           movn #1   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           smovr_2 ebx, fp+1   
7 [0x7]: line: 133 istorel 0, fp+2   
9 [0x9]: line: 135 ipushl #1   : protected asm start
10 [0xa]:           int 0x4b   
11 [0xb]:           smovr_2 ebx, fp+2   
12 [0xc]: line: 141 loadl ebx, fp+2   : protected asm end
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


function: platform.kernel#vm.current_fiber[2374] params(0) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:144:15: note:  
		    static def current_fiber() : fiber {
		              ^

0 [0x0]: line: 145 movl 0   
1 [0x1]:           del   
2 [0x2]: line: 147 int 0x4c   : protected asm start
3 [0x3]:           movl 0   
4 [0x4]:           popobj   
5 [0x5]: line: 153 movl 0   : protected asm end
6 [0x6]:           returnobj   
7 [0x7]:           ret   


function: platform.kernel#vm.suspend[2375] params(1) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:156:15: note:  
		    static def suspend(t: thread) : thread_result {
		              ^

0 [0x0]: line: 157 pushl 0   
1 [0x1]:           call @2271 // <std.io#thread.get_native_handle>   
2 [0x2]:           ipopl 1   
3 [0x3]: line: 158 istorel 0, fp+2   
5 [0x5]: line: 160 loadl adx, fp+1   : protected asm start
6 [0x6]:           int 0x12   
7 [0x7]:           smovr_2 cmt, fp+2   
8 [0x8]: line: 166 ipushl #2   : protected asm end
9 [0x9]:           call @2297 // <std.io#thread_result.at>   
10 [0xa]:           popobj2    
11 [0xb]:           returnobj   
12 [0xc]:           ret   


function: platform.kernel#vm.unsuspend[2376] params(2) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:169:15: note:  
		    static def unsuspend(t: thread, wait: var) : thread_result {
		              ^

0 [0x0]: line: 170 pushl 0   
1 [0x1]:           call @2271 // <std.io#thread.get_native_handle>   
2 [0x2]:           ipopl 2   
3 [0x3]: line: 171 istorel 0, fp+3   
5 [0x5]: line: 173 loadl adx, fp+2   : protected asm start
6 [0x6]:           loadl ebx, fp+1   
7 [0x7]:           int 0x13   
8 [0x8]:           smovr_2 cmt, fp+3   
9 [0x9]: line: 180 ipushl #3   : protected asm end
10 [0xa]:           call @2297 // <std.io#thread_result.at>   
11 [0xb]:           popobj2    
12 [0xc]:           returnobj   
13 [0xd]:           ret   


function: platform.kernel#vm.get_os_time[2377] params(1) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:183:15: note:  
		    static def get_os_time(tr : var) : var {
		              ^

0 [0x0]: line: 184 istorel 0, fp+1   
2 [0x2]: line: 185 loadl ebx, fp+0   : protected asm start
3 [0x3]:           int 0x2   
4 [0x4]:           smovr_2 bmr, fp+1   
5 [0x5]: line: 191 loadl ebx, fp+1   : protected asm end
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: platform.kernel#vm.thread_join[2378] params(1) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:194:15: note:  
		    static def thread_join(t: thread) : thread_result {
		              ^

0 [0x0]: line: 195 pushl 0   
1 [0x1]:           call @2271 // <std.io#thread.get_native_handle>   
2 [0x2]:           ipopl 1   
3 [0x3]: line: 196 istorel 0, fp+2   
5 [0x5]: line: 198 loadl adx, fp+1   : protected asm start
6 [0x6]:           int 0xd   
7 [0x7]:           smovr_2 cmt, fp+2   
8 [0x8]: line: 204 ipushl #2   : protected asm end
9 [0x9]:           call @2297 // <std.io#thread_result.at>   
10 [0xa]:           popobj2    
11 [0xb]:           returnobj   
12 [0xc]:           ret   


function: platform.kernel#vm.kill[2379] params(1) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:207:15: note:  
		    static def kill(t: thread) : thread_result {
		              ^

0 [0x0]: line: 208 pushl 0   
1 [0x1]:           call @2271 // <std.io#thread.get_native_handle>   
2 [0x2]:           ipopl 1   
3 [0x3]: line: 209 istorel 0, fp+2   
5 [0x5]: line: 211 loadl adx, fp+1   : protected asm start
6 [0x6]:           int 0xe   
7 [0x7]:           smovr_2 cmt, fp+2   : protected asm end
8 [0x8]: line: 217 pushl 0   
9 [0x9]:           istore 1   
11 [0xb]:           call @2381 // <platform.kernel#vm.exit_thread>   
12 [0xc]: line: 218 ipushl #2   
13 [0xd]:           call @2297 // <std.io#thread_result.at>   
14 [0xe]:           popobj2    
15 [0xf]:           returnobj   
16 [0x10]:           ret   


function: platform.kernel#vm.current_thread[2380] params(0) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:221:15: note:  
		    static def current_thread() : thread {
		              ^

0 [0x0]: line: 222 int 0x15   : protected asm start
1 [0x1]:           popobj2    
2 [0x2]:           returnobj   
3 [0x3]:           ret   
4 [0x4]: line: 229 pushnull    : protected asm end
5 [0x5]:           popobj2    
6 [0x6]:           returnobj   
7 [0x7]:           ret   


function: platform.kernel#vm.exit_thread[2381] params(2) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:232:15: note:  
		    static def exit_thread(t: thread, code: var) {
		              ^

0 [0x0]: line: 233 movi #1, ebx   : protected asm start
2 [0x2]:           movi #0, egx   
4 [0x4]:           movi #-1, ecx   
6 [0x6]:           movi #0, adx   
8 [0x8]:           movl 0   
9 [0x9]:           movn #5   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movl 0   
13 [0xd]:           movn #8   
15 [0xf]:           rmov adx, egx   
16 [0x10]:           loadl egx, fp+1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #0   
20 [0x14]:           rmov adx, egx   
21 [0x15]:           movl 0   
22 [0x16]:           movn #1   
24 [0x18]:           rmov adx, ecx   
25 [0x19]:           ret   : protected asm end


function: platform.kernel#vm.thread_yield[2382] params(0) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:257:15: note:  
		    static def thread_yield() {
		              ^

0 [0x0]: line: 258 int 0x1c   : protected asm start
1 [0x1]:           ret   : protected asm end


function: platform.kernel#vm.thread_start[2383] params(2) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:263:15: note:  
		    static def thread_start(t: thread, args: object[]) : thread_result {
		              ^

0 [0x0]: line: 264 pushl 0   
1 [0x1]:           call @2271 // <std.io#thread.get_native_handle>   
2 [0x2]:           ipopl 2   
3 [0x3]: line: 265 pushl 0   
4 [0x4]:           call @2272 // <std.io#thread.get_stack_size>   
5 [0x5]:           ipopl 3   
6 [0x6]: line: 266 istorel 0, fp+4   
8 [0x8]: line: 268 loadl ebx, fp+3   : protected asm start
9 [0x9]:           loadl adx, fp+2   
10 [0xa]:           pushl 1   
11 [0xb]:           pushl 0   
12 [0xc]:           int 0xc   
13 [0xd]:           smovr_2 cmt, fp+4   
14 [0xe]: line: 277 ipushl #4   : protected asm end
15 [0xf]:           movi #0, ebx   
17 [0x11]:           loadval ecx   
18 [0x12]:           test ecx, ebx   
19 [0x13]:           movr ebx, cmt   
20 [0x14]:           movr cmt, ebx   
21 [0x15]:           jne 44   
22 [0x16]: line: 278 pushl 0   
23 [0x17]:           call @2276 // <std.io#thread.is_started>   
24 [0x18]:           loadval ebx   
25 [0x19]:           not ebx, ebx   
26 [0x1a]:           movr cmt, ebx   
27 [0x1b]:           jne 44   
28 [0x1c]: line: 279 pushl 0   
29 [0x1d]:           call @2274 // <std.io#thread.is_exited>   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 39   
33 [0x21]: line: 280 movg @40 // @std.io#thread_result   
34 [0x22]:           movn #5   
36 [0x24]:           returnobj   
37 [0x25]:           ret   
38 [0x26]:           jmp @42   
39 [0x27]: line: 282 istore 2   
41 [0x29]:           call @2072 // <std.io.fiber#__srt_global.delay>   
42 [0x2a]:           nop   
43 [0x2b]:           jmp @22   
44 [0x2c]:           nop   
45 [0x2d]: line: 287 ipushl #4   
46 [0x2e]:           call @2297 // <std.io#thread_result.at>   
47 [0x2f]:           popobj2    
48 [0x30]:           returnobj   
49 [0x31]:           ret   


function: platform.kernel#vm.set_thread_priority[2384] params(2) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:290:15: note:  
		    static def set_thread_priority(t: thread, priority: var) : thread_result {
		              ^

0 [0x0]: line: 291 pushl 0   
1 [0x1]:           call @2271 // <std.io#thread.get_native_handle>   
2 [0x2]:           ipopl 2   
3 [0x3]: line: 292 istorel 0, fp+3   
5 [0x5]: line: 294 loadl adx, fp+2   : protected asm start
6 [0x6]:           loadl egx, fp+1   
7 [0x7]:           int 0x11   
8 [0x8]:           smovr_2 cmt, fp+3   
9 [0x9]: line: 301 ipushl #3   : protected asm end
10 [0xa]:           call @2297 // <std.io#thread_result.at>   
11 [0xb]:           popobj2    
12 [0xc]:           returnobj   
13 [0xd]:           ret   


function: platform.kernel#vm.set_thread[2385] params(1) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:304:15: note:  
		    static def set_thread(t: thread) {
		              ^

0 [0x0]: line: 305 pushl 0   : protected asm start
1 [0x1]:           int 0x17   
2 [0x2]:           ret   : protected asm end


function: platform.kernel#vm.thread_args[2386] params(0) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:311:15: note:  
		    static def thread_args() : object[] {
		              ^

0 [0x0]: line: 312 int 0x16   : protected asm start
1 [0x1]:           popobj2    
2 [0x2]:           returnobj   
3 [0x3]:           ret   
4 [0x4]: line: 319 pushnull    : protected asm end
5 [0x5]:           popobj2    
6 [0x6]:           returnobj   
7 [0x7]:           ret   


function: platform.kernel#vm.hardware_concurrency[2387] params(0) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:322:15: note:  
		    static def hardware_concurrency() : var {
		              ^

0 [0x0]: line: 323 istorel 0, fp+0   
2 [0x2]: line: 325 int 0x38   : protected asm start
3 [0x3]:           smovr_2 ebx, fp+0   
4 [0x4]: line: 330 loadl ebx, fp+0   : protected asm end
5 [0x5]:           return_val ebx   
6 [0x6]:           ret   


function: platform.kernel#vm.random_int[2388] params(0) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:333:15: note:  
		    static def random_int() : var {
		              ^

0 [0x0]: line: 334 istorel 0, fp+0   
2 [0x2]: line: 336 int 0x19   : protected asm start
3 [0x3]:           smovr_2 ebx, fp+0   
4 [0x4]: line: 341 loadl ebx, fp+0   : protected asm end
5 [0x5]:           return_val ebx   
6 [0x6]:           ret   


function: platform.kernel#vm.random_int[2389] params(2) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:344:15: note:  
		    static def random_int(min: var, max : var) : var {
		              ^

0 [0x0]: line: 345 istorel 0, fp+2   
2 [0x2]: line: 347 loadl ebx, fp+0   : protected asm start
3 [0x3]:           loadl egx, fp+1   
4 [0x4]:           int 0x3f   
5 [0x5]:           smovr_2 ebx, fp+2   
6 [0x6]: line: 354 loadl ebx, fp+2   : protected asm end
7 [0x7]:           return_val ebx   
8 [0x8]:           ret   


function: platform.kernel#vm.random_double[2390] params(0) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:357:15: note:  
		    static def random_double() : var {
		              ^

0 [0x0]: line: 358 istorel 0, fp+0   
2 [0x2]: line: 360 int 0x40   : protected asm start
3 [0x3]:           smovr_2 ebx, fp+0   
4 [0x4]: line: 365 loadl ebx, fp+0   : protected asm end
5 [0x5]:           return_val ebx   
6 [0x6]:           ret   


function: platform.kernel#vm.random_double[2391] params(2) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:368:15: note:  
		    static def random_double(min: var, max : var) : var {
		              ^

0 [0x0]: line: 369 istorel 0, fp+2   
2 [0x2]: line: 371 loadl ebx, fp+0   : protected asm start
3 [0x3]:           loadl egx, fp+1   
4 [0x4]:           int 0x41   
5 [0x5]:           smovr_2 ebx, fp+2   
6 [0x6]: line: 378 loadl ebx, fp+2   : protected asm end
7 [0x7]:           return_val ebx   
8 [0x8]:           ret   


function: platform.kernel#vm.random_seed[2392] params(1) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:381:15: note:  
		    static def random_seed(seed : var) {
		              ^

0 [0x0]: line: 382 loadl adx, fp+0   : protected asm start
1 [0x1]:           int 0x42   
2 [0x2]:           ret   : protected asm end


constructor: platform.kernel#vm.vm[2393] params(0) in file: lib\support\/0.2.9//platform//kernel//vm.sharp:6:6: note:  
		class vm {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#ulong.ulong[2394] params(1) in file: lib\support\/0.2.9//primitives.sharp:274:10: note:  
		    ulong(i : long) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @15 // <std#integer<_uint64>.integer>   
9 [0x9]:         ret   


constructor: std#ulong.ulong[2395] params(1) in file: lib\support\/0.2.9//primitives.sharp:275:10: note:  
		    ulong(i : int) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @15 // <std#integer<_uint64>.integer>   
9 [0x9]:         ret   


constructor: std#ulong.ulong[2396] params(1) in file: lib\support\/0.2.9//primitives.sharp:276:10: note:  
		    ulong(i : short) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @15 // <std#integer<_uint64>.integer>   
9 [0x9]:         ret   


constructor: std#ulong.ulong[2397] params(1) in file: lib\support\/0.2.9//primitives.sharp:277:10: note:  
		    ulong(i : char) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @15 // <std#integer<_uint64>.integer>   
9 [0x9]:         ret   


constructor: std#ulong.ulong[2398] params(1) in file: lib\support\/0.2.9//primitives.sharp:278:10: note:  
		    ulong(i : byte) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @15 // <std#integer<_uint64>.integer>   
9 [0x9]:         ret   


constructor: std#ulong.ulong[2399] params(1) in file: lib\support\/0.2.9//primitives.sharp:279:10: note:  
		    ulong(i : bool) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @15 // <std#integer<_uint64>.integer>   
9 [0x9]:         ret   


constructor: std#ulong.ulong[2400] params(1) in file: lib\support\/0.2.9//primitives.sharp:280:10: note:  
		    ulong(i : ulong) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @15 // <std#integer<_uint64>.integer>   
9 [0x9]:         ret   


constructor: std#ulong.ulong[2401] params(1) in file: lib\support\/0.2.9//primitives.sharp:281:10: note:  
		    ulong(i : uint) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @15 // <std#integer<_uint64>.integer>   
9 [0x9]:         ret   


constructor: std#ulong.ulong[2402] params(1) in file: lib\support\/0.2.9//primitives.sharp:282:10: note:  
		    ulong(i : ushort) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @15 // <std#integer<_uint64>.integer>   
9 [0x9]:         ret   


constructor: std#ulong.ulong[2403] params(1) in file: lib\support\/0.2.9//primitives.sharp:283:10: note:  
		    ulong(i : uchar) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @15 // <std#integer<_uint64>.integer>   
9 [0x9]:         ret   


constructor: std#ulong.ulong[2404] params(1) in file: lib\support\/0.2.9//primitives.sharp:284:10: note:  
		    ulong(i : double) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @15 // <std#integer<_uint64>.integer>   
9 [0x9]:         ret   


constructor: std#ulong.ulong[2405] params(1) in file: lib\support\/0.2.9//primitives.sharp:285:10: note:  
		    ulong(i : var) -> base(i) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ipushl #1   
2 [0x2]:         call @15 // <std#integer<_uint64>.integer>   
3 [0x3]:         ret   


overload function: std#ulong.operator![2406] params(0) in file: lib\support\/0.2.9//primitives.sharp:287:8: note:  
		    def operator!() := (!value);
		       ^

0 [0x0]: line: 287 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           not ebx, ebx   
7 [0x7]:           return_val ebx   
8 [0x8]:           ret   


overload function: std#ulong.operator++[2407] params(0) in file: lib\support\/0.2.9//primitives.sharp:288:8: note:  
		    def operator++() := (++value);
		       ^

0 [0x0]: line: 288 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           inc ebx   
7 [0x7]:           movu64 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#ulong.operator++[2408] params(1) in file: lib\support\/0.2.9//primitives.sharp:289:8: note:  
		    def operator++(num : var) := (value++);
		       ^

0 [0x0]: line: 289 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           inc ebx   
8 [0x8]:           movu64 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#ulong.operator--[2409] params(0) in file: lib\support\/0.2.9//primitives.sharp:290:8: note:  
		    def operator--() := (--value);
		       ^

0 [0x0]: line: 290 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           dec ebx   
7 [0x7]:           movu64 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#ulong.operator--[2410] params(1) in file: lib\support\/0.2.9//primitives.sharp:291:8: note:  
		    def operator--(num : var) := (value--);
		       ^

0 [0x0]: line: 291 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           dec ebx   
8 [0x8]:           movu64 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#ulong.operator+=[2411] params(1) in file: lib\support\/0.2.9//primitives.sharp:293:8: note:  
		    def operator+=(num : ulong)  := (value+=num.value);
		       ^

0 [0x0]: line: 293 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator+=[2412] params(1) in file: lib\support\/0.2.9//primitives.sharp:294:8: note:  
		    def operator+=(num : long)   := (value+=num.value);
		       ^

0 [0x0]: line: 294 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator+=[2413] params(1) in file: lib\support\/0.2.9//primitives.sharp:295:8: note:  
		    def operator+=(num : uint)   := (value+=num.value);
		       ^

0 [0x0]: line: 295 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator+=[2414] params(1) in file: lib\support\/0.2.9//primitives.sharp:296:8: note:  
		    def operator+=(num : int)    := (value+=num.value);
		       ^

0 [0x0]: line: 296 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator+=[2415] params(1) in file: lib\support\/0.2.9//primitives.sharp:297:8: note:  
		    def operator+=(num : ushort) := (value+=num.value);
		       ^

0 [0x0]: line: 297 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator+=[2416] params(1) in file: lib\support\/0.2.9//primitives.sharp:298:8: note:  
		    def operator+=(num : short)  := (value+=num.value);
		       ^

0 [0x0]: line: 298 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator+=[2417] params(1) in file: lib\support\/0.2.9//primitives.sharp:299:8: note:  
		    def operator+=(num : uchar)  := (value+=num.value);
		       ^

0 [0x0]: line: 299 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator+=[2418] params(1) in file: lib\support\/0.2.9//primitives.sharp:300:8: note:  
		    def operator+=(num : char)   := (value+=num.value);
		       ^

0 [0x0]: line: 300 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator+=[2419] params(1) in file: lib\support\/0.2.9//primitives.sharp:301:8: note:  
		    def operator+=(num : byte)   := (value+=num.value);
		       ^

0 [0x0]: line: 301 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator+=[2420] params(1) in file: lib\support\/0.2.9//primitives.sharp:302:8: note:  
		    def operator+=(num : bool)   := (value+=num.value);
		       ^

0 [0x0]: line: 302 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator+=[2421] params(1) in file: lib\support\/0.2.9//primitives.sharp:303:8: note:  
		    def operator+=(num : double)   := (value+=num.value);
		       ^

0 [0x0]: line: 303 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator+=[2422] params(1) in file: lib\support\/0.2.9//primitives.sharp:304:8: note:  
		    def operator+=(num : var)    := (value+=num);
		       ^

0 [0x0]: line: 304 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           add ecx, ebx -> ebx   
9 [0x9]:           movu64 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#ulong.operator-=[2423] params(1) in file: lib\support\/0.2.9//primitives.sharp:306:8: note:  
		    def operator-=(num : ulong)  := (value-=num.value);
		       ^

0 [0x0]: line: 306 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator-=[2424] params(1) in file: lib\support\/0.2.9//primitives.sharp:307:8: note:  
		    def operator-=(num : long)   := (value-=num.value);
		       ^

0 [0x0]: line: 307 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator-=[2425] params(1) in file: lib\support\/0.2.9//primitives.sharp:308:8: note:  
		    def operator-=(num : uint)   := (value-=num.value);
		       ^

0 [0x0]: line: 308 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator-=[2426] params(1) in file: lib\support\/0.2.9//primitives.sharp:309:8: note:  
		    def operator-=(num : int)    := (value-=num.value);
		       ^

0 [0x0]: line: 309 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator-=[2427] params(1) in file: lib\support\/0.2.9//primitives.sharp:310:8: note:  
		    def operator-=(num : ushort) := (value-=num.value);
		       ^

0 [0x0]: line: 310 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator-=[2428] params(1) in file: lib\support\/0.2.9//primitives.sharp:311:8: note:  
		    def operator-=(num : short)  := (value-=num.value);
		       ^

0 [0x0]: line: 311 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator-=[2429] params(1) in file: lib\support\/0.2.9//primitives.sharp:312:8: note:  
		    def operator-=(num : uchar)  := (value-=num.value);
		       ^

0 [0x0]: line: 312 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator-=[2430] params(1) in file: lib\support\/0.2.9//primitives.sharp:313:8: note:  
		    def operator-=(num : char)   := (value-=num.value);
		       ^

0 [0x0]: line: 313 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator-=[2431] params(1) in file: lib\support\/0.2.9//primitives.sharp:314:8: note:  
		    def operator-=(num : byte)   := (value-=num.value);
		       ^

0 [0x0]: line: 314 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator-=[2432] params(1) in file: lib\support\/0.2.9//primitives.sharp:315:8: note:  
		    def operator-=(num : bool)   := (value-=num.value);
		       ^

0 [0x0]: line: 315 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator-=[2433] params(1) in file: lib\support\/0.2.9//primitives.sharp:316:8: note:  
		    def operator-=(num : double)   := (value-=num.value);
		       ^

0 [0x0]: line: 316 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator-=[2434] params(1) in file: lib\support\/0.2.9//primitives.sharp:317:8: note:  
		    def operator-=(num : var)    := (value-=num);
		       ^

0 [0x0]: line: 317 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           sub ecx, ebx -> ebx   
9 [0x9]:           movu64 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#ulong.operator*=[2435] params(1) in file: lib\support\/0.2.9//primitives.sharp:319:8: note:  
		    def operator*=(num : ulong)  := (value*=num.value);
		       ^

0 [0x0]: line: 319 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator*=[2436] params(1) in file: lib\support\/0.2.9//primitives.sharp:320:8: note:  
		    def operator*=(num : long)   := (value*=num.value);
		       ^

0 [0x0]: line: 320 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator*=[2437] params(1) in file: lib\support\/0.2.9//primitives.sharp:321:8: note:  
		    def operator*=(num : uint)   := (value*=num.value);
		       ^

0 [0x0]: line: 321 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator*=[2438] params(1) in file: lib\support\/0.2.9//primitives.sharp:322:8: note:  
		    def operator*=(num : int)    := (value*=num.value);
		       ^

0 [0x0]: line: 322 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator*=[2439] params(1) in file: lib\support\/0.2.9//primitives.sharp:323:8: note:  
		    def operator*=(num : ushort) := (value*=num.value);
		       ^

0 [0x0]: line: 323 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator*=[2440] params(1) in file: lib\support\/0.2.9//primitives.sharp:324:8: note:  
		    def operator*=(num : short)  := (value*=num.value);
		       ^

0 [0x0]: line: 324 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator*=[2441] params(1) in file: lib\support\/0.2.9//primitives.sharp:325:8: note:  
		    def operator*=(num : uchar)  := (value*=num.value);
		       ^

0 [0x0]: line: 325 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator*=[2442] params(1) in file: lib\support\/0.2.9//primitives.sharp:326:8: note:  
		    def operator*=(num : char)   := (value*=num.value);
		       ^

0 [0x0]: line: 326 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator*=[2443] params(1) in file: lib\support\/0.2.9//primitives.sharp:327:8: note:  
		    def operator*=(num : byte)   := (value*=num.value);
		       ^

0 [0x0]: line: 327 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator*=[2444] params(1) in file: lib\support\/0.2.9//primitives.sharp:328:8: note:  
		    def operator*=(num : bool)   := (value*=num.value);
		       ^

0 [0x0]: line: 328 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator*=[2445] params(1) in file: lib\support\/0.2.9//primitives.sharp:329:8: note:  
		    def operator*=(num : double)   := (value*=num.value);
		       ^

0 [0x0]: line: 329 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator*=[2446] params(1) in file: lib\support\/0.2.9//primitives.sharp:330:8: note:  
		    def operator*=(num : var)    := (value*=num);
		       ^

0 [0x0]: line: 330 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           mul ecx, ebx -> ebx   
9 [0x9]:           movu64 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#ulong.operator/=[2447] params(1) in file: lib\support\/0.2.9//primitives.sharp:332:8: note:  
		    def operator/=(num : ulong)  := (value/=num.value);
		       ^

0 [0x0]: line: 332 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator/=[2448] params(1) in file: lib\support\/0.2.9//primitives.sharp:333:8: note:  
		    def operator/=(num : long)   := (value/=num.value);
		       ^

0 [0x0]: line: 333 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator/=[2449] params(1) in file: lib\support\/0.2.9//primitives.sharp:334:8: note:  
		    def operator/=(num : uint)   := (value/=num.value);
		       ^

0 [0x0]: line: 334 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator/=[2450] params(1) in file: lib\support\/0.2.9//primitives.sharp:335:8: note:  
		    def operator/=(num : int)    := (value/=num.value);
		       ^

0 [0x0]: line: 335 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator/=[2451] params(1) in file: lib\support\/0.2.9//primitives.sharp:336:8: note:  
		    def operator/=(num : ushort) := (value/=num.value);
		       ^

0 [0x0]: line: 336 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator/=[2452] params(1) in file: lib\support\/0.2.9//primitives.sharp:337:8: note:  
		    def operator/=(num : short)  := (value/=num.value);
		       ^

0 [0x0]: line: 337 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator/=[2453] params(1) in file: lib\support\/0.2.9//primitives.sharp:338:8: note:  
		    def operator/=(num : uchar)  := (value/=num.value);
		       ^

0 [0x0]: line: 338 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator/=[2454] params(1) in file: lib\support\/0.2.9//primitives.sharp:339:8: note:  
		    def operator/=(num : char)   := (value/=num.value);
		       ^

0 [0x0]: line: 339 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator/=[2455] params(1) in file: lib\support\/0.2.9//primitives.sharp:340:8: note:  
		    def operator/=(num : byte)   := (value/=num.value);
		       ^

0 [0x0]: line: 340 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator/=[2456] params(1) in file: lib\support\/0.2.9//primitives.sharp:341:8: note:  
		    def operator/=(num : bool)   := (value/=num.value);
		       ^

0 [0x0]: line: 341 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator/=[2457] params(1) in file: lib\support\/0.2.9//primitives.sharp:342:8: note:  
		    def operator/=(num : double)   := (value/=num.value);
		       ^

0 [0x0]: line: 342 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator/=[2458] params(1) in file: lib\support\/0.2.9//primitives.sharp:343:8: note:  
		    def operator/=(num : var)    := (value/=num);
		       ^

0 [0x0]: line: 343 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           div ecx, ebx -> ebx   
9 [0x9]:           movu64 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#ulong.operator%=[2459] params(1) in file: lib\support\/0.2.9//primitives.sharp:345:8: note:  
		    def operator%=(num : ulong)  := (value%=num.value);
		       ^

0 [0x0]: line: 345 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator%=[2460] params(1) in file: lib\support\/0.2.9//primitives.sharp:346:8: note:  
		    def operator%=(num : long)   := (value%=num.value);
		       ^

0 [0x0]: line: 346 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator%=[2461] params(1) in file: lib\support\/0.2.9//primitives.sharp:347:8: note:  
		    def operator%=(num : uint)   := (value%=num.value);
		       ^

0 [0x0]: line: 347 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator%=[2462] params(1) in file: lib\support\/0.2.9//primitives.sharp:348:8: note:  
		    def operator%=(num : int)    := (value%=num.value);
		       ^

0 [0x0]: line: 348 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator%=[2463] params(1) in file: lib\support\/0.2.9//primitives.sharp:349:8: note:  
		    def operator%=(num : ushort) := (value%=num.value);
		       ^

0 [0x0]: line: 349 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator%=[2464] params(1) in file: lib\support\/0.2.9//primitives.sharp:350:8: note:  
		    def operator%=(num : short)  := (value%=num.value);
		       ^

0 [0x0]: line: 350 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator%=[2465] params(1) in file: lib\support\/0.2.9//primitives.sharp:351:8: note:  
		    def operator%=(num : uchar)  := (value%=num.value);
		       ^

0 [0x0]: line: 351 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator%=[2466] params(1) in file: lib\support\/0.2.9//primitives.sharp:352:8: note:  
		    def operator%=(num : char)   := (value%=num.value);
		       ^

0 [0x0]: line: 352 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator%=[2467] params(1) in file: lib\support\/0.2.9//primitives.sharp:353:8: note:  
		    def operator%=(num : byte)   := (value%=num.value);
		       ^

0 [0x0]: line: 353 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator%=[2468] params(1) in file: lib\support\/0.2.9//primitives.sharp:354:8: note:  
		    def operator%=(num : bool)   := (value%=num.value);
		       ^

0 [0x0]: line: 354 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator%=[2469] params(1) in file: lib\support\/0.2.9//primitives.sharp:355:8: note:  
		    def operator%=(num : double)   := (value%=num.value);
		       ^

0 [0x0]: line: 355 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator%=[2470] params(1) in file: lib\support\/0.2.9//primitives.sharp:356:8: note:  
		    def operator%=(num : var)    := (value%=num);
		       ^

0 [0x0]: line: 356 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           mod ecx, ebx -> ebx   
9 [0x9]:           movu64 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#ulong.operator&=[2471] params(1) in file: lib\support\/0.2.9//primitives.sharp:358:8: note:  
		    def operator&=(num : ulong)  := (value&=num.value);
		       ^

0 [0x0]: line: 358 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ulong.operator&=[2472] params(1) in file: lib\support\/0.2.9//primitives.sharp:359:8: note:  
		    def operator&=(num : long)   := (value&=num.value);
		       ^

0 [0x0]: line: 359 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ulong.operator&=[2473] params(1) in file: lib\support\/0.2.9//primitives.sharp:360:8: note:  
		    def operator&=(num : uint)   := (value&=num.value);
		       ^

0 [0x0]: line: 360 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ulong.operator&=[2474] params(1) in file: lib\support\/0.2.9//primitives.sharp:361:8: note:  
		    def operator&=(num : int)    := (value&=num.value);
		       ^

0 [0x0]: line: 361 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ulong.operator&=[2475] params(1) in file: lib\support\/0.2.9//primitives.sharp:362:8: note:  
		    def operator&=(num : ushort) := (value&=num.value);
		       ^

0 [0x0]: line: 362 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ulong.operator&=[2476] params(1) in file: lib\support\/0.2.9//primitives.sharp:363:8: note:  
		    def operator&=(num : short)  := (value&=num.value);
		       ^

0 [0x0]: line: 363 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ulong.operator&=[2477] params(1) in file: lib\support\/0.2.9//primitives.sharp:364:8: note:  
		    def operator&=(num : uchar)  := (value&=num.value);
		       ^

0 [0x0]: line: 364 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ulong.operator&=[2478] params(1) in file: lib\support\/0.2.9//primitives.sharp:365:8: note:  
		    def operator&=(num : char)   := (value&=num.value);
		       ^

0 [0x0]: line: 365 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ulong.operator&=[2479] params(1) in file: lib\support\/0.2.9//primitives.sharp:366:8: note:  
		    def operator&=(num : byte)   := (value&=num.value);
		       ^

0 [0x0]: line: 366 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ulong.operator&=[2480] params(1) in file: lib\support\/0.2.9//primitives.sharp:367:8: note:  
		    def operator&=(num : bool)   := (value&=num.value);
		       ^

0 [0x0]: line: 367 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ulong.operator&=[2481] params(1) in file: lib\support\/0.2.9//primitives.sharp:368:8: note:  
		    def operator&=(num : double)   := (value&=num.value);
		       ^

0 [0x0]: line: 368 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ulong.operator&=[2482] params(1) in file: lib\support\/0.2.9//primitives.sharp:369:8: note:  
		    def operator&=(num : var)    := (value&=num);
		       ^

0 [0x0]: line: 369 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           and ecx, ebx   
9 [0x9]:           rmov adx, cmt   
10 [0xa]:           returnobj   
11 [0xb]:           ret   


overload function: std#ulong.operator|=[2483] params(1) in file: lib\support\/0.2.9//primitives.sharp:371:8: note:  
		    def operator|=(num : ulong)  := (value|=num.value);
		       ^

0 [0x0]: line: 371 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator|=[2484] params(1) in file: lib\support\/0.2.9//primitives.sharp:372:8: note:  
		    def operator|=(num : long)   := (value|=num.value);
		       ^

0 [0x0]: line: 372 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator|=[2485] params(1) in file: lib\support\/0.2.9//primitives.sharp:373:8: note:  
		    def operator|=(num : uint)   := (value|=num.value);
		       ^

0 [0x0]: line: 373 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator|=[2486] params(1) in file: lib\support\/0.2.9//primitives.sharp:374:8: note:  
		    def operator|=(num : int)    := (value|=num.value);
		       ^

0 [0x0]: line: 374 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator|=[2487] params(1) in file: lib\support\/0.2.9//primitives.sharp:375:8: note:  
		    def operator|=(num : ushort) := (value|=num.value);
		       ^

0 [0x0]: line: 375 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator|=[2488] params(1) in file: lib\support\/0.2.9//primitives.sharp:376:8: note:  
		    def operator|=(num : short)  := (value|=num.value);
		       ^

0 [0x0]: line: 376 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator|=[2489] params(1) in file: lib\support\/0.2.9//primitives.sharp:377:8: note:  
		    def operator|=(num : uchar)  := (value|=num.value);
		       ^

0 [0x0]: line: 377 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator|=[2490] params(1) in file: lib\support\/0.2.9//primitives.sharp:378:8: note:  
		    def operator|=(num : char)   := (value|=num.value);
		       ^

0 [0x0]: line: 378 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator|=[2491] params(1) in file: lib\support\/0.2.9//primitives.sharp:379:8: note:  
		    def operator|=(num : byte)   := (value|=num.value);
		       ^

0 [0x0]: line: 379 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator|=[2492] params(1) in file: lib\support\/0.2.9//primitives.sharp:380:8: note:  
		    def operator|=(num : bool)   := (value|=num.value);
		       ^

0 [0x0]: line: 380 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator|=[2493] params(1) in file: lib\support\/0.2.9//primitives.sharp:381:8: note:  
		    def operator|=(num : double)   := (value|=num.value);
		       ^

0 [0x0]: line: 381 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ulong.operator|=[2494] params(1) in file: lib\support\/0.2.9//primitives.sharp:382:8: note:  
		    def operator|=(num : var)    := (value|=num);
		       ^

0 [0x0]: line: 382 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           or ecx, ebx   
9 [0x9]:           movu64 cmt, cmt   
10 [0xa]:           rmov adx, cmt   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


constructor: std#ulong.ulong[2495] params(0) in file: lib\support\/0.2.9//primitives.sharp:273:6: note:  
		class ulong base integer<_uint64> {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @223 // <std#integer<_uint64>.integer>   
2 [0x2]:         ret   


constructor: std#long.long[2496] params(1) in file: lib\support\/0.2.9//primitives.sharp:385:9: note:  
		    long(i : long) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @224 // <std#integer<_int64>.integer>   
9 [0x9]:         ret   


constructor: std#long.long[2497] params(1) in file: lib\support\/0.2.9//primitives.sharp:386:9: note:  
		    long(i : int) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @224 // <std#integer<_int64>.integer>   
9 [0x9]:         ret   


constructor: std#long.long[2498] params(1) in file: lib\support\/0.2.9//primitives.sharp:387:9: note:  
		    long(i : short) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @224 // <std#integer<_int64>.integer>   
9 [0x9]:         ret   


constructor: std#long.long[2499] params(1) in file: lib\support\/0.2.9//primitives.sharp:388:9: note:  
		    long(i : char) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @224 // <std#integer<_int64>.integer>   
9 [0x9]:         ret   


constructor: std#long.long[2500] params(1) in file: lib\support\/0.2.9//primitives.sharp:389:9: note:  
		    long(i : byte) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @224 // <std#integer<_int64>.integer>   
9 [0x9]:         ret   


constructor: std#long.long[2501] params(1) in file: lib\support\/0.2.9//primitives.sharp:390:9: note:  
		    long(i : bool) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @224 // <std#integer<_int64>.integer>   
9 [0x9]:         ret   


constructor: std#long.long[2502] params(1) in file: lib\support\/0.2.9//primitives.sharp:391:9: note:  
		    long(i : ulong) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @224 // <std#integer<_int64>.integer>   
9 [0x9]:         ret   


constructor: std#long.long[2503] params(1) in file: lib\support\/0.2.9//primitives.sharp:392:9: note:  
		    long(i : uint) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @224 // <std#integer<_int64>.integer>   
9 [0x9]:         ret   


constructor: std#long.long[2504] params(1) in file: lib\support\/0.2.9//primitives.sharp:393:9: note:  
		    long(i : ushort) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @224 // <std#integer<_int64>.integer>   
9 [0x9]:         ret   


constructor: std#long.long[2505] params(1) in file: lib\support\/0.2.9//primitives.sharp:394:9: note:  
		    long(i : uchar) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @224 // <std#integer<_int64>.integer>   
9 [0x9]:         ret   


constructor: std#long.long[2506] params(1) in file: lib\support\/0.2.9//primitives.sharp:395:9: note:  
		    long(i : double) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @224 // <std#integer<_int64>.integer>   
9 [0x9]:         ret   


constructor: std#long.long[2507] params(1) in file: lib\support\/0.2.9//primitives.sharp:396:9: note:  
		    long(i : var) -> base(i) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         ipushl #1   
2 [0x2]:         call @224 // <std#integer<_int64>.integer>   
3 [0x3]:         ret   


overload function: std#long.operator![2508] params(0) in file: lib\support\/0.2.9//primitives.sharp:398:8: note:  
		    def operator!() := (!value);
		       ^

0 [0x0]: line: 398 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           not ebx, ebx   
7 [0x7]:           return_val ebx   
8 [0x8]:           ret   


overload function: std#long.operator++[2509] params(0) in file: lib\support\/0.2.9//primitives.sharp:399:8: note:  
		    def operator++() := (++value);
		       ^

0 [0x0]: line: 399 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           inc ebx   
7 [0x7]:           mov64 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#long.operator++[2510] params(1) in file: lib\support\/0.2.9//primitives.sharp:400:8: note:  
		    def operator++(num : var) := (value++);
		       ^

0 [0x0]: line: 400 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           inc ebx   
8 [0x8]:           mov64 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#long.operator--[2511] params(0) in file: lib\support\/0.2.9//primitives.sharp:401:8: note:  
		    def operator--() := (--value);
		       ^

0 [0x0]: line: 401 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           dec ebx   
7 [0x7]:           mov64 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#long.operator--[2512] params(1) in file: lib\support\/0.2.9//primitives.sharp:402:8: note:  
		    def operator--(num : var) := (value--);
		       ^

0 [0x0]: line: 402 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           dec ebx   
8 [0x8]:           mov64 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#long.operator+=[2513] params(1) in file: lib\support\/0.2.9//primitives.sharp:404:8: note:  
		    def operator+=(num : ulong)  := (value+=num.value);
		       ^

0 [0x0]: line: 404 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator+=[2514] params(1) in file: lib\support\/0.2.9//primitives.sharp:405:8: note:  
		    def operator+=(num : long)   := (value+=num.value);
		       ^

0 [0x0]: line: 405 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator+=[2515] params(1) in file: lib\support\/0.2.9//primitives.sharp:406:8: note:  
		    def operator+=(num : uint)   := (value+=num.value);
		       ^

0 [0x0]: line: 406 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator+=[2516] params(1) in file: lib\support\/0.2.9//primitives.sharp:407:8: note:  
		    def operator+=(num : int)    := (value+=num.value);
		       ^

0 [0x0]: line: 407 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator+=[2517] params(1) in file: lib\support\/0.2.9//primitives.sharp:408:8: note:  
		    def operator+=(num : ushort) := (value+=num.value);
		       ^

0 [0x0]: line: 408 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator+=[2518] params(1) in file: lib\support\/0.2.9//primitives.sharp:409:8: note:  
		    def operator+=(num : short)  := (value+=num.value);
		       ^

0 [0x0]: line: 409 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator+=[2519] params(1) in file: lib\support\/0.2.9//primitives.sharp:410:8: note:  
		    def operator+=(num : uchar)  := (value+=num.value);
		       ^

0 [0x0]: line: 410 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator+=[2520] params(1) in file: lib\support\/0.2.9//primitives.sharp:411:8: note:  
		    def operator+=(num : char)   := (value+=num.value);
		       ^

0 [0x0]: line: 411 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator+=[2521] params(1) in file: lib\support\/0.2.9//primitives.sharp:412:8: note:  
		    def operator+=(num : byte)   := (value+=num.value);
		       ^

0 [0x0]: line: 412 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator+=[2522] params(1) in file: lib\support\/0.2.9//primitives.sharp:413:8: note:  
		    def operator+=(num : bool)   := (value+=num.value);
		       ^

0 [0x0]: line: 413 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator+=[2523] params(1) in file: lib\support\/0.2.9//primitives.sharp:414:8: note:  
		    def operator+=(num : double)   := (value+=num.value);
		       ^

0 [0x0]: line: 414 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator+=[2524] params(1) in file: lib\support\/0.2.9//primitives.sharp:415:8: note:  
		    def operator+=(num : var)    := (value+=num);
		       ^

0 [0x0]: line: 415 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           add ecx, ebx -> ebx   
9 [0x9]:           mov64 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#long.operator-=[2525] params(1) in file: lib\support\/0.2.9//primitives.sharp:417:8: note:  
		    def operator-=(num : ulong)  := (value-=num.value);
		       ^

0 [0x0]: line: 417 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator-=[2526] params(1) in file: lib\support\/0.2.9//primitives.sharp:418:8: note:  
		    def operator-=(num : long)   := (value-=num.value);
		       ^

0 [0x0]: line: 418 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator-=[2527] params(1) in file: lib\support\/0.2.9//primitives.sharp:419:8: note:  
		    def operator-=(num : uint)   := (value-=num.value);
		       ^

0 [0x0]: line: 419 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator-=[2528] params(1) in file: lib\support\/0.2.9//primitives.sharp:420:8: note:  
		    def operator-=(num : int)    := (value-=num.value);
		       ^

0 [0x0]: line: 420 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator-=[2529] params(1) in file: lib\support\/0.2.9//primitives.sharp:421:8: note:  
		    def operator-=(num : ushort) := (value-=num.value);
		       ^

0 [0x0]: line: 421 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator-=[2530] params(1) in file: lib\support\/0.2.9//primitives.sharp:422:8: note:  
		    def operator-=(num : short)  := (value-=num.value);
		       ^

0 [0x0]: line: 422 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator-=[2531] params(1) in file: lib\support\/0.2.9//primitives.sharp:423:8: note:  
		    def operator-=(num : uchar)  := (value-=num.value);
		       ^

0 [0x0]: line: 423 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator-=[2532] params(1) in file: lib\support\/0.2.9//primitives.sharp:424:8: note:  
		    def operator-=(num : char)   := (value-=num.value);
		       ^

0 [0x0]: line: 424 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator-=[2533] params(1) in file: lib\support\/0.2.9//primitives.sharp:425:8: note:  
		    def operator-=(num : byte)   := (value-=num.value);
		       ^

0 [0x0]: line: 425 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator-=[2534] params(1) in file: lib\support\/0.2.9//primitives.sharp:426:8: note:  
		    def operator-=(num : bool)   := (value-=num.value);
		       ^

0 [0x0]: line: 426 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator-=[2535] params(1) in file: lib\support\/0.2.9//primitives.sharp:427:8: note:  
		    def operator-=(num : double)   := (value-=num.value);
		       ^

0 [0x0]: line: 427 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator-=[2536] params(1) in file: lib\support\/0.2.9//primitives.sharp:428:8: note:  
		    def operator-=(num : var)    := (value-=num);
		       ^

0 [0x0]: line: 428 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           sub ecx, ebx -> ebx   
9 [0x9]:           mov64 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#long.operator*=[2537] params(1) in file: lib\support\/0.2.9//primitives.sharp:430:8: note:  
		    def operator*=(num : ulong)  := (value*=num.value);
		       ^

0 [0x0]: line: 430 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator*=[2538] params(1) in file: lib\support\/0.2.9//primitives.sharp:431:8: note:  
		    def operator*=(num : long)   := (value*=num.value);
		       ^

0 [0x0]: line: 431 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator*=[2539] params(1) in file: lib\support\/0.2.9//primitives.sharp:432:8: note:  
		    def operator*=(num : uint)   := (value*=num.value);
		       ^

0 [0x0]: line: 432 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator*=[2540] params(1) in file: lib\support\/0.2.9//primitives.sharp:433:8: note:  
		    def operator*=(num : int)    := (value*=num.value);
		       ^

0 [0x0]: line: 433 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator*=[2541] params(1) in file: lib\support\/0.2.9//primitives.sharp:434:8: note:  
		    def operator*=(num : ushort) := (value*=num.value);
		       ^

0 [0x0]: line: 434 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator*=[2542] params(1) in file: lib\support\/0.2.9//primitives.sharp:435:8: note:  
		    def operator*=(num : short)  := (value*=num.value);
		       ^

0 [0x0]: line: 435 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator*=[2543] params(1) in file: lib\support\/0.2.9//primitives.sharp:436:8: note:  
		    def operator*=(num : uchar)  := (value*=num.value);
		       ^

0 [0x0]: line: 436 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator*=[2544] params(1) in file: lib\support\/0.2.9//primitives.sharp:437:8: note:  
		    def operator*=(num : char)   := (value*=num.value);
		       ^

0 [0x0]: line: 437 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator*=[2545] params(1) in file: lib\support\/0.2.9//primitives.sharp:438:8: note:  
		    def operator*=(num : byte)   := (value*=num.value);
		       ^

0 [0x0]: line: 438 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator*=[2546] params(1) in file: lib\support\/0.2.9//primitives.sharp:439:8: note:  
		    def operator*=(num : bool)   := (value*=num.value);
		       ^

0 [0x0]: line: 439 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator*=[2547] params(1) in file: lib\support\/0.2.9//primitives.sharp:440:8: note:  
		    def operator*=(num : double)   := (value*=num.value);
		       ^

0 [0x0]: line: 440 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator*=[2548] params(1) in file: lib\support\/0.2.9//primitives.sharp:441:8: note:  
		    def operator*=(num : var)    := (value*=num);
		       ^

0 [0x0]: line: 441 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           mul ecx, ebx -> ebx   
9 [0x9]:           mov64 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#long.operator/=[2549] params(1) in file: lib\support\/0.2.9//primitives.sharp:443:8: note:  
		    def operator/=(num : ulong)  := (value/=num.value);
		       ^

0 [0x0]: line: 443 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator/=[2550] params(1) in file: lib\support\/0.2.9//primitives.sharp:444:8: note:  
		    def operator/=(num : long)   := (value/=num.value);
		       ^

0 [0x0]: line: 444 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator/=[2551] params(1) in file: lib\support\/0.2.9//primitives.sharp:445:8: note:  
		    def operator/=(num : uint)   := (value/=num.value);
		       ^

0 [0x0]: line: 445 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator/=[2552] params(1) in file: lib\support\/0.2.9//primitives.sharp:446:8: note:  
		    def operator/=(num : int)    := (value/=num.value);
		       ^

0 [0x0]: line: 446 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator/=[2553] params(1) in file: lib\support\/0.2.9//primitives.sharp:447:8: note:  
		    def operator/=(num : ushort) := (value/=num.value);
		       ^

0 [0x0]: line: 447 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator/=[2554] params(1) in file: lib\support\/0.2.9//primitives.sharp:448:8: note:  
		    def operator/=(num : short)  := (value/=num.value);
		       ^

0 [0x0]: line: 448 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator/=[2555] params(1) in file: lib\support\/0.2.9//primitives.sharp:449:8: note:  
		    def operator/=(num : uchar)  := (value/=num.value);
		       ^

0 [0x0]: line: 449 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator/=[2556] params(1) in file: lib\support\/0.2.9//primitives.sharp:450:8: note:  
		    def operator/=(num : char)   := (value/=num.value);
		       ^

0 [0x0]: line: 450 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator/=[2557] params(1) in file: lib\support\/0.2.9//primitives.sharp:451:8: note:  
		    def operator/=(num : byte)   := (value/=num.value);
		       ^

0 [0x0]: line: 451 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator/=[2558] params(1) in file: lib\support\/0.2.9//primitives.sharp:452:8: note:  
		    def operator/=(num : bool)   := (value/=num.value);
		       ^

0 [0x0]: line: 452 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator/=[2559] params(1) in file: lib\support\/0.2.9//primitives.sharp:453:8: note:  
		    def operator/=(num : double)   := (value/=num.value);
		       ^

0 [0x0]: line: 453 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator/=[2560] params(1) in file: lib\support\/0.2.9//primitives.sharp:454:8: note:  
		    def operator/=(num : var)    := (value/=num);
		       ^

0 [0x0]: line: 454 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           div ecx, ebx -> ebx   
9 [0x9]:           mov64 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#long.operator%=[2561] params(1) in file: lib\support\/0.2.9//primitives.sharp:456:8: note:  
		    def operator%=(num : ulong)  := (value%=num.value);
		       ^

0 [0x0]: line: 456 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator%=[2562] params(1) in file: lib\support\/0.2.9//primitives.sharp:457:8: note:  
		    def operator%=(num : long)   := (value%=num.value);
		       ^

0 [0x0]: line: 457 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator%=[2563] params(1) in file: lib\support\/0.2.9//primitives.sharp:458:8: note:  
		    def operator%=(num : uint)   := (value%=num.value);
		       ^

0 [0x0]: line: 458 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator%=[2564] params(1) in file: lib\support\/0.2.9//primitives.sharp:459:8: note:  
		    def operator%=(num : int)    := (value%=num.value);
		       ^

0 [0x0]: line: 459 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator%=[2565] params(1) in file: lib\support\/0.2.9//primitives.sharp:460:8: note:  
		    def operator%=(num : ushort) := (value%=num.value);
		       ^

0 [0x0]: line: 460 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator%=[2566] params(1) in file: lib\support\/0.2.9//primitives.sharp:461:8: note:  
		    def operator%=(num : short)  := (value%=num.value);
		       ^

0 [0x0]: line: 461 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator%=[2567] params(1) in file: lib\support\/0.2.9//primitives.sharp:462:8: note:  
		    def operator%=(num : uchar)  := (value%=num.value);
		       ^

0 [0x0]: line: 462 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator%=[2568] params(1) in file: lib\support\/0.2.9//primitives.sharp:463:8: note:  
		    def operator%=(num : char)   := (value%=num.value);
		       ^

0 [0x0]: line: 463 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator%=[2569] params(1) in file: lib\support\/0.2.9//primitives.sharp:464:8: note:  
		    def operator%=(num : byte)   := (value%=num.value);
		       ^

0 [0x0]: line: 464 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator%=[2570] params(1) in file: lib\support\/0.2.9//primitives.sharp:465:8: note:  
		    def operator%=(num : bool)   := (value%=num.value);
		       ^

0 [0x0]: line: 465 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator%=[2571] params(1) in file: lib\support\/0.2.9//primitives.sharp:466:8: note:  
		    def operator%=(num : double)   := (value%=num.value);
		       ^

0 [0x0]: line: 466 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov64 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator%=[2572] params(1) in file: lib\support\/0.2.9//primitives.sharp:467:8: note:  
		    def operator%=(num : var)    := (value%=num);
		       ^

0 [0x0]: line: 467 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           mod ecx, ebx -> ebx   
9 [0x9]:           mov64 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#long.operator&=[2573] params(1) in file: lib\support\/0.2.9//primitives.sharp:469:8: note:  
		    def operator&=(num : ulong)  := (value&=num.value);
		       ^

0 [0x0]: line: 469 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#long.operator&=[2574] params(1) in file: lib\support\/0.2.9//primitives.sharp:470:8: note:  
		    def operator&=(num : long)   := (value&=num.value);
		       ^

0 [0x0]: line: 470 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#long.operator&=[2575] params(1) in file: lib\support\/0.2.9//primitives.sharp:471:8: note:  
		    def operator&=(num : uint)   := (value&=num.value);
		       ^

0 [0x0]: line: 471 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#long.operator&=[2576] params(1) in file: lib\support\/0.2.9//primitives.sharp:472:8: note:  
		    def operator&=(num : int)    := (value&=num.value);
		       ^

0 [0x0]: line: 472 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#long.operator&=[2577] params(1) in file: lib\support\/0.2.9//primitives.sharp:473:8: note:  
		    def operator&=(num : ushort) := (value&=num.value);
		       ^

0 [0x0]: line: 473 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#long.operator&=[2578] params(1) in file: lib\support\/0.2.9//primitives.sharp:474:8: note:  
		    def operator&=(num : short)  := (value&=num.value);
		       ^

0 [0x0]: line: 474 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#long.operator&=[2579] params(1) in file: lib\support\/0.2.9//primitives.sharp:475:8: note:  
		    def operator&=(num : uchar)  := (value&=num.value);
		       ^

0 [0x0]: line: 475 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#long.operator&=[2580] params(1) in file: lib\support\/0.2.9//primitives.sharp:476:8: note:  
		    def operator&=(num : char)   := (value&=num.value);
		       ^

0 [0x0]: line: 476 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#long.operator&=[2581] params(1) in file: lib\support\/0.2.9//primitives.sharp:477:8: note:  
		    def operator&=(num : byte)   := (value&=num.value);
		       ^

0 [0x0]: line: 477 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#long.operator&=[2582] params(1) in file: lib\support\/0.2.9//primitives.sharp:478:8: note:  
		    def operator&=(num : bool)   := (value&=num.value);
		       ^

0 [0x0]: line: 478 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#long.operator&=[2583] params(1) in file: lib\support\/0.2.9//primitives.sharp:479:8: note:  
		    def operator&=(num : double)   := (value&=num.value);
		       ^

0 [0x0]: line: 479 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#long.operator&=[2584] params(1) in file: lib\support\/0.2.9//primitives.sharp:480:8: note:  
		    def operator&=(num : var)    := (value&=num);
		       ^

0 [0x0]: line: 480 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           and ecx, ebx   
9 [0x9]:           rmov adx, cmt   
10 [0xa]:           returnobj   
11 [0xb]:           ret   


overload function: std#long.operator|=[2585] params(1) in file: lib\support\/0.2.9//primitives.sharp:482:8: note:  
		    def operator|=(num : ulong)  := (value|=num.value);
		       ^

0 [0x0]: line: 482 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator|=[2586] params(1) in file: lib\support\/0.2.9//primitives.sharp:483:8: note:  
		    def operator|=(num : long)   := (value|=num.value);
		       ^

0 [0x0]: line: 483 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator|=[2587] params(1) in file: lib\support\/0.2.9//primitives.sharp:484:8: note:  
		    def operator|=(num : uint)   := (value|=num.value);
		       ^

0 [0x0]: line: 484 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator|=[2588] params(1) in file: lib\support\/0.2.9//primitives.sharp:485:8: note:  
		    def operator|=(num : int)    := (value|=num.value);
		       ^

0 [0x0]: line: 485 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator|=[2589] params(1) in file: lib\support\/0.2.9//primitives.sharp:486:8: note:  
		    def operator|=(num : ushort) := (value|=num.value);
		       ^

0 [0x0]: line: 486 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator|=[2590] params(1) in file: lib\support\/0.2.9//primitives.sharp:487:8: note:  
		    def operator|=(num : short)  := (value|=num.value);
		       ^

0 [0x0]: line: 487 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator|=[2591] params(1) in file: lib\support\/0.2.9//primitives.sharp:488:8: note:  
		    def operator|=(num : uchar)  := (value|=num.value);
		       ^

0 [0x0]: line: 488 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator|=[2592] params(1) in file: lib\support\/0.2.9//primitives.sharp:489:8: note:  
		    def operator|=(num : char)   := (value|=num.value);
		       ^

0 [0x0]: line: 489 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator|=[2593] params(1) in file: lib\support\/0.2.9//primitives.sharp:490:8: note:  
		    def operator|=(num : byte)   := (value|=num.value);
		       ^

0 [0x0]: line: 490 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator|=[2594] params(1) in file: lib\support\/0.2.9//primitives.sharp:491:8: note:  
		    def operator|=(num : bool)   := (value|=num.value);
		       ^

0 [0x0]: line: 491 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator|=[2595] params(1) in file: lib\support\/0.2.9//primitives.sharp:492:8: note:  
		    def operator|=(num : double)   := (value|=num.value);
		       ^

0 [0x0]: line: 492 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov64 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#long.operator|=[2596] params(1) in file: lib\support\/0.2.9//primitives.sharp:493:8: note:  
		    def operator|=(num : var)    := (value|=num);
		       ^

0 [0x0]: line: 493 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           or ecx, ebx   
9 [0x9]:           mov64 cmt, cmt   
10 [0xa]:           rmov adx, cmt   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


constructor: std#long.long[2597] params(0) in file: lib\support\/0.2.9//primitives.sharp:384:6: note:  
		class long base integer<_int64> {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @432 // <std#integer<_int64>.integer>   
2 [0x2]:         ret   


constructor: std#uint.uint[2598] params(1) in file: lib\support\/0.2.9//primitives.sharp:497:9: note:  
		    uint(i : long) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @433 // <std#integer<_uint32>.integer>   
9 [0x9]:         ret   


constructor: std#uint.uint[2599] params(1) in file: lib\support\/0.2.9//primitives.sharp:498:9: note:  
		    uint(i : int) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @433 // <std#integer<_uint32>.integer>   
9 [0x9]:         ret   


constructor: std#uint.uint[2600] params(1) in file: lib\support\/0.2.9//primitives.sharp:499:9: note:  
		    uint(i : short) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @433 // <std#integer<_uint32>.integer>   
9 [0x9]:         ret   


constructor: std#uint.uint[2601] params(1) in file: lib\support\/0.2.9//primitives.sharp:500:9: note:  
		    uint(i : char) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @433 // <std#integer<_uint32>.integer>   
9 [0x9]:         ret   


constructor: std#uint.uint[2602] params(1) in file: lib\support\/0.2.9//primitives.sharp:501:9: note:  
		    uint(i : byte) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @433 // <std#integer<_uint32>.integer>   
9 [0x9]:         ret   


constructor: std#uint.uint[2603] params(1) in file: lib\support\/0.2.9//primitives.sharp:502:9: note:  
		    uint(i : bool) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @433 // <std#integer<_uint32>.integer>   
9 [0x9]:         ret   


constructor: std#uint.uint[2604] params(1) in file: lib\support\/0.2.9//primitives.sharp:503:9: note:  
		    uint(i : ulong) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @433 // <std#integer<_uint32>.integer>   
9 [0x9]:         ret   


constructor: std#uint.uint[2605] params(1) in file: lib\support\/0.2.9//primitives.sharp:504:9: note:  
		    uint(i : uint) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @433 // <std#integer<_uint32>.integer>   
9 [0x9]:         ret   


constructor: std#uint.uint[2606] params(1) in file: lib\support\/0.2.9//primitives.sharp:505:9: note:  
		    uint(i : ushort) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @433 // <std#integer<_uint32>.integer>   
9 [0x9]:         ret   


constructor: std#uint.uint[2607] params(1) in file: lib\support\/0.2.9//primitives.sharp:506:9: note:  
		    uint(i : uchar) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @433 // <std#integer<_uint32>.integer>   
9 [0x9]:         ret   


constructor: std#uint.uint[2608] params(1) in file: lib\support\/0.2.9//primitives.sharp:507:9: note:  
		    uint(i : double) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @433 // <std#integer<_uint32>.integer>   
9 [0x9]:         ret   


constructor: std#uint.uint[2609] params(1) in file: lib\support\/0.2.9//primitives.sharp:508:9: note:  
		    uint(i : var) -> base(i) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         ipushl #1   
2 [0x2]:         call @433 // <std#integer<_uint32>.integer>   
3 [0x3]:         ret   


overload function: std#uint.operator![2610] params(0) in file: lib\support\/0.2.9//primitives.sharp:510:8: note:  
		    def operator!() := (!value);
		       ^

0 [0x0]: line: 510 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           not ebx, ebx   
7 [0x7]:           return_val ebx   
8 [0x8]:           ret   


overload function: std#uint.operator++[2611] params(0) in file: lib\support\/0.2.9//primitives.sharp:511:8: note:  
		    def operator++() := (++value);
		       ^

0 [0x0]: line: 511 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           inc ebx   
7 [0x7]:           movu32 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#uint.operator++[2612] params(1) in file: lib\support\/0.2.9//primitives.sharp:512:8: note:  
		    def operator++(num : var) := (value++);
		       ^

0 [0x0]: line: 512 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           inc ebx   
8 [0x8]:           movu32 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#uint.operator--[2613] params(0) in file: lib\support\/0.2.9//primitives.sharp:513:8: note:  
		    def operator--() := (--value);
		       ^

0 [0x0]: line: 513 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           dec ebx   
7 [0x7]:           movu32 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#uint.operator--[2614] params(1) in file: lib\support\/0.2.9//primitives.sharp:514:8: note:  
		    def operator--(num : var) := (value--);
		       ^

0 [0x0]: line: 514 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           dec ebx   
8 [0x8]:           movu32 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#uint.operator+=[2615] params(1) in file: lib\support\/0.2.9//primitives.sharp:516:8: note:  
		    def operator+=(num : ulong)  := (value+=num.value);
		       ^

0 [0x0]: line: 516 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator+=[2616] params(1) in file: lib\support\/0.2.9//primitives.sharp:517:8: note:  
		    def operator+=(num : long)   := (value+=num.value);
		       ^

0 [0x0]: line: 517 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator+=[2617] params(1) in file: lib\support\/0.2.9//primitives.sharp:518:8: note:  
		    def operator+=(num : uint)   := (value+=num.value);
		       ^

0 [0x0]: line: 518 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator+=[2618] params(1) in file: lib\support\/0.2.9//primitives.sharp:519:8: note:  
		    def operator+=(num : int)    := (value+=num.value);
		       ^

0 [0x0]: line: 519 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator+=[2619] params(1) in file: lib\support\/0.2.9//primitives.sharp:520:8: note:  
		    def operator+=(num : ushort) := (value+=num.value);
		       ^

0 [0x0]: line: 520 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator+=[2620] params(1) in file: lib\support\/0.2.9//primitives.sharp:521:8: note:  
		    def operator+=(num : short)  := (value+=num.value);
		       ^

0 [0x0]: line: 521 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator+=[2621] params(1) in file: lib\support\/0.2.9//primitives.sharp:522:8: note:  
		    def operator+=(num : uchar)  := (value+=num.value);
		       ^

0 [0x0]: line: 522 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator+=[2622] params(1) in file: lib\support\/0.2.9//primitives.sharp:523:8: note:  
		    def operator+=(num : char)   := (value+=num.value);
		       ^

0 [0x0]: line: 523 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator+=[2623] params(1) in file: lib\support\/0.2.9//primitives.sharp:524:8: note:  
		    def operator+=(num : byte)   := (value+=num.value);
		       ^

0 [0x0]: line: 524 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator+=[2624] params(1) in file: lib\support\/0.2.9//primitives.sharp:525:8: note:  
		    def operator+=(num : bool)   := (value+=num.value);
		       ^

0 [0x0]: line: 525 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator+=[2625] params(1) in file: lib\support\/0.2.9//primitives.sharp:526:8: note:  
		    def operator+=(num : double)   := (value+=num.value);
		       ^

0 [0x0]: line: 526 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator+=[2626] params(1) in file: lib\support\/0.2.9//primitives.sharp:527:8: note:  
		    def operator+=(num : var)    := (value+=num);
		       ^

0 [0x0]: line: 527 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           add ecx, ebx -> ebx   
9 [0x9]:           movu32 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#uint.operator-=[2627] params(1) in file: lib\support\/0.2.9//primitives.sharp:529:8: note:  
		    def operator-=(num : ulong)  := (value-=num.value);
		       ^

0 [0x0]: line: 529 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator-=[2628] params(1) in file: lib\support\/0.2.9//primitives.sharp:530:8: note:  
		    def operator-=(num : long)   := (value-=num.value);
		       ^

0 [0x0]: line: 530 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator-=[2629] params(1) in file: lib\support\/0.2.9//primitives.sharp:531:8: note:  
		    def operator-=(num : uint)   := (value-=num.value);
		       ^

0 [0x0]: line: 531 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator-=[2630] params(1) in file: lib\support\/0.2.9//primitives.sharp:532:8: note:  
		    def operator-=(num : int)    := (value-=num.value);
		       ^

0 [0x0]: line: 532 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator-=[2631] params(1) in file: lib\support\/0.2.9//primitives.sharp:533:8: note:  
		    def operator-=(num : ushort) := (value-=num.value);
		       ^

0 [0x0]: line: 533 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator-=[2632] params(1) in file: lib\support\/0.2.9//primitives.sharp:534:8: note:  
		    def operator-=(num : short)  := (value-=num.value);
		       ^

0 [0x0]: line: 534 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator-=[2633] params(1) in file: lib\support\/0.2.9//primitives.sharp:535:8: note:  
		    def operator-=(num : uchar)  := (value-=num.value);
		       ^

0 [0x0]: line: 535 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator-=[2634] params(1) in file: lib\support\/0.2.9//primitives.sharp:536:8: note:  
		    def operator-=(num : char)   := (value-=num.value);
		       ^

0 [0x0]: line: 536 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator-=[2635] params(1) in file: lib\support\/0.2.9//primitives.sharp:537:8: note:  
		    def operator-=(num : byte)   := (value-=num.value);
		       ^

0 [0x0]: line: 537 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator-=[2636] params(1) in file: lib\support\/0.2.9//primitives.sharp:538:8: note:  
		    def operator-=(num : bool)   := (value-=num.value);
		       ^

0 [0x0]: line: 538 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator-=[2637] params(1) in file: lib\support\/0.2.9//primitives.sharp:539:8: note:  
		    def operator-=(num : double)   := (value-=num.value);
		       ^

0 [0x0]: line: 539 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator-=[2638] params(1) in file: lib\support\/0.2.9//primitives.sharp:540:8: note:  
		    def operator-=(num : var)    := (value-=num);
		       ^

0 [0x0]: line: 540 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           sub ecx, ebx -> ebx   
9 [0x9]:           movu32 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#uint.operator*=[2639] params(1) in file: lib\support\/0.2.9//primitives.sharp:542:8: note:  
		    def operator*=(num : ulong)  := (value*=num.value);
		       ^

0 [0x0]: line: 542 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator*=[2640] params(1) in file: lib\support\/0.2.9//primitives.sharp:543:8: note:  
		    def operator*=(num : long)   := (value*=num.value);
		       ^

0 [0x0]: line: 543 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator*=[2641] params(1) in file: lib\support\/0.2.9//primitives.sharp:544:8: note:  
		    def operator*=(num : uint)   := (value*=num.value);
		       ^

0 [0x0]: line: 544 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator*=[2642] params(1) in file: lib\support\/0.2.9//primitives.sharp:545:8: note:  
		    def operator*=(num : int)    := (value*=num.value);
		       ^

0 [0x0]: line: 545 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator*=[2643] params(1) in file: lib\support\/0.2.9//primitives.sharp:546:8: note:  
		    def operator*=(num : ushort) := (value*=num.value);
		       ^

0 [0x0]: line: 546 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator*=[2644] params(1) in file: lib\support\/0.2.9//primitives.sharp:547:8: note:  
		    def operator*=(num : short)  := (value*=num.value);
		       ^

0 [0x0]: line: 547 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator*=[2645] params(1) in file: lib\support\/0.2.9//primitives.sharp:548:8: note:  
		    def operator*=(num : uchar)  := (value*=num.value);
		       ^

0 [0x0]: line: 548 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator*=[2646] params(1) in file: lib\support\/0.2.9//primitives.sharp:549:8: note:  
		    def operator*=(num : char)   := (value*=num.value);
		       ^

0 [0x0]: line: 549 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator*=[2647] params(1) in file: lib\support\/0.2.9//primitives.sharp:550:8: note:  
		    def operator*=(num : byte)   := (value*=num.value);
		       ^

0 [0x0]: line: 550 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator*=[2648] params(1) in file: lib\support\/0.2.9//primitives.sharp:551:8: note:  
		    def operator*=(num : bool)   := (value*=num.value);
		       ^

0 [0x0]: line: 551 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator*=[2649] params(1) in file: lib\support\/0.2.9//primitives.sharp:552:8: note:  
		    def operator*=(num : double)   := (value*=num.value);
		       ^

0 [0x0]: line: 552 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator*=[2650] params(1) in file: lib\support\/0.2.9//primitives.sharp:553:8: note:  
		    def operator*=(num : var)    := (value*=num);
		       ^

0 [0x0]: line: 553 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           mul ecx, ebx -> ebx   
9 [0x9]:           movu32 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#uint.operator/=[2651] params(1) in file: lib\support\/0.2.9//primitives.sharp:555:8: note:  
		    def operator/=(num : ulong)  := (value/=num.value);
		       ^

0 [0x0]: line: 555 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator/=[2652] params(1) in file: lib\support\/0.2.9//primitives.sharp:556:8: note:  
		    def operator/=(num : long)   := (value/=num.value);
		       ^

0 [0x0]: line: 556 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator/=[2653] params(1) in file: lib\support\/0.2.9//primitives.sharp:557:8: note:  
		    def operator/=(num : uint)   := (value/=num.value);
		       ^

0 [0x0]: line: 557 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator/=[2654] params(1) in file: lib\support\/0.2.9//primitives.sharp:558:8: note:  
		    def operator/=(num : int)    := (value/=num.value);
		       ^

0 [0x0]: line: 558 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator/=[2655] params(1) in file: lib\support\/0.2.9//primitives.sharp:559:8: note:  
		    def operator/=(num : ushort) := (value/=num.value);
		       ^

0 [0x0]: line: 559 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator/=[2656] params(1) in file: lib\support\/0.2.9//primitives.sharp:560:8: note:  
		    def operator/=(num : short)  := (value/=num.value);
		       ^

0 [0x0]: line: 560 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator/=[2657] params(1) in file: lib\support\/0.2.9//primitives.sharp:561:8: note:  
		    def operator/=(num : uchar)  := (value/=num.value);
		       ^

0 [0x0]: line: 561 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator/=[2658] params(1) in file: lib\support\/0.2.9//primitives.sharp:562:8: note:  
		    def operator/=(num : char)   := (value/=num.value);
		       ^

0 [0x0]: line: 562 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator/=[2659] params(1) in file: lib\support\/0.2.9//primitives.sharp:563:8: note:  
		    def operator/=(num : byte)   := (value/=num.value);
		       ^

0 [0x0]: line: 563 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator/=[2660] params(1) in file: lib\support\/0.2.9//primitives.sharp:564:8: note:  
		    def operator/=(num : bool)   := (value/=num.value);
		       ^

0 [0x0]: line: 564 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator/=[2661] params(1) in file: lib\support\/0.2.9//primitives.sharp:565:8: note:  
		    def operator/=(num : double)   := (value/=num.value);
		       ^

0 [0x0]: line: 565 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator/=[2662] params(1) in file: lib\support\/0.2.9//primitives.sharp:566:8: note:  
		    def operator/=(num : var)    := (value/=num);
		       ^

0 [0x0]: line: 566 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           div ecx, ebx -> ebx   
9 [0x9]:           movu32 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#uint.operator%=[2663] params(1) in file: lib\support\/0.2.9//primitives.sharp:568:8: note:  
		    def operator%=(num : ulong)  := (value%=num.value);
		       ^

0 [0x0]: line: 568 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator%=[2664] params(1) in file: lib\support\/0.2.9//primitives.sharp:569:8: note:  
		    def operator%=(num : long)   := (value%=num.value);
		       ^

0 [0x0]: line: 569 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator%=[2665] params(1) in file: lib\support\/0.2.9//primitives.sharp:570:8: note:  
		    def operator%=(num : uint)   := (value%=num.value);
		       ^

0 [0x0]: line: 570 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator%=[2666] params(1) in file: lib\support\/0.2.9//primitives.sharp:571:8: note:  
		    def operator%=(num : int)    := (value%=num.value);
		       ^

0 [0x0]: line: 571 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator%=[2667] params(1) in file: lib\support\/0.2.9//primitives.sharp:572:8: note:  
		    def operator%=(num : ushort) := (value%=num.value);
		       ^

0 [0x0]: line: 572 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator%=[2668] params(1) in file: lib\support\/0.2.9//primitives.sharp:573:8: note:  
		    def operator%=(num : short)  := (value%=num.value);
		       ^

0 [0x0]: line: 573 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator%=[2669] params(1) in file: lib\support\/0.2.9//primitives.sharp:574:8: note:  
		    def operator%=(num : uchar)  := (value%=num.value);
		       ^

0 [0x0]: line: 574 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator%=[2670] params(1) in file: lib\support\/0.2.9//primitives.sharp:575:8: note:  
		    def operator%=(num : char)   := (value%=num.value);
		       ^

0 [0x0]: line: 575 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator%=[2671] params(1) in file: lib\support\/0.2.9//primitives.sharp:576:8: note:  
		    def operator%=(num : byte)   := (value%=num.value);
		       ^

0 [0x0]: line: 576 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator%=[2672] params(1) in file: lib\support\/0.2.9//primitives.sharp:577:8: note:  
		    def operator%=(num : bool)   := (value%=num.value);
		       ^

0 [0x0]: line: 577 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator%=[2673] params(1) in file: lib\support\/0.2.9//primitives.sharp:578:8: note:  
		    def operator%=(num : double)   := (value%=num.value);
		       ^

0 [0x0]: line: 578 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator%=[2674] params(1) in file: lib\support\/0.2.9//primitives.sharp:579:8: note:  
		    def operator%=(num : var)    := (value%=num);
		       ^

0 [0x0]: line: 579 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           mod ecx, ebx -> ebx   
9 [0x9]:           movu32 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#uint.operator&=[2675] params(1) in file: lib\support\/0.2.9//primitives.sharp:581:8: note:  
		    def operator&=(num : ulong)  := (value&=num.value);
		       ^

0 [0x0]: line: 581 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uint.operator&=[2676] params(1) in file: lib\support\/0.2.9//primitives.sharp:582:8: note:  
		    def operator&=(num : long)   := (value&=num.value);
		       ^

0 [0x0]: line: 582 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uint.operator&=[2677] params(1) in file: lib\support\/0.2.9//primitives.sharp:583:8: note:  
		    def operator&=(num : uint)   := (value&=num.value);
		       ^

0 [0x0]: line: 583 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uint.operator&=[2678] params(1) in file: lib\support\/0.2.9//primitives.sharp:584:8: note:  
		    def operator&=(num : int)    := (value&=num.value);
		       ^

0 [0x0]: line: 584 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uint.operator&=[2679] params(1) in file: lib\support\/0.2.9//primitives.sharp:585:8: note:  
		    def operator&=(num : ushort) := (value&=num.value);
		       ^

0 [0x0]: line: 585 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uint.operator&=[2680] params(1) in file: lib\support\/0.2.9//primitives.sharp:586:8: note:  
		    def operator&=(num : short)  := (value&=num.value);
		       ^

0 [0x0]: line: 586 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uint.operator&=[2681] params(1) in file: lib\support\/0.2.9//primitives.sharp:587:8: note:  
		    def operator&=(num : uchar)  := (value&=num.value);
		       ^

0 [0x0]: line: 587 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uint.operator&=[2682] params(1) in file: lib\support\/0.2.9//primitives.sharp:588:8: note:  
		    def operator&=(num : char)   := (value&=num.value);
		       ^

0 [0x0]: line: 588 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uint.operator&=[2683] params(1) in file: lib\support\/0.2.9//primitives.sharp:589:8: note:  
		    def operator&=(num : byte)   := (value&=num.value);
		       ^

0 [0x0]: line: 589 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uint.operator&=[2684] params(1) in file: lib\support\/0.2.9//primitives.sharp:590:8: note:  
		    def operator&=(num : bool)   := (value&=num.value);
		       ^

0 [0x0]: line: 590 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uint.operator&=[2685] params(1) in file: lib\support\/0.2.9//primitives.sharp:591:8: note:  
		    def operator&=(num : double)   := (value&=num.value);
		       ^

0 [0x0]: line: 591 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#uint.operator&=[2686] params(1) in file: lib\support\/0.2.9//primitives.sharp:592:8: note:  
		    def operator&=(num : var)    := (value&=num);
		       ^

0 [0x0]: line: 592 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           and ecx, ebx   
9 [0x9]:           rmov adx, cmt   
10 [0xa]:           returnobj   
11 [0xb]:           ret   


overload function: std#uint.operator|=[2687] params(1) in file: lib\support\/0.2.9//primitives.sharp:594:8: note:  
		    def operator|=(num : ulong)  := (value|=num.value);
		       ^

0 [0x0]: line: 594 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator|=[2688] params(1) in file: lib\support\/0.2.9//primitives.sharp:595:8: note:  
		    def operator|=(num : long)   := (value|=num.value);
		       ^

0 [0x0]: line: 595 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator|=[2689] params(1) in file: lib\support\/0.2.9//primitives.sharp:596:8: note:  
		    def operator|=(num : uint)   := (value|=num.value);
		       ^

0 [0x0]: line: 596 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator|=[2690] params(1) in file: lib\support\/0.2.9//primitives.sharp:597:8: note:  
		    def operator|=(num : int)    := (value|=num.value);
		       ^

0 [0x0]: line: 597 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator|=[2691] params(1) in file: lib\support\/0.2.9//primitives.sharp:598:8: note:  
		    def operator|=(num : ushort) := (value|=num.value);
		       ^

0 [0x0]: line: 598 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator|=[2692] params(1) in file: lib\support\/0.2.9//primitives.sharp:599:8: note:  
		    def operator|=(num : short)  := (value|=num.value);
		       ^

0 [0x0]: line: 599 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator|=[2693] params(1) in file: lib\support\/0.2.9//primitives.sharp:600:8: note:  
		    def operator|=(num : uchar)  := (value|=num.value);
		       ^

0 [0x0]: line: 600 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator|=[2694] params(1) in file: lib\support\/0.2.9//primitives.sharp:601:8: note:  
		    def operator|=(num : char)   := (value|=num.value);
		       ^

0 [0x0]: line: 601 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator|=[2695] params(1) in file: lib\support\/0.2.9//primitives.sharp:602:8: note:  
		    def operator|=(num : byte)   := (value|=num.value);
		       ^

0 [0x0]: line: 602 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator|=[2696] params(1) in file: lib\support\/0.2.9//primitives.sharp:603:8: note:  
		    def operator|=(num : bool)   := (value|=num.value);
		       ^

0 [0x0]: line: 603 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator|=[2697] params(1) in file: lib\support\/0.2.9//primitives.sharp:604:8: note:  
		    def operator|=(num : double)   := (value|=num.value);
		       ^

0 [0x0]: line: 604 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uint.operator|=[2698] params(1) in file: lib\support\/0.2.9//primitives.sharp:605:8: note:  
		    def operator|=(num : var)    := (value|=num);
		       ^

0 [0x0]: line: 605 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           or ecx, ebx   
9 [0x9]:           movu32 cmt, cmt   
10 [0xa]:           rmov adx, cmt   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


constructor: std#uint.uint[2699] params(0) in file: lib\support\/0.2.9//primitives.sharp:496:6: note:  
		class uint base integer<_uint32> {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @641 // <std#integer<_uint32>.integer>   
2 [0x2]:         ret   


constructor: std#int.int[2700] params(1) in file: lib\support\/0.2.9//primitives.sharp:608:8: note:  
		    int(i : long) -> base(i.value) {}
		       ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @642 // <std#integer<_int32>.integer>   
9 [0x9]:         ret   


constructor: std#int.int[2701] params(1) in file: lib\support\/0.2.9//primitives.sharp:609:8: note:  
		    int(i : int) -> base(i.value) {}
		       ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @642 // <std#integer<_int32>.integer>   
9 [0x9]:         ret   


constructor: std#int.int[2702] params(1) in file: lib\support\/0.2.9//primitives.sharp:610:8: note:  
		    int(i : short) -> base(i.value) {}
		       ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @642 // <std#integer<_int32>.integer>   
9 [0x9]:         ret   


constructor: std#int.int[2703] params(1) in file: lib\support\/0.2.9//primitives.sharp:611:8: note:  
		    int(i : char) -> base(i.value) {}
		       ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @642 // <std#integer<_int32>.integer>   
9 [0x9]:         ret   


constructor: std#int.int[2704] params(1) in file: lib\support\/0.2.9//primitives.sharp:612:8: note:  
		    int(i : byte) -> base(i.value) {}
		       ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @642 // <std#integer<_int32>.integer>   
9 [0x9]:         ret   


constructor: std#int.int[2705] params(1) in file: lib\support\/0.2.9//primitives.sharp:613:8: note:  
		    int(i : bool) -> base(i.value) {}
		       ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @642 // <std#integer<_int32>.integer>   
9 [0x9]:         ret   


constructor: std#int.int[2706] params(1) in file: lib\support\/0.2.9//primitives.sharp:614:8: note:  
		    int(i : ulong) -> base(i.value) {}
		       ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @642 // <std#integer<_int32>.integer>   
9 [0x9]:         ret   


constructor: std#int.int[2707] params(1) in file: lib\support\/0.2.9//primitives.sharp:615:8: note:  
		    int(i : uint) -> base(i.value) {}
		       ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @642 // <std#integer<_int32>.integer>   
9 [0x9]:         ret   


constructor: std#int.int[2708] params(1) in file: lib\support\/0.2.9//primitives.sharp:616:8: note:  
		    int(i : ushort) -> base(i.value) {}
		       ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @642 // <std#integer<_int32>.integer>   
9 [0x9]:         ret   


constructor: std#int.int[2709] params(1) in file: lib\support\/0.2.9//primitives.sharp:617:8: note:  
		    int(i : uchar) -> base(i.value) {}
		       ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @642 // <std#integer<_int32>.integer>   
9 [0x9]:         ret   


constructor: std#int.int[2710] params(1) in file: lib\support\/0.2.9//primitives.sharp:618:8: note:  
		    int(i : double) -> base(i.value) {}
		       ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @642 // <std#integer<_int32>.integer>   
9 [0x9]:         ret   


constructor: std#int.int[2711] params(1) in file: lib\support\/0.2.9//primitives.sharp:619:8: note:  
		    int(i : var) -> base(i) {}
		       ^

0 [0x0]:         pushl 0   
1 [0x1]:         ipushl #1   
2 [0x2]:         call @642 // <std#integer<_int32>.integer>   
3 [0x3]:         ret   


overload function: std#int.operator![2712] params(0) in file: lib\support\/0.2.9//primitives.sharp:621:8: note:  
		    def operator!() := (!value);
		       ^

0 [0x0]: line: 621 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           not ebx, ebx   
7 [0x7]:           return_val ebx   
8 [0x8]:           ret   


overload function: std#int.operator++[2713] params(0) in file: lib\support\/0.2.9//primitives.sharp:622:8: note:  
		    def operator++() := (++value);
		       ^

0 [0x0]: line: 622 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           inc ebx   
7 [0x7]:           mov32 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#int.operator++[2714] params(1) in file: lib\support\/0.2.9//primitives.sharp:623:8: note:  
		    def operator++(num : var) := (value++);
		       ^

0 [0x0]: line: 623 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           inc ebx   
8 [0x8]:           mov32 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#int.operator--[2715] params(0) in file: lib\support\/0.2.9//primitives.sharp:624:8: note:  
		    def operator--() := (--value);
		       ^

0 [0x0]: line: 624 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           dec ebx   
7 [0x7]:           mov32 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#int.operator--[2716] params(1) in file: lib\support\/0.2.9//primitives.sharp:625:8: note:  
		    def operator--(num : var) := (value--);
		       ^

0 [0x0]: line: 625 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           dec ebx   
8 [0x8]:           mov32 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#int.operator+=[2717] params(1) in file: lib\support\/0.2.9//primitives.sharp:627:8: note:  
		    def operator+=(num : ulong)  := (value+=num.value);
		       ^

0 [0x0]: line: 627 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator+=[2718] params(1) in file: lib\support\/0.2.9//primitives.sharp:628:8: note:  
		    def operator+=(num : long)   := (value+=num.value);
		       ^

0 [0x0]: line: 628 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator+=[2719] params(1) in file: lib\support\/0.2.9//primitives.sharp:629:8: note:  
		    def operator+=(num : uint)   := (value+=num.value);
		       ^

0 [0x0]: line: 629 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator+=[2720] params(1) in file: lib\support\/0.2.9//primitives.sharp:630:8: note:  
		    def operator+=(num : int)    := (value+=num.value);
		       ^

0 [0x0]: line: 630 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator+=[2721] params(1) in file: lib\support\/0.2.9//primitives.sharp:631:8: note:  
		    def operator+=(num : ushort) := (value+=num.value);
		       ^

0 [0x0]: line: 631 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator+=[2722] params(1) in file: lib\support\/0.2.9//primitives.sharp:632:8: note:  
		    def operator+=(num : short)  := (value+=num.value);
		       ^

0 [0x0]: line: 632 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator+=[2723] params(1) in file: lib\support\/0.2.9//primitives.sharp:633:8: note:  
		    def operator+=(num : uchar)  := (value+=num.value);
		       ^

0 [0x0]: line: 633 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator+=[2724] params(1) in file: lib\support\/0.2.9//primitives.sharp:634:8: note:  
		    def operator+=(num : char)   := (value+=num.value);
		       ^

0 [0x0]: line: 634 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator+=[2725] params(1) in file: lib\support\/0.2.9//primitives.sharp:635:8: note:  
		    def operator+=(num : byte)   := (value+=num.value);
		       ^

0 [0x0]: line: 635 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator+=[2726] params(1) in file: lib\support\/0.2.9//primitives.sharp:636:8: note:  
		    def operator+=(num : bool)   := (value+=num.value);
		       ^

0 [0x0]: line: 636 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator+=[2727] params(1) in file: lib\support\/0.2.9//primitives.sharp:637:8: note:  
		    def operator+=(num : double)   := (value+=num.value);
		       ^

0 [0x0]: line: 637 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator+=[2728] params(1) in file: lib\support\/0.2.9//primitives.sharp:638:8: note:  
		    def operator+=(num : var)    := (value+=num);
		       ^

0 [0x0]: line: 638 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           add ecx, ebx -> ebx   
9 [0x9]:           mov32 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#int.operator-=[2729] params(1) in file: lib\support\/0.2.9//primitives.sharp:640:8: note:  
		    def operator-=(num : ulong)  := (value-=num.value);
		       ^

0 [0x0]: line: 640 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator-=[2730] params(1) in file: lib\support\/0.2.9//primitives.sharp:641:8: note:  
		    def operator-=(num : long)   := (value-=num.value);
		       ^

0 [0x0]: line: 641 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator-=[2731] params(1) in file: lib\support\/0.2.9//primitives.sharp:642:8: note:  
		    def operator-=(num : uint)   := (value-=num.value);
		       ^

0 [0x0]: line: 642 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator-=[2732] params(1) in file: lib\support\/0.2.9//primitives.sharp:643:8: note:  
		    def operator-=(num : int)    := (value-=num.value);
		       ^

0 [0x0]: line: 643 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator-=[2733] params(1) in file: lib\support\/0.2.9//primitives.sharp:644:8: note:  
		    def operator-=(num : ushort) := (value-=num.value);
		       ^

0 [0x0]: line: 644 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator-=[2734] params(1) in file: lib\support\/0.2.9//primitives.sharp:645:8: note:  
		    def operator-=(num : short)  := (value-=num.value);
		       ^

0 [0x0]: line: 645 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator-=[2735] params(1) in file: lib\support\/0.2.9//primitives.sharp:646:8: note:  
		    def operator-=(num : uchar)  := (value-=num.value);
		       ^

0 [0x0]: line: 646 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator-=[2736] params(1) in file: lib\support\/0.2.9//primitives.sharp:647:8: note:  
		    def operator-=(num : char)   := (value-=num.value);
		       ^

0 [0x0]: line: 647 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator-=[2737] params(1) in file: lib\support\/0.2.9//primitives.sharp:648:8: note:  
		    def operator-=(num : byte)   := (value-=num.value);
		       ^

0 [0x0]: line: 648 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator-=[2738] params(1) in file: lib\support\/0.2.9//primitives.sharp:649:8: note:  
		    def operator-=(num : bool)   := (value-=num.value);
		       ^

0 [0x0]: line: 649 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator-=[2739] params(1) in file: lib\support\/0.2.9//primitives.sharp:650:8: note:  
		    def operator-=(num : double)   := (value-=num.value);
		       ^

0 [0x0]: line: 650 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator-=[2740] params(1) in file: lib\support\/0.2.9//primitives.sharp:651:8: note:  
		    def operator-=(num : var)    := (value-=num);
		       ^

0 [0x0]: line: 651 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           sub ecx, ebx -> ebx   
9 [0x9]:           mov32 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#int.operator*=[2741] params(1) in file: lib\support\/0.2.9//primitives.sharp:653:8: note:  
		    def operator*=(num : ulong)  := (value*=num.value);
		       ^

0 [0x0]: line: 653 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator*=[2742] params(1) in file: lib\support\/0.2.9//primitives.sharp:654:8: note:  
		    def operator*=(num : long)   := (value*=num.value);
		       ^

0 [0x0]: line: 654 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator*=[2743] params(1) in file: lib\support\/0.2.9//primitives.sharp:655:8: note:  
		    def operator*=(num : uint)   := (value*=num.value);
		       ^

0 [0x0]: line: 655 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator*=[2744] params(1) in file: lib\support\/0.2.9//primitives.sharp:656:8: note:  
		    def operator*=(num : int)    := (value*=num.value);
		       ^

0 [0x0]: line: 656 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator*=[2745] params(1) in file: lib\support\/0.2.9//primitives.sharp:657:8: note:  
		    def operator*=(num : ushort) := (value*=num.value);
		       ^

0 [0x0]: line: 657 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator*=[2746] params(1) in file: lib\support\/0.2.9//primitives.sharp:658:8: note:  
		    def operator*=(num : short)  := (value*=num.value);
		       ^

0 [0x0]: line: 658 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator*=[2747] params(1) in file: lib\support\/0.2.9//primitives.sharp:659:8: note:  
		    def operator*=(num : uchar)  := (value*=num.value);
		       ^

0 [0x0]: line: 659 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator*=[2748] params(1) in file: lib\support\/0.2.9//primitives.sharp:660:8: note:  
		    def operator*=(num : char)   := (value*=num.value);
		       ^

0 [0x0]: line: 660 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator*=[2749] params(1) in file: lib\support\/0.2.9//primitives.sharp:661:8: note:  
		    def operator*=(num : byte)   := (value*=num.value);
		       ^

0 [0x0]: line: 661 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator*=[2750] params(1) in file: lib\support\/0.2.9//primitives.sharp:662:8: note:  
		    def operator*=(num : bool)   := (value*=num.value);
		       ^

0 [0x0]: line: 662 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator*=[2751] params(1) in file: lib\support\/0.2.9//primitives.sharp:663:8: note:  
		    def operator*=(num : double)   := (value*=num.value);
		       ^

0 [0x0]: line: 663 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator*=[2752] params(1) in file: lib\support\/0.2.9//primitives.sharp:664:8: note:  
		    def operator*=(num : var)    := (value*=num);
		       ^

0 [0x0]: line: 664 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           mul ecx, ebx -> ebx   
9 [0x9]:           mov32 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#int.operator/=[2753] params(1) in file: lib\support\/0.2.9//primitives.sharp:666:8: note:  
		    def operator/=(num : ulong)  := (value/=num.value);
		       ^

0 [0x0]: line: 666 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator/=[2754] params(1) in file: lib\support\/0.2.9//primitives.sharp:667:8: note:  
		    def operator/=(num : long)   := (value/=num.value);
		       ^

0 [0x0]: line: 667 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator/=[2755] params(1) in file: lib\support\/0.2.9//primitives.sharp:668:8: note:  
		    def operator/=(num : uint)   := (value/=num.value);
		       ^

0 [0x0]: line: 668 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator/=[2756] params(1) in file: lib\support\/0.2.9//primitives.sharp:669:8: note:  
		    def operator/=(num : int)    := (value/=num.value);
		       ^

0 [0x0]: line: 669 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator/=[2757] params(1) in file: lib\support\/0.2.9//primitives.sharp:670:8: note:  
		    def operator/=(num : ushort) := (value/=num.value);
		       ^

0 [0x0]: line: 670 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator/=[2758] params(1) in file: lib\support\/0.2.9//primitives.sharp:671:8: note:  
		    def operator/=(num : short)  := (value/=num.value);
		       ^

0 [0x0]: line: 671 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator/=[2759] params(1) in file: lib\support\/0.2.9//primitives.sharp:672:8: note:  
		    def operator/=(num : uchar)  := (value/=num.value);
		       ^

0 [0x0]: line: 672 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator/=[2760] params(1) in file: lib\support\/0.2.9//primitives.sharp:673:8: note:  
		    def operator/=(num : char)   := (value/=num.value);
		       ^

0 [0x0]: line: 673 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator/=[2761] params(1) in file: lib\support\/0.2.9//primitives.sharp:674:8: note:  
		    def operator/=(num : byte)   := (value/=num.value);
		       ^

0 [0x0]: line: 674 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator/=[2762] params(1) in file: lib\support\/0.2.9//primitives.sharp:675:8: note:  
		    def operator/=(num : bool)   := (value/=num.value);
		       ^

0 [0x0]: line: 675 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator/=[2763] params(1) in file: lib\support\/0.2.9//primitives.sharp:676:8: note:  
		    def operator/=(num : double)   := (value/=num.value);
		       ^

0 [0x0]: line: 676 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator/=[2764] params(1) in file: lib\support\/0.2.9//primitives.sharp:677:8: note:  
		    def operator/=(num : var)    := (value/=num);
		       ^

0 [0x0]: line: 677 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           div ecx, ebx -> ebx   
9 [0x9]:           mov32 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#int.operator%=[2765] params(1) in file: lib\support\/0.2.9//primitives.sharp:679:8: note:  
		    def operator%=(num : ulong)  := (value%=num.value);
		       ^

0 [0x0]: line: 679 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator%=[2766] params(1) in file: lib\support\/0.2.9//primitives.sharp:680:8: note:  
		    def operator%=(num : long)   := (value%=num.value);
		       ^

0 [0x0]: line: 680 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator%=[2767] params(1) in file: lib\support\/0.2.9//primitives.sharp:681:8: note:  
		    def operator%=(num : uint)   := (value%=num.value);
		       ^

0 [0x0]: line: 681 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator%=[2768] params(1) in file: lib\support\/0.2.9//primitives.sharp:682:8: note:  
		    def operator%=(num : int)    := (value%=num.value);
		       ^

0 [0x0]: line: 682 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator%=[2769] params(1) in file: lib\support\/0.2.9//primitives.sharp:683:8: note:  
		    def operator%=(num : ushort) := (value%=num.value);
		       ^

0 [0x0]: line: 683 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator%=[2770] params(1) in file: lib\support\/0.2.9//primitives.sharp:684:8: note:  
		    def operator%=(num : short)  := (value%=num.value);
		       ^

0 [0x0]: line: 684 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator%=[2771] params(1) in file: lib\support\/0.2.9//primitives.sharp:685:8: note:  
		    def operator%=(num : uchar)  := (value%=num.value);
		       ^

0 [0x0]: line: 685 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator%=[2772] params(1) in file: lib\support\/0.2.9//primitives.sharp:686:8: note:  
		    def operator%=(num : char)   := (value%=num.value);
		       ^

0 [0x0]: line: 686 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator%=[2773] params(1) in file: lib\support\/0.2.9//primitives.sharp:687:8: note:  
		    def operator%=(num : byte)   := (value%=num.value);
		       ^

0 [0x0]: line: 687 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator%=[2774] params(1) in file: lib\support\/0.2.9//primitives.sharp:688:8: note:  
		    def operator%=(num : bool)   := (value%=num.value);
		       ^

0 [0x0]: line: 688 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator%=[2775] params(1) in file: lib\support\/0.2.9//primitives.sharp:689:8: note:  
		    def operator%=(num : double)   := (value%=num.value);
		       ^

0 [0x0]: line: 689 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov32 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator%=[2776] params(1) in file: lib\support\/0.2.9//primitives.sharp:690:8: note:  
		    def operator%=(num : var)    := (value%=num);
		       ^

0 [0x0]: line: 690 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           mod ecx, ebx -> ebx   
9 [0x9]:           mov32 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#int.operator&=[2777] params(1) in file: lib\support\/0.2.9//primitives.sharp:692:8: note:  
		    def operator&=(num : ulong)  := (value&=num.value);
		       ^

0 [0x0]: line: 692 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#int.operator&=[2778] params(1) in file: lib\support\/0.2.9//primitives.sharp:693:8: note:  
		    def operator&=(num : long)   := (value&=num.value);
		       ^

0 [0x0]: line: 693 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#int.operator&=[2779] params(1) in file: lib\support\/0.2.9//primitives.sharp:694:8: note:  
		    def operator&=(num : uint)   := (value&=num.value);
		       ^

0 [0x0]: line: 694 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#int.operator&=[2780] params(1) in file: lib\support\/0.2.9//primitives.sharp:695:8: note:  
		    def operator&=(num : int)    := (value&=num.value);
		       ^

0 [0x0]: line: 695 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#int.operator&=[2781] params(1) in file: lib\support\/0.2.9//primitives.sharp:696:8: note:  
		    def operator&=(num : ushort) := (value&=num.value);
		       ^

0 [0x0]: line: 696 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#int.operator&=[2782] params(1) in file: lib\support\/0.2.9//primitives.sharp:697:8: note:  
		    def operator&=(num : short)  := (value&=num.value);
		       ^

0 [0x0]: line: 697 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#int.operator&=[2783] params(1) in file: lib\support\/0.2.9//primitives.sharp:698:8: note:  
		    def operator&=(num : uchar)  := (value&=num.value);
		       ^

0 [0x0]: line: 698 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#int.operator&=[2784] params(1) in file: lib\support\/0.2.9//primitives.sharp:699:8: note:  
		    def operator&=(num : char)   := (value&=num.value);
		       ^

0 [0x0]: line: 699 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#int.operator&=[2785] params(1) in file: lib\support\/0.2.9//primitives.sharp:700:8: note:  
		    def operator&=(num : byte)   := (value&=num.value);
		       ^

0 [0x0]: line: 700 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#int.operator&=[2786] params(1) in file: lib\support\/0.2.9//primitives.sharp:701:8: note:  
		    def operator&=(num : bool)   := (value&=num.value);
		       ^

0 [0x0]: line: 701 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#int.operator&=[2787] params(1) in file: lib\support\/0.2.9//primitives.sharp:702:8: note:  
		    def operator&=(num : double)   := (value&=num.value);
		       ^

0 [0x0]: line: 702 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#int.operator&=[2788] params(1) in file: lib\support\/0.2.9//primitives.sharp:703:8: note:  
		    def operator&=(num : var)    := (value&=num);
		       ^

0 [0x0]: line: 703 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           and ecx, ebx   
9 [0x9]:           rmov adx, cmt   
10 [0xa]:           returnobj   
11 [0xb]:           ret   


overload function: std#int.operator|=[2789] params(1) in file: lib\support\/0.2.9//primitives.sharp:705:8: note:  
		    def operator|=(num : ulong)  := (value|=num.value);
		       ^

0 [0x0]: line: 705 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator|=[2790] params(1) in file: lib\support\/0.2.9//primitives.sharp:706:8: note:  
		    def operator|=(num : long)   := (value|=num.value);
		       ^

0 [0x0]: line: 706 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator|=[2791] params(1) in file: lib\support\/0.2.9//primitives.sharp:707:8: note:  
		    def operator|=(num : uint)   := (value|=num.value);
		       ^

0 [0x0]: line: 707 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator|=[2792] params(1) in file: lib\support\/0.2.9//primitives.sharp:708:8: note:  
		    def operator|=(num : int)    := (value|=num.value);
		       ^

0 [0x0]: line: 708 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator|=[2793] params(1) in file: lib\support\/0.2.9//primitives.sharp:709:8: note:  
		    def operator|=(num : ushort) := (value|=num.value);
		       ^

0 [0x0]: line: 709 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator|=[2794] params(1) in file: lib\support\/0.2.9//primitives.sharp:710:8: note:  
		    def operator|=(num : short)  := (value|=num.value);
		       ^

0 [0x0]: line: 710 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator|=[2795] params(1) in file: lib\support\/0.2.9//primitives.sharp:711:8: note:  
		    def operator|=(num : uchar)  := (value|=num.value);
		       ^

0 [0x0]: line: 711 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator|=[2796] params(1) in file: lib\support\/0.2.9//primitives.sharp:712:8: note:  
		    def operator|=(num : char)   := (value|=num.value);
		       ^

0 [0x0]: line: 712 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator|=[2797] params(1) in file: lib\support\/0.2.9//primitives.sharp:713:8: note:  
		    def operator|=(num : byte)   := (value|=num.value);
		       ^

0 [0x0]: line: 713 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator|=[2798] params(1) in file: lib\support\/0.2.9//primitives.sharp:714:8: note:  
		    def operator|=(num : bool)   := (value|=num.value);
		       ^

0 [0x0]: line: 714 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator|=[2799] params(1) in file: lib\support\/0.2.9//primitives.sharp:715:8: note:  
		    def operator|=(num : double)   := (value|=num.value);
		       ^

0 [0x0]: line: 715 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov32 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#int.operator|=[2800] params(1) in file: lib\support\/0.2.9//primitives.sharp:716:8: note:  
		    def operator|=(num : var)    := (value|=num);
		       ^

0 [0x0]: line: 716 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           or ecx, ebx   
9 [0x9]:           mov32 cmt, cmt   
10 [0xa]:           rmov adx, cmt   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


constructor: std#int.int[2801] params(0) in file: lib\support\/0.2.9//primitives.sharp:607:6: note:  
		class int base integer<_int32> {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @850 // <std#integer<_int32>.integer>   
2 [0x2]:         ret   


constructor: std#ushort.ushort[2802] params(1) in file: lib\support\/0.2.9//primitives.sharp:719:11: note:  
		    ushort(i : long) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @851 // <std#integer<_uint16>.integer>   
9 [0x9]:         ret   


constructor: std#ushort.ushort[2803] params(1) in file: lib\support\/0.2.9//primitives.sharp:720:11: note:  
		    ushort(i : int) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @851 // <std#integer<_uint16>.integer>   
9 [0x9]:         ret   


constructor: std#ushort.ushort[2804] params(1) in file: lib\support\/0.2.9//primitives.sharp:721:11: note:  
		    ushort(i : short) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @851 // <std#integer<_uint16>.integer>   
9 [0x9]:         ret   


constructor: std#ushort.ushort[2805] params(1) in file: lib\support\/0.2.9//primitives.sharp:722:11: note:  
		    ushort(i : char) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @851 // <std#integer<_uint16>.integer>   
9 [0x9]:         ret   


constructor: std#ushort.ushort[2806] params(1) in file: lib\support\/0.2.9//primitives.sharp:723:11: note:  
		    ushort(i : byte) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @851 // <std#integer<_uint16>.integer>   
9 [0x9]:         ret   


constructor: std#ushort.ushort[2807] params(1) in file: lib\support\/0.2.9//primitives.sharp:724:11: note:  
		    ushort(i : bool) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @851 // <std#integer<_uint16>.integer>   
9 [0x9]:         ret   


constructor: std#ushort.ushort[2808] params(1) in file: lib\support\/0.2.9//primitives.sharp:725:11: note:  
		    ushort(i : ulong) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @851 // <std#integer<_uint16>.integer>   
9 [0x9]:         ret   


constructor: std#ushort.ushort[2809] params(1) in file: lib\support\/0.2.9//primitives.sharp:726:11: note:  
		    ushort(i : uint) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @851 // <std#integer<_uint16>.integer>   
9 [0x9]:         ret   


constructor: std#ushort.ushort[2810] params(1) in file: lib\support\/0.2.9//primitives.sharp:727:11: note:  
		    ushort(i : ushort) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @851 // <std#integer<_uint16>.integer>   
9 [0x9]:         ret   


constructor: std#ushort.ushort[2811] params(1) in file: lib\support\/0.2.9//primitives.sharp:728:11: note:  
		    ushort(i : uchar) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @851 // <std#integer<_uint16>.integer>   
9 [0x9]:         ret   


constructor: std#ushort.ushort[2812] params(1) in file: lib\support\/0.2.9//primitives.sharp:729:11: note:  
		    ushort(i : double) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @851 // <std#integer<_uint16>.integer>   
9 [0x9]:         ret   


constructor: std#ushort.ushort[2813] params(1) in file: lib\support\/0.2.9//primitives.sharp:730:11: note:  
		    ushort(i : var) -> base(i) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         ipushl #1   
2 [0x2]:         call @851 // <std#integer<_uint16>.integer>   
3 [0x3]:         ret   


overload function: std#ushort.operator![2814] params(0) in file: lib\support\/0.2.9//primitives.sharp:732:8: note:  
		    def operator!() := (!value);
		       ^

0 [0x0]: line: 732 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           not ebx, ebx   
7 [0x7]:           return_val ebx   
8 [0x8]:           ret   


overload function: std#ushort.operator++[2815] params(0) in file: lib\support\/0.2.9//primitives.sharp:733:8: note:  
		    def operator++() := (++value);
		       ^

0 [0x0]: line: 733 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           inc ebx   
7 [0x7]:           movu16 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#ushort.operator++[2816] params(1) in file: lib\support\/0.2.9//primitives.sharp:734:8: note:  
		    def operator++(num : var) := (value++);
		       ^

0 [0x0]: line: 734 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           inc ebx   
8 [0x8]:           movu16 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#ushort.operator--[2817] params(0) in file: lib\support\/0.2.9//primitives.sharp:735:8: note:  
		    def operator--() := (--value);
		       ^

0 [0x0]: line: 735 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           dec ebx   
7 [0x7]:           movu16 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#ushort.operator--[2818] params(1) in file: lib\support\/0.2.9//primitives.sharp:736:8: note:  
		    def operator--(num : var) := (value--);
		       ^

0 [0x0]: line: 736 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           dec ebx   
8 [0x8]:           movu16 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#ushort.operator+=[2819] params(1) in file: lib\support\/0.2.9//primitives.sharp:738:8: note:  
		    def operator+=(num : ulong)  := (value+=num.value);
		       ^

0 [0x0]: line: 738 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator+=[2820] params(1) in file: lib\support\/0.2.9//primitives.sharp:739:8: note:  
		    def operator+=(num : long)   := (value+=num.value);
		       ^

0 [0x0]: line: 739 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator+=[2821] params(1) in file: lib\support\/0.2.9//primitives.sharp:740:8: note:  
		    def operator+=(num : uint)   := (value+=num.value);
		       ^

0 [0x0]: line: 740 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator+=[2822] params(1) in file: lib\support\/0.2.9//primitives.sharp:741:8: note:  
		    def operator+=(num : int)    := (value+=num.value);
		       ^

0 [0x0]: line: 741 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator+=[2823] params(1) in file: lib\support\/0.2.9//primitives.sharp:742:8: note:  
		    def operator+=(num : ushort) := (value+=num.value);
		       ^

0 [0x0]: line: 742 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator+=[2824] params(1) in file: lib\support\/0.2.9//primitives.sharp:743:8: note:  
		    def operator+=(num : short)  := (value+=num.value);
		       ^

0 [0x0]: line: 743 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator+=[2825] params(1) in file: lib\support\/0.2.9//primitives.sharp:744:8: note:  
		    def operator+=(num : uchar)  := (value+=num.value);
		       ^

0 [0x0]: line: 744 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator+=[2826] params(1) in file: lib\support\/0.2.9//primitives.sharp:745:8: note:  
		    def operator+=(num : char)   := (value+=num.value);
		       ^

0 [0x0]: line: 745 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator+=[2827] params(1) in file: lib\support\/0.2.9//primitives.sharp:746:8: note:  
		    def operator+=(num : byte)   := (value+=num.value);
		       ^

0 [0x0]: line: 746 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator+=[2828] params(1) in file: lib\support\/0.2.9//primitives.sharp:747:8: note:  
		    def operator+=(num : bool)   := (value+=num.value);
		       ^

0 [0x0]: line: 747 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator+=[2829] params(1) in file: lib\support\/0.2.9//primitives.sharp:748:8: note:  
		    def operator+=(num : double)   := (value+=num.value);
		       ^

0 [0x0]: line: 748 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator+=[2830] params(1) in file: lib\support\/0.2.9//primitives.sharp:749:8: note:  
		    def operator+=(num : var)    := (value+=num);
		       ^

0 [0x0]: line: 749 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           add ecx, ebx -> ebx   
9 [0x9]:           movu16 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#ushort.operator-=[2831] params(1) in file: lib\support\/0.2.9//primitives.sharp:751:8: note:  
		    def operator-=(num : ulong)  := (value-=num.value);
		       ^

0 [0x0]: line: 751 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator-=[2832] params(1) in file: lib\support\/0.2.9//primitives.sharp:752:8: note:  
		    def operator-=(num : long)   := (value-=num.value);
		       ^

0 [0x0]: line: 752 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator-=[2833] params(1) in file: lib\support\/0.2.9//primitives.sharp:753:8: note:  
		    def operator-=(num : uint)   := (value-=num.value);
		       ^

0 [0x0]: line: 753 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator-=[2834] params(1) in file: lib\support\/0.2.9//primitives.sharp:754:8: note:  
		    def operator-=(num : int)    := (value-=num.value);
		       ^

0 [0x0]: line: 754 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator-=[2835] params(1) in file: lib\support\/0.2.9//primitives.sharp:755:8: note:  
		    def operator-=(num : ushort) := (value-=num.value);
		       ^

0 [0x0]: line: 755 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator-=[2836] params(1) in file: lib\support\/0.2.9//primitives.sharp:756:8: note:  
		    def operator-=(num : short)  := (value-=num.value);
		       ^

0 [0x0]: line: 756 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator-=[2837] params(1) in file: lib\support\/0.2.9//primitives.sharp:757:8: note:  
		    def operator-=(num : uchar)  := (value-=num.value);
		       ^

0 [0x0]: line: 757 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator-=[2838] params(1) in file: lib\support\/0.2.9//primitives.sharp:758:8: note:  
		    def operator-=(num : char)   := (value-=num.value);
		       ^

0 [0x0]: line: 758 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator-=[2839] params(1) in file: lib\support\/0.2.9//primitives.sharp:759:8: note:  
		    def operator-=(num : byte)   := (value-=num.value);
		       ^

0 [0x0]: line: 759 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator-=[2840] params(1) in file: lib\support\/0.2.9//primitives.sharp:760:8: note:  
		    def operator-=(num : bool)   := (value-=num.value);
		       ^

0 [0x0]: line: 760 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator-=[2841] params(1) in file: lib\support\/0.2.9//primitives.sharp:761:8: note:  
		    def operator-=(num : double)   := (value-=num.value);
		       ^

0 [0x0]: line: 761 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator-=[2842] params(1) in file: lib\support\/0.2.9//primitives.sharp:762:8: note:  
		    def operator-=(num : var)    := (value-=num);
		       ^

0 [0x0]: line: 762 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           sub ecx, ebx -> ebx   
9 [0x9]:           movu16 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#ushort.operator*=[2843] params(1) in file: lib\support\/0.2.9//primitives.sharp:764:8: note:  
		    def operator*=(num : ulong)  := (value*=num.value);
		       ^

0 [0x0]: line: 764 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator*=[2844] params(1) in file: lib\support\/0.2.9//primitives.sharp:765:8: note:  
		    def operator*=(num : long)   := (value*=num.value);
		       ^

0 [0x0]: line: 765 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator*=[2845] params(1) in file: lib\support\/0.2.9//primitives.sharp:766:8: note:  
		    def operator*=(num : uint)   := (value*=num.value);
		       ^

0 [0x0]: line: 766 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator*=[2846] params(1) in file: lib\support\/0.2.9//primitives.sharp:767:8: note:  
		    def operator*=(num : int)    := (value*=num.value);
		       ^

0 [0x0]: line: 767 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator*=[2847] params(1) in file: lib\support\/0.2.9//primitives.sharp:768:8: note:  
		    def operator*=(num : ushort) := (value*=num.value);
		       ^

0 [0x0]: line: 768 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator*=[2848] params(1) in file: lib\support\/0.2.9//primitives.sharp:769:8: note:  
		    def operator*=(num : short)  := (value*=num.value);
		       ^

0 [0x0]: line: 769 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator*=[2849] params(1) in file: lib\support\/0.2.9//primitives.sharp:770:8: note:  
		    def operator*=(num : uchar)  := (value*=num.value);
		       ^

0 [0x0]: line: 770 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator*=[2850] params(1) in file: lib\support\/0.2.9//primitives.sharp:771:8: note:  
		    def operator*=(num : char)   := (value*=num.value);
		       ^

0 [0x0]: line: 771 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator*=[2851] params(1) in file: lib\support\/0.2.9//primitives.sharp:772:8: note:  
		    def operator*=(num : byte)   := (value*=num.value);
		       ^

0 [0x0]: line: 772 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator*=[2852] params(1) in file: lib\support\/0.2.9//primitives.sharp:773:8: note:  
		    def operator*=(num : bool)   := (value*=num.value);
		       ^

0 [0x0]: line: 773 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator*=[2853] params(1) in file: lib\support\/0.2.9//primitives.sharp:774:8: note:  
		    def operator*=(num : double)   := (value*=num.value);
		       ^

0 [0x0]: line: 774 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator*=[2854] params(1) in file: lib\support\/0.2.9//primitives.sharp:775:8: note:  
		    def operator*=(num : var)    := (value*=num);
		       ^

0 [0x0]: line: 775 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           mul ecx, ebx -> ebx   
9 [0x9]:           movu16 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#ushort.operator/=[2855] params(1) in file: lib\support\/0.2.9//primitives.sharp:777:8: note:  
		    def operator/=(num : ulong)  := (value/=num.value);
		       ^

0 [0x0]: line: 777 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator/=[2856] params(1) in file: lib\support\/0.2.9//primitives.sharp:778:8: note:  
		    def operator/=(num : long)   := (value/=num.value);
		       ^

0 [0x0]: line: 778 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator/=[2857] params(1) in file: lib\support\/0.2.9//primitives.sharp:779:8: note:  
		    def operator/=(num : uint)   := (value/=num.value);
		       ^

0 [0x0]: line: 779 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator/=[2858] params(1) in file: lib\support\/0.2.9//primitives.sharp:780:8: note:  
		    def operator/=(num : int)    := (value/=num.value);
		       ^

0 [0x0]: line: 780 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator/=[2859] params(1) in file: lib\support\/0.2.9//primitives.sharp:781:8: note:  
		    def operator/=(num : ushort) := (value/=num.value);
		       ^

0 [0x0]: line: 781 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator/=[2860] params(1) in file: lib\support\/0.2.9//primitives.sharp:782:8: note:  
		    def operator/=(num : short)  := (value/=num.value);
		       ^

0 [0x0]: line: 782 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator/=[2861] params(1) in file: lib\support\/0.2.9//primitives.sharp:783:8: note:  
		    def operator/=(num : uchar)  := (value/=num.value);
		       ^

0 [0x0]: line: 783 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator/=[2862] params(1) in file: lib\support\/0.2.9//primitives.sharp:784:8: note:  
		    def operator/=(num : char)   := (value/=num.value);
		       ^

0 [0x0]: line: 784 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator/=[2863] params(1) in file: lib\support\/0.2.9//primitives.sharp:785:8: note:  
		    def operator/=(num : byte)   := (value/=num.value);
		       ^

0 [0x0]: line: 785 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator/=[2864] params(1) in file: lib\support\/0.2.9//primitives.sharp:786:8: note:  
		    def operator/=(num : bool)   := (value/=num.value);
		       ^

0 [0x0]: line: 786 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator/=[2865] params(1) in file: lib\support\/0.2.9//primitives.sharp:787:8: note:  
		    def operator/=(num : double)   := (value/=num.value);
		       ^

0 [0x0]: line: 787 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator/=[2866] params(1) in file: lib\support\/0.2.9//primitives.sharp:788:8: note:  
		    def operator/=(num : var)    := (value/=num);
		       ^

0 [0x0]: line: 788 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           div ecx, ebx -> ebx   
9 [0x9]:           movu16 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#ushort.operator%=[2867] params(1) in file: lib\support\/0.2.9//primitives.sharp:790:8: note:  
		    def operator%=(num : ulong)  := (value%=num.value);
		       ^

0 [0x0]: line: 790 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator%=[2868] params(1) in file: lib\support\/0.2.9//primitives.sharp:791:8: note:  
		    def operator%=(num : long)   := (value%=num.value);
		       ^

0 [0x0]: line: 791 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator%=[2869] params(1) in file: lib\support\/0.2.9//primitives.sharp:792:8: note:  
		    def operator%=(num : uint)   := (value%=num.value);
		       ^

0 [0x0]: line: 792 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator%=[2870] params(1) in file: lib\support\/0.2.9//primitives.sharp:793:8: note:  
		    def operator%=(num : int)    := (value%=num.value);
		       ^

0 [0x0]: line: 793 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator%=[2871] params(1) in file: lib\support\/0.2.9//primitives.sharp:794:8: note:  
		    def operator%=(num : ushort) := (value%=num.value);
		       ^

0 [0x0]: line: 794 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator%=[2872] params(1) in file: lib\support\/0.2.9//primitives.sharp:795:8: note:  
		    def operator%=(num : short)  := (value%=num.value);
		       ^

0 [0x0]: line: 795 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator%=[2873] params(1) in file: lib\support\/0.2.9//primitives.sharp:796:8: note:  
		    def operator%=(num : uchar)  := (value%=num.value);
		       ^

0 [0x0]: line: 796 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator%=[2874] params(1) in file: lib\support\/0.2.9//primitives.sharp:797:8: note:  
		    def operator%=(num : char)   := (value%=num.value);
		       ^

0 [0x0]: line: 797 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator%=[2875] params(1) in file: lib\support\/0.2.9//primitives.sharp:798:8: note:  
		    def operator%=(num : byte)   := (value%=num.value);
		       ^

0 [0x0]: line: 798 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator%=[2876] params(1) in file: lib\support\/0.2.9//primitives.sharp:799:8: note:  
		    def operator%=(num : bool)   := (value%=num.value);
		       ^

0 [0x0]: line: 799 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator%=[2877] params(1) in file: lib\support\/0.2.9//primitives.sharp:800:8: note:  
		    def operator%=(num : double)   := (value%=num.value);
		       ^

0 [0x0]: line: 800 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           movu16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator%=[2878] params(1) in file: lib\support\/0.2.9//primitives.sharp:801:8: note:  
		    def operator%=(num : var)    := (value%=num);
		       ^

0 [0x0]: line: 801 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           mod ecx, ebx -> ebx   
9 [0x9]:           movu16 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#ushort.operator&=[2879] params(1) in file: lib\support\/0.2.9//primitives.sharp:803:8: note:  
		    def operator&=(num : ulong)  := (value&=num.value);
		       ^

0 [0x0]: line: 803 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ushort.operator&=[2880] params(1) in file: lib\support\/0.2.9//primitives.sharp:804:8: note:  
		    def operator&=(num : long)   := (value&=num.value);
		       ^

0 [0x0]: line: 804 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ushort.operator&=[2881] params(1) in file: lib\support\/0.2.9//primitives.sharp:805:8: note:  
		    def operator&=(num : uint)   := (value&=num.value);
		       ^

0 [0x0]: line: 805 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ushort.operator&=[2882] params(1) in file: lib\support\/0.2.9//primitives.sharp:806:8: note:  
		    def operator&=(num : int)    := (value&=num.value);
		       ^

0 [0x0]: line: 806 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ushort.operator&=[2883] params(1) in file: lib\support\/0.2.9//primitives.sharp:807:8: note:  
		    def operator&=(num : ushort) := (value&=num.value);
		       ^

0 [0x0]: line: 807 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ushort.operator&=[2884] params(1) in file: lib\support\/0.2.9//primitives.sharp:808:8: note:  
		    def operator&=(num : short)  := (value&=num.value);
		       ^

0 [0x0]: line: 808 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ushort.operator&=[2885] params(1) in file: lib\support\/0.2.9//primitives.sharp:809:8: note:  
		    def operator&=(num : uchar)  := (value&=num.value);
		       ^

0 [0x0]: line: 809 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ushort.operator&=[2886] params(1) in file: lib\support\/0.2.9//primitives.sharp:810:8: note:  
		    def operator&=(num : char)   := (value&=num.value);
		       ^

0 [0x0]: line: 810 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ushort.operator&=[2887] params(1) in file: lib\support\/0.2.9//primitives.sharp:811:8: note:  
		    def operator&=(num : byte)   := (value&=num.value);
		       ^

0 [0x0]: line: 811 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ushort.operator&=[2888] params(1) in file: lib\support\/0.2.9//primitives.sharp:812:8: note:  
		    def operator&=(num : bool)   := (value&=num.value);
		       ^

0 [0x0]: line: 812 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ushort.operator&=[2889] params(1) in file: lib\support\/0.2.9//primitives.sharp:813:8: note:  
		    def operator&=(num : double)   := (value&=num.value);
		       ^

0 [0x0]: line: 813 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#ushort.operator&=[2890] params(1) in file: lib\support\/0.2.9//primitives.sharp:814:8: note:  
		    def operator&=(num : var)    := (value&=num);
		       ^

0 [0x0]: line: 814 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           and ecx, ebx   
9 [0x9]:           rmov adx, cmt   
10 [0xa]:           returnobj   
11 [0xb]:           ret   


overload function: std#ushort.operator|=[2891] params(1) in file: lib\support\/0.2.9//primitives.sharp:816:8: note:  
		    def operator|=(num : ulong)  := (value|=num.value);
		       ^

0 [0x0]: line: 816 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator|=[2892] params(1) in file: lib\support\/0.2.9//primitives.sharp:817:8: note:  
		    def operator|=(num : long)   := (value|=num.value);
		       ^

0 [0x0]: line: 817 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator|=[2893] params(1) in file: lib\support\/0.2.9//primitives.sharp:818:8: note:  
		    def operator|=(num : uint)   := (value|=num.value);
		       ^

0 [0x0]: line: 818 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator|=[2894] params(1) in file: lib\support\/0.2.9//primitives.sharp:819:8: note:  
		    def operator|=(num : int)    := (value|=num.value);
		       ^

0 [0x0]: line: 819 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator|=[2895] params(1) in file: lib\support\/0.2.9//primitives.sharp:820:8: note:  
		    def operator|=(num : ushort) := (value|=num.value);
		       ^

0 [0x0]: line: 820 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator|=[2896] params(1) in file: lib\support\/0.2.9//primitives.sharp:821:8: note:  
		    def operator|=(num : short)  := (value|=num.value);
		       ^

0 [0x0]: line: 821 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator|=[2897] params(1) in file: lib\support\/0.2.9//primitives.sharp:822:8: note:  
		    def operator|=(num : uchar)  := (value|=num.value);
		       ^

0 [0x0]: line: 822 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator|=[2898] params(1) in file: lib\support\/0.2.9//primitives.sharp:823:8: note:  
		    def operator|=(num : char)   := (value|=num.value);
		       ^

0 [0x0]: line: 823 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator|=[2899] params(1) in file: lib\support\/0.2.9//primitives.sharp:824:8: note:  
		    def operator|=(num : byte)   := (value|=num.value);
		       ^

0 [0x0]: line: 824 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator|=[2900] params(1) in file: lib\support\/0.2.9//primitives.sharp:825:8: note:  
		    def operator|=(num : bool)   := (value|=num.value);
		       ^

0 [0x0]: line: 825 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator|=[2901] params(1) in file: lib\support\/0.2.9//primitives.sharp:826:8: note:  
		    def operator|=(num : double)   := (value|=num.value);
		       ^

0 [0x0]: line: 826 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           movu16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#ushort.operator|=[2902] params(1) in file: lib\support\/0.2.9//primitives.sharp:827:8: note:  
		    def operator|=(num : var)    := (value|=num);
		       ^

0 [0x0]: line: 827 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           or ecx, ebx   
9 [0x9]:           movu16 cmt, cmt   
10 [0xa]:           rmov adx, cmt   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


constructor: std#ushort.ushort[2903] params(0) in file: lib\support\/0.2.9//primitives.sharp:718:6: note:  
		class ushort base integer<_uint16> {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1059 // <std#integer<_uint16>.integer>   
2 [0x2]:         ret   


constructor: std#short.short[2904] params(1) in file: lib\support\/0.2.9//primitives.sharp:830:10: note:  
		    short(i : long) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1060 // <std#integer<_int16>.integer>   
9 [0x9]:         ret   


constructor: std#short.short[2905] params(1) in file: lib\support\/0.2.9//primitives.sharp:831:10: note:  
		    short(i : int) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1060 // <std#integer<_int16>.integer>   
9 [0x9]:         ret   


constructor: std#short.short[2906] params(1) in file: lib\support\/0.2.9//primitives.sharp:832:10: note:  
		    short(i : short) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1060 // <std#integer<_int16>.integer>   
9 [0x9]:         ret   


constructor: std#short.short[2907] params(1) in file: lib\support\/0.2.9//primitives.sharp:833:10: note:  
		    short(i : char) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1060 // <std#integer<_int16>.integer>   
9 [0x9]:         ret   


constructor: std#short.short[2908] params(1) in file: lib\support\/0.2.9//primitives.sharp:834:10: note:  
		    short(i : byte) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1060 // <std#integer<_int16>.integer>   
9 [0x9]:         ret   


constructor: std#short.short[2909] params(1) in file: lib\support\/0.2.9//primitives.sharp:835:10: note:  
		    short(i : bool) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1060 // <std#integer<_int16>.integer>   
9 [0x9]:         ret   


constructor: std#short.short[2910] params(1) in file: lib\support\/0.2.9//primitives.sharp:836:10: note:  
		    short(i : ulong) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1060 // <std#integer<_int16>.integer>   
9 [0x9]:         ret   


constructor: std#short.short[2911] params(1) in file: lib\support\/0.2.9//primitives.sharp:837:10: note:  
		    short(i : uint) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1060 // <std#integer<_int16>.integer>   
9 [0x9]:         ret   


constructor: std#short.short[2912] params(1) in file: lib\support\/0.2.9//primitives.sharp:838:10: note:  
		    short(i : ushort) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1060 // <std#integer<_int16>.integer>   
9 [0x9]:         ret   


constructor: std#short.short[2913] params(1) in file: lib\support\/0.2.9//primitives.sharp:839:10: note:  
		    short(i : uchar) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1060 // <std#integer<_int16>.integer>   
9 [0x9]:         ret   


constructor: std#short.short[2914] params(1) in file: lib\support\/0.2.9//primitives.sharp:840:10: note:  
		    short(i : double) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1060 // <std#integer<_int16>.integer>   
9 [0x9]:         ret   


constructor: std#short.short[2915] params(1) in file: lib\support\/0.2.9//primitives.sharp:841:10: note:  
		    short(i : var) -> base(i) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ipushl #1   
2 [0x2]:         call @1060 // <std#integer<_int16>.integer>   
3 [0x3]:         ret   


overload function: std#short.operator![2916] params(0) in file: lib\support\/0.2.9//primitives.sharp:843:8: note:  
		    def operator!() := (!value);
		       ^

0 [0x0]: line: 843 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           not ebx, ebx   
7 [0x7]:           return_val ebx   
8 [0x8]:           ret   


overload function: std#short.operator++[2917] params(0) in file: lib\support\/0.2.9//primitives.sharp:844:8: note:  
		    def operator++() := (++value);
		       ^

0 [0x0]: line: 844 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           inc ebx   
7 [0x7]:           mov16 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#short.operator++[2918] params(1) in file: lib\support\/0.2.9//primitives.sharp:845:8: note:  
		    def operator++(num : var) := (value++);
		       ^

0 [0x0]: line: 845 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           inc ebx   
8 [0x8]:           mov16 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#short.operator--[2919] params(0) in file: lib\support\/0.2.9//primitives.sharp:846:8: note:  
		    def operator--() := (--value);
		       ^

0 [0x0]: line: 846 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           dec ebx   
7 [0x7]:           mov16 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#short.operator--[2920] params(1) in file: lib\support\/0.2.9//primitives.sharp:847:8: note:  
		    def operator--(num : var) := (value--);
		       ^

0 [0x0]: line: 847 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           dec ebx   
8 [0x8]:           mov16 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#short.operator+=[2921] params(1) in file: lib\support\/0.2.9//primitives.sharp:849:8: note:  
		    def operator+=(num : ulong)  := (value+=num.value);
		       ^

0 [0x0]: line: 849 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator+=[2922] params(1) in file: lib\support\/0.2.9//primitives.sharp:850:8: note:  
		    def operator+=(num : long)   := (value+=num.value);
		       ^

0 [0x0]: line: 850 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator+=[2923] params(1) in file: lib\support\/0.2.9//primitives.sharp:851:8: note:  
		    def operator+=(num : uint)   := (value+=num.value);
		       ^

0 [0x0]: line: 851 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator+=[2924] params(1) in file: lib\support\/0.2.9//primitives.sharp:852:8: note:  
		    def operator+=(num : int)    := (value+=num.value);
		       ^

0 [0x0]: line: 852 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator+=[2925] params(1) in file: lib\support\/0.2.9//primitives.sharp:853:8: note:  
		    def operator+=(num : ushort) := (value+=num.value);
		       ^

0 [0x0]: line: 853 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator+=[2926] params(1) in file: lib\support\/0.2.9//primitives.sharp:854:8: note:  
		    def operator+=(num : short)  := (value+=num.value);
		       ^

0 [0x0]: line: 854 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator+=[2927] params(1) in file: lib\support\/0.2.9//primitives.sharp:855:8: note:  
		    def operator+=(num : uchar)  := (value+=num.value);
		       ^

0 [0x0]: line: 855 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator+=[2928] params(1) in file: lib\support\/0.2.9//primitives.sharp:856:8: note:  
		    def operator+=(num : char)   := (value+=num.value);
		       ^

0 [0x0]: line: 856 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator+=[2929] params(1) in file: lib\support\/0.2.9//primitives.sharp:857:8: note:  
		    def operator+=(num : byte)   := (value+=num.value);
		       ^

0 [0x0]: line: 857 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator+=[2930] params(1) in file: lib\support\/0.2.9//primitives.sharp:858:8: note:  
		    def operator+=(num : bool)   := (value+=num.value);
		       ^

0 [0x0]: line: 858 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator+=[2931] params(1) in file: lib\support\/0.2.9//primitives.sharp:859:8: note:  
		    def operator+=(num : double)   := (value+=num.value);
		       ^

0 [0x0]: line: 859 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator+=[2932] params(1) in file: lib\support\/0.2.9//primitives.sharp:860:8: note:  
		    def operator+=(num : var)    := (value+=num);
		       ^

0 [0x0]: line: 860 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           add ecx, ebx -> ebx   
9 [0x9]:           mov16 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#short.operator-=[2933] params(1) in file: lib\support\/0.2.9//primitives.sharp:862:8: note:  
		    def operator-=(num : ulong)  := (value-=num.value);
		       ^

0 [0x0]: line: 862 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator-=[2934] params(1) in file: lib\support\/0.2.9//primitives.sharp:863:8: note:  
		    def operator-=(num : long)   := (value-=num.value);
		       ^

0 [0x0]: line: 863 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator-=[2935] params(1) in file: lib\support\/0.2.9//primitives.sharp:864:8: note:  
		    def operator-=(num : uint)   := (value-=num.value);
		       ^

0 [0x0]: line: 864 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator-=[2936] params(1) in file: lib\support\/0.2.9//primitives.sharp:865:8: note:  
		    def operator-=(num : int)    := (value-=num.value);
		       ^

0 [0x0]: line: 865 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator-=[2937] params(1) in file: lib\support\/0.2.9//primitives.sharp:866:8: note:  
		    def operator-=(num : ushort) := (value-=num.value);
		       ^

0 [0x0]: line: 866 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator-=[2938] params(1) in file: lib\support\/0.2.9//primitives.sharp:867:8: note:  
		    def operator-=(num : short)  := (value-=num.value);
		       ^

0 [0x0]: line: 867 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator-=[2939] params(1) in file: lib\support\/0.2.9//primitives.sharp:868:8: note:  
		    def operator-=(num : uchar)  := (value-=num.value);
		       ^

0 [0x0]: line: 868 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator-=[2940] params(1) in file: lib\support\/0.2.9//primitives.sharp:869:8: note:  
		    def operator-=(num : char)   := (value-=num.value);
		       ^

0 [0x0]: line: 869 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator-=[2941] params(1) in file: lib\support\/0.2.9//primitives.sharp:870:8: note:  
		    def operator-=(num : byte)   := (value-=num.value);
		       ^

0 [0x0]: line: 870 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator-=[2942] params(1) in file: lib\support\/0.2.9//primitives.sharp:871:8: note:  
		    def operator-=(num : bool)   := (value-=num.value);
		       ^

0 [0x0]: line: 871 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator-=[2943] params(1) in file: lib\support\/0.2.9//primitives.sharp:872:8: note:  
		    def operator-=(num : double)   := (value-=num.value);
		       ^

0 [0x0]: line: 872 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator-=[2944] params(1) in file: lib\support\/0.2.9//primitives.sharp:873:8: note:  
		    def operator-=(num : var)    := (value-=num);
		       ^

0 [0x0]: line: 873 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           sub ecx, ebx -> ebx   
9 [0x9]:           mov16 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#short.operator*=[2945] params(1) in file: lib\support\/0.2.9//primitives.sharp:875:8: note:  
		    def operator*=(num : ulong)  := (value*=num.value);
		       ^

0 [0x0]: line: 875 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator*=[2946] params(1) in file: lib\support\/0.2.9//primitives.sharp:876:8: note:  
		    def operator*=(num : long)   := (value*=num.value);
		       ^

0 [0x0]: line: 876 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator*=[2947] params(1) in file: lib\support\/0.2.9//primitives.sharp:877:8: note:  
		    def operator*=(num : uint)   := (value*=num.value);
		       ^

0 [0x0]: line: 877 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator*=[2948] params(1) in file: lib\support\/0.2.9//primitives.sharp:878:8: note:  
		    def operator*=(num : int)    := (value*=num.value);
		       ^

0 [0x0]: line: 878 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator*=[2949] params(1) in file: lib\support\/0.2.9//primitives.sharp:879:8: note:  
		    def operator*=(num : ushort) := (value*=num.value);
		       ^

0 [0x0]: line: 879 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator*=[2950] params(1) in file: lib\support\/0.2.9//primitives.sharp:880:8: note:  
		    def operator*=(num : short)  := (value*=num.value);
		       ^

0 [0x0]: line: 880 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator*=[2951] params(1) in file: lib\support\/0.2.9//primitives.sharp:881:8: note:  
		    def operator*=(num : uchar)  := (value*=num.value);
		       ^

0 [0x0]: line: 881 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator*=[2952] params(1) in file: lib\support\/0.2.9//primitives.sharp:882:8: note:  
		    def operator*=(num : char)   := (value*=num.value);
		       ^

0 [0x0]: line: 882 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator*=[2953] params(1) in file: lib\support\/0.2.9//primitives.sharp:883:8: note:  
		    def operator*=(num : byte)   := (value*=num.value);
		       ^

0 [0x0]: line: 883 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator*=[2954] params(1) in file: lib\support\/0.2.9//primitives.sharp:884:8: note:  
		    def operator*=(num : bool)   := (value*=num.value);
		       ^

0 [0x0]: line: 884 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator*=[2955] params(1) in file: lib\support\/0.2.9//primitives.sharp:885:8: note:  
		    def operator*=(num : double)   := (value*=num.value);
		       ^

0 [0x0]: line: 885 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator*=[2956] params(1) in file: lib\support\/0.2.9//primitives.sharp:886:8: note:  
		    def operator*=(num : var)    := (value*=num);
		       ^

0 [0x0]: line: 886 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           mul ecx, ebx -> ebx   
9 [0x9]:           mov16 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#short.operator/=[2957] params(1) in file: lib\support\/0.2.9//primitives.sharp:888:8: note:  
		    def operator/=(num : ulong)  := (value/=num.value);
		       ^

0 [0x0]: line: 888 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator/=[2958] params(1) in file: lib\support\/0.2.9//primitives.sharp:889:8: note:  
		    def operator/=(num : long)   := (value/=num.value);
		       ^

0 [0x0]: line: 889 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator/=[2959] params(1) in file: lib\support\/0.2.9//primitives.sharp:890:8: note:  
		    def operator/=(num : uint)   := (value/=num.value);
		       ^

0 [0x0]: line: 890 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator/=[2960] params(1) in file: lib\support\/0.2.9//primitives.sharp:891:8: note:  
		    def operator/=(num : int)    := (value/=num.value);
		       ^

0 [0x0]: line: 891 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator/=[2961] params(1) in file: lib\support\/0.2.9//primitives.sharp:892:8: note:  
		    def operator/=(num : ushort) := (value/=num.value);
		       ^

0 [0x0]: line: 892 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator/=[2962] params(1) in file: lib\support\/0.2.9//primitives.sharp:893:8: note:  
		    def operator/=(num : short)  := (value/=num.value);
		       ^

0 [0x0]: line: 893 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator/=[2963] params(1) in file: lib\support\/0.2.9//primitives.sharp:894:8: note:  
		    def operator/=(num : uchar)  := (value/=num.value);
		       ^

0 [0x0]: line: 894 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator/=[2964] params(1) in file: lib\support\/0.2.9//primitives.sharp:895:8: note:  
		    def operator/=(num : char)   := (value/=num.value);
		       ^

0 [0x0]: line: 895 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator/=[2965] params(1) in file: lib\support\/0.2.9//primitives.sharp:896:8: note:  
		    def operator/=(num : byte)   := (value/=num.value);
		       ^

0 [0x0]: line: 896 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator/=[2966] params(1) in file: lib\support\/0.2.9//primitives.sharp:897:8: note:  
		    def operator/=(num : bool)   := (value/=num.value);
		       ^

0 [0x0]: line: 897 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator/=[2967] params(1) in file: lib\support\/0.2.9//primitives.sharp:898:8: note:  
		    def operator/=(num : double)   := (value/=num.value);
		       ^

0 [0x0]: line: 898 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator/=[2968] params(1) in file: lib\support\/0.2.9//primitives.sharp:899:8: note:  
		    def operator/=(num : var)    := (value/=num);
		       ^

0 [0x0]: line: 899 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           div ecx, ebx -> ebx   
9 [0x9]:           mov16 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#short.operator%=[2969] params(1) in file: lib\support\/0.2.9//primitives.sharp:901:8: note:  
		    def operator%=(num : ulong)  := (value%=num.value);
		       ^

0 [0x0]: line: 901 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator%=[2970] params(1) in file: lib\support\/0.2.9//primitives.sharp:902:8: note:  
		    def operator%=(num : long)   := (value%=num.value);
		       ^

0 [0x0]: line: 902 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator%=[2971] params(1) in file: lib\support\/0.2.9//primitives.sharp:903:8: note:  
		    def operator%=(num : uint)   := (value%=num.value);
		       ^

0 [0x0]: line: 903 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator%=[2972] params(1) in file: lib\support\/0.2.9//primitives.sharp:904:8: note:  
		    def operator%=(num : int)    := (value%=num.value);
		       ^

0 [0x0]: line: 904 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator%=[2973] params(1) in file: lib\support\/0.2.9//primitives.sharp:905:8: note:  
		    def operator%=(num : ushort) := (value%=num.value);
		       ^

0 [0x0]: line: 905 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator%=[2974] params(1) in file: lib\support\/0.2.9//primitives.sharp:906:8: note:  
		    def operator%=(num : short)  := (value%=num.value);
		       ^

0 [0x0]: line: 906 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator%=[2975] params(1) in file: lib\support\/0.2.9//primitives.sharp:907:8: note:  
		    def operator%=(num : uchar)  := (value%=num.value);
		       ^

0 [0x0]: line: 907 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator%=[2976] params(1) in file: lib\support\/0.2.9//primitives.sharp:908:8: note:  
		    def operator%=(num : char)   := (value%=num.value);
		       ^

0 [0x0]: line: 908 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator%=[2977] params(1) in file: lib\support\/0.2.9//primitives.sharp:909:8: note:  
		    def operator%=(num : byte)   := (value%=num.value);
		       ^

0 [0x0]: line: 909 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator%=[2978] params(1) in file: lib\support\/0.2.9//primitives.sharp:910:8: note:  
		    def operator%=(num : bool)   := (value%=num.value);
		       ^

0 [0x0]: line: 910 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator%=[2979] params(1) in file: lib\support\/0.2.9//primitives.sharp:911:8: note:  
		    def operator%=(num : double)   := (value%=num.value);
		       ^

0 [0x0]: line: 911 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mod ecx, ebx -> ebx   
15 [0xf]:           mov16 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator%=[2980] params(1) in file: lib\support\/0.2.9//primitives.sharp:912:8: note:  
		    def operator%=(num : var)    := (value%=num);
		       ^

0 [0x0]: line: 912 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           mod ecx, ebx -> ebx   
9 [0x9]:           mov16 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#short.operator&=[2981] params(1) in file: lib\support\/0.2.9//primitives.sharp:914:8: note:  
		    def operator&=(num : ulong)  := (value&=num.value);
		       ^

0 [0x0]: line: 914 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#short.operator&=[2982] params(1) in file: lib\support\/0.2.9//primitives.sharp:915:8: note:  
		    def operator&=(num : long)   := (value&=num.value);
		       ^

0 [0x0]: line: 915 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#short.operator&=[2983] params(1) in file: lib\support\/0.2.9//primitives.sharp:916:8: note:  
		    def operator&=(num : uint)   := (value&=num.value);
		       ^

0 [0x0]: line: 916 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#short.operator&=[2984] params(1) in file: lib\support\/0.2.9//primitives.sharp:917:8: note:  
		    def operator&=(num : int)    := (value&=num.value);
		       ^

0 [0x0]: line: 917 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#short.operator&=[2985] params(1) in file: lib\support\/0.2.9//primitives.sharp:918:8: note:  
		    def operator&=(num : ushort) := (value&=num.value);
		       ^

0 [0x0]: line: 918 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#short.operator&=[2986] params(1) in file: lib\support\/0.2.9//primitives.sharp:919:8: note:  
		    def operator&=(num : short)  := (value&=num.value);
		       ^

0 [0x0]: line: 919 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#short.operator&=[2987] params(1) in file: lib\support\/0.2.9//primitives.sharp:920:8: note:  
		    def operator&=(num : uchar)  := (value&=num.value);
		       ^

0 [0x0]: line: 920 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#short.operator&=[2988] params(1) in file: lib\support\/0.2.9//primitives.sharp:921:8: note:  
		    def operator&=(num : char)   := (value&=num.value);
		       ^

0 [0x0]: line: 921 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#short.operator&=[2989] params(1) in file: lib\support\/0.2.9//primitives.sharp:922:8: note:  
		    def operator&=(num : byte)   := (value&=num.value);
		       ^

0 [0x0]: line: 922 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#short.operator&=[2990] params(1) in file: lib\support\/0.2.9//primitives.sharp:923:8: note:  
		    def operator&=(num : bool)   := (value&=num.value);
		       ^

0 [0x0]: line: 923 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#short.operator&=[2991] params(1) in file: lib\support\/0.2.9//primitives.sharp:924:8: note:  
		    def operator&=(num : double)   := (value&=num.value);
		       ^

0 [0x0]: line: 924 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           and ecx, ebx   
15 [0xf]:           rmov adx, cmt   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


overload function: std#short.operator&=[2992] params(1) in file: lib\support\/0.2.9//primitives.sharp:925:8: note:  
		    def operator&=(num : var)    := (value&=num);
		       ^

0 [0x0]: line: 925 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           and ecx, ebx   
9 [0x9]:           rmov adx, cmt   
10 [0xa]:           returnobj   
11 [0xb]:           ret   


overload function: std#short.operator|=[2993] params(1) in file: lib\support\/0.2.9//primitives.sharp:927:8: note:  
		    def operator|=(num : ulong)  := (value|=num.value);
		       ^

0 [0x0]: line: 927 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator|=[2994] params(1) in file: lib\support\/0.2.9//primitives.sharp:928:8: note:  
		    def operator|=(num : long)   := (value|=num.value);
		       ^

0 [0x0]: line: 928 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator|=[2995] params(1) in file: lib\support\/0.2.9//primitives.sharp:929:8: note:  
		    def operator|=(num : uint)   := (value|=num.value);
		       ^

0 [0x0]: line: 929 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator|=[2996] params(1) in file: lib\support\/0.2.9//primitives.sharp:930:8: note:  
		    def operator|=(num : int)    := (value|=num.value);
		       ^

0 [0x0]: line: 930 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator|=[2997] params(1) in file: lib\support\/0.2.9//primitives.sharp:931:8: note:  
		    def operator|=(num : ushort) := (value|=num.value);
		       ^

0 [0x0]: line: 931 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator|=[2998] params(1) in file: lib\support\/0.2.9//primitives.sharp:932:8: note:  
		    def operator|=(num : short)  := (value|=num.value);
		       ^

0 [0x0]: line: 932 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator|=[2999] params(1) in file: lib\support\/0.2.9//primitives.sharp:933:8: note:  
		    def operator|=(num : uchar)  := (value|=num.value);
		       ^

0 [0x0]: line: 933 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator|=[3000] params(1) in file: lib\support\/0.2.9//primitives.sharp:934:8: note:  
		    def operator|=(num : char)   := (value|=num.value);
		       ^

0 [0x0]: line: 934 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator|=[3001] params(1) in file: lib\support\/0.2.9//primitives.sharp:935:8: note:  
		    def operator|=(num : byte)   := (value|=num.value);
		       ^

0 [0x0]: line: 935 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator|=[3002] params(1) in file: lib\support\/0.2.9//primitives.sharp:936:8: note:  
		    def operator|=(num : bool)   := (value|=num.value);
		       ^

0 [0x0]: line: 936 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator|=[3003] params(1) in file: lib\support\/0.2.9//primitives.sharp:937:8: note:  
		    def operator|=(num : double)   := (value|=num.value);
		       ^

0 [0x0]: line: 937 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           or ecx, ebx   
15 [0xf]:           mov16 cmt, cmt   
16 [0x10]:           rmov adx, cmt   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#short.operator|=[3004] params(1) in file: lib\support\/0.2.9//primitives.sharp:938:8: note:  
		    def operator|=(num : var)    := (value|=num);
		       ^

0 [0x0]: line: 938 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           or ecx, ebx   
9 [0x9]:           mov16 cmt, cmt   
10 [0xa]:           rmov adx, cmt   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


constructor: std#short.short[3005] params(0) in file: lib\support\/0.2.9//primitives.sharp:829:6: note:  
		class short base integer<_int16> {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1268 // <std#integer<_int16>.integer>   
2 [0x2]:         ret   


constructor: std#uchar.uchar[3006] params(1) in file: lib\support\/0.2.9//primitives.sharp:941:10: note:  
		    uchar(i : long) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1269 // <std#integer<_uint8>.integer>   
9 [0x9]:         ret   


constructor: std#uchar.uchar[3007] params(1) in file: lib\support\/0.2.9//primitives.sharp:942:10: note:  
		    uchar(i : int) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1269 // <std#integer<_uint8>.integer>   
9 [0x9]:         ret   


constructor: std#uchar.uchar[3008] params(1) in file: lib\support\/0.2.9//primitives.sharp:943:10: note:  
		    uchar(i : short) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1269 // <std#integer<_uint8>.integer>   
9 [0x9]:         ret   


constructor: std#uchar.uchar[3009] params(1) in file: lib\support\/0.2.9//primitives.sharp:944:10: note:  
		    uchar(i : char) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1269 // <std#integer<_uint8>.integer>   
9 [0x9]:         ret   


constructor: std#uchar.uchar[3010] params(1) in file: lib\support\/0.2.9//primitives.sharp:945:10: note:  
		    uchar(i : byte) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1269 // <std#integer<_uint8>.integer>   
9 [0x9]:         ret   


constructor: std#uchar.uchar[3011] params(1) in file: lib\support\/0.2.9//primitives.sharp:946:10: note:  
		    uchar(i : bool) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1269 // <std#integer<_uint8>.integer>   
9 [0x9]:         ret   


constructor: std#uchar.uchar[3012] params(1) in file: lib\support\/0.2.9//primitives.sharp:947:10: note:  
		    uchar(i : ulong) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1269 // <std#integer<_uint8>.integer>   
9 [0x9]:         ret   


constructor: std#uchar.uchar[3013] params(1) in file: lib\support\/0.2.9//primitives.sharp:948:10: note:  
		    uchar(i : uint) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1269 // <std#integer<_uint8>.integer>   
9 [0x9]:         ret   


constructor: std#uchar.uchar[3014] params(1) in file: lib\support\/0.2.9//primitives.sharp:949:10: note:  
		    uchar(i : ushort) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1269 // <std#integer<_uint8>.integer>   
9 [0x9]:         ret   


constructor: std#uchar.uchar[3015] params(1) in file: lib\support\/0.2.9//primitives.sharp:950:10: note:  
		    uchar(i : uchar) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1269 // <std#integer<_uint8>.integer>   
9 [0x9]:         ret   


constructor: std#uchar.uchar[3016] params(1) in file: lib\support\/0.2.9//primitives.sharp:951:10: note:  
		    uchar(i : double) -> base(i.value) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1269 // <std#integer<_uint8>.integer>   
9 [0x9]:         ret   


constructor: std#uchar.uchar[3017] params(1) in file: lib\support\/0.2.9//primitives.sharp:952:10: note:  
		    uchar(i : var) -> base(i) {}
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ipushl #1   
2 [0x2]:         call @1269 // <std#integer<_uint8>.integer>   
3 [0x3]:         ret   


overload function: std#uchar.operator![3018] params(0) in file: lib\support\/0.2.9//primitives.sharp:954:8: note:  
		    def operator!() := (!value);
		       ^

0 [0x0]: line: 954 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           not ebx, ebx   
7 [0x7]:           return_val ebx   
8 [0x8]:           ret   


overload function: std#uchar.operator++[3019] params(0) in file: lib\support\/0.2.9//primitives.sharp:955:8: note:  
		    def operator++() := (++value);
		       ^

0 [0x0]: line: 955 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           inc ebx   
7 [0x7]:           movu8 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#uchar.operator++[3020] params(1) in file: lib\support\/0.2.9//primitives.sharp:956:8: note:  
		    def operator++(num : var) := (value++);
		       ^

0 [0x0]: line: 956 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           inc ebx   
8 [0x8]:           movu8 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#uchar.operator--[3021] params(0) in file: lib\support\/0.2.9//primitives.sharp:957:8: note:  
		    def operator--() := (--value);
		       ^

0 [0x0]: line: 957 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           dec ebx   
7 [0x7]:           movu8 ebx, ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


overload function: std#uchar.operator--[3022] params(1) in file: lib\support\/0.2.9//primitives.sharp:958:8: note:  
		    def operator--(num : var) := (value--);
		       ^

0 [0x0]: line: 958 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           dec ebx   
8 [0x8]:           movu8 ebx, ebx   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]:           movr ebx, egx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


overload function: std#uchar.operator+=[3023] params(1) in file: lib\support\/0.2.9//primitives.sharp:960:8: note:  
		    def operator+=(num : ulong)  := (value+=num.value);
		       ^

0 [0x0]: line: 960 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator+=[3024] params(1) in file: lib\support\/0.2.9//primitives.sharp:961:8: note:  
		    def operator+=(num : long)   := (value+=num.value);
		       ^

0 [0x0]: line: 961 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator+=[3025] params(1) in file: lib\support\/0.2.9//primitives.sharp:962:8: note:  
		    def operator+=(num : uint)   := (value+=num.value);
		       ^

0 [0x0]: line: 962 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator+=[3026] params(1) in file: lib\support\/0.2.9//primitives.sharp:963:8: note:  
		    def operator+=(num : int)    := (value+=num.value);
		       ^

0 [0x0]: line: 963 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator+=[3027] params(1) in file: lib\support\/0.2.9//primitives.sharp:964:8: note:  
		    def operator+=(num : ushort) := (value+=num.value);
		       ^

0 [0x0]: line: 964 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator+=[3028] params(1) in file: lib\support\/0.2.9//primitives.sharp:965:8: note:  
		    def operator+=(num : short)  := (value+=num.value);
		       ^

0 [0x0]: line: 965 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator+=[3029] params(1) in file: lib\support\/0.2.9//primitives.sharp:966:8: note:  
		    def operator+=(num : uchar)  := (value+=num.value);
		       ^

0 [0x0]: line: 966 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator+=[3030] params(1) in file: lib\support\/0.2.9//primitives.sharp:967:8: note:  
		    def operator+=(num : char)   := (value+=num.value);
		       ^

0 [0x0]: line: 967 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator+=[3031] params(1) in file: lib\support\/0.2.9//primitives.sharp:968:8: note:  
		    def operator+=(num : byte)   := (value+=num.value);
		       ^

0 [0x0]: line: 968 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator+=[3032] params(1) in file: lib\support\/0.2.9//primitives.sharp:969:8: note:  
		    def operator+=(num : bool)   := (value+=num.value);
		       ^

0 [0x0]: line: 969 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator+=[3033] params(1) in file: lib\support\/0.2.9//primitives.sharp:970:8: note:  
		    def operator+=(num : double)   := (value+=num.value);
		       ^

0 [0x0]: line: 970 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator+=[3034] params(1) in file: lib\support\/0.2.9//primitives.sharp:971:8: note:  
		    def operator+=(num : var)    := (value+=num);
		       ^

0 [0x0]: line: 971 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           add ecx, ebx -> ebx   
9 [0x9]:           movu8 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#uchar.operator-=[3035] params(1) in file: lib\support\/0.2.9//primitives.sharp:973:8: note:  
		    def operator-=(num : ulong)  := (value-=num.value);
		       ^

0 [0x0]: line: 973 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator-=[3036] params(1) in file: lib\support\/0.2.9//primitives.sharp:974:8: note:  
		    def operator-=(num : long)   := (value-=num.value);
		       ^

0 [0x0]: line: 974 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator-=[3037] params(1) in file: lib\support\/0.2.9//primitives.sharp:975:8: note:  
		    def operator-=(num : uint)   := (value-=num.value);
		       ^

0 [0x0]: line: 975 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator-=[3038] params(1) in file: lib\support\/0.2.9//primitives.sharp:976:8: note:  
		    def operator-=(num : int)    := (value-=num.value);
		       ^

0 [0x0]: line: 976 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator-=[3039] params(1) in file: lib\support\/0.2.9//primitives.sharp:977:8: note:  
		    def operator-=(num : ushort) := (value-=num.value);
		       ^

0 [0x0]: line: 977 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator-=[3040] params(1) in file: lib\support\/0.2.9//primitives.sharp:978:8: note:  
		    def operator-=(num : short)  := (value-=num.value);
		       ^

0 [0x0]: line: 978 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator-=[3041] params(1) in file: lib\support\/0.2.9//primitives.sharp:979:8: note:  
		    def operator-=(num : uchar)  := (value-=num.value);
		       ^

0 [0x0]: line: 979 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator-=[3042] params(1) in file: lib\support\/0.2.9//primitives.sharp:980:8: note:  
		    def operator-=(num : char)   := (value-=num.value);
		       ^

0 [0x0]: line: 980 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator-=[3043] params(1) in file: lib\support\/0.2.9//primitives.sharp:981:8: note:  
		    def operator-=(num : byte)   := (value-=num.value);
		       ^

0 [0x0]: line: 981 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator-=[3044] params(1) in file: lib\support\/0.2.9//primitives.sharp:982:8: note:  
		    def operator-=(num : bool)   := (value-=num.value);
		       ^

0 [0x0]: line: 982 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator-=[3045] params(1) in file: lib\support\/0.2.9//primitives.sharp:983:8: note:  
		    def operator-=(num : double)   := (value-=num.value);
		       ^

0 [0x0]: line: 983 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator-=[3046] params(1) in file: lib\support\/0.2.9//primitives.sharp:984:8: note:  
		    def operator-=(num : var)    := (value-=num);
		       ^

0 [0x0]: line: 984 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           sub ecx, ebx -> ebx   
9 [0x9]:           movu8 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#uchar.operator*=[3047] params(1) in file: lib\support\/0.2.9//primitives.sharp:986:8: note:  
		    def operator*=(num : ulong)  := (value*=num.value);
		       ^

0 [0x0]: line: 986 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator*=[3048] params(1) in file: lib\support\/0.2.9//primitives.sharp:987:8: note:  
		    def operator*=(num : long)   := (value*=num.value);
		       ^

0 [0x0]: line: 987 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator*=[3049] params(1) in file: lib\support\/0.2.9//primitives.sharp:988:8: note:  
		    def operator*=(num : uint)   := (value*=num.value);
		       ^

0 [0x0]: line: 988 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator*=[3050] params(1) in file: lib\support\/0.2.9//primitives.sharp:989:8: note:  
		    def operator*=(num : int)    := (value*=num.value);
		       ^

0 [0x0]: line: 989 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator*=[3051] params(1) in file: lib\support\/0.2.9//primitives.sharp:990:8: note:  
		    def operator*=(num : ushort) := (value*=num.value);
		       ^

0 [0x0]: line: 990 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator*=[3052] params(1) in file: lib\support\/0.2.9//primitives.sharp:991:8: note:  
		    def operator*=(num : short)  := (value*=num.value);
		       ^

0 [0x0]: line: 991 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator*=[3053] params(1) in file: lib\support\/0.2.9//primitives.sharp:992:8: note:  
		    def operator*=(num : uchar)  := (value*=num.value);
		       ^

0 [0x0]: line: 992 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator*=[3054] params(1) in file: lib\support\/0.2.9//primitives.sharp:993:8: note:  
		    def operator*=(num : char)   := (value*=num.value);
		       ^

0 [0x0]: line: 993 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator*=[3055] params(1) in file: lib\support\/0.2.9//primitives.sharp:994:8: note:  
		    def operator*=(num : byte)   := (value*=num.value);
		       ^

0 [0x0]: line: 994 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator*=[3056] params(1) in file: lib\support\/0.2.9//primitives.sharp:995:8: note:  
		    def operator*=(num : bool)   := (value*=num.value);
		       ^

0 [0x0]: line: 995 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator*=[3057] params(1) in file: lib\support\/0.2.9//primitives.sharp:996:8: note:  
		    def operator*=(num : double)   := (value*=num.value);
		       ^

0 [0x0]: line: 996 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           mul ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator*=[3058] params(1) in file: lib\support\/0.2.9//primitives.sharp:997:8: note:  
		    def operator*=(num : var)    := (value*=num);
		       ^

0 [0x0]: line: 997 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ecx, adx   
7 [0x7]:           loadval ebx   
8 [0x8]:           mul ecx, ebx -> ebx   
9 [0x9]:           movu8 ebx, ebx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]:           returnobj   
12 [0xc]:           ret   


overload function: std#uchar.operator/=[3059] params(1) in file: lib\support\/0.2.9//primitives.sharp:999:8: note:  
		    def operator/=(num : ulong)  := (value/=num.value);
		       ^

0 [0x0]: line: 999 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ecx, adx   
13 [0xd]:           loadval ebx   
14 [0xe]:           div ecx, ebx -> ebx   
15 [0xf]:           movu8 ebx, ebx   
16 [0x10]:           rmov adx, ebx   
17 [0x11]:           returnobj   
18 [0x12]:           ret   


overload function: std#uchar.operator/=[3060] params(1) in file: lib\support\/0.2.9//primitives.sharp:1000:8: note:  
		    def operator/=(num : long)   := (value/=num.value);
		       ^

0 [0x0]: line: 1000 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator/=[3061] params(1) in file: lib\support\/0.2.9//primitives.sharp:1001:8: note:  
		    def operator/=(num : uint)   := (value/=num.value);
		       ^

0 [0x0]: line: 1001 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator/=[3062] params(1) in file: lib\support\/0.2.9//primitives.sharp:1002:8: note:  
		    def operator/=(num : int)    := (value/=num.value);
		       ^

0 [0x0]: line: 1002 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator/=[3063] params(1) in file: lib\support\/0.2.9//primitives.sharp:1003:8: note:  
		    def operator/=(num : ushort) := (value/=num.value);
		       ^

0 [0x0]: line: 1003 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator/=[3064] params(1) in file: lib\support\/0.2.9//primitives.sharp:1004:8: note:  
		    def operator/=(num : short)  := (value/=num.value);
		       ^

0 [0x0]: line: 1004 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator/=[3065] params(1) in file: lib\support\/0.2.9//primitives.sharp:1005:8: note:  
		    def operator/=(num : uchar)  := (value/=num.value);
		       ^

0 [0x0]: line: 1005 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator/=[3066] params(1) in file: lib\support\/0.2.9//primitives.sharp:1006:8: note:  
		    def operator/=(num : char)   := (value/=num.value);
		       ^

0 [0x0]: line: 1006 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator/=[3067] params(1) in file: lib\support\/0.2.9//primitives.sharp:1007:8: note:  
		    def operator/=(num : byte)   := (value/=num.value);
		       ^

0 [0x0]: line: 1007 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator/=[3068] params(1) in file: lib\support\/0.2.9//primitives.sharp:1008:8: note:  
		    def operator/=(num : bool)   := (value/=num.value);
		       ^

0 [0x0]: line: 1008 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator/=[3069] params(1) in file: lib\support\/0.2.9//primitives.sharp:1009:8: note:  
		    def operator/=(num : double)   := (value/=num.value);
		       ^

0 [0x0]: line: 1009 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator/=[3070] params(1) in file: lib\support\/0.2.9//primitives.sharp:1010:8: note:  
		    def operator/=(num : var)    := (value/=num);
		       ^

0 [0x0]: line: 1010 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            div ecx, ebx -> ebx   
9 [0x9]:            movu8 ebx, ebx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            returnobj   
12 [0xc]:            ret   


overload function: std#uchar.operator%=[3071] params(1) in file: lib\support\/0.2.9//primitives.sharp:1012:8: note:  
		    def operator%=(num : ulong)  := (value%=num.value);
		       ^

0 [0x0]: line: 1012 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator%=[3072] params(1) in file: lib\support\/0.2.9//primitives.sharp:1013:8: note:  
		    def operator%=(num : long)   := (value%=num.value);
		       ^

0 [0x0]: line: 1013 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator%=[3073] params(1) in file: lib\support\/0.2.9//primitives.sharp:1014:8: note:  
		    def operator%=(num : uint)   := (value%=num.value);
		       ^

0 [0x0]: line: 1014 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator%=[3074] params(1) in file: lib\support\/0.2.9//primitives.sharp:1015:8: note:  
		    def operator%=(num : int)    := (value%=num.value);
		       ^

0 [0x0]: line: 1015 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator%=[3075] params(1) in file: lib\support\/0.2.9//primitives.sharp:1016:8: note:  
		    def operator%=(num : ushort) := (value%=num.value);
		       ^

0 [0x0]: line: 1016 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator%=[3076] params(1) in file: lib\support\/0.2.9//primitives.sharp:1017:8: note:  
		    def operator%=(num : short)  := (value%=num.value);
		       ^

0 [0x0]: line: 1017 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator%=[3077] params(1) in file: lib\support\/0.2.9//primitives.sharp:1018:8: note:  
		    def operator%=(num : uchar)  := (value%=num.value);
		       ^

0 [0x0]: line: 1018 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator%=[3078] params(1) in file: lib\support\/0.2.9//primitives.sharp:1019:8: note:  
		    def operator%=(num : char)   := (value%=num.value);
		       ^

0 [0x0]: line: 1019 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator%=[3079] params(1) in file: lib\support\/0.2.9//primitives.sharp:1020:8: note:  
		    def operator%=(num : byte)   := (value%=num.value);
		       ^

0 [0x0]: line: 1020 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator%=[3080] params(1) in file: lib\support\/0.2.9//primitives.sharp:1021:8: note:  
		    def operator%=(num : bool)   := (value%=num.value);
		       ^

0 [0x0]: line: 1021 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator%=[3081] params(1) in file: lib\support\/0.2.9//primitives.sharp:1022:8: note:  
		    def operator%=(num : double)   := (value%=num.value);
		       ^

0 [0x0]: line: 1022 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator%=[3082] params(1) in file: lib\support\/0.2.9//primitives.sharp:1023:8: note:  
		    def operator%=(num : var)    := (value%=num);
		       ^

0 [0x0]: line: 1023 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            mod ecx, ebx -> ebx   
9 [0x9]:            movu8 ebx, ebx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            returnobj   
12 [0xc]:            ret   


overload function: std#uchar.operator&=[3083] params(1) in file: lib\support\/0.2.9//primitives.sharp:1025:8: note:  
		    def operator&=(num : ulong)  := (value&=num.value);
		       ^

0 [0x0]: line: 1025 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#uchar.operator&=[3084] params(1) in file: lib\support\/0.2.9//primitives.sharp:1026:8: note:  
		    def operator&=(num : long)   := (value&=num.value);
		       ^

0 [0x0]: line: 1026 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#uchar.operator&=[3085] params(1) in file: lib\support\/0.2.9//primitives.sharp:1027:8: note:  
		    def operator&=(num : uint)   := (value&=num.value);
		       ^

0 [0x0]: line: 1027 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#uchar.operator&=[3086] params(1) in file: lib\support\/0.2.9//primitives.sharp:1028:8: note:  
		    def operator&=(num : int)    := (value&=num.value);
		       ^

0 [0x0]: line: 1028 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#uchar.operator&=[3087] params(1) in file: lib\support\/0.2.9//primitives.sharp:1029:8: note:  
		    def operator&=(num : ushort) := (value&=num.value);
		       ^

0 [0x0]: line: 1029 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#uchar.operator&=[3088] params(1) in file: lib\support\/0.2.9//primitives.sharp:1030:8: note:  
		    def operator&=(num : short)  := (value&=num.value);
		       ^

0 [0x0]: line: 1030 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#uchar.operator&=[3089] params(1) in file: lib\support\/0.2.9//primitives.sharp:1031:8: note:  
		    def operator&=(num : uchar)  := (value&=num.value);
		       ^

0 [0x0]: line: 1031 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#uchar.operator&=[3090] params(1) in file: lib\support\/0.2.9//primitives.sharp:1032:8: note:  
		    def operator&=(num : char)   := (value&=num.value);
		       ^

0 [0x0]: line: 1032 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#uchar.operator&=[3091] params(1) in file: lib\support\/0.2.9//primitives.sharp:1033:8: note:  
		    def operator&=(num : byte)   := (value&=num.value);
		       ^

0 [0x0]: line: 1033 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#uchar.operator&=[3092] params(1) in file: lib\support\/0.2.9//primitives.sharp:1034:8: note:  
		    def operator&=(num : bool)   := (value&=num.value);
		       ^

0 [0x0]: line: 1034 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#uchar.operator&=[3093] params(1) in file: lib\support\/0.2.9//primitives.sharp:1035:8: note:  
		    def operator&=(num : double)   := (value&=num.value);
		       ^

0 [0x0]: line: 1035 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#uchar.operator&=[3094] params(1) in file: lib\support\/0.2.9//primitives.sharp:1036:8: note:  
		    def operator&=(num : var)    := (value&=num);
		       ^

0 [0x0]: line: 1036 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            and ecx, ebx   
9 [0x9]:            rmov adx, cmt   
10 [0xa]:            returnobj   
11 [0xb]:            ret   


overload function: std#uchar.operator|=[3095] params(1) in file: lib\support\/0.2.9//primitives.sharp:1038:8: note:  
		    def operator|=(num : ulong)  := (value|=num.value);
		       ^

0 [0x0]: line: 1038 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator|=[3096] params(1) in file: lib\support\/0.2.9//primitives.sharp:1039:8: note:  
		    def operator|=(num : long)   := (value|=num.value);
		       ^

0 [0x0]: line: 1039 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator|=[3097] params(1) in file: lib\support\/0.2.9//primitives.sharp:1040:8: note:  
		    def operator|=(num : uint)   := (value|=num.value);
		       ^

0 [0x0]: line: 1040 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator|=[3098] params(1) in file: lib\support\/0.2.9//primitives.sharp:1041:8: note:  
		    def operator|=(num : int)    := (value|=num.value);
		       ^

0 [0x0]: line: 1041 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator|=[3099] params(1) in file: lib\support\/0.2.9//primitives.sharp:1042:8: note:  
		    def operator|=(num : ushort) := (value|=num.value);
		       ^

0 [0x0]: line: 1042 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator|=[3100] params(1) in file: lib\support\/0.2.9//primitives.sharp:1043:8: note:  
		    def operator|=(num : short)  := (value|=num.value);
		       ^

0 [0x0]: line: 1043 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator|=[3101] params(1) in file: lib\support\/0.2.9//primitives.sharp:1044:8: note:  
		    def operator|=(num : uchar)  := (value|=num.value);
		       ^

0 [0x0]: line: 1044 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator|=[3102] params(1) in file: lib\support\/0.2.9//primitives.sharp:1045:8: note:  
		    def operator|=(num : char)   := (value|=num.value);
		       ^

0 [0x0]: line: 1045 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator|=[3103] params(1) in file: lib\support\/0.2.9//primitives.sharp:1046:8: note:  
		    def operator|=(num : byte)   := (value|=num.value);
		       ^

0 [0x0]: line: 1046 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator|=[3104] params(1) in file: lib\support\/0.2.9//primitives.sharp:1047:8: note:  
		    def operator|=(num : bool)   := (value|=num.value);
		       ^

0 [0x0]: line: 1047 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator|=[3105] params(1) in file: lib\support\/0.2.9//primitives.sharp:1048:8: note:  
		    def operator|=(num : double)   := (value|=num.value);
		       ^

0 [0x0]: line: 1048 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#uchar.operator|=[3106] params(1) in file: lib\support\/0.2.9//primitives.sharp:1049:8: note:  
		    def operator|=(num : var)    := (value|=num);
		       ^

0 [0x0]: line: 1049 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            or ecx, ebx   
9 [0x9]:            movu8 cmt, cmt   
10 [0xa]:            rmov adx, cmt   
11 [0xb]:            returnobj   
12 [0xc]:            ret   


constructor: std#uchar.uchar[3107] params(0) in file: lib\support\/0.2.9//primitives.sharp:940:6: note:  
		class uchar base integer<_uint8> {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1477 // <std#integer<_uint8>.integer>   
2 [0x2]:         ret   


constructor: std#char.char[3108] params(1) in file: lib\support\/0.2.9//primitives.sharp:1052:9: note:  
		    char(i : long) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1478 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#char.char[3109] params(1) in file: lib\support\/0.2.9//primitives.sharp:1053:9: note:  
		    char(i : int) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1478 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#char.char[3110] params(1) in file: lib\support\/0.2.9//primitives.sharp:1054:9: note:  
		    char(i : short) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1478 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#char.char[3111] params(1) in file: lib\support\/0.2.9//primitives.sharp:1055:9: note:  
		    char(i : char) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1478 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#char.char[3112] params(1) in file: lib\support\/0.2.9//primitives.sharp:1056:9: note:  
		    char(i : byte) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1478 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#char.char[3113] params(1) in file: lib\support\/0.2.9//primitives.sharp:1057:9: note:  
		    char(i : bool) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1478 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#char.char[3114] params(1) in file: lib\support\/0.2.9//primitives.sharp:1058:9: note:  
		    char(i : ulong) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1478 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#char.char[3115] params(1) in file: lib\support\/0.2.9//primitives.sharp:1059:9: note:  
		    char(i : uint) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1478 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#char.char[3116] params(1) in file: lib\support\/0.2.9//primitives.sharp:1060:9: note:  
		    char(i : ushort) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1478 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#char.char[3117] params(1) in file: lib\support\/0.2.9//primitives.sharp:1061:9: note:  
		    char(i : uchar) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1478 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#char.char[3118] params(1) in file: lib\support\/0.2.9//primitives.sharp:1062:9: note:  
		    char(i : double) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1478 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#char.char[3119] params(1) in file: lib\support\/0.2.9//primitives.sharp:1063:9: note:  
		    char(i : var) -> base(i) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         ipushl #1   
2 [0x2]:         call @1478 // <std#integer<_int8>.integer>   
3 [0x3]:         ret   


overload function: std#char.operator![3120] params(0) in file: lib\support\/0.2.9//primitives.sharp:1065:8: note:  
		    def operator!() := (!value);
		       ^

0 [0x0]: line: 1065 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            not ebx, ebx   
7 [0x7]:            return_val ebx   
8 [0x8]:            ret   


overload function: std#char.operator++[3121] params(0) in file: lib\support\/0.2.9//primitives.sharp:1066:8: note:  
		    def operator++() := (++value);
		       ^

0 [0x0]: line: 1066 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            inc ebx   
7 [0x7]:            mov8 ebx, ebx   
8 [0x8]:            movi #0, adx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            return_val ebx   
12 [0xc]:            ret   


overload function: std#char.operator++[3122] params(1) in file: lib\support\/0.2.9//primitives.sharp:1067:8: note:  
		    def operator++(num : var) := (value++);
		       ^

0 [0x0]: line: 1067 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            movr egx, ebx   
7 [0x7]:            inc ebx   
8 [0x8]:            mov8 ebx, ebx   
9 [0x9]:            movi #0, adx   
11 [0xb]:            rmov adx, ebx   
12 [0xc]:            movr ebx, egx   
13 [0xd]:            return_val ebx   
14 [0xe]:            ret   


overload function: std#char.operator--[3123] params(0) in file: lib\support\/0.2.9//primitives.sharp:1068:8: note:  
		    def operator--() := (--value);
		       ^

0 [0x0]: line: 1068 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            dec ebx   
7 [0x7]:            mov8 ebx, ebx   
8 [0x8]:            movi #0, adx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            return_val ebx   
12 [0xc]:            ret   


overload function: std#char.operator--[3124] params(1) in file: lib\support\/0.2.9//primitives.sharp:1069:8: note:  
		    def operator--(num : var) := (value--);
		       ^

0 [0x0]: line: 1069 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            movr egx, ebx   
7 [0x7]:            dec ebx   
8 [0x8]:            mov8 ebx, ebx   
9 [0x9]:            movi #0, adx   
11 [0xb]:            rmov adx, ebx   
12 [0xc]:            movr ebx, egx   
13 [0xd]:            return_val ebx   
14 [0xe]:            ret   


overload function: std#char.operator+=[3125] params(1) in file: lib\support\/0.2.9//primitives.sharp:1071:8: note:  
		    def operator+=(num : ulong)  := (value+=num.value);
		       ^

0 [0x0]: line: 1071 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator+=[3126] params(1) in file: lib\support\/0.2.9//primitives.sharp:1072:8: note:  
		    def operator+=(num : long)   := (value+=num.value);
		       ^

0 [0x0]: line: 1072 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator+=[3127] params(1) in file: lib\support\/0.2.9//primitives.sharp:1073:8: note:  
		    def operator+=(num : uint)   := (value+=num.value);
		       ^

0 [0x0]: line: 1073 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator+=[3128] params(1) in file: lib\support\/0.2.9//primitives.sharp:1074:8: note:  
		    def operator+=(num : int)    := (value+=num.value);
		       ^

0 [0x0]: line: 1074 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator+=[3129] params(1) in file: lib\support\/0.2.9//primitives.sharp:1075:8: note:  
		    def operator+=(num : ushort) := (value+=num.value);
		       ^

0 [0x0]: line: 1075 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator+=[3130] params(1) in file: lib\support\/0.2.9//primitives.sharp:1076:8: note:  
		    def operator+=(num : short)  := (value+=num.value);
		       ^

0 [0x0]: line: 1076 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator+=[3131] params(1) in file: lib\support\/0.2.9//primitives.sharp:1077:8: note:  
		    def operator+=(num : uchar)  := (value+=num.value);
		       ^

0 [0x0]: line: 1077 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator+=[3132] params(1) in file: lib\support\/0.2.9//primitives.sharp:1078:8: note:  
		    def operator+=(num : char)   := (value+=num.value);
		       ^

0 [0x0]: line: 1078 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator+=[3133] params(1) in file: lib\support\/0.2.9//primitives.sharp:1079:8: note:  
		    def operator+=(num : byte)   := (value+=num.value);
		       ^

0 [0x0]: line: 1079 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator+=[3134] params(1) in file: lib\support\/0.2.9//primitives.sharp:1080:8: note:  
		    def operator+=(num : bool)   := (value+=num.value);
		       ^

0 [0x0]: line: 1080 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator+=[3135] params(1) in file: lib\support\/0.2.9//primitives.sharp:1081:8: note:  
		    def operator+=(num : double)   := (value+=num.value);
		       ^

0 [0x0]: line: 1081 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator+=[3136] params(1) in file: lib\support\/0.2.9//primitives.sharp:1082:8: note:  
		    def operator+=(num : var)    := (value+=num);
		       ^

0 [0x0]: line: 1082 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            add ecx, ebx -> ebx   
9 [0x9]:            mov8 ebx, ebx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            returnobj   
12 [0xc]:            ret   


overload function: std#char.operator-=[3137] params(1) in file: lib\support\/0.2.9//primitives.sharp:1084:8: note:  
		    def operator-=(num : ulong)  := (value-=num.value);
		       ^

0 [0x0]: line: 1084 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator-=[3138] params(1) in file: lib\support\/0.2.9//primitives.sharp:1085:8: note:  
		    def operator-=(num : long)   := (value-=num.value);
		       ^

0 [0x0]: line: 1085 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator-=[3139] params(1) in file: lib\support\/0.2.9//primitives.sharp:1086:8: note:  
		    def operator-=(num : uint)   := (value-=num.value);
		       ^

0 [0x0]: line: 1086 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator-=[3140] params(1) in file: lib\support\/0.2.9//primitives.sharp:1087:8: note:  
		    def operator-=(num : int)    := (value-=num.value);
		       ^

0 [0x0]: line: 1087 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator-=[3141] params(1) in file: lib\support\/0.2.9//primitives.sharp:1088:8: note:  
		    def operator-=(num : ushort) := (value-=num.value);
		       ^

0 [0x0]: line: 1088 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator-=[3142] params(1) in file: lib\support\/0.2.9//primitives.sharp:1089:8: note:  
		    def operator-=(num : short)  := (value-=num.value);
		       ^

0 [0x0]: line: 1089 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator-=[3143] params(1) in file: lib\support\/0.2.9//primitives.sharp:1090:8: note:  
		    def operator-=(num : uchar)  := (value-=num.value);
		       ^

0 [0x0]: line: 1090 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator-=[3144] params(1) in file: lib\support\/0.2.9//primitives.sharp:1091:8: note:  
		    def operator-=(num : char)   := (value-=num.value);
		       ^

0 [0x0]: line: 1091 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator-=[3145] params(1) in file: lib\support\/0.2.9//primitives.sharp:1092:8: note:  
		    def operator-=(num : byte)   := (value-=num.value);
		       ^

0 [0x0]: line: 1092 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator-=[3146] params(1) in file: lib\support\/0.2.9//primitives.sharp:1093:8: note:  
		    def operator-=(num : bool)   := (value-=num.value);
		       ^

0 [0x0]: line: 1093 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator-=[3147] params(1) in file: lib\support\/0.2.9//primitives.sharp:1094:8: note:  
		    def operator-=(num : double)   := (value-=num.value);
		       ^

0 [0x0]: line: 1094 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator-=[3148] params(1) in file: lib\support\/0.2.9//primitives.sharp:1095:8: note:  
		    def operator-=(num : var)    := (value-=num);
		       ^

0 [0x0]: line: 1095 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            sub ecx, ebx -> ebx   
9 [0x9]:            mov8 ebx, ebx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            returnobj   
12 [0xc]:            ret   


overload function: std#char.operator*=[3149] params(1) in file: lib\support\/0.2.9//primitives.sharp:1097:8: note:  
		    def operator*=(num : ulong)  := (value*=num.value);
		       ^

0 [0x0]: line: 1097 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator*=[3150] params(1) in file: lib\support\/0.2.9//primitives.sharp:1098:8: note:  
		    def operator*=(num : long)   := (value*=num.value);
		       ^

0 [0x0]: line: 1098 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator*=[3151] params(1) in file: lib\support\/0.2.9//primitives.sharp:1099:8: note:  
		    def operator*=(num : uint)   := (value*=num.value);
		       ^

0 [0x0]: line: 1099 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator*=[3152] params(1) in file: lib\support\/0.2.9//primitives.sharp:1100:8: note:  
		    def operator*=(num : int)    := (value*=num.value);
		       ^

0 [0x0]: line: 1100 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator*=[3153] params(1) in file: lib\support\/0.2.9//primitives.sharp:1101:8: note:  
		    def operator*=(num : ushort) := (value*=num.value);
		       ^

0 [0x0]: line: 1101 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator*=[3154] params(1) in file: lib\support\/0.2.9//primitives.sharp:1102:8: note:  
		    def operator*=(num : short)  := (value*=num.value);
		       ^

0 [0x0]: line: 1102 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator*=[3155] params(1) in file: lib\support\/0.2.9//primitives.sharp:1103:8: note:  
		    def operator*=(num : uchar)  := (value*=num.value);
		       ^

0 [0x0]: line: 1103 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator*=[3156] params(1) in file: lib\support\/0.2.9//primitives.sharp:1104:8: note:  
		    def operator*=(num : char)   := (value*=num.value);
		       ^

0 [0x0]: line: 1104 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator*=[3157] params(1) in file: lib\support\/0.2.9//primitives.sharp:1105:8: note:  
		    def operator*=(num : byte)   := (value*=num.value);
		       ^

0 [0x0]: line: 1105 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator*=[3158] params(1) in file: lib\support\/0.2.9//primitives.sharp:1106:8: note:  
		    def operator*=(num : bool)   := (value*=num.value);
		       ^

0 [0x0]: line: 1106 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator*=[3159] params(1) in file: lib\support\/0.2.9//primitives.sharp:1107:8: note:  
		    def operator*=(num : double)   := (value*=num.value);
		       ^

0 [0x0]: line: 1107 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator*=[3160] params(1) in file: lib\support\/0.2.9//primitives.sharp:1108:8: note:  
		    def operator*=(num : var)    := (value*=num);
		       ^

0 [0x0]: line: 1108 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            mul ecx, ebx -> ebx   
9 [0x9]:            mov8 ebx, ebx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            returnobj   
12 [0xc]:            ret   


overload function: std#char.operator/=[3161] params(1) in file: lib\support\/0.2.9//primitives.sharp:1110:8: note:  
		    def operator/=(num : ulong)  := (value/=num.value);
		       ^

0 [0x0]: line: 1110 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator/=[3162] params(1) in file: lib\support\/0.2.9//primitives.sharp:1111:8: note:  
		    def operator/=(num : long)   := (value/=num.value);
		       ^

0 [0x0]: line: 1111 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator/=[3163] params(1) in file: lib\support\/0.2.9//primitives.sharp:1112:8: note:  
		    def operator/=(num : uint)   := (value/=num.value);
		       ^

0 [0x0]: line: 1112 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator/=[3164] params(1) in file: lib\support\/0.2.9//primitives.sharp:1113:8: note:  
		    def operator/=(num : int)    := (value/=num.value);
		       ^

0 [0x0]: line: 1113 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator/=[3165] params(1) in file: lib\support\/0.2.9//primitives.sharp:1114:8: note:  
		    def operator/=(num : ushort) := (value/=num.value);
		       ^

0 [0x0]: line: 1114 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator/=[3166] params(1) in file: lib\support\/0.2.9//primitives.sharp:1115:8: note:  
		    def operator/=(num : short)  := (value/=num.value);
		       ^

0 [0x0]: line: 1115 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator/=[3167] params(1) in file: lib\support\/0.2.9//primitives.sharp:1116:8: note:  
		    def operator/=(num : uchar)  := (value/=num.value);
		       ^

0 [0x0]: line: 1116 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator/=[3168] params(1) in file: lib\support\/0.2.9//primitives.sharp:1117:8: note:  
		    def operator/=(num : char)   := (value/=num.value);
		       ^

0 [0x0]: line: 1117 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator/=[3169] params(1) in file: lib\support\/0.2.9//primitives.sharp:1118:8: note:  
		    def operator/=(num : byte)   := (value/=num.value);
		       ^

0 [0x0]: line: 1118 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator/=[3170] params(1) in file: lib\support\/0.2.9//primitives.sharp:1119:8: note:  
		    def operator/=(num : bool)   := (value/=num.value);
		       ^

0 [0x0]: line: 1119 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator/=[3171] params(1) in file: lib\support\/0.2.9//primitives.sharp:1120:8: note:  
		    def operator/=(num : double)   := (value/=num.value);
		       ^

0 [0x0]: line: 1120 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator/=[3172] params(1) in file: lib\support\/0.2.9//primitives.sharp:1121:8: note:  
		    def operator/=(num : var)    := (value/=num);
		       ^

0 [0x0]: line: 1121 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            div ecx, ebx -> ebx   
9 [0x9]:            mov8 ebx, ebx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            returnobj   
12 [0xc]:            ret   


overload function: std#char.operator%=[3173] params(1) in file: lib\support\/0.2.9//primitives.sharp:1123:8: note:  
		    def operator%=(num : ulong)  := (value%=num.value);
		       ^

0 [0x0]: line: 1123 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator%=[3174] params(1) in file: lib\support\/0.2.9//primitives.sharp:1124:8: note:  
		    def operator%=(num : long)   := (value%=num.value);
		       ^

0 [0x0]: line: 1124 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator%=[3175] params(1) in file: lib\support\/0.2.9//primitives.sharp:1125:8: note:  
		    def operator%=(num : uint)   := (value%=num.value);
		       ^

0 [0x0]: line: 1125 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator%=[3176] params(1) in file: lib\support\/0.2.9//primitives.sharp:1126:8: note:  
		    def operator%=(num : int)    := (value%=num.value);
		       ^

0 [0x0]: line: 1126 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator%=[3177] params(1) in file: lib\support\/0.2.9//primitives.sharp:1127:8: note:  
		    def operator%=(num : ushort) := (value%=num.value);
		       ^

0 [0x0]: line: 1127 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator%=[3178] params(1) in file: lib\support\/0.2.9//primitives.sharp:1128:8: note:  
		    def operator%=(num : short)  := (value%=num.value);
		       ^

0 [0x0]: line: 1128 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator%=[3179] params(1) in file: lib\support\/0.2.9//primitives.sharp:1129:8: note:  
		    def operator%=(num : uchar)  := (value%=num.value);
		       ^

0 [0x0]: line: 1129 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator%=[3180] params(1) in file: lib\support\/0.2.9//primitives.sharp:1130:8: note:  
		    def operator%=(num : char)   := (value%=num.value);
		       ^

0 [0x0]: line: 1130 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator%=[3181] params(1) in file: lib\support\/0.2.9//primitives.sharp:1131:8: note:  
		    def operator%=(num : byte)   := (value%=num.value);
		       ^

0 [0x0]: line: 1131 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator%=[3182] params(1) in file: lib\support\/0.2.9//primitives.sharp:1132:8: note:  
		    def operator%=(num : bool)   := (value%=num.value);
		       ^

0 [0x0]: line: 1132 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator%=[3183] params(1) in file: lib\support\/0.2.9//primitives.sharp:1133:8: note:  
		    def operator%=(num : double)   := (value%=num.value);
		       ^

0 [0x0]: line: 1133 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            mov8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator%=[3184] params(1) in file: lib\support\/0.2.9//primitives.sharp:1134:8: note:  
		    def operator%=(num : var)    := (value%=num);
		       ^

0 [0x0]: line: 1134 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            mod ecx, ebx -> ebx   
9 [0x9]:            mov8 ebx, ebx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            returnobj   
12 [0xc]:            ret   


overload function: std#char.operator&=[3185] params(1) in file: lib\support\/0.2.9//primitives.sharp:1136:8: note:  
		    def operator&=(num : ulong)  := (value&=num.value);
		       ^

0 [0x0]: line: 1136 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#char.operator&=[3186] params(1) in file: lib\support\/0.2.9//primitives.sharp:1137:8: note:  
		    def operator&=(num : long)   := (value&=num.value);
		       ^

0 [0x0]: line: 1137 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#char.operator&=[3187] params(1) in file: lib\support\/0.2.9//primitives.sharp:1138:8: note:  
		    def operator&=(num : uint)   := (value&=num.value);
		       ^

0 [0x0]: line: 1138 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#char.operator&=[3188] params(1) in file: lib\support\/0.2.9//primitives.sharp:1139:8: note:  
		    def operator&=(num : int)    := (value&=num.value);
		       ^

0 [0x0]: line: 1139 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#char.operator&=[3189] params(1) in file: lib\support\/0.2.9//primitives.sharp:1140:8: note:  
		    def operator&=(num : ushort) := (value&=num.value);
		       ^

0 [0x0]: line: 1140 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#char.operator&=[3190] params(1) in file: lib\support\/0.2.9//primitives.sharp:1141:8: note:  
		    def operator&=(num : short)  := (value&=num.value);
		       ^

0 [0x0]: line: 1141 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#char.operator&=[3191] params(1) in file: lib\support\/0.2.9//primitives.sharp:1142:8: note:  
		    def operator&=(num : uchar)  := (value&=num.value);
		       ^

0 [0x0]: line: 1142 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#char.operator&=[3192] params(1) in file: lib\support\/0.2.9//primitives.sharp:1143:8: note:  
		    def operator&=(num : char)   := (value&=num.value);
		       ^

0 [0x0]: line: 1143 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#char.operator&=[3193] params(1) in file: lib\support\/0.2.9//primitives.sharp:1144:8: note:  
		    def operator&=(num : byte)   := (value&=num.value);
		       ^

0 [0x0]: line: 1144 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#char.operator&=[3194] params(1) in file: lib\support\/0.2.9//primitives.sharp:1145:8: note:  
		    def operator&=(num : bool)   := (value&=num.value);
		       ^

0 [0x0]: line: 1145 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#char.operator&=[3195] params(1) in file: lib\support\/0.2.9//primitives.sharp:1146:8: note:  
		    def operator&=(num : double)   := (value&=num.value);
		       ^

0 [0x0]: line: 1146 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#char.operator&=[3196] params(1) in file: lib\support\/0.2.9//primitives.sharp:1147:8: note:  
		    def operator&=(num : var)    := (value&=num);
		       ^

0 [0x0]: line: 1147 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            and ecx, ebx   
9 [0x9]:            rmov adx, cmt   
10 [0xa]:            returnobj   
11 [0xb]:            ret   


overload function: std#char.operator|=[3197] params(1) in file: lib\support\/0.2.9//primitives.sharp:1149:8: note:  
		    def operator|=(num : ulong)  := (value|=num.value);
		       ^

0 [0x0]: line: 1149 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            mov8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator|=[3198] params(1) in file: lib\support\/0.2.9//primitives.sharp:1150:8: note:  
		    def operator|=(num : long)   := (value|=num.value);
		       ^

0 [0x0]: line: 1150 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            mov8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator|=[3199] params(1) in file: lib\support\/0.2.9//primitives.sharp:1151:8: note:  
		    def operator|=(num : uint)   := (value|=num.value);
		       ^

0 [0x0]: line: 1151 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            mov8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator|=[3200] params(1) in file: lib\support\/0.2.9//primitives.sharp:1152:8: note:  
		    def operator|=(num : int)    := (value|=num.value);
		       ^

0 [0x0]: line: 1152 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            mov8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator|=[3201] params(1) in file: lib\support\/0.2.9//primitives.sharp:1153:8: note:  
		    def operator|=(num : ushort) := (value|=num.value);
		       ^

0 [0x0]: line: 1153 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            mov8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator|=[3202] params(1) in file: lib\support\/0.2.9//primitives.sharp:1154:8: note:  
		    def operator|=(num : short)  := (value|=num.value);
		       ^

0 [0x0]: line: 1154 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            mov8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator|=[3203] params(1) in file: lib\support\/0.2.9//primitives.sharp:1155:8: note:  
		    def operator|=(num : uchar)  := (value|=num.value);
		       ^

0 [0x0]: line: 1155 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            mov8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator|=[3204] params(1) in file: lib\support\/0.2.9//primitives.sharp:1156:8: note:  
		    def operator|=(num : char)   := (value|=num.value);
		       ^

0 [0x0]: line: 1156 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            mov8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator|=[3205] params(1) in file: lib\support\/0.2.9//primitives.sharp:1157:8: note:  
		    def operator|=(num : byte)   := (value|=num.value);
		       ^

0 [0x0]: line: 1157 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            mov8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator|=[3206] params(1) in file: lib\support\/0.2.9//primitives.sharp:1158:8: note:  
		    def operator|=(num : bool)   := (value|=num.value);
		       ^

0 [0x0]: line: 1158 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            mov8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator|=[3207] params(1) in file: lib\support\/0.2.9//primitives.sharp:1159:8: note:  
		    def operator|=(num : double)   := (value|=num.value);
		       ^

0 [0x0]: line: 1159 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            mov8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#char.operator|=[3208] params(1) in file: lib\support\/0.2.9//primitives.sharp:1160:8: note:  
		    def operator|=(num : var)    := (value|=num);
		       ^

0 [0x0]: line: 1160 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            or ecx, ebx   
9 [0x9]:            mov8 cmt, cmt   
10 [0xa]:            rmov adx, cmt   
11 [0xb]:            returnobj   
12 [0xc]:            ret   


function: std#char.is_digit[3209] params(1) in file: lib\support\/0.2.9//primitives.sharp:1162:15: note:  
		    static def is_digit(ch: var) : var {
		              ^

0 [0x0]: line: 1163 ipushl #0   
1 [0x1]:            movi #48, ebx   
3 [0x3]:            loadval ecx   
4 [0x4]:            gte ecx, ebx   
5 [0x5]:            movr ebx, cmt   
6 [0x6]:            skne ebx // pc = 12   
7 [0x7]:            ipushl #0   
8 [0x8]:            movi #57, ebx   
10 [0xa]:            loadval ecx   
11 [0xb]:            lte ecx, ebx   
12 [0xc]:            return_val cmt   
13 [0xd]:            ret   


function: std#char.is_newline[3210] params(1) in file: lib\support\/0.2.9//primitives.sharp:1166:15: note:  
		    static def is_newline(ch: var) : var {
		              ^

0 [0x0]: line: 1167 call @2348 // <platform#build.is_windows>   
1 [0x1]:            loadval ebx   
2 [0x2]:            movr cmt, ebx   
3 [0x3]:            jne 19   
4 [0x4]:            ipushl #0   
5 [0x5]:            movi #10, ebx   
7 [0x7]:            loadval ecx   
8 [0x8]:            test ecx, ebx   
9 [0x9]:            movr ebx, cmt   
10 [0xa]:            skpe ebx // pc = 16   
11 [0xb]:            ipushl #0   
12 [0xc]:            movi #13, ebx   
14 [0xe]:            loadval ecx   
15 [0xf]:            test ecx, ebx   
16 [0x10]:            return_val cmt   
17 [0x11]:            ret   
18 [0x12]:            jmp @26   
19 [0x13]: line: 1168 ipushl #0   
20 [0x14]:            movi #10, ebx   
22 [0x16]:            loadval ecx   
23 [0x17]:            test ecx, ebx   
24 [0x18]:            return_val cmt   
25 [0x19]:            ret   
26 [0x1a]:            nop   


function: std#char.is_alpha[3211] params(1) in file: lib\support\/0.2.9//primitives.sharp:1171:15: note:  
		    static def is_alpha(ch: var) : var {
		              ^

0 [0x0]: line: 1172 ipushl #0   
1 [0x1]:            movi #65, ebx   
3 [0x3]:            loadval ecx   
4 [0x4]:            gte ecx, ebx   
5 [0x5]:            movr ebx, cmt   
6 [0x6]:            skne ebx // pc = 13   
7 [0x7]:            ipushl #0   
8 [0x8]:            movi #90, ebx   
10 [0xa]:            loadval ecx   
11 [0xb]:            lte ecx, ebx   
12 [0xc]:            movr ebx, cmt   
13 [0xd]:            skpe ebx // pc = 26   
14 [0xe]:            ipushl #0   
15 [0xf]:            movi #97, ebx   
17 [0x11]:            loadval ecx   
18 [0x12]:            gte ecx, ebx   
19 [0x13]:            movr ebx, cmt   
20 [0x14]:            skne ebx // pc = 26   
21 [0x15]:            ipushl #0   
22 [0x16]:            movi #122, ebx   
24 [0x18]:            loadval ecx   
25 [0x19]:            lte ecx, ebx   
26 [0x1a]:            return_val cmt   
27 [0x1b]:            ret   


function: std#char.is_alpha_num[3212] params(1) in file: lib\support\/0.2.9//primitives.sharp:1176:15: note:  
		    static def is_alpha_num(ch: var) : var {
		              ^

0 [0x0]: line: 1177 ipushl #0   
1 [0x1]:            call @3211 // <std#char.is_alpha>   
2 [0x2]:            loadval ebx   
3 [0x3]:            skpe ebx // pc = 7   
4 [0x4]:            ipushl #0   
5 [0x5]:            call @3209 // <std#char.is_digit>   
6 [0x6]:            loadval ebx   
7 [0x7]:            return_val ebx   
8 [0x8]:            ret   


function: std#char.to_lower[3213] params(1) in file: lib\support\/0.2.9//primitives.sharp:1180:15: note:  
		    static def to_lower(ch: var) : var {
		              ^

0 [0x0]: line: 1181 istore 65   
2 [0x2]:            loadl ebx, fp+0   
3 [0x3]:            loadval ecx   
4 [0x4]:            lte ecx, ebx   
5 [0x5]:            movr ebx, cmt   
6 [0x6]:            skne ebx // pc = 13   
7 [0x7]:            ipushl #0   
8 [0x8]:            movi #90, ebx   
10 [0xa]:            loadval ecx   
11 [0xb]:            lte ecx, ebx   
12 [0xc]:            movr ebx, cmt   
13 [0xd]:            movr cmt, ebx   
14 [0xe]:            jne 27   
15 [0xf]: line: 1182 istore 97   
17 [0x11]:            ipushl #0   
18 [0x12]:            movi #65, ebx   
20 [0x14]:            loadval ecx   
21 [0x15]:            sub ecx, ebx -> ebx   
22 [0x16]:            loadval ecx   
23 [0x17]:            add ecx, ebx -> ebx   
24 [0x18]:            return_val ebx   
25 [0x19]:            ret   
26 [0x1a]:            jmp @30   
27 [0x1b]: line: 1184 loadl ebx, fp+0   
28 [0x1c]:            return_val ebx   
29 [0x1d]:            ret   
30 [0x1e]:            nop   


function: std#char.to_upper[3214] params(1) in file: lib\support\/0.2.9//primitives.sharp:1187:15: note:  
		    static def to_upper(ch: var) : var {
		              ^

0 [0x0]: line: 1188 istore 97   
2 [0x2]:            loadl ebx, fp+0   
3 [0x3]:            loadval ecx   
4 [0x4]:            lte ecx, ebx   
5 [0x5]:            movr ebx, cmt   
6 [0x6]:            skne ebx // pc = 13   
7 [0x7]:            ipushl #0   
8 [0x8]:            movi #122, ebx   
10 [0xa]:            loadval ecx   
11 [0xb]:            lte ecx, ebx   
12 [0xc]:            movr ebx, cmt   
13 [0xd]:            movr cmt, ebx   
14 [0xe]:            jne 27   
15 [0xf]: line: 1189 istore 65   
17 [0x11]:            ipushl #0   
18 [0x12]:            movi #97, ebx   
20 [0x14]:            loadval ecx   
21 [0x15]:            sub ecx, ebx -> ebx   
22 [0x16]:            loadval ecx   
23 [0x17]:            add ecx, ebx -> ebx   
24 [0x18]:            return_val ebx   
25 [0x19]:            ret   
26 [0x1a]:            jmp @30   
27 [0x1b]: line: 1191 loadl ebx, fp+0   
28 [0x1c]:            return_val ebx   
29 [0x1d]:            ret   
30 [0x1e]:            nop   


constructor: std#char.char[3215] params(0) in file: lib\support\/0.2.9//primitives.sharp:1051:6: note:  
		class char base integer<_int8> {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1686 // <std#integer<_int8>.integer>   
2 [0x2]:         ret   


constructor: std#byte.byte[3216] params(1) in file: lib\support\/0.2.9//primitives.sharp:1195:9: note:  
		    byte(i : long) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @3017 // <std#uchar.uchar>   
9 [0x9]:         ret   


constructor: std#byte.byte[3217] params(1) in file: lib\support\/0.2.9//primitives.sharp:1196:9: note:  
		    byte(i : int) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @3017 // <std#uchar.uchar>   
9 [0x9]:         ret   


constructor: std#byte.byte[3218] params(1) in file: lib\support\/0.2.9//primitives.sharp:1197:9: note:  
		    byte(i : short) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @3017 // <std#uchar.uchar>   
9 [0x9]:         ret   


constructor: std#byte.byte[3219] params(1) in file: lib\support\/0.2.9//primitives.sharp:1198:9: note:  
		    byte(i : char) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @3017 // <std#uchar.uchar>   
9 [0x9]:         ret   


constructor: std#byte.byte[3220] params(1) in file: lib\support\/0.2.9//primitives.sharp:1199:9: note:  
		    byte(i : byte) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @3017 // <std#uchar.uchar>   
9 [0x9]:         ret   


constructor: std#byte.byte[3221] params(1) in file: lib\support\/0.2.9//primitives.sharp:1200:9: note:  
		    byte(i : bool) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @3017 // <std#uchar.uchar>   
9 [0x9]:         ret   


constructor: std#byte.byte[3222] params(1) in file: lib\support\/0.2.9//primitives.sharp:1201:9: note:  
		    byte(i : ulong) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @3017 // <std#uchar.uchar>   
9 [0x9]:         ret   


constructor: std#byte.byte[3223] params(1) in file: lib\support\/0.2.9//primitives.sharp:1202:9: note:  
		    byte(i : uint) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @3017 // <std#uchar.uchar>   
9 [0x9]:         ret   


constructor: std#byte.byte[3224] params(1) in file: lib\support\/0.2.9//primitives.sharp:1203:9: note:  
		    byte(i : ushort) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @3017 // <std#uchar.uchar>   
9 [0x9]:         ret   


constructor: std#byte.byte[3225] params(1) in file: lib\support\/0.2.9//primitives.sharp:1204:9: note:  
		    byte(i : uchar) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @3017 // <std#uchar.uchar>   
9 [0x9]:         ret   


constructor: std#byte.byte[3226] params(1) in file: lib\support\/0.2.9//primitives.sharp:1205:9: note:  
		    byte(i : double) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @3017 // <std#uchar.uchar>   
9 [0x9]:         ret   


constructor: std#byte.byte[3227] params(1) in file: lib\support\/0.2.9//primitives.sharp:1206:9: note:  
		    byte(i : var) -> base(i) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         ipushl #1   
2 [0x2]:         call @3017 // <std#uchar.uchar>   
3 [0x3]:         ret   


overload function: std#byte.operator![3228] params(0) in file: lib\support\/0.2.9//primitives.sharp:1208:8: note:  
		    def operator!() := (!value);
		       ^

0 [0x0]: line: 1208 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            not ebx, ebx   
7 [0x7]:            return_val ebx   
8 [0x8]:            ret   


overload function: std#byte.operator++[3229] params(0) in file: lib\support\/0.2.9//primitives.sharp:1209:8: note:  
		    def operator++() := (++value);
		       ^

0 [0x0]: line: 1209 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            inc ebx   
7 [0x7]:            movu8 ebx, ebx   
8 [0x8]:            movi #0, adx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            return_val ebx   
12 [0xc]:            ret   


overload function: std#byte.operator++[3230] params(1) in file: lib\support\/0.2.9//primitives.sharp:1210:8: note:  
		    def operator++(num : var) := (value++);
		       ^

0 [0x0]: line: 1210 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            movr egx, ebx   
7 [0x7]:            inc ebx   
8 [0x8]:            movu8 ebx, ebx   
9 [0x9]:            movi #0, adx   
11 [0xb]:            rmov adx, ebx   
12 [0xc]:            movr ebx, egx   
13 [0xd]:            return_val ebx   
14 [0xe]:            ret   


overload function: std#byte.operator--[3231] params(0) in file: lib\support\/0.2.9//primitives.sharp:1211:8: note:  
		    def operator--() := (--value);
		       ^

0 [0x0]: line: 1211 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            dec ebx   
7 [0x7]:            movu8 ebx, ebx   
8 [0x8]:            movi #0, adx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            return_val ebx   
12 [0xc]:            ret   


overload function: std#byte.operator--[3232] params(1) in file: lib\support\/0.2.9//primitives.sharp:1212:8: note:  
		    def operator--(num : var) := (value--);
		       ^

0 [0x0]: line: 1212 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            movr egx, ebx   
7 [0x7]:            dec ebx   
8 [0x8]:            movu8 ebx, ebx   
9 [0x9]:            movi #0, adx   
11 [0xb]:            rmov adx, ebx   
12 [0xc]:            movr ebx, egx   
13 [0xd]:            return_val ebx   
14 [0xe]:            ret   


overload function: std#byte.operator+=[3233] params(1) in file: lib\support\/0.2.9//primitives.sharp:1214:8: note:  
		    def operator+=(num : ulong)  := (value+=num.value);
		       ^

0 [0x0]: line: 1214 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator+=[3234] params(1) in file: lib\support\/0.2.9//primitives.sharp:1215:8: note:  
		    def operator+=(num : long)   := (value+=num.value);
		       ^

0 [0x0]: line: 1215 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator+=[3235] params(1) in file: lib\support\/0.2.9//primitives.sharp:1216:8: note:  
		    def operator+=(num : uint)   := (value+=num.value);
		       ^

0 [0x0]: line: 1216 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator+=[3236] params(1) in file: lib\support\/0.2.9//primitives.sharp:1217:8: note:  
		    def operator+=(num : int)    := (value+=num.value);
		       ^

0 [0x0]: line: 1217 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator+=[3237] params(1) in file: lib\support\/0.2.9//primitives.sharp:1218:8: note:  
		    def operator+=(num : ushort) := (value+=num.value);
		       ^

0 [0x0]: line: 1218 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator+=[3238] params(1) in file: lib\support\/0.2.9//primitives.sharp:1219:8: note:  
		    def operator+=(num : short)  := (value+=num.value);
		       ^

0 [0x0]: line: 1219 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator+=[3239] params(1) in file: lib\support\/0.2.9//primitives.sharp:1220:8: note:  
		    def operator+=(num : uchar)  := (value+=num.value);
		       ^

0 [0x0]: line: 1220 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator+=[3240] params(1) in file: lib\support\/0.2.9//primitives.sharp:1221:8: note:  
		    def operator+=(num : char)   := (value+=num.value);
		       ^

0 [0x0]: line: 1221 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator+=[3241] params(1) in file: lib\support\/0.2.9//primitives.sharp:1222:8: note:  
		    def operator+=(num : byte)   := (value+=num.value);
		       ^

0 [0x0]: line: 1222 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator+=[3242] params(1) in file: lib\support\/0.2.9//primitives.sharp:1223:8: note:  
		    def operator+=(num : bool)   := (value+=num.value);
		       ^

0 [0x0]: line: 1223 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator+=[3243] params(1) in file: lib\support\/0.2.9//primitives.sharp:1224:8: note:  
		    def operator+=(num : double)   := (value+=num.value);
		       ^

0 [0x0]: line: 1224 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator+=[3244] params(1) in file: lib\support\/0.2.9//primitives.sharp:1225:8: note:  
		    def operator+=(num : var)    := (value+=num);
		       ^

0 [0x0]: line: 1225 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            add ecx, ebx -> ebx   
9 [0x9]:            movu8 ebx, ebx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            returnobj   
12 [0xc]:            ret   


overload function: std#byte.operator-=[3245] params(1) in file: lib\support\/0.2.9//primitives.sharp:1227:8: note:  
		    def operator-=(num : ulong)  := (value-=num.value);
		       ^

0 [0x0]: line: 1227 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator-=[3246] params(1) in file: lib\support\/0.2.9//primitives.sharp:1228:8: note:  
		    def operator-=(num : long)   := (value-=num.value);
		       ^

0 [0x0]: line: 1228 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator-=[3247] params(1) in file: lib\support\/0.2.9//primitives.sharp:1229:8: note:  
		    def operator-=(num : uint)   := (value-=num.value);
		       ^

0 [0x0]: line: 1229 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator-=[3248] params(1) in file: lib\support\/0.2.9//primitives.sharp:1230:8: note:  
		    def operator-=(num : int)    := (value-=num.value);
		       ^

0 [0x0]: line: 1230 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator-=[3249] params(1) in file: lib\support\/0.2.9//primitives.sharp:1231:8: note:  
		    def operator-=(num : ushort) := (value-=num.value);
		       ^

0 [0x0]: line: 1231 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator-=[3250] params(1) in file: lib\support\/0.2.9//primitives.sharp:1232:8: note:  
		    def operator-=(num : short)  := (value-=num.value);
		       ^

0 [0x0]: line: 1232 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator-=[3251] params(1) in file: lib\support\/0.2.9//primitives.sharp:1233:8: note:  
		    def operator-=(num : uchar)  := (value-=num.value);
		       ^

0 [0x0]: line: 1233 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator-=[3252] params(1) in file: lib\support\/0.2.9//primitives.sharp:1234:8: note:  
		    def operator-=(num : char)   := (value-=num.value);
		       ^

0 [0x0]: line: 1234 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator-=[3253] params(1) in file: lib\support\/0.2.9//primitives.sharp:1235:8: note:  
		    def operator-=(num : byte)   := (value-=num.value);
		       ^

0 [0x0]: line: 1235 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator-=[3254] params(1) in file: lib\support\/0.2.9//primitives.sharp:1236:8: note:  
		    def operator-=(num : bool)   := (value-=num.value);
		       ^

0 [0x0]: line: 1236 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator-=[3255] params(1) in file: lib\support\/0.2.9//primitives.sharp:1237:8: note:  
		    def operator-=(num : double)   := (value-=num.value);
		       ^

0 [0x0]: line: 1237 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator-=[3256] params(1) in file: lib\support\/0.2.9//primitives.sharp:1238:8: note:  
		    def operator-=(num : var)    := (value-=num);
		       ^

0 [0x0]: line: 1238 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            sub ecx, ebx -> ebx   
9 [0x9]:            movu8 ebx, ebx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            returnobj   
12 [0xc]:            ret   


overload function: std#byte.operator*=[3257] params(1) in file: lib\support\/0.2.9//primitives.sharp:1240:8: note:  
		    def operator*=(num : ulong)  := (value*=num.value);
		       ^

0 [0x0]: line: 1240 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator*=[3258] params(1) in file: lib\support\/0.2.9//primitives.sharp:1241:8: note:  
		    def operator*=(num : long)   := (value*=num.value);
		       ^

0 [0x0]: line: 1241 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator*=[3259] params(1) in file: lib\support\/0.2.9//primitives.sharp:1242:8: note:  
		    def operator*=(num : uint)   := (value*=num.value);
		       ^

0 [0x0]: line: 1242 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator*=[3260] params(1) in file: lib\support\/0.2.9//primitives.sharp:1243:8: note:  
		    def operator*=(num : int)    := (value*=num.value);
		       ^

0 [0x0]: line: 1243 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator*=[3261] params(1) in file: lib\support\/0.2.9//primitives.sharp:1244:8: note:  
		    def operator*=(num : ushort) := (value*=num.value);
		       ^

0 [0x0]: line: 1244 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator*=[3262] params(1) in file: lib\support\/0.2.9//primitives.sharp:1245:8: note:  
		    def operator*=(num : short)  := (value*=num.value);
		       ^

0 [0x0]: line: 1245 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator*=[3263] params(1) in file: lib\support\/0.2.9//primitives.sharp:1246:8: note:  
		    def operator*=(num : uchar)  := (value*=num.value);
		       ^

0 [0x0]: line: 1246 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator*=[3264] params(1) in file: lib\support\/0.2.9//primitives.sharp:1247:8: note:  
		    def operator*=(num : char)   := (value*=num.value);
		       ^

0 [0x0]: line: 1247 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator*=[3265] params(1) in file: lib\support\/0.2.9//primitives.sharp:1248:8: note:  
		    def operator*=(num : byte)   := (value*=num.value);
		       ^

0 [0x0]: line: 1248 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator*=[3266] params(1) in file: lib\support\/0.2.9//primitives.sharp:1249:8: note:  
		    def operator*=(num : bool)   := (value*=num.value);
		       ^

0 [0x0]: line: 1249 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator*=[3267] params(1) in file: lib\support\/0.2.9//primitives.sharp:1250:8: note:  
		    def operator*=(num : double)   := (value*=num.value);
		       ^

0 [0x0]: line: 1250 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator*=[3268] params(1) in file: lib\support\/0.2.9//primitives.sharp:1251:8: note:  
		    def operator*=(num : var)    := (value*=num);
		       ^

0 [0x0]: line: 1251 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            mul ecx, ebx -> ebx   
9 [0x9]:            movu8 ebx, ebx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            returnobj   
12 [0xc]:            ret   


overload function: std#byte.operator/=[3269] params(1) in file: lib\support\/0.2.9//primitives.sharp:1253:8: note:  
		    def operator/=(num : ulong)  := (value/=num.value);
		       ^

0 [0x0]: line: 1253 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator/=[3270] params(1) in file: lib\support\/0.2.9//primitives.sharp:1254:8: note:  
		    def operator/=(num : long)   := (value/=num.value);
		       ^

0 [0x0]: line: 1254 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator/=[3271] params(1) in file: lib\support\/0.2.9//primitives.sharp:1255:8: note:  
		    def operator/=(num : uint)   := (value/=num.value);
		       ^

0 [0x0]: line: 1255 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator/=[3272] params(1) in file: lib\support\/0.2.9//primitives.sharp:1256:8: note:  
		    def operator/=(num : int)    := (value/=num.value);
		       ^

0 [0x0]: line: 1256 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator/=[3273] params(1) in file: lib\support\/0.2.9//primitives.sharp:1257:8: note:  
		    def operator/=(num : ushort) := (value/=num.value);
		       ^

0 [0x0]: line: 1257 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator/=[3274] params(1) in file: lib\support\/0.2.9//primitives.sharp:1258:8: note:  
		    def operator/=(num : short)  := (value/=num.value);
		       ^

0 [0x0]: line: 1258 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator/=[3275] params(1) in file: lib\support\/0.2.9//primitives.sharp:1259:8: note:  
		    def operator/=(num : uchar)  := (value/=num.value);
		       ^

0 [0x0]: line: 1259 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator/=[3276] params(1) in file: lib\support\/0.2.9//primitives.sharp:1260:8: note:  
		    def operator/=(num : char)   := (value/=num.value);
		       ^

0 [0x0]: line: 1260 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator/=[3277] params(1) in file: lib\support\/0.2.9//primitives.sharp:1261:8: note:  
		    def operator/=(num : byte)   := (value/=num.value);
		       ^

0 [0x0]: line: 1261 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator/=[3278] params(1) in file: lib\support\/0.2.9//primitives.sharp:1262:8: note:  
		    def operator/=(num : bool)   := (value/=num.value);
		       ^

0 [0x0]: line: 1262 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator/=[3279] params(1) in file: lib\support\/0.2.9//primitives.sharp:1263:8: note:  
		    def operator/=(num : double)   := (value/=num.value);
		       ^

0 [0x0]: line: 1263 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator/=[3280] params(1) in file: lib\support\/0.2.9//primitives.sharp:1264:8: note:  
		    def operator/=(num : var)    := (value/=num);
		       ^

0 [0x0]: line: 1264 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            div ecx, ebx -> ebx   
9 [0x9]:            movu8 ebx, ebx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            returnobj   
12 [0xc]:            ret   


overload function: std#byte.operator%=[3281] params(1) in file: lib\support\/0.2.9//primitives.sharp:1266:8: note:  
		    def operator%=(num : ulong)  := (value%=num.value);
		       ^

0 [0x0]: line: 1266 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator%=[3282] params(1) in file: lib\support\/0.2.9//primitives.sharp:1267:8: note:  
		    def operator%=(num : long)   := (value%=num.value);
		       ^

0 [0x0]: line: 1267 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator%=[3283] params(1) in file: lib\support\/0.2.9//primitives.sharp:1268:8: note:  
		    def operator%=(num : uint)   := (value%=num.value);
		       ^

0 [0x0]: line: 1268 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator%=[3284] params(1) in file: lib\support\/0.2.9//primitives.sharp:1269:8: note:  
		    def operator%=(num : int)    := (value%=num.value);
		       ^

0 [0x0]: line: 1269 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator%=[3285] params(1) in file: lib\support\/0.2.9//primitives.sharp:1270:8: note:  
		    def operator%=(num : ushort) := (value%=num.value);
		       ^

0 [0x0]: line: 1270 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator%=[3286] params(1) in file: lib\support\/0.2.9//primitives.sharp:1271:8: note:  
		    def operator%=(num : short)  := (value%=num.value);
		       ^

0 [0x0]: line: 1271 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator%=[3287] params(1) in file: lib\support\/0.2.9//primitives.sharp:1272:8: note:  
		    def operator%=(num : uchar)  := (value%=num.value);
		       ^

0 [0x0]: line: 1272 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator%=[3288] params(1) in file: lib\support\/0.2.9//primitives.sharp:1273:8: note:  
		    def operator%=(num : char)   := (value%=num.value);
		       ^

0 [0x0]: line: 1273 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator%=[3289] params(1) in file: lib\support\/0.2.9//primitives.sharp:1274:8: note:  
		    def operator%=(num : byte)   := (value%=num.value);
		       ^

0 [0x0]: line: 1274 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator%=[3290] params(1) in file: lib\support\/0.2.9//primitives.sharp:1275:8: note:  
		    def operator%=(num : bool)   := (value%=num.value);
		       ^

0 [0x0]: line: 1275 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator%=[3291] params(1) in file: lib\support\/0.2.9//primitives.sharp:1276:8: note:  
		    def operator%=(num : double)   := (value%=num.value);
		       ^

0 [0x0]: line: 1276 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            movu8 ebx, ebx   
16 [0x10]:            rmov adx, ebx   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator%=[3292] params(1) in file: lib\support\/0.2.9//primitives.sharp:1277:8: note:  
		    def operator%=(num : var)    := (value%=num);
		       ^

0 [0x0]: line: 1277 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            mod ecx, ebx -> ebx   
9 [0x9]:            movu8 ebx, ebx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            returnobj   
12 [0xc]:            ret   


overload function: std#byte.operator&=[3293] params(1) in file: lib\support\/0.2.9//primitives.sharp:1279:8: note:  
		    def operator&=(num : ulong)  := (value&=num.value);
		       ^

0 [0x0]: line: 1279 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#byte.operator&=[3294] params(1) in file: lib\support\/0.2.9//primitives.sharp:1280:8: note:  
		    def operator&=(num : long)   := (value&=num.value);
		       ^

0 [0x0]: line: 1280 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#byte.operator&=[3295] params(1) in file: lib\support\/0.2.9//primitives.sharp:1281:8: note:  
		    def operator&=(num : uint)   := (value&=num.value);
		       ^

0 [0x0]: line: 1281 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#byte.operator&=[3296] params(1) in file: lib\support\/0.2.9//primitives.sharp:1282:8: note:  
		    def operator&=(num : int)    := (value&=num.value);
		       ^

0 [0x0]: line: 1282 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#byte.operator&=[3297] params(1) in file: lib\support\/0.2.9//primitives.sharp:1283:8: note:  
		    def operator&=(num : ushort) := (value&=num.value);
		       ^

0 [0x0]: line: 1283 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#byte.operator&=[3298] params(1) in file: lib\support\/0.2.9//primitives.sharp:1284:8: note:  
		    def operator&=(num : short)  := (value&=num.value);
		       ^

0 [0x0]: line: 1284 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#byte.operator&=[3299] params(1) in file: lib\support\/0.2.9//primitives.sharp:1285:8: note:  
		    def operator&=(num : uchar)  := (value&=num.value);
		       ^

0 [0x0]: line: 1285 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#byte.operator&=[3300] params(1) in file: lib\support\/0.2.9//primitives.sharp:1286:8: note:  
		    def operator&=(num : char)   := (value&=num.value);
		       ^

0 [0x0]: line: 1286 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#byte.operator&=[3301] params(1) in file: lib\support\/0.2.9//primitives.sharp:1287:8: note:  
		    def operator&=(num : byte)   := (value&=num.value);
		       ^

0 [0x0]: line: 1287 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#byte.operator&=[3302] params(1) in file: lib\support\/0.2.9//primitives.sharp:1288:8: note:  
		    def operator&=(num : bool)   := (value&=num.value);
		       ^

0 [0x0]: line: 1288 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#byte.operator&=[3303] params(1) in file: lib\support\/0.2.9//primitives.sharp:1289:8: note:  
		    def operator&=(num : double)   := (value&=num.value);
		       ^

0 [0x0]: line: 1289 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#byte.operator&=[3304] params(1) in file: lib\support\/0.2.9//primitives.sharp:1290:8: note:  
		    def operator&=(num : var)    := (value&=num);
		       ^

0 [0x0]: line: 1290 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            and ecx, ebx   
9 [0x9]:            rmov adx, cmt   
10 [0xa]:            returnobj   
11 [0xb]:            ret   


overload function: std#byte.operator|=[3305] params(1) in file: lib\support\/0.2.9//primitives.sharp:1292:8: note:  
		    def operator|=(num : ulong)  := (value|=num.value);
		       ^

0 [0x0]: line: 1292 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator|=[3306] params(1) in file: lib\support\/0.2.9//primitives.sharp:1293:8: note:  
		    def operator|=(num : long)   := (value|=num.value);
		       ^

0 [0x0]: line: 1293 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator|=[3307] params(1) in file: lib\support\/0.2.9//primitives.sharp:1294:8: note:  
		    def operator|=(num : uint)   := (value|=num.value);
		       ^

0 [0x0]: line: 1294 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator|=[3308] params(1) in file: lib\support\/0.2.9//primitives.sharp:1295:8: note:  
		    def operator|=(num : int)    := (value|=num.value);
		       ^

0 [0x0]: line: 1295 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator|=[3309] params(1) in file: lib\support\/0.2.9//primitives.sharp:1296:8: note:  
		    def operator|=(num : ushort) := (value|=num.value);
		       ^

0 [0x0]: line: 1296 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator|=[3310] params(1) in file: lib\support\/0.2.9//primitives.sharp:1297:8: note:  
		    def operator|=(num : short)  := (value|=num.value);
		       ^

0 [0x0]: line: 1297 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator|=[3311] params(1) in file: lib\support\/0.2.9//primitives.sharp:1298:8: note:  
		    def operator|=(num : uchar)  := (value|=num.value);
		       ^

0 [0x0]: line: 1298 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator|=[3312] params(1) in file: lib\support\/0.2.9//primitives.sharp:1299:8: note:  
		    def operator|=(num : char)   := (value|=num.value);
		       ^

0 [0x0]: line: 1299 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator|=[3313] params(1) in file: lib\support\/0.2.9//primitives.sharp:1300:8: note:  
		    def operator|=(num : byte)   := (value|=num.value);
		       ^

0 [0x0]: line: 1300 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator|=[3314] params(1) in file: lib\support\/0.2.9//primitives.sharp:1301:8: note:  
		    def operator|=(num : bool)   := (value|=num.value);
		       ^

0 [0x0]: line: 1301 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator|=[3315] params(1) in file: lib\support\/0.2.9//primitives.sharp:1302:8: note:  
		    def operator|=(num : double)   := (value|=num.value);
		       ^

0 [0x0]: line: 1302 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            movu8 cmt, cmt   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            returnobj   
18 [0x12]:            ret   


overload function: std#byte.operator|=[3316] params(1) in file: lib\support\/0.2.9//primitives.sharp:1303:8: note:  
		    def operator|=(num : var)    := (value|=num);
		       ^

0 [0x0]: line: 1303 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            or ecx, ebx   
9 [0x9]:            movu8 cmt, cmt   
10 [0xa]:            rmov adx, cmt   
11 [0xb]:            returnobj   
12 [0xc]:            ret   


function: std#byte.is_digit[3317] params(1) in file: lib\support\/0.2.9//primitives.sharp:1305:15: note:  
		    static def is_digit(ch: var) : var {
		              ^

0 [0x0]: line: 1306 ipushl #0   
1 [0x1]:            movi #48, ebx   
3 [0x3]:            loadval ecx   
4 [0x4]:            gte ecx, ebx   
5 [0x5]:            movr ebx, cmt   
6 [0x6]:            skne ebx // pc = 12   
7 [0x7]:            ipushl #0   
8 [0x8]:            movi #57, ebx   
10 [0xa]:            loadval ecx   
11 [0xb]:            lte ecx, ebx   
12 [0xc]:            return_val cmt   
13 [0xd]:            ret   


function: std#byte.is_newline[3318] params(1) in file: lib\support\/0.2.9//primitives.sharp:1309:15: note:  
		    static def is_newline(ch: var) : var {
		              ^

0 [0x0]: line: 1310 call @2348 // <platform#build.is_windows>   
1 [0x1]:            loadval ebx   
2 [0x2]:            movr cmt, ebx   
3 [0x3]:            jne 19   
4 [0x4]:            ipushl #0   
5 [0x5]:            movi #10, ebx   
7 [0x7]:            loadval ecx   
8 [0x8]:            test ecx, ebx   
9 [0x9]:            movr ebx, cmt   
10 [0xa]:            skpe ebx // pc = 16   
11 [0xb]:            ipushl #0   
12 [0xc]:            movi #13, ebx   
14 [0xe]:            loadval ecx   
15 [0xf]:            test ecx, ebx   
16 [0x10]:            return_val cmt   
17 [0x11]:            ret   
18 [0x12]:            jmp @26   
19 [0x13]: line: 1311 ipushl #0   
20 [0x14]:            movi #10, ebx   
22 [0x16]:            loadval ecx   
23 [0x17]:            test ecx, ebx   
24 [0x18]:            return_val cmt   
25 [0x19]:            ret   
26 [0x1a]:            nop   


function: std#byte.is_alpha[3319] params(1) in file: lib\support\/0.2.9//primitives.sharp:1314:15: note:  
		    static def is_alpha(ch: var) : var {
		              ^

0 [0x0]: line: 1315 ipushl #0   
1 [0x1]:            movi #65, ebx   
3 [0x3]:            loadval ecx   
4 [0x4]:            gte ecx, ebx   
5 [0x5]:            movr ebx, cmt   
6 [0x6]:            skne ebx // pc = 13   
7 [0x7]:            ipushl #0   
8 [0x8]:            movi #90, ebx   
10 [0xa]:            loadval ecx   
11 [0xb]:            lte ecx, ebx   
12 [0xc]:            movr ebx, cmt   
13 [0xd]:            skpe ebx // pc = 26   
14 [0xe]:            ipushl #0   
15 [0xf]:            movi #97, ebx   
17 [0x11]:            loadval ecx   
18 [0x12]:            gte ecx, ebx   
19 [0x13]:            movr ebx, cmt   
20 [0x14]:            skne ebx // pc = 26   
21 [0x15]:            ipushl #0   
22 [0x16]:            movi #122, ebx   
24 [0x18]:            loadval ecx   
25 [0x19]:            lte ecx, ebx   
26 [0x1a]:            return_val cmt   
27 [0x1b]:            ret   


function: std#byte.is_alpha_num[3320] params(1) in file: lib\support\/0.2.9//primitives.sharp:1319:15: note:  
		    static def is_alpha_num(ch: var) : var {
		              ^

0 [0x0]: line: 1320 ipushl #0   
1 [0x1]:            call @3319 // <std#byte.is_alpha>   
2 [0x2]:            loadval ebx   
3 [0x3]:            skpe ebx // pc = 7   
4 [0x4]:            ipushl #0   
5 [0x5]:            call @3317 // <std#byte.is_digit>   
6 [0x6]:            loadval ebx   
7 [0x7]:            return_val ebx   
8 [0x8]:            ret   


function: std#byte.to_lower[3321] params(1) in file: lib\support\/0.2.9//primitives.sharp:1323:15: note:  
		    static def to_lower(ch: var) : var {
		              ^

0 [0x0]: line: 1324 istore 65   
2 [0x2]:            loadl ebx, fp+0   
3 [0x3]:            loadval ecx   
4 [0x4]:            lte ecx, ebx   
5 [0x5]:            movr ebx, cmt   
6 [0x6]:            skne ebx // pc = 13   
7 [0x7]:            ipushl #0   
8 [0x8]:            movi #90, ebx   
10 [0xa]:            loadval ecx   
11 [0xb]:            lte ecx, ebx   
12 [0xc]:            movr ebx, cmt   
13 [0xd]:            movr cmt, ebx   
14 [0xe]:            jne 27   
15 [0xf]: line: 1325 istore 97   
17 [0x11]:            ipushl #0   
18 [0x12]:            movi #65, ebx   
20 [0x14]:            loadval ecx   
21 [0x15]:            sub ecx, ebx -> ebx   
22 [0x16]:            loadval ecx   
23 [0x17]:            add ecx, ebx -> ebx   
24 [0x18]:            return_val ebx   
25 [0x19]:            ret   
26 [0x1a]:            jmp @30   
27 [0x1b]: line: 1327 loadl ebx, fp+0   
28 [0x1c]:            return_val ebx   
29 [0x1d]:            ret   
30 [0x1e]:            nop   


function: std#byte.to_upper[3322] params(1) in file: lib\support\/0.2.9//primitives.sharp:1330:15: note:  
		    static def to_upper(ch: var) : var {
		              ^

0 [0x0]: line: 1331 istore 97   
2 [0x2]:            loadl ebx, fp+0   
3 [0x3]:            loadval ecx   
4 [0x4]:            lte ecx, ebx   
5 [0x5]:            movr ebx, cmt   
6 [0x6]:            skne ebx // pc = 13   
7 [0x7]:            ipushl #0   
8 [0x8]:            movi #122, ebx   
10 [0xa]:            loadval ecx   
11 [0xb]:            lte ecx, ebx   
12 [0xc]:            movr ebx, cmt   
13 [0xd]:            movr cmt, ebx   
14 [0xe]:            jne 27   
15 [0xf]: line: 1332 istore 65   
17 [0x11]:            ipushl #0   
18 [0x12]:            movi #97, ebx   
20 [0x14]:            loadval ecx   
21 [0x15]:            sub ecx, ebx -> ebx   
22 [0x16]:            loadval ecx   
23 [0x17]:            add ecx, ebx -> ebx   
24 [0x18]:            return_val ebx   
25 [0x19]:            ret   
26 [0x1a]:            jmp @30   
27 [0x1b]: line: 1334 loadl ebx, fp+0   
28 [0x1c]:            return_val ebx   
29 [0x1d]:            ret   
30 [0x1e]:            nop   


constructor: std#byte.byte[3323] params(0) in file: lib\support\/0.2.9//primitives.sharp:1194:6: note:  
		class byte base uchar {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @3107 // <std#uchar.uchar>   
2 [0x2]:         ret   


constructor: std#bool.bool[3324] params(1) in file: lib\support\/0.2.9//primitives.sharp:1338:9: note:  
		    bool(i : long) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1478 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#bool.bool[3325] params(1) in file: lib\support\/0.2.9//primitives.sharp:1339:9: note:  
		    bool(i : int) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1478 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#bool.bool[3326] params(1) in file: lib\support\/0.2.9//primitives.sharp:1340:9: note:  
		    bool(i : short) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1478 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#bool.bool[3327] params(1) in file: lib\support\/0.2.9//primitives.sharp:1341:9: note:  
		    bool(i : char) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1478 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#bool.bool[3328] params(1) in file: lib\support\/0.2.9//primitives.sharp:1342:9: note:  
		    bool(i : byte) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1478 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#bool.bool[3329] params(1) in file: lib\support\/0.2.9//primitives.sharp:1343:9: note:  
		    bool(i : bool) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1478 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#bool.bool[3330] params(1) in file: lib\support\/0.2.9//primitives.sharp:1344:9: note:  
		    bool(i : ulong) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1478 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#bool.bool[3331] params(1) in file: lib\support\/0.2.9//primitives.sharp:1345:9: note:  
		    bool(i : uint) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1478 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#bool.bool[3332] params(1) in file: lib\support\/0.2.9//primitives.sharp:1346:9: note:  
		    bool(i : ushort) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1478 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#bool.bool[3333] params(1) in file: lib\support\/0.2.9//primitives.sharp:1347:9: note:  
		    bool(i : uchar) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1478 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#bool.bool[3334] params(1) in file: lib\support\/0.2.9//primitives.sharp:1348:9: note:  
		    bool(i : double) -> base(i.value) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1478 // <std#integer<_int8>.integer>   
9 [0x9]:         ret   


constructor: std#bool.bool[3335] params(1) in file: lib\support\/0.2.9//primitives.sharp:1349:9: note:  
		    bool(i : var) -> base(i) {}
		        ^

0 [0x0]:         pushl 0   
1 [0x1]:         ipushl #1   
2 [0x2]:         call @1478 // <std#integer<_int8>.integer>   
3 [0x3]:         ret   


overload function: std#bool.operator![3336] params(0) in file: lib\support\/0.2.9//primitives.sharp:1351:8: note:  
		    def operator!() := (!value);
		       ^

0 [0x0]: line: 1351 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            not ebx, ebx   
7 [0x7]:            return_val ebx   
8 [0x8]:            ret   


overload function: std#bool.operator++[3337] params(0) in file: lib\support\/0.2.9//primitives.sharp:1352:8: note:  
		    def operator++() := (value = !value);
		       ^

0 [0x0]: line: 1352 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            not ebx, ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            mov8 ebx, ebx   
11 [0xb]:            movi #0, adx   
13 [0xd]:            rmov adx, ebx   
14 [0xe]:            returnobj   
15 [0xf]:            ret   


overload function: std#bool.operator++[3338] params(1) in file: lib\support\/0.2.9//primitives.sharp:1353:8: note:  
		    def operator++(num : var) := (!value);
		       ^

0 [0x0]: line: 1353 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            not ebx, ebx   
7 [0x7]:            return_val ebx   
8 [0x8]:            ret   


overload function: std#bool.operator--[3339] params(0) in file: lib\support\/0.2.9//primitives.sharp:1354:8: note:  
		    def operator--() := (value = !value);
		       ^

0 [0x0]: line: 1354 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            not ebx, ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            mov8 ebx, ebx   
11 [0xb]:            movi #0, adx   
13 [0xd]:            rmov adx, ebx   
14 [0xe]:            returnobj   
15 [0xf]:            ret   


overload function: std#bool.operator--[3340] params(1) in file: lib\support\/0.2.9//primitives.sharp:1355:8: note:  
		    def operator--(num : var) := (value = !value);
		       ^

0 [0x0]: line: 1355 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            not ebx, ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            mov8 ebx, ebx   
11 [0xb]:            movi #0, adx   
13 [0xd]:            rmov adx, ebx   
14 [0xe]:            returnobj   
15 [0xf]:            ret   


overload function: std#bool.operator+=[3341] params(1) in file: lib\support\/0.2.9//primitives.sharp:1357:8: note:  
		    def operator+=(num : ulong)  := check_value(value+=num.value);
		       ^

0 [0x0]: line: 1357 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            add ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator+=[3342] params(1) in file: lib\support\/0.2.9//primitives.sharp:1358:8: note:  
		    def operator+=(num : long)   := check_value(value+=num.value);
		       ^

0 [0x0]: line: 1358 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            add ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator+=[3343] params(1) in file: lib\support\/0.2.9//primitives.sharp:1359:8: note:  
		    def operator+=(num : uint)   := check_value(value+=num.value);
		       ^

0 [0x0]: line: 1359 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            add ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator+=[3344] params(1) in file: lib\support\/0.2.9//primitives.sharp:1360:8: note:  
		    def operator+=(num : int)    := check_value(value+=num.value);
		       ^

0 [0x0]: line: 1360 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            add ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator+=[3345] params(1) in file: lib\support\/0.2.9//primitives.sharp:1361:8: note:  
		    def operator+=(num : ushort) := check_value(value+=num.value);
		       ^

0 [0x0]: line: 1361 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            add ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator+=[3346] params(1) in file: lib\support\/0.2.9//primitives.sharp:1362:8: note:  
		    def operator+=(num : short)  := check_value(value+=num.value);
		       ^

0 [0x0]: line: 1362 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            add ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator+=[3347] params(1) in file: lib\support\/0.2.9//primitives.sharp:1363:8: note:  
		    def operator+=(num : uchar)  := check_value(value+=num.value);
		       ^

0 [0x0]: line: 1363 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            add ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator+=[3348] params(1) in file: lib\support\/0.2.9//primitives.sharp:1364:8: note:  
		    def operator+=(num : char)   := check_value(value+=num.value);
		       ^

0 [0x0]: line: 1364 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            add ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator+=[3349] params(1) in file: lib\support\/0.2.9//primitives.sharp:1365:8: note:  
		    def operator+=(num : byte)   := check_value(value+=num.value);
		       ^

0 [0x0]: line: 1365 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            add ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator+=[3350] params(1) in file: lib\support\/0.2.9//primitives.sharp:1366:8: note:  
		    def operator+=(num : bool)   := check_value(value+=num.value);
		       ^

0 [0x0]: line: 1366 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            add ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator+=[3351] params(1) in file: lib\support\/0.2.9//primitives.sharp:1367:8: note:  
		    def operator+=(num : double)   := check_value(value+=num.value);
		       ^

0 [0x0]: line: 1367 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            add ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator+=[3352] params(1) in file: lib\support\/0.2.9//primitives.sharp:1368:8: note:  
		    def operator+=(num : var)    := check_value(value+=num);
		       ^

0 [0x0]: line: 1368 pushl 0   
1 [0x1]:            ipushl #1   
2 [0x2]:            movl 0   
3 [0x3]:            movn #0   
5 [0x5]:            movi #0, adx   
7 [0x7]:            iaload ecx, adx   
8 [0x8]:            loadval ebx   
9 [0x9]:            add ecx, ebx -> ebx   
10 [0xa]:            mov8 ebx, ebx   
11 [0xb]:            rmov adx, ebx   
12 [0xc]:            rstore ebx   
13 [0xd]:            call @3425 // <std#bool.check_value>   
14 [0xe]:            loadval ebx   
15 [0xf]:            return_val ebx   
16 [0x10]:            ret   


overload function: std#bool.operator-=[3353] params(1) in file: lib\support\/0.2.9//primitives.sharp:1370:8: note:  
		    def operator-=(num : ulong)  := check_value(value-=num.value);
		       ^

0 [0x0]: line: 1370 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            sub ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator-=[3354] params(1) in file: lib\support\/0.2.9//primitives.sharp:1371:8: note:  
		    def operator-=(num : long)   := check_value(value-=num.value);
		       ^

0 [0x0]: line: 1371 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            sub ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator-=[3355] params(1) in file: lib\support\/0.2.9//primitives.sharp:1372:8: note:  
		    def operator-=(num : uint)   := check_value(value-=num.value);
		       ^

0 [0x0]: line: 1372 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            sub ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator-=[3356] params(1) in file: lib\support\/0.2.9//primitives.sharp:1373:8: note:  
		    def operator-=(num : int)    := check_value(value-=num.value);
		       ^

0 [0x0]: line: 1373 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            sub ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator-=[3357] params(1) in file: lib\support\/0.2.9//primitives.sharp:1374:8: note:  
		    def operator-=(num : ushort) := check_value(value-=num.value);
		       ^

0 [0x0]: line: 1374 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            sub ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator-=[3358] params(1) in file: lib\support\/0.2.9//primitives.sharp:1375:8: note:  
		    def operator-=(num : short)  := check_value(value-=num.value);
		       ^

0 [0x0]: line: 1375 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            sub ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator-=[3359] params(1) in file: lib\support\/0.2.9//primitives.sharp:1376:8: note:  
		    def operator-=(num : uchar)  := check_value(value-=num.value);
		       ^

0 [0x0]: line: 1376 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            sub ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator-=[3360] params(1) in file: lib\support\/0.2.9//primitives.sharp:1377:8: note:  
		    def operator-=(num : char)   := check_value(value-=num.value);
		       ^

0 [0x0]: line: 1377 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            sub ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator-=[3361] params(1) in file: lib\support\/0.2.9//primitives.sharp:1378:8: note:  
		    def operator-=(num : byte)   := check_value(value-=num.value);
		       ^

0 [0x0]: line: 1378 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            sub ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator-=[3362] params(1) in file: lib\support\/0.2.9//primitives.sharp:1379:8: note:  
		    def operator-=(num : bool)   := check_value(value-=num.value);
		       ^

0 [0x0]: line: 1379 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            sub ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator-=[3363] params(1) in file: lib\support\/0.2.9//primitives.sharp:1380:8: note:  
		    def operator-=(num : double)   := check_value(value-=num.value);
		       ^

0 [0x0]: line: 1380 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            sub ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator-=[3364] params(1) in file: lib\support\/0.2.9//primitives.sharp:1381:8: note:  
		    def operator-=(num : var)    := check_value(value-=num);
		       ^

0 [0x0]: line: 1381 pushl 0   
1 [0x1]:            ipushl #1   
2 [0x2]:            movl 0   
3 [0x3]:            movn #0   
5 [0x5]:            movi #0, adx   
7 [0x7]:            iaload ecx, adx   
8 [0x8]:            loadval ebx   
9 [0x9]:            sub ecx, ebx -> ebx   
10 [0xa]:            mov8 ebx, ebx   
11 [0xb]:            rmov adx, ebx   
12 [0xc]:            rstore ebx   
13 [0xd]:            call @3425 // <std#bool.check_value>   
14 [0xe]:            loadval ebx   
15 [0xf]:            return_val ebx   
16 [0x10]:            ret   


overload function: std#bool.operator*=[3365] params(1) in file: lib\support\/0.2.9//primitives.sharp:1383:8: note:  
		    def operator*=(num : ulong)  := check_value(value*=num.value);
		       ^

0 [0x0]: line: 1383 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mul ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator*=[3366] params(1) in file: lib\support\/0.2.9//primitives.sharp:1384:8: note:  
		    def operator*=(num : long)   := check_value(value*=num.value);
		       ^

0 [0x0]: line: 1384 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mul ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator*=[3367] params(1) in file: lib\support\/0.2.9//primitives.sharp:1385:8: note:  
		    def operator*=(num : uint)   := check_value(value*=num.value);
		       ^

0 [0x0]: line: 1385 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mul ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator*=[3368] params(1) in file: lib\support\/0.2.9//primitives.sharp:1386:8: note:  
		    def operator*=(num : int)    := check_value(value*=num.value);
		       ^

0 [0x0]: line: 1386 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mul ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator*=[3369] params(1) in file: lib\support\/0.2.9//primitives.sharp:1387:8: note:  
		    def operator*=(num : ushort) := check_value(value*=num.value);
		       ^

0 [0x0]: line: 1387 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mul ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator*=[3370] params(1) in file: lib\support\/0.2.9//primitives.sharp:1388:8: note:  
		    def operator*=(num : short)  := check_value(value*=num.value);
		       ^

0 [0x0]: line: 1388 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mul ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator*=[3371] params(1) in file: lib\support\/0.2.9//primitives.sharp:1389:8: note:  
		    def operator*=(num : uchar)  := check_value(value*=num.value);
		       ^

0 [0x0]: line: 1389 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mul ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator*=[3372] params(1) in file: lib\support\/0.2.9//primitives.sharp:1390:8: note:  
		    def operator*=(num : char)   := check_value(value*=num.value);
		       ^

0 [0x0]: line: 1390 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mul ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator*=[3373] params(1) in file: lib\support\/0.2.9//primitives.sharp:1391:8: note:  
		    def operator*=(num : byte)   := check_value(value*=num.value);
		       ^

0 [0x0]: line: 1391 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mul ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator*=[3374] params(1) in file: lib\support\/0.2.9//primitives.sharp:1392:8: note:  
		    def operator*=(num : bool)   := check_value(value*=num.value);
		       ^

0 [0x0]: line: 1392 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mul ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator*=[3375] params(1) in file: lib\support\/0.2.9//primitives.sharp:1393:8: note:  
		    def operator*=(num : double)   := check_value(value*=num.value);
		       ^

0 [0x0]: line: 1393 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mul ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator*=[3376] params(1) in file: lib\support\/0.2.9//primitives.sharp:1394:8: note:  
		    def operator*=(num : var)    := check_value(value*=num);
		       ^

0 [0x0]: line: 1394 pushl 0   
1 [0x1]:            ipushl #1   
2 [0x2]:            movl 0   
3 [0x3]:            movn #0   
5 [0x5]:            movi #0, adx   
7 [0x7]:            iaload ecx, adx   
8 [0x8]:            loadval ebx   
9 [0x9]:            mul ecx, ebx -> ebx   
10 [0xa]:            mov8 ebx, ebx   
11 [0xb]:            rmov adx, ebx   
12 [0xc]:            rstore ebx   
13 [0xd]:            call @3425 // <std#bool.check_value>   
14 [0xe]:            loadval ebx   
15 [0xf]:            return_val ebx   
16 [0x10]:            ret   


overload function: std#bool.operator/=[3377] params(1) in file: lib\support\/0.2.9//primitives.sharp:1396:8: note:  
		    def operator/=(num : ulong)  := check_value(value/=num.value);
		       ^

0 [0x0]: line: 1396 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            div ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator/=[3378] params(1) in file: lib\support\/0.2.9//primitives.sharp:1397:8: note:  
		    def operator/=(num : long)   := check_value(value/=num.value);
		       ^

0 [0x0]: line: 1397 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            div ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator/=[3379] params(1) in file: lib\support\/0.2.9//primitives.sharp:1398:8: note:  
		    def operator/=(num : uint)   := check_value(value/=num.value);
		       ^

0 [0x0]: line: 1398 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            div ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator/=[3380] params(1) in file: lib\support\/0.2.9//primitives.sharp:1399:8: note:  
		    def operator/=(num : int)    := check_value(value/=num.value);
		       ^

0 [0x0]: line: 1399 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            div ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator/=[3381] params(1) in file: lib\support\/0.2.9//primitives.sharp:1400:8: note:  
		    def operator/=(num : ushort) := check_value(value/=num.value);
		       ^

0 [0x0]: line: 1400 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            div ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator/=[3382] params(1) in file: lib\support\/0.2.9//primitives.sharp:1401:8: note:  
		    def operator/=(num : short)  := check_value(value/=num.value);
		       ^

0 [0x0]: line: 1401 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            div ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator/=[3383] params(1) in file: lib\support\/0.2.9//primitives.sharp:1402:8: note:  
		    def operator/=(num : uchar)  := check_value(value/=num.value);
		       ^

0 [0x0]: line: 1402 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            div ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator/=[3384] params(1) in file: lib\support\/0.2.9//primitives.sharp:1403:8: note:  
		    def operator/=(num : char)   := check_value(value/=num.value);
		       ^

0 [0x0]: line: 1403 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            div ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator/=[3385] params(1) in file: lib\support\/0.2.9//primitives.sharp:1404:8: note:  
		    def operator/=(num : byte)   := check_value(value/=num.value);
		       ^

0 [0x0]: line: 1404 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            div ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator/=[3386] params(1) in file: lib\support\/0.2.9//primitives.sharp:1405:8: note:  
		    def operator/=(num : bool)   := check_value(value/=num.value);
		       ^

0 [0x0]: line: 1405 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            div ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator/=[3387] params(1) in file: lib\support\/0.2.9//primitives.sharp:1406:8: note:  
		    def operator/=(num : double)   := check_value(value/=num.value);
		       ^

0 [0x0]: line: 1406 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            div ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator/=[3388] params(1) in file: lib\support\/0.2.9//primitives.sharp:1407:8: note:  
		    def operator/=(num : var)    := check_value(value/=num);
		       ^

0 [0x0]: line: 1407 pushl 0   
1 [0x1]:            ipushl #1   
2 [0x2]:            movl 0   
3 [0x3]:            movn #0   
5 [0x5]:            movi #0, adx   
7 [0x7]:            iaload ecx, adx   
8 [0x8]:            loadval ebx   
9 [0x9]:            div ecx, ebx -> ebx   
10 [0xa]:            mov8 ebx, ebx   
11 [0xb]:            rmov adx, ebx   
12 [0xc]:            rstore ebx   
13 [0xd]:            call @3425 // <std#bool.check_value>   
14 [0xe]:            loadval ebx   
15 [0xf]:            return_val ebx   
16 [0x10]:            ret   


overload function: std#bool.operator%=[3389] params(1) in file: lib\support\/0.2.9//primitives.sharp:1409:8: note:  
		    def operator%=(num : ulong)  := check_value(value%=num.value);
		       ^

0 [0x0]: line: 1409 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mod ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator%=[3390] params(1) in file: lib\support\/0.2.9//primitives.sharp:1410:8: note:  
		    def operator%=(num : long)   := check_value(value%=num.value);
		       ^

0 [0x0]: line: 1410 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mod ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator%=[3391] params(1) in file: lib\support\/0.2.9//primitives.sharp:1411:8: note:  
		    def operator%=(num : uint)   := check_value(value%=num.value);
		       ^

0 [0x0]: line: 1411 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mod ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator%=[3392] params(1) in file: lib\support\/0.2.9//primitives.sharp:1412:8: note:  
		    def operator%=(num : int)    := check_value(value%=num.value);
		       ^

0 [0x0]: line: 1412 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mod ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator%=[3393] params(1) in file: lib\support\/0.2.9//primitives.sharp:1413:8: note:  
		    def operator%=(num : ushort) := check_value(value%=num.value);
		       ^

0 [0x0]: line: 1413 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mod ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator%=[3394] params(1) in file: lib\support\/0.2.9//primitives.sharp:1414:8: note:  
		    def operator%=(num : short)  := check_value(value%=num.value);
		       ^

0 [0x0]: line: 1414 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mod ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator%=[3395] params(1) in file: lib\support\/0.2.9//primitives.sharp:1415:8: note:  
		    def operator%=(num : uchar)  := check_value(value%=num.value);
		       ^

0 [0x0]: line: 1415 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mod ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator%=[3396] params(1) in file: lib\support\/0.2.9//primitives.sharp:1416:8: note:  
		    def operator%=(num : char)   := check_value(value%=num.value);
		       ^

0 [0x0]: line: 1416 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mod ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator%=[3397] params(1) in file: lib\support\/0.2.9//primitives.sharp:1417:8: note:  
		    def operator%=(num : byte)   := check_value(value%=num.value);
		       ^

0 [0x0]: line: 1417 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mod ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator%=[3398] params(1) in file: lib\support\/0.2.9//primitives.sharp:1418:8: note:  
		    def operator%=(num : bool)   := check_value(value%=num.value);
		       ^

0 [0x0]: line: 1418 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mod ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator%=[3399] params(1) in file: lib\support\/0.2.9//primitives.sharp:1419:8: note:  
		    def operator%=(num : double)   := check_value(value%=num.value);
		       ^

0 [0x0]: line: 1419 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            mod ecx, ebx -> ebx   
16 [0x10]:            mov8 ebx, ebx   
17 [0x11]:            rmov adx, ebx   
18 [0x12]:            rstore ebx   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator%=[3400] params(1) in file: lib\support\/0.2.9//primitives.sharp:1420:8: note:  
		    def operator%=(num : var)    := check_value(value%=num);
		       ^

0 [0x0]: line: 1420 pushl 0   
1 [0x1]:            ipushl #1   
2 [0x2]:            movl 0   
3 [0x3]:            movn #0   
5 [0x5]:            movi #0, adx   
7 [0x7]:            iaload ecx, adx   
8 [0x8]:            loadval ebx   
9 [0x9]:            mod ecx, ebx -> ebx   
10 [0xa]:            mov8 ebx, ebx   
11 [0xb]:            rmov adx, ebx   
12 [0xc]:            rstore ebx   
13 [0xd]:            call @3425 // <std#bool.check_value>   
14 [0xe]:            loadval ebx   
15 [0xf]:            return_val ebx   
16 [0x10]:            ret   


overload function: std#bool.operator&=[3401] params(1) in file: lib\support\/0.2.9//primitives.sharp:1422:8: note:  
		    def operator&=(num : ulong)  := check_value(value&=num.value);
		       ^

0 [0x0]: line: 1422 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            and ecx, ebx   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            rstore cmt   
18 [0x12]:            call @3425 // <std#bool.check_value>   
19 [0x13]:            loadval ebx   
20 [0x14]:            return_val ebx   
21 [0x15]:            ret   


overload function: std#bool.operator&=[3402] params(1) in file: lib\support\/0.2.9//primitives.sharp:1423:8: note:  
		    def operator&=(num : long)   := check_value(value&=num.value);
		       ^

0 [0x0]: line: 1423 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            and ecx, ebx   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            rstore cmt   
18 [0x12]:            call @3425 // <std#bool.check_value>   
19 [0x13]:            loadval ebx   
20 [0x14]:            return_val ebx   
21 [0x15]:            ret   


overload function: std#bool.operator&=[3403] params(1) in file: lib\support\/0.2.9//primitives.sharp:1424:8: note:  
		    def operator&=(num : uint)   := check_value(value&=num.value);
		       ^

0 [0x0]: line: 1424 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            and ecx, ebx   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            rstore cmt   
18 [0x12]:            call @3425 // <std#bool.check_value>   
19 [0x13]:            loadval ebx   
20 [0x14]:            return_val ebx   
21 [0x15]:            ret   


overload function: std#bool.operator&=[3404] params(1) in file: lib\support\/0.2.9//primitives.sharp:1425:8: note:  
		    def operator&=(num : int)    := check_value(value&=num.value);
		       ^

0 [0x0]: line: 1425 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            and ecx, ebx   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            rstore cmt   
18 [0x12]:            call @3425 // <std#bool.check_value>   
19 [0x13]:            loadval ebx   
20 [0x14]:            return_val ebx   
21 [0x15]:            ret   


overload function: std#bool.operator&=[3405] params(1) in file: lib\support\/0.2.9//primitives.sharp:1426:8: note:  
		    def operator&=(num : ushort) := check_value(value&=num.value);
		       ^

0 [0x0]: line: 1426 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            and ecx, ebx   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            rstore cmt   
18 [0x12]:            call @3425 // <std#bool.check_value>   
19 [0x13]:            loadval ebx   
20 [0x14]:            return_val ebx   
21 [0x15]:            ret   


overload function: std#bool.operator&=[3406] params(1) in file: lib\support\/0.2.9//primitives.sharp:1427:8: note:  
		    def operator&=(num : short)  := check_value(value&=num.value);
		       ^

0 [0x0]: line: 1427 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            and ecx, ebx   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            rstore cmt   
18 [0x12]:            call @3425 // <std#bool.check_value>   
19 [0x13]:            loadval ebx   
20 [0x14]:            return_val ebx   
21 [0x15]:            ret   


overload function: std#bool.operator&=[3407] params(1) in file: lib\support\/0.2.9//primitives.sharp:1428:8: note:  
		    def operator&=(num : uchar)  := check_value(value&=num.value);
		       ^

0 [0x0]: line: 1428 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            and ecx, ebx   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            rstore cmt   
18 [0x12]:            call @3425 // <std#bool.check_value>   
19 [0x13]:            loadval ebx   
20 [0x14]:            return_val ebx   
21 [0x15]:            ret   


overload function: std#bool.operator&=[3408] params(1) in file: lib\support\/0.2.9//primitives.sharp:1429:8: note:  
		    def operator&=(num : char)   := check_value(value&=num.value);
		       ^

0 [0x0]: line: 1429 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            and ecx, ebx   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            rstore cmt   
18 [0x12]:            call @3425 // <std#bool.check_value>   
19 [0x13]:            loadval ebx   
20 [0x14]:            return_val ebx   
21 [0x15]:            ret   


overload function: std#bool.operator&=[3409] params(1) in file: lib\support\/0.2.9//primitives.sharp:1430:8: note:  
		    def operator&=(num : byte)   := check_value(value&=num.value);
		       ^

0 [0x0]: line: 1430 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            and ecx, ebx   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            rstore cmt   
18 [0x12]:            call @3425 // <std#bool.check_value>   
19 [0x13]:            loadval ebx   
20 [0x14]:            return_val ebx   
21 [0x15]:            ret   


overload function: std#bool.operator&=[3410] params(1) in file: lib\support\/0.2.9//primitives.sharp:1431:8: note:  
		    def operator&=(num : bool)   := check_value(value&=num.value);
		       ^

0 [0x0]: line: 1431 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            and ecx, ebx   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            rstore cmt   
18 [0x12]:            call @3425 // <std#bool.check_value>   
19 [0x13]:            loadval ebx   
20 [0x14]:            return_val ebx   
21 [0x15]:            ret   


overload function: std#bool.operator&=[3411] params(1) in file: lib\support\/0.2.9//primitives.sharp:1432:8: note:  
		    def operator&=(num : double)   := check_value(value&=num.value);
		       ^

0 [0x0]: line: 1432 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            and ecx, ebx   
16 [0x10]:            rmov adx, cmt   
17 [0x11]:            rstore cmt   
18 [0x12]:            call @3425 // <std#bool.check_value>   
19 [0x13]:            loadval ebx   
20 [0x14]:            return_val ebx   
21 [0x15]:            ret   


overload function: std#bool.operator&=[3412] params(1) in file: lib\support\/0.2.9//primitives.sharp:1433:8: note:  
		    def operator&=(num : var)    := check_value(value&=num);
		       ^

0 [0x0]: line: 1433 pushl 0   
1 [0x1]:            ipushl #1   
2 [0x2]:            movl 0   
3 [0x3]:            movn #0   
5 [0x5]:            movi #0, adx   
7 [0x7]:            iaload ecx, adx   
8 [0x8]:            loadval ebx   
9 [0x9]:            and ecx, ebx   
10 [0xa]:            rmov adx, cmt   
11 [0xb]:            rstore cmt   
12 [0xc]:            call @3425 // <std#bool.check_value>   
13 [0xd]:            loadval ebx   
14 [0xe]:            return_val ebx   
15 [0xf]:            ret   


overload function: std#bool.operator|=[3413] params(1) in file: lib\support\/0.2.9//primitives.sharp:1435:8: note:  
		    def operator|=(num : ulong)  := check_value(value|=num.value);
		       ^

0 [0x0]: line: 1435 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            or ecx, ebx   
16 [0x10]:            mov8 cmt, cmt   
17 [0x11]:            rmov adx, cmt   
18 [0x12]:            rstore cmt   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator|=[3414] params(1) in file: lib\support\/0.2.9//primitives.sharp:1436:8: note:  
		    def operator|=(num : long)   := check_value(value|=num.value);
		       ^

0 [0x0]: line: 1436 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            or ecx, ebx   
16 [0x10]:            mov8 cmt, cmt   
17 [0x11]:            rmov adx, cmt   
18 [0x12]:            rstore cmt   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator|=[3415] params(1) in file: lib\support\/0.2.9//primitives.sharp:1437:8: note:  
		    def operator|=(num : uint)   := check_value(value|=num.value);
		       ^

0 [0x0]: line: 1437 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            or ecx, ebx   
16 [0x10]:            mov8 cmt, cmt   
17 [0x11]:            rmov adx, cmt   
18 [0x12]:            rstore cmt   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator|=[3416] params(1) in file: lib\support\/0.2.9//primitives.sharp:1438:8: note:  
		    def operator|=(num : int)    := check_value(value|=num.value);
		       ^

0 [0x0]: line: 1438 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            or ecx, ebx   
16 [0x10]:            mov8 cmt, cmt   
17 [0x11]:            rmov adx, cmt   
18 [0x12]:            rstore cmt   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator|=[3417] params(1) in file: lib\support\/0.2.9//primitives.sharp:1439:8: note:  
		    def operator|=(num : ushort) := check_value(value|=num.value);
		       ^

0 [0x0]: line: 1439 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            or ecx, ebx   
16 [0x10]:            mov8 cmt, cmt   
17 [0x11]:            rmov adx, cmt   
18 [0x12]:            rstore cmt   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator|=[3418] params(1) in file: lib\support\/0.2.9//primitives.sharp:1440:8: note:  
		    def operator|=(num : short)  := check_value(value|=num.value);
		       ^

0 [0x0]: line: 1440 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            or ecx, ebx   
16 [0x10]:            mov8 cmt, cmt   
17 [0x11]:            rmov adx, cmt   
18 [0x12]:            rstore cmt   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator|=[3419] params(1) in file: lib\support\/0.2.9//primitives.sharp:1441:8: note:  
		    def operator|=(num : uchar)  := check_value(value|=num.value);
		       ^

0 [0x0]: line: 1441 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            or ecx, ebx   
16 [0x10]:            mov8 cmt, cmt   
17 [0x11]:            rmov adx, cmt   
18 [0x12]:            rstore cmt   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator|=[3420] params(1) in file: lib\support\/0.2.9//primitives.sharp:1442:8: note:  
		    def operator|=(num : char)   := check_value(value|=num.value);
		       ^

0 [0x0]: line: 1442 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            or ecx, ebx   
16 [0x10]:            mov8 cmt, cmt   
17 [0x11]:            rmov adx, cmt   
18 [0x12]:            rstore cmt   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator|=[3421] params(1) in file: lib\support\/0.2.9//primitives.sharp:1443:8: note:  
		    def operator|=(num : byte)   := check_value(value|=num.value);
		       ^

0 [0x0]: line: 1443 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            or ecx, ebx   
16 [0x10]:            mov8 cmt, cmt   
17 [0x11]:            rmov adx, cmt   
18 [0x12]:            rstore cmt   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator|=[3422] params(1) in file: lib\support\/0.2.9//primitives.sharp:1444:8: note:  
		    def operator|=(num : bool)   := check_value(value|=num.value);
		       ^

0 [0x0]: line: 1444 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            or ecx, ebx   
16 [0x10]:            mov8 cmt, cmt   
17 [0x11]:            rmov adx, cmt   
18 [0x12]:            rstore cmt   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator|=[3423] params(1) in file: lib\support\/0.2.9//primitives.sharp:1445:8: note:  
		    def operator|=(num : double)   := check_value(value|=num.value);
		       ^

0 [0x0]: line: 1445 pushl 0   
1 [0x1]:            movl 1   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ebx, adx   
7 [0x7]:            rstore ebx   
8 [0x8]:            movl 0   
9 [0x9]:            movn #0   
11 [0xb]:            movi #0, adx   
13 [0xd]:            iaload ecx, adx   
14 [0xe]:            loadval ebx   
15 [0xf]:            or ecx, ebx   
16 [0x10]:            mov8 cmt, cmt   
17 [0x11]:            rmov adx, cmt   
18 [0x12]:            rstore cmt   
19 [0x13]:            call @3425 // <std#bool.check_value>   
20 [0x14]:            loadval ebx   
21 [0x15]:            return_val ebx   
22 [0x16]:            ret   


overload function: std#bool.operator|=[3424] params(1) in file: lib\support\/0.2.9//primitives.sharp:1446:8: note:  
		    def operator|=(num : var)    := check_value(value|=num);
		       ^

0 [0x0]: line: 1446 pushl 0   
1 [0x1]:            ipushl #1   
2 [0x2]:            movl 0   
3 [0x3]:            movn #0   
5 [0x5]:            movi #0, adx   
7 [0x7]:            iaload ecx, adx   
8 [0x8]:            loadval ebx   
9 [0x9]:            or ecx, ebx   
10 [0xa]:            mov8 cmt, cmt   
11 [0xb]:            rmov adx, cmt   
12 [0xc]:            rstore cmt   
13 [0xd]:            call @3425 // <std#bool.check_value>   
14 [0xe]:            loadval ebx   
15 [0xf]:            return_val ebx   
16 [0x10]:            ret   


function: std#bool.check_value[3425] params(1) in file: lib\support\/0.2.9//primitives.sharp:1448:8: note:  
		    def check_value(new_val: var) : var {
		       ^

0 [0x0]: line: 1449 loadl ebx, fp+1   
1 [0x1]:            skne ebx // pc = 5   
2 [0x2]:            movi #1, ebx   
4 [0x4]:            skip @2 // pc = 6   
5 [0x5]:            movi #0, ebx   
7 [0x7]:            return_val ebx   
8 [0x8]:            ret   


function: std#bool.to_string[3426] params(0) in file: lib\support\/0.2.9//primitives.sharp:1452:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 1453 new_class @75 // std#string   
2 [0x2]:            dup    
3 [0x3]:            movl 0   
4 [0x4]:            movn #0   
6 [0x6]:            movi #0, adx   
8 [0x8]:            iaload ebx, adx   
9 [0x9]:            skne ebx // pc = 13   
10 [0xa]:            newstr @4 // true   
11 [0xb]:            popobj2    
12 [0xc]:            skip @2 // pc = 14   
13 [0xd]:            newstr @5 // false   
14 [0xe]:            popobj2    
15 [0xf]:            pushobj   
16 [0x10]:            call @3546 // <std#string.string>   
17 [0x11]:            popobj2    
18 [0x12]:            returnobj   
19 [0x13]:            ret   


constructor: std#bool.bool[3427] params(0) in file: lib\support\/0.2.9//primitives.sharp:1337:6: note:  
		class bool base integer<_int8> {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1686 // <std#integer<_int8>.integer>   
2 [0x2]:         ret   


constructor: std#double.double[3428] params(1) in file: lib\support\/0.2.9//primitives.sharp:1458:11: note:  
		    double(i : long) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1687 // <std#integer<var>.integer>   
9 [0x9]:         ret   


constructor: std#double.double[3429] params(1) in file: lib\support\/0.2.9//primitives.sharp:1459:11: note:  
		    double(i : int) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1687 // <std#integer<var>.integer>   
9 [0x9]:         ret   


constructor: std#double.double[3430] params(1) in file: lib\support\/0.2.9//primitives.sharp:1460:11: note:  
		    double(i : short) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1687 // <std#integer<var>.integer>   
9 [0x9]:         ret   


constructor: std#double.double[3431] params(1) in file: lib\support\/0.2.9//primitives.sharp:1461:11: note:  
		    double(i : char) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1687 // <std#integer<var>.integer>   
9 [0x9]:         ret   


constructor: std#double.double[3432] params(1) in file: lib\support\/0.2.9//primitives.sharp:1462:11: note:  
		    double(i : byte) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1687 // <std#integer<var>.integer>   
9 [0x9]:         ret   


constructor: std#double.double[3433] params(1) in file: lib\support\/0.2.9//primitives.sharp:1463:11: note:  
		    double(i : bool) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1687 // <std#integer<var>.integer>   
9 [0x9]:         ret   


constructor: std#double.double[3434] params(1) in file: lib\support\/0.2.9//primitives.sharp:1464:11: note:  
		    double(i : ulong) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1687 // <std#integer<var>.integer>   
9 [0x9]:         ret   


constructor: std#double.double[3435] params(1) in file: lib\support\/0.2.9//primitives.sharp:1465:11: note:  
		    double(i : uint) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1687 // <std#integer<var>.integer>   
9 [0x9]:         ret   


constructor: std#double.double[3436] params(1) in file: lib\support\/0.2.9//primitives.sharp:1466:11: note:  
		    double(i : ushort) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1687 // <std#integer<var>.integer>   
9 [0x9]:         ret   


constructor: std#double.double[3437] params(1) in file: lib\support\/0.2.9//primitives.sharp:1467:11: note:  
		    double(i : uchar) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1687 // <std#integer<var>.integer>   
9 [0x9]:         ret   


constructor: std#double.double[3438] params(1) in file: lib\support\/0.2.9//primitives.sharp:1468:11: note:  
		    double(i : double) -> base(i.value) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         movl 1   
2 [0x2]:         movn #0   
4 [0x4]:         movi #0, adx   
6 [0x6]:         iaload ebx, adx   
7 [0x7]:         rstore ebx   
8 [0x8]:         call @1687 // <std#integer<var>.integer>   
9 [0x9]:         ret   


constructor: std#double.double[3439] params(1) in file: lib\support\/0.2.9//primitives.sharp:1469:11: note:  
		    double(i : var) -> base(i) {}
		          ^

0 [0x0]:         pushl 0   
1 [0x1]:         ipushl #1   
2 [0x2]:         call @1687 // <std#integer<var>.integer>   
3 [0x3]:         ret   


overload function: std#double.operator![3440] params(0) in file: lib\support\/0.2.9//primitives.sharp:1471:8: note:  
		    def operator!() := (!value);
		       ^

0 [0x0]: line: 1471 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            not ebx, ebx   
7 [0x7]:            return_val ebx   
8 [0x8]:            ret   


overload function: std#double.operator++[3441] params(0) in file: lib\support\/0.2.9//primitives.sharp:1472:8: note:  
		    def operator++() := (++value);
		       ^

0 [0x0]: line: 1472 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            inc ebx   
7 [0x7]:            movi #0, adx   
9 [0x9]:            rmov adx, ebx   
10 [0xa]:            return_val ebx   
11 [0xb]:            ret   


overload function: std#double.operator++[3442] params(1) in file: lib\support\/0.2.9//primitives.sharp:1473:8: note:  
		    def operator++(num : var) := (value++);
		       ^

0 [0x0]: line: 1473 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            movr egx, ebx   
7 [0x7]:            inc ebx   
8 [0x8]:            movi #0, adx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            movr ebx, egx   
12 [0xc]:            return_val ebx   
13 [0xd]:            ret   


overload function: std#double.operator--[3443] params(0) in file: lib\support\/0.2.9//primitives.sharp:1474:8: note:  
		    def operator--() := (--value);
		       ^

0 [0x0]: line: 1474 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            dec ebx   
7 [0x7]:            movi #0, adx   
9 [0x9]:            rmov adx, ebx   
10 [0xa]:            return_val ebx   
11 [0xb]:            ret   


overload function: std#double.operator--[3444] params(1) in file: lib\support\/0.2.9//primitives.sharp:1475:8: note:  
		    def operator--(num : var) := (value--);
		       ^

0 [0x0]: line: 1475 movl 0   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            movr egx, ebx   
7 [0x7]:            dec ebx   
8 [0x8]:            movi #0, adx   
10 [0xa]:            rmov adx, ebx   
11 [0xb]:            movr ebx, egx   
12 [0xc]:            return_val ebx   
13 [0xd]:            ret   


overload function: std#double.operator+=[3445] params(1) in file: lib\support\/0.2.9//primitives.sharp:1477:8: note:  
		    def operator+=(num : ulong)  := (value+=num.value);
		       ^

0 [0x0]: line: 1477 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator+=[3446] params(1) in file: lib\support\/0.2.9//primitives.sharp:1478:8: note:  
		    def operator+=(num : long)   := (value+=num.value);
		       ^

0 [0x0]: line: 1478 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator+=[3447] params(1) in file: lib\support\/0.2.9//primitives.sharp:1479:8: note:  
		    def operator+=(num : uint)   := (value+=num.value);
		       ^

0 [0x0]: line: 1479 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator+=[3448] params(1) in file: lib\support\/0.2.9//primitives.sharp:1480:8: note:  
		    def operator+=(num : int)    := (value+=num.value);
		       ^

0 [0x0]: line: 1480 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator+=[3449] params(1) in file: lib\support\/0.2.9//primitives.sharp:1481:8: note:  
		    def operator+=(num : ushort) := (value+=num.value);
		       ^

0 [0x0]: line: 1481 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator+=[3450] params(1) in file: lib\support\/0.2.9//primitives.sharp:1482:8: note:  
		    def operator+=(num : short)  := (value+=num.value);
		       ^

0 [0x0]: line: 1482 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator+=[3451] params(1) in file: lib\support\/0.2.9//primitives.sharp:1483:8: note:  
		    def operator+=(num : uchar)  := (value+=num.value);
		       ^

0 [0x0]: line: 1483 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator+=[3452] params(1) in file: lib\support\/0.2.9//primitives.sharp:1484:8: note:  
		    def operator+=(num : char)   := (value+=num.value);
		       ^

0 [0x0]: line: 1484 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator+=[3453] params(1) in file: lib\support\/0.2.9//primitives.sharp:1485:8: note:  
		    def operator+=(num : byte)   := (value+=num.value);
		       ^

0 [0x0]: line: 1485 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator+=[3454] params(1) in file: lib\support\/0.2.9//primitives.sharp:1486:8: note:  
		    def operator+=(num : bool)   := (value+=num.value);
		       ^

0 [0x0]: line: 1486 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator+=[3455] params(1) in file: lib\support\/0.2.9//primitives.sharp:1487:8: note:  
		    def operator+=(num : double)   := (value+=num.value);
		       ^

0 [0x0]: line: 1487 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            add ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator+=[3456] params(1) in file: lib\support\/0.2.9//primitives.sharp:1488:8: note:  
		    def operator+=(num : var)    := (value+=num);
		       ^

0 [0x0]: line: 1488 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            add ecx, ebx -> ebx   
9 [0x9]:            rmov adx, ebx   
10 [0xa]:            returnobj   
11 [0xb]:            ret   


overload function: std#double.operator-=[3457] params(1) in file: lib\support\/0.2.9//primitives.sharp:1490:8: note:  
		    def operator-=(num : ulong)  := (value-=num.value);
		       ^

0 [0x0]: line: 1490 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator-=[3458] params(1) in file: lib\support\/0.2.9//primitives.sharp:1491:8: note:  
		    def operator-=(num : long)   := (value-=num.value);
		       ^

0 [0x0]: line: 1491 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator-=[3459] params(1) in file: lib\support\/0.2.9//primitives.sharp:1492:8: note:  
		    def operator-=(num : uint)   := (value-=num.value);
		       ^

0 [0x0]: line: 1492 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator-=[3460] params(1) in file: lib\support\/0.2.9//primitives.sharp:1493:8: note:  
		    def operator-=(num : int)    := (value-=num.value);
		       ^

0 [0x0]: line: 1493 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator-=[3461] params(1) in file: lib\support\/0.2.9//primitives.sharp:1494:8: note:  
		    def operator-=(num : ushort) := (value-=num.value);
		       ^

0 [0x0]: line: 1494 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator-=[3462] params(1) in file: lib\support\/0.2.9//primitives.sharp:1495:8: note:  
		    def operator-=(num : short)  := (value-=num.value);
		       ^

0 [0x0]: line: 1495 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator-=[3463] params(1) in file: lib\support\/0.2.9//primitives.sharp:1496:8: note:  
		    def operator-=(num : uchar)  := (value-=num.value);
		       ^

0 [0x0]: line: 1496 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator-=[3464] params(1) in file: lib\support\/0.2.9//primitives.sharp:1497:8: note:  
		    def operator-=(num : char)   := (value-=num.value);
		       ^

0 [0x0]: line: 1497 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator-=[3465] params(1) in file: lib\support\/0.2.9//primitives.sharp:1498:8: note:  
		    def operator-=(num : byte)   := (value-=num.value);
		       ^

0 [0x0]: line: 1498 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator-=[3466] params(1) in file: lib\support\/0.2.9//primitives.sharp:1499:8: note:  
		    def operator-=(num : bool)   := (value-=num.value);
		       ^

0 [0x0]: line: 1499 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator-=[3467] params(1) in file: lib\support\/0.2.9//primitives.sharp:1500:8: note:  
		    def operator-=(num : double)   := (value-=num.value);
		       ^

0 [0x0]: line: 1500 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            sub ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator-=[3468] params(1) in file: lib\support\/0.2.9//primitives.sharp:1501:8: note:  
		    def operator-=(num : var)    := (value-=num);
		       ^

0 [0x0]: line: 1501 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            sub ecx, ebx -> ebx   
9 [0x9]:            rmov adx, ebx   
10 [0xa]:            returnobj   
11 [0xb]:            ret   


overload function: std#double.operator*=[3469] params(1) in file: lib\support\/0.2.9//primitives.sharp:1503:8: note:  
		    def operator*=(num : ulong)  := (value*=num.value);
		       ^

0 [0x0]: line: 1503 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator*=[3470] params(1) in file: lib\support\/0.2.9//primitives.sharp:1504:8: note:  
		    def operator*=(num : long)   := (value*=num.value);
		       ^

0 [0x0]: line: 1504 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator*=[3471] params(1) in file: lib\support\/0.2.9//primitives.sharp:1505:8: note:  
		    def operator*=(num : uint)   := (value*=num.value);
		       ^

0 [0x0]: line: 1505 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator*=[3472] params(1) in file: lib\support\/0.2.9//primitives.sharp:1506:8: note:  
		    def operator*=(num : int)    := (value*=num.value);
		       ^

0 [0x0]: line: 1506 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator*=[3473] params(1) in file: lib\support\/0.2.9//primitives.sharp:1507:8: note:  
		    def operator*=(num : ushort) := (value*=num.value);
		       ^

0 [0x0]: line: 1507 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator*=[3474] params(1) in file: lib\support\/0.2.9//primitives.sharp:1508:8: note:  
		    def operator*=(num : short)  := (value*=num.value);
		       ^

0 [0x0]: line: 1508 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator*=[3475] params(1) in file: lib\support\/0.2.9//primitives.sharp:1509:8: note:  
		    def operator*=(num : uchar)  := (value*=num.value);
		       ^

0 [0x0]: line: 1509 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator*=[3476] params(1) in file: lib\support\/0.2.9//primitives.sharp:1510:8: note:  
		    def operator*=(num : char)   := (value*=num.value);
		       ^

0 [0x0]: line: 1510 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator*=[3477] params(1) in file: lib\support\/0.2.9//primitives.sharp:1511:8: note:  
		    def operator*=(num : byte)   := (value*=num.value);
		       ^

0 [0x0]: line: 1511 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator*=[3478] params(1) in file: lib\support\/0.2.9//primitives.sharp:1512:8: note:  
		    def operator*=(num : bool)   := (value*=num.value);
		       ^

0 [0x0]: line: 1512 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator*=[3479] params(1) in file: lib\support\/0.2.9//primitives.sharp:1513:8: note:  
		    def operator*=(num : double)   := (value*=num.value);
		       ^

0 [0x0]: line: 1513 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mul ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator*=[3480] params(1) in file: lib\support\/0.2.9//primitives.sharp:1514:8: note:  
		    def operator*=(num : var)    := (value*=num);
		       ^

0 [0x0]: line: 1514 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            mul ecx, ebx -> ebx   
9 [0x9]:            rmov adx, ebx   
10 [0xa]:            returnobj   
11 [0xb]:            ret   


overload function: std#double.operator/=[3481] params(1) in file: lib\support\/0.2.9//primitives.sharp:1516:8: note:  
		    def operator/=(num : ulong)  := (value/=num.value);
		       ^

0 [0x0]: line: 1516 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator/=[3482] params(1) in file: lib\support\/0.2.9//primitives.sharp:1517:8: note:  
		    def operator/=(num : long)   := (value/=num.value);
		       ^

0 [0x0]: line: 1517 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator/=[3483] params(1) in file: lib\support\/0.2.9//primitives.sharp:1518:8: note:  
		    def operator/=(num : uint)   := (value/=num.value);
		       ^

0 [0x0]: line: 1518 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator/=[3484] params(1) in file: lib\support\/0.2.9//primitives.sharp:1519:8: note:  
		    def operator/=(num : int)    := (value/=num.value);
		       ^

0 [0x0]: line: 1519 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator/=[3485] params(1) in file: lib\support\/0.2.9//primitives.sharp:1520:8: note:  
		    def operator/=(num : ushort) := (value/=num.value);
		       ^

0 [0x0]: line: 1520 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator/=[3486] params(1) in file: lib\support\/0.2.9//primitives.sharp:1521:8: note:  
		    def operator/=(num : short)  := (value/=num.value);
		       ^

0 [0x0]: line: 1521 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator/=[3487] params(1) in file: lib\support\/0.2.9//primitives.sharp:1522:8: note:  
		    def operator/=(num : uchar)  := (value/=num.value);
		       ^

0 [0x0]: line: 1522 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator/=[3488] params(1) in file: lib\support\/0.2.9//primitives.sharp:1523:8: note:  
		    def operator/=(num : char)   := (value/=num.value);
		       ^

0 [0x0]: line: 1523 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator/=[3489] params(1) in file: lib\support\/0.2.9//primitives.sharp:1524:8: note:  
		    def operator/=(num : byte)   := (value/=num.value);
		       ^

0 [0x0]: line: 1524 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator/=[3490] params(1) in file: lib\support\/0.2.9//primitives.sharp:1525:8: note:  
		    def operator/=(num : bool)   := (value/=num.value);
		       ^

0 [0x0]: line: 1525 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator/=[3491] params(1) in file: lib\support\/0.2.9//primitives.sharp:1526:8: note:  
		    def operator/=(num : double)   := (value/=num.value);
		       ^

0 [0x0]: line: 1526 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            div ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator/=[3492] params(1) in file: lib\support\/0.2.9//primitives.sharp:1527:8: note:  
		    def operator/=(num : var)    := (value/=num);
		       ^

0 [0x0]: line: 1527 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            div ecx, ebx -> ebx   
9 [0x9]:            rmov adx, ebx   
10 [0xa]:            returnobj   
11 [0xb]:            ret   


overload function: std#double.operator%=[3493] params(1) in file: lib\support\/0.2.9//primitives.sharp:1529:8: note:  
		    def operator%=(num : ulong)  := (value%=num.value);
		       ^

0 [0x0]: line: 1529 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator%=[3494] params(1) in file: lib\support\/0.2.9//primitives.sharp:1530:8: note:  
		    def operator%=(num : long)   := (value%=num.value);
		       ^

0 [0x0]: line: 1530 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator%=[3495] params(1) in file: lib\support\/0.2.9//primitives.sharp:1531:8: note:  
		    def operator%=(num : uint)   := (value%=num.value);
		       ^

0 [0x0]: line: 1531 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator%=[3496] params(1) in file: lib\support\/0.2.9//primitives.sharp:1532:8: note:  
		    def operator%=(num : int)    := (value%=num.value);
		       ^

0 [0x0]: line: 1532 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator%=[3497] params(1) in file: lib\support\/0.2.9//primitives.sharp:1533:8: note:  
		    def operator%=(num : ushort) := (value%=num.value);
		       ^

0 [0x0]: line: 1533 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator%=[3498] params(1) in file: lib\support\/0.2.9//primitives.sharp:1534:8: note:  
		    def operator%=(num : short)  := (value%=num.value);
		       ^

0 [0x0]: line: 1534 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator%=[3499] params(1) in file: lib\support\/0.2.9//primitives.sharp:1535:8: note:  
		    def operator%=(num : uchar)  := (value%=num.value);
		       ^

0 [0x0]: line: 1535 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator%=[3500] params(1) in file: lib\support\/0.2.9//primitives.sharp:1536:8: note:  
		    def operator%=(num : char)   := (value%=num.value);
		       ^

0 [0x0]: line: 1536 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator%=[3501] params(1) in file: lib\support\/0.2.9//primitives.sharp:1537:8: note:  
		    def operator%=(num : byte)   := (value%=num.value);
		       ^

0 [0x0]: line: 1537 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator%=[3502] params(1) in file: lib\support\/0.2.9//primitives.sharp:1538:8: note:  
		    def operator%=(num : bool)   := (value%=num.value);
		       ^

0 [0x0]: line: 1538 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator%=[3503] params(1) in file: lib\support\/0.2.9//primitives.sharp:1539:8: note:  
		    def operator%=(num : double)   := (value%=num.value);
		       ^

0 [0x0]: line: 1539 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            mod ecx, ebx -> ebx   
15 [0xf]:            rmov adx, ebx   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator%=[3504] params(1) in file: lib\support\/0.2.9//primitives.sharp:1540:8: note:  
		    def operator%=(num : var)    := (value%=num);
		       ^

0 [0x0]: line: 1540 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            mod ecx, ebx -> ebx   
9 [0x9]:            rmov adx, ebx   
10 [0xa]:            returnobj   
11 [0xb]:            ret   


overload function: std#double.operator&=[3505] params(1) in file: lib\support\/0.2.9//primitives.sharp:1542:8: note:  
		    def operator&=(num : ulong)  := (value&=num.value);
		       ^

0 [0x0]: line: 1542 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator&=[3506] params(1) in file: lib\support\/0.2.9//primitives.sharp:1543:8: note:  
		    def operator&=(num : long)   := (value&=num.value);
		       ^

0 [0x0]: line: 1543 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator&=[3507] params(1) in file: lib\support\/0.2.9//primitives.sharp:1544:8: note:  
		    def operator&=(num : uint)   := (value&=num.value);
		       ^

0 [0x0]: line: 1544 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator&=[3508] params(1) in file: lib\support\/0.2.9//primitives.sharp:1545:8: note:  
		    def operator&=(num : int)    := (value&=num.value);
		       ^

0 [0x0]: line: 1545 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator&=[3509] params(1) in file: lib\support\/0.2.9//primitives.sharp:1546:8: note:  
		    def operator&=(num : ushort) := (value&=num.value);
		       ^

0 [0x0]: line: 1546 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator&=[3510] params(1) in file: lib\support\/0.2.9//primitives.sharp:1547:8: note:  
		    def operator&=(num : short)  := (value&=num.value);
		       ^

0 [0x0]: line: 1547 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator&=[3511] params(1) in file: lib\support\/0.2.9//primitives.sharp:1548:8: note:  
		    def operator&=(num : uchar)  := (value&=num.value);
		       ^

0 [0x0]: line: 1548 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator&=[3512] params(1) in file: lib\support\/0.2.9//primitives.sharp:1549:8: note:  
		    def operator&=(num : char)   := (value&=num.value);
		       ^

0 [0x0]: line: 1549 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator&=[3513] params(1) in file: lib\support\/0.2.9//primitives.sharp:1550:8: note:  
		    def operator&=(num : byte)   := (value&=num.value);
		       ^

0 [0x0]: line: 1550 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator&=[3514] params(1) in file: lib\support\/0.2.9//primitives.sharp:1551:8: note:  
		    def operator&=(num : bool)   := (value&=num.value);
		       ^

0 [0x0]: line: 1551 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator&=[3515] params(1) in file: lib\support\/0.2.9//primitives.sharp:1552:8: note:  
		    def operator&=(num : double)   := (value&=num.value);
		       ^

0 [0x0]: line: 1552 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            and ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator&=[3516] params(1) in file: lib\support\/0.2.9//primitives.sharp:1553:8: note:  
		    def operator&=(num : var)    := (value&=num);
		       ^

0 [0x0]: line: 1553 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            and ecx, ebx   
9 [0x9]:            rmov adx, cmt   
10 [0xa]:            returnobj   
11 [0xb]:            ret   


overload function: std#double.operator|=[3517] params(1) in file: lib\support\/0.2.9//primitives.sharp:1555:8: note:  
		    def operator|=(num : ulong)  := (value|=num.value);
		       ^

0 [0x0]: line: 1555 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator|=[3518] params(1) in file: lib\support\/0.2.9//primitives.sharp:1556:8: note:  
		    def operator|=(num : long)   := (value|=num.value);
		       ^

0 [0x0]: line: 1556 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator|=[3519] params(1) in file: lib\support\/0.2.9//primitives.sharp:1557:8: note:  
		    def operator|=(num : uint)   := (value|=num.value);
		       ^

0 [0x0]: line: 1557 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator|=[3520] params(1) in file: lib\support\/0.2.9//primitives.sharp:1558:8: note:  
		    def operator|=(num : int)    := (value|=num.value);
		       ^

0 [0x0]: line: 1558 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator|=[3521] params(1) in file: lib\support\/0.2.9//primitives.sharp:1559:8: note:  
		    def operator|=(num : ushort) := (value|=num.value);
		       ^

0 [0x0]: line: 1559 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator|=[3522] params(1) in file: lib\support\/0.2.9//primitives.sharp:1560:8: note:  
		    def operator|=(num : short)  := (value|=num.value);
		       ^

0 [0x0]: line: 1560 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator|=[3523] params(1) in file: lib\support\/0.2.9//primitives.sharp:1561:8: note:  
		    def operator|=(num : uchar)  := (value|=num.value);
		       ^

0 [0x0]: line: 1561 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator|=[3524] params(1) in file: lib\support\/0.2.9//primitives.sharp:1562:8: note:  
		    def operator|=(num : char)   := (value|=num.value);
		       ^

0 [0x0]: line: 1562 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator|=[3525] params(1) in file: lib\support\/0.2.9//primitives.sharp:1563:8: note:  
		    def operator|=(num : byte)   := (value|=num.value);
		       ^

0 [0x0]: line: 1563 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator|=[3526] params(1) in file: lib\support\/0.2.9//primitives.sharp:1564:8: note:  
		    def operator|=(num : bool)   := (value|=num.value);
		       ^

0 [0x0]: line: 1564 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator|=[3527] params(1) in file: lib\support\/0.2.9//primitives.sharp:1565:8: note:  
		    def operator|=(num : double)   := (value|=num.value);
		       ^

0 [0x0]: line: 1565 movl 1   
1 [0x1]:            movn #0   
3 [0x3]:            movi #0, adx   
5 [0x5]:            iaload ebx, adx   
6 [0x6]:            rstore ebx   
7 [0x7]:            movl 0   
8 [0x8]:            movn #0   
10 [0xa]:            movi #0, adx   
12 [0xc]:            iaload ecx, adx   
13 [0xd]:            loadval ebx   
14 [0xe]:            or ecx, ebx   
15 [0xf]:            rmov adx, cmt   
16 [0x10]:            returnobj   
17 [0x11]:            ret   


overload function: std#double.operator|=[3528] params(1) in file: lib\support\/0.2.9//primitives.sharp:1566:8: note:  
		    def operator|=(num : var)    := (value|=num);
		       ^

0 [0x0]: line: 1566 ipushl #1   
1 [0x1]:            movl 0   
2 [0x2]:            movn #0   
4 [0x4]:            movi #0, adx   
6 [0x6]:            iaload ecx, adx   
7 [0x7]:            loadval ebx   
8 [0x8]:            or ecx, ebx   
9 [0x9]:            rmov adx, cmt   
10 [0xa]:            returnobj   
11 [0xb]:            ret   


constructor: std#double.double[3529] params(0) in file: lib\support\/0.2.9//primitives.sharp:1457:6: note:  
		class double base integer<var> {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @1895 // <std#integer<var>.integer>   
2 [0x2]:         ret   


std#printable.to_string[3530] params(0) in file: lib\support\/0.2.9//printable.sharp:11:8: note:  
		    def to_string() : string;
		       ^



constructor: std#printable.printable[3531] params(0) in file: lib\support\/0.2.9//printable.sharp:10:10: note:  
		interface printable {
		         ^

0 [0x0]:         ret   


function: std#__srt_global.rand[3532] params(0) in file: lib\support\/0.2.9//random.sharp:6:4: note:  
		def rand() : var {
		   ^

0 [0x0]: line: 7 istore 0   
2 [0x2]:         movi #1, ebx   
4 [0x4]:         rstore ebx   
5 [0x5]:         call @2391 // <platform.kernel#vm.random_double>   
6 [0x6]:         loadval ebx   
7 [0x7]:         return_val ebx   
8 [0x8]:         ret   


function: std#__srt_global.rand_int[3533] params(2) in file: lib\support\/0.2.9//random.sharp:10:4: note:  
		def rand_int(min: var, max: var) : var {
		   ^

0 [0x0]: line: 11 ipushl #0   
1 [0x1]:          ipushl #1   
2 [0x2]:          call @2389 // <platform.kernel#vm.random_int>   
3 [0x3]:          loadval ebx   
4 [0x4]:          return_val ebx   
5 [0x5]:          ret   


function: std#__srt_global.rand_double[3534] params(2) in file: lib\support\/0.2.9//random.sharp:14:4: note:  
		def rand_double(min: var, max: var) : var {
		   ^

0 [0x0]: line: 15 ipushl #0   
1 [0x1]:          ipushl #1   
2 [0x2]:          call @2391 // <platform.kernel#vm.random_double>   
3 [0x3]:          loadval ebx   
4 [0x4]:          return_val ebx   
5 [0x5]:          ret   


function: std#__srt_global.rand_int[3535] params(0) in file: lib\support\/0.2.9//random.sharp:18:4: note:  
		def rand_int() : var {
		   ^

0 [0x0]: line: 19 call @2388 // <platform.kernel#vm.random_int>   
1 [0x1]:          loadval ebx   
2 [0x2]:          return_val ebx   
3 [0x3]:          ret   


function: std#__srt_global.rand_double[3536] params(0) in file: lib\support\/0.2.9//random.sharp:22:4: note:  
		def rand_double() : var {
		   ^

0 [0x0]: line: 23 call @2390 // <platform.kernel#vm.random_double>   
1 [0x1]:          loadval ebx   
2 [0x2]:          return_val ebx   
3 [0x3]:          ret   


function: std#__srt_global.set_seed[3537] params(1) in file: lib\support\/0.2.9//random.sharp:26:4: note:  
		def set_seed(seed: var) {
		   ^

0 [0x0]: line: 27 ipushl #0   
1 [0x1]:          movg @0 // @std#__srt_global   
2 [0x2]:          movn #1   
4 [0x4]:          loadval ebx   
5 [0x5]:          movi #0, adx   
7 [0x7]:          rmov adx, ebx   
8 [0x8]: line: 28 movg @0 // @std#__srt_global   
9 [0x9]:          movn #1   
11 [0xb]:          movi #0, adx   
13 [0xd]:          iaload ebx, adx   
14 [0xe]:          rstore ebx   
15 [0xf]:          call @2392 // <platform.kernel#vm.random_seed>   
16 [0x10]:          ret   


constructor: std#tmp.tmp[3538] params(0) in file: lib\support\/0.2.9//random.sharp:32:5: note:  
		class tmp {
		    ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std.reflect#_class_._class_[3539] params(0) in file: lib\support\/0.2.9//reflect//class.sharp:4:6: note:  
		class _class_ base data_entity {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @3540 // <std.reflect#data_entity.data_entity>   
2 [0x2]:         ret   


constructor: std.reflect#data_entity.data_entity[3540] params(0) in file: lib\support\/0.2.9//reflect//data_entity.sharp:4:6: note:  
		class data_entity {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std.reflect#data_property.data_property[3541] params(0) in file: lib\support\/0.2.9//reflect//data_property.sharp:11:6: note:  
		class data_property base data_entity {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @3540 // <std.reflect#data_entity.data_entity>   
2 [0x2]:         ret   


constructor: std.reflect#field.field[3542] params(0) in file: lib\support\/0.2.9//reflect//field.sharp:4:6: note:  
		class field {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std.reflect#function.function[3543] params(0) in file: lib\support\/0.2.9//reflect//function.sharp:4:6: note:  
		class function base data_entity {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         call @3540 // <std.reflect#data_entity.data_entity>   
2 [0x2]:         ret   


constructor: std.reflect#reflect.reflect[3544] params(1) in file: lib\support\/0.2.9//reflect//reflection.sharp:16:12: note:  
		    reflect(ref_obj : object) {
		           ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 17 pushl 0   
2 [0x2]:          pushl 1   
3 [0x3]:          ret   


constructor: std.reflect#reflect.reflect[3545] params(0) in file: lib\support\/0.2.9//reflect//reflection.sharp:3:6: note:  
		class reflect {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#string.string[3546] params(1) in file: lib\support\/0.2.9//string.sharp:10:11: note:  
		    string(str : _int8[]) {
		          ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 11 movl 1   
2 [0x2]:          checknull   
3 [0x3]:          not ebx, ebx   
4 [0x4]:          movr cmt, ebx   
5 [0x5]:          jne 10   
6 [0x6]: line: 12 pushl 0   
7 [0x7]:          pushl 1   
8 [0x8]:          call @3556 // <std#string.append>   
9 [0x9]:          pop   
10 [0xa]:          nop   
11 [0xb]:          ret   


constructor: std#string.string[3547] params(1) in file: lib\support\/0.2.9//string.sharp:16:11: note:  
		    string(ch: var) {
		          ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 17 pushl 0   
2 [0x2]:          ipushl #1   
3 [0x3]:          call @3553 // <std#string.append>   
4 [0x4]:          pop   
5 [0x5]:          ret   


constructor: std#string.string[3548] params(1) in file: lib\support\/0.2.9//string.sharp:20:11: note:  
		    string(str : char[]) {
		          ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 21 movl 1   
2 [0x2]:          checknull   
3 [0x3]:          not ebx, ebx   
4 [0x4]:          movr cmt, ebx   
5 [0x5]:          jne 46   
6 [0x6]: line: 22 movl 1   
7 [0x7]:          sizeof ebx   
8 [0x8]:          newarry ebx: 8   
9 [0x9]:          movl 0   
10 [0xa]:          movn #0   
12 [0xc]:          popobj   
13 [0xd]: line: 23 istorel 0, fp+2   
15 [0xf]: line: 24 istorel -1, fp+4   
17 [0x11]:          pushl 1   
18 [0x12]:          popl 5   
19 [0x13]:          iaddl 1, fp@4   
21 [0x15]:          movl 5   
22 [0x16]:          sizeof ecx   
23 [0x17]:          loadl ebx, fp+4   
24 [0x18]:          lt ebx, ecx   
25 [0x19]:          jne 46   
26 [0x1a]:          movnd ebx   
27 [0x1b]:          pushobj   
28 [0x1c]:          popl 3   
29 [0x1d]: line: 25 pushl 3   
30 [0x1e]:          call @1685 // <std#integer<_int8>.get_value>   
31 [0x1f]:          movl 0   
32 [0x20]:          movn #0   
34 [0x22]:          pushobj   
35 [0x23]:          loadl ebx, fp+2   
36 [0x24]:          movr egx, ebx   
37 [0x25]:          inc ebx   
38 [0x26]:          smovr_2 ebx, fp+2   
39 [0x27]:          movr ebx, egx   
40 [0x28]:          popobj2    
41 [0x29]:          movr adx, ebx   
42 [0x2a]:          chklen adx   
43 [0x2b]:          loadval ebx   
44 [0x2c]:          rmov adx, ebx   
45 [0x2d]:          jmp @19   
46 [0x2e]:          nop   
47 [0x2f]:          ret   


constructor: std#string.string[3549] params(1) in file: lib\support\/0.2.9//string.sharp:30:11: note:  
		    string(str: string) {
		          ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 31 movl 1   
2 [0x2]:          checknull   
3 [0x3]:          not ebx, ebx   
4 [0x4]:          movr cmt, ebx   
5 [0x5]:          jne 13   
6 [0x6]: line: 32 pushl 0   
7 [0x7]:          movl 1   
8 [0x8]:          movn #0   
10 [0xa]:          pushobj   
11 [0xb]:          call @3556 // <std#string.append>   
12 [0xc]:          pop   
13 [0xd]:          nop   
14 [0xe]:          ret   


constructor: std#string.string[3550] params(2) in file: lib\support\/0.2.9//string.sharp:36:11: note:  
		    string(str : _int8[], offset: var) {
		          ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 37 movl 1   
2 [0x2]:          checknull   
3 [0x3]:          not ebx, ebx   
4 [0x4]:          movr cmt, ebx   
5 [0x5]:          jne 16   
6 [0x6]: line: 38 pushl 1   
7 [0x7]:          ipushl #2   
8 [0x8]:          movl 1   
9 [0x9]:          sizeof ebx   
10 [0xa]:          rstore ebx   
11 [0xb]:          call @2163 // <std.io#__srt_global.copy>   
12 [0xc]:          movl 0   
13 [0xd]:          movn #0   
15 [0xf]:          popobj   
16 [0x10]:          nop   
17 [0x11]:          ret   


constructor: std#string.string[3551] params(3) in file: lib\support\/0.2.9//string.sharp:42:11: note:  
		    string(str : _int8[], start: var, end: var) {
		          ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 43 movl 1   
2 [0x2]:          checknull   
3 [0x3]:          not ebx, ebx   
4 [0x4]:          skne ebx // pc = 15   
5 [0x5]:          ipushl #3   
6 [0x6]:          loadl ebx, fp+2   
7 [0x7]:          loadval ecx   
8 [0x8]:          sub ecx, ebx -> ebx   
9 [0x9]:          rstore ebx   
10 [0xa]:          movi #0, ebx   
12 [0xc]:          loadval ecx   
13 [0xd]:          gt ecx, ebx   
14 [0xe]:          movr ebx, cmt   
15 [0xf]:          movr cmt, ebx   
16 [0x10]:          jne 36   
17 [0x11]: line: 44 ipushl #3   
18 [0x12]:          loadl ebx, fp+2   
19 [0x13]:          loadval ecx   
20 [0x14]:          sub ecx, ebx -> ebx   
21 [0x15]:          newarry ebx: 0   
22 [0x16]:          movl 0   
23 [0x17]:          movn #0   
25 [0x19]:          popobj   
26 [0x1a]: line: 45 pushl 1   
27 [0x1b]:          movl 0   
28 [0x1c]:          movn #0   
30 [0x1e]:          pushobj   
31 [0x1f]:          istore 0   
33 [0x21]:          ipushl #2   
34 [0x22]:          ipushl #3   
35 [0x23]:          call @2153 // <std.io#__srt_global.memcopy>   
36 [0x24]:          nop   
37 [0x25]:          ret   


function: std#string.replace[3552] params(2) in file: lib\support\/0.2.9//string.sharp:49:8: note:  
		    def replace(pos : var, ch: _int8) : string {
		       ^

0 [0x0]: line: 50 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          sizeof ebx   
5 [0x5]:          loadval ecx   
6 [0x6]:          gte ecx, ebx   
7 [0x7]:          movr ebx, cmt   
8 [0x8]:          movr cmt, ebx   
9 [0x9]:          jne 14   
10 [0xa]: line: 51 pushl 0   
11 [0xb]:          ipushl #1   
12 [0xc]:          call @3602 // <std#string.bounds_error>   
13 [0xd]:          throw    
14 [0xe]:          nop   
15 [0xf]: line: 54 ipushl #2   
16 [0x10]:          movl 0   
17 [0x11]:          movn #0   
19 [0x13]:          pushobj   
20 [0x14]:          loadl ebx, fp+1   
21 [0x15]:          popobj2    
22 [0x16]:          movr adx, ebx   
23 [0x17]:          chklen adx   
24 [0x18]:          loadval ebx   
25 [0x19]:          rmov adx, ebx   
26 [0x1a]: line: 55 movl 0   
27 [0x1b]:          returnobj   
28 [0x1c]:          ret   


function: std#string.append[3553] params(1) in file: lib\support\/0.2.9//string.sharp:58:8: note:  
		    def append(ch: var) : string
		       ^

0 [0x0]: line: 60 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          pushnull    
5 [0x5]:          itest ebx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 16   
8 [0x8]: line: 61 movi #1, ebx   
10 [0xa]:          newarry ebx: 8   
11 [0xb]:          movl 0   
12 [0xc]:          movn #0   
14 [0xe]:          popobj   
15 [0xf]:          jmp @31   
16 [0x10]: line: 63 movl 0   
17 [0x11]:          movn #0   
19 [0x13]:          pushobj   
20 [0x14]:          movl 0   
21 [0x15]:          movn #0   
23 [0x17]:          sizeof ebx   
24 [0x18]:          rstore ebx   
25 [0x19]:          movi #1, ebx   
27 [0x1b]:          loadval ecx   
28 [0x1c]:          add ecx, ebx -> ebx   
29 [0x1d]:          rstore ebx   
30 [0x1e]:          call @2143 // <std.io#__srt_global.realloc>   
31 [0x1f]:          nop   
32 [0x20]: line: 65 ipushl #1   
33 [0x21]:          movl 0   
34 [0x22]:          movn #0   
36 [0x24]:          pushobj   
37 [0x25]:          movl 0   
38 [0x26]:          movn #0   
40 [0x28]:          sizeof ebx   
41 [0x29]:          rstore ebx   
42 [0x2a]:          movi #1, ebx   
44 [0x2c]:          loadval ecx   
45 [0x2d]:          sub ecx, ebx -> ebx   
46 [0x2e]:          popobj2    
47 [0x2f]:          movr adx, ebx   
48 [0x30]:          chklen adx   
49 [0x31]:          loadval ebx   
50 [0x32]:          rmov adx, ebx   
51 [0x33]: line: 66 movl 0   
52 [0x34]:          returnobj   
53 [0x35]:          ret   


function: std#string.empty[3554] params(0) in file: lib\support\/0.2.9//string.sharp:69:8: note:  
		    def empty() := sizeof(data)==0;
		       ^

0 [0x0]: line: 69 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          sizeof ebx   
4 [0x4]:          rstore ebx   
5 [0x5]:          movi #0, ebx   
7 [0x7]:          loadval ecx   
8 [0x8]:          test ecx, ebx   
9 [0x9]:          return_val cmt   
10 [0xa]:          ret   


function: std#string.append[3555] params(1) in file: lib\support\/0.2.9//string.sharp:71:8: note:  
		    def append(c: char) := append(c.get_value());
		       ^

0 [0x0]: line: 71 pushl 0   
1 [0x1]:          pushl 1   
2 [0x2]:          call @1685 // <std#integer<_int8>.get_value>   
3 [0x3]:          call @3553 // <std#string.append>   
4 [0x4]:          popobj2    
5 [0x5]:          returnobj   
6 [0x6]:          ret   


function: std#string.append[3556] params(1) in file: lib\support\/0.2.9//string.sharp:73:8: note:  
		    def append(immstr: _int8[]) : string
		       ^

0 [0x0]: line: 75 movl 1   
1 [0x1]:          checknull   
2 [0x2]:          movr cmt, ebx   
3 [0x3]:          jne 7   
4 [0x4]:          movl 0   
5 [0x5]:          returnobj   
6 [0x6]:          ret   
7 [0x7]:          nop   
8 [0x8]: line: 77 movl 0   
9 [0x9]:          movn #0   
11 [0xb]:          sizeof ebx   
12 [0xc]:          smovr_2 ebx, fp+2   
13 [0xd]: line: 79 movl 0   
14 [0xe]:          movn #0   
16 [0x10]:          pushobj   
17 [0x11]:          pushnull    
18 [0x12]:          itest ebx   
19 [0x13]:          movr cmt, ebx   
20 [0x14]:          jne 29   
21 [0x15]: line: 80 movl 1   
22 [0x16]:          sizeof ebx   
23 [0x17]:          newarry ebx: 0   
24 [0x18]:          movl 0   
25 [0x19]:          movn #0   
27 [0x1b]:          popobj   
28 [0x1c]:          jmp @44   
29 [0x1d]: line: 82 movl 0   
30 [0x1e]:          movn #0   
32 [0x20]:          pushobj   
33 [0x21]:          movl 0   
34 [0x22]:          movn #0   
36 [0x24]:          sizeof ebx   
37 [0x25]:          rstore ebx   
38 [0x26]:          movl 1   
39 [0x27]:          sizeof ebx   
40 [0x28]:          loadval ecx   
41 [0x29]:          add ecx, ebx -> ebx   
42 [0x2a]:          rstore ebx   
43 [0x2b]:          call @2143 // <std.io#__srt_global.realloc>   
44 [0x2c]:          nop   
45 [0x2d]: line: 84 pushl 1   
46 [0x2e]:          movl 0   
47 [0x2f]:          movn #0   
49 [0x31]:          pushobj   
50 [0x32]:          ipushl #2   
51 [0x33]:          istore 0   
53 [0x35]:          movl 1   
54 [0x36]:          sizeof ebx   
55 [0x37]:          rstore ebx   
56 [0x38]:          call @2153 // <std.io#__srt_global.memcopy>   
57 [0x39]: line: 85 movl 0   
58 [0x3a]:          returnobj   
59 [0x3b]:          ret   


function: std#string.append[3557] params(2) in file: lib\support\/0.2.9//string.sharp:88:8: note:  
		    def append(immstr: _int8[], len: var) : string
		       ^

0 [0x0]: line: 90 movl 1   
1 [0x1]:          checknull   
2 [0x2]:          movr cmt, ebx   
3 [0x3]:          jne 7   
4 [0x4]:          movl 0   
5 [0x5]:          returnobj   
6 [0x6]:          ret   
7 [0x7]:          nop   
8 [0x8]: line: 91 loadl ecx, fp+2   
9 [0x9]:          movi #0, ebx   
11 [0xb]:          lt ecx, ebx   
12 [0xc]:          movr ebx, cmt   
13 [0xd]:          movr cmt, ebx   
14 [0xe]:          jne 21   
15 [0xf]: line: 92 new_class @20 // std#error   
17 [0x11]:          dup    
18 [0x12]:          newstr @90 // length cannot be less than zero   
19 [0x13]:          call @2009 // <std#error.error>   
20 [0x14]:          throw    
21 [0x15]:          nop   
22 [0x16]: line: 94 ipushl #2   
23 [0x17]:          movl 1   
24 [0x18]:          sizeof ebx   
25 [0x19]:          loadval ecx   
26 [0x1a]:          gt ecx, ebx   
27 [0x1b]:          movr ebx, cmt   
28 [0x1c]:          movr cmt, ebx   
29 [0x1d]:          jne 48   
30 [0x1e]: line: 95 new_class @20 // std#error   
32 [0x20]:          dup    
33 [0x21]:          new_class @75 // std#string   
35 [0x23]:          dup    
36 [0x24]:          newstr @91 // length of:    
37 [0x25]:          call @3546 // <std#string.string>   
38 [0x26]:          ipushl #2   
39 [0x27]:          call @3578 // <std#string.operator+>   
40 [0x28]:          newstr @92 //  is greater than the string:    
41 [0x29]:          call @3558 // <std#string.operator+>   
42 [0x2a]:          movl 1   
43 [0x2b]:          sizeof ebx   
44 [0x2c]:          rstore ebx   
45 [0x2d]:          call @3578 // <std#string.operator+>   
46 [0x2e]:          call @2010 // <std#error.error>   
47 [0x2f]:          throw    
48 [0x30]:          nop   
49 [0x31]: line: 97 movl 0   
50 [0x32]:          movn #0   
52 [0x34]:          sizeof ebx   
53 [0x35]:          smovr_2 ebx, fp+3   
54 [0x36]: line: 99 movl 0   
55 [0x37]:          movn #0   
57 [0x39]:          pushobj   
58 [0x3a]:          pushnull    
59 [0x3b]:          itest ebx   
60 [0x3c]:          movr cmt, ebx   
61 [0x3d]:          jne 69   
62 [0x3e]: line: 100 loadl ebx, fp+2   
63 [0x3f]:           newarry ebx: 8   
64 [0x40]:           movl 0   
65 [0x41]:           movn #0   
67 [0x43]:           popobj   
68 [0x44]:           jmp @83   
69 [0x45]: line: 102 movl 0   
70 [0x46]:           movn #0   
72 [0x48]:           pushobj   
73 [0x49]:           movl 0   
74 [0x4a]:           movn #0   
76 [0x4c]:           sizeof ebx   
77 [0x4d]:           rstore ebx   
78 [0x4e]:           loadl ebx, fp+2   
79 [0x4f]:           loadval ecx   
80 [0x50]:           add ecx, ebx -> ebx   
81 [0x51]:           rstore ebx   
82 [0x52]:           call @2143 // <std.io#__srt_global.realloc>   
83 [0x53]:           nop   
84 [0x54]: line: 104 pushl 1   
85 [0x55]:           movl 0   
86 [0x56]:           movn #0   
88 [0x58]:           pushobj   
89 [0x59]:           ipushl #3   
90 [0x5a]:           istore 0   
92 [0x5c]:           ipushl #2   
93 [0x5d]:           call @2153 // <std.io#__srt_global.memcopy>   
94 [0x5e]: line: 105 movl 0   
95 [0x5f]:           returnobj   
96 [0x60]:           ret   


overload function: std#string.operator+[3558] params(1) in file: lib\support\/0.2.9//string.sharp:108:8: note:  
		    def operator+(immstr : _int8[]) : string {
		       ^

0 [0x0]: line: 109 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @3546 // <std#string.string>   
8 [0x8]:           popobj2    
9 [0x9]:           smovr_3 fp+2   
10 [0xa]: line: 110 movl 1   
11 [0xb]:           checknull   
12 [0xc]:           not ebx, ebx   
13 [0xd]:           movr cmt, ebx   
14 [0xe]:           jne 22   
15 [0xf]: line: 111 pushl 2   
16 [0x10]:           pushl 1   
17 [0x11]:           call @3556 // <std#string.append>   
18 [0x12]:           popobj2    
19 [0x13]:           returnobj   
20 [0x14]:           ret   
21 [0x15]:           jmp @25   
22 [0x16]: line: 113 movl 2   
23 [0x17]:           returnobj   
24 [0x18]:           ret   
25 [0x19]:           nop   


function: std#string.to_lower[3559] params(0) in file: lib\support\/0.2.9//string.sharp:116:8: note:  
		    def to_lower() : string {
		       ^

0 [0x0]: line: 117 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           call @3604 // <std#string.string>   
4 [0x4]:           popobj2    
5 [0x5]:           smovr_3 fp+1   
6 [0x6]: line: 118 movl 0   
7 [0x7]:           movn #0   
9 [0x9]:           pushobj   
10 [0xa]:           pushnull    
11 [0xb]:           itest ebx   
12 [0xc]:           not ebx, ebx   
13 [0xd]:           movr cmt, ebx   
14 [0xe]:           jne 88   
15 [0xf]: line: 119 movl 0   
16 [0x10]:           movn #0   
18 [0x12]:           pushobj   
19 [0x13]:           istore 0   
21 [0x15]:           movl 0   
22 [0x16]:           movn #0   
24 [0x18]:           sizeof ebx   
25 [0x19]:           rstore ebx   
26 [0x1a]:           call @2163 // <std.io#__srt_global.copy>   
27 [0x1b]:           movl 1   
28 [0x1c]:           movn #0   
30 [0x1e]:           popobj   
31 [0x1f]: line: 121 istorel 0, fp+2   
33 [0x21]: line: 122 istorel -1, fp+4   
35 [0x23]:           movl 0   
36 [0x24]:           movn #0   
38 [0x26]:           pushobj   
39 [0x27]:           popl 5   
40 [0x28]:           iaddl 1, fp@4   
42 [0x2a]:           movl 5   
43 [0x2b]:           sizeof ecx   
44 [0x2c]:           loadl ebx, fp+4   
45 [0x2d]:           lt ebx, ecx   
46 [0x2e]:           jne 88   
47 [0x2f]:           iaload ecx, ebx   
48 [0x30]:           smovr_2 ecx, fp+3   
49 [0x31]: line: 123 istore 65   
51 [0x33]:           loadl ebx, fp+3   
52 [0x34]:           loadval ecx   
53 [0x35]:           lte ecx, ebx   
54 [0x36]:           movr ebx, cmt   
55 [0x37]:           skne ebx // pc = 62   
56 [0x38]:           ipushl #3   
57 [0x39]:           movi #90, ebx   
59 [0x3b]:           loadval ecx   
60 [0x3c]:           lte ecx, ebx   
61 [0x3d]:           movr ebx, cmt   
62 [0x3e]:           movr cmt, ebx   
63 [0x3f]:           jne 84   
64 [0x40]: line: 124 istore 97   
66 [0x42]:           ipushl #3   
67 [0x43]:           movi #65, ebx   
69 [0x45]:           loadval ecx   
70 [0x46]:           sub ecx, ebx -> ebx   
71 [0x47]:           loadval ecx   
72 [0x48]:           add ecx, ebx -> ebx   
73 [0x49]:           rstore ebx   
74 [0x4a]:           movl 1   
75 [0x4b]:           movn #0   
77 [0x4d]:           pushobj   
78 [0x4e]:           loadl ebx, fp+2   
79 [0x4f]:           popobj2    
80 [0x50]:           movr adx, ebx   
81 [0x51]:           chklen adx   
82 [0x52]:           loadval ebx   
83 [0x53]:           rmov adx, ebx   
84 [0x54]:           nop   
85 [0x55]: line: 125 iaddl 1, fp@2   
87 [0x57]:           jmp @40   
88 [0x58]:           nop   
89 [0x59]: line: 129 movl 1   
90 [0x5a]:           returnobj   
91 [0x5b]:           ret   


overload function: std#string.operator+[3560] params(1) in file: lib\support\/0.2.9//string.sharp:132:8: note:  
		    def operator+(obj : printable) : string {
		       ^

0 [0x0]: line: 133 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @3546 // <std#string.string>   
8 [0x8]:           popobj2    
9 [0x9]:           smovr_3 fp+2   
10 [0xa]: line: 134 movl 1   
11 [0xb]:           checknull   
12 [0xc]:           not ebx, ebx   
13 [0xd]:           movr cmt, ebx   
14 [0xe]:           jne 43   
15 [0xf]: line: 135 pushl 1   
16 [0x10]:           invoke_delegate 3530 { static=0, args=0 }   
18 [0x12]:           popobj2    
19 [0x13]:           smovr_3 fp+3   
20 [0x14]: line: 136 movl 3   
21 [0x15]:           checknull   
22 [0x16]:           not ebx, ebx   
23 [0x17]:           movr cmt, ebx   
24 [0x18]:           jne 35   
25 [0x19]: line: 137 pushl 2   
26 [0x1a]:           movl 3   
27 [0x1b]:           movn #0   
29 [0x1d]:           pushobj   
30 [0x1e]:           call @3556 // <std#string.append>   
31 [0x1f]:           popobj2    
32 [0x20]:           returnobj   
33 [0x21]:           ret   
34 [0x22]:           jmp @41   
35 [0x23]: line: 139 pushl 2   
36 [0x24]:           newstr @18 // null   
37 [0x25]:           call @3556 // <std#string.append>   
38 [0x26]:           popobj2    
39 [0x27]:           returnobj   
40 [0x28]:           ret   
41 [0x29]:           nop   
42 [0x2a]:           jmp @49   
43 [0x2b]: line: 142 pushl 2   
44 [0x2c]:           newstr @18 // null   
45 [0x2d]:           call @3556 // <std#string.append>   
46 [0x2e]:           popobj2    
47 [0x2f]:           returnobj   
48 [0x30]:           ret   
49 [0x31]:           nop   


overload function: std#string.operator+[3561] params(1) in file: lib\support\/0.2.9//string.sharp:145:7: note:  
		   def operator+(str : string) : string {
		      ^

0 [0x0]: line: 146 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @3546 // <std#string.string>   
8 [0x8]:           popobj2    
9 [0x9]:           smovr_3 fp+2   
10 [0xa]: line: 147 movl 1   
11 [0xb]:           checknull   
12 [0xc]:           not ebx, ebx   
13 [0xd]:           movr cmt, ebx   
14 [0xe]:           jne 25   
15 [0xf]: line: 148 pushl 2   
16 [0x10]:           movl 1   
17 [0x11]:           movn #0   
19 [0x13]:           pushobj   
20 [0x14]:           call @3556 // <std#string.append>   
21 [0x15]:           popobj2    
22 [0x16]:           returnobj   
23 [0x17]:           ret   
24 [0x18]:           jmp @31   
25 [0x19]: line: 150 pushl 2   
26 [0x1a]:           newstr @18 // null   
27 [0x1b]:           call @3556 // <std#string.append>   
28 [0x1c]:           popobj2    
29 [0x1d]:           returnobj   
30 [0x1e]:           ret   
31 [0x1f]:           nop   


function: std#string.to_string[3562] params(0) in file: lib\support\/0.2.9//string.sharp:153:8: note:  
		    def to_string() := new string(data);
		       ^

0 [0x0]: line: 153 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @3546 // <std#string.string>   
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


overload function: std#string.operator==[3563] params(1) in file: lib\support\/0.2.9//string.sharp:155:8: note:  
		    def operator==(str : _int8[]) : var {
		       ^

0 [0x0]: line: 156 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           sizeof ebx   
4 [0x4]:           rstore ebx   
5 [0x5]:           movl 1   
6 [0x6]:           sizeof ebx   
7 [0x7]:           loadval ecx   
8 [0x8]:           tne ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           movr cmt, ebx   
11 [0xb]:           jne 15   
12 [0xc]: line: 157 istorel 0, fp+0   
14 [0xe]:           ret   
15 [0xf]:           nop   
16 [0x10]: line: 159 istorel 0, fp+2   
18 [0x12]: line: 160 istorel -1, fp+4   
20 [0x14]:           pushl 1   
21 [0x15]:           popl 5   
22 [0x16]:           iaddl 1, fp@4   
24 [0x18]:           movl 5   
25 [0x19]:           sizeof ecx   
26 [0x1a]:           loadl ebx, fp+4   
27 [0x1b]:           lt ebx, ecx   
28 [0x1c]:           jne 55   
29 [0x1d]:           iaload ecx, ebx   
30 [0x1e]:           smovr_2 ecx, fp+3   
31 [0x1f]: line: 161 ipushl #3   
32 [0x20]:           movl 0   
33 [0x21]:           movn #0   
35 [0x23]:           pushobj   
36 [0x24]:           loadl ebx, fp+2   
37 [0x25]:           movr egx, ebx   
38 [0x26]:           inc ebx   
39 [0x27]:           smovr_2 ebx, fp+2   
40 [0x28]:           movr ebx, egx   
41 [0x29]:           popobj2    
42 [0x2a]:           movr adx, ebx   
43 [0x2b]:           chklen adx   
44 [0x2c]:           iaload ebx, adx   
45 [0x2d]:           loadval ecx   
46 [0x2e]:           tne ecx, ebx   
47 [0x2f]:           movr ebx, cmt   
48 [0x30]:           movr cmt, ebx   
49 [0x31]:           jne 53   
50 [0x32]: line: 162 istorel 0, fp+0   
52 [0x34]:           ret   
53 [0x35]:           nop   
54 [0x36]:           jmp @22   
55 [0x37]: line: 165 istorel 1, fp+0   
57 [0x39]:           ret   


overload function: std#string.operator==[3564] params(1) in file: lib\support\/0.2.9//string.sharp:168:8: note:  
		    def operator==(str : string) : var {
		       ^

0 [0x0]: line: 169 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           sizeof ebx   
4 [0x4]:           rstore ebx   
5 [0x5]:           movl 1   
6 [0x6]:           movn #0   
8 [0x8]:           sizeof ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           tne ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 17   
14 [0xe]: line: 170 istorel 0, fp+0   
16 [0x10]:           ret   
17 [0x11]:           nop   
18 [0x12]: line: 172 istorel 0, fp+2   
20 [0x14]: line: 173 istorel -1, fp+4   
22 [0x16]:           movl 1   
23 [0x17]:           movn #0   
25 [0x19]:           pushobj   
26 [0x1a]:           popl 5   
27 [0x1b]:           iaddl 1, fp@4   
29 [0x1d]:           movl 5   
30 [0x1e]:           sizeof ecx   
31 [0x1f]:           loadl ebx, fp+4   
32 [0x20]:           lt ebx, ecx   
33 [0x21]:           jne 60   
34 [0x22]:           iaload ecx, ebx   
35 [0x23]:           smovr_2 ecx, fp+3   
36 [0x24]: line: 174 ipushl #3   
37 [0x25]:           movl 0   
38 [0x26]:           movn #0   
40 [0x28]:           pushobj   
41 [0x29]:           loadl ebx, fp+2   
42 [0x2a]:           movr egx, ebx   
43 [0x2b]:           inc ebx   
44 [0x2c]:           smovr_2 ebx, fp+2   
45 [0x2d]:           movr ebx, egx   
46 [0x2e]:           popobj2    
47 [0x2f]:           movr adx, ebx   
48 [0x30]:           chklen adx   
49 [0x31]:           iaload ebx, adx   
50 [0x32]:           loadval ecx   
51 [0x33]:           tne ecx, ebx   
52 [0x34]:           movr ebx, cmt   
53 [0x35]:           movr cmt, ebx   
54 [0x36]:           jne 58   
55 [0x37]: line: 175 istorel 0, fp+0   
57 [0x39]:           ret   
58 [0x3a]:           nop   
59 [0x3b]:           jmp @27   
60 [0x3c]: line: 178 istorel 1, fp+0   
62 [0x3e]:           ret   


overload function: std#string.operator!=[3565] params(1) in file: lib\support\/0.2.9//string.sharp:182:8: note:  
		    def operator!=(str : _int8[]) := !operator==(str);
		       ^

0 [0x0]: line: 182 pushl 0   
1 [0x1]:           pushl 1   
2 [0x2]:           call @3563 // <std#string.operator==>   
3 [0x3]:           loadval ebx   
4 [0x4]:           not ebx, ebx   
5 [0x5]:           return_val ebx   
6 [0x6]:           ret   


overload function: std#string.operator!=[3566] params(1) in file: lib\support\/0.2.9//string.sharp:183:8: note:  
		    def operator!=(str : string) := !operator==(str);
		       ^

0 [0x0]: line: 183 pushl 0   
1 [0x1]:           pushl 1   
2 [0x2]:           call @3564 // <std#string.operator==>   
3 [0x3]:           loadval ebx   
4 [0x4]:           not ebx, ebx   
5 [0x5]:           return_val ebx   
6 [0x6]:           ret   


overload function: std#string.operator=[3567] params(1) in file: lib\support\/0.2.9//string.sharp:185:8: note:  
		    def operator=( immstr: _int8[] )
		       ^

0 [0x0]: line: 187 movl 1   
1 [0x1]:           checknull   
2 [0x2]:           movr cmt, ebx   
3 [0x3]:           jne 9   
4 [0x4]:           movl 0   
5 [0x5]:           movn #0   
7 [0x7]:           del   
8 [0x8]:           jmp @20   
9 [0x9]: line: 189 pushl 1   
10 [0xa]:           istore 0   
12 [0xc]:           movl 1   
13 [0xd]:           sizeof ebx   
14 [0xe]:           rstore ebx   
15 [0xf]:           call @2163 // <std.io#__srt_global.copy>   
16 [0x10]:           movl 0   
17 [0x11]:           movn #0   
19 [0x13]:           popobj   
20 [0x14]:           nop   
21 [0x15]:           ret   


function: std#string.at[3568] params(1) in file: lib\support\/0.2.9//string.sharp:192:8: note:  
		    def at(pos : var) : _int8 {
		       ^

0 [0x0]: line: 193 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           sizeof ebx   
5 [0x5]:           loadval ecx   
6 [0x6]:           gte ecx, ebx   
7 [0x7]:           movr ebx, cmt   
8 [0x8]:           movr cmt, ebx   
9 [0x9]:           jne 14   
10 [0xa]: line: 194 pushl 0   
11 [0xb]:           ipushl #1   
12 [0xc]:           call @3602 // <std#string.bounds_error>   
13 [0xd]:           throw    
14 [0xe]:           nop   
15 [0xf]: line: 195 movl 0   
16 [0x10]:           movn #0   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+1   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           iaload ebx, adx   
24 [0x18]:           return_val ebx   
25 [0x19]:           ret   


overload function: std#string.operator[[3569] params(1) in file: lib\support\/0.2.9//string.sharp:198:8: note:  
		    def operator[](pos: var) := at(pos);
		       ^

0 [0x0]: line: 198 pushl 0   
1 [0x1]:           ipushl #1   
2 [0x2]:           call @3568 // <std#string.at>   
3 [0x3]:           loadval ebx   
4 [0x4]:           return_val ebx   
5 [0x5]:           ret   


function: std#string.fmt[3570] params(1) in file: lib\support\/0.2.9//string.sharp:200:15: note:  
		    static def fmt( _fmt: var ) {
		              ^

0 [0x0]: line: 201 ipushl #0   
1 [0x1]:           movg @75 // @std#string   
2 [0x2]:           movn #0   
4 [0x4]:           loadval ebx   
5 [0x5]:           mov8 ebx, ebx   
6 [0x6]:           movi #0, adx   
8 [0x8]:           rmov adx, ebx   
9 [0x9]:           ret   


function: std#string.set_precision[3571] params(1) in file: lib\support\/0.2.9//string.sharp:204:15: note:  
		    static def set_precision( prec: var ) {
		              ^

0 [0x0]: line: 205 loadl ecx, fp+0   
1 [0x1]:           movi #0, ebx   
3 [0x3]:           lt ecx, ebx   
4 [0x4]:           movr ebx, cmt   
5 [0x5]:           skpe ebx // pc = 12   
6 [0x6]:           ipushl #0   
7 [0x7]:           movi #16, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 26   
14 [0xe]: line: 206 new_class @4 // std#illegal_argument_exception   
16 [0x10]:           dup    
17 [0x11]:           new_class @75 // std#string   
19 [0x13]:           dup    
20 [0x14]:           newstr @93 // invalid precision:    
21 [0x15]:           call @3546 // <std#string.string>   
22 [0x16]:           ipushl #0   
23 [0x17]:           call @3578 // <std#string.operator+>   
24 [0x18]:           call @1962 // <std#illegal_argument_exception.illegal_argument_exception>   
25 [0x19]:           throw    
26 [0x1a]:           nop   
27 [0x1b]: line: 207 ipushl #0   
28 [0x1c]:           movg @75 // @std#string   
29 [0x1d]:           movn #1   
31 [0x1f]:           loadval ebx   
32 [0x20]:           movi #0, adx   
34 [0x22]:           rmov adx, ebx   
35 [0x23]:           ret   


function: std#string.get_data[3572] params(0) in file: lib\support\/0.2.9//string.sharp:210:8: note:  
		    def get_data() := data;
		       ^

0 [0x0]: line: 210 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           returnobj   
4 [0x4]:           ret   


function: std#string.get_elements[3573] params(0) in file: lib\support\/0.2.9//string.sharp:212:8: note:  
		    def get_elements() := data;
		       ^

0 [0x0]: line: 212 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           returnobj   
4 [0x4]:           ret   


function: std#string.to_array[3574] params(0) in file: lib\support\/0.2.9//string.sharp:214:8: note:  
		    def to_array() : _int8[]
		       ^

0 [0x0]: line: 216 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushnull    
5 [0x5]:           itest ebx   
6 [0x6]:           movr cmt, ebx   
7 [0x7]:           jne 12   
8 [0x8]:           pushnull    
9 [0x9]:           popobj2    
10 [0xa]:           returnobj   
11 [0xb]:           ret   
12 [0xc]:           nop   
13 [0xd]: line: 217 movl 0   
14 [0xe]:           movn #0   
16 [0x10]:           pushobj   
17 [0x11]:           istore 0   
19 [0x13]:           movl 0   
20 [0x14]:           movn #0   
22 [0x16]:           sizeof ebx   
23 [0x17]:           rstore ebx   
24 [0x18]:           call @2163 // <std.io#__srt_global.copy>   
25 [0x19]:           popobj2    
26 [0x1a]:           returnobj   
27 [0x1b]:           ret   


function: std#string.starts_with[3575] params(1) in file: lib\support\/0.2.9//string.sharp:221:8: note:  
		    def starts_with(prefix: string) : var {
		       ^

0 [0x0]: line: 222 movl 1   
1 [0x1]:           checknull   
2 [0x2]:           skpe ebx // pc = 15   
3 [0x3]:           movl 1   
4 [0x4]:           movn #0   
6 [0x6]:           sizeof ebx   
7 [0x7]:           rstore ebx   
8 [0x8]:           movl 0   
9 [0x9]:           movn #0   
11 [0xb]:           sizeof ebx   
12 [0xc]:           loadval ecx   
13 [0xd]:           gt ecx, ebx   
14 [0xe]:           movr ebx, cmt   
15 [0xf]:           movr cmt, ebx   
16 [0x10]:           jne 20   
17 [0x11]: line: 223 istorel 0, fp+0   
19 [0x13]:           ret   
20 [0x14]:           nop   
21 [0x15]: line: 226 istorel 0, fp+2   
23 [0x17]:           ipushl #2   
24 [0x18]:           movl 1   
25 [0x19]:           movn #0   
27 [0x1b]:           sizeof ebx   
28 [0x1c]:           loadval ecx   
29 [0x1d]:           lt ecx, ebx   
30 [0x1e]:           movr ebx, cmt   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 64   
33 [0x21]: line: 228 movl 0   
34 [0x22]:           movn #0   
36 [0x24]:           pushobj   
37 [0x25]:           loadl ebx, fp+2   
38 [0x26]:           popobj2    
39 [0x27]:           movr adx, ebx   
40 [0x28]:           chklen adx   
41 [0x29]:           iaload ebx, adx   
42 [0x2a]:           rstore ebx   
43 [0x2b]:           movl 1   
44 [0x2c]:           movn #0   
46 [0x2e]:           pushobj   
47 [0x2f]:           loadl ebx, fp+2   
48 [0x30]:           popobj2    
49 [0x31]:           movr adx, ebx   
50 [0x32]:           chklen adx   
51 [0x33]:           iaload ebx, adx   
52 [0x34]:           loadval ecx   
53 [0x35]:           tne ecx, ebx   
54 [0x36]:           movr ebx, cmt   
55 [0x37]:           movr cmt, ebx   
56 [0x38]:           jne 60   
57 [0x39]: line: 229 istorel 0, fp+0   
59 [0x3b]:           ret   
60 [0x3c]:           nop   
61 [0x3d]:           iaddl 1, fp@2   
63 [0x3f]:           jmp @23   
64 [0x40]: line: 231 istorel 1, fp+0   
66 [0x42]:           ret   


function: std#string.find[3576] params(1) in file: lib\support\/0.2.9//string.sharp:235:8: note:  
		    def find(str: string) : var {
		       ^

0 [0x0]: line: 236 pushl 1   
1 [0x1]:           call @3587 // <std#string.size>   
2 [0x2]:           ipopl 2   
3 [0x3]: line: 237 movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           sizeof ebx   
7 [0x7]:           smovr_2 ebx, fp+3   
8 [0x8]: line: 240 istorel 0, fp+4   
10 [0xa]:           ipushl #4   
11 [0xb]:           ipushl #3   
12 [0xc]:           loadl ebx, fp+2   
13 [0xd]:           loadval ecx   
14 [0xe]:           sub ecx, ebx -> ebx   
15 [0xf]:           loadval ecx   
16 [0x10]:           lte ecx, ebx   
17 [0x11]:           movr ebx, cmt   
18 [0x12]:           movr cmt, ebx   
19 [0x13]:           jne 75   
20 [0x14]: line: 241 istorel 0, fp+5   
22 [0x16]: line: 245 ipushl #5   
23 [0x17]:           loadl ebx, fp+2   
24 [0x18]:           loadval ecx   
25 [0x19]:           lt ecx, ebx   
26 [0x1a]:           movr ebx, cmt   
27 [0x1b]:           movr cmt, ebx   
28 [0x1c]:           jne 61   
29 [0x1d]: line: 246 movl 0   
30 [0x1e]:           movn #0   
32 [0x20]:           pushobj   
33 [0x21]:           ipushl #4   
34 [0x22]:           loadl ebx, fp+5   
35 [0x23]:           loadval ecx   
36 [0x24]:           add ecx, ebx -> ebx   
37 [0x25]:           popobj2    
38 [0x26]:           movr adx, ebx   
39 [0x27]:           chklen adx   
40 [0x28]:           iaload ebx, adx   
41 [0x29]:           rstore ebx   
42 [0x2a]:           movl 1   
43 [0x2b]:           movn #0   
45 [0x2d]:           pushobj   
46 [0x2e]:           loadl ebx, fp+5   
47 [0x2f]:           popobj2    
48 [0x30]:           movr adx, ebx   
49 [0x31]:           chklen adx   
50 [0x32]:           iaload ebx, adx   
51 [0x33]:           loadval ecx   
52 [0x34]:           tne ecx, ebx   
53 [0x35]:           movr ebx, cmt   
54 [0x36]:           movr cmt, ebx   
55 [0x37]:           jne 57   
56 [0x38]: line: 248 jmp @61   
57 [0x39]:           nop   
58 [0x3a]:           iaddl 1, fp@5   
60 [0x3c]:           jmp @22   
61 [0x3d]: line: 250 ipushl #5   
62 [0x3e]:           loadl ebx, fp+2   
63 [0x3f]:           loadval ecx   
64 [0x40]:           test ecx, ebx   
65 [0x41]:           movr ebx, cmt   
66 [0x42]:           movr cmt, ebx   
67 [0x43]:           jne 71   
68 [0x44]: line: 251 istorel 1, fp+0   
70 [0x46]:           ret   
71 [0x47]:           nop   
72 [0x48]:           iaddl 1, fp@4   
74 [0x4a]:           jmp @10   
75 [0x4b]: line: 254 istorel 0, fp+0   
77 [0x4d]:           ret   


function: std#string.ends_with[3577] params(1) in file: lib\support\/0.2.9//string.sharp:257:8: note:  
		    def ends_with(postfix: string) : var {
		       ^

0 [0x0]: line: 258 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           sizeof ebx   
4 [0x4]:           rstore ebx   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           sizeof ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gte ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 17   
14 [0xe]: line: 259 istorel 0, fp+0   
16 [0x10]:           ret   
17 [0x11]:           nop   
18 [0x12]: line: 261 istorel 0, fp+2   
20 [0x14]: line: 262 movl 0   
21 [0x15]:           movn #0   
23 [0x17]:           sizeof ebx   
24 [0x18]:           rstore ebx   
25 [0x19]:           movl 1   
26 [0x1a]:           movn #0   
28 [0x1c]:           sizeof ebx   
29 [0x1d]:           loadval ecx   
30 [0x1e]:           sub ecx, ebx -> ebx   
31 [0x1f]:           smovr_2 ebx, fp+3   
32 [0x20]:           ipushl #3   
33 [0x21]:           movl 0   
34 [0x22]:           movn #0   
36 [0x24]:           sizeof ebx   
37 [0x25]:           loadval ecx   
38 [0x26]:           lt ecx, ebx   
39 [0x27]:           movr ebx, cmt   
40 [0x28]:           movr cmt, ebx   
41 [0x29]:           jne 77   
42 [0x2a]: line: 263 movl 0   
43 [0x2b]:           movn #0   
45 [0x2d]:           pushobj   
46 [0x2e]:           loadl ebx, fp+3   
47 [0x2f]:           popobj2    
48 [0x30]:           movr adx, ebx   
49 [0x31]:           chklen adx   
50 [0x32]:           iaload ebx, adx   
51 [0x33]:           rstore ebx   
52 [0x34]:           movl 1   
53 [0x35]:           movn #0   
55 [0x37]:           pushobj   
56 [0x38]:           loadl ebx, fp+2   
57 [0x39]:           movr egx, ebx   
58 [0x3a]:           inc ebx   
59 [0x3b]:           smovr_2 ebx, fp+2   
60 [0x3c]:           movr ebx, egx   
61 [0x3d]:           popobj2    
62 [0x3e]:           movr adx, ebx   
63 [0x3f]:           chklen adx   
64 [0x40]:           iaload ebx, adx   
65 [0x41]:           loadval ecx   
66 [0x42]:           tne ecx, ebx   
67 [0x43]:           movr ebx, cmt   
68 [0x44]:           movr cmt, ebx   
69 [0x45]:           jne 73   
70 [0x46]: line: 264 istorel 0, fp+0   
72 [0x48]:           ret   
73 [0x49]:           nop   
74 [0x4a]:           iaddl 1, fp@3   
76 [0x4c]:           jmp @32   
77 [0x4d]: line: 267 istorel 1, fp+0   
79 [0x4f]:           ret   


overload function: std#string.operator+[3578] params(1) in file: lib\support\/0.2.9//string.sharp:270:8: note:  
		    def operator+(num : var) : string {
		       ^

0 [0x0]: line: 271 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @3546 // <std#string.string>   
8 [0x8]:           popobj2    
9 [0x9]:           smovr_3 fp+2   
10 [0xa]: line: 272 pushl 2   
11 [0xb]:           ipushl #1   
12 [0xc]:           call @3588 // <std#string.parse>   
13 [0xd]:           popobj2    
14 [0xe]:           movn #0   
16 [0x10]:           pushobj   
17 [0x11]:           call @3556 // <std#string.append>   
18 [0x12]:           pop   
19 [0x13]: line: 273 movl 2   
20 [0x14]:           returnobj   
21 [0x15]:           ret   


overload function: std#string.operator+[3579] params(1) in file: lib\support\/0.2.9//string.sharp:276:8: note:  
		    def operator+(num : _int8) : string {
		       ^

0 [0x0]: line: 277 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @3546 // <std#string.string>   
8 [0x8]:           popobj2    
9 [0x9]:           smovr_3 fp+2   
10 [0xa]: line: 278 pushl 2   
11 [0xb]:           ipushl #1   
12 [0xc]:           call @3553 // <std#string.append>   
13 [0xd]:           pop   
14 [0xe]: line: 279 movl 2   
15 [0xf]:           returnobj   
16 [0x10]:           ret   


overload function: std#string.operator+[3580] params(1) in file: lib\support\/0.2.9//string.sharp:282:8: note:  
		    def operator+(num : _int16) : string {
		       ^

0 [0x0]: line: 283 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @3546 // <std#string.string>   
8 [0x8]:           popobj2    
9 [0x9]:           smovr_3 fp+2   
10 [0xa]: line: 284 pushl 2   
11 [0xb]:           ipushl #1   
12 [0xc]:           call @3588 // <std#string.parse>   
13 [0xd]:           popobj2    
14 [0xe]:           movn #0   
16 [0x10]:           pushobj   
17 [0x11]:           call @3556 // <std#string.append>   
18 [0x12]:           pop   
19 [0x13]: line: 285 movl 2   
20 [0x14]:           returnobj   
21 [0x15]:           ret   


overload function: std#string.operator+[3581] params(1) in file: lib\support\/0.2.9//string.sharp:288:8: note:  
		    def operator+(num : _int32) : string {
		       ^

0 [0x0]: line: 289 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @3546 // <std#string.string>   
8 [0x8]:           popobj2    
9 [0x9]:           smovr_3 fp+2   
10 [0xa]: line: 290 pushl 2   
11 [0xb]:           ipushl #1   
12 [0xc]:           call @3588 // <std#string.parse>   
13 [0xd]:           popobj2    
14 [0xe]:           movn #0   
16 [0x10]:           pushobj   
17 [0x11]:           call @3556 // <std#string.append>   
18 [0x12]:           pop   
19 [0x13]: line: 291 movl 2   
20 [0x14]:           returnobj   
21 [0x15]:           ret   


overload function: std#string.operator+[3582] params(1) in file: lib\support\/0.2.9//string.sharp:294:8: note:  
		    def operator+(num : _int64) : string {
		       ^

0 [0x0]: line: 295 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @3546 // <std#string.string>   
8 [0x8]:           popobj2    
9 [0x9]:           smovr_3 fp+2   
10 [0xa]: line: 296 pushl 2   
11 [0xb]:           ipushl #1   
12 [0xc]:           call @3588 // <std#string.parse>   
13 [0xd]:           popobj2    
14 [0xe]:           movn #0   
16 [0x10]:           pushobj   
17 [0x11]:           call @3556 // <std#string.append>   
18 [0x12]:           pop   
19 [0x13]: line: 297 movl 2   
20 [0x14]:           returnobj   
21 [0x15]:           ret   


overload function: std#string.operator+[3583] params(1) in file: lib\support\/0.2.9//string.sharp:300:8: note:  
		    def operator+(num : _uint8) : string {
		       ^

0 [0x0]: line: 301 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @3546 // <std#string.string>   
8 [0x8]:           popobj2    
9 [0x9]:           smovr_3 fp+2   
10 [0xa]: line: 302 pushl 2   
11 [0xb]:           ipushl #1   
12 [0xc]:           call @3588 // <std#string.parse>   
13 [0xd]:           popobj2    
14 [0xe]:           movn #0   
16 [0x10]:           pushobj   
17 [0x11]:           call @3556 // <std#string.append>   
18 [0x12]:           pop   
19 [0x13]: line: 303 movl 2   
20 [0x14]:           returnobj   
21 [0x15]:           ret   


overload function: std#string.operator+[3584] params(1) in file: lib\support\/0.2.9//string.sharp:306:8: note:  
		    def operator+(num : _uint16) : string {
		       ^

0 [0x0]: line: 307 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @3546 // <std#string.string>   
8 [0x8]:           popobj2    
9 [0x9]:           smovr_3 fp+2   
10 [0xa]: line: 308 pushl 2   
11 [0xb]:           ipushl #1   
12 [0xc]:           call @3588 // <std#string.parse>   
13 [0xd]:           popobj2    
14 [0xe]:           movn #0   
16 [0x10]:           pushobj   
17 [0x11]:           call @3556 // <std#string.append>   
18 [0x12]:           pop   
19 [0x13]: line: 309 movl 2   
20 [0x14]:           returnobj   
21 [0x15]:           ret   


overload function: std#string.operator+[3585] params(1) in file: lib\support\/0.2.9//string.sharp:312:8: note:  
		    def operator+(num : _uint32) : string {
		       ^

0 [0x0]: line: 313 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @3546 // <std#string.string>   
8 [0x8]:           popobj2    
9 [0x9]:           smovr_3 fp+2   
10 [0xa]: line: 314 pushl 2   
11 [0xb]:           ipushl #1   
12 [0xc]:           call @3588 // <std#string.parse>   
13 [0xd]:           popobj2    
14 [0xe]:           movn #0   
16 [0x10]:           pushobj   
17 [0x11]:           call @3556 // <std#string.append>   
18 [0x12]:           pop   
19 [0x13]: line: 315 movl 2   
20 [0x14]:           returnobj   
21 [0x15]:           ret   


overload function: std#string.operator+[3586] params(1) in file: lib\support\/0.2.9//string.sharp:318:8: note:  
		    def operator+(num : _uint64) : string {
		       ^

0 [0x0]: line: 319 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @3546 // <std#string.string>   
8 [0x8]:           popobj2    
9 [0x9]:           smovr_3 fp+2   
10 [0xa]: line: 320 pushl 2   
11 [0xb]:           ipushl #1   
12 [0xc]:           call @3588 // <std#string.parse>   
13 [0xd]:           popobj2    
14 [0xe]:           movn #0   
16 [0x10]:           pushobj   
17 [0x11]:           call @3556 // <std#string.append>   
18 [0x12]:           pop   
19 [0x13]: line: 321 movl 2   
20 [0x14]:           returnobj   
21 [0x15]:           ret   


function: std#string.size[3587] params(0) in file: lib\support\/0.2.9//string.sharp:324:8: note:  
		    def size() := sizeof(data);
		       ^

0 [0x0]: line: 324 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           sizeof ebx   
4 [0x4]:           return_val ebx   
5 [0x5]:           ret   


function: std#string.parse[3588] params(1) in file: lib\support\/0.2.9//string.sharp:326:15: note:  
		    static def parse( number : var ) := new string(snprintf(currentFormat, number, precision));
		              ^

0 [0x0]: line: 326 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           movg @75 // @std#string   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           rstore ebx   
10 [0xa]:           ipushl #0   
11 [0xb]:           movg @75 // @std#string   
12 [0xc]:           movn #1   
14 [0xe]:           movi #0, adx   
16 [0x10]:           iaload ebx, adx   
17 [0x11]:           rstore ebx   
18 [0x12]:           call @1899 // <std#__srt_global.snprintf>   
19 [0x13]:           call @3546 // <std#string.string>   
20 [0x14]:           popobj2    
21 [0x15]:           returnobj   
22 [0x16]:           ret   


overload function: std#string.operator+=[3589] params(1) in file: lib\support\/0.2.9//string.sharp:328:8: note:  
		    def operator+=( num: var ) := append(parse(num).data);
		       ^

0 [0x0]: line: 328 pushl 0   
1 [0x1]:           ipushl #1   
2 [0x2]:           call @3588 // <std#string.parse>   
3 [0x3]:           popobj2    
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @3556 // <std#string.append>   
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


overload function: std#string.operator+=[3590] params(1) in file: lib\support\/0.2.9//string.sharp:329:8: note:  
		    def operator+=( num: _int8 ) := append(num);
		       ^

0 [0x0]: line: 329 pushl 0   
1 [0x1]:           ipushl #1   
2 [0x2]:           call @3553 // <std#string.append>   
3 [0x3]:           popobj2    
4 [0x4]:           returnobj   
5 [0x5]:           ret   


overload function: std#string.operator+=[3591] params(1) in file: lib\support\/0.2.9//string.sharp:330:8: note:  
		    def operator+=( num: _uint8 ) := append(num);
		       ^

0 [0x0]: line: 330 pushl 0   
1 [0x1]:           ipushl #1   
2 [0x2]:           call @3553 // <std#string.append>   
3 [0x3]:           popobj2    
4 [0x4]:           returnobj   
5 [0x5]:           ret   


overload function: std#string.operator+=[3592] params(1) in file: lib\support\/0.2.9//string.sharp:331:8: note:  
		    def operator+=( num: _int16 ) := append(parse(num).data);
		       ^

0 [0x0]: line: 331 pushl 0   
1 [0x1]:           ipushl #1   
2 [0x2]:           call @3588 // <std#string.parse>   
3 [0x3]:           popobj2    
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @3556 // <std#string.append>   
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


overload function: std#string.operator+=[3593] params(1) in file: lib\support\/0.2.9//string.sharp:332:8: note:  
		    def operator+=( num: _uint16 ) := append(parse(num).data);
		       ^

0 [0x0]: line: 332 pushl 0   
1 [0x1]:           ipushl #1   
2 [0x2]:           call @3588 // <std#string.parse>   
3 [0x3]:           popobj2    
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @3556 // <std#string.append>   
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


overload function: std#string.operator+=[3594] params(1) in file: lib\support\/0.2.9//string.sharp:333:8: note:  
		    def operator+=( num: _int32 ) := append(parse(num).data);
		       ^

0 [0x0]: line: 333 pushl 0   
1 [0x1]:           ipushl #1   
2 [0x2]:           call @3588 // <std#string.parse>   
3 [0x3]:           popobj2    
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @3556 // <std#string.append>   
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


overload function: std#string.operator+=[3595] params(1) in file: lib\support\/0.2.9//string.sharp:334:8: note:  
		    def operator+=( num: _uint32 ) := append(parse(num).data);
		       ^

0 [0x0]: line: 334 pushl 0   
1 [0x1]:           ipushl #1   
2 [0x2]:           call @3588 // <std#string.parse>   
3 [0x3]:           popobj2    
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @3556 // <std#string.append>   
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


overload function: std#string.operator+=[3596] params(1) in file: lib\support\/0.2.9//string.sharp:335:8: note:  
		    def operator+=( num: _int64 ) := append(parse(num).data);
		       ^

0 [0x0]: line: 335 pushl 0   
1 [0x1]:           ipushl #1   
2 [0x2]:           call @3588 // <std#string.parse>   
3 [0x3]:           popobj2    
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @3556 // <std#string.append>   
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


overload function: std#string.operator+=[3597] params(1) in file: lib\support\/0.2.9//string.sharp:336:8: note:  
		    def operator+=( num: _uint64 ) := append(parse(num).data);
		       ^

0 [0x0]: line: 336 pushl 0   
1 [0x1]:           ipushl #1   
2 [0x2]:           call @3588 // <std#string.parse>   
3 [0x3]:           popobj2    
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @3556 // <std#string.append>   
8 [0x8]:           popobj2    
9 [0x9]:           returnobj   
10 [0xa]:           ret   


overload function: std#string.operator+=[3598] params(1) in file: lib\support\/0.2.9//string.sharp:338:8: note:  
		    def operator+=( obj: printable ) : string
		       ^

0 [0x0]: line: 340 pushl 1   
1 [0x1]:           invoke_delegate 3530 { static=0, args=0 }   
3 [0x3]:           popobj2    
4 [0x4]:           smovr_3 fp+2   
5 [0x5]: line: 341 movl 2   
6 [0x6]:           checknull   
7 [0x7]:           not ebx, ebx   
8 [0x8]:           skne ebx // pc = 16   
9 [0x9]:           movl 2   
10 [0xa]:           movn #0   
12 [0xc]:           pushobj   
13 [0xd]:           pushnull    
14 [0xe]:           itest ebx   
15 [0xf]:           not ebx, ebx   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 28   
18 [0x12]: line: 342 pushl 0   
19 [0x13]:           movl 2   
20 [0x14]:           movn #0   
22 [0x16]:           pushobj   
23 [0x17]:           call @3556 // <std#string.append>   
24 [0x18]:           popobj2    
25 [0x19]:           returnobj   
26 [0x1a]:           ret   
27 [0x1b]:           jmp @34   
28 [0x1c]: line: 344 pushl 0   
29 [0x1d]:           newstr @18 // null   
30 [0x1e]:           call @3556 // <std#string.append>   
31 [0x1f]:           popobj2    
32 [0x20]:           returnobj   
33 [0x21]:           ret   
34 [0x22]:           nop   


overload function: std#string.operator+=[3599] params(1) in file: lib\support\/0.2.9//string.sharp:347:8: note:  
		    def operator+=( str: string ) := append(str.data);
		       ^

0 [0x0]: line: 347 pushl 0   
1 [0x1]:           movl 1   
2 [0x2]:           movn #0   
4 [0x4]:           pushobj   
5 [0x5]:           call @3556 // <std#string.append>   
6 [0x6]:           popobj2    
7 [0x7]:           returnobj   
8 [0x8]:           ret   


overload function: std#string.operator+=[3600] params(1) in file: lib\support\/0.2.9//string.sharp:349:8: note:  
		    def operator+=( str: _int8[] ) := append(str);
		       ^

0 [0x0]: line: 349 pushl 0   
1 [0x1]:           pushl 1   
2 [0x2]:           call @3556 // <std#string.append>   
3 [0x3]:           popobj2    
4 [0x4]:           returnobj   
5 [0x5]:           ret   


function: std#string.substring[3601] params(2) in file: lib\support\/0.2.9//string.sharp:351:8: note:  
		    def substring(start_pos: var, end_pos: var) : string {
		       ^

0 [0x0]: line: 352 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           sizeof ebx   
5 [0x5]:           loadval ecx   
6 [0x6]:           gte ecx, ebx   
7 [0x7]:           movr ebx, cmt   
8 [0x8]:           skpe ebx // pc = 14   
9 [0x9]:           loadl ecx, fp+1   
10 [0xa]:           movi #0, ebx   
12 [0xc]:           lt ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           movr cmt, ebx   
15 [0xf]:           jne 20   
16 [0x10]: line: 353 pushl 0   
17 [0x11]:           ipushl #1   
18 [0x12]:           call @3602 // <std#string.bounds_error>   
19 [0x13]:           throw    
20 [0x14]:           nop   
21 [0x15]: line: 354 ipushl #2   
22 [0x16]:           loadl ebx, fp+1   
23 [0x17]:           loadval ecx   
24 [0x18]:           lt ecx, ebx   
25 [0x19]:           movr ebx, cmt   
26 [0x1a]:           movr cmt, ebx   
27 [0x1b]:           jne 44   
28 [0x1c]: line: 355 new_class @4 // std#illegal_argument_exception   
30 [0x1e]:           dup    
31 [0x1f]:           new_class @75 // std#string   
33 [0x21]:           dup    
34 [0x22]:           newstr @94 // end_pos:    
35 [0x23]:           call @3546 // <std#string.string>   
36 [0x24]:           ipushl #2   
37 [0x25]:           call @3578 // <std#string.operator+>   
38 [0x26]:           newstr @95 //  cannot be less than the start_pos:    
39 [0x27]:           call @3558 // <std#string.operator+>   
40 [0x28]:           ipushl #1   
41 [0x29]:           call @3578 // <std#string.operator+>   
42 [0x2a]:           call @1962 // <std#illegal_argument_exception.illegal_argument_exception>   
43 [0x2b]:           throw    
44 [0x2c]:           nop   
45 [0x2d]: line: 359 new_class @75 // std#string   
47 [0x2f]:           dup    
48 [0x30]:           call @3604 // <std#string.string>   
49 [0x31]:           popobj2    
50 [0x32]:           smovr_3 fp+3   
51 [0x33]: line: 360 movl 0   
52 [0x34]:           movn #0   
54 [0x36]:           pushobj   
55 [0x37]:           ipushl #1   
56 [0x38]:           ipushl #2   
57 [0x39]:           call @2163 // <std.io#__srt_global.copy>   
58 [0x3a]:           movl 3   
59 [0x3b]:           movn #0   
61 [0x3d]:           popobj   
62 [0x3e]: line: 361 movl 3   
63 [0x3f]:           returnobj   
64 [0x40]:           ret   


function: std#string.bounds_error[3602] params(1) in file: lib\support\/0.2.9//string.sharp:364:16: note:  
		    private def bounds_error(pos : var) : bounds_except {
		               ^

0 [0x0]: line: 365 new_class @6 // std#out_of_bounds_exception   
2 [0x2]:           dup    
3 [0x3]:           new_class @75 // std#string   
5 [0x5]:           dup    
6 [0x6]:           newstr @96 // Index out of bounds exception at:    
7 [0x7]:           call @3546 // <std#string.string>   
8 [0x8]:           ipushl #1   
9 [0x9]:           call @3578 // <std#string.operator+>   
10 [0xa]:           newstr @97 //  with size of:    
11 [0xb]:           call @3558 // <std#string.operator+>   
12 [0xc]:           movl 0   
13 [0xd]:           movn #0   
15 [0xf]:           sizeof ebx   
16 [0x10]:           rstore ebx   
17 [0x11]:           call @3578 // <std#string.operator+>   
18 [0x12]:           call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
19 [0x13]:           popobj2    
20 [0x14]:           returnobj   
21 [0x15]:           ret   


function: std#string.hash[3603] params(0) in file: lib\support\/0.2.9//string.sharp:368:8: note:  
		    def hash() : _int64 {
		       ^

0 [0x0]: line: 369 istorel 0, fp+1   
2 [0x2]: line: 370 istorel 1, fp+2   
4 [0x4]: line: 371 istorel -1, fp+4   
6 [0x6]: line: 372 movl 0   
7 [0x7]: line: 373 movn #0   
9 [0x9]:           pushobj   
10 [0xa]:           popl 5   
11 [0xb]:           iaddl 1, fp@4   
13 [0xd]:           movl 5   
14 [0xe]:           sizeof ecx   
15 [0xf]:           loadl ebx, fp+4   
16 [0x10]:           lt ebx, ecx   
17 [0x11]:           jne 55   
18 [0x12]:           iaload ecx, ebx   
19 [0x13]:           smovr_2 ecx, fp+3   
20 [0x14]: line: 374 ipushl #1   
21 [0x15]:           ipushl #3   
22 [0x16]:           movi #97, ebx   
24 [0x18]:           loadval ecx   
25 [0x19]:           sub ecx, ebx -> ebx   
26 [0x1a]:           rstore ebx   
27 [0x1b]:           movi #1, ebx   
29 [0x1d]:           loadval ecx   
30 [0x1e]:           add ecx, ebx -> ebx   
31 [0x1f]:           rstore ebx   
32 [0x20]:           loadl ebx, fp+2   
33 [0x21]:           loadval ecx   
34 [0x22]:           mul ecx, ebx -> ebx   
35 [0x23]:           loadval ecx   
36 [0x24]:           add ecx, ebx -> ebx   
37 [0x25]:           rstore ebx   
38 [0x26]:           movi #1000000009, ebx   
40 [0x28]:           loadval ecx   
41 [0x29]:           mod ecx, ebx -> ebx   
42 [0x2a]:           smovr_2 ebx, fp+1   
43 [0x2b]: line: 375 ipushl #2   
44 [0x2c]:           movi #31, ebx   
46 [0x2e]:           loadval ecx   
47 [0x2f]:           mul ecx, ebx -> ebx   
48 [0x30]:           rstore ebx   
49 [0x31]:           movi #1000000009, ebx   
51 [0x33]:           loadval ecx   
52 [0x34]:           mod ecx, ebx -> ebx   
53 [0x35]:           smovr_2 ebx, fp+2   
54 [0x36]:           jmp @11   
55 [0x37]: line: 377 loadl ebx, fp+1   
56 [0x38]:           return_val ebx   
57 [0x39]:           ret   


constructor: std#string.string[3604] params(0) in file: lib\support\/0.2.9//string.sharp:5:6: note:  
		class string : loopable<_int8> {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


function: std#string_builder.set_resize_capacity[3605] params(1) in file: lib\support\/0.2.9//string_builder.sharp:20:8: note:  
		    def set_resize_capacity(new_capacity: var) {
		       ^

0 [0x0]: line: 21 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #1   
4 [0x4]:          loadval ebx   
5 [0x5]:          movi #0, adx   
7 [0x7]:          rmov adx, ebx   
8 [0x8]:          ret   


constructor: std#string_builder.string_builder[3606] params(1) in file: lib\support\/0.2.9//string_builder.sharp:24:19: note:  
		    string_builder(str : _int8[]) {
		                  ^

0 [0x0]:         movi #128, ebx   
2 [0x2]:         movl 0   
3 [0x3]:         movn #1   
5 [0x5]:         movi #0, adx   
7 [0x7]:         rmov adx, ebx   
8 [0x8]:         movi #0, ebx   
10 [0xa]:         movl 0   
11 [0xb]:         movn #2   
13 [0xd]:         movi #0, adx   
15 [0xf]:         rmov adx, ebx   
16 [0x10]:         movi #0, ebx   
18 [0x12]:         movl 0   
19 [0x13]:         movn #3   
21 [0x15]:         movi #0, adx   
23 [0x17]:         rmov adx, ebx   
24 [0x18]: line: 15 movi #255, ebx   
26 [0x1a]:          newarry ebx: 0   
27 [0x1b]:          movl 0   
28 [0x1c]:          movn #0   
30 [0x1e]:          popobj   
31 [0x1f]: line: 16 movi #255, ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #2   
36 [0x24]:          movi #0, adx   
38 [0x26]:          rmov adx, ebx   
39 [0x27]: line: 17 movi #-1, ebx   
41 [0x29]:          movl 0   
42 [0x2a]:          movn #3   
44 [0x2c]:          movi #0, adx   
46 [0x2e]:          rmov adx, ebx   
47 [0x2f]:          pushl 0   
48 [0x30]: line: 25 movl 1   
49 [0x31]:          checknull   
50 [0x32]:          not ebx, ebx   
51 [0x33]:          movr cmt, ebx   
52 [0x34]:          jne 57   
53 [0x35]: line: 26 pushl 0   
54 [0x36]:          pushl 1   
55 [0x37]:          call @3618 // <std#string_builder.append>   
56 [0x38]:          pop   
57 [0x39]:          nop   
58 [0x3a]:          ret   


constructor: std#string_builder.string_builder[3607] params(1) in file: lib\support\/0.2.9//string_builder.sharp:30:19: note:  
		    string_builder(ch: var) {
		                  ^

0 [0x0]:         movi #128, ebx   
2 [0x2]:         movl 0   
3 [0x3]:         movn #1   
5 [0x5]:         movi #0, adx   
7 [0x7]:         rmov adx, ebx   
8 [0x8]:         movi #0, ebx   
10 [0xa]:         movl 0   
11 [0xb]:         movn #2   
13 [0xd]:         movi #0, adx   
15 [0xf]:         rmov adx, ebx   
16 [0x10]:         movi #0, ebx   
18 [0x12]:         movl 0   
19 [0x13]:         movn #3   
21 [0x15]:         movi #0, adx   
23 [0x17]:         rmov adx, ebx   
24 [0x18]: line: 15 movi #255, ebx   
26 [0x1a]:          newarry ebx: 0   
27 [0x1b]:          movl 0   
28 [0x1c]:          movn #0   
30 [0x1e]:          popobj   
31 [0x1f]: line: 16 movi #255, ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #2   
36 [0x24]:          movi #0, adx   
38 [0x26]:          rmov adx, ebx   
39 [0x27]: line: 17 movi #-1, ebx   
41 [0x29]:          movl 0   
42 [0x2a]:          movn #3   
44 [0x2c]:          movi #0, adx   
46 [0x2e]:          rmov adx, ebx   
47 [0x2f]:          pushl 0   
48 [0x30]: line: 31 pushl 0   
49 [0x31]:          ipushl #1   
50 [0x32]:          call @3615 // <std#string_builder.append>   
51 [0x33]:          pop   
52 [0x34]:          ret   


constructor: std#string_builder.string_builder[3608] params(1) in file: lib\support\/0.2.9//string_builder.sharp:34:19: note:  
		    string_builder(str : char[]) {
		                  ^

0 [0x0]:         movi #128, ebx   
2 [0x2]:         movl 0   
3 [0x3]:         movn #1   
5 [0x5]:         movi #0, adx   
7 [0x7]:         rmov adx, ebx   
8 [0x8]:         movi #0, ebx   
10 [0xa]:         movl 0   
11 [0xb]:         movn #2   
13 [0xd]:         movi #0, adx   
15 [0xf]:         rmov adx, ebx   
16 [0x10]:         movi #0, ebx   
18 [0x12]:         movl 0   
19 [0x13]:         movn #3   
21 [0x15]:         movi #0, adx   
23 [0x17]:         rmov adx, ebx   
24 [0x18]: line: 15 movi #255, ebx   
26 [0x1a]:          newarry ebx: 0   
27 [0x1b]:          movl 0   
28 [0x1c]:          movn #0   
30 [0x1e]:          popobj   
31 [0x1f]: line: 16 movi #255, ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #2   
36 [0x24]:          movi #0, adx   
38 [0x26]:          rmov adx, ebx   
39 [0x27]: line: 17 movi #-1, ebx   
41 [0x29]:          movl 0   
42 [0x2a]:          movn #3   
44 [0x2c]:          movi #0, adx   
46 [0x2e]:          rmov adx, ebx   
47 [0x2f]:          pushl 0   
48 [0x30]: line: 35 movl 1   
49 [0x31]:          checknull   
50 [0x32]:          not ebx, ebx   
51 [0x33]:          movr cmt, ebx   
52 [0x34]:          jne 111   
53 [0x35]: line: 36 pushl 0   
54 [0x36]:          movl 1   
55 [0x37]:          sizeof ebx   
56 [0x38]:          rstore ebx   
57 [0x39]:          call @3612 // <std#string_builder.space_available>   
58 [0x3a]:          loadval ebx   
59 [0x3b]:          not ebx, ebx   
60 [0x3c]:          movr cmt, ebx   
61 [0x3d]:          jne 67   
62 [0x3e]: line: 37 pushl 0   
63 [0x3f]:          movl 1   
64 [0x40]:          sizeof ebx   
65 [0x41]:          rstore ebx   
66 [0x42]:          call @3613 // <std#string_builder.expand>   
67 [0x43]:          nop   
68 [0x44]: line: 40 movl 1   
69 [0x45]:          sizeof ebx   
70 [0x46]:          newarry ebx: 8   
71 [0x47]:          movl 0   
72 [0x48]:          movn #0   
74 [0x4a]:          popobj   
75 [0x4b]: line: 41 istorel -1, fp+3   
77 [0x4d]:          pushl 1   
78 [0x4e]:          popl 4   
79 [0x4f]:          iaddl 1, fp@3   
81 [0x51]:          movl 4   
82 [0x52]:          sizeof ecx   
83 [0x53]:          loadl ebx, fp+3   
84 [0x54]:          lt ebx, ecx   
85 [0x55]:          jne 111   
86 [0x56]:          movnd ebx   
87 [0x57]:          pushobj   
88 [0x58]:          popl 2   
89 [0x59]: line: 42 pushl 2   
90 [0x5a]:          call @1685 // <std#integer<_int8>.get_value>   
91 [0x5b]:          movl 0   
92 [0x5c]:          movn #0   
94 [0x5e]:          pushobj   
95 [0x5f]:          movl 0   
96 [0x60]:          movn #3   
98 [0x62]:          movi #0, adx   
100 [0x64]:          iaload ebx, adx   
101 [0x65]:          inc ebx   
102 [0x66]:          movi #0, adx   
104 [0x68]:          rmov adx, ebx   
105 [0x69]:          popobj2    
106 [0x6a]:          movr adx, ebx   
107 [0x6b]:          chklen adx   
108 [0x6c]:          loadval ebx   
109 [0x6d]:          rmov adx, ebx   
110 [0x6e]:          jmp @79   
111 [0x6f]:          nop   
112 [0x70]:          ret   


constructor: std#string_builder.string_builder[3609] params(1) in file: lib\support\/0.2.9//string_builder.sharp:47:19: note:  
		    string_builder(str: string) {
		                  ^

0 [0x0]:         movi #128, ebx   
2 [0x2]:         movl 0   
3 [0x3]:         movn #1   
5 [0x5]:         movi #0, adx   
7 [0x7]:         rmov adx, ebx   
8 [0x8]:         movi #0, ebx   
10 [0xa]:         movl 0   
11 [0xb]:         movn #2   
13 [0xd]:         movi #0, adx   
15 [0xf]:         rmov adx, ebx   
16 [0x10]:         movi #0, ebx   
18 [0x12]:         movl 0   
19 [0x13]:         movn #3   
21 [0x15]:         movi #0, adx   
23 [0x17]:         rmov adx, ebx   
24 [0x18]: line: 15 movi #255, ebx   
26 [0x1a]:          newarry ebx: 0   
27 [0x1b]:          movl 0   
28 [0x1c]:          movn #0   
30 [0x1e]:          popobj   
31 [0x1f]: line: 16 movi #255, ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #2   
36 [0x24]:          movi #0, adx   
38 [0x26]:          rmov adx, ebx   
39 [0x27]: line: 17 movi #-1, ebx   
41 [0x29]:          movl 0   
42 [0x2a]:          movn #3   
44 [0x2c]:          movi #0, adx   
46 [0x2e]:          rmov adx, ebx   
47 [0x2f]:          pushl 0   
48 [0x30]: line: 48 movl 1   
49 [0x31]:          checknull   
50 [0x32]:          not ebx, ebx   
51 [0x33]:          movr cmt, ebx   
52 [0x34]:          jne 58   
53 [0x35]: line: 49 pushl 0   
54 [0x36]:          pushl 1   
55 [0x37]:          call @3572 // <std#string.get_data>   
56 [0x38]:          call @3618 // <std#string_builder.append>   
57 [0x39]:          pop   
58 [0x3a]:          nop   
59 [0x3b]:          ret   


constructor: std#string_builder.string_builder[3610] params(1) in file: lib\support\/0.2.9//string_builder.sharp:53:19: note:  
		    string_builder(str: string_builder) {
		                  ^

0 [0x0]:         movi #128, ebx   
2 [0x2]:         movl 0   
3 [0x3]:         movn #1   
5 [0x5]:         movi #0, adx   
7 [0x7]:         rmov adx, ebx   
8 [0x8]:         movi #0, ebx   
10 [0xa]:         movl 0   
11 [0xb]:         movn #2   
13 [0xd]:         movi #0, adx   
15 [0xf]:         rmov adx, ebx   
16 [0x10]:         movi #0, ebx   
18 [0x12]:         movl 0   
19 [0x13]:         movn #3   
21 [0x15]:         movi #0, adx   
23 [0x17]:         rmov adx, ebx   
24 [0x18]: line: 15 movi #255, ebx   
26 [0x1a]:          newarry ebx: 0   
27 [0x1b]:          movl 0   
28 [0x1c]:          movn #0   
30 [0x1e]:          popobj   
31 [0x1f]: line: 16 movi #255, ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #2   
36 [0x24]:          movi #0, adx   
38 [0x26]:          rmov adx, ebx   
39 [0x27]: line: 17 movi #-1, ebx   
41 [0x29]:          movl 0   
42 [0x2a]:          movn #3   
44 [0x2c]:          movi #0, adx   
46 [0x2e]:          rmov adx, ebx   
47 [0x2f]:          pushl 0   
48 [0x30]: line: 54 movl 1   
49 [0x31]:          checknull   
50 [0x32]:          not ebx, ebx   
51 [0x33]:          movr cmt, ebx   
52 [0x34]:          jne 60   
53 [0x35]: line: 55 pushl 0   
54 [0x36]:          movl 1   
55 [0x37]:          movn #0   
57 [0x39]:          pushobj   
58 [0x3a]:          call @3618 // <std#string_builder.append>   
59 [0x3b]:          pop   
60 [0x3c]:          nop   
61 [0x3d]:          ret   


constructor: std#string_builder.string_builder[3611] params(2) in file: lib\support\/0.2.9//string_builder.sharp:59:19: note:  
		    string_builder(str : _int8[], offset: var) {
		                  ^

0 [0x0]:         movi #128, ebx   
2 [0x2]:         movl 0   
3 [0x3]:         movn #1   
5 [0x5]:         movi #0, adx   
7 [0x7]:         rmov adx, ebx   
8 [0x8]:         movi #0, ebx   
10 [0xa]:         movl 0   
11 [0xb]:         movn #2   
13 [0xd]:         movi #0, adx   
15 [0xf]:         rmov adx, ebx   
16 [0x10]:         movi #0, ebx   
18 [0x12]:         movl 0   
19 [0x13]:         movn #3   
21 [0x15]:         movi #0, adx   
23 [0x17]:         rmov adx, ebx   
24 [0x18]: line: 15 movi #255, ebx   
26 [0x1a]:          newarry ebx: 0   
27 [0x1b]:          movl 0   
28 [0x1c]:          movn #0   
30 [0x1e]:          popobj   
31 [0x1f]: line: 16 movi #255, ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #2   
36 [0x24]:          movi #0, adx   
38 [0x26]:          rmov adx, ebx   
39 [0x27]: line: 17 movi #-1, ebx   
41 [0x29]:          movl 0   
42 [0x2a]:          movn #3   
44 [0x2c]:          movi #0, adx   
46 [0x2e]:          rmov adx, ebx   
47 [0x2f]:          pushl 0   
48 [0x30]: line: 60 movl 1   
49 [0x31]:          checknull   
50 [0x32]:          not ebx, ebx   
51 [0x33]:          movr cmt, ebx   
52 [0x34]:          jne 114   
53 [0x35]: line: 61 pushl 0   
54 [0x36]:          movl 1   
55 [0x37]:          sizeof ebx   
56 [0x38]:          rstore ebx   
57 [0x39]:          loadl ebx, fp+2   
58 [0x3a]:          loadval ecx   
59 [0x3b]:          sub ecx, ebx -> ebx   
60 [0x3c]:          rstore ebx   
61 [0x3d]:          call @3612 // <std#string_builder.space_available>   
62 [0x3e]:          loadval ebx   
63 [0x3f]:          not ebx, ebx   
64 [0x40]:          movr cmt, ebx   
65 [0x41]:          jne 71   
66 [0x42]: line: 62 pushl 0   
67 [0x43]:          movl 1   
68 [0x44]:          sizeof ebx   
69 [0x45]:          rstore ebx   
70 [0x46]:          call @3613 // <std#string_builder.expand>   
71 [0x47]:          nop   
72 [0x48]: line: 65 pushl 1   
73 [0x49]:          movl 0   
74 [0x4a]:          movn #0   
76 [0x4c]:          pushobj   
77 [0x4d]:          movl 0   
78 [0x4e]:          movn #3   
80 [0x50]:          movi #0, adx   
82 [0x52]:          iaload ebx, adx   
83 [0x53]:          inc ebx   
84 [0x54]:          movi #0, adx   
86 [0x56]:          rmov adx, ebx   
87 [0x57]:          rstore ebx   
88 [0x58]:          ipushl #2   
89 [0x59]:          movl 1   
90 [0x5a]:          sizeof ebx   
91 [0x5b]:          rstore ebx   
92 [0x5c]:          call @2153 // <std.io#__srt_global.memcopy>   
93 [0x5d]: line: 66 movl 1   
94 [0x5e]:          sizeof ebx   
95 [0x5f]:          rstore ebx   
96 [0x60]:          loadl ebx, fp+2   
97 [0x61]:          loadval ecx   
98 [0x62]:          sub ecx, ebx -> ebx   
99 [0x63]:          rstore ebx   
100 [0x64]:          movi #1, ebx   
102 [0x66]:          loadval ecx   
103 [0x67]:          sub ecx, ebx -> ebx   
104 [0x68]:          rstore ebx   
105 [0x69]:          movl 0   
106 [0x6a]:          movn #3   
108 [0x6c]:          movi #0, adx   
110 [0x6e]:          iaload ecx, adx   
111 [0x6f]:          loadval ebx   
112 [0x70]:          add ecx, ebx -> ebx   
113 [0x71]:          rmov adx, ebx   
114 [0x72]:          nop   
115 [0x73]:          ret   


function: std#string_builder.space_available[3612] params(1) in file: lib\support\/0.2.9//string_builder.sharp:70:8: note:  
		    def space_available(space_required : var) : var {
		       ^

0 [0x0]: line: 71 movl 0   
1 [0x1]:          movn #3   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #1, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          add ecx, ebx -> ebx   
11 [0xb]:          rstore ebx   
12 [0xc]:          loadl ebx, fp+1   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          rstore ebx   
16 [0x10]:          movl 0   
17 [0x11]:          movn #0   
19 [0x13]:          sizeof ebx   
20 [0x14]:          loadval ecx   
21 [0x15]:          lt ecx, ebx   
22 [0x16]:          return_val cmt   
23 [0x17]:          ret   


function: std#string_builder.expand[3613] params(1) in file: lib\support\/0.2.9//string_builder.sharp:74:8: note:  
		    def expand(space_required : var) {
		       ^

0 [0x0]: line: 75 movl 0   
1 [0x1]:          movn #3   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #1, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          add ecx, ebx -> ebx   
11 [0xb]:          rstore ebx   
12 [0xc]:          loadl ebx, fp+1   
13 [0xd]:          loadval ecx   
14 [0xe]:          add ecx, ebx -> ebx   
15 [0xf]:          rstore ebx   
16 [0x10]:          movl 0   
17 [0x11]:          movn #1   
19 [0x13]:          movi #0, adx   
21 [0x15]:          iaload ebx, adx   
22 [0x16]:          loadval ecx   
23 [0x17]:          add ecx, ebx -> ebx   
24 [0x18]:          smovr_2 ebx, fp+2   
25 [0x19]: line: 76 movl 0   
26 [0x1a]:          movn #0   
28 [0x1c]:          pushobj   
29 [0x1d]:          ipushl #2   
30 [0x1e]:          call @2143 // <std.io#__srt_global.realloc>   
31 [0x1f]:          ret   


function: std#string_builder.replace[3614] params(2) in file: lib\support\/0.2.9//string_builder.sharp:79:8: note:  
		    def replace(pos : var, ch: _int8) : string_builder {
		       ^

0 [0x0]: line: 80 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          sizeof ebx   
5 [0x5]:          loadval ecx   
6 [0x6]:          gte ecx, ebx   
7 [0x7]:          movr ebx, cmt   
8 [0x8]:          movr cmt, ebx   
9 [0x9]:          jne 14   
10 [0xa]: line: 81 pushl 0   
11 [0xb]:          ipushl #1   
12 [0xc]:          call @3647 // <std#string_builder.bounds_error>   
13 [0xd]:          throw    
14 [0xe]:          nop   
15 [0xf]: line: 84 ipushl #2   
16 [0x10]:          movl 0   
17 [0x11]:          movn #0   
19 [0x13]:          pushobj   
20 [0x14]:          loadl ebx, fp+1   
21 [0x15]:          popobj2    
22 [0x16]:          movr adx, ebx   
23 [0x17]:          chklen adx   
24 [0x18]:          loadval ebx   
25 [0x19]:          rmov adx, ebx   
26 [0x1a]: line: 85 movl 0   
27 [0x1b]:          returnobj   
28 [0x1c]:          ret   


function: std#string_builder.append[3615] params(1) in file: lib\support\/0.2.9//string_builder.sharp:88:8: note:  
		    def append(ch: var) : string_builder
		       ^

0 [0x0]: line: 90 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          pushobj   
4 [0x4]:          pushnull    
5 [0x5]:          itest ebx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 16   
8 [0x8]: line: 91 movi #255, ebx   
10 [0xa]:          newarry ebx: 8   
11 [0xb]:          movl 0   
12 [0xc]:          movn #0   
14 [0xe]:          popobj   
15 [0xf]:          jmp @41   
16 [0x10]:          movl 0   
17 [0x11]:          movn #3   
19 [0x13]:          movi #0, adx   
21 [0x15]:          iaload ebx, adx   
22 [0x16]:          rstore ebx   
23 [0x17]:          movi #1, ebx   
25 [0x19]:          loadval ecx   
26 [0x1a]:          add ecx, ebx -> ebx   
27 [0x1b]:          rstore ebx   
28 [0x1c]:          movl 0   
29 [0x1d]:          movn #0   
31 [0x1f]:          sizeof ebx   
32 [0x20]:          loadval ecx   
33 [0x21]:          gte ecx, ebx   
34 [0x22]:          movr ebx, cmt   
35 [0x23]:          movr cmt, ebx   
36 [0x24]:          jne 41   
37 [0x25]: line: 93 pushl 0   
38 [0x26]:          istore 0   
40 [0x28]:          call @3613 // <std#string_builder.expand>   
41 [0x29]:          nop   
42 [0x2a]: line: 95 ipushl #1   
43 [0x2b]:          movl 0   
44 [0x2c]:          movn #0   
46 [0x2e]:          pushobj   
47 [0x2f]:          movl 0   
48 [0x30]:          movn #0   
50 [0x32]:          sizeof ebx   
51 [0x33]:          rstore ebx   
52 [0x34]:          movi #1, ebx   
54 [0x36]:          loadval ecx   
55 [0x37]:          sub ecx, ebx -> ebx   
56 [0x38]:          popobj2    
57 [0x39]:          movr adx, ebx   
58 [0x3a]:          chklen adx   
59 [0x3b]:          loadval ebx   
60 [0x3c]:          rmov adx, ebx   
61 [0x3d]: line: 96 movl 0   
62 [0x3e]:          returnobj   
63 [0x3f]:          ret   


function: std#string_builder.get_elements[3616] params(0) in file: lib\support\/0.2.9//string_builder.sharp:99:8: note:  
		    def get_elements() := to_string().get_elements();
		       ^

0 [0x0]: line: 99 pushl 0   
1 [0x1]:          call @3622 // <std#string_builder.to_string>   
2 [0x2]:          call @3573 // <std#string.get_elements>   
3 [0x3]:          popobj2    
4 [0x4]:          returnobj   
5 [0x5]:          ret   


function: std#string_builder.append[3617] params(1) in file: lib\support\/0.2.9//string_builder.sharp:101:8: note:  
		    def append(c: char) := append(c.get_value());
		       ^

0 [0x0]: line: 101 pushl 0   
1 [0x1]:           pushl 1   
2 [0x2]:           call @1685 // <std#integer<_int8>.get_value>   
3 [0x3]:           call @3615 // <std#string_builder.append>   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   


function: std#string_builder.append[3618] params(1) in file: lib\support\/0.2.9//string_builder.sharp:103:8: note:  
		    def append(immstr: _int8[]) : string_builder
		       ^

0 [0x0]: line: 105 movl 1   
1 [0x1]:           checknull   
2 [0x2]:           movr cmt, ebx   
3 [0x3]:           jne 7   
4 [0x4]:           movl 0   
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]:           nop   
8 [0x8]: line: 107 movl 0   
9 [0x9]:           movn #0   
11 [0xb]:           pushobj   
12 [0xc]:           pushnull    
13 [0xd]:           itest ebx   
14 [0xe]:           movr cmt, ebx   
15 [0xf]:           jne 29   
16 [0x10]: line: 108 movl 1   
17 [0x11]:           sizeof ebx   
18 [0x12]:           rstore ebx   
19 [0x13]:           movi #255, ebx   
21 [0x15]:           loadval ecx   
22 [0x16]:           add ecx, ebx -> ebx   
23 [0x17]:           newarry ebx: 8   
24 [0x18]:           movl 0   
25 [0x19]:           movn #0   
27 [0x1b]:           popobj   
28 [0x1c]:           jmp @43   
29 [0x1d]:           pushl 0   
30 [0x1e]:           movl 1   
31 [0x1f]:           sizeof ebx   
32 [0x20]:           rstore ebx   
33 [0x21]:           call @3612 // <std#string_builder.space_available>   
34 [0x22]:           loadval ebx   
35 [0x23]:           not ebx, ebx   
36 [0x24]:           movr cmt, ebx   
37 [0x25]:           jne 43   
38 [0x26]: line: 110 pushl 0   
39 [0x27]:           movl 1   
40 [0x28]:           sizeof ebx   
41 [0x29]:           rstore ebx   
42 [0x2a]:           call @3613 // <std#string_builder.expand>   
43 [0x2b]:           nop   
44 [0x2c]: line: 112 pushl 1   
45 [0x2d]:           movl 0   
46 [0x2e]:           movn #0   
48 [0x30]:           pushobj   
49 [0x31]:           movl 0   
50 [0x32]:           movn #3   
52 [0x34]:           movi #0, adx   
54 [0x36]:           iaload ebx, adx   
55 [0x37]:           inc ebx   
56 [0x38]:           movi #0, adx   
58 [0x3a]:           rmov adx, ebx   
59 [0x3b]:           rstore ebx   
60 [0x3c]:           istore 0   
62 [0x3e]:           movl 1   
63 [0x3f]:           sizeof ebx   
64 [0x40]:           rstore ebx   
65 [0x41]:           call @2153 // <std.io#__srt_global.memcopy>   
66 [0x42]: line: 113 movl 1   
67 [0x43]:           sizeof ebx   
68 [0x44]:           rstore ebx   
69 [0x45]:           movi #1, ebx   
71 [0x47]:           loadval ecx   
72 [0x48]:           sub ecx, ebx -> ebx   
73 [0x49]:           rstore ebx   
74 [0x4a]:           movl 0   
75 [0x4b]:           movn #3   
77 [0x4d]:           movi #0, adx   
79 [0x4f]:           iaload ecx, adx   
80 [0x50]:           loadval ebx   
81 [0x51]:           add ecx, ebx -> ebx   
82 [0x52]:           rmov adx, ebx   
83 [0x53]: line: 114 movl 0   
84 [0x54]:           returnobj   
85 [0x55]:           ret   


function: std#string_builder.append[3619] params(2) in file: lib\support\/0.2.9//string_builder.sharp:117:8: note:  
		    def append(immstr: _int8[], len: var) : string_builder
		       ^

0 [0x0]: line: 119 movl 1   
1 [0x1]:           checknull   
2 [0x2]:           movr cmt, ebx   
3 [0x3]:           jne 7   
4 [0x4]:           movl 0   
5 [0x5]:           returnobj   
6 [0x6]:           ret   
7 [0x7]:           nop   
8 [0x8]: line: 120 loadl ecx, fp+2   
9 [0x9]:           movi #0, ebx   
11 [0xb]:           lt ecx, ebx   
12 [0xc]:           movr ebx, cmt   
13 [0xd]:           movr cmt, ebx   
14 [0xe]:           jne 21   
15 [0xf]: line: 121 new_class @20 // std#error   
17 [0x11]:           dup    
18 [0x12]:           newstr @90 // length cannot be less than zero   
19 [0x13]:           call @2009 // <std#error.error>   
20 [0x14]:           throw    
21 [0x15]:           nop   
22 [0x16]: line: 123 ipushl #2   
23 [0x17]:           movl 1   
24 [0x18]:           sizeof ebx   
25 [0x19]:           loadval ecx   
26 [0x1a]:           gt ecx, ebx   
27 [0x1b]:           movr ebx, cmt   
28 [0x1c]:           movr cmt, ebx   
29 [0x1d]:           jne 48   
30 [0x1e]: line: 124 new_class @20 // std#error   
32 [0x20]:           dup    
33 [0x21]:           new_class @75 // std#string   
35 [0x23]:           dup    
36 [0x24]:           newstr @91 // length of:    
37 [0x25]:           call @3546 // <std#string.string>   
38 [0x26]:           ipushl #2   
39 [0x27]:           call @3578 // <std#string.operator+>   
40 [0x28]:           newstr @92 //  is greater than the string:    
41 [0x29]:           call @3558 // <std#string.operator+>   
42 [0x2a]:           movl 1   
43 [0x2b]:           sizeof ebx   
44 [0x2c]:           rstore ebx   
45 [0x2d]:           call @3578 // <std#string.operator+>   
46 [0x2e]:           call @2010 // <std#error.error>   
47 [0x2f]:           throw    
48 [0x30]:           nop   
49 [0x31]: line: 126 movl 0   
50 [0x32]:           movn #0   
52 [0x34]:           pushobj   
53 [0x35]:           pushnull    
54 [0x36]:           itest ebx   
55 [0x37]:           movr cmt, ebx   
56 [0x38]:           jne 68   
57 [0x39]: line: 127 ipushl #2   
58 [0x3a]:           movi #255, ebx   
60 [0x3c]:           loadval ecx   
61 [0x3d]:           add ecx, ebx -> ebx   
62 [0x3e]:           newarry ebx: 8   
63 [0x3f]:           movl 0   
64 [0x40]:           movn #0   
66 [0x42]:           popobj   
67 [0x43]:           jmp @82   
68 [0x44]:           pushl 0   
69 [0x45]:           movl 1   
70 [0x46]:           sizeof ebx   
71 [0x47]:           rstore ebx   
72 [0x48]:           call @3612 // <std#string_builder.space_available>   
73 [0x49]:           loadval ebx   
74 [0x4a]:           not ebx, ebx   
75 [0x4b]:           movr cmt, ebx   
76 [0x4c]:           jne 82   
77 [0x4d]: line: 129 pushl 0   
78 [0x4e]:           movl 1   
79 [0x4f]:           sizeof ebx   
80 [0x50]:           rstore ebx   
81 [0x51]:           call @3613 // <std#string_builder.expand>   
82 [0x52]:           nop   
83 [0x53]: line: 131 pushl 1   
84 [0x54]:           movl 0   
85 [0x55]:           movn #0   
87 [0x57]:           pushobj   
88 [0x58]:           movl 0   
89 [0x59]:           movn #3   
91 [0x5b]:           movi #0, adx   
93 [0x5d]:           iaload ebx, adx   
94 [0x5e]:           inc ebx   
95 [0x5f]:           movi #0, adx   
97 [0x61]:           rmov adx, ebx   
98 [0x62]:           rstore ebx   
99 [0x63]:           istore 0   
101 [0x65]:           ipushl #2   
102 [0x66]:           call @2153 // <std.io#__srt_global.memcopy>   
103 [0x67]: line: 132 movl 1   
104 [0x68]:           sizeof ebx   
105 [0x69]:           rstore ebx   
106 [0x6a]:           loadl ebx, fp+2   
107 [0x6b]:           loadval ecx   
108 [0x6c]:           sub ecx, ebx -> ebx   
109 [0x6d]:           rstore ebx   
110 [0x6e]:           movi #1, ebx   
112 [0x70]:           loadval ecx   
113 [0x71]:           sub ecx, ebx -> ebx   
114 [0x72]:           rstore ebx   
115 [0x73]:           movl 0   
116 [0x74]:           movn #3   
118 [0x76]:           movi #0, adx   
120 [0x78]:           iaload ecx, adx   
121 [0x79]:           loadval ebx   
122 [0x7a]:           add ecx, ebx -> ebx   
123 [0x7b]:           rmov adx, ebx   
124 [0x7c]: line: 133 movl 0   
125 [0x7d]:           returnobj   
126 [0x7e]:           ret   


overload function: std#string_builder.operator+[3620] params(1) in file: lib\support\/0.2.9//string_builder.sharp:136:8: note:  
		    def operator+(immstr : _int8[]) : string_builder {
		       ^

0 [0x0]: line: 137 new_class @76 // std#string_builder   
2 [0x2]:           dup    
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @3606 // <std#string_builder.string_builder>   
8 [0x8]:           popobj2    
9 [0x9]:           smovr_3 fp+2   
10 [0xa]: line: 138 movl 1   
11 [0xb]:           checknull   
12 [0xc]:           not ebx, ebx   
13 [0xd]:           movr cmt, ebx   
14 [0xe]:           jne 22   
15 [0xf]: line: 139 pushl 2   
16 [0x10]:           pushl 1   
17 [0x11]:           call @3618 // <std#string_builder.append>   
18 [0x12]:           popobj2    
19 [0x13]:           returnobj   
20 [0x14]:           ret   
21 [0x15]:           jmp @28   
22 [0x16]: line: 141 pushl 2   
23 [0x17]:           newstr @18 // null   
24 [0x18]:           call @3618 // <std#string_builder.append>   
25 [0x19]:           popobj2    
26 [0x1a]:           returnobj   
27 [0x1b]:           ret   
28 [0x1c]:           nop   


overload function: std#string_builder.operator+[3621] params(1) in file: lib\support\/0.2.9//string_builder.sharp:145:8: note:  
		    def operator+(obj : printable) : string_builder {
		       ^

0 [0x0]: line: 146 new_class @76 // std#string_builder   
2 [0x2]:           dup    
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @3606 // <std#string_builder.string_builder>   
8 [0x8]:           popobj2    
9 [0x9]:           smovr_3 fp+2   
10 [0xa]: line: 147 movl 1   
11 [0xb]:           checknull   
12 [0xc]:           not ebx, ebx   
13 [0xd]:           movr cmt, ebx   
14 [0xe]:           jne 25   
15 [0xf]: line: 148 pushl 2   
16 [0x10]:           pushl 1   
17 [0x11]:           invoke_delegate 3530 { static=0, args=0 }   
19 [0x13]:           call @3572 // <std#string.get_data>   
20 [0x14]:           call @3618 // <std#string_builder.append>   
21 [0x15]:           popobj2    
22 [0x16]:           returnobj   
23 [0x17]:           ret   
24 [0x18]:           jmp @31   
25 [0x19]: line: 150 pushl 2   
26 [0x1a]:           newstr @18 // null   
27 [0x1b]:           call @3618 // <std#string_builder.append>   
28 [0x1c]:           popobj2    
29 [0x1d]:           returnobj   
30 [0x1e]:           ret   
31 [0x1f]:           nop   


function: std#string_builder.to_string[3622] params(0) in file: lib\support\/0.2.9//string_builder.sharp:153:8: note:  
		    def to_string() := new string(data, 0, cursor + 1);
		       ^

0 [0x0]: line: 153 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           istore 0   
9 [0x9]:           movl 0   
10 [0xa]:           movn #3   
12 [0xc]:           movi #0, adx   
14 [0xe]:           iaload ebx, adx   
15 [0xf]:           rstore ebx   
16 [0x10]:           movi #1, ebx   
18 [0x12]:           loadval ecx   
19 [0x13]:           add ecx, ebx -> ebx   
20 [0x14]:           rstore ebx   
21 [0x15]:           call @3551 // <std#string.string>   
22 [0x16]:           popobj2    
23 [0x17]:           returnobj   
24 [0x18]:           ret   


overload function: std#string_builder.operator==[3623] params(1) in file: lib\support\/0.2.9//string_builder.sharp:155:8: note:  
		    def operator==(str : _int8[]) : var {
		       ^

0 [0x0]: line: 156 movl 0   
1 [0x1]:           movn #3   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #1, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           add ecx, ebx -> ebx   
11 [0xb]:           rstore ebx   
12 [0xc]:           movl 1   
13 [0xd]:           sizeof ebx   
14 [0xe]:           loadval ecx   
15 [0xf]:           tne ecx, ebx   
16 [0x10]:           movr ebx, cmt   
17 [0x11]:           movr cmt, ebx   
18 [0x12]:           jne 22   
19 [0x13]: line: 157 istorel 0, fp+0   
21 [0x15]:           ret   
22 [0x16]:           nop   
23 [0x17]: line: 159 istorel 0, fp+2   
25 [0x19]: line: 160 istorel -1, fp+4   
27 [0x1b]:           pushl 1   
28 [0x1c]:           popl 5   
29 [0x1d]:           iaddl 1, fp@4   
31 [0x1f]:           movl 5   
32 [0x20]:           sizeof ecx   
33 [0x21]:           loadl ebx, fp+4   
34 [0x22]:           lt ebx, ecx   
35 [0x23]:           jne 62   
36 [0x24]:           iaload ecx, ebx   
37 [0x25]:           smovr_2 ecx, fp+3   
38 [0x26]: line: 161 ipushl #3   
39 [0x27]:           movl 0   
40 [0x28]:           movn #0   
42 [0x2a]:           pushobj   
43 [0x2b]:           loadl ebx, fp+2   
44 [0x2c]:           movr egx, ebx   
45 [0x2d]:           inc ebx   
46 [0x2e]:           smovr_2 ebx, fp+2   
47 [0x2f]:           movr ebx, egx   
48 [0x30]:           popobj2    
49 [0x31]:           movr adx, ebx   
50 [0x32]:           chklen adx   
51 [0x33]:           iaload ebx, adx   
52 [0x34]:           loadval ecx   
53 [0x35]:           tne ecx, ebx   
54 [0x36]:           movr ebx, cmt   
55 [0x37]:           movr cmt, ebx   
56 [0x38]:           jne 60   
57 [0x39]: line: 162 istorel 0, fp+0   
59 [0x3b]:           ret   
60 [0x3c]:           nop   
61 [0x3d]:           jmp @29   
62 [0x3e]: line: 165 istorel 1, fp+0   
64 [0x40]:           ret   


overload function: std#string_builder.operator==[3624] params(1) in file: lib\support\/0.2.9//string_builder.sharp:168:8: note:  
		    def operator==(str : string) : var {
		       ^

0 [0x0]: line: 169 movl 0   
1 [0x1]:           movn #3   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #1, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           add ecx, ebx -> ebx   
11 [0xb]:           rstore ebx   
12 [0xc]:           pushl 1   
13 [0xd]:           call @3572 // <std#string.get_data>   
14 [0xe]:           popobj2    
15 [0xf]:           sizeof ebx   
16 [0x10]:           loadval ecx   
17 [0x11]:           tne ecx, ebx   
18 [0x12]:           movr ebx, cmt   
19 [0x13]:           movr cmt, ebx   
20 [0x14]:           jne 24   
21 [0x15]: line: 170 istorel 0, fp+0   
23 [0x17]:           ret   
24 [0x18]:           nop   
25 [0x19]: line: 172 istorel 0, fp+2   
27 [0x1b]: line: 173 istorel -1, fp+4   
29 [0x1d]:           pushl 1   
30 [0x1e]:           call @3572 // <std#string.get_data>   
31 [0x1f]:           popl 5   
32 [0x20]:           iaddl 1, fp@4   
34 [0x22]:           movl 5   
35 [0x23]:           sizeof ecx   
36 [0x24]:           loadl ebx, fp+4   
37 [0x25]:           lt ebx, ecx   
38 [0x26]:           jne 65   
39 [0x27]:           iaload ecx, ebx   
40 [0x28]:           smovr_2 ecx, fp+3   
41 [0x29]: line: 174 ipushl #3   
42 [0x2a]:           movl 0   
43 [0x2b]:           movn #0   
45 [0x2d]:           pushobj   
46 [0x2e]:           loadl ebx, fp+2   
47 [0x2f]:           movr egx, ebx   
48 [0x30]:           inc ebx   
49 [0x31]:           smovr_2 ebx, fp+2   
50 [0x32]:           movr ebx, egx   
51 [0x33]:           popobj2    
52 [0x34]:           movr adx, ebx   
53 [0x35]:           chklen adx   
54 [0x36]:           iaload ebx, adx   
55 [0x37]:           loadval ecx   
56 [0x38]:           tne ecx, ebx   
57 [0x39]:           movr ebx, cmt   
58 [0x3a]:           movr cmt, ebx   
59 [0x3b]:           jne 63   
60 [0x3c]: line: 175 istorel 0, fp+0   
62 [0x3e]:           ret   
63 [0x3f]:           nop   
64 [0x40]:           jmp @32   
65 [0x41]: line: 178 istorel 1, fp+0   
67 [0x43]:           ret   


overload function: std#string_builder.operator!=[3625] params(1) in file: lib\support\/0.2.9//string_builder.sharp:182:8: note:  
		    def operator!=(str : _int8[]) := !operator==(str);
		       ^

0 [0x0]: line: 182 pushl 0   
1 [0x1]:           pushl 1   
2 [0x2]:           call @3623 // <std#string_builder.operator==>   
3 [0x3]:           loadval ebx   
4 [0x4]:           not ebx, ebx   
5 [0x5]:           return_val ebx   
6 [0x6]:           ret   


overload function: std#string_builder.operator!=[3626] params(1) in file: lib\support\/0.2.9//string_builder.sharp:184:8: note:  
		    def operator!=(str : string) := !operator==(str);
		       ^

0 [0x0]: line: 184 pushl 0   
1 [0x1]:           pushl 1   
2 [0x2]:           call @3624 // <std#string_builder.operator==>   
3 [0x3]:           loadval ebx   
4 [0x4]:           not ebx, ebx   
5 [0x5]:           return_val ebx   
6 [0x6]:           ret   


overload function: std#string_builder.operator=[3627] params(1) in file: lib\support\/0.2.9//string_builder.sharp:186:8: note:  
		    def operator=( immstr: _int8[] )
		       ^

0 [0x0]: line: 188 movl 1   
1 [0x1]:           checknull   
2 [0x2]:           movr cmt, ebx   
3 [0x3]:           jne 20   
4 [0x4]: line: 189 movi #255, ebx   
6 [0x6]:           newarry ebx: 0   
7 [0x7]:           movl 0   
8 [0x8]:           movn #0   
10 [0xa]:           popobj   
11 [0xb]: line: 190 movi #-1, ebx   
13 [0xd]:           movl 0   
14 [0xe]:           movn #3   
16 [0x10]:           movi #0, adx   
18 [0x12]:           rmov adx, ebx   
19 [0x13]:           jmp @54   
20 [0x14]: line: 193 movl 1   
21 [0x15]:           sizeof ebx   
22 [0x16]:           rstore ebx   
23 [0x17]:           movi #255, ebx   
25 [0x19]:           loadval ecx   
26 [0x1a]:           add ecx, ebx -> ebx   
27 [0x1b]:           newarry ebx: 0   
28 [0x1c]:           movl 0   
29 [0x1d]:           movn #0   
31 [0x1f]:           popobj   
32 [0x20]: line: 194 movl 1   
33 [0x21]:           sizeof ebx   
34 [0x22]:           movl 0   
35 [0x23]:           movn #3   
37 [0x25]:           movi #0, adx   
39 [0x27]:           rmov adx, ebx   
40 [0x28]: line: 195 pushl 1   
41 [0x29]:           movl 0   
42 [0x2a]:           movn #0   
44 [0x2c]:           pushobj   
45 [0x2d]:           istore 0   
47 [0x2f]:           movi #0, ebx   
49 [0x31]:           rstore ebx   
50 [0x32]:           movl 1   
51 [0x33]:           sizeof ebx   
52 [0x34]:           rstore ebx   
53 [0x35]:           call @2153 // <std.io#__srt_global.memcopy>   
54 [0x36]:           nop   
55 [0x37]:           ret   


function: std#string_builder.at[3628] params(1) in file: lib\support\/0.2.9//string_builder.sharp:199:8: note:  
		    def at(pos : var) : _int8 {
		       ^

0 [0x0]: line: 200 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #3   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gt ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           movr cmt, ebx   
11 [0xb]:           jne 16   
12 [0xc]: line: 201 pushl 0   
13 [0xd]:           ipushl #1   
14 [0xe]:           call @3647 // <std#string_builder.bounds_error>   
15 [0xf]:           throw    
16 [0x10]:           nop   
17 [0x11]: line: 202 movl 0   
18 [0x12]:           movn #0   
20 [0x14]:           pushobj   
21 [0x15]:           loadl ebx, fp+1   
22 [0x16]:           popobj2    
23 [0x17]:           movr adx, ebx   
24 [0x18]:           chklen adx   
25 [0x19]:           iaload ebx, adx   
26 [0x1a]:           return_val ebx   
27 [0x1b]:           ret   


overload function: std#string_builder.operator[[3629] params(1) in file: lib\support\/0.2.9//string_builder.sharp:205:8: note:  
		    def operator[](pos: var) : var {
		       ^

0 [0x0]: line: 206 pushl 0   
1 [0x1]:           ipushl #1   
2 [0x2]:           call @3628 // <std#string_builder.at>   
3 [0x3]:           loadval ebx   
4 [0x4]:           return_val ebx   
5 [0x5]:           ret   


function: std#string_builder.fmt[3630] params(1) in file: lib\support\/0.2.9//string_builder.sharp:209:15: note:  
		    static def fmt( _fmt: var ) {
		              ^

0 [0x0]: line: 210 ipushl #0   
1 [0x1]:           movg @76 // @std#string_builder   
2 [0x2]:           movn #0   
4 [0x4]:           loadval ebx   
5 [0x5]:           mov8 ebx, ebx   
6 [0x6]:           movi #0, adx   
8 [0x8]:           rmov adx, ebx   
9 [0x9]: line: 211 ipushl #0   
10 [0xa]:           movi #102, ebx   
12 [0xc]:           loadval ecx   
13 [0xd]:           tne ecx, ebx   
14 [0xe]:           movr ebx, cmt   
15 [0xf]:           skne ebx // pc = 22   
16 [0x10]:           ipushl #0   
17 [0x11]:           movi #70, ebx   
19 [0x13]:           loadval ecx   
20 [0x14]:           tne ecx, ebx   
21 [0x15]:           movr ebx, cmt   
22 [0x16]:           movr cmt, ebx   
23 [0x17]:           jne 33   
24 [0x18]:           istore 0   
26 [0x1a]:           movg @76 // @std#string_builder   
27 [0x1b]:           movn #1   
29 [0x1d]:           loadval ebx   
30 [0x1e]:           movi #0, adx   
32 [0x20]:           rmov adx, ebx   
33 [0x21]:           nop   
34 [0x22]:           ret   


function: std#string_builder.set_precision[3631] params(1) in file: lib\support\/0.2.9//string_builder.sharp:214:15: note:  
		    static def set_precision( prec: var ) {
		              ^

0 [0x0]: line: 215 loadl ecx, fp+0   
1 [0x1]:           movi #0, ebx   
3 [0x3]:           lt ecx, ebx   
4 [0x4]:           movr ebx, cmt   
5 [0x5]:           skpe ebx // pc = 12   
6 [0x6]:           ipushl #0   
7 [0x7]:           movi #16, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 26   
14 [0xe]: line: 216 new_class @4 // std#illegal_argument_exception   
16 [0x10]:           dup    
17 [0x11]:           new_class @75 // std#string   
19 [0x13]:           dup    
20 [0x14]:           newstr @93 // invalid precision:    
21 [0x15]:           call @3546 // <std#string.string>   
22 [0x16]:           ipushl #0   
23 [0x17]:           call @3578 // <std#string.operator+>   
24 [0x18]:           call @1962 // <std#illegal_argument_exception.illegal_argument_exception>   
25 [0x19]:           throw    
26 [0x1a]:           nop   
27 [0x1b]: line: 217 ipushl #0   
28 [0x1c]:           movg @76 // @std#string_builder   
29 [0x1d]:           movn #1   
31 [0x1f]:           loadval ebx   
32 [0x20]:           movi #0, adx   
34 [0x22]:           rmov adx, ebx   
35 [0x23]:           ret   


function: std#string_builder.to_array[3632] params(0) in file: lib\support\/0.2.9//string_builder.sharp:220:8: note:  
		    def to_array() : _int8[]
		       ^

0 [0x0]: line: 222 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           pushnull    
5 [0x5]:           itest ebx   
6 [0x6]:           skpe ebx // pc = 19   
7 [0x7]:           movl 0   
8 [0x8]:           movn #3   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           rstore ebx   
14 [0xe]:           movi #-1, ebx   
16 [0x10]:           loadval ecx   
17 [0x11]:           test ecx, ebx   
18 [0x12]:           movr ebx, cmt   
19 [0x13]:           movr cmt, ebx   
20 [0x14]:           jne 25   
21 [0x15]:           pushnull    
22 [0x16]:           popobj2    
23 [0x17]:           returnobj   
24 [0x18]:           ret   
25 [0x19]:           nop   
26 [0x1a]: line: 223 movl 0   
27 [0x1b]:           movn #0   
29 [0x1d]:           pushobj   
30 [0x1e]:           istore 0   
32 [0x20]:           movl 0   
33 [0x21]:           movn #3   
35 [0x23]:           movi #0, adx   
37 [0x25]:           iaload ebx, adx   
38 [0x26]:           rstore ebx   
39 [0x27]:           movi #1, ebx   
41 [0x29]:           loadval ecx   
42 [0x2a]:           add ecx, ebx -> ebx   
43 [0x2b]:           rstore ebx   
44 [0x2c]:           call @2163 // <std.io#__srt_global.copy>   
45 [0x2d]:           popobj2    
46 [0x2e]:           returnobj   
47 [0x2f]:           ret   


function: std#string_builder.starts_with[3633] params(1) in file: lib\support\/0.2.9//string_builder.sharp:227:8: note:  
		    def starts_with(prefix: string) : var {
		       ^

0 [0x0]: line: 228 movl 1   
1 [0x1]:           checknull   
2 [0x2]:           skpe ebx // pc = 22   
3 [0x3]:           movl 1   
4 [0x4]:           pushobj   
5 [0x5]:           call @3587 // <std#string.size>   
6 [0x6]:           loadval ebx   
7 [0x7]:           rstore ebx   
8 [0x8]:           movl 0   
9 [0x9]:           movn #3   
11 [0xb]:           movi #0, adx   
13 [0xd]:           iaload ebx, adx   
14 [0xe]:           rstore ebx   
15 [0xf]:           movi #1, ebx   
17 [0x11]:           loadval ecx   
18 [0x12]:           add ecx, ebx -> ebx   
19 [0x13]:           loadval ecx   
20 [0x14]:           gt ecx, ebx   
21 [0x15]:           movr ebx, cmt   
22 [0x16]:           movr cmt, ebx   
23 [0x17]:           jne 27   
24 [0x18]: line: 229 istorel 0, fp+0   
26 [0x1a]:           ret   
27 [0x1b]:           nop   
28 [0x1c]: line: 232 istorel 0, fp+2   
30 [0x1e]:           ipushl #2   
31 [0x1f]:           pushl 1   
32 [0x20]:           call @3587 // <std#string.size>   
33 [0x21]:           loadval ebx   
34 [0x22]:           loadval ecx   
35 [0x23]:           lt ecx, ebx   
36 [0x24]:           movr ebx, cmt   
37 [0x25]:           movr cmt, ebx   
38 [0x26]:           jne 70   
39 [0x27]: line: 234 movl 0   
40 [0x28]:           movn #0   
42 [0x2a]:           pushobj   
43 [0x2b]:           loadl ebx, fp+2   
44 [0x2c]:           popobj2    
45 [0x2d]:           movr adx, ebx   
46 [0x2e]:           chklen adx   
47 [0x2f]:           iaload ebx, adx   
48 [0x30]:           rstore ebx   
49 [0x31]:           movl 1   
50 [0x32]:           movn #0   
52 [0x34]:           pushobj   
53 [0x35]:           loadl ebx, fp+2   
54 [0x36]:           popobj2    
55 [0x37]:           movr adx, ebx   
56 [0x38]:           chklen adx   
57 [0x39]:           iaload ebx, adx   
58 [0x3a]:           loadval ecx   
59 [0x3b]:           tne ecx, ebx   
60 [0x3c]:           movr ebx, cmt   
61 [0x3d]:           movr cmt, ebx   
62 [0x3e]:           jne 66   
63 [0x3f]: line: 235 istorel 0, fp+0   
65 [0x41]:           ret   
66 [0x42]:           nop   
67 [0x43]:           iaddl 1, fp@2   
69 [0x45]:           jmp @30   
70 [0x46]: line: 237 istorel 1, fp+0   
72 [0x48]:           ret   


function: std#string_builder.find[3634] params(1) in file: lib\support\/0.2.9//string_builder.sharp:240:8: note:  
		    def find(str: string) : var {
		       ^

0 [0x0]: line: 241 pushl 1   
1 [0x1]:           call @3587 // <std#string.size>   
2 [0x2]:           loadval ebx   
3 [0x3]:           rstore ebx   
4 [0x4]:           movl 0   
5 [0x5]:           movn #3   
7 [0x7]:           movi #0, adx   
9 [0x9]:           iaload ebx, adx   
10 [0xa]:           rstore ebx   
11 [0xb]:           movi #1, ebx   
13 [0xd]:           loadval ecx   
14 [0xe]:           add ecx, ebx -> ebx   
15 [0xf]:           loadval ecx   
16 [0x10]:           gt ecx, ebx   
17 [0x11]:           movr ebx, cmt   
18 [0x12]:           movr cmt, ebx   
19 [0x13]:           jne 23   
20 [0x14]: line: 242 istorel 0, fp+0   
22 [0x16]:           ret   
23 [0x17]:           nop   
24 [0x18]: line: 245 istorel 0, fp+2   
26 [0x1a]: line: 246 istorel 0, fp+3   
28 [0x1c]:           ipushl #3   
29 [0x1d]:           movl 0   
30 [0x1e]:           movn #3   
32 [0x20]:           movi #0, adx   
34 [0x22]:           iaload ebx, adx   
35 [0x23]:           rstore ebx   
36 [0x24]:           movi #1, ebx   
38 [0x26]:           loadval ecx   
39 [0x27]:           add ecx, ebx -> ebx   
40 [0x28]:           loadval ecx   
41 [0x29]:           lt ecx, ebx   
42 [0x2a]:           movr ebx, cmt   
43 [0x2b]:           movr cmt, ebx   
44 [0x2c]:           jne 114   
45 [0x2d]: line: 247 ipushl #3   
46 [0x2e]:           pushl 1   
47 [0x2f]:           call @3587 // <std#string.size>   
48 [0x30]:           loadval ebx   
49 [0x31]:           loadval ecx   
50 [0x32]:           add ecx, ebx -> ebx   
51 [0x33]:           rstore ebx   
52 [0x34]:           movl 0   
53 [0x35]:           movn #3   
55 [0x37]:           movi #0, adx   
57 [0x39]:           iaload ebx, adx   
58 [0x3a]:           rstore ebx   
59 [0x3b]:           movi #1, ebx   
61 [0x3d]:           loadval ecx   
62 [0x3e]:           add ecx, ebx -> ebx   
63 [0x3f]:           loadval ecx   
64 [0x40]:           lt ecx, ebx   
65 [0x41]:           movr ebx, cmt   
66 [0x42]:           movr cmt, ebx   
67 [0x43]:           jne 107   
68 [0x44]: line: 248 istorel 0, fp+4   
70 [0x46]:           ipushl #4   
71 [0x47]:           pushl 1   
72 [0x48]:           call @3587 // <std#string.size>   
73 [0x49]:           loadval ebx   
74 [0x4a]:           loadval ecx   
75 [0x4b]:           lt ecx, ebx   
76 [0x4c]:           movr ebx, cmt   
77 [0x4d]:           movr cmt, ebx   
78 [0x4e]:           jne 103   
79 [0x4f]: line: 249 pushl 1   
80 [0x50]:           ipushl #4   
81 [0x51]:           call @3569 // <std#string.operator[>   
82 [0x52]:           loadval ebx   
83 [0x53]:           rstore ebx   
84 [0x54]:           movl 0   
85 [0x55]:           movn #0   
87 [0x57]:           pushobj   
88 [0x58]:           loadl ebx, fp+4   
89 [0x59]:           popobj2    
90 [0x5a]:           movr adx, ebx   
91 [0x5b]:           chklen adx   
92 [0x5c]:           iaload ebx, adx   
93 [0x5d]:           loadval ecx   
94 [0x5e]:           tne ecx, ebx   
95 [0x5f]:           movr ebx, cmt   
96 [0x60]:           movr cmt, ebx   
97 [0x61]:           jne 99   
98 [0x62]: line: 250 jmp @103   
99 [0x63]:           nop   
100 [0x64]:           iaddl 1, fp@4   
102 [0x66]:           jmp @70   
103 [0x67]: line: 253 istorel 1, fp+0   
105 [0x69]:           ret   
106 [0x6a]:           jmp @110   
107 [0x6b]: line: 254 istorel 0, fp+0   
109 [0x6d]:           ret   
110 [0x6e]:           nop   
111 [0x6f]:           iaddl 1, fp@3   
113 [0x71]:           jmp @28   
114 [0x72]: line: 257 istorel 0, fp+0   
116 [0x74]:           ret   


function: std#string_builder.find[3635] params(1) in file: lib\support\/0.2.9//string_builder.sharp:260:8: note:  
		    def find(str: string_builder) : var {
		       ^

0 [0x0]: line: 261 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           sizeof ebx   
4 [0x4]:           rstore ebx   
5 [0x5]:           movl 0   
6 [0x6]:           movn #3   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           rstore ebx   
12 [0xc]:           movi #1, ebx   
14 [0xe]:           loadval ecx   
15 [0xf]:           add ecx, ebx -> ebx   
16 [0x10]:           loadval ecx   
17 [0x11]:           gt ecx, ebx   
18 [0x12]:           movr ebx, cmt   
19 [0x13]:           movr cmt, ebx   
20 [0x14]:           jne 24   
21 [0x15]: line: 262 istorel 0, fp+0   
23 [0x17]:           ret   
24 [0x18]:           nop   
25 [0x19]: line: 265 istorel 0, fp+2   
27 [0x1b]: line: 266 istorel 0, fp+3   
29 [0x1d]:           ipushl #3   
30 [0x1e]:           movl 0   
31 [0x1f]:           movn #3   
33 [0x21]:           movi #0, adx   
35 [0x23]:           iaload ebx, adx   
36 [0x24]:           rstore ebx   
37 [0x25]:           movi #1, ebx   
39 [0x27]:           loadval ecx   
40 [0x28]:           add ecx, ebx -> ebx   
41 [0x29]:           loadval ecx   
42 [0x2a]:           lt ecx, ebx   
43 [0x2b]:           movr ebx, cmt   
44 [0x2c]:           movr cmt, ebx   
45 [0x2d]:           jne 117   
46 [0x2e]: line: 267 ipushl #3   
47 [0x2f]:           movl 1   
48 [0x30]:           movn #0   
50 [0x32]:           sizeof ebx   
51 [0x33]:           loadval ecx   
52 [0x34]:           add ecx, ebx -> ebx   
53 [0x35]:           rstore ebx   
54 [0x36]:           movl 0   
55 [0x37]:           movn #3   
57 [0x39]:           movi #0, adx   
59 [0x3b]:           iaload ebx, adx   
60 [0x3c]:           rstore ebx   
61 [0x3d]:           movi #1, ebx   
63 [0x3f]:           loadval ecx   
64 [0x40]:           add ecx, ebx -> ebx   
65 [0x41]:           loadval ecx   
66 [0x42]:           lt ecx, ebx   
67 [0x43]:           movr ebx, cmt   
68 [0x44]:           movr cmt, ebx   
69 [0x45]:           jne 110   
70 [0x46]: line: 268 istorel 0, fp+4   
72 [0x48]:           ipushl #4   
73 [0x49]:           movl 1   
74 [0x4a]:           movn #0   
76 [0x4c]:           sizeof ebx   
77 [0x4d]:           loadval ecx   
78 [0x4e]:           lt ecx, ebx   
79 [0x4f]:           movr ebx, cmt   
80 [0x50]:           movr cmt, ebx   
81 [0x51]:           jne 106   
82 [0x52]: line: 269 pushl 1   
83 [0x53]:           ipushl #4   
84 [0x54]:           call @3629 // <std#string_builder.operator[>   
85 [0x55]:           loadval ebx   
86 [0x56]:           rstore ebx   
87 [0x57]:           movl 0   
88 [0x58]:           movn #0   
90 [0x5a]:           pushobj   
91 [0x5b]:           loadl ebx, fp+4   
92 [0x5c]:           popobj2    
93 [0x5d]:           movr adx, ebx   
94 [0x5e]:           chklen adx   
95 [0x5f]:           iaload ebx, adx   
96 [0x60]:           loadval ecx   
97 [0x61]:           tne ecx, ebx   
98 [0x62]:           movr ebx, cmt   
99 [0x63]:           movr cmt, ebx   
100 [0x64]:           jne 102   
101 [0x65]: line: 270 jmp @106   
102 [0x66]:           nop   
103 [0x67]:           iaddl 1, fp@4   
105 [0x69]:           jmp @72   
106 [0x6a]: line: 273 istorel 1, fp+0   
108 [0x6c]:           ret   
109 [0x6d]:           jmp @113   
110 [0x6e]: line: 274 istorel 0, fp+0   
112 [0x70]:           ret   
113 [0x71]:           nop   
114 [0x72]:           iaddl 1, fp@3   
116 [0x74]:           jmp @29   
117 [0x75]: line: 277 istorel 0, fp+0   
119 [0x77]:           ret   


function: std#string_builder.ends_with[3636] params(1) in file: lib\support\/0.2.9//string_builder.sharp:280:8: note:  
		    def ends_with(postfix: string) : var {
		       ^

0 [0x0]: line: 281 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           sizeof ebx   
4 [0x4]:           rstore ebx   
5 [0x5]:           movl 0   
6 [0x6]:           movn #3   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           rstore ebx   
12 [0xc]:           movi #1, ebx   
14 [0xe]:           loadval ecx   
15 [0xf]:           add ecx, ebx -> ebx   
16 [0x10]:           loadval ecx   
17 [0x11]:           gte ecx, ebx   
18 [0x12]:           movr ebx, cmt   
19 [0x13]:           movr cmt, ebx   
20 [0x14]:           jne 24   
21 [0x15]: line: 282 istorel 0, fp+0   
23 [0x17]:           ret   
24 [0x18]:           nop   
25 [0x19]: line: 284 movl 0   
26 [0x1a]:           movn #3   
28 [0x1c]:           movi #0, adx   
30 [0x1e]:           iaload ebx, adx   
31 [0x1f]:           rstore ebx   
32 [0x20]:           movi #1, ebx   
34 [0x22]:           loadval ecx   
35 [0x23]:           add ecx, ebx -> ebx   
36 [0x24]:           rstore ebx   
37 [0x25]:           movl 1   
38 [0x26]:           movn #0   
40 [0x28]:           sizeof ebx   
41 [0x29]:           loadval ecx   
42 [0x2a]:           sub ecx, ebx -> ebx   
43 [0x2b]:           smovr_2 ebx, fp+2   
44 [0x2c]:           ipushl #2   
45 [0x2d]:           movl 0   
46 [0x2e]:           movn #3   
48 [0x30]:           movi #0, adx   
50 [0x32]:           iaload ebx, adx   
51 [0x33]:           rstore ebx   
52 [0x34]:           movi #1, ebx   
54 [0x36]:           loadval ecx   
55 [0x37]:           add ecx, ebx -> ebx   
56 [0x38]:           loadval ecx   
57 [0x39]:           lt ecx, ebx   
58 [0x3a]:           movr ebx, cmt   
59 [0x3b]:           movr cmt, ebx   
60 [0x3c]:           jne 92   
61 [0x3d]: line: 285 movl 0   
62 [0x3e]:           movn #0   
64 [0x40]:           pushobj   
65 [0x41]:           loadl ebx, fp+2   
66 [0x42]:           popobj2    
67 [0x43]:           movr adx, ebx   
68 [0x44]:           chklen adx   
69 [0x45]:           iaload ebx, adx   
70 [0x46]:           rstore ebx   
71 [0x47]:           movl 1   
72 [0x48]:           movn #0   
74 [0x4a]:           pushobj   
75 [0x4b]:           loadl ebx, fp+2   
76 [0x4c]:           popobj2    
77 [0x4d]:           movr adx, ebx   
78 [0x4e]:           chklen adx   
79 [0x4f]:           iaload ebx, adx   
80 [0x50]:           loadval ecx   
81 [0x51]:           tne ecx, ebx   
82 [0x52]:           movr ebx, cmt   
83 [0x53]:           movr cmt, ebx   
84 [0x54]:           jne 88   
85 [0x55]: line: 286 istorel 0, fp+0   
87 [0x57]:           ret   
88 [0x58]:           nop   
89 [0x59]:           iaddl 1, fp@2   
91 [0x5b]:           jmp @44   
92 [0x5c]: line: 289 istorel 1, fp+0   
94 [0x5e]:           ret   


overload function: std#string_builder.operator+[3637] params(1) in file: lib\support\/0.2.9//string_builder.sharp:292:8: note:  
		    def operator+(num : var) : string_builder {
		       ^

0 [0x0]: line: 293 new_class @76 // std#string_builder   
2 [0x2]:           dup    
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           pushobj   
7 [0x7]:           call @3606 // <std#string_builder.string_builder>   
8 [0x8]:           popobj2    
9 [0x9]:           smovr_3 fp+2   
10 [0xa]: line: 294 pushl 2   
11 [0xb]:           pushl 0   
12 [0xc]:           ipushl #1   
13 [0xd]:           call @3639 // <std#string_builder.parse>   
14 [0xe]:           call @3643 // <std#string_builder.get_data>   
15 [0xf]:           call @3618 // <std#string_builder.append>   
16 [0x10]:           pop   
17 [0x11]: line: 295 movl 2   
18 [0x12]:           returnobj   
19 [0x13]:           ret   


function: std#string_builder.size[3638] params(0) in file: lib\support\/0.2.9//string_builder.sharp:298:8: note:  
		    def size() : var {
		       ^

0 [0x0]: line: 299 movl 0   
1 [0x1]:           movn #3   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #1, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           add ecx, ebx -> ebx   
11 [0xb]:           return_val ebx   
12 [0xc]:           ret   


function: std#string_builder.parse[3639] params(1) in file: lib\support\/0.2.9//string_builder.sharp:302:8: note:  
		    def parse( number : var ) : string_builder
		       ^

0 [0x0]: line: 304 new_class @76 // std#string_builder   
2 [0x2]:           dup    
3 [0x3]:           movg @76 // @std#string_builder   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           rstore ebx   
10 [0xa]:           ipushl #1   
11 [0xb]:           movg @76 // @std#string_builder   
12 [0xc]:           movn #1   
14 [0xe]:           movi #0, adx   
16 [0x10]:           iaload ebx, adx   
17 [0x11]:           rstore ebx   
18 [0x12]:           call @1899 // <std#__srt_global.snprintf>   
19 [0x13]:           call @3606 // <std#string_builder.string_builder>   
20 [0x14]:           popobj2    
21 [0x15]:           returnobj   
22 [0x16]:           ret   


overload function: std#string_builder.operator+=[3640] params(1) in file: lib\support\/0.2.9//string_builder.sharp:307:8: note:  
		    def operator+=( num: var ) : string_builder
		       ^

0 [0x0]: line: 309 pushl 0   
1 [0x1]:           pushl 0   
2 [0x2]:           ipushl #1   
3 [0x3]:           call @3639 // <std#string_builder.parse>   
4 [0x4]:           call @3643 // <std#string_builder.get_data>   
5 [0x5]:           call @3618 // <std#string_builder.append>   
6 [0x6]:           popobj2    
7 [0x7]:           returnobj   
8 [0x8]:           ret   


overload function: std#string_builder.operator+=[3641] params(1) in file: lib\support\/0.2.9//string_builder.sharp:312:8: note:  
		    def operator+=( obj: object ) : string_builder
		       ^

0 [0x0]: line: 314 movl 1   
1 [0x1]:           is ebx -> std#printable   
3 [0x3]:           movr cmt, ebx   
4 [0x4]:           jne 42   
5 [0x5]: line: 315 movl 1   
6 [0x6]:           movi #64, cmt   
8 [0x8]:           cast cmt   
9 [0x9]:           pushobj   
10 [0xa]:           invoke_delegate 3530 { static=0, args=0 }   
12 [0xc]:           popobj2    
13 [0xd]:           smovr_3 fp+2   
14 [0xe]: line: 316 movl 2   
15 [0xf]:           checknull   
16 [0x10]:           not ebx, ebx   
17 [0x11]:           skne ebx // pc = 24   
18 [0x12]:           movl 2   
19 [0x13]:           pushobj   
20 [0x14]:           call @3572 // <std#string.get_data>   
21 [0x15]:           pushnull    
22 [0x16]:           itest ebx   
23 [0x17]:           not ebx, ebx   
24 [0x18]:           movr cmt, ebx   
25 [0x19]:           jne 34   
26 [0x1a]: line: 317 pushl 0   
27 [0x1b]:           pushl 2   
28 [0x1c]:           call @3572 // <std#string.get_data>   
29 [0x1d]:           call @3618 // <std#string_builder.append>   
30 [0x1e]:           popobj2    
31 [0x1f]:           returnobj   
32 [0x20]:           ret   
33 [0x21]:           jmp @40   
34 [0x22]: line: 319 pushl 0   
35 [0x23]:           newstr @18 // null   
36 [0x24]:           call @3618 // <std#string_builder.append>   
37 [0x25]:           popobj2    
38 [0x26]:           returnobj   
39 [0x27]:           ret   
40 [0x28]:           nop   
41 [0x29]:           jmp @48   
42 [0x2a]: line: 321 pushl 0   
43 [0x2b]:           newstr @98 // objref   
44 [0x2c]:           call @3618 // <std#string_builder.append>   
45 [0x2d]:           popobj2    
46 [0x2e]:           returnobj   
47 [0x2f]:           ret   
48 [0x30]:           nop   


overload function: std#string_builder.operator+=[3642] params(1) in file: lib\support\/0.2.9//string_builder.sharp:324:8: note:  
		    def operator+=( str: string ) : string_builder
		       ^

0 [0x0]: line: 326 pushl 0   
1 [0x1]:           pushl 1   
2 [0x2]:           call @3572 // <std#string.get_data>   
3 [0x3]:           call @3618 // <std#string_builder.append>   
4 [0x4]:           popobj2    
5 [0x5]:           returnobj   
6 [0x6]:           ret   


function: std#string_builder.get_data[3643] params(0) in file: lib\support\/0.2.9//string_builder.sharp:329:8: note:  
		    def get_data() : _int8[]{
		       ^

0 [0x0]: line: 330 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           returnobj   
4 [0x4]:           ret   


overload function: std#string_builder.operator+=[3644] params(1) in file: lib\support\/0.2.9//string_builder.sharp:333:8: note:  
		    def operator+=( str: string_builder ) : string_builder
		       ^

0 [0x0]: line: 335 pushl 0   
1 [0x1]:           movl 1   
2 [0x2]:           movn #0   
4 [0x4]:           pushobj   
5 [0x5]:           call @3618 // <std#string_builder.append>   
6 [0x6]:           popobj2    
7 [0x7]:           returnobj   
8 [0x8]:           ret   


overload function: std#string_builder.operator+=[3645] params(1) in file: lib\support\/0.2.9//string_builder.sharp:338:8: note:  
		    def operator+=( str: _int8[] ) : string_builder
		       ^

0 [0x0]: line: 340 pushl 0   
1 [0x1]:           pushl 1   
2 [0x2]:           call @3618 // <std#string_builder.append>   
3 [0x3]:           popobj2    
4 [0x4]:           returnobj   
5 [0x5]:           ret   


function: std#string_builder.substring[3646] params(2) in file: lib\support\/0.2.9//string_builder.sharp:343:15: note:  
		    public def substring(startPos: var, endPos: var) : string_builder {
		              ^

0 [0x0]: line: 344 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #3   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           rstore ebx   
8 [0x8]:           movi #1, ebx   
10 [0xa]:           loadval ecx   
11 [0xb]:           add ecx, ebx -> ebx   
12 [0xc]:           loadval ecx   
13 [0xd]:           gte ecx, ebx   
14 [0xe]:           movr ebx, cmt   
15 [0xf]:           skpe ebx // pc = 21   
16 [0x10]:           loadl ecx, fp+1   
17 [0x11]:           movi #0, ebx   
19 [0x13]:           lt ecx, ebx   
20 [0x14]:           movr ebx, cmt   
21 [0x15]:           movr cmt, ebx   
22 [0x16]:           jne 27   
23 [0x17]: line: 345 pushl 0   
24 [0x18]:           ipushl #1   
25 [0x19]:           call @3647 // <std#string_builder.bounds_error>   
26 [0x1a]:           throw    
27 [0x1b]:           nop   
28 [0x1c]: line: 346 ipushl #2   
29 [0x1d]:           loadl ebx, fp+1   
30 [0x1e]:           loadval ecx   
31 [0x1f]:           lt ecx, ebx   
32 [0x20]:           movr ebx, cmt   
33 [0x21]:           movr cmt, ebx   
34 [0x22]:           jne 51   
35 [0x23]: line: 347 new_class @4 // std#illegal_argument_exception   
37 [0x25]:           dup    
38 [0x26]:           new_class @75 // std#string   
40 [0x28]:           dup    
41 [0x29]:           newstr @99 // endPos:    
42 [0x2a]:           call @3546 // <std#string.string>   
43 [0x2b]:           ipushl #2   
44 [0x2c]:           call @3578 // <std#string.operator+>   
45 [0x2d]:           newstr @100 //  cannot be less than the startPos:    
46 [0x2e]:           call @3558 // <std#string.operator+>   
47 [0x2f]:           ipushl #1   
48 [0x30]:           call @3578 // <std#string.operator+>   
49 [0x31]:           call @1962 // <std#illegal_argument_exception.illegal_argument_exception>   
50 [0x32]:           throw    
51 [0x33]:           nop   
52 [0x34]: line: 351 new_class @76 // std#string_builder   
54 [0x36]:           dup    
55 [0x37]:           call @3649 // <std#string_builder.string_builder>   
56 [0x38]:           popobj2    
57 [0x39]:           smovr_3 fp+3   
58 [0x3a]: line: 352 movl 0   
59 [0x3b]:           movn #0   
61 [0x3d]:           pushobj   
62 [0x3e]:           ipushl #1   
63 [0x3f]:           ipushl #2   
64 [0x40]:           call @2163 // <std.io#__srt_global.copy>   
65 [0x41]:           movl 3   
66 [0x42]:           movn #0   
68 [0x44]:           popobj   
69 [0x45]: line: 353 movl 3   
70 [0x46]:           returnobj   
71 [0x47]:           ret   


function: std#string_builder.bounds_error[3647] params(1) in file: lib\support\/0.2.9//string_builder.sharp:356:16: note:  
		    private def bounds_error(pos : var) : bounds_except {
		               ^

0 [0x0]: line: 357 new_class @6 // std#out_of_bounds_exception   
2 [0x2]:           dup    
3 [0x3]:           new_class @75 // std#string   
5 [0x5]:           dup    
6 [0x6]:           newstr @96 // Index out of bounds exception at:    
7 [0x7]:           call @3546 // <std#string.string>   
8 [0x8]:           ipushl #1   
9 [0x9]:           call @3578 // <std#string.operator+>   
10 [0xa]:           newstr @97 //  with size of:    
11 [0xb]:           call @3558 // <std#string.operator+>   
12 [0xc]:           movl 0   
13 [0xd]:           movn #3   
15 [0xf]:           movi #0, adx   
17 [0x11]:           iaload ebx, adx   
18 [0x12]:           rstore ebx   
19 [0x13]:           movi #1, ebx   
21 [0x15]:           loadval ecx   
22 [0x16]:           add ecx, ebx -> ebx   
23 [0x17]:           rstore ebx   
24 [0x18]:           call @3578 // <std#string.operator+>   
25 [0x19]:           call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
26 [0x1a]:           popobj2    
27 [0x1b]:           returnobj   
28 [0x1c]:           ret   


function: std#string_builder.hash[3648] params(0) in file: lib\support\/0.2.9//string_builder.sharp:360:8: note:  
		    def hash() : _int64 {
		       ^

0 [0x0]: line: 361 istorel 0, fp+1   
2 [0x2]: line: 362 istorel 1, fp+2   
4 [0x4]: line: 363 istorel -1, fp+4   
6 [0x6]: line: 364 movl 0   
7 [0x7]: line: 365 movn #0   
9 [0x9]:           pushobj   
10 [0xa]:           popl 5   
11 [0xb]:           iaddl 1, fp@4   
13 [0xd]:           movl 5   
14 [0xe]:           sizeof ecx   
15 [0xf]:           loadl ebx, fp+4   
16 [0x10]:           lt ebx, ecx   
17 [0x11]:           jne 55   
18 [0x12]:           iaload ecx, ebx   
19 [0x13]:           smovr_2 ecx, fp+3   
20 [0x14]: line: 366 ipushl #1   
21 [0x15]:           ipushl #3   
22 [0x16]:           movi #97, ebx   
24 [0x18]:           loadval ecx   
25 [0x19]:           sub ecx, ebx -> ebx   
26 [0x1a]:           rstore ebx   
27 [0x1b]:           movi #1, ebx   
29 [0x1d]:           loadval ecx   
30 [0x1e]:           add ecx, ebx -> ebx   
31 [0x1f]:           rstore ebx   
32 [0x20]:           loadl ebx, fp+2   
33 [0x21]:           loadval ecx   
34 [0x22]:           mul ecx, ebx -> ebx   
35 [0x23]:           loadval ecx   
36 [0x24]:           add ecx, ebx -> ebx   
37 [0x25]:           rstore ebx   
38 [0x26]:           movi #1000000009, ebx   
40 [0x28]:           loadval ecx   
41 [0x29]:           mod ecx, ebx -> ebx   
42 [0x2a]:           smovr_2 ebx, fp+1   
43 [0x2b]: line: 367 ipushl #2   
44 [0x2c]:           movi #31, ebx   
46 [0x2e]:           loadval ecx   
47 [0x2f]:           mul ecx, ebx -> ebx   
48 [0x30]:           rstore ebx   
49 [0x31]:           movi #1000000009, ebx   
51 [0x33]:           loadval ecx   
52 [0x34]:           mod ecx, ebx -> ebx   
53 [0x35]:           smovr_2 ebx, fp+2   
54 [0x36]:           jmp @11   
55 [0x37]: line: 369 loadl ebx, fp+1   
56 [0x38]:           return_val ebx   
57 [0x39]:           ret   


constructor: std#string_builder.string_builder[3649] params(0) in file: lib\support\/0.2.9//string_builder.sharp:5:6: note:  
		class string_builder : loopable<_int8> {
		     ^

0 [0x0]:         movi #128, ebx   
2 [0x2]:         movl 0   
3 [0x3]:         movn #1   
5 [0x5]:         movi #0, adx   
7 [0x7]:         rmov adx, ebx   
8 [0x8]:         movi #0, ebx   
10 [0xa]:         movl 0   
11 [0xb]:         movn #2   
13 [0xd]:         movi #0, adx   
15 [0xf]:         rmov adx, ebx   
16 [0x10]:         movi #0, ebx   
18 [0x12]:         movl 0   
19 [0x13]:         movn #3   
21 [0x15]:         movi #0, adx   
23 [0x17]:         rmov adx, ebx   
24 [0x18]: line: 15 movi #255, ebx   
26 [0x1a]:          newarry ebx: 0   
27 [0x1b]:          movl 0   
28 [0x1c]:          movn #0   
30 [0x1e]:          popobj   
31 [0x1f]: line: 16 movi #255, ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #2   
36 [0x24]:          movi #0, adx   
38 [0x26]:          rmov adx, ebx   
39 [0x27]: line: 17 movi #-1, ebx   
41 [0x29]:          movl 0   
42 [0x2a]:          movn #3   
44 [0x2c]:          movi #0, adx   
46 [0x2e]:          rmov adx, ebx   
47 [0x2f]:          ret   


function: std#time.nano_time[3650] params(0) in file: lib\support\/0.2.9//time.sharp:9:15: note:  
		    static def nano_time() : var {
		              ^

0 [0x0]: line: 10 istorel 0, fp+0   
2 [0x2]: line: 12 int 0xb   : protected asm start
3 [0x3]:          smovr_2 bmr, fp+0   
4 [0x4]: line: 17 loadl ebx, fp+0   : protected asm end
5 [0x5]:          return_val ebx   
6 [0x6]:          ret   


function: std#time.get_os_time[3651] params(1) in file: lib\support\/0.2.9//time.sharp:20:15: note:  
		    static def get_os_time(tr: time_request)
		              ^

0 [0x0]: line: 21 pushl 0   
1 [0x1]:          call @1950 // <std#_enum_.get_ordinal>   
2 [0x2]:          call @2377 // <platform.kernel#vm.get_os_time>   
3 [0x3]:          loadval ebx   
4 [0x4]:          return_val ebx   
5 [0x5]:          ret   


function: std#time.nano_to_micro[3652] params(1) in file: lib\support\/0.2.9//time.sharp:23:15: note:  
		    static def nano_to_micro(nano: var) : var {
		              ^

0 [0x0]: line: 24 ipushl #0   
1 [0x1]:          movi #1000, ebx   
3 [0x3]:          loadval ecx   
4 [0x4]:          div ecx, ebx -> ebx   
5 [0x5]:          return_val ebx   
6 [0x6]:          ret   


function: std#time.nano_to_mills[3653] params(1) in file: lib\support\/0.2.9//time.sharp:27:15: note:  
		    static def nano_to_mills(nano: var) : var {
		              ^

0 [0x0]: line: 28 ipushl #0   
1 [0x1]:          call @3652 // <std#time.nano_to_micro>   
2 [0x2]:          loadval ebx   
3 [0x3]:          rstore ebx   
4 [0x4]:          movi #1000, ebx   
6 [0x6]:          loadval ecx   
7 [0x7]:          div ecx, ebx -> ebx   
8 [0x8]:          return_val ebx   
9 [0x9]:          ret   


function: std#time.nano_to_secs[3654] params(1) in file: lib\support\/0.2.9//time.sharp:31:22: note:  
		    public static def nano_to_secs(nano: var) : var {
		                     ^

0 [0x0]: line: 32 ipushl #0   
1 [0x1]:          call @3653 // <std#time.nano_to_mills>   
2 [0x2]:          loadval ebx   
3 [0x3]:          rstore ebx   
4 [0x4]:          movi #1000, ebx   
6 [0x6]:          loadval ecx   
7 [0x7]:          div ecx, ebx -> ebx   
8 [0x8]:          return_val ebx   
9 [0x9]:          ret   


function: std#time.mills_time[3655] params(0) in file: lib\support\/0.2.9//time.sharp:35:15: note:  
		    static def mills_time() : var {
		              ^

0 [0x0]: line: 36 call @3650 // <std#time.nano_time>   
1 [0x1]:          call @3653 // <std#time.nano_to_mills>   
2 [0x2]:          loadval ebx   
3 [0x3]:          return_val ebx   
4 [0x4]:          ret   


function: std#time.sleep[3656] params(1) in file: lib\support\/0.2.9//time.sharp:39:15: note:  
		    static def sleep(time: var) {
		              ^

0 [0x0]: line: 40 movg @79 // @std#time_unit   
1 [0x1]:          movn #1   
3 [0x3]:          pushobj   
4 [0x4]:          ipushl #0   
5 [0x5]:          call @3657 // <std#time.sleep>   
6 [0x6]:          ret   


function: std#time.sleep[3657] params(2) in file: lib\support\/0.2.9//time.sharp:43:15: note:  
		    static def sleep(tm_unit: time_unit, time: var) {
		              ^

0 [0x0]: line: 44 loadl ecx, fp+1   
1 [0x1]:          movi #0, ebx   
3 [0x3]:          lt ecx, ebx   
4 [0x4]:          movr ebx, cmt   
5 [0x5]:          movr cmt, ebx   
6 [0x6]:          jne 19   
7 [0x7]: line: 45 new_class @20 // std#error   
9 [0x9]:          dup    
10 [0xa]:          new_class @75 // std#string   
12 [0xc]:          dup    
13 [0xd]:          newstr @101 // cannot sleep for negative time:    
14 [0xe]:          call @3546 // <std#string.string>   
15 [0xf]:          ipushl #1   
16 [0x10]:          call @3578 // <std#string.operator+>   
17 [0x11]:          call @2010 // <std#error.error>   
18 [0x12]:          throw    
19 [0x13]:          nop   
20 [0x14]: line: 47 pushl 0   
21 [0x15]:          movg @79 // @std#time_unit   
22 [0x16]:          movn #0   
24 [0x18]:          pushobj   
25 [0x19]:          call @1947 // <std#_enum_.operator==>   
26 [0x1a]:          loadval ebx   
27 [0x1b]:          movr cmt, ebx   
28 [0x1c]:          jne 38   
29 [0x1d]: line: 48 ipushl #1   
30 [0x1e]:          movi #1000000, ebx   
32 [0x20]:          loadval ecx   
33 [0x21]:          mul ecx, ebx -> ebx   
34 [0x22]:          rstore ebx   
35 [0x23]:          call @3659 // <std#time.adjust_time>   
36 [0x24]:          ipopl 1   
37 [0x25]:          jmp @68   
38 [0x26]:          pushl 0   
39 [0x27]:          movg @79 // @std#time_unit   
40 [0x28]:          movn #1   
42 [0x2a]:          pushobj   
43 [0x2b]:          call @1947 // <std#_enum_.operator==>   
44 [0x2c]:          loadval ebx   
45 [0x2d]:          movr cmt, ebx   
46 [0x2e]:          jne 56   
47 [0x2f]: line: 50 ipushl #1   
48 [0x30]:          movi #1000, ebx   
50 [0x32]:          loadval ecx   
51 [0x33]:          mul ecx, ebx -> ebx   
52 [0x34]:          rstore ebx   
53 [0x35]:          call @3659 // <std#time.adjust_time>   
54 [0x36]:          ipopl 1   
55 [0x37]:          jmp @68   
56 [0x38]:          pushl 0   
57 [0x39]:          movg @79 // @std#time_unit   
58 [0x3a]:          movn #2   
60 [0x3c]:          pushobj   
61 [0x3d]:          call @1947 // <std#_enum_.operator==>   
62 [0x3e]:          loadval ebx   
63 [0x3f]:          movr cmt, ebx   
64 [0x40]:          jne 68   
65 [0x41]: line: 52 ipushl #1   
66 [0x42]:          call @3659 // <std#time.adjust_time>   
67 [0x43]:          ipopl 1   
68 [0x44]:          nop   
69 [0x45]: line: 55 loadl ebx, fp+1   : protected asm start
70 [0x46]:          sleep ebx   
71 [0x47]:          ret   : protected asm end


function: std#time.wait[3658] params(2) in file: lib\support\/0.2.9//time.sharp:61:15: note:  
		    static def wait(tm_unit: time_unit, time: var) {
		              ^

0 [0x0]: line: 62 ipushl #1   
1 [0x1]:          movg @77 // @std#time   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          tne ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          movr cmt, ebx   
11 [0xb]:          jne 71   
12 [0xc]: line: 63 loadl ecx, fp+1   
13 [0xd]:          movi #0, ebx   
15 [0xf]:          lt ecx, ebx   
16 [0x10]:          movr ebx, cmt   
17 [0x11]:          movr cmt, ebx   
18 [0x12]:          jne 31   
19 [0x13]: line: 64 new_class @20 // std#error   
21 [0x15]:          dup    
22 [0x16]:          new_class @75 // std#string   
24 [0x18]:          dup    
25 [0x19]:          newstr @101 // cannot sleep for negative time:    
26 [0x1a]:          call @3546 // <std#string.string>   
27 [0x1b]:          ipushl #1   
28 [0x1c]:          call @3578 // <std#string.operator+>   
29 [0x1d]:          call @2010 // <std#error.error>   
30 [0x1e]:          throw    
31 [0x1f]:          nop   
32 [0x20]: line: 66 pushl 0   
33 [0x21]:          movg @79 // @std#time_unit   
34 [0x22]:          movn #0   
36 [0x24]:          pushobj   
37 [0x25]:          call @1947 // <std#_enum_.operator==>   
38 [0x26]:          loadval ebx   
39 [0x27]:          movr cmt, ebx   
40 [0x28]:          jne 45   
41 [0x29]: line: 67 movi #1000, ebx   
43 [0x2b]:          mull ebx, fp@1   
44 [0x2c]:          jmp @70   
45 [0x2d]:          pushl 0   
46 [0x2e]:          movg @79 // @std#time_unit   
47 [0x2f]:          movn #2   
49 [0x31]:          pushobj   
50 [0x32]:          call @1947 // <std#_enum_.operator==>   
51 [0x33]:          loadval ebx   
52 [0x34]:          movr cmt, ebx   
53 [0x35]:          jne 58   
54 [0x36]: line: 69 movi #1000, ebx   
56 [0x38]:          divl ebx, fp@1   
57 [0x39]:          jmp @70   
58 [0x3a]:          pushl 0   
59 [0x3b]:          movg @79 // @std#time_unit   
60 [0x3c]:          movn #3   
62 [0x3e]:          pushobj   
63 [0x3f]:          call @1947 // <std#_enum_.operator==>   
64 [0x40]:          loadval ebx   
65 [0x41]:          movr cmt, ebx   
66 [0x42]:          jne 70   
67 [0x43]: line: 71 movi #1000000, ebx   
69 [0x45]:          divl ebx, fp@1   
70 [0x46]:          nop   
71 [0x47]:          nop   
72 [0x48]: line: 75 loadl adx, fp+1   : protected asm start
73 [0x49]:          int 0x14   
74 [0x4a]:          ret   : protected asm end


function: std#time.adjust_time[3659] params(1) in file: lib\support\/0.2.9//time.sharp:87:23: note:  
		    private static def adjust_time(usec: var) : var {
		                      ^

0 [0x0]: line: 89 call @2348 // <platform#build.is_windows>   
1 [0x1]:          loadval ebx   
2 [0x2]:          movr cmt, ebx   
3 [0x3]:          jne 11   
4 [0x4]: line: 90 ipushl #0   
5 [0x5]:          movi #1000, ebx   
7 [0x7]:          loadval ecx   
8 [0x8]:          div ecx, ebx -> ebx   
9 [0x9]:          return_val ebx   
10 [0xa]:          ret   
11 [0xb]:          nop   
12 [0xc]: line: 93 loadl ebx, fp+0   
13 [0xd]:          return_val ebx   
14 [0xe]:          ret   


function: std#time.measure[3660] params(2) in file: lib\support\/0.2.9//time.sharp:96:15: note:  
		    static def measure(tm_unit: time_unit, block: ()()) : var {
		              ^

0 [0x0]: line: 97 call @3650 // <std#time.nano_time>   
1 [0x1]:          ipopl 2   
2 [0x2]:          istorel 0, fp+3   
4 [0x4]: line: 98 ipushl #1   
5 [0x5]:          loadval ebx   
6 [0x6]:          calld ebx   
7 [0x7]: line: 99 call @3650 // <std#time.nano_time>   
8 [0x8]:          ipopl 3   
9 [0x9]: line: 101 pushl 0   
10 [0xa]:           movg @79 // @std#time_unit   
11 [0xb]:           movn #0   
13 [0xd]:           pushobj   
14 [0xe]:           call @1947 // <std#_enum_.operator==>   
15 [0xf]:           loadval ebx   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 25   
18 [0x12]: line: 103 ipushl #2   
19 [0x13]:           call @3654 // <std#time.nano_to_secs>   
20 [0x14]:           ipopl 2   
21 [0x15]: line: 104 ipushl #3   
22 [0x16]:           call @3654 // <std#time.nano_to_secs>   
23 [0x17]:           ipopl 3   
24 [0x18]:           jmp @56   
25 [0x19]:           pushl 0   
26 [0x1a]:           movg @79 // @std#time_unit   
27 [0x1b]:           movn #1   
29 [0x1d]:           pushobj   
30 [0x1e]:           call @1947 // <std#_enum_.operator==>   
31 [0x1f]:           loadval ebx   
32 [0x20]:           movr cmt, ebx   
33 [0x21]:           jne 41   
34 [0x22]: line: 107 ipushl #2   
35 [0x23]:           call @3653 // <std#time.nano_to_mills>   
36 [0x24]:           ipopl 2   
37 [0x25]: line: 108 ipushl #3   
38 [0x26]:           call @3653 // <std#time.nano_to_mills>   
39 [0x27]:           ipopl 3   
40 [0x28]:           jmp @56   
41 [0x29]:           pushl 0   
42 [0x2a]:           movg @79 // @std#time_unit   
43 [0x2b]:           movn #2   
45 [0x2d]:           pushobj   
46 [0x2e]:           call @1947 // <std#_enum_.operator==>   
47 [0x2f]:           loadval ebx   
48 [0x30]:           movr cmt, ebx   
49 [0x31]:           jne 56   
50 [0x32]: line: 111 ipushl #2   
51 [0x33]:           call @3652 // <std#time.nano_to_micro>   
52 [0x34]:           ipopl 2   
53 [0x35]: line: 112 ipushl #3   
54 [0x36]:           call @3652 // <std#time.nano_to_micro>   
55 [0x37]:           ipopl 3   
56 [0x38]:           nop   
57 [0x39]: line: 116 ipushl #3   
58 [0x3a]:           loadl ebx, fp+2   
59 [0x3b]:           loadval ecx   
60 [0x3c]:           sub ecx, ebx -> ebx   
61 [0x3d]:           return_val ebx   
62 [0x3e]:           ret   


function: std#time.measure[3661] params(3) in file: lib\support\/0.2.9//time.sharp:119:15: note:  
		    static def measure(tm_unit: time_unit, args: object[], block: (object[])()) : var {
		              ^

0 [0x0]: line: 120 call @3650 // <std#time.nano_time>   
1 [0x1]:           ipopl 3   
2 [0x2]:           istorel 0, fp+4   
4 [0x4]: line: 121 ipushl #2   
5 [0x5]:           pushl 1   
6 [0x6]:           smov ebx, sp+[-1]   
7 [0x7]:           calld ebx   
8 [0x8]:           pop   
9 [0x9]: line: 122 call @3650 // <std#time.nano_time>   
10 [0xa]:           ipopl 4   
11 [0xb]: line: 124 pushl 0   
12 [0xc]:           movg @79 // @std#time_unit   
13 [0xd]:           movn #0   
15 [0xf]:           pushobj   
16 [0x10]:           call @1947 // <std#_enum_.operator==>   
17 [0x11]:           loadval ebx   
18 [0x12]:           movr cmt, ebx   
19 [0x13]:           jne 27   
20 [0x14]: line: 126 ipushl #3   
21 [0x15]:           call @3654 // <std#time.nano_to_secs>   
22 [0x16]:           ipopl 3   
23 [0x17]: line: 127 ipushl #4   
24 [0x18]:           call @3654 // <std#time.nano_to_secs>   
25 [0x19]:           ipopl 4   
26 [0x1a]:           jmp @58   
27 [0x1b]:           pushl 0   
28 [0x1c]:           movg @79 // @std#time_unit   
29 [0x1d]:           movn #1   
31 [0x1f]:           pushobj   
32 [0x20]:           call @1947 // <std#_enum_.operator==>   
33 [0x21]:           loadval ebx   
34 [0x22]:           movr cmt, ebx   
35 [0x23]:           jne 43   
36 [0x24]: line: 130 ipushl #3   
37 [0x25]:           call @3653 // <std#time.nano_to_mills>   
38 [0x26]:           ipopl 3   
39 [0x27]: line: 131 ipushl #4   
40 [0x28]:           call @3653 // <std#time.nano_to_mills>   
41 [0x29]:           ipopl 4   
42 [0x2a]:           jmp @58   
43 [0x2b]:           pushl 0   
44 [0x2c]:           movg @79 // @std#time_unit   
45 [0x2d]:           movn #2   
47 [0x2f]:           pushobj   
48 [0x30]:           call @1947 // <std#_enum_.operator==>   
49 [0x31]:           loadval ebx   
50 [0x32]:           movr cmt, ebx   
51 [0x33]:           jne 58   
52 [0x34]: line: 134 ipushl #3   
53 [0x35]:           call @3652 // <std#time.nano_to_micro>   
54 [0x36]:           ipopl 3   
55 [0x37]: line: 135 ipushl #4   
56 [0x38]:           call @3652 // <std#time.nano_to_micro>   
57 [0x39]:           ipopl 4   
58 [0x3a]:           nop   
59 [0x3b]: line: 139 ipushl #4   
60 [0x3c]:           loadl ebx, fp+3   
61 [0x3d]:           loadval ecx   
62 [0x3e]:           sub ecx, ebx -> ebx   
63 [0x3f]:           return_val ebx   
64 [0x40]:           ret   


constructor: std#time.time[3662] params(0) in file: lib\support\/0.2.9//time.sharp:6:6: note:  
		class time {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


std#unique.hash[3663] params(0) in file: lib\support\/0.2.9//unique.sharp:11:8: note:  
		    def hash() : _int64;
		       ^



std#unique.guid[3664] params(0) in file: lib\support\/0.2.9//unique.sharp:12:8: note:  
		    def guid() : _int64;
		       ^



constructor: std#unique.unique[3665] params(0) in file: lib\support\/0.2.9//unique.sharp:10:10: note:  
		interface unique {
		         ^

0 [0x0]:         ret   


std#loopable<std#string>.get_elements[3666] params(0) in file: lib\support\/0.2.9//loopable.sharp:4:8: note:  
		    def get_elements() : t[];
		       ^



constructor: std#loopable<std#string>.loopable[3667] params(0) in file: lib\support\/0.2.9//loopable.sharp:3:10: note:  
		interface loopable<t> {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#list<std#string>.list[3668] params(0) in file: lib\support\/0.2.9//list.sharp:13:9: note:  
		    list() {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 14 movi #10, ebx   
3 [0x3]:          new_classarray ebx  // std#string[]   
5 [0x5]:          movl 0   
6 [0x6]:          movn #1   
8 [0x8]:          popobj   
9 [0x9]:          ret   


constructor: std#list<std#string>.list[3669] params(1) in file: lib\support\/0.2.9//list.sharp:17:9: note:  
		    list(starting_capacity: var) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 18 loadl ebx, fp+1   
2 [0x2]:          new_classarray ebx  // std#string[]   
4 [0x4]:          movl 0   
5 [0x5]:          movn #1   
7 [0x7]:          popobj   
8 [0x8]:          ret   


constructor: std#list<std#string>.list[3670] params(1) in file: lib\support\/0.2.9//list.sharp:21:9: note:  
		    list(initial_data: t[]) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 22 pushl 0   
2 [0x2]:          pushl 1   
3 [0x3]:          call @3681 // <std#list<std#string>.add_all>   
4 [0x4]:          ret   


function: std#list<std#string>.empty[3671] params(0) in file: lib\support\/0.2.9//list.sharp:25:8: note:  
		    def empty() := n_elements == 0;
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          return_val cmt   
12 [0xc]:          ret   


function: std#list<std#string>.set_compact[3672] params(1) in file: lib\support\/0.2.9//list.sharp:27:8: note:  
		    def set_compact(compact_array: var) {
		       ^

0 [0x0]: line: 28 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #2   
4 [0x4]:          loadval ebx   
5 [0x5]:          movi #0, adx   
7 [0x7]:          rmov adx, ebx   
8 [0x8]:          ret   


function: std#list<std#string>.get_elements[3673] params(0) in file: lib\support\/0.2.9//list.sharp:31:8: note:  
		    def get_elements() : t[] {
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 19   
14 [0xe]:          pushnull    
15 [0xf]:          popobj2    
16 [0x10]:          returnobj   
17 [0x11]:          ret   
18 [0x12]:          jmp @36   
19 [0x13]: line: 33 movl 0   
20 [0x14]:          movn #1   
22 [0x16]:          pushobj   
23 [0x17]:          istore 0   
25 [0x19]:          movl 0   
26 [0x1a]:          movn #0   
28 [0x1c]:          movi #0, adx   
30 [0x1e]:          iaload ebx, adx   
31 [0x1f]:          rstore ebx   
32 [0x20]:          call @2161 // <std.io#__srt_global.copy>   
33 [0x21]:          popobj2    
34 [0x22]:          returnobj   
35 [0x23]:          ret   
36 [0x24]:          nop   


overload function: std#list<std#string>.operator[[3674] params(1) in file: lib\support\/0.2.9//list.sharp:36:8: note:  
		    def operator[](index: var): t {
		       ^

0 [0x0]: line: 37 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 26   
18 [0x12]: line: 38 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:          dup    
21 [0x15]:          pushl 0   
22 [0x16]:          ipushl #1   
23 [0x17]:          call @3697 // <std#list<std#string>.out_of_bounds_msg>   
24 [0x18]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:          throw    
26 [0x1a]:          nop   
27 [0x1b]: line: 39 movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          pushobj   
31 [0x1f]:          loadl ebx, fp+1   
32 [0x20]:          popobj2    
33 [0x21]:          movr adx, ebx   
34 [0x22]:          chklen adx   
35 [0x23]:          movnd adx   
36 [0x24]:          returnobj   
37 [0x25]:          ret   


function: std#list<std#string>.at[3675] params(1) in file: lib\support\/0.2.9//list.sharp:42:8: note:  
		    def at(index: var): t {
		       ^

0 [0x0]: line: 43 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 26   
18 [0x12]: line: 44 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:          dup    
21 [0x15]:          pushl 0   
22 [0x16]:          ipushl #1   
23 [0x17]:          call @3697 // <std#list<std#string>.out_of_bounds_msg>   
24 [0x18]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:          throw    
26 [0x1a]:          nop   
27 [0x1b]: line: 45 movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          pushobj   
31 [0x1f]:          loadl ebx, fp+1   
32 [0x20]:          popobj2    
33 [0x21]:          movr adx, ebx   
34 [0x22]:          chklen adx   
35 [0x23]:          movnd adx   
36 [0x24]:          returnobj   
37 [0x25]:          ret   


function: std#list<std#string>.last[3676] params(0) in file: lib\support\/0.2.9//list.sharp:48:8: note:  
		    def last(): t {
		       ^

0 [0x0]: line: 49 pushl 0   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          rstore ebx   
8 [0x8]:          movi #1, ebx   
10 [0xa]:          loadval ecx   
11 [0xb]:          sub ecx, ebx -> ebx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @3675 // <std#list<std#string>.at>   
14 [0xe]:          popobj2    
15 [0xf]:          returnobj   
16 [0x10]:          ret   


function: std#list<std#string>.put[3677] params(2) in file: lib\support\/0.2.9//list.sharp:52:8: note:  
		    def put(index: var, element: t) : t {
		       ^

0 [0x0]: line: 53 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 26   
18 [0x12]: line: 54 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:          dup    
21 [0x15]:          pushl 0   
22 [0x16]:          ipushl #1   
23 [0x17]:          call @3697 // <std#list<std#string>.out_of_bounds_msg>   
24 [0x18]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:          throw    
26 [0x1a]:          nop   
27 [0x1b]: line: 56 movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          pushobj   
31 [0x1f]:          loadl ebx, fp+1   
32 [0x20]:          popobj2    
33 [0x21]:          movr adx, ebx   
34 [0x22]:          chklen adx   
35 [0x23]:          movnd adx   
36 [0x24]:          smovr_3 fp+3   
37 [0x25]: line: 57 pushl 2   
38 [0x26]:          movl 0   
39 [0x27]:          movn #1   
41 [0x29]:          pushobj   
42 [0x2a]:          loadl ebx, fp+1   
43 [0x2b]:          popobj2    
44 [0x2c]:          movr adx, ebx   
45 [0x2d]:          chklen adx   
46 [0x2e]:          movnd adx   
47 [0x2f]:          popobj   
48 [0x30]: line: 58 movl 3   
49 [0x31]:          returnobj   
50 [0x32]:          ret   


function: std#list<std#string>.expand[3678] params(0) in file: lib\support\/0.2.9//list.sharp:61:16: note:  
		    private def expand() {
		               ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #2   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 24   
8 [0x8]: line: 63 movl 0   
9 [0x9]:          movn #1   
11 [0xb]:          pushobj   
12 [0xc]:          movl 0   
13 [0xd]:          movn #1   
15 [0xf]:          sizeof ebx   
16 [0x10]:          rstore ebx   
17 [0x11]:          movi #128, ebx   
19 [0x13]:          loadval ecx   
20 [0x14]:          add ecx, ebx -> ebx   
21 [0x15]:          rstore ebx   
22 [0x16]:          call @2141 // <std.io#__srt_global.realloc>   
23 [0x17]:          jmp @51   
24 [0x18]: line: 65 movl 0   
25 [0x19]:          movn #1   
27 [0x1b]:          pushobj   
28 [0x1c]:          movl 0   
29 [0x1d]:          movn #1   
31 [0x1f]:          sizeof ebx   
32 [0x20]:          rstore ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #1   
36 [0x24]:          sizeof ebx   
37 [0x25]:          rstore ebx   
38 [0x26]:          movi #4, ebx   
40 [0x28]:          loadval ecx   
41 [0x29]:          shr ecx, ebx -> ebx   
42 [0x2a]:          loadval ecx   
43 [0x2b]:          add ecx, ebx -> ebx   
44 [0x2c]:          rstore ebx   
45 [0x2d]:          movi #128, ebx   
47 [0x2f]:          loadval ecx   
48 [0x30]:          add ecx, ebx -> ebx   
49 [0x31]:          rstore ebx   
50 [0x32]:          call @2141 // <std.io#__srt_global.realloc>   
51 [0x33]:          nop   
52 [0x34]:          ret   


function: std#list<std#string>.clear[3679] params(0) in file: lib\support\/0.2.9//list.sharp:68:8: note:  
		    def clear() {
		       ^

0 [0x0]: line: 69 movi #10, ebx   
2 [0x2]:          new_classarray ebx  // std#string[]   
4 [0x4]:          movl 0   
5 [0x5]:          movn #1   
7 [0x7]:          popobj   
8 [0x8]: line: 70 movi #0, ebx   
10 [0xa]:          movl 0   
11 [0xb]:          movn #0   
13 [0xd]:          movi #0, adx   
15 [0xf]:          rmov adx, ebx   
16 [0x10]:          ret   


function: std#list<std#string>.add_all[3680] params(1) in file: lib\support\/0.2.9//list.sharp:73:8: note:  
		    def add_all(lst: list<t>) {
		       ^

0 [0x0]: line: 74 movl 1   
1 [0x1]:          movn #1   
3 [0x3]:          pushobj   
4 [0x4]:          istore 0   
6 [0x6]:          movl 1   
7 [0x7]:          movn #0   
9 [0x9]:          movi #0, adx   
11 [0xb]:          iaload ebx, adx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @2161 // <std.io#__srt_global.copy>   
14 [0xe]:          popobj2    
15 [0xf]:          movi #75, cmt   
17 [0x11]:          cast cmt   
18 [0x12]:          pushobj   
19 [0x13]:          movl 0   
20 [0x14]:          movn #1   
22 [0x16]:          popobj   
23 [0x17]: line: 75 movl 1   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          iaload ebx, adx   
29 [0x1d]:          movl 0   
30 [0x1e]:          movn #0   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          ret   


function: std#list<std#string>.add_all[3681] params(1) in file: lib\support\/0.2.9//list.sharp:78:8: note:  
		    def add_all(lst: t[]) {
		       ^

0 [0x0]: line: 79 movl 1   
1 [0x1]:          checknull   
2 [0x2]:          not ebx, ebx   
3 [0x3]:          movr cmt, ebx   
4 [0x4]:          jne 30   
5 [0x5]: line: 80 pushl 1   
6 [0x6]:          istore 0   
8 [0x8]:          movl 1   
9 [0x9]:          sizeof ebx   
10 [0xa]:          rstore ebx   
11 [0xb]:          call @2161 // <std.io#__srt_global.copy>   
12 [0xc]:          popobj2    
13 [0xd]:          movi #75, cmt   
15 [0xf]:          cast cmt   
16 [0x10]:          pushobj   
17 [0x11]:          movl 0   
18 [0x12]:          movn #1   
20 [0x14]:          popobj   
21 [0x15]: line: 81 movl 1   
22 [0x16]:          sizeof ebx   
23 [0x17]:          movl 0   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          rmov adx, ebx   
29 [0x1d]:          jmp @46   
30 [0x1e]: line: 83 movi #0, ebx   
32 [0x20]:          movl 0   
33 [0x21]:          movn #0   
35 [0x23]:          movi #0, adx   
37 [0x25]:          rmov adx, ebx   
38 [0x26]: line: 84 movi #10, ebx   
40 [0x28]:          new_classarray ebx  // std#string[]   
42 [0x2a]:          movl 0   
43 [0x2b]:          movn #1   
45 [0x2d]:          popobj   
46 [0x2e]:          nop   
47 [0x2f]:          ret   


function: std#list<std#string>.add[3682] params(1) in file: lib\support\/0.2.9//list.sharp:88:8: note:  
		    def add(element: t) {
		       ^

0 [0x0]: line: 89 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 0   
8 [0x8]:          movn #1   
10 [0xa]:          sizeof ebx   
11 [0xb]:          loadval ecx   
12 [0xc]:          gte ecx, ebx   
13 [0xd]:          movr ebx, cmt   
14 [0xe]:          movr cmt, ebx   
15 [0xf]:          jne 18   
16 [0x10]: line: 90 pushl 0   
17 [0x11]:          call @3678 // <std#list<std#string>.expand>   
18 [0x12]:          nop   
19 [0x13]: line: 91 pushl 1   
20 [0x14]:          movl 0   
21 [0x15]:          movn #1   
23 [0x17]:          pushobj   
24 [0x18]:          movl 0   
25 [0x19]:          movn #0   
27 [0x1b]:          movi #0, adx   
29 [0x1d]:          iaload ebx, adx   
30 [0x1e]:          movr egx, ebx   
31 [0x1f]:          inc ebx   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          movr ebx, egx   
36 [0x24]:          popobj2    
37 [0x25]:          movr adx, ebx   
38 [0x26]:          chklen adx   
39 [0x27]:          movnd adx   
40 [0x28]:          popobj   
41 [0x29]:          ret   


function: std#list<std#string>.indexof[3683] params(1) in file: lib\support\/0.2.9//list.sharp:94:8: note:  
		    def indexof(element: t) : var {
		       ^

0 [0x0]: line: 95 istorel 0, fp+2   
2 [0x2]:          ipushl #2   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          movi #0, adx   
8 [0x8]:          iaload ebx, adx   
9 [0x9]:          loadval ecx   
10 [0xa]:          lt ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 36   
14 [0xe]: line: 96 pushl 1   
15 [0xf]:          movl 0   
16 [0x10]:          movn #1   
18 [0x12]:          pushobj   
19 [0x13]:          loadl ebx, fp+2   
20 [0x14]:          popobj2    
21 [0x15]:          movr adx, ebx   
22 [0x16]:          chklen adx   
23 [0x17]:          movnd adx   
24 [0x18]:          pushobj   
25 [0x19]:          call @3564 // <std#string.operator==>   
26 [0x1a]:          loadval ebx   
27 [0x1b]:          movr cmt, ebx   
28 [0x1c]:          jne 32   
29 [0x1d]: line: 97 loadl ebx, fp+2   
30 [0x1e]:          return_val ebx   
31 [0x1f]:          ret   
32 [0x20]:          nop   
33 [0x21]:          iaddl 1, fp@2   
35 [0x23]:          jmp @2   
36 [0x24]: line: 101 istorel -1, fp+0   
38 [0x26]:           ret   


function: std#list<std#string>.pop_back[3684] params(0) in file: lib\support\/0.2.9//list.sharp:104:8: note:  
		    def pop_back() {
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #0, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 38   
14 [0xe]: line: 106 movl 1   
15 [0xf]:           del   
16 [0x10]: line: 107 pushl 1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           movl 0   
22 [0x16]:           movn #0   
24 [0x18]:           movi #0, adx   
26 [0x1a]:           iaload ebx, adx   
27 [0x1b]:           movr egx, ebx   
28 [0x1c]:           dec ebx   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           rmov adx, ebx   
32 [0x20]:           movr ebx, egx   
33 [0x21]:           popobj2    
34 [0x22]:           movr adx, ebx   
35 [0x23]:           chklen adx   
36 [0x24]:           movnd adx   
37 [0x25]:           popobj   
38 [0x26]:           nop   
39 [0x27]:           ret   


function: std#list<std#string>.pop_last[3685] params(0) in file: lib\support\/0.2.9//list.sharp:111:8: note:  
		    def pop_last() : t {
		       ^

0 [0x0]: line: 112 pushl 0   
1 [0x1]:           call @3676 // <std#list<std#string>.last>   
2 [0x2]:           popobj2    
3 [0x3]:           smovr_3 fp+1   
4 [0x4]: line: 113 pushl 0   
5 [0x5]:           call @3684 // <std#list<std#string>.pop_back>   
6 [0x6]: line: 114 movl 1   
7 [0x7]:           returnobj   
8 [0x8]:           ret   


function: std#list<std#string>.pop_first[3686] params(0) in file: lib\support\/0.2.9//list.sharp:117:8: note:  
		    def pop_first() : t {
		       ^

0 [0x0]: line: 118 movl 0   
1 [0x1]:           movn #1   
3 [0x3]:           pushobj   
4 [0x4]:           movi #0, ebx   
6 [0x6]:           popobj2    
7 [0x7]:           movr adx, ebx   
8 [0x8]:           chklen adx   
9 [0x9]:           movnd adx   
10 [0xa]:           smovr_3 fp+1   
11 [0xb]: line: 119 pushl 0   
12 [0xc]:           istore 0   
14 [0xe]:           call @3694 // <std#list<std#string>.remove_at>   
15 [0xf]: line: 120 movl 1   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#list<std#string>.size[3687] params(0) in file: lib\support\/0.2.9//list.sharp:123:8: note:  
		    def size() := n_elements;
		       ^

0 [0x0]: line: 123 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std#list<std#string>.insert[3688] params(2) in file: lib\support\/0.2.9//list.sharp:125:8: note:  
		    def insert(index: var, element: t) {
		       ^

0 [0x0]: line: 126 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gt ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 26   
18 [0x12]: line: 127 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:           dup    
21 [0x15]:           pushl 0   
22 [0x16]:           ipushl #1   
23 [0x17]:           call @3697 // <std#list<std#string>.out_of_bounds_msg>   
24 [0x18]:           call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:           throw    
26 [0x1a]:           nop   
27 [0x1b]: line: 129 movl 0   
28 [0x1c]:           movn #0   
30 [0x1e]:           movi #0, adx   
32 [0x20]:           iaload ebx, adx   
33 [0x21]:           rstore ebx   
34 [0x22]:           movi #0, ebx   
36 [0x24]:           loadval ecx   
37 [0x25]:           test ecx, ebx   
38 [0x26]:           movr ebx, cmt   
39 [0x27]:           movr cmt, ebx   
40 [0x28]:           jne 45   
41 [0x29]: line: 130 pushl 0   
42 [0x2a]:           pushl 2   
43 [0x2b]:           call @3682 // <std#list<std#string>.add>   
44 [0x2c]:           jmp @134   
45 [0x2d]: line: 132 movl 0   
46 [0x2e]:           movn #0   
48 [0x30]:           movi #0, adx   
50 [0x32]:           iaload ebx, adx   
51 [0x33]:           rstore ebx   
52 [0x34]:           movl 0   
53 [0x35]:           movn #1   
55 [0x37]:           sizeof ebx   
56 [0x38]:           loadval ecx   
57 [0x39]:           gte ecx, ebx   
58 [0x3a]:           movr ebx, cmt   
59 [0x3b]:           movr cmt, ebx   
60 [0x3c]:           jne 63   
61 [0x3d]: line: 133 pushl 0   
62 [0x3e]:           call @3678 // <std#list<std#string>.expand>   
63 [0x3f]:           nop   
64 [0x40]: line: 134 movl 0   
65 [0x41]:           movn #0   
67 [0x43]:           movi #0, adx   
69 [0x45]:           iaload ebx, adx   
70 [0x46]:           movr egx, ebx   
71 [0x47]:           inc ebx   
72 [0x48]:           movi #0, adx   
74 [0x4a]:           rmov adx, ebx   
75 [0x4b]: line: 135 movl 0   
76 [0x4c]:           movn #0   
78 [0x4e]:           movi #0, adx   
80 [0x50]:           iaload ebx, adx   
81 [0x51]:           rstore ebx   
82 [0x52]:           movi #1, ebx   
84 [0x54]:           loadval ecx   
85 [0x55]:           sub ecx, ebx -> ebx   
86 [0x56]:           smovr_2 ebx, fp+3   
87 [0x57]:           ipushl #3   
88 [0x58]:           loadl ebx, fp+1   
89 [0x59]:           loadval ecx   
90 [0x5a]:           gt ecx, ebx   
91 [0x5b]:           movr ebx, cmt   
92 [0x5c]:           movr cmt, ebx   
93 [0x5d]:           jne 123   
94 [0x5e]: line: 136 movl 0   
95 [0x5f]:           movn #1   
97 [0x61]:           pushobj   
98 [0x62]:           ipushl #3   
99 [0x63]:           movi #1, ebx   
101 [0x65]:           loadval ecx   
102 [0x66]:           sub ecx, ebx -> ebx   
103 [0x67]:           popobj2    
104 [0x68]:           movr adx, ebx   
105 [0x69]:           chklen adx   
106 [0x6a]:           movnd adx   
107 [0x6b]:           pushobj   
108 [0x6c]:           movl 0   
109 [0x6d]:           movn #1   
111 [0x6f]:           pushobj   
112 [0x70]:           loadl ebx, fp+3   
113 [0x71]:           popobj2    
114 [0x72]:           movr adx, ebx   
115 [0x73]:           chklen adx   
116 [0x74]:           movnd adx   
117 [0x75]:           popobj   
118 [0x76]:           loadl ebx, fp+3   
119 [0x77]:           movr egx, ebx   
120 [0x78]:           dec ebx   
121 [0x79]:           smovr_2 ebx, fp+3   
122 [0x7a]:           jmp @87   
123 [0x7b]: line: 137 pushl 2   
124 [0x7c]:           movl 0   
125 [0x7d]:           movn #1   
127 [0x7f]:           pushobj   
128 [0x80]:           loadl ebx, fp+1   
129 [0x81]:           popobj2    
130 [0x82]:           movr adx, ebx   
131 [0x83]:           chklen adx   
132 [0x84]:           movnd adx   
133 [0x85]:           popobj   
134 [0x86]:           nop   
135 [0x87]:           ret   


function: std#list<std#string>.find[3689] params(2) in file: lib\support\/0.2.9//list.sharp:141:8: note:  
		    def find(comparer : t, find_func: (t, t)(var)) : t {
		       ^

0 [0x0]: line: 142 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 48   
14 [0xe]: line: 143 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 44   
33 [0x21]: line: 144 movl 0   
34 [0x22]:           movn #1   
36 [0x24]:           pushobj   
37 [0x25]:           loadl ebx, fp+3   
38 [0x26]:           popobj2    
39 [0x27]:           movr adx, ebx   
40 [0x28]:           chklen adx   
41 [0x29]:           movnd adx   
42 [0x2a]:           returnobj   
43 [0x2b]:           ret   
44 [0x2c]:           nop   
45 [0x2d]:           iaddl 1, fp@3   
47 [0x2f]:           jmp @2   
48 [0x30]: line: 148 movl 4   
49 [0x31]:           del   
50 [0x32]: line: 149 movl 4   
51 [0x33]:           returnobj   
52 [0x34]:           ret   


function: std#list<std#string>.remove[3690] params(1) in file: lib\support\/0.2.9//list.sharp:152:8: note:  
		    def remove(val: t) {
		       ^

0 [0x0]: line: 153 istorel 0, fp+2   
2 [0x2]:           ipushl #2   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 37   
14 [0xe]: line: 154 pushl 1   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+2   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           call @3564 // <std#string.operator==>   
26 [0x1a]:           loadval ebx   
27 [0x1b]:           movr cmt, ebx   
28 [0x1c]:           jne 33   
29 [0x1d]: line: 155 pushl 0   
30 [0x1e]:           ipushl #2   
31 [0x1f]:           call @3694 // <std#list<std#string>.remove_at>   
32 [0x20]: line: 156 ret   
33 [0x21]:           nop   
34 [0x22]:           iaddl 1, fp@2   
36 [0x24]:           jmp @2   
37 [0x25]:           ret   


function: std#list<std#string>.remove[3691] params(2) in file: lib\support\/0.2.9//list.sharp:161:8: note:  
		    def remove(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 162 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 41   
14 [0xe]: line: 163 ipushl #2   
15 [0xf]:           pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           movnd adx   
25 [0x19]:           pushobj   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 37   
33 [0x21]: line: 164 pushl 0   
34 [0x22]:           ipushl #3   
35 [0x23]:           call @3694 // <std#list<std#string>.remove_at>   
36 [0x24]: line: 165 ret   
37 [0x25]:           nop   
38 [0x26]:           iaddl 1, fp@3   
40 [0x28]:           jmp @2   
41 [0x29]:           ret   


function: std#list<std#string>.replace[3692] params(2) in file: lib\support\/0.2.9//list.sharp:170:8: note:  
		    def replace(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 171 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 49   
14 [0xe]: line: 172 ipushl #2   
15 [0xf]:           pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           movnd adx   
25 [0x19]:           pushobj   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 45   
33 [0x21]: line: 173 pushl 1   
34 [0x22]:           movl 0   
35 [0x23]:           movn #1   
37 [0x25]:           pushobj   
38 [0x26]:           loadl ebx, fp+3   
39 [0x27]:           popobj2    
40 [0x28]:           movr adx, ebx   
41 [0x29]:           chklen adx   
42 [0x2a]:           movnd adx   
43 [0x2b]:           popobj   
44 [0x2c]: line: 174 ret   
45 [0x2d]:           nop   
46 [0x2e]:           iaddl 1, fp@3   
48 [0x30]:           jmp @2   
49 [0x31]:           ret   


function: std#list<std#string>.linear_sort[3693] params(1) in file: lib\support\/0.2.9//list.sharp:179:8: note:  
		    def linear_sort(swap: (t, t)(var)) {
		       ^

0 [0x0]: line: 180 istorel 0, fp+2   
2 [0x2]:           ipushl #2   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 134   
14 [0xe]: line: 182 istorel 0, fp+3   
16 [0x10]:           ipushl #3   
17 [0x11]:           movl 0   
18 [0x12]:           movn #0   
20 [0x14]:           movi #0, adx   
22 [0x16]:           iaload ebx, adx   
23 [0x17]:           loadval ecx   
24 [0x18]:           lt ecx, ebx   
25 [0x19]:           movr ebx, cmt   
26 [0x1a]:           movr cmt, ebx   
27 [0x1b]:           jne 131   
28 [0x1c]: line: 183 ipushl #3   
29 [0x1d]:           movi #1, ebx   
31 [0x1f]:           loadval ecx   
32 [0x20]:           add ecx, ebx -> ebx   
33 [0x21]:           rstore ebx   
34 [0x22]:           movl 0   
35 [0x23]:           movn #0   
37 [0x25]:           movi #0, adx   
39 [0x27]:           iaload ebx, adx   
40 [0x28]:           loadval ecx   
41 [0x29]:           lt ecx, ebx   
42 [0x2a]:           movr ebx, cmt   
43 [0x2b]:           movr cmt, ebx   
44 [0x2c]:           jne 127   
45 [0x2d]: line: 185 ipushl #1   
46 [0x2e]:           movl 0   
47 [0x2f]:           movn #1   
49 [0x31]:           pushobj   
50 [0x32]:           loadl ebx, fp+3   
51 [0x33]:           popobj2    
52 [0x34]:           movr adx, ebx   
53 [0x35]:           chklen adx   
54 [0x36]:           movnd adx   
55 [0x37]:           pushobj   
56 [0x38]:           movl 0   
57 [0x39]:           movn #1   
59 [0x3b]:           pushobj   
60 [0x3c]:           ipushl #3   
61 [0x3d]:           movi #1, ebx   
63 [0x3f]:           loadval ecx   
64 [0x40]:           add ecx, ebx -> ebx   
65 [0x41]:           popobj2    
66 [0x42]:           movr adx, ebx   
67 [0x43]:           chklen adx   
68 [0x44]:           movnd adx   
69 [0x45]:           pushobj   
70 [0x46]:           smov ebx, sp+[-2]   
71 [0x47]:           calld ebx   
72 [0x48]:           swap    
73 [0x49]:           pop   
74 [0x4a]:           loadval ebx   
75 [0x4b]:           movr cmt, ebx   
76 [0x4c]:           jne 126   
77 [0x4d]: line: 186 movl 0   
78 [0x4e]:           movn #1   
80 [0x50]:           pushobj   
81 [0x51]:           loadl ebx, fp+3   
82 [0x52]:           popobj2    
83 [0x53]:           movr adx, ebx   
84 [0x54]:           chklen adx   
85 [0x55]:           movnd adx   
86 [0x56]:           smovr_3 fp+4   
87 [0x57]: line: 187 movl 0   
88 [0x58]:           movn #1   
90 [0x5a]:           pushobj   
91 [0x5b]:           ipushl #3   
92 [0x5c]:           movi #1, ebx   
94 [0x5e]:           loadval ecx   
95 [0x5f]:           add ecx, ebx -> ebx   
96 [0x60]:           popobj2    
97 [0x61]:           movr adx, ebx   
98 [0x62]:           chklen adx   
99 [0x63]:           movnd adx   
100 [0x64]:           pushobj   
101 [0x65]:           movl 0   
102 [0x66]:           movn #1   
104 [0x68]:           pushobj   
105 [0x69]:           loadl ebx, fp+3   
106 [0x6a]:           popobj2    
107 [0x6b]:           movr adx, ebx   
108 [0x6c]:           chklen adx   
109 [0x6d]:           movnd adx   
110 [0x6e]:           popobj   
111 [0x6f]: line: 188 pushl 4   
112 [0x70]:           movl 0   
113 [0x71]:           movn #1   
115 [0x73]:           pushobj   
116 [0x74]:           ipushl #3   
117 [0x75]:           movi #1, ebx   
119 [0x77]:           loadval ecx   
120 [0x78]:           add ecx, ebx -> ebx   
121 [0x79]:           popobj2    
122 [0x7a]:           movr adx, ebx   
123 [0x7b]:           chklen adx   
124 [0x7c]:           movnd adx   
125 [0x7d]:           popobj   
126 [0x7e]:           nop   
127 [0x7f]:           nop   
128 [0x80]:           iaddl 1, fp@3   
130 [0x82]:           jmp @16   
131 [0x83]:           iaddl 1, fp@2   
133 [0x85]:           jmp @2   
134 [0x86]:           ret   


function: std#list<std#string>.remove_at[3694] params(1) in file: lib\support\/0.2.9//list.sharp:195:8: note:  
		    def remove_at(index: var) {
		       ^

0 [0x0]: line: 196 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gte ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 26   
18 [0x12]: line: 197 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:           dup    
21 [0x15]:           pushl 0   
22 [0x16]:           ipushl #1   
23 [0x17]:           call @3697 // <std#list<std#string>.out_of_bounds_msg>   
24 [0x18]:           call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:           throw    
26 [0x1a]:           nop   
27 [0x1b]: line: 199 movl 0   
28 [0x1c]:           movn #0   
30 [0x1e]:           movi #0, adx   
32 [0x20]:           iaload ebx, adx   
33 [0x21]:           rstore ebx   
34 [0x22]:           loadl ebx, fp+1   
35 [0x23]:           loadval ecx   
36 [0x24]:           sub ecx, ebx -> ebx   
37 [0x25]:           rstore ebx   
38 [0x26]:           movi #1, ebx   
40 [0x28]:           loadval ecx   
41 [0x29]:           sub ecx, ebx -> ebx   
42 [0x2a]:           smovr_2 ebx, fp+2   
43 [0x2b]: line: 200 ipushl #2   
44 [0x2c]:           movi #0, ebx   
46 [0x2e]:           loadval ecx   
47 [0x2f]:           gt ecx, ebx   
48 [0x30]:           movr ebx, cmt   
49 [0x31]:           movr cmt, ebx   
50 [0x32]:           jne 74   
51 [0x33]: line: 201 movl 0   
52 [0x34]:           movn #1   
54 [0x36]:           pushobj   
55 [0x37]:           movl 0   
56 [0x38]:           movn #1   
58 [0x3a]:           pushobj   
59 [0x3b]:           ipushl #1   
60 [0x3c]:           ipushl #1   
61 [0x3d]:           movi #1, ebx   
63 [0x3f]:           loadval ecx   
64 [0x40]:           add ecx, ebx -> ebx   
65 [0x41]:           rstore ebx   
66 [0x42]:           movl 0   
67 [0x43]:           movn #0   
69 [0x45]:           movi #0, adx   
71 [0x47]:           iaload ebx, adx   
72 [0x48]:           rstore ebx   
73 [0x49]:           call @2151 // <std.io#__srt_global.memcopy>   
74 [0x4a]:           nop   
75 [0x4b]: line: 203 pushl 0   
76 [0x4c]:           call @3684 // <std#list<std#string>.pop_back>   
77 [0x4d]:           ret   


function: std#list<std#string>.indexof[3695] params(2) in file: lib\support\/0.2.9//list.sharp:206:8: note:  
		    def indexof(comparer: t, find_func: (t, t)(var)) : var {
		       ^

0 [0x0]: line: 207 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 40   
14 [0xe]: line: 208 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 36   
33 [0x21]: line: 209 loadl ebx, fp+3   
34 [0x22]:           return_val ebx   
35 [0x23]:           ret   
36 [0x24]:           nop   
37 [0x25]:           iaddl 1, fp@3   
39 [0x27]:           jmp @2   
40 [0x28]: line: 213 istorel -1, fp+0   
42 [0x2a]:           ret   


function: std#list<std#string>.to_string[3696] params(0) in file: lib\support\/0.2.9//list.sharp:216:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 217 new_class @76 // std#string_builder   
2 [0x2]:           dup    
3 [0x3]:           call @3649 // <std#string_builder.string_builder>   
4 [0x4]:           popobj2    
5 [0x5]:           smovr_3 fp+1   
6 [0x6]: line: 219 pushl 1   
7 [0x7]:           newstr @562 // [    
8 [0x8]:           call @3645 // <std#string_builder.operator+=>   
9 [0x9]:           pop   
10 [0xa]: line: 220 istorel 0, fp+2   
12 [0xc]:           ipushl #2   
13 [0xd]:           movl 0   
14 [0xe]:           movn #0   
16 [0x10]:           movi #0, adx   
18 [0x12]:           iaload ebx, adx   
19 [0x13]:           loadval ecx   
20 [0x14]:           lt ecx, ebx   
21 [0x15]:           movr ebx, cmt   
22 [0x16]:           movr cmt, ebx   
23 [0x17]:           jne 62   
24 [0x18]: line: 221 pushl 1   
25 [0x19]:           movl 0   
26 [0x1a]:           movn #1   
28 [0x1c]:           pushobj   
29 [0x1d]:           loadl ebx, fp+2   
30 [0x1e]:           popobj2    
31 [0x1f]:           movr adx, ebx   
32 [0x20]:           chklen adx   
33 [0x21]:           movnd adx   
34 [0x22]:           pushobj   
35 [0x23]:           call @3642 // <std#string_builder.operator+=>   
36 [0x24]:           pop   
37 [0x25]: line: 223 ipushl #2   
38 [0x26]:           movi #1, ebx   
40 [0x28]:           loadval ecx   
41 [0x29]:           add ecx, ebx -> ebx   
42 [0x2a]:           rstore ebx   
43 [0x2b]:           movl 0   
44 [0x2c]:           movn #0   
46 [0x2e]:           movi #0, adx   
48 [0x30]:           iaload ebx, adx   
49 [0x31]:           loadval ecx   
50 [0x32]:           lt ecx, ebx   
51 [0x33]:           movr ebx, cmt   
52 [0x34]:           movr cmt, ebx   
53 [0x35]:           jne 58   
54 [0x36]: line: 224 pushl 1   
55 [0x37]:           newstr @563 // ,    
56 [0x38]:           call @3645 // <std#string_builder.operator+=>   
57 [0x39]:           pop   
58 [0x3a]:           nop   
59 [0x3b]:           iaddl 1, fp@2   
61 [0x3d]:           jmp @12   
62 [0x3e]: line: 228 pushl 1   
63 [0x3f]:           newstr @564 //  ]   
64 [0x40]:           call @3645 // <std#string_builder.operator+=>   
65 [0x41]:           pop   
66 [0x42]: line: 229 pushl 1   
67 [0x43]:           call @3622 // <std#string_builder.to_string>   
68 [0x44]:           popobj2    
69 [0x45]:           returnobj   
70 [0x46]:           ret   


function: std#list<std#string>.out_of_bounds_msg[3697] params(1) in file: lib\support\/0.2.9//list.sharp:232:16: note:  
		    private def out_of_bounds_msg(index: var) : string {
		               ^

0 [0x0]: line: 233 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           newstr @565 // Index:    
4 [0x4]:           call @3546 // <std#string.string>   
5 [0x5]:           ipushl #1   
6 [0x6]:           call @3578 // <std#string.operator+>   
7 [0x7]:           newstr @566 // , size:    
8 [0x8]:           call @3558 // <std#string.operator+>   
9 [0x9]:           movl 0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           iaload ebx, adx   
15 [0xf]:           rstore ebx   
16 [0x10]:           call @3578 // <std#string.operator+>   
17 [0x11]:           popobj2    
18 [0x12]:           returnobj   
19 [0x13]:           ret   


constructor: main.frontend#error_manager.error_manager[3698] params(4) in file: lib\support\/bootstrap//frontend//error_manager.sharp:29:25: note:  
		    public error_manager(lines: list<string>, file: string, as_is: var, aggressive: var)
		                        ^

0 [0x0]: line: 23 movg @82 // @main.frontend#error_manager   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          not ebx, ebx   
7 [0x7]:          movr cmt, ebx   
8 [0x8]:          jne 19   
9 [0x9]: line: 24 istore 1   
11 [0xb]:          movg @82 // @main.frontend#error_manager   
12 [0xc]:          movn #0   
14 [0xe]:          loadval ebx   
15 [0xf]:          movi #0, adx   
17 [0x11]:          rmov adx, ebx   
18 [0x12]: line: 25 call @3751 // <main.frontend#error_manager.init_class>   
19 [0x13]:          nop   
20 [0x14]:          pushl 0   
21 [0x15]: line: 31 new_class @122 // std#list<std#list<main.frontend#parse_error>>   
23 [0x17]:          dup    
24 [0x18]:          call @4009 // <std#list<std#list<main.frontend#parse_error>>.list>   
25 [0x19]:          movl 0   
26 [0x1a]:          movn #3   
28 [0x1c]:          popobj   
29 [0x1d]: line: 32 new_class @112 // std#list<main.frontend#parse_error>   
31 [0x1f]:          dup    
32 [0x20]:          call @3702 // <std#list<main.frontend#parse_error>.list>   
33 [0x21]:          movl 0   
34 [0x22]:          movn #0   
36 [0x24]:          popobj   
37 [0x25]: line: 33 new_class @112 // std#list<main.frontend#parse_error>   
39 [0x27]:          dup    
40 [0x28]:          call @3702 // <std#list<main.frontend#parse_error>.list>   
41 [0x29]:          movl 0   
42 [0x2a]:          movn #1   
44 [0x2c]:          popobj   
45 [0x2d]: line: 34 new_class @112 // std#list<main.frontend#parse_error>   
47 [0x2f]:          dup    
48 [0x30]:          call @3702 // <std#list<main.frontend#parse_error>.list>   
49 [0x31]:          movl 0   
50 [0x32]:          movn #2   
52 [0x34]:          popobj   
53 [0x35]: line: 35 ipushl #3   
54 [0x36]:          movl 0   
55 [0x37]:          movn #8   
57 [0x39]:          loadval ebx   
58 [0x3a]:          movi #0, adx   
60 [0x3c]:          rmov adx, ebx   
61 [0x3d]: line: 36 new_class @110 // std#list<std#string>   
63 [0x3f]:          dup    
64 [0x40]:          call @3668 // <std#list<std#string>.list>   
65 [0x41]:          movl 0   
66 [0x42]:          movn #10   
68 [0x44]:          popobj   
69 [0x45]: line: 37 ipushl #4   
70 [0x46]:          movl 0   
71 [0x47]:          movn #9   
73 [0x49]:          loadval ebx   
74 [0x4a]:          movi #0, adx   
76 [0x4c]:          rmov adx, ebx   
77 [0x4d]: line: 39 movl 0   
78 [0x4e]:          movn #10   
80 [0x50]:          pushobj   
81 [0x51]:          pushl 1   
82 [0x52]:          call @3680 // <std#list<std#string>.add_all>   
83 [0x53]: line: 40 movg @82 // @main.frontend#error_manager   
84 [0x54]:          movn #2   
86 [0x56]:          pushobj   
87 [0x57]:          movl 0   
88 [0x58]:          movn #4   
90 [0x5a]:          popobj   
91 [0x5b]: line: 41 movg @82 // @main.frontend#error_manager   
92 [0x5c]:          movn #2   
94 [0x5e]:          pushobj   
95 [0x5f]:          movl 0   
96 [0x60]:          movn #5   
98 [0x62]:          popobj   
99 [0x63]: line: 42 pushl 2   
100 [0x64]:          movl 0   
101 [0x65]:          movn #11   
103 [0x67]:          popobj   
104 [0x68]:          ret   


function: main.frontend#error_manager.print_errors[3699] params(0) in file: lib\support\/bootstrap//frontend//error_manager.sharp:45:15: note:  
		    public def print_errors() {
		              ^

0 [0x0]: line: 46 call @2063 // <std.io.fiber#fiber._lock>   
1 [0x1]: line: 47 movl 0   
2 [0x2]:          movn #8   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          not ebx, ebx   
8 [0x8]:          movr cmt, ebx   
9 [0x9]:          jne 82   
10 [0xa]: line: 48 movl 1   
11 [0xb]:          del   
12 [0xc]: line: 49 movl 0   
13 [0xd]:          movn #6   
15 [0xf]:          movi #0, adx   
17 [0x11]:          iaload ebx, adx   
18 [0x12]:          movr cmt, ebx   
19 [0x13]:          jne 64   
20 [0x14]: line: 50 movl 0   
21 [0x15]:          movn #9   
23 [0x17]:          movi #0, adx   
25 [0x19]:          iaload ebx, adx   
26 [0x1a]:          movr cmt, ebx   
27 [0x1b]:          jne 46   
28 [0x1c]: line: 51 pushl 0   
29 [0x1d]:          movl 0   
30 [0x1e]:          movn #1   
32 [0x20]:          pushobj   
33 [0x21]:          call @3732 // <main.frontend#error_manager.get_errors>   
34 [0x22]:          popobj2    
35 [0x23]:          smovr_3 fp+1   
36 [0x24]: line: 52 pushl 1   
37 [0x25]:          call @3554 // <std#string.empty>   
38 [0x26]:          loadval ebx   
39 [0x27]:          not ebx, ebx   
40 [0x28]:          movr cmt, ebx   
41 [0x29]:          jne 44   
42 [0x2a]:          pushl 1   
43 [0x2b]:          call @1919 // <std#__srt_global.println>   
44 [0x2c]:          nop   
45 [0x2d]:          jmp @63   
46 [0x2e]: line: 55 pushl 0   
47 [0x2f]:          movl 0   
48 [0x30]:          movn #0   
50 [0x32]:          pushobj   
51 [0x33]:          call @3732 // <main.frontend#error_manager.get_errors>   
52 [0x34]:          popobj2    
53 [0x35]:          smovr_3 fp+1   
54 [0x36]: line: 56 pushl 1   
55 [0x37]:          call @3554 // <std#string.empty>   
56 [0x38]:          loadval ebx   
57 [0x39]:          not ebx, ebx   
58 [0x3a]:          movr cmt, ebx   
59 [0x3b]:          jne 62   
60 [0x3c]:          pushl 1   
61 [0x3d]:          call @1919 // <std#__srt_global.println>   
62 [0x3e]:          nop   
63 [0x3f]:          nop   
64 [0x40]:          nop   
65 [0x41]: line: 60 pushl 0   
66 [0x42]:          movl 0   
67 [0x43]:          movn #2   
69 [0x45]:          pushobj   
70 [0x46]:          call @3732 // <main.frontend#error_manager.get_errors>   
71 [0x47]:          popobj2    
72 [0x48]:          smovr_3 fp+1   
73 [0x49]: line: 61 pushl 1   
74 [0x4a]:          call @3554 // <std#string.empty>   
75 [0x4b]:          loadval ebx   
76 [0x4c]:          not ebx, ebx   
77 [0x4d]:          movr cmt, ebx   
78 [0x4e]:          jne 81   
79 [0x4f]:          pushl 1   
80 [0x50]:          call @1919 // <std#__srt_global.println>   
81 [0x51]:          nop   
82 [0x52]:          nop   
83 [0x53]: line: 63 call @2064 // <std.io.fiber#fiber.unlock>   
84 [0x54]:          ret   


std#loopable<main.frontend#parse_error>.get_elements[3700] params(0) in file: lib\support\/0.2.9//loopable.sharp:4:8: note:  
		    def get_elements() : t[];
		       ^



constructor: std#loopable<main.frontend#parse_error>.loopable[3701] params(0) in file: lib\support\/0.2.9//loopable.sharp:3:10: note:  
		interface loopable<t> {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#list<main.frontend#parse_error>.list[3702] params(0) in file: lib\support\/0.2.9//list.sharp:13:9: note:  
		    list() {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 14 movi #10, ebx   
3 [0x3]:          new_classarray ebx  // main.frontend#parse_error[]   
5 [0x5]:          movl 0   
6 [0x6]:          movn #1   
8 [0x8]:          popobj   
9 [0x9]:          ret   


constructor: std#list<main.frontend#parse_error>.list[3703] params(1) in file: lib\support\/0.2.9//list.sharp:17:9: note:  
		    list(starting_capacity: var) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 18 loadl ebx, fp+1   
2 [0x2]:          new_classarray ebx  // main.frontend#parse_error[]   
4 [0x4]:          movl 0   
5 [0x5]:          movn #1   
7 [0x7]:          popobj   
8 [0x8]:          ret   


constructor: std#list<main.frontend#parse_error>.list[3704] params(1) in file: lib\support\/0.2.9//list.sharp:21:9: note:  
		    list(initial_data: t[]) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 22 pushl 0   
2 [0x2]:          pushl 1   
3 [0x3]:          call @3715 // <std#list<main.frontend#parse_error>.add_all>   
4 [0x4]:          ret   


function: std#list<main.frontend#parse_error>.empty[3705] params(0) in file: lib\support\/0.2.9//list.sharp:25:8: note:  
		    def empty() := n_elements == 0;
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          return_val cmt   
12 [0xc]:          ret   


function: std#list<main.frontend#parse_error>.set_compact[3706] params(1) in file: lib\support\/0.2.9//list.sharp:27:8: note:  
		    def set_compact(compact_array: var) {
		       ^

0 [0x0]: line: 28 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #2   
4 [0x4]:          loadval ebx   
5 [0x5]:          movi #0, adx   
7 [0x7]:          rmov adx, ebx   
8 [0x8]:          ret   


function: std#list<main.frontend#parse_error>.get_elements[3707] params(0) in file: lib\support\/0.2.9//list.sharp:31:8: note:  
		    def get_elements() : t[] {
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 19   
14 [0xe]:          pushnull    
15 [0xf]:          popobj2    
16 [0x10]:          returnobj   
17 [0x11]:          ret   
18 [0x12]:          jmp @36   
19 [0x13]: line: 33 movl 0   
20 [0x14]:          movn #1   
22 [0x16]:          pushobj   
23 [0x17]:          istore 0   
25 [0x19]:          movl 0   
26 [0x1a]:          movn #0   
28 [0x1c]:          movi #0, adx   
30 [0x1e]:          iaload ebx, adx   
31 [0x1f]:          rstore ebx   
32 [0x20]:          call @2161 // <std.io#__srt_global.copy>   
33 [0x21]:          popobj2    
34 [0x22]:          returnobj   
35 [0x23]:          ret   
36 [0x24]:          nop   


overload function: std#list<main.frontend#parse_error>.operator[[3708] params(1) in file: lib\support\/0.2.9//list.sharp:36:8: note:  
		    def operator[](index: var): t {
		       ^

0 [0x0]: line: 37 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 26   
18 [0x12]: line: 38 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:          dup    
21 [0x15]:          pushl 0   
22 [0x16]:          ipushl #1   
23 [0x17]:          call @3731 // <std#list<main.frontend#parse_error>.out_of_bounds_msg>   
24 [0x18]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:          throw    
26 [0x1a]:          nop   
27 [0x1b]: line: 39 movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          pushobj   
31 [0x1f]:          loadl ebx, fp+1   
32 [0x20]:          popobj2    
33 [0x21]:          movr adx, ebx   
34 [0x22]:          chklen adx   
35 [0x23]:          movnd adx   
36 [0x24]:          returnobj   
37 [0x25]:          ret   


function: std#list<main.frontend#parse_error>.at[3709] params(1) in file: lib\support\/0.2.9//list.sharp:42:8: note:  
		    def at(index: var): t {
		       ^

0 [0x0]: line: 43 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 26   
18 [0x12]: line: 44 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:          dup    
21 [0x15]:          pushl 0   
22 [0x16]:          ipushl #1   
23 [0x17]:          call @3731 // <std#list<main.frontend#parse_error>.out_of_bounds_msg>   
24 [0x18]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:          throw    
26 [0x1a]:          nop   
27 [0x1b]: line: 45 movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          pushobj   
31 [0x1f]:          loadl ebx, fp+1   
32 [0x20]:          popobj2    
33 [0x21]:          movr adx, ebx   
34 [0x22]:          chklen adx   
35 [0x23]:          movnd adx   
36 [0x24]:          returnobj   
37 [0x25]:          ret   


function: std#list<main.frontend#parse_error>.last[3710] params(0) in file: lib\support\/0.2.9//list.sharp:48:8: note:  
		    def last(): t {
		       ^

0 [0x0]: line: 49 pushl 0   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          rstore ebx   
8 [0x8]:          movi #1, ebx   
10 [0xa]:          loadval ecx   
11 [0xb]:          sub ecx, ebx -> ebx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @3709 // <std#list<main.frontend#parse_error>.at>   
14 [0xe]:          popobj2    
15 [0xf]:          returnobj   
16 [0x10]:          ret   


function: std#list<main.frontend#parse_error>.put[3711] params(2) in file: lib\support\/0.2.9//list.sharp:52:8: note:  
		    def put(index: var, element: t) : t {
		       ^

0 [0x0]: line: 53 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 26   
18 [0x12]: line: 54 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:          dup    
21 [0x15]:          pushl 0   
22 [0x16]:          ipushl #1   
23 [0x17]:          call @3731 // <std#list<main.frontend#parse_error>.out_of_bounds_msg>   
24 [0x18]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:          throw    
26 [0x1a]:          nop   
27 [0x1b]: line: 56 movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          pushobj   
31 [0x1f]:          loadl ebx, fp+1   
32 [0x20]:          popobj2    
33 [0x21]:          movr adx, ebx   
34 [0x22]:          chklen adx   
35 [0x23]:          movnd adx   
36 [0x24]:          smovr_3 fp+3   
37 [0x25]: line: 57 pushl 2   
38 [0x26]:          movl 0   
39 [0x27]:          movn #1   
41 [0x29]:          pushobj   
42 [0x2a]:          loadl ebx, fp+1   
43 [0x2b]:          popobj2    
44 [0x2c]:          movr adx, ebx   
45 [0x2d]:          chklen adx   
46 [0x2e]:          movnd adx   
47 [0x2f]:          popobj   
48 [0x30]: line: 58 movl 3   
49 [0x31]:          returnobj   
50 [0x32]:          ret   


function: std#list<main.frontend#parse_error>.expand[3712] params(0) in file: lib\support\/0.2.9//list.sharp:61:16: note:  
		    private def expand() {
		               ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #2   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 24   
8 [0x8]: line: 63 movl 0   
9 [0x9]:          movn #1   
11 [0xb]:          pushobj   
12 [0xc]:          movl 0   
13 [0xd]:          movn #1   
15 [0xf]:          sizeof ebx   
16 [0x10]:          rstore ebx   
17 [0x11]:          movi #128, ebx   
19 [0x13]:          loadval ecx   
20 [0x14]:          add ecx, ebx -> ebx   
21 [0x15]:          rstore ebx   
22 [0x16]:          call @2141 // <std.io#__srt_global.realloc>   
23 [0x17]:          jmp @51   
24 [0x18]: line: 65 movl 0   
25 [0x19]:          movn #1   
27 [0x1b]:          pushobj   
28 [0x1c]:          movl 0   
29 [0x1d]:          movn #1   
31 [0x1f]:          sizeof ebx   
32 [0x20]:          rstore ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #1   
36 [0x24]:          sizeof ebx   
37 [0x25]:          rstore ebx   
38 [0x26]:          movi #4, ebx   
40 [0x28]:          loadval ecx   
41 [0x29]:          shr ecx, ebx -> ebx   
42 [0x2a]:          loadval ecx   
43 [0x2b]:          add ecx, ebx -> ebx   
44 [0x2c]:          rstore ebx   
45 [0x2d]:          movi #128, ebx   
47 [0x2f]:          loadval ecx   
48 [0x30]:          add ecx, ebx -> ebx   
49 [0x31]:          rstore ebx   
50 [0x32]:          call @2141 // <std.io#__srt_global.realloc>   
51 [0x33]:          nop   
52 [0x34]:          ret   


function: std#list<main.frontend#parse_error>.clear[3713] params(0) in file: lib\support\/0.2.9//list.sharp:68:8: note:  
		    def clear() {
		       ^

0 [0x0]: line: 69 movi #10, ebx   
2 [0x2]:          new_classarray ebx  // main.frontend#parse_error[]   
4 [0x4]:          movl 0   
5 [0x5]:          movn #1   
7 [0x7]:          popobj   
8 [0x8]: line: 70 movi #0, ebx   
10 [0xa]:          movl 0   
11 [0xb]:          movn #0   
13 [0xd]:          movi #0, adx   
15 [0xf]:          rmov adx, ebx   
16 [0x10]:          ret   


function: std#list<main.frontend#parse_error>.add_all[3714] params(1) in file: lib\support\/0.2.9//list.sharp:73:8: note:  
		    def add_all(lst: list<t>) {
		       ^

0 [0x0]: line: 74 movl 1   
1 [0x1]:          movn #1   
3 [0x3]:          pushobj   
4 [0x4]:          istore 0   
6 [0x6]:          movl 1   
7 [0x7]:          movn #0   
9 [0x9]:          movi #0, adx   
11 [0xb]:          iaload ebx, adx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @2161 // <std.io#__srt_global.copy>   
14 [0xe]:          popobj2    
15 [0xf]:          movi #83, cmt   
17 [0x11]:          cast cmt   
18 [0x12]:          pushobj   
19 [0x13]:          movl 0   
20 [0x14]:          movn #1   
22 [0x16]:          popobj   
23 [0x17]: line: 75 movl 1   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          iaload ebx, adx   
29 [0x1d]:          movl 0   
30 [0x1e]:          movn #0   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          ret   


function: std#list<main.frontend#parse_error>.add_all[3715] params(1) in file: lib\support\/0.2.9//list.sharp:78:8: note:  
		    def add_all(lst: t[]) {
		       ^

0 [0x0]: line: 79 movl 1   
1 [0x1]:          checknull   
2 [0x2]:          not ebx, ebx   
3 [0x3]:          movr cmt, ebx   
4 [0x4]:          jne 30   
5 [0x5]: line: 80 pushl 1   
6 [0x6]:          istore 0   
8 [0x8]:          movl 1   
9 [0x9]:          sizeof ebx   
10 [0xa]:          rstore ebx   
11 [0xb]:          call @2161 // <std.io#__srt_global.copy>   
12 [0xc]:          popobj2    
13 [0xd]:          movi #83, cmt   
15 [0xf]:          cast cmt   
16 [0x10]:          pushobj   
17 [0x11]:          movl 0   
18 [0x12]:          movn #1   
20 [0x14]:          popobj   
21 [0x15]: line: 81 movl 1   
22 [0x16]:          sizeof ebx   
23 [0x17]:          movl 0   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          rmov adx, ebx   
29 [0x1d]:          jmp @46   
30 [0x1e]: line: 83 movi #0, ebx   
32 [0x20]:          movl 0   
33 [0x21]:          movn #0   
35 [0x23]:          movi #0, adx   
37 [0x25]:          rmov adx, ebx   
38 [0x26]: line: 84 movi #10, ebx   
40 [0x28]:          new_classarray ebx  // main.frontend#parse_error[]   
42 [0x2a]:          movl 0   
43 [0x2b]:          movn #1   
45 [0x2d]:          popobj   
46 [0x2e]:          nop   
47 [0x2f]:          ret   


function: std#list<main.frontend#parse_error>.add[3716] params(1) in file: lib\support\/0.2.9//list.sharp:88:8: note:  
		    def add(element: t) {
		       ^

0 [0x0]: line: 89 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 0   
8 [0x8]:          movn #1   
10 [0xa]:          sizeof ebx   
11 [0xb]:          loadval ecx   
12 [0xc]:          gte ecx, ebx   
13 [0xd]:          movr ebx, cmt   
14 [0xe]:          movr cmt, ebx   
15 [0xf]:          jne 18   
16 [0x10]: line: 90 pushl 0   
17 [0x11]:          call @3712 // <std#list<main.frontend#parse_error>.expand>   
18 [0x12]:          nop   
19 [0x13]: line: 91 pushl 1   
20 [0x14]:          movl 0   
21 [0x15]:          movn #1   
23 [0x17]:          pushobj   
24 [0x18]:          movl 0   
25 [0x19]:          movn #0   
27 [0x1b]:          movi #0, adx   
29 [0x1d]:          iaload ebx, adx   
30 [0x1e]:          movr egx, ebx   
31 [0x1f]:          inc ebx   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          movr ebx, egx   
36 [0x24]:          popobj2    
37 [0x25]:          movr adx, ebx   
38 [0x26]:          chklen adx   
39 [0x27]:          movnd adx   
40 [0x28]:          popobj   
41 [0x29]:          ret   


function: std#list<main.frontend#parse_error>.indexof[3717] params(1) in file: lib\support\/0.2.9//list.sharp:94:8: note:  
		    def indexof(element: t) : var {
		       ^

0 [0x0]: line: 95 istorel 0, fp+2   
2 [0x2]:          ipushl #2   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          movi #0, adx   
8 [0x8]:          iaload ebx, adx   
9 [0x9]:          loadval ecx   
10 [0xa]:          lt ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 35   
14 [0xe]: line: 96 pushl 1   
15 [0xf]:          movl 0   
16 [0x10]:          movn #1   
18 [0x12]:          pushobj   
19 [0x13]:          loadl ebx, fp+2   
20 [0x14]:          popobj2    
21 [0x15]:          movr adx, ebx   
22 [0x16]:          chklen adx   
23 [0x17]:          movnd adx   
24 [0x18]:          pushobj   
25 [0x19]:          itest ebx   
26 [0x1a]:          movr cmt, ebx   
27 [0x1b]:          jne 31   
28 [0x1c]: line: 97 loadl ebx, fp+2   
29 [0x1d]:          return_val ebx   
30 [0x1e]:          ret   
31 [0x1f]:          nop   
32 [0x20]:          iaddl 1, fp@2   
34 [0x22]:          jmp @2   
35 [0x23]: line: 101 istorel -1, fp+0   
37 [0x25]:           ret   


function: std#list<main.frontend#parse_error>.pop_back[3718] params(0) in file: lib\support\/0.2.9//list.sharp:104:8: note:  
		    def pop_back() {
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #0, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 38   
14 [0xe]: line: 106 movl 1   
15 [0xf]:           del   
16 [0x10]: line: 107 pushl 1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           movl 0   
22 [0x16]:           movn #0   
24 [0x18]:           movi #0, adx   
26 [0x1a]:           iaload ebx, adx   
27 [0x1b]:           movr egx, ebx   
28 [0x1c]:           dec ebx   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           rmov adx, ebx   
32 [0x20]:           movr ebx, egx   
33 [0x21]:           popobj2    
34 [0x22]:           movr adx, ebx   
35 [0x23]:           chklen adx   
36 [0x24]:           movnd adx   
37 [0x25]:           popobj   
38 [0x26]:           nop   
39 [0x27]:           ret   


function: std#list<main.frontend#parse_error>.pop_last[3719] params(0) in file: lib\support\/0.2.9//list.sharp:111:8: note:  
		    def pop_last() : t {
		       ^

0 [0x0]: line: 112 pushl 0   
1 [0x1]:           call @3710 // <std#list<main.frontend#parse_error>.last>   
2 [0x2]:           popobj2    
3 [0x3]:           smovr_3 fp+1   
4 [0x4]: line: 113 pushl 0   
5 [0x5]:           call @3718 // <std#list<main.frontend#parse_error>.pop_back>   
6 [0x6]: line: 114 movl 1   
7 [0x7]:           returnobj   
8 [0x8]:           ret   


function: std#list<main.frontend#parse_error>.pop_first[3720] params(0) in file: lib\support\/0.2.9//list.sharp:117:8: note:  
		    def pop_first() : t {
		       ^

0 [0x0]: line: 118 movl 0   
1 [0x1]:           movn #1   
3 [0x3]:           pushobj   
4 [0x4]:           movi #0, ebx   
6 [0x6]:           popobj2    
7 [0x7]:           movr adx, ebx   
8 [0x8]:           chklen adx   
9 [0x9]:           movnd adx   
10 [0xa]:           smovr_3 fp+1   
11 [0xb]: line: 119 pushl 0   
12 [0xc]:           istore 0   
14 [0xe]:           call @3728 // <std#list<main.frontend#parse_error>.remove_at>   
15 [0xf]: line: 120 movl 1   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#list<main.frontend#parse_error>.size[3721] params(0) in file: lib\support\/0.2.9//list.sharp:123:8: note:  
		    def size() := n_elements;
		       ^

0 [0x0]: line: 123 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std#list<main.frontend#parse_error>.insert[3722] params(2) in file: lib\support\/0.2.9//list.sharp:125:8: note:  
		    def insert(index: var, element: t) {
		       ^

0 [0x0]: line: 126 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gt ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 26   
18 [0x12]: line: 127 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:           dup    
21 [0x15]:           pushl 0   
22 [0x16]:           ipushl #1   
23 [0x17]:           call @3731 // <std#list<main.frontend#parse_error>.out_of_bounds_msg>   
24 [0x18]:           call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:           throw    
26 [0x1a]:           nop   
27 [0x1b]: line: 129 movl 0   
28 [0x1c]:           movn #0   
30 [0x1e]:           movi #0, adx   
32 [0x20]:           iaload ebx, adx   
33 [0x21]:           rstore ebx   
34 [0x22]:           movi #0, ebx   
36 [0x24]:           loadval ecx   
37 [0x25]:           test ecx, ebx   
38 [0x26]:           movr ebx, cmt   
39 [0x27]:           movr cmt, ebx   
40 [0x28]:           jne 45   
41 [0x29]: line: 130 pushl 0   
42 [0x2a]:           pushl 2   
43 [0x2b]:           call @3716 // <std#list<main.frontend#parse_error>.add>   
44 [0x2c]:           jmp @134   
45 [0x2d]: line: 132 movl 0   
46 [0x2e]:           movn #0   
48 [0x30]:           movi #0, adx   
50 [0x32]:           iaload ebx, adx   
51 [0x33]:           rstore ebx   
52 [0x34]:           movl 0   
53 [0x35]:           movn #1   
55 [0x37]:           sizeof ebx   
56 [0x38]:           loadval ecx   
57 [0x39]:           gte ecx, ebx   
58 [0x3a]:           movr ebx, cmt   
59 [0x3b]:           movr cmt, ebx   
60 [0x3c]:           jne 63   
61 [0x3d]: line: 133 pushl 0   
62 [0x3e]:           call @3712 // <std#list<main.frontend#parse_error>.expand>   
63 [0x3f]:           nop   
64 [0x40]: line: 134 movl 0   
65 [0x41]:           movn #0   
67 [0x43]:           movi #0, adx   
69 [0x45]:           iaload ebx, adx   
70 [0x46]:           movr egx, ebx   
71 [0x47]:           inc ebx   
72 [0x48]:           movi #0, adx   
74 [0x4a]:           rmov adx, ebx   
75 [0x4b]: line: 135 movl 0   
76 [0x4c]:           movn #0   
78 [0x4e]:           movi #0, adx   
80 [0x50]:           iaload ebx, adx   
81 [0x51]:           rstore ebx   
82 [0x52]:           movi #1, ebx   
84 [0x54]:           loadval ecx   
85 [0x55]:           sub ecx, ebx -> ebx   
86 [0x56]:           smovr_2 ebx, fp+3   
87 [0x57]:           ipushl #3   
88 [0x58]:           loadl ebx, fp+1   
89 [0x59]:           loadval ecx   
90 [0x5a]:           gt ecx, ebx   
91 [0x5b]:           movr ebx, cmt   
92 [0x5c]:           movr cmt, ebx   
93 [0x5d]:           jne 123   
94 [0x5e]: line: 136 movl 0   
95 [0x5f]:           movn #1   
97 [0x61]:           pushobj   
98 [0x62]:           ipushl #3   
99 [0x63]:           movi #1, ebx   
101 [0x65]:           loadval ecx   
102 [0x66]:           sub ecx, ebx -> ebx   
103 [0x67]:           popobj2    
104 [0x68]:           movr adx, ebx   
105 [0x69]:           chklen adx   
106 [0x6a]:           movnd adx   
107 [0x6b]:           pushobj   
108 [0x6c]:           movl 0   
109 [0x6d]:           movn #1   
111 [0x6f]:           pushobj   
112 [0x70]:           loadl ebx, fp+3   
113 [0x71]:           popobj2    
114 [0x72]:           movr adx, ebx   
115 [0x73]:           chklen adx   
116 [0x74]:           movnd adx   
117 [0x75]:           popobj   
118 [0x76]:           loadl ebx, fp+3   
119 [0x77]:           movr egx, ebx   
120 [0x78]:           dec ebx   
121 [0x79]:           smovr_2 ebx, fp+3   
122 [0x7a]:           jmp @87   
123 [0x7b]: line: 137 pushl 2   
124 [0x7c]:           movl 0   
125 [0x7d]:           movn #1   
127 [0x7f]:           pushobj   
128 [0x80]:           loadl ebx, fp+1   
129 [0x81]:           popobj2    
130 [0x82]:           movr adx, ebx   
131 [0x83]:           chklen adx   
132 [0x84]:           movnd adx   
133 [0x85]:           popobj   
134 [0x86]:           nop   
135 [0x87]:           ret   


function: std#list<main.frontend#parse_error>.find[3723] params(2) in file: lib\support\/0.2.9//list.sharp:141:8: note:  
		    def find(comparer : t, find_func: (t, t)(var)) : t {
		       ^

0 [0x0]: line: 142 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 48   
14 [0xe]: line: 143 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 44   
33 [0x21]: line: 144 movl 0   
34 [0x22]:           movn #1   
36 [0x24]:           pushobj   
37 [0x25]:           loadl ebx, fp+3   
38 [0x26]:           popobj2    
39 [0x27]:           movr adx, ebx   
40 [0x28]:           chklen adx   
41 [0x29]:           movnd adx   
42 [0x2a]:           returnobj   
43 [0x2b]:           ret   
44 [0x2c]:           nop   
45 [0x2d]:           iaddl 1, fp@3   
47 [0x2f]:           jmp @2   
48 [0x30]: line: 148 movl 4   
49 [0x31]:           del   
50 [0x32]: line: 149 movl 4   
51 [0x33]:           returnobj   
52 [0x34]:           ret   


function: std#list<main.frontend#parse_error>.remove[3724] params(1) in file: lib\support\/0.2.9//list.sharp:152:8: note:  
		    def remove(val: t) {
		       ^

0 [0x0]: line: 153 istorel 0, fp+2   
2 [0x2]:           ipushl #2   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 36   
14 [0xe]: line: 154 pushl 1   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+2   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           itest ebx   
26 [0x1a]:           movr cmt, ebx   
27 [0x1b]:           jne 32   
28 [0x1c]: line: 155 pushl 0   
29 [0x1d]:           ipushl #2   
30 [0x1e]:           call @3728 // <std#list<main.frontend#parse_error>.remove_at>   
31 [0x1f]: line: 156 ret   
32 [0x20]:           nop   
33 [0x21]:           iaddl 1, fp@2   
35 [0x23]:           jmp @2   
36 [0x24]:           ret   


function: std#list<main.frontend#parse_error>.remove[3725] params(2) in file: lib\support\/0.2.9//list.sharp:161:8: note:  
		    def remove(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 162 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 41   
14 [0xe]: line: 163 ipushl #2   
15 [0xf]:           pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           movnd adx   
25 [0x19]:           pushobj   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 37   
33 [0x21]: line: 164 pushl 0   
34 [0x22]:           ipushl #3   
35 [0x23]:           call @3728 // <std#list<main.frontend#parse_error>.remove_at>   
36 [0x24]: line: 165 ret   
37 [0x25]:           nop   
38 [0x26]:           iaddl 1, fp@3   
40 [0x28]:           jmp @2   
41 [0x29]:           ret   


function: std#list<main.frontend#parse_error>.replace[3726] params(2) in file: lib\support\/0.2.9//list.sharp:170:8: note:  
		    def replace(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 171 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 49   
14 [0xe]: line: 172 ipushl #2   
15 [0xf]:           pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           movnd adx   
25 [0x19]:           pushobj   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 45   
33 [0x21]: line: 173 pushl 1   
34 [0x22]:           movl 0   
35 [0x23]:           movn #1   
37 [0x25]:           pushobj   
38 [0x26]:           loadl ebx, fp+3   
39 [0x27]:           popobj2    
40 [0x28]:           movr adx, ebx   
41 [0x29]:           chklen adx   
42 [0x2a]:           movnd adx   
43 [0x2b]:           popobj   
44 [0x2c]: line: 174 ret   
45 [0x2d]:           nop   
46 [0x2e]:           iaddl 1, fp@3   
48 [0x30]:           jmp @2   
49 [0x31]:           ret   


function: std#list<main.frontend#parse_error>.linear_sort[3727] params(1) in file: lib\support\/0.2.9//list.sharp:179:8: note:  
		    def linear_sort(swap: (t, t)(var)) {
		       ^

0 [0x0]: line: 180 istorel 0, fp+2   
2 [0x2]:           ipushl #2   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 134   
14 [0xe]: line: 182 istorel 0, fp+3   
16 [0x10]:           ipushl #3   
17 [0x11]:           movl 0   
18 [0x12]:           movn #0   
20 [0x14]:           movi #0, adx   
22 [0x16]:           iaload ebx, adx   
23 [0x17]:           loadval ecx   
24 [0x18]:           lt ecx, ebx   
25 [0x19]:           movr ebx, cmt   
26 [0x1a]:           movr cmt, ebx   
27 [0x1b]:           jne 131   
28 [0x1c]: line: 183 ipushl #3   
29 [0x1d]:           movi #1, ebx   
31 [0x1f]:           loadval ecx   
32 [0x20]:           add ecx, ebx -> ebx   
33 [0x21]:           rstore ebx   
34 [0x22]:           movl 0   
35 [0x23]:           movn #0   
37 [0x25]:           movi #0, adx   
39 [0x27]:           iaload ebx, adx   
40 [0x28]:           loadval ecx   
41 [0x29]:           lt ecx, ebx   
42 [0x2a]:           movr ebx, cmt   
43 [0x2b]:           movr cmt, ebx   
44 [0x2c]:           jne 127   
45 [0x2d]: line: 185 ipushl #1   
46 [0x2e]:           movl 0   
47 [0x2f]:           movn #1   
49 [0x31]:           pushobj   
50 [0x32]:           loadl ebx, fp+3   
51 [0x33]:           popobj2    
52 [0x34]:           movr adx, ebx   
53 [0x35]:           chklen adx   
54 [0x36]:           movnd adx   
55 [0x37]:           pushobj   
56 [0x38]:           movl 0   
57 [0x39]:           movn #1   
59 [0x3b]:           pushobj   
60 [0x3c]:           ipushl #3   
61 [0x3d]:           movi #1, ebx   
63 [0x3f]:           loadval ecx   
64 [0x40]:           add ecx, ebx -> ebx   
65 [0x41]:           popobj2    
66 [0x42]:           movr adx, ebx   
67 [0x43]:           chklen adx   
68 [0x44]:           movnd adx   
69 [0x45]:           pushobj   
70 [0x46]:           smov ebx, sp+[-2]   
71 [0x47]:           calld ebx   
72 [0x48]:           swap    
73 [0x49]:           pop   
74 [0x4a]:           loadval ebx   
75 [0x4b]:           movr cmt, ebx   
76 [0x4c]:           jne 126   
77 [0x4d]: line: 186 movl 0   
78 [0x4e]:           movn #1   
80 [0x50]:           pushobj   
81 [0x51]:           loadl ebx, fp+3   
82 [0x52]:           popobj2    
83 [0x53]:           movr adx, ebx   
84 [0x54]:           chklen adx   
85 [0x55]:           movnd adx   
86 [0x56]:           smovr_3 fp+4   
87 [0x57]: line: 187 movl 0   
88 [0x58]:           movn #1   
90 [0x5a]:           pushobj   
91 [0x5b]:           ipushl #3   
92 [0x5c]:           movi #1, ebx   
94 [0x5e]:           loadval ecx   
95 [0x5f]:           add ecx, ebx -> ebx   
96 [0x60]:           popobj2    
97 [0x61]:           movr adx, ebx   
98 [0x62]:           chklen adx   
99 [0x63]:           movnd adx   
100 [0x64]:           pushobj   
101 [0x65]:           movl 0   
102 [0x66]:           movn #1   
104 [0x68]:           pushobj   
105 [0x69]:           loadl ebx, fp+3   
106 [0x6a]:           popobj2    
107 [0x6b]:           movr adx, ebx   
108 [0x6c]:           chklen adx   
109 [0x6d]:           movnd adx   
110 [0x6e]:           popobj   
111 [0x6f]: line: 188 pushl 4   
112 [0x70]:           movl 0   
113 [0x71]:           movn #1   
115 [0x73]:           pushobj   
116 [0x74]:           ipushl #3   
117 [0x75]:           movi #1, ebx   
119 [0x77]:           loadval ecx   
120 [0x78]:           add ecx, ebx -> ebx   
121 [0x79]:           popobj2    
122 [0x7a]:           movr adx, ebx   
123 [0x7b]:           chklen adx   
124 [0x7c]:           movnd adx   
125 [0x7d]:           popobj   
126 [0x7e]:           nop   
127 [0x7f]:           nop   
128 [0x80]:           iaddl 1, fp@3   
130 [0x82]:           jmp @16   
131 [0x83]:           iaddl 1, fp@2   
133 [0x85]:           jmp @2   
134 [0x86]:           ret   


function: std#list<main.frontend#parse_error>.remove_at[3728] params(1) in file: lib\support\/0.2.9//list.sharp:195:8: note:  
		    def remove_at(index: var) {
		       ^

0 [0x0]: line: 196 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gte ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 26   
18 [0x12]: line: 197 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:           dup    
21 [0x15]:           pushl 0   
22 [0x16]:           ipushl #1   
23 [0x17]:           call @3731 // <std#list<main.frontend#parse_error>.out_of_bounds_msg>   
24 [0x18]:           call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:           throw    
26 [0x1a]:           nop   
27 [0x1b]: line: 199 movl 0   
28 [0x1c]:           movn #0   
30 [0x1e]:           movi #0, adx   
32 [0x20]:           iaload ebx, adx   
33 [0x21]:           rstore ebx   
34 [0x22]:           loadl ebx, fp+1   
35 [0x23]:           loadval ecx   
36 [0x24]:           sub ecx, ebx -> ebx   
37 [0x25]:           rstore ebx   
38 [0x26]:           movi #1, ebx   
40 [0x28]:           loadval ecx   
41 [0x29]:           sub ecx, ebx -> ebx   
42 [0x2a]:           smovr_2 ebx, fp+2   
43 [0x2b]: line: 200 ipushl #2   
44 [0x2c]:           movi #0, ebx   
46 [0x2e]:           loadval ecx   
47 [0x2f]:           gt ecx, ebx   
48 [0x30]:           movr ebx, cmt   
49 [0x31]:           movr cmt, ebx   
50 [0x32]:           jne 74   
51 [0x33]: line: 201 movl 0   
52 [0x34]:           movn #1   
54 [0x36]:           pushobj   
55 [0x37]:           movl 0   
56 [0x38]:           movn #1   
58 [0x3a]:           pushobj   
59 [0x3b]:           ipushl #1   
60 [0x3c]:           ipushl #1   
61 [0x3d]:           movi #1, ebx   
63 [0x3f]:           loadval ecx   
64 [0x40]:           add ecx, ebx -> ebx   
65 [0x41]:           rstore ebx   
66 [0x42]:           movl 0   
67 [0x43]:           movn #0   
69 [0x45]:           movi #0, adx   
71 [0x47]:           iaload ebx, adx   
72 [0x48]:           rstore ebx   
73 [0x49]:           call @2151 // <std.io#__srt_global.memcopy>   
74 [0x4a]:           nop   
75 [0x4b]: line: 203 pushl 0   
76 [0x4c]:           call @3718 // <std#list<main.frontend#parse_error>.pop_back>   
77 [0x4d]:           ret   


function: std#list<main.frontend#parse_error>.indexof[3729] params(2) in file: lib\support\/0.2.9//list.sharp:206:8: note:  
		    def indexof(comparer: t, find_func: (t, t)(var)) : var {
		       ^

0 [0x0]: line: 207 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 40   
14 [0xe]: line: 208 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 36   
33 [0x21]: line: 209 loadl ebx, fp+3   
34 [0x22]:           return_val ebx   
35 [0x23]:           ret   
36 [0x24]:           nop   
37 [0x25]:           iaddl 1, fp@3   
39 [0x27]:           jmp @2   
40 [0x28]: line: 213 istorel -1, fp+0   
42 [0x2a]:           ret   


function: std#list<main.frontend#parse_error>.to_string[3730] params(0) in file: lib\support\/0.2.9//list.sharp:216:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 217 new_class @76 // std#string_builder   
2 [0x2]:           dup    
3 [0x3]:           call @3649 // <std#string_builder.string_builder>   
4 [0x4]:           popobj2    
5 [0x5]:           smovr_3 fp+1   
6 [0x6]: line: 219 pushl 1   
7 [0x7]:           newstr @562 // [    
8 [0x8]:           call @3645 // <std#string_builder.operator+=>   
9 [0x9]:           pop   
10 [0xa]: line: 220 istorel 0, fp+2   
12 [0xc]:           ipushl #2   
13 [0xd]:           movl 0   
14 [0xe]:           movn #0   
16 [0x10]:           movi #0, adx   
18 [0x12]:           iaload ebx, adx   
19 [0x13]:           loadval ecx   
20 [0x14]:           lt ecx, ebx   
21 [0x15]:           movr ebx, cmt   
22 [0x16]:           movr cmt, ebx   
23 [0x17]:           jne 62   
24 [0x18]: line: 221 pushl 1   
25 [0x19]:           movl 0   
26 [0x1a]:           movn #1   
28 [0x1c]:           pushobj   
29 [0x1d]:           loadl ebx, fp+2   
30 [0x1e]:           popobj2    
31 [0x1f]:           movr adx, ebx   
32 [0x20]:           chklen adx   
33 [0x21]:           movnd adx   
34 [0x22]:           pushobj   
35 [0x23]:           call @3641 // <std#string_builder.operator+=>   
36 [0x24]:           pop   
37 [0x25]: line: 223 ipushl #2   
38 [0x26]:           movi #1, ebx   
40 [0x28]:           loadval ecx   
41 [0x29]:           add ecx, ebx -> ebx   
42 [0x2a]:           rstore ebx   
43 [0x2b]:           movl 0   
44 [0x2c]:           movn #0   
46 [0x2e]:           movi #0, adx   
48 [0x30]:           iaload ebx, adx   
49 [0x31]:           loadval ecx   
50 [0x32]:           lt ecx, ebx   
51 [0x33]:           movr ebx, cmt   
52 [0x34]:           movr cmt, ebx   
53 [0x35]:           jne 58   
54 [0x36]: line: 224 pushl 1   
55 [0x37]:           newstr @563 // ,    
56 [0x38]:           call @3645 // <std#string_builder.operator+=>   
57 [0x39]:           pop   
58 [0x3a]:           nop   
59 [0x3b]:           iaddl 1, fp@2   
61 [0x3d]:           jmp @12   
62 [0x3e]: line: 228 pushl 1   
63 [0x3f]:           newstr @564 //  ]   
64 [0x40]:           call @3645 // <std#string_builder.operator+=>   
65 [0x41]:           pop   
66 [0x42]: line: 229 pushl 1   
67 [0x43]:           call @3622 // <std#string_builder.to_string>   
68 [0x44]:           popobj2    
69 [0x45]:           returnobj   
70 [0x46]:           ret   


function: std#list<main.frontend#parse_error>.out_of_bounds_msg[3731] params(1) in file: lib\support\/0.2.9//list.sharp:232:16: note:  
		    private def out_of_bounds_msg(index: var) : string {
		               ^

0 [0x0]: line: 233 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           newstr @565 // Index:    
4 [0x4]:           call @3546 // <std#string.string>   
5 [0x5]:           ipushl #1   
6 [0x6]:           call @3578 // <std#string.operator+>   
7 [0x7]:           newstr @566 // , size:    
8 [0x8]:           call @3558 // <std#string.operator+>   
9 [0x9]:           movl 0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           iaload ebx, adx   
15 [0xf]:           rstore ebx   
16 [0x10]:           call @3578 // <std#string.operator+>   
17 [0x11]:           popobj2    
18 [0x12]:           returnobj   
19 [0x13]:           ret   


function: main.frontend#error_manager.get_errors[3732] params(1) in file: lib\support\/bootstrap//frontend//error_manager.sharp:67:8: note:  
		    def get_errors(errors: list<parse_error>) : string {
		       ^

0 [0x0]: line: 68 new_class @76 // std#string_builder   
2 [0x2]:          dup    
3 [0x3]:          call @3649 // <std#string_builder.string_builder>   
4 [0x4]:          popobj2    
5 [0x5]:          smovr_3 fp+2   
6 [0x6]: line: 70 istorel -1, fp+4   
8 [0x8]:          pushl 1   
9 [0x9]:          invoke_delegate 3700 { static=0, args=0 }   
11 [0xb]:          popl 5   
12 [0xc]:          iaddl 1, fp@4   
14 [0xe]:          movl 5   
15 [0xf]:          sizeof ecx   
16 [0x10]:          loadl ebx, fp+4   
17 [0x11]:          lt ebx, ecx   
18 [0x12]:          jne 179   
19 [0x13]:          movnd ebx   
20 [0x14]:          pushobj   
21 [0x15]:          popl 3   
22 [0x16]: line: 71 movl 3   
23 [0x17]:          movn #4   
25 [0x19]:          movi #0, adx   
27 [0x1b]:          iaload ebx, adx   
28 [0x1c]:          movr cmt, ebx   
29 [0x1d]:          jne 79   
30 [0x1e]: line: 72 pushl 2   
31 [0x1f]:          movl 0   
32 [0x20]:          movn #11   
34 [0x22]:          pushobj   
35 [0x23]:          newstr @102 // :   
36 [0x24]:          call @3558 // <std#string.operator+>   
37 [0x25]:          movl 3   
38 [0x26]:          movn #2   
40 [0x28]:          movi #0, adx   
42 [0x2a]:          iaload ebx, adx   
43 [0x2b]:          rstore ebx   
44 [0x2c]:          call @3578 // <std#string.operator+>   
45 [0x2d]:          newstr @102 // :   
46 [0x2e]:          call @3558 // <std#string.operator+>   
47 [0x2f]:          movl 3   
48 [0x30]:          movn #3   
50 [0x32]:          movi #0, adx   
52 [0x34]:          iaload ebx, adx   
53 [0x35]:          rstore ebx   
54 [0x36]:          call @3578 // <std#string.operator+>   
55 [0x37]:          newstr @103 // : warning S60   
56 [0x38]:          call @3558 // <std#string.operator+>   
57 [0x39]:          movl 3   
58 [0x3a]:          movn #0   
60 [0x3c]:          movn #1   
62 [0x3e]:          movi #0, adx   
64 [0x40]:          iaload ebx, adx   
65 [0x41]:          rstore ebx   
66 [0x42]:          call @3578 // <std#string.operator+>   
67 [0x43]:          newstr @104 // :     
68 [0x44]:          call @3558 // <std#string.operator+>   
69 [0x45]:          movl 3   
70 [0x46]:          movn #1   
72 [0x48]:          pushobj   
73 [0x49]:          call @3561 // <std#string.operator+>   
74 [0x4a]:          newstr @105 // 
   
75 [0x4b]:          call @3558 // <std#string.operator+>   
76 [0x4c]:          call @3642 // <std#string_builder.operator+=>   
77 [0x4d]:          pop   
78 [0x4e]:          jmp @127   
79 [0x4f]: line: 75 pushl 2   
80 [0x50]:          movl 0   
81 [0x51]:          movn #11   
83 [0x53]:          pushobj   
84 [0x54]:          newstr @102 // :   
85 [0x55]:          call @3558 // <std#string.operator+>   
86 [0x56]:          movl 3   
87 [0x57]:          movn #2   
89 [0x59]:          movi #0, adx   
91 [0x5b]:          iaload ebx, adx   
92 [0x5c]:          rstore ebx   
93 [0x5d]:          call @3578 // <std#string.operator+>   
94 [0x5e]:          newstr @102 // :   
95 [0x5f]:          call @3558 // <std#string.operator+>   
96 [0x60]:          movl 3   
97 [0x61]:          movn #3   
99 [0x63]:          movi #0, adx   
101 [0x65]:          iaload ebx, adx   
102 [0x66]:          rstore ebx   
103 [0x67]:          call @3578 // <std#string.operator+>   
104 [0x68]:          newstr @106 // : error S60   
105 [0x69]:          call @3558 // <std#string.operator+>   
106 [0x6a]:          movl 3   
107 [0x6b]:          movn #0   
109 [0x6d]:          movn #1   
111 [0x6f]:          movi #0, adx   
113 [0x71]:          iaload ebx, adx   
114 [0x72]:          rstore ebx   
115 [0x73]:          call @3578 // <std#string.operator+>   
116 [0x74]:          newstr @104 // :     
117 [0x75]:          call @3558 // <std#string.operator+>   
118 [0x76]:          movl 3   
119 [0x77]:          movn #1   
121 [0x79]:          pushobj   
122 [0x7a]:          call @3561 // <std#string.operator+>   
123 [0x7b]:          newstr @105 // 
   
124 [0x7c]:          call @3558 // <std#string.operator+>   
125 [0x7d]:          call @3642 // <std#string_builder.operator+=>   
126 [0x7e]:          pop   
127 [0x7f]:          nop   
128 [0x80]: line: 79 pushl 2   
129 [0x81]:          new_class @75 // std#string   
131 [0x83]:          dup    
132 [0x84]:          newstr @107 // 	   
133 [0x85]:          call @3546 // <std#string.string>   
134 [0x86]:          pushl 0   
135 [0x87]:          movl 3   
136 [0x88]:          movn #2   
138 [0x8a]:          movi #0, adx   
140 [0x8c]:          iaload ebx, adx   
141 [0x8d]:          rstore ebx   
142 [0x8e]:          call @3734 // <main.frontend#error_manager.get_line>   
143 [0x8f]:          call @3561 // <std#string.operator+>   
144 [0x90]:          newstr @108 // 
	   
145 [0x91]:          call @3558 // <std#string.operator+>   
146 [0x92]:          call @3642 // <std#string_builder.operator+=>   
147 [0x93]:          pop   
148 [0x94]: line: 81 istorel 0, fp+6   
150 [0x96]:          ipushl #6   
151 [0x97]:          movl 3   
152 [0x98]:          movn #3   
154 [0x9a]:          movi #0, adx   
156 [0x9c]:          iaload ebx, adx   
157 [0x9d]:          rstore ebx   
158 [0x9e]:          movi #1, ebx   
160 [0xa0]:          loadval ecx   
161 [0xa1]:          sub ecx, ebx -> ebx   
162 [0xa2]:          loadval ecx   
163 [0xa3]:          lt ecx, ebx   
164 [0xa4]:          movr ebx, cmt   
165 [0xa5]:          movr cmt, ebx   
166 [0xa6]:          jne 174   
167 [0xa7]: line: 82 pushl 2   
168 [0xa8]:          newstr @109 //     
169 [0xa9]:          call @3645 // <std#string_builder.operator+=>   
170 [0xaa]:          pop   
171 [0xab]:          iaddl 1, fp@6   
173 [0xad]:          jmp @150   
174 [0xae]: line: 83 pushl 2   
175 [0xaf]:          newstr @110 // ^
   
176 [0xb0]:          call @3645 // <std#string_builder.operator+=>   
177 [0xb1]:          pop   
178 [0xb2]:          jmp @12   
179 [0xb3]: line: 86 pushl 2   
180 [0xb4]:          call @3622 // <std#string_builder.to_string>   
181 [0xb5]:          popobj2    
182 [0xb6]:          returnobj   
183 [0xb7]:          ret   


function: main.frontend#error_manager.print_error[3733] params(1) in file: lib\support\/bootstrap//frontend//error_manager.sharp:89:8: note:  
		    def print_error(error: parse_error) {
		       ^

0 [0x0]: line: 90 call @2063 // <std.io.fiber#fiber._lock>   
1 [0x1]: line: 91 movl 1   
2 [0x2]:          movn #4   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          movr cmt, ebx   
8 [0x8]:          jne 56   
9 [0x9]: line: 92 movl 0   
10 [0xa]:          movn #11   
12 [0xc]:          pushobj   
13 [0xd]:          newstr @102 // :   
14 [0xe]:          call @3558 // <std#string.operator+>   
15 [0xf]:          movl 1   
16 [0x10]:          movn #2   
18 [0x12]:          movi #0, adx   
20 [0x14]:          iaload ebx, adx   
21 [0x15]:          rstore ebx   
22 [0x16]:          call @3578 // <std#string.operator+>   
23 [0x17]:          newstr @102 // :   
24 [0x18]:          call @3558 // <std#string.operator+>   
25 [0x19]:          movl 1   
26 [0x1a]:          movn #3   
28 [0x1c]:          movi #0, adx   
30 [0x1e]:          iaload ebx, adx   
31 [0x1f]:          rstore ebx   
32 [0x20]:          call @3578 // <std#string.operator+>   
33 [0x21]:          newstr @103 // : warning S60   
34 [0x22]:          call @3558 // <std#string.operator+>   
35 [0x23]:          movl 1   
36 [0x24]:          movn #0   
38 [0x26]:          movn #1   
40 [0x28]:          movi #0, adx   
42 [0x2a]:          iaload ebx, adx   
43 [0x2b]:          rstore ebx   
44 [0x2c]:          call @3578 // <std#string.operator+>   
45 [0x2d]:          newstr @104 // :     
46 [0x2e]:          call @3558 // <std#string.operator+>   
47 [0x2f]:          movl 1   
48 [0x30]:          movn #1   
50 [0x32]:          pushobj   
51 [0x33]:          call @3561 // <std#string.operator+>   
52 [0x34]:          newstr @105 // 
   
53 [0x35]:          call @3558 // <std#string.operator+>   
54 [0x36]:          call @1902 // <std#__srt_global.print>   
55 [0x37]:          jmp @102   
56 [0x38]: line: 95 movl 0   
57 [0x39]:          movn #11   
59 [0x3b]:          pushobj   
60 [0x3c]:          newstr @102 // :   
61 [0x3d]:          call @3558 // <std#string.operator+>   
62 [0x3e]:          movl 1   
63 [0x3f]:          movn #2   
65 [0x41]:          movi #0, adx   
67 [0x43]:          iaload ebx, adx   
68 [0x44]:          rstore ebx   
69 [0x45]:          call @3578 // <std#string.operator+>   
70 [0x46]:          newstr @102 // :   
71 [0x47]:          call @3558 // <std#string.operator+>   
72 [0x48]:          movl 1   
73 [0x49]:          movn #3   
75 [0x4b]:          movi #0, adx   
77 [0x4d]:          iaload ebx, adx   
78 [0x4e]:          rstore ebx   
79 [0x4f]:          call @3578 // <std#string.operator+>   
80 [0x50]:          newstr @106 // : error S60   
81 [0x51]:          call @3558 // <std#string.operator+>   
82 [0x52]:          movl 1   
83 [0x53]:          movn #0   
85 [0x55]:          movn #1   
87 [0x57]:          movi #0, adx   
89 [0x59]:          iaload ebx, adx   
90 [0x5a]:          rstore ebx   
91 [0x5b]:          call @3578 // <std#string.operator+>   
92 [0x5c]:          newstr @104 // :     
93 [0x5d]:          call @3558 // <std#string.operator+>   
94 [0x5e]:          movl 1   
95 [0x5f]:          movn #1   
97 [0x61]:          pushobj   
98 [0x62]:          call @3561 // <std#string.operator+>   
99 [0x63]:          newstr @105 // 
   
100 [0x64]:          call @3558 // <std#string.operator+>   
101 [0x65]:          call @1902 // <std#__srt_global.print>   
102 [0x66]:          nop   
103 [0x67]: line: 99 new_class @75 // std#string   
105 [0x69]:          dup    
106 [0x6a]:          newstr @107 // 	   
107 [0x6b]:          call @3546 // <std#string.string>   
108 [0x6c]:          pushl 0   
109 [0x6d]:          movl 1   
110 [0x6e]:          movn #2   
112 [0x70]:          movi #0, adx   
114 [0x72]:          iaload ebx, adx   
115 [0x73]:          rstore ebx   
116 [0x74]:          call @3734 // <main.frontend#error_manager.get_line>   
117 [0x75]:          call @3561 // <std#string.operator+>   
118 [0x76]:          newstr @108 // 
	   
119 [0x77]:          call @3558 // <std#string.operator+>   
120 [0x78]:          call @1902 // <std#__srt_global.print>   
121 [0x79]: line: 101 istorel 0, fp+2   
123 [0x7b]:           ipushl #2   
124 [0x7c]:           movl 1   
125 [0x7d]:           movn #3   
127 [0x7f]:           movi #0, adx   
129 [0x81]:           iaload ebx, adx   
130 [0x82]:           rstore ebx   
131 [0x83]:           movi #1, ebx   
133 [0x85]:           loadval ecx   
134 [0x86]:           sub ecx, ebx -> ebx   
135 [0x87]:           loadval ecx   
136 [0x88]:           lt ecx, ebx   
137 [0x89]:           movr ebx, cmt   
138 [0x8a]:           movr cmt, ebx   
139 [0x8b]:           jne 145   
140 [0x8c]: line: 102 newstr @109 //     
141 [0x8d]:           call @1901 // <std#__srt_global.print>   
142 [0x8e]:           iaddl 1, fp@2   
144 [0x90]:           jmp @123   
145 [0x91]: line: 103 newstr @110 // ^
   
146 [0x92]:           call @1901 // <std#__srt_global.print>   
147 [0x93]: line: 104 call @2064 // <std.io.fiber#fiber.unlock>   
148 [0x94]:           ret   


function: main.frontend#error_manager.get_line[3734] params(1) in file: lib\support\/bootstrap//frontend//error_manager.sharp:107:8: note:  
		    def get_line(line: var) : string {
		       ^

0 [0x0]: line: 108 ipushl #1   
1 [0x1]:           movi #1, ebx   
3 [0x3]:           loadval ecx   
4 [0x4]:           sub ecx, ebx -> ebx   
5 [0x5]:           rstore ebx   
6 [0x6]:           movl 0   
7 [0x7]:           movn #10   
9 [0x9]:           pushobj   
10 [0xa]:           call @3687 // <std#list<std#string>.size>   
11 [0xb]:           loadval ebx   
12 [0xc]:           loadval ecx   
13 [0xd]:           gte ecx, ebx   
14 [0xe]:           movr ebx, cmt   
15 [0xf]:           movr cmt, ebx   
16 [0x10]:           jne 26   
17 [0x11]: line: 109 new_class @75 // std#string   
19 [0x13]:           dup    
20 [0x14]:           newstr @111 // End of File   
21 [0x15]:           call @3546 // <std#string.string>   
22 [0x16]:           popobj2    
23 [0x17]:           returnobj   
24 [0x18]:           ret   
25 [0x19]:           jmp @40   
26 [0x1a]: line: 111 movl 0   
27 [0x1b]:           movn #10   
29 [0x1d]:           pushobj   
30 [0x1e]:           ipushl #1   
31 [0x1f]:           movi #1, ebx   
33 [0x21]:           loadval ecx   
34 [0x22]:           sub ecx, ebx -> ebx   
35 [0x23]:           rstore ebx   
36 [0x24]:           call @3675 // <std#list<std#string>.at>   
37 [0x25]:           popobj2    
38 [0x26]:           returnobj   
39 [0x27]:           ret   
40 [0x28]:           nop   


function: main.frontend#error_manager.get_error_count[3735] params(0) in file: lib\support\/bootstrap//frontend//error_manager.sharp:114:15: note:  
		    public def get_error_count() : var {
		              ^

0 [0x0]: line: 115 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           call @3721 // <std#list<main.frontend#parse_error>.size>   
5 [0x5]:           loadval ebx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: main.frontend#error_manager.get_warning_count[3736] params(0) in file: lib\support\/bootstrap//frontend//error_manager.sharp:118:15: note:  
		    public def get_warning_count() : var {
		              ^

0 [0x0]: line: 119 movl 0   
1 [0x1]:           movn #2   
3 [0x3]:           pushobj   
4 [0x4]:           call @3721 // <std#list<main.frontend#parse_error>.size>   
5 [0x5]:           loadval ebx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: main.frontend#error_manager.get_raw_error_count[3737] params(0) in file: lib\support\/bootstrap//frontend//error_manager.sharp:122:15: note:  
		    public def get_raw_error_count() : var {
		              ^

0 [0x0]: line: 123 movl 0   
1 [0x1]:           movn #1   
3 [0x3]:           pushobj   
4 [0x4]:           call @3721 // <std#list<main.frontend#parse_error>.size>   
5 [0x5]:           loadval ebx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: main.frontend#error_manager.has_errors[3738] params(0) in file: lib\support\/bootstrap//frontend//error_manager.sharp:126:15: note:  
		    public def has_errors() : var {
		              ^

0 [0x0]: line: 127 movl 0   
1 [0x1]:           movn #6   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           skne ebx // pc = 18   
7 [0x7]:           movl 0   
8 [0x8]:           movn #1   
10 [0xa]:           pushobj   
11 [0xb]:           call @3721 // <std#list<main.frontend#parse_error>.size>   
12 [0xc]:           loadval ebx   
13 [0xd]:           rstore ebx   
14 [0xe]:           movi #0, ebx   
16 [0x10]:           loadval ecx   
17 [0x11]:           tne ecx, ebx   
18 [0x12]:           return_val cmt   
19 [0x13]:           ret   


function: main.frontend#error_manager.enable_protected_mode[3739] params(0) in file: lib\support\/bootstrap//frontend//error_manager.sharp:130:15: note:  
		    public def enable_protected_mode() {
		              ^

0 [0x0]: line: 131 movi #1, ebx   
2 [0x2]:           movl 0   
3 [0x3]:           movn #7   
5 [0x5]:           movi #0, adx   
7 [0x7]:           rmov adx, ebx   
8 [0x8]: line: 132 movl 0   
9 [0x9]:           movn #3   
11 [0xb]:           pushobj   
12 [0xc]:           new_class @112 // std#list<main.frontend#parse_error>   
14 [0xe]:           dup    
15 [0xf]:           call @3702 // <std#list<main.frontend#parse_error>.list>   
16 [0x10]:           call @4023 // <std#list<std#list<main.frontend#parse_error>>.add>   
17 [0x11]:           ret   


function: main.frontend#error_manager.pop_error_stack[3740] params(0) in file: lib\support\/bootstrap//frontend//error_manager.sharp:135:15: note:  
		    public def pop_error_stack() {
		              ^

0 [0x0]: line: 136 movl 0   
1 [0x1]:           movn #3   
3 [0x3]:           pushobj   
4 [0x4]:           call @4028 // <std#list<std#list<main.frontend#parse_error>>.size>   
5 [0x5]:           loadval ebx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #0, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 42   
14 [0xe]: line: 138 movl 0   
15 [0xf]:           movn #3   
17 [0x11]:           pushobj   
18 [0x12]:           call @4028 // <std#list<std#list<main.frontend#parse_error>>.size>   
19 [0x13]:           loadval ebx   
20 [0x14]:           rstore ebx   
21 [0x15]:           movi #1, ebx   
23 [0x17]:           loadval ecx   
24 [0x18]:           test ecx, ebx   
25 [0x19]:           movr ebx, cmt   
26 [0x1a]:           movr cmt, ebx   
27 [0x1b]:           jne 36   
28 [0x1c]: line: 139 movi #0, ebx   
30 [0x1e]:           movl 0   
31 [0x1f]:           movn #7   
33 [0x21]:           movi #0, adx   
35 [0x23]:           rmov adx, ebx   
36 [0x24]:           nop   
37 [0x25]: line: 140 movl 0   
38 [0x26]:           movn #3   
40 [0x28]:           pushobj   
41 [0x29]:           call @4025 // <std#list<std#list<main.frontend#parse_error>>.pop_back>   
42 [0x2a]:           nop   
43 [0x2b]:           ret   


function: main.frontend#error_manager.report_stack[3741] params(0) in file: lib\support\/bootstrap//frontend//error_manager.sharp:144:15: note:  
		    public def report_stack() {
		              ^

0 [0x0]: line: 145 movl 0   
1 [0x1]:           movn #3   
3 [0x3]:           pushobj   
4 [0x4]:           call @4028 // <std#list<std#list<main.frontend#parse_error>>.size>   
5 [0x5]:           loadval ebx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #0, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 119   
14 [0xe]: line: 146 istorel -1, fp+2   
16 [0x10]:           movl 0   
17 [0x11]:           movn #3   
19 [0x13]:           pushobj   
20 [0x14]:           call @4017 // <std#list<std#list<main.frontend#parse_error>>.last>   
21 [0x15]:           invoke_delegate 3700 { static=0, args=0 }   
23 [0x17]:           popl 3   
24 [0x18]:           iaddl 1, fp@2   
26 [0x1a]:           movl 3   
27 [0x1b]:           sizeof ecx   
28 [0x1c]:           loadl ebx, fp+2   
29 [0x1d]:           lt ebx, ecx   
30 [0x1e]:           jne 117   
31 [0x1f]:           movnd ebx   
32 [0x20]:           pushobj   
33 [0x21]:           popl 1   
34 [0x22]: line: 147 movl 0   
35 [0x23]:           movn #8   
37 [0x25]:           movi #0, adx   
39 [0x27]:           iaload ebx, adx   
40 [0x28]:           movr cmt, ebx   
41 [0x29]:           jne 71   
42 [0x2a]: line: 148 movi #1, ebx   
44 [0x2c]:           movl 0   
45 [0x2d]:           movn #6   
47 [0x2f]:           movi #0, adx   
49 [0x31]:           rmov adx, ebx   
50 [0x32]: line: 149 pushl 0   
51 [0x33]:           pushl 1   
52 [0x34]:           call @3733 // <main.frontend#error_manager.print_error>   
53 [0x35]: line: 151 movl 0   
54 [0x36]:           movn #0   
56 [0x38]:           pushobj   
57 [0x39]:           pushl 1   
58 [0x3a]:           call @3716 // <std#list<main.frontend#parse_error>.add>   
59 [0x3b]: line: 152 movl 0   
60 [0x3c]:           movn #1   
62 [0x3e]:           pushobj   
63 [0x3f]:           pushl 1   
64 [0x40]:           call @3716 // <std#list<main.frontend#parse_error>.add>   
65 [0x41]: line: 153 pushl 1   
66 [0x42]:           movl 0   
67 [0x43]:           movn #4   
69 [0x45]:           popobj   
70 [0x46]:           jmp @115   
71 [0x47]:           movl 0   
72 [0x48]:           movn #9   
74 [0x4a]:           movi #0, adx   
76 [0x4c]:           iaload ebx, adx   
77 [0x4d]:           skpe ebx // pc = 88   
78 [0x4e]:           movl 0   
79 [0x4f]:           pushobj   
80 [0x50]:           pushnull    
81 [0x51]:           movl 0   
82 [0x52]:           movn #4   
84 [0x54]:           pushobj   
85 [0x55]:           pushl 1   
86 [0x56]:           call @3746 // <main.frontend#error_manager.should_report>   
87 [0x57]:           loadval ebx   
88 [0x58]:           movr cmt, ebx   
89 [0x59]:           jne 115   
90 [0x5a]: line: 155 movi #1, ebx   
92 [0x5c]:           movl 0   
93 [0x5d]:           movn #6   
95 [0x5f]:           movi #0, adx   
97 [0x61]:           rmov adx, ebx   
98 [0x62]: line: 156 movl 0   
99 [0x63]:           movn #0   
101 [0x65]:           pushobj   
102 [0x66]:           pushl 1   
103 [0x67]:           call @3716 // <std#list<main.frontend#parse_error>.add>   
104 [0x68]: line: 157 movl 0   
105 [0x69]:           movn #1   
107 [0x6b]:           pushobj   
108 [0x6c]:           pushl 1   
109 [0x6d]:           call @3716 // <std#list<main.frontend#parse_error>.add>   
110 [0x6e]: line: 158 pushl 1   
111 [0x6f]:           movl 0   
112 [0x70]:           movn #4   
114 [0x72]:           popobj   
115 [0x73]:           nop   
116 [0x74]:           jmp @24   
117 [0x75]: line: 162 pushl 0   
118 [0x76]:           call @3740 // <main.frontend#error_manager.pop_error_stack>   
119 [0x77]:           nop   
120 [0x78]:           ret   


function: main.frontend#error_manager.new_error[3742] params(3) in file: lib\support\/bootstrap//frontend//error_manager.sharp:166:15: note:  
		    public def new_error(err: compiler_error, tok: token, msg: string) {
		              ^

0 [0x0]: line: 167 movg @82 // @main.frontend#error_manager   
1 [0x1]:           movn #1   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 1   
5 [0x5]:           call @4004 // <std#hashmap<main.frontend#compiler_error,std#string>.at>   
6 [0x6]:           popobj2    
7 [0x7]:           smovr_3 fp+4   
8 [0x8]: line: 168 new_class @83 // main.frontend#parse_error   
10 [0xa]:           dup    
11 [0xb]:           istore 0   
13 [0xd]:           pushl 1   
14 [0xe]:           pushl 4   
15 [0xf]:           pushl 2   
16 [0x10]:           pushl 3   
17 [0x11]:           call @3756 // <main.frontend#parse_error.parse_error>   
18 [0x12]:           popobj2    
19 [0x13]:           smovr_3 fp+5   
20 [0x14]: line: 169 movl 0   
21 [0x15]:           movn #7   
23 [0x17]:           movi #0, adx   
25 [0x19]:           iaload ebx, adx   
26 [0x1a]:           skne ebx // pc = 31   
27 [0x1b]:           movl 0   
28 [0x1c]:           movn #5   
30 [0x1e]:           skip @3 // pc = 33   
31 [0x1f]:           movl 0   
32 [0x20]:           movn #4   
34 [0x22]:           smovr_3 fp+6   
35 [0x23]: line: 171 movl 0   
36 [0x24]:           movn #7   
38 [0x26]:           movi #0, adx   
40 [0x28]:           iaload ebx, adx   
41 [0x29]:           movr cmt, ebx   
42 [0x2a]:           jne 57   
43 [0x2b]: line: 172 pushl 5   
44 [0x2c]:           movl 0   
45 [0x2d]:           movn #5   
47 [0x2f]:           popobj   
48 [0x30]: line: 173 movl 0   
49 [0x31]:           movn #3   
51 [0x33]:           pushobj   
52 [0x34]:           call @4017 // <std#list<std#list<main.frontend#parse_error>>.last>   
53 [0x35]:           pushl 5   
54 [0x36]:           call @3716 // <std#list<main.frontend#parse_error>.add>   
55 [0x37]: line: 174 ret   
56 [0x38]:           jmp @117   
57 [0x39]:           movl 0   
58 [0x3a]:           movn #8   
60 [0x3c]:           movi #0, adx   
62 [0x3e]:           iaload ebx, adx   
63 [0x3f]:           movr cmt, ebx   
64 [0x40]:           jne 69   
65 [0x41]: line: 176 pushl 0   
66 [0x42]:           pushl 5   
67 [0x43]:           call @3733 // <main.frontend#error_manager.print_error>   
68 [0x44]:           jmp @117   
69 [0x45]:           movl 0   
70 [0x46]:           movn #9   
72 [0x48]:           movi #0, adx   
74 [0x4a]:           iaload ebx, adx   
75 [0x4b]:           skpe ebx // pc = 83   
76 [0x4c]:           movl 0   
77 [0x4d]:           pushobj   
78 [0x4e]:           pushl 2   
79 [0x4f]:           pushl 6   
80 [0x50]:           pushl 5   
81 [0x51]:           call @3746 // <main.frontend#error_manager.should_report>   
82 [0x52]:           loadval ebx   
83 [0x53]:           movr cmt, ebx   
84 [0x54]:           jne 111   
85 [0x55]: line: 178 movi #1, ebx   
87 [0x57]:           movl 0   
88 [0x58]:           movn #6   
90 [0x5a]:           movi #0, adx   
92 [0x5c]:           rmov adx, ebx   
93 [0x5d]: line: 179 movl 0   
94 [0x5e]:           movn #0   
96 [0x60]:           pushobj   
97 [0x61]:           pushl 5   
98 [0x62]:           call @3716 // <std#list<main.frontend#parse_error>.add>   
99 [0x63]: line: 180 movl 0   
100 [0x64]:           movn #1   
102 [0x66]:           pushobj   
103 [0x67]:           pushl 5   
104 [0x68]:           call @3716 // <std#list<main.frontend#parse_error>.add>   
105 [0x69]: line: 181 pushl 5   
106 [0x6a]:           movl 0   
107 [0x6b]:           movn #4   
109 [0x6d]:           popobj   
110 [0x6e]:           jmp @117   
111 [0x6f]: line: 183 movl 0   
112 [0x70]:           movn #1   
114 [0x72]:           pushobj   
115 [0x73]:           pushl 5   
116 [0x74]:           call @3716 // <std#list<main.frontend#parse_error>.add>   
117 [0x75]:           nop   
118 [0x76]:           ret   


function: main.frontend#error_manager.new_error[3743] params(4) in file: lib\support\/bootstrap//frontend//error_manager.sharp:187:15: note:  
		    public def new_error(err: compiler_error, line: var, col: var, msg: string) {
		              ^

0 [0x0]: line: 188 movg @82 // @main.frontend#error_manager   
1 [0x1]:           movn #1   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 1   
5 [0x5]:           call @4004 // <std#hashmap<main.frontend#compiler_error,std#string>.at>   
6 [0x6]:           popobj2    
7 [0x7]:           smovr_3 fp+5   
8 [0x8]: line: 189 new_class @83 // main.frontend#parse_error   
10 [0xa]:           dup    
11 [0xb]:           istore 0   
13 [0xd]:           pushl 1   
14 [0xe]:           pushl 5   
15 [0xf]:           ipushl #2   
16 [0x10]:           ipushl #3   
17 [0x11]:           pushl 4   
18 [0x12]:           call @3755 // <main.frontend#parse_error.parse_error>   
19 [0x13]:           popobj2    
20 [0x14]:           smovr_3 fp+6   
21 [0x15]: line: 190 movl 0   
22 [0x16]:           movn #7   
24 [0x18]:           movi #0, adx   
26 [0x1a]:           iaload ebx, adx   
27 [0x1b]:           skne ebx // pc = 32   
28 [0x1c]:           movl 0   
29 [0x1d]:           movn #5   
31 [0x1f]:           skip @3 // pc = 34   
32 [0x20]:           movl 0   
33 [0x21]:           movn #4   
35 [0x23]:           smovr_3 fp+7   
36 [0x24]: line: 192 movl 0   
37 [0x25]:           movn #7   
39 [0x27]:           movi #0, adx   
41 [0x29]:           iaload ebx, adx   
42 [0x2a]:           movr cmt, ebx   
43 [0x2b]:           jne 58   
44 [0x2c]: line: 193 pushl 6   
45 [0x2d]:           movl 0   
46 [0x2e]:           movn #5   
48 [0x30]:           popobj   
49 [0x31]: line: 194 movl 0   
50 [0x32]:           movn #3   
52 [0x34]:           pushobj   
53 [0x35]:           call @4017 // <std#list<std#list<main.frontend#parse_error>>.last>   
54 [0x36]:           pushl 6   
55 [0x37]:           call @3716 // <std#list<main.frontend#parse_error>.add>   
56 [0x38]: line: 195 ret   
57 [0x39]:           jmp @118   
58 [0x3a]:           movl 0   
59 [0x3b]:           movn #8   
61 [0x3d]:           movi #0, adx   
63 [0x3f]:           iaload ebx, adx   
64 [0x40]:           movr cmt, ebx   
65 [0x41]:           jne 70   
66 [0x42]: line: 197 pushl 0   
67 [0x43]:           pushl 6   
68 [0x44]:           call @3733 // <main.frontend#error_manager.print_error>   
69 [0x45]:           jmp @118   
70 [0x46]:           movl 0   
71 [0x47]:           movn #9   
73 [0x49]:           movi #0, adx   
75 [0x4b]:           iaload ebx, adx   
76 [0x4c]:           skpe ebx // pc = 84   
77 [0x4d]:           movl 0   
78 [0x4e]:           pushobj   
79 [0x4f]:           pushnull    
80 [0x50]:           pushl 7   
81 [0x51]:           pushl 6   
82 [0x52]:           call @3746 // <main.frontend#error_manager.should_report>   
83 [0x53]:           loadval ebx   
84 [0x54]:           movr cmt, ebx   
85 [0x55]:           jne 112   
86 [0x56]: line: 199 movi #1, ebx   
88 [0x58]:           movl 0   
89 [0x59]:           movn #6   
91 [0x5b]:           movi #0, adx   
93 [0x5d]:           rmov adx, ebx   
94 [0x5e]: line: 200 movl 0   
95 [0x5f]:           movn #0   
97 [0x61]:           pushobj   
98 [0x62]:           pushl 6   
99 [0x63]:           call @3716 // <std#list<main.frontend#parse_error>.add>   
100 [0x64]: line: 201 movl 0   
101 [0x65]:           movn #1   
103 [0x67]:           pushobj   
104 [0x68]:           pushl 6   
105 [0x69]:           call @3716 // <std#list<main.frontend#parse_error>.add>   
106 [0x6a]: line: 202 pushl 6   
107 [0x6b]:           movl 0   
108 [0x6c]:           movn #4   
110 [0x6e]:           popobj   
111 [0x6f]:           jmp @118   
112 [0x70]: line: 204 movl 0   
113 [0x71]:           movn #1   
115 [0x73]:           pushobj   
116 [0x74]:           pushl 6   
117 [0x75]:           call @3716 // <std#list<main.frontend#parse_error>.add>   
118 [0x76]:           nop   
119 [0x77]:           ret   


function: main.frontend#error_manager.new_error[3744] params(3) in file: lib\support\/bootstrap//frontend//error_manager.sharp:208:15: note:  
		    public def new_error(err: compiler_error, line: var, col: var) {
		              ^

0 [0x0]: line: 209 pushl 0   
1 [0x1]:           pushl 1   
2 [0x2]:           ipushl #2   
3 [0x3]:           ipushl #3   
4 [0x4]:           new_class @75 // std#string   
6 [0x6]:           dup    
7 [0x7]:           newstr @55 //    
8 [0x8]:           call @3546 // <std#string.string>   
9 [0x9]:           call @3743 // <main.frontend#error_manager.new_error>   
10 [0xa]:           ret   


function: main.frontend#error_manager.new_warning[3745] params(4) in file: lib\support\/bootstrap//frontend//error_manager.sharp:212:15: note:  
		    public def new_warning(err: compiler_error, line: var, col: var, msg: string) {
		              ^

0 [0x0]: line: 213 movg @82 // @main.frontend#error_manager   
1 [0x1]:           movn #1   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 1   
5 [0x5]:           call @4004 // <std#hashmap<main.frontend#compiler_error,std#string>.at>   
6 [0x6]:           popobj2    
7 [0x7]:           smovr_3 fp+5   
8 [0x8]: line: 214 new_class @83 // main.frontend#parse_error   
10 [0xa]:           dup    
11 [0xb]:           istore 0   
13 [0xd]:           pushl 1   
14 [0xe]:           pushl 5   
15 [0xf]:           ipushl #2   
16 [0x10]:           ipushl #3   
17 [0x11]:           pushl 4   
18 [0x12]:           call @3755 // <main.frontend#parse_error.parse_error>   
19 [0x13]:           popobj2    
20 [0x14]:           smovr_3 fp+6   
21 [0x15]: line: 215 movl 7   
22 [0x16]:           del   
23 [0x17]: line: 216 movl 0   
24 [0x18]:           movn #2   
26 [0x1a]:           pushobj   
27 [0x1b]:           call @3721 // <std#list<main.frontend#parse_error>.size>   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           rstore ebx   
30 [0x1e]:           movi #0, ebx   
32 [0x20]:           loadval ecx   
33 [0x21]:           gt ecx, ebx   
34 [0x22]:           movr ebx, cmt   
35 [0x23]:           movr cmt, ebx   
36 [0x24]:           jne 45   
37 [0x25]: line: 217 movl 0   
38 [0x26]:           movn #2   
40 [0x28]:           pushobj   
41 [0x29]:           call @3710 // <std#list<main.frontend#parse_error>.last>   
42 [0x2a]:           popobj2    
43 [0x2b]:           smovr_3 fp+7   
44 [0x2c]:           jmp @60   
45 [0x2d]: line: 219 movl 0   
46 [0x2e]:           movn #7   
48 [0x30]:           movi #0, adx   
50 [0x32]:           iaload ebx, adx   
51 [0x33]:           skne ebx // pc = 56   
52 [0x34]:           movl 0   
53 [0x35]:           movn #5   
55 [0x37]:           skip @3 // pc = 58   
56 [0x38]:           movl 0   
57 [0x39]:           movn #4   
59 [0x3b]:           smovr_3 fp+7   
60 [0x3c]:           nop   
61 [0x3d]: line: 221 movl 0   
62 [0x3e]:           movn #2   
64 [0x40]:           pushobj   
65 [0x41]:           call @3721 // <std#list<main.frontend#parse_error>.size>   
66 [0x42]:           loadval ebx   
67 [0x43]:           rstore ebx   
68 [0x44]:           movi #0, ebx   
70 [0x46]:           loadval ecx   
71 [0x47]:           test ecx, ebx   
72 [0x48]:           movr ebx, cmt   
73 [0x49]:           skpe ebx // pc = 81   
74 [0x4a]:           movl 0   
75 [0x4b]:           pushobj   
76 [0x4c]:           pushnull    
77 [0x4d]:           pushl 7   
78 [0x4e]:           pushl 6   
79 [0x4f]:           call @3747 // <main.frontend#error_manager.should_report_warning>   
80 [0x50]:           loadval ebx   
81 [0x51]:           movr cmt, ebx   
82 [0x52]:           jne 101   
83 [0x53]: line: 222 movl 0   
84 [0x54]:           movn #8   
86 [0x56]:           movi #0, adx   
88 [0x58]:           iaload ebx, adx   
89 [0x59]:           movr cmt, ebx   
90 [0x5a]:           jne 94   
91 [0x5b]: line: 223 pushl 0   
92 [0x5c]:           pushl 6   
93 [0x5d]:           call @3733 // <main.frontend#error_manager.print_error>   
94 [0x5e]:           nop   
95 [0x5f]: line: 225 movl 0   
96 [0x60]:           movn #2   
98 [0x62]:           pushobj   
99 [0x63]:           pushl 6   
100 [0x64]:           call @3716 // <std#list<main.frontend#parse_error>.add>   
101 [0x65]:           nop   
102 [0x66]:           ret   


function: main.frontend#error_manager.should_report[3746] params(3) in file: lib\support\/bootstrap//frontend//error_manager.sharp:229:8: note:  
		    def should_report(tok: token, last_err: parse_error, new_err: parse_error) : var
		       ^

0 [0x0]: line: 231 movl 2   
1 [0x1]:           movn #1   
3 [0x3]:           pushobj   
4 [0x4]:           movl 3   
5 [0x5]:           movn #1   
7 [0x7]:           pushobj   
8 [0x8]:           call @3566 // <std#string.operator!=>   
9 [0x9]:           loadval ebx   
10 [0xa]:           skne ebx // pc = 68   
11 [0xb]:           movl 2   
12 [0xc]:           movn #2   
14 [0xe]:           movi #0, adx   
16 [0x10]:           iaload ebx, adx   
17 [0x11]:           rstore ebx   
18 [0x12]:           movl 3   
19 [0x13]:           movn #2   
21 [0x15]:           movi #0, adx   
23 [0x17]:           iaload ebx, adx   
24 [0x18]:           loadval ecx   
25 [0x19]:           test ecx, ebx   
26 [0x1a]:           movr ebx, cmt   
27 [0x1b]:           skne ebx // pc = 44   
28 [0x1c]:           movl 2   
29 [0x1d]:           movn #3   
31 [0x1f]:           movi #0, adx   
33 [0x21]:           iaload ebx, adx   
34 [0x22]:           rstore ebx   
35 [0x23]:           movl 3   
36 [0x24]:           movn #3   
38 [0x26]:           movi #0, adx   
40 [0x28]:           iaload ebx, adx   
41 [0x29]:           loadval ecx   
42 [0x2a]:           test ecx, ebx   
43 [0x2b]:           movr ebx, cmt   
44 [0x2c]:           not ebx, ebx   
45 [0x2d]:           skne ebx // pc = 68   
46 [0x2e]:           movl 2   
47 [0x2f]:           movn #1   
49 [0x31]:           pushobj   
50 [0x32]:           movl 3   
51 [0x33]:           movn #1   
53 [0x35]:           pushobj   
54 [0x36]:           call @3576 // <std#string.find>   
55 [0x37]:           loadval ebx   
56 [0x38]:           not ebx, ebx   
57 [0x39]:           skne ebx // pc = 68   
58 [0x3a]:           movl 0   
59 [0x3b]:           pushobj   
60 [0x3c]:           movl 0   
61 [0x3d]:           movn #0   
63 [0x3f]:           pushobj   
64 [0x40]:           pushl 3   
65 [0x41]:           call @3748 // <main.frontend#error_manager.has_error>   
66 [0x42]:           loadval ebx   
67 [0x43]:           not ebx, ebx   
68 [0x44]:           movr cmt, ebx   
69 [0x45]:           jne 127   
70 [0x46]: line: 234 movl 1   
71 [0x47]:           checknull   
72 [0x48]:           not ebx, ebx   
73 [0x49]:           skne ebx // pc = 110   
74 [0x4a]:           movl 1   
75 [0x4b]:           pushobj   
76 [0x4c]:           movg @91 // @main.frontend.tokenizer#token_id   
77 [0x4d]:           movn #13   
79 [0x4f]:           pushobj   
80 [0x50]:           call @3792 // <main.frontend.tokenizer#token.operator==>   
81 [0x51]:           loadval ebx   
82 [0x52]:           skpe ebx // pc = 109   
83 [0x53]:           movl 1   
84 [0x54]:           pushobj   
85 [0x55]:           movg @91 // @main.frontend.tokenizer#token_id   
86 [0x56]:           movn #7   
88 [0x58]:           pushobj   
89 [0x59]:           call @3792 // <main.frontend.tokenizer#token.operator==>   
90 [0x5a]:           loadval ebx   
91 [0x5b]:           skpe ebx // pc = 109   
92 [0x5c]:           movl 1   
93 [0x5d]:           pushobj   
94 [0x5e]:           movg @91 // @main.frontend.tokenizer#token_id   
95 [0x5f]:           movn #6   
97 [0x61]:           pushobj   
98 [0x62]:           call @3792 // <main.frontend.tokenizer#token.operator==>   
99 [0x63]:           loadval ebx   
100 [0x64]:           skpe ebx // pc = 109   
101 [0x65]:           movl 1   
102 [0x66]:           pushobj   
103 [0x67]:           movg @91 // @main.frontend.tokenizer#token_id   
104 [0x68]:           movn #3   
106 [0x6a]:           pushobj   
107 [0x6b]:           call @3792 // <main.frontend.tokenizer#token.operator==>   
108 [0x6c]:           loadval ebx   
109 [0x6d]:           not ebx, ebx   
110 [0x6e]:           movr cmt, ebx   
111 [0x6f]:           jne 123   
112 [0x70]: line: 236 movl 2   
113 [0x71]:           movn #1   
115 [0x73]:           pushobj   
116 [0x74]:           pushl 1   
117 [0x75]:           call @3795 // <main.frontend.tokenizer#token.get_token>   
118 [0x76]:           call @3576 // <std#string.find>   
119 [0x77]:           loadval ebx   
120 [0x78]:           not ebx, ebx   
121 [0x79]:           return_val ebx   
122 [0x7a]:           ret   
123 [0x7b]:           nop   
124 [0x7c]: line: 239 istorel 1, fp+0   
126 [0x7e]:           ret   
127 [0x7f]:           nop   
128 [0x80]: line: 242 istorel 0, fp+0   
130 [0x82]:           ret   


function: main.frontend#error_manager.should_report_warning[3747] params(3) in file: lib\support\/bootstrap//frontend//error_manager.sharp:245:8: note:  
		    def should_report_warning(tok: token, last_err: parse_error, new_err: parse_error) : var
		       ^

0 [0x0]: line: 247 movl 2   
1 [0x1]:           movn #1   
3 [0x3]:           pushobj   
4 [0x4]:           movl 3   
5 [0x5]:           movn #1   
7 [0x7]:           pushobj   
8 [0x8]:           call @3566 // <std#string.operator!=>   
9 [0x9]:           loadval ebx   
10 [0xa]:           skne ebx // pc = 57   
11 [0xb]:           movl 2   
12 [0xc]:           movn #2   
14 [0xe]:           movi #0, adx   
16 [0x10]:           iaload ebx, adx   
17 [0x11]:           rstore ebx   
18 [0x12]:           movl 3   
19 [0x13]:           movn #2   
21 [0x15]:           movi #0, adx   
23 [0x17]:           iaload ebx, adx   
24 [0x18]:           loadval ecx   
25 [0x19]:           test ecx, ebx   
26 [0x1a]:           movr ebx, cmt   
27 [0x1b]:           skne ebx // pc = 44   
28 [0x1c]:           movl 2   
29 [0x1d]:           movn #3   
31 [0x1f]:           movi #0, adx   
33 [0x21]:           iaload ebx, adx   
34 [0x22]:           rstore ebx   
35 [0x23]:           movl 3   
36 [0x24]:           movn #3   
38 [0x26]:           movi #0, adx   
40 [0x28]:           iaload ebx, adx   
41 [0x29]:           loadval ecx   
42 [0x2a]:           test ecx, ebx   
43 [0x2b]:           movr ebx, cmt   
44 [0x2c]:           not ebx, ebx   
45 [0x2d]:           skne ebx // pc = 57   
46 [0x2e]:           movl 2   
47 [0x2f]:           movn #1   
49 [0x31]:           pushobj   
50 [0x32]:           movl 3   
51 [0x33]:           movn #1   
53 [0x35]:           pushobj   
54 [0x36]:           call @3576 // <std#string.find>   
55 [0x37]:           loadval ebx   
56 [0x38]:           not ebx, ebx   
57 [0x39]:           movr cmt, ebx   
58 [0x3a]:           jne 116   
59 [0x3b]: line: 250 movl 1   
60 [0x3c]:           checknull   
61 [0x3d]:           not ebx, ebx   
62 [0x3e]:           skne ebx // pc = 99   
63 [0x3f]:           movl 1   
64 [0x40]:           pushobj   
65 [0x41]:           movg @91 // @main.frontend.tokenizer#token_id   
66 [0x42]:           movn #13   
68 [0x44]:           pushobj   
69 [0x45]:           call @3792 // <main.frontend.tokenizer#token.operator==>   
70 [0x46]:           loadval ebx   
71 [0x47]:           skpe ebx // pc = 98   
72 [0x48]:           movl 1   
73 [0x49]:           pushobj   
74 [0x4a]:           movg @91 // @main.frontend.tokenizer#token_id   
75 [0x4b]:           movn #7   
77 [0x4d]:           pushobj   
78 [0x4e]:           call @3792 // <main.frontend.tokenizer#token.operator==>   
79 [0x4f]:           loadval ebx   
80 [0x50]:           skpe ebx // pc = 98   
81 [0x51]:           movl 1   
82 [0x52]:           pushobj   
83 [0x53]:           movg @91 // @main.frontend.tokenizer#token_id   
84 [0x54]:           movn #6   
86 [0x56]:           pushobj   
87 [0x57]:           call @3792 // <main.frontend.tokenizer#token.operator==>   
88 [0x58]:           loadval ebx   
89 [0x59]:           skpe ebx // pc = 98   
90 [0x5a]:           movl 1   
91 [0x5b]:           pushobj   
92 [0x5c]:           movg @91 // @main.frontend.tokenizer#token_id   
93 [0x5d]:           movn #3   
95 [0x5f]:           pushobj   
96 [0x60]:           call @3792 // <main.frontend.tokenizer#token.operator==>   
97 [0x61]:           loadval ebx   
98 [0x62]:           not ebx, ebx   
99 [0x63]:           movr cmt, ebx   
100 [0x64]:           jne 112   
101 [0x65]: line: 252 movl 2   
102 [0x66]:           movn #1   
104 [0x68]:           pushobj   
105 [0x69]:           pushl 1   
106 [0x6a]:           call @3795 // <main.frontend.tokenizer#token.get_token>   
107 [0x6b]:           call @3576 // <std#string.find>   
108 [0x6c]:           loadval ebx   
109 [0x6d]:           not ebx, ebx   
110 [0x6e]:           return_val ebx   
111 [0x6f]:           ret   
112 [0x70]:           nop   
113 [0x71]: line: 255 istorel 1, fp+0   
115 [0x73]:           ret   
116 [0x74]:           nop   
117 [0x75]: line: 258 istorel 0, fp+0   
119 [0x77]:           ret   


function: main.frontend#error_manager.has_error[3748] params(2) in file: lib\support\/bootstrap//frontend//error_manager.sharp:261:8: note:  
		    def has_error(errs: list<parse_error>, err: parse_error) : var {
		       ^

0 [0x0]: line: 262 istorel -1, fp+4   
2 [0x2]:           pushl 1   
3 [0x3]:           invoke_delegate 3700 { static=0, args=0 }   
5 [0x5]:           popl 5   
6 [0x6]:           iaddl 1, fp@4   
8 [0x8]:           movl 5   
9 [0x9]:           sizeof ecx   
10 [0xa]:           loadl ebx, fp+4   
11 [0xb]:           lt ebx, ecx   
12 [0xc]:           jne 33   
13 [0xd]:           movnd ebx   
14 [0xe]:           pushobj   
15 [0xf]:           popl 3   
16 [0x10]: line: 263 movl 3   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           movl 2   
21 [0x15]:           movn #1   
23 [0x17]:           pushobj   
24 [0x18]:           call @3564 // <std#string.operator==>   
25 [0x19]:           loadval ebx   
26 [0x1a]:           movr cmt, ebx   
27 [0x1b]:           jne 31   
28 [0x1c]: line: 264 istorel 1, fp+0   
30 [0x1e]:           ret   
31 [0x1f]:           nop   
32 [0x20]:           jmp @6   
33 [0x21]: line: 267 istorel 0, fp+0   
35 [0x23]:           ret   


function: main.frontend#error_manager.new_error[3749] params(3) in file: lib\support\/bootstrap//frontend//error_manager.sharp:271:15: note:  
		    public def new_error(err: compiler_error, ast: ast, msg: string) {
		              ^

0 [0x0]: line: 272 movg @82 // @main.frontend#error_manager   
1 [0x1]:           movn #1   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 1   
5 [0x5]:           call @4004 // <std#hashmap<main.frontend#compiler_error,std#string>.at>   
6 [0x6]:           popobj2    
7 [0x7]:           smovr_3 fp+4   
8 [0x8]: line: 273 new_class @83 // main.frontend#parse_error   
10 [0xa]:           dup    
11 [0xb]:           istore 0   
13 [0xd]:           pushl 1   
14 [0xe]:           pushl 4   
15 [0xf]:           movl 2   
16 [0x10]:           movn #0   
18 [0x12]:           movi #0, adx   
20 [0x14]:           iaload ebx, adx   
21 [0x15]:           rstore ebx   
22 [0x16]:           movl 2   
23 [0x17]:           movn #1   
25 [0x19]:           movi #0, adx   
27 [0x1b]:           iaload ebx, adx   
28 [0x1c]:           rstore ebx   
29 [0x1d]:           pushl 3   
30 [0x1e]:           call @3755 // <main.frontend#parse_error.parse_error>   
31 [0x1f]:           popobj2    
32 [0x20]:           smovr_3 fp+5   
33 [0x21]: line: 274 movl 0   
34 [0x22]:           movn #7   
36 [0x24]:           movi #0, adx   
38 [0x26]:           iaload ebx, adx   
39 [0x27]:           skne ebx // pc = 44   
40 [0x28]:           movl 0   
41 [0x29]:           movn #5   
43 [0x2b]:           skip @3 // pc = 46   
44 [0x2c]:           movl 0   
45 [0x2d]:           movn #4   
47 [0x2f]:           smovr_3 fp+6   
48 [0x30]: line: 276 movl 0   
49 [0x31]:           movn #7   
51 [0x33]:           movi #0, adx   
53 [0x35]:           iaload ebx, adx   
54 [0x36]:           movr cmt, ebx   
55 [0x37]:           jne 70   
56 [0x38]: line: 277 pushl 5   
57 [0x39]:           movl 0   
58 [0x3a]:           movn #5   
60 [0x3c]:           popobj   
61 [0x3d]: line: 278 movl 0   
62 [0x3e]:           movn #3   
64 [0x40]:           pushobj   
65 [0x41]:           call @4017 // <std#list<std#list<main.frontend#parse_error>>.last>   
66 [0x42]:           pushl 5   
67 [0x43]:           call @3716 // <std#list<main.frontend#parse_error>.add>   
68 [0x44]: line: 279 ret   
69 [0x45]:           jmp @130   
70 [0x46]:           movl 0   
71 [0x47]:           movn #8   
73 [0x49]:           movi #0, adx   
75 [0x4b]:           iaload ebx, adx   
76 [0x4c]:           movr cmt, ebx   
77 [0x4d]:           jne 82   
78 [0x4e]: line: 281 pushl 0   
79 [0x4f]:           pushl 5   
80 [0x50]:           call @3733 // <main.frontend#error_manager.print_error>   
81 [0x51]:           jmp @130   
82 [0x52]:           movl 0   
83 [0x53]:           movn #9   
85 [0x55]:           movi #0, adx   
87 [0x57]:           iaload ebx, adx   
88 [0x58]:           skpe ebx // pc = 96   
89 [0x59]:           movl 0   
90 [0x5a]:           pushobj   
91 [0x5b]:           pushnull    
92 [0x5c]:           pushl 6   
93 [0x5d]:           pushl 5   
94 [0x5e]:           call @3746 // <main.frontend#error_manager.should_report>   
95 [0x5f]:           loadval ebx   
96 [0x60]:           movr cmt, ebx   
97 [0x61]:           jne 124   
98 [0x62]: line: 283 movi #1, ebx   
100 [0x64]:           movl 0   
101 [0x65]:           movn #6   
103 [0x67]:           movi #0, adx   
105 [0x69]:           rmov adx, ebx   
106 [0x6a]: line: 284 movl 0   
107 [0x6b]:           movn #0   
109 [0x6d]:           pushobj   
110 [0x6e]:           pushl 5   
111 [0x6f]:           call @3716 // <std#list<main.frontend#parse_error>.add>   
112 [0x70]: line: 285 movl 0   
113 [0x71]:           movn #1   
115 [0x73]:           pushobj   
116 [0x74]:           pushl 5   
117 [0x75]:           call @3716 // <std#list<main.frontend#parse_error>.add>   
118 [0x76]: line: 286 pushl 5   
119 [0x77]:           movl 0   
120 [0x78]:           movn #4   
122 [0x7a]:           popobj   
123 [0x7b]:           jmp @130   
124 [0x7c]: line: 288 movl 0   
125 [0x7d]:           movn #1   
127 [0x7f]:           pushobj   
128 [0x80]:           pushl 5   
129 [0x81]:           call @3716 // <std#list<main.frontend#parse_error>.add>   
130 [0x82]:           nop   
131 [0x83]:           ret   


function: main.frontend#error_manager.new_warning[3750] params(3) in file: lib\support\/bootstrap//frontend//error_manager.sharp:292:15: note:  
		    public def new_warning(err: compiler_error, ast: ast, msg: string) {
		              ^

0 [0x0]: line: 293 movg @82 // @main.frontend#error_manager   
1 [0x1]:           movn #1   
3 [0x3]:           pushobj   
4 [0x4]:           pushl 1   
5 [0x5]:           call @4004 // <std#hashmap<main.frontend#compiler_error,std#string>.at>   
6 [0x6]:           popobj2    
7 [0x7]:           smovr_3 fp+4   
8 [0x8]: line: 294 new_class @83 // main.frontend#parse_error   
10 [0xa]:           dup    
11 [0xb]:           istore 0   
13 [0xd]:           pushl 1   
14 [0xe]:           pushl 4   
15 [0xf]:           movl 2   
16 [0x10]:           movn #0   
18 [0x12]:           movi #0, adx   
20 [0x14]:           iaload ebx, adx   
21 [0x15]:           rstore ebx   
22 [0x16]:           movl 2   
23 [0x17]:           movn #1   
25 [0x19]:           movi #0, adx   
27 [0x1b]:           iaload ebx, adx   
28 [0x1c]:           rstore ebx   
29 [0x1d]:           pushl 3   
30 [0x1e]:           call @3755 // <main.frontend#parse_error.parse_error>   
31 [0x1f]:           popobj2    
32 [0x20]:           smovr_3 fp+5   
33 [0x21]: line: 295 movl 6   
34 [0x22]:           del   
35 [0x23]: line: 296 movl 0   
36 [0x24]:           movn #2   
38 [0x26]:           pushobj   
39 [0x27]:           call @3721 // <std#list<main.frontend#parse_error>.size>   
40 [0x28]:           loadval ebx   
41 [0x29]:           rstore ebx   
42 [0x2a]:           movi #0, ebx   
44 [0x2c]:           loadval ecx   
45 [0x2d]:           gt ecx, ebx   
46 [0x2e]:           movr ebx, cmt   
47 [0x2f]:           movr cmt, ebx   
48 [0x30]:           jne 57   
49 [0x31]: line: 297 movl 0   
50 [0x32]:           movn #2   
52 [0x34]:           pushobj   
53 [0x35]:           call @3710 // <std#list<main.frontend#parse_error>.last>   
54 [0x36]:           popobj2    
55 [0x37]:           smovr_3 fp+6   
56 [0x38]:           jmp @72   
57 [0x39]: line: 299 movl 0   
58 [0x3a]:           movn #7   
60 [0x3c]:           movi #0, adx   
62 [0x3e]:           iaload ebx, adx   
63 [0x3f]:           skne ebx // pc = 68   
64 [0x40]:           movl 0   
65 [0x41]:           movn #5   
67 [0x43]:           skip @3 // pc = 70   
68 [0x44]:           movl 0   
69 [0x45]:           movn #4   
71 [0x47]:           smovr_3 fp+6   
72 [0x48]:           nop   
73 [0x49]: line: 301 movl 0   
74 [0x4a]:           movn #2   
76 [0x4c]:           pushobj   
77 [0x4d]:           call @3721 // <std#list<main.frontend#parse_error>.size>   
78 [0x4e]:           loadval ebx   
79 [0x4f]:           rstore ebx   
80 [0x50]:           movi #0, ebx   
82 [0x52]:           loadval ecx   
83 [0x53]:           test ecx, ebx   
84 [0x54]:           movr ebx, cmt   
85 [0x55]:           skpe ebx // pc = 93   
86 [0x56]:           movl 0   
87 [0x57]:           pushobj   
88 [0x58]:           pushnull    
89 [0x59]:           pushl 6   
90 [0x5a]:           pushl 5   
91 [0x5b]:           call @3747 // <main.frontend#error_manager.should_report_warning>   
92 [0x5c]:           loadval ebx   
93 [0x5d]:           movr cmt, ebx   
94 [0x5e]:           jne 113   
95 [0x5f]: line: 302 movl 0   
96 [0x60]:           movn #8   
98 [0x62]:           movi #0, adx   
100 [0x64]:           iaload ebx, adx   
101 [0x65]:           movr cmt, ebx   
102 [0x66]:           jne 106   
103 [0x67]: line: 303 pushl 0   
104 [0x68]:           pushl 5   
105 [0x69]:           call @3733 // <main.frontend#error_manager.print_error>   
106 [0x6a]:           nop   
107 [0x6b]: line: 305 movl 0   
108 [0x6c]:           movn #2   
110 [0x6e]:           pushobj   
111 [0x6f]:           pushl 5   
112 [0x70]:           call @3716 // <std#list<main.frontend#parse_error>.add>   
113 [0x71]:           nop   
114 [0x72]:           ret   


function: main.frontend#error_manager.init_class[3751] params(0) in file: lib\support\/bootstrap//frontend//error_manager.sharp:309:22: note:  
		    public static def init_class() {
		                     ^

0 [0x0]: line: 310 movg @82 // @main.frontend#error_manager   
1 [0x1]:           movn #1   
3 [0x3]:           pushobj   
4 [0x4]:           movg @84 // @main.frontend#compiler_error   
5 [0x5]:           movn #0   
7 [0x7]:           pushobj   
8 [0x8]:           new_class @75 // std#string   
10 [0xa]:           dup    
11 [0xb]:           newstr @112 // unexpected symbol   
12 [0xc]:           call @3546 // <std#string.string>   
13 [0xd]:           call @4005 // <std#hashmap<main.frontend#compiler_error,std#string>.put>   
14 [0xe]:           pop   
15 [0xf]: line: 312 movg @82 // @main.frontend#error_manager   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           movg @84 // @main.frontend#compiler_error   
20 [0x14]:           movn #1   
22 [0x16]:           pushobj   
23 [0x17]:           new_class @75 // std#string   
25 [0x19]:           dup    
26 [0x1a]:           newstr @113 // illegal number format mismatch   
27 [0x1b]:           call @3546 // <std#string.string>   
28 [0x1c]:           call @4005 // <std#hashmap<main.frontend#compiler_error,std#string>.put>   
29 [0x1d]:           pop   
30 [0x1e]: line: 314 movg @82 // @main.frontend#error_manager   
31 [0x1f]:           movn #1   
33 [0x21]:           pushobj   
34 [0x22]:           movg @84 // @main.frontend#compiler_error   
35 [0x23]:           movn #2   
37 [0x25]:           pushobj   
38 [0x26]:           new_class @75 // std#string   
40 [0x28]:           dup    
41 [0x29]:           newstr @114 // unexpected end of file   
42 [0x2a]:           call @3546 // <std#string.string>   
43 [0x2b]:           call @4005 // <std#hashmap<main.frontend#compiler_error,std#string>.put>   
44 [0x2c]:           pop   
45 [0x2d]: line: 316 movg @82 // @main.frontend#error_manager   
46 [0x2e]:           movn #1   
48 [0x30]:           pushobj   
49 [0x31]:           movg @84 // @main.frontend#compiler_error   
50 [0x32]:           movn #3   
52 [0x34]:           pushobj   
53 [0x35]:           new_class @75 // std#string   
55 [0x37]:           dup    
56 [0x38]:           newstr @115 // expected string literal before end of file   
57 [0x39]:           call @3546 // <std#string.string>   
58 [0x3a]:           call @4005 // <std#hashmap<main.frontend#compiler_error,std#string>.put>   
59 [0x3b]:           pop   
60 [0x3c]: line: 318 movg @82 // @main.frontend#error_manager   
61 [0x3d]:           movn #1   
63 [0x3f]:           pushobj   
64 [0x40]:           movg @84 // @main.frontend#compiler_error   
65 [0x41]:           movn #4   
67 [0x43]:           pushobj   
68 [0x44]:           new_class @75 // std#string   
70 [0x46]:           dup    
71 [0x47]:           newstr @116 // illegal string format   
72 [0x48]:           call @3546 // <std#string.string>   
73 [0x49]:           call @4005 // <std#hashmap<main.frontend#compiler_error,std#string>.put>   
74 [0x4a]:           pop   
75 [0x4b]: line: 320 movg @82 // @main.frontend#error_manager   
76 [0x4c]:           movn #1   
78 [0x4e]:           pushobj   
79 [0x4f]:           movg @84 // @main.frontend#compiler_error   
80 [0x50]:           movn #5   
82 [0x52]:           pushobj   
83 [0x53]:           new_class @75 // std#string   
85 [0x55]:           dup    
86 [0x56]:           newstr @117 // expected character literal before end of file   
87 [0x57]:           call @3546 // <std#string.string>   
88 [0x58]:           call @4005 // <std#hashmap<main.frontend#compiler_error,std#string>.put>   
89 [0x59]:           pop   
90 [0x5a]: line: 322 movg @82 // @main.frontend#error_manager   
91 [0x5b]:           movn #1   
93 [0x5d]:           pushobj   
94 [0x5e]:           movg @84 // @main.frontend#compiler_error   
95 [0x5f]:           movn #6   
97 [0x61]:           pushobj   
98 [0x62]:           new_class @75 // std#string   
100 [0x64]:           dup    
101 [0x65]:           newstr @118 // illegal character literal format   
102 [0x66]:           call @3546 // <std#string.string>   
103 [0x67]:           call @4005 // <std#hashmap<main.frontend#compiler_error,std#string>.put>   
104 [0x68]:           pop   
105 [0x69]: line: 324 movg @82 // @main.frontend#error_manager   
106 [0x6a]:           movn #1   
108 [0x6c]:           pushobj   
109 [0x6d]:           movg @84 // @main.frontend#compiler_error   
110 [0x6e]:           movn #7   
112 [0x70]:           pushobj   
113 [0x71]:           new_class @75 // std#string   
115 [0x73]:           dup    
116 [0x74]:           newstr @55 //    
117 [0x75]:           call @3546 // <std#string.string>   
118 [0x76]:           call @4005 // <std#hashmap<main.frontend#compiler_error,std#string>.put>   
119 [0x77]:           pop   
120 [0x78]: line: 326 movg @82 // @main.frontend#error_manager   
121 [0x79]:           movn #1   
123 [0x7b]:           pushobj   
124 [0x7c]:           movg @84 // @main.frontend#compiler_error   
125 [0x7d]:           movn #8   
127 [0x7f]:           pushobj   
128 [0x80]:           new_class @75 // std#string   
130 [0x82]:           dup    
131 [0x83]:           newstr @119 // illegal specification of access specifier(s)   
132 [0x84]:           call @3546 // <std#string.string>   
133 [0x85]:           call @4005 // <std#hashmap<main.frontend#compiler_error,std#string>.put>   
134 [0x86]:           pop   
135 [0x87]: line: 328 movg @82 // @main.frontend#error_manager   
136 [0x88]:           movn #1   
138 [0x8a]:           pushobj   
139 [0x8b]:           movg @84 // @main.frontend#compiler_error   
140 [0x8c]:           movn #9   
142 [0x8e]:           pushobj   
143 [0x8f]:           new_class @75 // std#string   
145 [0x91]:           dup    
146 [0x92]:           newstr @120 // illegal symbol mismatch, unexpected bracket   
147 [0x93]:           call @3546 // <std#string.string>   
148 [0x94]:           call @4005 // <std#hashmap<main.frontend#compiler_error,std#string>.put>   
149 [0x95]:           pop   
150 [0x96]: line: 330 movg @82 // @main.frontend#error_manager   
151 [0x97]:           movn #1   
153 [0x99]:           pushobj   
154 [0x9a]:           movg @84 // @main.frontend#compiler_error   
155 [0x9b]:           movn #10   
157 [0x9d]:           pushobj   
158 [0x9e]:           new_class @75 // std#string   
160 [0xa0]:           dup    
161 [0xa1]:           newstr @121 // missing bracket   
162 [0xa2]:           call @3546 // <std#string.string>   
163 [0xa3]:           call @4005 // <std#hashmap<main.frontend#compiler_error,std#string>.put>   
164 [0xa4]:           pop   
165 [0xa5]: line: 332 movg @82 // @main.frontend#error_manager   
166 [0xa6]:           movn #1   
168 [0xa8]:           pushobj   
169 [0xa9]:           movg @84 // @main.frontend#compiler_error   
170 [0xaa]:           movn #11   
172 [0xac]:           pushobj   
173 [0xad]:           new_class @75 // std#string   
175 [0xaf]:           dup    
176 [0xb0]:           newstr @122 // invalid access specifier   
177 [0xb1]:           call @3546 // <std#string.string>   
178 [0xb2]:           call @4005 // <std#hashmap<main.frontend#compiler_error,std#string>.put>   
179 [0xb3]:           pop   
180 [0xb4]: line: 334 movg @82 // @main.frontend#error_manager   
181 [0xb5]:           movn #1   
183 [0xb7]:           pushobj   
184 [0xb8]:           movg @84 // @main.frontend#compiler_error   
185 [0xb9]:           movn #12   
187 [0xbb]:           pushobj   
188 [0xbc]:           new_class @75 // std#string   
190 [0xbe]:           dup    
191 [0xbf]:           newstr @123 // multiple definition of   
192 [0xc0]:           call @3546 // <std#string.string>   
193 [0xc1]:           call @4005 // <std#hashmap<main.frontend#compiler_error,std#string>.put>   
194 [0xc2]:           pop   
195 [0xc3]: line: 336 movg @82 // @main.frontend#error_manager   
196 [0xc4]:           movn #1   
198 [0xc6]:           pushobj   
199 [0xc7]:           movg @84 // @main.frontend#compiler_error   
200 [0xc8]:           movn #13   
202 [0xca]:           pushobj   
203 [0xcb]:           new_class @75 // std#string   
205 [0xcd]:           dup    
206 [0xce]:           newstr @55 //    
207 [0xcf]:           call @3546 // <std#string.string>   
208 [0xd0]:           call @4005 // <std#hashmap<main.frontend#compiler_error,std#string>.put>   
209 [0xd1]:           pop   
210 [0xd2]: line: 338 movg @82 // @main.frontend#error_manager   
211 [0xd3]:           movn #1   
213 [0xd5]:           pushobj   
214 [0xd6]:           movg @84 // @main.frontend#compiler_error   
215 [0xd7]:           movn #14   
217 [0xd9]:           pushobj   
218 [0xda]:           new_class @75 // std#string   
220 [0xdc]:           dup    
221 [0xdd]:           newstr @124 // duplicate class:   
222 [0xde]:           call @3546 // <std#string.string>   
223 [0xdf]:           call @4005 // <std#hashmap<main.frontend#compiler_error,std#string>.put>   
224 [0xe0]:           pop   
225 [0xe1]: line: 340 movg @82 // @main.frontend#error_manager   
226 [0xe2]:           movn #1   
228 [0xe4]:           pushobj   
229 [0xe5]:           movg @84 // @main.frontend#compiler_error   
230 [0xe6]:           movn #15   
232 [0xe8]:           pushobj   
233 [0xe9]:           new_class @75 // std#string   
235 [0xeb]:           dup    
236 [0xec]:           newstr @125 // redundant token   
237 [0xed]:           call @3546 // <std#string.string>   
238 [0xee]:           call @4005 // <std#hashmap<main.frontend#compiler_error,std#string>.put>   
239 [0xef]:           pop   
240 [0xf0]: line: 342 movg @82 // @main.frontend#error_manager   
241 [0xf1]:           movn #1   
243 [0xf3]:           pushobj   
244 [0xf4]:           movg @84 // @main.frontend#compiler_error   
245 [0xf5]:           movn #16   
247 [0xf7]:           pushobj   
248 [0xf8]:           new_class @75 // std#string   
250 [0xfa]:           dup    
251 [0xfb]:           newstr @126 // internal runtime error   
252 [0xfc]:           call @3546 // <std#string.string>   
253 [0xfd]:           call @4005 // <std#hashmap<main.frontend#compiler_error,std#string>.put>   
254 [0xfe]:           pop   
255 [0xff]: line: 344 movg @82 // @main.frontend#error_manager   
256 [0x100]:           movn #1   
258 [0x102]:           pushobj   
259 [0x103]:           movg @84 // @main.frontend#compiler_error   
260 [0x104]:           movn #17   
262 [0x106]:           pushobj   
263 [0x107]:           new_class @75 // std#string   
265 [0x109]:           dup    
266 [0x10a]:           newstr @127 // could not resolve symbol   
267 [0x10b]:           call @3546 // <std#string.string>   
268 [0x10c]:           call @4005 // <std#hashmap<main.frontend#compiler_error,std#string>.put>   
269 [0x10d]:           pop   
270 [0x10e]: line: 346 movg @82 // @main.frontend#error_manager   
271 [0x10f]:           movn #1   
273 [0x111]:           pushobj   
274 [0x112]:           movg @84 // @main.frontend#compiler_error   
275 [0x113]:           movn #19   
277 [0x115]:           pushobj   
278 [0x116]:           new_class @75 // std#string   
280 [0x118]:           dup    
281 [0x119]:           newstr @128 // invalid cAst of type   
282 [0x11a]:           call @3546 // <std#string.string>   
283 [0x11b]:           call @4005 // <std#hashmap<main.frontend#compiler_error,std#string>.put>   
284 [0x11c]:           pop   
285 [0x11d]: line: 348 movg @82 // @main.frontend#error_manager   
286 [0x11e]:           movn #1   
288 [0x120]:           pushobj   
289 [0x121]:           movg @84 // @main.frontend#compiler_error   
290 [0x122]:           movn #20   
292 [0x124]:           pushobj   
293 [0x125]:           new_class @75 // std#string   
295 [0x127]:           dup    
296 [0x128]:           newstr @129 // redundant cAst of type   
297 [0x129]:           call @3546 // <std#string.string>   
298 [0x12a]:           call @4005 // <std#hashmap<main.frontend#compiler_error,std#string>.put>   
299 [0x12b]:           pop   
300 [0x12c]: line: 350 movg @82 // @main.frontend#error_manager   
301 [0x12d]:           movn #1   
303 [0x12f]:           pushobj   
304 [0x130]:           movg @84 // @main.frontend#compiler_error   
305 [0x131]:           movn #21   
307 [0x133]:           pushobj   
308 [0x134]:           new_class @75 // std#string   
310 [0x136]:           dup    
311 [0x137]:           newstr @130 // redundant self import of module   
312 [0x138]:           call @3546 // <std#string.string>   
313 [0x139]:           call @4005 // <std#hashmap<main.frontend#compiler_error,std#string>.put>   
314 [0x13a]:           pop   
315 [0x13b]: line: 352 movg @82 // @main.frontend#error_manager   
316 [0x13c]:           movn #1   
318 [0x13e]:           pushobj   
319 [0x13f]:           movg @84 // @main.frontend#compiler_error   
320 [0x140]:           movn #22   
322 [0x142]:           pushobj   
323 [0x143]:           new_class @75 // std#string   
325 [0x145]:           dup    
326 [0x146]:           newstr @131 // unexpected token   
327 [0x147]:           call @3546 // <std#string.string>   
328 [0x148]:           call @4005 // <std#hashmap<main.frontend#compiler_error,std#string>.put>   
329 [0x149]:           pop   
330 [0x14a]: line: 354 movg @82 // @main.frontend#error_manager   
331 [0x14b]:           movn #1   
333 [0x14d]:           pushobj   
334 [0x14e]:           movg @84 // @main.frontend#compiler_error   
335 [0x14f]:           movn #23   
337 [0x151]:           pushobj   
338 [0x152]:           new_class @75 // std#string   
340 [0x154]:           dup    
341 [0x155]:           newstr @132 // invalid access of   
342 [0x156]:           call @3546 // <std#string.string>   
343 [0x157]:           call @4005 // <std#hashmap<main.frontend#compiler_error,std#string>.put>   
344 [0x158]:           pop   
345 [0x159]: line: 356 movg @82 // @main.frontend#error_manager   
346 [0x15a]:           movn #1   
348 [0x15c]:           pushobj   
349 [0x15d]:           movg @84 // @main.frontend#compiler_error   
350 [0x15e]:           movn #24   
352 [0x160]:           pushobj   
353 [0x161]:           new_class @75 // std#string   
355 [0x163]:           dup    
356 [0x164]:           newstr @55 //    
357 [0x165]:           call @3546 // <std#string.string>   
358 [0x166]:           call @4005 // <std#hashmap<main.frontend#compiler_error,std#string>.put>   
359 [0x167]:           pop   
360 [0x168]: line: 358 movg @82 // @main.frontend#error_manager   
361 [0x169]:           movn #1   
363 [0x16b]:           pushobj   
364 [0x16c]:           movg @84 // @main.frontend#compiler_error   
365 [0x16d]:           movn #25   
367 [0x16f]:           pushobj   
368 [0x170]:           new_class @75 // std#string   
370 [0x172]:           dup    
371 [0x173]:           newstr @133 // invalid param of type   
372 [0x174]:           call @3546 // <std#string.string>   
373 [0x175]:           call @4005 // <std#hashmap<main.frontend#compiler_error,std#string>.put>   
374 [0x176]:           pop   
375 [0x177]: line: 360 movg @82 // @main.frontend#error_manager   
376 [0x178]:           movn #1   
378 [0x17a]:           pushobj   
379 [0x17b]:           movg @84 // @main.frontend#compiler_error   
380 [0x17c]:           movn #26   
382 [0x17e]:           pushobj   
383 [0x17f]:           new_class @75 // std#string   
385 [0x181]:           dup    
386 [0x182]:           newstr @134 // incompatible types   
387 [0x183]:           call @3546 // <std#string.string>   
388 [0x184]:           call @4005 // <std#hashmap<main.frontend#compiler_error,std#string>.put>   
389 [0x185]:           pop   
390 [0x186]:           ret   


constructor: main.frontend#error_manager.error_manager[3752] params(0) in file: lib\support\/bootstrap//frontend//error_manager.sharp:10:6: note:  
		class error_manager {
		     ^

0 [0x0]: line: 23 movg @82 // @main.frontend#error_manager   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          not ebx, ebx   
7 [0x7]:          movr cmt, ebx   
8 [0x8]:          jne 19   
9 [0x9]: line: 24 istore 1   
11 [0xb]:          movg @82 // @main.frontend#error_manager   
12 [0xc]:          movn #0   
14 [0xe]:          loadval ebx   
15 [0xf]:          movi #0, adx   
17 [0x11]:          rmov adx, ebx   
18 [0x12]: line: 25 call @3751 // <main.frontend#error_manager.init_class>   
19 [0x13]:          nop   
20 [0x14]:          ret   


constructor: main.frontend#parse_error.parse_error[3753] params(0) in file: lib\support\/bootstrap//frontend//error_manager.sharp:366:22: note:  
		   public parse_error() {
		                     ^

0 [0x0]:         new_class @75 // std#string   
2 [0x2]:         dup    
3 [0x3]:         newstr @55 //    
4 [0x4]:         call @3546 // <std#string.string>   
5 [0x5]:         movl 0   
6 [0x6]:         movn #1   
8 [0x8]:         popobj   
9 [0x9]:         pushl 0   
10 [0xa]: line: 367 movg @84 // @main.frontend#compiler_error   
11 [0xb]:           movn #28   
13 [0xd]:           pushobj   
14 [0xe]:           movl 0   
15 [0xf]:           movn #0   
17 [0x11]:           popobj   
18 [0x12]:           ret   


constructor: main.frontend#parse_error.parse_error[3754] params(5) in file: lib\support\/bootstrap//frontend//error_manager.sharp:370:22: note:  
		   public parse_error(err: compiler_error, msg: string, l: var, c: var,
		                     ^

0 [0x0]:         new_class @75 // std#string   
2 [0x2]:         dup    
3 [0x3]:         newstr @55 //    
4 [0x4]:         call @3546 // <std#string.string>   
5 [0x5]:         movl 0   
6 [0x6]:         movn #1   
8 [0x8]:         popobj   
9 [0x9]:         pushl 0   
10 [0xa]: line: 372 pushl 1   
11 [0xb]:           movl 0   
12 [0xc]:           movn #0   
14 [0xe]:           popobj   
15 [0xf]: line: 373 movl 5   
16 [0x10]:           checknull   
17 [0x11]:           not ebx, ebx   
18 [0x12]:           skne ebx // pc = 29   
19 [0x13]:           movl 5   
20 [0x14]:           pushobj   
21 [0x15]:           call @3587 // <std#string.size>   
22 [0x16]:           loadval ebx   
23 [0x17]:           rstore ebx   
24 [0x18]:           movi #0, ebx   
26 [0x1a]:           loadval ecx   
27 [0x1b]:           tne ecx, ebx   
28 [0x1c]:           movr ebx, cmt   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 39   
31 [0x1f]: line: 374 pushl 2   
32 [0x20]:           pushl 5   
33 [0x21]:           call @3561 // <std#string.operator+>   
34 [0x22]:           movl 0   
35 [0x23]:           movn #1   
37 [0x25]:           popobj   
38 [0x26]:           jmp @44   
39 [0x27]: line: 375 pushl 2   
40 [0x28]:           movl 0   
41 [0x29]:           movn #1   
43 [0x2b]:           popobj   
44 [0x2c]:           nop   
45 [0x2d]: line: 376 ipushl #3   
46 [0x2e]:           movl 0   
47 [0x2f]:           movn #2   
49 [0x31]:           loadval ebx   
50 [0x32]:           movi #0, adx   
52 [0x34]:           rmov adx, ebx   
53 [0x35]: line: 377 ipushl #4   
54 [0x36]:           movl 0   
55 [0x37]:           movn #3   
57 [0x39]:           loadval ebx   
58 [0x3a]:           movi #0, adx   
60 [0x3c]:           rmov adx, ebx   
61 [0x3d]: line: 378 movi #0, ebx   
63 [0x3f]:           movl 0   
64 [0x40]:           movn #4   
66 [0x42]:           movi #0, adx   
68 [0x44]:           rmov adx, ebx   
69 [0x45]:           ret   


constructor: main.frontend#parse_error.parse_error[3755] params(6) in file: lib\support\/bootstrap//frontend//error_manager.sharp:381:22: note:  
		   public parse_error(warning: var, err: compiler_error, msg: string, l: var, c: var,
		                     ^

0 [0x0]:         new_class @75 // std#string   
2 [0x2]:         dup    
3 [0x3]:         newstr @55 //    
4 [0x4]:         call @3546 // <std#string.string>   
5 [0x5]:         movl 0   
6 [0x6]:         movn #1   
8 [0x8]:         popobj   
9 [0x9]:         pushl 0   
10 [0xa]: line: 383 pushl 2   
11 [0xb]:           movl 0   
12 [0xc]:           movn #0   
14 [0xe]:           popobj   
15 [0xf]: line: 384 movl 6   
16 [0x10]:           checknull   
17 [0x11]:           not ebx, ebx   
18 [0x12]:           skne ebx // pc = 29   
19 [0x13]:           movl 6   
20 [0x14]:           pushobj   
21 [0x15]:           call @3587 // <std#string.size>   
22 [0x16]:           loadval ebx   
23 [0x17]:           rstore ebx   
24 [0x18]:           movi #0, ebx   
26 [0x1a]:           loadval ecx   
27 [0x1b]:           tne ecx, ebx   
28 [0x1c]:           movr ebx, cmt   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 39   
31 [0x1f]: line: 385 pushl 3   
32 [0x20]:           pushl 6   
33 [0x21]:           call @3561 // <std#string.operator+>   
34 [0x22]:           movl 0   
35 [0x23]:           movn #1   
37 [0x25]:           popobj   
38 [0x26]:           jmp @44   
39 [0x27]: line: 386 pushl 3   
40 [0x28]:           movl 0   
41 [0x29]:           movn #1   
43 [0x2b]:           popobj   
44 [0x2c]:           nop   
45 [0x2d]: line: 387 ipushl #4   
46 [0x2e]:           movl 0   
47 [0x2f]:           movn #2   
49 [0x31]:           loadval ebx   
50 [0x32]:           movi #0, adx   
52 [0x34]:           rmov adx, ebx   
53 [0x35]: line: 388 ipushl #5   
54 [0x36]:           movl 0   
55 [0x37]:           movn #3   
57 [0x39]:           loadval ebx   
58 [0x3a]:           movi #0, adx   
60 [0x3c]:           rmov adx, ebx   
61 [0x3d]: line: 389 ipushl #1   
62 [0x3e]:           movl 0   
63 [0x3f]:           movn #4   
65 [0x41]:           loadval ebx   
66 [0x42]:           movi #0, adx   
68 [0x44]:           rmov adx, ebx   
69 [0x45]:           ret   


constructor: main.frontend#parse_error.parse_error[3756] params(5) in file: lib\support\/bootstrap//frontend//error_manager.sharp:392:22: note:  
		   public parse_error(warning: var, err: compiler_error, msg: string, entity: token,
		                     ^

0 [0x0]:         new_class @75 // std#string   
2 [0x2]:         dup    
3 [0x3]:         newstr @55 //    
4 [0x4]:         call @3546 // <std#string.string>   
5 [0x5]:         movl 0   
6 [0x6]:         movn #1   
8 [0x8]:         popobj   
9 [0x9]:         pushl 0   
10 [0xa]: line: 394 pushl 2   
11 [0xb]:           movl 0   
12 [0xc]:           movn #0   
14 [0xe]:           popobj   
15 [0xf]: line: 395 movl 5   
16 [0x10]:           checknull   
17 [0x11]:           not ebx, ebx   
18 [0x12]:           skne ebx // pc = 29   
19 [0x13]:           movl 5   
20 [0x14]:           pushobj   
21 [0x15]:           call @3587 // <std#string.size>   
22 [0x16]:           loadval ebx   
23 [0x17]:           rstore ebx   
24 [0x18]:           movi #0, ebx   
26 [0x1a]:           loadval ecx   
27 [0x1b]:           tne ecx, ebx   
28 [0x1c]:           movr ebx, cmt   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 39   
31 [0x1f]: line: 396 pushl 3   
32 [0x20]:           pushl 5   
33 [0x21]:           call @3561 // <std#string.operator+>   
34 [0x22]:           movl 0   
35 [0x23]:           movn #1   
37 [0x25]:           popobj   
38 [0x26]:           jmp @44   
39 [0x27]: line: 397 pushl 3   
40 [0x28]:           movl 0   
41 [0x29]:           movn #1   
43 [0x2b]:           popobj   
44 [0x2c]:           nop   
45 [0x2d]: line: 398 pushl 4   
46 [0x2e]:           call @3797 // <main.frontend.tokenizer#token.get_line>   
47 [0x2f]:           movl 0   
48 [0x30]:           movn #2   
50 [0x32]:           loadval ebx   
51 [0x33]:           movi #0, adx   
53 [0x35]:           rmov adx, ebx   
54 [0x36]: line: 399 pushl 4   
55 [0x37]:           call @3796 // <main.frontend.tokenizer#token.get_col>   
56 [0x38]:           movl 0   
57 [0x39]:           movn #3   
59 [0x3b]:           loadval ebx   
60 [0x3c]:           movi #0, adx   
62 [0x3e]:           rmov adx, ebx   
63 [0x3f]: line: 400 ipushl #1   
64 [0x40]:           movl 0   
65 [0x41]:           movn #4   
67 [0x43]:           loadval ebx   
68 [0x44]:           movi #0, adx   
70 [0x46]:           rmov adx, ebx   
71 [0x47]:           ret   


constructor: main.frontend.parser#ast.ast[3757] params(0) in file: lib\support\/bootstrap//frontend//parser//ast.sharp:15:15: note:  
		    public ast()
		              ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 17 new_class @124 // std#list<main.frontend.tokenizer#token>   
3 [0x3]:          dup    
4 [0x4]:          call @4041 // <std#list<main.frontend.tokenizer#token>.list>   
5 [0x5]:          movl 0   
6 [0x6]:          movn #3   
8 [0x8]:          popobj   
9 [0x9]: line: 18 new_class @126 // std#list<main.frontend.parser#ast>   
11 [0xb]:          dup    
12 [0xc]:          call @4073 // <std#list<main.frontend.parser#ast>.list>   
13 [0xd]:          movl 0   
14 [0xe]:          movn #4   
16 [0x10]:          popobj   
17 [0x11]:          ret   


constructor: main.frontend.parser#ast.ast[3758] params(3) in file: lib\support\/bootstrap//frontend//parser//ast.sharp:21:15: note:  
		    public ast(type: ast_type, line: var, col: var)
		              ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 23 pushl 1   
2 [0x2]:          movl 0   
3 [0x3]:          movn #2   
5 [0x5]:          popobj   
6 [0x6]: line: 24 ipushl #2   
7 [0x7]:          movl 0   
8 [0x8]:          movn #0   
10 [0xa]:          loadval ebx   
11 [0xb]:          movi #0, adx   
13 [0xd]:          rmov adx, ebx   
14 [0xe]: line: 25 ipushl #3   
15 [0xf]:          movl 0   
16 [0x10]:          movn #1   
18 [0x12]:          loadval ebx   
19 [0x13]:          movi #0, adx   
21 [0x15]:          rmov adx, ebx   
22 [0x16]: line: 26 new_class @124 // std#list<main.frontend.tokenizer#token>   
24 [0x18]:          dup    
25 [0x19]:          call @4041 // <std#list<main.frontend.tokenizer#token>.list>   
26 [0x1a]:          movl 0   
27 [0x1b]:          movn #3   
29 [0x1d]:          popobj   
30 [0x1e]: line: 27 new_class @126 // std#list<main.frontend.parser#ast>   
32 [0x20]:          dup    
33 [0x21]:          call @4073 // <std#list<main.frontend.parser#ast>.list>   
34 [0x22]:          movl 0   
35 [0x23]:          movn #4   
37 [0x25]:          popobj   
38 [0x26]:          ret   


function: main.frontend.parser#ast.add[3759] params(1) in file: lib\support\/bootstrap//frontend//parser//ast.sharp:30:15: note:  
		    public def add(ast: ast) {
		              ^

0 [0x0]: line: 31 movl 0   
1 [0x1]:          movn #4   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 1   
5 [0x5]:          call @4087 // <std#list<main.frontend.parser#ast>.add>   
6 [0x6]:          ret   


function: main.frontend.parser#ast.add[3760] params(1) in file: lib\support\/bootstrap//frontend//parser//ast.sharp:34:15: note:  
		    public def add(token: token) {
		              ^

0 [0x0]: line: 35 movl 0   
1 [0x1]:          movn #3   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 1   
5 [0x5]:          call @4055 // <std#list<main.frontend.tokenizer#token>.add>   
6 [0x6]:          ret   


function: main.frontend.parser#ast.token_at[3761] params(1) in file: lib\support\/bootstrap//frontend//parser//ast.sharp:38:15: note:  
		    public def token_at(pos: var) : token {
		              ^

0 [0x0]: line: 39 movl 0   
1 [0x1]:          movn #3   
3 [0x3]:          pushobj   
4 [0x4]:          ipushl #1   
5 [0x5]:          call @4048 // <std#list<main.frontend.tokenizer#token>.at>   
6 [0x6]:          popobj2    
7 [0x7]:          returnobj   
8 [0x8]:          ret   


function: main.frontend.parser#ast.token_size[3762] params(0) in file: lib\support\/bootstrap//frontend//parser//ast.sharp:42:15: note:  
		    public def token_size() : var {
		              ^

0 [0x0]: line: 43 movl 0   
1 [0x1]:          movn #3   
3 [0x3]:          pushobj   
4 [0x4]:          call @4060 // <std#list<main.frontend.tokenizer#token>.size>   
5 [0x5]:          loadval ebx   
6 [0x6]:          return_val ebx   
7 [0x7]:          ret   


function: main.frontend.parser#ast.children_size[3763] params(0) in file: lib\support\/bootstrap//frontend//parser//ast.sharp:46:15: note:  
		    public def children_size() : var {
		              ^

0 [0x0]: line: 47 movl 0   
1 [0x1]:          movn #4   
3 [0x3]:          pushobj   
4 [0x4]:          call @4092 // <std#list<main.frontend.parser#ast>.size>   
5 [0x5]:          loadval ebx   
6 [0x6]:          return_val ebx   
7 [0x7]:          ret   


function: main.frontend.parser#ast.has_token[3764] params(1) in file: lib\support\/bootstrap//frontend//parser//ast.sharp:50:15: note:  
		    public def has_token(type: token_type) : var {
		              ^

0 [0x0]: line: 51 istorel -1, fp+3   
2 [0x2]:          movl 0   
3 [0x3]:          movn #3   
5 [0x5]:          pushobj   
6 [0x6]:          invoke_delegate 4039 { static=0, args=0 }   
8 [0x8]:          popl 4   
9 [0x9]:          iaddl 1, fp@3   
11 [0xb]:          movl 4   
12 [0xc]:          sizeof ecx   
13 [0xd]:          loadl ebx, fp+3   
14 [0xe]:          lt ebx, ecx   
15 [0xf]:          jne 31   
16 [0x10]:          movnd ebx   
17 [0x11]:          pushobj   
18 [0x12]:          popl 2   
19 [0x13]: line: 52 pushl 2   
20 [0x14]:          call @3798 // <main.frontend.tokenizer#token.get_type>   
21 [0x15]:          pushl 1   
22 [0x16]:          call @1947 // <std#_enum_.operator==>   
23 [0x17]:          loadval ebx   
24 [0x18]:          movr cmt, ebx   
25 [0x19]:          jne 29   
26 [0x1a]: line: 53 istorel 1, fp+0   
28 [0x1c]:          ret   
29 [0x1d]:          nop   
30 [0x1e]:          jmp @9   
31 [0x1f]: line: 56 istorel 0, fp+0   
33 [0x21]:          ret   


function: main.frontend.parser#ast.clear[3765] params(0) in file: lib\support\/bootstrap//frontend//parser//ast.sharp:59:15: note:  
		    public def clear() {
		              ^

0 [0x0]: line: 60 movl 0   
1 [0x1]:          movn #4   
3 [0x3]:          pushobj   
4 [0x4]:          call @4084 // <std#list<main.frontend.parser#ast>.clear>   
5 [0x5]: line: 61 movl 0   
6 [0x6]:          movn #3   
8 [0x8]:          pushobj   
9 [0x9]:          call @4052 // <std#list<main.frontend.tokenizer#token>.clear>   
10 [0xa]:          ret   


function: main.frontend.parser#ast.has_child[3766] params(1) in file: lib\support\/bootstrap//frontend//parser//ast.sharp:64:15: note:  
		    public def has_child(type: ast_type) : var {
		              ^

0 [0x0]: line: 65 istorel -1, fp+3   
2 [0x2]:          movl 0   
3 [0x3]:          movn #4   
5 [0x5]:          pushobj   
6 [0x6]:          invoke_delegate 4071 { static=0, args=0 }   
8 [0x8]:          popl 4   
9 [0x9]:          iaddl 1, fp@3   
11 [0xb]:          movl 4   
12 [0xc]:          sizeof ecx   
13 [0xd]:          loadl ebx, fp+3   
14 [0xe]:          lt ebx, ecx   
15 [0xf]:          jne 33   
16 [0x10]:          movnd ebx   
17 [0x11]:          pushobj   
18 [0x12]:          popl 2   
19 [0x13]: line: 66 movl 2   
20 [0x14]:          movn #2   
22 [0x16]:          pushobj   
23 [0x17]:          pushl 1   
24 [0x18]:          call @1947 // <std#_enum_.operator==>   
25 [0x19]:          loadval ebx   
26 [0x1a]:          movr cmt, ebx   
27 [0x1b]:          jne 31   
28 [0x1c]: line: 67 istorel 1, fp+0   
30 [0x1e]:          ret   
31 [0x1f]:          nop   
32 [0x20]:          jmp @9   
33 [0x21]: line: 70 istorel 0, fp+0   
35 [0x23]:          ret   


function: main.frontend.parser#ast.get_child[3767] params(1) in file: lib\support\/bootstrap//frontend//parser//ast.sharp:73:15: note:  
		    public def get_child(pos: var) : ast {
		              ^

0 [0x0]: line: 74 movl 0   
1 [0x1]:          movn #4   
3 [0x3]:          pushobj   
4 [0x4]:          ipushl #1   
5 [0x5]:          call @4080 // <std#list<main.frontend.parser#ast>.at>   
6 [0x6]:          popobj2    
7 [0x7]:          returnobj   
8 [0x8]:          ret   


function: main.frontend.parser#ast.get_child[3768] params(1) in file: lib\support\/bootstrap//frontend//parser//ast.sharp:77:15: note:  
		    public def get_child(type: ast_type) : ast {
		              ^

0 [0x0]: line: 78 istorel -1, fp+3   
2 [0x2]:          movl 0   
3 [0x3]:          movn #4   
5 [0x5]:          pushobj   
6 [0x6]:          invoke_delegate 4071 { static=0, args=0 }   
8 [0x8]:          popl 4   
9 [0x9]:          iaddl 1, fp@3   
11 [0xb]:          movl 4   
12 [0xc]:          sizeof ecx   
13 [0xd]:          loadl ebx, fp+3   
14 [0xe]:          lt ebx, ecx   
15 [0xf]:          jne 33   
16 [0x10]:          movnd ebx   
17 [0x11]:          pushobj   
18 [0x12]:          popl 2   
19 [0x13]: line: 79 movl 2   
20 [0x14]:          movn #2   
22 [0x16]:          pushobj   
23 [0x17]:          pushl 1   
24 [0x18]:          call @1947 // <std#_enum_.operator==>   
25 [0x19]:          loadval ebx   
26 [0x1a]:          movr cmt, ebx   
27 [0x1b]:          jne 31   
28 [0x1c]: line: 80 movl 2   
29 [0x1d]:          returnobj   
30 [0x1e]:          ret   
31 [0x1f]:          nop   
32 [0x20]:          jmp @9   
33 [0x21]: line: 82 pushnull    
34 [0x22]:          popobj2    
35 [0x23]:          returnobj   
36 [0x24]:          ret   


function: main.frontend.parser#ast.last[3769] params(0) in file: lib\support\/bootstrap//frontend//parser//ast.sharp:85:15: note:  
		    public def last() : ast {
		              ^

0 [0x0]: line: 86 movl 0   
1 [0x1]:          movn #4   
3 [0x3]:          pushobj   
4 [0x4]:          call @4081 // <std#list<main.frontend.parser#ast>.last>   
5 [0x5]:          popobj2    
6 [0x6]:          returnobj   
7 [0x7]:          ret   


function: main.frontend.parser#ast.last_token[3770] params(0) in file: lib\support\/bootstrap//frontend//parser//ast.sharp:89:15: note:  
		    public def last_token() : token {
		              ^

0 [0x0]: line: 90 movl 0   
1 [0x1]:          movn #3   
3 [0x3]:          pushobj   
4 [0x4]:          call @4049 // <std#list<main.frontend.tokenizer#token>.last>   
5 [0x5]:          popobj2    
6 [0x6]:          returnobj   
7 [0x7]:          ret   


function: main.frontend.parser#ast.encapsulate[3771] params(1) in file: lib\support\/bootstrap//frontend//parser//ast.sharp:93:15: note:  
		    public def encapsulate(type: ast_type) : ast {
		              ^

0 [0x0]: line: 94 new_class @86 // main.frontend.parser#ast   
2 [0x2]:          dup    
3 [0x3]:          pushl 1   
4 [0x4]:          movl 0   
5 [0x5]:          movn #0   
7 [0x7]:          movi #0, adx   
9 [0x9]:          iaload ebx, adx   
10 [0xa]:          rstore ebx   
11 [0xb]:          movl 0   
12 [0xc]:          movn #1   
14 [0xe]:          movi #0, adx   
16 [0x10]:          iaload ebx, adx   
17 [0x11]:          rstore ebx   
18 [0x12]:          call @3758 // <main.frontend.parser#ast.ast>   
19 [0x13]:          popobj2    
20 [0x14]:          smovr_3 fp+2   
21 [0x15]: line: 96 movl 2   
22 [0x16]:          movn #4   
24 [0x18]:          pushobj   
25 [0x19]:          movl 0   
26 [0x1a]:          movn #4   
28 [0x1c]:          pushobj   
29 [0x1d]:          call @4085 // <std#list<main.frontend.parser#ast>.add_all>   
30 [0x1e]: line: 97 movl 2   
31 [0x1f]:          movn #3   
33 [0x21]:          pushobj   
34 [0x22]:          movl 0   
35 [0x23]:          movn #3   
37 [0x25]:          pushobj   
38 [0x26]:          call @4053 // <std#list<main.frontend.tokenizer#token>.add_all>   
39 [0x27]: line: 99 movl 0   
40 [0x28]:          movn #4   
42 [0x2a]:          pushobj   
43 [0x2b]:          call @4084 // <std#list<main.frontend.parser#ast>.clear>   
44 [0x2c]: line: 100 movl 0   
45 [0x2d]:           movn #3   
47 [0x2f]:           pushobj   
48 [0x30]:           call @4052 // <std#list<main.frontend.tokenizer#token>.clear>   
49 [0x31]: line: 101 movl 0   
50 [0x32]:           movn #4   
52 [0x34]:           pushobj   
53 [0x35]:           pushl 2   
54 [0x36]:           call @4087 // <std#list<main.frontend.parser#ast>.add>   
55 [0x37]: line: 102 movl 2   
56 [0x38]:           returnobj   
57 [0x39]:           ret   


function: main.frontend.parser#ast.add_tabs[3772] params(1) in file: lib\support\/bootstrap//frontend//parser//ast.sharp:105:16: note:  
		    private def add_tabs(sb: string_builder) {
		               ^

0 [0x0]: line: 106 istorel 0, fp+2   
2 [0x2]:           ipushl #2   
3 [0x3]:           movg @86 // @main.frontend.parser#ast   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 22   
14 [0xe]: line: 107 pushl 1   
15 [0xf]:           istore 9   
17 [0x11]:           call @3640 // <std#string_builder.operator+=>   
18 [0x12]:           pop   
19 [0x13]:           iaddl 1, fp@2   
21 [0x15]:           jmp @2   
22 [0x16]:           ret   


function: main.frontend.parser#ast.to_string[3773] params(1) in file: lib\support\/bootstrap//frontend//parser//ast.sharp:111:15: note:  
		    public def to_string(sb: string_builder) {
		              ^

0 [0x0]: line: 112 pushl 0   
1 [0x1]:           pushl 1   
2 [0x2]:           call @3772 // <main.frontend.parser#ast.add_tabs>   
3 [0x3]: line: 113 pushl 1   
4 [0x4]:           new_class @75 // std#string   
6 [0x6]:           dup    
7 [0x7]:           newstr @135 // ast:    
8 [0x8]:           call @3546 // <std#string.string>   
9 [0x9]:           movl 0   
10 [0xa]:           movn #2   
12 [0xc]:           pushobj   
13 [0xd]:           call @3560 // <std#string.operator+>   
14 [0xe]:           newstr @136 //  ;   
15 [0xf]:           call @3558 // <std#string.operator+>   
16 [0x10]:           movl 0   
17 [0x11]:           movn #0   
19 [0x13]:           movi #0, adx   
21 [0x15]:           iaload ebx, adx   
22 [0x16]:           rstore ebx   
23 [0x17]:           call @3578 // <std#string.operator+>   
24 [0x18]:           newstr @137 // ,   
25 [0x19]:           call @3558 // <std#string.operator+>   
26 [0x1a]:           movl 0   
27 [0x1b]:           movn #1   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           iaload ebx, adx   
32 [0x20]:           rstore ebx   
33 [0x21]:           call @3578 // <std#string.operator+>   
34 [0x22]:           newstr @105 // 
   
35 [0x23]:           call @3558 // <std#string.operator+>   
36 [0x24]:           call @3642 // <std#string_builder.operator+=>   
37 [0x25]:           pop   
38 [0x26]: line: 115 movg @86 // @main.frontend.parser#ast   
39 [0x27]:           movn #0   
41 [0x29]:           movi #0, adx   
43 [0x2b]:           iaload ebx, adx   
44 [0x2c]:           movr egx, ebx   
45 [0x2d]:           inc ebx   
46 [0x2e]:           movi #0, adx   
48 [0x30]:           rmov adx, ebx   
49 [0x31]: line: 116 pushl 0   
50 [0x32]:           pushl 1   
51 [0x33]:           call @3772 // <main.frontend.parser#ast.add_tabs>   
52 [0x34]: line: 117 pushl 1   
53 [0x35]:           newstr @138 // tokens:
   
54 [0x36]:           call @3645 // <std#string_builder.operator+=>   
55 [0x37]:           pop   
56 [0x38]: line: 118 istorel -1, fp+3   
58 [0x3a]:           movl 0   
59 [0x3b]:           movn #3   
61 [0x3d]:           pushobj   
62 [0x3e]:           invoke_delegate 4039 { static=0, args=0 }   
64 [0x40]:           popl 4   
65 [0x41]:           iaddl 1, fp@3   
67 [0x43]:           movl 4   
68 [0x44]:           sizeof ecx   
69 [0x45]:           loadl ebx, fp+3   
70 [0x46]:           lt ebx, ecx   
71 [0x47]:           jne 102   
72 [0x48]:           movnd ebx   
73 [0x49]:           pushobj   
74 [0x4a]:           popl 2   
75 [0x4b]: line: 119 pushl 0   
76 [0x4c]:           pushl 1   
77 [0x4d]:           call @3772 // <main.frontend.parser#ast.add_tabs>   
78 [0x4e]: line: 120 movl 2   
79 [0x4f]:           checknull   
80 [0x50]:           not ebx, ebx   
81 [0x51]:           movr cmt, ebx   
82 [0x52]:           jne 96   
83 [0x53]: line: 121 pushl 1   
84 [0x54]:           new_class @75 // std#string   
86 [0x56]:           dup    
87 [0x57]:           newstr @55 //    
88 [0x58]:           call @3546 // <std#string.string>   
89 [0x59]:           pushl 2   
90 [0x5a]:           call @3560 // <std#string.operator+>   
91 [0x5b]:           newstr @105 // 
   
92 [0x5c]:           call @3558 // <std#string.operator+>   
93 [0x5d]:           call @3642 // <std#string_builder.operator+=>   
94 [0x5e]:           pop   
95 [0x5f]:           jmp @100   
96 [0x60]: line: 123 pushl 1   
97 [0x61]:           newstr @139 // null
   
98 [0x62]:           call @3645 // <std#string_builder.operator+=>   
99 [0x63]:           pop   
100 [0x64]:           nop   
101 [0x65]:           jmp @65   
102 [0x66]: line: 126 pushl 0   
103 [0x67]:           pushl 1   
104 [0x68]:           call @3772 // <main.frontend.parser#ast.add_tabs>   
105 [0x69]: line: 128 pushl 1   
106 [0x6a]:           new_class @75 // std#string   
108 [0x6c]:           dup    
109 [0x6d]:           newstr @140 // children: (   
110 [0x6e]:           call @3546 // <std#string.string>   
111 [0x6f]:           movl 0   
112 [0x70]:           movn #4   
114 [0x72]:           pushobj   
115 [0x73]:           call @4092 // <std#list<main.frontend.parser#ast>.size>   
116 [0x74]:           call @3578 // <std#string.operator+>   
117 [0x75]:           newstr @141 // )
   
118 [0x76]:           call @3558 // <std#string.operator+>   
119 [0x77]:           call @3642 // <std#string_builder.operator+=>   
120 [0x78]:           pop   
121 [0x79]: line: 129 istorel -1, fp+6   
123 [0x7b]:           movl 0   
124 [0x7c]:           movn #4   
126 [0x7e]:           pushobj   
127 [0x7f]:           invoke_delegate 4071 { static=0, args=0 }   
129 [0x81]:           popl 7   
130 [0x82]:           iaddl 1, fp@6   
132 [0x84]:           movl 7   
133 [0x85]:           sizeof ecx   
134 [0x86]:           loadl ebx, fp+6   
135 [0x87]:           lt ebx, ecx   
136 [0x88]:           jne 158   
137 [0x89]:           movnd ebx   
138 [0x8a]:           pushobj   
139 [0x8b]:           popl 5   
140 [0x8c]: line: 130 pushl 0   
141 [0x8d]:           pushl 1   
142 [0x8e]:           call @3772 // <main.frontend.parser#ast.add_tabs>   
143 [0x8f]: line: 132 movl 5   
144 [0x90]:           checknull   
145 [0x91]:           not ebx, ebx   
146 [0x92]:           movr cmt, ebx   
147 [0x93]:           jne 152   
148 [0x94]: line: 133 pushl 5   
149 [0x95]:           pushl 1   
150 [0x96]:           call @3773 // <main.frontend.parser#ast.to_string>   
151 [0x97]:           jmp @156   
152 [0x98]: line: 135 pushl 1   
153 [0x99]:           newstr @139 // null
   
154 [0x9a]:           call @3645 // <std#string_builder.operator+=>   
155 [0x9b]:           pop   
156 [0x9c]:           nop   
157 [0x9d]:           jmp @130   
158 [0x9e]: line: 138 pushl 1   
159 [0x9f]:           istore 10   
161 [0xa1]:           call @3640 // <std#string_builder.operator+=>   
162 [0xa2]:           pop   
163 [0xa3]: line: 139 movg @86 // @main.frontend.parser#ast   
164 [0xa4]:           movn #0   
166 [0xa6]:           movi #0, adx   
168 [0xa8]:           iaload ebx, adx   
169 [0xa9]:           movr egx, ebx   
170 [0xaa]:           dec ebx   
171 [0xab]:           movi #0, adx   
173 [0xad]:           rmov adx, ebx   
174 [0xae]:           ret   


function: main.frontend.parser#ast.copy[3774] params(1) in file: lib\support\/bootstrap//frontend//parser//ast.sharp:142:15: note:  
		    public def copy(ast: ast) {
		              ^

0 [0x0]: line: 143 movl 1   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movl 0   
7 [0x7]:           movn #0   
9 [0x9]:           movi #0, adx   
11 [0xb]:           rmov adx, ebx   
12 [0xc]: line: 144 movl 1   
13 [0xd]:           movn #1   
15 [0xf]:           movi #0, adx   
17 [0x11]:           iaload ebx, adx   
18 [0x12]:           movl 0   
19 [0x13]:           movn #1   
21 [0x15]:           movi #0, adx   
23 [0x17]:           rmov adx, ebx   
24 [0x18]: line: 145 movl 1   
25 [0x19]:           movn #2   
27 [0x1b]:           pushobj   
28 [0x1c]:           movl 0   
29 [0x1d]:           movn #2   
31 [0x1f]:           popobj   
32 [0x20]: line: 147 movl 0   
33 [0x21]:           movn #4   
35 [0x23]:           pushobj   
36 [0x24]:           movl 1   
37 [0x25]:           movn #4   
39 [0x27]:           pushobj   
40 [0x28]:           call @4085 // <std#list<main.frontend.parser#ast>.add_all>   
41 [0x29]: line: 148 movl 0   
42 [0x2a]:           movn #3   
44 [0x2c]:           pushobj   
45 [0x2d]:           movl 1   
46 [0x2e]:           movn #3   
48 [0x30]:           pushobj   
49 [0x31]:           call @4053 // <std#list<main.frontend.tokenizer#token>.add_all>   
50 [0x32]:           ret   


function: main.frontend.parser#ast.fast_copy[3775] params(1) in file: lib\support\/bootstrap//frontend//parser//ast.sharp:151:15: note:  
		    public def fast_copy(ast: ast) {
		              ^

0 [0x0]: line: 152 movl 0   
1 [0x1]:           movn #4   
3 [0x3]:           pushobj   
4 [0x4]:           call @4084 // <std#list<main.frontend.parser#ast>.clear>   
5 [0x5]: line: 153 movl 0   
6 [0x6]:           movn #3   
8 [0x8]:           pushobj   
9 [0x9]:           call @4052 // <std#list<main.frontend.tokenizer#token>.clear>   
10 [0xa]: line: 155 movl 1   
11 [0xb]:           movn #0   
13 [0xd]:           movi #0, adx   
15 [0xf]:           iaload ebx, adx   
16 [0x10]:           movl 0   
17 [0x11]:           movn #0   
19 [0x13]:           movi #0, adx   
21 [0x15]:           rmov adx, ebx   
22 [0x16]: line: 156 movl 1   
23 [0x17]:           movn #1   
25 [0x19]:           movi #0, adx   
27 [0x1b]:           iaload ebx, adx   
28 [0x1c]:           movl 0   
29 [0x1d]:           movn #1   
31 [0x1f]:           movi #0, adx   
33 [0x21]:           rmov adx, ebx   
34 [0x22]: line: 157 movl 1   
35 [0x23]:           movn #2   
37 [0x25]:           pushobj   
38 [0x26]:           movl 0   
39 [0x27]:           movn #2   
41 [0x29]:           popobj   
42 [0x2a]: line: 158 movl 1   
43 [0x2b]:           movn #4   
45 [0x2d]:           pushobj   
46 [0x2e]:           movl 0   
47 [0x2f]:           movn #4   
49 [0x31]:           popobj   
50 [0x32]: line: 159 movl 1   
51 [0x33]:           movn #3   
53 [0x35]:           pushobj   
54 [0x36]:           movl 0   
55 [0x37]:           movn #3   
57 [0x39]:           popobj   
58 [0x3a]:           ret   


function: main.frontend.parser#ast.pop_token[3776] params(0) in file: lib\support\/bootstrap//frontend//parser//ast.sharp:162:15: note:  
		    public def pop_token() {
		              ^

0 [0x0]: line: 163 movl 0   
1 [0x1]:           movn #3   
3 [0x3]:           pushobj   
4 [0x4]:           call @4057 // <std#list<main.frontend.tokenizer#token>.pop_back>   
5 [0x5]:           ret   


function: main.frontend.parser#ast.pop_child[3777] params(0) in file: lib\support\/bootstrap//frontend//parser//ast.sharp:166:15: note:  
		    public def pop_child() {
		              ^

0 [0x0]: line: 167 movl 0   
1 [0x1]:           movn #4   
3 [0x3]:           pushobj   
4 [0x4]:           call @4089 // <std#list<main.frontend.parser#ast>.pop_back>   
5 [0x5]:           ret   


function: main.frontend.parser#ast.get_type[3778] params(0) in file: lib\support\/bootstrap//frontend//parser//ast.sharp:170:15: note:  
		    public def get_type() : ast_type {
		              ^

0 [0x0]: line: 171 movl 0   
1 [0x1]:           movn #2   
3 [0x3]:           returnobj   
4 [0x4]:           ret   


function: main.frontend.parser#ast.set_type[3779] params(1) in file: lib\support\/bootstrap//frontend//parser//ast.sharp:174:15: note:  
		    public def set_type(type: ast_type) {
		              ^

0 [0x0]: line: 175 pushl 1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #2   
4 [0x4]:           popobj   
5 [0x5]:           ret   


constructor: main.frontend.parser#Parser.Parser[3780] params(1) in file: lib\support\/bootstrap//frontend//parser//parser.sharp:25:18: note:  
		    public Parser(toks: tokenizer)
		                 ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 27 pushl 1   
2 [0x2]:          movl 0   
3 [0x3]:          movn #8   
5 [0x5]:          popobj   
6 [0x6]: line: 29 movl 1   
7 [0x7]:          checknull   
8 [0x8]:          not ebx, ebx   
9 [0x9]:          skne ebx // pc = 23   
10 [0xa]:          movl 1   
11 [0xb]:          pushobj   
12 [0xc]:          call @3818 // <main.frontend.tokenizer#tokenizer.get_errors>   
13 [0xd]:          pushnull    
14 [0xe]:          itest ebx   
15 [0xf]:          not ebx, ebx   
16 [0x10]:          skne ebx // pc = 23   
17 [0x11]:          movl 1   
18 [0x12]:          pushobj   
19 [0x13]:          call @3818 // <main.frontend.tokenizer#tokenizer.get_errors>   
20 [0x14]:          call @3738 // <main.frontend#error_manager.has_errors>   
21 [0x15]:          loadval ebx   
22 [0x16]:          not ebx, ebx   
23 [0x17]:          movr cmt, ebx   
24 [0x18]:          jne 108   
25 [0x19]: line: 32 new_class @124 // std#list<main.frontend.tokenizer#token>   
27 [0x1b]:          dup    
28 [0x1c]:          call @4041 // <std#list<main.frontend.tokenizer#token>.list>   
29 [0x1d]:          movl 0   
30 [0x1e]:          movn #9   
32 [0x20]:          popobj   
33 [0x21]: line: 33 new_class @126 // std#list<main.frontend.parser#ast>   
35 [0x23]:          dup    
36 [0x24]:          call @4073 // <std#list<main.frontend.parser#ast>.list>   
37 [0x25]:          movl 0   
38 [0x26]:          movn #4   
40 [0x28]:          popobj   
41 [0x29]: line: 34 pushl 1   
42 [0x2a]:          call @3820 // <main.frontend.tokenizer#tokenizer.get_lines>   
43 [0x2b]:          movl 0   
44 [0x2c]:          movn #5   
46 [0x2e]:          popobj   
47 [0x2f]: line: 35 pushl 1   
48 [0x30]:          call @3824 // <main.frontend.tokenizer#tokenizer.get_tokens>   
49 [0x31]:          movl 0   
50 [0x32]:          movn #7   
52 [0x34]:          popobj   
53 [0x35]: line: 37 pushl 0   
54 [0x36]:          call @3781 // <main.frontend.parser#Parser.parse>   
55 [0x37]: line: 39 new_class @76 // std#string_builder   
57 [0x39]:          dup    
58 [0x3a]:          newstr @55 //    
59 [0x3b]:          call @3606 // <std#string_builder.string_builder>   
60 [0x3c]:          popobj2    
61 [0x3d]:          smovr_3 fp+2   
62 [0x3e]: line: 40 istorel -1, fp+4   
64 [0x40]:          movl 0   
65 [0x41]:          movn #4   
67 [0x43]:          pushobj   
68 [0x44]:          invoke_delegate 4071 { static=0, args=0 }   
70 [0x46]:          popl 5   
71 [0x47]:          iaddl 1, fp@4   
73 [0x49]:          movl 5   
74 [0x4a]:          sizeof ecx   
75 [0x4b]:          loadl ebx, fp+4   
76 [0x4c]:          lt ebx, ecx   
77 [0x4d]:          jne 96   
78 [0x4e]:          movnd ebx   
79 [0x4f]:          pushobj   
80 [0x50]:          popl 3   
81 [0x51]: line: 41 movl 3   
82 [0x52]:          checknull   
83 [0x53]:          not ebx, ebx   
84 [0x54]:          movr cmt, ebx   
85 [0x55]:          jne 90   
86 [0x56]: line: 42 pushl 3   
87 [0x57]:          pushl 2   
88 [0x58]:          call @3773 // <main.frontend.parser#ast.to_string>   
89 [0x59]:          jmp @94   
90 [0x5a]: line: 44 pushl 2   
91 [0x5b]:          newstr @139 // null
   
92 [0x5c]:          call @3645 // <std#string_builder.operator+=>   
93 [0x5d]:          pop   
94 [0x5e]:          nop   
95 [0x5f]:          jmp @71   
96 [0x60]: line: 47 new_class @28 // std.io#file   
98 [0x62]:          dup    
99 [0x63]:          newstr @142 // tree.txt   
100 [0x64]:          call @2078 // <std.io#file.file>   
101 [0x65]:          popobj2    
102 [0x66]:          smovr_3 fp+6   
103 [0x67]: line: 48 pushl 6   
104 [0x68]:          pushl 2   
105 [0x69]:          call @3622 // <std#string_builder.to_string>   
106 [0x6a]:          call @2117 // <std.io#file.write>   
107 [0x6b]:          pop   
108 [0x6c]:          nop   
109 [0x6d]:          ret   


function: main.frontend.parser#Parser.parse[3781] params(0) in file: lib\support\/bootstrap//frontend//parser//parser.sharp:53:16: note:  
		    private def parse() {
		               ^

0 [0x0]: line: 54 movl 0   
1 [0x1]:          movn #8   
3 [0x3]:          pushobj   
4 [0x4]:          call @3821 // <main.frontend.tokenizer#tokenizer.get_file>   
5 [0x5]:          movl 0   
6 [0x6]:          movn #0   
8 [0x8]:          popobj   
9 [0x9]: line: 55 new_class @82 // main.frontend#error_manager   
11 [0xb]:          dup    
12 [0xc]:          movl 0   
13 [0xd]:          movn #5   
15 [0xf]:          pushobj   
16 [0x10]:          movl 0   
17 [0x11]:          movn #0   
19 [0x13]:          pushobj   
20 [0x14]:          istore 1   
22 [0x16]:          movg @95 // @main#options   
23 [0x17]:          movn #0   
25 [0x19]:          movi #0, adx   
27 [0x1b]:          iaload ebx, adx   
28 [0x1c]:          rstore ebx   
29 [0x1d]:          call @3698 // <main.frontend#error_manager.error_manager>   
30 [0x1e]:          movl 0   
31 [0x1f]:          movn #10   
33 [0x21]:          popobj   
34 [0x22]: line: 56 movl 0   
35 [0x23]:          movn #7   
37 [0x25]:          pushobj   
38 [0x26]:          movl 0   
39 [0x27]:          movn #2   
41 [0x29]:          movi #0, adx   
43 [0x2b]:          iaload ebx, adx   
44 [0x2c]:          movr egx, ebx   
45 [0x2d]:          inc ebx   
46 [0x2e]:          movi #0, adx   
48 [0x30]:          rmov adx, ebx   
49 [0x31]:          movr ebx, egx   
50 [0x32]:          popobj2    
51 [0x33]:          movr adx, ebx   
52 [0x34]:          chklen adx   
53 [0x35]:          movnd adx   
54 [0x36]:          pushobj   
55 [0x37]:          movl 0   
56 [0x38]:          movn #6   
58 [0x3a]:          popobj   
59 [0x3b]: line: 58 movi #1, ebx   
61 [0x3d]:          movl 0   
62 [0x3e]:          movn #3   
64 [0x40]:          movi #0, adx   
66 [0x42]:          rmov adx, ebx   
67 [0x43]:          ret   


function: main.frontend.parser#Parser.is_keyword[3782] params(1) in file: lib\support\/bootstrap//frontend//parser//parser.sharp:117:16: note:  
		    private def is_keyword(key: string) : var {
		               ^

0 [0x0]: line: 118 istorel -1, fp+3   
2 [0x2]:           movg @88 // @main.frontend.parser#Parser   
3 [0x3]:           movn #0   
5 [0x5]:           pushobj   
6 [0x6]:           popl 4   
7 [0x7]:           iaddl 1, fp@3   
9 [0x9]:           movl 4   
10 [0xa]:           sizeof ecx   
11 [0xb]:           loadl ebx, fp+3   
12 [0xc]:           lt ebx, ecx   
13 [0xd]:           jne 27   
14 [0xe]:           movnd ebx   
15 [0xf]:           pushobj   
16 [0x10]:           popl 2   
17 [0x11]: line: 119 pushl 1   
18 [0x12]:           pushl 2   
19 [0x13]:           itest ebx   
20 [0x14]:           movr cmt, ebx   
21 [0x15]:           jne 25   
22 [0x16]: line: 120 istorel 1, fp+0   
24 [0x18]:           ret   
25 [0x19]:           nop   
26 [0x1a]:           jmp @7   
27 [0x1b]: line: 123 istorel 0, fp+0   
29 [0x1d]:           ret   


constructor: main.frontend.parser#Parser.Parser[3783] params(0) in file: lib\support\/bootstrap//frontend//parser//parser.sharp:11:6: note:  
		class Parser {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: main.frontend.tokenizer#token.token[3784] params(0) in file: lib\support\/bootstrap//frontend//tokenizer//token.sharp:15:17: note:  
		    public token() {
		                ^

0 [0x0]:         new_class @75 // std#string   
2 [0x2]:         dup    
3 [0x3]:         newstr @55 //    
4 [0x4]:         call @3546 // <std#string.string>   
5 [0x5]:         movl 0   
6 [0x6]:         movn #4   
8 [0x8]:         popobj   
9 [0x9]:         pushl 0   
10 [0xa]: line: 16 movg @93 // @main.frontend.tokenizer#token_type   
11 [0xb]:          movn #54   
13 [0xd]:          pushobj   
14 [0xe]:          movl 0   
15 [0xf]:          movn #3   
17 [0x11]:          popobj   
18 [0x12]: line: 17 movg @91 // @main.frontend.tokenizer#token_id   
19 [0x13]:          movn #14   
21 [0x15]:          pushobj   
22 [0x16]:          movl 0   
23 [0x17]:          movn #2   
25 [0x19]:          popobj   
26 [0x1a]:          ret   


constructor: main.frontend.tokenizer#token.token[3785] params(5) in file: lib\support\/bootstrap//frontend//tokenizer//token.sharp:20:17: note:  
		    public token(tok: string, id: token_id, type: token_type, col: var, line: var) {
		                ^

0 [0x0]:         new_class @75 // std#string   
2 [0x2]:         dup    
3 [0x3]:         newstr @55 //    
4 [0x4]:         call @3546 // <std#string.string>   
5 [0x5]:         movl 0   
6 [0x6]:         movn #4   
8 [0x8]:         popobj   
9 [0x9]:         pushl 0   
10 [0xa]: line: 21 pushl 1   
11 [0xb]:          movl 0   
12 [0xc]:          movn #4   
14 [0xe]:          popobj   
15 [0xf]: line: 22 pushl 3   
16 [0x10]:          movl 0   
17 [0x11]:          movn #3   
19 [0x13]:          popobj   
20 [0x14]: line: 23 pushl 2   
21 [0x15]:          movl 0   
22 [0x16]:          movn #2   
24 [0x18]:          popobj   
25 [0x19]: line: 24 ipushl #4   
26 [0x1a]:          movl 0   
27 [0x1b]:          movn #1   
29 [0x1d]:          loadval ebx   
30 [0x1e]:          movi #0, adx   
32 [0x20]:          rmov adx, ebx   
33 [0x21]: line: 25 ipushl #5   
34 [0x22]:          movl 0   
35 [0x23]:          movn #0   
37 [0x25]:          loadval ebx   
38 [0x26]:          movi #0, adx   
40 [0x28]:          rmov adx, ebx   
41 [0x29]:          ret   


constructor: main.frontend.tokenizer#token.token[3786] params(4) in file: lib\support\/bootstrap//frontend//tokenizer//token.sharp:29:17: note:  
		    public token(tok: string, id: token_id, col: var, line: var) {
		                ^

0 [0x0]:         new_class @75 // std#string   
2 [0x2]:         dup    
3 [0x3]:         newstr @55 //    
4 [0x4]:         call @3546 // <std#string.string>   
5 [0x5]:         movl 0   
6 [0x6]:         movn #4   
8 [0x8]:         popobj   
9 [0x9]:         pushl 0   
10 [0xa]: line: 30 pushl 1   
11 [0xb]:          movl 0   
12 [0xc]:          movn #4   
14 [0xe]:          popobj   
15 [0xf]: line: 31 movg @93 // @main.frontend.tokenizer#token_type   
16 [0x10]:          movn #54   
18 [0x12]:          pushobj   
19 [0x13]:          movl 0   
20 [0x14]:          movn #3   
22 [0x16]:          popobj   
23 [0x17]: line: 32 pushl 2   
24 [0x18]:          movl 0   
25 [0x19]:          movn #2   
27 [0x1b]:          popobj   
28 [0x1c]: line: 33 ipushl #3   
29 [0x1d]:          movl 0   
30 [0x1e]:          movn #1   
32 [0x20]:          loadval ebx   
33 [0x21]:          movi #0, adx   
35 [0x23]:          rmov adx, ebx   
36 [0x24]: line: 34 ipushl #4   
37 [0x25]:          movl 0   
38 [0x26]:          movn #0   
40 [0x28]:          loadval ebx   
41 [0x29]:          movi #0, adx   
43 [0x2b]:          rmov adx, ebx   
44 [0x2c]:          ret   


overload function: main.frontend.tokenizer#token.operator!=[3787] params(1) in file: lib\support\/bootstrap//frontend//tokenizer//token.sharp:37:15: note:  
		    public def operator!=(id: token_id) : var {
		              ^

0 [0x0]: line: 38 movl 0   
1 [0x1]:          movn #2   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 1   
5 [0x5]:          call @1945 // <std#_enum_.operator!=>   
6 [0x6]:          loadval ebx   
7 [0x7]:          return_val ebx   
8 [0x8]:          ret   


overload function: main.frontend.tokenizer#token.operator!=[3788] params(1) in file: lib\support\/bootstrap//frontend//tokenizer//token.sharp:41:15: note:  
		    public def operator!=(type: token_type) : var {
		              ^

0 [0x0]: line: 42 movl 0   
1 [0x1]:          movn #3   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 1   
5 [0x5]:          call @1945 // <std#_enum_.operator!=>   
6 [0x6]:          loadval ebx   
7 [0x7]:          return_val ebx   
8 [0x8]:          ret   


overload function: main.frontend.tokenizer#token.operator==[3789] params(1) in file: lib\support\/bootstrap//frontend//tokenizer//token.sharp:45:15: note:  
		    public def operator==(tok: string) : var {
		              ^

0 [0x0]: line: 46 movl 0   
1 [0x1]:          movn #4   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 1   
5 [0x5]:          call @3564 // <std#string.operator==>   
6 [0x6]:          loadval ebx   
7 [0x7]:          return_val ebx   
8 [0x8]:          ret   


overload function: main.frontend.tokenizer#token.operator!=[3790] params(1) in file: lib\support\/bootstrap//frontend//tokenizer//token.sharp:49:15: note:  
		    public def operator!=(tok: string) : var {
		              ^

0 [0x0]: line: 50 movl 0   
1 [0x1]:          movn #4   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 1   
5 [0x5]:          call @3566 // <std#string.operator!=>   
6 [0x6]:          loadval ebx   
7 [0x7]:          return_val ebx   
8 [0x8]:          ret   


overload function: main.frontend.tokenizer#token.operator==[3791] params(1) in file: lib\support\/bootstrap//frontend//tokenizer//token.sharp:53:15: note:  
		    public def operator==(entity: token) : var {
		              ^

0 [0x0]: line: 54 movl 0   
1 [0x1]:          movn #2   
3 [0x3]:          pushobj   
4 [0x4]:          movl 1   
5 [0x5]:          movn #2   
7 [0x7]:          pushobj   
8 [0x8]:          call @1947 // <std#_enum_.operator==>   
9 [0x9]:          loadval ebx   
10 [0xa]:          skne ebx // pc = 21   
11 [0xb]:          movl 0   
12 [0xc]:          movn #4   
14 [0xe]:          pushobj   
15 [0xf]:          movl 1   
16 [0x10]:          movn #4   
18 [0x12]:          pushobj   
19 [0x13]:          call @3564 // <std#string.operator==>   
20 [0x14]:          loadval ebx   
21 [0x15]:          return_val ebx   
22 [0x16]:          ret   


overload function: main.frontend.tokenizer#token.operator==[3792] params(1) in file: lib\support\/bootstrap//frontend//tokenizer//token.sharp:57:15: note:  
		    public def operator==(id: token_id) : var {
		              ^

0 [0x0]: line: 58 movl 0   
1 [0x1]:          movn #2   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 1   
5 [0x5]:          call @1947 // <std#_enum_.operator==>   
6 [0x6]:          loadval ebx   
7 [0x7]:          return_val ebx   
8 [0x8]:          ret   


overload function: main.frontend.tokenizer#token.operator==[3793] params(1) in file: lib\support\/bootstrap//frontend//tokenizer//token.sharp:61:15: note:  
		    public def operator==(type: token_type) : var {
		              ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #3   
3 [0x3]:          pushobj   
4 [0x4]:          pushl 1   
5 [0x5]:          call @1947 // <std#_enum_.operator==>   
6 [0x6]:          loadval ebx   
7 [0x7]:          return_val ebx   
8 [0x8]:          ret   


function: main.frontend.tokenizer#token.get_id[3794] params(0) in file: lib\support\/bootstrap//frontend//tokenizer//token.sharp:65:15: note:  
		    public def get_id() : token_id {
		              ^

0 [0x0]: line: 66 movl 0   
1 [0x1]:          movn #2   
3 [0x3]:          returnobj   
4 [0x4]:          ret   


function: main.frontend.tokenizer#token.get_token[3795] params(0) in file: lib\support\/bootstrap//frontend//tokenizer//token.sharp:69:15: note:  
		    public def get_token() : string {
		              ^

0 [0x0]: line: 70 movl 0   
1 [0x1]:          movn #4   
3 [0x3]:          returnobj   
4 [0x4]:          ret   


function: main.frontend.tokenizer#token.get_col[3796] params(0) in file: lib\support\/bootstrap//frontend//tokenizer//token.sharp:73:15: note:  
		    public def get_col() : var {
		              ^

0 [0x0]: line: 74 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          return_val ebx   
7 [0x7]:          ret   


function: main.frontend.tokenizer#token.get_line[3797] params(0) in file: lib\support\/bootstrap//frontend//tokenizer//token.sharp:77:15: note:  
		    public def get_line() : var {
		              ^

0 [0x0]: line: 78 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          return_val ebx   
7 [0x7]:          ret   


function: main.frontend.tokenizer#token.get_type[3798] params(0) in file: lib\support\/bootstrap//frontend//tokenizer//token.sharp:81:15: note:  
		    public def get_type() : token_type {
		              ^

0 [0x0]: line: 82 movl 0   
1 [0x1]:          movn #3   
3 [0x3]:          returnobj   
4 [0x4]:          ret   


function: main.frontend.tokenizer#token.to_string[3799] params(0) in file: lib\support\/bootstrap//frontend//tokenizer//token.sharp:85:15: note:  
		    public def to_string() : string {
		              ^

0 [0x0]: line: 86 movl 0   
1 [0x1]:          movn #4   
3 [0x3]:          pushobj   
4 [0x4]:          newstr @143 // :    
5 [0x5]:          call @3558 // <std#string.operator+>   
6 [0x6]:          movl 0   
7 [0x7]:          movn #0   
9 [0x9]:          movi #0, adx   
11 [0xb]:          iaload ebx, adx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @3578 // <std#string.operator+>   
14 [0xe]:          newstr @137 // ,   
15 [0xf]:          call @3558 // <std#string.operator+>   
16 [0x10]:          movl 0   
17 [0x11]:          movn #1   
19 [0x13]:          movi #0, adx   
21 [0x15]:          iaload ebx, adx   
22 [0x16]:          rstore ebx   
23 [0x17]:          call @3578 // <std#string.operator+>   
24 [0x18]:          popobj2    
25 [0x19]:          returnobj   
26 [0x1a]:          ret   


constructor: main.frontend.tokenizer#tokenizer.tokenizer[3800] params(0) in file: lib\support\/bootstrap//frontend//tokenizer//tokenizer.sharp:26:22: note:  
		    private tokenizer(){ /* Dont call */ }
		                     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: main.frontend.tokenizer#tokenizer.tokenizer[3801] params(2) in file: lib\support\/bootstrap//frontend//tokenizer//tokenizer.sharp:28:21: note:  
		    public tokenizer(text: string, file: string)
		                    ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 30 movi #1, ebx   
3 [0x3]:          movl 0   
4 [0x4]:          movn #8   
6 [0x6]:          movi #0, adx   
8 [0x8]:          rmov adx, ebx   
9 [0x9]: line: 31 pushl 2   
10 [0xa]:          movl 0   
11 [0xb]:          movn #13   
13 [0xd]:          popobj   
14 [0xe]: line: 32 new_class @110 // std#list<std#string>   
16 [0x10]:          dup    
17 [0x11]:          call @3668 // <std#list<std#string>.list>   
18 [0x12]:          movl 0   
19 [0x13]:          movn #2   
21 [0x15]:          popobj   
22 [0x16]: line: 34 pushl 1   
23 [0x17]:          call @3554 // <std#string.empty>   
24 [0x18]:          loadval ebx   
25 [0x19]:          not ebx, ebx   
26 [0x1a]:          movr cmt, ebx   
27 [0x1b]:          jne 40   
28 [0x1c]: line: 35 pushl 1   
29 [0x1d]:          movl 0   
30 [0x1e]:          movn #3   
32 [0x20]:          popobj   
33 [0x21]: line: 36 pushl 1   
34 [0x22]:          call @3572 // <std#string.get_data>   
35 [0x23]:          movl 0   
36 [0x24]:          movn #4   
38 [0x26]:          popobj   
39 [0x27]:          jmp @48   
40 [0x28]: line: 39 movi #0, ebx   
42 [0x2a]:          movl 0   
43 [0x2b]:          movn #8   
45 [0x2d]:          movi #0, adx   
47 [0x2f]:          rmov adx, ebx   
48 [0x30]:          nop   
49 [0x31]: line: 42 new_class @124 // std#list<main.frontend.tokenizer#token>   
51 [0x33]:          dup    
52 [0x34]:          call @4041 // <std#list<main.frontend.tokenizer#token>.list>   
53 [0x35]:          movl 0   
54 [0x36]:          movn #0   
56 [0x38]:          popobj   
57 [0x39]: line: 43 pushl 0   
58 [0x3a]:          call @3802 // <main.frontend.tokenizer#tokenizer.parse>   
59 [0x3b]:          ret   


function: main.frontend.tokenizer#tokenizer.parse[3802] params(0) in file: lib\support\/bootstrap//frontend//tokenizer//tokenizer.sharp:46:8: note:  
		    def parse() {
		       ^

0 [0x0]: line: 47 movl 0   
1 [0x1]:          movn #3   
3 [0x3]:          pushobj   
4 [0x4]:          call @3554 // <std#string.empty>   
5 [0x5]:          loadval ebx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 9   
8 [0x8]: line: 48 ret   
9 [0x9]:          nop   
10 [0xa]: line: 50 pushl 0   
11 [0xb]:          call @3826 // <main.frontend.tokenizer#tokenizer.add_lines>   
12 [0xc]: line: 51 new_class @82 // main.frontend#error_manager   
14 [0xe]:          dup    
15 [0xf]:          movl 0   
16 [0x10]:          movn #2   
18 [0x12]:          pushobj   
19 [0x13]:          movl 0   
20 [0x14]:          movn #13   
22 [0x16]:          pushobj   
23 [0x17]:          istore 0   
25 [0x19]:          movg @95 // @main#options   
26 [0x1a]:          movn #0   
28 [0x1c]:          movi #0, adx   
30 [0x1e]:          iaload ebx, adx   
31 [0x1f]:          rstore ebx   
32 [0x20]:          call @3698 // <main.frontend#error_manager.error_manager>   
33 [0x21]:          movl 0   
34 [0x22]:          movn #1   
36 [0x24]:          popobj   
37 [0x25]: line: 52 movl 0   
38 [0x26]:          movn #3   
40 [0x28]:          pushobj   
41 [0x29]:          istore 0   
43 [0x2b]:          call @3568 // <std#string.at>   
44 [0x2c]:          movl 0   
45 [0x2d]:          movn #7   
47 [0x2f]:          loadval ebx   
48 [0x30]:          movi #0, adx   
50 [0x32]:          rmov adx, ebx   
51 [0x33]: line: 54 movl 0   
52 [0x34]:          movn #9   
54 [0x36]:          movi #0, adx   
56 [0x38]:          iaload ebx, adx   
57 [0x39]:          not ebx, ebx   
58 [0x3a]:          movr cmt, ebx   
59 [0x3b]:          jne 1409   
60 [0x3c]: line: 55 movl 0   
61 [0x3d]:          movn #5   
63 [0x3f]:          movi #0, adx   
65 [0x41]:          iaload ebx, adx   
66 [0x42]:          movl 0   
67 [0x43]:          movn #6   
69 [0x45]:          movi #0, adx   
71 [0x47]:          rmov adx, ebx   
72 [0x48]: line: 57 movl 0   
73 [0x49]:          movn #7   
75 [0x4b]:          movi #0, adx   
77 [0x4d]:          iaload ebx, adx   
78 [0x4e]:          rstore ebx   
79 [0x4f]:          movi #32, ebx   
81 [0x51]:          loadval ecx   
82 [0x52]:          test ecx, ebx   
83 [0x53]:          movr ebx, cmt   
84 [0x54]:          movr cmt, ebx   
85 [0x55]:          je 114   
86 [0x56]:          movl 0   
87 [0x57]:          movn #7   
89 [0x59]:          movi #0, adx   
91 [0x5b]:          iaload ebx, adx   
92 [0x5c]:          rstore ebx   
93 [0x5d]:          movi #9, ebx   
95 [0x5f]:          loadval ecx   
96 [0x60]:          test ecx, ebx   
97 [0x61]:          movr ebx, cmt   
98 [0x62]:          movr cmt, ebx   
99 [0x63]:          je 114   
100 [0x64]:          movl 0   
101 [0x65]:          movn #7   
103 [0x67]:          movi #0, adx   
105 [0x69]:          iaload ebx, adx   
106 [0x6a]:          rstore ebx   
107 [0x6b]:          movi #13, ebx   
109 [0x6d]:          loadval ecx   
110 [0x6e]:          test ecx, ebx   
111 [0x6f]:          movr ebx, cmt   
112 [0x70]:          movr cmt, ebx   
113 [0x71]:          jne 115   
114 [0x72]:          jmp @1405   
115 [0x73]:          movl 0   
116 [0x74]:          movn #7   
118 [0x76]:          movi #0, adx   
120 [0x78]:          iaload ebx, adx   
121 [0x79]:          rstore ebx   
122 [0x7a]:          movi #10, ebx   
124 [0x7c]:          loadval ecx   
125 [0x7d]:          test ecx, ebx   
126 [0x7e]:          movr ebx, cmt   
127 [0x7f]:          movr cmt, ebx   
128 [0x80]:          jne 132   
129 [0x81]: line: 65 pushl 0   
130 [0x82]:          call @3813 // <main.frontend.tokenizer#tokenizer.newline>   
131 [0x83]:          jmp @1405   
132 [0x84]:          movl 0   
133 [0x85]:          movn #7   
135 [0x87]:          movi #0, adx   
137 [0x89]:          iaload ebx, adx   
138 [0x8a]:          rstore ebx   
139 [0x8b]:          movi #95, ebx   
141 [0x8d]:          loadval ecx   
142 [0x8e]:          test ecx, ebx   
143 [0x8f]:          movr ebx, cmt   
144 [0x90]:          movr cmt, ebx   
145 [0x91]:          je 200   
146 [0x92]:          movl 0   
147 [0x93]:          movn #7   
149 [0x95]:          movi #0, adx   
151 [0x97]:          iaload ebx, adx   
152 [0x98]:          rstore ebx   
153 [0x99]:          movi #65, ebx   
155 [0x9b]:          loadval ecx   
156 [0x9c]:          gte ecx, ebx   
157 [0x9d]:          movr ebx, cmt   
158 [0x9e]:          skne ebx // pc = 171   
159 [0x9f]:          movl 0   
160 [0xa0]:          movn #7   
162 [0xa2]:          movi #0, adx   
164 [0xa4]:          iaload ebx, adx   
165 [0xa5]:          rstore ebx   
166 [0xa6]:          movi #90, ebx   
168 [0xa8]:          loadval ecx   
169 [0xa9]:          lte ecx, ebx   
170 [0xaa]:          movr ebx, cmt   
171 [0xab]:          movr cmt, ebx   
172 [0xac]:          je 200   
173 [0xad]:          movl 0   
174 [0xae]:          movn #7   
176 [0xb0]:          movi #0, adx   
178 [0xb2]:          iaload ebx, adx   
179 [0xb3]:          rstore ebx   
180 [0xb4]:          movi #97, ebx   
182 [0xb6]:          loadval ecx   
183 [0xb7]:          gte ecx, ebx   
184 [0xb8]:          movr ebx, cmt   
185 [0xb9]:          skne ebx // pc = 198   
186 [0xba]:          movl 0   
187 [0xbb]:          movn #7   
189 [0xbd]:          movi #0, adx   
191 [0xbf]:          iaload ebx, adx   
192 [0xc0]:          rstore ebx   
193 [0xc1]:          movi #122, ebx   
195 [0xc3]:          loadval ecx   
196 [0xc4]:          lte ecx, ebx   
197 [0xc5]:          movr ebx, cmt   
198 [0xc6]:          movr cmt, ebx   
199 [0xc7]:          jne 203   
200 [0xc8]: line: 71 pushl 0   
201 [0xc9]:          call @3807 // <main.frontend.tokenizer#tokenizer.parse_identifier>   
202 [0xca]:          jmp @1405   
203 [0xcb]:          movl 0   
204 [0xcc]:          movn #7   
206 [0xce]:          movi #0, adx   
208 [0xd0]:          iaload ebx, adx   
209 [0xd1]:          rstore ebx   
210 [0xd2]:          movi #123, ebx   
212 [0xd4]:          loadval ecx   
213 [0xd5]:          test ecx, ebx   
214 [0xd6]:          movr ebx, cmt   
215 [0xd7]:          movr cmt, ebx   
216 [0xd8]:          jne 244   
217 [0xd9]: line: 75 movl 0   
218 [0xda]:          movn #11   
220 [0xdc]:          movi #0, adx   
222 [0xde]:          iaload ebx, adx   
223 [0xdf]:          movr cmt, ebx   
224 [0xe0]:          jne 236   
225 [0xe1]: line: 76 movl 0   
226 [0xe2]:          movn #12   
228 [0xe4]:          movi #0, adx   
230 [0xe6]:          iaload ebx, adx   
231 [0xe7]:          movr egx, ebx   
232 [0xe8]:          inc ebx   
233 [0xe9]:          movi #0, adx   
235 [0xeb]:          rmov adx, ebx   
236 [0xec]:          nop   
237 [0xed]: line: 77 pushl 0   
238 [0xee]:          movg @93 // @main.frontend.tokenizer#token_type   
239 [0xef]:          movn #5   
241 [0xf1]:          pushobj   
242 [0xf2]:          call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
243 [0xf3]:          jmp @1405   
244 [0xf4]:          movl 0   
245 [0xf5]:          movn #7   
247 [0xf7]:          movi #0, adx   
249 [0xf9]:          iaload ebx, adx   
250 [0xfa]:          rstore ebx   
251 [0xfb]:          movi #125, ebx   
253 [0xfd]:          loadval ecx   
254 [0xfe]:          test ecx, ebx   
255 [0xff]:          movr ebx, cmt   
256 [0x100]:          movr cmt, ebx   
257 [0x101]:          jne 440   
258 [0x102]: line: 80 movl 0   
259 [0x103]:          movn #11   
261 [0x105]:          movi #0, adx   
263 [0x107]:          iaload ebx, adx   
264 [0x108]:          movr cmt, ebx   
265 [0x109]:          jne 432   
266 [0x10a]: line: 81 movl 0   
267 [0x10b]:          movn #12   
269 [0x10d]:          movi #0, adx   
271 [0x10f]:          iaload ebx, adx   
272 [0x110]:          dec ebx   
273 [0x111]:          movi #0, adx   
275 [0x113]:          rmov adx, ebx   
276 [0x114]:          rstore ebx   
277 [0x115]:          movi #0, ebx   
279 [0x117]:          loadval ecx   
280 [0x118]:          test ecx, ebx   
281 [0x119]:          movr ebx, cmt   
282 [0x11a]:          movr cmt, ebx   
283 [0x11b]:          jne 424   
284 [0x11c]: line: 82 movi #0, ebx   
286 [0x11e]:          movl 0   
287 [0x11f]:          movn #11   
289 [0x121]:          movi #0, adx   
291 [0x123]:          rmov adx, ebx   
292 [0x124]: line: 83 pushl 0   
293 [0x125]:          istore 1   
295 [0x127]:          call @3817 // <main.frontend.tokenizer#tokenizer.peek>   
296 [0x128]:          loadval ebx   
297 [0x129]:          rstore ebx   
298 [0x12a]:          movi #34, ebx   
300 [0x12c]:          loadval ecx   
301 [0x12d]:          test ecx, ebx   
302 [0x12e]:          movr ebx, cmt   
303 [0x12f]:          movr cmt, ebx   
304 [0x130]:          jne 347   
305 [0x131]: line: 84 pushl 0   
306 [0x132]:          call @3814 // <main.frontend.tokenizer#tokenizer.advance>   
307 [0x133]: line: 85 pushl 0   
308 [0x134]:          call @3814 // <main.frontend.tokenizer#tokenizer.advance>   
309 [0x135]: line: 86 movl 0   
310 [0x136]:          movn #0   
312 [0x138]:          pushobj   
313 [0x139]:          new_class @90 // main.frontend.tokenizer#token   
315 [0x13b]:          dup    
316 [0x13c]:          new_class @75 // std#string   
318 [0x13e]:          dup    
319 [0x13f]:          newstr @144 // )   
320 [0x140]:          call @3546 // <std#string.string>   
321 [0x141]:          movg @91 // @main.frontend.tokenizer#token_id   
322 [0x142]:          movn #13   
324 [0x144]:          pushobj   
325 [0x145]:          movg @93 // @main.frontend.tokenizer#token_type   
326 [0x146]:          movn #4   
328 [0x148]:          pushobj   
329 [0x149]:          movl 0   
330 [0x14a]:          movn #10   
332 [0x14c]:          movi #0, adx   
334 [0x14e]:          iaload ebx, adx   
335 [0x14f]:          rstore ebx   
336 [0x150]:          movl 0   
337 [0x151]:          movn #8   
339 [0x153]:          movi #0, adx   
341 [0x155]:          iaload ebx, adx   
342 [0x156]:          rstore ebx   
343 [0x157]:          call @3785 // <main.frontend.tokenizer#token.token>   
344 [0x158]:          call @4055 // <std#list<main.frontend.tokenizer#token>.add>   
345 [0x159]: line: 87 jmp @51   
346 [0x15a]:          jmp @422   
347 [0x15b]: line: 89 movl 0   
348 [0x15c]:          movn #0   
350 [0x15e]:          pushobj   
351 [0x15f]:          new_class @90 // main.frontend.tokenizer#token   
353 [0x161]:          dup    
354 [0x162]:          new_class @75 // std#string   
356 [0x164]:          dup    
357 [0x165]:          newstr @144 // )   
358 [0x166]:          call @3546 // <std#string.string>   
359 [0x167]:          movg @91 // @main.frontend.tokenizer#token_id   
360 [0x168]:          movn #13   
362 [0x16a]:          pushobj   
363 [0x16b]:          movg @93 // @main.frontend.tokenizer#token_type   
364 [0x16c]:          movn #4   
366 [0x16e]:          pushobj   
367 [0x16f]:          movl 0   
368 [0x170]:          movn #10   
370 [0x172]:          movi #0, adx   
372 [0x174]:          iaload ebx, adx   
373 [0x175]:          rstore ebx   
374 [0x176]:          movl 0   
375 [0x177]:          movn #8   
377 [0x179]:          movi #0, adx   
379 [0x17b]:          iaload ebx, adx   
380 [0x17c]:          rstore ebx   
381 [0x17d]:          call @3785 // <main.frontend.tokenizer#token.token>   
382 [0x17e]:          call @4055 // <std#list<main.frontend.tokenizer#token>.add>   
383 [0x17f]: line: 91 movl 0   
384 [0x180]:          movn #0   
386 [0x182]:          pushobj   
387 [0x183]:          new_class @90 // main.frontend.tokenizer#token   
389 [0x185]:          dup    
390 [0x186]:          new_class @75 // std#string   
392 [0x188]:          dup    
393 [0x189]:          newstr @145 // +   
394 [0x18a]:          call @3546 // <std#string.string>   
395 [0x18b]:          movg @91 // @main.frontend.tokenizer#token_id   
396 [0x18c]:          movn #13   
398 [0x18e]:          pushobj   
399 [0x18f]:          movg @93 // @main.frontend.tokenizer#token_type   
400 [0x190]:          movn #9   
402 [0x192]:          pushobj   
403 [0x193]:          movl 0   
404 [0x194]:          movn #10   
406 [0x196]:          movi #0, adx   
408 [0x198]:          iaload ebx, adx   
409 [0x199]:          rstore ebx   
410 [0x19a]:          movl 0   
411 [0x19b]:          movn #8   
413 [0x19d]:          movi #0, adx   
415 [0x19f]:          iaload ebx, adx   
416 [0x1a0]:          rstore ebx   
417 [0x1a1]:          call @3785 // <main.frontend.tokenizer#token.token>   
418 [0x1a2]:          call @4055 // <std#list<main.frontend.tokenizer#token>.add>   
419 [0x1a3]: line: 92 pushl 0   
420 [0x1a4]:          call @3809 // <main.frontend.tokenizer#tokenizer.parse_string>   
421 [0x1a5]:          pop   
422 [0x1a6]:          nop   
423 [0x1a7]:          jmp @430   
424 [0x1a8]: line: 95 pushl 0   
425 [0x1a9]:          movg @93 // @main.frontend.tokenizer#token_type   
426 [0x1aa]:          movn #6   
428 [0x1ac]:          pushobj   
429 [0x1ad]:          call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
430 [0x1ae]:          nop   
431 [0x1af]:          jmp @438   
432 [0x1b0]: line: 97 pushl 0   
433 [0x1b1]:          movg @93 // @main.frontend.tokenizer#token_type   
434 [0x1b2]:          movn #6   
436 [0x1b4]:          pushobj   
437 [0x1b5]:          call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
438 [0x1b6]:          nop   
439 [0x1b7]:          jmp @1405   
440 [0x1b8]:          movl 0   
441 [0x1b9]:          movn #7   
443 [0x1bb]:          movi #0, adx   
445 [0x1bd]:          iaload ebx, adx   
446 [0x1be]:          rstore ebx   
447 [0x1bf]:          movi #40, ebx   
449 [0x1c1]:          loadval ecx   
450 [0x1c2]:          test ecx, ebx   
451 [0x1c3]:          movr ebx, cmt   
452 [0x1c4]:          movr cmt, ebx   
453 [0x1c5]:          jne 461   
454 [0x1c6]: line: 99 pushl 0   
455 [0x1c7]:          movg @93 // @main.frontend.tokenizer#token_type   
456 [0x1c8]:          movn #3   
458 [0x1ca]:          pushobj   
459 [0x1cb]:          call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
460 [0x1cc]:          jmp @1405   
461 [0x1cd]:          movl 0   
462 [0x1ce]:          movn #7   
464 [0x1d0]:          movi #0, adx   
466 [0x1d2]:          iaload ebx, adx   
467 [0x1d3]:          rstore ebx   
468 [0x1d4]:          movi #41, ebx   
470 [0x1d6]:          loadval ecx   
471 [0x1d7]:          test ecx, ebx   
472 [0x1d8]:          movr ebx, cmt   
473 [0x1d9]:          movr cmt, ebx   
474 [0x1da]:          jne 482   
475 [0x1db]: line: 100 pushl 0   
476 [0x1dc]:           movg @93 // @main.frontend.tokenizer#token_type   
477 [0x1dd]:           movn #4   
479 [0x1df]:           pushobj   
480 [0x1e0]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
481 [0x1e1]:           jmp @1405   
482 [0x1e2]:           movl 0   
483 [0x1e3]:           movn #7   
485 [0x1e5]:           movi #0, adx   
487 [0x1e7]:           iaload ebx, adx   
488 [0x1e8]:           rstore ebx   
489 [0x1e9]:           movi #91, ebx   
491 [0x1eb]:           loadval ecx   
492 [0x1ec]:           test ecx, ebx   
493 [0x1ed]:           movr ebx, cmt   
494 [0x1ee]:           movr cmt, ebx   
495 [0x1ef]:           jne 503   
496 [0x1f0]: line: 101 pushl 0   
497 [0x1f1]:           movg @93 // @main.frontend.tokenizer#token_type   
498 [0x1f2]:           movn #45   
500 [0x1f4]:           pushobj   
501 [0x1f5]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
502 [0x1f6]:           jmp @1405   
503 [0x1f7]:           movl 0   
504 [0x1f8]:           movn #7   
506 [0x1fa]:           movi #0, adx   
508 [0x1fc]:           iaload ebx, adx   
509 [0x1fd]:           rstore ebx   
510 [0x1fe]:           movi #93, ebx   
512 [0x200]:           loadval ecx   
513 [0x201]:           test ecx, ebx   
514 [0x202]:           movr ebx, cmt   
515 [0x203]:           movr cmt, ebx   
516 [0x204]:           jne 524   
517 [0x205]: line: 102 pushl 0   
518 [0x206]:           movg @93 // @main.frontend.tokenizer#token_type   
519 [0x207]:           movn #46   
521 [0x209]:           pushobj   
522 [0x20a]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
523 [0x20b]:           jmp @1405   
524 [0x20c]:           movl 0   
525 [0x20d]:           movn #7   
527 [0x20f]:           movi #0, adx   
529 [0x211]:           iaload ebx, adx   
530 [0x212]:           rstore ebx   
531 [0x213]:           movi #44, ebx   
533 [0x215]:           loadval ecx   
534 [0x216]:           test ecx, ebx   
535 [0x217]:           movr ebx, cmt   
536 [0x218]:           movr cmt, ebx   
537 [0x219]:           jne 545   
538 [0x21a]: line: 103 pushl 0   
539 [0x21b]:           movg @93 // @main.frontend.tokenizer#token_type   
540 [0x21c]:           movn #19   
542 [0x21e]:           pushobj   
543 [0x21f]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
544 [0x220]:           jmp @1405   
545 [0x221]:           movl 0   
546 [0x222]:           movn #7   
548 [0x224]:           movi #0, adx   
550 [0x226]:           iaload ebx, adx   
551 [0x227]:           rstore ebx   
552 [0x228]:           movi #46, ebx   
554 [0x22a]:           loadval ecx   
555 [0x22b]:           test ecx, ebx   
556 [0x22c]:           movr ebx, cmt   
557 [0x22d]:           movr cmt, ebx   
558 [0x22e]:           jne 566   
559 [0x22f]: line: 104 pushl 0   
560 [0x230]:           movg @93 // @main.frontend.tokenizer#token_type   
561 [0x231]:           movn #8   
563 [0x233]:           pushobj   
564 [0x234]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
565 [0x235]:           jmp @1405   
566 [0x236]:           movl 0   
567 [0x237]:           movn #7   
569 [0x239]:           movi #0, adx   
571 [0x23b]:           iaload ebx, adx   
572 [0x23c]:           rstore ebx   
573 [0x23d]:           movi #59, ebx   
575 [0x23f]:           loadval ecx   
576 [0x240]:           test ecx, ebx   
577 [0x241]:           movr ebx, cmt   
578 [0x242]:           movr cmt, ebx   
579 [0x243]:           jne 587   
580 [0x244]: line: 105 pushl 0   
581 [0x245]:           movg @93 // @main.frontend.tokenizer#token_type   
582 [0x246]:           movn #16   
584 [0x248]:           pushobj   
585 [0x249]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
586 [0x24a]:           jmp @1405   
587 [0x24b]:           movl 0   
588 [0x24c]:           movn #7   
590 [0x24e]:           movi #0, adx   
592 [0x250]:           iaload ebx, adx   
593 [0x251]:           rstore ebx   
594 [0x252]:           movi #35, ebx   
596 [0x254]:           loadval ecx   
597 [0x255]:           test ecx, ebx   
598 [0x256]:           movr ebx, cmt   
599 [0x257]:           movr cmt, ebx   
600 [0x258]:           jne 608   
601 [0x259]: line: 106 pushl 0   
602 [0x25a]:           movg @93 // @main.frontend.tokenizer#token_type   
603 [0x25b]:           movn #7   
605 [0x25d]:           pushobj   
606 [0x25e]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
607 [0x25f]:           jmp @1405   
608 [0x260]:           movl 0   
609 [0x261]:           movn #7   
611 [0x263]:           movi #0, adx   
613 [0x265]:           iaload ebx, adx   
614 [0x266]:           rstore ebx   
615 [0x267]:           movi #63, ebx   
617 [0x269]:           loadval ecx   
618 [0x26a]:           test ecx, ebx   
619 [0x26b]:           movr ebx, cmt   
620 [0x26c]:           movr cmt, ebx   
621 [0x26d]:           jne 629   
622 [0x26e]: line: 107 pushl 0   
623 [0x26f]:           movg @93 // @main.frontend.tokenizer#token_type   
624 [0x270]:           movn #47   
626 [0x272]:           pushobj   
627 [0x273]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
628 [0x274]:           jmp @1405   
629 [0x275]:           movl 0   
630 [0x276]:           movn #7   
632 [0x278]:           movi #0, adx   
634 [0x27a]:           iaload ebx, adx   
635 [0x27b]:           rstore ebx   
636 [0x27c]:           movi #36, ebx   
638 [0x27e]:           loadval ecx   
639 [0x27f]:           test ecx, ebx   
640 [0x280]:           movr ebx, cmt   
641 [0x281]:           movr cmt, ebx   
642 [0x282]:           jne 650   
643 [0x283]: line: 108 pushl 0   
644 [0x284]:           movg @93 // @main.frontend.tokenizer#token_type   
645 [0x285]:           movn #51   
647 [0x287]:           pushobj   
648 [0x288]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
649 [0x289]:           jmp @1405   
650 [0x28a]:           movl 0   
651 [0x28b]:           movn #7   
653 [0x28d]:           movi #0, adx   
655 [0x28f]:           iaload ebx, adx   
656 [0x290]:           rstore ebx   
657 [0x291]:           movi #64, ebx   
659 [0x293]:           loadval ecx   
660 [0x294]:           test ecx, ebx   
661 [0x295]:           movr ebx, cmt   
662 [0x296]:           movr cmt, ebx   
663 [0x297]:           jne 671   
664 [0x298]: line: 109 pushl 0   
665 [0x299]:           movg @93 // @main.frontend.tokenizer#token_type   
666 [0x29a]:           movn #52   
668 [0x29c]:           pushobj   
669 [0x29d]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
670 [0x29e]:           jmp @1405   
671 [0x29f]:           movl 0   
672 [0x2a0]:           movn #7   
674 [0x2a2]:           movi #0, adx   
676 [0x2a4]:           iaload ebx, adx   
677 [0x2a5]:           rstore ebx   
678 [0x2a6]:           movi #33, ebx   
680 [0x2a8]:           loadval ecx   
681 [0x2a9]:           test ecx, ebx   
682 [0x2aa]:           movr ebx, cmt   
683 [0x2ab]:           movr cmt, ebx   
684 [0x2ac]:           jne 702   
685 [0x2ad]: line: 110 pushl 0   
686 [0x2ae]:           pushl 0   
687 [0x2af]:           istore 61   
689 [0x2b1]:           call @3805 // <main.frontend.tokenizer#tokenizer.match>   
690 [0x2b2]:           loadval ebx   
691 [0x2b3]:           skne ebx // pc = 696   
692 [0x2b4]:           movg @93 // @main.frontend.tokenizer#token_type   
693 [0x2b5]:           movn #32   
695 [0x2b7]:           skip @3 // pc = 698   
696 [0x2b8]:           movg @93 // @main.frontend.tokenizer#token_type   
697 [0x2b9]:           movn #42   
699 [0x2bb]:           pushobj   
700 [0x2bc]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
701 [0x2bd]:           jmp @1405   
702 [0x2be]:           movl 0   
703 [0x2bf]:           movn #7   
705 [0x2c1]:           movi #0, adx   
707 [0x2c3]:           iaload ebx, adx   
708 [0x2c4]:           rstore ebx   
709 [0x2c5]:           movi #61, ebx   
711 [0x2c7]:           loadval ecx   
712 [0x2c8]:           test ecx, ebx   
713 [0x2c9]:           movr ebx, cmt   
714 [0x2ca]:           movr cmt, ebx   
715 [0x2cb]:           jne 733   
716 [0x2cc]: line: 111 pushl 0   
717 [0x2cd]:           pushl 0   
718 [0x2ce]:           istore 61   
720 [0x2d0]:           call @3805 // <main.frontend.tokenizer#tokenizer.match>   
721 [0x2d1]:           loadval ebx   
722 [0x2d2]:           skne ebx // pc = 727   
723 [0x2d3]:           movg @93 // @main.frontend.tokenizer#token_type   
724 [0x2d4]:           movn #23   
726 [0x2d6]:           skip @3 // pc = 729   
727 [0x2d7]:           movg @93 // @main.frontend.tokenizer#token_type   
728 [0x2d8]:           movn #43   
730 [0x2da]:           pushobj   
731 [0x2db]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
732 [0x2dc]:           jmp @1405   
733 [0x2dd]:           movl 0   
734 [0x2de]:           movn #7   
736 [0x2e0]:           movi #0, adx   
738 [0x2e2]:           iaload ebx, adx   
739 [0x2e3]:           rstore ebx   
740 [0x2e4]:           movi #58, ebx   
742 [0x2e6]:           loadval ecx   
743 [0x2e7]:           test ecx, ebx   
744 [0x2e8]:           movr ebx, cmt   
745 [0x2e9]:           movr cmt, ebx   
746 [0x2ea]:           jne 764   
747 [0x2eb]: line: 112 pushl 0   
748 [0x2ec]:           pushl 0   
749 [0x2ed]:           istore 61   
751 [0x2ef]:           call @3805 // <main.frontend.tokenizer#tokenizer.match>   
752 [0x2f0]:           loadval ebx   
753 [0x2f1]:           skne ebx // pc = 758   
754 [0x2f2]:           movg @93 // @main.frontend.tokenizer#token_type   
755 [0x2f3]:           movn #44   
757 [0x2f5]:           skip @3 // pc = 760   
758 [0x2f6]:           movg @93 // @main.frontend.tokenizer#token_type   
759 [0x2f7]:           movn #15   
761 [0x2f9]:           pushobj   
762 [0x2fa]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
763 [0x2fb]:           jmp @1405   
764 [0x2fc]:           movl 0   
765 [0x2fd]:           movn #7   
767 [0x2ff]:           movi #0, adx   
769 [0x301]:           iaload ebx, adx   
770 [0x302]:           rstore ebx   
771 [0x303]:           movi #60, ebx   
773 [0x305]:           loadval ecx   
774 [0x306]:           test ecx, ebx   
775 [0x307]:           movr ebx, cmt   
776 [0x308]:           movr cmt, ebx   
777 [0x309]:           jne 810   
778 [0x30a]: line: 114 pushl 0   
779 [0x30b]:           istore 60   
781 [0x30d]:           call @3805 // <main.frontend.tokenizer#tokenizer.match>   
782 [0x30e]:           loadval ebx   
783 [0x30f]:           movr cmt, ebx   
784 [0x310]:           jne 792   
785 [0x311]: line: 115 pushl 0   
786 [0x312]:           movg @93 // @main.frontend.tokenizer#token_type   
787 [0x313]:           movn #33   
789 [0x315]:           pushobj   
790 [0x316]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
791 [0x317]:           jmp @808   
792 [0x318]: line: 117 pushl 0   
793 [0x319]:           pushl 0   
794 [0x31a]:           istore 61   
796 [0x31c]:           call @3805 // <main.frontend.tokenizer#tokenizer.match>   
797 [0x31d]:           loadval ebx   
798 [0x31e]:           skne ebx // pc = 803   
799 [0x31f]:           movg @93 // @main.frontend.tokenizer#token_type   
800 [0x320]:           movn #21   
802 [0x322]:           skip @3 // pc = 805   
803 [0x323]:           movg @93 // @main.frontend.tokenizer#token_type   
804 [0x324]:           movn #35   
806 [0x326]:           pushobj   
807 [0x327]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
808 [0x328]:           nop   
809 [0x329]:           jmp @1405   
810 [0x32a]:           movl 0   
811 [0x32b]:           movn #7   
813 [0x32d]:           movi #0, adx   
815 [0x32f]:           iaload ebx, adx   
816 [0x330]:           rstore ebx   
817 [0x331]:           movi #62, ebx   
819 [0x333]:           loadval ecx   
820 [0x334]:           test ecx, ebx   
821 [0x335]:           movr ebx, cmt   
822 [0x336]:           movr cmt, ebx   
823 [0x337]:           jne 856   
824 [0x338]: line: 121 pushl 0   
825 [0x339]:           istore 62   
827 [0x33b]:           call @3805 // <main.frontend.tokenizer#tokenizer.match>   
828 [0x33c]:           loadval ebx   
829 [0x33d]:           movr cmt, ebx   
830 [0x33e]:           jne 838   
831 [0x33f]: line: 122 pushl 0   
832 [0x340]:           movg @93 // @main.frontend.tokenizer#token_type   
833 [0x341]:           movn #34   
835 [0x343]:           pushobj   
836 [0x344]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
837 [0x345]:           jmp @854   
838 [0x346]: line: 124 pushl 0   
839 [0x347]:           pushl 0   
840 [0x348]:           istore 61   
842 [0x34a]:           call @3805 // <main.frontend.tokenizer#tokenizer.match>   
843 [0x34b]:           loadval ebx   
844 [0x34c]:           skne ebx // pc = 849   
845 [0x34d]:           movg @93 // @main.frontend.tokenizer#token_type   
846 [0x34e]:           movn #22   
848 [0x350]:           skip @3 // pc = 851   
849 [0x351]:           movg @93 // @main.frontend.tokenizer#token_type   
850 [0x352]:           movn #36   
852 [0x354]:           pushobj   
853 [0x355]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
854 [0x356]:           nop   
855 [0x357]:           jmp @1405   
856 [0x358]:           movl 0   
857 [0x359]:           movn #7   
859 [0x35b]:           movi #0, adx   
861 [0x35d]:           iaload ebx, adx   
862 [0x35e]:           rstore ebx   
863 [0x35f]:           movi #38, ebx   
865 [0x361]:           loadval ecx   
866 [0x362]:           test ecx, ebx   
867 [0x363]:           movr ebx, cmt   
868 [0x364]:           movr cmt, ebx   
869 [0x365]:           jne 902   
870 [0x366]: line: 128 pushl 0   
871 [0x367]:           istore 61   
873 [0x369]:           call @3805 // <main.frontend.tokenizer#tokenizer.match>   
874 [0x36a]:           loadval ebx   
875 [0x36b]:           movr cmt, ebx   
876 [0x36c]:           jne 884   
877 [0x36d]: line: 129 pushl 0   
878 [0x36e]:           movg @93 // @main.frontend.tokenizer#token_type   
879 [0x36f]:           movn #28   
881 [0x371]:           pushobj   
882 [0x372]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
883 [0x373]:           jmp @900   
884 [0x374]: line: 131 pushl 0   
885 [0x375]:           pushl 0   
886 [0x376]:           istore 38   
888 [0x378]:           call @3805 // <main.frontend.tokenizer#tokenizer.match>   
889 [0x379]:           loadval ebx   
890 [0x37a]:           skne ebx // pc = 895   
891 [0x37b]:           movg @93 // @main.frontend.tokenizer#token_type   
892 [0x37c]:           movn #38   
894 [0x37e]:           skip @3 // pc = 897   
895 [0x37f]:           movg @93 // @main.frontend.tokenizer#token_type   
896 [0x380]:           movn #37   
898 [0x382]:           pushobj   
899 [0x383]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
900 [0x384]:           nop   
901 [0x385]:           jmp @1405   
902 [0x386]:           movl 0   
903 [0x387]:           movn #7   
905 [0x389]:           movi #0, adx   
907 [0x38b]:           iaload ebx, adx   
908 [0x38c]:           rstore ebx   
909 [0x38d]:           movi #124, ebx   
911 [0x38f]:           loadval ecx   
912 [0x390]:           test ecx, ebx   
913 [0x391]:           movr ebx, cmt   
914 [0x392]:           movr cmt, ebx   
915 [0x393]:           jne 948   
916 [0x394]: line: 135 pushl 0   
917 [0x395]:           istore 61   
919 [0x397]:           call @3805 // <main.frontend.tokenizer#tokenizer.match>   
920 [0x398]:           loadval ebx   
921 [0x399]:           movr cmt, ebx   
922 [0x39a]:           jne 930   
923 [0x39b]: line: 136 pushl 0   
924 [0x39c]:           movg @93 // @main.frontend.tokenizer#token_type   
925 [0x39d]:           movn #29   
927 [0x39f]:           pushobj   
928 [0x3a0]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
929 [0x3a1]:           jmp @946   
930 [0x3a2]: line: 138 pushl 0   
931 [0x3a3]:           pushl 0   
932 [0x3a4]:           istore 124   
934 [0x3a6]:           call @3805 // <main.frontend.tokenizer#tokenizer.match>   
935 [0x3a7]:           loadval ebx   
936 [0x3a8]:           skne ebx // pc = 941   
937 [0x3a9]:           movg @93 // @main.frontend.tokenizer#token_type   
938 [0x3aa]:           movn #40   
940 [0x3ac]:           skip @3 // pc = 943   
941 [0x3ad]:           movg @93 // @main.frontend.tokenizer#token_type   
942 [0x3ae]:           movn #39   
944 [0x3b0]:           pushobj   
945 [0x3b1]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
946 [0x3b2]:           nop   
947 [0x3b3]:           jmp @1405   
948 [0x3b4]:           movl 0   
949 [0x3b5]:           movn #7   
951 [0x3b7]:           movi #0, adx   
953 [0x3b9]:           iaload ebx, adx   
954 [0x3ba]:           rstore ebx   
955 [0x3bb]:           movi #94, ebx   
957 [0x3bd]:           loadval ecx   
958 [0x3be]:           test ecx, ebx   
959 [0x3bf]:           movr ebx, cmt   
960 [0x3c0]:           movr cmt, ebx   
961 [0x3c1]:           jne 979   
962 [0x3c2]: line: 141 pushl 0   
963 [0x3c3]:           pushl 0   
964 [0x3c4]:           istore 61   
966 [0x3c6]:           call @3805 // <main.frontend.tokenizer#tokenizer.match>   
967 [0x3c7]:           loadval ebx   
968 [0x3c8]:           skne ebx // pc = 973   
969 [0x3c9]:           movg @93 // @main.frontend.tokenizer#token_type   
970 [0x3ca]:           movn #30   
972 [0x3cc]:           skip @3 // pc = 975   
973 [0x3cd]:           movg @93 // @main.frontend.tokenizer#token_type   
974 [0x3ce]:           movn #41   
976 [0x3d0]:           pushobj   
977 [0x3d1]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
978 [0x3d2]:           jmp @1405   
979 [0x3d3]:           movl 0   
980 [0x3d4]:           movn #7   
982 [0x3d6]:           movi #0, adx   
984 [0x3d8]:           iaload ebx, adx   
985 [0x3d9]:           rstore ebx   
986 [0x3da]:           movi #37, ebx   
988 [0x3dc]:           loadval ecx   
989 [0x3dd]:           test ecx, ebx   
990 [0x3de]:           movr ebx, cmt   
991 [0x3df]:           movr cmt, ebx   
992 [0x3e0]:           jne 1010   
993 [0x3e1]: line: 142 pushl 0   
994 [0x3e2]:           pushl 0   
995 [0x3e3]:           istore 61   
997 [0x3e5]:           call @3805 // <main.frontend.tokenizer#tokenizer.match>   
998 [0x3e6]:           loadval ebx   
999 [0x3e7]:           skne ebx // pc = 1004   
1000 [0x3e8]:           movg @93 // @main.frontend.tokenizer#token_type   
1001 [0x3e9]:           movn #31   
1003 [0x3eb]:           skip @3 // pc = 1006   
1004 [0x3ec]:           movg @93 // @main.frontend.tokenizer#token_type   
1005 [0x3ed]:           movn #14   
1007 [0x3ef]:           pushobj   
1008 [0x3f0]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
1009 [0x3f1]:           jmp @1405   
1010 [0x3f2]:           movl 0   
1011 [0x3f3]:           movn #7   
1013 [0x3f5]:           movi #0, adx   
1015 [0x3f7]:           iaload ebx, adx   
1016 [0x3f8]:           rstore ebx   
1017 [0x3f9]:           movi #43, ebx   
1019 [0x3fb]:           loadval ecx   
1020 [0x3fc]:           test ecx, ebx   
1021 [0x3fd]:           movr ebx, cmt   
1022 [0x3fe]:           movr cmt, ebx   
1023 [0x3ff]:           jne 1056   
1024 [0x400]: line: 144 pushl 0   
1025 [0x401]:           istore 61   
1027 [0x403]:           call @3805 // <main.frontend.tokenizer#tokenizer.match>   
1028 [0x404]:           loadval ebx   
1029 [0x405]:           movr cmt, ebx   
1030 [0x406]:           jne 1038   
1031 [0x407]: line: 145 pushl 0   
1032 [0x408]:           movg @93 // @main.frontend.tokenizer#token_type   
1033 [0x409]:           movn #24   
1035 [0x40b]:           pushobj   
1036 [0x40c]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
1037 [0x40d]:           jmp @1054   
1038 [0x40e]: line: 147 pushl 0   
1039 [0x40f]:           pushl 0   
1040 [0x410]:           istore 43   
1042 [0x412]:           call @3805 // <main.frontend.tokenizer#tokenizer.match>   
1043 [0x413]:           loadval ebx   
1044 [0x414]:           skne ebx // pc = 1049   
1045 [0x415]:           movg @93 // @main.frontend.tokenizer#token_type   
1046 [0x416]:           movn #49   
1048 [0x418]:           skip @3 // pc = 1051   
1049 [0x419]:           movg @93 // @main.frontend.tokenizer#token_type   
1050 [0x41a]:           movn #9   
1052 [0x41c]:           pushobj   
1053 [0x41d]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
1054 [0x41e]:           nop   
1055 [0x41f]:           jmp @1405   
1056 [0x420]:           movl 0   
1057 [0x421]:           movn #7   
1059 [0x423]:           movi #0, adx   
1061 [0x425]:           iaload ebx, adx   
1062 [0x426]:           rstore ebx   
1063 [0x427]:           movi #45, ebx   
1065 [0x429]:           loadval ecx   
1066 [0x42a]:           test ecx, ebx   
1067 [0x42b]:           movr ebx, cmt   
1068 [0x42c]:           movr cmt, ebx   
1069 [0x42d]:           jne 1116   
1070 [0x42e]: line: 151 pushl 0   
1071 [0x42f]:           istore 61   
1073 [0x431]:           call @3805 // <main.frontend.tokenizer#tokenizer.match>   
1074 [0x432]:           loadval ebx   
1075 [0x433]:           movr cmt, ebx   
1076 [0x434]:           jne 1084   
1077 [0x435]: line: 152 pushl 0   
1078 [0x436]:           movg @93 // @main.frontend.tokenizer#token_type   
1079 [0x437]:           movn #25   
1081 [0x439]:           pushobj   
1082 [0x43a]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
1083 [0x43b]:           jmp @1114   
1084 [0x43c]:           pushl 0   
1085 [0x43d]:           istore 62   
1087 [0x43f]:           call @3805 // <main.frontend.tokenizer#tokenizer.match>   
1088 [0x440]:           loadval ebx   
1089 [0x441]:           movr cmt, ebx   
1090 [0x442]:           jne 1098   
1091 [0x443]: line: 154 pushl 0   
1092 [0x444]:           movg @93 // @main.frontend.tokenizer#token_type   
1093 [0x445]:           movn #48   
1095 [0x447]:           pushobj   
1096 [0x448]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
1097 [0x449]:           jmp @1114   
1098 [0x44a]: line: 156 pushl 0   
1099 [0x44b]:           pushl 0   
1100 [0x44c]:           istore 45   
1102 [0x44e]:           call @3805 // <main.frontend.tokenizer#tokenizer.match>   
1103 [0x44f]:           loadval ebx   
1104 [0x450]:           skne ebx // pc = 1109   
1105 [0x451]:           movg @93 // @main.frontend.tokenizer#token_type   
1106 [0x452]:           movn #50   
1108 [0x454]:           skip @3 // pc = 1111   
1109 [0x455]:           movg @93 // @main.frontend.tokenizer#token_type   
1110 [0x456]:           movn #10   
1112 [0x458]:           pushobj   
1113 [0x459]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
1114 [0x45a]:           nop   
1115 [0x45b]:           jmp @1405   
1116 [0x45c]:           movl 0   
1117 [0x45d]:           movn #7   
1119 [0x45f]:           movi #0, adx   
1121 [0x461]:           iaload ebx, adx   
1122 [0x462]:           rstore ebx   
1123 [0x463]:           movi #42, ebx   
1125 [0x465]:           loadval ecx   
1126 [0x466]:           test ecx, ebx   
1127 [0x467]:           movr ebx, cmt   
1128 [0x468]:           movr cmt, ebx   
1129 [0x469]:           jne 1166   
1130 [0x46a]: line: 160 pushl 0   
1131 [0x46b]:           istore 61   
1133 [0x46d]:           call @3805 // <main.frontend.tokenizer#tokenizer.match>   
1134 [0x46e]:           loadval ebx   
1135 [0x46f]:           movr cmt, ebx   
1136 [0x470]:           jne 1144   
1137 [0x471]: line: 161 pushl 0   
1138 [0x472]:           movg @93 // @main.frontend.tokenizer#token_type   
1139 [0x473]:           movn #26   
1141 [0x475]:           pushobj   
1142 [0x476]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
1143 [0x477]:           jmp @1164   
1144 [0x478]:           pushl 0   
1145 [0x479]:           istore 42   
1147 [0x47b]:           call @3805 // <main.frontend.tokenizer#tokenizer.match>   
1148 [0x47c]:           loadval ebx   
1149 [0x47d]:           movr cmt, ebx   
1150 [0x47e]:           jne 1158   
1151 [0x47f]: line: 163 pushl 0   
1152 [0x480]:           movg @93 // @main.frontend.tokenizer#token_type   
1153 [0x481]:           movn #12   
1155 [0x483]:           pushobj   
1156 [0x484]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
1157 [0x485]:           jmp @1164   
1158 [0x486]: line: 165 pushl 0   
1159 [0x487]:           movg @93 // @main.frontend.tokenizer#token_type   
1160 [0x488]:           movn #11   
1162 [0x48a]:           pushobj   
1163 [0x48b]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
1164 [0x48c]:           nop   
1165 [0x48d]:           jmp @1405   
1166 [0x48e]:           movl 0   
1167 [0x48f]:           movn #7   
1169 [0x491]:           movi #0, adx   
1171 [0x493]:           iaload ebx, adx   
1172 [0x494]:           rstore ebx   
1173 [0x495]:           movi #47, ebx   
1175 [0x497]:           loadval ecx   
1176 [0x498]:           test ecx, ebx   
1177 [0x499]:           movr ebx, cmt   
1178 [0x49a]:           movr cmt, ebx   
1179 [0x49b]:           jne 1294   
1180 [0x49c]: line: 169 pushl 0   
1181 [0x49d]:           istore 47   
1183 [0x49f]:           call @3805 // <main.frontend.tokenizer#tokenizer.match>   
1184 [0x4a0]:           loadval ebx   
1185 [0x4a1]:           movr cmt, ebx   
1186 [0x4a2]:           jne 1208   
1187 [0x4a3]: line: 171 pushl 0   
1188 [0x4a4]:           istore 1   
1190 [0x4a6]:           call @3817 // <main.frontend.tokenizer#tokenizer.peek>   
1191 [0x4a7]:           call @3210 // <std#char.is_newline>   
1192 [0x4a8]:           loadval ebx   
1193 [0x4a9]:           not ebx, ebx   
1194 [0x4aa]:           skne ebx // pc = 1202   
1195 [0x4ab]:           movl 0   
1196 [0x4ac]:           movn #9   
1198 [0x4ae]:           movi #0, adx   
1200 [0x4b0]:           iaload ebx, adx   
1201 [0x4b1]:           not ebx, ebx   
1202 [0x4b2]:           movr cmt, ebx   
1203 [0x4b3]:           jne 1207   
1204 [0x4b4]:           pushl 0   
1205 [0x4b5]:           call @3814 // <main.frontend.tokenizer#tokenizer.advance>   
1206 [0x4b6]:           jmp @1187   
1207 [0x4b7]:           jmp @1292   
1208 [0x4b8]:           pushl 0   
1209 [0x4b9]:           istore 42   
1211 [0x4bb]:           call @3805 // <main.frontend.tokenizer#tokenizer.match>   
1212 [0x4bc]:           loadval ebx   
1213 [0x4bd]:           movr cmt, ebx   
1214 [0x4be]:           jne 1271   
1215 [0x4bf]: line: 174 movl 0   
1216 [0x4c0]:           movn #9   
1218 [0x4c2]:           movi #0, adx   
1220 [0x4c4]:           iaload ebx, adx   
1221 [0x4c5]:           not ebx, ebx   
1222 [0x4c6]:           skne ebx // pc = 1249   
1223 [0x4c7]:           movl 0   
1224 [0x4c8]:           movn #7   
1226 [0x4ca]:           movi #0, adx   
1228 [0x4cc]:           iaload ebx, adx   
1229 [0x4cd]:           rstore ebx   
1230 [0x4ce]:           movi #42, ebx   
1232 [0x4d0]:           loadval ecx   
1233 [0x4d1]:           test ecx, ebx   
1234 [0x4d2]:           movr ebx, cmt   
1235 [0x4d3]:           skne ebx // pc = 1248   
1236 [0x4d4]:           movl 0   
1237 [0x4d5]:           pushobj   
1238 [0x4d6]:           istore 1   
1240 [0x4d8]:           call @3817 // <main.frontend.tokenizer#tokenizer.peek>   
1241 [0x4d9]:           loadval ebx   
1242 [0x4da]:           rstore ebx   
1243 [0x4db]:           movi #47, ebx   
1245 [0x4dd]:           loadval ecx   
1246 [0x4de]:           test ecx, ebx   
1247 [0x4df]:           movr ebx, cmt   
1248 [0x4e0]:           not ebx, ebx   
1249 [0x4e1]:           movr cmt, ebx   
1250 [0x4e2]:           jne 1268   
1251 [0x4e3]: line: 176 movl 0   
1252 [0x4e4]:           movn #7   
1254 [0x4e6]:           movi #0, adx   
1256 [0x4e8]:           iaload ebx, adx   
1257 [0x4e9]:           rstore ebx   
1258 [0x4ea]:           call @3210 // <std#char.is_newline>   
1259 [0x4eb]:           loadval ebx   
1260 [0x4ec]:           movr cmt, ebx   
1261 [0x4ed]:           jne 1264   
1262 [0x4ee]: line: 177 pushl 0   
1263 [0x4ef]:           call @3813 // <main.frontend.tokenizer#tokenizer.newline>   
1264 [0x4f0]:           nop   
1265 [0x4f1]: line: 180 pushl 0   
1266 [0x4f2]:           call @3814 // <main.frontend.tokenizer#tokenizer.advance>   
1267 [0x4f3]:           jmp @1215   
1268 [0x4f4]: line: 182 pushl 0   
1269 [0x4f5]:           call @3814 // <main.frontend.tokenizer#tokenizer.advance>   
1270 [0x4f6]:           jmp @1292   
1271 [0x4f7]: line: 184 pushl 0   
1272 [0x4f8]:           istore 61   
1274 [0x4fa]:           call @3805 // <main.frontend.tokenizer#tokenizer.match>   
1275 [0x4fb]:           loadval ebx   
1276 [0x4fc]:           movr cmt, ebx   
1277 [0x4fd]:           jne 1285   
1278 [0x4fe]: line: 185 pushl 0   
1279 [0x4ff]:           movg @93 // @main.frontend.tokenizer#token_type   
1280 [0x500]:           movn #27   
1282 [0x502]:           pushobj   
1283 [0x503]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
1284 [0x504]:           jmp @1291   
1285 [0x505]: line: 187 pushl 0   
1286 [0x506]:           movg @93 // @main.frontend.tokenizer#token_type   
1287 [0x507]:           movn #13   
1289 [0x509]:           pushobj   
1290 [0x50a]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
1291 [0x50b]:           nop   
1292 [0x50c]:           nop   
1293 [0x50d]:           jmp @1405   
1294 [0x50e]:           movl 0   
1295 [0x50f]:           movn #7   
1297 [0x511]:           movi #0, adx   
1299 [0x513]:           iaload ebx, adx   
1300 [0x514]:           rstore ebx   
1301 [0x515]:           movi #34, ebx   
1303 [0x517]:           loadval ecx   
1304 [0x518]:           test ecx, ebx   
1305 [0x519]:           movr ebx, cmt   
1306 [0x51a]:           movr cmt, ebx   
1307 [0x51b]:           jne 1316   
1308 [0x51c]: line: 192 pushl 0   
1309 [0x51d]:           call @3809 // <main.frontend.tokenizer#tokenizer.parse_string>   
1310 [0x51e]:           loadval ebx   
1311 [0x51f]:           movr cmt, ebx   
1312 [0x520]:           jne 1314   
1313 [0x521]: line: 193 jmp @51   
1314 [0x522]:           nop   
1315 [0x523]:           jmp @1405   
1316 [0x524]:           movl 0   
1317 [0x525]:           movn #7   
1319 [0x527]:           movi #0, adx   
1321 [0x529]:           iaload ebx, adx   
1322 [0x52a]:           rstore ebx   
1323 [0x52b]:           movi #39, ebx   
1325 [0x52d]:           loadval ecx   
1326 [0x52e]:           test ecx, ebx   
1327 [0x52f]:           movr ebx, cmt   
1328 [0x530]:           movr cmt, ebx   
1329 [0x531]:           jne 1333   
1330 [0x532]: line: 197 pushl 0   
1331 [0x533]:           call @3806 // <main.frontend.tokenizer#tokenizer.parse_char>   
1332 [0x534]:           jmp @1405   
1333 [0x535]:           movl 0   
1334 [0x536]:           movn #7   
1336 [0x538]:           movi #0, adx   
1338 [0x53a]:           iaload ebx, adx   
1339 [0x53b]:           rstore ebx   
1340 [0x53c]:           movi #48, ebx   
1342 [0x53e]:           loadval ecx   
1343 [0x53f]:           gte ecx, ebx   
1344 [0x540]:           movr ebx, cmt   
1345 [0x541]:           skne ebx // pc = 1358   
1346 [0x542]:           movl 0   
1347 [0x543]:           movn #7   
1349 [0x545]:           movi #0, adx   
1351 [0x547]:           iaload ebx, adx   
1352 [0x548]:           rstore ebx   
1353 [0x549]:           movi #57, ebx   
1355 [0x54b]:           loadval ecx   
1356 [0x54c]:           lte ecx, ebx   
1357 [0x54d]:           movr ebx, cmt   
1358 [0x54e]:           movr cmt, ebx   
1359 [0x54f]:           jne 1363   
1360 [0x550]: line: 201 pushl 0   
1361 [0x551]:           call @3808 // <main.frontend.tokenizer#tokenizer.parse_number>   
1362 [0x552]:           jmp @1405   
1363 [0x553]: line: 205 movl 0   
1364 [0x554]:           movn #1   
1366 [0x556]:           pushobj   
1367 [0x557]:           movg @84 // @main.frontend#compiler_error   
1368 [0x558]:           movn #0   
1370 [0x55a]:           pushobj   
1371 [0x55b]:           movl 0   
1372 [0x55c]:           movn #8   
1374 [0x55e]:           movi #0, adx   
1376 [0x560]:           iaload ebx, adx   
1377 [0x561]:           rstore ebx   
1378 [0x562]:           movl 0   
1379 [0x563]:           movn #10   
1381 [0x565]:           movi #0, adx   
1383 [0x567]:           iaload ebx, adx   
1384 [0x568]:           rstore ebx   
1385 [0x569]:           new_class @75 // std#string   
1387 [0x56b]:           dup    
1388 [0x56c]:           newstr @146 //  `   
1389 [0x56d]:           call @3546 // <std#string.string>   
1390 [0x56e]:           new_class @60 // std#char   
1392 [0x570]:           dup    
1393 [0x571]:           movl 0   
1394 [0x572]:           movn #7   
1396 [0x574]:           movi #0, adx   
1398 [0x576]:           iaload ebx, adx   
1399 [0x577]:           rstore ebx   
1400 [0x578]:           call @3119 // <std#char.char>   
1401 [0x579]:           call @3560 // <std#string.operator+>   
1402 [0x57a]:           newstr @147 // `   
1403 [0x57b]:           call @3558 // <std#string.operator+>   
1404 [0x57c]:           call @3743 // <main.frontend#error_manager.new_error>   
1405 [0x57d]:           nop   
1406 [0x57e]: line: 209 pushl 0   
1407 [0x57f]:           call @3814 // <main.frontend.tokenizer#tokenizer.advance>   
1408 [0x580]:           jmp @51   
1409 [0x581]: line: 217 new_class @75 // std#string   
1411 [0x583]:           dup    
1412 [0x584]:           newstr @148 // errors    
1413 [0x585]:           call @3546 // <std#string.string>   
1414 [0x586]:           movl 0   
1415 [0x587]:           movn #1   
1417 [0x589]:           pushobj   
1418 [0x58a]:           call @3737 // <main.frontend#error_manager.get_raw_error_count>   
1419 [0x58b]:           call @3578 // <std#string.operator+>   
1420 [0x58c]:           call @1919 // <std#__srt_global.println>   
1421 [0x58d]: line: 218 new_class @75 // std#string   
1423 [0x58f]:           dup    
1424 [0x590]:           newstr @149 // tokens    
1425 [0x591]:           call @3546 // <std#string.string>   
1426 [0x592]:           movl 0   
1427 [0x593]:           movn #0   
1429 [0x595]:           pushobj   
1430 [0x596]:           call @4060 // <std#list<main.frontend.tokenizer#token>.size>   
1431 [0x597]:           call @3578 // <std#string.operator+>   
1432 [0x598]:           call @1919 // <std#__srt_global.println>   
1433 [0x599]: line: 220 movl 0   
1434 [0x59a]: line: 221 movn #0   
1436 [0x59c]:           pushobj   
1437 [0x59d]:           new_class @90 // main.frontend.tokenizer#token   
1439 [0x59f]:           dup    
1440 [0x5a0]:           new_class @75 // std#string   
1442 [0x5a2]:           dup    
1443 [0x5a3]:           newstr @150 // eof   
1444 [0x5a4]:           call @3546 // <std#string.string>   
1445 [0x5a5]:           movg @91 // @main.frontend.tokenizer#token_id   
1446 [0x5a6]:           movn #13   
1448 [0x5a8]:           pushobj   
1449 [0x5a9]:           movg @93 // @main.frontend.tokenizer#token_type   
1450 [0x5aa]:           movn #53   
1452 [0x5ac]:           pushobj   
1453 [0x5ad]:           istore 0   
1455 [0x5af]:           movl 0   
1456 [0x5b0]:           movn #8   
1458 [0x5b2]:           movi #0, adx   
1460 [0x5b4]:           iaload ebx, adx   
1461 [0x5b5]:           rstore ebx   
1462 [0x5b6]:           call @3785 // <main.frontend.tokenizer#token.token>   
1463 [0x5b7]:           call @4055 // <std#list<main.frontend.tokenizer#token>.add>   
1464 [0x5b8]:           ret   


function: main.frontend.tokenizer#tokenizer.add_token[3803] params(1) in file: lib\support\/bootstrap//frontend//tokenizer//tokenizer.sharp:224:16: note:  
		    private def add_token(id: token_id) {
		               ^

0 [0x0]: line: 225 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           new_class @90 // main.frontend.tokenizer#token   
6 [0x6]:           dup    
7 [0x7]:           movl 0   
8 [0x8]:           movn #3   
10 [0xa]:           pushobj   
11 [0xb]:           movl 0   
12 [0xc]:           movn #6   
14 [0xe]:           movi #0, adx   
16 [0x10]:           iaload ebx, adx   
17 [0x11]:           rstore ebx   
18 [0x12]:           movl 0   
19 [0x13]:           movn #5   
21 [0x15]:           movi #0, adx   
23 [0x17]:           iaload ebx, adx   
24 [0x18]:           rstore ebx   
25 [0x19]:           movi #1, ebx   
27 [0x1b]:           loadval ecx   
28 [0x1c]:           add ecx, ebx -> ebx   
29 [0x1d]:           rstore ebx   
30 [0x1e]:           call @3601 // <std#string.substring>   
31 [0x1f]:           pushl 1   
32 [0x20]:           movl 0   
33 [0x21]:           movn #10   
35 [0x23]:           movi #0, adx   
37 [0x25]:           iaload ebx, adx   
38 [0x26]:           rstore ebx   
39 [0x27]:           movl 0   
40 [0x28]:           movn #8   
42 [0x2a]:           movi #0, adx   
44 [0x2c]:           iaload ebx, adx   
45 [0x2d]:           rstore ebx   
46 [0x2e]:           call @3786 // <main.frontend.tokenizer#token.token>   
47 [0x2f]:           call @4055 // <std#list<main.frontend.tokenizer#token>.add>   
48 [0x30]:           ret   


function: main.frontend.tokenizer#tokenizer.add_token[3804] params(1) in file: lib\support\/bootstrap//frontend//tokenizer//tokenizer.sharp:228:16: note:  
		    private def add_token(type: token_type) {
		               ^

0 [0x0]: line: 229 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           new_class @90 // main.frontend.tokenizer#token   
6 [0x6]:           dup    
7 [0x7]:           movl 0   
8 [0x8]:           movn #3   
10 [0xa]:           pushobj   
11 [0xb]:           movl 0   
12 [0xc]:           movn #6   
14 [0xe]:           movi #0, adx   
16 [0x10]:           iaload ebx, adx   
17 [0x11]:           rstore ebx   
18 [0x12]:           movl 0   
19 [0x13]:           movn #5   
21 [0x15]:           movi #0, adx   
23 [0x17]:           iaload ebx, adx   
24 [0x18]:           rstore ebx   
25 [0x19]:           movi #1, ebx   
27 [0x1b]:           loadval ecx   
28 [0x1c]:           add ecx, ebx -> ebx   
29 [0x1d]:           rstore ebx   
30 [0x1e]:           call @3601 // <std#string.substring>   
31 [0x1f]:           movg @91 // @main.frontend.tokenizer#token_id   
32 [0x20]:           movn #13   
34 [0x22]:           pushobj   
35 [0x23]:           pushl 1   
36 [0x24]:           movl 0   
37 [0x25]:           movn #10   
39 [0x27]:           movi #0, adx   
41 [0x29]:           iaload ebx, adx   
42 [0x2a]:           rstore ebx   
43 [0x2b]:           movl 0   
44 [0x2c]:           movn #8   
46 [0x2e]:           movi #0, adx   
48 [0x30]:           iaload ebx, adx   
49 [0x31]:           rstore ebx   
50 [0x32]:           call @3785 // <main.frontend.tokenizer#token.token>   
51 [0x33]:           call @4055 // <std#list<main.frontend.tokenizer#token>.add>   
52 [0x34]:           ret   


function: main.frontend.tokenizer#tokenizer.match[3805] params(1) in file: lib\support\/bootstrap//frontend//tokenizer//tokenizer.sharp:232:16: note:  
		    private def match(c: var) : var {
		               ^

0 [0x0]: line: 233 pushl 0   
1 [0x1]:           istore 1   
3 [0x3]:           call @3817 // <main.frontend.tokenizer#tokenizer.peek>   
4 [0x4]:           loadval ebx   
5 [0x5]:           rstore ebx   
6 [0x6]:           loadl ebx, fp+1   
7 [0x7]:           loadval ecx   
8 [0x8]:           test ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           movr cmt, ebx   
11 [0xb]:           jne 17   
12 [0xc]: line: 234 pushl 0   
13 [0xd]:           call @3814 // <main.frontend.tokenizer#tokenizer.advance>   
14 [0xe]: line: 235 istorel 1, fp+0   
16 [0x10]:           ret   
17 [0x11]:           nop   
18 [0x12]: line: 238 istorel 0, fp+0   
20 [0x14]:           ret   


function: main.frontend.tokenizer#tokenizer.parse_char[3806] params(0) in file: lib\support\/bootstrap//frontend//tokenizer//tokenizer.sharp:241:16: note:  
		    private def parse_char() {
		               ^

0 [0x0]: line: 242 pushl 0   
1 [0x1]:           call @3816 // <main.frontend.tokenizer#tokenizer.tokens_left>   
2 [0x2]:           loadval ebx   
3 [0x3]:           rstore ebx   
4 [0x4]:           movi #2, ebx   
6 [0x6]:           loadval ecx   
7 [0x7]:           lt ecx, ebx   
8 [0x8]:           movr ebx, cmt   
9 [0x9]:           movr cmt, ebx   
10 [0xa]:           jne 37   
11 [0xb]: line: 244 movl 0   
12 [0xc]:           movn #1   
14 [0xe]:           pushobj   
15 [0xf]:           movg @84 // @main.frontend#compiler_error   
16 [0x10]:           movn #5   
18 [0x12]:           pushobj   
19 [0x13]:           movl 0   
20 [0x14]:           movn #8   
22 [0x16]:           movi #0, adx   
24 [0x18]:           iaload ebx, adx   
25 [0x19]:           rstore ebx   
26 [0x1a]:           movl 0   
27 [0x1b]:           movn #10   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           iaload ebx, adx   
32 [0x20]:           rstore ebx   
33 [0x21]:           call @3744 // <main.frontend#error_manager.new_error>   
34 [0x22]: line: 245 pushl 0   
35 [0x23]:           call @3814 // <main.frontend.tokenizer#tokenizer.advance>   
36 [0x24]: line: 246 ret   
37 [0x25]:           nop   
38 [0x26]: line: 248 pushl 0   
39 [0x27]:           call @3814 // <main.frontend.tokenizer#tokenizer.advance>   
40 [0x28]: line: 250 movl 0   
41 [0x29]:           movn #5   
43 [0x2b]:           movi #0, adx   
45 [0x2d]:           iaload ebx, adx   
46 [0x2e]:           movl 0   
47 [0x2f]:           movn #6   
49 [0x31]:           movi #0, adx   
51 [0x33]:           rmov adx, ebx   
52 [0x34]: line: 251 istorel 0, fp+1   
54 [0x36]: line: 252 istorel 0, fp+2   
56 [0x38]: line: 253 istorel 0, fp+3   
58 [0x3a]: line: 255 movl 0   
59 [0x3b]:           movn #9   
61 [0x3d]:           movi #0, adx   
63 [0x3f]:           iaload ebx, adx   
64 [0x40]:           not ebx, ebx   
65 [0x41]:           movr cmt, ebx   
66 [0x42]:           jne 298   
67 [0x43]: line: 257 loadl ebx, fp+2   
68 [0x44]:           not ebx, ebx   
69 [0x45]:           skne ebx // pc = 82   
70 [0x46]:           movi #92, ebx   
72 [0x48]:           rstore ebx   
73 [0x49]:           movl 0   
74 [0x4a]:           movn #7   
76 [0x4c]:           movi #0, adx   
78 [0x4e]:           iaload ebx, adx   
79 [0x4f]:           loadval ecx   
80 [0x50]:           test ecx, ebx   
81 [0x51]:           movr ebx, cmt   
82 [0x52]:           movr cmt, ebx   
83 [0x53]:           jne 125   
84 [0x54]: line: 259 loadl ebx, fp+3   
85 [0x55]:           movr cmt, ebx   
86 [0x56]:           jne 116   
87 [0x57]: line: 261 movl 0   
88 [0x58]:           movn #1   
90 [0x5a]:           pushobj   
91 [0x5b]:           movg @84 // @main.frontend#compiler_error   
92 [0x5c]:           movn #6   
94 [0x5e]:           pushobj   
95 [0x5f]:           movl 0   
96 [0x60]:           movn #8   
98 [0x62]:           movi #0, adx   
100 [0x64]:           iaload ebx, adx   
101 [0x65]:           rstore ebx   
102 [0x66]:           movl 0   
103 [0x67]:           movn #10   
105 [0x69]:           movi #0, adx   
107 [0x6b]:           iaload ebx, adx   
108 [0x6c]:           rstore ebx   
109 [0x6d]:           new_class @75 // std#string   
111 [0x6f]:           dup    
112 [0x70]:           newstr @151 // , a character literal cannot contain more than a single character; expected `'`   
113 [0x71]:           call @3546 // <std#string.string>   
114 [0x72]:           call @3743 // <main.frontend#error_manager.new_error>   
115 [0x73]: line: 262 ret   
116 [0x74]:           nop   
117 [0x75]: line: 265 istorel 1, fp+1   
119 [0x77]: line: 266 istorel 1, fp+2   
121 [0x79]: line: 267 pushl 0   
122 [0x7a]:           call @3814 // <main.frontend.tokenizer#tokenizer.advance>   
123 [0x7b]: line: 268 jmp @58   
124 [0x7c]:           jmp @294   
125 [0x7d]:           loadl ebx, fp+2   
126 [0x7e]:           not ebx, ebx   
127 [0x7f]:           movr cmt, ebx   
128 [0x80]:           jne 180   
129 [0x81]: line: 272 istore 39   
131 [0x83]:           movl 0   
132 [0x84]:           movn #7   
134 [0x86]:           movi #0, adx   
136 [0x88]:           iaload ebx, adx   
137 [0x89]:           loadval ecx   
138 [0x8a]:           test ecx, ebx   
139 [0x8b]:           movr ebx, cmt   
140 [0x8c]:           movr cmt, ebx   
141 [0x8d]:           jne 143   
142 [0x8e]: line: 273 jmp @298   
143 [0x8f]:           nop   
144 [0x90]: line: 275 loadl ebx, fp+3   
145 [0x91]:           movr cmt, ebx   
146 [0x92]:           jne 176   
147 [0x93]: line: 277 movl 0   
148 [0x94]:           movn #1   
150 [0x96]:           pushobj   
151 [0x97]:           movg @84 // @main.frontend#compiler_error   
152 [0x98]:           movn #6   
154 [0x9a]:           pushobj   
155 [0x9b]:           movl 0   
156 [0x9c]:           movn #8   
158 [0x9e]:           movi #0, adx   
160 [0xa0]:           iaload ebx, adx   
161 [0xa1]:           rstore ebx   
162 [0xa2]:           movl 0   
163 [0xa3]:           movn #10   
165 [0xa5]:           movi #0, adx   
167 [0xa7]:           iaload ebx, adx   
168 [0xa8]:           rstore ebx   
169 [0xa9]:           new_class @75 // std#string   
171 [0xab]:           dup    
172 [0xac]:           newstr @151 // , a character literal cannot contain more than a single character; expected `'`   
173 [0xad]:           call @3546 // <std#string.string>   
174 [0xae]:           call @3743 // <main.frontend#error_manager.new_error>   
175 [0xaf]: line: 278 ret   
176 [0xb0]:           nop   
177 [0xb1]: line: 281 istorel 1, fp+3   
179 [0xb3]:           jmp @294   
180 [0xb4]:           loadl ebx, fp+2   
181 [0xb5]:           movr cmt, ebx   
182 [0xb6]:           jne 294   
183 [0xb7]: line: 285 istorel 1, fp+3   
185 [0xb9]: line: 286 movl 0   
186 [0xba]:           movn #7   
188 [0xbc]:           movi #0, adx   
190 [0xbe]:           iaload ebx, adx   
191 [0xbf]:           rstore ebx   
192 [0xc0]:           movi #48, ebx   
194 [0xc2]:           loadval ecx   
195 [0xc3]:           tne ecx, ebx   
196 [0xc4]:           movr ebx, cmt   
197 [0xc5]:           skne ebx // pc = 260   
198 [0xc6]:           movl 0   
199 [0xc7]:           movn #7   
201 [0xc9]:           movi #0, adx   
203 [0xcb]:           iaload ebx, adx   
204 [0xcc]:           rstore ebx   
205 [0xcd]:           movi #97, ebx   
207 [0xcf]:           loadval ecx   
208 [0xd0]:           tne ecx, ebx   
209 [0xd1]:           movr ebx, cmt   
210 [0xd2]:           skne ebx // pc = 260   
211 [0xd3]:           movl 0   
212 [0xd4]:           movn #7   
214 [0xd6]:           movi #0, adx   
216 [0xd8]:           iaload ebx, adx   
217 [0xd9]:           rstore ebx   
218 [0xda]:           call @3211 // <std#char.is_alpha>   
219 [0xdb]:           loadval ebx   
220 [0xdc]:           not ebx, ebx   
221 [0xdd]:           skne ebx // pc = 260   
222 [0xde]:           movl 0   
223 [0xdf]:           movn #7   
225 [0xe1]:           movi #0, adx   
227 [0xe3]:           iaload ebx, adx   
228 [0xe4]:           rstore ebx   
229 [0xe5]:           movi #92, ebx   
231 [0xe7]:           loadval ecx   
232 [0xe8]:           tne ecx, ebx   
233 [0xe9]:           movr ebx, cmt   
234 [0xea]:           skne ebx // pc = 260   
235 [0xeb]:           movl 0   
236 [0xec]:           movn #7   
238 [0xee]:           movi #0, adx   
240 [0xf0]:           iaload ebx, adx   
241 [0xf1]:           rstore ebx   
242 [0xf2]:           movi #34, ebx   
244 [0xf4]:           loadval ecx   
245 [0xf5]:           tne ecx, ebx   
246 [0xf6]:           movr ebx, cmt   
247 [0xf7]:           skne ebx // pc = 260   
248 [0xf8]:           movl 0   
249 [0xf9]:           movn #7   
251 [0xfb]:           movi #0, adx   
253 [0xfd]:           iaload ebx, adx   
254 [0xfe]:           rstore ebx   
255 [0xff]:           movi #39, ebx   
257 [0x101]:           loadval ecx   
258 [0x102]:           tne ecx, ebx   
259 [0x103]:           movr ebx, cmt   
260 [0x104]:           movr cmt, ebx   
261 [0x105]:           jne 291   
262 [0x106]: line: 289 movl 0   
263 [0x107]:           movn #1   
265 [0x109]:           pushobj   
266 [0x10a]:           movg @84 // @main.frontend#compiler_error   
267 [0x10b]:           movn #6   
269 [0x10d]:           pushobj   
270 [0x10e]:           movl 0   
271 [0x10f]:           movn #8   
273 [0x111]:           movi #0, adx   
275 [0x113]:           iaload ebx, adx   
276 [0x114]:           rstore ebx   
277 [0x115]:           movl 0   
278 [0x116]:           movn #10   
280 [0x118]:           movi #0, adx   
282 [0x11a]:           iaload ebx, adx   
283 [0x11b]:           rstore ebx   
284 [0x11c]:           new_class @75 // std#string   
286 [0x11e]:           dup    
287 [0x11f]:           newstr @152 // , text preceding `\` must be alpha, '"', or '\'' only   
288 [0x120]:           call @3546 // <std#string.string>   
289 [0x121]:           call @3743 // <main.frontend#error_manager.new_error>   
290 [0x122]: line: 290 ret   
291 [0x123]:           nop   
292 [0x124]: line: 292 istorel 0, fp+2   
294 [0x126]:           nop   
295 [0x127]: line: 294 pushl 0   
296 [0x128]:           call @3814 // <main.frontend.tokenizer#tokenizer.advance>   
297 [0x129]:           jmp @58   
298 [0x12a]: line: 297 movl 0   
299 [0x12b]:           movn #9   
301 [0x12d]:           movi #0, adx   
303 [0x12f]:           iaload ebx, adx   
304 [0x130]:           movr cmt, ebx   
305 [0x131]:           jne 330   
306 [0x132]: line: 299 movl 0   
307 [0x133]:           movn #1   
309 [0x135]:           pushobj   
310 [0x136]:           movg @84 // @main.frontend#compiler_error   
311 [0x137]:           movn #2   
313 [0x139]:           pushobj   
314 [0x13a]:           movl 0   
315 [0x13b]:           movn #8   
317 [0x13d]:           movi #0, adx   
319 [0x13f]:           iaload ebx, adx   
320 [0x140]:           rstore ebx   
321 [0x141]:           movl 0   
322 [0x142]:           movn #10   
324 [0x144]:           movi #0, adx   
326 [0x146]:           iaload ebx, adx   
327 [0x147]:           rstore ebx   
328 [0x148]:           call @3744 // <main.frontend#error_manager.new_error>   
329 [0x149]: line: 300 ret   
330 [0x14a]:           nop   
331 [0x14b]: line: 303 loadl ebx, fp+1   
332 [0x14c]:           not ebx, ebx   
333 [0x14d]:           movr cmt, ebx   
334 [0x14e]:           jne 398   
335 [0x14f]: line: 305 movl 0   
336 [0x150]:           movn #5   
338 [0x152]:           movi #0, adx   
340 [0x154]:           iaload ebx, adx   
341 [0x155]:           movr egx, ebx   
342 [0x156]:           dec ebx   
343 [0x157]:           movi #0, adx   
345 [0x159]:           rmov adx, ebx   
346 [0x15a]: line: 306 loadl ebx, fp+3   
347 [0x15b]:           not ebx, ebx   
348 [0x15c]:           movr cmt, ebx   
349 [0x15d]:           jne 379   
350 [0x15e]: line: 307 movl 0   
351 [0x15f]:           movn #1   
353 [0x161]:           pushobj   
354 [0x162]:           movg @84 // @main.frontend#compiler_error   
355 [0x163]:           movn #6   
357 [0x165]:           pushobj   
358 [0x166]:           movl 0   
359 [0x167]:           movn #8   
361 [0x169]:           movi #0, adx   
363 [0x16b]:           iaload ebx, adx   
364 [0x16c]:           rstore ebx   
365 [0x16d]:           movl 0   
366 [0x16e]:           movn #10   
368 [0x170]:           movi #0, adx   
370 [0x172]:           iaload ebx, adx   
371 [0x173]:           rstore ebx   
372 [0x174]:           new_class @75 // std#string   
374 [0x176]:           dup    
375 [0x177]:           newstr @153 // , character literals cannot be empty   
376 [0x178]:           call @3546 // <std#string.string>   
377 [0x179]:           call @3743 // <main.frontend#error_manager.new_error>   
378 [0x17a]:           jmp @385   
379 [0x17b]: line: 309 pushl 0   
380 [0x17c]:           movg @91 // @main.frontend.tokenizer#token_id   
381 [0x17d]:           movn #7   
383 [0x17f]:           pushobj   
384 [0x180]:           call @3803 // <main.frontend.tokenizer#tokenizer.add_token>   
385 [0x181]:           nop   
386 [0x182]: line: 310 movl 0   
387 [0x183]:           movn #5   
389 [0x185]:           movi #0, adx   
391 [0x187]:           iaload ebx, adx   
392 [0x188]:           movr egx, ebx   
393 [0x189]:           inc ebx   
394 [0x18a]:           movi #0, adx   
396 [0x18c]:           rmov adx, ebx   
397 [0x18d]:           jmp @451   
398 [0x18e]: line: 314 movl 0   
399 [0x18f]:           movn #0   
401 [0x191]:           pushobj   
402 [0x192]:           new_class @90 // main.frontend.tokenizer#token   
404 [0x194]:           dup    
405 [0x195]:           pushl 0   
406 [0x196]:           movl 0   
407 [0x197]:           movn #3   
409 [0x199]:           pushobj   
410 [0x19a]:           movl 0   
411 [0x19b]:           movn #6   
413 [0x19d]:           movi #0, adx   
415 [0x19f]:           iaload ebx, adx   
416 [0x1a0]:           rstore ebx   
417 [0x1a1]:           movl 0   
418 [0x1a2]:           movn #5   
420 [0x1a4]:           movi #0, adx   
422 [0x1a6]:           iaload ebx, adx   
423 [0x1a7]:           rstore ebx   
424 [0x1a8]:           movi #1, ebx   
426 [0x1aa]:           loadval ecx   
427 [0x1ab]:           sub ecx, ebx -> ebx   
428 [0x1ac]:           rstore ebx   
429 [0x1ad]:           call @3601 // <std#string.substring>   
430 [0x1ae]:           call @3811 // <main.frontend.tokenizer#tokenizer.get_escaped_string>   
431 [0x1af]:           movg @91 // @main.frontend.tokenizer#token_id   
432 [0x1b0]:           movn #7   
434 [0x1b2]:           pushobj   
435 [0x1b3]:           movl 0   
436 [0x1b4]:           movn #10   
438 [0x1b6]:           movi #0, adx   
440 [0x1b8]:           iaload ebx, adx   
441 [0x1b9]:           rstore ebx   
442 [0x1ba]:           movl 0   
443 [0x1bb]:           movn #8   
445 [0x1bd]:           movi #0, adx   
447 [0x1bf]:           iaload ebx, adx   
448 [0x1c0]:           rstore ebx   
449 [0x1c1]:           call @3786 // <main.frontend.tokenizer#token.token>   
450 [0x1c2]:           call @4055 // <std#list<main.frontend.tokenizer#token>.add>   
451 [0x1c3]:           nop   
452 [0x1c4]:           ret   


function: main.frontend.tokenizer#tokenizer.parse_identifier[3807] params(0) in file: lib\support\/bootstrap//frontend//tokenizer//tokenizer.sharp:319:16: note:  
		    private def parse_identifier() {
		               ^

0 [0x0]: line: 320 istorel 0, fp+1   
2 [0x2]: line: 322 movl 0   
3 [0x3]:           movn #9   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           not ebx, ebx   
9 [0x9]:           movr cmt, ebx   
10 [0xa]:           jne 119   
11 [0xb]: line: 324 movl 0   
12 [0xc]:           movn #7   
14 [0xe]:           movi #0, adx   
16 [0x10]:           iaload ebx, adx   
17 [0x11]:           rstore ebx   
18 [0x12]:           movi #95, ebx   
20 [0x14]:           loadval ecx   
21 [0x15]:           test ecx, ebx   
22 [0x16]:           movr ebx, cmt   
23 [0x17]:           movr cmt, ebx   
24 [0x18]:           je 79   
25 [0x19]:           movl 0   
26 [0x1a]:           movn #7   
28 [0x1c]:           movi #0, adx   
30 [0x1e]:           iaload ebx, adx   
31 [0x1f]:           rstore ebx   
32 [0x20]:           movi #97, ebx   
34 [0x22]:           loadval ecx   
35 [0x23]:           gte ecx, ebx   
36 [0x24]:           movr ebx, cmt   
37 [0x25]:           skne ebx // pc = 50   
38 [0x26]:           movl 0   
39 [0x27]:           movn #7   
41 [0x29]:           movi #0, adx   
43 [0x2b]:           iaload ebx, adx   
44 [0x2c]:           rstore ebx   
45 [0x2d]:           movi #122, ebx   
47 [0x2f]:           loadval ecx   
48 [0x30]:           lte ecx, ebx   
49 [0x31]:           movr ebx, cmt   
50 [0x32]:           movr cmt, ebx   
51 [0x33]:           je 79   
52 [0x34]:           movl 0   
53 [0x35]:           movn #7   
55 [0x37]:           movi #0, adx   
57 [0x39]:           iaload ebx, adx   
58 [0x3a]:           rstore ebx   
59 [0x3b]:           movi #65, ebx   
61 [0x3d]:           loadval ecx   
62 [0x3e]:           gte ecx, ebx   
63 [0x3f]:           movr ebx, cmt   
64 [0x40]:           skne ebx // pc = 77   
65 [0x41]:           movl 0   
66 [0x42]:           movn #7   
68 [0x44]:           movi #0, adx   
70 [0x46]:           iaload ebx, adx   
71 [0x47]:           rstore ebx   
72 [0x48]:           movi #90, ebx   
74 [0x4a]:           loadval ecx   
75 [0x4b]:           lte ecx, ebx   
76 [0x4c]:           movr ebx, cmt   
77 [0x4d]:           movr cmt, ebx   
78 [0x4e]:           jne 85   
79 [0x4f]: line: 328 istorel 1, fp+1   
81 [0x51]: line: 329 pushl 0   
82 [0x52]:           call @3814 // <main.frontend.tokenizer#tokenizer.advance>   
83 [0x53]: line: 330 jmp @2   
84 [0x54]:           jmp @115   
85 [0x55]: line: 334 movl 0   
86 [0x56]:           movn #7   
88 [0x58]:           movi #0, adx   
90 [0x5a]:           iaload ebx, adx   
91 [0x5b]:           rstore ebx   
92 [0x5c]:           movi #48, ebx   
94 [0x5e]:           loadval ecx   
95 [0x5f]:           gte ecx, ebx   
96 [0x60]:           movr ebx, cmt   
97 [0x61]:           skne ebx // pc = 110   
98 [0x62]:           movl 0   
99 [0x63]:           movn #7   
101 [0x65]:           movi #0, adx   
103 [0x67]:           iaload ebx, adx   
104 [0x68]:           rstore ebx   
105 [0x69]:           movi #57, ebx   
107 [0x6b]:           loadval ecx   
108 [0x6c]:           lte ecx, ebx   
109 [0x6d]:           movr ebx, cmt   
110 [0x6e]:           not ebx, ebx   
111 [0x6f]:           movr cmt, ebx   
112 [0x70]:           jne 114   
113 [0x71]: line: 335 jmp @119   
114 [0x72]:           nop   
115 [0x73]:           nop   
116 [0x74]: line: 339 pushl 0   
117 [0x75]:           call @3814 // <main.frontend.tokenizer#tokenizer.advance>   
118 [0x76]:           jmp @2   
119 [0x77]: line: 342 movl 0   
120 [0x78]: line: 343 movn #5   
122 [0x7a]:           movi #0, adx   
124 [0x7c]:           iaload ebx, adx   
125 [0x7d]:           movr egx, ebx   
126 [0x7e]:           dec ebx   
127 [0x7f]:           movi #0, adx   
129 [0x81]:           rmov adx, ebx   
130 [0x82]: line: 344 loadl ebx, fp+1   
131 [0x83]:           not ebx, ebx   
132 [0x84]:           movr cmt, ebx   
133 [0x85]:           jne 163   
134 [0x86]: line: 345 movl 0   
135 [0x87]:           movn #1   
137 [0x89]:           pushobj   
138 [0x8a]:           movg @84 // @main.frontend#compiler_error   
139 [0x8b]:           movn #7   
141 [0x8d]:           pushobj   
142 [0x8e]:           movl 0   
143 [0x8f]:           movn #8   
145 [0x91]:           movi #0, adx   
147 [0x93]:           iaload ebx, adx   
148 [0x94]:           rstore ebx   
149 [0x95]:           movl 0   
150 [0x96]:           movn #10   
152 [0x98]:           movi #0, adx   
154 [0x9a]:           iaload ebx, adx   
155 [0x9b]:           rstore ebx   
156 [0x9c]:           new_class @75 // std#string   
158 [0x9e]:           dup    
159 [0x9f]:           newstr @154 //  expected at least 1 letter in identifier   
160 [0xa0]:           call @3546 // <std#string.string>   
161 [0xa1]:           call @3743 // <main.frontend#error_manager.new_error>   
162 [0xa2]:           jmp @169   
163 [0xa3]: line: 347 pushl 0   
164 [0xa4]:           movg @91 // @main.frontend.tokenizer#token_id   
165 [0xa5]:           movn #0   
167 [0xa7]:           pushobj   
168 [0xa8]:           call @3803 // <main.frontend.tokenizer#tokenizer.add_token>   
169 [0xa9]:           nop   
170 [0xaa]:           ret   


function: main.frontend.tokenizer#tokenizer.parse_number[3808] params(0) in file: lib\support\/bootstrap//frontend//tokenizer//tokenizer.sharp:350:16: note:  
		    private def parse_number() {
		               ^

0 [0x0]: line: 351 movl 0   
1 [0x1]:           movn #7   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #48, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           test ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           skne ebx // pc = 25   
13 [0xd]:           movl 0   
14 [0xe]:           pushobj   
15 [0xf]:           istore 1   
17 [0x11]:           call @3817 // <main.frontend.tokenizer#tokenizer.peek>   
18 [0x12]:           loadval ebx   
19 [0x13]:           rstore ebx   
20 [0x14]:           movi #120, ebx   
22 [0x16]:           loadval ecx   
23 [0x17]:           test ecx, ebx   
24 [0x18]:           movr ebx, cmt   
25 [0x19]:           movr cmt, ebx   
26 [0x1a]:           jne 157   
27 [0x1b]: line: 352 istorel 0, fp+1   
29 [0x1d]: line: 354 istore 2   
31 [0x1f]:           movl 0   
32 [0x20]:           movn #10   
34 [0x22]:           movi #0, adx   
36 [0x24]:           iaload ecx, adx   
37 [0x25]:           loadval ebx   
38 [0x26]:           add ecx, ebx -> ebx   
39 [0x27]:           rmov adx, ebx   
40 [0x28]:           istore 2   
42 [0x2a]:           movl 0   
43 [0x2b]:           movn #5   
45 [0x2d]:           movi #0, adx   
47 [0x2f]:           iaload ecx, adx   
48 [0x30]:           loadval ebx   
49 [0x31]:           add ecx, ebx -> ebx   
50 [0x32]:           rmov adx, ebx   
51 [0x33]: line: 355 movl 0   
52 [0x34]:           movn #9   
54 [0x36]:           movi #0, adx   
56 [0x38]:           iaload ebx, adx   
57 [0x39]:           not ebx, ebx   
58 [0x3a]:           skne ebx // pc = 81   
59 [0x3b]:           movl 0   
60 [0x3c]:           movn #7   
62 [0x3e]:           movi #0, adx   
64 [0x40]:           iaload ebx, adx   
65 [0x41]:           rstore ebx   
66 [0x42]:           call @3827 // <main.frontend.tokenizer#tokenizer.is_hex_num>   
67 [0x43]:           loadval ebx   
68 [0x44]:           skpe ebx // pc = 81   
69 [0x45]:           movl 0   
70 [0x46]:           movn #7   
72 [0x48]:           movi #0, adx   
74 [0x4a]:           iaload ebx, adx   
75 [0x4b]:           rstore ebx   
76 [0x4c]:           movi #95, ebx   
78 [0x4e]:           loadval ecx   
79 [0x4f]:           test ecx, ebx   
80 [0x50]:           movr ebx, cmt   
81 [0x51]:           movr cmt, ebx   
82 [0x52]:           jne 138   
83 [0x53]: line: 356 movl 0   
84 [0x54]:           movn #7   
86 [0x56]:           movi #0, adx   
88 [0x58]:           iaload ebx, adx   
89 [0x59]:           rstore ebx   
90 [0x5a]:           call @3827 // <main.frontend.tokenizer#tokenizer.is_hex_num>   
91 [0x5b]:           loadval ebx   
92 [0x5c]:           movr cmt, ebx   
93 [0x5d]:           jne 97   
94 [0x5e]: line: 357 istorel 1, fp+1   
96 [0x60]:           jmp @134   
97 [0x61]: line: 359 loadl ebx, fp+1   
98 [0x62]:           not ebx, ebx   
99 [0x63]:           movr cmt, ebx   
100 [0x64]:           jne 130   
101 [0x65]: line: 360 movl 0   
102 [0x66]:           movn #1   
104 [0x68]:           pushobj   
105 [0x69]:           movg @84 // @main.frontend#compiler_error   
106 [0x6a]:           movn #1   
108 [0x6c]:           pushobj   
109 [0x6d]:           movl 0   
110 [0x6e]:           movn #8   
112 [0x70]:           movi #0, adx   
114 [0x72]:           iaload ebx, adx   
115 [0x73]:           rstore ebx   
116 [0x74]:           movl 0   
117 [0x75]:           movn #10   
119 [0x77]:           movi #0, adx   
121 [0x79]:           iaload ebx, adx   
122 [0x7a]:           rstore ebx   
123 [0x7b]:           new_class @75 // std#string   
125 [0x7d]:           dup    
126 [0x7e]:           newstr @155 // , unexpected or illegally placed underscore   
127 [0x7f]:           call @3546 // <std#string.string>   
128 [0x80]:           call @3743 // <main.frontend#error_manager.new_error>   
129 [0x81]: line: 361 jmp @138   
130 [0x82]:           nop   
131 [0x83]: line: 364 pushl 0   
132 [0x84]:           call @3814 // <main.frontend.tokenizer#tokenizer.advance>   
133 [0x85]: line: 365 jmp @51   
134 [0x86]:           nop   
135 [0x87]: line: 368 pushl 0   
136 [0x88]:           call @3814 // <main.frontend.tokenizer#tokenizer.advance>   
137 [0x89]:           jmp @51   
138 [0x8a]: line: 371 movl 0   
139 [0x8b]:           movn #5   
141 [0x8d]:           movi #0, adx   
143 [0x8f]:           iaload ebx, adx   
144 [0x90]:           movr egx, ebx   
145 [0x91]:           dec ebx   
146 [0x92]:           movi #0, adx   
148 [0x94]:           rmov adx, ebx   
149 [0x95]: line: 372 pushl 0   
150 [0x96]:           movg @91 // @main.frontend.tokenizer#token_id   
151 [0x97]:           movn #4   
153 [0x99]:           pushobj   
154 [0x9a]:           call @3803 // <main.frontend.tokenizer#tokenizer.add_token>   
155 [0x9b]: line: 373 ret   
156 [0x9c]:           jmp @537   
157 [0x9d]: line: 387 istorel 0, fp+2   
159 [0x9f]: line: 388 istorel 0, fp+3   
161 [0xa1]: line: 389 istorel 0, fp+4   
163 [0xa3]: line: 390 istorel 0, fp+5   
165 [0xa5]: line: 392 movl 0   
166 [0xa6]:           movn #9   
168 [0xa8]:           movi #0, adx   
170 [0xaa]:           iaload ebx, adx   
171 [0xab]:           not ebx, ebx   
172 [0xac]:           movr cmt, ebx   
173 [0xad]:           jne 520   
174 [0xae]: line: 394 istore 95   
176 [0xb0]:           movl 0   
177 [0xb1]:           movn #7   
179 [0xb3]:           movi #0, adx   
181 [0xb5]:           iaload ebx, adx   
182 [0xb6]:           loadval ecx   
183 [0xb7]:           test ecx, ebx   
184 [0xb8]:           movr ebx, cmt   
185 [0xb9]:           movr cmt, ebx   
186 [0xba]:           jne 250   
187 [0xbb]: line: 395 loadl ebx, fp+5   
188 [0xbc]:           not ebx, ebx   
189 [0xbd]:           skpe ebx // pc = 215   
190 [0xbe]:           movl 0   
191 [0xbf]:           movn #4   
193 [0xc1]:           pushobj   
194 [0xc2]:           movl 0   
195 [0xc3]:           movn #5   
197 [0xc5]:           movi #0, adx   
199 [0xc7]:           iaload ebx, adx   
200 [0xc8]:           rstore ebx   
201 [0xc9]:           movi #1, ebx   
203 [0xcb]:           loadval ecx   
204 [0xcc]:           sub ecx, ebx -> ebx   
205 [0xcd]:           popobj2    
206 [0xce]:           movr adx, ebx   
207 [0xcf]:           chklen adx   
208 [0xd0]:           iaload ebx, adx   
209 [0xd1]:           rstore ebx   
210 [0xd2]:           movi #46, ebx   
212 [0xd4]:           loadval ecx   
213 [0xd5]:           test ecx, ebx   
214 [0xd6]:           movr ebx, cmt   
215 [0xd7]:           movr cmt, ebx   
216 [0xd8]:           jne 246   
217 [0xd9]: line: 397 movl 0   
218 [0xda]:           movn #1   
220 [0xdc]:           pushobj   
221 [0xdd]:           movg @84 // @main.frontend#compiler_error   
222 [0xde]:           movn #1   
224 [0xe0]:           pushobj   
225 [0xe1]:           movl 0   
226 [0xe2]:           movn #8   
228 [0xe4]:           movi #0, adx   
230 [0xe6]:           iaload ebx, adx   
231 [0xe7]:           rstore ebx   
232 [0xe8]:           movl 0   
233 [0xe9]:           movn #10   
235 [0xeb]:           movi #0, adx   
237 [0xed]:           iaload ebx, adx   
238 [0xee]:           rstore ebx   
239 [0xef]:           new_class @75 // std#string   
241 [0xf1]:           dup    
242 [0xf2]:           newstr @155 // , unexpected or illegally placed underscore   
243 [0xf3]:           call @3546 // <std#string.string>   
244 [0xf4]:           call @3743 // <main.frontend#error_manager.new_error>   
245 [0xf5]: line: 398 ret   
246 [0xf6]:           nop   
247 [0xf7]: line: 400 pushl 0   
248 [0xf8]:           call @3814 // <main.frontend.tokenizer#tokenizer.advance>   
249 [0xf9]:           jmp @518   
250 [0xfa]:           istore 46   
252 [0xfc]:           movl 0   
253 [0xfd]:           movn #7   
255 [0xff]:           movi #0, adx   
257 [0x101]:           iaload ebx, adx   
258 [0x102]:           loadval ecx   
259 [0x103]:           test ecx, ebx   
260 [0x104]:           movr ebx, cmt   
261 [0x105]:           movr cmt, ebx   
262 [0x106]:           jne 302   
263 [0x107]: line: 404 loadl ebx, fp+2   
264 [0x108]:           movr cmt, ebx   
265 [0x109]:           jne 295   
266 [0x10a]: line: 406 movl 0   
267 [0x10b]:           movn #1   
269 [0x10d]:           pushobj   
270 [0x10e]:           movg @84 // @main.frontend#compiler_error   
271 [0x10f]:           movn #1   
273 [0x111]:           pushobj   
274 [0x112]:           movl 0   
275 [0x113]:           movn #8   
277 [0x115]:           movi #0, adx   
279 [0x117]:           iaload ebx, adx   
280 [0x118]:           rstore ebx   
281 [0x119]:           movl 0   
282 [0x11a]:           movn #10   
284 [0x11c]:           movi #0, adx   
286 [0x11e]:           iaload ebx, adx   
287 [0x11f]:           rstore ebx   
288 [0x120]:           new_class @75 // std#string   
290 [0x122]:           dup    
291 [0x123]:           newstr @156 // , double decimal   
292 [0x124]:           call @3546 // <std#string.string>   
293 [0x125]:           call @3743 // <main.frontend#error_manager.new_error>   
294 [0x126]: line: 407 ret   
295 [0x127]:           nop   
296 [0x128]: line: 409 istorel 1, fp+2   
298 [0x12a]: line: 410 pushl 0   
299 [0x12b]:           call @3814 // <main.frontend.tokenizer#tokenizer.advance>   
300 [0x12c]: line: 411 jmp @165   
301 [0x12d]:           jmp @518   
302 [0x12e]:           istore 101   
304 [0x130]:           movl 0   
305 [0x131]:           movn #7   
307 [0x133]:           movi #0, adx   
309 [0x135]:           iaload ebx, adx   
310 [0x136]:           rstore ebx   
311 [0x137]:           call @3213 // <std#char.to_lower>   
312 [0x138]:           loadval ebx   
313 [0x139]:           loadval ecx   
314 [0x13a]:           test ecx, ebx   
315 [0x13b]:           movr ebx, cmt   
316 [0x13c]:           movr cmt, ebx   
317 [0x13d]:           jne 419   
318 [0x13e]: line: 415 istorel 0, fp+5   
320 [0x140]: line: 416 pushl 0   
321 [0x141]:           istore 1   
323 [0x143]:           call @3817 // <main.frontend.tokenizer#tokenizer.peek>   
324 [0x144]:           ipopl 6   
325 [0x145]: line: 417 pushl 0   
326 [0x146]:           istore 1   
328 [0x148]:           call @3815 // <main.frontend.tokenizer#tokenizer.peek_end>   
329 [0x149]:           loadval ebx   
330 [0x14a]:           movr cmt, ebx   
331 [0x14b]:           jne 362   
332 [0x14c]: line: 419 movl 0   
333 [0x14d]:           movn #1   
335 [0x14f]:           pushobj   
336 [0x150]:           movg @84 // @main.frontend#compiler_error   
337 [0x151]:           movn #1   
339 [0x153]:           pushobj   
340 [0x154]:           movl 0   
341 [0x155]:           movn #8   
343 [0x157]:           movi #0, adx   
345 [0x159]:           iaload ebx, adx   
346 [0x15a]:           rstore ebx   
347 [0x15b]:           movl 0   
348 [0x15c]:           movn #10   
350 [0x15e]:           movi #0, adx   
352 [0x160]:           iaload ebx, adx   
353 [0x161]:           rstore ebx   
354 [0x162]:           new_class @75 // std#string   
356 [0x164]:           dup    
357 [0x165]:           newstr @157 // , missing exponent prefix   
358 [0x166]:           call @3546 // <std#string.string>   
359 [0x167]:           call @3743 // <main.frontend#error_manager.new_error>   
360 [0x168]: line: 420 ret   
361 [0x169]:           jmp @412   
362 [0x16a]:           istore 43   
364 [0x16c]:           loadl ebx, fp+6   
365 [0x16d]:           loadval ecx   
366 [0x16e]:           tne ecx, ebx   
367 [0x16f]:           movr ebx, cmt   
368 [0x170]:           skne ebx // pc = 381   
369 [0x171]:           movi #45, ebx   
371 [0x173]:           rstore ebx   
372 [0x174]:           loadl ebx, fp+6   
373 [0x175]:           loadval ecx   
374 [0x176]:           tne ecx, ebx   
375 [0x177]:           movr ebx, cmt   
376 [0x178]:           skne ebx // pc = 381   
377 [0x179]:           ipushl #6   
378 [0x17a]:           call @3209 // <std#char.is_digit>   
379 [0x17b]:           loadval ebx   
380 [0x17c]:           not ebx, ebx   
381 [0x17d]:           movr cmt, ebx   
382 [0x17e]:           jne 412   
383 [0x17f]: line: 428 movl 0   
384 [0x180]:           movn #1   
386 [0x182]:           pushobj   
387 [0x183]:           movg @84 // @main.frontend#compiler_error   
388 [0x184]:           movn #1   
390 [0x186]:           pushobj   
391 [0x187]:           movl 0   
392 [0x188]:           movn #8   
394 [0x18a]:           movi #0, adx   
396 [0x18c]:           iaload ebx, adx   
397 [0x18d]:           rstore ebx   
398 [0x18e]:           movl 0   
399 [0x18f]:           movn #10   
401 [0x191]:           movi #0, adx   
403 [0x193]:           iaload ebx, adx   
404 [0x194]:           rstore ebx   
405 [0x195]:           new_class @75 // std#string   
407 [0x197]:           dup    
408 [0x198]:           newstr @158 // , expected `+`, `-`, or digit   
409 [0x199]:           call @3546 // <std#string.string>   
410 [0x19a]:           call @3743 // <main.frontend#error_manager.new_error>   
411 [0x19b]: line: 429 ret   
412 [0x19c]:           nop   
413 [0x19d]: line: 431 istorel 1, fp+3   
415 [0x19f]: line: 432 pushl 0   
416 [0x1a0]:           call @3814 // <main.frontend.tokenizer#tokenizer.advance>   
417 [0x1a1]: line: 433 jmp @165   
418 [0x1a2]:           jmp @518   
419 [0x1a3]:           loadl ebx, fp+3   
420 [0x1a4]:           skne ebx // pc = 432   
421 [0x1a5]:           movl 0   
422 [0x1a6]:           pushobj   
423 [0x1a7]:           movl 0   
424 [0x1a8]:           movn #7   
426 [0x1aa]:           movi #0, adx   
428 [0x1ac]:           iaload ebx, adx   
429 [0x1ad]:           rstore ebx   
430 [0x1ae]:           call @3812 // <main.frontend.tokenizer#tokenizer.is_sign>   
431 [0x1af]:           loadval ebx   
432 [0x1b0]:           movr cmt, ebx   
433 [0x1b1]:           jne 473   
434 [0x1b2]: line: 437 loadl ebx, fp+4   
435 [0x1b3]:           movr cmt, ebx   
436 [0x1b4]:           jne 466   
437 [0x1b5]: line: 439 movl 0   
438 [0x1b6]:           movn #1   
440 [0x1b8]:           pushobj   
441 [0x1b9]:           movg @84 // @main.frontend#compiler_error   
442 [0x1ba]:           movn #1   
444 [0x1bc]:           pushobj   
445 [0x1bd]:           movl 0   
446 [0x1be]:           movn #8   
448 [0x1c0]:           movi #0, adx   
450 [0x1c2]:           iaload ebx, adx   
451 [0x1c3]:           rstore ebx   
452 [0x1c4]:           movl 0   
453 [0x1c5]:           movn #10   
455 [0x1c7]:           movi #0, adx   
457 [0x1c9]:           iaload ebx, adx   
458 [0x1ca]:           rstore ebx   
459 [0x1cb]:           new_class @75 // std#string   
461 [0x1cd]:           dup    
462 [0x1ce]:           newstr @159 // , duplicate exponent sign postfix   
463 [0x1cf]:           call @3546 // <std#string.string>   
464 [0x1d0]:           call @3743 // <main.frontend#error_manager.new_error>   
465 [0x1d1]: line: 440 ret   
466 [0x1d2]:           nop   
467 [0x1d3]: line: 442 istorel 1, fp+4   
469 [0x1d5]: line: 443 pushl 0   
470 [0x1d6]:           call @3814 // <main.frontend.tokenizer#tokenizer.advance>   
471 [0x1d7]: line: 444 jmp @165   
472 [0x1d8]:           jmp @518   
473 [0x1d9]:           istore 46   
475 [0x1db]:           movl 0   
476 [0x1dc]:           movn #7   
478 [0x1de]:           movi #0, adx   
480 [0x1e0]:           iaload ebx, adx   
481 [0x1e1]:           loadval ecx   
482 [0x1e2]:           tne ecx, ebx   
483 [0x1e3]:           movr ebx, cmt   
484 [0x1e4]:           skne ebx // pc = 495   
485 [0x1e5]:           movl 0   
486 [0x1e6]:           movn #7   
488 [0x1e8]:           movi #0, adx   
490 [0x1ea]:           iaload ebx, adx   
491 [0x1eb]:           rstore ebx   
492 [0x1ec]:           call @3209 // <std#char.is_digit>   
493 [0x1ed]:           loadval ebx   
494 [0x1ee]:           not ebx, ebx   
495 [0x1ef]:           movr cmt, ebx   
496 [0x1f0]:           jne 499   
497 [0x1f1]: line: 447 jmp @520   
498 [0x1f2]:           jmp @518   
499 [0x1f3]: line: 450 movl 0   
500 [0x1f4]:           movn #7   
502 [0x1f6]:           movi #0, adx   
504 [0x1f8]:           iaload ebx, adx   
505 [0x1f9]:           rstore ebx   
506 [0x1fa]:           call @3209 // <std#char.is_digit>   
507 [0x1fb]:           loadval ebx   
508 [0x1fc]:           skne ebx // pc = 511   
509 [0x1fd]:           loadl ebx, fp+3   
510 [0x1fe]:           not ebx, ebx   
511 [0x1ff]:           movr cmt, ebx   
512 [0x200]:           jne 515   
513 [0x201]: line: 451 istorel 1, fp+5   
515 [0x203]:           nop   
516 [0x204]: line: 452 pushl 0   
517 [0x205]:           call @3814 // <main.frontend.tokenizer#tokenizer.advance>   
518 [0x206]:           nop   
519 [0x207]:           jmp @165   
520 [0x208]: line: 456 movl 0   
521 [0x209]:           movn #5   
523 [0x20b]:           movi #0, adx   
525 [0x20d]:           iaload ebx, adx   
526 [0x20e]:           movr egx, ebx   
527 [0x20f]:           dec ebx   
528 [0x210]:           movi #0, adx   
530 [0x212]:           rmov adx, ebx   
531 [0x213]: line: 457 pushl 0   
532 [0x214]:           movg @91 // @main.frontend.tokenizer#token_id   
533 [0x215]:           movn #3   
535 [0x217]:           pushobj   
536 [0x218]:           call @3803 // <main.frontend.tokenizer#tokenizer.add_token>   
537 [0x219]:           nop   
538 [0x21a]:           ret   


function: main.frontend.tokenizer#tokenizer.parse_string[3809] params(0) in file: lib\support\/bootstrap//frontend//tokenizer//tokenizer.sharp:461:16: note:  
		    private def parse_string() : var {
		               ^

0 [0x0]: line: 462 pushl 0   
1 [0x1]:           call @3816 // <main.frontend.tokenizer#tokenizer.tokens_left>   
2 [0x2]:           loadval ebx   
3 [0x3]:           rstore ebx   
4 [0x4]:           movi #2, ebx   
6 [0x6]:           loadval ecx   
7 [0x7]:           lt ecx, ebx   
8 [0x8]:           movr ebx, cmt   
9 [0x9]:           movr cmt, ebx   
10 [0xa]:           jne 39   
11 [0xb]: line: 464 movl 0   
12 [0xc]:           movn #1   
14 [0xe]:           pushobj   
15 [0xf]:           movg @84 // @main.frontend#compiler_error   
16 [0x10]:           movn #3   
18 [0x12]:           pushobj   
19 [0x13]:           movl 0   
20 [0x14]:           movn #8   
22 [0x16]:           movi #0, adx   
24 [0x18]:           iaload ebx, adx   
25 [0x19]:           rstore ebx   
26 [0x1a]:           movl 0   
27 [0x1b]:           movn #10   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           iaload ebx, adx   
32 [0x20]:           rstore ebx   
33 [0x21]:           call @3744 // <main.frontend#error_manager.new_error>   
34 [0x22]: line: 465 pushl 0   
35 [0x23]:           call @3814 // <main.frontend.tokenizer#tokenizer.advance>   
36 [0x24]: line: 466 istorel 0, fp+0   
38 [0x26]:           ret   
39 [0x27]:           nop   
40 [0x28]: line: 468 pushl 0   
41 [0x29]:           call @3814 // <main.frontend.tokenizer#tokenizer.advance>   
42 [0x2a]: line: 469 movl 0   
43 [0x2b]:           movn #7   
45 [0x2d]:           movi #0, adx   
47 [0x2f]:           iaload ebx, adx   
48 [0x30]:           rstore ebx   
49 [0x31]:           movi #34, ebx   
51 [0x33]:           loadval ecx   
52 [0x34]:           test ecx, ebx   
53 [0x35]:           movr ebx, cmt   
54 [0x36]:           movr cmt, ebx   
55 [0x37]:           jne 91   
56 [0x38]: line: 470 movl 0   
57 [0x39]:           movn #0   
59 [0x3b]:           pushobj   
60 [0x3c]:           new_class @90 // main.frontend.tokenizer#token   
62 [0x3e]:           dup    
63 [0x3f]:           new_class @75 // std#string   
65 [0x41]:           dup    
66 [0x42]:           newstr @55 //    
67 [0x43]:           call @3546 // <std#string.string>   
68 [0x44]:           movg @91 // @main.frontend.tokenizer#token_id   
69 [0x45]:           movn #6   
71 [0x47]:           pushobj   
72 [0x48]:           movl 0   
73 [0x49]:           movn #10   
75 [0x4b]:           movi #0, adx   
77 [0x4d]:           iaload ebx, adx   
78 [0x4e]:           rstore ebx   
79 [0x4f]:           movl 0   
80 [0x50]:           movn #8   
82 [0x52]:           movi #0, adx   
84 [0x54]:           iaload ebx, adx   
85 [0x55]:           rstore ebx   
86 [0x56]:           call @3786 // <main.frontend.tokenizer#token.token>   
87 [0x57]:           call @4055 // <std#list<main.frontend.tokenizer#token>.add>   
88 [0x58]: line: 471 istorel 0, fp+0   
90 [0x5a]:           ret   
91 [0x5b]:           nop   
92 [0x5c]: line: 474 movl 0   
93 [0x5d]:           movn #5   
95 [0x5f]:           movi #0, adx   
97 [0x61]:           iaload ebx, adx   
98 [0x62]:           movl 0   
99 [0x63]:           movn #6   
101 [0x65]:           movi #0, adx   
103 [0x67]:           rmov adx, ebx   
104 [0x68]: line: 475 istorel 0, fp+1   
106 [0x6a]: line: 476 istorel 0, fp+2   
108 [0x6c]: line: 478 movl 0   
109 [0x6d]:           movn #9   
111 [0x6f]:           movi #0, adx   
113 [0x71]:           iaload ebx, adx   
114 [0x72]:           not ebx, ebx   
115 [0x73]:           movr cmt, ebx   
116 [0x74]:           jne 805   
117 [0x75]: line: 480 movl 0   
118 [0x76]:           movn #7   
120 [0x78]:           movi #0, adx   
122 [0x7a]:           iaload ebx, adx   
123 [0x7b]:           rstore ebx   
124 [0x7c]:           call @3210 // <std#char.is_newline>   
125 [0x7d]:           loadval ebx   
126 [0x7e]:           movr cmt, ebx   
127 [0x7f]:           jne 162   
128 [0x80]: line: 482 movl 0   
129 [0x81]:           movn #1   
131 [0x83]:           pushobj   
132 [0x84]:           movg @84 // @main.frontend#compiler_error   
133 [0x85]:           movn #4   
135 [0x87]:           pushobj   
136 [0x88]:           movl 0   
137 [0x89]:           movn #8   
139 [0x8b]:           movi #0, adx   
141 [0x8d]:           iaload ebx, adx   
142 [0x8e]:           rstore ebx   
143 [0x8f]:           movl 0   
144 [0x90]:           movn #10   
146 [0x92]:           movi #0, adx   
148 [0x94]:           iaload ebx, adx   
149 [0x95]:           rstore ebx   
150 [0x96]:           new_class @75 // std#string   
152 [0x98]:           dup    
153 [0x99]:           newstr @160 // , expected `"` before end of line   
154 [0x9a]:           call @3546 // <std#string.string>   
155 [0x9b]:           call @3743 // <main.frontend#error_manager.new_error>   
156 [0x9c]: line: 483 pushl 0   
157 [0x9d]:           call @3813 // <main.frontend.tokenizer#tokenizer.newline>   
158 [0x9e]: line: 484 istorel 0, fp+0   
160 [0xa0]:           ret   
161 [0xa1]:           jmp @801   
162 [0xa2]:           loadl ebx, fp+2   
163 [0xa3]:           not ebx, ebx   
164 [0xa4]:           skne ebx // pc = 177   
165 [0xa5]:           movi #92, ebx   
167 [0xa7]:           rstore ebx   
168 [0xa8]:           movl 0   
169 [0xa9]:           movn #7   
171 [0xab]:           movi #0, adx   
173 [0xad]:           iaload ebx, adx   
174 [0xae]:           loadval ecx   
175 [0xaf]:           test ecx, ebx   
176 [0xb0]:           movr ebx, cmt   
177 [0xb1]:           movr cmt, ebx   
178 [0xb2]:           jne 187   
179 [0xb3]: line: 488 istorel 1, fp+1   
181 [0xb5]: line: 489 istorel 1, fp+2   
183 [0xb7]: line: 490 pushl 0   
184 [0xb8]:           call @3814 // <main.frontend.tokenizer#tokenizer.advance>   
185 [0xb9]: line: 491 jmp @108   
186 [0xba]:           jmp @801   
187 [0xbb]:           loadl ebx, fp+2   
188 [0xbc]:           not ebx, ebx   
189 [0xbd]:           movr cmt, ebx   
190 [0xbe]:           jne 713   
191 [0xbf]: line: 495 istore 34   
193 [0xc1]:           movl 0   
194 [0xc2]:           movn #7   
196 [0xc4]:           movi #0, adx   
198 [0xc6]:           iaload ebx, adx   
199 [0xc7]:           loadval ecx   
200 [0xc8]:           test ecx, ebx   
201 [0xc9]:           movr ebx, cmt   
202 [0xca]:           movr cmt, ebx   
203 [0xcb]:           jne 205   
204 [0xcc]: line: 496 jmp @805   
205 [0xcd]:           nop   
206 [0xce]: line: 497 istore 36   
208 [0xd0]:           movl 0   
209 [0xd1]:           movn #7   
211 [0xd3]:           movi #0, adx   
213 [0xd5]:           iaload ebx, adx   
214 [0xd6]:           loadval ecx   
215 [0xd7]:           test ecx, ebx   
216 [0xd8]:           movr ebx, cmt   
217 [0xd9]:           movr cmt, ebx   
218 [0xda]:           jne 711   
219 [0xdb]: line: 498 movl 0   
220 [0xdc]:           movn #6   
222 [0xde]:           movi #0, adx   
224 [0xe0]:           iaload ebx, adx   
225 [0xe1]:           rstore ebx   
226 [0xe2]:           movl 0   
227 [0xe3]:           movn #5   
229 [0xe5]:           movi #0, adx   
231 [0xe7]:           iaload ebx, adx   
232 [0xe8]:           loadval ecx   
233 [0xe9]:           tne ecx, ebx   
234 [0xea]:           movr ebx, cmt   
235 [0xeb]:           movr cmt, ebx   
236 [0xec]:           jne 320   
237 [0xed]: line: 499 movl 0   
238 [0xee]:           movn #5   
240 [0xf0]:           movi #0, adx   
242 [0xf2]:           iaload ebx, adx   
243 [0xf3]:           movr egx, ebx   
244 [0xf4]:           dec ebx   
245 [0xf5]:           movi #0, adx   
247 [0xf7]:           rmov adx, ebx   
248 [0xf8]: line: 500 loadl ebx, fp+1   
249 [0xf9]:           not ebx, ebx   
250 [0xfa]:           movr cmt, ebx   
251 [0xfb]:           jne 259   
252 [0xfc]: line: 501 pushl 0   
253 [0xfd]:           movg @91 // @main.frontend.tokenizer#token_id   
254 [0xfe]:           movn #6   
256 [0x100]:           pushobj   
257 [0x101]:           call @3803 // <main.frontend.tokenizer#tokenizer.add_token>   
258 [0x102]:           jmp @307   
259 [0x103]: line: 503 movl 0   
260 [0x104]:           movn #0   
262 [0x106]:           pushobj   
263 [0x107]:           new_class @90 // main.frontend.tokenizer#token   
265 [0x109]:           dup    
266 [0x10a]:           pushl 0   
267 [0x10b]:           movl 0   
268 [0x10c]:           movn #3   
270 [0x10e]:           pushobj   
271 [0x10f]:           movl 0   
272 [0x110]:           movn #6   
274 [0x112]:           movi #0, adx   
276 [0x114]:           iaload ebx, adx   
277 [0x115]:           rstore ebx   
278 [0x116]:           movl 0   
279 [0x117]:           movn #5   
281 [0x119]:           movi #0, adx   
283 [0x11b]:           iaload ebx, adx   
284 [0x11c]:           rstore ebx   
285 [0x11d]:           call @3601 // <std#string.substring>   
286 [0x11e]:           call @3811 // <main.frontend.tokenizer#tokenizer.get_escaped_string>   
287 [0x11f]:           movg @91 // @main.frontend.tokenizer#token_id   
288 [0x120]:           movn #6   
290 [0x122]:           pushobj   
291 [0x123]:           movl 0   
292 [0x124]:           movn #10   
294 [0x126]:           movi #0, adx   
296 [0x128]:           iaload ebx, adx   
297 [0x129]:           rstore ebx   
298 [0x12a]:           movl 0   
299 [0x12b]:           movn #8   
301 [0x12d]:           movi #0, adx   
303 [0x12f]:           iaload ebx, adx   
304 [0x130]:           rstore ebx   
305 [0x131]:           call @3786 // <main.frontend.tokenizer#token.token>   
306 [0x132]:           call @4055 // <std#list<main.frontend.tokenizer#token>.add>   
307 [0x133]:           nop   
308 [0x134]: line: 504 movl 0   
309 [0x135]:           movn #5   
311 [0x137]:           movi #0, adx   
313 [0x139]:           iaload ebx, adx   
314 [0x13a]:           movr egx, ebx   
315 [0x13b]:           inc ebx   
316 [0x13c]:           movi #0, adx   
318 [0x13e]:           rmov adx, ebx   
319 [0x13f]:           jmp @365   
320 [0x140]:           pushl 0   
321 [0x141]:           istore 1   
323 [0x143]:           call @3817 // <main.frontend.tokenizer#tokenizer.peek>   
324 [0x144]:           loadval ebx   
325 [0x145]:           rstore ebx   
326 [0x146]:           movi #36, ebx   
328 [0x148]:           loadval ecx   
329 [0x149]:           tne ecx, ebx   
330 [0x14a]:           movr ebx, cmt   
331 [0x14b]:           movr cmt, ebx   
332 [0x14c]:           jne 365   
333 [0x14d]: line: 506 movl 0   
334 [0x14e]:           movn #0   
336 [0x150]:           pushobj   
337 [0x151]:           new_class @90 // main.frontend.tokenizer#token   
339 [0x153]:           dup    
340 [0x154]:           new_class @75 // std#string   
342 [0x156]:           dup    
343 [0x157]:           newstr @55 //    
344 [0x158]:           call @3546 // <std#string.string>   
345 [0x159]:           movg @91 // @main.frontend.tokenizer#token_id   
346 [0x15a]:           movn #6   
348 [0x15c]:           pushobj   
349 [0x15d]:           movl 0   
350 [0x15e]:           movn #10   
352 [0x160]:           movi #0, adx   
354 [0x162]:           iaload ebx, adx   
355 [0x163]:           rstore ebx   
356 [0x164]:           movl 0   
357 [0x165]:           movn #8   
359 [0x167]:           movi #0, adx   
361 [0x169]:           iaload ebx, adx   
362 [0x16a]:           rstore ebx   
363 [0x16b]:           call @3786 // <main.frontend.tokenizer#token.token>   
364 [0x16c]:           call @4055 // <std#list<main.frontend.tokenizer#token>.add>   
365 [0x16d]:           nop   
366 [0x16e]: line: 509 pushl 0   
367 [0x16f]:           call @3814 // <main.frontend.tokenizer#tokenizer.advance>   
368 [0x170]: line: 511 istore 123   
370 [0x172]:           movl 0   
371 [0x173]:           movn #7   
373 [0x175]:           movi #0, adx   
375 [0x177]:           iaload ebx, adx   
376 [0x178]:           loadval ecx   
377 [0x179]:           test ecx, ebx   
378 [0x17a]:           movr ebx, cmt   
379 [0x17b]:           movr cmt, ebx   
380 [0x17c]:           jne 475   
381 [0x17d]: line: 512 pushl 0   
382 [0x17e]:           call @3814 // <main.frontend.tokenizer#tokenizer.advance>   
383 [0x17f]: line: 514 movi #1, ebx   
385 [0x181]:           movl 0   
386 [0x182]:           movn #11   
388 [0x184]:           movi #0, adx   
390 [0x186]:           rmov adx, ebx   
391 [0x187]: line: 515 movi #1, ebx   
393 [0x189]:           movl 0   
394 [0x18a]:           movn #12   
396 [0x18c]:           movi #0, adx   
398 [0x18e]:           rmov adx, ebx   
399 [0x18f]: line: 517 movl 0   
400 [0x190]:           movn #0   
402 [0x192]:           pushobj   
403 [0x193]:           new_class @90 // main.frontend.tokenizer#token   
405 [0x195]:           dup    
406 [0x196]:           new_class @75 // std#string   
408 [0x198]:           dup    
409 [0x199]:           newstr @145 // +   
410 [0x19a]:           call @3546 // <std#string.string>   
411 [0x19b]:           movg @91 // @main.frontend.tokenizer#token_id   
412 [0x19c]:           movn #13   
414 [0x19e]:           pushobj   
415 [0x19f]:           movg @93 // @main.frontend.tokenizer#token_type   
416 [0x1a0]:           movn #9   
418 [0x1a2]:           pushobj   
419 [0x1a3]:           movl 0   
420 [0x1a4]:           movn #10   
422 [0x1a6]:           movi #0, adx   
424 [0x1a8]:           iaload ebx, adx   
425 [0x1a9]:           rstore ebx   
426 [0x1aa]:           movl 0   
427 [0x1ab]:           movn #8   
429 [0x1ad]:           movi #0, adx   
431 [0x1af]:           iaload ebx, adx   
432 [0x1b0]:           rstore ebx   
433 [0x1b1]:           call @3785 // <main.frontend.tokenizer#token.token>   
434 [0x1b2]:           call @4055 // <std#list<main.frontend.tokenizer#token>.add>   
435 [0x1b3]: line: 518 movl 0   
436 [0x1b4]:           movn #0   
438 [0x1b6]:           pushobj   
439 [0x1b7]:           new_class @90 // main.frontend.tokenizer#token   
441 [0x1b9]:           dup    
442 [0x1ba]:           new_class @75 // std#string   
444 [0x1bc]:           dup    
445 [0x1bd]:           newstr @161 // (   
446 [0x1be]:           call @3546 // <std#string.string>   
447 [0x1bf]:           movg @91 // @main.frontend.tokenizer#token_id   
448 [0x1c0]:           movn #13   
450 [0x1c2]:           pushobj   
451 [0x1c3]:           movg @93 // @main.frontend.tokenizer#token_type   
452 [0x1c4]:           movn #3   
454 [0x1c6]:           pushobj   
455 [0x1c7]:           movl 0   
456 [0x1c8]:           movn #10   
458 [0x1ca]:           movi #0, adx   
460 [0x1cc]:           iaload ebx, adx   
461 [0x1cd]:           rstore ebx   
462 [0x1ce]:           movl 0   
463 [0x1cf]:           movn #8   
465 [0x1d1]:           movi #0, adx   
467 [0x1d3]:           iaload ebx, adx   
468 [0x1d4]:           rstore ebx   
469 [0x1d5]:           call @3785 // <main.frontend.tokenizer#token.token>   
470 [0x1d6]:           call @4055 // <std#list<main.frontend.tokenizer#token>.add>   
471 [0x1d7]: line: 519 istorel 1, fp+0   
473 [0x1d9]:           ret   
474 [0x1da]:           jmp @710   
475 [0x1db]:           istore 36   
477 [0x1dd]:           movl 0   
478 [0x1de]:           movn #7   
480 [0x1e0]:           movi #0, adx   
482 [0x1e2]:           iaload ebx, adx   
483 [0x1e3]:           loadval ecx   
484 [0x1e4]:           tne ecx, ebx   
485 [0x1e5]:           movr ebx, cmt   
486 [0x1e6]:           movr cmt, ebx   
487 [0x1e7]:           jne 635   
488 [0x1e8]: line: 521 movl 0   
489 [0x1e9]:           movn #5   
491 [0x1eb]:           movi #0, adx   
493 [0x1ed]:           iaload ebx, adx   
494 [0x1ee]:           movl 0   
495 [0x1ef]:           movn #6   
497 [0x1f1]:           movi #0, adx   
499 [0x1f3]:           rmov adx, ebx   
500 [0x1f4]: line: 522 movl 0   
501 [0x1f5]:           movn #0   
503 [0x1f7]:           pushobj   
504 [0x1f8]:           new_class @90 // main.frontend.tokenizer#token   
506 [0x1fa]:           dup    
507 [0x1fb]:           new_class @75 // std#string   
509 [0x1fd]:           dup    
510 [0x1fe]:           newstr @145 // +   
511 [0x1ff]:           call @3546 // <std#string.string>   
512 [0x200]:           movg @91 // @main.frontend.tokenizer#token_id   
513 [0x201]:           movn #13   
515 [0x203]:           pushobj   
516 [0x204]:           movg @93 // @main.frontend.tokenizer#token_type   
517 [0x205]:           movn #9   
519 [0x207]:           pushobj   
520 [0x208]:           movl 0   
521 [0x209]:           movn #10   
523 [0x20b]:           movi #0, adx   
525 [0x20d]:           iaload ebx, adx   
526 [0x20e]:           rstore ebx   
527 [0x20f]:           movl 0   
528 [0x210]:           movn #8   
530 [0x212]:           movi #0, adx   
532 [0x214]:           iaload ebx, adx   
533 [0x215]:           rstore ebx   
534 [0x216]:           call @3785 // <main.frontend.tokenizer#token.token>   
535 [0x217]:           call @4055 // <std#list<main.frontend.tokenizer#token>.add>   
536 [0x218]: line: 523 movl 0   
537 [0x219]:           movn #9   
539 [0x21b]:           movi #0, adx   
541 [0x21d]:           iaload ebx, adx   
542 [0x21e]:           not ebx, ebx   
543 [0x21f]:           skne ebx // pc = 566   
544 [0x220]:           movl 0   
545 [0x221]:           movn #7   
547 [0x223]:           movi #0, adx   
549 [0x225]:           iaload ebx, adx   
550 [0x226]:           rstore ebx   
551 [0x227]:           call @3212 // <std#char.is_alpha_num>   
552 [0x228]:           loadval ebx   
553 [0x229]:           skpe ebx // pc = 566   
554 [0x22a]:           movl 0   
555 [0x22b]:           movn #7   
557 [0x22d]:           movi #0, adx   
559 [0x22f]:           iaload ebx, adx   
560 [0x230]:           rstore ebx   
561 [0x231]:           movi #95, ebx   
563 [0x233]:           loadval ecx   
564 [0x234]:           test ecx, ebx   
565 [0x235]:           movr ebx, cmt   
566 [0x236]:           movr cmt, ebx   
567 [0x237]:           jne 571   
568 [0x238]: line: 524 pushl 0   
569 [0x239]:           call @3807 // <main.frontend.tokenizer#tokenizer.parse_identifier>   
570 [0x23a]:           jmp @599   
571 [0x23b]: line: 527 movl 0   
572 [0x23c]:           movn #1   
574 [0x23e]:           pushobj   
575 [0x23f]:           movg @84 // @main.frontend#compiler_error   
576 [0x240]:           movn #4   
578 [0x242]:           pushobj   
579 [0x243]:           movl 0   
580 [0x244]:           movn #8   
582 [0x246]:           movi #0, adx   
584 [0x248]:           iaload ebx, adx   
585 [0x249]:           rstore ebx   
586 [0x24a]:           movl 0   
587 [0x24b]:           movn #10   
589 [0x24d]:           movi #0, adx   
591 [0x24f]:           iaload ebx, adx   
592 [0x250]:           rstore ebx   
593 [0x251]:           new_class @75 // std#string   
595 [0x253]:           dup    
596 [0x254]:           newstr @162 // , text preceding `$` must be alpha numeric, or '_' only   
597 [0x255]:           call @3546 // <std#string.string>   
598 [0x256]:           call @3743 // <main.frontend#error_manager.new_error>   
599 [0x257]:           nop   
600 [0x258]: line: 529 pushl 0   
601 [0x259]:           call @3814 // <main.frontend.tokenizer#tokenizer.advance>   
602 [0x25a]: line: 530 istore 34   
604 [0x25c]:           movl 0   
605 [0x25d]:           movn #7   
607 [0x25f]:           movi #0, adx   
609 [0x261]:           iaload ebx, adx   
610 [0x262]:           loadval ecx   
611 [0x263]:           test ecx, ebx   
612 [0x264]:           movr ebx, cmt   
613 [0x265]:           skpe ebx // pc = 620   
614 [0x266]:           movl 0   
615 [0x267]:           movn #9   
617 [0x269]:           movi #0, adx   
619 [0x26b]:           iaload ebx, adx   
620 [0x26c]:           movr cmt, ebx   
621 [0x26d]:           jne 626   
622 [0x26e]: line: 531 istorel 0, fp+0   
624 [0x270]:           ret   
625 [0x271]:           jmp @633   
626 [0x272]: line: 533 pushl 0   
627 [0x273]:           movg @93 // @main.frontend.tokenizer#token_type   
628 [0x274]:           movn #9   
630 [0x276]:           pushobj   
631 [0x277]:           call @3804 // <main.frontend.tokenizer#tokenizer.add_token>   
632 [0x278]: line: 534 jmp @108   
633 [0x279]:           nop   
634 [0x27a]:           jmp @710   
635 [0x27b]: line: 537 movl 0   
636 [0x27c]:           movn #0   
638 [0x27e]:           pushobj   
639 [0x27f]:           new_class @90 // main.frontend.tokenizer#token   
641 [0x281]:           dup    
642 [0x282]:           new_class @75 // std#string   
644 [0x284]:           dup    
645 [0x285]:           newstr @163 // $   
646 [0x286]:           call @3546 // <std#string.string>   
647 [0x287]:           movg @91 // @main.frontend.tokenizer#token_id   
648 [0x288]:           movn #13   
650 [0x28a]:           pushobj   
651 [0x28b]:           movg @93 // @main.frontend.tokenizer#token_type   
652 [0x28c]:           movn #9   
654 [0x28e]:           pushobj   
655 [0x28f]:           movl 0   
656 [0x290]:           movn #10   
658 [0x292]:           movi #0, adx   
660 [0x294]:           iaload ebx, adx   
661 [0x295]:           rstore ebx   
662 [0x296]:           movl 0   
663 [0x297]:           movn #8   
665 [0x299]:           movi #0, adx   
667 [0x29b]:           iaload ebx, adx   
668 [0x29c]:           rstore ebx   
669 [0x29d]:           call @3785 // <main.frontend.tokenizer#token.token>   
670 [0x29e]:           call @4055 // <std#list<main.frontend.tokenizer#token>.add>   
671 [0x29f]: line: 538 pushl 0   
672 [0x2a0]:           call @3814 // <main.frontend.tokenizer#tokenizer.advance>   
673 [0x2a1]: line: 540 istore 34   
675 [0x2a3]:           movl 0   
676 [0x2a4]:           movn #7   
678 [0x2a6]:           movi #0, adx   
680 [0x2a8]:           iaload ebx, adx   
681 [0x2a9]:           loadval ecx   
682 [0x2aa]:           test ecx, ebx   
683 [0x2ab]:           movr ebx, cmt   
684 [0x2ac]:           skpe ebx // pc = 691   
685 [0x2ad]:           movl 0   
686 [0x2ae]:           movn #9   
688 [0x2b0]:           movi #0, adx   
690 [0x2b2]:           iaload ebx, adx   
691 [0x2b3]:           movr cmt, ebx   
692 [0x2b4]:           jne 697   
693 [0x2b5]: line: 541 istorel 0, fp+0   
695 [0x2b7]:           ret   
696 [0x2b8]:           jmp @709   
697 [0x2b9]: line: 543 movl 0   
698 [0x2ba]:           movn #5   
700 [0x2bc]:           movi #0, adx   
702 [0x2be]:           iaload ebx, adx   
703 [0x2bf]:           movl 0   
704 [0x2c0]:           movn #6   
706 [0x2c2]:           movi #0, adx   
708 [0x2c4]:           rmov adx, ebx   
709 [0x2c5]:           nop   
710 [0x2c6]:           nop   
711 [0x2c7]:           nop   
712 [0x2c8]:           jmp @801   
713 [0x2c9]:           loadl ebx, fp+2   
714 [0x2ca]:           movr cmt, ebx   
715 [0x2cb]:           jne 801   
716 [0x2cc]: line: 549 movl 0   
717 [0x2cd]:           movn #7   
719 [0x2cf]:           movi #0, adx   
721 [0x2d1]:           iaload ebx, adx   
722 [0x2d2]:           rstore ebx   
723 [0x2d3]:           call @3211 // <std#char.is_alpha>   
724 [0x2d4]:           loadval ebx   
725 [0x2d5]:           not ebx, ebx   
726 [0x2d6]:           skne ebx // pc = 765   
727 [0x2d7]:           movi #92, ebx   
729 [0x2d9]:           rstore ebx   
730 [0x2da]:           movl 0   
731 [0x2db]:           movn #7   
733 [0x2dd]:           movi #0, adx   
735 [0x2df]:           iaload ebx, adx   
736 [0x2e0]:           loadval ecx   
737 [0x2e1]:           tne ecx, ebx   
738 [0x2e2]:           movr ebx, cmt   
739 [0x2e3]:           skne ebx // pc = 765   
740 [0x2e4]:           movi #34, ebx   
742 [0x2e6]:           rstore ebx   
743 [0x2e7]:           movl 0   
744 [0x2e8]:           movn #7   
746 [0x2ea]:           movi #0, adx   
748 [0x2ec]:           iaload ebx, adx   
749 [0x2ed]:           loadval ecx   
750 [0x2ee]:           tne ecx, ebx   
751 [0x2ef]:           movr ebx, cmt   
752 [0x2f0]:           skne ebx // pc = 765   
753 [0x2f1]:           movi #39, ebx   
755 [0x2f3]:           rstore ebx   
756 [0x2f4]:           movl 0   
757 [0x2f5]:           movn #7   
759 [0x2f7]:           movi #0, adx   
761 [0x2f9]:           iaload ebx, adx   
762 [0x2fa]:           loadval ecx   
763 [0x2fb]:           tne ecx, ebx   
764 [0x2fc]:           movr ebx, cmt   
765 [0x2fd]:           movr cmt, ebx   
766 [0x2fe]:           jne 798   
767 [0x2ff]: line: 551 movl 0   
768 [0x300]:           movn #1   
770 [0x302]:           pushobj   
771 [0x303]:           movg @84 // @main.frontend#compiler_error   
772 [0x304]:           movn #4   
774 [0x306]:           pushobj   
775 [0x307]:           movl 0   
776 [0x308]:           movn #8   
778 [0x30a]:           movi #0, adx   
780 [0x30c]:           iaload ebx, adx   
781 [0x30d]:           rstore ebx   
782 [0x30e]:           movl 0   
783 [0x30f]:           movn #10   
785 [0x311]:           movi #0, adx   
787 [0x313]:           iaload ebx, adx   
788 [0x314]:           rstore ebx   
789 [0x315]:           new_class @75 // std#string   
791 [0x317]:           dup    
792 [0x318]:           newstr @164 // , text preceding `\` must be alpha, '\', '\'', or '"' only   
793 [0x319]:           call @3546 // <std#string.string>   
794 [0x31a]:           call @3743 // <main.frontend#error_manager.new_error>   
795 [0x31b]: line: 552 istorel 0, fp+0   
797 [0x31d]:           ret   
798 [0x31e]:           nop   
799 [0x31f]: line: 555 istorel 0, fp+2   
801 [0x321]:           nop   
802 [0x322]: line: 558 pushl 0   
803 [0x323]:           call @3814 // <main.frontend.tokenizer#tokenizer.advance>   
804 [0x324]:           jmp @108   
805 [0x325]: line: 561 movl 0   
806 [0x326]:           movn #9   
808 [0x328]:           movi #0, adx   
810 [0x32a]:           iaload ebx, adx   
811 [0x32b]:           movr cmt, ebx   
812 [0x32c]:           jne 839   
813 [0x32d]: line: 563 movl 0   
814 [0x32e]:           movn #1   
816 [0x330]:           pushobj   
817 [0x331]:           movg @84 // @main.frontend#compiler_error   
818 [0x332]:           movn #2   
820 [0x334]:           pushobj   
821 [0x335]:           movl 0   
822 [0x336]:           movn #8   
824 [0x338]:           movi #0, adx   
826 [0x33a]:           iaload ebx, adx   
827 [0x33b]:           rstore ebx   
828 [0x33c]:           movl 0   
829 [0x33d]:           movn #10   
831 [0x33f]:           movi #0, adx   
833 [0x341]:           iaload ebx, adx   
834 [0x342]:           rstore ebx   
835 [0x343]:           call @3744 // <main.frontend#error_manager.new_error>   
836 [0x344]: line: 564 istorel 0, fp+0   
838 [0x346]:           ret   
839 [0x347]:           nop   
840 [0x348]: line: 567 movl 0   
841 [0x349]:           movn #5   
843 [0x34b]:           movi #0, adx   
845 [0x34d]:           iaload ebx, adx   
846 [0x34e]:           movr egx, ebx   
847 [0x34f]:           dec ebx   
848 [0x350]:           movi #0, adx   
850 [0x352]:           rmov adx, ebx   
851 [0x353]: line: 568 loadl ebx, fp+1   
852 [0x354]:           not ebx, ebx   
853 [0x355]:           movr cmt, ebx   
854 [0x356]:           jne 862   
855 [0x357]: line: 569 pushl 0   
856 [0x358]:           movg @91 // @main.frontend.tokenizer#token_id   
857 [0x359]:           movn #6   
859 [0x35b]:           pushobj   
860 [0x35c]:           call @3803 // <main.frontend.tokenizer#tokenizer.add_token>   
861 [0x35d]:           jmp @910   
862 [0x35e]: line: 571 movl 0   
863 [0x35f]:           movn #0   
865 [0x361]:           pushobj   
866 [0x362]:           new_class @90 // main.frontend.tokenizer#token   
868 [0x364]:           dup    
869 [0x365]:           pushl 0   
870 [0x366]:           movl 0   
871 [0x367]:           movn #3   
873 [0x369]:           pushobj   
874 [0x36a]:           movl 0   
875 [0x36b]:           movn #6   
877 [0x36d]:           movi #0, adx   
879 [0x36f]:           iaload ebx, adx   
880 [0x370]:           rstore ebx   
881 [0x371]:           movl 0   
882 [0x372]:           movn #5   
884 [0x374]:           movi #0, adx   
886 [0x376]:           iaload ebx, adx   
887 [0x377]:           rstore ebx   
888 [0x378]:           call @3601 // <std#string.substring>   
889 [0x379]:           call @3811 // <main.frontend.tokenizer#tokenizer.get_escaped_string>   
890 [0x37a]:           movg @91 // @main.frontend.tokenizer#token_id   
891 [0x37b]:           movn #6   
893 [0x37d]:           pushobj   
894 [0x37e]:           movl 0   
895 [0x37f]:           movn #10   
897 [0x381]:           movi #0, adx   
899 [0x383]:           iaload ebx, adx   
900 [0x384]:           rstore ebx   
901 [0x385]:           movl 0   
902 [0x386]:           movn #8   
904 [0x388]:           movi #0, adx   
906 [0x38a]:           iaload ebx, adx   
907 [0x38b]:           rstore ebx   
908 [0x38c]:           call @3786 // <main.frontend.tokenizer#token.token>   
909 [0x38d]:           call @4055 // <std#list<main.frontend.tokenizer#token>.add>   
910 [0x38e]:           nop   
911 [0x38f]: line: 572 movl 0   
912 [0x390]:           movn #5   
914 [0x392]:           movi #0, adx   
916 [0x394]:           iaload ebx, adx   
917 [0x395]:           movr egx, ebx   
918 [0x396]:           inc ebx   
919 [0x397]:           movi #0, adx   
921 [0x399]:           rmov adx, ebx   
922 [0x39a]: line: 573 istorel 0, fp+0   
924 [0x39c]:           ret   


function: main.frontend.tokenizer#tokenizer.isWhitespace[3810] params(1) in file: lib\support\/bootstrap//frontend//tokenizer//tokenizer.sharp:576:8: note:  
		    def isWhitespace(c: var) : var {
		       ^

0 [0x0]: line: 577 istore 32   
2 [0x2]:           loadl ebx, fp+1   
3 [0x3]:           loadval ecx   
4 [0x4]:           test ecx, ebx   
5 [0x5]:           movr ebx, cmt   
6 [0x6]:           skpe ebx // pc = 53   
7 [0x7]:           movi #10, ebx   
9 [0x9]:           rstore ebx   
10 [0xa]:           loadl ebx, fp+1   
11 [0xb]:           loadval ecx   
12 [0xc]:           test ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           skpe ebx // pc = 53   
15 [0xf]:           movi #13, ebx   
17 [0x11]:           rstore ebx   
18 [0x12]:           loadl ebx, fp+1   
19 [0x13]:           loadval ecx   
20 [0x14]:           test ecx, ebx   
21 [0x15]:           movr ebx, cmt   
22 [0x16]:           skpe ebx // pc = 53   
23 [0x17]:           movi #9, ebx   
25 [0x19]:           rstore ebx   
26 [0x1a]:           loadl ebx, fp+1   
27 [0x1b]:           loadval ecx   
28 [0x1c]:           test ecx, ebx   
29 [0x1d]:           movr ebx, cmt   
30 [0x1e]:           skpe ebx // pc = 53   
31 [0x1f]:           movi #8, ebx   
33 [0x21]:           rstore ebx   
34 [0x22]:           loadl ebx, fp+1   
35 [0x23]:           loadval ecx   
36 [0x24]:           test ecx, ebx   
37 [0x25]:           movr ebx, cmt   
38 [0x26]:           skpe ebx // pc = 53   
39 [0x27]:           movi #11, ebx   
41 [0x29]:           rstore ebx   
42 [0x2a]:           loadl ebx, fp+1   
43 [0x2b]:           loadval ecx   
44 [0x2c]:           test ecx, ebx   
45 [0x2d]:           movr ebx, cmt   
46 [0x2e]:           skpe ebx // pc = 53   
47 [0x2f]:           movi #12, ebx   
49 [0x31]:           rstore ebx   
50 [0x32]:           loadl ebx, fp+1   
51 [0x33]:           loadval ecx   
52 [0x34]:           test ecx, ebx   
53 [0x35]:           return_val cmt   
54 [0x36]:           ret   


function: main.frontend.tokenizer#tokenizer.get_escaped_string[3811] params(1) in file: lib\support\/bootstrap//frontend//tokenizer//tokenizer.sharp:583:8: note:  
		    def get_escaped_string(msg: string) : string {
		       ^

0 [0x0]: line: 584 pushl 1   
1 [0x1]:           call @3572 // <std#string.get_data>   
2 [0x2]:           popobj2    
3 [0x3]:           smovr_3 fp+2   
4 [0x4]: line: 585 movl 2   
5 [0x5]:           sizeof ebx   
6 [0x6]:           newarry ebx: 0   
7 [0x7]:           popobj2    
8 [0x8]:           smovr_3 fp+3   
9 [0x9]: line: 586 istorel 0, fp+4   
11 [0xb]: line: 588 istorel 0, fp+5   
13 [0xd]:           ipushl #5   
14 [0xe]:           movl 2   
15 [0xf]:           sizeof ebx   
16 [0x10]:           loadval ecx   
17 [0x11]:           lt ecx, ebx   
18 [0x12]:           movr ebx, cmt   
19 [0x13]:           movr cmt, ebx   
20 [0x14]:           jne 339   
21 [0x15]: line: 590 pushl 2   
22 [0x16]:           loadl ebx, fp+5   
23 [0x17]:           popobj2    
24 [0x18]:           movr adx, ebx   
25 [0x19]:           chklen adx   
26 [0x1a]:           iaload ebx, adx   
27 [0x1b]:           rstore ebx   
28 [0x1c]:           movi #92, ebx   
30 [0x1e]:           loadval ecx   
31 [0x1f]:           test ecx, ebx   
32 [0x20]:           movr ebx, cmt   
33 [0x21]:           movr cmt, ebx   
34 [0x22]:           jne 317   
35 [0x23]: line: 592 pushl 2   
36 [0x24]:           ipushl #5   
37 [0x25]:           movi #1, ebx   
39 [0x27]:           loadval ecx   
40 [0x28]:           add ecx, ebx -> ebx   
41 [0x29]:           popobj2    
42 [0x2a]:           movr adx, ebx   
43 [0x2b]:           chklen adx   
44 [0x2c]:           iaload ebx, adx   
45 [0x2d]:           rstore ebx   
46 [0x2e]:           movi #110, ebx   
48 [0x30]:           loadval ecx   
49 [0x31]:           test ecx, ebx   
50 [0x32]:           movr ebx, cmt   
51 [0x33]:           movr cmt, ebx   
52 [0x34]:           jne 67   
53 [0x35]: line: 593 istore 10   
55 [0x37]:           pushl 3   
56 [0x38]:           loadl ebx, fp+4   
57 [0x39]:           movr egx, ebx   
58 [0x3a]:           inc ebx   
59 [0x3b]:           smovr_2 ebx, fp+4   
60 [0x3c]:           movr ebx, egx   
61 [0x3d]:           popobj2    
62 [0x3e]:           movr adx, ebx   
63 [0x3f]:           chklen adx   
64 [0x40]:           loadval ebx   
65 [0x41]:           rmov adx, ebx   
66 [0x42]:           jmp @313   
67 [0x43]:           pushl 2   
68 [0x44]:           ipushl #5   
69 [0x45]:           movi #1, ebx   
71 [0x47]:           loadval ecx   
72 [0x48]:           add ecx, ebx -> ebx   
73 [0x49]:           popobj2    
74 [0x4a]:           movr adx, ebx   
75 [0x4b]:           chklen adx   
76 [0x4c]:           iaload ebx, adx   
77 [0x4d]:           rstore ebx   
78 [0x4e]:           movi #116, ebx   
80 [0x50]:           loadval ecx   
81 [0x51]:           test ecx, ebx   
82 [0x52]:           movr ebx, cmt   
83 [0x53]:           movr cmt, ebx   
84 [0x54]:           jne 99   
85 [0x55]: line: 594 istore 9   
87 [0x57]:           pushl 3   
88 [0x58]:           loadl ebx, fp+4   
89 [0x59]:           movr egx, ebx   
90 [0x5a]:           inc ebx   
91 [0x5b]:           smovr_2 ebx, fp+4   
92 [0x5c]:           movr ebx, egx   
93 [0x5d]:           popobj2    
94 [0x5e]:           movr adx, ebx   
95 [0x5f]:           chklen adx   
96 [0x60]:           loadval ebx   
97 [0x61]:           rmov adx, ebx   
98 [0x62]:           jmp @313   
99 [0x63]:           pushl 2   
100 [0x64]:           ipushl #5   
101 [0x65]:           movi #1, ebx   
103 [0x67]:           loadval ecx   
104 [0x68]:           add ecx, ebx -> ebx   
105 [0x69]:           popobj2    
106 [0x6a]:           movr adx, ebx   
107 [0x6b]:           chklen adx   
108 [0x6c]:           iaload ebx, adx   
109 [0x6d]:           rstore ebx   
110 [0x6e]:           movi #98, ebx   
112 [0x70]:           loadval ecx   
113 [0x71]:           test ecx, ebx   
114 [0x72]:           movr ebx, cmt   
115 [0x73]:           movr cmt, ebx   
116 [0x74]:           jne 131   
117 [0x75]: line: 595 istore 8   
119 [0x77]:           pushl 3   
120 [0x78]:           loadl ebx, fp+4   
121 [0x79]:           movr egx, ebx   
122 [0x7a]:           inc ebx   
123 [0x7b]:           smovr_2 ebx, fp+4   
124 [0x7c]:           movr ebx, egx   
125 [0x7d]:           popobj2    
126 [0x7e]:           movr adx, ebx   
127 [0x7f]:           chklen adx   
128 [0x80]:           loadval ebx   
129 [0x81]:           rmov adx, ebx   
130 [0x82]:           jmp @313   
131 [0x83]:           pushl 2   
132 [0x84]:           ipushl #5   
133 [0x85]:           movi #1, ebx   
135 [0x87]:           loadval ecx   
136 [0x88]:           add ecx, ebx -> ebx   
137 [0x89]:           popobj2    
138 [0x8a]:           movr adx, ebx   
139 [0x8b]:           chklen adx   
140 [0x8c]:           iaload ebx, adx   
141 [0x8d]:           rstore ebx   
142 [0x8e]:           movi #118, ebx   
144 [0x90]:           loadval ecx   
145 [0x91]:           test ecx, ebx   
146 [0x92]:           movr ebx, cmt   
147 [0x93]:           movr cmt, ebx   
148 [0x94]:           jne 163   
149 [0x95]: line: 596 istore 11   
151 [0x97]:           pushl 3   
152 [0x98]:           loadl ebx, fp+4   
153 [0x99]:           movr egx, ebx   
154 [0x9a]:           inc ebx   
155 [0x9b]:           smovr_2 ebx, fp+4   
156 [0x9c]:           movr ebx, egx   
157 [0x9d]:           popobj2    
158 [0x9e]:           movr adx, ebx   
159 [0x9f]:           chklen adx   
160 [0xa0]:           loadval ebx   
161 [0xa1]:           rmov adx, ebx   
162 [0xa2]:           jmp @313   
163 [0xa3]:           pushl 2   
164 [0xa4]:           ipushl #5   
165 [0xa5]:           movi #1, ebx   
167 [0xa7]:           loadval ecx   
168 [0xa8]:           add ecx, ebx -> ebx   
169 [0xa9]:           popobj2    
170 [0xaa]:           movr adx, ebx   
171 [0xab]:           chklen adx   
172 [0xac]:           iaload ebx, adx   
173 [0xad]:           rstore ebx   
174 [0xae]:           movi #114, ebx   
176 [0xb0]:           loadval ecx   
177 [0xb1]:           test ecx, ebx   
178 [0xb2]:           movr ebx, cmt   
179 [0xb3]:           movr cmt, ebx   
180 [0xb4]:           jne 195   
181 [0xb5]: line: 597 istore 13   
183 [0xb7]:           pushl 3   
184 [0xb8]:           loadl ebx, fp+4   
185 [0xb9]:           movr egx, ebx   
186 [0xba]:           inc ebx   
187 [0xbb]:           smovr_2 ebx, fp+4   
188 [0xbc]:           movr ebx, egx   
189 [0xbd]:           popobj2    
190 [0xbe]:           movr adx, ebx   
191 [0xbf]:           chklen adx   
192 [0xc0]:           loadval ebx   
193 [0xc1]:           rmov adx, ebx   
194 [0xc2]:           jmp @313   
195 [0xc3]:           pushl 2   
196 [0xc4]:           ipushl #5   
197 [0xc5]:           movi #1, ebx   
199 [0xc7]:           loadval ecx   
200 [0xc8]:           add ecx, ebx -> ebx   
201 [0xc9]:           popobj2    
202 [0xca]:           movr adx, ebx   
203 [0xcb]:           chklen adx   
204 [0xcc]:           iaload ebx, adx   
205 [0xcd]:           rstore ebx   
206 [0xce]:           movi #102, ebx   
208 [0xd0]:           loadval ecx   
209 [0xd1]:           test ecx, ebx   
210 [0xd2]:           movr ebx, cmt   
211 [0xd3]:           movr cmt, ebx   
212 [0xd4]:           jne 227   
213 [0xd5]: line: 598 istore 12   
215 [0xd7]:           pushl 3   
216 [0xd8]:           loadl ebx, fp+4   
217 [0xd9]:           movr egx, ebx   
218 [0xda]:           inc ebx   
219 [0xdb]:           smovr_2 ebx, fp+4   
220 [0xdc]:           movr ebx, egx   
221 [0xdd]:           popobj2    
222 [0xde]:           movr adx, ebx   
223 [0xdf]:           chklen adx   
224 [0xe0]:           loadval ebx   
225 [0xe1]:           rmov adx, ebx   
226 [0xe2]:           jmp @313   
227 [0xe3]:           pushl 2   
228 [0xe4]:           ipushl #5   
229 [0xe5]:           movi #1, ebx   
231 [0xe7]:           loadval ecx   
232 [0xe8]:           add ecx, ebx -> ebx   
233 [0xe9]:           popobj2    
234 [0xea]:           movr adx, ebx   
235 [0xeb]:           chklen adx   
236 [0xec]:           iaload ebx, adx   
237 [0xed]:           rstore ebx   
238 [0xee]:           movi #48, ebx   
240 [0xf0]:           loadval ecx   
241 [0xf1]:           test ecx, ebx   
242 [0xf2]:           movr ebx, cmt   
243 [0xf3]:           movr cmt, ebx   
244 [0xf4]:           jne 259   
245 [0xf5]: line: 599 istore 0   
247 [0xf7]:           pushl 3   
248 [0xf8]:           loadl ebx, fp+4   
249 [0xf9]:           movr egx, ebx   
250 [0xfa]:           inc ebx   
251 [0xfb]:           smovr_2 ebx, fp+4   
252 [0xfc]:           movr ebx, egx   
253 [0xfd]:           popobj2    
254 [0xfe]:           movr adx, ebx   
255 [0xff]:           chklen adx   
256 [0x100]:           loadval ebx   
257 [0x101]:           rmov adx, ebx   
258 [0x102]:           jmp @313   
259 [0x103]:           pushl 2   
260 [0x104]:           ipushl #5   
261 [0x105]:           movi #1, ebx   
263 [0x107]:           loadval ecx   
264 [0x108]:           add ecx, ebx -> ebx   
265 [0x109]:           popobj2    
266 [0x10a]:           movr adx, ebx   
267 [0x10b]:           chklen adx   
268 [0x10c]:           iaload ebx, adx   
269 [0x10d]:           rstore ebx   
270 [0x10e]:           movi #97, ebx   
272 [0x110]:           loadval ecx   
273 [0x111]:           test ecx, ebx   
274 [0x112]:           movr ebx, cmt   
275 [0x113]:           movr cmt, ebx   
276 [0x114]:           jne 291   
277 [0x115]: line: 600 istore 7   
279 [0x117]:           pushl 3   
280 [0x118]:           loadl ebx, fp+4   
281 [0x119]:           movr egx, ebx   
282 [0x11a]:           inc ebx   
283 [0x11b]:           smovr_2 ebx, fp+4   
284 [0x11c]:           movr ebx, egx   
285 [0x11d]:           popobj2    
286 [0x11e]:           movr adx, ebx   
287 [0x11f]:           chklen adx   
288 [0x120]:           loadval ebx   
289 [0x121]:           rmov adx, ebx   
290 [0x122]:           jmp @313   
291 [0x123]: line: 601 pushl 2   
292 [0x124]:           ipushl #5   
293 [0x125]:           movi #1, ebx   
295 [0x127]:           loadval ecx   
296 [0x128]:           add ecx, ebx -> ebx   
297 [0x129]:           popobj2    
298 [0x12a]:           movr adx, ebx   
299 [0x12b]:           chklen adx   
300 [0x12c]:           iaload ebx, adx   
301 [0x12d]:           rstore ebx   
302 [0x12e]:           pushl 3   
303 [0x12f]:           loadl ebx, fp+4   
304 [0x130]:           movr egx, ebx   
305 [0x131]:           inc ebx   
306 [0x132]:           smovr_2 ebx, fp+4   
307 [0x133]:           movr ebx, egx   
308 [0x134]:           popobj2    
309 [0x135]:           movr adx, ebx   
310 [0x136]:           chklen adx   
311 [0x137]:           loadval ebx   
312 [0x138]:           rmov adx, ebx   
313 [0x139]:           nop   
314 [0x13a]: line: 604 iaddl 1, fp@5   
316 [0x13c]:           jmp @335   
317 [0x13d]: line: 607 pushl 2   
318 [0x13e]:           loadl ebx, fp+5   
319 [0x13f]:           popobj2    
320 [0x140]:           movr adx, ebx   
321 [0x141]:           chklen adx   
322 [0x142]:           iaload ebx, adx   
323 [0x143]:           rstore ebx   
324 [0x144]:           pushl 3   
325 [0x145]:           loadl ebx, fp+4   
326 [0x146]:           movr egx, ebx   
327 [0x147]:           inc ebx   
328 [0x148]:           smovr_2 ebx, fp+4   
329 [0x149]:           movr ebx, egx   
330 [0x14a]:           popobj2    
331 [0x14b]:           movr adx, ebx   
332 [0x14c]:           chklen adx   
333 [0x14d]:           loadval ebx   
334 [0x14e]:           rmov adx, ebx   
335 [0x14f]:           nop   
336 [0x150]:           iaddl 1, fp@5   
338 [0x152]:           jmp @13   
339 [0x153]: line: 609 new_class @75 // std#string   
341 [0x155]:           dup    
342 [0x156]:           pushl 3   
343 [0x157]:           istore 0   
345 [0x159]:           ipushl #4   
346 [0x15a]:           call @3551 // <std#string.string>   
347 [0x15b]:           popobj2    
348 [0x15c]:           returnobj   
349 [0x15d]:           ret   


function: main.frontend.tokenizer#tokenizer.is_sign[3812] params(1) in file: lib\support\/bootstrap//frontend//tokenizer//tokenizer.sharp:612:8: note:  
		    def is_sign(c : var) : var {
		       ^

0 [0x0]: line: 613 istore 43   
2 [0x2]:           loadl ebx, fp+1   
3 [0x3]:           loadval ecx   
4 [0x4]:           test ecx, ebx   
5 [0x5]:           movr ebx, cmt   
6 [0x6]:           skpe ebx // pc = 13   
7 [0x7]:           movi #45, ebx   
9 [0x9]:           rstore ebx   
10 [0xa]:           loadl ebx, fp+1   
11 [0xb]:           loadval ecx   
12 [0xc]:           test ecx, ebx   
13 [0xd]:           return_val cmt   
14 [0xe]:           ret   


function: main.frontend.tokenizer#tokenizer.newline[3813] params(0) in file: lib\support\/bootstrap//frontend//tokenizer//tokenizer.sharp:616:8: note:  
		    def newline() {
		       ^

0 [0x0]: line: 617 movi #0, ebx   
2 [0x2]:           movl 0   
3 [0x3]:           movn #10   
5 [0x5]:           movi #0, adx   
7 [0x7]:           rmov adx, ebx   
8 [0x8]: line: 618 movl 0   
9 [0x9]:           movn #8   
11 [0xb]:           movi #0, adx   
13 [0xd]:           iaload ebx, adx   
14 [0xe]:           movr egx, ebx   
15 [0xf]:           inc ebx   
16 [0x10]:           movi #0, adx   
18 [0x12]:           rmov adx, ebx   
19 [0x13]:           ret   


function: main.frontend.tokenizer#tokenizer.advance[3814] params(0) in file: lib\support\/bootstrap//frontend//tokenizer//tokenizer.sharp:621:8: note:  
		    def advance() {
		       ^

0 [0x0]: line: 622 movl 0   
1 [0x1]:           movn #10   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           movr egx, ebx   
7 [0x7]:           inc ebx   
8 [0x8]:           movi #0, adx   
10 [0xa]:           rmov adx, ebx   
11 [0xb]: line: 623 movl 0   
12 [0xc]:           movn #5   
14 [0xe]:           movi #0, adx   
16 [0x10]:           iaload ebx, adx   
17 [0x11]:           movr egx, ebx   
18 [0x12]:           inc ebx   
19 [0x13]:           movi #0, adx   
21 [0x15]:           rmov adx, ebx   
22 [0x16]: line: 624 movl 0   
23 [0x17]:           movn #5   
25 [0x19]:           movi #0, adx   
27 [0x1b]:           iaload ebx, adx   
28 [0x1c]:           rstore ebx   
29 [0x1d]:           movl 0   
30 [0x1e]:           movn #4   
32 [0x20]:           sizeof ebx   
33 [0x21]:           loadval ecx   
34 [0x22]:           lt ecx, ebx   
35 [0x23]:           movr ebx, cmt   
36 [0x24]:           movr cmt, ebx   
37 [0x25]:           jne 59   
38 [0x26]: line: 625 movl 0   
39 [0x27]:           movn #4   
41 [0x29]:           pushobj   
42 [0x2a]:           movl 0   
43 [0x2b]:           movn #5   
45 [0x2d]:           movi #0, adx   
47 [0x2f]:           iaload ebx, adx   
48 [0x30]:           popobj2    
49 [0x31]:           movr adx, ebx   
50 [0x32]:           chklen adx   
51 [0x33]:           iaload ebx, adx   
52 [0x34]:           movl 0   
53 [0x35]:           movn #7   
55 [0x37]:           movi #0, adx   
57 [0x39]:           rmov adx, ebx   
58 [0x3a]:           jmp @67   
59 [0x3b]: line: 626 movi #1, ebx   
61 [0x3d]:           movl 0   
62 [0x3e]:           movn #9   
64 [0x40]:           movi #0, adx   
66 [0x42]:           rmov adx, ebx   
67 [0x43]:           nop   
68 [0x44]:           ret   


function: main.frontend.tokenizer#tokenizer.peek_end[3815] params(1) in file: lib\support\/bootstrap//frontend//tokenizer//tokenizer.sharp:629:8: note:  
		    def peek_end(chars: var) : var {
		       ^

0 [0x0]: line: 630 movl 0   
1 [0x1]:           movn #5   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           add ecx, ebx -> ebx   
10 [0xa]:           rstore ebx   
11 [0xb]:           movl 0   
12 [0xc]:           movn #4   
14 [0xe]:           sizeof ebx   
15 [0xf]:           loadval ecx   
16 [0x10]:           gte ecx, ebx   
17 [0x11]:           return_val cmt   
18 [0x12]:           ret   


function: main.frontend.tokenizer#tokenizer.tokens_left[3816] params(0) in file: lib\support\/bootstrap//frontend//tokenizer//tokenizer.sharp:633:8: note:  
		    def tokens_left() : var {
		       ^

0 [0x0]: line: 634 movl 0   
1 [0x1]:           movn #4   
3 [0x3]:           sizeof ebx   
4 [0x4]:           rstore ebx   
5 [0x5]:           movl 0   
6 [0x6]:           movn #5   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           loadval ecx   
12 [0xc]:           sub ecx, ebx -> ebx   
13 [0xd]:           return_val ebx   
14 [0xe]:           ret   


function: main.frontend.tokenizer#tokenizer.peek[3817] params(1) in file: lib\support\/bootstrap//frontend//tokenizer//tokenizer.sharp:637:8: note:  
		    def peek(chars: var) : var {
		       ^

0 [0x0]: line: 638 movl 0   
1 [0x1]:           movn #5   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           loadl ebx, fp+1   
8 [0x8]:           loadval ecx   
9 [0x9]:           add ecx, ebx -> ebx   
10 [0xa]:           rstore ebx   
11 [0xb]:           movl 0   
12 [0xc]:           movn #4   
14 [0xe]:           sizeof ebx   
15 [0xf]:           loadval ecx   
16 [0x10]:           gte ecx, ebx   
17 [0x11]:           movr ebx, cmt   
18 [0x12]:           skpe ebx // pc = 35   
19 [0x13]:           movl 0   
20 [0x14]:           movn #5   
22 [0x16]:           movi #0, adx   
24 [0x18]:           iaload ebx, adx   
25 [0x19]:           rstore ebx   
26 [0x1a]:           loadl ebx, fp+1   
27 [0x1b]:           loadval ecx   
28 [0x1c]:           add ecx, ebx -> ebx   
29 [0x1d]:           rstore ebx   
30 [0x1e]:           movi #0, ebx   
32 [0x20]:           loadval ecx   
33 [0x21]:           lt ecx, ebx   
34 [0x22]:           movr ebx, cmt   
35 [0x23]:           skne ebx // pc = 54   
36 [0x24]:           movl 0   
37 [0x25]:           movn #4   
39 [0x27]:           pushobj   
40 [0x28]:           movl 0   
41 [0x29]:           movn #4   
43 [0x2b]:           sizeof ebx   
44 [0x2c]:           rstore ebx   
45 [0x2d]:           movi #1, ebx   
47 [0x2f]:           loadval ecx   
48 [0x30]:           sub ecx, ebx -> ebx   
49 [0x31]:           popobj2    
50 [0x32]:           movr adx, ebx   
51 [0x33]:           chklen adx   
52 [0x34]:           iaload ebx, adx   
53 [0x35]:           skip @18 // pc = 71   
54 [0x36]:           movl 0   
55 [0x37]:           movn #4   
57 [0x39]:           pushobj   
58 [0x3a]:           movl 0   
59 [0x3b]:           movn #5   
61 [0x3d]:           movi #0, adx   
63 [0x3f]:           iaload ebx, adx   
64 [0x40]:           rstore ebx   
65 [0x41]:           loadl ebx, fp+1   
66 [0x42]:           loadval ecx   
67 [0x43]:           add ecx, ebx -> ebx   
68 [0x44]:           popobj2    
69 [0x45]:           movr adx, ebx   
70 [0x46]:           chklen adx   
71 [0x47]:           iaload ebx, adx   
72 [0x48]:           return_val ebx   
73 [0x49]:           ret   


function: main.frontend.tokenizer#tokenizer.get_errors[3818] params(0) in file: lib\support\/bootstrap//frontend//tokenizer//tokenizer.sharp:642:15: note:  
		    public def get_errors() : error_manager {
		              ^

0 [0x0]: line: 643 movl 0   
1 [0x1]:           movn #1   
3 [0x3]:           returnobj   
4 [0x4]:           ret   


function: main.frontend.tokenizer#tokenizer.get_data[3819] params(0) in file: lib\support\/bootstrap//frontend//tokenizer//tokenizer.sharp:646:15: note:  
		    public def get_data() : string {
		              ^

0 [0x0]: line: 647 movl 0   
1 [0x1]:           movn #3   
3 [0x3]:           returnobj   
4 [0x4]:           ret   


function: main.frontend.tokenizer#tokenizer.get_lines[3820] params(0) in file: lib\support\/bootstrap//frontend//tokenizer//tokenizer.sharp:650:15: note:  
		    public def get_lines() : list<string> {
		              ^

0 [0x0]: line: 651 movl 0   
1 [0x1]:           movn #2   
3 [0x3]:           returnobj   
4 [0x4]:           ret   


function: main.frontend.tokenizer#tokenizer.get_file[3821] params(0) in file: lib\support\/bootstrap//frontend//tokenizer//tokenizer.sharp:654:15: note:  
		    public def get_file() : string {
		              ^

0 [0x0]: line: 655 movl 0   
1 [0x1]:           movn #13   
3 [0x3]:           returnobj   
4 [0x4]:           ret   


function: main.frontend.tokenizer#tokenizer.at[3822] params(1) in file: lib\support\/bootstrap//frontend//tokenizer//tokenizer.sharp:658:15: note:  
		    public def at(pos: var) : token {
		              ^

0 [0x0]: line: 659 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           ipushl #1   
5 [0x5]:           call @4048 // <std#list<main.frontend.tokenizer#token>.at>   
6 [0x6]:           popobj2    
7 [0x7]:           returnobj   
8 [0x8]:           ret   


function: main.frontend.tokenizer#tokenizer.last[3823] params(0) in file: lib\support\/bootstrap//frontend//tokenizer//tokenizer.sharp:662:15: note:  
		    public def last() : token {
		              ^

0 [0x0]: line: 663 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           call @4049 // <std#list<main.frontend.tokenizer#token>.last>   
5 [0x5]:           popobj2    
6 [0x6]:           returnobj   
7 [0x7]:           ret   


function: main.frontend.tokenizer#tokenizer.get_tokens[3824] params(0) in file: lib\support\/bootstrap//frontend//tokenizer//tokenizer.sharp:666:15: note:  
		    public def get_tokens() : token[] {
		              ^

0 [0x0]: line: 667 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           call @4046 // <std#list<main.frontend.tokenizer#token>.get_elements>   
5 [0x5]:           popobj2    
6 [0x6]:           returnobj   
7 [0x7]:           ret   


function: main.frontend.tokenizer#tokenizer.size[3825] params(0) in file: lib\support\/bootstrap//frontend//tokenizer//tokenizer.sharp:670:15: note:  
		    public def size() : var {
		              ^

0 [0x0]: line: 671 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           call @4060 // <std#list<main.frontend.tokenizer#token>.size>   
5 [0x5]:           loadval ebx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: main.frontend.tokenizer#tokenizer.add_lines[3826] params(0) in file: lib\support\/bootstrap//frontend//tokenizer//tokenizer.sharp:674:8: note:  
		    def add_lines() {
		       ^

0 [0x0]: line: 675 movl 0   
1 [0x1]:           movn #3   
3 [0x3]:           pushobj   
4 [0x4]:           call @3572 // <std#string.get_data>   
5 [0x5]:           popobj2    
6 [0x6]:           smovr_3 fp+1   
7 [0x7]: line: 677 movi #0, ebx   
9 [0x9]:           movl 0   
10 [0xa]:           movn #6   
12 [0xc]:           movi #0, adx   
14 [0xe]:           rmov adx, ebx   
15 [0xf]: line: 678 istorel 0, fp+2   
17 [0x11]:           ipushl #2   
18 [0x12]:           movl 1   
19 [0x13]:           sizeof ebx   
20 [0x14]:           loadval ecx   
21 [0x15]:           lt ecx, ebx   
22 [0x16]:           movr ebx, cmt   
23 [0x17]:           movr cmt, ebx   
24 [0x18]:           jne 98   
25 [0x19]: line: 679 pushl 1   
26 [0x1a]:           loadl ebx, fp+2   
27 [0x1b]:           popobj2    
28 [0x1c]:           movr adx, ebx   
29 [0x1d]:           chklen adx   
30 [0x1e]:           iaload ebx, adx   
31 [0x1f]:           rstore ebx   
32 [0x20]:           movi #10, ebx   
34 [0x22]:           loadval ecx   
35 [0x23]:           test ecx, ebx   
36 [0x24]:           movr ebx, cmt   
37 [0x25]:           movr cmt, ebx   
38 [0x26]:           jne 94   
39 [0x27]: line: 680 movl 0   
40 [0x28]:           movn #2   
42 [0x2a]:           pushobj   
43 [0x2b]:           movl 0   
44 [0x2c]:           movn #3   
46 [0x2e]:           pushobj   
47 [0x2f]:           movl 0   
48 [0x30]:           movn #6   
50 [0x32]:           movi #0, adx   
52 [0x34]:           iaload ebx, adx   
53 [0x35]:           rstore ebx   
54 [0x36]:           ipushl #2   
55 [0x37]:           movi #0, ebx   
57 [0x39]:           loadval ecx   
58 [0x3a]:           test ecx, ebx   
59 [0x3b]:           movr ebx, cmt   
60 [0x3c]:           skpe ebx // pc = 72   
61 [0x3d]:           movl 0   
62 [0x3e]:           movn #6   
64 [0x40]:           movi #0, adx   
66 [0x42]:           iaload ebx, adx   
67 [0x43]:           rstore ebx   
68 [0x44]:           loadl ebx, fp+2   
69 [0x45]:           loadval ecx   
70 [0x46]:           test ecx, ebx   
71 [0x47]:           movr ebx, cmt   
72 [0x48]:           skne ebx // pc = 75   
73 [0x49]:           loadl ebx, fp+2   
74 [0x4a]:           skip @5 // pc = 79   
75 [0x4b]:           ipushl #2   
76 [0x4c]:           movi #1, ebx   
78 [0x4e]:           loadval ecx   
79 [0x4f]:           sub ecx, ebx -> ebx   
80 [0x50]:           rstore ebx   
81 [0x51]:           call @3601 // <std#string.substring>   
82 [0x52]:           call @3682 // <std#list<std#string>.add>   
83 [0x53]: line: 681 ipushl #2   
84 [0x54]:           movi #1, ebx   
86 [0x56]:           loadval ecx   
87 [0x57]:           add ecx, ebx -> ebx   
88 [0x58]:           movl 0   
89 [0x59]:           movn #6   
91 [0x5b]:           movi #0, adx   
93 [0x5d]:           rmov adx, ebx   
94 [0x5e]:           nop   
95 [0x5f]:           iaddl 1, fp@2   
97 [0x61]:           jmp @17   
98 [0x62]: line: 685 movl 0   
99 [0x63]:           movn #6   
101 [0x65]:           movi #0, adx   
103 [0x67]:           iaload ebx, adx   
104 [0x68]:           rstore ebx   
105 [0x69]:           movi #0, ebx   
107 [0x6b]:           loadval ecx   
108 [0x6c]:           test ecx, ebx   
109 [0x6d]:           movr ebx, cmt   
110 [0x6e]:           movr cmt, ebx   
111 [0x6f]:           jne 122   
112 [0x70]: line: 686 movl 0   
113 [0x71]:           movn #2   
115 [0x73]:           pushobj   
116 [0x74]:           new_class @75 // std#string   
118 [0x76]:           dup    
119 [0x77]:           pushl 1   
120 [0x78]:           call @3546 // <std#string.string>   
121 [0x79]:           call @3682 // <std#list<std#string>.add>   
122 [0x7a]:           nop   
123 [0x7b]:           ret   


function: main.frontend.tokenizer#tokenizer.is_hex_num[3827] params(1) in file: lib\support\/bootstrap//frontend//tokenizer//tokenizer.sharp:689:23: note:  
		    private static def is_hex_num(c: var) : var {
		                      ^

0 [0x0]: line: 690 ipushl #0   
1 [0x1]:           call @3209 // <std#char.is_digit>   
2 [0x2]:           loadval ebx   
3 [0x3]:           skpe ebx // pc = 30   
4 [0x4]:           ipushl #0   
5 [0x5]:           movi #65, ebx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gte ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skne ebx // pc = 17   
11 [0xb]:           ipushl #0   
12 [0xc]:           movi #72, ebx   
14 [0xe]:           loadval ecx   
15 [0xf]:           lte ecx, ebx   
16 [0x10]:           movr ebx, cmt   
17 [0x11]:           skpe ebx // pc = 30   
18 [0x12]:           ipushl #0   
19 [0x13]:           movi #97, ebx   
21 [0x15]:           loadval ecx   
22 [0x16]:           gte ecx, ebx   
23 [0x17]:           movr ebx, cmt   
24 [0x18]:           skne ebx // pc = 30   
25 [0x19]:           ipushl #0   
26 [0x1a]:           movi #104, ebx   
28 [0x1c]:           loadval ecx   
29 [0x1d]:           lte ecx, ebx   
30 [0x1e]:           return_val cmt   
31 [0x1f]:           ret   


function: main#__srt_global.main[3828] params(1) in file: lib\support\/bootstrap//main.sharp:12:4: note:  
		def main(args: string[]) : var {
		   ^

0 [0x0]: line: 13 movl 0   
1 [0x1]:          checknull   
2 [0x2]:          movr cmt, ebx   
3 [0x3]:          jne 8   
4 [0x4]: line: 14 call @3841 // <main#__srt_global.help>   
5 [0x5]: line: 15 istorel 1, fp+0   
7 [0x7]:          ret   
8 [0x8]:          nop   
9 [0x9]: line: 19 new_class @110 // std#list<std#string>   
11 [0xb]:          dup    
12 [0xc]:          call @3668 // <std#list<std#string>.list>   
13 [0xd]:          popobj2    
14 [0xe]:          smovr_3 fp+1   
15 [0xf]: line: 20 istorel 0, fp+2   
17 [0x11]:          ipushl #2   
18 [0x12]:          movl 0   
19 [0x13]:          sizeof ebx   
20 [0x14]:          loadval ecx   
21 [0x15]:          lt ecx, ebx   
22 [0x16]:          movr ebx, cmt   
23 [0x17]:          movr cmt, ebx   
24 [0x18]:          jne 1177   
25 [0x19]: line: 22 pushl 0   
26 [0x1a]: line: 23 loadl ebx, fp+2   
27 [0x1b]:          popobj2    
28 [0x1c]:          movr adx, ebx   
29 [0x1d]:          chklen adx   
30 [0x1e]:          movnd adx   
31 [0x1f]:          smovr_3 fp+3   
32 [0x20]: line: 24 pushl 3   
33 [0x21]:          newstr @165 // -a   
34 [0x22]:          call @3563 // <std#string.operator==>   
35 [0x23]:          loadval ebx   
36 [0x24]:          movr cmt, ebx   
37 [0x25]:          jne 48   
38 [0x26]: line: 25 istore 1   
40 [0x28]:          movg @95 // @main#options   
41 [0x29]:          movn #0   
43 [0x2b]:          loadval ebx   
44 [0x2c]:          movi #0, adx   
46 [0x2e]:          rmov adx, ebx   
47 [0x2f]:          jmp @1173   
48 [0x30]:          pushl 3   
49 [0x31]:          newstr @166 // -c   
50 [0x32]:          call @3563 // <std#string.operator==>   
51 [0x33]:          loadval ebx   
52 [0x34]:          movr cmt, ebx   
53 [0x35]:          jne 64   
54 [0x36]: line: 28 istore 1   
56 [0x38]:          movg @95 // @main#options   
57 [0x39]:          movn #1   
59 [0x3b]:          loadval ebx   
60 [0x3c]:          movi #0, adx   
62 [0x3e]:          rmov adx, ebx   
63 [0x3f]:          jmp @1173   
64 [0x40]:          pushl 3   
65 [0x41]:          newstr @167 // -o   
66 [0x42]:          call @3563 // <std#string.operator==>   
67 [0x43]:          loadval ebx   
68 [0x44]:          movr cmt, ebx   
69 [0x45]:          jne 105   
70 [0x46]: line: 31 ipushl #2   
71 [0x47]:          movi #1, ebx   
73 [0x49]:          loadval ecx   
74 [0x4a]:          add ecx, ebx -> ebx   
75 [0x4b]:          rstore ebx   
76 [0x4c]:          movl 0   
77 [0x4d]:          sizeof ebx   
78 [0x4e]:          loadval ecx   
79 [0x4f]:          gte ecx, ebx   
80 [0x50]:          movr ebx, cmt   
81 [0x51]:          movr cmt, ebx   
82 [0x52]:          jne 90   
83 [0x53]: line: 32 new_class @75 // std#string   
85 [0x55]:          dup    
86 [0x56]:          newstr @168 // output file required after option `-o`   
87 [0x57]:          call @3546 // <std#string.string>   
88 [0x58]:          call @3839 // <main#__srt_global.error>   
89 [0x59]:          jmp @103   
90 [0x5a]: line: 34 pushl 0   
91 [0x5b]:          loadl ebx, fp+2   
92 [0x5c]:          inc ebx   
93 [0x5d]:          smovr_2 ebx, fp+2   
94 [0x5e]:          popobj2    
95 [0x5f]:          movr adx, ebx   
96 [0x60]:          chklen adx   
97 [0x61]:          movnd adx   
98 [0x62]:          pushobj   
99 [0x63]:          movg @95 // @main#options   
100 [0x64]:          movn #3   
102 [0x66]:          popobj   
103 [0x67]:          nop   
104 [0x68]:          jmp @1173   
105 [0x69]:          pushl 3   
106 [0x6a]:          newstr @169 // -L   
107 [0x6b]:          call @3563 // <std#string.operator==>   
108 [0x6c]:          loadval ebx   
109 [0x6d]:          movr cmt, ebx   
110 [0x6e]:          jne 181   
111 [0x6f]: line: 37 ipushl #2   
112 [0x70]:          movi #1, ebx   
114 [0x72]:          loadval ecx   
115 [0x73]:          add ecx, ebx -> ebx   
116 [0x74]:          rstore ebx   
117 [0x75]:          movl 0   
118 [0x76]:          sizeof ebx   
119 [0x77]:          loadval ecx   
120 [0x78]:          gte ecx, ebx   
121 [0x79]:          movr ebx, cmt   
122 [0x7a]:          movr cmt, ebx   
123 [0x7b]:          jne 131   
124 [0x7c]: line: 38 new_class @75 // std#string   
126 [0x7e]:          dup    
127 [0x7f]:          newstr @170 // library directory required after option `-L`   
128 [0x80]:          call @3546 // <std#string.string>   
129 [0x81]:          call @3839 // <main#__srt_global.error>   
130 [0x82]:          jmp @179   
131 [0x83]: line: 40 new_class @28 // std.io#file   
133 [0x85]:          dup    
134 [0x86]:          pushl 0   
135 [0x87]:          loadl ebx, fp+2   
136 [0x88]:          inc ebx   
137 [0x89]:          smovr_2 ebx, fp+2   
138 [0x8a]:          popobj2    
139 [0x8b]:          movr adx, ebx   
140 [0x8c]:          chklen adx   
141 [0x8d]:          movnd adx   
142 [0x8e]:          pushobj   
143 [0x8f]:          call @2077 // <std.io#file.file>   
144 [0x90]:          popobj2    
145 [0x91]:          smovr_3 fp+4   
146 [0x92]: line: 41 pushl 4   
147 [0x93]:          call @2087 // <std.io#file.exists>   
148 [0x94]:          loadval ebx   
149 [0x95]:          not ebx, ebx   
150 [0x96]:          movr cmt, ebx   
151 [0x97]:          jne 158   
152 [0x98]: line: 42 new_class @75 // std#string   
154 [0x9a]:          dup    
155 [0x9b]:          newstr @171 // library path: library_dir dosen't exist!   
156 [0x9c]:          call @3546 // <std#string.string>   
157 [0x9d]:          call @3839 // <main#__srt_global.error>   
158 [0x9e]:          nop   
159 [0x9f]: line: 45 pushl 4   
160 [0xa0]:          call @2088 // <std.io#file.is_directory>   
161 [0xa1]:          loadval ebx   
162 [0xa2]:          not ebx, ebx   
163 [0xa3]:          movr cmt, ebx   
164 [0xa4]:          jne 171   
165 [0xa5]: line: 46 new_class @75 // std#string   
167 [0xa7]:          dup    
168 [0xa8]:          newstr @172 // library path: library_dir is not a directory   
169 [0xa9]:          call @3546 // <std#string.string>   
170 [0xaa]:          call @3839 // <main#__srt_global.error>   
171 [0xab]:          nop   
172 [0xac]: line: 49 movg @95 // @main#options   
173 [0xad]:          movn #21   
175 [0xaf]:          pushobj   
176 [0xb0]:          pushl 4   
177 [0xb1]:          call @2084 // <std.io#file.get_absolute_path>   
178 [0xb2]:          call @3682 // <std#list<std#string>.add>   
179 [0xb3]:          nop   
180 [0xb4]:          jmp @1173   
181 [0xb5]:          pushl 3   
182 [0xb6]:          newstr @173 // -V   
183 [0xb7]:          call @3563 // <std#string.operator==>   
184 [0xb8]:          loadval ebx   
185 [0xb9]:          movr cmt, ebx   
186 [0xba]:          jne 190   
187 [0xbb]: line: 53 call @3840 // <main#__srt_global.print_version>   
188 [0xbc]: line: 54 call @1927 // <std#__srt_global.exit>   
189 [0xbd]:          jmp @1173   
190 [0xbe]:          pushl 3   
191 [0xbf]:          newstr @174 // -O   
192 [0xc0]:          call @3563 // <std#string.operator==>   
193 [0xc1]:          loadval ebx   
194 [0xc2]:          skpe ebx // pc = 200   
195 [0xc3]:          movl 3   
196 [0xc4]:          pushobj   
197 [0xc5]:          newstr @175 // -O1   
198 [0xc6]:          call @3563 // <std#string.operator==>   
199 [0xc7]:          loadval ebx   
200 [0xc8]:          movr cmt, ebx   
201 [0xc9]:          jne 211   
202 [0xca]: line: 57 movg @96 // @main#optimization_level   
203 [0xcb]:          movn #1   
205 [0xcd]:          pushobj   
206 [0xce]:          movg @95 // @main#options   
207 [0xcf]:          movn #11   
209 [0xd1]:          popobj   
210 [0xd2]:          jmp @1173   
211 [0xd3]:          pushl 3   
212 [0xd4]:          newstr @176 // -O2   
213 [0xd5]:          call @3563 // <std#string.operator==>   
214 [0xd6]:          loadval ebx   
215 [0xd7]:          movr cmt, ebx   
216 [0xd8]:          jne 226   
217 [0xd9]: line: 60 movg @96 // @main#optimization_level   
218 [0xda]:          movn #2   
220 [0xdc]:          pushobj   
221 [0xdd]:          movg @95 // @main#options   
222 [0xde]:          movn #11   
224 [0xe0]:          popobj   
225 [0xe1]:          jmp @1173   
226 [0xe2]:          pushl 3   
227 [0xe3]:          newstr @177 // --h   
228 [0xe4]:          call @3563 // <std#string.operator==>   
229 [0xe5]:          loadval ebx   
230 [0xe6]:          skpe ebx // pc = 236   
231 [0xe7]:          movl 3   
232 [0xe8]:          pushobj   
233 [0xe9]:          newstr @178 // -?   
234 [0xea]:          call @3563 // <std#string.operator==>   
235 [0xeb]:          loadval ebx   
236 [0xec]:          movr cmt, ebx   
237 [0xed]:          jne 241   
238 [0xee]: line: 63 call @3841 // <main#__srt_global.help>   
239 [0xef]: line: 64 call @1927 // <std#__srt_global.exit>   
240 [0xf0]:          jmp @1173   
241 [0xf1]:          pushl 3   
242 [0xf2]:          newstr @179 // --hw   
243 [0xf3]:          call @3563 // <std#string.operator==>   
244 [0xf4]:          loadval ebx   
245 [0xf5]:          movr cmt, ebx   
246 [0xf6]:          jne 250   
247 [0xf7]: line: 67 call @3842 // <main#__srt_global.help_warning>   
248 [0xf8]: line: 68 call @1927 // <std#__srt_global.exit>   
249 [0xf9]:          jmp @1173   
250 [0xfa]:          pushl 3   
251 [0xfb]:          newstr @180 // -R   
252 [0xfc]:          call @3563 // <std#string.operator==>   
253 [0xfd]:          loadval ebx   
254 [0xfe]:          skpe ebx // pc = 260   
255 [0xff]:          movl 3   
256 [0x100]:          pushobj   
257 [0x101]:          newstr @181 // -release   
258 [0x102]:          call @3563 // <std#string.operator==>   
259 [0x103]:          loadval ebx   
260 [0x104]:          movr cmt, ebx   
261 [0x105]:          jne 289   
262 [0x106]: line: 71 movg @96 // @main#optimization_level   
263 [0x107]:          movn #2   
265 [0x109]:          pushobj   
266 [0x10a]:          movg @95 // @main#options   
267 [0x10b]:          movn #11   
269 [0x10d]:          popobj   
270 [0x10e]: line: 72 istore 0   
272 [0x110]:          movg @95 // @main#options   
273 [0x111]:          movn #13   
275 [0x113]:          loadval ebx   
276 [0x114]:          movi #0, adx   
278 [0x116]:          rmov adx, ebx   
279 [0x117]: line: 73 istore 1   
281 [0x119]:          movg @95 // @main#options   
282 [0x11a]:          movn #14   
284 [0x11c]:          loadval ebx   
285 [0x11d]:          movi #0, adx   
287 [0x11f]:          rmov adx, ebx   
288 [0x120]:          jmp @1173   
289 [0x121]:          pushl 3   
290 [0x122]:          newstr @182 // -s   
291 [0x123]:          call @3563 // <std#string.operator==>   
292 [0x124]:          loadval ebx   
293 [0x125]:          movr cmt, ebx   
294 [0x126]:          jne 314   
295 [0x127]: line: 76 istore 1   
297 [0x129]:          movg @95 // @main#options   
298 [0x12a]:          movn #14   
300 [0x12c]:          loadval ebx   
301 [0x12d]:          movi #0, adx   
303 [0x12f]:          rmov adx, ebx   
304 [0x130]: line: 77 istore 0   
306 [0x132]:          movg @95 // @main#options   
307 [0x133]:          movn #13   
309 [0x135]:          loadval ebx   
310 [0x136]:          movi #0, adx   
312 [0x138]:          rmov adx, ebx   
313 [0x139]:          jmp @1173   
314 [0x13a]:          pushl 3   
315 [0x13b]:          newstr @183 // -magic   
316 [0x13c]:          call @3563 // <std#string.operator==>   
317 [0x13d]:          loadval ebx   
318 [0x13e]:          movr cmt, ebx   
319 [0x13f]:          jne 330   
320 [0x140]: line: 80 istore 1   
322 [0x142]:          movg @95 // @main#options   
323 [0x143]:          movn #17   
325 [0x145]:          loadval ebx   
326 [0x146]:          movi #0, adx   
328 [0x148]:          rmov adx, ebx   
329 [0x149]:          jmp @1173   
330 [0x14a]:          pushl 3   
331 [0x14b]:          newstr @184 // -dbg   
332 [0x14c]:          call @3563 // <std#string.operator==>   
333 [0x14d]:          loadval ebx   
334 [0x14e]:          movr cmt, ebx   
335 [0x14f]:          jne 346   
336 [0x150]: line: 83 istore 1   
338 [0x152]:          movg @95 // @main#options   
339 [0x153]:          movn #18   
341 [0x155]:          loadval ebx   
342 [0x156]:          movi #0, adx   
344 [0x158]:          rmov adx, ebx   
345 [0x159]:          jmp @1173   
346 [0x15a]:          pushl 3   
347 [0x15b]:          newstr @185 // -showvers   
348 [0x15c]:          call @3563 // <std#string.operator==>   
349 [0x15d]:          loadval ebx   
350 [0x15e]:          skpe ebx // pc = 356   
351 [0x15f]:          movl 3   
352 [0x160]:          pushobj   
353 [0x161]:          newstr @186 // -showversion   
354 [0x162]:          call @3563 // <std#string.operator==>   
355 [0x163]:          loadval ebx   
356 [0x164]:          movr cmt, ebx   
357 [0x165]:          jne 361   
358 [0x166]: line: 86 call @3840 // <main#__srt_global.print_version>   
359 [0x167]: line: 87 call @1913 // <std#__srt_global.println>   
360 [0x168]:          jmp @1173   
361 [0x169]:          pushl 3   
362 [0x16a]:          newstr @187 // -target   
363 [0x16b]:          call @3563 // <std#string.operator==>   
364 [0x16c]:          loadval ebx   
365 [0x16d]:          movr cmt, ebx   
366 [0x16e]:          jne 445   
367 [0x16f]: line: 90 ipushl #2   
368 [0x170]:          movi #1, ebx   
370 [0x172]:          loadval ecx   
371 [0x173]:          add ecx, ebx -> ebx   
372 [0x174]:          rstore ebx   
373 [0x175]:          movl 0   
374 [0x176]:          sizeof ebx   
375 [0x177]:          loadval ecx   
376 [0x178]:          gte ecx, ebx   
377 [0x179]:          movr ebx, cmt   
378 [0x17a]:          movr cmt, ebx   
379 [0x17b]:          jne 391   
380 [0x17c]: line: 91 new_class @75 // std#string   
382 [0x17e]:          dup    
383 [0x17f]:          newstr @188 // file version required after option `   
384 [0x180]:          call @3546 // <std#string.string>   
385 [0x181]:          pushl 3   
386 [0x182]:          call @3561 // <std#string.operator+>   
387 [0x183]:          newstr @147 // `   
388 [0x184]:          call @3558 // <std#string.operator+>   
389 [0x185]:          call @3839 // <main#__srt_global.error>   
390 [0x186]:          jmp @443   
391 [0x187]: line: 93 pushl 0   
392 [0x188]:          loadl ebx, fp+2   
393 [0x189]:          inc ebx   
394 [0x18a]:          smovr_2 ebx, fp+2   
395 [0x18b]:          popobj2    
396 [0x18c]:          movr adx, ebx   
397 [0x18d]:          chklen adx   
398 [0x18e]:          movnd adx   
399 [0x18f]:          smovr_3 fp+5   
400 [0x190]: line: 94 pushl 5   
401 [0x191]:          call @3837 // <main#__srt_global.is_number>   
402 [0x192]:          loadval ebx   
403 [0x193]:          movr cmt, ebx   
404 [0x194]:          jne 416   
405 [0x195]: line: 95 pushl 5   
406 [0x196]:          call @837 // <std#integer<_int32>.parse>   
407 [0x197]:          movg @95 // @main#options   
408 [0x198]:          movn #20   
410 [0x19a]:          loadval ebx   
411 [0x19b]:          movi #0, adx   
413 [0x19d]:          rmov adx, ebx   
414 [0x19e]: line: 96 call @3838 // <main#__srt_global.check_target>   
415 [0x19f]:          jmp @442   
416 [0x1a0]: line: 98 pushl 5   
417 [0x1a1]:          call @3559 // <std#string.to_lower>   
418 [0x1a2]:          newstr @189 // alpha   
419 [0x1a3]:          call @3563 // <std#string.operator==>   
420 [0x1a4]:          loadval ebx   
421 [0x1a5]:          movr cmt, ebx   
422 [0x1a6]:          jne 433   
423 [0x1a7]: line: 99 istore 2   
425 [0x1a9]:          movg @95 // @main#options   
426 [0x1aa]:          movn #20   
428 [0x1ac]:          loadval ebx   
429 [0x1ad]:          movi #0, adx   
431 [0x1af]:          rmov adx, ebx   
432 [0x1b0]:          jmp @441   
433 [0x1b1]: line: 102 new_class @75 // std#string   
435 [0x1b3]:           dup    
436 [0x1b4]:           newstr @190 // unknown platform target    
437 [0x1b5]:           call @3546 // <std#string.string>   
438 [0x1b6]:           pushl 5   
439 [0x1b7]:           call @3561 // <std#string.operator+>   
440 [0x1b8]:           call @3839 // <main#__srt_global.error>   
441 [0x1b9]:           nop   
442 [0x1ba]:           nop   
443 [0x1bb]:           nop   
444 [0x1bc]:           jmp @1173   
445 [0x1bd]:           pushl 3   
446 [0x1be]:           newstr @191 // -w   
447 [0x1bf]:           call @3563 // <std#string.operator==>   
448 [0x1c0]:           loadval ebx   
449 [0x1c1]:           movr cmt, ebx   
450 [0x1c2]:           jne 461   
451 [0x1c3]: line: 108 istore 0   
453 [0x1c5]:           movg @95 // @main#options   
454 [0x1c6]:           movn #9   
456 [0x1c8]:           loadval ebx   
457 [0x1c9]:           movi #0, adx   
459 [0x1cb]:           rmov adx, ebx   
460 [0x1cc]:           jmp @1173   
461 [0x1cd]:           pushl 3   
462 [0x1ce]:           newstr @192 // -waccess   
463 [0x1cf]:           call @3563 // <std#string.operator==>   
464 [0x1d0]:           loadval ebx   
465 [0x1d1]:           movr cmt, ebx   
466 [0x1d2]:           jne 480   
467 [0x1d3]: line: 111 istore 0   
469 [0x1d5]:           movg @94 // @main#__srt_global   
470 [0x1d6]:           movn #9   
472 [0x1d8]:           pushobj   
473 [0x1d9]:           ldc ebx // 1   
474 [0x1da]:           popobj2    
475 [0x1db]:           movr adx, ebx   
476 [0x1dc]:           chklen adx   
477 [0x1dd]:           loadval ebx   
478 [0x1de]:           rmov adx, ebx   
479 [0x1df]:           jmp @1173   
480 [0x1e0]:           pushl 3   
481 [0x1e1]:           newstr @193 // -wambig   
482 [0x1e2]:           call @3563 // <std#string.operator==>   
483 [0x1e3]:           loadval ebx   
484 [0x1e4]:           movr cmt, ebx   
485 [0x1e5]:           jne 500   
486 [0x1e6]: line: 114 istore 0   
488 [0x1e8]:           movg @94 // @main#__srt_global   
489 [0x1e9]:           movn #9   
491 [0x1eb]:           pushobj   
492 [0x1ec]:           movi #2, ebx   
494 [0x1ee]:           popobj2    
495 [0x1ef]:           movr adx, ebx   
496 [0x1f0]:           chklen adx   
497 [0x1f1]:           loadval ebx   
498 [0x1f2]:           rmov adx, ebx   
499 [0x1f3]:           jmp @1173   
500 [0x1f4]:           pushl 3   
501 [0x1f5]:           newstr @194 // -wdecl   
502 [0x1f6]:           call @3563 // <std#string.operator==>   
503 [0x1f7]:           loadval ebx   
504 [0x1f8]:           movr cmt, ebx   
505 [0x1f9]:           jne 520   
506 [0x1fa]: line: 117 istore 0   
508 [0x1fc]:           movg @94 // @main#__srt_global   
509 [0x1fd]:           movn #9   
511 [0x1ff]:           pushobj   
512 [0x200]:           movi #3, ebx   
514 [0x202]:           popobj2    
515 [0x203]:           movr adx, ebx   
516 [0x204]:           chklen adx   
517 [0x205]:           loadval ebx   
518 [0x206]:           rmov adx, ebx   
519 [0x207]:           jmp @1173   
520 [0x208]:           pushl 3   
521 [0x209]:           newstr @195 // -wmain   
522 [0x20a]:           call @3563 // <std#string.operator==>   
523 [0x20b]:           loadval ebx   
524 [0x20c]:           movr cmt, ebx   
525 [0x20d]:           jne 540   
526 [0x20e]: line: 120 istore 0   
528 [0x210]:           movg @94 // @main#__srt_global   
529 [0x211]:           movn #9   
531 [0x213]:           pushobj   
532 [0x214]:           movi #4, ebx   
534 [0x216]:           popobj2    
535 [0x217]:           movr adx, ebx   
536 [0x218]:           chklen adx   
537 [0x219]:           loadval ebx   
538 [0x21a]:           rmov adx, ebx   
539 [0x21b]:           jmp @1173   
540 [0x21c]:           pushl 3   
541 [0x21d]:           newstr @196 // -wcast   
542 [0x21e]:           call @3563 // <std#string.operator==>   
543 [0x21f]:           loadval ebx   
544 [0x220]:           movr cmt, ebx   
545 [0x221]:           jne 560   
546 [0x222]: line: 123 istore 0   
548 [0x224]:           movg @94 // @main#__srt_global   
549 [0x225]:           movn #9   
551 [0x227]:           pushobj   
552 [0x228]:           movi #5, ebx   
554 [0x22a]:           popobj2    
555 [0x22b]:           movr adx, ebx   
556 [0x22c]:           chklen adx   
557 [0x22d]:           loadval ebx   
558 [0x22e]:           rmov adx, ebx   
559 [0x22f]:           jmp @1173   
560 [0x230]:           pushl 3   
561 [0x231]:           newstr @197 // -winit   
562 [0x232]:           call @3563 // <std#string.operator==>   
563 [0x233]:           loadval ebx   
564 [0x234]:           movr cmt, ebx   
565 [0x235]:           jne 580   
566 [0x236]: line: 126 istore 0   
568 [0x238]:           movg @94 // @main#__srt_global   
569 [0x239]:           movn #9   
571 [0x23b]:           pushobj   
572 [0x23c]:           movi #6, ebx   
574 [0x23e]:           popobj2    
575 [0x23f]:           movr adx, ebx   
576 [0x240]:           chklen adx   
577 [0x241]:           loadval ebx   
578 [0x242]:           rmov adx, ebx   
579 [0x243]:           jmp @1173   
580 [0x244]:           pushl 3   
581 [0x245]:           newstr @198 // -p   
582 [0x246]:           call @3563 // <std#string.operator==>   
583 [0x247]:           loadval ebx   
584 [0x248]:           movr cmt, ebx   
585 [0x249]:           jne 595   
586 [0x24a]: line: 129 movg @97 // @main#compilation_mode   
587 [0x24b]:           movn #1   
589 [0x24d]:           pushobj   
590 [0x24e]:           movg @95 // @main#options   
591 [0x24f]:           movn #12   
593 [0x251]:           popobj   
594 [0x252]:           jmp @1173   
595 [0x253]:           pushl 3   
596 [0x254]:           newstr @199 // -run   
597 [0x255]:           call @3563 // <std#string.operator==>   
598 [0x256]:           loadval ebx   
599 [0x257]:           movr cmt, ebx   
600 [0x258]:           jne 611   
601 [0x259]: line: 132 istore 1   
603 [0x25b]:           movg @95 // @main#options   
604 [0x25c]:           movn #10   
606 [0x25e]:           loadval ebx   
607 [0x25f]:           movi #0, adx   
609 [0x261]:           rmov adx, ebx   
610 [0x262]:           jmp @1173   
611 [0x263]:           pushl 3   
612 [0x264]:           newstr @200 // -g   
613 [0x265]:           call @3563 // <std#string.operator==>   
614 [0x266]:           loadval ebx   
615 [0x267]:           skpe ebx // pc = 621   
616 [0x268]:           movl 3   
617 [0x269]:           pushobj   
618 [0x26a]:           newstr @201 // -green   
619 [0x26b]:           call @3563 // <std#string.operator==>   
620 [0x26c]:           loadval ebx   
621 [0x26d]:           movr cmt, ebx   
622 [0x26e]:           jne 633   
623 [0x26f]: line: 135 istore 1   
625 [0x271]:           movg @95 // @main#options   
626 [0x272]:           movn #16   
628 [0x274]:           loadval ebx   
629 [0x275]:           movi #0, adx   
631 [0x277]:           rmov adx, ebx   
632 [0x278]:           jmp @1173   
633 [0x279]:           pushl 3   
634 [0x27a]:           newstr @202 // --new-project   
635 [0x27b]:           call @3563 // <std#string.operator==>   
636 [0x27c]:           loadval ebx   
637 [0x27d]:           movr cmt, ebx   
638 [0x27e]:           jne 678   
639 [0x27f]: line: 138 ipushl #2   
640 [0x280]:           movi #1, ebx   
642 [0x282]:           loadval ecx   
643 [0x283]:           add ecx, ebx -> ebx   
644 [0x284]:           rstore ebx   
645 [0x285]:           movl 0   
646 [0x286]:           sizeof ebx   
647 [0x287]:           loadval ecx   
648 [0x288]:           gte ecx, ebx   
649 [0x289]:           movr ebx, cmt   
650 [0x28a]:           movr cmt, ebx   
651 [0x28b]:           jne 663   
652 [0x28c]: line: 139 new_class @75 // std#string   
654 [0x28e]:           dup    
655 [0x28f]:           newstr @203 // project directory required after option `   
656 [0x290]:           call @3546 // <std#string.string>   
657 [0x291]:           pushl 3   
658 [0x292]:           call @3561 // <std#string.operator+>   
659 [0x293]:           newstr @147 // `   
660 [0x294]:           call @3558 // <std#string.operator+>   
661 [0x295]:           call @3839 // <main#__srt_global.error>   
662 [0x296]:           jmp @676   
663 [0x297]: line: 141 pushl 0   
664 [0x298]:           loadl ebx, fp+2   
665 [0x299]:           inc ebx   
666 [0x29a]:           smovr_2 ebx, fp+2   
667 [0x29b]:           popobj2    
668 [0x29c]:           movr adx, ebx   
669 [0x29d]:           chklen adx   
670 [0x29e]:           movnd adx   
671 [0x29f]:           pushobj   
672 [0x2a0]:           movg @95 // @main#options   
673 [0x2a1]:           movn #4   
675 [0x2a3]:           popobj   
676 [0x2a4]:           nop   
677 [0x2a5]:           jmp @1173   
678 [0x2a6]:           pushl 3   
679 [0x2a7]:           newstr @204 // -v   
680 [0x2a8]:           call @3563 // <std#string.operator==>   
681 [0x2a9]:           loadval ebx   
682 [0x2aa]:           movr cmt, ebx   
683 [0x2ab]:           jne 719   
684 [0x2ac]: line: 145 ipushl #2   
685 [0x2ad]:           movi #1, ebx   
687 [0x2af]:           loadval ecx   
688 [0x2b0]:           add ecx, ebx -> ebx   
689 [0x2b1]:           rstore ebx   
690 [0x2b2]:           movl 0   
691 [0x2b3]:           sizeof ebx   
692 [0x2b4]:           loadval ecx   
693 [0x2b5]:           gte ecx, ebx   
694 [0x2b6]:           movr ebx, cmt   
695 [0x2b7]:           movr cmt, ebx   
696 [0x2b8]:           jne 704   
697 [0x2b9]: line: 146 new_class @75 // std#string   
699 [0x2bb]:           dup    
700 [0x2bc]:           newstr @205 // file version required after option `-v`   
701 [0x2bd]:           call @3546 // <std#string.string>   
702 [0x2be]:           call @3839 // <main#__srt_global.error>   
703 [0x2bf]:           jmp @717   
704 [0x2c0]: line: 148 pushl 0   
705 [0x2c1]:           loadl ebx, fp+2   
706 [0x2c2]:           inc ebx   
707 [0x2c3]:           smovr_2 ebx, fp+2   
708 [0x2c4]:           popobj2    
709 [0x2c5]:           movr adx, ebx   
710 [0x2c6]:           chklen adx   
711 [0x2c7]:           movnd adx   
712 [0x2c8]:           pushobj   
713 [0x2c9]:           movg @95 // @main#options   
714 [0x2ca]:           movn #8   
716 [0x2cc]:           popobj   
717 [0x2cd]:           nop   
718 [0x2ce]:           jmp @1173   
719 [0x2cf]:           pushl 3   
720 [0x2d0]:           newstr @206 // -ignore   
721 [0x2d1]:           call @3563 // <std#string.operator==>   
722 [0x2d2]:           loadval ebx   
723 [0x2d3]:           movr cmt, ebx   
724 [0x2d4]:           jne 806   
725 [0x2d5]: line: 151 ipushl #2   
726 [0x2d6]:           movi #1, ebx   
728 [0x2d8]:           loadval ecx   
729 [0x2d9]:           add ecx, ebx -> ebx   
730 [0x2da]:           rstore ebx   
731 [0x2db]:           movl 0   
732 [0x2dc]:           sizeof ebx   
733 [0x2dd]:           loadval ecx   
734 [0x2de]:           gte ecx, ebx   
735 [0x2df]:           movr ebx, cmt   
736 [0x2e0]:           movr cmt, ebx   
737 [0x2e1]:           jne 749   
738 [0x2e2]: line: 152 new_class @75 // std#string   
740 [0x2e4]:           dup    
741 [0x2e5]:           newstr @207 // file path required after option `   
742 [0x2e6]:           call @3546 // <std#string.string>   
743 [0x2e7]:           pushl 3   
744 [0x2e8]:           call @3561 // <std#string.operator+>   
745 [0x2e9]:           newstr @147 // `   
746 [0x2ea]:           call @3558 // <std#string.operator+>   
747 [0x2eb]:           call @3839 // <main#__srt_global.error>   
748 [0x2ec]:           jmp @804   
749 [0x2ed]: line: 154 new_class @28 // std.io#file   
751 [0x2ef]:           dup    
752 [0x2f0]:           pushl 0   
753 [0x2f1]:           loadl ebx, fp+2   
754 [0x2f2]:           inc ebx   
755 [0x2f3]:           smovr_2 ebx, fp+2   
756 [0x2f4]:           popobj2    
757 [0x2f5]:           movr adx, ebx   
758 [0x2f6]:           chklen adx   
759 [0x2f7]:           movnd adx   
760 [0x2f8]:           pushobj   
761 [0x2f9]:           call @2077 // <std.io#file.file>   
762 [0x2fa]:           popobj2    
763 [0x2fb]:           smovr_3 fp+6   
764 [0x2fc]: line: 155 pushl 6   
765 [0x2fd]:           call @2087 // <std.io#file.exists>   
766 [0x2fe]:           loadval ebx   
767 [0x2ff]:           not ebx, ebx   
768 [0x300]:           movr cmt, ebx   
769 [0x301]:           jne 780   
770 [0x302]: line: 156 new_class @75 // std#string   
772 [0x304]:           dup    
773 [0x305]:           newstr @208 // ignored file:    
774 [0x306]:           call @3546 // <std#string.string>   
775 [0x307]:           pushl 6   
776 [0x308]:           call @3560 // <std#string.operator+>   
777 [0x309]:           newstr @209 //  dosen't exist!   
778 [0x30a]:           call @3558 // <std#string.operator+>   
779 [0x30b]:           call @3839 // <main#__srt_global.error>   
780 [0x30c]:           nop   
781 [0x30d]: line: 159 pushl 6   
782 [0x30e]:           call @2088 // <std.io#file.is_directory>   
783 [0x30f]:           loadval ebx   
784 [0x310]:           movr cmt, ebx   
785 [0x311]:           jne 796   
786 [0x312]: line: 160 new_class @75 // std#string   
788 [0x314]:           dup    
789 [0x315]:           newstr @208 // ignored file:    
790 [0x316]:           call @3546 // <std#string.string>   
791 [0x317]:           pushl 6   
792 [0x318]:           call @3560 // <std#string.operator+>   
793 [0x319]:           newstr @210 //  is a directory, try `-ignoredir` instead   
794 [0x31a]:           call @3558 // <std#string.operator+>   
795 [0x31b]:           call @3839 // <main#__srt_global.error>   
796 [0x31c]:           nop   
797 [0x31d]: line: 163 movg @95 // @main#options   
798 [0x31e]:           movn #23   
800 [0x320]:           pushobj   
801 [0x321]:           pushl 6   
802 [0x322]:           call @2084 // <std.io#file.get_absolute_path>   
803 [0x323]:           call @3682 // <std#list<std#string>.add>   
804 [0x324]:           nop   
805 [0x325]:           jmp @1173   
806 [0x326]:           pushl 3   
807 [0x327]:           newstr @211 // -ignoredir   
808 [0x328]:           call @3563 // <std#string.operator==>   
809 [0x329]:           loadval ebx   
810 [0x32a]:           movr cmt, ebx   
811 [0x32b]:           jne 894   
812 [0x32c]: line: 167 ipushl #2   
813 [0x32d]:           movi #1, ebx   
815 [0x32f]:           loadval ecx   
816 [0x330]:           add ecx, ebx -> ebx   
817 [0x331]:           rstore ebx   
818 [0x332]:           movl 0   
819 [0x333]:           sizeof ebx   
820 [0x334]:           loadval ecx   
821 [0x335]:           gte ecx, ebx   
822 [0x336]:           movr ebx, cmt   
823 [0x337]:           movr cmt, ebx   
824 [0x338]:           jne 836   
825 [0x339]: line: 168 new_class @75 // std#string   
827 [0x33b]:           dup    
828 [0x33c]:           newstr @212 // directory path required after option `   
829 [0x33d]:           call @3546 // <std#string.string>   
830 [0x33e]:           pushl 3   
831 [0x33f]:           call @3561 // <std#string.operator+>   
832 [0x340]:           newstr @147 // `   
833 [0x341]:           call @3558 // <std#string.operator+>   
834 [0x342]:           call @3839 // <main#__srt_global.error>   
835 [0x343]:           jmp @892   
836 [0x344]: line: 170 new_class @28 // std.io#file   
838 [0x346]:           dup    
839 [0x347]:           pushl 0   
840 [0x348]:           loadl ebx, fp+2   
841 [0x349]:           inc ebx   
842 [0x34a]:           smovr_2 ebx, fp+2   
843 [0x34b]:           popobj2    
844 [0x34c]:           movr adx, ebx   
845 [0x34d]:           chklen adx   
846 [0x34e]:           movnd adx   
847 [0x34f]:           pushobj   
848 [0x350]:           call @2077 // <std.io#file.file>   
849 [0x351]:           popobj2    
850 [0x352]:           smovr_3 fp+7   
851 [0x353]: line: 171 pushl 7   
852 [0x354]:           call @2087 // <std.io#file.exists>   
853 [0x355]:           loadval ebx   
854 [0x356]:           not ebx, ebx   
855 [0x357]:           movr cmt, ebx   
856 [0x358]:           jne 867   
857 [0x359]: line: 172 new_class @75 // std#string   
859 [0x35b]:           dup    
860 [0x35c]:           newstr @213 // ignored directory:    
861 [0x35d]:           call @3546 // <std#string.string>   
862 [0x35e]:           pushl 7   
863 [0x35f]:           call @3560 // <std#string.operator+>   
864 [0x360]:           newstr @209 //  dosen't exist!   
865 [0x361]:           call @3558 // <std#string.operator+>   
866 [0x362]:           call @3839 // <main#__srt_global.error>   
867 [0x363]:           nop   
868 [0x364]: line: 175 pushl 7   
869 [0x365]:           call @2088 // <std.io#file.is_directory>   
870 [0x366]:           loadval ebx   
871 [0x367]:           not ebx, ebx   
872 [0x368]:           movr cmt, ebx   
873 [0x369]:           jne 884   
874 [0x36a]: line: 176 new_class @75 // std#string   
876 [0x36c]:           dup    
877 [0x36d]:           newstr @213 // ignored directory:    
878 [0x36e]:           call @3546 // <std#string.string>   
879 [0x36f]:           pushl 7   
880 [0x370]:           call @3560 // <std#string.operator+>   
881 [0x371]:           newstr @214 //  is a file, try `-ignore` instead   
882 [0x372]:           call @3558 // <std#string.operator+>   
883 [0x373]:           call @3839 // <main#__srt_global.error>   
884 [0x374]:           nop   
885 [0x375]: line: 179 movg @95 // @main#options   
886 [0x376]:           movn #22   
888 [0x378]:           pushobj   
889 [0x379]:           pushl 7   
890 [0x37a]:           call @2084 // <std.io#file.get_absolute_path>   
891 [0x37b]:           call @3682 // <std#list<std#string>.add>   
892 [0x37c]:           nop   
893 [0x37d]:           jmp @1173   
894 [0x37e]:           pushl 3   
895 [0x37f]:           newstr @215 // -P   
896 [0x380]:           call @3563 // <std#string.operator==>   
897 [0x381]:           loadval ebx   
898 [0x382]:           movr cmt, ebx   
899 [0x383]:           jne 989   
900 [0x384]: line: 183 ipushl #2   
901 [0x385]:           movi #1, ebx   
903 [0x387]:           loadval ecx   
904 [0x388]:           add ecx, ebx -> ebx   
905 [0x389]:           rstore ebx   
906 [0x38a]:           movl 0   
907 [0x38b]:           sizeof ebx   
908 [0x38c]:           loadval ecx   
909 [0x38d]:           gte ecx, ebx   
910 [0x38e]:           movr ebx, cmt   
911 [0x38f]:           movr cmt, ebx   
912 [0x390]:           jne 924   
913 [0x391]: line: 184 new_class @75 // std#string   
915 [0x393]:           dup    
916 [0x394]:           newstr @216 // project path required after option `   
917 [0x395]:           call @3546 // <std#string.string>   
918 [0x396]:           pushl 3   
919 [0x397]:           call @3561 // <std#string.operator+>   
920 [0x398]:           newstr @147 // `   
921 [0x399]:           call @3558 // <std#string.operator+>   
922 [0x39a]:           call @3839 // <main#__srt_global.error>   
923 [0x39b]:           jmp @987   
924 [0x39c]: line: 186 new_class @28 // std.io#file   
926 [0x39e]:           dup    
927 [0x39f]:           pushl 0   
928 [0x3a0]:           loadl ebx, fp+2   
929 [0x3a1]:           inc ebx   
930 [0x3a2]:           smovr_2 ebx, fp+2   
931 [0x3a3]:           popobj2    
932 [0x3a4]:           movr adx, ebx   
933 [0x3a5]:           chklen adx   
934 [0x3a6]:           movnd adx   
935 [0x3a7]:           pushobj   
936 [0x3a8]:           call @2077 // <std.io#file.file>   
937 [0x3a9]:           popobj2    
938 [0x3aa]:           smovr_3 fp+8   
939 [0x3ab]: line: 187 pushl 8   
940 [0x3ac]:           call @2087 // <std.io#file.exists>   
941 [0x3ad]:           loadval ebx   
942 [0x3ae]:           not ebx, ebx   
943 [0x3af]:           movr cmt, ebx   
944 [0x3b0]:           jne 955   
945 [0x3b1]: line: 188 new_class @75 // std#string   
947 [0x3b3]:           dup    
948 [0x3b4]:           newstr @217 // project directory:    
949 [0x3b5]:           call @3546 // <std#string.string>   
950 [0x3b6]:           pushl 8   
951 [0x3b7]:           call @3560 // <std#string.operator+>   
952 [0x3b8]:           newstr @209 //  dosen't exist!   
953 [0x3b9]:           call @3558 // <std#string.operator+>   
954 [0x3ba]:           call @3839 // <main#__srt_global.error>   
955 [0x3bb]:           nop   
956 [0x3bc]: line: 191 pushl 8   
957 [0x3bd]:           call @2088 // <std.io#file.is_directory>   
958 [0x3be]:           loadval ebx   
959 [0x3bf]:           not ebx, ebx   
960 [0x3c0]:           movr cmt, ebx   
961 [0x3c1]:           jne 972   
962 [0x3c2]: line: 192 new_class @75 // std#string   
964 [0x3c4]:           dup    
965 [0x3c5]:           newstr @217 // project directory:    
966 [0x3c6]:           call @3546 // <std#string.string>   
967 [0x3c7]:           pushl 8   
968 [0x3c8]:           call @3560 // <std#string.operator+>   
969 [0x3c9]:           newstr @218 //  was found to be a file   
970 [0x3ca]:           call @3558 // <std#string.operator+>   
971 [0x3cb]:           call @3839 // <main#__srt_global.error>   
972 [0x3cc]:           nop   
973 [0x3cd]: line: 195 movg @97 // @main#compilation_mode   
974 [0x3ce]:           movn #1   
976 [0x3d0]:           pushobj   
977 [0x3d1]:           movg @95 // @main#options   
978 [0x3d2]:           movn #12   
980 [0x3d4]:           popobj   
981 [0x3d5]: line: 196 pushl 8   
982 [0x3d6]:           call @2084 // <std.io#file.get_absolute_path>   
983 [0x3d7]:           movg @95 // @main#options   
984 [0x3d8]:           movn #5   
986 [0x3da]:           popobj   
987 [0x3db]:           nop   
988 [0x3dc]:           jmp @1173   
989 [0x3dd]:           pushl 3   
990 [0x3de]:           newstr @219 // -werror   
991 [0x3df]:           call @3563 // <std#string.operator==>   
992 [0x3e0]:           loadval ebx   
993 [0x3e1]:           movr cmt, ebx   
994 [0x3e2]:           jne 1014   
995 [0x3e3]: line: 200 istore 1   
997 [0x3e5]:           movg @95 // @main#options   
998 [0x3e6]:           movn #15   
1000 [0x3e8]:           loadval ebx   
1001 [0x3e9]:           movi #0, adx   
1003 [0x3eb]:           rmov adx, ebx   
1004 [0x3ec]: line: 201 istore 1   
1006 [0x3ee]:           movg @95 // @main#options   
1007 [0x3ef]:           movn #9   
1009 [0x3f1]:           loadval ebx   
1010 [0x3f2]:           movi #0, adx   
1012 [0x3f4]:           rmov adx, ebx   
1013 [0x3f5]:           jmp @1173   
1014 [0x3f6]:           pushl 3   
1015 [0x3f7]:           newstr @220 // -errlmt   
1016 [0x3f8]:           call @3563 // <std#string.operator==>   
1017 [0x3f9]:           loadval ebx   
1018 [0x3fa]:           movr cmt, ebx   
1019 [0x3fb]:           jne 1098   
1020 [0x3fc]: line: 204 pushl 0   
1021 [0x3fd]:           loadl ebx, fp+2   
1022 [0x3fe]:           inc ebx   
1023 [0x3ff]:           smovr_2 ebx, fp+2   
1024 [0x400]:           popobj2    
1025 [0x401]:           movr adx, ebx   
1026 [0x402]:           chklen adx   
1027 [0x403]:           movnd adx   
1028 [0x404]:           smovr_3 fp+9   
1029 [0x405]: line: 206 pushl 9   
1030 [0x406]:           call @3837 // <main#__srt_global.is_number>   
1031 [0x407]:           loadval ebx   
1032 [0x408]:           movr cmt, ebx   
1033 [0x409]:           jne 1088   
1034 [0x40a]: line: 207 pushl 9   
1035 [0x40b]:           call @837 // <std#integer<_int32>.parse>   
1036 [0x40c]:           movg @95 // @main#options   
1037 [0x40d]:           movn #19   
1039 [0x40f]:           loadval ebx   
1040 [0x410]:           movi #0, adx   
1042 [0x412]:           rmov adx, ebx   
1043 [0x413]: line: 209 movg @95 // @main#options   
1044 [0x414]:           movn #19   
1046 [0x416]:           movi #0, adx   
1048 [0x418]:           iaload ebx, adx   
1049 [0x419]:           rstore ebx   
1050 [0x41a]:           movi #100000, ebx   
1052 [0x41c]:           loadval ecx   
1053 [0x41d]:           gt ecx, ebx   
1054 [0x41e]:           movr ebx, cmt   
1055 [0x41f]:           movr cmt, ebx   
1056 [0x420]:           jne 1066   
1057 [0x421]: line: 210 new_class @75 // std#string   
1059 [0x423]:           dup    
1060 [0x424]:           newstr @221 // cannot set the max errors allowed higher than (100,000) -    
1061 [0x425]:           call @3546 // <std#string.string>   
1062 [0x426]:           pushl 9   
1063 [0x427]:           call @3561 // <std#string.operator+>   
1064 [0x428]:           call @3839 // <main#__srt_global.error>   
1065 [0x429]:           jmp @1086   
1066 [0x42a]:           movg @95 // @main#options   
1067 [0x42b]:           movn #19   
1069 [0x42d]:           movi #0, adx   
1071 [0x42f]:           iaload ebx, adx   
1072 [0x430]:           rstore ebx   
1073 [0x431]:           movi #0, ebx   
1075 [0x433]:           loadval ecx   
1076 [0x434]:           lte ecx, ebx   
1077 [0x435]:           movr ebx, cmt   
1078 [0x436]:           movr cmt, ebx   
1079 [0x437]:           jne 1086   
1080 [0x438]: line: 212 new_class @75 // std#string   
1082 [0x43a]:           dup    
1083 [0x43b]:           newstr @222 // cannot have an error limit of 0    
1084 [0x43c]:           call @3546 // <std#string.string>   
1085 [0x43d]:           call @3839 // <main#__srt_global.error>   
1086 [0x43e]:           nop   
1087 [0x43f]:           jmp @1096   
1088 [0x440]: line: 216 new_class @75 // std#string   
1090 [0x442]:           dup    
1091 [0x443]:           newstr @223 // invalid error limit set    
1092 [0x444]:           call @3546 // <std#string.string>   
1093 [0x445]:           pushl 9   
1094 [0x446]:           call @3561 // <std#string.operator+>   
1095 [0x447]:           call @3839 // <main#__srt_global.error>   
1096 [0x448]:           nop   
1097 [0x449]:           jmp @1173   
1098 [0x44a]:           pushl 3   
1099 [0x44b]:           istore 0   
1101 [0x44d]:           call @3568 // <std#string.at>   
1102 [0x44e]:           loadval ebx   
1103 [0x44f]:           rstore ebx   
1104 [0x450]:           movi #45, ebx   
1106 [0x452]:           loadval ecx   
1107 [0x453]:           test ecx, ebx   
1108 [0x454]:           movr ebx, cmt   
1109 [0x455]:           movr cmt, ebx   
1110 [0x456]:           jne 1129   
1111 [0x457]: line: 220 new_class @75 // std#string   
1113 [0x459]:           dup    
1114 [0x45a]:           newstr @224 // invalid option `   
1115 [0x45b]:           call @3546 // <std#string.string>   
1116 [0x45c]:           pushl 3   
1117 [0x45d]:           call @3561 // <std#string.operator+>   
1118 [0x45e]:           newstr @225 // `, try    
1119 [0x45f]:           call @3558 // <std#string.operator+>   
1120 [0x460]:           movg @94 // @main#__srt_global   
1121 [0x461]:           movn #0   
1123 [0x463]:           pushobj   
1124 [0x464]:           call @3561 // <std#string.operator+>   
1125 [0x465]:           newstr @226 //  --h   
1126 [0x466]:           call @3558 // <std#string.operator+>   
1127 [0x467]:           call @3839 // <main#__srt_global.error>   
1128 [0x468]:           jmp @1173   
1129 [0x469]: line: 224 pushl 0   
1130 [0x46a]: line: 225 loadl ebx, fp+2   
1131 [0x46b]:           popobj2    
1132 [0x46c]:           movr adx, ebx   
1133 [0x46d]:           chklen adx   
1134 [0x46e]:           movnd adx   
1135 [0x46f]:           smovr_3 fp+3   
1136 [0x470]: line: 226 pushl 3   
1137 [0x471]:           istore 0   
1139 [0x473]:           call @3568 // <std#string.at>   
1140 [0x474]:           loadval ebx   
1141 [0x475]:           rstore ebx   
1142 [0x476]:           movi #45, ebx   
1144 [0x478]:           loadval ecx   
1145 [0x479]:           test ecx, ebx   
1146 [0x47a]:           movr ebx, cmt   
1147 [0x47b]:           movr cmt, ebx   
1148 [0x47c]:           jne 1150   
1149 [0x47d]: line: 227 jmp @25   
1150 [0x47e]:           nop   
1151 [0x47f]: line: 229 pushl 1   
1152 [0x480]:           pushl 3   
1153 [0x481]:           call @3829 // <main#__srt_global.contains>   
1154 [0x482]:           loadval ebx   
1155 [0x483]:           not ebx, ebx   
1156 [0x484]:           movr cmt, ebx   
1157 [0x485]:           jne 1161   
1158 [0x486]: line: 230 pushl 1   
1159 [0x487]:           pushl 3   
1160 [0x488]:           call @3682 // <std#list<std#string>.add>   
1161 [0x489]:           nop   
1162 [0x48a]: line: 231 iaddl 1, fp@2   
1164 [0x48c]:           ipushl #2   
1165 [0x48d]:           movl 0   
1166 [0x48e]:           sizeof ebx   
1167 [0x48f]:           loadval ecx   
1168 [0x490]:           lt ecx, ebx   
1169 [0x491]:           movr ebx, cmt   
1170 [0x492]:           movr cmt, ebx   
1171 [0x493]:           je 1129   
1172 [0x494]: line: 233 jmp @1177   
1173 [0x495]:           nop   
1174 [0x496]:           iaddl 1, fp@2   
1176 [0x498]:           jmp @17   
1177 [0x499]: line: 237 movg @95 // @main#options   
1178 [0x49a]:           movn #4   
1180 [0x49c]:           pushobj   
1181 [0x49d]:           newstr @55 //    
1182 [0x49e]:           call @3565 // <std#string.operator!=>   
1183 [0x49f]:           loadval ebx   
1184 [0x4a0]:           movr cmt, ebx   
1185 [0x4a1]:           jne 1187   
1186 [0x4a2]: line: 238 call @3836 // <main#__srt_global.create_project>   
1187 [0x4a3]:           nop   
1188 [0x4a4]: line: 241 pushl 1   
1189 [0x4a5]:           call @3687 // <std#list<std#string>.size>   
1190 [0x4a6]:           loadval ebx   
1191 [0x4a7]:           rstore ebx   
1192 [0x4a8]:           movi #0, ebx   
1194 [0x4aa]:           loadval ecx   
1195 [0x4ab]:           test ecx, ebx   
1196 [0x4ac]:           movr ebx, cmt   
1197 [0x4ad]:           skne ebx // pc = 1208   
1198 [0x4ae]:           movg @95 // @main#options   
1199 [0x4af]:           movn #12   
1201 [0x4b1]:           pushobj   
1202 [0x4b2]:           movg @97 // @main#compilation_mode   
1203 [0x4b3]:           movn #0   
1205 [0x4b5]:           pushobj   
1206 [0x4b6]:           call @1947 // <std#_enum_.operator==>   
1207 [0x4b7]:           loadval ebx   
1208 [0x4b8]:           movr cmt, ebx   
1209 [0x4b9]:           jne 1214   
1210 [0x4ba]: line: 242 call @3841 // <main#__srt_global.help>   
1211 [0x4bb]: line: 243 istorel 1, fp+0   
1213 [0x4bd]:           ret   
1214 [0x4be]:           nop   
1215 [0x4bf]: line: 246 newstr @55 //    
1216 [0x4c0]:           popobj2    
1217 [0x4c1]:           smovr_3 fp+10   
1218 [0x4c2]: line: 247 call @2348 // <platform#build.is_windows>   
1219 [0x4c3]:           loadval ebx   
1220 [0x4c4]:           movr cmt, ebx   
1221 [0x4c5]:           jne 1226   
1222 [0x4c6]: line: 248 newstr @227 // C:\Program Files\Sharp\include   
1223 [0x4c7]:           popobj2    
1224 [0x4c8]:           smovr_3 fp+10   
1225 [0x4c9]:           jmp @1229   
1226 [0x4ca]: line: 250 newstr @228 // /usr/include/sharp/   
1227 [0x4cb]:           popobj2    
1228 [0x4cc]:           smovr_3 fp+10   
1229 [0x4cd]:           nop   
1230 [0x4ce]: line: 253 new_class @28 // std.io#file   
1232 [0x4d0]:           dup    
1233 [0x4d1]:           pushl 10   
1234 [0x4d2]:           call @2078 // <std.io#file.file>   
1235 [0x4d3]:           popobj2    
1236 [0x4d4]:           smovr_3 fp+11   
1237 [0x4d5]: line: 254 new_class @110 // std#list<std#string>   
1239 [0x4d7]:           dup    
1240 [0x4d8]:           call @3668 // <std#list<std#string>.list>   
1241 [0x4d9]:           popobj2    
1242 [0x4da]:           smovr_3 fp+12   
1243 [0x4db]: line: 256 istorel -1, fp+14   : try start: try block start
1245 [0x4dd]: line: 257 pushl 11   
1246 [0x4de]:           call @2097 // <std.io#file.list>   
1247 [0x4df]:           invoke_delegate 3666 { static=0, args=0 }   
1249 [0x4e1]:           popl 15   
1250 [0x4e2]:           iaddl 1, fp@14   
1252 [0x4e4]:           movl 15   
1253 [0x4e5]:           sizeof ecx   
1254 [0x4e6]:           loadl ebx, fp+14   
1255 [0x4e7]:           lt ebx, ecx   
1256 [0x4e8]:           jne 1275   
1257 [0x4e9]:           movnd ebx   
1258 [0x4ea]:           pushobj   
1259 [0x4eb]:           popl 13   
1260 [0x4ec]: line: 258 pushl 13   
1261 [0x4ed]:           new_class @75 // std#string   
1263 [0x4ef]:           dup    
1264 [0x4f0]:           newstr @229 // .sharp   
1265 [0x4f1]:           call @3546 // <std#string.string>   
1266 [0x4f2]:           call @3577 // <std#string.ends_with>   
1267 [0x4f3]:           loadval ebx   
1268 [0x4f4]:           movr cmt, ebx   
1269 [0x4f5]:           jne 1273   
1270 [0x4f6]: line: 259 pushl 1   
1271 [0x4f7]:           pushl 13   
1272 [0x4f8]:           call @3682 // <std#list<std#string>.add>   
1273 [0x4f9]:           nop   
1274 [0x4fa]:           jmp @1250   
1275 [0x4fb]:           jmp @1287   : try block end
1276 [0x4fc]: line: 263 new_class @75 // std#string   : catch(std#io_exception)
1278 [0x4fe]:           dup    
1279 [0x4ff]:           newstr @230 // warning: could not find support library files in path `   
1280 [0x500]:           call @3546 // <std#string.string>   
1281 [0x501]:           pushl 10   
1282 [0x502]:           call @3558 // <std#string.operator+>   
1283 [0x503]:           newstr @231 // `, do you have them installed?   
1284 [0x504]:           call @3558 // <std#string.operator+>   
1285 [0x505]:           call @1919 // <std#__srt_global.println>   
1286 [0x506]:           jmp @1287   
1287 [0x507]:           nop   : try end
1288 [0x508]: line: 267 istorel 0, fp+16   
1290 [0x50a]:           ipushl #16   
1291 [0x50b]:           movg @95 // @main#options   
1292 [0x50c]:           movn #21   
1294 [0x50e]:           pushobj   
1295 [0x50f]:           call @3687 // <std#list<std#string>.size>   
1296 [0x510]:           loadval ebx   
1297 [0x511]:           loadval ecx   
1298 [0x512]:           lt ecx, ebx   
1299 [0x513]:           movr ebx, cmt   
1300 [0x514]:           movr cmt, ebx   
1301 [0x515]:           jne 1358   
1302 [0x516]: line: 268 pushl 11   
1303 [0x517]:           movg @95 // @main#options   
1304 [0x518]:           movn #21   
1306 [0x51a]:           pushobj   
1307 [0x51b]:           ipushl #16   
1308 [0x51c]:           call @3675 // <std#list<std#string>.at>   
1309 [0x51d]:           call @2081 // <std.io#file.update_path>   
1310 [0x51e]: line: 270 istorel -1, fp+18   : try start: try block start
1312 [0x520]: line: 271 pushl 11   
1313 [0x521]:           call @2097 // <std.io#file.list>   
1314 [0x522]:           invoke_delegate 3666 { static=0, args=0 }   
1316 [0x524]:           popl 19   
1317 [0x525]:           iaddl 1, fp@18   
1319 [0x527]:           movl 19   
1320 [0x528]:           sizeof ecx   
1321 [0x529]:           loadl ebx, fp+18   
1322 [0x52a]:           lt ebx, ecx   
1323 [0x52b]:           jne 1342   
1324 [0x52c]:           movnd ebx   
1325 [0x52d]:           pushobj   
1326 [0x52e]:           popl 17   
1327 [0x52f]: line: 272 pushl 17   
1328 [0x530]:           new_class @75 // std#string   
1330 [0x532]:           dup    
1331 [0x533]:           newstr @229 // .sharp   
1332 [0x534]:           call @3546 // <std#string.string>   
1333 [0x535]:           call @3577 // <std#string.ends_with>   
1334 [0x536]:           loadval ebx   
1335 [0x537]:           movr cmt, ebx   
1336 [0x538]:           jne 1340   
1337 [0x539]: line: 273 pushl 1   
1338 [0x53a]:           pushl 17   
1339 [0x53b]:           call @3682 // <std#list<std#string>.add>   
1340 [0x53c]:           nop   
1341 [0x53d]:           jmp @1317   
1342 [0x53e]:           jmp @1354   : try block end
1343 [0x53f]: line: 277 new_class @75 // std#string   : catch(std#io_exception)
1345 [0x541]:           dup    
1346 [0x542]:           newstr @232 // could not access library files in path `   
1347 [0x543]:           call @3546 // <std#string.string>   
1348 [0x544]:           pushl 10   
1349 [0x545]:           call @3558 // <std#string.operator+>   
1350 [0x546]:           newstr @147 // `   
1351 [0x547]:           call @3558 // <std#string.operator+>   
1352 [0x548]:           call @3839 // <main#__srt_global.error>   
1353 [0x549]:           jmp @1354   
1354 [0x54a]:           nop   : try end
1355 [0x54b]:           iaddl 1, fp@16   
1357 [0x54d]:           jmp @1290   
1358 [0x54e]: line: 282 movg @95 // @main#options   
1359 [0x54f]:           movn #12   
1361 [0x551]:           pushobj   
1362 [0x552]:           movg @97 // @main#compilation_mode   
1363 [0x553]:           movn #1   
1365 [0x555]:           pushobj   
1366 [0x556]:           call @1947 // <std#_enum_.operator==>   
1367 [0x557]:           loadval ebx   
1368 [0x558]:           movr cmt, ebx   
1369 [0x559]:           jne 1443   
1370 [0x55a]: line: 284 movl 20   
1371 [0x55b]:           del   
1372 [0x55c]: line: 285 movg @95 // @main#options   
1373 [0x55d]:           movn #5   
1375 [0x55f]:           pushobj   
1376 [0x560]:           newstr @55 //    
1377 [0x561]:           call @3565 // <std#string.operator!=>   
1378 [0x562]:           loadval ebx   
1379 [0x563]:           movr cmt, ebx   
1380 [0x564]:           jne 1392   
1381 [0x565]: line: 286 new_class @28 // std.io#file   
1383 [0x567]:           dup    
1384 [0x568]:           movg @95 // @main#options   
1385 [0x569]:           movn #5   
1387 [0x56b]:           pushobj   
1388 [0x56c]:           call @2077 // <std.io#file.file>   
1389 [0x56d]:           popobj2    
1390 [0x56e]:           smovr_3 fp+20   
1391 [0x56f]:           jmp @1399   
1392 [0x570]: line: 288 new_class @28 // std.io#file   
1394 [0x572]:           dup    
1395 [0x573]:           call @2112 // <std.io#file.current_directory>   
1396 [0x574]:           call @2077 // <std.io#file.file>   
1397 [0x575]:           popobj2    
1398 [0x576]:           smovr_3 fp+20   
1399 [0x577]:           nop   
1400 [0x578]: line: 291 istorel -1, fp+22   : try start: try block start
1402 [0x57a]: line: 292 pushl 20   
1403 [0x57b]:           call @2097 // <std.io#file.list>   
1404 [0x57c]:           invoke_delegate 3666 { static=0, args=0 }   
1406 [0x57e]:           popl 23   
1407 [0x57f]:           iaddl 1, fp@22   
1409 [0x581]:           movl 23   
1410 [0x582]:           sizeof ecx   
1411 [0x583]:           loadl ebx, fp+22   
1412 [0x584]:           lt ebx, ecx   
1413 [0x585]:           jne 1432   
1414 [0x586]:           movnd ebx   
1415 [0x587]:           pushobj   
1416 [0x588]:           popl 21   
1417 [0x589]: line: 293 pushl 21   
1418 [0x58a]:           new_class @75 // std#string   
1420 [0x58c]:           dup    
1421 [0x58d]:           newstr @229 // .sharp   
1422 [0x58e]:           call @3546 // <std#string.string>   
1423 [0x58f]:           call @3577 // <std#string.ends_with>   
1424 [0x590]:           loadval ebx   
1425 [0x591]:           movr cmt, ebx   
1426 [0x592]:           jne 1430   
1427 [0x593]: line: 294 pushl 1   
1428 [0x594]:           pushl 21   
1429 [0x595]:           call @3682 // <std#list<std#string>.add>   
1430 [0x596]:           nop   
1431 [0x597]:           jmp @1407   
1432 [0x598]:           jmp @1442   : try block end
1433 [0x599]: line: 298 new_class @75 // std#string   : catch(std#io_exception)
1435 [0x59b]:           dup    
1436 [0x59c]:           newstr @233 // could not access project directory files in:    
1437 [0x59d]:           call @3546 // <std#string.string>   
1438 [0x59e]:           pushl 20   
1439 [0x59f]:           call @3560 // <std#string.operator+>   
1440 [0x5a0]:           call @3839 // <main#__srt_global.error>   
1441 [0x5a1]:           jmp @1442   
1442 [0x5a2]:           nop   : try end
1443 [0x5a3]:           nop   
1444 [0x5a4]: line: 302 new_class @28 // std.io#file   
1446 [0x5a6]:           dup    
1447 [0x5a7]:           newstr @234 // no_file   
1448 [0x5a8]:           call @2078 // <std.io#file.file>   
1449 [0x5a9]:           popobj2    
1450 [0x5aa]:           smovr_3 fp+24   
1451 [0x5ab]: line: 303 istorel 0, fp+25   
1453 [0x5ad]:           ipushl #25   
1454 [0x5ae]:           pushl 1   
1455 [0x5af]:           call @3687 // <std#list<std#string>.size>   
1456 [0x5b0]:           loadval ebx   
1457 [0x5b1]:           loadval ecx   
1458 [0x5b2]:           lt ecx, ebx   
1459 [0x5b3]:           movr ebx, cmt   
1460 [0x5b4]:           movr cmt, ebx   
1461 [0x5b5]:           jne 1522   
1462 [0x5b6]: line: 304 pushl 24   
1463 [0x5b7]:           pushl 1   
1464 [0x5b8]:           ipushl #25   
1465 [0x5b9]:           call @3674 // <std#list<std#string>.operator[>   
1466 [0x5ba]:           call @2081 // <std.io#file.update_path>   
1467 [0x5bb]: line: 306 pushl 24   
1468 [0x5bc]:           call @2087 // <std.io#file.exists>   
1469 [0x5bd]:           loadval ebx   
1470 [0x5be]:           not ebx, ebx   
1471 [0x5bf]:           movr cmt, ebx   
1472 [0x5c0]:           jne 1485   
1473 [0x5c1]: line: 307 new_class @75 // std#string   
1475 [0x5c3]:           dup    
1476 [0x5c4]:           newstr @235 // file `   
1477 [0x5c5]:           call @3546 // <std#string.string>   
1478 [0x5c6]:           pushl 1   
1479 [0x5c7]:           ipushl #25   
1480 [0x5c8]:           call @3675 // <std#list<std#string>.at>   
1481 [0x5c9]:           call @3561 // <std#string.operator+>   
1482 [0x5ca]:           newstr @236 // ` doesnt exist!   
1483 [0x5cb]:           call @3558 // <std#string.operator+>   
1484 [0x5cc]:           call @3839 // <main#__srt_global.error>   
1485 [0x5cd]:           nop   
1486 [0x5ce]: line: 309 pushl 1   
1487 [0x5cf]:           ipushl #25   
1488 [0x5d0]:           call @3674 // <std#list<std#string>.operator[>   
1489 [0x5d1]:           new_class @75 // std#string   
1491 [0x5d3]:           dup    
1492 [0x5d4]:           newstr @229 // .sharp   
1493 [0x5d5]:           call @3546 // <std#string.string>   
1494 [0x5d6]:           call @3577 // <std#string.ends_with>   
1495 [0x5d7]:           loadval ebx   
1496 [0x5d8]:           not ebx, ebx   
1497 [0x5d9]:           movr cmt, ebx   
1498 [0x5da]:           jne 1511   
1499 [0x5db]: line: 310 new_class @75 // std#string   
1501 [0x5dd]:           dup    
1502 [0x5de]:           newstr @235 // file `   
1503 [0x5df]:           call @3546 // <std#string.string>   
1504 [0x5e0]:           pushl 1   
1505 [0x5e1]:           ipushl #25   
1506 [0x5e2]:           call @3675 // <std#list<std#string>.at>   
1507 [0x5e3]:           call @3561 // <std#string.operator+>   
1508 [0x5e4]:           newstr @237 // ` is not a sharp file!   
1509 [0x5e5]:           call @3558 // <std#string.operator+>   
1510 [0x5e6]:           call @3839 // <main#__srt_global.error>   
1511 [0x5e7]:           nop   
1512 [0x5e8]: line: 311 pushl 24   
1513 [0x5e9]:           call @2084 // <std.io#file.get_absolute_path>   
1514 [0x5ea]:           pushl 1   
1515 [0x5eb]:           ipushl #25   
1516 [0x5ec]:           call @3674 // <std#list<std#string>.operator[>   
1517 [0x5ed]:           popobj2    
1518 [0x5ee]:           popobj   
1519 [0x5ef]:           iaddl 1, fp@25   
1521 [0x5f1]:           jmp @1453   
1522 [0x5f2]: line: 315 istorel 0, fp+26   
1524 [0x5f4]:           ipushl #26   
1525 [0x5f5]:           pushl 1   
1526 [0x5f6]:           call @3687 // <std#list<std#string>.size>   
1527 [0x5f7]:           loadval ebx   
1528 [0x5f8]:           loadval ecx   
1529 [0x5f9]:           lt ecx, ebx   
1530 [0x5fa]:           movr ebx, cmt   
1531 [0x5fb]:           movr cmt, ebx   
1532 [0x5fc]:           jne 1558   
1533 [0x5fd]: line: 317 pushl 1   
1534 [0x5fe]:           pushl 1   
1535 [0x5ff]:           ipushl #26   
1536 [0x600]:           call @3674 // <std#list<std#string>.operator[>   
1537 [0x601]:           call @3830 // <main#__srt_global.count>   
1538 [0x602]:           loadval ebx   
1539 [0x603]:           rstore ebx   
1540 [0x604]:           movi #1, ebx   
1542 [0x606]:           loadval ecx   
1543 [0x607]:           gt ecx, ebx   
1544 [0x608]:           movr ebx, cmt   
1545 [0x609]:           movr cmt, ebx   
1546 [0x60a]:           jne 1554   
1547 [0x60b]: line: 318 pushl 1   
1548 [0x60c]:           ipushl #26   
1549 [0x60d]:           call @3694 // <std#list<std#string>.remove_at>   
1550 [0x60e]:           loadl ebx, fp+26   
1551 [0x60f]:           movr egx, ebx   
1552 [0x610]:           dec ebx   
1553 [0x611]:           smovr_2 ebx, fp+26   
1554 [0x612]:           nop   
1555 [0x613]:           iaddl 1, fp@26   
1557 [0x615]:           jmp @1524   
1558 [0x616]: line: 322 pushl 1   
1559 [0x617]:           call @3833 // <main#__srt_global.remove_ignored_files>   
1560 [0x618]: line: 323 pushl 1   
1561 [0x619]:           call @3835 // <main#__srt_global.exec_runtime>   
1562 [0x61a]: line: 324 istorel 0, fp+0   
1564 [0x61c]:           ret   


function: main#__srt_global.contains[3829] params(2) in file: lib\support\/bootstrap//main.sharp:327:11: note:  
		static def contains(files: list<string>, file: string) : var {
		          ^

0 [0x0]: line: 329 istorel -1, fp+3   
2 [0x2]:           pushl 0   
3 [0x3]:           invoke_delegate 3666 { static=0, args=0 }   
5 [0x5]:           popl 4   
6 [0x6]:           iaddl 1, fp@3   
8 [0x8]:           movl 4   
9 [0x9]:           sizeof ecx   
10 [0xa]:           loadl ebx, fp+3   
11 [0xb]:           lt ebx, ecx   
12 [0xc]:           jne 27   
13 [0xd]:           movnd ebx   
14 [0xe]:           pushobj   
15 [0xf]:           popl 2   
16 [0x10]: line: 330 pushl 2   
17 [0x11]:           pushl 1   
18 [0x12]:           call @3564 // <std#string.operator==>   
19 [0x13]:           loadval ebx   
20 [0x14]:           movr cmt, ebx   
21 [0x15]:           jne 25   
22 [0x16]: line: 331 istorel 1, fp+0   
24 [0x18]:           ret   
25 [0x19]:           nop   
26 [0x1a]:           jmp @6   
27 [0x1b]: line: 334 istorel 0, fp+0   
29 [0x1d]:           ret   


function: main#__srt_global.count[3830] params(2) in file: lib\support\/bootstrap//main.sharp:337:11: note:  
		static def count(files: list<string>, file: string) : var {
		          ^

0 [0x0]: line: 338 istorel 0, fp+2   
2 [0x2]: line: 339 istorel -1, fp+4   
4 [0x4]:           pushl 0   
5 [0x5]:           invoke_delegate 3666 { static=0, args=0 }   
7 [0x7]:           popl 5   
8 [0x8]:           iaddl 1, fp@4   
10 [0xa]:           movl 5   
11 [0xb]:           sizeof ecx   
12 [0xc]:           loadl ebx, fp+4   
13 [0xd]:           lt ebx, ecx   
14 [0xe]:           jne 28   
15 [0xf]:           movnd ebx   
16 [0x10]:           pushobj   
17 [0x11]:           popl 3   
18 [0x12]: line: 340 pushl 3   
19 [0x13]:           pushl 1   
20 [0x14]:           call @3564 // <std#string.operator==>   
21 [0x15]:           loadval ebx   
22 [0x16]:           movr cmt, ebx   
23 [0x17]:           jne 26   
24 [0x18]: line: 341 iaddl 1, fp@2   
26 [0x1a]:           nop   
27 [0x1b]:           jmp @8   
28 [0x1c]: line: 344 loadl ebx, fp+2   
29 [0x1d]:           return_val ebx   
30 [0x1e]:           ret   


function: main#__srt_global.in_ignored_folder[3831] params(1) in file: lib\support\/bootstrap//main.sharp:347:4: note:  
		def in_ignored_folder(fullpath: string) : var {
		   ^

0 [0x0]: line: 348 istorel -1, fp+2   
2 [0x2]:           movg @95 // @main#options   
3 [0x3]:           movn #22   
5 [0x5]:           pushobj   
6 [0x6]:           invoke_delegate 3666 { static=0, args=0 }   
8 [0x8]:           popl 3   
9 [0x9]:           iaddl 1, fp@2   
11 [0xb]:           movl 3   
12 [0xc]:           sizeof ecx   
13 [0xd]:           loadl ebx, fp+2   
14 [0xe]:           lt ebx, ecx   
15 [0xf]:           jne 30   
16 [0x10]:           movnd ebx   
17 [0x11]:           pushobj   
18 [0x12]:           popl 1   
19 [0x13]: line: 349 pushl 0   
20 [0x14]:           pushl 1   
21 [0x15]:           call @3575 // <std#string.starts_with>   
22 [0x16]:           loadval ebx   
23 [0x17]:           movr cmt, ebx   
24 [0x18]:           jne 28   
25 [0x19]: line: 350 istorel 1, fp+0   
27 [0x1b]:           ret   
28 [0x1c]:           nop   
29 [0x1d]:           jmp @9   
30 [0x1e]: line: 353 istorel 0, fp+0   
32 [0x20]:           ret   


function: main#__srt_global.is_ignored_file[3832] params(1) in file: lib\support\/bootstrap//main.sharp:356:4: note:  
		def is_ignored_file(fullpath: string) : var {
		   ^

0 [0x0]: line: 357 istorel -1, fp+2   
2 [0x2]:           movg @95 // @main#options   
3 [0x3]:           movn #23   
5 [0x5]:           pushobj   
6 [0x6]:           invoke_delegate 3666 { static=0, args=0 }   
8 [0x8]:           popl 3   
9 [0x9]:           iaddl 1, fp@2   
11 [0xb]:           movl 3   
12 [0xc]:           sizeof ecx   
13 [0xd]:           loadl ebx, fp+2   
14 [0xe]:           lt ebx, ecx   
15 [0xf]:           jne 30   
16 [0x10]:           movnd ebx   
17 [0x11]:           pushobj   
18 [0x12]:           popl 1   
19 [0x13]: line: 358 pushl 0   
20 [0x14]:           pushl 1   
21 [0x15]:           call @3564 // <std#string.operator==>   
22 [0x16]:           loadval ebx   
23 [0x17]:           movr cmt, ebx   
24 [0x18]:           jne 28   
25 [0x19]: line: 359 istorel 1, fp+0   
27 [0x1b]:           ret   
28 [0x1c]:           nop   
29 [0x1d]:           jmp @9   
30 [0x1e]: line: 362 istorel 0, fp+0   
32 [0x20]:           ret   


function: main#__srt_global.remove_ignored_files[3833] params(1) in file: lib\support\/bootstrap//main.sharp:365:4: note:  
		def remove_ignored_files(files: list<string>) {
		   ^

0 [0x0]: line: 366 istorel 0, fp+1   
2 [0x2]:           ipushl #1   
3 [0x3]:           pushl 0   
4 [0x4]:           call @3687 // <std#list<std#string>.size>   
5 [0x5]:           loadval ebx   
6 [0x6]:           loadval ecx   
7 [0x7]:           lt ecx, ebx   
8 [0x8]:           movr ebx, cmt   
9 [0x9]:           movr cmt, ebx   
10 [0xa]:           jne 36   
11 [0xb]: line: 367 pushl 0   
12 [0xc]:           ipushl #1   
13 [0xd]:           call @3674 // <std#list<std#string>.operator[>   
14 [0xe]:           call @3831 // <main#__srt_global.in_ignored_folder>   
15 [0xf]:           loadval ebx   
16 [0x10]:           skpe ebx // pc = 23   
17 [0x11]:           movl 0   
18 [0x12]:           pushobj   
19 [0x13]:           ipushl #1   
20 [0x14]:           call @3674 // <std#list<std#string>.operator[>   
21 [0x15]:           call @3832 // <main#__srt_global.is_ignored_file>   
22 [0x16]:           loadval ebx   
23 [0x17]:           movr cmt, ebx   
24 [0x18]:           jne 32   
25 [0x19]: line: 368 pushl 0   
26 [0x1a]:           ipushl #1   
27 [0x1b]:           call @3694 // <std#list<std#string>.remove_at>   
28 [0x1c]:           loadl ebx, fp+1   
29 [0x1d]:           movr egx, ebx   
30 [0x1e]:           dec ebx   
31 [0x1f]:           smovr_2 ebx, fp+1   
32 [0x20]:           nop   
33 [0x21]:           iaddl 1, fp@1   
35 [0x23]:           jmp @2   
36 [0x24]:           ret   


function: main#__srt_global.throttle_max_threads[3834] params(0) in file: lib\support\/bootstrap//main.sharp:378:4: note:  
		def throttle_max_threads() {
		   ^

0 [0x0]: line: 379 call @2387 // <platform.kernel#vm.hardware_concurrency>   
1 [0x1]:           loadval ebx   
2 [0x2]:           rstore ebx   
3 [0x3]:           movi #2, ebx   
5 [0x5]:           loadval ecx   
6 [0x6]:           mul ecx, ebx -> ebx   
7 [0x7]:           smovr_2 ebx, fp+0   
8 [0x8]: line: 380 movi #4, ebx   
10 [0xa]:           subl ebx, fp@0   
11 [0xb]: line: 382 ipushl #0   
12 [0xc]:           movi #3, ebx   
14 [0xe]:           loadval ecx   
15 [0xf]:           gt ecx, ebx   
16 [0x10]:           movr ebx, cmt   
17 [0x11]:           movr cmt, ebx   
18 [0x12]:           jne 22   
19 [0x13]: line: 383 movi #2, ebx   
21 [0x15]:           divl ebx, fp@0   
22 [0x16]:           nop   
23 [0x17]: line: 384 ipushl #0   
24 [0x18]:           call @2228 // <std.io.task#__srt_global.set_thread_max>   
25 [0x19]:           ret   


function: main#__srt_global.exec_runtime[3835] params(1) in file: lib\support\/bootstrap//main.sharp:387:4: note:  
		def exec_runtime(files: list<string>) {
		   ^

0 [0x0]: line: 388 pushl 0   
1 [0x1]:           call @3687 // <std#list<std#string>.size>   
2 [0x2]:           loadval ebx   
3 [0x3]:           rstore ebx   
4 [0x4]:           movi #0, ebx   
6 [0x6]:           loadval ecx   
7 [0x7]:           test ecx, ebx   
8 [0x8]:           movr ebx, cmt   
9 [0x9]:           movr cmt, ebx   
10 [0xa]:           jne 17   
11 [0xb]: line: 389 new_class @75 // std#string   
13 [0xd]:           dup    
14 [0xe]:           newstr @238 // no files were found to be compiled, have you excluded your project directory by chance?   
15 [0xf]:           call @3546 // <std#string.string>   
16 [0x10]:           call @3839 // <main#__srt_global.error>   
17 [0x11]:           nop   
18 [0x12]: line: 392 movg @95 // @main#options   
19 [0x13]:           movn #16   
21 [0x15]:           movi #0, adx   
23 [0x17]:           iaload ebx, adx   
24 [0x18]:           movr cmt, ebx   
25 [0x19]:           jne 27   
26 [0x1a]: line: 393 call @3834 // <main#__srt_global.throttle_max_threads>   
27 [0x1b]:           nop   
28 [0x1c]: line: 396 new_class @28 // std.io#file   
30 [0x1e]:           dup    
31 [0x1f]:           pushl 0   
32 [0x20]:           istore 0   
34 [0x22]:           call @3675 // <std#list<std#string>.at>   
35 [0x23]:           call @2077 // <std.io#file.file>   
36 [0x24]:           popobj2    
37 [0x25]:           smovr_3 fp+1   
38 [0x26]: line: 397 pushl 1   
39 [0x27]:           call @2116 // <std.io#file.read>   
40 [0x28]:           popobj2    
41 [0x29]:           smovr_3 fp+2   
42 [0x2a]: line: 398 new_class @92 // main.frontend.tokenizer#tokenizer   
44 [0x2c]:           dup    
45 [0x2d]:           pushl 2   
46 [0x2e]:           pushl 0   
47 [0x2f]:           istore 0   
49 [0x31]:           call @3675 // <std#list<std#string>.at>   
50 [0x32]:           call @3801 // <main.frontend.tokenizer#tokenizer.tokenizer>   
51 [0x33]:           popobj2    
52 [0x34]:           smovr_3 fp+3   
53 [0x35]: line: 399 pushl 3   
54 [0x36]:           call @3818 // <main.frontend.tokenizer#tokenizer.get_errors>   
55 [0x37]:           call @3699 // <main.frontend#error_manager.print_errors>   
56 [0x38]:           ret   


function: main#__srt_global.create_project[3836] params(0) in file: lib\support\/bootstrap//main.sharp:405:12: note:  
		private def create_project() {
		           ^

0 [0x0]: line: 406 new_class @28 // std.io#file   
2 [0x2]:           dup    
3 [0x3]:           movg @95 // @main#options   
4 [0x4]:           movn #4   
6 [0x6]:           pushobj   
7 [0x7]:           call @2077 // <std.io#file.file>   
8 [0x8]:           popobj2    
9 [0x9]:           smovr_3 fp+0   
10 [0xa]: line: 408 pushl 0   : try start: try block start
11 [0xb]: line: 409 call @2087 // <std.io#file.exists>   
12 [0xc]:           loadval ebx   
13 [0xd]:           movr cmt, ebx   
14 [0xe]:           jne 31   
15 [0xf]: line: 410 new_class @75 // std#string   
17 [0x11]:           dup    
18 [0x12]:           newstr @244 // could not create project, a directory with the name    
19 [0x13]:           call @3546 // <std#string.string>   
20 [0x14]:           movg @95 // @main#options   
21 [0x15]:           movn #4   
23 [0x17]:           pushobj   
24 [0x18]:           call @3561 // <std#string.operator+>   
25 [0x19]:           newstr @245 //  already exists!   
26 [0x1a]:           call @3558 // <std#string.operator+>   
27 [0x1b]:           call @1919 // <std#__srt_global.println>   
28 [0x1c]: line: 411 istore 1   
30 [0x1e]:           call @1926 // <std#__srt_global.exit>   
31 [0x1f]:           nop   
32 [0x20]: line: 414 pushl 0   
33 [0x21]:           call @2098 // <std.io#file.mkdir>   
34 [0x22]:           loadval ebx   
35 [0x23]:           rstore ebx   
36 [0x24]:           movi #0, ebx   
38 [0x26]:           loadval ecx   
39 [0x27]:           tne ecx, ebx   
40 [0x28]:           movr ebx, cmt   
41 [0x29]:           movr cmt, ebx   
42 [0x2a]:           jne 57   
43 [0x2b]: line: 415 new_class @75 // std#string   
45 [0x2d]:           dup    
46 [0x2e]:           newstr @246 // failed to create project directory:    
47 [0x2f]:           call @3546 // <std#string.string>   
48 [0x30]:           movg @95 // @main#options   
49 [0x31]:           movn #4   
51 [0x33]:           pushobj   
52 [0x34]:           call @3561 // <std#string.operator+>   
53 [0x35]:           call @1919 // <std#__srt_global.println>   
54 [0x36]: line: 416 istore 1   
56 [0x38]:           call @1926 // <std#__srt_global.exit>   
57 [0x39]:           nop   
58 [0x3a]: line: 419 new_class @28 // std.io#file   
60 [0x3c]:           dup    
61 [0x3d]:           movg @95 // @main#options   
62 [0x3e]:           movn #4   
64 [0x40]:           pushobj   
65 [0x41]:           newstr @247 // /src/   
66 [0x42]:           call @3558 // <std#string.operator+>   
67 [0x43]:           call @2077 // <std.io#file.file>   
68 [0x44]:           popobj2    
69 [0x45]:           smovr_3 fp+1   
70 [0x46]: line: 420 new_class @28 // std.io#file   
72 [0x48]:           dup    
73 [0x49]:           movg @95 // @main#options   
74 [0x4a]:           movn #4   
76 [0x4c]:           pushobj   
77 [0x4d]:           newstr @248 // /src/main/   
78 [0x4e]:           call @3558 // <std#string.operator+>   
79 [0x4f]:           call @2077 // <std.io#file.file>   
80 [0x50]:           popobj2    
81 [0x51]:           smovr_3 fp+2   
82 [0x52]: line: 421 new_class @28 // std.io#file   
84 [0x54]:           dup    
85 [0x55]:           movg @95 // @main#options   
86 [0x56]:           movn #4   
88 [0x58]:           pushobj   
89 [0x59]:           newstr @249 // /build/   
90 [0x5a]:           call @3558 // <std#string.operator+>   
91 [0x5b]:           call @2077 // <std.io#file.file>   
92 [0x5c]:           popobj2    
93 [0x5d]:           smovr_3 fp+3   
94 [0x5e]: line: 422 new_class @28 // std.io#file   
96 [0x60]:           dup    
97 [0x61]:           movg @95 // @main#options   
98 [0x62]:           movn #4   
100 [0x64]:           pushobj   
101 [0x65]:           newstr @250 // /build/cache/   
102 [0x66]:           call @3558 // <std#string.operator+>   
103 [0x67]:           call @2077 // <std.io#file.file>   
104 [0x68]:           popobj2    
105 [0x69]:           smovr_3 fp+4   
106 [0x6a]: line: 423 new_class @28 // std.io#file   
108 [0x6c]:           dup    
109 [0x6d]:           movg @95 // @main#options   
110 [0x6e]:           movn #4   
112 [0x70]:           pushobj   
113 [0x71]:           newstr @251 // /build/outputs/   
114 [0x72]:           call @3558 // <std#string.operator+>   
115 [0x73]:           call @2077 // <std.io#file.file>   
116 [0x74]:           popobj2    
117 [0x75]:           smovr_3 fp+5   
118 [0x76]: line: 424 new_class @28 // std.io#file   
120 [0x78]:           dup    
121 [0x79]:           movg @95 // @main#options   
122 [0x7a]:           movn #4   
124 [0x7c]:           pushobj   
125 [0x7d]:           newstr @252 // /build/cache/files/   
126 [0x7e]:           call @3558 // <std#string.operator+>   
127 [0x7f]:           call @2077 // <std.io#file.file>   
128 [0x80]:           popobj2    
129 [0x81]:           smovr_3 fp+6   
130 [0x82]: line: 426 pushl 1   
131 [0x83]:           call @2098 // <std.io#file.mkdir>   
132 [0x84]:           loadval ebx   
133 [0x85]:           skpe ebx // pc = 158   
134 [0x86]:           movl 2   
135 [0x87]:           pushobj   
136 [0x88]:           call @2098 // <std.io#file.mkdir>   
137 [0x89]:           loadval ebx   
138 [0x8a]:           skpe ebx // pc = 158   
139 [0x8b]:           movl 3   
140 [0x8c]:           pushobj   
141 [0x8d]:           call @2098 // <std.io#file.mkdir>   
142 [0x8e]:           loadval ebx   
143 [0x8f]:           skpe ebx // pc = 158   
144 [0x90]:           movl 4   
145 [0x91]:           pushobj   
146 [0x92]:           call @2098 // <std.io#file.mkdir>   
147 [0x93]:           loadval ebx   
148 [0x94]:           skpe ebx // pc = 158   
149 [0x95]:           movl 5   
150 [0x96]:           pushobj   
151 [0x97]:           call @2098 // <std.io#file.mkdir>   
152 [0x98]:           loadval ebx   
153 [0x99]:           skpe ebx // pc = 158   
154 [0x9a]:           movl 6   
155 [0x9b]:           pushobj   
156 [0x9c]:           call @2098 // <std.io#file.mkdir>   
157 [0x9d]:           loadval ebx   
158 [0x9e]:           movr cmt, ebx   
159 [0x9f]:           jne 174   
160 [0xa0]: line: 428 new_class @75 // std#string   
162 [0xa2]:           dup    
163 [0xa3]:           newstr @253 // failed to create all necessary directories for project:    
164 [0xa4]:           call @3546 // <std#string.string>   
165 [0xa5]:           movg @95 // @main#options   
166 [0xa6]:           movn #4   
168 [0xa8]:           pushobj   
169 [0xa9]:           call @3561 // <std#string.operator+>   
170 [0xaa]:           call @1919 // <std#__srt_global.println>   
171 [0xab]: line: 429 istore 1   
173 [0xad]:           call @1926 // <std#__srt_global.exit>   
174 [0xae]:           nop   
175 [0xaf]: line: 432 movl 7   
176 [0xb0]:           del   
177 [0xb1]: line: 433 movl 8   
178 [0xb2]:           del   
179 [0xb3]: line: 434 new_class @28 // std.io#file   
181 [0xb5]:           dup    
182 [0xb6]:           movg @95 // @main#options   
183 [0xb7]:           movn #4   
185 [0xb9]:           pushobj   
186 [0xba]:           newstr @254 // /src/main/main.sharp   
187 [0xbb]:           call @3558 // <std#string.operator+>   
188 [0xbc]:           call @2077 // <std.io#file.file>   
189 [0xbd]:           popobj2    
190 [0xbe]:           smovr_3 fp+9   
191 [0xbf]: line: 435 new_class @28 // std.io#file   
193 [0xc1]:           dup    
194 [0xc2]:           movg @95 // @main#options   
195 [0xc3]:           movn #4   
197 [0xc5]:           pushobj   
198 [0xc6]:           newstr @255 // /settings.json   
199 [0xc7]:           call @3558 // <std#string.operator+>   
200 [0xc8]:           call @2077 // <std.io#file.file>   
201 [0xc9]:           popobj2    
202 [0xca]:           smovr_3 fp+10   
203 [0xcb]: line: 437 call @2348 // <platform#build.is_windows>   
204 [0xcc]:           loadval ebx   
205 [0xcd]:           movr cmt, ebx   
206 [0xce]:           jne 222   
207 [0xcf]: line: 438 new_class @28 // std.io#file   
209 [0xd1]:           dup    
210 [0xd2]:           newstr @256 // C:\Program Files\Sharp\proj-template\main.sharp   
211 [0xd3]:           call @2078 // <std.io#file.file>   
212 [0xd4]:           popobj2    
213 [0xd5]:           smovr_3 fp+7   
214 [0xd6]: line: 439 new_class @28 // std.io#file   
216 [0xd8]:           dup    
217 [0xd9]:           newstr @257 // C:\Program Files\Sharp\proj-template\settings.json   
218 [0xda]:           call @2078 // <std.io#file.file>   
219 [0xdb]:           popobj2    
220 [0xdc]:           smovr_3 fp+8   
221 [0xdd]:           jmp @236   
222 [0xde]: line: 441 new_class @28 // std.io#file   
224 [0xe0]:           dup    
225 [0xe1]:           newstr @258 // /usr/include/sharp/proj-template/main.sharp   
226 [0xe2]:           call @2078 // <std.io#file.file>   
227 [0xe3]:           popobj2    
228 [0xe4]:           smovr_3 fp+7   
229 [0xe5]: line: 442 new_class @28 // std.io#file   
231 [0xe7]:           dup    
232 [0xe8]:           newstr @259 // /usr/include/sharp/settings.json   
233 [0xe9]:           call @2078 // <std.io#file.file>   
234 [0xea]:           popobj2    
235 [0xeb]:           smovr_3 fp+8   
236 [0xec]:           nop   
237 [0xed]: line: 445 new_class @75 // std#string   
239 [0xef]:           dup    
240 [0xf0]:           newstr @55 //    
241 [0xf1]:           call @3546 // <std#string.string>   
242 [0xf2]:           popobj2    
243 [0xf3]:           smovr_3 fp+11   
244 [0xf4]: line: 446 pushl 7   
245 [0xf5]:           call @2087 // <std.io#file.exists>   
246 [0xf6]:           loadval ebx   
247 [0xf7]:           movr cmt, ebx   
248 [0xf8]:           jne 254   
249 [0xf9]: line: 447 pushl 7   
250 [0xfa]:           call @2116 // <std.io#file.read>   
251 [0xfb]:           popobj2    
252 [0xfc]:           smovr_3 fp+11   
253 [0xfd]:           jmp @257   
254 [0xfe]: line: 449 pushl 11   
255 [0xff]:           newstr @260 // mod main;

def main() {
  println("hello, world!");
}
   
256 [0x100]:           call @3567 // <std#string.operator=>   
257 [0x101]:           nop   
258 [0x102]: line: 452 pushl 9   
259 [0x103]:           pushl 11   
260 [0x104]:           call @2117 // <std.io#file.write>   
261 [0x105]:           loadval ebx   
262 [0x106]:           rstore ebx   
263 [0x107]:           movi #0, ebx   
265 [0x109]:           loadval ecx   
266 [0x10a]:           tne ecx, ebx   
267 [0x10b]:           movr ebx, cmt   
268 [0x10c]:           movr cmt, ebx   
269 [0x10d]:           jne 282   
270 [0x10e]: line: 453 new_class @75 // std#string   
272 [0x110]:           dup    
273 [0x111]:           newstr @261 // failed to create the main file for project:    
274 [0x112]:           call @3546 // <std#string.string>   
275 [0x113]:           pushl 0   
276 [0x114]:           call @2079 // <std.io#file.get_name>   
277 [0x115]:           call @3561 // <std#string.operator+>   
278 [0x116]:           call @1919 // <std#__srt_global.println>   
279 [0x117]: line: 454 istore 1   
281 [0x119]:           call @1926 // <std#__srt_global.exit>   
282 [0x11a]:           nop   
283 [0x11b]: line: 457 pushl 8   
284 [0x11c]:           call @2087 // <std.io#file.exists>   
285 [0x11d]:           loadval ebx   
286 [0x11e]:           movr cmt, ebx   
287 [0x11f]:           jne 293   
288 [0x120]: line: 458 pushl 8   
289 [0x121]:           call @2116 // <std.io#file.read>   
290 [0x122]:           popobj2    
291 [0x123]:           smovr_3 fp+11   
292 [0x124]:           jmp @312   
293 [0x125]: line: 460 new_class @75 // std#string   
295 [0x127]:           dup    
296 [0x128]:           newstr @262 // {
  name: "   
297 [0x129]:           call @3546 // <std#string.string>   
298 [0x12a]:           pushl 0   
299 [0x12b]:           call @2079 // <std.io#file.get_name>   
300 [0x12c]:           call @3561 // <std#string.operator+>   
301 [0x12d]:           newstr @263 // ",
  version: "1.0",
  output: "   
302 [0x12e]:           call @3558 // <std#string.operator+>   
303 [0x12f]:           pushl 0   
304 [0x130]:           call @2079 // <std.io#file.get_name>   
305 [0x131]:           call @3561 // <std#string.operator+>   
306 [0x132]:           newstr @264 // ",
   
307 [0x133]:           call @3558 // <std#string.operator+>   
308 [0x134]:           newstr @265 // ignore_folders: [
     "build"
  ]
}
   
309 [0x135]:           call @3558 // <std#string.operator+>   
310 [0x136]:           popobj2    
311 [0x137]:           smovr_3 fp+11   
312 [0x138]:           nop   
313 [0x139]: line: 464 pushl 10   
314 [0x13a]:           pushl 11   
315 [0x13b]:           call @2117 // <std.io#file.write>   
316 [0x13c]:           loadval ebx   
317 [0x13d]:           rstore ebx   
318 [0x13e]:           movi #0, ebx   
320 [0x140]:           loadval ecx   
321 [0x141]:           tne ecx, ebx   
322 [0x142]:           movr ebx, cmt   
323 [0x143]:           movr cmt, ebx   
324 [0x144]:           jne 337   
325 [0x145]: line: 465 new_class @75 // std#string   
327 [0x147]:           dup    
328 [0x148]:           newstr @261 // failed to create the main file for project:    
329 [0x149]:           call @3546 // <std#string.string>   
330 [0x14a]:           pushl 0   
331 [0x14b]:           call @2079 // <std.io#file.get_name>   
332 [0x14c]:           call @3561 // <std#string.operator+>   
333 [0x14d]:           call @1919 // <std#__srt_global.println>   
334 [0x14e]: line: 466 istore 1   
336 [0x150]:           call @1926 // <std#__srt_global.exit>   
337 [0x151]:           nop   
338 [0x152]:           jmp @359   : try block end
339 [0x153]: line: 469 new_class @75 // std#string   : catch(std#throwable)
341 [0x155]:           dup    
342 [0x156]:           newstr @253 // failed to create all necessary directories for project:    
343 [0x157]:           call @3546 // <std#string.string>   
344 [0x158]:           movg @95 // @main#options   
345 [0x159]:           movn #4   
347 [0x15b]:           pushobj   
348 [0x15c]:           call @3561 // <std#string.operator+>   
349 [0x15d]:           newstr @266 // . Error:    
350 [0x15e]:           call @3558 // <std#string.operator+>   
351 [0x15f]:           pushl 12   
352 [0x160]:           call @1955 // <std#throwable.get_message>   
353 [0x161]:           call @3561 // <std#string.operator+>   
354 [0x162]:           call @1919 // <std#__srt_global.println>   
355 [0x163]: line: 470 istore 1   
357 [0x165]:           call @1926 // <std#__srt_global.exit>   
358 [0x166]:           jmp @359   
359 [0x167]:           nop   : try end
360 [0x168]: line: 473 new_class @75 // std#string   
362 [0x16a]:           dup    
363 [0x16b]:           newstr @267 // Project: "   
364 [0x16c]:           call @3546 // <std#string.string>   
365 [0x16d]:           pushl 0   
366 [0x16e]:           call @2079 // <std.io#file.get_name>   
367 [0x16f]:           call @3561 // <std#string.operator+>   
368 [0x170]:           newstr @268 // " successfully created!   
369 [0x171]:           call @3558 // <std#string.operator+>   
370 [0x172]:           call @1919 // <std#__srt_global.println>   
371 [0x173]: line: 474 call @1927 // <std#__srt_global.exit>   
372 [0x174]:           ret   


function: main#__srt_global.is_number[3837] params(1) in file: lib\support\/bootstrap//main.sharp:477:19: note:  
		private static def is_number(str: string) : var {
		                  ^

0 [0x0]: line: 478 istorel -1, fp+2   
2 [0x2]:           pushl 0   
3 [0x3]:           invoke_delegate 1896 { static=0, args=0 }   
5 [0x5]:           popl 3   
6 [0x6]:           iaddl 1, fp@2   
8 [0x8]:           movl 3   
9 [0x9]:           sizeof ecx   
10 [0xa]:           loadl ebx, fp+2   
11 [0xb]:           lt ebx, ecx   
12 [0xc]:           jne 26   
13 [0xd]:           iaload ecx, ebx   
14 [0xe]:           smovr_2 ecx, fp+1   
15 [0xf]: line: 479 ipushl #1   
16 [0x10]:           call @3209 // <std#char.is_digit>   
17 [0x11]:           loadval ebx   
18 [0x12]:           not ebx, ebx   
19 [0x13]:           movr cmt, ebx   
20 [0x14]:           jne 24   
21 [0x15]: line: 480 istorel 0, fp+0   
23 [0x17]:           ret   
24 [0x18]:           nop   
25 [0x19]:           jmp @6   
26 [0x1a]: line: 482 istorel 1, fp+0   
28 [0x1c]:           ret   


function: main#__srt_global.check_target[3838] params(0) in file: lib\support\/bootstrap//main.sharp:485:19: note:  
		private static def check_target() {
		                  ^

0 [0x0]: line: 486 movg @95 // @main#options   
1 [0x1]:           movn #20   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #2, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           test ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 16   
14 [0xe]: line: 488 ret   
15 [0xf]:           jmp @32   
16 [0x10]: line: 491 new_class @75 // std#string   
18 [0x12]:           dup    
19 [0x13]:           newstr @269 // invalid platform target `   
20 [0x14]:           call @3546 // <std#string.string>   
21 [0x15]:           movg @95 // @main#options   
22 [0x16]:           movn #20   
24 [0x18]:           movi #0, adx   
26 [0x1a]:           iaload ebx, adx   
27 [0x1b]:           rstore ebx   
28 [0x1c]:           call @3578 // <std#string.operator+>   
29 [0x1d]:           newstr @147 // `   
30 [0x1e]:           call @3558 // <std#string.operator+>   
31 [0x1f]:           call @3839 // <main#__srt_global.error>   
32 [0x20]:           nop   
33 [0x21]:           ret   


function: main#__srt_global.error[3839] params(1) in file: lib\support\/bootstrap//main.sharp:496:19: note:  
		private static def error(message: string) {
		                  ^

0 [0x0]: line: 497 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           newstr @55 //    
4 [0x4]:           call @3546 // <std#string.string>   
5 [0x5]:           movg @94 // @main#__srt_global   
6 [0x6]:           movn #0   
8 [0x8]:           pushobj   
9 [0x9]:           call @3561 // <std#string.operator+>   
10 [0xa]:           newstr @270 // :  error:    
11 [0xb]:           call @3558 // <std#string.operator+>   
12 [0xc]:           pushl 0   
13 [0xd]:           call @3561 // <std#string.operator+>   
14 [0xe]:           call @1919 // <std#__srt_global.println>   
15 [0xf]: line: 498 call @1927 // <std#__srt_global.exit>   
16 [0x10]:           ret   


function: main#__srt_global.print_version[3840] params(0) in file: lib\support\/bootstrap//main.sharp:501:19: note:  
		private static def print_version() {
		                  ^

0 [0x0]: line: 502 movg @94 // @main#__srt_global   
1 [0x1]:           movn #0   
3 [0x3]:           pushobj   
4 [0x4]:           newstr @109 //     
5 [0x5]:           call @3558 // <std#string.operator+>   
6 [0x6]:           movg @94 // @main#__srt_global   
7 [0x7]:           movn #1   
9 [0x9]:           pushobj   
10 [0xa]:           call @3561 // <std#string.operator+>   
11 [0xb]:           call @1902 // <std#__srt_global.print>   
12 [0xc]:           ret   


function: main#__srt_global.help[3841] params(0) in file: lib\support\/bootstrap//main.sharp:505:19: note:  
		private static def help() {
		                  ^

0 [0x0]: line: 506 newstr @273 // Usage: sharpc {OPTIONS} SOURCE FILE(S)   
1 [0x1]:           call @1904 // <std#__srt_global.println>   
2 [0x2]: line: 507 newstr @274 // Source file must have a .sharp extension to be compiled.
   
3 [0x3]:           call @1904 // <std#__srt_global.println>   
4 [0x4]: line: 508 newstr @275 // [-options]

    -V                print compiler version and exit   
5 [0x5]:           call @1904 // <std#__srt_global.println>   
6 [0x6]: line: 509 newstr @276 //     -showvers         print compiler version and continue   
7 [0x7]:           call @1904 // <std#__srt_global.println>   
8 [0x8]: line: 510 newstr @277 //     -o<file>          set the output object file   
9 [0x9]:           call @1904 // <std#__srt_global.println>   
10 [0xa]: line: 511 newstr @278 //     -c                compile only and do not generate exe   
11 [0xb]:           call @1904 // <std#__srt_global.println>   
12 [0xc]: line: 512 newstr @279 //     -a                enable aggressive error reporting   
13 [0xd]:           call @1904 // <std#__srt_global.println>   
14 [0xe]: line: 513 newstr @280 //     -s                strip debugging info   
15 [0xf]:           call @1904 // <std#__srt_global.println>   
16 [0x10]: line: 514 newstr @281 //     -O -O1            optimize code level 1   
17 [0x11]:           call @1904 // <std#__srt_global.println>   
18 [0x12]: line: 515 newstr @282 //     -O2               optimize code level 2   
19 [0x13]:           call @1904 // <std#__srt_global.println>   
20 [0x14]: line: 516 newstr @283 //     -L<path>          library directory path   
21 [0x15]:           call @1904 // <std#__srt_global.println>   
22 [0x16]: line: 517 newstr @284 //     -w                disable all warnings   
23 [0x17]:           call @1904 // <std#__srt_global.println>   
24 [0x18]: line: 518 newstr @285 //     -run              run compiled source after successful compilation   
25 [0x19]:           call @1904 // <std#__srt_global.println>   
26 [0x1a]: line: 519 newstr @286 //     -g -green         run compiler in "green" mode to consume less power   
27 [0x1b]:           call @1904 // <std#__srt_global.println>   
28 [0x1c]: line: 520 newstr @287 //     -ignoredir<dir>   include a directory to ignore (only works in project mode)   
29 [0x1d]:           call @1904 // <std#__srt_global.println>   
30 [0x1e]: line: 521 newstr @288 //     -ignore<file>     include a file to ignore   
31 [0x1f]:           call @1904 // <std#__srt_global.println>   
32 [0x20]: line: 522 newstr @289 //     -p                enable project mode compilation   
33 [0x21]:           call @1904 // <std#__srt_global.println>   
34 [0x22]: line: 523 newstr @290 //     -P<path>          enable project mode compilation on a specific path   
35 [0x23]:           call @1904 // <std#__srt_global.println>   
36 [0x24]: line: 524 newstr @291 //     --new-project<name> create a new sharp project   
37 [0x25]:           call @1904 // <std#__srt_global.println>   
38 [0x26]: line: 525 newstr @292 //     -errlmt<count>    set max errors the compiler allows before quitting   
39 [0x27]:           call @1904 // <std#__srt_global.println>   
40 [0x28]: line: 526 newstr @293 //     -v<version>       set the application version   
41 [0x29]:           call @1904 // <std#__srt_global.println>   
42 [0x2a]: line: 527 newstr @294 //     -target           target the specified platform of sharp to run on   
43 [0x2b]:           call @1904 // <std#__srt_global.println>   
44 [0x2c]: line: 528 newstr @295 //     -release -r       generate a release build exe   
45 [0x2d]:           call @1904 // <std#__srt_global.println>   
46 [0x2e]: line: 529 newstr @296 //     --hw               display help message for warning options   
47 [0x2f]:           call @1904 // <std#__srt_global.println>   
48 [0x30]: line: 530 newstr @297 //     --h -?             display this help message   
49 [0x31]:           call @1904 // <std#__srt_global.println>   
50 [0x32]:           ret   


function: main#__srt_global.help_warning[3842] params(0) in file: lib\support\/bootstrap//main.sharp:533:19: note:  
		private static def help_warning() {
		                  ^

0 [0x0]: line: 534 newstr @273 // Usage: sharpc {OPTIONS} SOURCE FILE(S)   
1 [0x1]:           call @1904 // <std#__srt_global.println>   
2 [0x2]: line: 535 newstr @298 // Source file must have a .sharp extion to be compiled.
   
3 [0x3]:           call @1904 // <std#__srt_global.println>   
4 [0x4]: line: 536 newstr @299 // Please note that not all warnings will be able to be disabled individually.
   
5 [0x5]:           call @1904 // <std#__srt_global.println>   
6 [0x6]: line: 537 newstr @300 // [-options]

    -w                disable all warnings   
7 [0x7]:           call @1904 // <std#__srt_global.println>   
8 [0x8]: line: 538 newstr @301 //     -winit            disable class initialization warnings   
9 [0x9]:           call @1904 // <std#__srt_global.println>   
10 [0xa]: line: 539 newstr @302 //     -waccess          disable access modifier warnings (public, static, etc.)   
11 [0xb]:           call @1904 // <std#__srt_global.println>   
12 [0xc]: line: 540 newstr @303 //     -wambig           disable ambiguous symbol warnings   
13 [0xd]:           call @1904 // <std#__srt_global.println>   
14 [0xe]: line: 541 newstr @304 //     -wdecl            disable object declaration warnings   
15 [0xf]:           call @1904 // <std#__srt_global.println>   
16 [0x10]: line: 542 newstr @305 //     -wmain            disable multiple main method warnings   
17 [0x11]:           call @1904 // <std#__srt_global.println>   
18 [0x12]: line: 543 newstr @306 //     -wcast            disable type cast warnings   
19 [0x13]:           call @1904 // <std#__srt_global.println>   
20 [0x14]: line: 544 newstr @307 //     -werror           enable warnings as errors   
21 [0x15]:           call @1904 // <std#__srt_global.println>   
22 [0x16]: line: 545 newstr @308 //     --hw               display this help message   
23 [0x17]:           call @1904 // <std#__srt_global.println>   
24 [0x18]:           ret   


constructor: main#options.options[3843] params(0) in file: lib\support\/bootstrap//options.sharp:7:6: note:  
		class options {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: main#platform.platform[3844] params(0) in file: lib\support\/bootstrap//platform.sharp:7:6: note:  
		class platform {
		     ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#synced_list<std.io#thread>.synced_list[3845] params(0) in file: lib\support\/0.2.9//synced_list.sharp:13:16: note:  
		    synced_list() {
		               ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 14 movi #10, ebx   
3 [0x3]:          new_classarray ebx  // std.io#thread[]   
5 [0x5]:          movl 0   
6 [0x6]:          movn #1   
8 [0x8]:          popobj   
9 [0x9]:          ret   


constructor: std#synced_list<std.io#thread>.synced_list[3846] params(1) in file: lib\support\/0.2.9//synced_list.sharp:17:16: note:  
		    synced_list(starting_capacity: var) {
		               ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 18 loadl ebx, fp+1   
2 [0x2]:          new_classarray ebx  // std.io#thread[]   
4 [0x4]:          movl 0   
5 [0x5]:          movn #1   
7 [0x7]:          popobj   
8 [0x8]:          ret   


function: std#synced_list<std.io#thread>.set_compact[3847] params(1) in file: lib\support\/0.2.9//synced_list.sharp:21:8: note:  
		    def set_compact(compact_array: var) {
		       ^

0 [0x0]: line: 22 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 23 ipushl #1   
3 [0x3]:          movl 0   
4 [0x4]:          movn #2   
6 [0x6]:          loadval ebx   
7 [0x7]:          movi #0, adx   
9 [0x9]:          rmov adx, ebx   
10 [0xa]:          movl 0   
11 [0xb]:          _ulck   
12 [0xc]:          ret   


function: std#synced_list<std.io#thread>.get_elements[3848] params(0) in file: lib\support\/0.2.9//synced_list.sharp:27:8: note:  
		    def get_elements() : t[] {
		       ^

0 [0x0]: line: 28 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 29 movl 0   
3 [0x3]:          movn #0   
5 [0x5]:          movi #0, adx   
7 [0x7]:          iaload ebx, adx   
8 [0x8]:          rstore ebx   
9 [0x9]:          movi #0, ebx   
11 [0xb]:          loadval ecx   
12 [0xc]:          test ecx, ebx   
13 [0xd]:          movr ebx, cmt   
14 [0xe]:          movr cmt, ebx   
15 [0xf]:          jne 25   
16 [0x10]:          pushnull    
17 [0x11]:          popobj2    
18 [0x12]:          pushobj   
19 [0x13]:          movl 0   
20 [0x14]:          _ulck   
21 [0x15]:          popobj2    
22 [0x16]:          returnobj   
23 [0x17]:          ret   
24 [0x18]:          jmp @46   
25 [0x19]: line: 30 movl 0   
26 [0x1a]:          movn #1   
28 [0x1c]:          pushobj   
29 [0x1d]:          istore 0   
31 [0x1f]:          movl 0   
32 [0x20]:          movn #0   
34 [0x22]:          movi #0, adx   
36 [0x24]:          iaload ebx, adx   
37 [0x25]:          rstore ebx   
38 [0x26]:          call @2161 // <std.io#__srt_global.copy>   
39 [0x27]:          popobj2    
40 [0x28]:          pushobj   
41 [0x29]:          movl 0   
42 [0x2a]:          _ulck   
43 [0x2b]:          popobj2    
44 [0x2c]:          returnobj   
45 [0x2d]:          ret   
46 [0x2e]:          nop   
47 [0x2f]:          movl 0   
48 [0x30]:          _ulck   


overload function: std#synced_list<std.io#thread>.operator[[3849] params(1) in file: lib\support\/0.2.9//synced_list.sharp:34:8: note:  
		    def operator[](index: var): t {
		       ^

0 [0x0]: line: 35 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 36 ipushl #1   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          movi #0, adx   
8 [0x8]:          iaload ebx, adx   
9 [0x9]:          loadval ecx   
10 [0xa]:          gte ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          skpe ebx // pc = 18   
13 [0xd]:          loadl ecx, fp+1   
14 [0xe]:          movi #0, ebx   
16 [0x10]:          lt ecx, ebx   
17 [0x11]:          movr ebx, cmt   
18 [0x12]:          movr cmt, ebx   
19 [0x13]:          jne 28   
20 [0x14]: line: 37 new_class @6 // std#out_of_bounds_exception   
22 [0x16]:          dup    
23 [0x17]:          pushl 0   
24 [0x18]:          ipushl #1   
25 [0x19]:          call @3902 // <std#synced_list<std.io#thread>.out_of_bounds_msg>   
26 [0x1a]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
27 [0x1b]:          throw    
28 [0x1c]:          nop   
29 [0x1d]: line: 38 movl 0   
30 [0x1e]:          movn #1   
32 [0x20]:          pushobj   
33 [0x21]:          loadl ebx, fp+1   
34 [0x22]:          popobj2    
35 [0x23]:          movr adx, ebx   
36 [0x24]:          chklen adx   
37 [0x25]:          movnd adx   
38 [0x26]:          pushobj   
39 [0x27]:          movl 0   
40 [0x28]:          _ulck   
41 [0x29]:          popobj2    
42 [0x2a]:          returnobj   
43 [0x2b]:          ret   
44 [0x2c]:          movl 0   
45 [0x2d]:          _ulck   


function: std#synced_list<std.io#thread>.at[3850] params(1) in file: lib\support\/0.2.9//synced_list.sharp:42:8: note:  
		    def at(index: var): t {
		       ^

0 [0x0]: line: 43 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 44 ipushl #1   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          movi #0, adx   
8 [0x8]:          iaload ebx, adx   
9 [0x9]:          loadval ecx   
10 [0xa]:          gte ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          skpe ebx // pc = 18   
13 [0xd]:          loadl ecx, fp+1   
14 [0xe]:          movi #0, ebx   
16 [0x10]:          lt ecx, ebx   
17 [0x11]:          movr ebx, cmt   
18 [0x12]:          movr cmt, ebx   
19 [0x13]:          jne 28   
20 [0x14]: line: 45 new_class @6 // std#out_of_bounds_exception   
22 [0x16]:          dup    
23 [0x17]:          pushl 0   
24 [0x18]:          ipushl #1   
25 [0x19]:          call @3902 // <std#synced_list<std.io#thread>.out_of_bounds_msg>   
26 [0x1a]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
27 [0x1b]:          throw    
28 [0x1c]:          nop   
29 [0x1d]: line: 46 movl 0   
30 [0x1e]:          movn #1   
32 [0x20]:          pushobj   
33 [0x21]:          loadl ebx, fp+1   
34 [0x22]:          popobj2    
35 [0x23]:          movr adx, ebx   
36 [0x24]:          chklen adx   
37 [0x25]:          movnd adx   
38 [0x26]:          pushobj   
39 [0x27]:          movl 0   
40 [0x28]:          _ulck   
41 [0x29]:          popobj2    
42 [0x2a]:          returnobj   
43 [0x2b]:          ret   
44 [0x2c]:          movl 0   
45 [0x2d]:          _ulck   


function: std#synced_list<std.io#thread>.last[3851] params(0) in file: lib\support\/0.2.9//synced_list.sharp:50:8: note:  
		    def last(): t {
		       ^

0 [0x0]: line: 51 pushl 0   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          rstore ebx   
8 [0x8]:          movi #1, ebx   
10 [0xa]:          loadval ecx   
11 [0xb]:          sub ecx, ebx -> ebx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @3850 // <std#synced_list<std.io#thread>.at>   
14 [0xe]:          popobj2    
15 [0xf]:          returnobj   
16 [0x10]:          ret   


function: std#synced_list<std.io#thread>.put[3852] params(2) in file: lib\support\/0.2.9//synced_list.sharp:54:8: note:  
		    def put(index: var, element: t) : t {
		       ^

0 [0x0]: line: 55 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 56 ipushl #1   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          movi #0, adx   
8 [0x8]:          iaload ebx, adx   
9 [0x9]:          loadval ecx   
10 [0xa]:          gte ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          skpe ebx // pc = 18   
13 [0xd]:          loadl ecx, fp+1   
14 [0xe]:          movi #0, ebx   
16 [0x10]:          lt ecx, ebx   
17 [0x11]:          movr ebx, cmt   
18 [0x12]:          movr cmt, ebx   
19 [0x13]:          jne 28   
20 [0x14]: line: 57 new_class @6 // std#out_of_bounds_exception   
22 [0x16]:          dup    
23 [0x17]:          pushl 0   
24 [0x18]:          ipushl #1   
25 [0x19]:          call @3902 // <std#synced_list<std.io#thread>.out_of_bounds_msg>   
26 [0x1a]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
27 [0x1b]:          throw    
28 [0x1c]:          nop   
29 [0x1d]: line: 59 movl 0   
30 [0x1e]:          movn #1   
32 [0x20]:          pushobj   
33 [0x21]:          loadl ebx, fp+1   
34 [0x22]:          popobj2    
35 [0x23]:          movr adx, ebx   
36 [0x24]:          chklen adx   
37 [0x25]:          movnd adx   
38 [0x26]:          smovr_3 fp+3   
39 [0x27]: line: 60 pushl 2   
40 [0x28]:          movl 0   
41 [0x29]:          movn #1   
43 [0x2b]:          pushobj   
44 [0x2c]:          loadl ebx, fp+1   
45 [0x2d]:          popobj2    
46 [0x2e]:          movr adx, ebx   
47 [0x2f]:          chklen adx   
48 [0x30]:          movnd adx   
49 [0x31]:          popobj   
50 [0x32]: line: 61 pushl 3   
51 [0x33]:          movl 0   
52 [0x34]:          _ulck   
53 [0x35]:          popobj2    
54 [0x36]:          returnobj   
55 [0x37]:          ret   
56 [0x38]:          movl 0   
57 [0x39]:          _ulck   


function: std#synced_list<std.io#thread>.expand[3853] params(0) in file: lib\support\/0.2.9//synced_list.sharp:65:16: note:  
		    private def expand() {
		               ^

0 [0x0]: line: 66 movl 0   
1 [0x1]:          movn #2   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 24   
8 [0x8]: line: 67 movl 0   
9 [0x9]:          movn #1   
11 [0xb]:          pushobj   
12 [0xc]:          movl 0   
13 [0xd]:          movn #1   
15 [0xf]:          sizeof ebx   
16 [0x10]:          rstore ebx   
17 [0x11]:          movi #128, ebx   
19 [0x13]:          loadval ecx   
20 [0x14]:          add ecx, ebx -> ebx   
21 [0x15]:          rstore ebx   
22 [0x16]:          call @2141 // <std.io#__srt_global.realloc>   
23 [0x17]:          jmp @51   
24 [0x18]: line: 69 movl 0   
25 [0x19]:          movn #1   
27 [0x1b]:          pushobj   
28 [0x1c]:          movl 0   
29 [0x1d]:          movn #1   
31 [0x1f]:          sizeof ebx   
32 [0x20]:          rstore ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #1   
36 [0x24]:          sizeof ebx   
37 [0x25]:          rstore ebx   
38 [0x26]:          movi #4, ebx   
40 [0x28]:          loadval ecx   
41 [0x29]:          shr ecx, ebx -> ebx   
42 [0x2a]:          loadval ecx   
43 [0x2b]:          add ecx, ebx -> ebx   
44 [0x2c]:          rstore ebx   
45 [0x2d]:          movi #128, ebx   
47 [0x2f]:          loadval ecx   
48 [0x30]:          add ecx, ebx -> ebx   
49 [0x31]:          rstore ebx   
50 [0x32]:          call @2141 // <std.io#__srt_global.realloc>   
51 [0x33]:          nop   
52 [0x34]:          ret   


function: std#synced_list<std.io#thread>.clear[3854] params(0) in file: lib\support\/0.2.9//synced_list.sharp:72:8: note:  
		    def clear() {
		       ^

0 [0x0]: line: 73 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 74 movi #10, ebx   
4 [0x4]:          new_classarray ebx  // std.io#thread[]   
6 [0x6]:          movl 0   
7 [0x7]:          movn #1   
9 [0x9]:          popobj   
10 [0xa]: line: 75 movi #0, ebx   
12 [0xc]:          movl 0   
13 [0xd]:          movn #0   
15 [0xf]:          movi #0, adx   
17 [0x11]:          rmov adx, ebx   
18 [0x12]:          movl 0   
19 [0x13]:          _ulck   
20 [0x14]:          ret   


function: std#synced_list<std.io#thread>.pop_last[3855] params(0) in file: lib\support\/0.2.9//synced_list.sharp:79:8: note:  
		    def pop_last() : t {
		       ^

0 [0x0]: line: 80 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 81 pushl 0   
3 [0x3]:          call @3851 // <std#synced_list<std.io#thread>.last>   
4 [0x4]:          popobj2    
5 [0x5]:          smovr_3 fp+1   
6 [0x6]: line: 82 pushl 0   
7 [0x7]:          call @3890 // <std#synced_list<std.io#thread>.pop_back>   
8 [0x8]: line: 83 pushl 1   
9 [0x9]:          movl 0   
10 [0xa]:          _ulck   
11 [0xb]:          popobj2    
12 [0xc]:          returnobj   
13 [0xd]:          ret   
14 [0xe]:          movl 0   
15 [0xf]:          _ulck   


function: std#synced_list<std.io#thread>.pop_first[3856] params(0) in file: lib\support\/0.2.9//synced_list.sharp:87:8: note:  
		    def pop_first() : t {
		       ^

0 [0x0]: line: 88 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 89 movl 0   
3 [0x3]:          movn #1   
5 [0x5]:          pushobj   
6 [0x6]:          movi #0, ebx   
8 [0x8]:          popobj2    
9 [0x9]:          movr adx, ebx   
10 [0xa]:          chklen adx   
11 [0xb]:          movnd adx   
12 [0xc]:          smovr_3 fp+1   
13 [0xd]: line: 90 pushl 0   
14 [0xe]:          istore 0   
16 [0x10]:          call @3896 // <std#synced_list<std.io#thread>.remove_at>   
17 [0x11]: line: 91 pushl 1   
18 [0x12]:          movl 0   
19 [0x13]:          _ulck   
20 [0x14]:          popobj2    
21 [0x15]:          returnobj   
22 [0x16]:          ret   
23 [0x17]:          movl 0   
24 [0x18]:          _ulck   


constructor: std#list<std.io#thread>.list[3857] params(0) in file: lib\support\/0.2.9//list.sharp:13:9: note:  
		    list() {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 14 movi #10, ebx   
3 [0x3]:          new_classarray ebx  // std.io#thread[]   
5 [0x5]:          movl 0   
6 [0x6]:          movn #1   
8 [0x8]:          popobj   
9 [0x9]:          ret   


constructor: std#list<std.io#thread>.list[3858] params(1) in file: lib\support\/0.2.9//list.sharp:17:9: note:  
		    list(starting_capacity: var) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 18 loadl ebx, fp+1   
2 [0x2]:          new_classarray ebx  // std.io#thread[]   
4 [0x4]:          movl 0   
5 [0x5]:          movn #1   
7 [0x7]:          popobj   
8 [0x8]:          ret   


constructor: std#list<std.io#thread>.list[3859] params(1) in file: lib\support\/0.2.9//list.sharp:21:9: note:  
		    list(initial_data: t[]) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 22 pushl 0   
2 [0x2]:          pushl 1   
3 [0x3]:          call @3870 // <std#list<std.io#thread>.add_all>   
4 [0x4]:          ret   


function: std#list<std.io#thread>.empty[3860] params(0) in file: lib\support\/0.2.9//list.sharp:25:8: note:  
		    def empty() := n_elements == 0;
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          return_val cmt   
12 [0xc]:          ret   


function: std#list<std.io#thread>.set_compact[3861] params(1) in file: lib\support\/0.2.9//list.sharp:27:8: note:  
		    def set_compact(compact_array: var) {
		       ^

0 [0x0]: line: 28 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #2   
4 [0x4]:          loadval ebx   
5 [0x5]:          movi #0, adx   
7 [0x7]:          rmov adx, ebx   
8 [0x8]:          ret   


function: std#list<std.io#thread>.get_elements[3862] params(0) in file: lib\support\/0.2.9//list.sharp:31:8: note:  
		    def get_elements() : t[] {
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 19   
14 [0xe]:          pushnull    
15 [0xf]:          popobj2    
16 [0x10]:          returnobj   
17 [0x11]:          ret   
18 [0x12]:          jmp @36   
19 [0x13]: line: 33 movl 0   
20 [0x14]:          movn #1   
22 [0x16]:          pushobj   
23 [0x17]:          istore 0   
25 [0x19]:          movl 0   
26 [0x1a]:          movn #0   
28 [0x1c]:          movi #0, adx   
30 [0x1e]:          iaload ebx, adx   
31 [0x1f]:          rstore ebx   
32 [0x20]:          call @2161 // <std.io#__srt_global.copy>   
33 [0x21]:          popobj2    
34 [0x22]:          returnobj   
35 [0x23]:          ret   
36 [0x24]:          nop   


overload function: std#list<std.io#thread>.operator[[3863] params(1) in file: lib\support\/0.2.9//list.sharp:36:8: note:  
		    def operator[](index: var): t {
		       ^

0 [0x0]: line: 37 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 26   
18 [0x12]: line: 38 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:          dup    
21 [0x15]:          pushl 0   
22 [0x16]:          ipushl #1   
23 [0x17]:          call @3886 // <std#list<std.io#thread>.out_of_bounds_msg>   
24 [0x18]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:          throw    
26 [0x1a]:          nop   
27 [0x1b]: line: 39 movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          pushobj   
31 [0x1f]:          loadl ebx, fp+1   
32 [0x20]:          popobj2    
33 [0x21]:          movr adx, ebx   
34 [0x22]:          chklen adx   
35 [0x23]:          movnd adx   
36 [0x24]:          returnobj   
37 [0x25]:          ret   


function: std#list<std.io#thread>.at[3864] params(1) in file: lib\support\/0.2.9//list.sharp:42:8: note:  
		    def at(index: var): t {
		       ^

0 [0x0]: line: 43 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 26   
18 [0x12]: line: 44 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:          dup    
21 [0x15]:          pushl 0   
22 [0x16]:          ipushl #1   
23 [0x17]:          call @3886 // <std#list<std.io#thread>.out_of_bounds_msg>   
24 [0x18]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:          throw    
26 [0x1a]:          nop   
27 [0x1b]: line: 45 movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          pushobj   
31 [0x1f]:          loadl ebx, fp+1   
32 [0x20]:          popobj2    
33 [0x21]:          movr adx, ebx   
34 [0x22]:          chklen adx   
35 [0x23]:          movnd adx   
36 [0x24]:          returnobj   
37 [0x25]:          ret   


function: std#list<std.io#thread>.last[3865] params(0) in file: lib\support\/0.2.9//list.sharp:48:8: note:  
		    def last(): t {
		       ^

0 [0x0]: line: 49 pushl 0   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          rstore ebx   
8 [0x8]:          movi #1, ebx   
10 [0xa]:          loadval ecx   
11 [0xb]:          sub ecx, ebx -> ebx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @3864 // <std#list<std.io#thread>.at>   
14 [0xe]:          popobj2    
15 [0xf]:          returnobj   
16 [0x10]:          ret   


function: std#list<std.io#thread>.put[3866] params(2) in file: lib\support\/0.2.9//list.sharp:52:8: note:  
		    def put(index: var, element: t) : t {
		       ^

0 [0x0]: line: 53 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 26   
18 [0x12]: line: 54 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:          dup    
21 [0x15]:          pushl 0   
22 [0x16]:          ipushl #1   
23 [0x17]:          call @3886 // <std#list<std.io#thread>.out_of_bounds_msg>   
24 [0x18]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:          throw    
26 [0x1a]:          nop   
27 [0x1b]: line: 56 movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          pushobj   
31 [0x1f]:          loadl ebx, fp+1   
32 [0x20]:          popobj2    
33 [0x21]:          movr adx, ebx   
34 [0x22]:          chklen adx   
35 [0x23]:          movnd adx   
36 [0x24]:          smovr_3 fp+3   
37 [0x25]: line: 57 pushl 2   
38 [0x26]:          movl 0   
39 [0x27]:          movn #1   
41 [0x29]:          pushobj   
42 [0x2a]:          loadl ebx, fp+1   
43 [0x2b]:          popobj2    
44 [0x2c]:          movr adx, ebx   
45 [0x2d]:          chklen adx   
46 [0x2e]:          movnd adx   
47 [0x2f]:          popobj   
48 [0x30]: line: 58 movl 3   
49 [0x31]:          returnobj   
50 [0x32]:          ret   


function: std#list<std.io#thread>.expand[3867] params(0) in file: lib\support\/0.2.9//list.sharp:61:16: note:  
		    private def expand() {
		               ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #2   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 24   
8 [0x8]: line: 63 movl 0   
9 [0x9]:          movn #1   
11 [0xb]:          pushobj   
12 [0xc]:          movl 0   
13 [0xd]:          movn #1   
15 [0xf]:          sizeof ebx   
16 [0x10]:          rstore ebx   
17 [0x11]:          movi #128, ebx   
19 [0x13]:          loadval ecx   
20 [0x14]:          add ecx, ebx -> ebx   
21 [0x15]:          rstore ebx   
22 [0x16]:          call @2141 // <std.io#__srt_global.realloc>   
23 [0x17]:          jmp @51   
24 [0x18]: line: 65 movl 0   
25 [0x19]:          movn #1   
27 [0x1b]:          pushobj   
28 [0x1c]:          movl 0   
29 [0x1d]:          movn #1   
31 [0x1f]:          sizeof ebx   
32 [0x20]:          rstore ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #1   
36 [0x24]:          sizeof ebx   
37 [0x25]:          rstore ebx   
38 [0x26]:          movi #4, ebx   
40 [0x28]:          loadval ecx   
41 [0x29]:          shr ecx, ebx -> ebx   
42 [0x2a]:          loadval ecx   
43 [0x2b]:          add ecx, ebx -> ebx   
44 [0x2c]:          rstore ebx   
45 [0x2d]:          movi #128, ebx   
47 [0x2f]:          loadval ecx   
48 [0x30]:          add ecx, ebx -> ebx   
49 [0x31]:          rstore ebx   
50 [0x32]:          call @2141 // <std.io#__srt_global.realloc>   
51 [0x33]:          nop   
52 [0x34]:          ret   


function: std#list<std.io#thread>.clear[3868] params(0) in file: lib\support\/0.2.9//list.sharp:68:8: note:  
		    def clear() {
		       ^

0 [0x0]: line: 69 movi #10, ebx   
2 [0x2]:          new_classarray ebx  // std.io#thread[]   
4 [0x4]:          movl 0   
5 [0x5]:          movn #1   
7 [0x7]:          popobj   
8 [0x8]: line: 70 movi #0, ebx   
10 [0xa]:          movl 0   
11 [0xb]:          movn #0   
13 [0xd]:          movi #0, adx   
15 [0xf]:          rmov adx, ebx   
16 [0x10]:          ret   


function: std#list<std.io#thread>.add_all[3869] params(1) in file: lib\support\/0.2.9//list.sharp:73:8: note:  
		    def add_all(lst: list<t>) {
		       ^

0 [0x0]: line: 74 movl 1   
1 [0x1]:          movn #1   
3 [0x3]:          pushobj   
4 [0x4]:          istore 0   
6 [0x6]:          movl 1   
7 [0x7]:          movn #0   
9 [0x9]:          movi #0, adx   
11 [0xb]:          iaload ebx, adx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @2161 // <std.io#__srt_global.copy>   
14 [0xe]:          popobj2    
15 [0xf]:          movi #37, cmt   
17 [0x11]:          cast cmt   
18 [0x12]:          pushobj   
19 [0x13]:          movl 0   
20 [0x14]:          movn #1   
22 [0x16]:          popobj   
23 [0x17]: line: 75 movl 1   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          iaload ebx, adx   
29 [0x1d]:          movl 0   
30 [0x1e]:          movn #0   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          ret   


function: std#list<std.io#thread>.add_all[3870] params(1) in file: lib\support\/0.2.9//list.sharp:78:8: note:  
		    def add_all(lst: t[]) {
		       ^

0 [0x0]: line: 79 movl 1   
1 [0x1]:          checknull   
2 [0x2]:          not ebx, ebx   
3 [0x3]:          movr cmt, ebx   
4 [0x4]:          jne 30   
5 [0x5]: line: 80 pushl 1   
6 [0x6]:          istore 0   
8 [0x8]:          movl 1   
9 [0x9]:          sizeof ebx   
10 [0xa]:          rstore ebx   
11 [0xb]:          call @2161 // <std.io#__srt_global.copy>   
12 [0xc]:          popobj2    
13 [0xd]:          movi #37, cmt   
15 [0xf]:          cast cmt   
16 [0x10]:          pushobj   
17 [0x11]:          movl 0   
18 [0x12]:          movn #1   
20 [0x14]:          popobj   
21 [0x15]: line: 81 movl 1   
22 [0x16]:          sizeof ebx   
23 [0x17]:          movl 0   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          rmov adx, ebx   
29 [0x1d]:          jmp @46   
30 [0x1e]: line: 83 movi #0, ebx   
32 [0x20]:          movl 0   
33 [0x21]:          movn #0   
35 [0x23]:          movi #0, adx   
37 [0x25]:          rmov adx, ebx   
38 [0x26]: line: 84 movi #10, ebx   
40 [0x28]:          new_classarray ebx  // std.io#thread[]   
42 [0x2a]:          movl 0   
43 [0x2b]:          movn #1   
45 [0x2d]:          popobj   
46 [0x2e]:          nop   
47 [0x2f]:          ret   


function: std#list<std.io#thread>.add[3871] params(1) in file: lib\support\/0.2.9//list.sharp:88:8: note:  
		    def add(element: t) {
		       ^

0 [0x0]: line: 89 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 0   
8 [0x8]:          movn #1   
10 [0xa]:          sizeof ebx   
11 [0xb]:          loadval ecx   
12 [0xc]:          gte ecx, ebx   
13 [0xd]:          movr ebx, cmt   
14 [0xe]:          movr cmt, ebx   
15 [0xf]:          jne 18   
16 [0x10]: line: 90 pushl 0   
17 [0x11]:          call @3867 // <std#list<std.io#thread>.expand>   
18 [0x12]:          nop   
19 [0x13]: line: 91 pushl 1   
20 [0x14]:          movl 0   
21 [0x15]:          movn #1   
23 [0x17]:          pushobj   
24 [0x18]:          movl 0   
25 [0x19]:          movn #0   
27 [0x1b]:          movi #0, adx   
29 [0x1d]:          iaload ebx, adx   
30 [0x1e]:          movr egx, ebx   
31 [0x1f]:          inc ebx   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          movr ebx, egx   
36 [0x24]:          popobj2    
37 [0x25]:          movr adx, ebx   
38 [0x26]:          chklen adx   
39 [0x27]:          movnd adx   
40 [0x28]:          popobj   
41 [0x29]:          ret   


function: std#list<std.io#thread>.indexof[3872] params(1) in file: lib\support\/0.2.9//list.sharp:94:8: note:  
		    def indexof(element: t) : var {
		       ^

0 [0x0]: line: 95 istorel 0, fp+2   
2 [0x2]:          ipushl #2   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          movi #0, adx   
8 [0x8]:          iaload ebx, adx   
9 [0x9]:          loadval ecx   
10 [0xa]:          lt ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 36   
14 [0xe]: line: 96 pushl 1   
15 [0xf]:          movl 0   
16 [0x10]:          movn #1   
18 [0x12]:          pushobj   
19 [0x13]:          loadl ebx, fp+2   
20 [0x14]:          popobj2    
21 [0x15]:          movr adx, ebx   
22 [0x16]:          chklen adx   
23 [0x17]:          movnd adx   
24 [0x18]:          pushobj   
25 [0x19]:          call @2282 // <std.io#thread.operator==>   
26 [0x1a]:          loadval ebx   
27 [0x1b]:          movr cmt, ebx   
28 [0x1c]:          jne 32   
29 [0x1d]: line: 97 loadl ebx, fp+2   
30 [0x1e]:          return_val ebx   
31 [0x1f]:          ret   
32 [0x20]:          nop   
33 [0x21]:          iaddl 1, fp@2   
35 [0x23]:          jmp @2   
36 [0x24]: line: 101 istorel -1, fp+0   
38 [0x26]:           ret   


function: std#list<std.io#thread>.pop_back[3873] params(0) in file: lib\support\/0.2.9//list.sharp:104:8: note:  
		    def pop_back() {
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #0, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 38   
14 [0xe]: line: 106 movl 1   
15 [0xf]:           del   
16 [0x10]: line: 107 pushl 1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           movl 0   
22 [0x16]:           movn #0   
24 [0x18]:           movi #0, adx   
26 [0x1a]:           iaload ebx, adx   
27 [0x1b]:           movr egx, ebx   
28 [0x1c]:           dec ebx   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           rmov adx, ebx   
32 [0x20]:           movr ebx, egx   
33 [0x21]:           popobj2    
34 [0x22]:           movr adx, ebx   
35 [0x23]:           chklen adx   
36 [0x24]:           movnd adx   
37 [0x25]:           popobj   
38 [0x26]:           nop   
39 [0x27]:           ret   


function: std#list<std.io#thread>.pop_last[3874] params(0) in file: lib\support\/0.2.9//list.sharp:111:8: note:  
		    def pop_last() : t {
		       ^

0 [0x0]: line: 112 pushl 0   
1 [0x1]:           call @3865 // <std#list<std.io#thread>.last>   
2 [0x2]:           popobj2    
3 [0x3]:           smovr_3 fp+1   
4 [0x4]: line: 113 pushl 0   
5 [0x5]:           call @3873 // <std#list<std.io#thread>.pop_back>   
6 [0x6]: line: 114 movl 1   
7 [0x7]:           returnobj   
8 [0x8]:           ret   


function: std#list<std.io#thread>.pop_first[3875] params(0) in file: lib\support\/0.2.9//list.sharp:117:8: note:  
		    def pop_first() : t {
		       ^

0 [0x0]: line: 118 movl 0   
1 [0x1]:           movn #1   
3 [0x3]:           pushobj   
4 [0x4]:           movi #0, ebx   
6 [0x6]:           popobj2    
7 [0x7]:           movr adx, ebx   
8 [0x8]:           chklen adx   
9 [0x9]:           movnd adx   
10 [0xa]:           smovr_3 fp+1   
11 [0xb]: line: 119 pushl 0   
12 [0xc]:           istore 0   
14 [0xe]:           call @3883 // <std#list<std.io#thread>.remove_at>   
15 [0xf]: line: 120 movl 1   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#list<std.io#thread>.size[3876] params(0) in file: lib\support\/0.2.9//list.sharp:123:8: note:  
		    def size() := n_elements;
		       ^

0 [0x0]: line: 123 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std#list<std.io#thread>.insert[3877] params(2) in file: lib\support\/0.2.9//list.sharp:125:8: note:  
		    def insert(index: var, element: t) {
		       ^

0 [0x0]: line: 126 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gt ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 26   
18 [0x12]: line: 127 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:           dup    
21 [0x15]:           pushl 0   
22 [0x16]:           ipushl #1   
23 [0x17]:           call @3886 // <std#list<std.io#thread>.out_of_bounds_msg>   
24 [0x18]:           call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:           throw    
26 [0x1a]:           nop   
27 [0x1b]: line: 129 movl 0   
28 [0x1c]:           movn #0   
30 [0x1e]:           movi #0, adx   
32 [0x20]:           iaload ebx, adx   
33 [0x21]:           rstore ebx   
34 [0x22]:           movi #0, ebx   
36 [0x24]:           loadval ecx   
37 [0x25]:           test ecx, ebx   
38 [0x26]:           movr ebx, cmt   
39 [0x27]:           movr cmt, ebx   
40 [0x28]:           jne 45   
41 [0x29]: line: 130 pushl 0   
42 [0x2a]:           pushl 2   
43 [0x2b]:           call @3871 // <std#list<std.io#thread>.add>   
44 [0x2c]:           jmp @134   
45 [0x2d]: line: 132 movl 0   
46 [0x2e]:           movn #0   
48 [0x30]:           movi #0, adx   
50 [0x32]:           iaload ebx, adx   
51 [0x33]:           rstore ebx   
52 [0x34]:           movl 0   
53 [0x35]:           movn #1   
55 [0x37]:           sizeof ebx   
56 [0x38]:           loadval ecx   
57 [0x39]:           gte ecx, ebx   
58 [0x3a]:           movr ebx, cmt   
59 [0x3b]:           movr cmt, ebx   
60 [0x3c]:           jne 63   
61 [0x3d]: line: 133 pushl 0   
62 [0x3e]:           call @3867 // <std#list<std.io#thread>.expand>   
63 [0x3f]:           nop   
64 [0x40]: line: 134 movl 0   
65 [0x41]:           movn #0   
67 [0x43]:           movi #0, adx   
69 [0x45]:           iaload ebx, adx   
70 [0x46]:           movr egx, ebx   
71 [0x47]:           inc ebx   
72 [0x48]:           movi #0, adx   
74 [0x4a]:           rmov adx, ebx   
75 [0x4b]: line: 135 movl 0   
76 [0x4c]:           movn #0   
78 [0x4e]:           movi #0, adx   
80 [0x50]:           iaload ebx, adx   
81 [0x51]:           rstore ebx   
82 [0x52]:           movi #1, ebx   
84 [0x54]:           loadval ecx   
85 [0x55]:           sub ecx, ebx -> ebx   
86 [0x56]:           smovr_2 ebx, fp+3   
87 [0x57]:           ipushl #3   
88 [0x58]:           loadl ebx, fp+1   
89 [0x59]:           loadval ecx   
90 [0x5a]:           gt ecx, ebx   
91 [0x5b]:           movr ebx, cmt   
92 [0x5c]:           movr cmt, ebx   
93 [0x5d]:           jne 123   
94 [0x5e]: line: 136 movl 0   
95 [0x5f]:           movn #1   
97 [0x61]:           pushobj   
98 [0x62]:           ipushl #3   
99 [0x63]:           movi #1, ebx   
101 [0x65]:           loadval ecx   
102 [0x66]:           sub ecx, ebx -> ebx   
103 [0x67]:           popobj2    
104 [0x68]:           movr adx, ebx   
105 [0x69]:           chklen adx   
106 [0x6a]:           movnd adx   
107 [0x6b]:           pushobj   
108 [0x6c]:           movl 0   
109 [0x6d]:           movn #1   
111 [0x6f]:           pushobj   
112 [0x70]:           loadl ebx, fp+3   
113 [0x71]:           popobj2    
114 [0x72]:           movr adx, ebx   
115 [0x73]:           chklen adx   
116 [0x74]:           movnd adx   
117 [0x75]:           popobj   
118 [0x76]:           loadl ebx, fp+3   
119 [0x77]:           movr egx, ebx   
120 [0x78]:           dec ebx   
121 [0x79]:           smovr_2 ebx, fp+3   
122 [0x7a]:           jmp @87   
123 [0x7b]: line: 137 pushl 2   
124 [0x7c]:           movl 0   
125 [0x7d]:           movn #1   
127 [0x7f]:           pushobj   
128 [0x80]:           loadl ebx, fp+1   
129 [0x81]:           popobj2    
130 [0x82]:           movr adx, ebx   
131 [0x83]:           chklen adx   
132 [0x84]:           movnd adx   
133 [0x85]:           popobj   
134 [0x86]:           nop   
135 [0x87]:           ret   


function: std#list<std.io#thread>.find[3878] params(2) in file: lib\support\/0.2.9//list.sharp:141:8: note:  
		    def find(comparer : t, find_func: (t, t)(var)) : t {
		       ^

0 [0x0]: line: 142 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 48   
14 [0xe]: line: 143 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 44   
33 [0x21]: line: 144 movl 0   
34 [0x22]:           movn #1   
36 [0x24]:           pushobj   
37 [0x25]:           loadl ebx, fp+3   
38 [0x26]:           popobj2    
39 [0x27]:           movr adx, ebx   
40 [0x28]:           chklen adx   
41 [0x29]:           movnd adx   
42 [0x2a]:           returnobj   
43 [0x2b]:           ret   
44 [0x2c]:           nop   
45 [0x2d]:           iaddl 1, fp@3   
47 [0x2f]:           jmp @2   
48 [0x30]: line: 148 movl 4   
49 [0x31]:           del   
50 [0x32]: line: 149 movl 4   
51 [0x33]:           returnobj   
52 [0x34]:           ret   


function: std#list<std.io#thread>.remove[3879] params(1) in file: lib\support\/0.2.9//list.sharp:152:8: note:  
		    def remove(val: t) {
		       ^

0 [0x0]: line: 153 istorel 0, fp+2   
2 [0x2]:           ipushl #2   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 37   
14 [0xe]: line: 154 pushl 1   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+2   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           call @2282 // <std.io#thread.operator==>   
26 [0x1a]:           loadval ebx   
27 [0x1b]:           movr cmt, ebx   
28 [0x1c]:           jne 33   
29 [0x1d]: line: 155 pushl 0   
30 [0x1e]:           ipushl #2   
31 [0x1f]:           call @3883 // <std#list<std.io#thread>.remove_at>   
32 [0x20]: line: 156 ret   
33 [0x21]:           nop   
34 [0x22]:           iaddl 1, fp@2   
36 [0x24]:           jmp @2   
37 [0x25]:           ret   


function: std#list<std.io#thread>.remove[3880] params(2) in file: lib\support\/0.2.9//list.sharp:161:8: note:  
		    def remove(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 162 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 41   
14 [0xe]: line: 163 ipushl #2   
15 [0xf]:           pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           movnd adx   
25 [0x19]:           pushobj   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 37   
33 [0x21]: line: 164 pushl 0   
34 [0x22]:           ipushl #3   
35 [0x23]:           call @3883 // <std#list<std.io#thread>.remove_at>   
36 [0x24]: line: 165 ret   
37 [0x25]:           nop   
38 [0x26]:           iaddl 1, fp@3   
40 [0x28]:           jmp @2   
41 [0x29]:           ret   


function: std#list<std.io#thread>.replace[3881] params(2) in file: lib\support\/0.2.9//list.sharp:170:8: note:  
		    def replace(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 171 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 49   
14 [0xe]: line: 172 ipushl #2   
15 [0xf]:           pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           movnd adx   
25 [0x19]:           pushobj   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 45   
33 [0x21]: line: 173 pushl 1   
34 [0x22]:           movl 0   
35 [0x23]:           movn #1   
37 [0x25]:           pushobj   
38 [0x26]:           loadl ebx, fp+3   
39 [0x27]:           popobj2    
40 [0x28]:           movr adx, ebx   
41 [0x29]:           chklen adx   
42 [0x2a]:           movnd adx   
43 [0x2b]:           popobj   
44 [0x2c]: line: 174 ret   
45 [0x2d]:           nop   
46 [0x2e]:           iaddl 1, fp@3   
48 [0x30]:           jmp @2   
49 [0x31]:           ret   


function: std#list<std.io#thread>.linear_sort[3882] params(1) in file: lib\support\/0.2.9//list.sharp:179:8: note:  
		    def linear_sort(swap: (t, t)(var)) {
		       ^

0 [0x0]: line: 180 istorel 0, fp+2   
2 [0x2]:           ipushl #2   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 134   
14 [0xe]: line: 182 istorel 0, fp+3   
16 [0x10]:           ipushl #3   
17 [0x11]:           movl 0   
18 [0x12]:           movn #0   
20 [0x14]:           movi #0, adx   
22 [0x16]:           iaload ebx, adx   
23 [0x17]:           loadval ecx   
24 [0x18]:           lt ecx, ebx   
25 [0x19]:           movr ebx, cmt   
26 [0x1a]:           movr cmt, ebx   
27 [0x1b]:           jne 131   
28 [0x1c]: line: 183 ipushl #3   
29 [0x1d]:           movi #1, ebx   
31 [0x1f]:           loadval ecx   
32 [0x20]:           add ecx, ebx -> ebx   
33 [0x21]:           rstore ebx   
34 [0x22]:           movl 0   
35 [0x23]:           movn #0   
37 [0x25]:           movi #0, adx   
39 [0x27]:           iaload ebx, adx   
40 [0x28]:           loadval ecx   
41 [0x29]:           lt ecx, ebx   
42 [0x2a]:           movr ebx, cmt   
43 [0x2b]:           movr cmt, ebx   
44 [0x2c]:           jne 127   
45 [0x2d]: line: 185 ipushl #1   
46 [0x2e]:           movl 0   
47 [0x2f]:           movn #1   
49 [0x31]:           pushobj   
50 [0x32]:           loadl ebx, fp+3   
51 [0x33]:           popobj2    
52 [0x34]:           movr adx, ebx   
53 [0x35]:           chklen adx   
54 [0x36]:           movnd adx   
55 [0x37]:           pushobj   
56 [0x38]:           movl 0   
57 [0x39]:           movn #1   
59 [0x3b]:           pushobj   
60 [0x3c]:           ipushl #3   
61 [0x3d]:           movi #1, ebx   
63 [0x3f]:           loadval ecx   
64 [0x40]:           add ecx, ebx -> ebx   
65 [0x41]:           popobj2    
66 [0x42]:           movr adx, ebx   
67 [0x43]:           chklen adx   
68 [0x44]:           movnd adx   
69 [0x45]:           pushobj   
70 [0x46]:           smov ebx, sp+[-2]   
71 [0x47]:           calld ebx   
72 [0x48]:           swap    
73 [0x49]:           pop   
74 [0x4a]:           loadval ebx   
75 [0x4b]:           movr cmt, ebx   
76 [0x4c]:           jne 126   
77 [0x4d]: line: 186 movl 0   
78 [0x4e]:           movn #1   
80 [0x50]:           pushobj   
81 [0x51]:           loadl ebx, fp+3   
82 [0x52]:           popobj2    
83 [0x53]:           movr adx, ebx   
84 [0x54]:           chklen adx   
85 [0x55]:           movnd adx   
86 [0x56]:           smovr_3 fp+4   
87 [0x57]: line: 187 movl 0   
88 [0x58]:           movn #1   
90 [0x5a]:           pushobj   
91 [0x5b]:           ipushl #3   
92 [0x5c]:           movi #1, ebx   
94 [0x5e]:           loadval ecx   
95 [0x5f]:           add ecx, ebx -> ebx   
96 [0x60]:           popobj2    
97 [0x61]:           movr adx, ebx   
98 [0x62]:           chklen adx   
99 [0x63]:           movnd adx   
100 [0x64]:           pushobj   
101 [0x65]:           movl 0   
102 [0x66]:           movn #1   
104 [0x68]:           pushobj   
105 [0x69]:           loadl ebx, fp+3   
106 [0x6a]:           popobj2    
107 [0x6b]:           movr adx, ebx   
108 [0x6c]:           chklen adx   
109 [0x6d]:           movnd adx   
110 [0x6e]:           popobj   
111 [0x6f]: line: 188 pushl 4   
112 [0x70]:           movl 0   
113 [0x71]:           movn #1   
115 [0x73]:           pushobj   
116 [0x74]:           ipushl #3   
117 [0x75]:           movi #1, ebx   
119 [0x77]:           loadval ecx   
120 [0x78]:           add ecx, ebx -> ebx   
121 [0x79]:           popobj2    
122 [0x7a]:           movr adx, ebx   
123 [0x7b]:           chklen adx   
124 [0x7c]:           movnd adx   
125 [0x7d]:           popobj   
126 [0x7e]:           nop   
127 [0x7f]:           nop   
128 [0x80]:           iaddl 1, fp@3   
130 [0x82]:           jmp @16   
131 [0x83]:           iaddl 1, fp@2   
133 [0x85]:           jmp @2   
134 [0x86]:           ret   


function: std#list<std.io#thread>.remove_at[3883] params(1) in file: lib\support\/0.2.9//list.sharp:195:8: note:  
		    def remove_at(index: var) {
		       ^

0 [0x0]: line: 196 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gte ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 26   
18 [0x12]: line: 197 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:           dup    
21 [0x15]:           pushl 0   
22 [0x16]:           ipushl #1   
23 [0x17]:           call @3886 // <std#list<std.io#thread>.out_of_bounds_msg>   
24 [0x18]:           call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:           throw    
26 [0x1a]:           nop   
27 [0x1b]: line: 199 movl 0   
28 [0x1c]:           movn #0   
30 [0x1e]:           movi #0, adx   
32 [0x20]:           iaload ebx, adx   
33 [0x21]:           rstore ebx   
34 [0x22]:           loadl ebx, fp+1   
35 [0x23]:           loadval ecx   
36 [0x24]:           sub ecx, ebx -> ebx   
37 [0x25]:           rstore ebx   
38 [0x26]:           movi #1, ebx   
40 [0x28]:           loadval ecx   
41 [0x29]:           sub ecx, ebx -> ebx   
42 [0x2a]:           smovr_2 ebx, fp+2   
43 [0x2b]: line: 200 ipushl #2   
44 [0x2c]:           movi #0, ebx   
46 [0x2e]:           loadval ecx   
47 [0x2f]:           gt ecx, ebx   
48 [0x30]:           movr ebx, cmt   
49 [0x31]:           movr cmt, ebx   
50 [0x32]:           jne 74   
51 [0x33]: line: 201 movl 0   
52 [0x34]:           movn #1   
54 [0x36]:           pushobj   
55 [0x37]:           movl 0   
56 [0x38]:           movn #1   
58 [0x3a]:           pushobj   
59 [0x3b]:           ipushl #1   
60 [0x3c]:           ipushl #1   
61 [0x3d]:           movi #1, ebx   
63 [0x3f]:           loadval ecx   
64 [0x40]:           add ecx, ebx -> ebx   
65 [0x41]:           rstore ebx   
66 [0x42]:           movl 0   
67 [0x43]:           movn #0   
69 [0x45]:           movi #0, adx   
71 [0x47]:           iaload ebx, adx   
72 [0x48]:           rstore ebx   
73 [0x49]:           call @2151 // <std.io#__srt_global.memcopy>   
74 [0x4a]:           nop   
75 [0x4b]: line: 203 pushl 0   
76 [0x4c]:           call @3873 // <std#list<std.io#thread>.pop_back>   
77 [0x4d]:           ret   


function: std#list<std.io#thread>.indexof[3884] params(2) in file: lib\support\/0.2.9//list.sharp:206:8: note:  
		    def indexof(comparer: t, find_func: (t, t)(var)) : var {
		       ^

0 [0x0]: line: 207 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 40   
14 [0xe]: line: 208 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 36   
33 [0x21]: line: 209 loadl ebx, fp+3   
34 [0x22]:           return_val ebx   
35 [0x23]:           ret   
36 [0x24]:           nop   
37 [0x25]:           iaddl 1, fp@3   
39 [0x27]:           jmp @2   
40 [0x28]: line: 213 istorel -1, fp+0   
42 [0x2a]:           ret   


function: std#list<std.io#thread>.to_string[3885] params(0) in file: lib\support\/0.2.9//list.sharp:216:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 217 new_class @76 // std#string_builder   
2 [0x2]:           dup    
3 [0x3]:           call @3649 // <std#string_builder.string_builder>   
4 [0x4]:           popobj2    
5 [0x5]:           smovr_3 fp+1   
6 [0x6]: line: 219 pushl 1   
7 [0x7]:           newstr @562 // [    
8 [0x8]:           call @3645 // <std#string_builder.operator+=>   
9 [0x9]:           pop   
10 [0xa]: line: 220 istorel 0, fp+2   
12 [0xc]:           ipushl #2   
13 [0xd]:           movl 0   
14 [0xe]:           movn #0   
16 [0x10]:           movi #0, adx   
18 [0x12]:           iaload ebx, adx   
19 [0x13]:           loadval ecx   
20 [0x14]:           lt ecx, ebx   
21 [0x15]:           movr ebx, cmt   
22 [0x16]:           movr cmt, ebx   
23 [0x17]:           jne 62   
24 [0x18]: line: 221 pushl 1   
25 [0x19]:           movl 0   
26 [0x1a]:           movn #1   
28 [0x1c]:           pushobj   
29 [0x1d]:           loadl ebx, fp+2   
30 [0x1e]:           popobj2    
31 [0x1f]:           movr adx, ebx   
32 [0x20]:           chklen adx   
33 [0x21]:           movnd adx   
34 [0x22]:           pushobj   
35 [0x23]:           call @3641 // <std#string_builder.operator+=>   
36 [0x24]:           pop   
37 [0x25]: line: 223 ipushl #2   
38 [0x26]:           movi #1, ebx   
40 [0x28]:           loadval ecx   
41 [0x29]:           add ecx, ebx -> ebx   
42 [0x2a]:           rstore ebx   
43 [0x2b]:           movl 0   
44 [0x2c]:           movn #0   
46 [0x2e]:           movi #0, adx   
48 [0x30]:           iaload ebx, adx   
49 [0x31]:           loadval ecx   
50 [0x32]:           lt ecx, ebx   
51 [0x33]:           movr ebx, cmt   
52 [0x34]:           movr cmt, ebx   
53 [0x35]:           jne 58   
54 [0x36]: line: 224 pushl 1   
55 [0x37]:           newstr @563 // ,    
56 [0x38]:           call @3645 // <std#string_builder.operator+=>   
57 [0x39]:           pop   
58 [0x3a]:           nop   
59 [0x3b]:           iaddl 1, fp@2   
61 [0x3d]:           jmp @12   
62 [0x3e]: line: 228 pushl 1   
63 [0x3f]:           newstr @564 //  ]   
64 [0x40]:           call @3645 // <std#string_builder.operator+=>   
65 [0x41]:           pop   
66 [0x42]: line: 229 pushl 1   
67 [0x43]:           call @3622 // <std#string_builder.to_string>   
68 [0x44]:           popobj2    
69 [0x45]:           returnobj   
70 [0x46]:           ret   


function: std#list<std.io#thread>.out_of_bounds_msg[3886] params(1) in file: lib\support\/0.2.9//list.sharp:232:16: note:  
		    private def out_of_bounds_msg(index: var) : string {
		               ^

0 [0x0]: line: 233 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           newstr @565 // Index:    
4 [0x4]:           call @3546 // <std#string.string>   
5 [0x5]:           ipushl #1   
6 [0x6]:           call @3578 // <std#string.operator+>   
7 [0x7]:           newstr @566 // , size:    
8 [0x8]:           call @3558 // <std#string.operator+>   
9 [0x9]:           movl 0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           iaload ebx, adx   
15 [0xf]:           rstore ebx   
16 [0x10]:           call @3578 // <std#string.operator+>   
17 [0x11]:           popobj2    
18 [0x12]:           returnobj   
19 [0x13]:           ret   


function: std#synced_list<std.io#thread>.add_all[3887] params(1) in file: lib\support\/0.2.9//synced_list.sharp:95:8: note:  
		    def add_all(lst: list<t>) {
		       ^

0 [0x0]: line: 96 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 97 movl 1   
3 [0x3]:          movn #1   
5 [0x5]:          pushobj   
6 [0x6]:          istore 0   
8 [0x8]:          movl 1   
9 [0x9]:          movn #0   
11 [0xb]:          movi #0, adx   
13 [0xd]:          iaload ebx, adx   
14 [0xe]:          rstore ebx   
15 [0xf]:          call @2161 // <std.io#__srt_global.copy>   
16 [0x10]:          popobj2    
17 [0x11]:          movi #37, cmt   
19 [0x13]:          cast cmt   
20 [0x14]:          pushobj   
21 [0x15]:          movl 0   
22 [0x16]:          movn #1   
24 [0x18]:          popobj   
25 [0x19]: line: 98 movl 1   
26 [0x1a]:          movn #0   
28 [0x1c]:          movi #0, adx   
30 [0x1e]:          iaload ebx, adx   
31 [0x1f]:          movl 0   
32 [0x20]:          movn #0   
34 [0x22]:          movi #0, adx   
36 [0x24]:          rmov adx, ebx   
37 [0x25]:          movl 0   
38 [0x26]:          _ulck   
39 [0x27]:          ret   


function: std#synced_list<std.io#thread>.add[3888] params(1) in file: lib\support\/0.2.9//synced_list.sharp:102:8: note:  
		    def add(element: t) {
		       ^

0 [0x0]: line: 103 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 104 movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           rstore ebx   
9 [0x9]:           movl 0   
10 [0xa]:           movn #1   
12 [0xc]:           sizeof ebx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 20   
18 [0x12]: line: 105 pushl 0   
19 [0x13]:           call @3853 // <std#synced_list<std.io#thread>.expand>   
20 [0x14]:           nop   
21 [0x15]: line: 106 pushl 1   
22 [0x16]:           movl 0   
23 [0x17]:           movn #1   
25 [0x19]:           pushobj   
26 [0x1a]:           movl 0   
27 [0x1b]:           movn #0   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           iaload ebx, adx   
32 [0x20]:           movr egx, ebx   
33 [0x21]:           inc ebx   
34 [0x22]:           movi #0, adx   
36 [0x24]:           rmov adx, ebx   
37 [0x25]:           movr ebx, egx   
38 [0x26]:           popobj2    
39 [0x27]:           movr adx, ebx   
40 [0x28]:           chklen adx   
41 [0x29]:           movnd adx   
42 [0x2a]:           popobj   
43 [0x2b]:           movl 0   
44 [0x2c]:           _ulck   
45 [0x2d]:           ret   


function: std#synced_list<std.io#thread>.indexof[3889] params(1) in file: lib\support\/0.2.9//synced_list.sharp:110:8: note:  
		    def indexof(element: t) : var {
		       ^

0 [0x0]: line: 111 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 112 istorel 0, fp+2   
4 [0x4]:           ipushl #2   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           loadval ecx   
12 [0xc]:           lt ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           movr cmt, ebx   
15 [0xf]:           jne 40   
16 [0x10]: line: 113 pushl 1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           loadl ebx, fp+2   
22 [0x16]:           popobj2    
23 [0x17]:           movr adx, ebx   
24 [0x18]:           chklen adx   
25 [0x19]:           movnd adx   
26 [0x1a]:           pushobj   
27 [0x1b]:           call @2282 // <std.io#thread.operator==>   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 36   
31 [0x1f]: line: 114 loadl ebx, fp+2   
32 [0x20]:           return_val ebx   
33 [0x21]:           movl 0   
34 [0x22]:           _ulck   
35 [0x23]:           ret   
36 [0x24]:           nop   
37 [0x25]:           iaddl 1, fp@2   
39 [0x27]:           jmp @4   
40 [0x28]: line: 118 istorel -1, fp+0   
42 [0x2a]:           movl 0   
43 [0x2b]:           _ulck   
44 [0x2c]:           ret   
45 [0x2d]:           movl 0   
46 [0x2e]:           _ulck   


function: std#synced_list<std.io#thread>.pop_back[3890] params(0) in file: lib\support\/0.2.9//synced_list.sharp:122:8: note:  
		    def pop_back() {
		       ^

0 [0x0]: line: 123 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #0, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 36   
14 [0xe]: line: 124 movl 1   
15 [0xf]:           del   
16 [0x10]: line: 125 pushl 1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           movl 0   
22 [0x16]:           movn #0   
24 [0x18]:           movi #0, adx   
26 [0x1a]:           iaload ebx, adx   
27 [0x1b]:           dec ebx   
28 [0x1c]:           movi #0, adx   
30 [0x1e]:           rmov adx, ebx   
31 [0x1f]:           popobj2    
32 [0x20]:           movr adx, ebx   
33 [0x21]:           chklen adx   
34 [0x22]:           movnd adx   
35 [0x23]:           popobj   
36 [0x24]:           nop   
37 [0x25]:           ret   


function: std#synced_list<std.io#thread>.size[3891] params(0) in file: lib\support\/0.2.9//synced_list.sharp:129:8: note:  
		    def size() : var {
		       ^

0 [0x0]: line: 130 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 131 movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           return_val ebx   
9 [0x9]:           movl 0   
10 [0xa]:           _ulck   
11 [0xb]:           ret   
12 [0xc]:           movl 0   
13 [0xd]:           _ulck   


function: std#synced_list<std.io#thread>.empty[3892] params(0) in file: lib\support\/0.2.9//synced_list.sharp:135:8: note:  
		    def empty() : var {
		       ^

0 [0x0]: line: 136 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 137 movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           rstore ebx   
9 [0x9]:           movi #0, ebx   
11 [0xb]:           loadval ecx   
12 [0xc]:           test ecx, ebx   
13 [0xd]:           return_val cmt   
14 [0xe]:           movl 0   
15 [0xf]:           _ulck   
16 [0x10]:           ret   
17 [0x11]:           movl 0   
18 [0x12]:           _ulck   


function: std#synced_list<std.io#thread>.insert[3893] params(2) in file: lib\support\/0.2.9//synced_list.sharp:141:8: note:  
		    def insert(index: var, element: t) {
		       ^

0 [0x0]: line: 142 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 143 ipushl #1   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           skpe ebx // pc = 18   
13 [0xd]:           loadl ecx, fp+1   
14 [0xe]:           movi #0, ebx   
16 [0x10]:           lt ecx, ebx   
17 [0x11]:           movr ebx, cmt   
18 [0x12]:           movr cmt, ebx   
19 [0x13]:           jne 28   
20 [0x14]: line: 144 new_class @6 // std#out_of_bounds_exception   
22 [0x16]:           dup    
23 [0x17]:           pushl 0   
24 [0x18]:           ipushl #1   
25 [0x19]:           call @3902 // <std#synced_list<std.io#thread>.out_of_bounds_msg>   
26 [0x1a]:           call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
27 [0x1b]:           throw    
28 [0x1c]:           nop   
29 [0x1d]: line: 146 movl 0   
30 [0x1e]:           movn #0   
32 [0x20]:           movi #0, adx   
34 [0x22]:           iaload ebx, adx   
35 [0x23]:           rstore ebx   
36 [0x24]:           movi #0, ebx   
38 [0x26]:           loadval ecx   
39 [0x27]:           test ecx, ebx   
40 [0x28]:           movr ebx, cmt   
41 [0x29]:           movr cmt, ebx   
42 [0x2a]:           jne 47   
43 [0x2b]: line: 147 pushl 0   
44 [0x2c]:           pushl 2   
45 [0x2d]:           call @3888 // <std#synced_list<std.io#thread>.add>   
46 [0x2e]:           jmp @136   
47 [0x2f]: line: 149 movl 0   
48 [0x30]:           movn #0   
50 [0x32]:           movi #0, adx   
52 [0x34]:           iaload ebx, adx   
53 [0x35]:           rstore ebx   
54 [0x36]:           movl 0   
55 [0x37]:           movn #1   
57 [0x39]:           sizeof ebx   
58 [0x3a]:           loadval ecx   
59 [0x3b]:           gte ecx, ebx   
60 [0x3c]:           movr ebx, cmt   
61 [0x3d]:           movr cmt, ebx   
62 [0x3e]:           jne 65   
63 [0x3f]: line: 150 pushl 0   
64 [0x40]:           call @3853 // <std#synced_list<std.io#thread>.expand>   
65 [0x41]:           nop   
66 [0x42]: line: 151 movl 0   
67 [0x43]:           movn #0   
69 [0x45]:           movi #0, adx   
71 [0x47]:           iaload ebx, adx   
72 [0x48]:           movr egx, ebx   
73 [0x49]:           inc ebx   
74 [0x4a]:           movi #0, adx   
76 [0x4c]:           rmov adx, ebx   
77 [0x4d]: line: 152 movl 0   
78 [0x4e]:           movn #0   
80 [0x50]:           movi #0, adx   
82 [0x52]:           iaload ebx, adx   
83 [0x53]:           rstore ebx   
84 [0x54]:           movi #1, ebx   
86 [0x56]:           loadval ecx   
87 [0x57]:           sub ecx, ebx -> ebx   
88 [0x58]:           smovr_2 ebx, fp+3   
89 [0x59]:           ipushl #3   
90 [0x5a]:           loadl ebx, fp+1   
91 [0x5b]:           loadval ecx   
92 [0x5c]:           gt ecx, ebx   
93 [0x5d]:           movr ebx, cmt   
94 [0x5e]:           movr cmt, ebx   
95 [0x5f]:           jne 125   
96 [0x60]: line: 153 movl 0   
97 [0x61]:           movn #1   
99 [0x63]:           pushobj   
100 [0x64]:           ipushl #3   
101 [0x65]:           movi #1, ebx   
103 [0x67]:           loadval ecx   
104 [0x68]:           sub ecx, ebx -> ebx   
105 [0x69]:           popobj2    
106 [0x6a]:           movr adx, ebx   
107 [0x6b]:           chklen adx   
108 [0x6c]:           movnd adx   
109 [0x6d]:           pushobj   
110 [0x6e]:           movl 0   
111 [0x6f]:           movn #1   
113 [0x71]:           pushobj   
114 [0x72]:           loadl ebx, fp+3   
115 [0x73]:           popobj2    
116 [0x74]:           movr adx, ebx   
117 [0x75]:           chklen adx   
118 [0x76]:           movnd adx   
119 [0x77]:           popobj   
120 [0x78]:           loadl ebx, fp+3   
121 [0x79]:           movr egx, ebx   
122 [0x7a]:           dec ebx   
123 [0x7b]:           smovr_2 ebx, fp+3   
124 [0x7c]:           jmp @89   
125 [0x7d]: line: 154 pushl 2   
126 [0x7e]:           movl 0   
127 [0x7f]:           movn #1   
129 [0x81]:           pushobj   
130 [0x82]:           loadl ebx, fp+1   
131 [0x83]:           popobj2    
132 [0x84]:           movr adx, ebx   
133 [0x85]:           chklen adx   
134 [0x86]:           movnd adx   
135 [0x87]:           popobj   
136 [0x88]:           nop   
137 [0x89]:           movl 0   
138 [0x8a]:           _ulck   
139 [0x8b]:           ret   


function: std#synced_list<std.io#thread>.remove[3894] params(1) in file: lib\support\/0.2.9//synced_list.sharp:160:8: note:  
		    def remove(val: t) {
		       ^

0 [0x0]: line: 161 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 162 istorel 0, fp+2   
4 [0x4]:           ipushl #2   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           loadval ecx   
12 [0xc]:           lt ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           movr cmt, ebx   
15 [0xf]:           jne 41   
16 [0x10]: line: 163 pushl 1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           loadl ebx, fp+2   
22 [0x16]:           popobj2    
23 [0x17]:           movr adx, ebx   
24 [0x18]:           chklen adx   
25 [0x19]:           movnd adx   
26 [0x1a]:           pushobj   
27 [0x1b]:           call @2282 // <std.io#thread.operator==>   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           movr cmt, ebx   
30 [0x1e]:           jne 37   
31 [0x1f]: line: 164 pushl 0   
32 [0x20]:           ipushl #2   
33 [0x21]:           call @3896 // <std#synced_list<std.io#thread>.remove_at>   
34 [0x22]: line: 165 movl 0   
35 [0x23]:           _ulck   
36 [0x24]:           ret   
37 [0x25]:           nop   
38 [0x26]:           iaddl 1, fp@2   
40 [0x28]:           jmp @4   
41 [0x29]:           movl 0   
42 [0x2a]:           _ulck   
43 [0x2b]:           ret   


function: std#synced_list<std.io#thread>.remove[3895] params(2) in file: lib\support\/0.2.9//synced_list.sharp:171:8: note:  
		    def remove(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 172 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 173 istorel 0, fp+3   
4 [0x4]:           ipushl #3   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           loadval ecx   
12 [0xc]:           lt ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           movr cmt, ebx   
15 [0xf]:           jne 45   
16 [0x10]: line: 174 ipushl #2   
17 [0x11]:           pushl 1   
18 [0x12]:           movl 0   
19 [0x13]:           movn #1   
21 [0x15]:           pushobj   
22 [0x16]:           loadl ebx, fp+3   
23 [0x17]:           popobj2    
24 [0x18]:           movr adx, ebx   
25 [0x19]:           chklen adx   
26 [0x1a]:           movnd adx   
27 [0x1b]:           pushobj   
28 [0x1c]:           smov ebx, sp+[-2]   
29 [0x1d]:           calld ebx   
30 [0x1e]:           swap    
31 [0x1f]:           pop   
32 [0x20]:           loadval ebx   
33 [0x21]:           movr cmt, ebx   
34 [0x22]:           jne 41   
35 [0x23]: line: 175 pushl 0   
36 [0x24]:           ipushl #3   
37 [0x25]:           call @3896 // <std#synced_list<std.io#thread>.remove_at>   
38 [0x26]: line: 176 movl 0   
39 [0x27]:           _ulck   
40 [0x28]:           ret   
41 [0x29]:           nop   
42 [0x2a]:           iaddl 1, fp@3   
44 [0x2c]:           jmp @4   
45 [0x2d]:           movl 0   
46 [0x2e]:           _ulck   
47 [0x2f]:           ret   


function: std#synced_list<std.io#thread>.remove_at[3896] params(1) in file: lib\support\/0.2.9//synced_list.sharp:182:8: note:  
		    def remove_at(index: var) {
		       ^

0 [0x0]: line: 183 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 184 ipushl #1   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gte ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           skpe ebx // pc = 18   
13 [0xd]:           loadl ecx, fp+1   
14 [0xe]:           movi #0, ebx   
16 [0x10]:           lt ecx, ebx   
17 [0x11]:           movr ebx, cmt   
18 [0x12]:           movr cmt, ebx   
19 [0x13]:           jne 28   
20 [0x14]: line: 185 new_class @6 // std#out_of_bounds_exception   
22 [0x16]:           dup    
23 [0x17]:           pushl 0   
24 [0x18]:           ipushl #1   
25 [0x19]:           call @3902 // <std#synced_list<std.io#thread>.out_of_bounds_msg>   
26 [0x1a]:           call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
27 [0x1b]:           throw    
28 [0x1c]:           nop   
29 [0x1d]: line: 187 movl 0   
30 [0x1e]:           movn #0   
32 [0x20]:           movi #0, adx   
34 [0x22]:           iaload ebx, adx   
35 [0x23]:           rstore ebx   
36 [0x24]:           loadl ebx, fp+1   
37 [0x25]:           loadval ecx   
38 [0x26]:           sub ecx, ebx -> ebx   
39 [0x27]:           rstore ebx   
40 [0x28]:           movi #1, ebx   
42 [0x2a]:           loadval ecx   
43 [0x2b]:           sub ecx, ebx -> ebx   
44 [0x2c]:           smovr_2 ebx, fp+2   
45 [0x2d]: line: 188 ipushl #2   
46 [0x2e]:           movi #0, ebx   
48 [0x30]:           loadval ecx   
49 [0x31]:           gt ecx, ebx   
50 [0x32]:           movr ebx, cmt   
51 [0x33]:           movr cmt, ebx   
52 [0x34]:           jne 76   
53 [0x35]: line: 189 movl 0   
54 [0x36]:           movn #1   
56 [0x38]:           pushobj   
57 [0x39]:           movl 0   
58 [0x3a]:           movn #1   
60 [0x3c]:           pushobj   
61 [0x3d]:           ipushl #1   
62 [0x3e]:           ipushl #1   
63 [0x3f]:           movi #1, ebx   
65 [0x41]:           loadval ecx   
66 [0x42]:           add ecx, ebx -> ebx   
67 [0x43]:           rstore ebx   
68 [0x44]:           movl 0   
69 [0x45]:           movn #0   
71 [0x47]:           movi #0, adx   
73 [0x49]:           iaload ebx, adx   
74 [0x4a]:           rstore ebx   
75 [0x4b]:           call @2151 // <std.io#__srt_global.memcopy>   
76 [0x4c]:           nop   
77 [0x4d]: line: 191 pushl 0   
78 [0x4e]:           call @3890 // <std#synced_list<std.io#thread>.pop_back>   
79 [0x4f]:           movl 0   
80 [0x50]:           _ulck   
81 [0x51]:           ret   


function: std#synced_list<std.io#thread>.indexof[3897] params(2) in file: lib\support\/0.2.9//synced_list.sharp:195:8: note:  
		    def indexof(comparer: t, find_func: (t, t)(var)) : var {
		       ^

0 [0x0]: line: 196 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 197 istorel 0, fp+3   
4 [0x4]:           ipushl #3   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           loadval ecx   
12 [0xc]:           lt ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           movr cmt, ebx   
15 [0xf]:           jne 44   
16 [0x10]: line: 198 ipushl #2   
17 [0x11]:           movl 0   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           loadl ebx, fp+3   
22 [0x16]:           popobj2    
23 [0x17]:           movr adx, ebx   
24 [0x18]:           chklen adx   
25 [0x19]:           movnd adx   
26 [0x1a]:           pushobj   
27 [0x1b]:           pushl 1   
28 [0x1c]:           smov ebx, sp+[-2]   
29 [0x1d]:           calld ebx   
30 [0x1e]:           swap    
31 [0x1f]:           pop   
32 [0x20]:           loadval ebx   
33 [0x21]:           movr cmt, ebx   
34 [0x22]:           jne 40   
35 [0x23]: line: 199 loadl ebx, fp+3   
36 [0x24]:           return_val ebx   
37 [0x25]:           movl 0   
38 [0x26]:           _ulck   
39 [0x27]:           ret   
40 [0x28]:           nop   
41 [0x29]:           iaddl 1, fp@3   
43 [0x2b]:           jmp @4   
44 [0x2c]: line: 203 istorel -1, fp+0   
46 [0x2e]:           movl 0   
47 [0x2f]:           _ulck   
48 [0x30]:           ret   
49 [0x31]:           movl 0   
50 [0x32]:           _ulck   


function: std#synced_list<std.io#thread>.linear_sort[3898] params(1) in file: lib\support\/0.2.9//synced_list.sharp:207:8: note:  
		    def linear_sort(swap: (t, t)(var)) {
		       ^

0 [0x0]: line: 208 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 209 istorel 0, fp+2   
4 [0x4]:           ipushl #2   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           loadval ecx   
12 [0xc]:           lt ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           movr cmt, ebx   
15 [0xf]:           jne 136   
16 [0x10]: line: 211 istorel 0, fp+3   
18 [0x12]:           ipushl #3   
19 [0x13]:           movl 0   
20 [0x14]:           movn #0   
22 [0x16]:           movi #0, adx   
24 [0x18]:           iaload ebx, adx   
25 [0x19]:           loadval ecx   
26 [0x1a]:           lt ecx, ebx   
27 [0x1b]:           movr ebx, cmt   
28 [0x1c]:           movr cmt, ebx   
29 [0x1d]:           jne 133   
30 [0x1e]: line: 212 ipushl #3   
31 [0x1f]:           movi #1, ebx   
33 [0x21]:           loadval ecx   
34 [0x22]:           add ecx, ebx -> ebx   
35 [0x23]:           rstore ebx   
36 [0x24]:           movl 0   
37 [0x25]:           movn #0   
39 [0x27]:           movi #0, adx   
41 [0x29]:           iaload ebx, adx   
42 [0x2a]:           loadval ecx   
43 [0x2b]:           lt ecx, ebx   
44 [0x2c]:           movr ebx, cmt   
45 [0x2d]:           movr cmt, ebx   
46 [0x2e]:           jne 129   
47 [0x2f]: line: 214 ipushl #1   
48 [0x30]:           movl 0   
49 [0x31]:           movn #1   
51 [0x33]:           pushobj   
52 [0x34]:           loadl ebx, fp+3   
53 [0x35]:           popobj2    
54 [0x36]:           movr adx, ebx   
55 [0x37]:           chklen adx   
56 [0x38]:           movnd adx   
57 [0x39]:           pushobj   
58 [0x3a]:           movl 0   
59 [0x3b]:           movn #1   
61 [0x3d]:           pushobj   
62 [0x3e]:           ipushl #3   
63 [0x3f]:           movi #1, ebx   
65 [0x41]:           loadval ecx   
66 [0x42]:           add ecx, ebx -> ebx   
67 [0x43]:           popobj2    
68 [0x44]:           movr adx, ebx   
69 [0x45]:           chklen adx   
70 [0x46]:           movnd adx   
71 [0x47]:           pushobj   
72 [0x48]:           smov ebx, sp+[-2]   
73 [0x49]:           calld ebx   
74 [0x4a]:           swap    
75 [0x4b]:           pop   
76 [0x4c]:           loadval ebx   
77 [0x4d]:           movr cmt, ebx   
78 [0x4e]:           jne 128   
79 [0x4f]: line: 215 movl 0   
80 [0x50]:           movn #1   
82 [0x52]:           pushobj   
83 [0x53]:           loadl ebx, fp+3   
84 [0x54]:           popobj2    
85 [0x55]:           movr adx, ebx   
86 [0x56]:           chklen adx   
87 [0x57]:           movnd adx   
88 [0x58]:           smovr_3 fp+4   
89 [0x59]: line: 216 movl 0   
90 [0x5a]:           movn #1   
92 [0x5c]:           pushobj   
93 [0x5d]:           ipushl #3   
94 [0x5e]:           movi #1, ebx   
96 [0x60]:           loadval ecx   
97 [0x61]:           add ecx, ebx -> ebx   
98 [0x62]:           popobj2    
99 [0x63]:           movr adx, ebx   
100 [0x64]:           chklen adx   
101 [0x65]:           movnd adx   
102 [0x66]:           pushobj   
103 [0x67]:           movl 0   
104 [0x68]:           movn #1   
106 [0x6a]:           pushobj   
107 [0x6b]:           loadl ebx, fp+3   
108 [0x6c]:           popobj2    
109 [0x6d]:           movr adx, ebx   
110 [0x6e]:           chklen adx   
111 [0x6f]:           movnd adx   
112 [0x70]:           popobj   
113 [0x71]: line: 217 pushl 4   
114 [0x72]:           movl 0   
115 [0x73]:           movn #1   
117 [0x75]:           pushobj   
118 [0x76]:           ipushl #3   
119 [0x77]:           movi #1, ebx   
121 [0x79]:           loadval ecx   
122 [0x7a]:           add ecx, ebx -> ebx   
123 [0x7b]:           popobj2    
124 [0x7c]:           movr adx, ebx   
125 [0x7d]:           chklen adx   
126 [0x7e]:           movnd adx   
127 [0x7f]:           popobj   
128 [0x80]:           nop   
129 [0x81]:           nop   
130 [0x82]:           iaddl 1, fp@3   
132 [0x84]:           jmp @18   
133 [0x85]:           iaddl 1, fp@2   
135 [0x87]:           jmp @4   
136 [0x88]:           movl 0   
137 [0x89]:           _ulck   
138 [0x8a]:           ret   


function: std#synced_list<std.io#thread>.find[3899] params(2) in file: lib\support\/0.2.9//synced_list.sharp:225:8: note:  
		    def find(comparer : t, find_func: (t, t)(var)) : t {
		       ^

0 [0x0]: line: 226 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 227 istorel 0, fp+3   
4 [0x4]:           ipushl #3   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           loadval ecx   
12 [0xc]:           lt ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           movr cmt, ebx   
15 [0xf]:           jne 54   
16 [0x10]: line: 228 ipushl #2   
17 [0x11]:           movl 0   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           loadl ebx, fp+3   
22 [0x16]:           popobj2    
23 [0x17]:           movr adx, ebx   
24 [0x18]:           chklen adx   
25 [0x19]:           movnd adx   
26 [0x1a]:           pushobj   
27 [0x1b]:           pushl 1   
28 [0x1c]:           smov ebx, sp+[-2]   
29 [0x1d]:           calld ebx   
30 [0x1e]:           swap    
31 [0x1f]:           pop   
32 [0x20]:           loadval ebx   
33 [0x21]:           movr cmt, ebx   
34 [0x22]:           jne 50   
35 [0x23]: line: 229 movl 0   
36 [0x24]:           movn #1   
38 [0x26]:           pushobj   
39 [0x27]:           loadl ebx, fp+3   
40 [0x28]:           popobj2    
41 [0x29]:           movr adx, ebx   
42 [0x2a]:           chklen adx   
43 [0x2b]:           movnd adx   
44 [0x2c]:           pushobj   
45 [0x2d]:           movl 0   
46 [0x2e]:           _ulck   
47 [0x2f]:           popobj2    
48 [0x30]:           returnobj   
49 [0x31]:           ret   
50 [0x32]:           nop   
51 [0x33]:           iaddl 1, fp@3   
53 [0x35]:           jmp @4   
54 [0x36]: line: 233 movl 4   
55 [0x37]:           del   
56 [0x38]: line: 234 pushl 4   
57 [0x39]:           movl 0   
58 [0x3a]:           _ulck   
59 [0x3b]:           popobj2    
60 [0x3c]:           returnobj   
61 [0x3d]:           ret   
62 [0x3e]:           movl 0   
63 [0x3f]:           _ulck   


function: std#synced_list<std.io#thread>.replace[3900] params(2) in file: lib\support\/0.2.9//synced_list.sharp:238:8: note:  
		    def replace(val: t, compare_fun: (t, t)(var)) : var {
		       ^

0 [0x0]: line: 239 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 240 istorel 0, fp+3   
4 [0x4]:           ipushl #3   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           loadval ecx   
12 [0xc]:           lt ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           movr cmt, ebx   
15 [0xf]:           jne 55   
16 [0x10]: line: 241 ipushl #2   
17 [0x11]:           pushl 1   
18 [0x12]:           movl 0   
19 [0x13]:           movn #1   
21 [0x15]:           pushobj   
22 [0x16]:           loadl ebx, fp+3   
23 [0x17]:           popobj2    
24 [0x18]:           movr adx, ebx   
25 [0x19]:           chklen adx   
26 [0x1a]:           movnd adx   
27 [0x1b]:           pushobj   
28 [0x1c]:           smov ebx, sp+[-2]   
29 [0x1d]:           calld ebx   
30 [0x1e]:           swap    
31 [0x1f]:           pop   
32 [0x20]:           loadval ebx   
33 [0x21]:           movr cmt, ebx   
34 [0x22]:           jne 51   
35 [0x23]: line: 242 pushl 1   
36 [0x24]:           movl 0   
37 [0x25]:           movn #1   
39 [0x27]:           pushobj   
40 [0x28]:           loadl ebx, fp+3   
41 [0x29]:           popobj2    
42 [0x2a]:           movr adx, ebx   
43 [0x2b]:           chklen adx   
44 [0x2c]:           movnd adx   
45 [0x2d]:           popobj   
46 [0x2e]: line: 243 istorel 1, fp+0   
48 [0x30]:           movl 0   
49 [0x31]:           _ulck   
50 [0x32]:           ret   
51 [0x33]:           nop   
52 [0x34]:           iaddl 1, fp@3   
54 [0x36]:           jmp @4   
55 [0x37]: line: 247 istorel 0, fp+0   
57 [0x39]:           movl 0   
58 [0x3a]:           _ulck   
59 [0x3b]:           ret   
60 [0x3c]:           movl 0   
61 [0x3d]:           _ulck   


function: std#synced_list<std.io#thread>.to_string[3901] params(0) in file: lib\support\/0.2.9//synced_list.sharp:251:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 252 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 253 new_class @76 // std#string_builder   
4 [0x4]:           dup    
5 [0x5]:           call @3649 // <std#string_builder.string_builder>   
6 [0x6]:           popobj2    
7 [0x7]:           smovr_3 fp+1   
8 [0x8]: line: 255 pushl 1   
9 [0x9]:           newstr @562 // [    
10 [0xa]:           call @3645 // <std#string_builder.operator+=>   
11 [0xb]:           pop   
12 [0xc]: line: 256 istorel 0, fp+2   
14 [0xe]:           ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #0   
18 [0x12]:           movi #0, adx   
20 [0x14]:           iaload ebx, adx   
21 [0x15]:           loadval ecx   
22 [0x16]:           lt ecx, ebx   
23 [0x17]:           movr ebx, cmt   
24 [0x18]:           movr cmt, ebx   
25 [0x19]:           jne 64   
26 [0x1a]: line: 257 pushl 1   
27 [0x1b]:           movl 0   
28 [0x1c]:           movn #1   
30 [0x1e]:           pushobj   
31 [0x1f]:           loadl ebx, fp+2   
32 [0x20]:           popobj2    
33 [0x21]:           movr adx, ebx   
34 [0x22]:           chklen adx   
35 [0x23]:           movnd adx   
36 [0x24]:           pushobj   
37 [0x25]:           call @3641 // <std#string_builder.operator+=>   
38 [0x26]:           pop   
39 [0x27]: line: 259 ipushl #2   
40 [0x28]:           movi #1, ebx   
42 [0x2a]:           loadval ecx   
43 [0x2b]:           add ecx, ebx -> ebx   
44 [0x2c]:           rstore ebx   
45 [0x2d]:           movl 0   
46 [0x2e]:           movn #0   
48 [0x30]:           movi #0, adx   
50 [0x32]:           iaload ebx, adx   
51 [0x33]:           loadval ecx   
52 [0x34]:           lt ecx, ebx   
53 [0x35]:           movr ebx, cmt   
54 [0x36]:           movr cmt, ebx   
55 [0x37]:           jne 60   
56 [0x38]: line: 260 pushl 1   
57 [0x39]:           newstr @563 // ,    
58 [0x3a]:           call @3645 // <std#string_builder.operator+=>   
59 [0x3b]:           pop   
60 [0x3c]:           nop   
61 [0x3d]:           iaddl 1, fp@2   
63 [0x3f]:           jmp @14   
64 [0x40]: line: 264 pushl 1   
65 [0x41]:           newstr @564 //  ]   
66 [0x42]:           call @3645 // <std#string_builder.operator+=>   
67 [0x43]:           pop   
68 [0x44]: line: 265 pushl 1   
69 [0x45]:           call @3622 // <std#string_builder.to_string>   
70 [0x46]:           popobj2    
71 [0x47]:           pushobj   
72 [0x48]:           movl 0   
73 [0x49]:           _ulck   
74 [0x4a]:           popobj2    
75 [0x4b]:           returnobj   
76 [0x4c]:           ret   
77 [0x4d]:           movl 0   
78 [0x4e]:           _ulck   


function: std#synced_list<std.io#thread>.out_of_bounds_msg[3902] params(1) in file: lib\support\/0.2.9//synced_list.sharp:269:16: note:  
		    private def out_of_bounds_msg(index: var) : string {
		               ^

0 [0x0]: line: 270 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           newstr @565 // Index:    
4 [0x4]:           call @3546 // <std#string.string>   
5 [0x5]:           ipushl #1   
6 [0x6]:           call @3578 // <std#string.operator+>   
7 [0x7]:           newstr @566 // , size:    
8 [0x8]:           call @3558 // <std#string.operator+>   
9 [0x9]:           movl 0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           iaload ebx, adx   
15 [0xf]:           rstore ebx   
16 [0x10]:           call @3578 // <std#string.operator+>   
17 [0x11]:           popobj2    
18 [0x12]:           returnobj   
19 [0x13]:           ret   


function: std#throwable.get_stack_trace[3903] params(0) in file: lib\support\/0.2.9//exceptions.sharp:13:25: note:  
		    stack_trace : string;
		                        ^

0 [0x0]: line: 15 movl 0   
1 [0x1]:          movn #1   
3 [0x3]:          pushobj   
4 [0x4]:          pushnull    
5 [0x5]:          itest ebx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 17   
8 [0x8]: line: 16 movl 0   
9 [0x9]:          movn #2   
11 [0xb]:          pushobj   
12 [0xc]:          call @2365 // <platform.kernel#vm.get_stack_trace>   
13 [0xd]:          movl 0   
14 [0xe]:          movn #1   
16 [0x10]:          popobj   
17 [0x11]:          nop   
18 [0x12]: line: 20 movl 0   
19 [0x13]:          movn #1   
21 [0x15]:          returnobj   
22 [0x16]:          ret   


std#loopable<object>.get_elements[3904] params(0) in file: lib\support\/0.2.9//loopable.sharp:4:8: note:  
		    def get_elements() : t[];
		       ^



constructor: std#loopable<object>.loopable[3905] params(0) in file: lib\support\/0.2.9//loopable.sharp:3:10: note:  
		interface loopable<t> {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#list<object>.list[3906] params(0) in file: lib\support\/0.2.9//list.sharp:13:9: note:  
		    list() {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 14 movi #10, ebx   
3 [0x3]:          newobj_arry ebx   
4 [0x4]:          movl 0   
5 [0x5]:          movn #1   
7 [0x7]:          popobj   
8 [0x8]:          ret   


constructor: std#list<object>.list[3907] params(1) in file: lib\support\/0.2.9//list.sharp:17:9: note:  
		    list(starting_capacity: var) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 18 loadl ebx, fp+1   
2 [0x2]:          newobj_arry ebx   
3 [0x3]:          movl 0   
4 [0x4]:          movn #1   
6 [0x6]:          popobj   
7 [0x7]:          ret   


constructor: std#list<object>.list[3908] params(1) in file: lib\support\/0.2.9//list.sharp:21:9: note:  
		    list(initial_data: t[]) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 22 pushl 0   
2 [0x2]:          pushl 1   
3 [0x3]:          call @3919 // <std#list<object>.add_all>   
4 [0x4]:          ret   


function: std#list<object>.empty[3909] params(0) in file: lib\support\/0.2.9//list.sharp:25:8: note:  
		    def empty() := n_elements == 0;
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          return_val cmt   
12 [0xc]:          ret   


function: std#list<object>.set_compact[3910] params(1) in file: lib\support\/0.2.9//list.sharp:27:8: note:  
		    def set_compact(compact_array: var) {
		       ^

0 [0x0]: line: 28 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #2   
4 [0x4]:          loadval ebx   
5 [0x5]:          movi #0, adx   
7 [0x7]:          rmov adx, ebx   
8 [0x8]:          ret   


function: std#list<object>.get_elements[3911] params(0) in file: lib\support\/0.2.9//list.sharp:31:8: note:  
		    def get_elements() : t[] {
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 19   
14 [0xe]:          pushnull    
15 [0xf]:          popobj2    
16 [0x10]:          returnobj   
17 [0x11]:          ret   
18 [0x12]:          jmp @36   
19 [0x13]: line: 33 movl 0   
20 [0x14]:          movn #1   
22 [0x16]:          pushobj   
23 [0x17]:          istore 0   
25 [0x19]:          movl 0   
26 [0x1a]:          movn #0   
28 [0x1c]:          movi #0, adx   
30 [0x1e]:          iaload ebx, adx   
31 [0x1f]:          rstore ebx   
32 [0x20]:          call @2161 // <std.io#__srt_global.copy>   
33 [0x21]:          popobj2    
34 [0x22]:          returnobj   
35 [0x23]:          ret   
36 [0x24]:          nop   


overload function: std#list<object>.operator[[3912] params(1) in file: lib\support\/0.2.9//list.sharp:36:8: note:  
		    def operator[](index: var): t {
		       ^

0 [0x0]: line: 37 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 26   
18 [0x12]: line: 38 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:          dup    
21 [0x15]:          pushl 0   
22 [0x16]:          ipushl #1   
23 [0x17]:          call @3935 // <std#list<object>.out_of_bounds_msg>   
24 [0x18]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:          throw    
26 [0x1a]:          nop   
27 [0x1b]: line: 39 movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          pushobj   
31 [0x1f]:          loadl ebx, fp+1   
32 [0x20]:          popobj2    
33 [0x21]:          movr adx, ebx   
34 [0x22]:          chklen adx   
35 [0x23]:          movnd adx   
36 [0x24]:          returnobj   
37 [0x25]:          ret   


function: std#list<object>.at[3913] params(1) in file: lib\support\/0.2.9//list.sharp:42:8: note:  
		    def at(index: var): t {
		       ^

0 [0x0]: line: 43 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 26   
18 [0x12]: line: 44 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:          dup    
21 [0x15]:          pushl 0   
22 [0x16]:          ipushl #1   
23 [0x17]:          call @3935 // <std#list<object>.out_of_bounds_msg>   
24 [0x18]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:          throw    
26 [0x1a]:          nop   
27 [0x1b]: line: 45 movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          pushobj   
31 [0x1f]:          loadl ebx, fp+1   
32 [0x20]:          popobj2    
33 [0x21]:          movr adx, ebx   
34 [0x22]:          chklen adx   
35 [0x23]:          movnd adx   
36 [0x24]:          returnobj   
37 [0x25]:          ret   


function: std#list<object>.last[3914] params(0) in file: lib\support\/0.2.9//list.sharp:48:8: note:  
		    def last(): t {
		       ^

0 [0x0]: line: 49 pushl 0   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          rstore ebx   
8 [0x8]:          movi #1, ebx   
10 [0xa]:          loadval ecx   
11 [0xb]:          sub ecx, ebx -> ebx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @3913 // <std#list<object>.at>   
14 [0xe]:          popobj2    
15 [0xf]:          returnobj   
16 [0x10]:          ret   


function: std#list<object>.put[3915] params(2) in file: lib\support\/0.2.9//list.sharp:52:8: note:  
		    def put(index: var, element: t) : t {
		       ^

0 [0x0]: line: 53 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 26   
18 [0x12]: line: 54 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:          dup    
21 [0x15]:          pushl 0   
22 [0x16]:          ipushl #1   
23 [0x17]:          call @3935 // <std#list<object>.out_of_bounds_msg>   
24 [0x18]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:          throw    
26 [0x1a]:          nop   
27 [0x1b]: line: 56 movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          pushobj   
31 [0x1f]:          loadl ebx, fp+1   
32 [0x20]:          popobj2    
33 [0x21]:          movr adx, ebx   
34 [0x22]:          chklen adx   
35 [0x23]:          movnd adx   
36 [0x24]:          smovr_3 fp+3   
37 [0x25]: line: 57 pushl 2   
38 [0x26]:          movl 0   
39 [0x27]:          movn #1   
41 [0x29]:          pushobj   
42 [0x2a]:          loadl ebx, fp+1   
43 [0x2b]:          popobj2    
44 [0x2c]:          movr adx, ebx   
45 [0x2d]:          chklen adx   
46 [0x2e]:          movnd adx   
47 [0x2f]:          popobj   
48 [0x30]: line: 58 movl 3   
49 [0x31]:          returnobj   
50 [0x32]:          ret   


function: std#list<object>.expand[3916] params(0) in file: lib\support\/0.2.9//list.sharp:61:16: note:  
		    private def expand() {
		               ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #2   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 24   
8 [0x8]: line: 63 movl 0   
9 [0x9]:          movn #1   
11 [0xb]:          pushobj   
12 [0xc]:          movl 0   
13 [0xd]:          movn #1   
15 [0xf]:          sizeof ebx   
16 [0x10]:          rstore ebx   
17 [0x11]:          movi #128, ebx   
19 [0x13]:          loadval ecx   
20 [0x14]:          add ecx, ebx -> ebx   
21 [0x15]:          rstore ebx   
22 [0x16]:          call @2141 // <std.io#__srt_global.realloc>   
23 [0x17]:          jmp @51   
24 [0x18]: line: 65 movl 0   
25 [0x19]:          movn #1   
27 [0x1b]:          pushobj   
28 [0x1c]:          movl 0   
29 [0x1d]:          movn #1   
31 [0x1f]:          sizeof ebx   
32 [0x20]:          rstore ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #1   
36 [0x24]:          sizeof ebx   
37 [0x25]:          rstore ebx   
38 [0x26]:          movi #4, ebx   
40 [0x28]:          loadval ecx   
41 [0x29]:          shr ecx, ebx -> ebx   
42 [0x2a]:          loadval ecx   
43 [0x2b]:          add ecx, ebx -> ebx   
44 [0x2c]:          rstore ebx   
45 [0x2d]:          movi #128, ebx   
47 [0x2f]:          loadval ecx   
48 [0x30]:          add ecx, ebx -> ebx   
49 [0x31]:          rstore ebx   
50 [0x32]:          call @2141 // <std.io#__srt_global.realloc>   
51 [0x33]:          nop   
52 [0x34]:          ret   


function: std#list<object>.clear[3917] params(0) in file: lib\support\/0.2.9//list.sharp:68:8: note:  
		    def clear() {
		       ^

0 [0x0]: line: 69 movi #10, ebx   
2 [0x2]:          newobj_arry ebx   
3 [0x3]:          movl 0   
4 [0x4]:          movn #1   
6 [0x6]:          popobj   
7 [0x7]: line: 70 movi #0, ebx   
9 [0x9]:          movl 0   
10 [0xa]:          movn #0   
12 [0xc]:          movi #0, adx   
14 [0xe]:          rmov adx, ebx   
15 [0xf]:          ret   


function: std#list<object>.add_all[3918] params(1) in file: lib\support\/0.2.9//list.sharp:73:8: note:  
		    def add_all(lst: list<t>) {
		       ^

0 [0x0]: line: 74 movl 1   
1 [0x1]:          movn #1   
3 [0x3]:          pushobj   
4 [0x4]:          istore 0   
6 [0x6]:          movl 1   
7 [0x7]:          movn #0   
9 [0x9]:          movi #0, adx   
11 [0xb]:          iaload ebx, adx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @2161 // <std.io#__srt_global.copy>   
14 [0xe]:          movl 0   
15 [0xf]:          movn #1   
17 [0x11]:          popobj   
18 [0x12]: line: 75 movl 1   
19 [0x13]:          movn #0   
21 [0x15]:          movi #0, adx   
23 [0x17]:          iaload ebx, adx   
24 [0x18]:          movl 0   
25 [0x19]:          movn #0   
27 [0x1b]:          movi #0, adx   
29 [0x1d]:          rmov adx, ebx   
30 [0x1e]:          ret   


function: std#list<object>.add_all[3919] params(1) in file: lib\support\/0.2.9//list.sharp:78:8: note:  
		    def add_all(lst: t[]) {
		       ^

0 [0x0]: line: 79 movl 1   
1 [0x1]:          checknull   
2 [0x2]:          not ebx, ebx   
3 [0x3]:          movr cmt, ebx   
4 [0x4]:          jne 25   
5 [0x5]: line: 80 pushl 1   
6 [0x6]:          istore 0   
8 [0x8]:          movl 1   
9 [0x9]:          sizeof ebx   
10 [0xa]:          rstore ebx   
11 [0xb]:          call @2161 // <std.io#__srt_global.copy>   
12 [0xc]:          movl 0   
13 [0xd]:          movn #1   
15 [0xf]:          popobj   
16 [0x10]: line: 81 movl 1   
17 [0x11]:          sizeof ebx   
18 [0x12]:          movl 0   
19 [0x13]:          movn #0   
21 [0x15]:          movi #0, adx   
23 [0x17]:          rmov adx, ebx   
24 [0x18]:          jmp @40   
25 [0x19]: line: 83 movi #0, ebx   
27 [0x1b]:          movl 0   
28 [0x1c]:          movn #0   
30 [0x1e]:          movi #0, adx   
32 [0x20]:          rmov adx, ebx   
33 [0x21]: line: 84 movi #10, ebx   
35 [0x23]:          newobj_arry ebx   
36 [0x24]:          movl 0   
37 [0x25]:          movn #1   
39 [0x27]:          popobj   
40 [0x28]:          nop   
41 [0x29]:          ret   


function: std#list<object>.add[3920] params(1) in file: lib\support\/0.2.9//list.sharp:88:8: note:  
		    def add(element: t) {
		       ^

0 [0x0]: line: 89 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 0   
8 [0x8]:          movn #1   
10 [0xa]:          sizeof ebx   
11 [0xb]:          loadval ecx   
12 [0xc]:          gte ecx, ebx   
13 [0xd]:          movr ebx, cmt   
14 [0xe]:          movr cmt, ebx   
15 [0xf]:          jne 18   
16 [0x10]: line: 90 pushl 0   
17 [0x11]:          call @3916 // <std#list<object>.expand>   
18 [0x12]:          nop   
19 [0x13]: line: 91 pushl 1   
20 [0x14]:          movl 0   
21 [0x15]:          movn #1   
23 [0x17]:          pushobj   
24 [0x18]:          movl 0   
25 [0x19]:          movn #0   
27 [0x1b]:          movi #0, adx   
29 [0x1d]:          iaload ebx, adx   
30 [0x1e]:          movr egx, ebx   
31 [0x1f]:          inc ebx   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          movr ebx, egx   
36 [0x24]:          popobj2    
37 [0x25]:          movr adx, ebx   
38 [0x26]:          chklen adx   
39 [0x27]:          movnd adx   
40 [0x28]:          popobj   
41 [0x29]:          ret   


function: std#list<object>.indexof[3921] params(1) in file: lib\support\/0.2.9//list.sharp:94:8: note:  
		    def indexof(element: t) : var {
		       ^

0 [0x0]: line: 95 istorel 0, fp+2   
2 [0x2]:          ipushl #2   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          movi #0, adx   
8 [0x8]:          iaload ebx, adx   
9 [0x9]:          loadval ecx   
10 [0xa]:          lt ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 35   
14 [0xe]: line: 96 pushl 1   
15 [0xf]:          movl 0   
16 [0x10]:          movn #1   
18 [0x12]:          pushobj   
19 [0x13]:          loadl ebx, fp+2   
20 [0x14]:          popobj2    
21 [0x15]:          movr adx, ebx   
22 [0x16]:          chklen adx   
23 [0x17]:          movnd adx   
24 [0x18]:          pushobj   
25 [0x19]:          itest ebx   
26 [0x1a]:          movr cmt, ebx   
27 [0x1b]:          jne 31   
28 [0x1c]: line: 97 loadl ebx, fp+2   
29 [0x1d]:          return_val ebx   
30 [0x1e]:          ret   
31 [0x1f]:          nop   
32 [0x20]:          iaddl 1, fp@2   
34 [0x22]:          jmp @2   
35 [0x23]: line: 101 istorel -1, fp+0   
37 [0x25]:           ret   


function: std#list<object>.pop_back[3922] params(0) in file: lib\support\/0.2.9//list.sharp:104:8: note:  
		    def pop_back() {
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #0, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 38   
14 [0xe]: line: 106 movl 1   
15 [0xf]:           del   
16 [0x10]: line: 107 pushl 1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           movl 0   
22 [0x16]:           movn #0   
24 [0x18]:           movi #0, adx   
26 [0x1a]:           iaload ebx, adx   
27 [0x1b]:           movr egx, ebx   
28 [0x1c]:           dec ebx   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           rmov adx, ebx   
32 [0x20]:           movr ebx, egx   
33 [0x21]:           popobj2    
34 [0x22]:           movr adx, ebx   
35 [0x23]:           chklen adx   
36 [0x24]:           movnd adx   
37 [0x25]:           popobj   
38 [0x26]:           nop   
39 [0x27]:           ret   


function: std#list<object>.pop_last[3923] params(0) in file: lib\support\/0.2.9//list.sharp:111:8: note:  
		    def pop_last() : t {
		       ^

0 [0x0]: line: 112 pushl 0   
1 [0x1]:           call @3914 // <std#list<object>.last>   
2 [0x2]:           popobj2    
3 [0x3]:           smovr_3 fp+1   
4 [0x4]: line: 113 pushl 0   
5 [0x5]:           call @3922 // <std#list<object>.pop_back>   
6 [0x6]: line: 114 movl 1   
7 [0x7]:           returnobj   
8 [0x8]:           ret   


function: std#list<object>.pop_first[3924] params(0) in file: lib\support\/0.2.9//list.sharp:117:8: note:  
		    def pop_first() : t {
		       ^

0 [0x0]: line: 118 movl 0   
1 [0x1]:           movn #1   
3 [0x3]:           pushobj   
4 [0x4]:           movi #0, ebx   
6 [0x6]:           popobj2    
7 [0x7]:           movr adx, ebx   
8 [0x8]:           chklen adx   
9 [0x9]:           movnd adx   
10 [0xa]:           smovr_3 fp+1   
11 [0xb]: line: 119 pushl 0   
12 [0xc]:           istore 0   
14 [0xe]:           call @3932 // <std#list<object>.remove_at>   
15 [0xf]: line: 120 movl 1   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#list<object>.size[3925] params(0) in file: lib\support\/0.2.9//list.sharp:123:8: note:  
		    def size() := n_elements;
		       ^

0 [0x0]: line: 123 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std#list<object>.insert[3926] params(2) in file: lib\support\/0.2.9//list.sharp:125:8: note:  
		    def insert(index: var, element: t) {
		       ^

0 [0x0]: line: 126 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gt ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 26   
18 [0x12]: line: 127 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:           dup    
21 [0x15]:           pushl 0   
22 [0x16]:           ipushl #1   
23 [0x17]:           call @3935 // <std#list<object>.out_of_bounds_msg>   
24 [0x18]:           call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:           throw    
26 [0x1a]:           nop   
27 [0x1b]: line: 129 movl 0   
28 [0x1c]:           movn #0   
30 [0x1e]:           movi #0, adx   
32 [0x20]:           iaload ebx, adx   
33 [0x21]:           rstore ebx   
34 [0x22]:           movi #0, ebx   
36 [0x24]:           loadval ecx   
37 [0x25]:           test ecx, ebx   
38 [0x26]:           movr ebx, cmt   
39 [0x27]:           movr cmt, ebx   
40 [0x28]:           jne 45   
41 [0x29]: line: 130 pushl 0   
42 [0x2a]:           pushl 2   
43 [0x2b]:           call @3920 // <std#list<object>.add>   
44 [0x2c]:           jmp @134   
45 [0x2d]: line: 132 movl 0   
46 [0x2e]:           movn #0   
48 [0x30]:           movi #0, adx   
50 [0x32]:           iaload ebx, adx   
51 [0x33]:           rstore ebx   
52 [0x34]:           movl 0   
53 [0x35]:           movn #1   
55 [0x37]:           sizeof ebx   
56 [0x38]:           loadval ecx   
57 [0x39]:           gte ecx, ebx   
58 [0x3a]:           movr ebx, cmt   
59 [0x3b]:           movr cmt, ebx   
60 [0x3c]:           jne 63   
61 [0x3d]: line: 133 pushl 0   
62 [0x3e]:           call @3916 // <std#list<object>.expand>   
63 [0x3f]:           nop   
64 [0x40]: line: 134 movl 0   
65 [0x41]:           movn #0   
67 [0x43]:           movi #0, adx   
69 [0x45]:           iaload ebx, adx   
70 [0x46]:           movr egx, ebx   
71 [0x47]:           inc ebx   
72 [0x48]:           movi #0, adx   
74 [0x4a]:           rmov adx, ebx   
75 [0x4b]: line: 135 movl 0   
76 [0x4c]:           movn #0   
78 [0x4e]:           movi #0, adx   
80 [0x50]:           iaload ebx, adx   
81 [0x51]:           rstore ebx   
82 [0x52]:           movi #1, ebx   
84 [0x54]:           loadval ecx   
85 [0x55]:           sub ecx, ebx -> ebx   
86 [0x56]:           smovr_2 ebx, fp+3   
87 [0x57]:           ipushl #3   
88 [0x58]:           loadl ebx, fp+1   
89 [0x59]:           loadval ecx   
90 [0x5a]:           gt ecx, ebx   
91 [0x5b]:           movr ebx, cmt   
92 [0x5c]:           movr cmt, ebx   
93 [0x5d]:           jne 123   
94 [0x5e]: line: 136 movl 0   
95 [0x5f]:           movn #1   
97 [0x61]:           pushobj   
98 [0x62]:           ipushl #3   
99 [0x63]:           movi #1, ebx   
101 [0x65]:           loadval ecx   
102 [0x66]:           sub ecx, ebx -> ebx   
103 [0x67]:           popobj2    
104 [0x68]:           movr adx, ebx   
105 [0x69]:           chklen adx   
106 [0x6a]:           movnd adx   
107 [0x6b]:           pushobj   
108 [0x6c]:           movl 0   
109 [0x6d]:           movn #1   
111 [0x6f]:           pushobj   
112 [0x70]:           loadl ebx, fp+3   
113 [0x71]:           popobj2    
114 [0x72]:           movr adx, ebx   
115 [0x73]:           chklen adx   
116 [0x74]:           movnd adx   
117 [0x75]:           popobj   
118 [0x76]:           loadl ebx, fp+3   
119 [0x77]:           movr egx, ebx   
120 [0x78]:           dec ebx   
121 [0x79]:           smovr_2 ebx, fp+3   
122 [0x7a]:           jmp @87   
123 [0x7b]: line: 137 pushl 2   
124 [0x7c]:           movl 0   
125 [0x7d]:           movn #1   
127 [0x7f]:           pushobj   
128 [0x80]:           loadl ebx, fp+1   
129 [0x81]:           popobj2    
130 [0x82]:           movr adx, ebx   
131 [0x83]:           chklen adx   
132 [0x84]:           movnd adx   
133 [0x85]:           popobj   
134 [0x86]:           nop   
135 [0x87]:           ret   


function: std#list<object>.find[3927] params(2) in file: lib\support\/0.2.9//list.sharp:141:8: note:  
		    def find(comparer : t, find_func: (t, t)(var)) : t {
		       ^

0 [0x0]: line: 142 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 48   
14 [0xe]: line: 143 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 44   
33 [0x21]: line: 144 movl 0   
34 [0x22]:           movn #1   
36 [0x24]:           pushobj   
37 [0x25]:           loadl ebx, fp+3   
38 [0x26]:           popobj2    
39 [0x27]:           movr adx, ebx   
40 [0x28]:           chklen adx   
41 [0x29]:           movnd adx   
42 [0x2a]:           returnobj   
43 [0x2b]:           ret   
44 [0x2c]:           nop   
45 [0x2d]:           iaddl 1, fp@3   
47 [0x2f]:           jmp @2   
48 [0x30]: line: 148 movl 4   
49 [0x31]:           del   
50 [0x32]: line: 149 movl 4   
51 [0x33]:           returnobj   
52 [0x34]:           ret   


function: std#list<object>.remove[3928] params(1) in file: lib\support\/0.2.9//list.sharp:152:8: note:  
		    def remove(val: t) {
		       ^

0 [0x0]: line: 153 istorel 0, fp+2   
2 [0x2]:           ipushl #2   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 36   
14 [0xe]: line: 154 pushl 1   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+2   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           itest ebx   
26 [0x1a]:           movr cmt, ebx   
27 [0x1b]:           jne 32   
28 [0x1c]: line: 155 pushl 0   
29 [0x1d]:           ipushl #2   
30 [0x1e]:           call @3932 // <std#list<object>.remove_at>   
31 [0x1f]: line: 156 ret   
32 [0x20]:           nop   
33 [0x21]:           iaddl 1, fp@2   
35 [0x23]:           jmp @2   
36 [0x24]:           ret   


function: std#list<object>.remove[3929] params(2) in file: lib\support\/0.2.9//list.sharp:161:8: note:  
		    def remove(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 162 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 41   
14 [0xe]: line: 163 ipushl #2   
15 [0xf]:           pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           movnd adx   
25 [0x19]:           pushobj   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 37   
33 [0x21]: line: 164 pushl 0   
34 [0x22]:           ipushl #3   
35 [0x23]:           call @3932 // <std#list<object>.remove_at>   
36 [0x24]: line: 165 ret   
37 [0x25]:           nop   
38 [0x26]:           iaddl 1, fp@3   
40 [0x28]:           jmp @2   
41 [0x29]:           ret   


function: std#list<object>.replace[3930] params(2) in file: lib\support\/0.2.9//list.sharp:170:8: note:  
		    def replace(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 171 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 49   
14 [0xe]: line: 172 ipushl #2   
15 [0xf]:           pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           movnd adx   
25 [0x19]:           pushobj   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 45   
33 [0x21]: line: 173 pushl 1   
34 [0x22]:           movl 0   
35 [0x23]:           movn #1   
37 [0x25]:           pushobj   
38 [0x26]:           loadl ebx, fp+3   
39 [0x27]:           popobj2    
40 [0x28]:           movr adx, ebx   
41 [0x29]:           chklen adx   
42 [0x2a]:           movnd adx   
43 [0x2b]:           popobj   
44 [0x2c]: line: 174 ret   
45 [0x2d]:           nop   
46 [0x2e]:           iaddl 1, fp@3   
48 [0x30]:           jmp @2   
49 [0x31]:           ret   


function: std#list<object>.linear_sort[3931] params(1) in file: lib\support\/0.2.9//list.sharp:179:8: note:  
		    def linear_sort(swap: (t, t)(var)) {
		       ^

0 [0x0]: line: 180 istorel 0, fp+2   
2 [0x2]:           ipushl #2   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 134   
14 [0xe]: line: 182 istorel 0, fp+3   
16 [0x10]:           ipushl #3   
17 [0x11]:           movl 0   
18 [0x12]:           movn #0   
20 [0x14]:           movi #0, adx   
22 [0x16]:           iaload ebx, adx   
23 [0x17]:           loadval ecx   
24 [0x18]:           lt ecx, ebx   
25 [0x19]:           movr ebx, cmt   
26 [0x1a]:           movr cmt, ebx   
27 [0x1b]:           jne 131   
28 [0x1c]: line: 183 ipushl #3   
29 [0x1d]:           movi #1, ebx   
31 [0x1f]:           loadval ecx   
32 [0x20]:           add ecx, ebx -> ebx   
33 [0x21]:           rstore ebx   
34 [0x22]:           movl 0   
35 [0x23]:           movn #0   
37 [0x25]:           movi #0, adx   
39 [0x27]:           iaload ebx, adx   
40 [0x28]:           loadval ecx   
41 [0x29]:           lt ecx, ebx   
42 [0x2a]:           movr ebx, cmt   
43 [0x2b]:           movr cmt, ebx   
44 [0x2c]:           jne 127   
45 [0x2d]: line: 185 ipushl #1   
46 [0x2e]:           movl 0   
47 [0x2f]:           movn #1   
49 [0x31]:           pushobj   
50 [0x32]:           loadl ebx, fp+3   
51 [0x33]:           popobj2    
52 [0x34]:           movr adx, ebx   
53 [0x35]:           chklen adx   
54 [0x36]:           movnd adx   
55 [0x37]:           pushobj   
56 [0x38]:           movl 0   
57 [0x39]:           movn #1   
59 [0x3b]:           pushobj   
60 [0x3c]:           ipushl #3   
61 [0x3d]:           movi #1, ebx   
63 [0x3f]:           loadval ecx   
64 [0x40]:           add ecx, ebx -> ebx   
65 [0x41]:           popobj2    
66 [0x42]:           movr adx, ebx   
67 [0x43]:           chklen adx   
68 [0x44]:           movnd adx   
69 [0x45]:           pushobj   
70 [0x46]:           smov ebx, sp+[-2]   
71 [0x47]:           calld ebx   
72 [0x48]:           swap    
73 [0x49]:           pop   
74 [0x4a]:           loadval ebx   
75 [0x4b]:           movr cmt, ebx   
76 [0x4c]:           jne 126   
77 [0x4d]: line: 186 movl 0   
78 [0x4e]:           movn #1   
80 [0x50]:           pushobj   
81 [0x51]:           loadl ebx, fp+3   
82 [0x52]:           popobj2    
83 [0x53]:           movr adx, ebx   
84 [0x54]:           chklen adx   
85 [0x55]:           movnd adx   
86 [0x56]:           smovr_3 fp+4   
87 [0x57]: line: 187 movl 0   
88 [0x58]:           movn #1   
90 [0x5a]:           pushobj   
91 [0x5b]:           ipushl #3   
92 [0x5c]:           movi #1, ebx   
94 [0x5e]:           loadval ecx   
95 [0x5f]:           add ecx, ebx -> ebx   
96 [0x60]:           popobj2    
97 [0x61]:           movr adx, ebx   
98 [0x62]:           chklen adx   
99 [0x63]:           movnd adx   
100 [0x64]:           pushobj   
101 [0x65]:           movl 0   
102 [0x66]:           movn #1   
104 [0x68]:           pushobj   
105 [0x69]:           loadl ebx, fp+3   
106 [0x6a]:           popobj2    
107 [0x6b]:           movr adx, ebx   
108 [0x6c]:           chklen adx   
109 [0x6d]:           movnd adx   
110 [0x6e]:           popobj   
111 [0x6f]: line: 188 pushl 4   
112 [0x70]:           movl 0   
113 [0x71]:           movn #1   
115 [0x73]:           pushobj   
116 [0x74]:           ipushl #3   
117 [0x75]:           movi #1, ebx   
119 [0x77]:           loadval ecx   
120 [0x78]:           add ecx, ebx -> ebx   
121 [0x79]:           popobj2    
122 [0x7a]:           movr adx, ebx   
123 [0x7b]:           chklen adx   
124 [0x7c]:           movnd adx   
125 [0x7d]:           popobj   
126 [0x7e]:           nop   
127 [0x7f]:           nop   
128 [0x80]:           iaddl 1, fp@3   
130 [0x82]:           jmp @16   
131 [0x83]:           iaddl 1, fp@2   
133 [0x85]:           jmp @2   
134 [0x86]:           ret   


function: std#list<object>.remove_at[3932] params(1) in file: lib\support\/0.2.9//list.sharp:195:8: note:  
		    def remove_at(index: var) {
		       ^

0 [0x0]: line: 196 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gte ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 26   
18 [0x12]: line: 197 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:           dup    
21 [0x15]:           pushl 0   
22 [0x16]:           ipushl #1   
23 [0x17]:           call @3935 // <std#list<object>.out_of_bounds_msg>   
24 [0x18]:           call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:           throw    
26 [0x1a]:           nop   
27 [0x1b]: line: 199 movl 0   
28 [0x1c]:           movn #0   
30 [0x1e]:           movi #0, adx   
32 [0x20]:           iaload ebx, adx   
33 [0x21]:           rstore ebx   
34 [0x22]:           loadl ebx, fp+1   
35 [0x23]:           loadval ecx   
36 [0x24]:           sub ecx, ebx -> ebx   
37 [0x25]:           rstore ebx   
38 [0x26]:           movi #1, ebx   
40 [0x28]:           loadval ecx   
41 [0x29]:           sub ecx, ebx -> ebx   
42 [0x2a]:           smovr_2 ebx, fp+2   
43 [0x2b]: line: 200 ipushl #2   
44 [0x2c]:           movi #0, ebx   
46 [0x2e]:           loadval ecx   
47 [0x2f]:           gt ecx, ebx   
48 [0x30]:           movr ebx, cmt   
49 [0x31]:           movr cmt, ebx   
50 [0x32]:           jne 74   
51 [0x33]: line: 201 movl 0   
52 [0x34]:           movn #1   
54 [0x36]:           pushobj   
55 [0x37]:           movl 0   
56 [0x38]:           movn #1   
58 [0x3a]:           pushobj   
59 [0x3b]:           ipushl #1   
60 [0x3c]:           ipushl #1   
61 [0x3d]:           movi #1, ebx   
63 [0x3f]:           loadval ecx   
64 [0x40]:           add ecx, ebx -> ebx   
65 [0x41]:           rstore ebx   
66 [0x42]:           movl 0   
67 [0x43]:           movn #0   
69 [0x45]:           movi #0, adx   
71 [0x47]:           iaload ebx, adx   
72 [0x48]:           rstore ebx   
73 [0x49]:           call @2151 // <std.io#__srt_global.memcopy>   
74 [0x4a]:           nop   
75 [0x4b]: line: 203 pushl 0   
76 [0x4c]:           call @3922 // <std#list<object>.pop_back>   
77 [0x4d]:           ret   


function: std#list<object>.indexof[3933] params(2) in file: lib\support\/0.2.9//list.sharp:206:8: note:  
		    def indexof(comparer: t, find_func: (t, t)(var)) : var {
		       ^

0 [0x0]: line: 207 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 40   
14 [0xe]: line: 208 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 36   
33 [0x21]: line: 209 loadl ebx, fp+3   
34 [0x22]:           return_val ebx   
35 [0x23]:           ret   
36 [0x24]:           nop   
37 [0x25]:           iaddl 1, fp@3   
39 [0x27]:           jmp @2   
40 [0x28]: line: 213 istorel -1, fp+0   
42 [0x2a]:           ret   


function: std#list<object>.to_string[3934] params(0) in file: lib\support\/0.2.9//list.sharp:216:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 217 new_class @76 // std#string_builder   
2 [0x2]:           dup    
3 [0x3]:           call @3649 // <std#string_builder.string_builder>   
4 [0x4]:           popobj2    
5 [0x5]:           smovr_3 fp+1   
6 [0x6]: line: 219 pushl 1   
7 [0x7]:           newstr @562 // [    
8 [0x8]:           call @3645 // <std#string_builder.operator+=>   
9 [0x9]:           pop   
10 [0xa]: line: 220 istorel 0, fp+2   
12 [0xc]:           ipushl #2   
13 [0xd]:           movl 0   
14 [0xe]:           movn #0   
16 [0x10]:           movi #0, adx   
18 [0x12]:           iaload ebx, adx   
19 [0x13]:           loadval ecx   
20 [0x14]:           lt ecx, ebx   
21 [0x15]:           movr ebx, cmt   
22 [0x16]:           movr cmt, ebx   
23 [0x17]:           jne 62   
24 [0x18]: line: 221 pushl 1   
25 [0x19]:           movl 0   
26 [0x1a]:           movn #1   
28 [0x1c]:           pushobj   
29 [0x1d]:           loadl ebx, fp+2   
30 [0x1e]:           popobj2    
31 [0x1f]:           movr adx, ebx   
32 [0x20]:           chklen adx   
33 [0x21]:           movnd adx   
34 [0x22]:           pushobj   
35 [0x23]:           call @3641 // <std#string_builder.operator+=>   
36 [0x24]:           pop   
37 [0x25]: line: 223 ipushl #2   
38 [0x26]:           movi #1, ebx   
40 [0x28]:           loadval ecx   
41 [0x29]:           add ecx, ebx -> ebx   
42 [0x2a]:           rstore ebx   
43 [0x2b]:           movl 0   
44 [0x2c]:           movn #0   
46 [0x2e]:           movi #0, adx   
48 [0x30]:           iaload ebx, adx   
49 [0x31]:           loadval ecx   
50 [0x32]:           lt ecx, ebx   
51 [0x33]:           movr ebx, cmt   
52 [0x34]:           movr cmt, ebx   
53 [0x35]:           jne 58   
54 [0x36]: line: 224 pushl 1   
55 [0x37]:           newstr @563 // ,    
56 [0x38]:           call @3645 // <std#string_builder.operator+=>   
57 [0x39]:           pop   
58 [0x3a]:           nop   
59 [0x3b]:           iaddl 1, fp@2   
61 [0x3d]:           jmp @12   
62 [0x3e]: line: 228 pushl 1   
63 [0x3f]:           newstr @564 //  ]   
64 [0x40]:           call @3645 // <std#string_builder.operator+=>   
65 [0x41]:           pop   
66 [0x42]: line: 229 pushl 1   
67 [0x43]:           call @3622 // <std#string_builder.to_string>   
68 [0x44]:           popobj2    
69 [0x45]:           returnobj   
70 [0x46]:           ret   


function: std#list<object>.out_of_bounds_msg[3935] params(1) in file: lib\support\/0.2.9//list.sharp:232:16: note:  
		    private def out_of_bounds_msg(index: var) : string {
		               ^

0 [0x0]: line: 233 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           newstr @565 // Index:    
4 [0x4]:           call @3546 // <std#string.string>   
5 [0x5]:           ipushl #1   
6 [0x6]:           call @3578 // <std#string.operator+>   
7 [0x7]:           newstr @566 // , size:    
8 [0x8]:           call @3558 // <std#string.operator+>   
9 [0x9]:           movl 0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           iaload ebx, adx   
15 [0xf]:           rstore ebx   
16 [0x10]:           call @3578 // <std#string.operator+>   
17 [0x11]:           popobj2    
18 [0x12]:           returnobj   
19 [0x13]:           ret   


std#loopable<std.io.task#job>.get_elements[3936] params(0) in file: lib\support\/0.2.9//loopable.sharp:4:8: note:  
		    def get_elements() : t[];
		       ^



constructor: std#loopable<std.io.task#job>.loopable[3937] params(0) in file: lib\support\/0.2.9//loopable.sharp:3:10: note:  
		interface loopable<t> {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#synced_list<std.io.task#job>.synced_list[3938] params(0) in file: lib\support\/0.2.9//synced_list.sharp:13:16: note:  
		    synced_list() {
		               ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 14 movi #10, ebx   
3 [0x3]:          new_classarray ebx  // std.io.task#job[]   
5 [0x5]:          movl 0   
6 [0x6]:          movn #1   
8 [0x8]:          popobj   
9 [0x9]:          ret   


constructor: std#synced_list<std.io.task#job>.synced_list[3939] params(1) in file: lib\support\/0.2.9//synced_list.sharp:17:16: note:  
		    synced_list(starting_capacity: var) {
		               ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 18 loadl ebx, fp+1   
2 [0x2]:          new_classarray ebx  // std.io.task#job[]   
4 [0x4]:          movl 0   
5 [0x5]:          movn #1   
7 [0x7]:          popobj   
8 [0x8]:          ret   


function: std#synced_list<std.io.task#job>.set_compact[3940] params(1) in file: lib\support\/0.2.9//synced_list.sharp:21:8: note:  
		    def set_compact(compact_array: var) {
		       ^

0 [0x0]: line: 22 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 23 ipushl #1   
3 [0x3]:          movl 0   
4 [0x4]:          movn #2   
6 [0x6]:          loadval ebx   
7 [0x7]:          movi #0, adx   
9 [0x9]:          rmov adx, ebx   
10 [0xa]:          movl 0   
11 [0xb]:          _ulck   
12 [0xc]:          ret   


function: std#synced_list<std.io.task#job>.get_elements[3941] params(0) in file: lib\support\/0.2.9//synced_list.sharp:27:8: note:  
		    def get_elements() : t[] {
		       ^

0 [0x0]: line: 28 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 29 movl 0   
3 [0x3]:          movn #0   
5 [0x5]:          movi #0, adx   
7 [0x7]:          iaload ebx, adx   
8 [0x8]:          rstore ebx   
9 [0x9]:          movi #0, ebx   
11 [0xb]:          loadval ecx   
12 [0xc]:          test ecx, ebx   
13 [0xd]:          movr ebx, cmt   
14 [0xe]:          movr cmt, ebx   
15 [0xf]:          jne 25   
16 [0x10]:          pushnull    
17 [0x11]:          popobj2    
18 [0x12]:          pushobj   
19 [0x13]:          movl 0   
20 [0x14]:          _ulck   
21 [0x15]:          popobj2    
22 [0x16]:          returnobj   
23 [0x17]:          ret   
24 [0x18]:          jmp @46   
25 [0x19]: line: 30 movl 0   
26 [0x1a]:          movn #1   
28 [0x1c]:          pushobj   
29 [0x1d]:          istore 0   
31 [0x1f]:          movl 0   
32 [0x20]:          movn #0   
34 [0x22]:          movi #0, adx   
36 [0x24]:          iaload ebx, adx   
37 [0x25]:          rstore ebx   
38 [0x26]:          call @2161 // <std.io#__srt_global.copy>   
39 [0x27]:          popobj2    
40 [0x28]:          pushobj   
41 [0x29]:          movl 0   
42 [0x2a]:          _ulck   
43 [0x2b]:          popobj2    
44 [0x2c]:          returnobj   
45 [0x2d]:          ret   
46 [0x2e]:          nop   
47 [0x2f]:          movl 0   
48 [0x30]:          _ulck   


overload function: std#synced_list<std.io.task#job>.operator[[3942] params(1) in file: lib\support\/0.2.9//synced_list.sharp:34:8: note:  
		    def operator[](index: var): t {
		       ^

0 [0x0]: line: 35 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 36 ipushl #1   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          movi #0, adx   
8 [0x8]:          iaload ebx, adx   
9 [0x9]:          loadval ecx   
10 [0xa]:          gte ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          skpe ebx // pc = 18   
13 [0xd]:          loadl ecx, fp+1   
14 [0xe]:          movi #0, ebx   
16 [0x10]:          lt ecx, ebx   
17 [0x11]:          movr ebx, cmt   
18 [0x12]:          movr cmt, ebx   
19 [0x13]:          jne 28   
20 [0x14]: line: 37 new_class @6 // std#out_of_bounds_exception   
22 [0x16]:          dup    
23 [0x17]:          pushl 0   
24 [0x18]:          ipushl #1   
25 [0x19]:          call @3995 // <std#synced_list<std.io.task#job>.out_of_bounds_msg>   
26 [0x1a]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
27 [0x1b]:          throw    
28 [0x1c]:          nop   
29 [0x1d]: line: 38 movl 0   
30 [0x1e]:          movn #1   
32 [0x20]:          pushobj   
33 [0x21]:          loadl ebx, fp+1   
34 [0x22]:          popobj2    
35 [0x23]:          movr adx, ebx   
36 [0x24]:          chklen adx   
37 [0x25]:          movnd adx   
38 [0x26]:          pushobj   
39 [0x27]:          movl 0   
40 [0x28]:          _ulck   
41 [0x29]:          popobj2    
42 [0x2a]:          returnobj   
43 [0x2b]:          ret   
44 [0x2c]:          movl 0   
45 [0x2d]:          _ulck   


function: std#synced_list<std.io.task#job>.at[3943] params(1) in file: lib\support\/0.2.9//synced_list.sharp:42:8: note:  
		    def at(index: var): t {
		       ^

0 [0x0]: line: 43 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 44 ipushl #1   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          movi #0, adx   
8 [0x8]:          iaload ebx, adx   
9 [0x9]:          loadval ecx   
10 [0xa]:          gte ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          skpe ebx // pc = 18   
13 [0xd]:          loadl ecx, fp+1   
14 [0xe]:          movi #0, ebx   
16 [0x10]:          lt ecx, ebx   
17 [0x11]:          movr ebx, cmt   
18 [0x12]:          movr cmt, ebx   
19 [0x13]:          jne 28   
20 [0x14]: line: 45 new_class @6 // std#out_of_bounds_exception   
22 [0x16]:          dup    
23 [0x17]:          pushl 0   
24 [0x18]:          ipushl #1   
25 [0x19]:          call @3995 // <std#synced_list<std.io.task#job>.out_of_bounds_msg>   
26 [0x1a]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
27 [0x1b]:          throw    
28 [0x1c]:          nop   
29 [0x1d]: line: 46 movl 0   
30 [0x1e]:          movn #1   
32 [0x20]:          pushobj   
33 [0x21]:          loadl ebx, fp+1   
34 [0x22]:          popobj2    
35 [0x23]:          movr adx, ebx   
36 [0x24]:          chklen adx   
37 [0x25]:          movnd adx   
38 [0x26]:          pushobj   
39 [0x27]:          movl 0   
40 [0x28]:          _ulck   
41 [0x29]:          popobj2    
42 [0x2a]:          returnobj   
43 [0x2b]:          ret   
44 [0x2c]:          movl 0   
45 [0x2d]:          _ulck   


function: std#synced_list<std.io.task#job>.last[3944] params(0) in file: lib\support\/0.2.9//synced_list.sharp:50:8: note:  
		    def last(): t {
		       ^

0 [0x0]: line: 51 pushl 0   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          rstore ebx   
8 [0x8]:          movi #1, ebx   
10 [0xa]:          loadval ecx   
11 [0xb]:          sub ecx, ebx -> ebx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @3943 // <std#synced_list<std.io.task#job>.at>   
14 [0xe]:          popobj2    
15 [0xf]:          returnobj   
16 [0x10]:          ret   


function: std#synced_list<std.io.task#job>.put[3945] params(2) in file: lib\support\/0.2.9//synced_list.sharp:54:8: note:  
		    def put(index: var, element: t) : t {
		       ^

0 [0x0]: line: 55 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 56 ipushl #1   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          movi #0, adx   
8 [0x8]:          iaload ebx, adx   
9 [0x9]:          loadval ecx   
10 [0xa]:          gte ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          skpe ebx // pc = 18   
13 [0xd]:          loadl ecx, fp+1   
14 [0xe]:          movi #0, ebx   
16 [0x10]:          lt ecx, ebx   
17 [0x11]:          movr ebx, cmt   
18 [0x12]:          movr cmt, ebx   
19 [0x13]:          jne 28   
20 [0x14]: line: 57 new_class @6 // std#out_of_bounds_exception   
22 [0x16]:          dup    
23 [0x17]:          pushl 0   
24 [0x18]:          ipushl #1   
25 [0x19]:          call @3995 // <std#synced_list<std.io.task#job>.out_of_bounds_msg>   
26 [0x1a]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
27 [0x1b]:          throw    
28 [0x1c]:          nop   
29 [0x1d]: line: 59 movl 0   
30 [0x1e]:          movn #1   
32 [0x20]:          pushobj   
33 [0x21]:          loadl ebx, fp+1   
34 [0x22]:          popobj2    
35 [0x23]:          movr adx, ebx   
36 [0x24]:          chklen adx   
37 [0x25]:          movnd adx   
38 [0x26]:          smovr_3 fp+3   
39 [0x27]: line: 60 pushl 2   
40 [0x28]:          movl 0   
41 [0x29]:          movn #1   
43 [0x2b]:          pushobj   
44 [0x2c]:          loadl ebx, fp+1   
45 [0x2d]:          popobj2    
46 [0x2e]:          movr adx, ebx   
47 [0x2f]:          chklen adx   
48 [0x30]:          movnd adx   
49 [0x31]:          popobj   
50 [0x32]: line: 61 pushl 3   
51 [0x33]:          movl 0   
52 [0x34]:          _ulck   
53 [0x35]:          popobj2    
54 [0x36]:          returnobj   
55 [0x37]:          ret   
56 [0x38]:          movl 0   
57 [0x39]:          _ulck   


function: std#synced_list<std.io.task#job>.expand[3946] params(0) in file: lib\support\/0.2.9//synced_list.sharp:65:16: note:  
		    private def expand() {
		               ^

0 [0x0]: line: 66 movl 0   
1 [0x1]:          movn #2   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 24   
8 [0x8]: line: 67 movl 0   
9 [0x9]:          movn #1   
11 [0xb]:          pushobj   
12 [0xc]:          movl 0   
13 [0xd]:          movn #1   
15 [0xf]:          sizeof ebx   
16 [0x10]:          rstore ebx   
17 [0x11]:          movi #128, ebx   
19 [0x13]:          loadval ecx   
20 [0x14]:          add ecx, ebx -> ebx   
21 [0x15]:          rstore ebx   
22 [0x16]:          call @2141 // <std.io#__srt_global.realloc>   
23 [0x17]:          jmp @51   
24 [0x18]: line: 69 movl 0   
25 [0x19]:          movn #1   
27 [0x1b]:          pushobj   
28 [0x1c]:          movl 0   
29 [0x1d]:          movn #1   
31 [0x1f]:          sizeof ebx   
32 [0x20]:          rstore ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #1   
36 [0x24]:          sizeof ebx   
37 [0x25]:          rstore ebx   
38 [0x26]:          movi #4, ebx   
40 [0x28]:          loadval ecx   
41 [0x29]:          shr ecx, ebx -> ebx   
42 [0x2a]:          loadval ecx   
43 [0x2b]:          add ecx, ebx -> ebx   
44 [0x2c]:          rstore ebx   
45 [0x2d]:          movi #128, ebx   
47 [0x2f]:          loadval ecx   
48 [0x30]:          add ecx, ebx -> ebx   
49 [0x31]:          rstore ebx   
50 [0x32]:          call @2141 // <std.io#__srt_global.realloc>   
51 [0x33]:          nop   
52 [0x34]:          ret   


function: std#synced_list<std.io.task#job>.clear[3947] params(0) in file: lib\support\/0.2.9//synced_list.sharp:72:8: note:  
		    def clear() {
		       ^

0 [0x0]: line: 73 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 74 movi #10, ebx   
4 [0x4]:          new_classarray ebx  // std.io.task#job[]   
6 [0x6]:          movl 0   
7 [0x7]:          movn #1   
9 [0x9]:          popobj   
10 [0xa]: line: 75 movi #0, ebx   
12 [0xc]:          movl 0   
13 [0xd]:          movn #0   
15 [0xf]:          movi #0, adx   
17 [0x11]:          rmov adx, ebx   
18 [0x12]:          movl 0   
19 [0x13]:          _ulck   
20 [0x14]:          ret   


function: std#synced_list<std.io.task#job>.pop_last[3948] params(0) in file: lib\support\/0.2.9//synced_list.sharp:79:8: note:  
		    def pop_last() : t {
		       ^

0 [0x0]: line: 80 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 81 pushl 0   
3 [0x3]:          call @3944 // <std#synced_list<std.io.task#job>.last>   
4 [0x4]:          popobj2    
5 [0x5]:          smovr_3 fp+1   
6 [0x6]: line: 82 pushl 0   
7 [0x7]:          call @3983 // <std#synced_list<std.io.task#job>.pop_back>   
8 [0x8]: line: 83 pushl 1   
9 [0x9]:          movl 0   
10 [0xa]:          _ulck   
11 [0xb]:          popobj2    
12 [0xc]:          returnobj   
13 [0xd]:          ret   
14 [0xe]:          movl 0   
15 [0xf]:          _ulck   


function: std#synced_list<std.io.task#job>.pop_first[3949] params(0) in file: lib\support\/0.2.9//synced_list.sharp:87:8: note:  
		    def pop_first() : t {
		       ^

0 [0x0]: line: 88 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 89 movl 0   
3 [0x3]:          movn #1   
5 [0x5]:          pushobj   
6 [0x6]:          movi #0, ebx   
8 [0x8]:          popobj2    
9 [0x9]:          movr adx, ebx   
10 [0xa]:          chklen adx   
11 [0xb]:          movnd adx   
12 [0xc]:          smovr_3 fp+1   
13 [0xd]: line: 90 pushl 0   
14 [0xe]:          istore 0   
16 [0x10]:          call @3989 // <std#synced_list<std.io.task#job>.remove_at>   
17 [0x11]: line: 91 pushl 1   
18 [0x12]:          movl 0   
19 [0x13]:          _ulck   
20 [0x14]:          popobj2    
21 [0x15]:          returnobj   
22 [0x16]:          ret   
23 [0x17]:          movl 0   
24 [0x18]:          _ulck   


constructor: std#list<std.io.task#job>.list[3950] params(0) in file: lib\support\/0.2.9//list.sharp:13:9: note:  
		    list() {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 14 movi #10, ebx   
3 [0x3]:          new_classarray ebx  // std.io.task#job[]   
5 [0x5]:          movl 0   
6 [0x6]:          movn #1   
8 [0x8]:          popobj   
9 [0x9]:          ret   


constructor: std#list<std.io.task#job>.list[3951] params(1) in file: lib\support\/0.2.9//list.sharp:17:9: note:  
		    list(starting_capacity: var) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 18 loadl ebx, fp+1   
2 [0x2]:          new_classarray ebx  // std.io.task#job[]   
4 [0x4]:          movl 0   
5 [0x5]:          movn #1   
7 [0x7]:          popobj   
8 [0x8]:          ret   


constructor: std#list<std.io.task#job>.list[3952] params(1) in file: lib\support\/0.2.9//list.sharp:21:9: note:  
		    list(initial_data: t[]) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 22 pushl 0   
2 [0x2]:          pushl 1   
3 [0x3]:          call @3963 // <std#list<std.io.task#job>.add_all>   
4 [0x4]:          ret   


function: std#list<std.io.task#job>.empty[3953] params(0) in file: lib\support\/0.2.9//list.sharp:25:8: note:  
		    def empty() := n_elements == 0;
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          return_val cmt   
12 [0xc]:          ret   


function: std#list<std.io.task#job>.set_compact[3954] params(1) in file: lib\support\/0.2.9//list.sharp:27:8: note:  
		    def set_compact(compact_array: var) {
		       ^

0 [0x0]: line: 28 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #2   
4 [0x4]:          loadval ebx   
5 [0x5]:          movi #0, adx   
7 [0x7]:          rmov adx, ebx   
8 [0x8]:          ret   


function: std#list<std.io.task#job>.get_elements[3955] params(0) in file: lib\support\/0.2.9//list.sharp:31:8: note:  
		    def get_elements() : t[] {
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 19   
14 [0xe]:          pushnull    
15 [0xf]:          popobj2    
16 [0x10]:          returnobj   
17 [0x11]:          ret   
18 [0x12]:          jmp @36   
19 [0x13]: line: 33 movl 0   
20 [0x14]:          movn #1   
22 [0x16]:          pushobj   
23 [0x17]:          istore 0   
25 [0x19]:          movl 0   
26 [0x1a]:          movn #0   
28 [0x1c]:          movi #0, adx   
30 [0x1e]:          iaload ebx, adx   
31 [0x1f]:          rstore ebx   
32 [0x20]:          call @2161 // <std.io#__srt_global.copy>   
33 [0x21]:          popobj2    
34 [0x22]:          returnobj   
35 [0x23]:          ret   
36 [0x24]:          nop   


overload function: std#list<std.io.task#job>.operator[[3956] params(1) in file: lib\support\/0.2.9//list.sharp:36:8: note:  
		    def operator[](index: var): t {
		       ^

0 [0x0]: line: 37 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 26   
18 [0x12]: line: 38 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:          dup    
21 [0x15]:          pushl 0   
22 [0x16]:          ipushl #1   
23 [0x17]:          call @3979 // <std#list<std.io.task#job>.out_of_bounds_msg>   
24 [0x18]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:          throw    
26 [0x1a]:          nop   
27 [0x1b]: line: 39 movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          pushobj   
31 [0x1f]:          loadl ebx, fp+1   
32 [0x20]:          popobj2    
33 [0x21]:          movr adx, ebx   
34 [0x22]:          chklen adx   
35 [0x23]:          movnd adx   
36 [0x24]:          returnobj   
37 [0x25]:          ret   


function: std#list<std.io.task#job>.at[3957] params(1) in file: lib\support\/0.2.9//list.sharp:42:8: note:  
		    def at(index: var): t {
		       ^

0 [0x0]: line: 43 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 26   
18 [0x12]: line: 44 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:          dup    
21 [0x15]:          pushl 0   
22 [0x16]:          ipushl #1   
23 [0x17]:          call @3979 // <std#list<std.io.task#job>.out_of_bounds_msg>   
24 [0x18]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:          throw    
26 [0x1a]:          nop   
27 [0x1b]: line: 45 movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          pushobj   
31 [0x1f]:          loadl ebx, fp+1   
32 [0x20]:          popobj2    
33 [0x21]:          movr adx, ebx   
34 [0x22]:          chklen adx   
35 [0x23]:          movnd adx   
36 [0x24]:          returnobj   
37 [0x25]:          ret   


function: std#list<std.io.task#job>.last[3958] params(0) in file: lib\support\/0.2.9//list.sharp:48:8: note:  
		    def last(): t {
		       ^

0 [0x0]: line: 49 pushl 0   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          rstore ebx   
8 [0x8]:          movi #1, ebx   
10 [0xa]:          loadval ecx   
11 [0xb]:          sub ecx, ebx -> ebx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @3957 // <std#list<std.io.task#job>.at>   
14 [0xe]:          popobj2    
15 [0xf]:          returnobj   
16 [0x10]:          ret   


function: std#list<std.io.task#job>.put[3959] params(2) in file: lib\support\/0.2.9//list.sharp:52:8: note:  
		    def put(index: var, element: t) : t {
		       ^

0 [0x0]: line: 53 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 26   
18 [0x12]: line: 54 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:          dup    
21 [0x15]:          pushl 0   
22 [0x16]:          ipushl #1   
23 [0x17]:          call @3979 // <std#list<std.io.task#job>.out_of_bounds_msg>   
24 [0x18]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:          throw    
26 [0x1a]:          nop   
27 [0x1b]: line: 56 movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          pushobj   
31 [0x1f]:          loadl ebx, fp+1   
32 [0x20]:          popobj2    
33 [0x21]:          movr adx, ebx   
34 [0x22]:          chklen adx   
35 [0x23]:          movnd adx   
36 [0x24]:          smovr_3 fp+3   
37 [0x25]: line: 57 pushl 2   
38 [0x26]:          movl 0   
39 [0x27]:          movn #1   
41 [0x29]:          pushobj   
42 [0x2a]:          loadl ebx, fp+1   
43 [0x2b]:          popobj2    
44 [0x2c]:          movr adx, ebx   
45 [0x2d]:          chklen adx   
46 [0x2e]:          movnd adx   
47 [0x2f]:          popobj   
48 [0x30]: line: 58 movl 3   
49 [0x31]:          returnobj   
50 [0x32]:          ret   


function: std#list<std.io.task#job>.expand[3960] params(0) in file: lib\support\/0.2.9//list.sharp:61:16: note:  
		    private def expand() {
		               ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #2   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 24   
8 [0x8]: line: 63 movl 0   
9 [0x9]:          movn #1   
11 [0xb]:          pushobj   
12 [0xc]:          movl 0   
13 [0xd]:          movn #1   
15 [0xf]:          sizeof ebx   
16 [0x10]:          rstore ebx   
17 [0x11]:          movi #128, ebx   
19 [0x13]:          loadval ecx   
20 [0x14]:          add ecx, ebx -> ebx   
21 [0x15]:          rstore ebx   
22 [0x16]:          call @2141 // <std.io#__srt_global.realloc>   
23 [0x17]:          jmp @51   
24 [0x18]: line: 65 movl 0   
25 [0x19]:          movn #1   
27 [0x1b]:          pushobj   
28 [0x1c]:          movl 0   
29 [0x1d]:          movn #1   
31 [0x1f]:          sizeof ebx   
32 [0x20]:          rstore ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #1   
36 [0x24]:          sizeof ebx   
37 [0x25]:          rstore ebx   
38 [0x26]:          movi #4, ebx   
40 [0x28]:          loadval ecx   
41 [0x29]:          shr ecx, ebx -> ebx   
42 [0x2a]:          loadval ecx   
43 [0x2b]:          add ecx, ebx -> ebx   
44 [0x2c]:          rstore ebx   
45 [0x2d]:          movi #128, ebx   
47 [0x2f]:          loadval ecx   
48 [0x30]:          add ecx, ebx -> ebx   
49 [0x31]:          rstore ebx   
50 [0x32]:          call @2141 // <std.io#__srt_global.realloc>   
51 [0x33]:          nop   
52 [0x34]:          ret   


function: std#list<std.io.task#job>.clear[3961] params(0) in file: lib\support\/0.2.9//list.sharp:68:8: note:  
		    def clear() {
		       ^

0 [0x0]: line: 69 movi #10, ebx   
2 [0x2]:          new_classarray ebx  // std.io.task#job[]   
4 [0x4]:          movl 0   
5 [0x5]:          movn #1   
7 [0x7]:          popobj   
8 [0x8]: line: 70 movi #0, ebx   
10 [0xa]:          movl 0   
11 [0xb]:          movn #0   
13 [0xd]:          movi #0, adx   
15 [0xf]:          rmov adx, ebx   
16 [0x10]:          ret   


function: std#list<std.io.task#job>.add_all[3962] params(1) in file: lib\support\/0.2.9//list.sharp:73:8: note:  
		    def add_all(lst: list<t>) {
		       ^

0 [0x0]: line: 74 movl 1   
1 [0x1]:          movn #1   
3 [0x3]:          pushobj   
4 [0x4]:          istore 0   
6 [0x6]:          movl 1   
7 [0x7]:          movn #0   
9 [0x9]:          movi #0, adx   
11 [0xb]:          iaload ebx, adx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @2161 // <std.io#__srt_global.copy>   
14 [0xe]:          popobj2    
15 [0xf]:          movi #32, cmt   
17 [0x11]:          cast cmt   
18 [0x12]:          pushobj   
19 [0x13]:          movl 0   
20 [0x14]:          movn #1   
22 [0x16]:          popobj   
23 [0x17]: line: 75 movl 1   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          iaload ebx, adx   
29 [0x1d]:          movl 0   
30 [0x1e]:          movn #0   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          ret   


function: std#list<std.io.task#job>.add_all[3963] params(1) in file: lib\support\/0.2.9//list.sharp:78:8: note:  
		    def add_all(lst: t[]) {
		       ^

0 [0x0]: line: 79 movl 1   
1 [0x1]:          checknull   
2 [0x2]:          not ebx, ebx   
3 [0x3]:          movr cmt, ebx   
4 [0x4]:          jne 30   
5 [0x5]: line: 80 pushl 1   
6 [0x6]:          istore 0   
8 [0x8]:          movl 1   
9 [0x9]:          sizeof ebx   
10 [0xa]:          rstore ebx   
11 [0xb]:          call @2161 // <std.io#__srt_global.copy>   
12 [0xc]:          popobj2    
13 [0xd]:          movi #32, cmt   
15 [0xf]:          cast cmt   
16 [0x10]:          pushobj   
17 [0x11]:          movl 0   
18 [0x12]:          movn #1   
20 [0x14]:          popobj   
21 [0x15]: line: 81 movl 1   
22 [0x16]:          sizeof ebx   
23 [0x17]:          movl 0   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          rmov adx, ebx   
29 [0x1d]:          jmp @46   
30 [0x1e]: line: 83 movi #0, ebx   
32 [0x20]:          movl 0   
33 [0x21]:          movn #0   
35 [0x23]:          movi #0, adx   
37 [0x25]:          rmov adx, ebx   
38 [0x26]: line: 84 movi #10, ebx   
40 [0x28]:          new_classarray ebx  // std.io.task#job[]   
42 [0x2a]:          movl 0   
43 [0x2b]:          movn #1   
45 [0x2d]:          popobj   
46 [0x2e]:          nop   
47 [0x2f]:          ret   


function: std#list<std.io.task#job>.add[3964] params(1) in file: lib\support\/0.2.9//list.sharp:88:8: note:  
		    def add(element: t) {
		       ^

0 [0x0]: line: 89 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 0   
8 [0x8]:          movn #1   
10 [0xa]:          sizeof ebx   
11 [0xb]:          loadval ecx   
12 [0xc]:          gte ecx, ebx   
13 [0xd]:          movr ebx, cmt   
14 [0xe]:          movr cmt, ebx   
15 [0xf]:          jne 18   
16 [0x10]: line: 90 pushl 0   
17 [0x11]:          call @3960 // <std#list<std.io.task#job>.expand>   
18 [0x12]:          nop   
19 [0x13]: line: 91 pushl 1   
20 [0x14]:          movl 0   
21 [0x15]:          movn #1   
23 [0x17]:          pushobj   
24 [0x18]:          movl 0   
25 [0x19]:          movn #0   
27 [0x1b]:          movi #0, adx   
29 [0x1d]:          iaload ebx, adx   
30 [0x1e]:          movr egx, ebx   
31 [0x1f]:          inc ebx   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          movr ebx, egx   
36 [0x24]:          popobj2    
37 [0x25]:          movr adx, ebx   
38 [0x26]:          chklen adx   
39 [0x27]:          movnd adx   
40 [0x28]:          popobj   
41 [0x29]:          ret   


function: std#list<std.io.task#job>.indexof[3965] params(1) in file: lib\support\/0.2.9//list.sharp:94:8: note:  
		    def indexof(element: t) : var {
		       ^

0 [0x0]: line: 95 istorel 0, fp+2   
2 [0x2]:          ipushl #2   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          movi #0, adx   
8 [0x8]:          iaload ebx, adx   
9 [0x9]:          loadval ecx   
10 [0xa]:          lt ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 35   
14 [0xe]: line: 96 pushl 1   
15 [0xf]:          movl 0   
16 [0x10]:          movn #1   
18 [0x12]:          pushobj   
19 [0x13]:          loadl ebx, fp+2   
20 [0x14]:          popobj2    
21 [0x15]:          movr adx, ebx   
22 [0x16]:          chklen adx   
23 [0x17]:          movnd adx   
24 [0x18]:          pushobj   
25 [0x19]:          itest ebx   
26 [0x1a]:          movr cmt, ebx   
27 [0x1b]:          jne 31   
28 [0x1c]: line: 97 loadl ebx, fp+2   
29 [0x1d]:          return_val ebx   
30 [0x1e]:          ret   
31 [0x1f]:          nop   
32 [0x20]:          iaddl 1, fp@2   
34 [0x22]:          jmp @2   
35 [0x23]: line: 101 istorel -1, fp+0   
37 [0x25]:           ret   


function: std#list<std.io.task#job>.pop_back[3966] params(0) in file: lib\support\/0.2.9//list.sharp:104:8: note:  
		    def pop_back() {
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #0, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 38   
14 [0xe]: line: 106 movl 1   
15 [0xf]:           del   
16 [0x10]: line: 107 pushl 1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           movl 0   
22 [0x16]:           movn #0   
24 [0x18]:           movi #0, adx   
26 [0x1a]:           iaload ebx, adx   
27 [0x1b]:           movr egx, ebx   
28 [0x1c]:           dec ebx   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           rmov adx, ebx   
32 [0x20]:           movr ebx, egx   
33 [0x21]:           popobj2    
34 [0x22]:           movr adx, ebx   
35 [0x23]:           chklen adx   
36 [0x24]:           movnd adx   
37 [0x25]:           popobj   
38 [0x26]:           nop   
39 [0x27]:           ret   


function: std#list<std.io.task#job>.pop_last[3967] params(0) in file: lib\support\/0.2.9//list.sharp:111:8: note:  
		    def pop_last() : t {
		       ^

0 [0x0]: line: 112 pushl 0   
1 [0x1]:           call @3958 // <std#list<std.io.task#job>.last>   
2 [0x2]:           popobj2    
3 [0x3]:           smovr_3 fp+1   
4 [0x4]: line: 113 pushl 0   
5 [0x5]:           call @3966 // <std#list<std.io.task#job>.pop_back>   
6 [0x6]: line: 114 movl 1   
7 [0x7]:           returnobj   
8 [0x8]:           ret   


function: std#list<std.io.task#job>.pop_first[3968] params(0) in file: lib\support\/0.2.9//list.sharp:117:8: note:  
		    def pop_first() : t {
		       ^

0 [0x0]: line: 118 movl 0   
1 [0x1]:           movn #1   
3 [0x3]:           pushobj   
4 [0x4]:           movi #0, ebx   
6 [0x6]:           popobj2    
7 [0x7]:           movr adx, ebx   
8 [0x8]:           chklen adx   
9 [0x9]:           movnd adx   
10 [0xa]:           smovr_3 fp+1   
11 [0xb]: line: 119 pushl 0   
12 [0xc]:           istore 0   
14 [0xe]:           call @3976 // <std#list<std.io.task#job>.remove_at>   
15 [0xf]: line: 120 movl 1   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#list<std.io.task#job>.size[3969] params(0) in file: lib\support\/0.2.9//list.sharp:123:8: note:  
		    def size() := n_elements;
		       ^

0 [0x0]: line: 123 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std#list<std.io.task#job>.insert[3970] params(2) in file: lib\support\/0.2.9//list.sharp:125:8: note:  
		    def insert(index: var, element: t) {
		       ^

0 [0x0]: line: 126 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gt ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 26   
18 [0x12]: line: 127 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:           dup    
21 [0x15]:           pushl 0   
22 [0x16]:           ipushl #1   
23 [0x17]:           call @3979 // <std#list<std.io.task#job>.out_of_bounds_msg>   
24 [0x18]:           call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:           throw    
26 [0x1a]:           nop   
27 [0x1b]: line: 129 movl 0   
28 [0x1c]:           movn #0   
30 [0x1e]:           movi #0, adx   
32 [0x20]:           iaload ebx, adx   
33 [0x21]:           rstore ebx   
34 [0x22]:           movi #0, ebx   
36 [0x24]:           loadval ecx   
37 [0x25]:           test ecx, ebx   
38 [0x26]:           movr ebx, cmt   
39 [0x27]:           movr cmt, ebx   
40 [0x28]:           jne 45   
41 [0x29]: line: 130 pushl 0   
42 [0x2a]:           pushl 2   
43 [0x2b]:           call @3964 // <std#list<std.io.task#job>.add>   
44 [0x2c]:           jmp @134   
45 [0x2d]: line: 132 movl 0   
46 [0x2e]:           movn #0   
48 [0x30]:           movi #0, adx   
50 [0x32]:           iaload ebx, adx   
51 [0x33]:           rstore ebx   
52 [0x34]:           movl 0   
53 [0x35]:           movn #1   
55 [0x37]:           sizeof ebx   
56 [0x38]:           loadval ecx   
57 [0x39]:           gte ecx, ebx   
58 [0x3a]:           movr ebx, cmt   
59 [0x3b]:           movr cmt, ebx   
60 [0x3c]:           jne 63   
61 [0x3d]: line: 133 pushl 0   
62 [0x3e]:           call @3960 // <std#list<std.io.task#job>.expand>   
63 [0x3f]:           nop   
64 [0x40]: line: 134 movl 0   
65 [0x41]:           movn #0   
67 [0x43]:           movi #0, adx   
69 [0x45]:           iaload ebx, adx   
70 [0x46]:           movr egx, ebx   
71 [0x47]:           inc ebx   
72 [0x48]:           movi #0, adx   
74 [0x4a]:           rmov adx, ebx   
75 [0x4b]: line: 135 movl 0   
76 [0x4c]:           movn #0   
78 [0x4e]:           movi #0, adx   
80 [0x50]:           iaload ebx, adx   
81 [0x51]:           rstore ebx   
82 [0x52]:           movi #1, ebx   
84 [0x54]:           loadval ecx   
85 [0x55]:           sub ecx, ebx -> ebx   
86 [0x56]:           smovr_2 ebx, fp+3   
87 [0x57]:           ipushl #3   
88 [0x58]:           loadl ebx, fp+1   
89 [0x59]:           loadval ecx   
90 [0x5a]:           gt ecx, ebx   
91 [0x5b]:           movr ebx, cmt   
92 [0x5c]:           movr cmt, ebx   
93 [0x5d]:           jne 123   
94 [0x5e]: line: 136 movl 0   
95 [0x5f]:           movn #1   
97 [0x61]:           pushobj   
98 [0x62]:           ipushl #3   
99 [0x63]:           movi #1, ebx   
101 [0x65]:           loadval ecx   
102 [0x66]:           sub ecx, ebx -> ebx   
103 [0x67]:           popobj2    
104 [0x68]:           movr adx, ebx   
105 [0x69]:           chklen adx   
106 [0x6a]:           movnd adx   
107 [0x6b]:           pushobj   
108 [0x6c]:           movl 0   
109 [0x6d]:           movn #1   
111 [0x6f]:           pushobj   
112 [0x70]:           loadl ebx, fp+3   
113 [0x71]:           popobj2    
114 [0x72]:           movr adx, ebx   
115 [0x73]:           chklen adx   
116 [0x74]:           movnd adx   
117 [0x75]:           popobj   
118 [0x76]:           loadl ebx, fp+3   
119 [0x77]:           movr egx, ebx   
120 [0x78]:           dec ebx   
121 [0x79]:           smovr_2 ebx, fp+3   
122 [0x7a]:           jmp @87   
123 [0x7b]: line: 137 pushl 2   
124 [0x7c]:           movl 0   
125 [0x7d]:           movn #1   
127 [0x7f]:           pushobj   
128 [0x80]:           loadl ebx, fp+1   
129 [0x81]:           popobj2    
130 [0x82]:           movr adx, ebx   
131 [0x83]:           chklen adx   
132 [0x84]:           movnd adx   
133 [0x85]:           popobj   
134 [0x86]:           nop   
135 [0x87]:           ret   


function: std#list<std.io.task#job>.find[3971] params(2) in file: lib\support\/0.2.9//list.sharp:141:8: note:  
		    def find(comparer : t, find_func: (t, t)(var)) : t {
		       ^

0 [0x0]: line: 142 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 48   
14 [0xe]: line: 143 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 44   
33 [0x21]: line: 144 movl 0   
34 [0x22]:           movn #1   
36 [0x24]:           pushobj   
37 [0x25]:           loadl ebx, fp+3   
38 [0x26]:           popobj2    
39 [0x27]:           movr adx, ebx   
40 [0x28]:           chklen adx   
41 [0x29]:           movnd adx   
42 [0x2a]:           returnobj   
43 [0x2b]:           ret   
44 [0x2c]:           nop   
45 [0x2d]:           iaddl 1, fp@3   
47 [0x2f]:           jmp @2   
48 [0x30]: line: 148 movl 4   
49 [0x31]:           del   
50 [0x32]: line: 149 movl 4   
51 [0x33]:           returnobj   
52 [0x34]:           ret   


function: std#list<std.io.task#job>.remove[3972] params(1) in file: lib\support\/0.2.9//list.sharp:152:8: note:  
		    def remove(val: t) {
		       ^

0 [0x0]: line: 153 istorel 0, fp+2   
2 [0x2]:           ipushl #2   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 36   
14 [0xe]: line: 154 pushl 1   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+2   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           itest ebx   
26 [0x1a]:           movr cmt, ebx   
27 [0x1b]:           jne 32   
28 [0x1c]: line: 155 pushl 0   
29 [0x1d]:           ipushl #2   
30 [0x1e]:           call @3976 // <std#list<std.io.task#job>.remove_at>   
31 [0x1f]: line: 156 ret   
32 [0x20]:           nop   
33 [0x21]:           iaddl 1, fp@2   
35 [0x23]:           jmp @2   
36 [0x24]:           ret   


function: std#list<std.io.task#job>.remove[3973] params(2) in file: lib\support\/0.2.9//list.sharp:161:8: note:  
		    def remove(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 162 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 41   
14 [0xe]: line: 163 ipushl #2   
15 [0xf]:           pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           movnd adx   
25 [0x19]:           pushobj   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 37   
33 [0x21]: line: 164 pushl 0   
34 [0x22]:           ipushl #3   
35 [0x23]:           call @3976 // <std#list<std.io.task#job>.remove_at>   
36 [0x24]: line: 165 ret   
37 [0x25]:           nop   
38 [0x26]:           iaddl 1, fp@3   
40 [0x28]:           jmp @2   
41 [0x29]:           ret   


function: std#list<std.io.task#job>.replace[3974] params(2) in file: lib\support\/0.2.9//list.sharp:170:8: note:  
		    def replace(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 171 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 49   
14 [0xe]: line: 172 ipushl #2   
15 [0xf]:           pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           movnd adx   
25 [0x19]:           pushobj   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 45   
33 [0x21]: line: 173 pushl 1   
34 [0x22]:           movl 0   
35 [0x23]:           movn #1   
37 [0x25]:           pushobj   
38 [0x26]:           loadl ebx, fp+3   
39 [0x27]:           popobj2    
40 [0x28]:           movr adx, ebx   
41 [0x29]:           chklen adx   
42 [0x2a]:           movnd adx   
43 [0x2b]:           popobj   
44 [0x2c]: line: 174 ret   
45 [0x2d]:           nop   
46 [0x2e]:           iaddl 1, fp@3   
48 [0x30]:           jmp @2   
49 [0x31]:           ret   


function: std#list<std.io.task#job>.linear_sort[3975] params(1) in file: lib\support\/0.2.9//list.sharp:179:8: note:  
		    def linear_sort(swap: (t, t)(var)) {
		       ^

0 [0x0]: line: 180 istorel 0, fp+2   
2 [0x2]:           ipushl #2   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 134   
14 [0xe]: line: 182 istorel 0, fp+3   
16 [0x10]:           ipushl #3   
17 [0x11]:           movl 0   
18 [0x12]:           movn #0   
20 [0x14]:           movi #0, adx   
22 [0x16]:           iaload ebx, adx   
23 [0x17]:           loadval ecx   
24 [0x18]:           lt ecx, ebx   
25 [0x19]:           movr ebx, cmt   
26 [0x1a]:           movr cmt, ebx   
27 [0x1b]:           jne 131   
28 [0x1c]: line: 183 ipushl #3   
29 [0x1d]:           movi #1, ebx   
31 [0x1f]:           loadval ecx   
32 [0x20]:           add ecx, ebx -> ebx   
33 [0x21]:           rstore ebx   
34 [0x22]:           movl 0   
35 [0x23]:           movn #0   
37 [0x25]:           movi #0, adx   
39 [0x27]:           iaload ebx, adx   
40 [0x28]:           loadval ecx   
41 [0x29]:           lt ecx, ebx   
42 [0x2a]:           movr ebx, cmt   
43 [0x2b]:           movr cmt, ebx   
44 [0x2c]:           jne 127   
45 [0x2d]: line: 185 ipushl #1   
46 [0x2e]:           movl 0   
47 [0x2f]:           movn #1   
49 [0x31]:           pushobj   
50 [0x32]:           loadl ebx, fp+3   
51 [0x33]:           popobj2    
52 [0x34]:           movr adx, ebx   
53 [0x35]:           chklen adx   
54 [0x36]:           movnd adx   
55 [0x37]:           pushobj   
56 [0x38]:           movl 0   
57 [0x39]:           movn #1   
59 [0x3b]:           pushobj   
60 [0x3c]:           ipushl #3   
61 [0x3d]:           movi #1, ebx   
63 [0x3f]:           loadval ecx   
64 [0x40]:           add ecx, ebx -> ebx   
65 [0x41]:           popobj2    
66 [0x42]:           movr adx, ebx   
67 [0x43]:           chklen adx   
68 [0x44]:           movnd adx   
69 [0x45]:           pushobj   
70 [0x46]:           smov ebx, sp+[-2]   
71 [0x47]:           calld ebx   
72 [0x48]:           swap    
73 [0x49]:           pop   
74 [0x4a]:           loadval ebx   
75 [0x4b]:           movr cmt, ebx   
76 [0x4c]:           jne 126   
77 [0x4d]: line: 186 movl 0   
78 [0x4e]:           movn #1   
80 [0x50]:           pushobj   
81 [0x51]:           loadl ebx, fp+3   
82 [0x52]:           popobj2    
83 [0x53]:           movr adx, ebx   
84 [0x54]:           chklen adx   
85 [0x55]:           movnd adx   
86 [0x56]:           smovr_3 fp+4   
87 [0x57]: line: 187 movl 0   
88 [0x58]:           movn #1   
90 [0x5a]:           pushobj   
91 [0x5b]:           ipushl #3   
92 [0x5c]:           movi #1, ebx   
94 [0x5e]:           loadval ecx   
95 [0x5f]:           add ecx, ebx -> ebx   
96 [0x60]:           popobj2    
97 [0x61]:           movr adx, ebx   
98 [0x62]:           chklen adx   
99 [0x63]:           movnd adx   
100 [0x64]:           pushobj   
101 [0x65]:           movl 0   
102 [0x66]:           movn #1   
104 [0x68]:           pushobj   
105 [0x69]:           loadl ebx, fp+3   
106 [0x6a]:           popobj2    
107 [0x6b]:           movr adx, ebx   
108 [0x6c]:           chklen adx   
109 [0x6d]:           movnd adx   
110 [0x6e]:           popobj   
111 [0x6f]: line: 188 pushl 4   
112 [0x70]:           movl 0   
113 [0x71]:           movn #1   
115 [0x73]:           pushobj   
116 [0x74]:           ipushl #3   
117 [0x75]:           movi #1, ebx   
119 [0x77]:           loadval ecx   
120 [0x78]:           add ecx, ebx -> ebx   
121 [0x79]:           popobj2    
122 [0x7a]:           movr adx, ebx   
123 [0x7b]:           chklen adx   
124 [0x7c]:           movnd adx   
125 [0x7d]:           popobj   
126 [0x7e]:           nop   
127 [0x7f]:           nop   
128 [0x80]:           iaddl 1, fp@3   
130 [0x82]:           jmp @16   
131 [0x83]:           iaddl 1, fp@2   
133 [0x85]:           jmp @2   
134 [0x86]:           ret   


function: std#list<std.io.task#job>.remove_at[3976] params(1) in file: lib\support\/0.2.9//list.sharp:195:8: note:  
		    def remove_at(index: var) {
		       ^

0 [0x0]: line: 196 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gte ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 26   
18 [0x12]: line: 197 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:           dup    
21 [0x15]:           pushl 0   
22 [0x16]:           ipushl #1   
23 [0x17]:           call @3979 // <std#list<std.io.task#job>.out_of_bounds_msg>   
24 [0x18]:           call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:           throw    
26 [0x1a]:           nop   
27 [0x1b]: line: 199 movl 0   
28 [0x1c]:           movn #0   
30 [0x1e]:           movi #0, adx   
32 [0x20]:           iaload ebx, adx   
33 [0x21]:           rstore ebx   
34 [0x22]:           loadl ebx, fp+1   
35 [0x23]:           loadval ecx   
36 [0x24]:           sub ecx, ebx -> ebx   
37 [0x25]:           rstore ebx   
38 [0x26]:           movi #1, ebx   
40 [0x28]:           loadval ecx   
41 [0x29]:           sub ecx, ebx -> ebx   
42 [0x2a]:           smovr_2 ebx, fp+2   
43 [0x2b]: line: 200 ipushl #2   
44 [0x2c]:           movi #0, ebx   
46 [0x2e]:           loadval ecx   
47 [0x2f]:           gt ecx, ebx   
48 [0x30]:           movr ebx, cmt   
49 [0x31]:           movr cmt, ebx   
50 [0x32]:           jne 74   
51 [0x33]: line: 201 movl 0   
52 [0x34]:           movn #1   
54 [0x36]:           pushobj   
55 [0x37]:           movl 0   
56 [0x38]:           movn #1   
58 [0x3a]:           pushobj   
59 [0x3b]:           ipushl #1   
60 [0x3c]:           ipushl #1   
61 [0x3d]:           movi #1, ebx   
63 [0x3f]:           loadval ecx   
64 [0x40]:           add ecx, ebx -> ebx   
65 [0x41]:           rstore ebx   
66 [0x42]:           movl 0   
67 [0x43]:           movn #0   
69 [0x45]:           movi #0, adx   
71 [0x47]:           iaload ebx, adx   
72 [0x48]:           rstore ebx   
73 [0x49]:           call @2151 // <std.io#__srt_global.memcopy>   
74 [0x4a]:           nop   
75 [0x4b]: line: 203 pushl 0   
76 [0x4c]:           call @3966 // <std#list<std.io.task#job>.pop_back>   
77 [0x4d]:           ret   


function: std#list<std.io.task#job>.indexof[3977] params(2) in file: lib\support\/0.2.9//list.sharp:206:8: note:  
		    def indexof(comparer: t, find_func: (t, t)(var)) : var {
		       ^

0 [0x0]: line: 207 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 40   
14 [0xe]: line: 208 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 36   
33 [0x21]: line: 209 loadl ebx, fp+3   
34 [0x22]:           return_val ebx   
35 [0x23]:           ret   
36 [0x24]:           nop   
37 [0x25]:           iaddl 1, fp@3   
39 [0x27]:           jmp @2   
40 [0x28]: line: 213 istorel -1, fp+0   
42 [0x2a]:           ret   


function: std#list<std.io.task#job>.to_string[3978] params(0) in file: lib\support\/0.2.9//list.sharp:216:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 217 new_class @76 // std#string_builder   
2 [0x2]:           dup    
3 [0x3]:           call @3649 // <std#string_builder.string_builder>   
4 [0x4]:           popobj2    
5 [0x5]:           smovr_3 fp+1   
6 [0x6]: line: 219 pushl 1   
7 [0x7]:           newstr @562 // [    
8 [0x8]:           call @3645 // <std#string_builder.operator+=>   
9 [0x9]:           pop   
10 [0xa]: line: 220 istorel 0, fp+2   
12 [0xc]:           ipushl #2   
13 [0xd]:           movl 0   
14 [0xe]:           movn #0   
16 [0x10]:           movi #0, adx   
18 [0x12]:           iaload ebx, adx   
19 [0x13]:           loadval ecx   
20 [0x14]:           lt ecx, ebx   
21 [0x15]:           movr ebx, cmt   
22 [0x16]:           movr cmt, ebx   
23 [0x17]:           jne 62   
24 [0x18]: line: 221 pushl 1   
25 [0x19]:           movl 0   
26 [0x1a]:           movn #1   
28 [0x1c]:           pushobj   
29 [0x1d]:           loadl ebx, fp+2   
30 [0x1e]:           popobj2    
31 [0x1f]:           movr adx, ebx   
32 [0x20]:           chklen adx   
33 [0x21]:           movnd adx   
34 [0x22]:           pushobj   
35 [0x23]:           call @3641 // <std#string_builder.operator+=>   
36 [0x24]:           pop   
37 [0x25]: line: 223 ipushl #2   
38 [0x26]:           movi #1, ebx   
40 [0x28]:           loadval ecx   
41 [0x29]:           add ecx, ebx -> ebx   
42 [0x2a]:           rstore ebx   
43 [0x2b]:           movl 0   
44 [0x2c]:           movn #0   
46 [0x2e]:           movi #0, adx   
48 [0x30]:           iaload ebx, adx   
49 [0x31]:           loadval ecx   
50 [0x32]:           lt ecx, ebx   
51 [0x33]:           movr ebx, cmt   
52 [0x34]:           movr cmt, ebx   
53 [0x35]:           jne 58   
54 [0x36]: line: 224 pushl 1   
55 [0x37]:           newstr @563 // ,    
56 [0x38]:           call @3645 // <std#string_builder.operator+=>   
57 [0x39]:           pop   
58 [0x3a]:           nop   
59 [0x3b]:           iaddl 1, fp@2   
61 [0x3d]:           jmp @12   
62 [0x3e]: line: 228 pushl 1   
63 [0x3f]:           newstr @564 //  ]   
64 [0x40]:           call @3645 // <std#string_builder.operator+=>   
65 [0x41]:           pop   
66 [0x42]: line: 229 pushl 1   
67 [0x43]:           call @3622 // <std#string_builder.to_string>   
68 [0x44]:           popobj2    
69 [0x45]:           returnobj   
70 [0x46]:           ret   


function: std#list<std.io.task#job>.out_of_bounds_msg[3979] params(1) in file: lib\support\/0.2.9//list.sharp:232:16: note:  
		    private def out_of_bounds_msg(index: var) : string {
		               ^

0 [0x0]: line: 233 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           newstr @565 // Index:    
4 [0x4]:           call @3546 // <std#string.string>   
5 [0x5]:           ipushl #1   
6 [0x6]:           call @3578 // <std#string.operator+>   
7 [0x7]:           newstr @566 // , size:    
8 [0x8]:           call @3558 // <std#string.operator+>   
9 [0x9]:           movl 0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           iaload ebx, adx   
15 [0xf]:           rstore ebx   
16 [0x10]:           call @3578 // <std#string.operator+>   
17 [0x11]:           popobj2    
18 [0x12]:           returnobj   
19 [0x13]:           ret   


function: std#synced_list<std.io.task#job>.add_all[3980] params(1) in file: lib\support\/0.2.9//synced_list.sharp:95:8: note:  
		    def add_all(lst: list<t>) {
		       ^

0 [0x0]: line: 96 movl 0   
1 [0x1]:          _lck    
2 [0x2]: line: 97 movl 1   
3 [0x3]:          movn #1   
5 [0x5]:          pushobj   
6 [0x6]:          istore 0   
8 [0x8]:          movl 1   
9 [0x9]:          movn #0   
11 [0xb]:          movi #0, adx   
13 [0xd]:          iaload ebx, adx   
14 [0xe]:          rstore ebx   
15 [0xf]:          call @2161 // <std.io#__srt_global.copy>   
16 [0x10]:          popobj2    
17 [0x11]:          movi #32, cmt   
19 [0x13]:          cast cmt   
20 [0x14]:          pushobj   
21 [0x15]:          movl 0   
22 [0x16]:          movn #1   
24 [0x18]:          popobj   
25 [0x19]: line: 98 movl 1   
26 [0x1a]:          movn #0   
28 [0x1c]:          movi #0, adx   
30 [0x1e]:          iaload ebx, adx   
31 [0x1f]:          movl 0   
32 [0x20]:          movn #0   
34 [0x22]:          movi #0, adx   
36 [0x24]:          rmov adx, ebx   
37 [0x25]:          movl 0   
38 [0x26]:          _ulck   
39 [0x27]:          ret   


function: std#synced_list<std.io.task#job>.add[3981] params(1) in file: lib\support\/0.2.9//synced_list.sharp:102:8: note:  
		    def add(element: t) {
		       ^

0 [0x0]: line: 103 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 104 movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           rstore ebx   
9 [0x9]:           movl 0   
10 [0xa]:           movn #1   
12 [0xc]:           sizeof ebx   
13 [0xd]:           loadval ecx   
14 [0xe]:           gte ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 20   
18 [0x12]: line: 105 pushl 0   
19 [0x13]:           call @3946 // <std#synced_list<std.io.task#job>.expand>   
20 [0x14]:           nop   
21 [0x15]: line: 106 pushl 1   
22 [0x16]:           movl 0   
23 [0x17]:           movn #1   
25 [0x19]:           pushobj   
26 [0x1a]:           movl 0   
27 [0x1b]:           movn #0   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           iaload ebx, adx   
32 [0x20]:           movr egx, ebx   
33 [0x21]:           inc ebx   
34 [0x22]:           movi #0, adx   
36 [0x24]:           rmov adx, ebx   
37 [0x25]:           movr ebx, egx   
38 [0x26]:           popobj2    
39 [0x27]:           movr adx, ebx   
40 [0x28]:           chklen adx   
41 [0x29]:           movnd adx   
42 [0x2a]:           popobj   
43 [0x2b]:           movl 0   
44 [0x2c]:           _ulck   
45 [0x2d]:           ret   


function: std#synced_list<std.io.task#job>.indexof[3982] params(1) in file: lib\support\/0.2.9//synced_list.sharp:110:8: note:  
		    def indexof(element: t) : var {
		       ^

0 [0x0]: line: 111 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 112 istorel 0, fp+2   
4 [0x4]:           ipushl #2   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           loadval ecx   
12 [0xc]:           lt ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           movr cmt, ebx   
15 [0xf]:           jne 39   
16 [0x10]: line: 113 pushl 1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           loadl ebx, fp+2   
22 [0x16]:           popobj2    
23 [0x17]:           movr adx, ebx   
24 [0x18]:           chklen adx   
25 [0x19]:           movnd adx   
26 [0x1a]:           pushobj   
27 [0x1b]:           itest ebx   
28 [0x1c]:           movr cmt, ebx   
29 [0x1d]:           jne 35   
30 [0x1e]: line: 114 loadl ebx, fp+2   
31 [0x1f]:           return_val ebx   
32 [0x20]:           movl 0   
33 [0x21]:           _ulck   
34 [0x22]:           ret   
35 [0x23]:           nop   
36 [0x24]:           iaddl 1, fp@2   
38 [0x26]:           jmp @4   
39 [0x27]: line: 118 istorel -1, fp+0   
41 [0x29]:           movl 0   
42 [0x2a]:           _ulck   
43 [0x2b]:           ret   
44 [0x2c]:           movl 0   
45 [0x2d]:           _ulck   


function: std#synced_list<std.io.task#job>.pop_back[3983] params(0) in file: lib\support\/0.2.9//synced_list.sharp:122:8: note:  
		    def pop_back() {
		       ^

0 [0x0]: line: 123 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #0, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 36   
14 [0xe]: line: 124 movl 1   
15 [0xf]:           del   
16 [0x10]: line: 125 pushl 1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           movl 0   
22 [0x16]:           movn #0   
24 [0x18]:           movi #0, adx   
26 [0x1a]:           iaload ebx, adx   
27 [0x1b]:           dec ebx   
28 [0x1c]:           movi #0, adx   
30 [0x1e]:           rmov adx, ebx   
31 [0x1f]:           popobj2    
32 [0x20]:           movr adx, ebx   
33 [0x21]:           chklen adx   
34 [0x22]:           movnd adx   
35 [0x23]:           popobj   
36 [0x24]:           nop   
37 [0x25]:           ret   


function: std#synced_list<std.io.task#job>.size[3984] params(0) in file: lib\support\/0.2.9//synced_list.sharp:129:8: note:  
		    def size() : var {
		       ^

0 [0x0]: line: 130 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 131 movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           return_val ebx   
9 [0x9]:           movl 0   
10 [0xa]:           _ulck   
11 [0xb]:           ret   
12 [0xc]:           movl 0   
13 [0xd]:           _ulck   


function: std#synced_list<std.io.task#job>.empty[3985] params(0) in file: lib\support\/0.2.9//synced_list.sharp:135:8: note:  
		    def empty() : var {
		       ^

0 [0x0]: line: 136 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 137 movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           movi #0, adx   
7 [0x7]:           iaload ebx, adx   
8 [0x8]:           rstore ebx   
9 [0x9]:           movi #0, ebx   
11 [0xb]:           loadval ecx   
12 [0xc]:           test ecx, ebx   
13 [0xd]:           return_val cmt   
14 [0xe]:           movl 0   
15 [0xf]:           _ulck   
16 [0x10]:           ret   
17 [0x11]:           movl 0   
18 [0x12]:           _ulck   


function: std#synced_list<std.io.task#job>.insert[3986] params(2) in file: lib\support\/0.2.9//synced_list.sharp:141:8: note:  
		    def insert(index: var, element: t) {
		       ^

0 [0x0]: line: 142 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 143 ipushl #1   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           skpe ebx // pc = 18   
13 [0xd]:           loadl ecx, fp+1   
14 [0xe]:           movi #0, ebx   
16 [0x10]:           lt ecx, ebx   
17 [0x11]:           movr ebx, cmt   
18 [0x12]:           movr cmt, ebx   
19 [0x13]:           jne 28   
20 [0x14]: line: 144 new_class @6 // std#out_of_bounds_exception   
22 [0x16]:           dup    
23 [0x17]:           pushl 0   
24 [0x18]:           ipushl #1   
25 [0x19]:           call @3995 // <std#synced_list<std.io.task#job>.out_of_bounds_msg>   
26 [0x1a]:           call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
27 [0x1b]:           throw    
28 [0x1c]:           nop   
29 [0x1d]: line: 146 movl 0   
30 [0x1e]:           movn #0   
32 [0x20]:           movi #0, adx   
34 [0x22]:           iaload ebx, adx   
35 [0x23]:           rstore ebx   
36 [0x24]:           movi #0, ebx   
38 [0x26]:           loadval ecx   
39 [0x27]:           test ecx, ebx   
40 [0x28]:           movr ebx, cmt   
41 [0x29]:           movr cmt, ebx   
42 [0x2a]:           jne 47   
43 [0x2b]: line: 147 pushl 0   
44 [0x2c]:           pushl 2   
45 [0x2d]:           call @3981 // <std#synced_list<std.io.task#job>.add>   
46 [0x2e]:           jmp @136   
47 [0x2f]: line: 149 movl 0   
48 [0x30]:           movn #0   
50 [0x32]:           movi #0, adx   
52 [0x34]:           iaload ebx, adx   
53 [0x35]:           rstore ebx   
54 [0x36]:           movl 0   
55 [0x37]:           movn #1   
57 [0x39]:           sizeof ebx   
58 [0x3a]:           loadval ecx   
59 [0x3b]:           gte ecx, ebx   
60 [0x3c]:           movr ebx, cmt   
61 [0x3d]:           movr cmt, ebx   
62 [0x3e]:           jne 65   
63 [0x3f]: line: 150 pushl 0   
64 [0x40]:           call @3946 // <std#synced_list<std.io.task#job>.expand>   
65 [0x41]:           nop   
66 [0x42]: line: 151 movl 0   
67 [0x43]:           movn #0   
69 [0x45]:           movi #0, adx   
71 [0x47]:           iaload ebx, adx   
72 [0x48]:           movr egx, ebx   
73 [0x49]:           inc ebx   
74 [0x4a]:           movi #0, adx   
76 [0x4c]:           rmov adx, ebx   
77 [0x4d]: line: 152 movl 0   
78 [0x4e]:           movn #0   
80 [0x50]:           movi #0, adx   
82 [0x52]:           iaload ebx, adx   
83 [0x53]:           rstore ebx   
84 [0x54]:           movi #1, ebx   
86 [0x56]:           loadval ecx   
87 [0x57]:           sub ecx, ebx -> ebx   
88 [0x58]:           smovr_2 ebx, fp+3   
89 [0x59]:           ipushl #3   
90 [0x5a]:           loadl ebx, fp+1   
91 [0x5b]:           loadval ecx   
92 [0x5c]:           gt ecx, ebx   
93 [0x5d]:           movr ebx, cmt   
94 [0x5e]:           movr cmt, ebx   
95 [0x5f]:           jne 125   
96 [0x60]: line: 153 movl 0   
97 [0x61]:           movn #1   
99 [0x63]:           pushobj   
100 [0x64]:           ipushl #3   
101 [0x65]:           movi #1, ebx   
103 [0x67]:           loadval ecx   
104 [0x68]:           sub ecx, ebx -> ebx   
105 [0x69]:           popobj2    
106 [0x6a]:           movr adx, ebx   
107 [0x6b]:           chklen adx   
108 [0x6c]:           movnd adx   
109 [0x6d]:           pushobj   
110 [0x6e]:           movl 0   
111 [0x6f]:           movn #1   
113 [0x71]:           pushobj   
114 [0x72]:           loadl ebx, fp+3   
115 [0x73]:           popobj2    
116 [0x74]:           movr adx, ebx   
117 [0x75]:           chklen adx   
118 [0x76]:           movnd adx   
119 [0x77]:           popobj   
120 [0x78]:           loadl ebx, fp+3   
121 [0x79]:           movr egx, ebx   
122 [0x7a]:           dec ebx   
123 [0x7b]:           smovr_2 ebx, fp+3   
124 [0x7c]:           jmp @89   
125 [0x7d]: line: 154 pushl 2   
126 [0x7e]:           movl 0   
127 [0x7f]:           movn #1   
129 [0x81]:           pushobj   
130 [0x82]:           loadl ebx, fp+1   
131 [0x83]:           popobj2    
132 [0x84]:           movr adx, ebx   
133 [0x85]:           chklen adx   
134 [0x86]:           movnd adx   
135 [0x87]:           popobj   
136 [0x88]:           nop   
137 [0x89]:           movl 0   
138 [0x8a]:           _ulck   
139 [0x8b]:           ret   


function: std#synced_list<std.io.task#job>.remove[3987] params(1) in file: lib\support\/0.2.9//synced_list.sharp:160:8: note:  
		    def remove(val: t) {
		       ^

0 [0x0]: line: 161 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 162 istorel 0, fp+2   
4 [0x4]:           ipushl #2   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           loadval ecx   
12 [0xc]:           lt ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           movr cmt, ebx   
15 [0xf]:           jne 40   
16 [0x10]: line: 163 pushl 1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           loadl ebx, fp+2   
22 [0x16]:           popobj2    
23 [0x17]:           movr adx, ebx   
24 [0x18]:           chklen adx   
25 [0x19]:           movnd adx   
26 [0x1a]:           pushobj   
27 [0x1b]:           itest ebx   
28 [0x1c]:           movr cmt, ebx   
29 [0x1d]:           jne 36   
30 [0x1e]: line: 164 pushl 0   
31 [0x1f]:           ipushl #2   
32 [0x20]:           call @3989 // <std#synced_list<std.io.task#job>.remove_at>   
33 [0x21]: line: 165 movl 0   
34 [0x22]:           _ulck   
35 [0x23]:           ret   
36 [0x24]:           nop   
37 [0x25]:           iaddl 1, fp@2   
39 [0x27]:           jmp @4   
40 [0x28]:           movl 0   
41 [0x29]:           _ulck   
42 [0x2a]:           ret   


function: std#synced_list<std.io.task#job>.remove[3988] params(2) in file: lib\support\/0.2.9//synced_list.sharp:171:8: note:  
		    def remove(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 172 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 173 istorel 0, fp+3   
4 [0x4]:           ipushl #3   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           loadval ecx   
12 [0xc]:           lt ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           movr cmt, ebx   
15 [0xf]:           jne 45   
16 [0x10]: line: 174 ipushl #2   
17 [0x11]:           pushl 1   
18 [0x12]:           movl 0   
19 [0x13]:           movn #1   
21 [0x15]:           pushobj   
22 [0x16]:           loadl ebx, fp+3   
23 [0x17]:           popobj2    
24 [0x18]:           movr adx, ebx   
25 [0x19]:           chklen adx   
26 [0x1a]:           movnd adx   
27 [0x1b]:           pushobj   
28 [0x1c]:           smov ebx, sp+[-2]   
29 [0x1d]:           calld ebx   
30 [0x1e]:           swap    
31 [0x1f]:           pop   
32 [0x20]:           loadval ebx   
33 [0x21]:           movr cmt, ebx   
34 [0x22]:           jne 41   
35 [0x23]: line: 175 pushl 0   
36 [0x24]:           ipushl #3   
37 [0x25]:           call @3989 // <std#synced_list<std.io.task#job>.remove_at>   
38 [0x26]: line: 176 movl 0   
39 [0x27]:           _ulck   
40 [0x28]:           ret   
41 [0x29]:           nop   
42 [0x2a]:           iaddl 1, fp@3   
44 [0x2c]:           jmp @4   
45 [0x2d]:           movl 0   
46 [0x2e]:           _ulck   
47 [0x2f]:           ret   


function: std#synced_list<std.io.task#job>.remove_at[3989] params(1) in file: lib\support\/0.2.9//synced_list.sharp:182:8: note:  
		    def remove_at(index: var) {
		       ^

0 [0x0]: line: 183 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 184 ipushl #1   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gte ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           skpe ebx // pc = 18   
13 [0xd]:           loadl ecx, fp+1   
14 [0xe]:           movi #0, ebx   
16 [0x10]:           lt ecx, ebx   
17 [0x11]:           movr ebx, cmt   
18 [0x12]:           movr cmt, ebx   
19 [0x13]:           jne 28   
20 [0x14]: line: 185 new_class @6 // std#out_of_bounds_exception   
22 [0x16]:           dup    
23 [0x17]:           pushl 0   
24 [0x18]:           ipushl #1   
25 [0x19]:           call @3995 // <std#synced_list<std.io.task#job>.out_of_bounds_msg>   
26 [0x1a]:           call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
27 [0x1b]:           throw    
28 [0x1c]:           nop   
29 [0x1d]: line: 187 movl 0   
30 [0x1e]:           movn #0   
32 [0x20]:           movi #0, adx   
34 [0x22]:           iaload ebx, adx   
35 [0x23]:           rstore ebx   
36 [0x24]:           loadl ebx, fp+1   
37 [0x25]:           loadval ecx   
38 [0x26]:           sub ecx, ebx -> ebx   
39 [0x27]:           rstore ebx   
40 [0x28]:           movi #1, ebx   
42 [0x2a]:           loadval ecx   
43 [0x2b]:           sub ecx, ebx -> ebx   
44 [0x2c]:           smovr_2 ebx, fp+2   
45 [0x2d]: line: 188 ipushl #2   
46 [0x2e]:           movi #0, ebx   
48 [0x30]:           loadval ecx   
49 [0x31]:           gt ecx, ebx   
50 [0x32]:           movr ebx, cmt   
51 [0x33]:           movr cmt, ebx   
52 [0x34]:           jne 76   
53 [0x35]: line: 189 movl 0   
54 [0x36]:           movn #1   
56 [0x38]:           pushobj   
57 [0x39]:           movl 0   
58 [0x3a]:           movn #1   
60 [0x3c]:           pushobj   
61 [0x3d]:           ipushl #1   
62 [0x3e]:           ipushl #1   
63 [0x3f]:           movi #1, ebx   
65 [0x41]:           loadval ecx   
66 [0x42]:           add ecx, ebx -> ebx   
67 [0x43]:           rstore ebx   
68 [0x44]:           movl 0   
69 [0x45]:           movn #0   
71 [0x47]:           movi #0, adx   
73 [0x49]:           iaload ebx, adx   
74 [0x4a]:           rstore ebx   
75 [0x4b]:           call @2151 // <std.io#__srt_global.memcopy>   
76 [0x4c]:           nop   
77 [0x4d]: line: 191 pushl 0   
78 [0x4e]:           call @3983 // <std#synced_list<std.io.task#job>.pop_back>   
79 [0x4f]:           movl 0   
80 [0x50]:           _ulck   
81 [0x51]:           ret   


function: std#synced_list<std.io.task#job>.indexof[3990] params(2) in file: lib\support\/0.2.9//synced_list.sharp:195:8: note:  
		    def indexof(comparer: t, find_func: (t, t)(var)) : var {
		       ^

0 [0x0]: line: 196 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 197 istorel 0, fp+3   
4 [0x4]:           ipushl #3   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           loadval ecx   
12 [0xc]:           lt ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           movr cmt, ebx   
15 [0xf]:           jne 44   
16 [0x10]: line: 198 ipushl #2   
17 [0x11]:           movl 0   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           loadl ebx, fp+3   
22 [0x16]:           popobj2    
23 [0x17]:           movr adx, ebx   
24 [0x18]:           chklen adx   
25 [0x19]:           movnd adx   
26 [0x1a]:           pushobj   
27 [0x1b]:           pushl 1   
28 [0x1c]:           smov ebx, sp+[-2]   
29 [0x1d]:           calld ebx   
30 [0x1e]:           swap    
31 [0x1f]:           pop   
32 [0x20]:           loadval ebx   
33 [0x21]:           movr cmt, ebx   
34 [0x22]:           jne 40   
35 [0x23]: line: 199 loadl ebx, fp+3   
36 [0x24]:           return_val ebx   
37 [0x25]:           movl 0   
38 [0x26]:           _ulck   
39 [0x27]:           ret   
40 [0x28]:           nop   
41 [0x29]:           iaddl 1, fp@3   
43 [0x2b]:           jmp @4   
44 [0x2c]: line: 203 istorel -1, fp+0   
46 [0x2e]:           movl 0   
47 [0x2f]:           _ulck   
48 [0x30]:           ret   
49 [0x31]:           movl 0   
50 [0x32]:           _ulck   


function: std#synced_list<std.io.task#job>.linear_sort[3991] params(1) in file: lib\support\/0.2.9//synced_list.sharp:207:8: note:  
		    def linear_sort(swap: (t, t)(var)) {
		       ^

0 [0x0]: line: 208 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 209 istorel 0, fp+2   
4 [0x4]:           ipushl #2   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           loadval ecx   
12 [0xc]:           lt ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           movr cmt, ebx   
15 [0xf]:           jne 136   
16 [0x10]: line: 211 istorel 0, fp+3   
18 [0x12]:           ipushl #3   
19 [0x13]:           movl 0   
20 [0x14]:           movn #0   
22 [0x16]:           movi #0, adx   
24 [0x18]:           iaload ebx, adx   
25 [0x19]:           loadval ecx   
26 [0x1a]:           lt ecx, ebx   
27 [0x1b]:           movr ebx, cmt   
28 [0x1c]:           movr cmt, ebx   
29 [0x1d]:           jne 133   
30 [0x1e]: line: 212 ipushl #3   
31 [0x1f]:           movi #1, ebx   
33 [0x21]:           loadval ecx   
34 [0x22]:           add ecx, ebx -> ebx   
35 [0x23]:           rstore ebx   
36 [0x24]:           movl 0   
37 [0x25]:           movn #0   
39 [0x27]:           movi #0, adx   
41 [0x29]:           iaload ebx, adx   
42 [0x2a]:           loadval ecx   
43 [0x2b]:           lt ecx, ebx   
44 [0x2c]:           movr ebx, cmt   
45 [0x2d]:           movr cmt, ebx   
46 [0x2e]:           jne 129   
47 [0x2f]: line: 214 ipushl #1   
48 [0x30]:           movl 0   
49 [0x31]:           movn #1   
51 [0x33]:           pushobj   
52 [0x34]:           loadl ebx, fp+3   
53 [0x35]:           popobj2    
54 [0x36]:           movr adx, ebx   
55 [0x37]:           chklen adx   
56 [0x38]:           movnd adx   
57 [0x39]:           pushobj   
58 [0x3a]:           movl 0   
59 [0x3b]:           movn #1   
61 [0x3d]:           pushobj   
62 [0x3e]:           ipushl #3   
63 [0x3f]:           movi #1, ebx   
65 [0x41]:           loadval ecx   
66 [0x42]:           add ecx, ebx -> ebx   
67 [0x43]:           popobj2    
68 [0x44]:           movr adx, ebx   
69 [0x45]:           chklen adx   
70 [0x46]:           movnd adx   
71 [0x47]:           pushobj   
72 [0x48]:           smov ebx, sp+[-2]   
73 [0x49]:           calld ebx   
74 [0x4a]:           swap    
75 [0x4b]:           pop   
76 [0x4c]:           loadval ebx   
77 [0x4d]:           movr cmt, ebx   
78 [0x4e]:           jne 128   
79 [0x4f]: line: 215 movl 0   
80 [0x50]:           movn #1   
82 [0x52]:           pushobj   
83 [0x53]:           loadl ebx, fp+3   
84 [0x54]:           popobj2    
85 [0x55]:           movr adx, ebx   
86 [0x56]:           chklen adx   
87 [0x57]:           movnd adx   
88 [0x58]:           smovr_3 fp+4   
89 [0x59]: line: 216 movl 0   
90 [0x5a]:           movn #1   
92 [0x5c]:           pushobj   
93 [0x5d]:           ipushl #3   
94 [0x5e]:           movi #1, ebx   
96 [0x60]:           loadval ecx   
97 [0x61]:           add ecx, ebx -> ebx   
98 [0x62]:           popobj2    
99 [0x63]:           movr adx, ebx   
100 [0x64]:           chklen adx   
101 [0x65]:           movnd adx   
102 [0x66]:           pushobj   
103 [0x67]:           movl 0   
104 [0x68]:           movn #1   
106 [0x6a]:           pushobj   
107 [0x6b]:           loadl ebx, fp+3   
108 [0x6c]:           popobj2    
109 [0x6d]:           movr adx, ebx   
110 [0x6e]:           chklen adx   
111 [0x6f]:           movnd adx   
112 [0x70]:           popobj   
113 [0x71]: line: 217 pushl 4   
114 [0x72]:           movl 0   
115 [0x73]:           movn #1   
117 [0x75]:           pushobj   
118 [0x76]:           ipushl #3   
119 [0x77]:           movi #1, ebx   
121 [0x79]:           loadval ecx   
122 [0x7a]:           add ecx, ebx -> ebx   
123 [0x7b]:           popobj2    
124 [0x7c]:           movr adx, ebx   
125 [0x7d]:           chklen adx   
126 [0x7e]:           movnd adx   
127 [0x7f]:           popobj   
128 [0x80]:           nop   
129 [0x81]:           nop   
130 [0x82]:           iaddl 1, fp@3   
132 [0x84]:           jmp @18   
133 [0x85]:           iaddl 1, fp@2   
135 [0x87]:           jmp @4   
136 [0x88]:           movl 0   
137 [0x89]:           _ulck   
138 [0x8a]:           ret   


function: std#synced_list<std.io.task#job>.find[3992] params(2) in file: lib\support\/0.2.9//synced_list.sharp:225:8: note:  
		    def find(comparer : t, find_func: (t, t)(var)) : t {
		       ^

0 [0x0]: line: 226 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 227 istorel 0, fp+3   
4 [0x4]:           ipushl #3   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           loadval ecx   
12 [0xc]:           lt ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           movr cmt, ebx   
15 [0xf]:           jne 54   
16 [0x10]: line: 228 ipushl #2   
17 [0x11]:           movl 0   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           loadl ebx, fp+3   
22 [0x16]:           popobj2    
23 [0x17]:           movr adx, ebx   
24 [0x18]:           chklen adx   
25 [0x19]:           movnd adx   
26 [0x1a]:           pushobj   
27 [0x1b]:           pushl 1   
28 [0x1c]:           smov ebx, sp+[-2]   
29 [0x1d]:           calld ebx   
30 [0x1e]:           swap    
31 [0x1f]:           pop   
32 [0x20]:           loadval ebx   
33 [0x21]:           movr cmt, ebx   
34 [0x22]:           jne 50   
35 [0x23]: line: 229 movl 0   
36 [0x24]:           movn #1   
38 [0x26]:           pushobj   
39 [0x27]:           loadl ebx, fp+3   
40 [0x28]:           popobj2    
41 [0x29]:           movr adx, ebx   
42 [0x2a]:           chklen adx   
43 [0x2b]:           movnd adx   
44 [0x2c]:           pushobj   
45 [0x2d]:           movl 0   
46 [0x2e]:           _ulck   
47 [0x2f]:           popobj2    
48 [0x30]:           returnobj   
49 [0x31]:           ret   
50 [0x32]:           nop   
51 [0x33]:           iaddl 1, fp@3   
53 [0x35]:           jmp @4   
54 [0x36]: line: 233 movl 4   
55 [0x37]:           del   
56 [0x38]: line: 234 pushl 4   
57 [0x39]:           movl 0   
58 [0x3a]:           _ulck   
59 [0x3b]:           popobj2    
60 [0x3c]:           returnobj   
61 [0x3d]:           ret   
62 [0x3e]:           movl 0   
63 [0x3f]:           _ulck   


function: std#synced_list<std.io.task#job>.replace[3993] params(2) in file: lib\support\/0.2.9//synced_list.sharp:238:8: note:  
		    def replace(val: t, compare_fun: (t, t)(var)) : var {
		       ^

0 [0x0]: line: 239 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 240 istorel 0, fp+3   
4 [0x4]:           ipushl #3   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           movi #0, adx   
10 [0xa]:           iaload ebx, adx   
11 [0xb]:           loadval ecx   
12 [0xc]:           lt ecx, ebx   
13 [0xd]:           movr ebx, cmt   
14 [0xe]:           movr cmt, ebx   
15 [0xf]:           jne 55   
16 [0x10]: line: 241 ipushl #2   
17 [0x11]:           pushl 1   
18 [0x12]:           movl 0   
19 [0x13]:           movn #1   
21 [0x15]:           pushobj   
22 [0x16]:           loadl ebx, fp+3   
23 [0x17]:           popobj2    
24 [0x18]:           movr adx, ebx   
25 [0x19]:           chklen adx   
26 [0x1a]:           movnd adx   
27 [0x1b]:           pushobj   
28 [0x1c]:           smov ebx, sp+[-2]   
29 [0x1d]:           calld ebx   
30 [0x1e]:           swap    
31 [0x1f]:           pop   
32 [0x20]:           loadval ebx   
33 [0x21]:           movr cmt, ebx   
34 [0x22]:           jne 51   
35 [0x23]: line: 242 pushl 1   
36 [0x24]:           movl 0   
37 [0x25]:           movn #1   
39 [0x27]:           pushobj   
40 [0x28]:           loadl ebx, fp+3   
41 [0x29]:           popobj2    
42 [0x2a]:           movr adx, ebx   
43 [0x2b]:           chklen adx   
44 [0x2c]:           movnd adx   
45 [0x2d]:           popobj   
46 [0x2e]: line: 243 istorel 1, fp+0   
48 [0x30]:           movl 0   
49 [0x31]:           _ulck   
50 [0x32]:           ret   
51 [0x33]:           nop   
52 [0x34]:           iaddl 1, fp@3   
54 [0x36]:           jmp @4   
55 [0x37]: line: 247 istorel 0, fp+0   
57 [0x39]:           movl 0   
58 [0x3a]:           _ulck   
59 [0x3b]:           ret   
60 [0x3c]:           movl 0   
61 [0x3d]:           _ulck   


function: std#synced_list<std.io.task#job>.to_string[3994] params(0) in file: lib\support\/0.2.9//synced_list.sharp:251:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 252 movl 0   
1 [0x1]:           _lck    
2 [0x2]: line: 253 new_class @76 // std#string_builder   
4 [0x4]:           dup    
5 [0x5]:           call @3649 // <std#string_builder.string_builder>   
6 [0x6]:           popobj2    
7 [0x7]:           smovr_3 fp+1   
8 [0x8]: line: 255 pushl 1   
9 [0x9]:           newstr @562 // [    
10 [0xa]:           call @3645 // <std#string_builder.operator+=>   
11 [0xb]:           pop   
12 [0xc]: line: 256 istorel 0, fp+2   
14 [0xe]:           ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #0   
18 [0x12]:           movi #0, adx   
20 [0x14]:           iaload ebx, adx   
21 [0x15]:           loadval ecx   
22 [0x16]:           lt ecx, ebx   
23 [0x17]:           movr ebx, cmt   
24 [0x18]:           movr cmt, ebx   
25 [0x19]:           jne 64   
26 [0x1a]: line: 257 pushl 1   
27 [0x1b]:           movl 0   
28 [0x1c]:           movn #1   
30 [0x1e]:           pushobj   
31 [0x1f]:           loadl ebx, fp+2   
32 [0x20]:           popobj2    
33 [0x21]:           movr adx, ebx   
34 [0x22]:           chklen adx   
35 [0x23]:           movnd adx   
36 [0x24]:           pushobj   
37 [0x25]:           call @3641 // <std#string_builder.operator+=>   
38 [0x26]:           pop   
39 [0x27]: line: 259 ipushl #2   
40 [0x28]:           movi #1, ebx   
42 [0x2a]:           loadval ecx   
43 [0x2b]:           add ecx, ebx -> ebx   
44 [0x2c]:           rstore ebx   
45 [0x2d]:           movl 0   
46 [0x2e]:           movn #0   
48 [0x30]:           movi #0, adx   
50 [0x32]:           iaload ebx, adx   
51 [0x33]:           loadval ecx   
52 [0x34]:           lt ecx, ebx   
53 [0x35]:           movr ebx, cmt   
54 [0x36]:           movr cmt, ebx   
55 [0x37]:           jne 60   
56 [0x38]: line: 260 pushl 1   
57 [0x39]:           newstr @563 // ,    
58 [0x3a]:           call @3645 // <std#string_builder.operator+=>   
59 [0x3b]:           pop   
60 [0x3c]:           nop   
61 [0x3d]:           iaddl 1, fp@2   
63 [0x3f]:           jmp @14   
64 [0x40]: line: 264 pushl 1   
65 [0x41]:           newstr @564 //  ]   
66 [0x42]:           call @3645 // <std#string_builder.operator+=>   
67 [0x43]:           pop   
68 [0x44]: line: 265 pushl 1   
69 [0x45]:           call @3622 // <std#string_builder.to_string>   
70 [0x46]:           popobj2    
71 [0x47]:           pushobj   
72 [0x48]:           movl 0   
73 [0x49]:           _ulck   
74 [0x4a]:           popobj2    
75 [0x4b]:           returnobj   
76 [0x4c]:           ret   
77 [0x4d]:           movl 0   
78 [0x4e]:           _ulck   


function: std#synced_list<std.io.task#job>.out_of_bounds_msg[3995] params(1) in file: lib\support\/0.2.9//synced_list.sharp:269:16: note:  
		    private def out_of_bounds_msg(index: var) : string {
		               ^

0 [0x0]: line: 270 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           newstr @565 // Index:    
4 [0x4]:           call @3546 // <std#string.string>   
5 [0x5]:           ipushl #1   
6 [0x6]:           call @3578 // <std#string.operator+>   
7 [0x7]:           newstr @566 // , size:    
8 [0x8]:           call @3558 // <std#string.operator+>   
9 [0x9]:           movl 0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           iaload ebx, adx   
15 [0xf]:           rstore ebx   
16 [0x10]:           call @3578 // <std#string.operator+>   
17 [0x11]:           popobj2    
18 [0x12]:           returnobj   
19 [0x13]:           ret   


function: std#_nil_.set_instance[3996] params(1) in file: lib\support\/0.2.9//nil.sharp:11:44: note:  
		    static instance : _nil_ = new _nil_ { };
		                                           ^

0 [0x0]:         ret   


function: std.reflect#reflect.set_reflect_obj[3997] params(1) in file: lib\support\/0.2.9//reflect//reflection.sharp:5:35: note:  
		        get { return reflect_obj; }
		                                  ^

0 [0x0]:         ret   


function: std.reflect#reflect.get_reflect_obj[3998] params(0) in file: lib\support\/0.2.9//reflect//reflection.sharp:4:25: note:  
		    reflect_obj : object;
		                        ^

0 [0x0]: line: 5 movl 0   
1 [0x1]:         movn #0   
3 [0x3]:         returnobj   
4 [0x4]:         ret   


constructor: std#hashmap<main.frontend#compiler_error,std#string>.hashmap[3999] params(1) in file: lib\support\/0.2.9//hashmap.sharp:10:19: note:  
		    public hashmap(initialCapacity: var) {
		                  ^

0 [0x0]:         ldc ebx // 0.75   
1 [0x1]:         movl 0   
2 [0x2]:         movn #1   
4 [0x4]:         movi #0, adx   
6 [0x6]:         rmov adx, ebx   
7 [0x7]:         pushl 0   
8 [0x8]: line: 11 loadl ebx, fp+1   
9 [0x9]:          new_classarray ebx  // main.frontend#entry<main.frontend#compiler_error,std#string>[]   
11 [0xb]:          movl 0   
12 [0xc]:          movn #0   
14 [0xe]:          popobj   
15 [0xf]: line: 12 movl 0   
16 [0x10]:          movn #0   
18 [0x12]:          sizeof ebx   
19 [0x13]:          rstore ebx   
20 [0x14]:          movl 0   
21 [0x15]:          movn #1   
23 [0x17]:          movi #0, adx   
25 [0x19]:          iaload ebx, adx   
26 [0x1a]:          loadval ecx   
27 [0x1b]:          mul ecx, ebx -> ebx   
28 [0x1c]:          movl 0   
29 [0x1d]:          movn #2   
31 [0x1f]:          movi #0, adx   
33 [0x21]:          rmov adx, ebx   
34 [0x22]:          ret   


constructor: std#hashmap<main.frontend#compiler_error,std#string>.hashmap[4000] params(0) in file: lib\support\/0.2.9//hashmap.sharp:15:19: note:  
		    public hashmap() {
		                  ^

0 [0x0]:         ldc ebx // 0.75   
1 [0x1]:         movl 0   
2 [0x2]:         movn #1   
4 [0x4]:         movi #0, adx   
6 [0x6]:         rmov adx, ebx   
7 [0x7]:         pushl 0   
8 [0x8]: line: 16 movi #128, ebx   
10 [0xa]:          new_classarray ebx  // main.frontend#entry<main.frontend#compiler_error,std#string>[]   
12 [0xc]:          movl 0   
13 [0xd]:          movn #0   
15 [0xf]:          popobj   
16 [0x10]: line: 17 movi #96, ebx   
18 [0x12]:          movl 0   
19 [0x13]:          movn #2   
21 [0x15]:          movi #0, adx   
23 [0x17]:          rmov adx, ebx   
24 [0x18]:          ret   


function: std#hashmap<main.frontend#compiler_error,std#string>.set_threshold[4001] params(1) in file: lib\support\/0.2.9//hashmap.sharp:20:8: note:  
		    def set_threshold(threshold: var) {
		       ^

0 [0x0]: line: 21 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #1   
4 [0x4]:          loadval ebx   
5 [0x5]:          movi #0, adx   
7 [0x7]:          rmov adx, ebx   
8 [0x8]: line: 22 movl 0   
9 [0x9]:          movn #0   
11 [0xb]:          sizeof ebx   
12 [0xc]:          rstore ebx   
13 [0xd]:          loadl ebx, fp+1   
14 [0xe]:          loadval ecx   
15 [0xf]:          mul ecx, ebx -> ebx   
16 [0x10]:          movl 0   
17 [0x11]:          movn #2   
19 [0x13]:          movi #0, adx   
21 [0x15]:          rmov adx, ebx   
22 [0x16]:          ret   


function: std#hashmap<main.frontend#compiler_error,std#string>.hash[4002] params(1) in file: lib\support\/0.2.9//hashmap.sharp:25:8: note:  
		    def hash(key: k) : var {
		       ^

0 [0x0]: line: 26 pushl 1   
1 [0x1]:          call @2345 // <std#_object_.hash>   
2 [0x2]:          loadval ebx   
3 [0x3]:          rstore ebx   
4 [0x4]:          movl 0   
5 [0x5]:          movn #0   
7 [0x7]:          sizeof ebx   
8 [0x8]:          loadval ecx   
9 [0x9]:          mod ecx, ebx -> ebx   
10 [0xa]:          return_val ebx   
11 [0xb]:          ret   


function: std#hashmap<main.frontend#compiler_error,std#string>.resize[4003] params(0) in file: lib\support\/0.2.9//hashmap.sharp:29:8: note:  
		    def resize() {
		       ^

0 [0x0]: line: 30 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          smovr_3 fp+1   
4 [0x4]: line: 31 movl 1   
5 [0x5]:          sizeof ebx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          sizeof ebx   
9 [0x9]:          rstore ebx   
10 [0xa]:          movi #1, ebx   
12 [0xc]:          loadval ecx   
13 [0xd]:          shr ecx, ebx -> ebx   
14 [0xe]:          loadval ecx   
15 [0xf]:          add ecx, ebx -> ebx   
16 [0x10]:          new_classarray ebx  // main.frontend#entry<main.frontend#compiler_error,std#string>[]   
18 [0x12]:          movl 0   
19 [0x13]:          movn #0   
21 [0x15]:          popobj   
22 [0x16]: line: 32 movl 0   
23 [0x17]:          movn #0   
25 [0x19]:          sizeof ebx   
26 [0x1a]:          rstore ebx   
27 [0x1b]:          movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          movi #0, adx   
32 [0x20]:          iaload ebx, adx   
33 [0x21]:          loadval ecx   
34 [0x22]:          mul ecx, ebx -> ebx   
35 [0x23]:          movl 0   
36 [0x24]:          movn #2   
38 [0x26]:          movi #0, adx   
40 [0x28]:          rmov adx, ebx   
41 [0x29]: line: 33 istorel -1, fp+3   
43 [0x2b]:          pushl 1   
44 [0x2c]:          popl 4   
45 [0x2d]:          iaddl 1, fp@3   
47 [0x2f]:          movl 4   
48 [0x30]:          sizeof ecx   
49 [0x31]:          loadl ebx, fp+3   
50 [0x32]:          lt ebx, ecx   
51 [0x33]:          jne 100   
52 [0x34]:          movnd ebx   
53 [0x35]:          pushobj   
54 [0x36]:          popl 2   
55 [0x37]: line: 35 movl 2   
56 [0x38]:          checknull   
57 [0x39]:          not ebx, ebx   
58 [0x3a]:          movr cmt, ebx   
59 [0x3b]:          jne 99   
60 [0x3c]: line: 37 movl 2   
61 [0x3d]:          movn #2   
63 [0x3f]:          smovr_3 fp+5   
64 [0x40]: line: 38 pushl 0   
65 [0x41]:          movl 2   
66 [0x42]:          movn #0   
68 [0x44]:          pushobj   
69 [0x45]:          call @4002 // <std#hashmap<main.frontend#compiler_error,std#string>.hash>   
70 [0x46]:          ipopl 6   
71 [0x47]: line: 39 movl 0   
72 [0x48]:          movn #0   
74 [0x4a]:          pushobj   
75 [0x4b]:          loadl ebx, fp+6   
76 [0x4c]:          popobj2    
77 [0x4d]:          movr adx, ebx   
78 [0x4e]:          chklen adx   
79 [0x4f]:          movnd adx   
80 [0x50]:          pushobj   
81 [0x51]:          movl 2   
82 [0x52]:          movn #2   
84 [0x54]:          popobj   
85 [0x55]: line: 40 pushl 2   
86 [0x56]:          movl 0   
87 [0x57]:          movn #0   
89 [0x59]:          pushobj   
90 [0x5a]:          loadl ebx, fp+6   
91 [0x5b]:          popobj2    
92 [0x5c]:          movr adx, ebx   
93 [0x5d]:          chklen adx   
94 [0x5e]:          movnd adx   
95 [0x5f]:          popobj   
96 [0x60]: line: 41 movl 5   
97 [0x61]:          smovr_3 fp+2   
98 [0x62]:          jmp @55   
99 [0x63]:          jmp @45   
100 [0x64]: line: 45 pushnull    
101 [0x65]:          popobj2    
102 [0x66]:          smovr_3 fp+1   
103 [0x67]:          ret   


function: std#hashmap<main.frontend#compiler_error,std#string>.at[4004] params(1) in file: lib\support\/0.2.9//hashmap.sharp:48:15: note:  
		    public def at(key: k) : v {
		              ^

0 [0x0]: line: 49 pushl 0   
1 [0x1]:          pushl 1   
2 [0x2]:          call @4002 // <std#hashmap<main.frontend#compiler_error,std#string>.hash>   
3 [0x3]:          ipopl 2   
4 [0x4]: line: 50 istorel -1, fp+3   
6 [0x6]: line: 51 movl 4   
7 [0x7]:          del   
8 [0x8]: line: 53 movl 0   
9 [0x9]:          movn #0   
11 [0xb]:          pushobj   
12 [0xc]:          loadl ebx, fp+2   
13 [0xd]:          popobj2    
14 [0xe]:          movr adx, ebx   
15 [0xf]:          chklen adx   
16 [0x10]:          movnd adx   
17 [0x11]:          pushobj   
18 [0x12]:          pushnull    
19 [0x13]:          itest ebx   
20 [0x14]:          movr cmt, ebx   
21 [0x15]:          jne 26   
22 [0x16]: line: 54 movl 4   
23 [0x17]:          returnobj   
24 [0x18]:          ret   
25 [0x19]:          jmp @64   
26 [0x1a]: line: 56 movl 0   
27 [0x1b]:          movn #0   
29 [0x1d]:          pushobj   
30 [0x1e]:          loadl ebx, fp+2   
31 [0x1f]:          popobj2    
32 [0x20]:          movr adx, ebx   
33 [0x21]:          chklen adx   
34 [0x22]:          movnd adx   
35 [0x23]:          smovr_3 fp+5   
36 [0x24]: line: 57 movl 5   
37 [0x25]:          checknull   
38 [0x26]:          not ebx, ebx   
39 [0x27]:          movr cmt, ebx   
40 [0x28]:          jne 61   
41 [0x29]: line: 58 movl 5   
42 [0x2a]:          movn #0   
44 [0x2c]:          pushobj   
45 [0x2d]:          pushl 1   
46 [0x2e]:          call @1947 // <std#_enum_.operator==>   
47 [0x2f]:          loadval ebx   
48 [0x30]:          movr cmt, ebx   
49 [0x31]:          jne 55   
50 [0x32]: line: 59 movl 5   
51 [0x33]:          movn #1   
53 [0x35]:          returnobj   
54 [0x36]:          ret   
55 [0x37]:          nop   
56 [0x38]: line: 61 movl 5   
57 [0x39]:          movn #2   
59 [0x3b]:          smovr_3 fp+5   
60 [0x3c]:          jmp @36   
61 [0x3d]: line: 64 movl 4   
62 [0x3e]:          returnobj   
63 [0x3f]:          ret   
64 [0x40]:          nop   


function: std#hashmap<main.frontend#compiler_error,std#string>.put[4005] params(2) in file: lib\support\/0.2.9//hashmap.sharp:68:15: note:  
		    public def put(key: k, value: v) : var {
		              ^

0 [0x0]: line: 69 pushl 0   
1 [0x1]:          pushl 1   
2 [0x2]:          call @4002 // <std#hashmap<main.frontend#compiler_error,std#string>.hash>   
3 [0x3]:          ipopl 3   
4 [0x4]: line: 70 movl 4   
5 [0x5]:          del   
6 [0x6]: line: 71 movl 0   
7 [0x7]:          movn #0   
9 [0x9]:          pushobj   
10 [0xa]:          loadl ebx, fp+3   
11 [0xb]:          popobj2    
12 [0xc]:          movr adx, ebx   
13 [0xd]:          chklen adx   
14 [0xe]:          movnd adx   
15 [0xf]:          smovr_3 fp+5   
16 [0x10]: line: 73 movl 5   
17 [0x11]:          checknull   
18 [0x12]:          not ebx, ebx   
19 [0x13]:          skne ebx // pc = 27   
20 [0x14]:          movl 5   
21 [0x15]:          movn #0   
23 [0x17]:          pushobj   
24 [0x18]:          pushl 1   
25 [0x19]:          call @1945 // <std#_enum_.operator!=>   
26 [0x1a]:          loadval ebx   
27 [0x1b]:          movr cmt, ebx   
28 [0x1c]:          jne 36   
29 [0x1d]: line: 74 movl 5   
30 [0x1e]:          smovr_3 fp+4   
31 [0x1f]: line: 75 movl 5   
32 [0x20]:          movn #2   
34 [0x22]:          smovr_3 fp+5   
35 [0x23]:          jmp @16   
36 [0x24]: line: 78 movl 5   
37 [0x25]:          checknull   
38 [0x26]:          movr cmt, ebx   
39 [0x27]:          jne 85   
40 [0x28]: line: 79 movl 0   
41 [0x29]:          movn #3   
43 [0x2b]:          movi #0, adx   
45 [0x2d]:          iaload ebx, adx   
46 [0x2e]:          movr egx, ebx   
47 [0x2f]:          inc ebx   
48 [0x30]:          movi #0, adx   
50 [0x32]:          rmov adx, ebx   
51 [0x33]: line: 80 new_class @128 // main.frontend#entry<main.frontend#compiler_error,std#string>   
53 [0x35]:          dup    
54 [0x36]:          pushl 1   
55 [0x37]:          pushl 2   
56 [0x38]:          call @4103 // <main.frontend#entry<main.frontend#compiler_error,std#string>.entry>   
57 [0x39]:          popobj2    
58 [0x3a]:          smovr_3 fp+5   
59 [0x3b]: line: 81 movl 4   
60 [0x3c]:          checknull   
61 [0x3d]:          movr cmt, ebx   
62 [0x3e]:          jne 75   
63 [0x3f]: line: 82 pushl 5   
64 [0x40]:          movl 0   
65 [0x41]:          movn #0   
67 [0x43]:          pushobj   
68 [0x44]:          loadl ebx, fp+3   
69 [0x45]:          popobj2    
70 [0x46]:          movr adx, ebx   
71 [0x47]:          chklen adx   
72 [0x48]:          movnd adx   
73 [0x49]:          popobj   
74 [0x4a]:          jmp @80   
75 [0x4b]: line: 84 pushl 5   
76 [0x4c]:          movl 4   
77 [0x4d]:          movn #2   
79 [0x4f]:          popobj   
80 [0x50]:          nop   
81 [0x51]: line: 87 istorel 1, fp+0   
83 [0x53]:          ret   
84 [0x54]:          jmp @93   
85 [0x55]: line: 89 pushl 2   
86 [0x56]:          movl 5   
87 [0x57]:          movn #1   
89 [0x59]:          popobj   
90 [0x5a]: line: 90 istorel 0, fp+0   
92 [0x5c]:          ret   
93 [0x5d]:          nop   


function: std#hashmap<main.frontend#compiler_error,std#string>.remove[4006] params(1) in file: lib\support\/0.2.9//hashmap.sharp:94:15: note:  
		    public def remove(key: k) : var {
		              ^

0 [0x0]: line: 95 pushl 0   
1 [0x1]:          pushl 1   
2 [0x2]:          call @4002 // <std#hashmap<main.frontend#compiler_error,std#string>.hash>   
3 [0x3]:          ipopl 2   
4 [0x4]: line: 96 movl 0   
5 [0x5]:          movn #0   
7 [0x7]:          pushobj   
8 [0x8]:          loadl ebx, fp+2   
9 [0x9]:          popobj2    
10 [0xa]:          movr adx, ebx   
11 [0xb]:          chklen adx   
12 [0xc]:          movnd adx   
13 [0xd]:          pushobj   
14 [0xe]:          pushnull    
15 [0xf]:          itest ebx   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 96   
18 [0x12]: line: 97 movl 3   
19 [0x13]:          del   
20 [0x14]: line: 98 movl 0   
21 [0x15]:          movn #0   
23 [0x17]:          pushobj   
24 [0x18]:          loadl ebx, fp+2   
25 [0x19]:          popobj2    
26 [0x1a]:          movr adx, ebx   
27 [0x1b]:          chklen adx   
28 [0x1c]:          movnd adx   
29 [0x1d]:          smovr_3 fp+4   
30 [0x1e]: line: 99 movl 4   
31 [0x1f]:          checknull   
32 [0x20]:          not ebx, ebx   
33 [0x21]:          skne ebx // pc = 41   
34 [0x22]:          movl 4   
35 [0x23]:          movn #0   
37 [0x25]:          pushobj   
38 [0x26]:          pushl 1   
39 [0x27]:          call @1945 // <std#_enum_.operator!=>   
40 [0x28]:          loadval ebx   
41 [0x29]:          movr cmt, ebx   
42 [0x2a]:          jne 50   
43 [0x2b]: line: 100 movl 4   
44 [0x2c]:           smovr_3 fp+3   
45 [0x2d]: line: 101 movl 4   
46 [0x2e]:           movn #2   
48 [0x30]:           smovr_3 fp+4   
49 [0x31]:           jmp @30   
50 [0x32]: line: 104 movl 4   
51 [0x33]:           movn #0   
53 [0x35]:           pushobj   
54 [0x36]:           pushl 1   
55 [0x37]:           call @1947 // <std#_enum_.operator==>   
56 [0x38]:           loadval ebx   
57 [0x39]:           movr cmt, ebx   
58 [0x3a]:           jne 95   
59 [0x3b]: line: 105 movl 3   
60 [0x3c]:           checknull   
61 [0x3d]:           movr cmt, ebx   
62 [0x3e]:           jne 79   
63 [0x3f]: line: 106 movl 4   
64 [0x40]:           movn #2   
66 [0x42]:           smovr_3 fp+5   
67 [0x43]: line: 107 pushl 5   
68 [0x44]:           movl 0   
69 [0x45]:           movn #0   
71 [0x47]:           pushobj   
72 [0x48]:           loadl ebx, fp+2   
73 [0x49]:           popobj2    
74 [0x4a]:           movr adx, ebx   
75 [0x4b]:           chklen adx   
76 [0x4c]:           movnd adx   
77 [0x4d]:           popobj   
78 [0x4e]:           jmp @91   
79 [0x4f]: line: 109 movl 4   
80 [0x50]:           movn #2   
82 [0x52]:           smovr_3 fp+6   
83 [0x53]: line: 110 pushl 6   
84 [0x54]:           movl 3   
85 [0x55]:           movn #2   
87 [0x57]:           popobj   
88 [0x58]: line: 111 pushnull    
89 [0x59]:           popobj2    
90 [0x5a]:           smovr_3 fp+4   
91 [0x5b]:           nop   
92 [0x5c]: line: 114 istorel 1, fp+0   
94 [0x5e]:           ret   
95 [0x5f]:           nop   
96 [0x60]:           nop   
97 [0x61]: line: 118 istorel 0, fp+0   
99 [0x63]:           ret   


std#loopable<std#list<main.frontend#parse_error>>.get_elements[4007] params(0) in file: lib\support\/0.2.9//loopable.sharp:4:8: note:  
		    def get_elements() : t[];
		       ^



constructor: std#loopable<std#list<main.frontend#parse_error>>.loopable[4008] params(0) in file: lib\support\/0.2.9//loopable.sharp:3:10: note:  
		interface loopable<t> {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#list<std#list<main.frontend#parse_error>>.list[4009] params(0) in file: lib\support\/0.2.9//list.sharp:13:9: note:  
		    list() {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 14 movi #10, ebx   
3 [0x3]:          new_classarray ebx  // std#list<main.frontend#parse_error>[]   
5 [0x5]:          movl 0   
6 [0x6]:          movn #1   
8 [0x8]:          popobj   
9 [0x9]:          ret   


constructor: std#list<std#list<main.frontend#parse_error>>.list[4010] params(1) in file: lib\support\/0.2.9//list.sharp:17:9: note:  
		    list(starting_capacity: var) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 18 loadl ebx, fp+1   
2 [0x2]:          new_classarray ebx  // std#list<main.frontend#parse_error>[]   
4 [0x4]:          movl 0   
5 [0x5]:          movn #1   
7 [0x7]:          popobj   
8 [0x8]:          ret   


constructor: std#list<std#list<main.frontend#parse_error>>.list[4011] params(1) in file: lib\support\/0.2.9//list.sharp:21:9: note:  
		    list(initial_data: t[]) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 22 pushl 0   
2 [0x2]:          pushl 1   
3 [0x3]:          call @4022 // <std#list<std#list<main.frontend#parse_error>>.add_all>   
4 [0x4]:          ret   


function: std#list<std#list<main.frontend#parse_error>>.empty[4012] params(0) in file: lib\support\/0.2.9//list.sharp:25:8: note:  
		    def empty() := n_elements == 0;
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          return_val cmt   
12 [0xc]:          ret   


function: std#list<std#list<main.frontend#parse_error>>.set_compact[4013] params(1) in file: lib\support\/0.2.9//list.sharp:27:8: note:  
		    def set_compact(compact_array: var) {
		       ^

0 [0x0]: line: 28 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #2   
4 [0x4]:          loadval ebx   
5 [0x5]:          movi #0, adx   
7 [0x7]:          rmov adx, ebx   
8 [0x8]:          ret   


function: std#list<std#list<main.frontend#parse_error>>.get_elements[4014] params(0) in file: lib\support\/0.2.9//list.sharp:31:8: note:  
		    def get_elements() : t[] {
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 19   
14 [0xe]:          pushnull    
15 [0xf]:          popobj2    
16 [0x10]:          returnobj   
17 [0x11]:          ret   
18 [0x12]:          jmp @36   
19 [0x13]: line: 33 movl 0   
20 [0x14]:          movn #1   
22 [0x16]:          pushobj   
23 [0x17]:          istore 0   
25 [0x19]:          movl 0   
26 [0x1a]:          movn #0   
28 [0x1c]:          movi #0, adx   
30 [0x1e]:          iaload ebx, adx   
31 [0x1f]:          rstore ebx   
32 [0x20]:          call @2161 // <std.io#__srt_global.copy>   
33 [0x21]:          popobj2    
34 [0x22]:          returnobj   
35 [0x23]:          ret   
36 [0x24]:          nop   


overload function: std#list<std#list<main.frontend#parse_error>>.operator[[4015] params(1) in file: lib\support\/0.2.9//list.sharp:36:8: note:  
		    def operator[](index: var): t {
		       ^

0 [0x0]: line: 37 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 26   
18 [0x12]: line: 38 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:          dup    
21 [0x15]:          pushl 0   
22 [0x16]:          ipushl #1   
23 [0x17]:          call @4038 // <std#list<std#list<main.frontend#parse_error>>.out_of_bounds_msg>   
24 [0x18]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:          throw    
26 [0x1a]:          nop   
27 [0x1b]: line: 39 movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          pushobj   
31 [0x1f]:          loadl ebx, fp+1   
32 [0x20]:          popobj2    
33 [0x21]:          movr adx, ebx   
34 [0x22]:          chklen adx   
35 [0x23]:          movnd adx   
36 [0x24]:          returnobj   
37 [0x25]:          ret   


function: std#list<std#list<main.frontend#parse_error>>.at[4016] params(1) in file: lib\support\/0.2.9//list.sharp:42:8: note:  
		    def at(index: var): t {
		       ^

0 [0x0]: line: 43 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 26   
18 [0x12]: line: 44 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:          dup    
21 [0x15]:          pushl 0   
22 [0x16]:          ipushl #1   
23 [0x17]:          call @4038 // <std#list<std#list<main.frontend#parse_error>>.out_of_bounds_msg>   
24 [0x18]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:          throw    
26 [0x1a]:          nop   
27 [0x1b]: line: 45 movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          pushobj   
31 [0x1f]:          loadl ebx, fp+1   
32 [0x20]:          popobj2    
33 [0x21]:          movr adx, ebx   
34 [0x22]:          chklen adx   
35 [0x23]:          movnd adx   
36 [0x24]:          returnobj   
37 [0x25]:          ret   


function: std#list<std#list<main.frontend#parse_error>>.last[4017] params(0) in file: lib\support\/0.2.9//list.sharp:48:8: note:  
		    def last(): t {
		       ^

0 [0x0]: line: 49 pushl 0   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          rstore ebx   
8 [0x8]:          movi #1, ebx   
10 [0xa]:          loadval ecx   
11 [0xb]:          sub ecx, ebx -> ebx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @4016 // <std#list<std#list<main.frontend#parse_error>>.at>   
14 [0xe]:          popobj2    
15 [0xf]:          returnobj   
16 [0x10]:          ret   


function: std#list<std#list<main.frontend#parse_error>>.put[4018] params(2) in file: lib\support\/0.2.9//list.sharp:52:8: note:  
		    def put(index: var, element: t) : t {
		       ^

0 [0x0]: line: 53 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 26   
18 [0x12]: line: 54 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:          dup    
21 [0x15]:          pushl 0   
22 [0x16]:          ipushl #1   
23 [0x17]:          call @4038 // <std#list<std#list<main.frontend#parse_error>>.out_of_bounds_msg>   
24 [0x18]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:          throw    
26 [0x1a]:          nop   
27 [0x1b]: line: 56 movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          pushobj   
31 [0x1f]:          loadl ebx, fp+1   
32 [0x20]:          popobj2    
33 [0x21]:          movr adx, ebx   
34 [0x22]:          chklen adx   
35 [0x23]:          movnd adx   
36 [0x24]:          smovr_3 fp+3   
37 [0x25]: line: 57 pushl 2   
38 [0x26]:          movl 0   
39 [0x27]:          movn #1   
41 [0x29]:          pushobj   
42 [0x2a]:          loadl ebx, fp+1   
43 [0x2b]:          popobj2    
44 [0x2c]:          movr adx, ebx   
45 [0x2d]:          chklen adx   
46 [0x2e]:          movnd adx   
47 [0x2f]:          popobj   
48 [0x30]: line: 58 movl 3   
49 [0x31]:          returnobj   
50 [0x32]:          ret   


function: std#list<std#list<main.frontend#parse_error>>.expand[4019] params(0) in file: lib\support\/0.2.9//list.sharp:61:16: note:  
		    private def expand() {
		               ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #2   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 24   
8 [0x8]: line: 63 movl 0   
9 [0x9]:          movn #1   
11 [0xb]:          pushobj   
12 [0xc]:          movl 0   
13 [0xd]:          movn #1   
15 [0xf]:          sizeof ebx   
16 [0x10]:          rstore ebx   
17 [0x11]:          movi #128, ebx   
19 [0x13]:          loadval ecx   
20 [0x14]:          add ecx, ebx -> ebx   
21 [0x15]:          rstore ebx   
22 [0x16]:          call @2141 // <std.io#__srt_global.realloc>   
23 [0x17]:          jmp @51   
24 [0x18]: line: 65 movl 0   
25 [0x19]:          movn #1   
27 [0x1b]:          pushobj   
28 [0x1c]:          movl 0   
29 [0x1d]:          movn #1   
31 [0x1f]:          sizeof ebx   
32 [0x20]:          rstore ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #1   
36 [0x24]:          sizeof ebx   
37 [0x25]:          rstore ebx   
38 [0x26]:          movi #4, ebx   
40 [0x28]:          loadval ecx   
41 [0x29]:          shr ecx, ebx -> ebx   
42 [0x2a]:          loadval ecx   
43 [0x2b]:          add ecx, ebx -> ebx   
44 [0x2c]:          rstore ebx   
45 [0x2d]:          movi #128, ebx   
47 [0x2f]:          loadval ecx   
48 [0x30]:          add ecx, ebx -> ebx   
49 [0x31]:          rstore ebx   
50 [0x32]:          call @2141 // <std.io#__srt_global.realloc>   
51 [0x33]:          nop   
52 [0x34]:          ret   


function: std#list<std#list<main.frontend#parse_error>>.clear[4020] params(0) in file: lib\support\/0.2.9//list.sharp:68:8: note:  
		    def clear() {
		       ^

0 [0x0]: line: 69 movi #10, ebx   
2 [0x2]:          new_classarray ebx  // std#list<main.frontend#parse_error>[]   
4 [0x4]:          movl 0   
5 [0x5]:          movn #1   
7 [0x7]:          popobj   
8 [0x8]: line: 70 movi #0, ebx   
10 [0xa]:          movl 0   
11 [0xb]:          movn #0   
13 [0xd]:          movi #0, adx   
15 [0xf]:          rmov adx, ebx   
16 [0x10]:          ret   


function: std#list<std#list<main.frontend#parse_error>>.add_all[4021] params(1) in file: lib\support\/0.2.9//list.sharp:73:8: note:  
		    def add_all(lst: list<t>) {
		       ^

0 [0x0]: line: 74 movl 1   
1 [0x1]:          movn #1   
3 [0x3]:          pushobj   
4 [0x4]:          istore 0   
6 [0x6]:          movl 1   
7 [0x7]:          movn #0   
9 [0x9]:          movi #0, adx   
11 [0xb]:          iaload ebx, adx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @2161 // <std.io#__srt_global.copy>   
14 [0xe]:          popobj2    
15 [0xf]:          movi #112, cmt   
17 [0x11]:          cast cmt   
18 [0x12]:          pushobj   
19 [0x13]:          movl 0   
20 [0x14]:          movn #1   
22 [0x16]:          popobj   
23 [0x17]: line: 75 movl 1   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          iaload ebx, adx   
29 [0x1d]:          movl 0   
30 [0x1e]:          movn #0   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          ret   


function: std#list<std#list<main.frontend#parse_error>>.add_all[4022] params(1) in file: lib\support\/0.2.9//list.sharp:78:8: note:  
		    def add_all(lst: t[]) {
		       ^

0 [0x0]: line: 79 movl 1   
1 [0x1]:          checknull   
2 [0x2]:          not ebx, ebx   
3 [0x3]:          movr cmt, ebx   
4 [0x4]:          jne 30   
5 [0x5]: line: 80 pushl 1   
6 [0x6]:          istore 0   
8 [0x8]:          movl 1   
9 [0x9]:          sizeof ebx   
10 [0xa]:          rstore ebx   
11 [0xb]:          call @2161 // <std.io#__srt_global.copy>   
12 [0xc]:          popobj2    
13 [0xd]:          movi #112, cmt   
15 [0xf]:          cast cmt   
16 [0x10]:          pushobj   
17 [0x11]:          movl 0   
18 [0x12]:          movn #1   
20 [0x14]:          popobj   
21 [0x15]: line: 81 movl 1   
22 [0x16]:          sizeof ebx   
23 [0x17]:          movl 0   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          rmov adx, ebx   
29 [0x1d]:          jmp @46   
30 [0x1e]: line: 83 movi #0, ebx   
32 [0x20]:          movl 0   
33 [0x21]:          movn #0   
35 [0x23]:          movi #0, adx   
37 [0x25]:          rmov adx, ebx   
38 [0x26]: line: 84 movi #10, ebx   
40 [0x28]:          new_classarray ebx  // std#list<main.frontend#parse_error>[]   
42 [0x2a]:          movl 0   
43 [0x2b]:          movn #1   
45 [0x2d]:          popobj   
46 [0x2e]:          nop   
47 [0x2f]:          ret   


function: std#list<std#list<main.frontend#parse_error>>.add[4023] params(1) in file: lib\support\/0.2.9//list.sharp:88:8: note:  
		    def add(element: t) {
		       ^

0 [0x0]: line: 89 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 0   
8 [0x8]:          movn #1   
10 [0xa]:          sizeof ebx   
11 [0xb]:          loadval ecx   
12 [0xc]:          gte ecx, ebx   
13 [0xd]:          movr ebx, cmt   
14 [0xe]:          movr cmt, ebx   
15 [0xf]:          jne 18   
16 [0x10]: line: 90 pushl 0   
17 [0x11]:          call @4019 // <std#list<std#list<main.frontend#parse_error>>.expand>   
18 [0x12]:          nop   
19 [0x13]: line: 91 pushl 1   
20 [0x14]:          movl 0   
21 [0x15]:          movn #1   
23 [0x17]:          pushobj   
24 [0x18]:          movl 0   
25 [0x19]:          movn #0   
27 [0x1b]:          movi #0, adx   
29 [0x1d]:          iaload ebx, adx   
30 [0x1e]:          movr egx, ebx   
31 [0x1f]:          inc ebx   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          movr ebx, egx   
36 [0x24]:          popobj2    
37 [0x25]:          movr adx, ebx   
38 [0x26]:          chklen adx   
39 [0x27]:          movnd adx   
40 [0x28]:          popobj   
41 [0x29]:          ret   


function: std#list<std#list<main.frontend#parse_error>>.indexof[4024] params(1) in file: lib\support\/0.2.9//list.sharp:94:8: note:  
		    def indexof(element: t) : var {
		       ^

0 [0x0]: line: 95 istorel 0, fp+2   
2 [0x2]:          ipushl #2   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          movi #0, adx   
8 [0x8]:          iaload ebx, adx   
9 [0x9]:          loadval ecx   
10 [0xa]:          lt ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 35   
14 [0xe]: line: 96 pushl 1   
15 [0xf]:          movl 0   
16 [0x10]:          movn #1   
18 [0x12]:          pushobj   
19 [0x13]:          loadl ebx, fp+2   
20 [0x14]:          popobj2    
21 [0x15]:          movr adx, ebx   
22 [0x16]:          chklen adx   
23 [0x17]:          movnd adx   
24 [0x18]:          pushobj   
25 [0x19]:          itest ebx   
26 [0x1a]:          movr cmt, ebx   
27 [0x1b]:          jne 31   
28 [0x1c]: line: 97 loadl ebx, fp+2   
29 [0x1d]:          return_val ebx   
30 [0x1e]:          ret   
31 [0x1f]:          nop   
32 [0x20]:          iaddl 1, fp@2   
34 [0x22]:          jmp @2   
35 [0x23]: line: 101 istorel -1, fp+0   
37 [0x25]:           ret   


function: std#list<std#list<main.frontend#parse_error>>.pop_back[4025] params(0) in file: lib\support\/0.2.9//list.sharp:104:8: note:  
		    def pop_back() {
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #0, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 38   
14 [0xe]: line: 106 movl 1   
15 [0xf]:           del   
16 [0x10]: line: 107 pushl 1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           movl 0   
22 [0x16]:           movn #0   
24 [0x18]:           movi #0, adx   
26 [0x1a]:           iaload ebx, adx   
27 [0x1b]:           movr egx, ebx   
28 [0x1c]:           dec ebx   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           rmov adx, ebx   
32 [0x20]:           movr ebx, egx   
33 [0x21]:           popobj2    
34 [0x22]:           movr adx, ebx   
35 [0x23]:           chklen adx   
36 [0x24]:           movnd adx   
37 [0x25]:           popobj   
38 [0x26]:           nop   
39 [0x27]:           ret   


function: std#list<std#list<main.frontend#parse_error>>.pop_last[4026] params(0) in file: lib\support\/0.2.9//list.sharp:111:8: note:  
		    def pop_last() : t {
		       ^

0 [0x0]: line: 112 pushl 0   
1 [0x1]:           call @4017 // <std#list<std#list<main.frontend#parse_error>>.last>   
2 [0x2]:           popobj2    
3 [0x3]:           smovr_3 fp+1   
4 [0x4]: line: 113 pushl 0   
5 [0x5]:           call @4025 // <std#list<std#list<main.frontend#parse_error>>.pop_back>   
6 [0x6]: line: 114 movl 1   
7 [0x7]:           returnobj   
8 [0x8]:           ret   


function: std#list<std#list<main.frontend#parse_error>>.pop_first[4027] params(0) in file: lib\support\/0.2.9//list.sharp:117:8: note:  
		    def pop_first() : t {
		       ^

0 [0x0]: line: 118 movl 0   
1 [0x1]:           movn #1   
3 [0x3]:           pushobj   
4 [0x4]:           movi #0, ebx   
6 [0x6]:           popobj2    
7 [0x7]:           movr adx, ebx   
8 [0x8]:           chklen adx   
9 [0x9]:           movnd adx   
10 [0xa]:           smovr_3 fp+1   
11 [0xb]: line: 119 pushl 0   
12 [0xc]:           istore 0   
14 [0xe]:           call @4035 // <std#list<std#list<main.frontend#parse_error>>.remove_at>   
15 [0xf]: line: 120 movl 1   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#list<std#list<main.frontend#parse_error>>.size[4028] params(0) in file: lib\support\/0.2.9//list.sharp:123:8: note:  
		    def size() := n_elements;
		       ^

0 [0x0]: line: 123 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std#list<std#list<main.frontend#parse_error>>.insert[4029] params(2) in file: lib\support\/0.2.9//list.sharp:125:8: note:  
		    def insert(index: var, element: t) {
		       ^

0 [0x0]: line: 126 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gt ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 26   
18 [0x12]: line: 127 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:           dup    
21 [0x15]:           pushl 0   
22 [0x16]:           ipushl #1   
23 [0x17]:           call @4038 // <std#list<std#list<main.frontend#parse_error>>.out_of_bounds_msg>   
24 [0x18]:           call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:           throw    
26 [0x1a]:           nop   
27 [0x1b]: line: 129 movl 0   
28 [0x1c]:           movn #0   
30 [0x1e]:           movi #0, adx   
32 [0x20]:           iaload ebx, adx   
33 [0x21]:           rstore ebx   
34 [0x22]:           movi #0, ebx   
36 [0x24]:           loadval ecx   
37 [0x25]:           test ecx, ebx   
38 [0x26]:           movr ebx, cmt   
39 [0x27]:           movr cmt, ebx   
40 [0x28]:           jne 45   
41 [0x29]: line: 130 pushl 0   
42 [0x2a]:           pushl 2   
43 [0x2b]:           call @4023 // <std#list<std#list<main.frontend#parse_error>>.add>   
44 [0x2c]:           jmp @134   
45 [0x2d]: line: 132 movl 0   
46 [0x2e]:           movn #0   
48 [0x30]:           movi #0, adx   
50 [0x32]:           iaload ebx, adx   
51 [0x33]:           rstore ebx   
52 [0x34]:           movl 0   
53 [0x35]:           movn #1   
55 [0x37]:           sizeof ebx   
56 [0x38]:           loadval ecx   
57 [0x39]:           gte ecx, ebx   
58 [0x3a]:           movr ebx, cmt   
59 [0x3b]:           movr cmt, ebx   
60 [0x3c]:           jne 63   
61 [0x3d]: line: 133 pushl 0   
62 [0x3e]:           call @4019 // <std#list<std#list<main.frontend#parse_error>>.expand>   
63 [0x3f]:           nop   
64 [0x40]: line: 134 movl 0   
65 [0x41]:           movn #0   
67 [0x43]:           movi #0, adx   
69 [0x45]:           iaload ebx, adx   
70 [0x46]:           movr egx, ebx   
71 [0x47]:           inc ebx   
72 [0x48]:           movi #0, adx   
74 [0x4a]:           rmov adx, ebx   
75 [0x4b]: line: 135 movl 0   
76 [0x4c]:           movn #0   
78 [0x4e]:           movi #0, adx   
80 [0x50]:           iaload ebx, adx   
81 [0x51]:           rstore ebx   
82 [0x52]:           movi #1, ebx   
84 [0x54]:           loadval ecx   
85 [0x55]:           sub ecx, ebx -> ebx   
86 [0x56]:           smovr_2 ebx, fp+3   
87 [0x57]:           ipushl #3   
88 [0x58]:           loadl ebx, fp+1   
89 [0x59]:           loadval ecx   
90 [0x5a]:           gt ecx, ebx   
91 [0x5b]:           movr ebx, cmt   
92 [0x5c]:           movr cmt, ebx   
93 [0x5d]:           jne 123   
94 [0x5e]: line: 136 movl 0   
95 [0x5f]:           movn #1   
97 [0x61]:           pushobj   
98 [0x62]:           ipushl #3   
99 [0x63]:           movi #1, ebx   
101 [0x65]:           loadval ecx   
102 [0x66]:           sub ecx, ebx -> ebx   
103 [0x67]:           popobj2    
104 [0x68]:           movr adx, ebx   
105 [0x69]:           chklen adx   
106 [0x6a]:           movnd adx   
107 [0x6b]:           pushobj   
108 [0x6c]:           movl 0   
109 [0x6d]:           movn #1   
111 [0x6f]:           pushobj   
112 [0x70]:           loadl ebx, fp+3   
113 [0x71]:           popobj2    
114 [0x72]:           movr adx, ebx   
115 [0x73]:           chklen adx   
116 [0x74]:           movnd adx   
117 [0x75]:           popobj   
118 [0x76]:           loadl ebx, fp+3   
119 [0x77]:           movr egx, ebx   
120 [0x78]:           dec ebx   
121 [0x79]:           smovr_2 ebx, fp+3   
122 [0x7a]:           jmp @87   
123 [0x7b]: line: 137 pushl 2   
124 [0x7c]:           movl 0   
125 [0x7d]:           movn #1   
127 [0x7f]:           pushobj   
128 [0x80]:           loadl ebx, fp+1   
129 [0x81]:           popobj2    
130 [0x82]:           movr adx, ebx   
131 [0x83]:           chklen adx   
132 [0x84]:           movnd adx   
133 [0x85]:           popobj   
134 [0x86]:           nop   
135 [0x87]:           ret   


function: std#list<std#list<main.frontend#parse_error>>.find[4030] params(2) in file: lib\support\/0.2.9//list.sharp:141:8: note:  
		    def find(comparer : t, find_func: (t, t)(var)) : t {
		       ^

0 [0x0]: line: 142 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 48   
14 [0xe]: line: 143 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 44   
33 [0x21]: line: 144 movl 0   
34 [0x22]:           movn #1   
36 [0x24]:           pushobj   
37 [0x25]:           loadl ebx, fp+3   
38 [0x26]:           popobj2    
39 [0x27]:           movr adx, ebx   
40 [0x28]:           chklen adx   
41 [0x29]:           movnd adx   
42 [0x2a]:           returnobj   
43 [0x2b]:           ret   
44 [0x2c]:           nop   
45 [0x2d]:           iaddl 1, fp@3   
47 [0x2f]:           jmp @2   
48 [0x30]: line: 148 movl 4   
49 [0x31]:           del   
50 [0x32]: line: 149 movl 4   
51 [0x33]:           returnobj   
52 [0x34]:           ret   


function: std#list<std#list<main.frontend#parse_error>>.remove[4031] params(1) in file: lib\support\/0.2.9//list.sharp:152:8: note:  
		    def remove(val: t) {
		       ^

0 [0x0]: line: 153 istorel 0, fp+2   
2 [0x2]:           ipushl #2   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 36   
14 [0xe]: line: 154 pushl 1   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+2   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           itest ebx   
26 [0x1a]:           movr cmt, ebx   
27 [0x1b]:           jne 32   
28 [0x1c]: line: 155 pushl 0   
29 [0x1d]:           ipushl #2   
30 [0x1e]:           call @4035 // <std#list<std#list<main.frontend#parse_error>>.remove_at>   
31 [0x1f]: line: 156 ret   
32 [0x20]:           nop   
33 [0x21]:           iaddl 1, fp@2   
35 [0x23]:           jmp @2   
36 [0x24]:           ret   


function: std#list<std#list<main.frontend#parse_error>>.remove[4032] params(2) in file: lib\support\/0.2.9//list.sharp:161:8: note:  
		    def remove(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 162 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 41   
14 [0xe]: line: 163 ipushl #2   
15 [0xf]:           pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           movnd adx   
25 [0x19]:           pushobj   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 37   
33 [0x21]: line: 164 pushl 0   
34 [0x22]:           ipushl #3   
35 [0x23]:           call @4035 // <std#list<std#list<main.frontend#parse_error>>.remove_at>   
36 [0x24]: line: 165 ret   
37 [0x25]:           nop   
38 [0x26]:           iaddl 1, fp@3   
40 [0x28]:           jmp @2   
41 [0x29]:           ret   


function: std#list<std#list<main.frontend#parse_error>>.replace[4033] params(2) in file: lib\support\/0.2.9//list.sharp:170:8: note:  
		    def replace(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 171 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 49   
14 [0xe]: line: 172 ipushl #2   
15 [0xf]:           pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           movnd adx   
25 [0x19]:           pushobj   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 45   
33 [0x21]: line: 173 pushl 1   
34 [0x22]:           movl 0   
35 [0x23]:           movn #1   
37 [0x25]:           pushobj   
38 [0x26]:           loadl ebx, fp+3   
39 [0x27]:           popobj2    
40 [0x28]:           movr adx, ebx   
41 [0x29]:           chklen adx   
42 [0x2a]:           movnd adx   
43 [0x2b]:           popobj   
44 [0x2c]: line: 174 ret   
45 [0x2d]:           nop   
46 [0x2e]:           iaddl 1, fp@3   
48 [0x30]:           jmp @2   
49 [0x31]:           ret   


function: std#list<std#list<main.frontend#parse_error>>.linear_sort[4034] params(1) in file: lib\support\/0.2.9//list.sharp:179:8: note:  
		    def linear_sort(swap: (t, t)(var)) {
		       ^

0 [0x0]: line: 180 istorel 0, fp+2   
2 [0x2]:           ipushl #2   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 134   
14 [0xe]: line: 182 istorel 0, fp+3   
16 [0x10]:           ipushl #3   
17 [0x11]:           movl 0   
18 [0x12]:           movn #0   
20 [0x14]:           movi #0, adx   
22 [0x16]:           iaload ebx, adx   
23 [0x17]:           loadval ecx   
24 [0x18]:           lt ecx, ebx   
25 [0x19]:           movr ebx, cmt   
26 [0x1a]:           movr cmt, ebx   
27 [0x1b]:           jne 131   
28 [0x1c]: line: 183 ipushl #3   
29 [0x1d]:           movi #1, ebx   
31 [0x1f]:           loadval ecx   
32 [0x20]:           add ecx, ebx -> ebx   
33 [0x21]:           rstore ebx   
34 [0x22]:           movl 0   
35 [0x23]:           movn #0   
37 [0x25]:           movi #0, adx   
39 [0x27]:           iaload ebx, adx   
40 [0x28]:           loadval ecx   
41 [0x29]:           lt ecx, ebx   
42 [0x2a]:           movr ebx, cmt   
43 [0x2b]:           movr cmt, ebx   
44 [0x2c]:           jne 127   
45 [0x2d]: line: 185 ipushl #1   
46 [0x2e]:           movl 0   
47 [0x2f]:           movn #1   
49 [0x31]:           pushobj   
50 [0x32]:           loadl ebx, fp+3   
51 [0x33]:           popobj2    
52 [0x34]:           movr adx, ebx   
53 [0x35]:           chklen adx   
54 [0x36]:           movnd adx   
55 [0x37]:           pushobj   
56 [0x38]:           movl 0   
57 [0x39]:           movn #1   
59 [0x3b]:           pushobj   
60 [0x3c]:           ipushl #3   
61 [0x3d]:           movi #1, ebx   
63 [0x3f]:           loadval ecx   
64 [0x40]:           add ecx, ebx -> ebx   
65 [0x41]:           popobj2    
66 [0x42]:           movr adx, ebx   
67 [0x43]:           chklen adx   
68 [0x44]:           movnd adx   
69 [0x45]:           pushobj   
70 [0x46]:           smov ebx, sp+[-2]   
71 [0x47]:           calld ebx   
72 [0x48]:           swap    
73 [0x49]:           pop   
74 [0x4a]:           loadval ebx   
75 [0x4b]:           movr cmt, ebx   
76 [0x4c]:           jne 126   
77 [0x4d]: line: 186 movl 0   
78 [0x4e]:           movn #1   
80 [0x50]:           pushobj   
81 [0x51]:           loadl ebx, fp+3   
82 [0x52]:           popobj2    
83 [0x53]:           movr adx, ebx   
84 [0x54]:           chklen adx   
85 [0x55]:           movnd adx   
86 [0x56]:           smovr_3 fp+4   
87 [0x57]: line: 187 movl 0   
88 [0x58]:           movn #1   
90 [0x5a]:           pushobj   
91 [0x5b]:           ipushl #3   
92 [0x5c]:           movi #1, ebx   
94 [0x5e]:           loadval ecx   
95 [0x5f]:           add ecx, ebx -> ebx   
96 [0x60]:           popobj2    
97 [0x61]:           movr adx, ebx   
98 [0x62]:           chklen adx   
99 [0x63]:           movnd adx   
100 [0x64]:           pushobj   
101 [0x65]:           movl 0   
102 [0x66]:           movn #1   
104 [0x68]:           pushobj   
105 [0x69]:           loadl ebx, fp+3   
106 [0x6a]:           popobj2    
107 [0x6b]:           movr adx, ebx   
108 [0x6c]:           chklen adx   
109 [0x6d]:           movnd adx   
110 [0x6e]:           popobj   
111 [0x6f]: line: 188 pushl 4   
112 [0x70]:           movl 0   
113 [0x71]:           movn #1   
115 [0x73]:           pushobj   
116 [0x74]:           ipushl #3   
117 [0x75]:           movi #1, ebx   
119 [0x77]:           loadval ecx   
120 [0x78]:           add ecx, ebx -> ebx   
121 [0x79]:           popobj2    
122 [0x7a]:           movr adx, ebx   
123 [0x7b]:           chklen adx   
124 [0x7c]:           movnd adx   
125 [0x7d]:           popobj   
126 [0x7e]:           nop   
127 [0x7f]:           nop   
128 [0x80]:           iaddl 1, fp@3   
130 [0x82]:           jmp @16   
131 [0x83]:           iaddl 1, fp@2   
133 [0x85]:           jmp @2   
134 [0x86]:           ret   


function: std#list<std#list<main.frontend#parse_error>>.remove_at[4035] params(1) in file: lib\support\/0.2.9//list.sharp:195:8: note:  
		    def remove_at(index: var) {
		       ^

0 [0x0]: line: 196 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gte ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 26   
18 [0x12]: line: 197 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:           dup    
21 [0x15]:           pushl 0   
22 [0x16]:           ipushl #1   
23 [0x17]:           call @4038 // <std#list<std#list<main.frontend#parse_error>>.out_of_bounds_msg>   
24 [0x18]:           call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:           throw    
26 [0x1a]:           nop   
27 [0x1b]: line: 199 movl 0   
28 [0x1c]:           movn #0   
30 [0x1e]:           movi #0, adx   
32 [0x20]:           iaload ebx, adx   
33 [0x21]:           rstore ebx   
34 [0x22]:           loadl ebx, fp+1   
35 [0x23]:           loadval ecx   
36 [0x24]:           sub ecx, ebx -> ebx   
37 [0x25]:           rstore ebx   
38 [0x26]:           movi #1, ebx   
40 [0x28]:           loadval ecx   
41 [0x29]:           sub ecx, ebx -> ebx   
42 [0x2a]:           smovr_2 ebx, fp+2   
43 [0x2b]: line: 200 ipushl #2   
44 [0x2c]:           movi #0, ebx   
46 [0x2e]:           loadval ecx   
47 [0x2f]:           gt ecx, ebx   
48 [0x30]:           movr ebx, cmt   
49 [0x31]:           movr cmt, ebx   
50 [0x32]:           jne 74   
51 [0x33]: line: 201 movl 0   
52 [0x34]:           movn #1   
54 [0x36]:           pushobj   
55 [0x37]:           movl 0   
56 [0x38]:           movn #1   
58 [0x3a]:           pushobj   
59 [0x3b]:           ipushl #1   
60 [0x3c]:           ipushl #1   
61 [0x3d]:           movi #1, ebx   
63 [0x3f]:           loadval ecx   
64 [0x40]:           add ecx, ebx -> ebx   
65 [0x41]:           rstore ebx   
66 [0x42]:           movl 0   
67 [0x43]:           movn #0   
69 [0x45]:           movi #0, adx   
71 [0x47]:           iaload ebx, adx   
72 [0x48]:           rstore ebx   
73 [0x49]:           call @2151 // <std.io#__srt_global.memcopy>   
74 [0x4a]:           nop   
75 [0x4b]: line: 203 pushl 0   
76 [0x4c]:           call @4025 // <std#list<std#list<main.frontend#parse_error>>.pop_back>   
77 [0x4d]:           ret   


function: std#list<std#list<main.frontend#parse_error>>.indexof[4036] params(2) in file: lib\support\/0.2.9//list.sharp:206:8: note:  
		    def indexof(comparer: t, find_func: (t, t)(var)) : var {
		       ^

0 [0x0]: line: 207 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 40   
14 [0xe]: line: 208 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 36   
33 [0x21]: line: 209 loadl ebx, fp+3   
34 [0x22]:           return_val ebx   
35 [0x23]:           ret   
36 [0x24]:           nop   
37 [0x25]:           iaddl 1, fp@3   
39 [0x27]:           jmp @2   
40 [0x28]: line: 213 istorel -1, fp+0   
42 [0x2a]:           ret   


function: std#list<std#list<main.frontend#parse_error>>.to_string[4037] params(0) in file: lib\support\/0.2.9//list.sharp:216:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 217 new_class @76 // std#string_builder   
2 [0x2]:           dup    
3 [0x3]:           call @3649 // <std#string_builder.string_builder>   
4 [0x4]:           popobj2    
5 [0x5]:           smovr_3 fp+1   
6 [0x6]: line: 219 pushl 1   
7 [0x7]:           newstr @562 // [    
8 [0x8]:           call @3645 // <std#string_builder.operator+=>   
9 [0x9]:           pop   
10 [0xa]: line: 220 istorel 0, fp+2   
12 [0xc]:           ipushl #2   
13 [0xd]:           movl 0   
14 [0xe]:           movn #0   
16 [0x10]:           movi #0, adx   
18 [0x12]:           iaload ebx, adx   
19 [0x13]:           loadval ecx   
20 [0x14]:           lt ecx, ebx   
21 [0x15]:           movr ebx, cmt   
22 [0x16]:           movr cmt, ebx   
23 [0x17]:           jne 62   
24 [0x18]: line: 221 pushl 1   
25 [0x19]:           movl 0   
26 [0x1a]:           movn #1   
28 [0x1c]:           pushobj   
29 [0x1d]:           loadl ebx, fp+2   
30 [0x1e]:           popobj2    
31 [0x1f]:           movr adx, ebx   
32 [0x20]:           chklen adx   
33 [0x21]:           movnd adx   
34 [0x22]:           pushobj   
35 [0x23]:           call @3641 // <std#string_builder.operator+=>   
36 [0x24]:           pop   
37 [0x25]: line: 223 ipushl #2   
38 [0x26]:           movi #1, ebx   
40 [0x28]:           loadval ecx   
41 [0x29]:           add ecx, ebx -> ebx   
42 [0x2a]:           rstore ebx   
43 [0x2b]:           movl 0   
44 [0x2c]:           movn #0   
46 [0x2e]:           movi #0, adx   
48 [0x30]:           iaload ebx, adx   
49 [0x31]:           loadval ecx   
50 [0x32]:           lt ecx, ebx   
51 [0x33]:           movr ebx, cmt   
52 [0x34]:           movr cmt, ebx   
53 [0x35]:           jne 58   
54 [0x36]: line: 224 pushl 1   
55 [0x37]:           newstr @563 // ,    
56 [0x38]:           call @3645 // <std#string_builder.operator+=>   
57 [0x39]:           pop   
58 [0x3a]:           nop   
59 [0x3b]:           iaddl 1, fp@2   
61 [0x3d]:           jmp @12   
62 [0x3e]: line: 228 pushl 1   
63 [0x3f]:           newstr @564 //  ]   
64 [0x40]:           call @3645 // <std#string_builder.operator+=>   
65 [0x41]:           pop   
66 [0x42]: line: 229 pushl 1   
67 [0x43]:           call @3622 // <std#string_builder.to_string>   
68 [0x44]:           popobj2    
69 [0x45]:           returnobj   
70 [0x46]:           ret   


function: std#list<std#list<main.frontend#parse_error>>.out_of_bounds_msg[4038] params(1) in file: lib\support\/0.2.9//list.sharp:232:16: note:  
		    private def out_of_bounds_msg(index: var) : string {
		               ^

0 [0x0]: line: 233 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           newstr @565 // Index:    
4 [0x4]:           call @3546 // <std#string.string>   
5 [0x5]:           ipushl #1   
6 [0x6]:           call @3578 // <std#string.operator+>   
7 [0x7]:           newstr @566 // , size:    
8 [0x8]:           call @3558 // <std#string.operator+>   
9 [0x9]:           movl 0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           iaload ebx, adx   
15 [0xf]:           rstore ebx   
16 [0x10]:           call @3578 // <std#string.operator+>   
17 [0x11]:           popobj2    
18 [0x12]:           returnobj   
19 [0x13]:           ret   


std#loopable<main.frontend.tokenizer#token>.get_elements[4039] params(0) in file: lib\support\/0.2.9//loopable.sharp:4:8: note:  
		    def get_elements() : t[];
		       ^



constructor: std#loopable<main.frontend.tokenizer#token>.loopable[4040] params(0) in file: lib\support\/0.2.9//loopable.sharp:3:10: note:  
		interface loopable<t> {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#list<main.frontend.tokenizer#token>.list[4041] params(0) in file: lib\support\/0.2.9//list.sharp:13:9: note:  
		    list() {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 14 movi #10, ebx   
3 [0x3]:          new_classarray ebx  // main.frontend.tokenizer#token[]   
5 [0x5]:          movl 0   
6 [0x6]:          movn #1   
8 [0x8]:          popobj   
9 [0x9]:          ret   


constructor: std#list<main.frontend.tokenizer#token>.list[4042] params(1) in file: lib\support\/0.2.9//list.sharp:17:9: note:  
		    list(starting_capacity: var) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 18 loadl ebx, fp+1   
2 [0x2]:          new_classarray ebx  // main.frontend.tokenizer#token[]   
4 [0x4]:          movl 0   
5 [0x5]:          movn #1   
7 [0x7]:          popobj   
8 [0x8]:          ret   


constructor: std#list<main.frontend.tokenizer#token>.list[4043] params(1) in file: lib\support\/0.2.9//list.sharp:21:9: note:  
		    list(initial_data: t[]) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 22 pushl 0   
2 [0x2]:          pushl 1   
3 [0x3]:          call @4054 // <std#list<main.frontend.tokenizer#token>.add_all>   
4 [0x4]:          ret   


function: std#list<main.frontend.tokenizer#token>.empty[4044] params(0) in file: lib\support\/0.2.9//list.sharp:25:8: note:  
		    def empty() := n_elements == 0;
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          return_val cmt   
12 [0xc]:          ret   


function: std#list<main.frontend.tokenizer#token>.set_compact[4045] params(1) in file: lib\support\/0.2.9//list.sharp:27:8: note:  
		    def set_compact(compact_array: var) {
		       ^

0 [0x0]: line: 28 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #2   
4 [0x4]:          loadval ebx   
5 [0x5]:          movi #0, adx   
7 [0x7]:          rmov adx, ebx   
8 [0x8]:          ret   


function: std#list<main.frontend.tokenizer#token>.get_elements[4046] params(0) in file: lib\support\/0.2.9//list.sharp:31:8: note:  
		    def get_elements() : t[] {
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 19   
14 [0xe]:          pushnull    
15 [0xf]:          popobj2    
16 [0x10]:          returnobj   
17 [0x11]:          ret   
18 [0x12]:          jmp @36   
19 [0x13]: line: 33 movl 0   
20 [0x14]:          movn #1   
22 [0x16]:          pushobj   
23 [0x17]:          istore 0   
25 [0x19]:          movl 0   
26 [0x1a]:          movn #0   
28 [0x1c]:          movi #0, adx   
30 [0x1e]:          iaload ebx, adx   
31 [0x1f]:          rstore ebx   
32 [0x20]:          call @2161 // <std.io#__srt_global.copy>   
33 [0x21]:          popobj2    
34 [0x22]:          returnobj   
35 [0x23]:          ret   
36 [0x24]:          nop   


overload function: std#list<main.frontend.tokenizer#token>.operator[[4047] params(1) in file: lib\support\/0.2.9//list.sharp:36:8: note:  
		    def operator[](index: var): t {
		       ^

0 [0x0]: line: 37 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 26   
18 [0x12]: line: 38 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:          dup    
21 [0x15]:          pushl 0   
22 [0x16]:          ipushl #1   
23 [0x17]:          call @4070 // <std#list<main.frontend.tokenizer#token>.out_of_bounds_msg>   
24 [0x18]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:          throw    
26 [0x1a]:          nop   
27 [0x1b]: line: 39 movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          pushobj   
31 [0x1f]:          loadl ebx, fp+1   
32 [0x20]:          popobj2    
33 [0x21]:          movr adx, ebx   
34 [0x22]:          chklen adx   
35 [0x23]:          movnd adx   
36 [0x24]:          returnobj   
37 [0x25]:          ret   


function: std#list<main.frontend.tokenizer#token>.at[4048] params(1) in file: lib\support\/0.2.9//list.sharp:42:8: note:  
		    def at(index: var): t {
		       ^

0 [0x0]: line: 43 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 26   
18 [0x12]: line: 44 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:          dup    
21 [0x15]:          pushl 0   
22 [0x16]:          ipushl #1   
23 [0x17]:          call @4070 // <std#list<main.frontend.tokenizer#token>.out_of_bounds_msg>   
24 [0x18]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:          throw    
26 [0x1a]:          nop   
27 [0x1b]: line: 45 movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          pushobj   
31 [0x1f]:          loadl ebx, fp+1   
32 [0x20]:          popobj2    
33 [0x21]:          movr adx, ebx   
34 [0x22]:          chklen adx   
35 [0x23]:          movnd adx   
36 [0x24]:          returnobj   
37 [0x25]:          ret   


function: std#list<main.frontend.tokenizer#token>.last[4049] params(0) in file: lib\support\/0.2.9//list.sharp:48:8: note:  
		    def last(): t {
		       ^

0 [0x0]: line: 49 pushl 0   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          rstore ebx   
8 [0x8]:          movi #1, ebx   
10 [0xa]:          loadval ecx   
11 [0xb]:          sub ecx, ebx -> ebx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @4048 // <std#list<main.frontend.tokenizer#token>.at>   
14 [0xe]:          popobj2    
15 [0xf]:          returnobj   
16 [0x10]:          ret   


function: std#list<main.frontend.tokenizer#token>.put[4050] params(2) in file: lib\support\/0.2.9//list.sharp:52:8: note:  
		    def put(index: var, element: t) : t {
		       ^

0 [0x0]: line: 53 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 26   
18 [0x12]: line: 54 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:          dup    
21 [0x15]:          pushl 0   
22 [0x16]:          ipushl #1   
23 [0x17]:          call @4070 // <std#list<main.frontend.tokenizer#token>.out_of_bounds_msg>   
24 [0x18]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:          throw    
26 [0x1a]:          nop   
27 [0x1b]: line: 56 movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          pushobj   
31 [0x1f]:          loadl ebx, fp+1   
32 [0x20]:          popobj2    
33 [0x21]:          movr adx, ebx   
34 [0x22]:          chklen adx   
35 [0x23]:          movnd adx   
36 [0x24]:          smovr_3 fp+3   
37 [0x25]: line: 57 pushl 2   
38 [0x26]:          movl 0   
39 [0x27]:          movn #1   
41 [0x29]:          pushobj   
42 [0x2a]:          loadl ebx, fp+1   
43 [0x2b]:          popobj2    
44 [0x2c]:          movr adx, ebx   
45 [0x2d]:          chklen adx   
46 [0x2e]:          movnd adx   
47 [0x2f]:          popobj   
48 [0x30]: line: 58 movl 3   
49 [0x31]:          returnobj   
50 [0x32]:          ret   


function: std#list<main.frontend.tokenizer#token>.expand[4051] params(0) in file: lib\support\/0.2.9//list.sharp:61:16: note:  
		    private def expand() {
		               ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #2   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 24   
8 [0x8]: line: 63 movl 0   
9 [0x9]:          movn #1   
11 [0xb]:          pushobj   
12 [0xc]:          movl 0   
13 [0xd]:          movn #1   
15 [0xf]:          sizeof ebx   
16 [0x10]:          rstore ebx   
17 [0x11]:          movi #128, ebx   
19 [0x13]:          loadval ecx   
20 [0x14]:          add ecx, ebx -> ebx   
21 [0x15]:          rstore ebx   
22 [0x16]:          call @2141 // <std.io#__srt_global.realloc>   
23 [0x17]:          jmp @51   
24 [0x18]: line: 65 movl 0   
25 [0x19]:          movn #1   
27 [0x1b]:          pushobj   
28 [0x1c]:          movl 0   
29 [0x1d]:          movn #1   
31 [0x1f]:          sizeof ebx   
32 [0x20]:          rstore ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #1   
36 [0x24]:          sizeof ebx   
37 [0x25]:          rstore ebx   
38 [0x26]:          movi #4, ebx   
40 [0x28]:          loadval ecx   
41 [0x29]:          shr ecx, ebx -> ebx   
42 [0x2a]:          loadval ecx   
43 [0x2b]:          add ecx, ebx -> ebx   
44 [0x2c]:          rstore ebx   
45 [0x2d]:          movi #128, ebx   
47 [0x2f]:          loadval ecx   
48 [0x30]:          add ecx, ebx -> ebx   
49 [0x31]:          rstore ebx   
50 [0x32]:          call @2141 // <std.io#__srt_global.realloc>   
51 [0x33]:          nop   
52 [0x34]:          ret   


function: std#list<main.frontend.tokenizer#token>.clear[4052] params(0) in file: lib\support\/0.2.9//list.sharp:68:8: note:  
		    def clear() {
		       ^

0 [0x0]: line: 69 movi #10, ebx   
2 [0x2]:          new_classarray ebx  // main.frontend.tokenizer#token[]   
4 [0x4]:          movl 0   
5 [0x5]:          movn #1   
7 [0x7]:          popobj   
8 [0x8]: line: 70 movi #0, ebx   
10 [0xa]:          movl 0   
11 [0xb]:          movn #0   
13 [0xd]:          movi #0, adx   
15 [0xf]:          rmov adx, ebx   
16 [0x10]:          ret   


function: std#list<main.frontend.tokenizer#token>.add_all[4053] params(1) in file: lib\support\/0.2.9//list.sharp:73:8: note:  
		    def add_all(lst: list<t>) {
		       ^

0 [0x0]: line: 74 movl 1   
1 [0x1]:          movn #1   
3 [0x3]:          pushobj   
4 [0x4]:          istore 0   
6 [0x6]:          movl 1   
7 [0x7]:          movn #0   
9 [0x9]:          movi #0, adx   
11 [0xb]:          iaload ebx, adx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @2161 // <std.io#__srt_global.copy>   
14 [0xe]:          popobj2    
15 [0xf]:          movi #90, cmt   
17 [0x11]:          cast cmt   
18 [0x12]:          pushobj   
19 [0x13]:          movl 0   
20 [0x14]:          movn #1   
22 [0x16]:          popobj   
23 [0x17]: line: 75 movl 1   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          iaload ebx, adx   
29 [0x1d]:          movl 0   
30 [0x1e]:          movn #0   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          ret   


function: std#list<main.frontend.tokenizer#token>.add_all[4054] params(1) in file: lib\support\/0.2.9//list.sharp:78:8: note:  
		    def add_all(lst: t[]) {
		       ^

0 [0x0]: line: 79 movl 1   
1 [0x1]:          checknull   
2 [0x2]:          not ebx, ebx   
3 [0x3]:          movr cmt, ebx   
4 [0x4]:          jne 30   
5 [0x5]: line: 80 pushl 1   
6 [0x6]:          istore 0   
8 [0x8]:          movl 1   
9 [0x9]:          sizeof ebx   
10 [0xa]:          rstore ebx   
11 [0xb]:          call @2161 // <std.io#__srt_global.copy>   
12 [0xc]:          popobj2    
13 [0xd]:          movi #90, cmt   
15 [0xf]:          cast cmt   
16 [0x10]:          pushobj   
17 [0x11]:          movl 0   
18 [0x12]:          movn #1   
20 [0x14]:          popobj   
21 [0x15]: line: 81 movl 1   
22 [0x16]:          sizeof ebx   
23 [0x17]:          movl 0   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          rmov adx, ebx   
29 [0x1d]:          jmp @46   
30 [0x1e]: line: 83 movi #0, ebx   
32 [0x20]:          movl 0   
33 [0x21]:          movn #0   
35 [0x23]:          movi #0, adx   
37 [0x25]:          rmov adx, ebx   
38 [0x26]: line: 84 movi #10, ebx   
40 [0x28]:          new_classarray ebx  // main.frontend.tokenizer#token[]   
42 [0x2a]:          movl 0   
43 [0x2b]:          movn #1   
45 [0x2d]:          popobj   
46 [0x2e]:          nop   
47 [0x2f]:          ret   


function: std#list<main.frontend.tokenizer#token>.add[4055] params(1) in file: lib\support\/0.2.9//list.sharp:88:8: note:  
		    def add(element: t) {
		       ^

0 [0x0]: line: 89 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 0   
8 [0x8]:          movn #1   
10 [0xa]:          sizeof ebx   
11 [0xb]:          loadval ecx   
12 [0xc]:          gte ecx, ebx   
13 [0xd]:          movr ebx, cmt   
14 [0xe]:          movr cmt, ebx   
15 [0xf]:          jne 18   
16 [0x10]: line: 90 pushl 0   
17 [0x11]:          call @4051 // <std#list<main.frontend.tokenizer#token>.expand>   
18 [0x12]:          nop   
19 [0x13]: line: 91 pushl 1   
20 [0x14]:          movl 0   
21 [0x15]:          movn #1   
23 [0x17]:          pushobj   
24 [0x18]:          movl 0   
25 [0x19]:          movn #0   
27 [0x1b]:          movi #0, adx   
29 [0x1d]:          iaload ebx, adx   
30 [0x1e]:          movr egx, ebx   
31 [0x1f]:          inc ebx   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          movr ebx, egx   
36 [0x24]:          popobj2    
37 [0x25]:          movr adx, ebx   
38 [0x26]:          chklen adx   
39 [0x27]:          movnd adx   
40 [0x28]:          popobj   
41 [0x29]:          ret   


function: std#list<main.frontend.tokenizer#token>.indexof[4056] params(1) in file: lib\support\/0.2.9//list.sharp:94:8: note:  
		    def indexof(element: t) : var {
		       ^

0 [0x0]: line: 95 istorel 0, fp+2   
2 [0x2]:          ipushl #2   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          movi #0, adx   
8 [0x8]:          iaload ebx, adx   
9 [0x9]:          loadval ecx   
10 [0xa]:          lt ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 36   
14 [0xe]: line: 96 pushl 1   
15 [0xf]:          movl 0   
16 [0x10]:          movn #1   
18 [0x12]:          pushobj   
19 [0x13]:          loadl ebx, fp+2   
20 [0x14]:          popobj2    
21 [0x15]:          movr adx, ebx   
22 [0x16]:          chklen adx   
23 [0x17]:          movnd adx   
24 [0x18]:          pushobj   
25 [0x19]:          call @3791 // <main.frontend.tokenizer#token.operator==>   
26 [0x1a]:          loadval ebx   
27 [0x1b]:          movr cmt, ebx   
28 [0x1c]:          jne 32   
29 [0x1d]: line: 97 loadl ebx, fp+2   
30 [0x1e]:          return_val ebx   
31 [0x1f]:          ret   
32 [0x20]:          nop   
33 [0x21]:          iaddl 1, fp@2   
35 [0x23]:          jmp @2   
36 [0x24]: line: 101 istorel -1, fp+0   
38 [0x26]:           ret   


function: std#list<main.frontend.tokenizer#token>.pop_back[4057] params(0) in file: lib\support\/0.2.9//list.sharp:104:8: note:  
		    def pop_back() {
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #0, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 38   
14 [0xe]: line: 106 movl 1   
15 [0xf]:           del   
16 [0x10]: line: 107 pushl 1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           movl 0   
22 [0x16]:           movn #0   
24 [0x18]:           movi #0, adx   
26 [0x1a]:           iaload ebx, adx   
27 [0x1b]:           movr egx, ebx   
28 [0x1c]:           dec ebx   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           rmov adx, ebx   
32 [0x20]:           movr ebx, egx   
33 [0x21]:           popobj2    
34 [0x22]:           movr adx, ebx   
35 [0x23]:           chklen adx   
36 [0x24]:           movnd adx   
37 [0x25]:           popobj   
38 [0x26]:           nop   
39 [0x27]:           ret   


function: std#list<main.frontend.tokenizer#token>.pop_last[4058] params(0) in file: lib\support\/0.2.9//list.sharp:111:8: note:  
		    def pop_last() : t {
		       ^

0 [0x0]: line: 112 pushl 0   
1 [0x1]:           call @4049 // <std#list<main.frontend.tokenizer#token>.last>   
2 [0x2]:           popobj2    
3 [0x3]:           smovr_3 fp+1   
4 [0x4]: line: 113 pushl 0   
5 [0x5]:           call @4057 // <std#list<main.frontend.tokenizer#token>.pop_back>   
6 [0x6]: line: 114 movl 1   
7 [0x7]:           returnobj   
8 [0x8]:           ret   


function: std#list<main.frontend.tokenizer#token>.pop_first[4059] params(0) in file: lib\support\/0.2.9//list.sharp:117:8: note:  
		    def pop_first() : t {
		       ^

0 [0x0]: line: 118 movl 0   
1 [0x1]:           movn #1   
3 [0x3]:           pushobj   
4 [0x4]:           movi #0, ebx   
6 [0x6]:           popobj2    
7 [0x7]:           movr adx, ebx   
8 [0x8]:           chklen adx   
9 [0x9]:           movnd adx   
10 [0xa]:           smovr_3 fp+1   
11 [0xb]: line: 119 pushl 0   
12 [0xc]:           istore 0   
14 [0xe]:           call @4067 // <std#list<main.frontend.tokenizer#token>.remove_at>   
15 [0xf]: line: 120 movl 1   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#list<main.frontend.tokenizer#token>.size[4060] params(0) in file: lib\support\/0.2.9//list.sharp:123:8: note:  
		    def size() := n_elements;
		       ^

0 [0x0]: line: 123 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std#list<main.frontend.tokenizer#token>.insert[4061] params(2) in file: lib\support\/0.2.9//list.sharp:125:8: note:  
		    def insert(index: var, element: t) {
		       ^

0 [0x0]: line: 126 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gt ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 26   
18 [0x12]: line: 127 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:           dup    
21 [0x15]:           pushl 0   
22 [0x16]:           ipushl #1   
23 [0x17]:           call @4070 // <std#list<main.frontend.tokenizer#token>.out_of_bounds_msg>   
24 [0x18]:           call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:           throw    
26 [0x1a]:           nop   
27 [0x1b]: line: 129 movl 0   
28 [0x1c]:           movn #0   
30 [0x1e]:           movi #0, adx   
32 [0x20]:           iaload ebx, adx   
33 [0x21]:           rstore ebx   
34 [0x22]:           movi #0, ebx   
36 [0x24]:           loadval ecx   
37 [0x25]:           test ecx, ebx   
38 [0x26]:           movr ebx, cmt   
39 [0x27]:           movr cmt, ebx   
40 [0x28]:           jne 45   
41 [0x29]: line: 130 pushl 0   
42 [0x2a]:           pushl 2   
43 [0x2b]:           call @4055 // <std#list<main.frontend.tokenizer#token>.add>   
44 [0x2c]:           jmp @134   
45 [0x2d]: line: 132 movl 0   
46 [0x2e]:           movn #0   
48 [0x30]:           movi #0, adx   
50 [0x32]:           iaload ebx, adx   
51 [0x33]:           rstore ebx   
52 [0x34]:           movl 0   
53 [0x35]:           movn #1   
55 [0x37]:           sizeof ebx   
56 [0x38]:           loadval ecx   
57 [0x39]:           gte ecx, ebx   
58 [0x3a]:           movr ebx, cmt   
59 [0x3b]:           movr cmt, ebx   
60 [0x3c]:           jne 63   
61 [0x3d]: line: 133 pushl 0   
62 [0x3e]:           call @4051 // <std#list<main.frontend.tokenizer#token>.expand>   
63 [0x3f]:           nop   
64 [0x40]: line: 134 movl 0   
65 [0x41]:           movn #0   
67 [0x43]:           movi #0, adx   
69 [0x45]:           iaload ebx, adx   
70 [0x46]:           movr egx, ebx   
71 [0x47]:           inc ebx   
72 [0x48]:           movi #0, adx   
74 [0x4a]:           rmov adx, ebx   
75 [0x4b]: line: 135 movl 0   
76 [0x4c]:           movn #0   
78 [0x4e]:           movi #0, adx   
80 [0x50]:           iaload ebx, adx   
81 [0x51]:           rstore ebx   
82 [0x52]:           movi #1, ebx   
84 [0x54]:           loadval ecx   
85 [0x55]:           sub ecx, ebx -> ebx   
86 [0x56]:           smovr_2 ebx, fp+3   
87 [0x57]:           ipushl #3   
88 [0x58]:           loadl ebx, fp+1   
89 [0x59]:           loadval ecx   
90 [0x5a]:           gt ecx, ebx   
91 [0x5b]:           movr ebx, cmt   
92 [0x5c]:           movr cmt, ebx   
93 [0x5d]:           jne 123   
94 [0x5e]: line: 136 movl 0   
95 [0x5f]:           movn #1   
97 [0x61]:           pushobj   
98 [0x62]:           ipushl #3   
99 [0x63]:           movi #1, ebx   
101 [0x65]:           loadval ecx   
102 [0x66]:           sub ecx, ebx -> ebx   
103 [0x67]:           popobj2    
104 [0x68]:           movr adx, ebx   
105 [0x69]:           chklen adx   
106 [0x6a]:           movnd adx   
107 [0x6b]:           pushobj   
108 [0x6c]:           movl 0   
109 [0x6d]:           movn #1   
111 [0x6f]:           pushobj   
112 [0x70]:           loadl ebx, fp+3   
113 [0x71]:           popobj2    
114 [0x72]:           movr adx, ebx   
115 [0x73]:           chklen adx   
116 [0x74]:           movnd adx   
117 [0x75]:           popobj   
118 [0x76]:           loadl ebx, fp+3   
119 [0x77]:           movr egx, ebx   
120 [0x78]:           dec ebx   
121 [0x79]:           smovr_2 ebx, fp+3   
122 [0x7a]:           jmp @87   
123 [0x7b]: line: 137 pushl 2   
124 [0x7c]:           movl 0   
125 [0x7d]:           movn #1   
127 [0x7f]:           pushobj   
128 [0x80]:           loadl ebx, fp+1   
129 [0x81]:           popobj2    
130 [0x82]:           movr adx, ebx   
131 [0x83]:           chklen adx   
132 [0x84]:           movnd adx   
133 [0x85]:           popobj   
134 [0x86]:           nop   
135 [0x87]:           ret   


function: std#list<main.frontend.tokenizer#token>.find[4062] params(2) in file: lib\support\/0.2.9//list.sharp:141:8: note:  
		    def find(comparer : t, find_func: (t, t)(var)) : t {
		       ^

0 [0x0]: line: 142 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 48   
14 [0xe]: line: 143 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 44   
33 [0x21]: line: 144 movl 0   
34 [0x22]:           movn #1   
36 [0x24]:           pushobj   
37 [0x25]:           loadl ebx, fp+3   
38 [0x26]:           popobj2    
39 [0x27]:           movr adx, ebx   
40 [0x28]:           chklen adx   
41 [0x29]:           movnd adx   
42 [0x2a]:           returnobj   
43 [0x2b]:           ret   
44 [0x2c]:           nop   
45 [0x2d]:           iaddl 1, fp@3   
47 [0x2f]:           jmp @2   
48 [0x30]: line: 148 movl 4   
49 [0x31]:           del   
50 [0x32]: line: 149 movl 4   
51 [0x33]:           returnobj   
52 [0x34]:           ret   


function: std#list<main.frontend.tokenizer#token>.remove[4063] params(1) in file: lib\support\/0.2.9//list.sharp:152:8: note:  
		    def remove(val: t) {
		       ^

0 [0x0]: line: 153 istorel 0, fp+2   
2 [0x2]:           ipushl #2   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 37   
14 [0xe]: line: 154 pushl 1   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+2   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           call @3791 // <main.frontend.tokenizer#token.operator==>   
26 [0x1a]:           loadval ebx   
27 [0x1b]:           movr cmt, ebx   
28 [0x1c]:           jne 33   
29 [0x1d]: line: 155 pushl 0   
30 [0x1e]:           ipushl #2   
31 [0x1f]:           call @4067 // <std#list<main.frontend.tokenizer#token>.remove_at>   
32 [0x20]: line: 156 ret   
33 [0x21]:           nop   
34 [0x22]:           iaddl 1, fp@2   
36 [0x24]:           jmp @2   
37 [0x25]:           ret   


function: std#list<main.frontend.tokenizer#token>.remove[4064] params(2) in file: lib\support\/0.2.9//list.sharp:161:8: note:  
		    def remove(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 162 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 41   
14 [0xe]: line: 163 ipushl #2   
15 [0xf]:           pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           movnd adx   
25 [0x19]:           pushobj   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 37   
33 [0x21]: line: 164 pushl 0   
34 [0x22]:           ipushl #3   
35 [0x23]:           call @4067 // <std#list<main.frontend.tokenizer#token>.remove_at>   
36 [0x24]: line: 165 ret   
37 [0x25]:           nop   
38 [0x26]:           iaddl 1, fp@3   
40 [0x28]:           jmp @2   
41 [0x29]:           ret   


function: std#list<main.frontend.tokenizer#token>.replace[4065] params(2) in file: lib\support\/0.2.9//list.sharp:170:8: note:  
		    def replace(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 171 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 49   
14 [0xe]: line: 172 ipushl #2   
15 [0xf]:           pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           movnd adx   
25 [0x19]:           pushobj   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 45   
33 [0x21]: line: 173 pushl 1   
34 [0x22]:           movl 0   
35 [0x23]:           movn #1   
37 [0x25]:           pushobj   
38 [0x26]:           loadl ebx, fp+3   
39 [0x27]:           popobj2    
40 [0x28]:           movr adx, ebx   
41 [0x29]:           chklen adx   
42 [0x2a]:           movnd adx   
43 [0x2b]:           popobj   
44 [0x2c]: line: 174 ret   
45 [0x2d]:           nop   
46 [0x2e]:           iaddl 1, fp@3   
48 [0x30]:           jmp @2   
49 [0x31]:           ret   


function: std#list<main.frontend.tokenizer#token>.linear_sort[4066] params(1) in file: lib\support\/0.2.9//list.sharp:179:8: note:  
		    def linear_sort(swap: (t, t)(var)) {
		       ^

0 [0x0]: line: 180 istorel 0, fp+2   
2 [0x2]:           ipushl #2   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 134   
14 [0xe]: line: 182 istorel 0, fp+3   
16 [0x10]:           ipushl #3   
17 [0x11]:           movl 0   
18 [0x12]:           movn #0   
20 [0x14]:           movi #0, adx   
22 [0x16]:           iaload ebx, adx   
23 [0x17]:           loadval ecx   
24 [0x18]:           lt ecx, ebx   
25 [0x19]:           movr ebx, cmt   
26 [0x1a]:           movr cmt, ebx   
27 [0x1b]:           jne 131   
28 [0x1c]: line: 183 ipushl #3   
29 [0x1d]:           movi #1, ebx   
31 [0x1f]:           loadval ecx   
32 [0x20]:           add ecx, ebx -> ebx   
33 [0x21]:           rstore ebx   
34 [0x22]:           movl 0   
35 [0x23]:           movn #0   
37 [0x25]:           movi #0, adx   
39 [0x27]:           iaload ebx, adx   
40 [0x28]:           loadval ecx   
41 [0x29]:           lt ecx, ebx   
42 [0x2a]:           movr ebx, cmt   
43 [0x2b]:           movr cmt, ebx   
44 [0x2c]:           jne 127   
45 [0x2d]: line: 185 ipushl #1   
46 [0x2e]:           movl 0   
47 [0x2f]:           movn #1   
49 [0x31]:           pushobj   
50 [0x32]:           loadl ebx, fp+3   
51 [0x33]:           popobj2    
52 [0x34]:           movr adx, ebx   
53 [0x35]:           chklen adx   
54 [0x36]:           movnd adx   
55 [0x37]:           pushobj   
56 [0x38]:           movl 0   
57 [0x39]:           movn #1   
59 [0x3b]:           pushobj   
60 [0x3c]:           ipushl #3   
61 [0x3d]:           movi #1, ebx   
63 [0x3f]:           loadval ecx   
64 [0x40]:           add ecx, ebx -> ebx   
65 [0x41]:           popobj2    
66 [0x42]:           movr adx, ebx   
67 [0x43]:           chklen adx   
68 [0x44]:           movnd adx   
69 [0x45]:           pushobj   
70 [0x46]:           smov ebx, sp+[-2]   
71 [0x47]:           calld ebx   
72 [0x48]:           swap    
73 [0x49]:           pop   
74 [0x4a]:           loadval ebx   
75 [0x4b]:           movr cmt, ebx   
76 [0x4c]:           jne 126   
77 [0x4d]: line: 186 movl 0   
78 [0x4e]:           movn #1   
80 [0x50]:           pushobj   
81 [0x51]:           loadl ebx, fp+3   
82 [0x52]:           popobj2    
83 [0x53]:           movr adx, ebx   
84 [0x54]:           chklen adx   
85 [0x55]:           movnd adx   
86 [0x56]:           smovr_3 fp+4   
87 [0x57]: line: 187 movl 0   
88 [0x58]:           movn #1   
90 [0x5a]:           pushobj   
91 [0x5b]:           ipushl #3   
92 [0x5c]:           movi #1, ebx   
94 [0x5e]:           loadval ecx   
95 [0x5f]:           add ecx, ebx -> ebx   
96 [0x60]:           popobj2    
97 [0x61]:           movr adx, ebx   
98 [0x62]:           chklen adx   
99 [0x63]:           movnd adx   
100 [0x64]:           pushobj   
101 [0x65]:           movl 0   
102 [0x66]:           movn #1   
104 [0x68]:           pushobj   
105 [0x69]:           loadl ebx, fp+3   
106 [0x6a]:           popobj2    
107 [0x6b]:           movr adx, ebx   
108 [0x6c]:           chklen adx   
109 [0x6d]:           movnd adx   
110 [0x6e]:           popobj   
111 [0x6f]: line: 188 pushl 4   
112 [0x70]:           movl 0   
113 [0x71]:           movn #1   
115 [0x73]:           pushobj   
116 [0x74]:           ipushl #3   
117 [0x75]:           movi #1, ebx   
119 [0x77]:           loadval ecx   
120 [0x78]:           add ecx, ebx -> ebx   
121 [0x79]:           popobj2    
122 [0x7a]:           movr adx, ebx   
123 [0x7b]:           chklen adx   
124 [0x7c]:           movnd adx   
125 [0x7d]:           popobj   
126 [0x7e]:           nop   
127 [0x7f]:           nop   
128 [0x80]:           iaddl 1, fp@3   
130 [0x82]:           jmp @16   
131 [0x83]:           iaddl 1, fp@2   
133 [0x85]:           jmp @2   
134 [0x86]:           ret   


function: std#list<main.frontend.tokenizer#token>.remove_at[4067] params(1) in file: lib\support\/0.2.9//list.sharp:195:8: note:  
		    def remove_at(index: var) {
		       ^

0 [0x0]: line: 196 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gte ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 26   
18 [0x12]: line: 197 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:           dup    
21 [0x15]:           pushl 0   
22 [0x16]:           ipushl #1   
23 [0x17]:           call @4070 // <std#list<main.frontend.tokenizer#token>.out_of_bounds_msg>   
24 [0x18]:           call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:           throw    
26 [0x1a]:           nop   
27 [0x1b]: line: 199 movl 0   
28 [0x1c]:           movn #0   
30 [0x1e]:           movi #0, adx   
32 [0x20]:           iaload ebx, adx   
33 [0x21]:           rstore ebx   
34 [0x22]:           loadl ebx, fp+1   
35 [0x23]:           loadval ecx   
36 [0x24]:           sub ecx, ebx -> ebx   
37 [0x25]:           rstore ebx   
38 [0x26]:           movi #1, ebx   
40 [0x28]:           loadval ecx   
41 [0x29]:           sub ecx, ebx -> ebx   
42 [0x2a]:           smovr_2 ebx, fp+2   
43 [0x2b]: line: 200 ipushl #2   
44 [0x2c]:           movi #0, ebx   
46 [0x2e]:           loadval ecx   
47 [0x2f]:           gt ecx, ebx   
48 [0x30]:           movr ebx, cmt   
49 [0x31]:           movr cmt, ebx   
50 [0x32]:           jne 74   
51 [0x33]: line: 201 movl 0   
52 [0x34]:           movn #1   
54 [0x36]:           pushobj   
55 [0x37]:           movl 0   
56 [0x38]:           movn #1   
58 [0x3a]:           pushobj   
59 [0x3b]:           ipushl #1   
60 [0x3c]:           ipushl #1   
61 [0x3d]:           movi #1, ebx   
63 [0x3f]:           loadval ecx   
64 [0x40]:           add ecx, ebx -> ebx   
65 [0x41]:           rstore ebx   
66 [0x42]:           movl 0   
67 [0x43]:           movn #0   
69 [0x45]:           movi #0, adx   
71 [0x47]:           iaload ebx, adx   
72 [0x48]:           rstore ebx   
73 [0x49]:           call @2151 // <std.io#__srt_global.memcopy>   
74 [0x4a]:           nop   
75 [0x4b]: line: 203 pushl 0   
76 [0x4c]:           call @4057 // <std#list<main.frontend.tokenizer#token>.pop_back>   
77 [0x4d]:           ret   


function: std#list<main.frontend.tokenizer#token>.indexof[4068] params(2) in file: lib\support\/0.2.9//list.sharp:206:8: note:  
		    def indexof(comparer: t, find_func: (t, t)(var)) : var {
		       ^

0 [0x0]: line: 207 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 40   
14 [0xe]: line: 208 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 36   
33 [0x21]: line: 209 loadl ebx, fp+3   
34 [0x22]:           return_val ebx   
35 [0x23]:           ret   
36 [0x24]:           nop   
37 [0x25]:           iaddl 1, fp@3   
39 [0x27]:           jmp @2   
40 [0x28]: line: 213 istorel -1, fp+0   
42 [0x2a]:           ret   


function: std#list<main.frontend.tokenizer#token>.to_string[4069] params(0) in file: lib\support\/0.2.9//list.sharp:216:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 217 new_class @76 // std#string_builder   
2 [0x2]:           dup    
3 [0x3]:           call @3649 // <std#string_builder.string_builder>   
4 [0x4]:           popobj2    
5 [0x5]:           smovr_3 fp+1   
6 [0x6]: line: 219 pushl 1   
7 [0x7]:           newstr @562 // [    
8 [0x8]:           call @3645 // <std#string_builder.operator+=>   
9 [0x9]:           pop   
10 [0xa]: line: 220 istorel 0, fp+2   
12 [0xc]:           ipushl #2   
13 [0xd]:           movl 0   
14 [0xe]:           movn #0   
16 [0x10]:           movi #0, adx   
18 [0x12]:           iaload ebx, adx   
19 [0x13]:           loadval ecx   
20 [0x14]:           lt ecx, ebx   
21 [0x15]:           movr ebx, cmt   
22 [0x16]:           movr cmt, ebx   
23 [0x17]:           jne 62   
24 [0x18]: line: 221 pushl 1   
25 [0x19]:           movl 0   
26 [0x1a]:           movn #1   
28 [0x1c]:           pushobj   
29 [0x1d]:           loadl ebx, fp+2   
30 [0x1e]:           popobj2    
31 [0x1f]:           movr adx, ebx   
32 [0x20]:           chklen adx   
33 [0x21]:           movnd adx   
34 [0x22]:           pushobj   
35 [0x23]:           call @3641 // <std#string_builder.operator+=>   
36 [0x24]:           pop   
37 [0x25]: line: 223 ipushl #2   
38 [0x26]:           movi #1, ebx   
40 [0x28]:           loadval ecx   
41 [0x29]:           add ecx, ebx -> ebx   
42 [0x2a]:           rstore ebx   
43 [0x2b]:           movl 0   
44 [0x2c]:           movn #0   
46 [0x2e]:           movi #0, adx   
48 [0x30]:           iaload ebx, adx   
49 [0x31]:           loadval ecx   
50 [0x32]:           lt ecx, ebx   
51 [0x33]:           movr ebx, cmt   
52 [0x34]:           movr cmt, ebx   
53 [0x35]:           jne 58   
54 [0x36]: line: 224 pushl 1   
55 [0x37]:           newstr @563 // ,    
56 [0x38]:           call @3645 // <std#string_builder.operator+=>   
57 [0x39]:           pop   
58 [0x3a]:           nop   
59 [0x3b]:           iaddl 1, fp@2   
61 [0x3d]:           jmp @12   
62 [0x3e]: line: 228 pushl 1   
63 [0x3f]:           newstr @564 //  ]   
64 [0x40]:           call @3645 // <std#string_builder.operator+=>   
65 [0x41]:           pop   
66 [0x42]: line: 229 pushl 1   
67 [0x43]:           call @3622 // <std#string_builder.to_string>   
68 [0x44]:           popobj2    
69 [0x45]:           returnobj   
70 [0x46]:           ret   


function: std#list<main.frontend.tokenizer#token>.out_of_bounds_msg[4070] params(1) in file: lib\support\/0.2.9//list.sharp:232:16: note:  
		    private def out_of_bounds_msg(index: var) : string {
		               ^

0 [0x0]: line: 233 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           newstr @565 // Index:    
4 [0x4]:           call @3546 // <std#string.string>   
5 [0x5]:           ipushl #1   
6 [0x6]:           call @3578 // <std#string.operator+>   
7 [0x7]:           newstr @566 // , size:    
8 [0x8]:           call @3558 // <std#string.operator+>   
9 [0x9]:           movl 0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           iaload ebx, adx   
15 [0xf]:           rstore ebx   
16 [0x10]:           call @3578 // <std#string.operator+>   
17 [0x11]:           popobj2    
18 [0x12]:           returnobj   
19 [0x13]:           ret   


std#loopable<main.frontend.parser#ast>.get_elements[4071] params(0) in file: lib\support\/0.2.9//loopable.sharp:4:8: note:  
		    def get_elements() : t[];
		       ^



constructor: std#loopable<main.frontend.parser#ast>.loopable[4072] params(0) in file: lib\support\/0.2.9//loopable.sharp:3:10: note:  
		interface loopable<t> {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


constructor: std#list<main.frontend.parser#ast>.list[4073] params(0) in file: lib\support\/0.2.9//list.sharp:13:9: note:  
		    list() {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 14 movi #10, ebx   
3 [0x3]:          new_classarray ebx  // main.frontend.parser#ast[]   
5 [0x5]:          movl 0   
6 [0x6]:          movn #1   
8 [0x8]:          popobj   
9 [0x9]:          ret   


constructor: std#list<main.frontend.parser#ast>.list[4074] params(1) in file: lib\support\/0.2.9//list.sharp:17:9: note:  
		    list(starting_capacity: var) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 18 loadl ebx, fp+1   
2 [0x2]:          new_classarray ebx  // main.frontend.parser#ast[]   
4 [0x4]:          movl 0   
5 [0x5]:          movn #1   
7 [0x7]:          popobj   
8 [0x8]:          ret   


constructor: std#list<main.frontend.parser#ast>.list[4075] params(1) in file: lib\support\/0.2.9//list.sharp:21:9: note:  
		    list(initial_data: t[]) {
		        ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 22 pushl 0   
2 [0x2]:          pushl 1   
3 [0x3]:          call @4086 // <std#list<main.frontend.parser#ast>.add_all>   
4 [0x4]:          ret   


function: std#list<main.frontend.parser#ast>.empty[4076] params(0) in file: lib\support\/0.2.9//list.sharp:25:8: note:  
		    def empty() := n_elements == 0;
		       ^

0 [0x0]: line: 25 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          return_val cmt   
12 [0xc]:          ret   


function: std#list<main.frontend.parser#ast>.set_compact[4077] params(1) in file: lib\support\/0.2.9//list.sharp:27:8: note:  
		    def set_compact(compact_array: var) {
		       ^

0 [0x0]: line: 28 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #2   
4 [0x4]:          loadval ebx   
5 [0x5]:          movi #0, adx   
7 [0x7]:          rmov adx, ebx   
8 [0x8]:          ret   


function: std#list<main.frontend.parser#ast>.get_elements[4078] params(0) in file: lib\support\/0.2.9//list.sharp:31:8: note:  
		    def get_elements() : t[] {
		       ^

0 [0x0]: line: 32 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movi #0, ebx   
9 [0x9]:          loadval ecx   
10 [0xa]:          test ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 19   
14 [0xe]:          pushnull    
15 [0xf]:          popobj2    
16 [0x10]:          returnobj   
17 [0x11]:          ret   
18 [0x12]:          jmp @36   
19 [0x13]: line: 33 movl 0   
20 [0x14]:          movn #1   
22 [0x16]:          pushobj   
23 [0x17]:          istore 0   
25 [0x19]:          movl 0   
26 [0x1a]:          movn #0   
28 [0x1c]:          movi #0, adx   
30 [0x1e]:          iaload ebx, adx   
31 [0x1f]:          rstore ebx   
32 [0x20]:          call @2161 // <std.io#__srt_global.copy>   
33 [0x21]:          popobj2    
34 [0x22]:          returnobj   
35 [0x23]:          ret   
36 [0x24]:          nop   


overload function: std#list<main.frontend.parser#ast>.operator[[4079] params(1) in file: lib\support\/0.2.9//list.sharp:36:8: note:  
		    def operator[](index: var): t {
		       ^

0 [0x0]: line: 37 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 26   
18 [0x12]: line: 38 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:          dup    
21 [0x15]:          pushl 0   
22 [0x16]:          ipushl #1   
23 [0x17]:          call @4102 // <std#list<main.frontend.parser#ast>.out_of_bounds_msg>   
24 [0x18]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:          throw    
26 [0x1a]:          nop   
27 [0x1b]: line: 39 movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          pushobj   
31 [0x1f]:          loadl ebx, fp+1   
32 [0x20]:          popobj2    
33 [0x21]:          movr adx, ebx   
34 [0x22]:          chklen adx   
35 [0x23]:          movnd adx   
36 [0x24]:          returnobj   
37 [0x25]:          ret   


function: std#list<main.frontend.parser#ast>.at[4080] params(1) in file: lib\support\/0.2.9//list.sharp:42:8: note:  
		    def at(index: var): t {
		       ^

0 [0x0]: line: 43 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 26   
18 [0x12]: line: 44 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:          dup    
21 [0x15]:          pushl 0   
22 [0x16]:          ipushl #1   
23 [0x17]:          call @4102 // <std#list<main.frontend.parser#ast>.out_of_bounds_msg>   
24 [0x18]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:          throw    
26 [0x1a]:          nop   
27 [0x1b]: line: 45 movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          pushobj   
31 [0x1f]:          loadl ebx, fp+1   
32 [0x20]:          popobj2    
33 [0x21]:          movr adx, ebx   
34 [0x22]:          chklen adx   
35 [0x23]:          movnd adx   
36 [0x24]:          returnobj   
37 [0x25]:          ret   


function: std#list<main.frontend.parser#ast>.last[4081] params(0) in file: lib\support\/0.2.9//list.sharp:48:8: note:  
		    def last(): t {
		       ^

0 [0x0]: line: 49 pushl 0   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          rstore ebx   
8 [0x8]:          movi #1, ebx   
10 [0xa]:          loadval ecx   
11 [0xb]:          sub ecx, ebx -> ebx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @4080 // <std#list<main.frontend.parser#ast>.at>   
14 [0xe]:          popobj2    
15 [0xf]:          returnobj   
16 [0x10]:          ret   


function: std#list<main.frontend.parser#ast>.put[4082] params(2) in file: lib\support\/0.2.9//list.sharp:52:8: note:  
		    def put(index: var, element: t) : t {
		       ^

0 [0x0]: line: 53 ipushl #1   
1 [0x1]:          movl 0   
2 [0x2]:          movn #0   
4 [0x4]:          movi #0, adx   
6 [0x6]:          iaload ebx, adx   
7 [0x7]:          loadval ecx   
8 [0x8]:          gte ecx, ebx   
9 [0x9]:          movr ebx, cmt   
10 [0xa]:          skpe ebx // pc = 16   
11 [0xb]:          loadl ecx, fp+1   
12 [0xc]:          movi #0, ebx   
14 [0xe]:          lt ecx, ebx   
15 [0xf]:          movr ebx, cmt   
16 [0x10]:          movr cmt, ebx   
17 [0x11]:          jne 26   
18 [0x12]: line: 54 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:          dup    
21 [0x15]:          pushl 0   
22 [0x16]:          ipushl #1   
23 [0x17]:          call @4102 // <std#list<main.frontend.parser#ast>.out_of_bounds_msg>   
24 [0x18]:          call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:          throw    
26 [0x1a]:          nop   
27 [0x1b]: line: 56 movl 0   
28 [0x1c]:          movn #1   
30 [0x1e]:          pushobj   
31 [0x1f]:          loadl ebx, fp+1   
32 [0x20]:          popobj2    
33 [0x21]:          movr adx, ebx   
34 [0x22]:          chklen adx   
35 [0x23]:          movnd adx   
36 [0x24]:          smovr_3 fp+3   
37 [0x25]: line: 57 pushl 2   
38 [0x26]:          movl 0   
39 [0x27]:          movn #1   
41 [0x29]:          pushobj   
42 [0x2a]:          loadl ebx, fp+1   
43 [0x2b]:          popobj2    
44 [0x2c]:          movr adx, ebx   
45 [0x2d]:          chklen adx   
46 [0x2e]:          movnd adx   
47 [0x2f]:          popobj   
48 [0x30]: line: 58 movl 3   
49 [0x31]:          returnobj   
50 [0x32]:          ret   


function: std#list<main.frontend.parser#ast>.expand[4083] params(0) in file: lib\support\/0.2.9//list.sharp:61:16: note:  
		    private def expand() {
		               ^

0 [0x0]: line: 62 movl 0   
1 [0x1]:          movn #2   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          movr cmt, ebx   
7 [0x7]:          jne 24   
8 [0x8]: line: 63 movl 0   
9 [0x9]:          movn #1   
11 [0xb]:          pushobj   
12 [0xc]:          movl 0   
13 [0xd]:          movn #1   
15 [0xf]:          sizeof ebx   
16 [0x10]:          rstore ebx   
17 [0x11]:          movi #128, ebx   
19 [0x13]:          loadval ecx   
20 [0x14]:          add ecx, ebx -> ebx   
21 [0x15]:          rstore ebx   
22 [0x16]:          call @2141 // <std.io#__srt_global.realloc>   
23 [0x17]:          jmp @51   
24 [0x18]: line: 65 movl 0   
25 [0x19]:          movn #1   
27 [0x1b]:          pushobj   
28 [0x1c]:          movl 0   
29 [0x1d]:          movn #1   
31 [0x1f]:          sizeof ebx   
32 [0x20]:          rstore ebx   
33 [0x21]:          movl 0   
34 [0x22]:          movn #1   
36 [0x24]:          sizeof ebx   
37 [0x25]:          rstore ebx   
38 [0x26]:          movi #4, ebx   
40 [0x28]:          loadval ecx   
41 [0x29]:          shr ecx, ebx -> ebx   
42 [0x2a]:          loadval ecx   
43 [0x2b]:          add ecx, ebx -> ebx   
44 [0x2c]:          rstore ebx   
45 [0x2d]:          movi #128, ebx   
47 [0x2f]:          loadval ecx   
48 [0x30]:          add ecx, ebx -> ebx   
49 [0x31]:          rstore ebx   
50 [0x32]:          call @2141 // <std.io#__srt_global.realloc>   
51 [0x33]:          nop   
52 [0x34]:          ret   


function: std#list<main.frontend.parser#ast>.clear[4084] params(0) in file: lib\support\/0.2.9//list.sharp:68:8: note:  
		    def clear() {
		       ^

0 [0x0]: line: 69 movi #10, ebx   
2 [0x2]:          new_classarray ebx  // main.frontend.parser#ast[]   
4 [0x4]:          movl 0   
5 [0x5]:          movn #1   
7 [0x7]:          popobj   
8 [0x8]: line: 70 movi #0, ebx   
10 [0xa]:          movl 0   
11 [0xb]:          movn #0   
13 [0xd]:          movi #0, adx   
15 [0xf]:          rmov adx, ebx   
16 [0x10]:          ret   


function: std#list<main.frontend.parser#ast>.add_all[4085] params(1) in file: lib\support\/0.2.9//list.sharp:73:8: note:  
		    def add_all(lst: list<t>) {
		       ^

0 [0x0]: line: 74 movl 1   
1 [0x1]:          movn #1   
3 [0x3]:          pushobj   
4 [0x4]:          istore 0   
6 [0x6]:          movl 1   
7 [0x7]:          movn #0   
9 [0x9]:          movi #0, adx   
11 [0xb]:          iaload ebx, adx   
12 [0xc]:          rstore ebx   
13 [0xd]:          call @2161 // <std.io#__srt_global.copy>   
14 [0xe]:          popobj2    
15 [0xf]:          movi #86, cmt   
17 [0x11]:          cast cmt   
18 [0x12]:          pushobj   
19 [0x13]:          movl 0   
20 [0x14]:          movn #1   
22 [0x16]:          popobj   
23 [0x17]: line: 75 movl 1   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          iaload ebx, adx   
29 [0x1d]:          movl 0   
30 [0x1e]:          movn #0   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          ret   


function: std#list<main.frontend.parser#ast>.add_all[4086] params(1) in file: lib\support\/0.2.9//list.sharp:78:8: note:  
		    def add_all(lst: t[]) {
		       ^

0 [0x0]: line: 79 movl 1   
1 [0x1]:          checknull   
2 [0x2]:          not ebx, ebx   
3 [0x3]:          movr cmt, ebx   
4 [0x4]:          jne 30   
5 [0x5]: line: 80 pushl 1   
6 [0x6]:          istore 0   
8 [0x8]:          movl 1   
9 [0x9]:          sizeof ebx   
10 [0xa]:          rstore ebx   
11 [0xb]:          call @2161 // <std.io#__srt_global.copy>   
12 [0xc]:          popobj2    
13 [0xd]:          movi #86, cmt   
15 [0xf]:          cast cmt   
16 [0x10]:          pushobj   
17 [0x11]:          movl 0   
18 [0x12]:          movn #1   
20 [0x14]:          popobj   
21 [0x15]: line: 81 movl 1   
22 [0x16]:          sizeof ebx   
23 [0x17]:          movl 0   
24 [0x18]:          movn #0   
26 [0x1a]:          movi #0, adx   
28 [0x1c]:          rmov adx, ebx   
29 [0x1d]:          jmp @46   
30 [0x1e]: line: 83 movi #0, ebx   
32 [0x20]:          movl 0   
33 [0x21]:          movn #0   
35 [0x23]:          movi #0, adx   
37 [0x25]:          rmov adx, ebx   
38 [0x26]: line: 84 movi #10, ebx   
40 [0x28]:          new_classarray ebx  // main.frontend.parser#ast[]   
42 [0x2a]:          movl 0   
43 [0x2b]:          movn #1   
45 [0x2d]:          popobj   
46 [0x2e]:          nop   
47 [0x2f]:          ret   


function: std#list<main.frontend.parser#ast>.add[4087] params(1) in file: lib\support\/0.2.9//list.sharp:88:8: note:  
		    def add(element: t) {
		       ^

0 [0x0]: line: 89 movl 0   
1 [0x1]:          movn #0   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 0   
8 [0x8]:          movn #1   
10 [0xa]:          sizeof ebx   
11 [0xb]:          loadval ecx   
12 [0xc]:          gte ecx, ebx   
13 [0xd]:          movr ebx, cmt   
14 [0xe]:          movr cmt, ebx   
15 [0xf]:          jne 18   
16 [0x10]: line: 90 pushl 0   
17 [0x11]:          call @4083 // <std#list<main.frontend.parser#ast>.expand>   
18 [0x12]:          nop   
19 [0x13]: line: 91 pushl 1   
20 [0x14]:          movl 0   
21 [0x15]:          movn #1   
23 [0x17]:          pushobj   
24 [0x18]:          movl 0   
25 [0x19]:          movn #0   
27 [0x1b]:          movi #0, adx   
29 [0x1d]:          iaload ebx, adx   
30 [0x1e]:          movr egx, ebx   
31 [0x1f]:          inc ebx   
32 [0x20]:          movi #0, adx   
34 [0x22]:          rmov adx, ebx   
35 [0x23]:          movr ebx, egx   
36 [0x24]:          popobj2    
37 [0x25]:          movr adx, ebx   
38 [0x26]:          chklen adx   
39 [0x27]:          movnd adx   
40 [0x28]:          popobj   
41 [0x29]:          ret   


function: std#list<main.frontend.parser#ast>.indexof[4088] params(1) in file: lib\support\/0.2.9//list.sharp:94:8: note:  
		    def indexof(element: t) : var {
		       ^

0 [0x0]: line: 95 istorel 0, fp+2   
2 [0x2]:          ipushl #2   
3 [0x3]:          movl 0   
4 [0x4]:          movn #0   
6 [0x6]:          movi #0, adx   
8 [0x8]:          iaload ebx, adx   
9 [0x9]:          loadval ecx   
10 [0xa]:          lt ecx, ebx   
11 [0xb]:          movr ebx, cmt   
12 [0xc]:          movr cmt, ebx   
13 [0xd]:          jne 35   
14 [0xe]: line: 96 pushl 1   
15 [0xf]:          movl 0   
16 [0x10]:          movn #1   
18 [0x12]:          pushobj   
19 [0x13]:          loadl ebx, fp+2   
20 [0x14]:          popobj2    
21 [0x15]:          movr adx, ebx   
22 [0x16]:          chklen adx   
23 [0x17]:          movnd adx   
24 [0x18]:          pushobj   
25 [0x19]:          itest ebx   
26 [0x1a]:          movr cmt, ebx   
27 [0x1b]:          jne 31   
28 [0x1c]: line: 97 loadl ebx, fp+2   
29 [0x1d]:          return_val ebx   
30 [0x1e]:          ret   
31 [0x1f]:          nop   
32 [0x20]:          iaddl 1, fp@2   
34 [0x22]:          jmp @2   
35 [0x23]: line: 101 istorel -1, fp+0   
37 [0x25]:           ret   


function: std#list<main.frontend.parser#ast>.pop_back[4089] params(0) in file: lib\support\/0.2.9//list.sharp:104:8: note:  
		    def pop_back() {
		       ^

0 [0x0]: line: 105 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movi #0, ebx   
9 [0x9]:           loadval ecx   
10 [0xa]:           gt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 38   
14 [0xe]: line: 106 movl 1   
15 [0xf]:           del   
16 [0x10]: line: 107 pushl 1   
17 [0x11]:           movl 0   
18 [0x12]:           movn #1   
20 [0x14]:           pushobj   
21 [0x15]:           movl 0   
22 [0x16]:           movn #0   
24 [0x18]:           movi #0, adx   
26 [0x1a]:           iaload ebx, adx   
27 [0x1b]:           movr egx, ebx   
28 [0x1c]:           dec ebx   
29 [0x1d]:           movi #0, adx   
31 [0x1f]:           rmov adx, ebx   
32 [0x20]:           movr ebx, egx   
33 [0x21]:           popobj2    
34 [0x22]:           movr adx, ebx   
35 [0x23]:           chklen adx   
36 [0x24]:           movnd adx   
37 [0x25]:           popobj   
38 [0x26]:           nop   
39 [0x27]:           ret   


function: std#list<main.frontend.parser#ast>.pop_last[4090] params(0) in file: lib\support\/0.2.9//list.sharp:111:8: note:  
		    def pop_last() : t {
		       ^

0 [0x0]: line: 112 pushl 0   
1 [0x1]:           call @4081 // <std#list<main.frontend.parser#ast>.last>   
2 [0x2]:           popobj2    
3 [0x3]:           smovr_3 fp+1   
4 [0x4]: line: 113 pushl 0   
5 [0x5]:           call @4089 // <std#list<main.frontend.parser#ast>.pop_back>   
6 [0x6]: line: 114 movl 1   
7 [0x7]:           returnobj   
8 [0x8]:           ret   


function: std#list<main.frontend.parser#ast>.pop_first[4091] params(0) in file: lib\support\/0.2.9//list.sharp:117:8: note:  
		    def pop_first() : t {
		       ^

0 [0x0]: line: 118 movl 0   
1 [0x1]:           movn #1   
3 [0x3]:           pushobj   
4 [0x4]:           movi #0, ebx   
6 [0x6]:           popobj2    
7 [0x7]:           movr adx, ebx   
8 [0x8]:           chklen adx   
9 [0x9]:           movnd adx   
10 [0xa]:           smovr_3 fp+1   
11 [0xb]: line: 119 pushl 0   
12 [0xc]:           istore 0   
14 [0xe]:           call @4099 // <std#list<main.frontend.parser#ast>.remove_at>   
15 [0xf]: line: 120 movl 1   
16 [0x10]:           returnobj   
17 [0x11]:           ret   


function: std#list<main.frontend.parser#ast>.size[4092] params(0) in file: lib\support\/0.2.9//list.sharp:123:8: note:  
		    def size() := n_elements;
		       ^

0 [0x0]: line: 123 movl 0   
1 [0x1]:           movn #0   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           return_val ebx   
7 [0x7]:           ret   


function: std#list<main.frontend.parser#ast>.insert[4093] params(2) in file: lib\support\/0.2.9//list.sharp:125:8: note:  
		    def insert(index: var, element: t) {
		       ^

0 [0x0]: line: 126 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gt ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 26   
18 [0x12]: line: 127 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:           dup    
21 [0x15]:           pushl 0   
22 [0x16]:           ipushl #1   
23 [0x17]:           call @4102 // <std#list<main.frontend.parser#ast>.out_of_bounds_msg>   
24 [0x18]:           call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:           throw    
26 [0x1a]:           nop   
27 [0x1b]: line: 129 movl 0   
28 [0x1c]:           movn #0   
30 [0x1e]:           movi #0, adx   
32 [0x20]:           iaload ebx, adx   
33 [0x21]:           rstore ebx   
34 [0x22]:           movi #0, ebx   
36 [0x24]:           loadval ecx   
37 [0x25]:           test ecx, ebx   
38 [0x26]:           movr ebx, cmt   
39 [0x27]:           movr cmt, ebx   
40 [0x28]:           jne 45   
41 [0x29]: line: 130 pushl 0   
42 [0x2a]:           pushl 2   
43 [0x2b]:           call @4087 // <std#list<main.frontend.parser#ast>.add>   
44 [0x2c]:           jmp @134   
45 [0x2d]: line: 132 movl 0   
46 [0x2e]:           movn #0   
48 [0x30]:           movi #0, adx   
50 [0x32]:           iaload ebx, adx   
51 [0x33]:           rstore ebx   
52 [0x34]:           movl 0   
53 [0x35]:           movn #1   
55 [0x37]:           sizeof ebx   
56 [0x38]:           loadval ecx   
57 [0x39]:           gte ecx, ebx   
58 [0x3a]:           movr ebx, cmt   
59 [0x3b]:           movr cmt, ebx   
60 [0x3c]:           jne 63   
61 [0x3d]: line: 133 pushl 0   
62 [0x3e]:           call @4083 // <std#list<main.frontend.parser#ast>.expand>   
63 [0x3f]:           nop   
64 [0x40]: line: 134 movl 0   
65 [0x41]:           movn #0   
67 [0x43]:           movi #0, adx   
69 [0x45]:           iaload ebx, adx   
70 [0x46]:           movr egx, ebx   
71 [0x47]:           inc ebx   
72 [0x48]:           movi #0, adx   
74 [0x4a]:           rmov adx, ebx   
75 [0x4b]: line: 135 movl 0   
76 [0x4c]:           movn #0   
78 [0x4e]:           movi #0, adx   
80 [0x50]:           iaload ebx, adx   
81 [0x51]:           rstore ebx   
82 [0x52]:           movi #1, ebx   
84 [0x54]:           loadval ecx   
85 [0x55]:           sub ecx, ebx -> ebx   
86 [0x56]:           smovr_2 ebx, fp+3   
87 [0x57]:           ipushl #3   
88 [0x58]:           loadl ebx, fp+1   
89 [0x59]:           loadval ecx   
90 [0x5a]:           gt ecx, ebx   
91 [0x5b]:           movr ebx, cmt   
92 [0x5c]:           movr cmt, ebx   
93 [0x5d]:           jne 123   
94 [0x5e]: line: 136 movl 0   
95 [0x5f]:           movn #1   
97 [0x61]:           pushobj   
98 [0x62]:           ipushl #3   
99 [0x63]:           movi #1, ebx   
101 [0x65]:           loadval ecx   
102 [0x66]:           sub ecx, ebx -> ebx   
103 [0x67]:           popobj2    
104 [0x68]:           movr adx, ebx   
105 [0x69]:           chklen adx   
106 [0x6a]:           movnd adx   
107 [0x6b]:           pushobj   
108 [0x6c]:           movl 0   
109 [0x6d]:           movn #1   
111 [0x6f]:           pushobj   
112 [0x70]:           loadl ebx, fp+3   
113 [0x71]:           popobj2    
114 [0x72]:           movr adx, ebx   
115 [0x73]:           chklen adx   
116 [0x74]:           movnd adx   
117 [0x75]:           popobj   
118 [0x76]:           loadl ebx, fp+3   
119 [0x77]:           movr egx, ebx   
120 [0x78]:           dec ebx   
121 [0x79]:           smovr_2 ebx, fp+3   
122 [0x7a]:           jmp @87   
123 [0x7b]: line: 137 pushl 2   
124 [0x7c]:           movl 0   
125 [0x7d]:           movn #1   
127 [0x7f]:           pushobj   
128 [0x80]:           loadl ebx, fp+1   
129 [0x81]:           popobj2    
130 [0x82]:           movr adx, ebx   
131 [0x83]:           chklen adx   
132 [0x84]:           movnd adx   
133 [0x85]:           popobj   
134 [0x86]:           nop   
135 [0x87]:           ret   


function: std#list<main.frontend.parser#ast>.find[4094] params(2) in file: lib\support\/0.2.9//list.sharp:141:8: note:  
		    def find(comparer : t, find_func: (t, t)(var)) : t {
		       ^

0 [0x0]: line: 142 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 48   
14 [0xe]: line: 143 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 44   
33 [0x21]: line: 144 movl 0   
34 [0x22]:           movn #1   
36 [0x24]:           pushobj   
37 [0x25]:           loadl ebx, fp+3   
38 [0x26]:           popobj2    
39 [0x27]:           movr adx, ebx   
40 [0x28]:           chklen adx   
41 [0x29]:           movnd adx   
42 [0x2a]:           returnobj   
43 [0x2b]:           ret   
44 [0x2c]:           nop   
45 [0x2d]:           iaddl 1, fp@3   
47 [0x2f]:           jmp @2   
48 [0x30]: line: 148 movl 4   
49 [0x31]:           del   
50 [0x32]: line: 149 movl 4   
51 [0x33]:           returnobj   
52 [0x34]:           ret   


function: std#list<main.frontend.parser#ast>.remove[4095] params(1) in file: lib\support\/0.2.9//list.sharp:152:8: note:  
		    def remove(val: t) {
		       ^

0 [0x0]: line: 153 istorel 0, fp+2   
2 [0x2]:           ipushl #2   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 36   
14 [0xe]: line: 154 pushl 1   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+2   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           itest ebx   
26 [0x1a]:           movr cmt, ebx   
27 [0x1b]:           jne 32   
28 [0x1c]: line: 155 pushl 0   
29 [0x1d]:           ipushl #2   
30 [0x1e]:           call @4099 // <std#list<main.frontend.parser#ast>.remove_at>   
31 [0x1f]: line: 156 ret   
32 [0x20]:           nop   
33 [0x21]:           iaddl 1, fp@2   
35 [0x23]:           jmp @2   
36 [0x24]:           ret   


function: std#list<main.frontend.parser#ast>.remove[4096] params(2) in file: lib\support\/0.2.9//list.sharp:161:8: note:  
		    def remove(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 162 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 41   
14 [0xe]: line: 163 ipushl #2   
15 [0xf]:           pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           movnd adx   
25 [0x19]:           pushobj   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 37   
33 [0x21]: line: 164 pushl 0   
34 [0x22]:           ipushl #3   
35 [0x23]:           call @4099 // <std#list<main.frontend.parser#ast>.remove_at>   
36 [0x24]: line: 165 ret   
37 [0x25]:           nop   
38 [0x26]:           iaddl 1, fp@3   
40 [0x28]:           jmp @2   
41 [0x29]:           ret   


function: std#list<main.frontend.parser#ast>.replace[4097] params(2) in file: lib\support\/0.2.9//list.sharp:170:8: note:  
		    def replace(val: t, compare_fun: (t, t)(var)) {
		       ^

0 [0x0]: line: 171 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 49   
14 [0xe]: line: 172 ipushl #2   
15 [0xf]:           pushl 1   
16 [0x10]:           movl 0   
17 [0x11]:           movn #1   
19 [0x13]:           pushobj   
20 [0x14]:           loadl ebx, fp+3   
21 [0x15]:           popobj2    
22 [0x16]:           movr adx, ebx   
23 [0x17]:           chklen adx   
24 [0x18]:           movnd adx   
25 [0x19]:           pushobj   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 45   
33 [0x21]: line: 173 pushl 1   
34 [0x22]:           movl 0   
35 [0x23]:           movn #1   
37 [0x25]:           pushobj   
38 [0x26]:           loadl ebx, fp+3   
39 [0x27]:           popobj2    
40 [0x28]:           movr adx, ebx   
41 [0x29]:           chklen adx   
42 [0x2a]:           movnd adx   
43 [0x2b]:           popobj   
44 [0x2c]: line: 174 ret   
45 [0x2d]:           nop   
46 [0x2e]:           iaddl 1, fp@3   
48 [0x30]:           jmp @2   
49 [0x31]:           ret   


function: std#list<main.frontend.parser#ast>.linear_sort[4098] params(1) in file: lib\support\/0.2.9//list.sharp:179:8: note:  
		    def linear_sort(swap: (t, t)(var)) {
		       ^

0 [0x0]: line: 180 istorel 0, fp+2   
2 [0x2]:           ipushl #2   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 134   
14 [0xe]: line: 182 istorel 0, fp+3   
16 [0x10]:           ipushl #3   
17 [0x11]:           movl 0   
18 [0x12]:           movn #0   
20 [0x14]:           movi #0, adx   
22 [0x16]:           iaload ebx, adx   
23 [0x17]:           loadval ecx   
24 [0x18]:           lt ecx, ebx   
25 [0x19]:           movr ebx, cmt   
26 [0x1a]:           movr cmt, ebx   
27 [0x1b]:           jne 131   
28 [0x1c]: line: 183 ipushl #3   
29 [0x1d]:           movi #1, ebx   
31 [0x1f]:           loadval ecx   
32 [0x20]:           add ecx, ebx -> ebx   
33 [0x21]:           rstore ebx   
34 [0x22]:           movl 0   
35 [0x23]:           movn #0   
37 [0x25]:           movi #0, adx   
39 [0x27]:           iaload ebx, adx   
40 [0x28]:           loadval ecx   
41 [0x29]:           lt ecx, ebx   
42 [0x2a]:           movr ebx, cmt   
43 [0x2b]:           movr cmt, ebx   
44 [0x2c]:           jne 127   
45 [0x2d]: line: 185 ipushl #1   
46 [0x2e]:           movl 0   
47 [0x2f]:           movn #1   
49 [0x31]:           pushobj   
50 [0x32]:           loadl ebx, fp+3   
51 [0x33]:           popobj2    
52 [0x34]:           movr adx, ebx   
53 [0x35]:           chklen adx   
54 [0x36]:           movnd adx   
55 [0x37]:           pushobj   
56 [0x38]:           movl 0   
57 [0x39]:           movn #1   
59 [0x3b]:           pushobj   
60 [0x3c]:           ipushl #3   
61 [0x3d]:           movi #1, ebx   
63 [0x3f]:           loadval ecx   
64 [0x40]:           add ecx, ebx -> ebx   
65 [0x41]:           popobj2    
66 [0x42]:           movr adx, ebx   
67 [0x43]:           chklen adx   
68 [0x44]:           movnd adx   
69 [0x45]:           pushobj   
70 [0x46]:           smov ebx, sp+[-2]   
71 [0x47]:           calld ebx   
72 [0x48]:           swap    
73 [0x49]:           pop   
74 [0x4a]:           loadval ebx   
75 [0x4b]:           movr cmt, ebx   
76 [0x4c]:           jne 126   
77 [0x4d]: line: 186 movl 0   
78 [0x4e]:           movn #1   
80 [0x50]:           pushobj   
81 [0x51]:           loadl ebx, fp+3   
82 [0x52]:           popobj2    
83 [0x53]:           movr adx, ebx   
84 [0x54]:           chklen adx   
85 [0x55]:           movnd adx   
86 [0x56]:           smovr_3 fp+4   
87 [0x57]: line: 187 movl 0   
88 [0x58]:           movn #1   
90 [0x5a]:           pushobj   
91 [0x5b]:           ipushl #3   
92 [0x5c]:           movi #1, ebx   
94 [0x5e]:           loadval ecx   
95 [0x5f]:           add ecx, ebx -> ebx   
96 [0x60]:           popobj2    
97 [0x61]:           movr adx, ebx   
98 [0x62]:           chklen adx   
99 [0x63]:           movnd adx   
100 [0x64]:           pushobj   
101 [0x65]:           movl 0   
102 [0x66]:           movn #1   
104 [0x68]:           pushobj   
105 [0x69]:           loadl ebx, fp+3   
106 [0x6a]:           popobj2    
107 [0x6b]:           movr adx, ebx   
108 [0x6c]:           chklen adx   
109 [0x6d]:           movnd adx   
110 [0x6e]:           popobj   
111 [0x6f]: line: 188 pushl 4   
112 [0x70]:           movl 0   
113 [0x71]:           movn #1   
115 [0x73]:           pushobj   
116 [0x74]:           ipushl #3   
117 [0x75]:           movi #1, ebx   
119 [0x77]:           loadval ecx   
120 [0x78]:           add ecx, ebx -> ebx   
121 [0x79]:           popobj2    
122 [0x7a]:           movr adx, ebx   
123 [0x7b]:           chklen adx   
124 [0x7c]:           movnd adx   
125 [0x7d]:           popobj   
126 [0x7e]:           nop   
127 [0x7f]:           nop   
128 [0x80]:           iaddl 1, fp@3   
130 [0x82]:           jmp @16   
131 [0x83]:           iaddl 1, fp@2   
133 [0x85]:           jmp @2   
134 [0x86]:           ret   


function: std#list<main.frontend.parser#ast>.remove_at[4099] params(1) in file: lib\support\/0.2.9//list.sharp:195:8: note:  
		    def remove_at(index: var) {
		       ^

0 [0x0]: line: 196 ipushl #1   
1 [0x1]:           movl 0   
2 [0x2]:           movn #0   
4 [0x4]:           movi #0, adx   
6 [0x6]:           iaload ebx, adx   
7 [0x7]:           loadval ecx   
8 [0x8]:           gte ecx, ebx   
9 [0x9]:           movr ebx, cmt   
10 [0xa]:           skpe ebx // pc = 16   
11 [0xb]:           loadl ecx, fp+1   
12 [0xc]:           movi #0, ebx   
14 [0xe]:           lt ecx, ebx   
15 [0xf]:           movr ebx, cmt   
16 [0x10]:           movr cmt, ebx   
17 [0x11]:           jne 26   
18 [0x12]: line: 197 new_class @6 // std#out_of_bounds_exception   
20 [0x14]:           dup    
21 [0x15]:           pushl 0   
22 [0x16]:           ipushl #1   
23 [0x17]:           call @4102 // <std#list<main.frontend.parser#ast>.out_of_bounds_msg>   
24 [0x18]:           call @1968 // <std#out_of_bounds_exception.out_of_bounds_exception>   
25 [0x19]:           throw    
26 [0x1a]:           nop   
27 [0x1b]: line: 199 movl 0   
28 [0x1c]:           movn #0   
30 [0x1e]:           movi #0, adx   
32 [0x20]:           iaload ebx, adx   
33 [0x21]:           rstore ebx   
34 [0x22]:           loadl ebx, fp+1   
35 [0x23]:           loadval ecx   
36 [0x24]:           sub ecx, ebx -> ebx   
37 [0x25]:           rstore ebx   
38 [0x26]:           movi #1, ebx   
40 [0x28]:           loadval ecx   
41 [0x29]:           sub ecx, ebx -> ebx   
42 [0x2a]:           smovr_2 ebx, fp+2   
43 [0x2b]: line: 200 ipushl #2   
44 [0x2c]:           movi #0, ebx   
46 [0x2e]:           loadval ecx   
47 [0x2f]:           gt ecx, ebx   
48 [0x30]:           movr ebx, cmt   
49 [0x31]:           movr cmt, ebx   
50 [0x32]:           jne 74   
51 [0x33]: line: 201 movl 0   
52 [0x34]:           movn #1   
54 [0x36]:           pushobj   
55 [0x37]:           movl 0   
56 [0x38]:           movn #1   
58 [0x3a]:           pushobj   
59 [0x3b]:           ipushl #1   
60 [0x3c]:           ipushl #1   
61 [0x3d]:           movi #1, ebx   
63 [0x3f]:           loadval ecx   
64 [0x40]:           add ecx, ebx -> ebx   
65 [0x41]:           rstore ebx   
66 [0x42]:           movl 0   
67 [0x43]:           movn #0   
69 [0x45]:           movi #0, adx   
71 [0x47]:           iaload ebx, adx   
72 [0x48]:           rstore ebx   
73 [0x49]:           call @2151 // <std.io#__srt_global.memcopy>   
74 [0x4a]:           nop   
75 [0x4b]: line: 203 pushl 0   
76 [0x4c]:           call @4089 // <std#list<main.frontend.parser#ast>.pop_back>   
77 [0x4d]:           ret   


function: std#list<main.frontend.parser#ast>.indexof[4100] params(2) in file: lib\support\/0.2.9//list.sharp:206:8: note:  
		    def indexof(comparer: t, find_func: (t, t)(var)) : var {
		       ^

0 [0x0]: line: 207 istorel 0, fp+3   
2 [0x2]:           ipushl #3   
3 [0x3]:           movl 0   
4 [0x4]:           movn #0   
6 [0x6]:           movi #0, adx   
8 [0x8]:           iaload ebx, adx   
9 [0x9]:           loadval ecx   
10 [0xa]:           lt ecx, ebx   
11 [0xb]:           movr ebx, cmt   
12 [0xc]:           movr cmt, ebx   
13 [0xd]:           jne 40   
14 [0xe]: line: 208 ipushl #2   
15 [0xf]:           movl 0   
16 [0x10]:           movn #1   
18 [0x12]:           pushobj   
19 [0x13]:           loadl ebx, fp+3   
20 [0x14]:           popobj2    
21 [0x15]:           movr adx, ebx   
22 [0x16]:           chklen adx   
23 [0x17]:           movnd adx   
24 [0x18]:           pushobj   
25 [0x19]:           pushl 1   
26 [0x1a]:           smov ebx, sp+[-2]   
27 [0x1b]:           calld ebx   
28 [0x1c]:           swap    
29 [0x1d]:           pop   
30 [0x1e]:           loadval ebx   
31 [0x1f]:           movr cmt, ebx   
32 [0x20]:           jne 36   
33 [0x21]: line: 209 loadl ebx, fp+3   
34 [0x22]:           return_val ebx   
35 [0x23]:           ret   
36 [0x24]:           nop   
37 [0x25]:           iaddl 1, fp@3   
39 [0x27]:           jmp @2   
40 [0x28]: line: 213 istorel -1, fp+0   
42 [0x2a]:           ret   


function: std#list<main.frontend.parser#ast>.to_string[4101] params(0) in file: lib\support\/0.2.9//list.sharp:216:8: note:  
		    def to_string() : string {
		       ^

0 [0x0]: line: 217 new_class @76 // std#string_builder   
2 [0x2]:           dup    
3 [0x3]:           call @3649 // <std#string_builder.string_builder>   
4 [0x4]:           popobj2    
5 [0x5]:           smovr_3 fp+1   
6 [0x6]: line: 219 pushl 1   
7 [0x7]:           newstr @562 // [    
8 [0x8]:           call @3645 // <std#string_builder.operator+=>   
9 [0x9]:           pop   
10 [0xa]: line: 220 istorel 0, fp+2   
12 [0xc]:           ipushl #2   
13 [0xd]:           movl 0   
14 [0xe]:           movn #0   
16 [0x10]:           movi #0, adx   
18 [0x12]:           iaload ebx, adx   
19 [0x13]:           loadval ecx   
20 [0x14]:           lt ecx, ebx   
21 [0x15]:           movr ebx, cmt   
22 [0x16]:           movr cmt, ebx   
23 [0x17]:           jne 62   
24 [0x18]: line: 221 pushl 1   
25 [0x19]:           movl 0   
26 [0x1a]:           movn #1   
28 [0x1c]:           pushobj   
29 [0x1d]:           loadl ebx, fp+2   
30 [0x1e]:           popobj2    
31 [0x1f]:           movr adx, ebx   
32 [0x20]:           chklen adx   
33 [0x21]:           movnd adx   
34 [0x22]:           pushobj   
35 [0x23]:           call @3641 // <std#string_builder.operator+=>   
36 [0x24]:           pop   
37 [0x25]: line: 223 ipushl #2   
38 [0x26]:           movi #1, ebx   
40 [0x28]:           loadval ecx   
41 [0x29]:           add ecx, ebx -> ebx   
42 [0x2a]:           rstore ebx   
43 [0x2b]:           movl 0   
44 [0x2c]:           movn #0   
46 [0x2e]:           movi #0, adx   
48 [0x30]:           iaload ebx, adx   
49 [0x31]:           loadval ecx   
50 [0x32]:           lt ecx, ebx   
51 [0x33]:           movr ebx, cmt   
52 [0x34]:           movr cmt, ebx   
53 [0x35]:           jne 58   
54 [0x36]: line: 224 pushl 1   
55 [0x37]:           newstr @563 // ,    
56 [0x38]:           call @3645 // <std#string_builder.operator+=>   
57 [0x39]:           pop   
58 [0x3a]:           nop   
59 [0x3b]:           iaddl 1, fp@2   
61 [0x3d]:           jmp @12   
62 [0x3e]: line: 228 pushl 1   
63 [0x3f]:           newstr @564 //  ]   
64 [0x40]:           call @3645 // <std#string_builder.operator+=>   
65 [0x41]:           pop   
66 [0x42]: line: 229 pushl 1   
67 [0x43]:           call @3622 // <std#string_builder.to_string>   
68 [0x44]:           popobj2    
69 [0x45]:           returnobj   
70 [0x46]:           ret   


function: std#list<main.frontend.parser#ast>.out_of_bounds_msg[4102] params(1) in file: lib\support\/0.2.9//list.sharp:232:16: note:  
		    private def out_of_bounds_msg(index: var) : string {
		               ^

0 [0x0]: line: 233 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           newstr @565 // Index:    
4 [0x4]:           call @3546 // <std#string.string>   
5 [0x5]:           ipushl #1   
6 [0x6]:           call @3578 // <std#string.operator+>   
7 [0x7]:           newstr @566 // , size:    
8 [0x8]:           call @3558 // <std#string.operator+>   
9 [0x9]:           movl 0   
10 [0xa]:           movn #0   
12 [0xc]:           movi #0, adx   
14 [0xe]:           iaload ebx, adx   
15 [0xf]:           rstore ebx   
16 [0x10]:           call @3578 // <std#string.operator+>   
17 [0x11]:           popobj2    
18 [0x12]:           returnobj   
19 [0x13]:           ret   


constructor: main.frontend#entry<main.frontend#compiler_error,std#string>.entry[4103] params(2) in file: lib\support\/0.2.9//hashmap.sharp:126:21: note:  
		        public entry(key: k, value: v) {
		                    ^

0 [0x0]:         pushl 0   
1 [0x1]: line: 127 pushl 1   
2 [0x2]:           movl 0   
3 [0x3]:           movn #0   
5 [0x5]:           popobj   
6 [0x6]: line: 128 pushl 2   
7 [0x7]:           movl 0   
8 [0x8]:           movn #1   
10 [0xa]:           popobj   
11 [0xb]:           ret   


function: main.frontend#entry<main.frontend#compiler_error,std#string>.to_string[4104] params(0) in file: lib\support\/0.2.9//hashmap.sharp:131:19: note:  
		        public def to_string() : string {
		                  ^

0 [0x0]: line: 132 new_class @75 // std#string   
2 [0x2]:           dup    
3 [0x3]:           newstr @567 // key    
4 [0x4]:           call @3546 // <std#string.string>   
5 [0x5]:           movl 0   
6 [0x6]:           movn #0   
8 [0x8]:           pushobj   
9 [0x9]:           call @3560 // <std#string.operator+>   
10 [0xa]:           newstr @568 //  value    
11 [0xb]:           call @3558 // <std#string.operator+>   
12 [0xc]:           movl 0   
13 [0xd]:           movn #1   
15 [0xf]:           pushobj   
16 [0x10]:           call @3561 // <std#string.operator+>   
17 [0x11]:           popobj2    
18 [0x12]:           returnobj   
19 [0x13]:           ret   


constructor: main.frontend#entry<main.frontend#compiler_error,std#string>.entry[4105] params(0) in file: lib\support\/0.2.9//hashmap.sharp:121:10: note:  
		    class entry<k, v> {
		         ^

0 [0x0]:         pushl 0   
1 [0x1]:         ret   


function: std.io#__srt_global.$03internal_static_init[4106] params(0) in file: lib\support\/0.2.9//io//critical_section.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         new_class @46 // std#_object_   
2 [0x2]:         dup    
3 [0x3]:         movg @23 // @std.io#__srt_global   
4 [0x4]:         movn #0   
6 [0x6]:         popobj   
7 [0x7]:         ret   


function: std.io.fiber#__srt_global.$03internal_static_init[4107] params(0) in file: lib\support\/0.2.9//io//fiber//fiber.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         istore 0   
2 [0x2]:         movg @25 // @std.io.fiber#__srt_global   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         movi #0, adx   
8 [0x8]:         rmov adx, ebx   
9 [0x9]:         istore 4294967295   
11 [0xb]:         movg @25 // @std.io.fiber#__srt_global   
12 [0xc]:         movn #1   
14 [0xe]:         loadval ebx   
15 [0xf]:         movi #0, adx   
17 [0x11]:         rmov adx, ebx   
18 [0x12]:         new_class @75 // std#string   
20 [0x14]:         dup    
21 [0x15]:         call @3604 // <std#string.string>   
22 [0x16]:         movg @25 // @std.io.fiber#__srt_global   
23 [0x17]:         movn #2   
25 [0x19]:         popobj   
26 [0x1a]:         istore 0   
28 [0x1c]:         movg @25 // @std.io.fiber#__srt_global   
29 [0x1d]:         movn #3   
31 [0x1f]:         loadval ebx   
32 [0x20]:         movi #0, adx   
34 [0x22]:         rmov adx, ebx   
35 [0x23]:         ret   


function: std.io#file.$03internal_static_init[4108] params(0) in file: lib\support\/0.2.9//io//file.sharp:17:13: note:  
		public class file {
		            ^

0 [0x0]:         call @2118 // <std.io#file.get_file_system>   
1 [0x1]:         movg @28 // @std.io#file   
2 [0x2]:         movn #0   
4 [0x4]:         popobj   
5 [0x5]:         movg @28 // @std.io#file   
6 [0x6]:         movn #0   
8 [0x8]:         pushobj   
9 [0x9]:         invoke_delegate 2120 { static=0, args=0 }   
11 [0xb]:         movg @28 // @std.io#file   
12 [0xc]:         movn #1   
14 [0xe]:         loadval ebx   
15 [0xf]:         movi #0, adx   
17 [0x11]:         rmov adx, ebx   
18 [0x12]:         ret   
19 [0x13]:         ret   


function: std.io.task#job.$03internal_static_init[4109] params(0) in file: lib\support\/0.2.9//io//task//job.sharp:6:13: note:  
		public class job {
		            ^

0 [0x0]:         istore 0   
2 [0x2]:         movg @32 // @std.io.task#job   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         movi #0, adx   
8 [0x8]:         rmov adx, ebx   
9 [0x9]:         ret   
10 [0xa]:         ret   


function: std.io.task#__srt_global.$03internal_static_init[4110] params(0) in file: lib\support\/0.2.9//io//task//job_scheduler.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         istore 5   
2 [0x2]:         movg @30 // @std.io.task#__srt_global   
3 [0x3]:         movn #4   
5 [0x5]:         loadval ebx   
6 [0x6]:         movi #0, adx   
8 [0x8]:         rmov adx, ebx   
9 [0x9]:         istore 40   
11 [0xb]:         movg @30 // @std.io.task#__srt_global   
12 [0xc]:         movn #5   
14 [0xe]:         loadval ebx   
15 [0xf]:         movi #0, adx   
17 [0x11]:         rmov adx, ebx   
18 [0x12]:         new_class @34 // std.io.task#job_master   
20 [0x14]:         dup    
21 [0x15]:         call @2218 // <std.io.task#job_master.job_master>   
22 [0x16]:         movg @30 // @std.io.task#__srt_global   
23 [0x17]:         movn #8   
25 [0x19]:         popobj   
26 [0x1a]:         ret   


function: std.io#thread_group.$03internal_static_init[4111] params(0) in file: lib\support\/0.2.9//io//thread_group.sharp:3:13: note:  
		public class thread_group : loopable<thread> {
		            ^

0 [0x0]:         new_class @38 // std.io#thread_group   
2 [0x2]:         dup    
3 [0x3]:         new_class @75 // std#string   
5 [0x5]:         dup    
6 [0x6]:         newstr @2 // main   
7 [0x7]:         call @3546 // <std#string.string>   
8 [0x8]:         call @2283 // <std.io#thread_group.thread_group>   
9 [0x9]:         movg @38 // @std.io#thread_group   
10 [0xa]:         movn #0   
12 [0xc]:         popobj   
13 [0xd]:         ret   
14 [0xe]:         ret   


function: std#_nil_.$03internal_static_init[4112] params(0) in file: lib\support\/0.2.9//nil.sharp:10:13: note:  
		stable class _nil_ {
		            ^

0 [0x0]:         new_class @45 // std#_nil_   
2 [0x2]:         movg @45 // @std#_nil_   
3 [0x3]:         movn #0   
5 [0x5]:         popobj   
6 [0x6]:         ret   
7 [0x7]:         ret   


function: std#__srt_global.$03internal_static_init[4113] params(0) in file: lib\support\/0.2.9//object.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         istore 0   
2 [0x2]:         movg @0 // @std#__srt_global   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         movi #0, adx   
8 [0x8]:         rmov adx, ebx   
9 [0x9]:         ret   


function: std#string.$03internal_static_init[4114] params(0) in file: lib\support\/0.2.9//string.sharp:5:6: note:  
		class string : loopable<_int8> {
		     ^

0 [0x0]:         istore 103   
2 [0x2]:         movg @75 // @std#string   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         mov8 ebx, ebx   
7 [0x7]:         movi #0, adx   
9 [0x9]:         rmov adx, ebx   
10 [0xa]:         istore 0   
12 [0xc]:         movg @75 // @std#string   
13 [0xd]:         movn #1   
15 [0xf]:         loadval ebx   
16 [0x10]:         movi #0, adx   
18 [0x12]:         rmov adx, ebx   
19 [0x13]:         ret   
20 [0x14]:         ret   


function: std#string_builder.$03internal_static_init[4115] params(0) in file: lib\support\/0.2.9//string_builder.sharp:5:6: note:  
		class string_builder : loopable<_int8> {
		     ^

0 [0x0]:         istore 103   
2 [0x2]:         movg @76 // @std#string_builder   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         mov8 ebx, ebx   
7 [0x7]:         movi #0, adx   
9 [0x9]:         rmov adx, ebx   
10 [0xa]:         istore 0   
12 [0xc]:         movg @76 // @std#string_builder   
13 [0xd]:         movn #1   
15 [0xf]:         loadval ebx   
16 [0x10]:         movi #0, adx   
18 [0x12]:         rmov adx, ebx   
19 [0x13]:         ret   
20 [0x14]:         ret   


function: std#time.$03internal_static_init[4116] params(0) in file: lib\support\/0.2.9//time.sharp:6:6: note:  
		class time {
		     ^

0 [0x0]:         istore 4294967295   
2 [0x2]:         movg @77 // @std#time   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         movi #0, adx   
8 [0x8]:         rmov adx, ebx   
9 [0x9]:         ret   
10 [0xa]:         ret   


function: main.frontend#error_manager.$03internal_static_init[4117] params(0) in file: lib\support\/bootstrap//frontend//error_manager.sharp:10:6: note:  
		class error_manager {
		     ^

0 [0x0]:         new_class @121 // std#hashmap<main.frontend#compiler_error,std#string>   
2 [0x2]:         dup    
3 [0x3]:         call @4000 // <std#hashmap<main.frontend#compiler_error,std#string>.hashmap>   
4 [0x4]:         movg @82 // @main.frontend#error_manager   
5 [0x5]:         movn #1   
7 [0x7]:         popobj   
8 [0x8]:         new_class @83 // main.frontend#parse_error   
10 [0xa]:         dup    
11 [0xb]:         call @3753 // <main.frontend#parse_error.parse_error>   
12 [0xc]:         movg @82 // @main.frontend#error_manager   
13 [0xd]:         movn #2   
15 [0xf]:         popobj   
16 [0x10]:         ret   
17 [0x11]:         ret   


function: main.frontend.parser#ast.$03internal_static_init[4118] params(0) in file: lib\support\/bootstrap//frontend//parser//ast.sharp:8:6: note:  
		class ast {
		     ^

0 [0x0]:         istore 0   
2 [0x2]:         movg @86 // @main.frontend.parser#ast   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         movi #0, adx   
8 [0x8]:         rmov adx, ebx   
9 [0x9]:         ret   
10 [0xa]:         ret   


function: main.frontend.parser#Parser.$03internal_static_init[4119] params(0) in file: lib\support\/bootstrap//frontend//parser//parser.sharp:11:6: note:  
		class Parser {
		     ^

0 [0x0]:         movi #51, ebx   
2 [0x2]:         newobj_arry ebx   
3 [0x3]:         newstr @3 // mod   
4 [0x4]:         movsl #-1   
5 [0x5]:         movn #0   
7 [0x7]:         popobj   
8 [0x8]:         newstr @4 // true   
9 [0x9]:         movsl #-1   
10 [0xa]:         movn #1   
12 [0xc]:         popobj   
13 [0xd]:         newstr @5 // false   
14 [0xe]:         movsl #-1   
15 [0xf]:         movn #2   
17 [0x11]:         popobj   
18 [0x12]:         newstr @6 // class   
19 [0x13]:         movsl #-1   
20 [0x14]:         movn #3   
22 [0x16]:         popobj   
23 [0x17]:         newstr @7 // static   
24 [0x18]:         movsl #-1   
25 [0x19]:         movn #4   
27 [0x1b]:         popobj   
28 [0x1c]:         newstr @8 // protected   
29 [0x1d]:         movsl #-1   
30 [0x1e]:         movn #5   
32 [0x20]:         popobj   
33 [0x21]:         newstr @9 // pro   
34 [0x22]:         movsl #-1   
35 [0x23]:         movn #6   
37 [0x25]:         popobj   
38 [0x26]:         newstr @10 // private   
39 [0x27]:         movsl #-1   
40 [0x28]:         movn #7   
42 [0x2a]:         popobj   
43 [0x2b]:         newstr @11 // def   
44 [0x2c]:         movsl #-1   
45 [0x2d]:         movn #8   
47 [0x2f]:         popobj   
48 [0x30]:         newstr @12 // import   
49 [0x31]:         movsl #-1   
50 [0x32]:         movn #9   
52 [0x34]:         popobj   
53 [0x35]:         newstr @13 // return   
54 [0x36]:         movsl #-1   
55 [0x37]:         movn #10   
57 [0x39]:         popobj   
58 [0x3a]:         newstr @14 // self   
59 [0x3b]:         movsl #-1   
60 [0x3c]:         movn #11   
62 [0x3e]:         popobj   
63 [0x3f]:         newstr @15 // const   
64 [0x40]:         movsl #-1   
65 [0x41]:         movn #12   
67 [0x43]:         popobj   
68 [0x44]:         newstr @16 // public   
69 [0x45]:         movsl #-1   
70 [0x46]:         movn #13   
72 [0x48]:         popobj   
73 [0x49]:         newstr @17 // new   
74 [0x4a]:         movsl #-1   
75 [0x4b]:         movn #14   
77 [0x4d]:         popobj   
78 [0x4e]:         newstr @18 // null   
79 [0x4f]:         movsl #-1   
80 [0x50]:         movn #15   
82 [0x52]:         popobj   
83 [0x53]:         newstr @19 // operator   
84 [0x54]:         movsl #-1   
85 [0x55]:         movn #16   
87 [0x57]:         popobj   
88 [0x58]:         newstr @20 // base   
89 [0x59]:         movsl #-1   
90 [0x5a]:         movn #17   
92 [0x5c]:         popobj   
93 [0x5d]:         newstr @21 // if   
94 [0x5e]:         movsl #-1   
95 [0x5f]:         movn #18   
97 [0x61]:         popobj   
98 [0x62]:         newstr @22 // while   
99 [0x63]:         movsl #-1   
100 [0x64]:         movn #19   
102 [0x66]:         popobj   
103 [0x67]:         newstr @23 // do   
104 [0x68]:         movsl #-1   
105 [0x69]:         movn #20   
107 [0x6b]:         popobj   
108 [0x6c]:         newstr @24 // try   
109 [0x6d]:         movsl #-1   
110 [0x6e]:         movn #21   
112 [0x70]:         popobj   
113 [0x71]:         newstr @25 // catch   
114 [0x72]:         movsl #-1   
115 [0x73]:         movn #22   
117 [0x75]:         popobj   
118 [0x76]:         newstr @26 // finally   
119 [0x77]:         movsl #-1   
120 [0x78]:         movn #23   
122 [0x7a]:         popobj   
123 [0x7b]:         newstr @27 // throw   
124 [0x7c]:         movsl #-1   
125 [0x7d]:         movn #24   
127 [0x7f]:         popobj   
128 [0x80]:         newstr @28 // continue   
129 [0x81]:         movsl #-1   
130 [0x82]:         movn #25   
132 [0x84]:         popobj   
133 [0x85]:         newstr @29 // goto   
134 [0x86]:         movsl #-1   
135 [0x87]:         movn #26   
137 [0x89]:         popobj   
138 [0x8a]:         newstr @30 // break   
139 [0x8b]:         movsl #-1   
140 [0x8c]:         movn #27   
142 [0x8e]:         popobj   
143 [0x8f]:         newstr @31 // else   
144 [0x90]:         movsl #-1   
145 [0x91]:         movn #28   
147 [0x93]:         popobj   
148 [0x94]:         newstr @32 // object   
149 [0x95]:         movsl #-1   
150 [0x96]:         movn #29   
152 [0x98]:         popobj   
153 [0x99]:         newstr @33 // asm   
154 [0x9a]:         movsl #-1   
155 [0x9b]:         movn #30   
157 [0x9d]:         popobj   
158 [0x9e]:         newstr @34 // for   
159 [0x9f]:         movsl #-1   
160 [0xa0]:         movn #31   
162 [0xa2]:         popobj   
163 [0xa3]:         newstr @35 // foreach   
164 [0xa4]:         movsl #-1   
165 [0xa5]:         movn #32   
167 [0xa7]:         popobj   
168 [0xa8]:         newstr @36 // var   
169 [0xa9]:         movsl #-1   
170 [0xaa]:         movn #33   
172 [0xac]:         popobj   
173 [0xad]:         newstr @37 // sizeof   
174 [0xae]:         movsl #-1   
175 [0xaf]:         movn #34   
177 [0xb1]:         popobj   
178 [0xb2]:         newstr @38 // _int8   
179 [0xb3]:         movsl #-1   
180 [0xb4]:         movn #35   
182 [0xb6]:         popobj   
183 [0xb7]:         newstr @39 // _int16   
184 [0xb8]:         movsl #-1   
185 [0xb9]:         movn #36   
187 [0xbb]:         popobj   
188 [0xbc]:         newstr @40 // _int32   
189 [0xbd]:         movsl #-1   
190 [0xbe]:         movn #37   
192 [0xc0]:         popobj   
193 [0xc1]:         newstr @41 // _int64   
194 [0xc2]:         movsl #-1   
195 [0xc3]:         movn #38   
197 [0xc5]:         popobj   
198 [0xc6]:         newstr @42 // _uint8   
199 [0xc7]:         movsl #-1   
200 [0xc8]:         movn #39   
202 [0xca]:         popobj   
203 [0xcb]:         newstr @43 // _uint16   
204 [0xcc]:         movsl #-1   
205 [0xcd]:         movn #40   
207 [0xcf]:         popobj   
208 [0xd0]:         newstr @44 // _uint32   
209 [0xd1]:         movsl #-1   
210 [0xd2]:         movn #41   
212 [0xd4]:         popobj   
213 [0xd5]:         newstr @45 // _uint64   
214 [0xd6]:         movsl #-1   
215 [0xd7]:         movn #42   
217 [0xd9]:         popobj   
218 [0xda]:         newstr @46 // delegate   
219 [0xdb]:         movsl #-1   
220 [0xdc]:         movn #43   
222 [0xde]:         popobj   
223 [0xdf]:         newstr @47 // interface   
224 [0xe0]:         movsl #-1   
225 [0xe1]:         movn #44   
227 [0xe3]:         popobj   
228 [0xe4]:         newstr @48 // lock   
229 [0xe5]:         movsl #-1   
230 [0xe6]:         movn #45   
232 [0xe8]:         popobj   
233 [0xe9]:         newstr @49 // enum   
234 [0xea]:         movsl #-1   
235 [0xeb]:         movn #46   
237 [0xed]:         popobj   
238 [0xee]:         newstr @50 // switch   
239 [0xef]:         movsl #-1   
240 [0xf0]:         movn #47   
242 [0xf2]:         popobj   
243 [0xf3]:         newstr @51 // default   
244 [0xf4]:         movsl #-1   
245 [0xf5]:         movn #48   
247 [0xf7]:         popobj   
248 [0xf8]:         newstr @52 // volatile   
249 [0xf9]:         movsl #-1   
250 [0xfa]:         movn #49   
252 [0xfc]:         popobj   
253 [0xfd]:         newstr @53 // fn   
254 [0xfe]:         movsl #-1   
255 [0xff]:         movn #50   
257 [0x101]:         popobj   
258 [0x102]:         movg @88 // @main.frontend.parser#Parser   
259 [0x103]:         movn #0   
261 [0x105]:         popobj   
262 [0x106]:         ret   
263 [0x107]:         ret   


function: main#__srt_global.$03internal_static_init[4120] params(0) in file: lib\support\/bootstrap//main.sharp:0:0: note:  
		End of File
		^

0 [0x0]:         new_class @75 // std#string   
2 [0x2]:         dup    
3 [0x3]:         newstr @56 // sharpc   
4 [0x4]:         call @3546 // <std#string.string>   
5 [0x5]:         movg @94 // @main#__srt_global   
6 [0x6]:         movn #0   
8 [0x8]:         popobj   
9 [0x9]:         new_class @75 // std#string   
11 [0xb]:         dup    
12 [0xc]:         newstr @57 // 0.3.0   
13 [0xd]:         call @3546 // <std#string.string>   
14 [0xe]:         movg @94 // @main#__srt_global   
15 [0xf]:         movn #1   
17 [0x11]:         popobj   
18 [0x12]:         movi #7, ebx   
20 [0x14]:         newarry ebx: 8   
21 [0x15]:         movi #1, ebx   
23 [0x17]:         movsl #0   
24 [0x18]:         movi #0, adx   
26 [0x1a]:         rmov adx, ebx   
27 [0x1b]:         movi #1, ebx   
29 [0x1d]:         movsl #0   
30 [0x1e]:         movi #1, adx   
32 [0x20]:         rmov adx, ebx   
33 [0x21]:         movi #1, ebx   
35 [0x23]:         movsl #0   
36 [0x24]:         movi #2, adx   
38 [0x26]:         rmov adx, ebx   
39 [0x27]:         movi #1, ebx   
41 [0x29]:         movsl #0   
42 [0x2a]:         movi #3, adx   
44 [0x2c]:         rmov adx, ebx   
45 [0x2d]:         movi #1, ebx   
47 [0x2f]:         movsl #0   
48 [0x30]:         movi #4, adx   
50 [0x32]:         rmov adx, ebx   
51 [0x33]:         movi #1, ebx   
53 [0x35]:         movsl #0   
54 [0x36]:         movi #5, adx   
56 [0x38]:         rmov adx, ebx   
57 [0x39]:         movi #1, ebx   
59 [0x3b]:         movsl #0   
60 [0x3c]:         movi #6, adx   
62 [0x3e]:         rmov adx, ebx   
63 [0x3f]:         movg @94 // @main#__srt_global   
64 [0x40]:         movn #9   
66 [0x42]:         popobj   
67 [0x43]:         ret   


function: main#options.$03internal_static_init[4121] params(0) in file: lib\support\/bootstrap//options.sharp:7:6: note:  
		class options {
		     ^

0 [0x0]:         istore 0   
2 [0x2]:         movg @95 // @main#options   
3 [0x3]:         movn #0   
5 [0x5]:         loadval ebx   
6 [0x6]:         movi #0, adx   
8 [0x8]:         rmov adx, ebx   
9 [0x9]:         istore 0   
11 [0xb]:         movg @95 // @main#options   
12 [0xc]:         movn #1   
14 [0xe]:         loadval ebx   
15 [0xf]:         movi #0, adx   
17 [0x11]:         rmov adx, ebx   
18 [0x12]:         istore 0   
20 [0x14]:         movg @95 // @main#options   
21 [0x15]:         movn #2   
23 [0x17]:         loadval ebx   
24 [0x18]:         movi #0, adx   
26 [0x1a]:         rmov adx, ebx   
27 [0x1b]:         new_class @75 // std#string   
29 [0x1d]:         dup    
30 [0x1e]:         newstr @58 // out   
31 [0x1f]:         call @3546 // <std#string.string>   
32 [0x20]:         movg @95 // @main#options   
33 [0x21]:         movn #3   
35 [0x23]:         popobj   
36 [0x24]:         new_class @75 // std#string   
38 [0x26]:         dup    
39 [0x27]:         newstr @55 //    
40 [0x28]:         call @3546 // <std#string.string>   
41 [0x29]:         movg @95 // @main#options   
42 [0x2a]:         movn #4   
44 [0x2c]:         popobj   
45 [0x2d]:         new_class @75 // std#string   
47 [0x2f]:         dup    
48 [0x30]:         newstr @55 //    
49 [0x31]:         call @3546 // <std#string.string>   
50 [0x32]:         movg @95 // @main#options   
51 [0x33]:         movn #5   
53 [0x35]:         popobj   
54 [0x36]:         new_class @75 // std#string   
56 [0x38]:         dup    
57 [0x39]:         newstr @59 // mapping.txt   
58 [0x3a]:         call @3546 // <std#string.string>   
59 [0x3b]:         movg @95 // @main#options   
60 [0x3c]:         movn #6   
62 [0x3e]:         popobj   
63 [0x3f]:         new_class @75 // std#string   
65 [0x41]:         dup    
66 [0x42]:         newstr @60 // generated   
67 [0x43]:         call @3546 // <std#string.string>   
68 [0x44]:         movg @95 // @main#options   
69 [0x45]:         movn #7   
71 [0x47]:         popobj   
72 [0x48]:         new_class @75 // std#string   
74 [0x4a]:         dup    
75 [0x4b]:         newstr @61 // 1.0   
76 [0x4c]:         call @3546 // <std#string.string>   
77 [0x4d]:         movg @95 // @main#options   
78 [0x4e]:         movn #8   
80 [0x50]:         popobj   
81 [0x51]:         istore 1   
83 [0x53]:         movg @95 // @main#options   
84 [0x54]:         movn #9   
86 [0x56]:         loadval ebx   
87 [0x57]:         movi #0, adx   
89 [0x59]:         rmov adx, ebx   
90 [0x5a]:         istore 0   
92 [0x5c]:         movg @95 // @main#options   
93 [0x5d]:         movn #10   
95 [0x5f]:         loadval ebx   
96 [0x60]:         movi #0, adx   
98 [0x62]:         rmov adx, ebx   
99 [0x63]:         movg @96 // @main#optimization_level   
100 [0x64]:         movn #0   
102 [0x66]:         pushobj   
103 [0x67]:         movg @95 // @main#options   
104 [0x68]:         movn #11   
106 [0x6a]:         popobj   
107 [0x6b]:         movg @97 // @main#compilation_mode   
108 [0x6c]:         movn #0   
110 [0x6e]:         pushobj   
111 [0x6f]:         movg @95 // @main#options   
112 [0x70]:         movn #12   
114 [0x72]:         popobj   
115 [0x73]:         istore 1   
117 [0x75]:         movg @95 // @main#options   
118 [0x76]:         movn #13   
120 [0x78]:         loadval ebx   
121 [0x79]:         movi #0, adx   
123 [0x7b]:         rmov adx, ebx   
124 [0x7c]:         istore 0   
126 [0x7e]:         movg @95 // @main#options   
127 [0x7f]:         movn #14   
129 [0x81]:         loadval ebx   
130 [0x82]:         movi #0, adx   
132 [0x84]:         rmov adx, ebx   
133 [0x85]:         istore 0   
135 [0x87]:         movg @95 // @main#options   
136 [0x88]:         movn #15   
138 [0x8a]:         loadval ebx   
139 [0x8b]:         movi #0, adx   
141 [0x8d]:         rmov adx, ebx   
142 [0x8e]:         istore 0   
144 [0x90]:         movg @95 // @main#options   
145 [0x91]:         movn #16   
147 [0x93]:         loadval ebx   
148 [0x94]:         movi #0, adx   
150 [0x96]:         rmov adx, ebx   
151 [0x97]:         istore 0   
153 [0x99]:         movg @95 // @main#options   
154 [0x9a]:         movn #17   
156 [0x9c]:         loadval ebx   
157 [0x9d]:         movi #0, adx   
159 [0x9f]:         rmov adx, ebx   
160 [0xa0]:         istore 0   
162 [0xa2]:         movg @95 // @main#options   
163 [0xa3]:         movn #18   
165 [0xa5]:         loadval ebx   
166 [0xa6]:         movi #0, adx   
168 [0xa8]:         rmov adx, ebx   
169 [0xa9]:         istore 1000   
171 [0xab]:         movg @95 // @main#options   
172 [0xac]:         movn #19   
174 [0xae]:         loadval ebx   
175 [0xaf]:         movi #0, adx   
177 [0xb1]:         rmov adx, ebx   
178 [0xb2]:         istore 2   
180 [0xb4]:         movg @95 // @main#options   
181 [0xb5]:         movn #20   
183 [0xb7]:         loadval ebx   
184 [0xb8]:         movi #0, adx   
186 [0xba]:         rmov adx, ebx   
187 [0xbb]:         new_class @110 // std#list<std#string>   
189 [0xbd]:         dup    
190 [0xbe]:         call @3668 // <std#list<std#string>.list>   
191 [0xbf]:         movg @95 // @main#options   
192 [0xc0]:         movn #21   
194 [0xc2]:         popobj   
195 [0xc3]:         new_class @110 // std#list<std#string>   
197 [0xc5]:         dup    
198 [0xc6]:         call @3668 // <std#list<std#string>.list>   
199 [0xc7]:         movg @95 // @main#options   
200 [0xc8]:         movn #22   
202 [0xca]:         popobj   
203 [0xcb]:         new_class @110 // std#list<std#string>   
205 [0xcd]:         dup    
206 [0xce]:         call @3668 // <std#list<std#string>.list>   
207 [0xcf]:         movg @95 // @main#options   
208 [0xd0]:         movn #23   
210 [0xd2]:         popobj   
211 [0xd3]:         ret   
212 [0xd4]:         ret   


function: std.io#thread_result.$03internal_static_init[4122] params(0) in file: lib\support\/0.2.9//io//thread_kernel.sharp:3:5: note:  
		import platform.kernel;
		    ^

0 [0x0]: line: 42 istorel 0, fp+0   
2 [0x2]: line: 43 movi #17, ebx   
4 [0x4]:          new_classarray ebx  // std.io#thread_result[]   
6 [0x6]:          movg @40 // @std.io#thread_result   
7 [0x7]:          movn #17   
9 [0x9]:          popobj   
10 [0xa]: line: 44 movg @40 // @std.io#thread_result   
11 [0xb]:          movn #0   
13 [0xd]:          pushobj   
14 [0xe]:          movg @40 // @std.io#thread_result   
15 [0xf]:          movn #17   
17 [0x11]:          pushobj   
18 [0x12]:          loadl ebx, fp+0   
19 [0x13]:          movr egx, ebx   
20 [0x14]:          inc ebx   
21 [0x15]:          smovr_2 ebx, fp+0   
22 [0x16]:          movr ebx, egx   
23 [0x17]:          popobj2    
24 [0x18]:          movr adx, ebx   
25 [0x19]:          chklen adx   
26 [0x1a]:          movnd adx   
27 [0x1b]:          popobj   
28 [0x1c]: line: 45 movg @40 // @std.io#thread_result   
29 [0x1d]:          movn #1   
31 [0x1f]:          pushobj   
32 [0x20]:          movg @40 // @std.io#thread_result   
33 [0x21]:          movn #17   
35 [0x23]:          pushobj   
36 [0x24]:          loadl ebx, fp+0   
37 [0x25]:          movr egx, ebx   
38 [0x26]:          inc ebx   
39 [0x27]:          smovr_2 ebx, fp+0   
40 [0x28]:          movr ebx, egx   
41 [0x29]:          popobj2    
42 [0x2a]:          movr adx, ebx   
43 [0x2b]:          chklen adx   
44 [0x2c]:          movnd adx   
45 [0x2d]:          popobj   
46 [0x2e]: line: 46 movg @40 // @std.io#thread_result   
47 [0x2f]:          movn #2   
49 [0x31]:          pushobj   
50 [0x32]:          movg @40 // @std.io#thread_result   
51 [0x33]:          movn #17   
53 [0x35]:          pushobj   
54 [0x36]:          loadl ebx, fp+0   
55 [0x37]:          movr egx, ebx   
56 [0x38]:          inc ebx   
57 [0x39]:          smovr_2 ebx, fp+0   
58 [0x3a]:          movr ebx, egx   
59 [0x3b]:          popobj2    
60 [0x3c]:          movr adx, ebx   
61 [0x3d]:          chklen adx   
62 [0x3e]:          movnd adx   
63 [0x3f]:          popobj   
64 [0x40]: line: 47 movg @40 // @std.io#thread_result   
65 [0x41]:          movn #3   
67 [0x43]:          pushobj   
68 [0x44]:          movg @40 // @std.io#thread_result   
69 [0x45]:          movn #17   
71 [0x47]:          pushobj   
72 [0x48]:          loadl ebx, fp+0   
73 [0x49]:          movr egx, ebx   
74 [0x4a]:          inc ebx   
75 [0x4b]:          smovr_2 ebx, fp+0   
76 [0x4c]:          movr ebx, egx   
77 [0x4d]:          popobj2    
78 [0x4e]:          movr adx, ebx   
79 [0x4f]:          chklen adx   
80 [0x50]:          movnd adx   
81 [0x51]:          popobj   
82 [0x52]: line: 48 movg @40 // @std.io#thread_result   
83 [0x53]:          movn #4   
85 [0x55]:          pushobj   
86 [0x56]:          movg @40 // @std.io#thread_result   
87 [0x57]:          movn #17   
89 [0x59]:          pushobj   
90 [0x5a]:          loadl ebx, fp+0   
91 [0x5b]:          movr egx, ebx   
92 [0x5c]:          inc ebx   
93 [0x5d]:          smovr_2 ebx, fp+0   
94 [0x5e]:          movr ebx, egx   
95 [0x5f]:          popobj2    
96 [0x60]:          movr adx, ebx   
97 [0x61]:          chklen adx   
98 [0x62]:          movnd adx   
99 [0x63]:          popobj   
100 [0x64]: line: 49 movg @40 // @std.io#thread_result   
101 [0x65]:          movn #5   
103 [0x67]:          pushobj   
104 [0x68]:          movg @40 // @std.io#thread_result   
105 [0x69]:          movn #17   
107 [0x6b]:          pushobj   
108 [0x6c]:          loadl ebx, fp+0   
109 [0x6d]:          movr egx, ebx   
110 [0x6e]:          inc ebx   
111 [0x6f]:          smovr_2 ebx, fp+0   
112 [0x70]:          movr ebx, egx   
113 [0x71]:          popobj2    
114 [0x72]:          movr adx, ebx   
115 [0x73]:          chklen adx   
116 [0x74]:          movnd adx   
117 [0x75]:          popobj   
118 [0x76]: line: 50 movg @40 // @std.io#thread_result   
119 [0x77]:          movn #6   
121 [0x79]:          pushobj   
122 [0x7a]:          movg @40 // @std.io#thread_result   
123 [0x7b]:          movn #17   
125 [0x7d]:          pushobj   
126 [0x7e]:          loadl ebx, fp+0   
127 [0x7f]:          movr egx, ebx   
128 [0x80]:          inc ebx   
129 [0x81]:          smovr_2 ebx, fp+0   
130 [0x82]:          movr ebx, egx   
131 [0x83]:          popobj2    
132 [0x84]:          movr adx, ebx   
133 [0x85]:          chklen adx   
134 [0x86]:          movnd adx   
135 [0x87]:          popobj   
136 [0x88]: line: 51 movg @40 // @std.io#thread_result   
137 [0x89]:          movn #7   
139 [0x8b]:          pushobj   
140 [0x8c]:          movg @40 // @std.io#thread_result   
141 [0x8d]:          movn #17   
143 [0x8f]:          pushobj   
144 [0x90]:          loadl ebx, fp+0   
145 [0x91]:          movr egx, ebx   
146 [0x92]:          inc ebx   
147 [0x93]:          smovr_2 ebx, fp+0   
148 [0x94]:          movr ebx, egx   
149 [0x95]:          popobj2    
150 [0x96]:          movr adx, ebx   
151 [0x97]:          chklen adx   
152 [0x98]:          movnd adx   
153 [0x99]:          popobj   
154 [0x9a]: line: 52 movg @40 // @std.io#thread_result   
155 [0x9b]:          movn #8   
157 [0x9d]:          pushobj   
158 [0x9e]:          movg @40 // @std.io#thread_result   
159 [0x9f]:          movn #17   
161 [0xa1]:          pushobj   
162 [0xa2]:          loadl ebx, fp+0   
163 [0xa3]:          movr egx, ebx   
164 [0xa4]:          inc ebx   
165 [0xa5]:          smovr_2 ebx, fp+0   
166 [0xa6]:          movr ebx, egx   
167 [0xa7]:          popobj2    
168 [0xa8]:          movr adx, ebx   
169 [0xa9]:          chklen adx   
170 [0xaa]:          movnd adx   
171 [0xab]:          popobj   
172 [0xac]: line: 53 movg @40 // @std.io#thread_result   
173 [0xad]:          movn #9   
175 [0xaf]:          pushobj   
176 [0xb0]:          movg @40 // @std.io#thread_result   
177 [0xb1]:          movn #17   
179 [0xb3]:          pushobj   
180 [0xb4]:          loadl ebx, fp+0   
181 [0xb5]:          movr egx, ebx   
182 [0xb6]:          inc ebx   
183 [0xb7]:          smovr_2 ebx, fp+0   
184 [0xb8]:          movr ebx, egx   
185 [0xb9]:          popobj2    
186 [0xba]:          movr adx, ebx   
187 [0xbb]:          chklen adx   
188 [0xbc]:          movnd adx   
189 [0xbd]:          popobj   
190 [0xbe]: line: 54 movg @40 // @std.io#thread_result   
191 [0xbf]:          movn #10   
193 [0xc1]:          pushobj   
194 [0xc2]:          movg @40 // @std.io#thread_result   
195 [0xc3]:          movn #17   
197 [0xc5]:          pushobj   
198 [0xc6]:          loadl ebx, fp+0   
199 [0xc7]:          movr egx, ebx   
200 [0xc8]:          inc ebx   
201 [0xc9]:          smovr_2 ebx, fp+0   
202 [0xca]:          movr ebx, egx   
203 [0xcb]:          popobj2    
204 [0xcc]:          movr adx, ebx   
205 [0xcd]:          chklen adx   
206 [0xce]:          movnd adx   
207 [0xcf]:          popobj   
208 [0xd0]: line: 55 movg @40 // @std.io#thread_result   
209 [0xd1]:          movn #11   
211 [0xd3]:          pushobj   
212 [0xd4]:          movg @40 // @std.io#thread_result   
213 [0xd5]:          movn #17   
215 [0xd7]:          pushobj   
216 [0xd8]:          loadl ebx, fp+0   
217 [0xd9]:          movr egx, ebx   
218 [0xda]:          inc ebx   
219 [0xdb]:          smovr_2 ebx, fp+0   
220 [0xdc]:          movr ebx, egx   
221 [0xdd]:          popobj2    
222 [0xde]:          movr adx, ebx   
223 [0xdf]:          chklen adx   
224 [0xe0]:          movnd adx   
225 [0xe1]:          popobj   
226 [0xe2]: line: 56 movg @40 // @std.io#thread_result   
227 [0xe3]:          movn #12   
229 [0xe5]:          pushobj   
230 [0xe6]:          movg @40 // @std.io#thread_result   
231 [0xe7]:          movn #17   
233 [0xe9]:          pushobj   
234 [0xea]:          loadl ebx, fp+0   
235 [0xeb]:          movr egx, ebx   
236 [0xec]:          inc ebx   
237 [0xed]:          smovr_2 ebx, fp+0   
238 [0xee]:          movr ebx, egx   
239 [0xef]:          popobj2    
240 [0xf0]:          movr adx, ebx   
241 [0xf1]:          chklen adx   
242 [0xf2]:          movnd adx   
243 [0xf3]:          popobj   
244 [0xf4]: line: 57 movg @40 // @std.io#thread_result   
245 [0xf5]:          movn #13   
247 [0xf7]:          pushobj   
248 [0xf8]:          movg @40 // @std.io#thread_result   
249 [0xf9]:          movn #17   
251 [0xfb]:          pushobj   
252 [0xfc]:          loadl ebx, fp+0   
253 [0xfd]:          movr egx, ebx   
254 [0xfe]:          inc ebx   
255 [0xff]:          smovr_2 ebx, fp+0   
256 [0x100]:          movr ebx, egx   
257 [0x101]:          popobj2    
258 [0x102]:          movr adx, ebx   
259 [0x103]:          chklen adx   
260 [0x104]:          movnd adx   
261 [0x105]:          popobj   
262 [0x106]: line: 58 movg @40 // @std.io#thread_result   
263 [0x107]:          movn #14   
265 [0x109]:          pushobj   
266 [0x10a]:          movg @40 // @std.io#thread_result   
267 [0x10b]:          movn #17   
269 [0x10d]:          pushobj   
270 [0x10e]:          loadl ebx, fp+0   
271 [0x10f]:          movr egx, ebx   
272 [0x110]:          inc ebx   
273 [0x111]:          smovr_2 ebx, fp+0   
274 [0x112]:          movr ebx, egx   
275 [0x113]:          popobj2    
276 [0x114]:          movr adx, ebx   
277 [0x115]:          chklen adx   
278 [0x116]:          movnd adx   
279 [0x117]:          popobj   
280 [0x118]: line: 59 movg @40 // @std.io#thread_result   
281 [0x119]:          movn #15   
283 [0x11b]:          pushobj   
284 [0x11c]:          movg @40 // @std.io#thread_result   
285 [0x11d]:          movn #17   
287 [0x11f]:          pushobj   
288 [0x120]:          loadl ebx, fp+0   
289 [0x121]:          movr egx, ebx   
290 [0x122]:          inc ebx   
291 [0x123]:          smovr_2 ebx, fp+0   
292 [0x124]:          movr ebx, egx   
293 [0x125]:          popobj2    
294 [0x126]:          movr adx, ebx   
295 [0x127]:          chklen adx   
296 [0x128]:          movnd adx   
297 [0x129]:          popobj   
298 [0x12a]: line: 60 movg @40 // @std.io#thread_result   
299 [0x12b]:          movn #16   
301 [0x12d]:          pushobj   
302 [0x12e]:          movg @40 // @std.io#thread_result   
303 [0x12f]:          movn #17   
305 [0x131]:          pushobj   
306 [0x132]:          loadl ebx, fp+0   
307 [0x133]:          movr egx, ebx   
308 [0x134]:          inc ebx   
309 [0x135]:          smovr_2 ebx, fp+0   
310 [0x136]:          movr ebx, egx   
311 [0x137]:          popobj2    
312 [0x138]:          movr adx, ebx   
313 [0x139]:          chklen adx   
314 [0x13a]:          movnd adx   
315 [0x13b]:          popobj   
316 [0x13c]:          ret   
317 [0x13d]:          ret   


function: std#tmp.$03internal_static_init[4123] params(0) in file: lib\support\/0.2.9//random.sharp:32:5: note:  
		class tmp {
		    ^

0 [0x0]: line: 34 call @1924 // <std#__srt_global.utc_mills>   
1 [0x1]:          loadval ebx   
2 [0x2]:          rstore ebx   
3 [0x3]:          movi #4, ebx   
5 [0x5]:          loadval ecx   
6 [0x6]:          shr ecx, ebx -> ebx   
7 [0x7]:          rstore ebx   
8 [0x8]:          movg @0 // @std#__srt_global   
9 [0x9]:          movn #1   
11 [0xb]:          loadval ebx   
12 [0xc]:          movi #0, adx   
14 [0xe]:          rmov adx, ebx   
15 [0xf]: line: 35 movg @0 // @std#__srt_global   
16 [0x10]:          movn #1   
18 [0x12]:          movi #0, adx   
20 [0x14]:          iaload ebx, adx   
21 [0x15]:          rstore ebx   
22 [0x16]:          call @2392 // <platform.kernel#vm.random_seed>   
23 [0x17]:          ret   
24 [0x18]:          ret   


lambda: std.io.task#__srt_global.anon_func$4124[4124] params(1) in file: lib\support\/0.2.9//io//task//job.sharp:27:29: note:  
		                fib = slice({ args ->
		                            ^

0 [0x0]: line: 28 pushl 0   
1 [0x1]:          movi #0, ebx   
3 [0x3]:          popobj2    
4 [0x4]:          movr adx, ebx   
5 [0x5]:          chklen adx   
6 [0x6]:          movnd adx   
7 [0x7]:          movi #32, cmt   
9 [0x9]:          cast cmt   
10 [0xa]:          smovr_3 fp+1   
11 [0xb]: line: 29 pushl 1   
12 [0xc]:          call @2198 // <std.io.task#job.execute>   
13 [0xd]: line: 30 istorel 0, fp+0   
15 [0xf]:          ret   


lambda: std.io.task#__srt_global.anon_func$4125[4125] params(2) in file: lib\support\/0.2.9//io//task//job_master.sharp:55:35: note:  
				job_queue.remove(scheduled_job, { it, it2 -> return it.id == it2.id; });
		                                  ^

0 [0x0]: line: 55 movl 0   
1 [0x1]:          movn #16   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #16   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


lambda: std.io.task#__srt_global.anon_func$4126[4126] params(2) in file: lib\support\/0.2.9//io//task//job_master.sharp:56:38: note:  
				running_jobs.remove(scheduled_job, { it, it2 -> return it.id == it2.id; });
		                                     ^

0 [0x0]: line: 56 movl 0   
1 [0x1]:          movn #16   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #16   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


lambda: std.io.task#__srt_global.anon_func$4127[4127] params(2) in file: lib\support\/0.2.9//io//task//job_master.sharp:71:40: note:  
				          running_jobs.remove(schdj, { it, it2 -> return it.id == it2.id; });
		                                       ^

0 [0x0]: line: 71 movl 0   
1 [0x1]:          movn #16   
3 [0x3]:          movi #0, adx   
5 [0x5]:          iaload ebx, adx   
6 [0x6]:          rstore ebx   
7 [0x7]:          movl 1   
8 [0x8]:          movn #16   
10 [0xa]:          movi #0, adx   
12 [0xc]:          iaload ebx, adx   
13 [0xd]:          loadval ecx   
14 [0xe]:          test ecx, ebx   
15 [0xf]:          return_val cmt   
16 [0x10]:          ret   


lambda: std.io.task#__srt_global.anon_func$4128[4128] params(2) in file: lib\support\/0.2.9//io//task//job_scheduler.sharp:117:52: note:  
		                        jobs.remove(scheduled_job, { it, it2 -> return it.id == it2.id; });
		                                                   ^

0 [0x0]: line: 117 movl 0   
1 [0x1]:           movn #16   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #16   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           test ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


lambda: std.io.task#__srt_global.anon_func$4129[4129] params(2) in file: lib\support\/0.2.9//io//task//job_scheduler.sharp:132:48: note:  
		                    jobs.remove(scheduled_job, { it, it2 -> return it.id == it2.id; });
		                                               ^

0 [0x0]: line: 132 movl 0   
1 [0x1]:           movn #16   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           rstore ebx   
7 [0x7]:           movl 1   
8 [0x8]:           movn #16   
10 [0xa]:           movi #0, adx   
12 [0xc]:           iaload ebx, adx   
13 [0xd]:           loadval ecx   
14 [0xe]:           test ecx, ebx   
15 [0xf]:           return_val cmt   
16 [0x10]:           ret   


lambda: std.io.task#__srt_global.anon_func$4130[4130] params(1) in file: lib\support\/0.2.9//io//task//job_scheduler.sharp:156:19: note:  
		        pool.find({ t ->
		                  ^

0 [0x0]: line: 157 pushl 0   
1 [0x1]:           movg @30 // @std.io.task#__srt_global   
2 [0x2]:           movn #3   
4 [0x4]:           pushobj   
5 [0x5]:           call @2282 // <std.io#thread.operator==>   
6 [0x6]:           loadval ebx   
7 [0x7]:           movr cmt, ebx   
8 [0x8]:           jne 12   
9 [0x9]:           istorel 0, fp+0   
11 [0xb]:           ret   
12 [0xc]:           nop   
13 [0xd]: line: 159 istorel 0, fp+1   
15 [0xf]: line: 160 movg @30 // @std.io.task#__srt_global   
16 [0x10]:           movn #6   
18 [0x12]:           pushobj   
19 [0x13]:           movg @30 // @std.io.task#__srt_global   
20 [0x14]:           movn #8   
22 [0x16]:           movn #2   
24 [0x18]:           pushobj   
25 [0x19]:           itest ebx   
26 [0x1a]:           movr cmt, ebx   
27 [0x1b]:           jne 36   
28 [0x1c]: line: 161 movg @30 // @std.io.task#__srt_global   
29 [0x1d]:           movn #5   
31 [0x1f]:           movi #0, adx   
33 [0x21]:           iaload ebx, adx   
34 [0x22]:           smovr_2 ebx, fp+1   
35 [0x23]:           jmp @43   
36 [0x24]: line: 163 movg @30 // @std.io.task#__srt_global   
37 [0x25]:           movn #4   
39 [0x27]:           movi #0, adx   
41 [0x29]:           iaload ebx, adx   
42 [0x2a]:           smovr_2 ebx, fp+1   
43 [0x2b]:           nop   
44 [0x2c]: line: 166 pushl 0   
45 [0x2d]:           call @2279 // <std.io#thread.is_active>   
46 [0x2e]:           loadval ebx   
47 [0x2f]:           not ebx, ebx   
48 [0x30]:           skpe ebx // pc = 57   
49 [0x31]:           movl 0   
50 [0x32]:           pushobj   
51 [0x33]:           call @2070 // <std.io.fiber#fiber.poll>   
52 [0x34]:           loadval ebx   
53 [0x35]:           rstore ebx   
54 [0x36]:           loadl ebx, fp+1   
55 [0x37]:           loadval ecx   
56 [0x38]:           lt ecx, ebx   
57 [0x39]:           return_val cmt   
58 [0x3a]:           ret   


lambda: std.io.task#__srt_global.anon_func$4131[4131] params(1) in file: lib\support\/0.2.9//io//task//job_scheduler.sharp:195:15: note:  
		    pool.find({ t ->
		              ^

0 [0x0]: line: 196 pushl 0   
1 [0x1]:           movg @30 // @std.io.task#__srt_global   
2 [0x2]:           movn #3   
4 [0x4]:           pushobj   
5 [0x5]:           call @2282 // <std.io#thread.operator==>   
6 [0x6]:           loadval ebx   
7 [0x7]:           movr cmt, ebx   
8 [0x8]:           jne 12   
9 [0x9]:           istorel 0, fp+0   
11 [0xb]:           ret   
12 [0xc]:           nop   
13 [0xd]: line: 198 movg @30 // @std.io.task#__srt_global   
14 [0xe]:           movn #5   
16 [0x10]:           movi #0, adx   
18 [0x12]:           iaload ebx, adx   
19 [0x13]:           smovr_2 ebx, fp+1   
20 [0x14]: line: 199 pushl 0   
21 [0x15]:           call @2279 // <std.io#thread.is_active>   
22 [0x16]:           loadval ebx   
23 [0x17]:           not ebx, ebx   
24 [0x18]:           skpe ebx // pc = 34   
25 [0x19]:           movl 0   
26 [0x1a]:           pushobj   
27 [0x1b]:           call @2070 // <std.io.fiber#fiber.poll>   
28 [0x1c]:           loadval ebx   
29 [0x1d]:           rstore ebx   
30 [0x1e]:           loadl ebx, fp+1   
31 [0x1f]:           loadval ecx   
32 [0x20]:           lt ecx, ebx   
33 [0x21]:           movr ebx, cmt   
34 [0x22]:           movr cmt, ebx   
35 [0x23]:           jne 47   
36 [0x24]: line: 200 movg @30 // @std.io.task#__srt_global   
37 [0x25]:           movn #7   
39 [0x27]:           movi #0, adx   
41 [0x29]:           iaload ebx, adx   
42 [0x2a]:           movr egx, ebx   
43 [0x2b]:           inc ebx   
44 [0x2c]:           movi #0, adx   
46 [0x2e]:           rmov adx, ebx   
47 [0x2f]:           nop   
48 [0x30]: line: 202 istorel 0, fp+0   
50 [0x32]:           ret   


lambda: std.io.task#__srt_global.anon_func$4132[4132] params(1) in file: lib\support\/0.2.9//io//task//job_scheduler.sharp:209:19: note:  
		        pool.find({ t ->
		                  ^

0 [0x0]: line: 210 pushl 0   
1 [0x1]:           movg @30 // @std.io.task#__srt_global   
2 [0x2]:           movn #3   
4 [0x4]:           pushobj   
5 [0x5]:           call @2282 // <std.io#thread.operator==>   
6 [0x6]:           loadval ebx   
7 [0x7]:           movr cmt, ebx   
8 [0x8]:           jne 12   
9 [0x9]:           istorel 0, fp+0   
11 [0xb]:           ret   
12 [0xc]:           nop   
13 [0xd]: line: 212 pushl 0   
14 [0xe]:           call @2279 // <std.io#thread.is_active>   
15 [0xf]:           loadval ebx   
16 [0x10]:           skne ebx // pc = 26   
17 [0x11]:           movl 0   
18 [0x12]:           pushobj   
19 [0x13]:           call @2070 // <std.io.fiber#fiber.poll>   
20 [0x14]:           loadval ebx   
21 [0x15]:           rstore ebx   
22 [0x16]:           movi #1, ebx   
24 [0x18]:           loadval ecx   
25 [0x19]:           test ecx, ebx   
26 [0x1a]:           return_val cmt   
27 [0x1b]:           ret   


lambda: std.io.task#__srt_global.anon_func$4133[4133] params(1) in file: lib\support\/0.2.9//io//task//job_scheduler.sharp:223:15: note:  
		    pool.find({ t ->
		              ^

0 [0x0]: line: 224 movg @30 // @std.io.task#__srt_global   
1 [0x1]:           movn #4   
3 [0x3]:           movi #0, adx   
5 [0x5]:           iaload ebx, adx   
6 [0x6]:           smovr_2 ebx, fp+1   
7 [0x7]: line: 226 pushl 0   
8 [0x8]:           call @2279 // <std.io#thread.is_active>   
9 [0x9]:           loadval ebx   
10 [0xa]:           not ebx, ebx   
11 [0xb]:           skpe ebx // pc = 21   
12 [0xc]:           movl 0   
13 [0xd]:           pushobj   
14 [0xe]:           call @2070 // <std.io.fiber#fiber.poll>   
15 [0xf]:           loadval ebx   
16 [0x10]:           rstore ebx   
17 [0x11]:           loadl ebx, fp+1   
18 [0x12]:           loadval ecx   
19 [0x13]:           lt ecx, ebx   
20 [0x14]:           movr ebx, cmt   
21 [0x15]:           movr cmt, ebx   
22 [0x16]:           jne 34   
23 [0x17]: line: 227 movg @30 // @std.io.task#__srt_global   
24 [0x18]:           movn #7   
26 [0x1a]:           movi #0, adx   
28 [0x1c]:           iaload ebx, adx   
29 [0x1d]:           movr egx, ebx   
30 [0x1e]:           inc ebx   
31 [0x1f]:           movi #0, adx   
33 [0x21]:           rmov adx, ebx   
34 [0x22]:           nop   
35 [0x23]: line: 229 istorel 0, fp+0   
37 [0x25]:           ret   


lambda: std.io.task#__srt_global.anon_func$4134[4134] params(1) in file: lib\support\/0.2.9//io//task//job_scheduler.sharp:236:19: note:  
		        pool.find({ t ->
		                  ^

0 [0x0]: line: 237 pushl 0   
1 [0x1]:           call @2279 // <std.io#thread.is_active>   
2 [0x2]:           loadval ebx   
3 [0x3]:           skne ebx // pc = 13   
4 [0x4]:           movl 0   
5 [0x5]:           pushobj   
6 [0x6]:           call @2070 // <std.io.fiber#fiber.poll>   
7 [0x7]:           loadval ebx   
8 [0x8]:           rstore ebx   
9 [0x9]:           movi #1, ebx   
11 [0xb]:           loadval ecx   
12 [0xc]:           test ecx, ebx   
13 [0xd]:           return_val cmt   
14 [0xe]:           ret   


