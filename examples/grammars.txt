Optional entity:
A piece of syntax that is not needed to satify the language syntax. This indicator consists of [ ... ]

<identifier>:
First character is a letter, any proceeding characters consist of letters, numbers, or underscores

<nativetype>:
A native type consists of Sharps native defined keyword types:
- int
- short
- long
- char
- bool
- float
- double

<typeidentifier>:
An <nativetype> or (<identifier> that consists of a [class] or [struct])

<number>
A number is any character consisting of: 1234567890

<numberset>:
A number-set which starts with a <number> and contains only numbers and underscores

<number-literal>
A number-literal consists of (<number>, <numberset>, or <numberset>.<numberset>)

<modulename>:
A module-name is a <identifier> that connects a class to a specific module or directory

<string-literal>:
A string-literal starts with `"` and contains all characters until a unescaped `"` is reached or a new line.
String escape character is `\` with multiple escape values: \n, \b, \v, \t.
Variables are printed (scope based) via `{<identifier>} or {this.<identifier>} or {[<identifier = modulename>#](<identifier = classname>.<identifier>...).<identifier>}`
by concatinating the string to the value via `+ <identifier>`

<boolean-literal>:
A boolean literal consists of: `true` or `false`

<character-literal>
A character literal consists of: `'<letter>'` or `'\<letter>'`

<literal>:
A literal consists of (<number-literal>, <string-literal>, <character-literal>, or <boolean-literal>)

<value>:
A value consists of an <identifier> or a <literal>

<accesstype>:
An access-type is a restriction in the level of access that a specific class, or variable.
For a class, the access types consist of: `protected (only accessable inside the module`
FOr variables, the access types consist of: `private (only accessable inside the class)`, or `protected (only accessable inside the module)`

<singleline-comment>:
A single line comment consists of a line starting with `//` and ending in a new line. Anything preceding the `//` will be ignored.
A single line comment can be put anywhere in a line.

Module Declaration:
mod <identifier> ;

Import Declaration:
import <modulename> ;

Class Declaration:
`[<accesstype>] class <identifier = name> {}`

Method Declaration:
`[<accesstype>] function <identifier = name> ([<typeidentifier> <identifier = name>,...]) [: <typeidentifier>] {}`

Variable Declaration:
`[<accesstype>] <typeidentifier> <identifier = name> [ = <value>] ;`

Single Ling Declaration:
`//`

Method Invocation:
[<identifier = modulename>#][(<identifier = classname>.<identifier>...).]<identifier = name>([<value>,...]) ;

<return-statement>:
`return <value>` ;

