Optional entity:
A piece of syntax that is not needed to satify the language syntax. This indicator consists of [ ... ]

<identifier>:
First character is a letter, any proceeding characters consist of letters, numbers, or underscores

<nativetype>:
A native type consists of Sharps native defined keyword types:
- int
- short
- long
- char
- bool
- float
- double

<number>
A number is any character consisting of: 1234567890

<numberset>:
A number-set which starts with a <number> and contains only numbers and underscores

<number-literal>
A number-literal consists of (<number>, <numberset>, or <numberset>.<numberset>)

<string-literal>:
A string-literal starts with `"` and contains all characters until a unescaped `"` is reached or a new line.
String escape character is `\` with multiple escape values: \n, \b, \v, \t.
Variables are printed (scope based) via `{<refrence-identifier>} or {self-><refrence-identifier>}`
by concatinating the string to the value via `+ <refrence-identifier>`

<boolean-literal>:
A boolean literal consists of: `true` or `false`

<character-literal>
A character literal consists of: `'<letter>'` or `'\<letter>'`

<literal>:
A literal consists of (<number-literal>, <string-literal>, <character-literal>, or <boolean-literal>)

<modulename>:
A module-name is a <identifier> that connects a class to a specific module or directory.
<identifier>[(.<identifier>...)]#

<refrence-pointer>:
A refrence ptr is a specific pointer to any given variable, function, or class within an entity.
[<modulename>#]<identifier>*(.<identifier>)

<refrence-identifier>:
A reference identifier is an identifier that may be an <identifier> or <refrence-pointer>

<typeidentifier>:
An <nativetype> or <refrence-identifier>

<value>:
A value consists of an <expression>

<uType>:
<typeidentifier> [([])] [<MemAccessFlag>]

<MemAccessFlag>:
'&'
    | '*'

<value-list>:
[ '(' <value> (',' <value>)* ')']

<uTypeArgOpt>:
<uType> [<identifier>]

<uTypeArg>:
<uType> <identifier>

<uTypeArg-list-opt>;
[ '(' <uTypeArgOpt> (',' <uTypeArgOpt>)* ')']

<uTypeArg-list>;
[ '(' <uTypeArg> (',' <uTypeArg>)* ')']

<VectorArray>:
'{' <expression> (',' <expression>)* '}'

<assign-expr>:
'='
   |   '+='
   |   '-='
   |   '*='
   |   '/='
   |   '&='
   |   '|='
   |   '^='
   |   '>>=' // not added
   |   '<<=' // not added
   |   '%='

<override-operator>:
<assign-expr>
    | '*'
    |'/'
    |'%'
    | '+'
    | '-'
    | '++'
    | '--'
    | '=' // must return left assignee type
    | '==' // must return bool

<dot-notation-call-expr>:
[.] <refrence-identifier> <value-list> [expression]

<primary-expr>:
<literal>
    | [.] <uType> '.' class
    | <refrence-identifier>
    |  <dot-notation-call-expr>

<expression>:
<primary-expr>
    | 'self'
    | 'self' '->' <expression>
    | 'base' '->' <expression>
    | null
    | '.' class
    | new uType [([<value-list>] | [VectorArray>])]
    | expression '[' expression ']' [expression]
    | '(' uType ')' expression
    | expression ('++' | '--')
    | ('+' | '-' | '++' | '--') expression
    | '!' expression
    | '(' expression ')' [<dot-notation-call-expr>]
    | <VectorArray> // allowed for processing purposes only language does not allow random arrays
    | expression ('*'|'/'|'%') expression
    | expression ('+'|'-') expression
    | expression ('<' '<' | '>' '>') expression
    | expression ('<=' | '>=' | '>' | '<') expression
    | expression ('==' | '!=') expression
    | expression ('&' | '^' | '|' | '&&' | '||') expression
    | expression '?' expression ':' expression
    | expression <assign-expr> expression

<accesstype>:
An access-type is a restriction in the level of access that a specific class, or variable.
For a class, the access types consist of: `protected (only accessable inside the module`
FOr variables, the access types consist of: `private (only accessable inside the class)`,
`public (accessible anywhere)`
`static (accessable from a class without an instance)`,
`override (overriding a functions previous implementation in superclass)`,
or `const (a variable that cannot be changed)`

<singleline-comment>:
A single line comment consists of a line starting with `//` and ending in a new line. Anything preceding the `//` will be ignored.
A single line comment can be put anywhere in a line.

Module Declaration:
mod <modulename> ;

Import Declaration:
import <modulename> ;

Class Declaration:
`[<accesstype>] class <identifier = name> [base <refrence-identifier> ] {}`

<block>:
{ <statements>* }

Class Constructor Declaration:
`[<accesstype>] <identifier = name> <uTypeArg-list> <block>

Method Declaration:
`[<accesstype>] function <identifier = name> <uTypeArg-list> [: <uType>] <block>

Operator Declaration:
`[<accesstype>] function operator <override-operator> <uTypeArg-list> [: <uType>] <block>

Variable Declaration statement:
`[<accesstype>] <uType> <identifier = name> <MemAccessFlag> [ <assign-expr> <value>] [, <variable-decl>] ;`

Single Line comment Declaration:
`//`

Method Invocation statement:
<refrence-identifier = name>([<value-list>]) ;

If statement:
if (<expression>) <block> [else [if] block]*

While statement:
while (<expression>) <block>

Do While statement:
do  <block> while(<expression>) ;

catchClause:
catch (<utypeArgOpt>) block

finallyBlock;
finally <block>

Try/catch  statement:
try <block> [catchClause [finallyBlock] ]

Throw statement:
throw <expression> ;

<return-statement>:
`return <value>` ;

<macros-decliration>:
'macros' <identifier> <uTypeArg-list> <block> ;

<asm-decl>: // not added
Inline assembly decliration that can only be declared in a method or macros
asm ( <asm-statement>* ) ;

<statement>:
<return-statement>
     | <if-statement>
     | <while-statement>
     | <dowhile-statement>
     | <trycatch-statement>
     | <throw-statement>
     | continue [identifier] ;
     | break ;
     | goto [identifier] ;
     | identifier ':' <statement>
     | <variable-declaration>
     | <expression>
     | <asm-decl> // add this