Sharp syntax

<identifier>:
First character is a letter, any proceeding characters consist of letters, numbers, or underscores

<nativetype>:
Sharps native defined keyword types:
- var
- object

<number>:
A number is any character consisting of: 1234567890

<numberset>:
A number-set which starts with a <number> and contains only numbers and underscores
i.e. 128_4 773_459_1234

<storagelocality>:
An identifier that states where in memory the data will be stored:
- local :: redundant but added for completeness as all memory is allocated on the stack
- thread_local :: storage specifically unique and allocated individually and not shared between threads

<number-literal>
A number-literal consists of (<number>, <numberset>, or <numberset>.<numberset>)
i.e. 773_459_1234.7

<string-literal>:
A string-literal starts with `"` and contains all characters until a unescaped `"` is reached or a new line.
String escape character is `\` with multiple escape values: \n, \b, \v, \t.
Variables are printed (scope based) via `{<refrence-identifier>} or {self-><refrence-identifier>}`
by concatinating the string to the value via `+ <refrence-identifier>`

<boolean-literal>:
A boolean literal consists of: `true` or `false`

<character-literal>
A character literal consists of: `'<letter>'` or `'\<letter>'`

<literal>:
A literal consists of (<number-literal>, <string-literal>, <character-literal>, or <boolean-literal>)

<dot-notation-format>:
A module-name is a <identifier> that connects a class to a specific module or directory.
<identifier>[(.<identifier>...)]#

<refrence-pointer>:
A refrence ptr is a specific pointer to any given variable, function, or class within an entity.
[<dot-notation-format>#]<identifier>*[< <refrence-identifier-list> >](.<identifier>[< <refrence-identifier-list> >])

<refrence-identifier>:
A reference identifier is an identifier that may be a <refrence-pointer>

<refrence-identifier-list>:
<refrence-identifier> [,<refrence-identifier>...]

<enum-identifier>:
<identifier> [= <expression>]

<enum-identifier-list>:
<enum-identifier> [, <enum-identifier>...]

<Utype-list>:
<uType> [,<uType>...]

<identifier-list>:
<identifier> [,<identifier>...]

<typeidentifier>:
An <nativetype> or <refrence-identifier> or <function-pointer>

<function-ptr>:
'(' <Utype-list> `)` `(` [<utype>]* `)`

<value>:
A value consists of an <expression>

<uType>:
<typeidentifier> [([])]                 i.e. object[] Main.foo[]

<utype-naked>:
<typeidentifier>

<value-list>:
[ '(' <value> (',' <value>)* ')']           i.e. (2, "hello") ('t')

<field-initlization>:
<utype-naked> '=' <expression>      i.e. name = "john" time = getUTCTimeInMills();

<qualifying-field-initlization-list>:
[ <field-initlization> (',' <field-initilization>)* ]

<expression-list>:
[ <expression> (',' <expression>)* ]           i.e. <value-list> without '(' and ')'

<uTypeArgOpt>:
[<identifier> `:`] <uType>

<uTypeArg>:
<identifier> : <uType>                         i.e. dog: object  cat: Animal

<uTypeArg-list-opt>:
[ '(' <uTypeArgOpt> (',' <uTypeArgOpt>)* ')']

<uTypeArg-list>;
[ '(' <uTypeArg> (',' <uTypeArg>)* ')']      i.e (object arg1) (Double arg1, object arg2)

<VectorArray>:
'{' <expression> (',' <expression>)* '}'      i.e. int[] numbers = new int[] { 1, 2, 3, }

<assign-expr>:
'='
   |   '+='
   |   '-='
   |   '*='
   |   '/='
   |   '&='
   |   '|='
   |   '^='
   |   '>>=' // not added
   |   '<<=' // not added
   |   '%='

<override-operator>:
<assign-expr>
    | '*'
    |'/'
    |'%'
    | '+'
    | '-'
    | '++'
    | '--'
    | '='
    | '=='

<array-expression>:
expression '[' expression ']' [<dot-notation-call-expr>] expression

<lambda-return-type>:
`(` <utype> `)`

<dict-type>:
`as (` <utype>, <utype> `)`

<dot-notation-call-expr>:
[.] <utype-naked> [<value-list> [<dot-notation-call-expr> | <array-expression>]]  i.e. x.buildtask(405).execute()[4];

<primary-expr>:
<literal>                                       // ast_literal_e
    | [.] <uType> '.' class                     // ast_utype_class_e    Main.class
    | 'self'
    | 'self' '->' <dot-notation-call-expr>
    | 'base' '->' <dot-notation-call-expr>
    | <dot-notation-call-expr>                 // ast_dot_not_e
    | new uType [([<value-list>] | [VectorArray>])] // TODO: add array creation
    | new uType { <expression-list> }               // new_class_field_expression
    | new uType { <qualifying-field-initlization-list> } // new_class_field_init
    | { [<identifier = name> [: <uType>]]* -> <lambda-return-type> <lambda-block> }    // lambda function
    | { [<dict-type>] [<expression> : <expression>]* }    // dictionary
    | { [<dict-type>] : }    // empty dictionary
    | sizeof '(' expression ')'
    | free '(' expression ')'
    | malloc '(' uType, expression ')'
    | '(' uType ')' expression
    | '(' expression ')' [<dot-notation-call-expr>] expression
    | null
    | <array-expression>
    | expression ('++' | '--') [expression]

<expression>:
<primary-expr>
    | ('+' | '-' | '++' | '--') expression
    | '!' expression
    | <VectorArray> // allowed for processing purposes only language does not allow random arrays
    | expression ('*'|'/'|'%') expression
    | expression ('+'|'-') expression
    | expression ('<' '<' | '>' '>') expression
    | expression ('<=' | '>=' | '>' | '<') expression
    | expression ('==' | '!=') expression
    | expression ('&' | '^' | '|' | '&&' | '||') expression
    | expression '?' expression ':' expression
    | expression <assign-expr> expression

<accesstype>:
An access-type is a restriction in the level of access that a specific class, or variable.
For a class, the access types consist of: `protected (only accessable inside the module`
FOr variables, the access types consist of: `private (only accessable inside the class)`,
`public (accessible anywhere)`
`static (accessable from a class without an instance)`,
or `const (a variable that cannot be changed)`

<singleline-comment>:
A single line comment consists of a line starting with `//` and ending in a new line. Anything preceding the `//` will be ignored.
A single line comment can be put anywhere in a line.

Module Declaration:
mod <identifier>[(`.`<identifier>)+] ;

Import Declaration:
import <identifier>[(`.` [`*` | <identifier>] )+];

Class Declaration:
`[<accesstype>] class <identifier = name> [base <refrence-identifier> ] [: <refrence-identifier-list>] {}`

Mutate Declaration:
mutate <refrence-identifier> [base <refrence-identifier> ] [: <refrence-identifier-list>] {}`

Generic Class Declaration:
`[<accesstype>] class <identifier = name> `<` <identifier-list> `>` [base <refrence-identifier> ] [: <refrence-identifier-list>] {}`

Generic Interface Declaration:
`[<accesstype>] interface <identifier = name> `<` <identifier-list> `>` [base <refrence-identifier> ] [: <refrence-identifier-list>] {}`

interface Declaration:
`[<accesstype>] interface <identifier = name> [base <refrence-identifier> ] [: <refrence-identifier-list>] {}`

enum Declaration:
`[<accesstype>] enum <identifier = name>  { [<enum-identifier-list>] }`

<block>:
{ <statements>* }

<lambda-block>:
 <statements>*

<switch-block>:
 { <switch-declarator>* }

 <switch-declarator>:
 <case-declarator> | <default-declarator>

 <case-declarator>:
 case <expression>: (<statement> | <block>)*

 <default-declarator>:
 default <expression>: (<statement> | <block>)*

Class Constructor Declaration:
`[<accesstype>] <identifier = name> <uTypeArg-list> <block>

Method Declaration:
`[<accesstype>] def <identifier = name> <uTypeArg-list> [: <uType>] [ <block> | <infer-expr> ]

Init Declaration:
init <block>

Delegate Method Declaration:
`[<accesstype>] def delegate::<identifier = name> <uTypeArg-list> [: <uType>]

Operator Declaration:
`[<accesstype>] def operator <override-operator> <uTypeArg-list> [: <uType>] <block>

Variable Declaration statement:
`[<accesstype>] [<storagelocality>] <identifier = name> [: <uType>] [ <infer-expr> | <assign-expr> <value>] (; [<getter-setter>] | [, <variable-decl> ;])`

Getter Declaration:
 `get` <block>

Setter Declaration:
 `set` <identifier> `->` <block>

Alias Declaration:
alias <utype> as <identifier>

Single Line comment Declaration:
`//`

Method Invocation statement:
<refrence-identifier = name>([<value-list>]) ;

If statement:
if (<expression>) <block> [else [if] block]*

While statement:
while (<expression>) <block>

Lock statement:
lock (<expression>) <block>

Do While statement:
do  <block> while(<expression>) ;

Switch statement:
switch (<expression>) <switch-block>

For loop statement:
for ( [<uTypeArg>]; [<expression>]; <expression>) block

Foreach statement:
foreach ( <uTypeArg> : <expression> ) block

catchClause:
catch (<utypeArgOpt>) block

finallyBlock;
finally <block>

Try/catch  statement:
try <block> [catchClause [finallyBlock] ]

Throw statement:
throw <expression> ;

<return-statement>:
`return <value>` ;

<asm-decl>: // not added
Inline assembly decliration that can only be declared in a method or macros
asm ( <string-literal>+ ) ;

<statement>:
<return-statement>
     | <if-statement>
     | <while-statement>
     | <dowhile-statement>
     | <switch-statement>
     | <lock-statement>
     | <alias-decl>
     | <trycatch-statement>
     | <throw-statement>
     | continue ;
     | break ;
     | goto identifier ;
     | identifier ':' <statement>
     | <variable-declaration>
     | <expression>
     | <asm-decl>