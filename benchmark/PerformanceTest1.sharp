mod app;

import std;

// classic nbody test
def main(string[] args) : var {
    var n = string.parseInt(args[0]);

    NBodySystem bodies = new NBodySystem();
    println(bodies.energy());
    for (var i=0; i<n; ++i)
       bodies.advance(0.01);
    println(bodies.energy());
}

public class NBodySystem {
   private static const var LENGTH = 5;

   private Body[] bodies;

   public NBodySystem(){
      bodies = new Body[]{
            Body.sun(),
            Body.jupiter(),
            Body.saturn(),
            Body.uranus(),
            Body.neptune()
         };

      var px = 0.0;
      var py = 0.0;
      var pz = 0.0;
      for(var i=0; i < LENGTH; ++i) {
         px += bodies[i].vx * bodies[i].mass;
         py += bodies[i].vy * bodies[i].mass;
         pz += bodies[i].vz * bodies[i].mass;
      }
      bodies[0].offsetMomentum(px,py,pz);
   }

   public def advance(var dt) : var {
      Body[] b = bodies;
      for(var i=0; i < LENGTH-1; ++i) {
         Body iBody = b[i];
         var iMass = iBody.mass;
         var ix = iBody.x, iy = iBody.y, iz = iBody.z;

         for(var j=i+1; j < LENGTH; ++j) {
            Body jBody = b[j];
            var dx = ix - jBody.x;
            var dy = iy - jBody.y;
            var dz = iz - jBody.z;

            var dSquared = dx * dx + dy * dy + dz * dz;
            var distance = Math.sqrt(dSquared);
            var mag = dt / (dSquared * distance);

            var jMass = jBody.mass;

            iBody.vx -= dx * jMass * mag;
            iBody.vy -= dy * jMass * mag;
            iBody.vz -= dz * jMass * mag;

            jBody.vx += dx * iMass * mag;
            jBody.vy += dy * iMass * mag;
            jBody.vz += dz * iMass * mag;
         }
      }

      for(var i=0; i < LENGTH; ++i) {
         Body body = b[i];
         body.x += dt * body.vx;
         body.y += dt * body.vy;
         body.z += dt * body.vz;
      }
   }

   public def energy() : var {
      var dx, dy, dz, distance;
      var e = 0.0;

      for (var i=0; i < sizeof(bodies); ++i) {
         Body iBody = bodies[i];
         e += 0.5 * iBody.mass *
            ( iBody.vx * iBody.vx
                + iBody.vy * iBody.vy
                + iBody.vz * iBody.vz );

         for (var j=i+1; j < sizeof(bodies); ++j) {
            Body jBody = bodies[j];
            dx = iBody.x - jBody.x;
            dy = iBody.y - jBody.y;
            dz = iBody.z - jBody.z;

            distance = Math.sqrt(dx*dx + dy*dy + dz*dz);
            e -= (iBody.mass * jBody.mass) / distance;
         }
      }
      return e;
   }

}

public class Body {
   static const var PI = 3.141592653589793;
   static const var SOLAR_MASS = 4 * PI * PI;
   static const var DAYS_PER_YEAR = 365.24;

   public var x, y, z, vx, vy, vz, mass;

   public Body(){}

   public static def jupiter() : Body {
      Body p = new Body();
      p.x = 4.84143144246472090e+00;
      p.y = -1.16032004402742839e+00;
      p.z = -1.03622044471123109e-01;
      p.vx = 1.66007664274403694e-03 * DAYS_PER_YEAR;
      p.vy = 7.69901118419740425e-03 * DAYS_PER_YEAR;
      p.vz = -6.90460016972063023e-05 * DAYS_PER_YEAR;
      p.mass = 9.54791938424326609e-04 * SOLAR_MASS;
      return p;
   }

   public static def saturn() : Body {
      Body p = new Body();
      p.x = 8.34336671824457987e+00;
      p.y = 4.12479856412430479e+00;
      p.z = -4.03523417114321381e-01;
      p.vx = -2.76742510726862411e-03 * DAYS_PER_YEAR;
      p.vy = 4.99852801234917238e-03 * DAYS_PER_YEAR;
      p.vz = 2.30417297573763929e-05 * DAYS_PER_YEAR;
      p.mass = 2.85885980666130812e-04 * SOLAR_MASS;
      return p;
   }

   public static def uranus() : Body {
      Body p = new Body();
      p.x = 1.28943695621391310e+01;
      p.y = -1.51111514016986312e+01;
      p.z = -2.23307578892655734e-01;
      p.vx = 2.96460137564761618e-03 * DAYS_PER_YEAR;
      p.vy = 2.37847173959480950e-03 * DAYS_PER_YEAR;
      p.vz = -2.96589568540237556e-05 * DAYS_PER_YEAR;
      p.mass = 4.36624404335156298e-05 * SOLAR_MASS;
      return p;
   }

   public static def neptune() : Body {
      Body p = new Body();
      p.x = 1.53796971148509165e+01;
      p.y = -2.59193146099879641e+01;
      p.z = 1.79258772950371181e-01;
      p.vx = 2.68067772490389322e-03 * DAYS_PER_YEAR;
      p.vy = 1.62824170038242295e-03 * DAYS_PER_YEAR;
      p.vz = -9.51592254519715870e-05 * DAYS_PER_YEAR;
      p.mass = 5.15138902046611451e-05 * SOLAR_MASS;
      return p;
   }

   public static def sun() : Body {
      Body p = new Body();
      p.mass = SOLAR_MASS;
      return p;
   }

   public def offsetMomentum(var px, var py, var pz) : Body {
      vx = -px / SOLAR_MASS;
      vy = -py / SOLAR_MASS;
      vz = -pz / SOLAR_MASS;
      return self;
   }
}
