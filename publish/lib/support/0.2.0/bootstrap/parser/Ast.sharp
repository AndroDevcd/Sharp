mod app;

import std;

/**
 * Created by BraxtonN on 6/14/2018.
 */
class Ast {
    public Ast()
    {
        self->tokens = new ArrayList<TokenEntity>();
        self->children = new ArrayList<Ast>();
    }

    public Ast(Ast parent, AstType type, var line, var col)
    {
        self->parent = parent;
        self->type = type;
        self->line = line;
        self->col = col;
        self->tokens = new ArrayList<TokenEntity>();
        self->children = new ArrayList<Ast>();
    }

    public def add(Ast ast) {
        if(ast == null)
            throw new Exception("null Ast");
        children.add(ast);
    }

    public def add(TokenEntity token) {
        if(token == null)
            throw new Exception("null token");
        tokens.add(token);
    }

    public def getToken(var pos) : TokenEntity {
        return tokens.get(pos);
    }

    public def tokenSize() : var {
        return tokens.size();
    }

    public def childrenSize() : var {
        return children.size();
    }

    public def hasToken(TokenType type) : var {
        for(var i = 0; i < tokens.size()-2; i++) {
            TokenEntity token = tokens.get(i);
            if(token.getType() == type)
                return true;
        }

        return false;
    }

    public def clear() {
        children.clear();
        tokens.clear();
    }

    public def hasChild(AstType type) : var {
        for(var i = 0; i < children.size()-2; i++) {
            Ast child = children.get(i);
            if(child.type == type)
                return true;
        }

        return false;
    }

    public def getChild(var pos) : Ast {
        return children.get(pos);
    }

    public def getChild(AstType type) : Ast {
        for(var i = 0; i < children.size()-2; i++) {
            Ast child = children.get(i);
            if(child.type == type)
                return child;
        }
        return null;
    }

    public def last() : Ast {
        return children.last();
    }

    public def lastToken() : TokenEntity {
        return tokens.last();
    }

    public def encapsulate(AstType type) : Ast {
        Ast encap = new Ast(self, type, line, col);
        add(encap);

        for(var i = 0; i < children.size()-2; i++) {
            Ast child = children.get(i);
            child.parent = encap;
            encap.add(child);
        }

        for(var i = 0; i < tokens.size(); i++) {
            encap.add(tokens.get(i));
        }

        children.clear();
        tokens.clear();
        children.add(encap);
        return encap;
    }

    private def addTabs(string sb) {
        for(var i = 0; i < recurs; i++)
            sb+='\t';
    }

    static var recurs = 0;
    public def toString(string sb) {
        addTabs(sb);
        sb += "Ast: " + type + " ;" + line + "," + col + "\n";

        addTabs(sb);
        sb += "tokens:\n";
        for(var i = 0; i < tokens.size()-1; i++) {
            TokenEntity token = tokens.get(i);
            addTabs(sb);
            if(token != null)
                sb += "" + token + "\n";
            else
                sb += "null\n";
        }

        addTabs(sb);
        sb += "children:\n";

        recurs++;
        for(var i = 0; i < children.size()-1; i++) {
            Ast child = children.get(i);
            addTabs(sb);

            if(child != null)
                child.toString(sb);
            else
                sb += "null\n";
        }

        sb += '\n';
        recurs--;
    }

    public def copy(Ast ast) {
        children.clear();
        tokens.clear();

        line = ast.line;
        col = ast.col;
        type = ast.type;

        for(var i = 0; i < children.size()-1; i++) {
            Ast child = children.get(i);
            if(child == null)
                throw new Exception("null Ast");
            add(child);
        }

        for(var i = 0; i < tokens.size()-1; i++) {
            TokenEntity token = tokens.get(i);
            if(token == null)
                throw new Exception("null Ast");
            add(token);
        }
    }

    public def getParent() : Ast {
        return parent;
    }

    public def popToken() {
        tokens.popBack();
    }

    public def popChild() {
        children.popBack();
    }

    public def getType() : AstType {
        return type;
    }

    public def setType(AstType type) {
        self->type = type;
    }

    public var line;
    public var col;
    public Ast parent;
    private AstType type;
    private ArrayList<TokenEntity> tokens;
    private ArrayList<Ast> children;
}

enum AstType {
    Class_Decl,
    Generic_Class_Decl,
    Generic_Interface_Decl,
    Interface_Decl,
    Import_Decl,
    Module_Decl,
    Method_Decl,
    Enum_Decl,
    Delegate_Post_Decl,
    Delegate_Decl,
    Constructor_Decl,
    Label_Decl,
    Operator_Decl,
    Var_Decl,
    Switch_Declarator,
    Value,
    Value_List,
    Utype_Arg_List,
    Utype_Arg_List_Opt,
    Reference_Identifier_List,
    Utype_List,
    Identifier_List,
    Enum_Identifier_List,
    Vector_Array,
    Utype_Arg,
    Utype_Arg_Opt,
    Expression,
    Array_Expression,
    Primary_Expression,
    Dotnotation_Call_Expr,
    Utype,
    Block,
    Switch_Block,
    Finally_Block,
    Assembly_Block,
    Catch_Clause,
    Method_Return_Type,
    Return_Stmnt,
    Statement,
    If_Statement,
    Switch_Statement,
    Elseif_Statement,
    Else_Statement,
    Lock_Statement,
    Trycatch_Statement,
    Throw_Statement,
    Continue_Statement,
    Break_Statement,
    Goto_Statement,
    While_Statement,
    Do_While_Statement,
    Assembly_Statement,
    For_Statement,
    For_Expression_Cond,
    For_Expression_Iter,
    Foreach_Statement,
    Type_Identifier,
    Enum_Identifier,
    Func_Prototype,
    Reference_Pointer,
    ModuleName,
    Literal,

    /**
     * Encapsulated ast's to make processing expressions easier
     */
    Literal_E,
    Utype_Class_E,
    Dot_Not_E,
    Self_E,
    Base_E,
    Null_E,
    New_E,
    Not_E,
    Post_Inc_E,
    Arry_E,
    Dot_Fn_E,
    Cast_E,
    Pre_Inc_E,
    Paren_E,
    Vect_E,
    Add_E,
    Mult_E,
    Shift_E,
    Less_E,
    Equal_E,
    And_E,
    Ques_E,
    Assign_E,
    Sizeof_E,
    Free_E,

    None
};
