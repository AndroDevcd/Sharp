mod application;

class Start {
        var a=8, b, c;

    // TODO: fix System.println("file " + file.getName() + " has write access " + (file.isWriteable()==1? "yes" : "no"));
    // TODO: fix string[] files="";
    // TODO: fix public def list(File f) : string[] { object[] out; return out; }
    public static def main(string[] args) : var {
        File file = new File(new string("README1.md"));

        System.println("file " + file.getName() + " being created  ");
        file.createNewFile();
        System.println("file " + file.getName() + " rename " + file.renameTo(new File(new string("poop.md"))));
        System.println("file " + file.getName() + " read only " + file.setReadOnly());
        System.println("file " + file.getName() + " absolute path is " + file.getAbsolutePath());
        System.println("file " + file.getName() + " has read access " + file.isReadable());
        System.println("file " + file.getName() + " has write access " + file.isWriteable());
       // System.println("file " + file.getName() + " setting writeable " + file.setWritable(true));
        if(file.exists()) {
            System.println("file " + file.getName() + " exists");
        } else {
            System.println("file " + file.getName() + " dosent exist!");
        }

        file.setWritable(true);
//
        System.println("file " + file.getName() + " is a directory " + file.isDirectory());
        System.println("file " + file.getName() + " is a file " + file.isFile());
        System.println("file " + file.getName() + " is a hidden " + file.isHidden());
        System.println("file " + file.getName() + " last modified time " + file.lastModified());
        System.println("file " + file.getName() + " size is  " + file.length());
        System.println("file " + file.getName() + " being deleted  ");
        System.println("file " + file.getName() + " setting time to " + file.setLastModified(Time.timeToSecs(Time.nanoTime())));
        file.delete();

        File dir = new File(new string("tests\\tmp"));
        dir.mkdir();
        System.println("file " + dir.getPath() + " has files  ");
        string[] files = dir.list();
        foreach(string f : files) {
            System.println("file: " + f);
            File tmp = new File(dir.getPath() + "\\" + f);
            System.println("file " + tmp.getName() + " is a directory " + tmp.isDirectory());
            System.println("file: " + tmp.getPath());
            //tmp.delete();
        }
        System.println("folder is being deleted  ");
        System.println("file " + file.getName() + " size is  " + file.length());

        System.println("file " + file.getName() + " total disk space  " + file.getTotalSpace());
        System.println("file " + file.getName() + " total free disk space  " + file.getFreeSpace());
        System.println("file " + file.getName() + " total usable disk space  " + file.getUsableSpace());
//        dir.delete();
    }
}

class Callback {

    public def delegate::work();
}

interface Event {
    public def delegate::event();
}

class Callee base Callback : Event {

    public def delegate::event() {
        System.print("Event Called!");
    }

    public def delegate::work() {
        System.print("success I am Called!");
    }
}