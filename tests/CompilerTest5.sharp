mod app;

import std;

 def main(string[] args) : var {
        ArrayList<var> intArry = new ArrayList<var>(); // TODO: empty modifiers after methods classes etc. before block call
        intArry.add(9);

        Dictionary<c.ee, string> enumArry = new Dictionary<c.ee, string>(); // TODO: empty modifiers after methods classes etc. before block call
        enumArry.put(c.ee.red, "hi");

        try {
            println(" intArry[0] = " + intArry.get(99));
        } catch(Exception e) {
            // we know why
        }

        println("int array size " +  intArry.size());
        println("int isEmpty " +  intArry.empty());

        var[] tmp = intArry.toArray();
        foreach(var v : tmp) {
            println("int  " +  v);
        }
        tmp = null;

        intArry.set(0, 15);
        println("intArry[0] = " + intArry.get(0));

        intArry.insert(0, 16);
        println("intArry[0] = " + intArry.get(0));
        println("int array size " +  intArry.size());

        intArry.remove(1);
        println("intArry[0] = " + intArry.get(0));
        println("int array size " +  intArry.size());

        intArry.clear();
        println("int array size " +  intArry.size());

        Dictionary<string, var> dict = new Dictionary<string, var>();

        dict.put("Dave" +"", 2);
        dict.put("Steve" +"", 3);

        println("dictionary size " +  dict.size());
        println("dave = " +  dict.get("Dave" +""));
        println("steve = " +  dict.get("Steve" +""));

        dict.remove("Steve" +"");
        println("dictionary size " +  dict.size());
        println("dave = " +  dict.get("Dave" +""));
        println("steve = " +  dict.get("Steve" +""));

        asm(" nop nop nop nop nop");
        c.Tmpl<int> t = new c.Tmpl<int>();

        c.IFace<int> ifc = new c.IFace<int>();
    }

class c{
    class Tmpl<T> {
        def foo(T v) {

        }
    }

    interface IFace<T> {

    }

    enum ee {
        red,
        GREEN,
        BLUE
    };
    }
