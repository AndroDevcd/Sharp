mod internal;

class k {
    var[] tt;

    k(var[] ll) {
        tt = null;
    }
}

/**
 * Created by BraxtonN on 5/15/2018.
 */
class Runtime base k {
    var x;
    var[] iarry;

    Runtime() {
        base->k(null);
        base->tt = null;
    }

    def printX() {
        __print_(self->x, false);
    }

    static def print(var[] message) {
        asm("tests/print.asm");
    }

    static def print(var char) {
        asm("tests/printc.asm");
    }

    static def fact(var x) : var {
        return (x == 1) ? x : x * fact(x - 1);
    }

    /**
     * print a single character to the console
     */
    public static def __print_(var char, var isCharacter)
    {
        if(isCharacter) {
            asm(
                "  loadl ebx,0               // get local 'char'                                "
                "  _putc ebx                                                                   "
            );
        } else {
            asm(
                "  loadl ebx,0               // get local 'char'                                "
                "  put ebx                                                                     "
            );
        }
    }

    public static def __srt_init_(object[] args) : var {
        var[] str = "factorial of 8 is ";

        print(str);
        __print_(fact(500), false);
        __print_(' ', true);

        var[] arry = new var[10];
        foreach(var x : arry) {
            print(fact(1));
            asm("movi ' ',ebx" "_putc ebx");
        }

        for(var i = 0; i < 10; i++) {
        }

        var x = 5;
        while((--x) > 0) {
            print(x);
            asm("movi ' ',ebx" "_putc ebx");
        }

        print("done\n");

        do {
            x++;
        }while(x < 10);
        print("done loop\n");

//        This was tested and passed
//        try {
//            try {
//                throw new Exception("Hello first error");
//            } catch(Exception e) {
//                print(e.getMessage());
//                asm("movi ' ',ebx" "_putc ebx");
//                print(e.getStackTrace());
//
//                try {
//                    throw new Exception("Genericcc!!!");
//                } catch(Exception e2) {
//                    print("caught FIRSTTTT!! error ");
//                    print(e2.getMessage());
//                    throw new Exception("Genericcc 3!!!");
//                }
//            } finally {
//                print("finally!!");
//                throw new Exception("Genericcc 2!!!");
//            }
//        } finally {
//            print("finally!! yet again");
//        }

        print("doing if statements\n");
        x = 1;

        if(x == 6) {
            print("x == 6");
        } else if(x == 10) {
            print("x == 10");
        } else if(arry == null) {
            print("arry == null");
        } else if(arry != null) {
            print("arry != null");
        } else {
            print("im not sure what x is?");
        }

        x = 9;
        while(x-- > 0) {
            print(x);
            asm("movi ' ',ebx" "_putc ebx");
        }

        x = 10;
        print("x is: ");
        x %= 9;
        print(x);
        asm("movi ' ',ebx" "_putc ebx");


        print("\nthis class id is: ");
        //x = Exception.class;
        print(Runtime.class);

        Runtime run = new Runtime();
        run.x = 99;
        print("\nRuntime.x is: ");
        //x = Exception.class;
        print(run.x);

        run.iarry = new var[10];
        //run.iarry[0] = 2;
        run.iarry[0] += 2;
        run.iarry[0] -= 2;
        print("\nRuntime.x[0] is: ");
        //x = Exception.class;
        print(run.iarry[0]);

        print("\nRuntime.x is: ");
        run.printX();

        print("\nsizeof Runtime.x[] is: ");
        __print_(sizeof(run.iarry), false);

        var v = 2;
        run.x = 1;
        run.x += (v == 2) ? 1 : 0;
        print("\nx is: ");
        print(run.x);
        print("\n");
        asm("nop nop");
        asm("nop nop");
        asm("nop nop");
        asm("nop nop");

        var vv = (_int8)v;

        return 0;
    } // TODO: enforce return statements
}
