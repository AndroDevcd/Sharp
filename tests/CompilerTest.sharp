mod internal;

/**
 * Created by BraxtonN on 5/15/2018.
 */
class Runtime {

    static def print(var[] message) {
        asm("tests/print.asm");
    }

    static def printc(var char) {
        asm("tests/printc.asm");
    }

    static def fact(var x) : var {
        return (x == 1) ? x : x * fact(x - 1);
    }

    /**
     * print a single character to the console
     */
    public static def __print_(var char, var isCharacter)
    {
        if(isCharacter) {
            asm(
                "  loadl ebx,0               // get local 'char'                                "
                "  _putc ebx                                                                   "
            );
        } else {
            asm(
                "  loadl ebx,0               // get local 'char'                                "
                "  put ebx                                                                     "
            );
        }
    }

    public static def __srt_init_(object[] args) : var {
        var[] str = "factorial of 8 is ";

        print(str);
        __print_(fact(5), false);
        __print_(' ', true);

        var[] arry = new var[10];
        foreach(var x : arry) {
            printc(fact(1));
            asm("movi ' ',ebx" "_putc ebx");
        }

        for(var i = 0; i < 10; i++) {
        }

        var x = 5;
        while((--x) > 0) {
            printc(x);
            asm("movi ' ',ebx" "_putc ebx");
        }

        print("done\n");

        do {
            x++;
        }while(x < 10);
        print("done loop\n");

        try {
            throw new Exception("Hello first error");
        } catch(Exception e) {
            print(e.getMessage());
            asm("movi ' ',ebx" "_putc ebx");
            print(e.getStackTrace());

            try {
                throw new Exception("Genericcc!!!");
            } catch(Exception e) {
                print("caught FIRSTTTT!! error ");
                print(e.getMessage());
                throw new Exception("Genericcc 3!!!");
            }
        } finally {
            print("finally!!");
        }
//        return 0;
    } // TODO: enforce return statements
}
