mod app;

import std;
import std.io;

thread_local c1 cl1;
thread_local object[] arry;

class b {
//    public static thread_local b tlsBase;
    public var i;
    public static thread_local b tlsBase = null;    //passed

    public def operator++() {

    }

    class bg<T> {
        public static T v;

        class Inner<L> {
            public static thread_local T v;
        }
    }
}

class G<T,K> {
    public static thread_local T v;
    public static thread_local K vk;

    class gclass {
        public File v;
    }
}
class c1 base b{
    public var i;
    public c1 y;
    public  static thread_local object tls;

    public def foo()  {
//        self->tls = null;  //passed
//        base->tlsBase = null; //passed

    }
}

//class C<T> base G<T>      broken G is not respected

class C<T> base G<T, T>.gclass {
    public static T x;
    static thread_local object c;
}


class D<T> base b.bg<int>.Inner<int> {
    public static T x;
    static thread_local object c;
}

def foo(object[] args) : var {
    thread_local int l = new int(10);

    string s = l.toString();
//    j =((int)x).getValue();
    print("j = " + j + " l = " + s);

    return 0;
}

var i=2, j=3;
thread_local object x = new int(9);

//struct car { // this will be on next release
//    vin   = "",
//    color = RED,
//    wheels = 4,
//    hp : EngineType,
//    make, model = ""; // both make and model interred to be string
//
//    def car()
//
//}

def main() {
    x = new int(12748);
    Thread t = new Thread("foo", foo);
    object[] o = new Object[2];
    t.start(o);

    i =((int)x).getValue();
    print("i = " + i);
    t.join();
    readLine();
//    i = x;
    C<object> generic;
    D<object> generic2;
    generic.v = null;
    //thread_local File i;
//    cl1 = new c1();           passed
//    cl1.i = 9;                passed
//    cl1.y = new c1();         passed

//    object cc = new var[2]; //passed
//        var t = 9 + cl1.i;    passed
//    cl1.y.tlsBase = null;     passed
//    c1 ccs = new c1();
//    ccs.y.tlsBase = null;     passed
//    ccs.tls = null;           passed
//    c1.tls = null;            passed
//    c1.tls = new object[] { null, new c1()}; passed
//    c1.tls = new object[2];   passed
//    cl1.tls = new var[3];    // passed
//    var x = sizeof(cl1);      passed
//    (cl1.y).i = 19;           //passed
//    var[] x = (var[]) arry;   passed
//    C<object> c;
//    c.v = new Object();       //passed
//    b bb;
//    ++bb.tlsBase;             //passed
//    b bb;
//    for(var j = 0; j < 10; j++) {
//    bb.tlsBase.i = (bb.tlsBase.i ? 1 : 0);   // passed
//    var cc1 = bb.i && 4;       //passed
//    var cc2 = bb.i || 4;       //passed
//    var cc3 = bb.i | 4;       //passed
//    var cc4 = bb.i & 4;       //passed
//    }
//    if((bb.i && 4) || (bb.i || 4)) {
//        var xx = 9;
//    }
}
