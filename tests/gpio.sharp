mod application;

/**
 * Created by BraxtonN on 6/1/2018.
 */
class gpio {
    var[] pins;


    public static const var PIN_UNAVAILABLE = 0x001;
    public static const var PIN_FAIL  = 0x001;
    public static const var PIN_OK  = 0x001;

    public def register(var pin) : var {
        if(isAvailable(pin)) {

            IOStream ostream;
            try {
                File fd = new File("/sys/class/gpio/export");
                if(!fd.exists()) {
                    return PIN_FAIL;
                }

                ostream = new IOStream(fd, IOStream.OUT);
                ostream.write("" + pin);
                ostream.close();

            } catch(IOException io) {
                return PIN_FAIL;
            } finally {
                if(ostream != null) {
                    ostream.close();
                }
            }

            pins = (var[])Array.expand(pins, sizeof(pins)+1);
            pins[sizeof(pins)-1] = pin;

            return PIN_OK;
        }

        return PIN_UNAVAILABLE;
    }

    public def unregister(var pin) : var {
        if(!isAvailable(pin)) {

            IOStream ostream;
            try {
                File fd = new File("/sys/class/gpio/unexport");
                if(!fd.exists()) {
                    return PIN_FAIL;
                }

                ostream = new IOStream(fd, IOStream.OUT);
                ostream.write("" + pin);
                ostream.close();

            } catch(IOException io) {
                return PIN_FAIL;
            } finally {
                if(ostream != null) {
                    ostream.close();
                }
            }

            return PIN_OK;
        }

        return PIN_UNAVAILABLE;
    }

    public def chdir(var pin, var dir) : var {
        if(!isAvailable(pin)) {

            IOStream ostream;
            try {
                File fd = new File("/sys/class/gpio/gpio" + pin + "/direction");
                if(!fd.exists()) {
                    return PIN_FAIL;
                }

                ostream = new IOStream(fd, IOStream.OUT);
                if(dir = 1)
                    ostream.write("out");
                else
                    ostream.write("in" + pin);
                ostream.close();

            } catch(IOException io) {
                return PIN_FAIL;
            } finally {
                if(ostream != null) {
                    ostream.close();
                }
            }

            return PIN_OK;
        }

        return PIN_UNAVAILABLE;
    }

    public def read(var pin) : var {
        if(!isAvailable(pin)) {

            IOStream istream;
            string value = "";
            try {
                File fd = new File("/sys/class/gpio/gpio" + pin + "/value");
                if(!fd.exists()) {
                    return -1;
                }

                istream = new IOStream(fd, IOStream.IN);
                var _char;

                while((_char = istream.nextChar()) != -1) {
                    value += _char;
                }

                istream.close();

            } catch(IOException io) {
                 return -1;
            } finally {
                if(istream != null) {
                    istream.close();
                }
            }

            return string.parseInt(value);
        }

        return -1;
    }

    public def write(var pin,  var value) : var {
        if(!isAvailable(pin)) {

            IOStream ostream;
            try {
                File fd = new File("/sys/class/gpio/gpio" + pin + "/value");
                if(!fd.exists()) {
                    return -1;
                }

                ostream = new IOStream(fd, IOStream.OUT);
                ostream.write("" + (value ? 1 : 0));
                ostream.close();

            } catch(IOException io) {
                 return -1;
            } finally {
                if(ostream != null) {
                    ostream.close();
                }
            }

            return 0;
        }

        return -1;
    }

    private def isAvailable(var pin) : var {
        foreach(var io : pins)
        {
        	if(io == pin)
        		return false;
        }

        return true;
    }
}
