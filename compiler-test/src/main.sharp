mod main;

import (
    std.*,
    platform
);

th : thread?;
count := 0;
def main() {
    prefs := new shared_preference("settings.prefs");
    prefs.add
}


import ( std.io );

class shared_preference {
    shared_preference(file_name : string) {
        self->name = file_name;
    }

    name : string;
    prefs := new list<preference_item>();
    indexing_func : (preference_item, preference_item)(var) =
        { t1, t2 ->
            return t1.key == t2.key;
        };
    prefs_string : string;
       get {
          if(prefs_string == null) {
            sb := new string_builder();
            for(i := 0; i < items.size(); i++) {
                sb += items[i].key;
                sb += "=" + items[i].value;

                if((i + 1) < items.size()) {
                    sb += ",";
                }
            }

            request_string = sb.to_string();
          }

          return request_string;
       }

    def commit() {
       fp :=  new file(name);
       fp.write(prefs_string);
    }

    def add_item(key: string, value: string) : shared_preference {
        item := new request_item(key, value);
        index := items.indexof(item, indexing_func);

        if(index == -1)
            items.add(item);
        else
            items.at(index).value = value;

        request_string = null;
        return self;
    }

    def to_string() : string {
        return request_string;
    }

    def at(key: string): string {
        item := new request_item(key, null);
        index := items.indexof(item, indexing_func);

        if(index == -1)
            return null;
        else
            return items.at(index).value;
    }

    def clear() {
        items.clear();
        request_string = null;
    }

    enum pref_type {
       string_pref,
       bool_pref,
       short_pref,
       ushort_pref,
       byte_pref,
       int_pref,
       uint_pref,
       long_pref,
       ulong_pref,
       double_pref
    }

    class preference_item
    {
        key: string;
        value: object;
        type: pref_type;

        preference_item(k: string, v: object, t: pref_type)
        {
            key = k;
            value = v;
            type = t;
        }
    }
}
