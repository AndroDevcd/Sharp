mod main;

/**
* Created by bknun on 6/19/2023
* 
* @class user_terminal
*
* Description:
*
*/
inject acct_manager: account_manager;

def terminal_main_loop() {
    println("=================================");
    println("             JBS Bank            ");
    println("=================================");
    println();
    println("    Main User terminal");
    println();

    while(true) {
        initial_greeting();

        cmd := read_line().to_lower();
        when(cmd) {
            "help" -> {
                print_help();
            }
            "search user" -> {
                print("Please enter username: ");
                username := read_line();

                println("\nSearching for user...");
                usr := acct_manager.find_user(username);
                if(usr != null) {
                    println("User Found!\n");
                    println("Would you like to view this users information? (y\\n) ");
                    if(get_yes_no()) {
                        if(get_password(usr!!.password)) {
                            println(usr);
                        }
                    }
                } else {
                    println("No User Found!\n");
                }
            }
            "new user" -> {
                while(true) {
                    print("Please enter username: ");
                    username := read_line();

                    println("\nSearching for user...");
                    usr := acct_manager.find_user(username);

                    if(usr == null) {
                        password: string;
                        while(true) {
                            print("\nPlease enter password: ");
                            password = read_passwd();

                            print("\nPlease re-enter password: ");
                            passwd2 := read_passwd();
                            println();

                            if(password != passwd2) {
                                println("passwords did not match");
                            } else break;
                        }

                        if(acct_manager.create_user(username, password)) {
                            println("user created!");
                            break;
                        }

                        println("failed to create user!");
                    } else {
                        print("user already exists, you like to try a different username? (y\\n) ");
                        answer := get_yes_no();

                        if(!answer) {
                            break;
                        }
                    }
                }
            }
            "open account" -> {
                usr := login_user();

                if(usr != null) {
                    if(acct_manager.create_account(usr!!)) {
                        println("Account created!");
                    } else println("Failed to create account!");
                }
            }
            "deposit" -> {
                usr := login_user();

                if(usr != null) {
                    acct := get_account_for_user(usr!!);
                    if(acct != null) {
                        println("How much would you like to deposit? format (1, 1.25, 1000.65)?");
                        amount := get_io_amount();

                        print("\nwhat is the transaction for? ");
                        memo := read_line();

                        if(memo.empty()) memo = "N\\A";

                        acct!!.add_transaction(
                            new transaction(
                                amount,
                                memo,
                                acct!!.number!!.to_string()!!,
                                time.mills_time()
                            )
                        );

                        acct!!.balance += amount;
                        println("new balance: ${acct!!.balance}");
                    } else println("No account selected, cancelling.");
                }
            }
            "pay user" -> {
                usr := login_user();

                if(usr != null) {
                    acct := get_account_for_user(usr!!);
                    if(acct != null) {
                        println("How much would you like to send? format (1, 1.25, 1000.65)?");
                        amount := get_io_amount();

                        print("\nwhat is the transaction for? ");
                        memo := read_line();

                        if(memo.empty()) memo = "N\\A";

                        recipient := get_recipient();
                        if(recipient.uid == usr!!.uid) {
                            print("cannot pay yourself, use \"deposit\" instead, cancelling.");
                            continue;
                        }

                        payee := get_account_for_user(recipient);

                        if(payee != null) {
                            if(payee!!.number != acct!!.number) {
                                if(acct!!.balance >= amount) {
                                    acct!!.balance -= amount;
                                    payee!!.balance += amount;
                                    println("new balance: ${acct!!.balance}");
                                    println("new balance (${recipient.name}): ${ payee!!.balance}");
                                    acct!!.add_transaction(
                                        new transaction(
                                            -amount,
                                            memo,
                                            payee!!.number!!.to_string()!!,
                                            time.mills_time()
                                        )
                                    );

                                    payee!!.add_transaction(
                                        new transaction(
                                            amount,
                                            memo,
                                            acct!!.number!!.to_string()!!,
                                            time.mills_time()
                                        )
                                    );
                                } else println("Insufficient balance. (${acct!!.balance} sending: $amount)");
                            } else {
                                println("Cannot send money to same account, use \"deposit\" instead.");
                            }
                        } else println("Recipient account not selected, cancelling.");
                    } else println("No account selected, cancelling.");
                }
            }
            "add as secondary" -> {
                usr := login_user();

                if(usr != null) {
                    recipient := login_user()!!;
                    if(recipient.uid == usr!!.uid) {
                        println("cannot add yourself as secondary account holder, cancelling.");
                        continue;
                    }

                    secondary := get_account_for_user(recipient);

                    if(secondary != null) {
                        if(secondary!!.is_user_primary(recipient)) {
                            if(!secondary!!.add_as_secondary(usr!!)) {
                                println("User: ${usr!!.name} is already added as a secondary account holder, cancelling.");
                            }
                        } else {
                            println("Cannot add user: ${usr!!.name} as a secondary holder to account, user: ${ recipient.name} is not the primary owner");
                        }
                    } else println("Recipient account not selected, cancelling.");
                }
            }
            "list transactions" -> {
                usr := login_user();

                if(usr != null) {
                    acct := get_account_for_user(usr!!);
                    if(acct != null) {
                        println("Transactions for account (${ acct!!.number})");
                        foreach(tx in acct!!.transactions) {
                            println(tx);
                        }
                    } else println("No account selected, cancelling.");
                }
            }
            "remove account" -> {
                usr := login_user();

                if(usr != null) {
                   print("Are you sure you want to remove thr primary account for: ${usr!!.name}, all sub owners will loose access? (y\\n) ");
                   answer := get_yes_no();

                   if(answer) {
                      if(acct_manager.delete_account(usr!!)) {
                          println("Account deleted!");
                      } else println("Failed to remove account for user ${usr!!.name}, no account found!");
                   }
                }
            }
            "quit" -> {
                break;
            }
            else -> {
                println("unknown command `$cmd`, type \"help\" for a list of commands");
            }
        }
    }
}

def get_account_for_user(usr: user): bank_account? {
    accounts := acct_manager.get_associated_accounts(usr);
    if(!accounts.empty()) {
        acct: bank_account? = null;
        if(accounts.size() > 1) {
            acct = get_account_selection(usr, accounts);
        } else {
            acct = accounts.first();
        }

        return acct;
    } else {
        println("User has no accounts, try \"help\" for more information");
        return null;
    }
}

def login_user(): user? {
    while(true) {
        print("Please enter username: ");
        username := read_line();

        println("\nSearching for user...");
        usr := acct_manager.find_user(username);

        if(usr == null) {
            print("user does not exist, would you like to try a different username? (y\\n) ");
            answer := get_yes_no();

            if(!answer) {
                break;
            }
        } else {
            if(get_password(usr!!.password)) {
                return usr;
            } else return null;
        }
    }

    return null;
}

def get_io_amount(): long {
    while(true) {
        try {
            return (double.parse(read_line()) * 100).to_long();
        } catch(e: exception) {
            println("Invalid amount!");
        }
    }

    return 0;
}

def get_recipient(): user {
    while(true) {
        print("Please enter recipient username: ");
        username := read_line();

        println("\nSearching for user...");
        usr := acct_manager.find_user(username);

        if(usr != null) return usr!!;
    }

    return new user("","");
}

def get_account_selection(usr: user, accounts: list<bank_account>): bank_account? {
    println("You have more than 1 account tied to this user, which account would you like to see?");
    foreach(acct in accounts) {
        println(acct.get_owner_status(usr));
    }

    trys : var = 0;
    while(true) {
        try {
            act_num := long.parse(read_line());

            foreach(acct in accounts) {
                if(acct.number == act_num) {
                    return acct;
                }
            }

            println("Invalid account number!");

            if(trys >= 3) {
                println("Would you like to cancel? (y\\n) ");
                if(get_yes_no()) {
                    return null;
                }
            }
        } catch(e: exception) {
            trys++;
            println("Invalid account number!");
        }
    }

    return null;
}

def get_password(passwd: string) : bool {
    trys : var = 0;
    while(true) {
        println("Please enter your password: ");
        pwd := read_passwd();

        if(pwd == passwd) {
            return true;
        } else {
            trys++;
            println("Incorrect password.");

            if(trys >= 3) {
                println("Would you like to cancel? (y\\n) ");
                if(get_yes_no()) {
                    return false;
                }
            }
        }
    }

    return false;
}

def get_yes_no(): bool {
    while(true) {
        answer := read_char();
        if(answer == 'y' || answer == 'n') {
            println();
            return answer == 'y';
        }
        print("\b \b");
    }

    return false;
}

def initial_greeting() {
    println("Welcome to JBS bank\nHow may we assist you today?\nYou can type help for a list of instructions.");
}

def print_help() {
    println("JBS Bank Terminal commands:");
    println("\tSearch User (look up users info, password required)");
    println("\tNew User (create new user)");
    println("\tOpen account (create new account for user)");
    println("\tPay User (pay a user)");
    println("\tDeposit (deposit funds)");
    println("\tAdd as secondary (add user a secondary account holder)");
    println("\tList transactions (list all transactions for a users account)");
    println("\tQuit (quit the program)");

}
